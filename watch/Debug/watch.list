
watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002ea78  08000240  08000240  00001240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bf4  0802ecb8  0802ecb8  0002fcb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  080318ac  080318ac  000328ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08031a54  08031a54  00032a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 000489c6  08031a6c  08031a6c  00032a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000010  0807a434  0807a434  0007b434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM          00000008  0807a444  0807a444  0007b444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .init_array   00000014  0807a44c  0807a44c  0007b44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .fini_array   00000008  0807a460  0807a460  0007b460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data         000000fc  20000000  0807a468  0007c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 TouchGFX_Framebuffer 00045600  200000fc  0807a564  0007c0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 TouchGFX_ScratchbufferA 00000100  20045700  080bfb64  000c1700  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferB 00000100  20045800  080bfc64  000c1800  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          0001715c  20045900  080bfd64  000c1900  2**2
                  ALLOC
 15 ._user_heap_stack 00000a04  2005ca5c  080bfd64  000c1a5c  2**0
                  ALLOC
 16 .ARM.attributes 00000036  00000000  00000000  000c1900  2**0
                  CONTENTS, READONLY
 17 .debug_info   000a89bd  00000000  00000000  000c1936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00013354  00000000  00000000  0016a2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000041f0  00000000  00000000  0017d648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00003026  00000000  00000000  00181838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00043804  00000000  00000000  0018485e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000520e5  00000000  00000000  001c8062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0017c350  00000000  00000000  0021a147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000c2  00000000  00000000  00396497  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000119e0  00000000  00000000  0039655c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000047  00000000  00000000  003a7f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c05      	ldr	r4, [pc, #20]	@ (8000258 <__do_global_dtors_aux+0x18>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b933      	cbnz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <__do_global_dtors_aux+0x1c>)
 800024a:	b113      	cbz	r3, 8000252 <__do_global_dtors_aux+0x12>
 800024c:	4804      	ldr	r0, [pc, #16]	@ (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	f3af 8000 	nop.w
 8000252:	2301      	movs	r3, #1
 8000254:	7023      	strb	r3, [r4, #0]
 8000256:	bd10      	pop	{r4, pc}
 8000258:	20045900 	.word	0x20045900
 800025c:	00000000 	.word	0x00000000
 8000260:	0802eca0 	.word	0x0802eca0

08000264 <frame_dummy>:
 8000264:	b508      	push	{r3, lr}
 8000266:	4b03      	ldr	r3, [pc, #12]	@ (8000274 <frame_dummy+0x10>)
 8000268:	b11b      	cbz	r3, 8000272 <frame_dummy+0xe>
 800026a:	4903      	ldr	r1, [pc, #12]	@ (8000278 <frame_dummy+0x14>)
 800026c:	4803      	ldr	r0, [pc, #12]	@ (800027c <frame_dummy+0x18>)
 800026e:	f3af 8000 	nop.w
 8000272:	bd08      	pop	{r3, pc}
 8000274:	00000000 	.word	0x00000000
 8000278:	20045904 	.word	0x20045904
 800027c:	0802eca0 	.word	0x0802eca0

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9fb 	b.w	8000698 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b9b0 	b.w	8000698 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000354:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000356:	4688      	mov	r8, r1
 8000358:	4604      	mov	r4, r0
 800035a:	468e      	mov	lr, r1
 800035c:	2b00      	cmp	r3, #0
 800035e:	d14a      	bne.n	80003f6 <__udivmoddi4+0xa6>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d95f      	bls.n	8000426 <__udivmoddi4+0xd6>
 8000366:	fab2 f682 	clz	r6, r2
 800036a:	b14e      	cbz	r6, 8000380 <__udivmoddi4+0x30>
 800036c:	f1c6 0320 	rsb	r3, r6, #32
 8000370:	fa01 fe06 	lsl.w	lr, r1, r6
 8000374:	40b7      	lsls	r7, r6
 8000376:	40b4      	lsls	r4, r6
 8000378:	fa20 f303 	lsr.w	r3, r0, r3
 800037c:	ea43 0e0e 	orr.w	lr, r3, lr
 8000380:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000384:	fa1f fc87 	uxth.w	ip, r7
 8000388:	0c23      	lsrs	r3, r4, #16
 800038a:	fbbe f1f8 	udiv	r1, lr, r8
 800038e:	fb08 ee11 	mls	lr, r8, r1, lr
 8000392:	fb01 f20c 	mul.w	r2, r1, ip
 8000396:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800039a:	429a      	cmp	r2, r3
 800039c:	d907      	bls.n	80003ae <__udivmoddi4+0x5e>
 800039e:	18fb      	adds	r3, r7, r3
 80003a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x5c>
 80003a6:	429a      	cmp	r2, r3
 80003a8:	f200 8154 	bhi.w	8000654 <__udivmoddi4+0x304>
 80003ac:	4601      	mov	r1, r0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	b2a2      	uxth	r2, r4
 80003b2:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b6:	fb08 3310 	mls	r3, r8, r0, r3
 80003ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80003be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80003c2:	4594      	cmp	ip, r2
 80003c4:	d90b      	bls.n	80003de <__udivmoddi4+0x8e>
 80003c6:	18ba      	adds	r2, r7, r2
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	bf2c      	ite	cs
 80003ce:	2401      	movcs	r4, #1
 80003d0:	2400      	movcc	r4, #0
 80003d2:	4594      	cmp	ip, r2
 80003d4:	d902      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003d6:	2c00      	cmp	r4, #0
 80003d8:	f000 813f 	beq.w	800065a <__udivmoddi4+0x30a>
 80003dc:	4618      	mov	r0, r3
 80003de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003e2:	eba2 020c 	sub.w	r2, r2, ip
 80003e6:	2100      	movs	r1, #0
 80003e8:	b11d      	cbz	r5, 80003f2 <__udivmoddi4+0xa2>
 80003ea:	40f2      	lsrs	r2, r6
 80003ec:	2300      	movs	r3, #0
 80003ee:	e9c5 2300 	strd	r2, r3, [r5]
 80003f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d905      	bls.n	8000406 <__udivmoddi4+0xb6>
 80003fa:	b10d      	cbz	r5, 8000400 <__udivmoddi4+0xb0>
 80003fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	4608      	mov	r0, r1
 8000404:	e7f5      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000406:	fab3 f183 	clz	r1, r3
 800040a:	2900      	cmp	r1, #0
 800040c:	d14e      	bne.n	80004ac <__udivmoddi4+0x15c>
 800040e:	4543      	cmp	r3, r8
 8000410:	f0c0 8112 	bcc.w	8000638 <__udivmoddi4+0x2e8>
 8000414:	4282      	cmp	r2, r0
 8000416:	f240 810f 	bls.w	8000638 <__udivmoddi4+0x2e8>
 800041a:	4608      	mov	r0, r1
 800041c:	2d00      	cmp	r5, #0
 800041e:	d0e8      	beq.n	80003f2 <__udivmoddi4+0xa2>
 8000420:	e9c5 4e00 	strd	r4, lr, [r5]
 8000424:	e7e5      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000426:	2a00      	cmp	r2, #0
 8000428:	f000 80ac 	beq.w	8000584 <__udivmoddi4+0x234>
 800042c:	fab2 f682 	clz	r6, r2
 8000430:	2e00      	cmp	r6, #0
 8000432:	f040 80bb 	bne.w	80005ac <__udivmoddi4+0x25c>
 8000436:	1a8b      	subs	r3, r1, r2
 8000438:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800043c:	b2bc      	uxth	r4, r7
 800043e:	2101      	movs	r1, #1
 8000440:	0c02      	lsrs	r2, r0, #16
 8000442:	b280      	uxth	r0, r0
 8000444:	fbb3 fcfe 	udiv	ip, r3, lr
 8000448:	fb0e 331c 	mls	r3, lr, ip, r3
 800044c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000450:	fb04 f20c 	mul.w	r2, r4, ip
 8000454:	429a      	cmp	r2, r3
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x126>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f10c 38ff 	add.w	r8, ip, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0901 	movcs.w	r9, #1
 8000464:	f04f 0900 	movcc.w	r9, #0
 8000468:	429a      	cmp	r2, r3
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x124>
 800046c:	f1b9 0f00 	cmp.w	r9, #0
 8000470:	f000 80ec 	beq.w	800064c <__udivmoddi4+0x2fc>
 8000474:	46c4      	mov	ip, r8
 8000476:	1a9b      	subs	r3, r3, r2
 8000478:	fbb3 f8fe 	udiv	r8, r3, lr
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	fb04 f408 	mul.w	r4, r4, r8
 8000484:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000488:	4294      	cmp	r4, r2
 800048a:	d90b      	bls.n	80004a4 <__udivmoddi4+0x154>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f108 33ff 	add.w	r3, r8, #4294967295
 8000492:	bf2c      	ite	cs
 8000494:	2001      	movcs	r0, #1
 8000496:	2000      	movcc	r0, #0
 8000498:	4294      	cmp	r4, r2
 800049a:	d902      	bls.n	80004a2 <__udivmoddi4+0x152>
 800049c:	2800      	cmp	r0, #0
 800049e:	f000 80d1 	beq.w	8000644 <__udivmoddi4+0x2f4>
 80004a2:	4698      	mov	r8, r3
 80004a4:	1b12      	subs	r2, r2, r4
 80004a6:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80004aa:	e79d      	b.n	80003e8 <__udivmoddi4+0x98>
 80004ac:	f1c1 0620 	rsb	r6, r1, #32
 80004b0:	408b      	lsls	r3, r1
 80004b2:	fa08 f401 	lsl.w	r4, r8, r1
 80004b6:	fa00 f901 	lsl.w	r9, r0, r1
 80004ba:	fa22 f706 	lsr.w	r7, r2, r6
 80004be:	fa28 f806 	lsr.w	r8, r8, r6
 80004c2:	408a      	lsls	r2, r1
 80004c4:	431f      	orrs	r7, r3
 80004c6:	fa20 f306 	lsr.w	r3, r0, r6
 80004ca:	0c38      	lsrs	r0, r7, #16
 80004cc:	4323      	orrs	r3, r4
 80004ce:	fa1f fc87 	uxth.w	ip, r7
 80004d2:	0c1c      	lsrs	r4, r3, #16
 80004d4:	fbb8 fef0 	udiv	lr, r8, r0
 80004d8:	fb00 881e 	mls	r8, r0, lr, r8
 80004dc:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80004e0:	fb0e f80c 	mul.w	r8, lr, ip
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	d90e      	bls.n	8000506 <__udivmoddi4+0x1b6>
 80004e8:	193c      	adds	r4, r7, r4
 80004ea:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004ee:	bf2c      	ite	cs
 80004f0:	f04f 0b01 	movcs.w	fp, #1
 80004f4:	f04f 0b00 	movcc.w	fp, #0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d903      	bls.n	8000504 <__udivmoddi4+0x1b4>
 80004fc:	f1bb 0f00 	cmp.w	fp, #0
 8000500:	f000 80b8 	beq.w	8000674 <__udivmoddi4+0x324>
 8000504:	46d6      	mov	lr, sl
 8000506:	eba4 0408 	sub.w	r4, r4, r8
 800050a:	fa1f f883 	uxth.w	r8, r3
 800050e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000512:	fb00 4413 	mls	r4, r0, r3, r4
 8000516:	fb03 fc0c 	mul.w	ip, r3, ip
 800051a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800051e:	45a4      	cmp	ip, r4
 8000520:	d90e      	bls.n	8000540 <__udivmoddi4+0x1f0>
 8000522:	193c      	adds	r4, r7, r4
 8000524:	f103 30ff 	add.w	r0, r3, #4294967295
 8000528:	bf2c      	ite	cs
 800052a:	f04f 0801 	movcs.w	r8, #1
 800052e:	f04f 0800 	movcc.w	r8, #0
 8000532:	45a4      	cmp	ip, r4
 8000534:	d903      	bls.n	800053e <__udivmoddi4+0x1ee>
 8000536:	f1b8 0f00 	cmp.w	r8, #0
 800053a:	f000 809f 	beq.w	800067c <__udivmoddi4+0x32c>
 800053e:	4603      	mov	r3, r0
 8000540:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000544:	eba4 040c 	sub.w	r4, r4, ip
 8000548:	fba0 ec02 	umull	lr, ip, r0, r2
 800054c:	4564      	cmp	r4, ip
 800054e:	4673      	mov	r3, lr
 8000550:	46e0      	mov	r8, ip
 8000552:	d302      	bcc.n	800055a <__udivmoddi4+0x20a>
 8000554:	d107      	bne.n	8000566 <__udivmoddi4+0x216>
 8000556:	45f1      	cmp	r9, lr
 8000558:	d205      	bcs.n	8000566 <__udivmoddi4+0x216>
 800055a:	ebbe 0302 	subs.w	r3, lr, r2
 800055e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000562:	3801      	subs	r0, #1
 8000564:	46e0      	mov	r8, ip
 8000566:	b15d      	cbz	r5, 8000580 <__udivmoddi4+0x230>
 8000568:	ebb9 0203 	subs.w	r2, r9, r3
 800056c:	eb64 0408 	sbc.w	r4, r4, r8
 8000570:	fa04 f606 	lsl.w	r6, r4, r6
 8000574:	fa22 f301 	lsr.w	r3, r2, r1
 8000578:	40cc      	lsrs	r4, r1
 800057a:	431e      	orrs	r6, r3
 800057c:	e9c5 6400 	strd	r6, r4, [r5]
 8000580:	2100      	movs	r1, #0
 8000582:	e736      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000584:	fbb1 fcf2 	udiv	ip, r1, r2
 8000588:	0c01      	lsrs	r1, r0, #16
 800058a:	4614      	mov	r4, r2
 800058c:	b280      	uxth	r0, r0
 800058e:	4696      	mov	lr, r2
 8000590:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000594:	2620      	movs	r6, #32
 8000596:	4690      	mov	r8, r2
 8000598:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 800059c:	4610      	mov	r0, r2
 800059e:	fbb1 f1f2 	udiv	r1, r1, r2
 80005a2:	eba3 0308 	sub.w	r3, r3, r8
 80005a6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005aa:	e74b      	b.n	8000444 <__udivmoddi4+0xf4>
 80005ac:	40b7      	lsls	r7, r6
 80005ae:	f1c6 0320 	rsb	r3, r6, #32
 80005b2:	fa01 f206 	lsl.w	r2, r1, r6
 80005b6:	fa21 f803 	lsr.w	r8, r1, r3
 80005ba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005be:	fa20 f303 	lsr.w	r3, r0, r3
 80005c2:	b2bc      	uxth	r4, r7
 80005c4:	40b0      	lsls	r0, r6
 80005c6:	4313      	orrs	r3, r2
 80005c8:	0c02      	lsrs	r2, r0, #16
 80005ca:	0c19      	lsrs	r1, r3, #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	fbb8 f9fe 	udiv	r9, r8, lr
 80005d2:	fb0e 8819 	mls	r8, lr, r9, r8
 80005d6:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80005da:	fb09 f804 	mul.w	r8, r9, r4
 80005de:	4588      	cmp	r8, r1
 80005e0:	d951      	bls.n	8000686 <__udivmoddi4+0x336>
 80005e2:	1879      	adds	r1, r7, r1
 80005e4:	f109 3cff 	add.w	ip, r9, #4294967295
 80005e8:	bf2c      	ite	cs
 80005ea:	f04f 0a01 	movcs.w	sl, #1
 80005ee:	f04f 0a00 	movcc.w	sl, #0
 80005f2:	4588      	cmp	r8, r1
 80005f4:	d902      	bls.n	80005fc <__udivmoddi4+0x2ac>
 80005f6:	f1ba 0f00 	cmp.w	sl, #0
 80005fa:	d031      	beq.n	8000660 <__udivmoddi4+0x310>
 80005fc:	eba1 0108 	sub.w	r1, r1, r8
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	fb0e 1119 	mls	r1, lr, r9, r1
 800060c:	b29b      	uxth	r3, r3
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	4543      	cmp	r3, r8
 8000614:	d235      	bcs.n	8000682 <__udivmoddi4+0x332>
 8000616:	18fb      	adds	r3, r7, r3
 8000618:	f109 31ff 	add.w	r1, r9, #4294967295
 800061c:	bf2c      	ite	cs
 800061e:	f04f 0a01 	movcs.w	sl, #1
 8000622:	f04f 0a00 	movcc.w	sl, #0
 8000626:	4543      	cmp	r3, r8
 8000628:	d2bb      	bcs.n	80005a2 <__udivmoddi4+0x252>
 800062a:	f1ba 0f00 	cmp.w	sl, #0
 800062e:	d1b8      	bne.n	80005a2 <__udivmoddi4+0x252>
 8000630:	f1a9 0102 	sub.w	r1, r9, #2
 8000634:	443b      	add	r3, r7
 8000636:	e7b4      	b.n	80005a2 <__udivmoddi4+0x252>
 8000638:	1a84      	subs	r4, r0, r2
 800063a:	eb68 0203 	sbc.w	r2, r8, r3
 800063e:	2001      	movs	r0, #1
 8000640:	4696      	mov	lr, r2
 8000642:	e6eb      	b.n	800041c <__udivmoddi4+0xcc>
 8000644:	443a      	add	r2, r7
 8000646:	f1a8 0802 	sub.w	r8, r8, #2
 800064a:	e72b      	b.n	80004a4 <__udivmoddi4+0x154>
 800064c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000650:	443b      	add	r3, r7
 8000652:	e710      	b.n	8000476 <__udivmoddi4+0x126>
 8000654:	3902      	subs	r1, #2
 8000656:	443b      	add	r3, r7
 8000658:	e6a9      	b.n	80003ae <__udivmoddi4+0x5e>
 800065a:	443a      	add	r2, r7
 800065c:	3802      	subs	r0, #2
 800065e:	e6be      	b.n	80003de <__udivmoddi4+0x8e>
 8000660:	eba7 0808 	sub.w	r8, r7, r8
 8000664:	f1a9 0c02 	sub.w	ip, r9, #2
 8000668:	4441      	add	r1, r8
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	e7c9      	b.n	8000608 <__udivmoddi4+0x2b8>
 8000674:	f1ae 0e02 	sub.w	lr, lr, #2
 8000678:	443c      	add	r4, r7
 800067a:	e744      	b.n	8000506 <__udivmoddi4+0x1b6>
 800067c:	3b02      	subs	r3, #2
 800067e:	443c      	add	r4, r7
 8000680:	e75e      	b.n	8000540 <__udivmoddi4+0x1f0>
 8000682:	4649      	mov	r1, r9
 8000684:	e78d      	b.n	80005a2 <__udivmoddi4+0x252>
 8000686:	eba1 0108 	sub.w	r1, r1, r8
 800068a:	46cc      	mov	ip, r9
 800068c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000690:	fb09 f804 	mul.w	r8, r9, r4
 8000694:	e7b8      	b.n	8000608 <__udivmoddi4+0x2b8>
 8000696:	bf00      	nop

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <CST816D_ReadReg>:
// 外部声明
extern I2C_HandleTypeDef hi2c3;

// 读取CST816D寄存器
HAL_StatusTypeDef CST816D_ReadReg(uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af04      	add	r7, sp, #16
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4613      	mov	r3, r2
 80006aa:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&hi2c3, (CST816D_ADDR << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100);
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	2364      	movs	r3, #100	@ 0x64
 80006b2:	9302      	str	r3, [sp, #8]
 80006b4:	88bb      	ldrh	r3, [r7, #4]
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2301      	movs	r3, #1
 80006be:	212a      	movs	r1, #42	@ 0x2a
 80006c0:	4803      	ldr	r0, [pc, #12]	@ (80006d0 <CST816D_ReadReg+0x34>)
 80006c2:	f003 ffd1 	bl	8004668 <HAL_I2C_Mem_Read>
 80006c6:	4603      	mov	r3, r0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20045aa8 	.word	0x20045aa8

080006d4 <CST816D_WriteReg>:

// 写入CST816D寄存器
HAL_StatusTypeDef CST816D_WriteReg(uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af04      	add	r7, sp, #16
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Write(&hi2c3, (CST816D_ADDR << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100);
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	2364      	movs	r3, #100	@ 0x64
 80006ea:	9302      	str	r3, [sp, #8]
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2301      	movs	r3, #1
 80006f6:	212a      	movs	r1, #42	@ 0x2a
 80006f8:	4803      	ldr	r0, [pc, #12]	@ (8000708 <CST816D_WriteReg+0x34>)
 80006fa:	f003 fea1 	bl	8004440 <HAL_I2C_Mem_Write>
 80006fe:	4603      	mov	r3, r0
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20045aa8 	.word	0x20045aa8

0800070c <CST816D_Init>:

// 复位并初始化CST816D
uint8_t CST816D_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
    uint8_t temp_data;

    // 硬件复位CST816D
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // RST引脚拉低
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000718:	4821      	ldr	r0, [pc, #132]	@ (80007a0 <CST816D_Init+0x94>)
 800071a:	f003 fce9 	bl	80040f0 <HAL_GPIO_WritePin>
    HAL_Delay(20);                                         // 延时20ms（增加复位时间）
 800071e:	2014      	movs	r0, #20
 8000720:	f001 fbc0 	bl	8001ea4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);   // RST引脚拉高
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800072a:	481d      	ldr	r0, [pc, #116]	@ (80007a0 <CST816D_Init+0x94>)
 800072c:	f003 fce0 	bl	80040f0 <HAL_GPIO_WritePin>
    HAL_Delay(100);                                        // 延时100ms等待芯片稳定启动
 8000730:	2064      	movs	r0, #100	@ 0x64
 8000732:	f001 fbb7 	bl	8001ea4 <HAL_Delay>

    // 关闭自动休眠，确保持续工作
    temp_data = 0x01; // 禁用自动休眠
 8000736:	2301      	movs	r3, #1
 8000738:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_DIS_AUTO_SLEEP, &temp_data, 1);
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	2201      	movs	r2, #1
 800073e:	4619      	mov	r1, r3
 8000740:	20fe      	movs	r0, #254	@ 0xfe
 8000742:	f7ff ffc7 	bl	80006d4 <CST816D_WriteReg>

    // 重新设置扫描周期 - 适合双击检测的更快扫描
    temp_data = 0; // 扫描周期设为最小值(0)，最高速
 8000746:	2300      	movs	r3, #0
 8000748:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_NOR_SCAN, &temp_data, 1);
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	2201      	movs	r2, #1
 800074e:	4619      	mov	r1, r3
 8000750:	20ee      	movs	r0, #238	@ 0xee
 8000752:	f7ff ffbf 	bl	80006d4 <CST816D_WriteReg>

    // 设置中断脉冲宽度
    temp_data = 5; // 更小的脉冲宽度，提高响应速度
 8000756:	2305      	movs	r3, #5
 8000758:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_IRQ_PULSE, &temp_data, 1);
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	2201      	movs	r2, #1
 800075e:	4619      	mov	r1, r3
 8000760:	20ed      	movs	r0, #237	@ 0xed
 8000762:	f7ff ffb7 	bl	80006d4 <CST816D_WriteReg>

    // 配置中断控制 - 启用触摸和所有变化检测
    temp_data = EnTouch | EnChange | EnMotion;
 8000766:	2370      	movs	r3, #112	@ 0x70
 8000768:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_IRQ_CTL, &temp_data, 1);
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	2201      	movs	r2, #1
 800076e:	4619      	mov	r1, r3
 8000770:	20fa      	movs	r0, #250	@ 0xfa
 8000772:	f7ff ffaf 	bl	80006d4 <CST816D_WriteReg>
    // 设置长按时间(500ms)
    //    temp_data = 10;
    //    CST816D_WriteReg(CST816D_REG_LONG_PRESS, &temp_data, 1);

    // 设置动作识别掩码 - 确保双击能被检测
    temp_data = 0x07; // 启用滑动和双击 (0x01+0x02+0x03)
 8000776:	2307      	movs	r3, #7
 8000778:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_MOTION_MASK, &temp_data, 1);
 800077a:	1dfb      	adds	r3, r7, #7
 800077c:	2201      	movs	r2, #1
 800077e:	4619      	mov	r1, r3
 8000780:	20ec      	movs	r0, #236	@ 0xec
 8000782:	f7ff ffa7 	bl	80006d4 <CST816D_WriteReg>

    // 配置动作角度 - 更宽松的滑动手势检测
    temp_data = 60;
 8000786:	233c      	movs	r3, #60	@ 0x3c
 8000788:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_MOTION_ANGLE, &temp_data, 1);
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	2201      	movs	r2, #1
 800078e:	4619      	mov	r1, r3
 8000790:	20ef      	movs	r0, #239	@ 0xef
 8000792:	f7ff ff9f 	bl	80006d4 <CST816D_WriteReg>

    return 1; // 初始化成功
 8000796:	2301      	movs	r3, #1
}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	42020400 	.word	0x42020400

080007a4 <CST816D_IsTouched>:
    return HAL_OK;
}

// 检测触摸(通过INT引脚) - 优化速度版本
uint8_t CST816D_IsTouched(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    // 直接返回INT引脚状态，移除2ms延时
    return (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET);
 80007a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ac:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <CST816D_IsTouched+0x20>)
 80007ae:	f003 fc87 	bl	80040c0 <HAL_GPIO_ReadPin>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	bf0c      	ite	eq
 80007b8:	2301      	moveq	r3, #1
 80007ba:	2300      	movne	r3, #0
 80007bc:	b2db      	uxtb	r3, r3
}
 80007be:	4618      	mov	r0, r3
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	42020400 	.word	0x42020400

080007c8 <CST816D_SetMotionMask>:
    return CST816D_WriteReg(CST816D_REG_IRQ_PULSE, &width, 1);
}

// 设置动作识别掩码 (使能/禁用特定手势)
HAL_StatusTypeDef CST816D_SetMotionMask(uint8_t mask)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
    return CST816D_WriteReg(CST816D_REG_MOTION_MASK, &mask, 1);
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	2201      	movs	r2, #1
 80007d6:	4619      	mov	r1, r3
 80007d8:	20ec      	movs	r0, #236	@ 0xec
 80007da:	f7ff ff7b 	bl	80006d4 <CST816D_WriteReg>
 80007de:	4603      	mov	r3, r0
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <CST816D_SetIrqCtl>:
    return CST816D_SetMotionMask(motion_mask);
}

// 设置中断控制寄存器
HAL_StatusTypeDef CST816D_SetIrqCtl(uint8_t irq_ctl)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
    return CST816D_WriteReg(CST816D_REG_IRQ_CTL, &irq_ctl, 1);
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	20fa      	movs	r0, #250	@ 0xfa
 80007fa:	f7ff ff6b 	bl	80006d4 <CST816D_WriteReg>
 80007fe:	4603      	mov	r3, r0
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <GPDMA_Callback>:

/**
 * @brief Register DMA callbacks
 */
void GPDMA_Callback(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&handle_GPDMA1_Channel13, HAL_DMA_XFER_CPLT_CB_ID, DMA_TxCpltCallback);
 800080c:	4a05      	ldr	r2, [pc, #20]	@ (8000824 <GPDMA_Callback+0x1c>)
 800080e:	2100      	movs	r1, #0
 8000810:	4805      	ldr	r0, [pc, #20]	@ (8000828 <GPDMA_Callback+0x20>)
 8000812:	f001 fffb 	bl	800280c <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&handle_GPDMA1_Channel13, HAL_DMA_XFER_ERROR_CB_ID, DMA_TxErrorCallback);
 8000816:	4a05      	ldr	r2, [pc, #20]	@ (800082c <GPDMA_Callback+0x24>)
 8000818:	2102      	movs	r1, #2
 800081a:	4803      	ldr	r0, [pc, #12]	@ (8000828 <GPDMA_Callback+0x20>)
 800081c:	f001 fff6 	bl	800280c <HAL_DMA_RegisterCallback>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	08000831 	.word	0x08000831
 8000828:	20045a30 	.word	0x20045a30
 800082c:	08000861 	.word	0x08000861

08000830 <DMA_TxCpltCallback>:
/**
 * @brief DMA transfer complete callback
 * @param hdma: DMA handle
 */
static void DMA_TxCpltCallback(DMA_HandleTypeDef *hdma)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
    if (hdma == &handle_GPDMA1_Channel13)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a07      	ldr	r2, [pc, #28]	@ (8000858 <DMA_TxCpltCallback+0x28>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d105      	bne.n	800084c <DMA_TxCpltCallback+0x1c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000840:	f3bf 8f4f 	dsb	sy
}
 8000844:	bf00      	nop
    {
                __DSB(); // 添加内存屏障
        displayRefreshing = false;
 8000846:	4b05      	ldr	r3, [pc, #20]	@ (800085c <DMA_TxCpltCallback+0x2c>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
    }
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	20045a30 	.word	0x20045a30
 800085c:	2004591c 	.word	0x2004591c

08000860 <DMA_TxErrorCallback>:
/**
 * @brief DMA transfer error callback
 * @param hdma: DMA handle
 */
static void DMA_TxErrorCallback(DMA_HandleTypeDef *hdma)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
    displayRefreshing = false;
 8000868:	4b04      	ldr	r3, [pc, #16]	@ (800087c <DMA_TxErrorCallback+0x1c>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	2004591c 	.word	0x2004591c

08000880 <GPDMA_Queue_Config>:

/**
 * @brief Configure DMA Linked-list Queue
 */
static HAL_StatusTypeDef GPDMA_Queue_Config(DMA_QListTypeDef *Queue, uint8_t node_cnt, uint8_t *src, uint8_t *dst, uint32_t data_size)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b0a0      	sub	sp, #128	@ 0x80
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	460b      	mov	r3, r1
 800088e:	72fb      	strb	r3, [r7, #11]
    static DMA_NodeTypeDef Nodes[(((WIDTH * HEIGHT * 2) / ((64 * 1024) - 2)) + 1)];
    HAL_StatusTypeDef ret = HAL_OK;
 8000890:	2300      	movs	r3, #0
 8000892:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    /* DMA node configuration declaration */
    DMA_NodeConfTypeDef pNodeConfig;
    uint8_t i;

    /* Set node configuration ################################################*/
    pNodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 8000896:	2322      	movs	r3, #34	@ 0x22
 8000898:	613b      	str	r3, [r7, #16]
    pNodeConfig.Init.Mode = DMA_NORMAL;
 800089a:	2300      	movs	r3, #0
 800089c:	647b      	str	r3, [r7, #68]	@ 0x44
    pNodeConfig.Init.Request = DMA_REQUEST_SW;
 800089e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008a2:	617b      	str	r3, [r7, #20]
    pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
    pNodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ac:	61fb      	str	r3, [r7, #28]
    pNodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 80008ae:	2308      	movs	r3, #8
 80008b0:	623b      	str	r3, [r7, #32]
    pNodeConfig.Init.DestInc = DMA_DINC_FIXED;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pNodeConfig.Init.SrcDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pNodeConfig.Init.SrcBurstLength = 1;
 80008be:	2301      	movs	r3, #1
 80008c0:	637b      	str	r3, [r7, #52]	@ 0x34
    pNodeConfig.Init.DestBurstLength = 1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0 | DMA_DEST_ALLOCATED_PORT0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pNodeConfig.Init.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 80008ca:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80008ce:	643b      	str	r3, [r7, #64]	@ 0x40
    pNodeConfig.RepeatBlockConfig.RepeatCount = 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    pNodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	663b      	str	r3, [r7, #96]	@ 0x60
    pNodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	667b      	str	r3, [r7, #100]	@ 0x64
    pNodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	66bb      	str	r3, [r7, #104]	@ 0x68
    pNodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80008e4:	2300      	movs	r3, #0
 80008e6:	657b      	str	r3, [r7, #84]	@ 0x54
    pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	64bb      	str	r3, [r7, #72]	@ 0x48
    pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80008ec:	2300      	movs	r3, #0
 80008ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
    pNodeConfig.SrcAddress = (uint32_t)src;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	673b      	str	r3, [r7, #112]	@ 0x70
    pNodeConfig.DstAddress = (uint32_t)dst;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (node_cnt > 1)
 80008f8:	7afb      	ldrb	r3, [r7, #11]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d903      	bls.n	8000906 <GPDMA_Queue_Config+0x86>
    {
        pNodeConfig.DataSize = ((64 * 1024) - 2);
 80008fe:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8000902:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000904:	e002      	b.n	800090c <GPDMA_Queue_Config+0x8c>
    }
    else
    {
        pNodeConfig.DataSize = data_size;
 8000906:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800090a:	67bb      	str	r3, [r7, #120]	@ 0x78
    }

    for (i = 0; ((ret == HAL_OK) && (i < node_cnt)); i++)
 800090c:	2300      	movs	r3, #0
 800090e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8000912:	e08a      	b.n	8000a2a <GPDMA_Queue_Config+0x1aa>
    {
        if (i == 0)
 8000914:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000918:	2b00      	cmp	r3, #0
 800091a:	d13a      	bne.n	8000992 <GPDMA_Queue_Config+0x112>
        {
            /* Reset The Queue */
            ret = HAL_DMAEx_List_ResetQ(Queue);
 800091c:	68f8      	ldr	r0, [r7, #12]
 800091e:	f002 fce0 	bl	80032e2 <HAL_DMAEx_List_ResetQ>
 8000922:	4603      	mov	r3, r0
 8000924:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 8000928:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800092c:	2b00      	cmp	r3, #0
 800092e:	d002      	beq.n	8000936 <GPDMA_Queue_Config+0xb6>
            {
                return ret;
 8000930:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000934:	e085      	b.n	8000a42 <GPDMA_Queue_Config+0x1c2>
            }
            /* Build Node first Node */
            ret = HAL_DMAEx_List_BuildNode(&pNodeConfig, &Nodes[i]);
 8000936:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 800093a:	4613      	mov	r3, r2
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	4413      	add	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4a42      	ldr	r2, [pc, #264]	@ (8000a4c <GPDMA_Queue_Config+0x1cc>)
 8000944:	441a      	add	r2, r3
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	4611      	mov	r1, r2
 800094c:	4618      	mov	r0, r3
 800094e:	f002 fbd1 	bl	80030f4 <HAL_DMAEx_List_BuildNode>
 8000952:	4603      	mov	r3, r0
 8000954:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 8000958:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800095c:	2b00      	cmp	r3, #0
 800095e:	d002      	beq.n	8000966 <GPDMA_Queue_Config+0xe6>
            {
                return ret;
 8000960:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000964:	e06d      	b.n	8000a42 <GPDMA_Queue_Config+0x1c2>
            }
            /* Insert Node to Queue */
            ret = HAL_DMAEx_List_InsertNode_Head(Queue, &Nodes[i]);
 8000966:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 800096a:	4613      	mov	r3, r2
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	4413      	add	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	4a36      	ldr	r2, [pc, #216]	@ (8000a4c <GPDMA_Queue_Config+0x1cc>)
 8000974:	4413      	add	r3, r2
 8000976:	4619      	mov	r1, r3
 8000978:	68f8      	ldr	r0, [r7, #12]
 800097a:	f002 fbd1 	bl	8003120 <HAL_DMAEx_List_InsertNode_Head>
 800097e:	4603      	mov	r3, r0
 8000980:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 8000984:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000988:	2b00      	cmp	r3, #0
 800098a:	d044      	beq.n	8000a16 <GPDMA_Queue_Config+0x196>
            {
                return ret;
 800098c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000990:	e057      	b.n	8000a42 <GPDMA_Queue_Config+0x1c2>
            }
        }
        else
        {
            /* Adjust size of last node */
            if ((node_cnt > 1) && (i == (node_cnt - 1)))
 8000992:	7afb      	ldrb	r3, [r7, #11]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d910      	bls.n	80009ba <GPDMA_Queue_Config+0x13a>
 8000998:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 800099c:	7afb      	ldrb	r3, [r7, #11]
 800099e:	3b01      	subs	r3, #1
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d10a      	bne.n	80009ba <GPDMA_Queue_Config+0x13a>
            {
                pNodeConfig.DataSize = (data_size - (i * ((64 * 1024) - 2)));
 80009a4:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80009a8:	4613      	mov	r3, r2
 80009aa:	03db      	lsls	r3, r3, #15
 80009ac:	1a9b      	subs	r3, r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	461a      	mov	r2, r3
 80009b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80009b6:	1a9b      	subs	r3, r3, r2
 80009b8:	67bb      	str	r3, [r7, #120]	@ 0x78
            }
            /* Build Node Node */
            ret = HAL_DMAEx_List_BuildNode(&pNodeConfig, &Nodes[i]);
 80009ba:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80009be:	4613      	mov	r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	4413      	add	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4a21      	ldr	r2, [pc, #132]	@ (8000a4c <GPDMA_Queue_Config+0x1cc>)
 80009c8:	441a      	add	r2, r3
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f002 fb8f 	bl	80030f4 <HAL_DMAEx_List_BuildNode>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 80009dc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d002      	beq.n	80009ea <GPDMA_Queue_Config+0x16a>
            {
                return ret;
 80009e4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80009e8:	e02b      	b.n	8000a42 <GPDMA_Queue_Config+0x1c2>
            }
            /* Insert Node to Queue */
            ret = HAL_DMAEx_List_InsertNode_Tail(Queue, &Nodes[i]);
 80009ea:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80009ee:	4613      	mov	r3, r2
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	4413      	add	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4a15      	ldr	r2, [pc, #84]	@ (8000a4c <GPDMA_Queue_Config+0x1cc>)
 80009f8:	4413      	add	r3, r2
 80009fa:	4619      	mov	r1, r3
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f002 fbf8 	bl	80031f2 <HAL_DMAEx_List_InsertNode_Tail>
 8000a02:	4603      	mov	r3, r0
 8000a04:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 8000a08:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <GPDMA_Queue_Config+0x196>
            {
                return ret;
 8000a10:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a14:	e015      	b.n	8000a42 <GPDMA_Queue_Config+0x1c2>
            }
        }
        pNodeConfig.SrcAddress += ((64 * 1024) - 2);
 8000a16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a18:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000a1c:	33fe      	adds	r3, #254	@ 0xfe
 8000a1e:	673b      	str	r3, [r7, #112]	@ 0x70
    for (i = 0; ((ret == HAL_OK) && (i < node_cnt)); i++)
 8000a20:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000a24:	3301      	adds	r3, #1
 8000a26:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8000a2a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d105      	bne.n	8000a3e <GPDMA_Queue_Config+0x1be>
 8000a32:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000a36:	7afb      	ldrb	r3, [r7, #11]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	f4ff af6b 	bcc.w	8000914 <GPDMA_Queue_Config+0x94>
    }

    return ret;
 8000a3e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3780      	adds	r7, #128	@ 0x80
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20045920 	.word	0x20045920

08000a50 <ICNA3306_SendDataDMA>:

/**
 * @brief Send data to ICNA3306 using DMA
 */
static HAL_StatusTypeDef ICNA3306_SendDataDMA(uint8_t *pData, uint32_t Length)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af02      	add	r7, sp, #8
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
    static DMA_QListTypeDef Queue;
    uint32_t len = Length;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	60fb      	str	r3, [r7, #12]
    uint8_t node_cnt = (len / ((64 * 1024) - 2));
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	085b      	lsrs	r3, r3, #1
 8000a62:	4a3b      	ldr	r2, [pc, #236]	@ (8000b50 <ICNA3306_SendDataDMA+0x100>)
 8000a64:	fba2 2303 	umull	r2, r3, r2, r3
 8000a68:	0b9b      	lsrs	r3, r3, #14
 8000a6a:	72fb      	strb	r3, [r7, #11]
    if (len % ((64 * 1024) - 2))
 8000a6c:	68f9      	ldr	r1, [r7, #12]
 8000a6e:	084b      	lsrs	r3, r1, #1
 8000a70:	4a37      	ldr	r2, [pc, #220]	@ (8000b50 <ICNA3306_SendDataDMA+0x100>)
 8000a72:	fba2 2303 	umull	r2, r3, r2, r3
 8000a76:	0b9a      	lsrs	r2, r3, #14
 8000a78:	4613      	mov	r3, r2
 8000a7a:	03db      	lsls	r3, r3, #15
 8000a7c:	1a9b      	subs	r3, r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	1aca      	subs	r2, r1, r3
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d002      	beq.n	8000a8c <ICNA3306_SendDataDMA+0x3c>
    {
        node_cnt++;
 8000a86:	7afb      	ldrb	r3, [r7, #11]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	72fb      	strb	r3, [r7, #11]
    }

    if ((handle_GPDMA1_Channel13.Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8000a8c:	4b31      	ldr	r3, [pc, #196]	@ (8000b54 <ICNA3306_SendDataDMA+0x104>)
 8000a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d02a      	beq.n	8000aee <ICNA3306_SendDataDMA+0x9e>
    {
        /* Link created queue to DMA channel */
        if (GPDMA_Queue_Config(&Queue, node_cnt, pData, (uint8_t *)&(hospi1.Instance->DR), len) != HAL_OK)
 8000a98:	4b2f      	ldr	r3, [pc, #188]	@ (8000b58 <ICNA3306_SendDataDMA+0x108>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8000aa0:	7af9      	ldrb	r1, [r7, #11]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	482c      	ldr	r0, [pc, #176]	@ (8000b5c <ICNA3306_SendDataDMA+0x10c>)
 8000aac:	f7ff fee8 	bl	8000880 <GPDMA_Queue_Config>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d004      	beq.n	8000ac0 <ICNA3306_SendDataDMA+0x70>
        {
            displayRefreshing = false;
 8000ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b60 <ICNA3306_SendDataDMA+0x110>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	e042      	b.n	8000b46 <ICNA3306_SendDataDMA+0xf6>
        }

        /* Link created queue to DMA channel */
        if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel13, &Queue) != HAL_OK)
 8000ac0:	4926      	ldr	r1, [pc, #152]	@ (8000b5c <ICNA3306_SendDataDMA+0x10c>)
 8000ac2:	4824      	ldr	r0, [pc, #144]	@ (8000b54 <ICNA3306_SendDataDMA+0x104>)
 8000ac4:	f002 fc58 	bl	8003378 <HAL_DMAEx_List_LinkQ>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d004      	beq.n	8000ad8 <ICNA3306_SendDataDMA+0x88>
        {
            displayRefreshing = false;
 8000ace:	4b24      	ldr	r3, [pc, #144]	@ (8000b60 <ICNA3306_SendDataDMA+0x110>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e036      	b.n	8000b46 <ICNA3306_SendDataDMA+0xf6>
        }

        /* Enable All the DMA interrupts */
        if (HAL_DMAEx_List_Start_IT(&handle_GPDMA1_Channel13) != HAL_OK)
 8000ad8:	481e      	ldr	r0, [pc, #120]	@ (8000b54 <ICNA3306_SendDataDMA+0x104>)
 8000ada:	f002 fa77 	bl	8002fcc <HAL_DMAEx_List_Start_IT>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d02f      	beq.n	8000b44 <ICNA3306_SendDataDMA+0xf4>
        {
            displayRefreshing = false;
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b60 <ICNA3306_SendDataDMA+0x110>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e02b      	b.n	8000b46 <ICNA3306_SendDataDMA+0xf6>
        }
    }
    else
    {
        if (node_cnt > 1)
 8000aee:	7afb      	ldrb	r3, [r7, #11]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d904      	bls.n	8000afe <ICNA3306_SendDataDMA+0xae>
        {
            displayRefreshing = false;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <ICNA3306_SendDataDMA+0x110>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e023      	b.n	8000b46 <ICNA3306_SendDataDMA+0xf6>
        }

        switch (handle_GPDMA1_Channel13.Init.DestDataWidth)
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <ICNA3306_SendDataDMA+0x104>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d006      	beq.n	8000b14 <ICNA3306_SendDataDMA+0xc4>
 8000b06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000b0a:	d106      	bne.n	8000b1a <ICNA3306_SendDataDMA+0xca>
        {
        case DMA_DEST_DATAWIDTH_WORD:
            len = (Length / 4);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	089b      	lsrs	r3, r3, #2
 8000b10:	60fb      	str	r3, [r7, #12]
            break;
 8000b12:	e006      	b.n	8000b22 <ICNA3306_SendDataDMA+0xd2>
        case DMA_DEST_DATAWIDTH_BYTE:
            len = Length;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	60fb      	str	r3, [r7, #12]
            break;
 8000b18:	e003      	b.n	8000b22 <ICNA3306_SendDataDMA+0xd2>
        default:
        case DMA_DEST_DATAWIDTH_HALFWORD:
            len = (Length / 2);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	085b      	lsrs	r3, r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
            break;
 8000b20:	bf00      	nop
        }

        if (HAL_DMA_Start_IT(&handle_GPDMA1_Channel13, (uint32_t)pData, (uint32_t)&(hospi1.Instance->DR), len) != HAL_OK)
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <ICNA3306_SendDataDMA+0x108>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3350      	adds	r3, #80	@ 0x50
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4809      	ldr	r0, [pc, #36]	@ (8000b54 <ICNA3306_SendDataDMA+0x104>)
 8000b30:	f001 fc06 	bl	8002340 <HAL_DMA_Start_IT>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d004      	beq.n	8000b44 <ICNA3306_SendDataDMA+0xf4>
        {
            displayRefreshing = false;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <ICNA3306_SendDataDMA+0x110>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	e000      	b.n	8000b46 <ICNA3306_SendDataDMA+0xf6>
        }
    }

    return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	80010003 	.word	0x80010003
 8000b54:	20045a30 	.word	0x20045a30
 8000b58:	20045afc 	.word	0x20045afc
 8000b5c:	2004598c 	.word	0x2004598c
 8000b60:	2004591c 	.word	0x2004591c

08000b64 <ICNA3306_WriteCmdParam>:


HAL_StatusTypeDef ICNA3306_WriteCmdParam(uint8_t cmd, size_t len, const uint8_t *params)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b098      	sub	sp, #96	@ 0x60
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	73fb      	strb	r3, [r7, #15]
    OSPI_RegularCmdTypeDef sCommand = {0};
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	2250      	movs	r2, #80	@ 0x50
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f02d fafc 	bl	802e178 <memset>

    sCommand.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000b80:	2300      	movs	r3, #0
 8000b82:	613b      	str	r3, [r7, #16]
    sCommand.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8000b84:	2301      	movs	r3, #1
 8000b86:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = 0x02;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	61bb      	str	r3, [r7, #24]
    sCommand.Address = ((uint32_t)cmd) << 8;
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	021b      	lsls	r3, r3, #8
 8000b94:	62bb      	str	r3, [r7, #40]	@ 0x28

    sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8000b96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8000b9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba0:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    sCommand.DQSMode = HAL_OSPI_DQS_DISABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.DummyCycles = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.DataMode = len > 0 ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_NONE;
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d002      	beq.n	8000bbe <ICNA3306_WriteCmdParam+0x5a>
 8000bb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000bbc:	e000      	b.n	8000bc0 <ICNA3306_WriteCmdParam+0x5c>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.NbData = len;
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480d      	ldr	r0, [pc, #52]	@ (8000c08 <ICNA3306_WriteCmdParam+0xa4>)
 8000bd2:	f004 fbcb 	bl	800536c <HAL_OSPI_Command>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <ICNA3306_WriteCmdParam+0x7c>
    {
        return HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e00e      	b.n	8000bfe <ICNA3306_WriteCmdParam+0x9a>
    }

    if (len > 0)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d00a      	beq.n	8000bfc <ICNA3306_WriteCmdParam+0x98>
    {
        if (HAL_OSPI_Transmit(&hospi1, (uint8_t *)params, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	4806      	ldr	r0, [pc, #24]	@ (8000c08 <ICNA3306_WriteCmdParam+0xa4>)
 8000bee:	f004 fc4a 	bl	8005486 <HAL_OSPI_Transmit>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <ICNA3306_WriteCmdParam+0x98>
        {
            return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e000      	b.n	8000bfe <ICNA3306_WriteCmdParam+0x9a>
        }
    }

    return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3760      	adds	r7, #96	@ 0x60
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20045afc 	.word	0x20045afc

08000c0c <ICNA3306_WriteCmdData>:


HAL_StatusTypeDef ICNA3306_WriteCmdData(uint8_t cmd, size_t len, const uint8_t *data)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b09a      	sub	sp, #104	@ 0x68
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
 8000c18:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status;
    OSPI_RegularCmdTypeDef sCommand = {0};
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	2250      	movs	r2, #80	@ 0x50
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f02d faa8 	bl	802e178 <memset>

    if (len == 0 || data == NULL)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <ICNA3306_WriteCmdData+0x28>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d101      	bne.n	8000c38 <ICNA3306_WriteCmdData+0x2c>
        return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e075      	b.n	8000d24 <ICNA3306_WriteCmdData+0x118>

    HAL_OSPI_Abort(&hospi1);
 8000c38:	483c      	ldr	r0, [pc, #240]	@ (8000d2c <ICNA3306_WriteCmdData+0x120>)
 8000c3a:	f004 fce7 	bl	800560c <HAL_OSPI_Abort>

    sCommand.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
    sCommand.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8000c42:	2301      	movs	r3, #1
 8000c44:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000c46:	2300      	movs	r3, #0
 8000c48:	623b      	str	r3, [r7, #32]
    sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.Instruction = 0x32;
 8000c4e:	2332      	movs	r3, #50	@ 0x32
 8000c50:	61bb      	str	r3, [r7, #24]

    sCommand.Address = (cmd << 8);
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8000c58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8000c5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c62:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.AddressDtrMode = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.DataMode = HAL_OSPI_DATA_4_LINES;
 8000c6c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000c70:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DataDtrMode = HAL_OSPI_DATA_DTR_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.DummyCycles = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.DQSMode = HAL_OSPI_DQS_DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.NbData = len;
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	64fb      	str	r3, [r7, #76]	@ 0x4c

    sCommand.SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8000c82:	2300      	movs	r3, #0
 8000c84:	65fb      	str	r3, [r7, #92]	@ 0x5c

    status = HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4826      	ldr	r0, [pc, #152]	@ (8000d2c <ICNA3306_WriteCmdData+0x120>)
 8000c92:	f004 fb6b 	bl	800536c <HAL_OSPI_Command>
 8000c96:	4603      	mov	r3, r0
 8000c98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (status != HAL_OK)
 8000c9c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <ICNA3306_WriteCmdData+0x9e>
    {
        return status;
 8000ca4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000ca8:	e03c      	b.n	8000d24 <ICNA3306_WriteCmdData+0x118>
    }
    printf("Transfer length: %d\r\n", len);
 8000caa:	68b9      	ldr	r1, [r7, #8]
 8000cac:	4820      	ldr	r0, [pc, #128]	@ (8000d30 <ICNA3306_WriteCmdData+0x124>)
 8000cae:	f02d f91b 	bl	802dee8 <iprintf>
    if (len > 1024)
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cb8:	d933      	bls.n	8000d22 <ICNA3306_WriteCmdData+0x116>
    {
        HAL_OSPI_Abort(&hospi1);
 8000cba:	481c      	ldr	r0, [pc, #112]	@ (8000d2c <ICNA3306_WriteCmdData+0x120>)
 8000cbc:	f004 fca6 	bl	800560c <HAL_OSPI_Abort>
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc0:	f3bf 8f4f 	dsb	sy
}
 8000cc4:	bf00      	nop
        __DSB();

        displayRefreshing = true;
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <ICNA3306_WriteCmdData+0x128>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	701a      	strb	r2, [r3, #0]
        status = ICNA3306_SendDataDMA((uint8_t *)data, len);
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff febe 	bl	8000a50 <ICNA3306_SendDataDMA>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        if (status != HAL_OK)
 8000cda:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d005      	beq.n	8000cee <ICNA3306_WriteCmdData+0xe2>
        {
            displayRefreshing = false;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <ICNA3306_WriteCmdData+0x128>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
            return status;
 8000ce8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000cec:	e01a      	b.n	8000d24 <ICNA3306_WriteCmdData+0x118>
        }
        uint32_t timeout = HAL_GetTick() + 1000;
 8000cee:	f001 f8cd 	bl	8001e8c <HAL_GetTick>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000cf8:	663b      	str	r3, [r7, #96]	@ 0x60
        while (displayRefreshing)
 8000cfa:	e00d      	b.n	8000d18 <ICNA3306_WriteCmdData+0x10c>
        {
            if (HAL_GetTick() >= timeout)
 8000cfc:	f001 f8c6 	bl	8001e8c <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d807      	bhi.n	8000d18 <ICNA3306_WriteCmdData+0x10c>
            {
                HAL_DMA_Abort_IT(&handle_GPDMA1_Channel13);
 8000d08:	480b      	ldr	r0, [pc, #44]	@ (8000d38 <ICNA3306_WriteCmdData+0x12c>)
 8000d0a:	f001 fbf5 	bl	80024f8 <HAL_DMA_Abort_IT>
                displayRefreshing = false;
 8000d0e:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <ICNA3306_WriteCmdData+0x128>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
                return HAL_TIMEOUT;
 8000d14:	2303      	movs	r3, #3
 8000d16:	e005      	b.n	8000d24 <ICNA3306_WriteCmdData+0x118>
        while (displayRefreshing)
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <ICNA3306_WriteCmdData+0x128>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1ec      	bne.n	8000cfc <ICNA3306_WriteCmdData+0xf0>
            }
        }
    }

    return HAL_OK;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3768      	adds	r7, #104	@ 0x68
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20045afc 	.word	0x20045afc
 8000d30:	0802ecb8 	.word	0x0802ecb8
 8000d34:	2004591c 	.word	0x2004591c
 8000d38:	20045a30 	.word	0x20045a30

08000d3c <ICNA3306_DrawBuffer>:


void ICNA3306_DrawBuffer(int16_t x_start, int16_t y_start, int16_t width, int16_t height, const uint8_t *buf, size_t len)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b087      	sub	sp, #28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4604      	mov	r4, r0
 8000d44:	4608      	mov	r0, r1
 8000d46:	4611      	mov	r1, r2
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	80fb      	strh	r3, [r7, #6]
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80bb      	strh	r3, [r7, #4]
 8000d52:	460b      	mov	r3, r1
 8000d54:	807b      	strh	r3, [r7, #2]
 8000d56:	4613      	mov	r3, r2
 8000d58:	803b      	strh	r3, [r7, #0]
    uint8_t params[5] = {0};
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	711a      	strb	r2, [r3, #4]
    int16_t x_end = x_start + width - 1;
 8000d64:	88fa      	ldrh	r2, [r7, #6]
 8000d66:	887b      	ldrh	r3, [r7, #2]
 8000d68:	4413      	add	r3, r2
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	82fb      	strh	r3, [r7, #22]
    int16_t y_end = y_start + height - 1;
 8000d72:	88ba      	ldrh	r2, [r7, #4]
 8000d74:	883b      	ldrh	r3, [r7, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	82bb      	strh	r3, [r7, #20]

    // （0x2A）
    params[0] = x_start >> 8;
 8000d80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d84:	121b      	asrs	r3, r3, #8
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	733b      	strb	r3, [r7, #12]
    params[1] = x_start & 0xFF;
 8000d8c:	88fb      	ldrh	r3, [r7, #6]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	737b      	strb	r3, [r7, #13]
    params[2] = x_end >> 8;
 8000d92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d96:	121b      	asrs	r3, r3, #8
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	73bb      	strb	r3, [r7, #14]
    params[3] = x_end & 0xFF;
 8000d9e:	8afb      	ldrh	r3, [r7, #22]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	73fb      	strb	r3, [r7, #15]
    ICNA3306_WriteCmdParam(CMD_COL_SET, 4, params);
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	461a      	mov	r2, r3
 8000daa:	2104      	movs	r1, #4
 8000dac:	202a      	movs	r0, #42	@ 0x2a
 8000dae:	f7ff fed9 	bl	8000b64 <ICNA3306_WriteCmdParam>

    // （0x2B）
    params[0] = y_start >> 8;
 8000db2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000db6:	121b      	asrs	r3, r3, #8
 8000db8:	b21b      	sxth	r3, r3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	733b      	strb	r3, [r7, #12]
    params[1] = y_start & 0xFF;
 8000dbe:	88bb      	ldrh	r3, [r7, #4]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	737b      	strb	r3, [r7, #13]
    params[2] = y_end >> 8;
 8000dc4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000dc8:	121b      	asrs	r3, r3, #8
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	73bb      	strb	r3, [r7, #14]
    params[3] = y_end & 0xFF;
 8000dd0:	8abb      	ldrh	r3, [r7, #20]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	73fb      	strb	r3, [r7, #15]
    ICNA3306_WriteCmdParam(CMD_ROW_SET, 4, params);
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	461a      	mov	r2, r3
 8000ddc:	2104      	movs	r1, #4
 8000dde:	202b      	movs	r0, #43	@ 0x2b
 8000de0:	f7ff fec0 	bl	8000b64 <ICNA3306_WriteCmdParam>

    // （0x2C）
    ICNA3306_WriteCmdData(CMD_START_WRITE, len, buf);
 8000de4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000de6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000de8:	202c      	movs	r0, #44	@ 0x2c
 8000dea:	f7ff ff0f 	bl	8000c0c <ICNA3306_WriteCmdData>
}
 8000dee:	bf00      	nop
 8000df0:	371c      	adds	r7, #28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd90      	pop	{r4, r7, pc}
	...

08000df8 <ICNA3306_Init>:


void ICNA3306_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
    uint8_t parameter[14];
    memset(parameter, 0, sizeof(parameter));
 8000dfe:	463b      	mov	r3, r7
 8000e00:	220e      	movs	r2, #14
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f02d f9b7 	bl	802e178 <memset>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2104      	movs	r1, #4
 8000e0e:	4838      	ldr	r0, [pc, #224]	@ (8000ef0 <ICNA3306_Init+0xf8>)
 8000e10:	f003 f96e 	bl	80040f0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000e14:	2064      	movs	r0, #100	@ 0x64
 8000e16:	f001 f845 	bl	8001ea4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	4834      	ldr	r0, [pc, #208]	@ (8000ef0 <ICNA3306_Init+0xf8>)
 8000e20:	f003 f966 	bl	80040f0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000e24:	2064      	movs	r0, #100	@ 0x64
 8000e26:	f001 f83d 	bl	8001ea4 <HAL_Delay>

    GPDMA_Callback();
 8000e2a:	f7ff fced 	bl	8000808 <GPDMA_Callback>

    printf("OSPI DR Addr @ %p\r\n", &(hospi1.Instance->DR));
 8000e2e:	4b31      	ldr	r3, [pc, #196]	@ (8000ef4 <ICNA3306_Init+0xfc>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	3350      	adds	r3, #80	@ 0x50
 8000e34:	4619      	mov	r1, r3
 8000e36:	4830      	ldr	r0, [pc, #192]	@ (8000ef8 <ICNA3306_Init+0x100>)
 8000e38:	f02d f856 	bl	802dee8 <iprintf>
    printf("GPDMA1_Channel13 Instance @ 0x%08lX\r\n", (uint32_t)handle_GPDMA1_Channel13.Instance);
 8000e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000efc <ICNA3306_Init+0x104>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	482f      	ldr	r0, [pc, #188]	@ (8000f00 <ICNA3306_Init+0x108>)
 8000e44:	f02d f850 	bl	802dee8 <iprintf>


    ICNA3306_WriteCmdParam(CMD_RST, 0, NULL);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff fe89 	bl	8000b64 <ICNA3306_WriteCmdParam>
    HAL_Delay(150);
 8000e52:	2096      	movs	r0, #150	@ 0x96
 8000e54:	f001 f826 	bl	8001ea4 <HAL_Delay>

    ICNA3306_WriteCmdParam(CMD_SLEEP_OUT, 0, NULL);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2011      	movs	r0, #17
 8000e5e:	f7ff fe81 	bl	8000b64 <ICNA3306_WriteCmdParam>
    HAL_Delay(120);
 8000e62:	2078      	movs	r0, #120	@ 0x78
 8000e64:	f001 f81e 	bl	8001ea4 <HAL_Delay>

    parameter[0] = 0x00;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0xFE, 1, parameter);
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	461a      	mov	r2, r3
 8000e70:	2101      	movs	r1, #1
 8000e72:	20fe      	movs	r0, #254	@ 0xfe
 8000e74:	f7ff fe76 	bl	8000b64 <ICNA3306_WriteCmdParam>

    parameter[0] = 0x80;
 8000e78:	2380      	movs	r3, #128	@ 0x80
 8000e7a:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0xC4, 1, parameter);
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	461a      	mov	r2, r3
 8000e80:	2101      	movs	r1, #1
 8000e82:	20c4      	movs	r0, #196	@ 0xc4
 8000e84:	f7ff fe6e 	bl	8000b64 <ICNA3306_WriteCmdParam>

    //  TearEffect
    parameter[0] = 0x00;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x35, 1, parameter);
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2101      	movs	r1, #1
 8000e92:	2035      	movs	r0, #53	@ 0x35
 8000e94:	f7ff fe66 	bl	8000b64 <ICNA3306_WriteCmdParam>

    parameter[0] = 0x55;
 8000e98:	2355      	movs	r3, #85	@ 0x55
 8000e9a:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x3A, 1, parameter);
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	203a      	movs	r0, #58	@ 0x3a
 8000ea4:	f7ff fe5e 	bl	8000b64 <ICNA3306_WriteCmdParam>

     // (Memory Data Access Control)
     //parameter[0] = 0x00; // RGB
     //ICNA3306_WriteCmdParam(0x36, 1, parameter);

    parameter[0] = 0x20;
 8000ea8:	2320      	movs	r3, #32
 8000eaa:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x53, 1, parameter);
 8000eac:	463b      	mov	r3, r7
 8000eae:	461a      	mov	r2, r3
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	2053      	movs	r0, #83	@ 0x53
 8000eb4:	f7ff fe56 	bl	8000b64 <ICNA3306_WriteCmdParam>

    parameter[0] = 0xFF;
 8000eb8:	23ff      	movs	r3, #255	@ 0xff
 8000eba:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x51, 1, parameter);
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	2051      	movs	r0, #81	@ 0x51
 8000ec4:	f7ff fe4e 	bl	8000b64 <ICNA3306_WriteCmdParam>

    parameter[0] = 0xFF;
 8000ec8:	23ff      	movs	r3, #255	@ 0xff
 8000eca:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x63, 1, parameter);
 8000ecc:	463b      	mov	r3, r7
 8000ece:	461a      	mov	r2, r3
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	2063      	movs	r0, #99	@ 0x63
 8000ed4:	f7ff fe46 	bl	8000b64 <ICNA3306_WriteCmdParam>


    ICNA3306_WriteCmdParam(CMD_DISPLAY_ON, 0, NULL);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	2029      	movs	r0, #41	@ 0x29
 8000ede:	f7ff fe41 	bl	8000b64 <ICNA3306_WriteCmdParam>
    HAL_Delay(120);
 8000ee2:	2078      	movs	r0, #120	@ 0x78
 8000ee4:	f000 ffde 	bl	8001ea4 <HAL_Delay>
}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	42020400 	.word	0x42020400
 8000ef4:	20045afc 	.word	0x20045afc
 8000ef8:	0802ecd0 	.word	0x0802ecd0
 8000efc:	20045a30 	.word	0x20045a30
 8000f00:	0802ece4 	.word	0x0802ece4

08000f04 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f08:	4a08      	ldr	r2, [pc, #32]	@ (8000f2c <MX_FREERTOS_Init+0x28>)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4808      	ldr	r0, [pc, #32]	@ (8000f30 <MX_FREERTOS_Init+0x2c>)
 8000f0e:	f00a fefb 	bl	800bd08 <osThreadNew>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4a07      	ldr	r2, [pc, #28]	@ (8000f34 <MX_FREERTOS_Init+0x30>)
 8000f16:	6013      	str	r3, [r2, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_GUI, NULL, &GUI_Task_attributes);
 8000f18:	4a07      	ldr	r2, [pc, #28]	@ (8000f38 <MX_FREERTOS_Init+0x34>)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4807      	ldr	r0, [pc, #28]	@ (8000f3c <MX_FREERTOS_Init+0x38>)
 8000f1e:	f00a fef3 	bl	800bd08 <osThreadNew>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4a06      	ldr	r2, [pc, #24]	@ (8000f40 <MX_FREERTOS_Init+0x3c>)
 8000f26:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	0802f9ac 	.word	0x0802f9ac
 8000f30:	08000f45 	.word	0x08000f45
 8000f34:	200459a4 	.word	0x200459a4
 8000f38:	0802f9d0 	.word	0x0802f9d0
 8000f3c:	08000f55 	.word	0x08000f55
 8000f40:	200459a8 	.word	0x200459a8

08000f44 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f00a ff6d 	bl	800be2c <osDelay>
 8000f52:	e7fb      	b.n	8000f4c <StartDefaultTask+0x8>

08000f54 <TouchGFX_GUI>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void TouchGFX_GUI(void *argument)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN defaultTask */
    MX_TouchGFX_Process();
 8000f5c:	f00e fa31 	bl	800f3c2 <MX_TouchGFX_Process>

    /* Infinite loop */
    for(;;)
    {
        osDelay(1);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f00a ff63 	bl	800be2c <osDelay>
 8000f66:	e7fb      	b.n	8000f60 <TouchGFX_GUI+0xc>

08000f68 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <MX_CRC_Init+0x3c>)
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa8 <MX_CRC_Init+0x40>)
 8000f70:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <MX_CRC_Init+0x3c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <MX_CRC_Init+0x3c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <MX_CRC_Init+0x3c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f84:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <MX_CRC_Init+0x3c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <MX_CRC_Init+0x3c>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <MX_CRC_Init+0x3c>)
 8000f92:	f001 f8e3 	bl	800215c <HAL_CRC_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000f9c:	f000 fae8 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200459ac 	.word	0x200459ac
 8000fa8:	40023000 	.word	0x40023000

08000fac <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe8 <HAL_CRC_MspInit+0x3c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d10e      	bne.n	8000fdc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <HAL_CRC_MspInit+0x40>)
 8000fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fc4:	4a09      	ldr	r2, [pc, #36]	@ (8000fec <HAL_CRC_MspInit+0x40>)
 8000fc6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000fce:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <HAL_CRC_MspInit+0x40>)
 8000fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	40023000 	.word	0x40023000
 8000fec:	46020c00 	.word	0x46020c00

08000ff0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8001064 <MX_DMA2D_Init+0x74>)
 8000ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8001068 <MX_DMA2D_Init+0x78>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <MX_DMA2D_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001000:	4b18      	ldr	r3, [pc, #96]	@ (8001064 <MX_DMA2D_Init+0x74>)
 8001002:	2202      	movs	r2, #2
 8001004:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001006:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <MX_DMA2D_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 800100c:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <MX_DMA2D_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8001012:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <MX_DMA2D_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001018:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <MX_DMA2D_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800101e:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <MX_DMA2D_Init+0x74>)
 8001020:	2202      	movs	r2, #2
 8001022:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001024:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <MX_DMA2D_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <MX_DMA2D_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <MX_DMA2D_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <MX_DMA2D_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	655a      	str	r2, [r3, #84]	@ 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800103c:	4809      	ldr	r0, [pc, #36]	@ (8001064 <MX_DMA2D_Init+0x74>)
 800103e:	f001 fc8a 	bl	8002956 <HAL_DMA2D_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8001048:	f000 fa92 	bl	8001570 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800104c:	2101      	movs	r1, #1
 800104e:	4805      	ldr	r0, [pc, #20]	@ (8001064 <MX_DMA2D_Init+0x74>)
 8001050:	f001 fdf2 	bl	8002c38 <HAL_DMA2D_ConfigLayer>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 800105a:	f000 fa89 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200459d0 	.word	0x200459d0
 8001068:	4002b000 	.word	0x4002b000

0800106c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0e      	ldr	r2, [pc, #56]	@ (80010b4 <HAL_DMA2D_MspInit+0x48>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d116      	bne.n	80010ac <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <HAL_DMA2D_MspInit+0x4c>)
 8001080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001084:	4a0c      	ldr	r2, [pc, #48]	@ (80010b8 <HAL_DMA2D_MspInit+0x4c>)
 8001086:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800108a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <HAL_DMA2D_MspInit+0x4c>)
 8001090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001094:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2105      	movs	r1, #5
 80010a0:	2076      	movs	r0, #118	@ 0x76
 80010a2:	f000 ffdb 	bl	800205c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010a6:	2076      	movs	r0, #118	@ 0x76
 80010a8:	f000 fff2 	bl	8002090 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	4002b000 	.word	0x4002b000
 80010b8:	46020c00 	.word	0x46020c00

080010bc <MX_GPDMA1_Init>:

DMA_HandleTypeDef handle_GPDMA1_Channel13;

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80010c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <MX_GPDMA1_Init+0x84>)
 80010c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001140 <MX_GPDMA1_Init+0x84>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80010d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <MX_GPDMA1_Init+0x84>)
 80010d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel13_IRQn, 5, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2105      	movs	r1, #5
 80010e4:	2055      	movs	r0, #85	@ 0x55
 80010e6:	f000 ffb9 	bl	800205c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel13_IRQn);
 80010ea:	2055      	movs	r0, #85	@ 0x55
 80010ec:	f000 ffd0 	bl	8002090 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel13.Instance = GPDMA1_Channel13;
 80010f0:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <MX_GPDMA1_Init+0x88>)
 80010f2:	4a15      	ldr	r2, [pc, #84]	@ (8001148 <MX_GPDMA1_Init+0x8c>)
 80010f4:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel13.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80010f6:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <MX_GPDMA1_Init+0x88>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel13.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80010fc:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <MX_GPDMA1_Init+0x88>)
 80010fe:	2200      	movs	r2, #0
 8001100:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel13.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001102:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <MX_GPDMA1_Init+0x88>)
 8001104:	2200      	movs	r2, #0
 8001106:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel13.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8001108:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <MX_GPDMA1_Init+0x88>)
 800110a:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 800110e:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel13.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_NORMAL;
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <MX_GPDMA1_Init+0x88>)
 8001112:	2280      	movs	r2, #128	@ 0x80
 8001114:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel13) != HAL_OK)
 8001116:	480b      	ldr	r0, [pc, #44]	@ (8001144 <MX_GPDMA1_Init+0x88>)
 8001118:	f001 fe2c 	bl	8002d74 <HAL_DMAEx_List_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_GPDMA1_Init+0x6a>
  {
    Error_Handler();
 8001122:	f000 fa25 	bl	8001570 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel13, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001126:	2110      	movs	r1, #16
 8001128:	4806      	ldr	r0, [pc, #24]	@ (8001144 <MX_GPDMA1_Init+0x88>)
 800112a:	f001 fbb3 	bl	8002894 <HAL_DMA_ConfigChannelAttributes>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_GPDMA1_Init+0x7c>
  {
    Error_Handler();
 8001134:	f000 fa1c 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	46020c00 	.word	0x46020c00
 8001144:	20045a30 	.word	0x20045a30
 8001148:	400206d0 	.word	0x400206d0

0800114c <MX_GPIO_Init>:
     PC15-OSC32_OUT (PC15)   ------> RCC_OSC32_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	4b34      	ldr	r3, [pc, #208]	@ (8001234 <MX_GPIO_Init+0xe8>)
 8001164:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001168:	4a32      	ldr	r2, [pc, #200]	@ (8001234 <MX_GPIO_Init+0xe8>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001172:	4b30      	ldr	r3, [pc, #192]	@ (8001234 <MX_GPIO_Init+0xe8>)
 8001174:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	4b2c      	ldr	r3, [pc, #176]	@ (8001234 <MX_GPIO_Init+0xe8>)
 8001182:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001186:	4a2b      	ldr	r2, [pc, #172]	@ (8001234 <MX_GPIO_Init+0xe8>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001190:	4b28      	ldr	r3, [pc, #160]	@ (8001234 <MX_GPIO_Init+0xe8>)
 8001192:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	4b25      	ldr	r3, [pc, #148]	@ (8001234 <MX_GPIO_Init+0xe8>)
 80011a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011a4:	4a23      	ldr	r2, [pc, #140]	@ (8001234 <MX_GPIO_Init+0xe8>)
 80011a6:	f043 0302 	orr.w	r3, r3, #2
 80011aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011ae:	4b21      	ldr	r3, [pc, #132]	@ (8001234 <MX_GPIO_Init+0xe8>)
 80011b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin : PA2 */
    GPIO_InitStruct.Pin = GPIO_PIN_2; // TE
 80011bc:	2304      	movs	r3, #4
 80011be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001238 <MX_GPIO_Init+0xec>)
 80011c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4619      	mov	r1, r3
 80011ce:	481b      	ldr	r0, [pc, #108]	@ (800123c <MX_GPIO_Init+0xf0>)
 80011d0:	f002 fd9e 	bl	8003d10 <HAL_GPIO_Init>

    /*Configure GPIO pin : PC5 */
    GPIO_InitStruct.Pin = GPIO_PIN_5;           // CTP_RST
 80011d4:	2320      	movs	r3, #32
 80011d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011d8:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <MX_GPIO_Init+0xf4>)
 80011da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011dc:	2301      	movs	r3, #1
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	4619      	mov	r1, r3
 80011ea:	4816      	ldr	r0, [pc, #88]	@ (8001244 <MX_GPIO_Init+0xf8>)
 80011ec:	f002 fd90 	bl	8003d10 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB2  */
    GPIO_InitStruct.Pin = GPIO_PIN_2; // LCD_RST
 80011f0:	2304      	movs	r3, #4
 80011f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4619      	mov	r1, r3
 8001206:	4810      	ldr	r0, [pc, #64]	@ (8001248 <MX_GPIO_Init+0xfc>)
 8001208:	f002 fd82 	bl	8003d10 <HAL_GPIO_Init>

    /*Configure GPIO pin :  PB10 */
    GPIO_InitStruct.Pin = GPIO_PIN_10; // CTP_INT
 800120c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001210:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001212:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <MX_GPIO_Init+0xf4>)
 8001214:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001216:	2301      	movs	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	4619      	mov	r1, r3
 8001224:	4808      	ldr	r0, [pc, #32]	@ (8001248 <MX_GPIO_Init+0xfc>)
 8001226:	f002 fd73 	bl	8003d10 <HAL_GPIO_Init>
}
 800122a:	bf00      	nop
 800122c:	3720      	adds	r7, #32
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	46020c00 	.word	0x46020c00
 8001238:	10110000 	.word	0x10110000
 800123c:	42020000 	.word	0x42020000
 8001240:	10210000 	.word	0x10210000
 8001244:	42020800 	.word	0x42020800
 8001248:	42020400 	.word	0x42020400

0800124c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
    /* USER CODE END I2C3_Init 0 */

    /* USER CODE BEGIN I2C3_Init 1 */

    /* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001250:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <MX_I2C3_Init+0x74>)
 8001252:	4a1c      	ldr	r2, [pc, #112]	@ (80012c4 <MX_I2C3_Init+0x78>)
 8001254:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00B01A4B;  // 400kHz @ 160MHz SYSCLK
 8001256:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <MX_I2C3_Init+0x74>)
 8001258:	4a1b      	ldr	r2, [pc, #108]	@ (80012c8 <MX_I2C3_Init+0x7c>)
 800125a:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 800125c:	4b18      	ldr	r3, [pc, #96]	@ (80012c0 <MX_I2C3_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001262:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <MX_I2C3_Init+0x74>)
 8001264:	2201      	movs	r2, #1
 8001266:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001268:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <MX_I2C3_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 800126e:	4b14      	ldr	r3, [pc, #80]	@ (80012c0 <MX_I2C3_Init+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <MX_I2C3_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800127a:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <MX_I2C3_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <MX_I2C3_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]

    if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001286:	480e      	ldr	r0, [pc, #56]	@ (80012c0 <MX_I2C3_Init+0x74>)
 8001288:	f002 ff4a 	bl	8004120 <HAL_I2C_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_I2C3_Init+0x4a>
    {
        Error_Handler();
 8001292:	f000 f96d 	bl	8001570 <Error_Handler>
    }

    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001296:	2100      	movs	r1, #0
 8001298:	4809      	ldr	r0, [pc, #36]	@ (80012c0 <MX_I2C3_Init+0x74>)
 800129a:	f003 fdc1 	bl	8004e20 <HAL_I2CEx_ConfigAnalogFilter>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_I2C3_Init+0x5c>
    {
        Error_Handler();
 80012a4:	f000 f964 	bl	8001570 <Error_Handler>
    }

    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80012a8:	2100      	movs	r1, #0
 80012aa:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <MX_I2C3_Init+0x74>)
 80012ac:	f003 fe03 	bl	8004eb6 <HAL_I2CEx_ConfigDigitalFilter>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_I2C3_Init+0x6e>
    {
        Error_Handler();
 80012b6:	f000 f95b 	bl	8001570 <Error_Handler>
    }
    /* USER CODE BEGIN I2C3_Init 2 */

    /* USER CODE END I2C3_Init 2 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20045aa8 	.word	0x20045aa8
 80012c4:	46002800 	.word	0x46002800
 80012c8:	00b01a4b 	.word	0x00b01a4b

080012cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *i2cHandle)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0ba      	sub	sp, #232	@ 0xe8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	22c0      	movs	r2, #192	@ 0xc0
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f02c ff43 	bl	802e178 <memset>
    if (i2cHandle->Instance == I2C3)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a26      	ldr	r2, [pc, #152]	@ (8001390 <HAL_I2C_MspInit+0xc4>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d145      	bne.n	8001388 <HAL_I2C_MspInit+0xbc>

        /* USER CODE END I2C3_MspInit 0 */

        /** Initializes the peripherals clock
         */
        PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80012fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	e9c7 2304 	strd	r2, r3, [r7, #16]
        PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	4618      	mov	r0, r3
 8001314:	f006 fd5c 	bl	8007dd0 <HAL_RCCEx_PeriphCLKConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_I2C_MspInit+0x56>
        {
            Error_Handler();
 800131e:	f000 f927 	bl	8001570 <Error_Handler>
        }

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001322:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <HAL_I2C_MspInit+0xc8>)
 8001324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001328:	4a1a      	ldr	r2, [pc, #104]	@ (8001394 <HAL_I2C_MspInit+0xc8>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001332:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <HAL_I2C_MspInit+0xc8>)
 8001334:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
        /**I2C3 GPIO Configuration
        PC0     ------> I2C3_SCL
        PC1     ------> I2C3_SDA
        */
        GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001340:	2303      	movs	r3, #3
 8001342:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001346:	2312      	movs	r3, #18
 8001348:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001358:	2304      	movs	r3, #4
 800135a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001362:	4619      	mov	r1, r3
 8001364:	480c      	ldr	r0, [pc, #48]	@ (8001398 <HAL_I2C_MspInit+0xcc>)
 8001366:	f002 fcd3 	bl	8003d10 <HAL_GPIO_Init>

        /* I2C3 clock enable */
        __HAL_RCC_I2C3_CLK_ENABLE();
 800136a:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <HAL_I2C_MspInit+0xc8>)
 800136c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001370:	4a08      	ldr	r2, [pc, #32]	@ (8001394 <HAL_I2C_MspInit+0xc8>)
 8001372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001376:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800137a:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <HAL_I2C_MspInit+0xc8>)
 800137c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
        /* USER CODE BEGIN I2C3_MspInit 1 */

        /* USER CODE END I2C3_MspInit 1 */
    }
}
 8001388:	bf00      	nop
 800138a:	37e8      	adds	r7, #232	@ 0xe8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	46002800 	.word	0x46002800
 8001394:	46020c00 	.word	0x46020c00
 8001398:	42020800 	.word	0x42020800

0800139c <I2C_Scan>:
 * @brief 扫描I2C总线上的设备
 * @param hi2c: I2C句柄指针
 * @return none
 */
void I2C_Scan(I2C_HandleTypeDef *hi2c)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	6078      	str	r0, [r7, #4]
    printf("\r\nScanning I2C bus:\r\n");
 80013a4:	4815      	ldr	r0, [pc, #84]	@ (80013fc <I2C_Scan+0x60>)
 80013a6:	f02c fe07 	bl	802dfb8 <puts>
    HAL_StatusTypeDef result;
    uint8_t i;

    // 7位地址范围是0x00~0x7F
    for (i = 1; i < 128; i++)
 80013aa:	2301      	movs	r3, #1
 80013ac:	73fb      	strb	r3, [r7, #15]
 80013ae:	e01a      	b.n	80013e6 <I2C_Scan+0x4a>
    {
        // 尝试与每个地址通信(写入0字节数据)
        result = HAL_I2C_Master_Transmit(hi2c, (uint16_t)(i << 1), 0, 0, 10);
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	b299      	uxth	r1, r3
 80013b8:	230a      	movs	r3, #10
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2300      	movs	r3, #0
 80013be:	2200      	movs	r2, #0
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f002 ff49 	bl	8004258 <HAL_I2C_Master_Transmit>
 80013c6:	4603      	mov	r3, r0
 80013c8:	73bb      	strb	r3, [r7, #14]

        if (result == HAL_OK)
 80013ca:	7bbb      	ldrb	r3, [r7, #14]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d104      	bne.n	80013da <I2C_Scan+0x3e>
        {
            printf("Found I2C device at address: 0x%X\r\n", i);
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	4619      	mov	r1, r3
 80013d4:	480a      	ldr	r0, [pc, #40]	@ (8001400 <I2C_Scan+0x64>)
 80013d6:	f02c fd87 	bl	802dee8 <iprintf>
        }
        HAL_Delay(1); // 短暂延时,避免总线太忙
 80013da:	2001      	movs	r0, #1
 80013dc:	f000 fd62 	bl	8001ea4 <HAL_Delay>
    for (i = 1; i < 128; i++)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	3301      	adds	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	dae0      	bge.n	80013b0 <I2C_Scan+0x14>
    }
    printf("I2C scan completed\r\n");
 80013ee:	4805      	ldr	r0, [pc, #20]	@ (8001404 <I2C_Scan+0x68>)
 80013f0:	f02c fde2 	bl	802dfb8 <puts>
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	0802ed24 	.word	0x0802ed24
 8001400:	0802ed3c 	.word	0x0802ed3c
 8001404:	0802ed60 	.word	0x0802ed60

08001408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140c:	f000 fcfa 	bl	8001e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001410:	f000 f826 	bl	8001460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001414:	f7ff fe9a 	bl	800114c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001418:	f7ff fe50 	bl	80010bc <MX_GPDMA1_Init>
  //MX_DCACHE1_Init();
  MX_DMA2D_Init();
 800141c:	f7ff fde8 	bl	8000ff0 <MX_DMA2D_Init>
  //MX_ICACHE_Init();
  MX_TIM6_Init();
 8001420:	f000 fbb4 	bl	8001b8c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001424:	f000 fc10 	bl	8001c48 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8001428:	f7ff fd9e 	bl	8000f68 <MX_CRC_Init>
  MX_I2C3_Init();
 800142c:	f7ff ff0e 	bl	800124c <MX_I2C3_Init>
  MX_OCTOSPI1_Init();
 8001430:	f000 f8a4 	bl	800157c <MX_OCTOSPI1_Init>
  MX_TouchGFX_Init();
 8001434:	f00d ffbd 	bl	800f3b2 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8001438:	f00d ffb4 	bl	800f3a4 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  I2C_Scan(&hi2c3);
 800143c:	4806      	ldr	r0, [pc, #24]	@ (8001458 <main+0x50>)
 800143e:	f7ff ffad 	bl	800139c <I2C_Scan>
    HAL_TIM_Base_Start_IT(&htim6);
 8001442:	4806      	ldr	r0, [pc, #24]	@ (800145c <main+0x54>)
 8001444:	f009 f9b4 	bl	800a7b0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001448:	f00a fc0e 	bl	800bc68 <osKernelInitialize>

  /* Call init function for freertos objects (in app_freertos.c) */
  MX_FREERTOS_Init();
 800144c:	f7ff fd5a 	bl	8000f04 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001450:	f00a fc30 	bl	800bcb4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <main+0x4c>
 8001458:	20045aa8 	.word	0x20045aa8
 800145c:	20045ba8 	.word	0x20045ba8

08001460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b09e      	sub	sp, #120	@ 0x78
 8001464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001466:	f107 0318 	add.w	r3, r7, #24
 800146a:	2260      	movs	r2, #96	@ 0x60
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f02c fe82 	bl	802e178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001474:	463b      	mov	r3, r7
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]
 8001482:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001484:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001488:	f005 f932 	bl	80066f0 <HAL_PWREx_ControlVoltageScaling>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001492:	f000 f86d 	bl	8001570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001496:	2310      	movs	r3, #16
 8001498:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800149a:	2301      	movs	r3, #1
 800149c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800149e:	2310      	movs	r3, #16
 80014a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a6:	2302      	movs	r3, #2
 80014a8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014aa:	2301      	movs	r3, #1
 80014ac:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80014ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80014b4:	2303      	movs	r3, #3
 80014b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80014b8:	230a      	movs	r3, #10
 80014ba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80014bc:	2302      	movs	r3, #2
 80014be:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014c0:	2302      	movs	r3, #2
 80014c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80014c8:	230c      	movs	r3, #12
 80014ca:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d0:	f107 0318 	add.w	r3, r7, #24
 80014d4:	4618      	mov	r0, r3
 80014d6:	f005 f997 	bl	8006808 <HAL_RCC_OscConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80014e0:	f000 f846 	bl	8001570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e4:	231f      	movs	r3, #31
 80014e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e8:	2303      	movs	r3, #3
 80014ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	2104      	movs	r1, #4
 8001500:	4618      	mov	r0, r3
 8001502:	f006 f85d 	bl	80075c0 <HAL_RCC_ClockConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800150c:	f000 f830 	bl	8001570 <Error_Handler>
  }
}
 8001510:	bf00      	nop
 8001512:	3778      	adds	r7, #120	@ 0x78
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0x200);
 8001520:	1d39      	adds	r1, r7, #4
 8001522:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001526:	2201      	movs	r2, #1
 8001528:	4803      	ldr	r0, [pc, #12]	@ (8001538 <__io_putchar+0x20>)
 800152a:	f009 fdb1 	bl	800b090 <HAL_UART_Transmit>
    return ch;
 800152e:	687b      	ldr	r3, [r7, #4]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20045bf4 	.word	0x20045bf4

0800153c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a07      	ldr	r2, [pc, #28]	@ (8001568 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d101      	bne.n	8001552 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800154e:	f000 fc89 	bl	8001e64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
    if (htim->Instance == TIM6)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a05      	ldr	r2, [pc, #20]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d101      	bne.n	8001560 <HAL_TIM_PeriodElapsedCallback+0x24>
    {
        touchgfx_tim_vsync();
 800155c:	f011 fb09 	bl	8012b72 <touchgfx_tim_vsync>
    }
  /* USER CODE END Callback 1 */
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40001400 	.word	0x40001400
 800156c:	40001000 	.word	0x40001000

08001570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001574:	b672      	cpsid	i
}
 8001576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <Error_Handler+0x8>

0800157c <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001582:	f107 0308 	add.w	r3, r7, #8
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]
 8001592:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8001594:	463b      	mov	r3, r7
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 800159c:	4b2e      	ldr	r3, [pc, #184]	@ (8001658 <MX_OCTOSPI1_Init+0xdc>)
 800159e:	4a2f      	ldr	r2, [pc, #188]	@ (800165c <MX_OCTOSPI1_Init+0xe0>)
 80015a0:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 8;
 80015a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001658 <MX_OCTOSPI1_Init+0xdc>)
 80015a4:	2208      	movs	r2, #8
 80015a6:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80015a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001658 <MX_OCTOSPI1_Init+0xdc>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80015ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001658 <MX_OCTOSPI1_Init+0xdc>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 22;
 80015b4:	4b28      	ldr	r3, [pc, #160]	@ (8001658 <MX_OCTOSPI1_Init+0xdc>)
 80015b6:	2216      	movs	r2, #22
 80015b8:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80015ba:	4b27      	ldr	r3, [pc, #156]	@ (8001658 <MX_OCTOSPI1_Init+0xdc>)
 80015bc:	2201      	movs	r2, #1
 80015be:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80015c0:	4b25      	ldr	r3, [pc, #148]	@ (8001658 <MX_OCTOSPI1_Init+0xdc>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80015c6:	4b24      	ldr	r3, [pc, #144]	@ (8001658 <MX_OCTOSPI1_Init+0xdc>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80015cc:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <MX_OCTOSPI1_Init+0xdc>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 5;
 80015d2:	4b21      	ldr	r3, [pc, #132]	@ (8001658 <MX_OCTOSPI1_Init+0xdc>)
 80015d4:	2205      	movs	r2, #5
 80015d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80015d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001658 <MX_OCTOSPI1_Init+0xdc>)
 80015da:	2200      	movs	r2, #0
 80015dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80015de:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <MX_OCTOSPI1_Init+0xdc>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80015e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001658 <MX_OCTOSPI1_Init+0xdc>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80015ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <MX_OCTOSPI1_Init+0xdc>)
 80015ec:	2208      	movs	r2, #8
 80015ee:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 80015f0:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <MX_OCTOSPI1_Init+0xdc>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 80015f6:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <MX_OCTOSPI1_Init+0xdc>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80015fc:	4816      	ldr	r0, [pc, #88]	@ (8001658 <MX_OCTOSPI1_Init+0xdc>)
 80015fe:	f003 fcb7 	bl	8004f70 <HAL_OSPI_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_OCTOSPI1_Init+0x90>
  {
    Error_Handler();
 8001608:	f7ff ffb2 	bl	8001570 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 800160c:	2301      	movs	r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.NCSPort = 1;
 8001610:	2301      	movs	r3, #1
 8001612:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001614:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001618:	617b      	str	r3, [r7, #20]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001622:	4619      	mov	r1, r3
 8001624:	480c      	ldr	r0, [pc, #48]	@ (8001658 <MX_OCTOSPI1_Init+0xdc>)
 8001626:	f004 f875 	bl	8005714 <HAL_OSPIM_Config>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_OCTOSPI1_Init+0xb8>
  {
    Error_Handler();
 8001630:	f7ff ff9e 	bl	8001570 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 800163c:	463b      	mov	r3, r7
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	@ (8001658 <MX_OCTOSPI1_Init+0xdc>)
 8001642:	f005 f80d 	bl	8006660 <HAL_OSPI_DLYB_SetConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_OCTOSPI1_Init+0xd4>
  {
    Error_Handler();
 800164c:	f7ff ff90 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	3720      	adds	r7, #32
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20045afc 	.word	0x20045afc
 800165c:	420d1400 	.word	0x420d1400

08001660 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b0bc      	sub	sp, #240	@ 0xf0
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001678:	f107 0318 	add.w	r3, r7, #24
 800167c:	22c0      	movs	r2, #192	@ 0xc0
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f02c fd79 	bl	802e178 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a4f      	ldr	r2, [pc, #316]	@ (80017c8 <HAL_OSPI_MspInit+0x168>)
 800168c:	4293      	cmp	r3, r2
 800168e:	f040 8096 	bne.w	80017be <HAL_OSPI_MspInit+0x15e>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001692:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a4:	f107 0318 	add.w	r3, r7, #24
 80016a8:	4618      	mov	r0, r3
 80016aa:	f006 fb91 	bl	8007dd0 <HAL_RCCEx_PeriphCLKConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <HAL_OSPI_MspInit+0x58>
    {
      Error_Handler();
 80016b4:	f7ff ff5c 	bl	8001570 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80016b8:	4b44      	ldr	r3, [pc, #272]	@ (80017cc <HAL_OSPI_MspInit+0x16c>)
 80016ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016be:	4a43      	ldr	r2, [pc, #268]	@ (80017cc <HAL_OSPI_MspInit+0x16c>)
 80016c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016c8:	4b40      	ldr	r3, [pc, #256]	@ (80017cc <HAL_OSPI_MspInit+0x16c>)
 80016ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80016d6:	4b3d      	ldr	r3, [pc, #244]	@ (80017cc <HAL_OSPI_MspInit+0x16c>)
 80016d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016dc:	4a3b      	ldr	r2, [pc, #236]	@ (80017cc <HAL_OSPI_MspInit+0x16c>)
 80016de:	f043 0310 	orr.w	r3, r3, #16
 80016e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016e6:	4b39      	ldr	r3, [pc, #228]	@ (80017cc <HAL_OSPI_MspInit+0x16c>)
 80016e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b35      	ldr	r3, [pc, #212]	@ (80017cc <HAL_OSPI_MspInit+0x16c>)
 80016f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016fa:	4a34      	ldr	r2, [pc, #208]	@ (80017cc <HAL_OSPI_MspInit+0x16c>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001704:	4b31      	ldr	r3, [pc, #196]	@ (80017cc <HAL_OSPI_MspInit+0x16c>)
 8001706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	4b2e      	ldr	r3, [pc, #184]	@ (80017cc <HAL_OSPI_MspInit+0x16c>)
 8001714:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001718:	4a2c      	ldr	r2, [pc, #176]	@ (80017cc <HAL_OSPI_MspInit+0x16c>)
 800171a:	f043 0302 	orr.w	r3, r3, #2
 800171e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001722:	4b2a      	ldr	r3, [pc, #168]	@ (80017cc <HAL_OSPI_MspInit+0x16c>)
 8001724:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> OCTOSPIM_P1_IO3
    PA7     ------> OCTOSPIM_P1_IO2
    PB0     ------> OCTOSPIM_P1_IO1
    PB1     ------> OCTOSPIM_P1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 8001730:	23c8      	movs	r3, #200	@ 0xc8
 8001732:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001748:	230a      	movs	r3, #10
 800174a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001752:	4619      	mov	r1, r3
 8001754:	481e      	ldr	r0, [pc, #120]	@ (80017d0 <HAL_OSPI_MspInit+0x170>)
 8001756:	f002 fadb 	bl	8003d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800175a:	2310      	movs	r3, #16
 800175c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001772:	2303      	movs	r3, #3
 8001774:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001778:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800177c:	4619      	mov	r1, r3
 800177e:	4814      	ldr	r0, [pc, #80]	@ (80017d0 <HAL_OSPI_MspInit+0x170>)
 8001780:	f002 fac6 	bl	8003d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001784:	2303      	movs	r3, #3
 8001786:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800179c:	230a      	movs	r3, #10
 800179e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017a6:	4619      	mov	r1, r3
 80017a8:	480a      	ldr	r0, [pc, #40]	@ (80017d4 <HAL_OSPI_MspInit+0x174>)
 80017aa:	f002 fab1 	bl	8003d10 <HAL_GPIO_Init>

    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 4, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2104      	movs	r1, #4
 80017b2:	204c      	movs	r0, #76	@ 0x4c
 80017b4:	f000 fc52 	bl	800205c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80017b8:	204c      	movs	r0, #76	@ 0x4c
 80017ba:	f000 fc69 	bl	8002090 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 80017be:	bf00      	nop
 80017c0:	37f0      	adds	r7, #240	@ 0xf0
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	420d1400 	.word	0x420d1400
 80017cc:	46020c00 	.word	0x46020c00
 80017d0:	42020000 	.word	0x42020000
 80017d4:	42020400 	.word	0x42020400

080017d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <HAL_MspInit+0x38>)
 80017e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <HAL_MspInit+0x38>)
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80017ee:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <HAL_MspInit+0x38>)
 80017f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	210f      	movs	r1, #15
 8001800:	f06f 0001 	mvn.w	r0, #1
 8001804:	f000 fc2a 	bl	800205c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	46020c00 	.word	0x46020c00

08001814 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08e      	sub	sp, #56	@ 0x38
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001824:	4b2e      	ldr	r3, [pc, #184]	@ (80018e0 <HAL_InitTick+0xcc>)
 8001826:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800182a:	4a2d      	ldr	r2, [pc, #180]	@ (80018e0 <HAL_InitTick+0xcc>)
 800182c:	f043 0320 	orr.w	r3, r3, #32
 8001830:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001834:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <HAL_InitTick+0xcc>)
 8001836:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800183a:	f003 0320 	and.w	r3, r3, #32
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001842:	f107 0210 	add.w	r2, r7, #16
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f006 fa01 	bl	8007c54 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001852:	f006 f9c3 	bl	8007bdc <HAL_RCC_GetPCLK1Freq>
 8001856:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800185a:	4a22      	ldr	r2, [pc, #136]	@ (80018e4 <HAL_InitTick+0xd0>)
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	0c9b      	lsrs	r3, r3, #18
 8001862:	3b01      	subs	r3, #1
 8001864:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001866:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <HAL_InitTick+0xd4>)
 8001868:	4a20      	ldr	r2, [pc, #128]	@ (80018ec <HAL_InitTick+0xd8>)
 800186a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800186c:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <HAL_InitTick+0xd4>)
 800186e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001872:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001874:	4a1c      	ldr	r2, [pc, #112]	@ (80018e8 <HAL_InitTick+0xd4>)
 8001876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001878:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800187a:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <HAL_InitTick+0xd4>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001880:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <HAL_InitTick+0xd4>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 8001886:	4818      	ldr	r0, [pc, #96]	@ (80018e8 <HAL_InitTick+0xd4>)
 8001888:	f008 ff3a 	bl	800a700 <HAL_TIM_Base_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001892:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001896:	2b00      	cmp	r3, #0
 8001898:	d118      	bne.n	80018cc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 800189a:	4813      	ldr	r0, [pc, #76]	@ (80018e8 <HAL_InitTick+0xd4>)
 800189c:	f008 ff88 	bl	800a7b0 <HAL_TIM_Base_Start_IT>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80018a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10e      	bne.n	80018cc <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d808      	bhi.n	80018c6 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM7 global Interrupt */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	2032      	movs	r0, #50	@ 0x32
 80018ba:	f000 fbcf 	bl	800205c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018be:	4a0c      	ldr	r2, [pc, #48]	@ (80018f0 <HAL_InitTick+0xdc>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	e002      	b.n	80018cc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80018cc:	2032      	movs	r0, #50	@ 0x32
 80018ce:	f000 fbdf 	bl	8002090 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80018d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3738      	adds	r7, #56	@ 0x38
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	46020c00 	.word	0x46020c00
 80018e4:	431bde83 	.word	0x431bde83
 80018e8:	20045b58 	.word	0x20045b58
 80018ec:	40001400 	.word	0x40001400
 80018f0:	20000008 	.word	0x20000008

080018f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <NMI_Handler+0x4>

080018fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <HardFault_Handler+0x4>

08001904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <MemManage_Handler+0x4>

0800190c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <BusFault_Handler+0x4>

08001914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <UsageFault_Handler+0x4>

0800191c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001930:	4802      	ldr	r0, [pc, #8]	@ (800193c <TIM6_IRQHandler+0x10>)
 8001932:	f008 ffdd 	bl	800a8f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20045ba8 	.word	0x20045ba8

08001940 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001944:	4802      	ldr	r0, [pc, #8]	@ (8001950 <TIM7_IRQHandler+0x10>)
 8001946:	f008 ffd3 	bl	800a8f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20045b58 	.word	0x20045b58

08001954 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8001958:	4802      	ldr	r0, [pc, #8]	@ (8001964 <OCTOSPI1_IRQHandler+0x10>)
 800195a:	f003 fbc5 	bl	80050e8 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20045afc 	.word	0x20045afc

08001968 <GPDMA1_Channel13_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 13 global interrupt.
  */
void GPDMA1_Channel13_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 0 */

  /* USER CODE END GPDMA1_Channel13_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel13);
 800196c:	4802      	ldr	r0, [pc, #8]	@ (8001978 <GPDMA1_Channel13_IRQHandler+0x10>)
 800196e:	f000 fdec 	bl	800254a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 1 */

  /* USER CODE END GPDMA1_Channel13_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20045a30 	.word	0x20045a30

0800197c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001980:	4802      	ldr	r0, [pc, #8]	@ (800198c <DMA2D_IRQHandler+0x10>)
 8001982:	f001 f849 	bl	8002a18 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200459d0 	.word	0x200459d0

08001990 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return 1;
 8001994:	2301      	movs	r3, #1
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <_kill>:

int _kill(int pid, int sig)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019aa:	f02c fc87 	bl	802e2bc <__errno>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2216      	movs	r2, #22
 80019b2:	601a      	str	r2, [r3, #0]
  return -1;
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_exit>:

void _exit (int status)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ffe7 	bl	80019a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019d2:	bf00      	nop
 80019d4:	e7fd      	b.n	80019d2 <_exit+0x12>

080019d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	e00a      	b.n	80019fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019e8:	f3af 8000 	nop.w
 80019ec:	4601      	mov	r1, r0
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	60ba      	str	r2, [r7, #8]
 80019f4:	b2ca      	uxtb	r2, r1
 80019f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3301      	adds	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	dbf0      	blt.n	80019e8 <_read+0x12>
  }

  return len;
 8001a06:	687b      	ldr	r3, [r7, #4]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e009      	b.n	8001a36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	60ba      	str	r2, [r7, #8]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fd74 	bl	8001518 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3301      	adds	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	dbf1      	blt.n	8001a22 <_write+0x12>
  }
  return len;
 8001a3e:	687b      	ldr	r3, [r7, #4]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <_close>:

int _close(int file)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a70:	605a      	str	r2, [r3, #4]
  return 0;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <_isatty>:

int _isatty(int file)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a88:	2301      	movs	r3, #1
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b085      	sub	sp, #20
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab8:	4a14      	ldr	r2, [pc, #80]	@ (8001b0c <_sbrk+0x5c>)
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <_sbrk+0x60>)
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac4:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001acc:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <_sbrk+0x64>)
 8001ace:	4a12      	ldr	r2, [pc, #72]	@ (8001b18 <_sbrk+0x68>)
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad2:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d207      	bcs.n	8001af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae0:	f02c fbec 	bl	802e2bc <__errno>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	e009      	b.n	8001b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af0:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af6:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <_sbrk+0x64>)
 8001b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200c0000 	.word	0x200c0000
 8001b10:	00000800 	.word	0x00000800
 8001b14:	20045ba4 	.word	0x20045ba4
 8001b18:	2005ca60 	.word	0x2005ca60

08001b1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b20:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <SystemInit+0x68>)
 8001b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b26:	4a17      	ldr	r2, [pc, #92]	@ (8001b84 <SystemInit+0x68>)
 8001b28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001b30:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <SystemInit+0x6c>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001b36:	4b14      	ldr	r3, [pc, #80]	@ (8001b88 <SystemInit+0x6c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <SystemInit+0x6c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001b42:	4b11      	ldr	r3, [pc, #68]	@ (8001b88 <SystemInit+0x6c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001b48:	4b0f      	ldr	r3, [pc, #60]	@ (8001b88 <SystemInit+0x6c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b88 <SystemInit+0x6c>)
 8001b4e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001b52:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001b56:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001b58:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <SystemInit+0x6c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b88 <SystemInit+0x6c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a09      	ldr	r2, [pc, #36]	@ (8001b88 <SystemInit+0x6c>)
 8001b64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001b6a:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <SystemInit+0x6c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b70:	4b04      	ldr	r3, [pc, #16]	@ (8001b84 <SystemInit+0x68>)
 8001b72:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b76:	609a      	str	r2, [r3, #8]
  #endif
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000ed00 	.word	0xe000ed00
 8001b88:	46020c00 	.word	0x46020c00

08001b8c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b9c:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001b9e:	4a15      	ldr	r2, [pc, #84]	@ (8001bf4 <MX_TIM6_Init+0x68>)
 8001ba0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001ba2:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001bae:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bb4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bbc:	480c      	ldr	r0, [pc, #48]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001bbe:	f008 fd9f 	bl	800a700 <HAL_TIM_Base_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001bc8:	f7ff fcd2 	bl	8001570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001bda:	f009 f901 	bl	800ade0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001be4:	f7ff fcc4 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20045ba8 	.word	0x20045ba8
 8001bf4:	40001000 	.word	0x40001000

08001bf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0e      	ldr	r2, [pc, #56]	@ (8001c40 <HAL_TIM_Base_MspInit+0x48>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d116      	bne.n	8001c38 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <HAL_TIM_Base_MspInit+0x4c>)
 8001c0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c10:	4a0c      	ldr	r2, [pc, #48]	@ (8001c44 <HAL_TIM_Base_MspInit+0x4c>)
 8001c12:	f043 0310 	orr.w	r3, r3, #16
 8001c16:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <HAL_TIM_Base_MspInit+0x4c>)
 8001c1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c20:	f003 0310 	and.w	r3, r3, #16
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2105      	movs	r1, #5
 8001c2c:	2031      	movs	r0, #49	@ 0x31
 8001c2e:	f000 fa15 	bl	800205c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001c32:	2031      	movs	r0, #49	@ 0x31
 8001c34:	f000 fa2c 	bl	8002090 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40001000 	.word	0x40001000
 8001c44:	46020c00 	.word	0x46020c00

08001c48 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c4c:	4b22      	ldr	r3, [pc, #136]	@ (8001cd8 <MX_USART1_UART_Init+0x90>)
 8001c4e:	4a23      	ldr	r2, [pc, #140]	@ (8001cdc <MX_USART1_UART_Init+0x94>)
 8001c50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c52:	4b21      	ldr	r3, [pc, #132]	@ (8001cd8 <MX_USART1_UART_Init+0x90>)
 8001c54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd8 <MX_USART1_UART_Init+0x90>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c60:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd8 <MX_USART1_UART_Init+0x90>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c66:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd8 <MX_USART1_UART_Init+0x90>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd8 <MX_USART1_UART_Init+0x90>)
 8001c6e:	220c      	movs	r2, #12
 8001c70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c72:	4b19      	ldr	r3, [pc, #100]	@ (8001cd8 <MX_USART1_UART_Init+0x90>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c78:	4b17      	ldr	r3, [pc, #92]	@ (8001cd8 <MX_USART1_UART_Init+0x90>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c7e:	4b16      	ldr	r3, [pc, #88]	@ (8001cd8 <MX_USART1_UART_Init+0x90>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c84:	4b14      	ldr	r3, [pc, #80]	@ (8001cd8 <MX_USART1_UART_Init+0x90>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c8a:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <MX_USART1_UART_Init+0x90>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c90:	4811      	ldr	r0, [pc, #68]	@ (8001cd8 <MX_USART1_UART_Init+0x90>)
 8001c92:	f009 f9ad 	bl	800aff0 <HAL_UART_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c9c:	f7ff fc68 	bl	8001570 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	480d      	ldr	r0, [pc, #52]	@ (8001cd8 <MX_USART1_UART_Init+0x90>)
 8001ca4:	f009 fe8c 	bl	800b9c0 <HAL_UARTEx_SetTxFifoThreshold>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001cae:	f7ff fc5f 	bl	8001570 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4808      	ldr	r0, [pc, #32]	@ (8001cd8 <MX_USART1_UART_Init+0x90>)
 8001cb6:	f009 fec1 	bl	800ba3c <HAL_UARTEx_SetRxFifoThreshold>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001cc0:	f7ff fc56 	bl	8001570 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001cc4:	4804      	ldr	r0, [pc, #16]	@ (8001cd8 <MX_USART1_UART_Init+0x90>)
 8001cc6:	f009 fe42 	bl	800b94e <HAL_UARTEx_DisableFifoMode>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001cd0:	f7ff fc4e 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20045bf4 	.word	0x20045bf4
 8001cdc:	40013800 	.word	0x40013800

08001ce0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b0ba      	sub	sp, #232	@ 0xe8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	22c0      	movs	r2, #192	@ 0xc0
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f02c fa39 	bl	802e178 <memset>
  if(uartHandle->Instance==USART1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a26      	ldr	r2, [pc, #152]	@ (8001da4 <HAL_UART_MspInit+0xc4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d145      	bne.n	8001d9c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d10:	f04f 0201 	mov.w	r2, #1
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d20:	f107 0310 	add.w	r3, r7, #16
 8001d24:	4618      	mov	r0, r3
 8001d26:	f006 f853 	bl	8007dd0 <HAL_RCCEx_PeriphCLKConfig>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001d30:	f7ff fc1e 	bl	8001570 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d34:	4b1c      	ldr	r3, [pc, #112]	@ (8001da8 <HAL_UART_MspInit+0xc8>)
 8001d36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001da8 <HAL_UART_MspInit+0xc8>)
 8001d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d40:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001d44:	4b18      	ldr	r3, [pc, #96]	@ (8001da8 <HAL_UART_MspInit+0xc8>)
 8001d46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	4b15      	ldr	r3, [pc, #84]	@ (8001da8 <HAL_UART_MspInit+0xc8>)
 8001d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d58:	4a13      	ldr	r2, [pc, #76]	@ (8001da8 <HAL_UART_MspInit+0xc8>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d62:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <HAL_UART_MspInit+0xc8>)
 8001d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d70:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d74:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d8a:	2307      	movs	r3, #7
 8001d8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d94:	4619      	mov	r1, r3
 8001d96:	4805      	ldr	r0, [pc, #20]	@ (8001dac <HAL_UART_MspInit+0xcc>)
 8001d98:	f001 ffba 	bl	8003d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	37e8      	adds	r7, #232	@ 0xe8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40013800 	.word	0x40013800
 8001da8:	46020c00 	.word	0x46020c00
 8001dac:	42020000 	.word	0x42020000

08001db0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001db0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001de8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001db4:	f7ff feb2 	bl	8001b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001db8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001dba:	e003      	b.n	8001dc4 <LoopCopyDataInit>

08001dbc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001dbe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001dc0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001dc2:	3104      	adds	r1, #4

08001dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001dc4:	480a      	ldr	r0, [pc, #40]	@ (8001df0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001df4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001dc8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001dca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001dcc:	d3f6      	bcc.n	8001dbc <CopyDataInit>
	ldr	r2, =_sbss
 8001dce:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001dd0:	e002      	b.n	8001dd8 <LoopFillZerobss>

08001dd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001dd2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001dd4:	f842 3b04 	str.w	r3, [r2], #4

08001dd8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001dd8:	4b08      	ldr	r3, [pc, #32]	@ (8001dfc <LoopForever+0x16>)
	cmp	r2, r3
 8001dda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ddc:	d3f9      	bcc.n	8001dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dde:	f02c fa73 	bl	802e2c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001de2:	f7ff fb11 	bl	8001408 <main>

08001de6 <LoopForever>:

LoopForever:
    b LoopForever
 8001de6:	e7fe      	b.n	8001de6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001de8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001dec:	0807a468 	.word	0x0807a468
	ldr	r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001df4:	200000fc 	.word	0x200000fc
	ldr	r2, =_sbss
 8001df8:	20045900 	.word	0x20045900
	ldr	r3, = _ebss
 8001dfc:	2005ca5c 	.word	0x2005ca5c

08001e00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC1_IRQHandler>
	...

08001e04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <HAL_Init+0x50>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a11      	ldr	r2, [pc, #68]	@ (8001e54 <HAL_Init+0x50>)
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e14:	2003      	movs	r0, #3
 8001e16:	f000 f916 	bl	8002046 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001e1a:	f005 fdc3 	bl	80079a4 <HAL_RCC_GetSysClockFreq>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	4b0d      	ldr	r3, [pc, #52]	@ (8001e58 <HAL_Init+0x54>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	490c      	ldr	r1, [pc, #48]	@ (8001e5c <HAL_Init+0x58>)
 8001e2a:	5ccb      	ldrb	r3, [r1, r3]
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e30:	4a0b      	ldr	r2, [pc, #44]	@ (8001e60 <HAL_Init+0x5c>)
 8001e32:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e34:	2004      	movs	r0, #4
 8001e36:	f000 f939 	bl	80020ac <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f7ff fcea 	bl	8001814 <HAL_InitTick>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e002      	b.n	8001e50 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e4a:	f7ff fcc5 	bl	80017d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40022000 	.word	0x40022000
 8001e58:	46020c00 	.word	0x46020c00
 8001e5c:	0802f9f4 	.word	0x0802f9f4
 8001e60:	20000004 	.word	0x20000004

08001e64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e68:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <HAL_IncTick+0x20>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_IncTick+0x24>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	4a04      	ldr	r2, [pc, #16]	@ (8001e88 <HAL_IncTick+0x24>)
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	2000000c 	.word	0x2000000c
 8001e88:	20045c88 	.word	0x20045c88

08001e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e90:	4b03      	ldr	r3, [pc, #12]	@ (8001ea0 <HAL_GetTick+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20045c88 	.word	0x20045c88

08001ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff ffee 	bl	8001e8c <HAL_GetTick>
 8001eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebc:	d005      	beq.n	8001eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <HAL_Delay+0x44>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eca:	bf00      	nop
 8001ecc:	f7ff ffde 	bl	8001e8c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d8f7      	bhi.n	8001ecc <HAL_Delay+0x28>
  {
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000000c 	.word	0x2000000c

08001eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1e:	4a04      	ldr	r2, [pc, #16]	@ (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	60d3      	str	r3, [r2, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	@ (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	db0b      	blt.n	8001f7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4907      	ldr	r1, [pc, #28]	@ (8001f88 <__NVIC_EnableIRQ+0x38>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2001      	movs	r0, #1
 8001f72:	fa00 f202 	lsl.w	r2, r0, r2
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	490c      	ldr	r1, [pc, #48]	@ (8001fd8 <__NVIC_SetPriority+0x4c>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb4:	e00a      	b.n	8001fcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4908      	ldr	r1, [pc, #32]	@ (8001fdc <__NVIC_SetPriority+0x50>)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	3b04      	subs	r3, #4
 8001fc4:	0112      	lsls	r2, r2, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	761a      	strb	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	@ 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f1c3 0307 	rsb	r3, r3, #7
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf28      	it	cs
 8001ffe:	2304      	movcs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3304      	adds	r3, #4
 8002006:	2b06      	cmp	r3, #6
 8002008:	d902      	bls.n	8002010 <NVIC_EncodePriority+0x30>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b03      	subs	r3, #3
 800200e:	e000      	b.n	8002012 <NVIC_EncodePriority+0x32>
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43d9      	mvns	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	4313      	orrs	r3, r2
         );
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	@ 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ff4c 	bl	8001eec <__NVIC_SetPriorityGrouping>
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800206a:	f7ff ff63 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 800206e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	6978      	ldr	r0, [r7, #20]
 8002076:	f7ff ffb3 	bl	8001fe0 <NVIC_EncodePriority>
 800207a:	4602      	mov	r2, r0
 800207c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002080:	4611      	mov	r1, r2
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff82 	bl	8001f8c <__NVIC_SetPriority>
}
 8002088:	bf00      	nop
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff ff56 	bl	8001f50 <__NVIC_EnableIRQ>
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d844      	bhi.n	8002144 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80020ba:	a201      	add	r2, pc, #4	@ (adr r2, 80020c0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80020bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c0:	080020e3 	.word	0x080020e3
 80020c4:	08002101 	.word	0x08002101
 80020c8:	08002123 	.word	0x08002123
 80020cc:	08002145 	.word	0x08002145
 80020d0:	080020d5 	.word	0x080020d5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80020d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002154 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002154 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	6013      	str	r3, [r2, #0]
      break;
 80020e0:	e031      	b.n	8002146 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80020e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002154 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002154 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020e8:	f023 0304 	bic.w	r3, r3, #4
 80020ec:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80020ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f4:	4a18      	ldr	r2, [pc, #96]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020f6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80020fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80020fe:	e022      	b.n	8002146 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002100:	4b14      	ldr	r3, [pc, #80]	@ (8002154 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a13      	ldr	r2, [pc, #76]	@ (8002154 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002106:	f023 0304 	bic.w	r3, r3, #4
 800210a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800210c:	4b12      	ldr	r3, [pc, #72]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800210e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002112:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002116:	4a10      	ldr	r2, [pc, #64]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002118:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800211c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002120:	e011      	b.n	8002146 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002122:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a0b      	ldr	r2, [pc, #44]	@ (8002154 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002128:	f023 0304 	bic.w	r3, r3, #4
 800212c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800212e:	4b0a      	ldr	r3, [pc, #40]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002134:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002138:	4a07      	ldr	r2, [pc, #28]	@ (8002158 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800213a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800213e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002142:	e000      	b.n	8002146 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002144:	bf00      	nop
  }
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000e010 	.word	0xe000e010
 8002158:	46020c00 	.word	0x46020c00

0800215c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e054      	b.n	8002218 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7f5b      	ldrb	r3, [r3, #29]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d105      	bne.n	8002184 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7fe ff14 	bl	8000fac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	791b      	ldrb	r3, [r3, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a22      	ldr	r2, [pc, #136]	@ (8002220 <HAL_CRC_Init+0xc4>)
 8002198:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0218 	bic.w	r2, r2, #24
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	e00c      	b.n	80021c6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6899      	ldr	r1, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	461a      	mov	r2, r3
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f834 	bl	8002224 <HAL_CRCEx_Polynomial_Set>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e028      	b.n	8002218 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	795b      	ldrb	r3, [r3, #5]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d105      	bne.n	80021da <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f04f 32ff 	mov.w	r2, #4294967295
 80021d6:	611a      	str	r2, [r3, #16]
 80021d8:	e004      	b.n	80021e4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6912      	ldr	r2, [r2, #16]
 80021e2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695a      	ldr	r2, [r3, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699a      	ldr	r2, [r3, #24]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	04c11db7 	.word	0x04c11db7

08002224 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002234:	231f      	movs	r3, #31
 8002236:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d102      	bne.n	8002248 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	75fb      	strb	r3, [r7, #23]
 8002246:	e063      	b.n	8002310 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002248:	bf00      	nop
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1e5a      	subs	r2, r3, #1
 800224e:	613a      	str	r2, [r7, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d009      	beq.n	8002268 <HAL_CRCEx_Polynomial_Set+0x44>
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b18      	cmp	r3, #24
 800226c:	d846      	bhi.n	80022fc <HAL_CRCEx_Polynomial_Set+0xd8>
 800226e:	a201      	add	r2, pc, #4	@ (adr r2, 8002274 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002274:	08002303 	.word	0x08002303
 8002278:	080022fd 	.word	0x080022fd
 800227c:	080022fd 	.word	0x080022fd
 8002280:	080022fd 	.word	0x080022fd
 8002284:	080022fd 	.word	0x080022fd
 8002288:	080022fd 	.word	0x080022fd
 800228c:	080022fd 	.word	0x080022fd
 8002290:	080022fd 	.word	0x080022fd
 8002294:	080022f1 	.word	0x080022f1
 8002298:	080022fd 	.word	0x080022fd
 800229c:	080022fd 	.word	0x080022fd
 80022a0:	080022fd 	.word	0x080022fd
 80022a4:	080022fd 	.word	0x080022fd
 80022a8:	080022fd 	.word	0x080022fd
 80022ac:	080022fd 	.word	0x080022fd
 80022b0:	080022fd 	.word	0x080022fd
 80022b4:	080022e5 	.word	0x080022e5
 80022b8:	080022fd 	.word	0x080022fd
 80022bc:	080022fd 	.word	0x080022fd
 80022c0:	080022fd 	.word	0x080022fd
 80022c4:	080022fd 	.word	0x080022fd
 80022c8:	080022fd 	.word	0x080022fd
 80022cc:	080022fd 	.word	0x080022fd
 80022d0:	080022fd 	.word	0x080022fd
 80022d4:	080022d9 	.word	0x080022d9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d913      	bls.n	8002306 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80022e2:	e010      	b.n	8002306 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	2b07      	cmp	r3, #7
 80022e8:	d90f      	bls.n	800230a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80022ee:	e00c      	b.n	800230a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	2b0f      	cmp	r3, #15
 80022f4:	d90b      	bls.n	800230e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80022fa:	e008      	b.n	800230e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	75fb      	strb	r3, [r7, #23]
        break;
 8002300:	e006      	b.n	8002310 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002302:	bf00      	nop
 8002304:	e004      	b.n	8002310 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002306:	bf00      	nop
 8002308:	e002      	b.n	8002310 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800230a:	bf00      	nop
 800230c:	e000      	b.n	8002310 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800230e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002310:	7dfb      	ldrb	r3, [r7, #23]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10d      	bne.n	8002332 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 0118 	bic.w	r1, r3, #24
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	430a      	orrs	r2, r1
 8002330:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002332:	7dfb      	ldrb	r3, [r7, #23]
}
 8002334:	4618      	mov	r0, r3
 8002336:	371c      	adds	r7, #28
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e04f      	b.n	80023f8 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_DMA_Start_IT+0x26>
 8002362:	2302      	movs	r3, #2
 8002364:	e048      	b.n	80023f8 <HAL_DMA_Start_IT+0xb8>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b01      	cmp	r3, #1
 8002378:	d136      	bne.n	80023e8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2202      	movs	r2, #2
 800237e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 fabc 	bl	800290c <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80023a2:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ba:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023d2:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	e007      	b.n	80023f8 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2240      	movs	r2, #64	@ 0x40
 80023ec:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002408:	f7ff fd40 	bl	8001e8c <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e06b      	b.n	80024f0 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d008      	beq.n	8002436 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2220      	movs	r2, #32
 8002428:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e05c      	b.n	80024f0 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695a      	ldr	r2, [r3, #20]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0204 	orr.w	r2, r2, #4
 8002444:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2205      	movs	r2, #5
 800244a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800244e:	e020      	b.n	8002492 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002450:	f7ff fd1c 	bl	8001e8c <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b05      	cmp	r3, #5
 800245c:	d919      	bls.n	8002492 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002462:	f043 0210 	orr.w	r2, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2203      	movs	r2, #3
 800246e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002482:	2201      	movs	r2, #1
 8002484:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e02e      	b.n	80024f0 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0d7      	beq.n	8002450 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695a      	ldr	r2, [r3, #20]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0202 	orr.w	r2, r2, #2
 80024ae:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2204      	movs	r2, #4
 80024b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80024c0:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d007      	beq.n	80024e6 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024da:	2201      	movs	r2, #1
 80024dc:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2200      	movs	r2, #0
 80024e4:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e019      	b.n	800253e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d004      	beq.n	8002520 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2220      	movs	r2, #32
 800251a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e00e      	b.n	800253e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2204      	movs	r2, #4
 8002524:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002536:	f043 0304 	orr.w	r3, r3, #4
 800253a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800255a:	f023 030f 	bic.w	r3, r3, #15
 800255e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002568:	3b50      	subs	r3, #80	@ 0x50
 800256a:	09db      	lsrs	r3, r3, #7
 800256c:	f003 031f 	and.w	r3, r3, #31
 8002570:	2201      	movs	r2, #1
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4013      	ands	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 813b 	beq.w	8002800 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002594:	2b00      	cmp	r3, #0
 8002596:	d011      	beq.n	80025bc <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025ae:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b4:	f043 0201 	orr.w	r2, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d011      	beq.n	80025ee <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00a      	beq.n	80025ee <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025e0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e6:	f043 0202 	orr.w	r2, r3, #2
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d011      	beq.n	8002620 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002612:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002618:	f043 0204 	orr.w	r2, r3, #4
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d011      	beq.n	8002652 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002644:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264a:	f043 0208 	orr.w	r2, r3, #8
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800265c:	2b00      	cmp	r3, #0
 800265e:	d013      	beq.n	8002688 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00c      	beq.n	8002688 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002676:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d04c      	beq.n	8002730 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d045      	beq.n	8002730 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026ac:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d12e      	bne.n	8002718 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026c8:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695a      	ldr	r2, [r3, #20]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0202 	orr.w	r2, r2, #2
 80026d8:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d007      	beq.n	80026fe <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026f2:	2201      	movs	r2, #1
 80026f4:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2200      	movs	r2, #0
 80026fc:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d07a      	beq.n	8002804 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	4798      	blx	r3
        }

        return;
 8002716:	e075      	b.n	8002804 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2205      	movs	r2, #5
 800271c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d039      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d032      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002754:	2b00      	cmp	r3, #0
 8002756:	d012      	beq.n	800277e <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800275e:	2b00      	cmp	r3, #0
 8002760:	d116      	bne.n	8002790 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002768:	2b00      	cmp	r3, #0
 800276a:	d111      	bne.n	8002790 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002778:	2201      	movs	r2, #1
 800277a:	731a      	strb	r2, [r3, #12]
 800277c:	e008      	b.n	8002790 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002784:	2b00      	cmp	r3, #0
 8002786:	d103      	bne.n	8002790 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002798:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d025      	beq.n	8002806 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 0202 	orr.w	r2, r2, #2
 80027c8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027e2:	2201      	movs	r2, #1
 80027e4:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	4798      	blx	r3
 80027fe:	e002      	b.n	8002806 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002800:	bf00      	nop
 8002802:	e000      	b.n	8002806 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002804:	bf00      	nop
    }
  }
}
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_DMA_RegisterCallback>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *const hdma,
                                           HAL_DMA_CallbackIDTypeDef CallbackID,
                                           void (*const pCallback)(DMA_HandleTypeDef *const _hdma))
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	460b      	mov	r3, r1
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e02f      	b.n	8002888 <HAL_DMA_RegisterCallback+0x7c>
  }

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d126      	bne.n	8002882 <HAL_DMA_RegisterCallback+0x76>
  {
    /* Check callback ID */
    switch (CallbackID)
 8002834:	7afb      	ldrb	r3, [r7, #11]
 8002836:	2b04      	cmp	r3, #4
 8002838:	d820      	bhi.n	800287c <HAL_DMA_RegisterCallback+0x70>
 800283a:	a201      	add	r2, pc, #4	@ (adr r2, 8002840 <HAL_DMA_RegisterCallback+0x34>)
 800283c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002840:	08002855 	.word	0x08002855
 8002844:	0800285d 	.word	0x0800285d
 8002848:	08002865 	.word	0x08002865
 800284c:	0800286d 	.word	0x0800286d
 8002850:	08002875 	.word	0x08002875
    {
      case HAL_DMA_XFER_CPLT_CB_ID:
      {
        /* Register transfer complete callback */
        hdma->XferCpltCallback = pCallback;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800285a:	e014      	b.n	8002886 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_HALFCPLT_CB_ID:
      {
        /* Register half transfer callback */
        hdma->XferHalfCpltCallback = pCallback;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8002862:	e010      	b.n	8002886 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_ERROR_CB_ID:
      {
        /* Register transfer error callback */
        hdma->XferErrorCallback = pCallback;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800286a:	e00c      	b.n	8002886 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_ABORT_CB_ID:
      {
        /* Register abort callback */
        hdma->XferAbortCallback = pCallback;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8002872:	e008      	b.n	8002886 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_SUSPEND_CB_ID:
      {
        /* Register suspend callback */
        hdma->XferSuspendCallback = pCallback;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800287a:	e004      	b.n	8002886 <HAL_DMA_RegisterCallback+0x7a>
      }

      default:
      {
        /* Update error status */
        status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	75fb      	strb	r3, [r7, #23]
        break;
 8002880:	e001      	b.n	8002886 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    /* Update error status */
    status =  HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002886:	7dfb      	ldrb	r3, [r7, #23]
}
 8002888:	4618      	mov	r0, r3
 800288a:	371c      	adds	r7, #28
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e02b      	b.n	8002900 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80028b0:	f023 030f 	bic.w	r3, r3, #15
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028be:	3b50      	subs	r3, #80	@ 0x50
 80028c0:	09db      	lsrs	r3, r3, #7
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	2201      	movs	r2, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d012      	beq.n	80028fe <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f003 0311 	and.w	r3, r3, #17
 80028de:	2b11      	cmp	r3, #17
 80028e0:	d106      	bne.n	80028f0 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	431a      	orrs	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	e006      	b.n	80028fe <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	401a      	ands	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	041b      	lsls	r3, r3, #16
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	b291      	uxth	r1, r2
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	430b      	orrs	r3, r1
 800292e:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002938:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e053      	b.n	8002a10 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d106      	bne.n	8002982 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7fe fb75 	bl	800106c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2202      	movs	r2, #2
 8002986:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002994:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6851      	ldr	r1, [r2, #4]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	69d2      	ldr	r2, [r2, #28]
 80029a0:	4311      	orrs	r1, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	430b      	orrs	r3, r1
 80029a8:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029b0:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 80029b4:	f023 0301 	bic.w	r3, r3, #1
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6891      	ldr	r1, [r2, #8]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6992      	ldr	r2, [r2, #24]
 80029c0:	4311      	orrs	r1, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	430b      	orrs	r3, r1
 80029c8:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d0:	0c1b      	lsrs	r3, r3, #16
 80029d2:	041b      	lsls	r3, r3, #16
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68d1      	ldr	r1, [r2, #12]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	430b      	orrs	r3, r1
 80029de:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	051a      	lsls	r2, r3, #20
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	055b      	lsls	r3, r3, #21
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d026      	beq.n	8002a88 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d021      	beq.n	8002a88 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a52:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a58:	f043 0201 	orr.w	r2, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2201      	movs	r2, #1
 8002a66:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d026      	beq.n	8002ae0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d021      	beq.n	8002ae0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002aaa:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab8:	f043 0202 	orr.w	r2, r3, #2
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d026      	beq.n	8002b38 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d021      	beq.n	8002b38 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b02:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2208      	movs	r2, #8
 8002b0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b10:	f043 0204 	orr.w	r2, r3, #4
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d013      	beq.n	8002b6a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00e      	beq.n	8002b6a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b5a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2204      	movs	r2, #4
 8002b62:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f853 	bl	8002c10 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d024      	beq.n	8002bbe <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01f      	beq.n	8002bbe <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b8c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2202      	movs	r2, #2
 8002b94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferCpltCallback != NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01f      	beq.n	8002c08 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d01a      	beq.n	8002c08 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002be0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2210      	movs	r2, #16
 8002be8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f80e 	bl	8002c24 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_DMA2D_ConfigLayer+0x20>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e084      	b.n	8002d62 <HAL_DMA2D_ConfigLayer+0x12a>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	4413      	add	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	3328      	adds	r3, #40	@ 0x28
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	4413      	add	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	041b      	lsls	r3, r3, #16
 8002c84:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002c8c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002c98:	4b35      	ldr	r3, [pc, #212]	@ (8002d70 <HAL_DMA2D_ConfigLayer+0x138>)
 8002c9a:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b0a      	cmp	r3, #10
 8002ca2:	d003      	beq.n	8002cac <HAL_DMA2D_ConfigLayer+0x74>
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b09      	cmp	r3, #9
 8002caa:	d107      	bne.n	8002cbc <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	e005      	b.n	8002cc8 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	061b      	lsls	r3, r3, #24
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d120      	bne.n	8002d10 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	ea02 0103 	and.w	r1, r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b0a      	cmp	r3, #10
 8002cf6:	d003      	beq.n	8002d00 <HAL_DMA2D_ConfigLayer+0xc8>
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b09      	cmp	r3, #9
 8002cfe:	d127      	bne.n	8002d50 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002d0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d0e:	e01f      	b.n	8002d50 <HAL_DMA2D_ConfigLayer+0x118>
      regMask  |= DMA2D_FGPFCCR_CSS;
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	ea02 0103 	and.w	r1, r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b0a      	cmp	r3, #10
 8002d38:	d003      	beq.n	8002d42 <HAL_DMA2D_ConfigLayer+0x10a>
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b09      	cmp	r3, #9
 8002d40:	d106      	bne.n	8002d50 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002d4e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	371c      	adds	r7, #28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	ff33000f 	.word	0xff33000f

08002d74 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002d7c:	f7ff f886 	bl	8001e8c <HAL_GetTick>
 8002d80:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0db      	b.n	8002f44 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a6e      	ldr	r2, [pc, #440]	@ (8002f4c <HAL_DMAEx_List_Init+0x1d8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	f000 809f 	beq.w	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a6c      	ldr	r2, [pc, #432]	@ (8002f50 <HAL_DMAEx_List_Init+0x1dc>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	f000 8099 	beq.w	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a6a      	ldr	r2, [pc, #424]	@ (8002f54 <HAL_DMAEx_List_Init+0x1e0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	f000 8093 	beq.w	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a68      	ldr	r2, [pc, #416]	@ (8002f58 <HAL_DMAEx_List_Init+0x1e4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	f000 808d 	beq.w	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a66      	ldr	r2, [pc, #408]	@ (8002f5c <HAL_DMAEx_List_Init+0x1e8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	f000 8087 	beq.w	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a64      	ldr	r2, [pc, #400]	@ (8002f60 <HAL_DMAEx_List_Init+0x1ec>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	f000 8081 	beq.w	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a62      	ldr	r2, [pc, #392]	@ (8002f64 <HAL_DMAEx_List_Init+0x1f0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d07b      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a61      	ldr	r2, [pc, #388]	@ (8002f68 <HAL_DMAEx_List_Init+0x1f4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d076      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a5f      	ldr	r2, [pc, #380]	@ (8002f6c <HAL_DMAEx_List_Init+0x1f8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d071      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a5e      	ldr	r2, [pc, #376]	@ (8002f70 <HAL_DMAEx_List_Init+0x1fc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d06c      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a5c      	ldr	r2, [pc, #368]	@ (8002f74 <HAL_DMAEx_List_Init+0x200>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d067      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a5b      	ldr	r2, [pc, #364]	@ (8002f78 <HAL_DMAEx_List_Init+0x204>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d062      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a59      	ldr	r2, [pc, #356]	@ (8002f7c <HAL_DMAEx_List_Init+0x208>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d05d      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a58      	ldr	r2, [pc, #352]	@ (8002f80 <HAL_DMAEx_List_Init+0x20c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d058      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a56      	ldr	r2, [pc, #344]	@ (8002f84 <HAL_DMAEx_List_Init+0x210>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d053      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a55      	ldr	r2, [pc, #340]	@ (8002f88 <HAL_DMAEx_List_Init+0x214>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d04e      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a53      	ldr	r2, [pc, #332]	@ (8002f8c <HAL_DMAEx_List_Init+0x218>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d049      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a52      	ldr	r2, [pc, #328]	@ (8002f90 <HAL_DMAEx_List_Init+0x21c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d044      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a50      	ldr	r2, [pc, #320]	@ (8002f94 <HAL_DMAEx_List_Init+0x220>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d03f      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a4f      	ldr	r2, [pc, #316]	@ (8002f98 <HAL_DMAEx_List_Init+0x224>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d03a      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a4d      	ldr	r2, [pc, #308]	@ (8002f9c <HAL_DMAEx_List_Init+0x228>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d035      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a4c      	ldr	r2, [pc, #304]	@ (8002fa0 <HAL_DMAEx_List_Init+0x22c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d030      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a4a      	ldr	r2, [pc, #296]	@ (8002fa4 <HAL_DMAEx_List_Init+0x230>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d02b      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a49      	ldr	r2, [pc, #292]	@ (8002fa8 <HAL_DMAEx_List_Init+0x234>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d026      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a47      	ldr	r2, [pc, #284]	@ (8002fac <HAL_DMAEx_List_Init+0x238>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d021      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a46      	ldr	r2, [pc, #280]	@ (8002fb0 <HAL_DMAEx_List_Init+0x23c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d01c      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a44      	ldr	r2, [pc, #272]	@ (8002fb4 <HAL_DMAEx_List_Init+0x240>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d017      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a43      	ldr	r2, [pc, #268]	@ (8002fb8 <HAL_DMAEx_List_Init+0x244>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d012      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a41      	ldr	r2, [pc, #260]	@ (8002fbc <HAL_DMAEx_List_Init+0x248>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00d      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a40      	ldr	r2, [pc, #256]	@ (8002fc0 <HAL_DMAEx_List_Init+0x24c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d008      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a3e      	ldr	r2, [pc, #248]	@ (8002fc4 <HAL_DMAEx_List_Init+0x250>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d003      	beq.n	8002ed6 <HAL_DMAEx_List_Init+0x162>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a3d      	ldr	r2, [pc, #244]	@ (8002fc8 <HAL_DMAEx_List_Init+0x254>)
 8002ed4:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695a      	ldr	r2, [r3, #20]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0206 	orr.w	r2, r2, #6
 8002ef4:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002ef6:	e00f      	b.n	8002f18 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002ef8:	f7fe ffc8 	bl	8001e8c <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b05      	cmp	r3, #5
 8002f04:	d908      	bls.n	8002f18 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2210      	movs	r2, #16
 8002f0a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2203      	movs	r2, #3
 8002f10:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e015      	b.n	8002f44 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1e8      	bne.n	8002ef8 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fabc 	bl	80034a4 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40020050 	.word	0x40020050
 8002f50:	50020050 	.word	0x50020050
 8002f54:	400200d0 	.word	0x400200d0
 8002f58:	500200d0 	.word	0x500200d0
 8002f5c:	40020150 	.word	0x40020150
 8002f60:	50020150 	.word	0x50020150
 8002f64:	400201d0 	.word	0x400201d0
 8002f68:	500201d0 	.word	0x500201d0
 8002f6c:	40020250 	.word	0x40020250
 8002f70:	50020250 	.word	0x50020250
 8002f74:	400202d0 	.word	0x400202d0
 8002f78:	500202d0 	.word	0x500202d0
 8002f7c:	40020350 	.word	0x40020350
 8002f80:	50020350 	.word	0x50020350
 8002f84:	400203d0 	.word	0x400203d0
 8002f88:	500203d0 	.word	0x500203d0
 8002f8c:	40020450 	.word	0x40020450
 8002f90:	50020450 	.word	0x50020450
 8002f94:	400204d0 	.word	0x400204d0
 8002f98:	500204d0 	.word	0x500204d0
 8002f9c:	40020550 	.word	0x40020550
 8002fa0:	50020550 	.word	0x50020550
 8002fa4:	400205d0 	.word	0x400205d0
 8002fa8:	500205d0 	.word	0x500205d0
 8002fac:	40020650 	.word	0x40020650
 8002fb0:	50020650 	.word	0x50020650
 8002fb4:	400206d0 	.word	0x400206d0
 8002fb8:	500206d0 	.word	0x500206d0
 8002fbc:	40020750 	.word	0x40020750
 8002fc0:	50020750 	.word	0x50020750
 8002fc4:	400207d0 	.word	0x400207d0
 8002fc8:	500207d0 	.word	0x500207d0

08002fcc <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_DMAEx_List_Start_IT+0x16>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e082      	b.n	80030ec <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002fec:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ff8:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8002ffa:	7dfb      	ldrb	r3, [r7, #23]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d005      	beq.n	800300c <HAL_DMAEx_List_Start_IT+0x40>
 8003000:	7dfb      	ldrb	r3, [r7, #23]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d16a      	bne.n	80030dc <HAL_DMAEx_List_Start_IT+0x110>
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d067      	beq.n	80030dc <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d157      	bne.n	80030c8 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_DMAEx_List_Start_IT+0x5a>
 8003022:	2302      	movs	r3, #2
 8003024:	e062      	b.n	80030ec <HAL_DMAEx_List_Start_IT+0x120>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2202      	movs	r2, #2
 8003032:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800303a:	2202      	movs	r2, #2
 800303c:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003048:	2200      	movs	r2, #0
 800304a:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800305a:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003060:	2b00      	cmp	r3, #0
 8003062:	d007      	beq.n	8003074 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003072:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003078:	2b00      	cmp	r3, #0
 800307a:	d007      	beq.n	800308c <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695a      	ldr	r2, [r3, #20]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800308a:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f107 010c 	add.w	r1, r7, #12
 8003096:	2200      	movs	r2, #0
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fd1f 	bl	8003adc <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4619      	mov	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	0c0b      	lsrs	r3, r1, #16
 80030ac:	041b      	lsls	r3, r3, #16
 80030ae:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80030bc:	4013      	ands	r3, r2
 80030be:	68f9      	ldr	r1, [r7, #12]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	430b      	orrs	r3, r1
 80030c6:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	e007      	b.n	80030ec <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2240      	movs	r2, #64	@ 0x40
 80030e0:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <HAL_DMAEx_List_BuildNode+0x16>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e004      	b.n	8003118 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800310e:	6839      	ldr	r1, [r7, #0]
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fb1f 	bl	8003754 <DMA_List_BuildNode>

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_DMAEx_List_InsertNode_Head>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Head(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <HAL_DMAEx_List_InsertNode_Head+0x16>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_DMAEx_List_InsertNode_Head+0x1a>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e057      	b.n	80031ea <HAL_DMAEx_List_InsertNode_Head+0xca>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d104      	bne.n	800314c <HAL_DMAEx_List_InsertNode_Head+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2204      	movs	r2, #4
 8003146:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e04e      	b.n	80031ea <HAL_DMAEx_List_InsertNode_Head+0xca>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2200      	movs	r2, #0
 8003152:	6839      	ldr	r1, [r7, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fc55 	bl	8003a04 <DMA_List_CheckNodesBaseAddresses>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d004      	beq.n	800316a <HAL_DMAEx_List_InsertNode_Head+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2205      	movs	r2, #5
 8003164:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e03f      	b.n	80031ea <HAL_DMAEx_List_InsertNode_Head+0xca>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2200      	movs	r2, #0
 8003170:	6839      	ldr	r1, [r7, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fc76 	bl	8003a64 <DMA_List_CheckNodesTypes>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d004      	beq.n	8003188 <HAL_DMAEx_List_InsertNode_Head+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2204      	movs	r2, #4
 8003182:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e030      	b.n	80031ea <HAL_DMAEx_List_InsertNode_Head+0xca>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]

  /* Empty queue */
  if (pQList->Head == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d103      	bne.n	80031a4 <HAL_DMAEx_List_InsertNode_Head+0x84>
  {
    pQList->Head = pNewNode;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	e016      	b.n	80031d2 <HAL_DMAEx_List_InsertNode_Head+0xb2>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80031a4:	f107 0208 	add.w	r2, r7, #8
 80031a8:	f107 030c 	add.w	r3, r7, #12
 80031ac:	4619      	mov	r1, r3
 80031ae:	6838      	ldr	r0, [r7, #0]
 80031b0:	f000 fc94 	bl	8003adc <DMA_List_GetCLLRNodeInfo>

    pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	461a      	mov	r2, r3
 80031ba:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80031be:	4013      	ands	r3, r2
 80031c0:	68f9      	ldr	r1, [r7, #12]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	4319      	orrs	r1, r3
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pQList->Head                         = pNewNode;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	601a      	str	r2, [r3, #0]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b08a      	sub	sp, #40	@ 0x28
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <HAL_DMAEx_List_InsertNode_Tail+0x16>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e066      	b.n	80032da <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d104      	bne.n	800321e <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2204      	movs	r2, #4
 8003218:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e05d      	b.n	80032da <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2200      	movs	r2, #0
 8003224:	6839      	ldr	r1, [r7, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fbec 	bl	8003a04 <DMA_List_CheckNodesBaseAddresses>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d004      	beq.n	800323c <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2205      	movs	r2, #5
 8003236:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e04e      	b.n	80032da <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2200      	movs	r2, #0
 8003242:	6839      	ldr	r1, [r7, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fc0d 	bl	8003a64 <DMA_List_CheckNodesTypes>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d004      	beq.n	800325a <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2204      	movs	r2, #4
 8003254:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e03f      	b.n	80032da <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	e02b      	b.n	80032c2 <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800326a:	f107 0220 	add.w	r2, r7, #32
 800326e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003272:	4619      	mov	r1, r3
 8003274:	6838      	ldr	r0, [r7, #0]
 8003276:	f000 fc31 	bl	8003adc <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 800327e:	f107 030c 	add.w	r3, r7, #12
 8003282:	461a      	mov	r2, r3
 8003284:	2100      	movs	r1, #0
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fc58 	bl	8003b3c <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00b      	beq.n	80032ac <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	461a      	mov	r2, r3
 800329a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800329e:	4013      	ands	r3, r2
 80032a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032a2:	6a3a      	ldr	r2, [r7, #32]
 80032a4:	4319      	orrs	r1, r3
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80032b2:	4013      	ands	r3, r2
 80032b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4610      	mov	r0, r2
 80032ba:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80032bc:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 80032be:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3728      	adds	r7, #40	@ 0x28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_DMAEx_List_ResetQ>:
  * @brief  Reset the linked-list queue and unlink queue nodes.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_ResetQ(DMA_QListTypeDef *const pQList)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b088      	sub	sp, #32
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_DMAEx_List_ResetQ+0x12>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e03c      	b.n	800336e <HAL_DMAEx_List_ResetQ+0x8c>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	7b1b      	ldrb	r3, [r3, #12]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d104      	bne.n	8003308 <HAL_DMAEx_List_ResetQ+0x26>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e032      	b.n	800336e <HAL_DMAEx_List_ResetQ+0x8c>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d104      	bne.n	800331a <HAL_DMAEx_List_ResetQ+0x38>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2204      	movs	r2, #4
 8003314:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e029      	b.n	800336e <HAL_DMAEx_List_ResetQ+0x8c>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2202      	movs	r2, #2
 800331e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	611a      	str	r2, [r3, #16]

  /* Check the queue */
  if (pQList->Head != NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00f      	beq.n	800334e <HAL_DMAEx_List_ResetQ+0x6c>
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pQList->Head, NULL, &cllr_offset);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f107 021c 	add.w	r2, r7, #28
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fbcf 	bl	8003adc <DMA_List_GetCLLRNodeInfo>

    /* Reset selected queue nodes */
    node_info.cllr_offset = cllr_offset;
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	60bb      	str	r3, [r7, #8]
    DMA_List_ResetQueueNodes(pQList, &node_info);
 8003342:	f107 0308 	add.w	r3, r7, #8
 8003346:	4619      	mov	r1, r3
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fc96 	bl	8003c7a <DMA_List_ResetQueueNodes>
  }

  /* Reset head node address */
  pQList->Head = NULL;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

  /* Reset node number */
  pQList->NodeNumber = 0U;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]

  /* Reset first circular node */
  pQList->FirstCircularNode = NULL;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_RESET;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3720      	adds	r7, #32
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_DMAEx_List_LinkQ+0x16>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e072      	b.n	8003478 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003398:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d002      	beq.n	80033ac <HAL_DMAEx_List_LinkQ+0x34>
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	2b05      	cmp	r3, #5
 80033aa:	d108      	bne.n	80033be <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2240      	movs	r2, #64	@ 0x40
 80033b0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e05c      	b.n	8003478 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	7b1b      	ldrb	r3, [r3, #12]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d104      	bne.n	80033d2 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2201      	movs	r2, #1
 80033cc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e052      	b.n	8003478 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003484 <HAL_DMAEx_List_LinkQ+0x10c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d022      	beq.n	8003422 <HAL_DMAEx_List_LinkQ+0xaa>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a29      	ldr	r2, [pc, #164]	@ (8003488 <HAL_DMAEx_List_LinkQ+0x110>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01d      	beq.n	8003422 <HAL_DMAEx_List_LinkQ+0xaa>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a28      	ldr	r2, [pc, #160]	@ (800348c <HAL_DMAEx_List_LinkQ+0x114>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d018      	beq.n	8003422 <HAL_DMAEx_List_LinkQ+0xaa>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a26      	ldr	r2, [pc, #152]	@ (8003490 <HAL_DMAEx_List_LinkQ+0x118>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_DMAEx_List_LinkQ+0xaa>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a25      	ldr	r2, [pc, #148]	@ (8003494 <HAL_DMAEx_List_LinkQ+0x11c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00e      	beq.n	8003422 <HAL_DMAEx_List_LinkQ+0xaa>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a23      	ldr	r2, [pc, #140]	@ (8003498 <HAL_DMAEx_List_LinkQ+0x120>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d009      	beq.n	8003422 <HAL_DMAEx_List_LinkQ+0xaa>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a22      	ldr	r2, [pc, #136]	@ (800349c <HAL_DMAEx_List_LinkQ+0x124>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d004      	beq.n	8003422 <HAL_DMAEx_List_LinkQ+0xaa>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a20      	ldr	r2, [pc, #128]	@ (80034a0 <HAL_DMAEx_List_LinkQ+0x128>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_DMAEx_List_LinkQ+0xae>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_DMAEx_List_LinkQ+0xb0>
 8003426:	2300      	movs	r3, #0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10b      	bne.n	8003444 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003436:	2b00      	cmp	r3, #0
 8003438:	d004      	beq.n	8003444 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2203      	movs	r2, #3
 800343e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e019      	b.n	8003478 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003448:	2b81      	cmp	r3, #129	@ 0x81
 800344a:	d108      	bne.n	800345e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10d      	bne.n	8003470 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2204      	movs	r2, #4
 8003458:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e00c      	b.n	8003478 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d004      	beq.n	8003470 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2204      	movs	r2, #4
 800346a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e003      	b.n	8003478 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40020650 	.word	0x40020650
 8003488:	50020650 	.word	0x50020650
 800348c:	400206d0 	.word	0x400206d0
 8003490:	500206d0 	.word	0x500206d0
 8003494:	40020750 	.word	0x40020750
 8003498:	50020750 	.word	0x50020750
 800349c:	400207d0 	.word	0x400207d0
 80034a0:	500207d0 	.word	0x500207d0

080034a4 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a85      	ldr	r2, [pc, #532]	@ (80036d4 <DMA_List_Init+0x230>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	f000 80a0 	beq.w	8003604 <DMA_List_Init+0x160>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a83      	ldr	r2, [pc, #524]	@ (80036d8 <DMA_List_Init+0x234>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	f000 809a 	beq.w	8003604 <DMA_List_Init+0x160>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a81      	ldr	r2, [pc, #516]	@ (80036dc <DMA_List_Init+0x238>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	f000 8094 	beq.w	8003604 <DMA_List_Init+0x160>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a7f      	ldr	r2, [pc, #508]	@ (80036e0 <DMA_List_Init+0x23c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	f000 808e 	beq.w	8003604 <DMA_List_Init+0x160>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a7d      	ldr	r2, [pc, #500]	@ (80036e4 <DMA_List_Init+0x240>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	f000 8088 	beq.w	8003604 <DMA_List_Init+0x160>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a7b      	ldr	r2, [pc, #492]	@ (80036e8 <DMA_List_Init+0x244>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	f000 8082 	beq.w	8003604 <DMA_List_Init+0x160>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a79      	ldr	r2, [pc, #484]	@ (80036ec <DMA_List_Init+0x248>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d07c      	beq.n	8003604 <DMA_List_Init+0x160>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a78      	ldr	r2, [pc, #480]	@ (80036f0 <DMA_List_Init+0x24c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d077      	beq.n	8003604 <DMA_List_Init+0x160>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a76      	ldr	r2, [pc, #472]	@ (80036f4 <DMA_List_Init+0x250>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d072      	beq.n	8003604 <DMA_List_Init+0x160>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a75      	ldr	r2, [pc, #468]	@ (80036f8 <DMA_List_Init+0x254>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d06d      	beq.n	8003604 <DMA_List_Init+0x160>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a73      	ldr	r2, [pc, #460]	@ (80036fc <DMA_List_Init+0x258>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d068      	beq.n	8003604 <DMA_List_Init+0x160>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a72      	ldr	r2, [pc, #456]	@ (8003700 <DMA_List_Init+0x25c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d063      	beq.n	8003604 <DMA_List_Init+0x160>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a70      	ldr	r2, [pc, #448]	@ (8003704 <DMA_List_Init+0x260>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d05e      	beq.n	8003604 <DMA_List_Init+0x160>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a6f      	ldr	r2, [pc, #444]	@ (8003708 <DMA_List_Init+0x264>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d059      	beq.n	8003604 <DMA_List_Init+0x160>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a6d      	ldr	r2, [pc, #436]	@ (800370c <DMA_List_Init+0x268>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d054      	beq.n	8003604 <DMA_List_Init+0x160>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a6c      	ldr	r2, [pc, #432]	@ (8003710 <DMA_List_Init+0x26c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d04f      	beq.n	8003604 <DMA_List_Init+0x160>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a6a      	ldr	r2, [pc, #424]	@ (8003714 <DMA_List_Init+0x270>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d04a      	beq.n	8003604 <DMA_List_Init+0x160>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a69      	ldr	r2, [pc, #420]	@ (8003718 <DMA_List_Init+0x274>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d045      	beq.n	8003604 <DMA_List_Init+0x160>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a67      	ldr	r2, [pc, #412]	@ (800371c <DMA_List_Init+0x278>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d040      	beq.n	8003604 <DMA_List_Init+0x160>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a66      	ldr	r2, [pc, #408]	@ (8003720 <DMA_List_Init+0x27c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d03b      	beq.n	8003604 <DMA_List_Init+0x160>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a64      	ldr	r2, [pc, #400]	@ (8003724 <DMA_List_Init+0x280>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d036      	beq.n	8003604 <DMA_List_Init+0x160>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a63      	ldr	r2, [pc, #396]	@ (8003728 <DMA_List_Init+0x284>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d031      	beq.n	8003604 <DMA_List_Init+0x160>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a61      	ldr	r2, [pc, #388]	@ (800372c <DMA_List_Init+0x288>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d02c      	beq.n	8003604 <DMA_List_Init+0x160>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a60      	ldr	r2, [pc, #384]	@ (8003730 <DMA_List_Init+0x28c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d027      	beq.n	8003604 <DMA_List_Init+0x160>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a5e      	ldr	r2, [pc, #376]	@ (8003734 <DMA_List_Init+0x290>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d022      	beq.n	8003604 <DMA_List_Init+0x160>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a5d      	ldr	r2, [pc, #372]	@ (8003738 <DMA_List_Init+0x294>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d01d      	beq.n	8003604 <DMA_List_Init+0x160>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a5b      	ldr	r2, [pc, #364]	@ (800373c <DMA_List_Init+0x298>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d018      	beq.n	8003604 <DMA_List_Init+0x160>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a5a      	ldr	r2, [pc, #360]	@ (8003740 <DMA_List_Init+0x29c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d013      	beq.n	8003604 <DMA_List_Init+0x160>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a58      	ldr	r2, [pc, #352]	@ (8003744 <DMA_List_Init+0x2a0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00e      	beq.n	8003604 <DMA_List_Init+0x160>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a57      	ldr	r2, [pc, #348]	@ (8003748 <DMA_List_Init+0x2a4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d009      	beq.n	8003604 <DMA_List_Init+0x160>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a55      	ldr	r2, [pc, #340]	@ (800374c <DMA_List_Init+0x2a8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d004      	beq.n	8003604 <DMA_List_Init+0x160>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a54      	ldr	r2, [pc, #336]	@ (8003750 <DMA_List_Init+0x2ac>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d101      	bne.n	8003608 <DMA_List_Init+0x164>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <DMA_List_Init+0x166>
 8003608:	2300      	movs	r3, #0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d004      	beq.n	8003618 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	430a      	orrs	r2, r1
 800362a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2200      	movs	r2, #0
 8003632:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800363c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2200      	movs	r2, #0
 8003644:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2200      	movs	r2, #0
 800364c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2200      	movs	r2, #0
 8003654:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a36      	ldr	r2, [pc, #216]	@ (8003734 <DMA_List_Init+0x290>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d022      	beq.n	80036a6 <DMA_List_Init+0x202>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a34      	ldr	r2, [pc, #208]	@ (8003738 <DMA_List_Init+0x294>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d01d      	beq.n	80036a6 <DMA_List_Init+0x202>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a33      	ldr	r2, [pc, #204]	@ (800373c <DMA_List_Init+0x298>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d018      	beq.n	80036a6 <DMA_List_Init+0x202>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a31      	ldr	r2, [pc, #196]	@ (8003740 <DMA_List_Init+0x29c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <DMA_List_Init+0x202>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a30      	ldr	r2, [pc, #192]	@ (8003744 <DMA_List_Init+0x2a0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00e      	beq.n	80036a6 <DMA_List_Init+0x202>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a2e      	ldr	r2, [pc, #184]	@ (8003748 <DMA_List_Init+0x2a4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d009      	beq.n	80036a6 <DMA_List_Init+0x202>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a2d      	ldr	r2, [pc, #180]	@ (800374c <DMA_List_Init+0x2a8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <DMA_List_Init+0x202>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003750 <DMA_List_Init+0x2ac>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d101      	bne.n	80036aa <DMA_List_Init+0x206>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <DMA_List_Init+0x208>
 80036aa:	2300      	movs	r3, #0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2200      	movs	r2, #0
 80036b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2200      	movs	r2, #0
 80036be:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2200      	movs	r2, #0
 80036c6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80036c8:	bf00      	nop
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	40020050 	.word	0x40020050
 80036d8:	50020050 	.word	0x50020050
 80036dc:	400200d0 	.word	0x400200d0
 80036e0:	500200d0 	.word	0x500200d0
 80036e4:	40020150 	.word	0x40020150
 80036e8:	50020150 	.word	0x50020150
 80036ec:	400201d0 	.word	0x400201d0
 80036f0:	500201d0 	.word	0x500201d0
 80036f4:	40020250 	.word	0x40020250
 80036f8:	50020250 	.word	0x50020250
 80036fc:	400202d0 	.word	0x400202d0
 8003700:	500202d0 	.word	0x500202d0
 8003704:	40020350 	.word	0x40020350
 8003708:	50020350 	.word	0x50020350
 800370c:	400203d0 	.word	0x400203d0
 8003710:	500203d0 	.word	0x500203d0
 8003714:	40020450 	.word	0x40020450
 8003718:	50020450 	.word	0x50020450
 800371c:	400204d0 	.word	0x400204d0
 8003720:	500204d0 	.word	0x500204d0
 8003724:	40020550 	.word	0x40020550
 8003728:	50020550 	.word	0x50020550
 800372c:	400205d0 	.word	0x400205d0
 8003730:	500205d0 	.word	0x500205d0
 8003734:	40020650 	.word	0x40020650
 8003738:	50020650 	.word	0x50020650
 800373c:	400206d0 	.word	0x400206d0
 8003740:	500206d0 	.word	0x500206d0
 8003744:	40020750 	.word	0x40020750
 8003748:	50020750 	.word	0x50020750
 800374c:	400207d0 	.word	0x400207d0
 8003750:	500207d0 	.word	0x500207d0

08003754 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003766:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 800376c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003772:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8003778:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	d017      	beq.n	80037ba <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003796:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379c:	3b01      	subs	r3, #1
 800379e:	051b      	lsls	r3, r3, #20
 80037a0:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80037a4:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037aa:	3b01      	subs	r3, #1
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80037b2:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80037b4:	431a      	orrs	r2, r3
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6859      	ldr	r1, [r3, #4]
 80037c2:	f240 237f 	movw	r3, #639	@ 0x27f
 80037c6:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80037c8:	431a      	orrs	r2, r3
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037d6:	d10c      	bne.n	80037f2 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d011      	beq.n	8003808 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	605a      	str	r2, [r3, #4]
 80037f0:	e00a      	b.n	8003808 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037fa:	d105      	bne.n	8003808 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00f      	beq.n	8003830 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381c:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003822:	041b      	lsls	r3, r3, #16
 8003824:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003828:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800382a:	431a      	orrs	r2, r3
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003834:	b29a      	uxth	r2, r3
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d04e      	beq.n	80038e4 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800384e:	3b01      	subs	r3, #1
 8003850:	0419      	lsls	r1, r3, #16
 8003852:	4b6a      	ldr	r3, [pc, #424]	@ (80039fc <DMA_List_BuildNode+0x2a8>)
 8003854:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003856:	431a      	orrs	r2, r3
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003860:	2b00      	cmp	r3, #0
 8003862:	da06      	bge.n	8003872 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	e005      	b.n	800387e <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003882:	2b00      	cmp	r3, #0
 8003884:	da06      	bge.n	8003894 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	609a      	str	r2, [r3, #8]
 8003892:	e005      	b.n	80038a0 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	da06      	bge.n	80038b6 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	e005      	b.n	80038c2 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	da06      	bge.n	80038d8 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	609a      	str	r2, [r3, #8]
 80038d6:	e005      	b.n	80038e4 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d05d      	beq.n	80039bc <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003904:	2b00      	cmp	r3, #0
 8003906:	da09      	bge.n	800391c <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800390c:	425b      	negs	r3, r3
 800390e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	615a      	str	r2, [r3, #20]
 800391a:	e005      	b.n	8003928 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003920:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392c:	2b00      	cmp	r3, #0
 800392e:	da0d      	bge.n	800394c <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003934:	425b      	negs	r3, r3
 8003936:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	0419      	lsls	r1, r3, #16
 8003940:	4b2f      	ldr	r3, [pc, #188]	@ (8003a00 <DMA_List_BuildNode+0x2ac>)
 8003942:	400b      	ands	r3, r1
 8003944:	431a      	orrs	r2, r3
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	615a      	str	r2, [r3, #20]
 800394a:	e009      	b.n	8003960 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003954:	0419      	lsls	r1, r3, #16
 8003956:	4b2a      	ldr	r3, [pc, #168]	@ (8003a00 <DMA_List_BuildNode+0x2ac>)
 8003958:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800395a:	431a      	orrs	r2, r3
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003964:	2b00      	cmp	r3, #0
 8003966:	da08      	bge.n	800397a <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800396c:	425b      	negs	r3, r3
 800396e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	b29a      	uxth	r2, r3
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	619a      	str	r2, [r3, #24]
 8003978:	e004      	b.n	8003984 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800397e:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003988:	2b00      	cmp	r3, #0
 800398a:	da0b      	bge.n	80039a4 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003990:	425b      	negs	r3, r3
 8003992:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800399c:	431a      	orrs	r2, r3
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	619a      	str	r2, [r3, #24]
 80039a2:	e007      	b.n	80039b4 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ac:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80039ae:	431a      	orrs	r2, r3
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2200      	movs	r2, #0
 80039b8:	61da      	str	r2, [r3, #28]
 80039ba:	e002      	b.n	80039c2 <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2200      	movs	r2, #0
 80039c0:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d006      	beq.n	80039e4 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 80039e2:	e005      	b.n	80039f0 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	621a      	str	r2, [r3, #32]
}
 80039f0:	bf00      	nop
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	07ff0000 	.word	0x07ff0000
 8003a00:	1fff0000 	.word	0x1fff0000

08003a04 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	0c1b      	lsrs	r3, r3, #16
 8003a1c:	041b      	lsls	r3, r3, #16
 8003a1e:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	e00a      	b.n	8003a46 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	e004      	b.n	8003a46 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	0c1b      	lsrs	r3, r3, #16
 8003a4a:	041b      	lsls	r3, r3, #16
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d001      	beq.n	8003a56 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	371c      	adds	r7, #28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d004      	beq.n	8003a84 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	e00e      	b.n	8003aa2 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d004      	beq.n	8003a94 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	e006      	b.n	8003aa2 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d007      	beq.n	8003ab8 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e00b      	b.n	8003ad0 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d007      	beq.n	8003ace <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d001      	beq.n	8003ace <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e000      	b.n	8003ad0 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	371c      	adds	r7, #28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00c      	beq.n	8003b0e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	4a0d      	ldr	r2, [pc, #52]	@ (8003b34 <DMA_List_GetCLLRNodeInfo+0x58>)
 8003afe:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00f      	beq.n	8003b26 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2207      	movs	r2, #7
 8003b0a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8003b0c:	e00b      	b.n	8003b26 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4a08      	ldr	r2, [pc, #32]	@ (8003b38 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8003b18:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2205      	movs	r2, #5
 8003b24:	601a      	str	r2, [r3, #0]
}
 8003b26:	bf00      	nop
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	fe010000 	.word	0xfe010000
 8003b38:	f8010000 	.word	0xf8010000

08003b3c <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b089      	sub	sp, #36	@ 0x24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d142      	bne.n	8003be6 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8003b60:	e01d      	b.n	8003b9e <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d107      	bne.n	8003b78 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003b72:	4013      	ands	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	e00f      	b.n	8003b98 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	0c1b      	lsrs	r3, r3, #16
 8003b82:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4413      	add	r3, r2
 8003b88:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8003b90:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d3dc      	bcc.n	8003b62 <DMA_List_FindNode+0x26>
 8003ba8:	e029      	b.n	8003bfe <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d107      	bne.n	8003bc0 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003bba:	4013      	ands	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	e00f      	b.n	8003be0 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	0c1b      	lsrs	r3, r3, #16
 8003bca:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4413      	add	r3, r2
 8003bd0:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8003bd8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	3301      	adds	r3, #1
 8003be4:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d206      	bcs.n	8003bfe <DMA_List_FindNode+0xc2>
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d1d5      	bne.n	8003baa <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d001      	beq.n	8003c16 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e02b      	b.n	8003c6e <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	0c1b      	lsrs	r3, r3, #16
 8003c22:	041b      	lsls	r3, r3, #16
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	0c1b      	lsrs	r3, r3, #16
 8003c32:	041b      	lsls	r3, r3, #16
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	461a      	mov	r2, r3
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00f      	beq.n	8003c6c <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	461a      	mov	r2, r3
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c58:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8003c5c:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	0c1b      	lsrs	r3, r3, #16
 8003c64:	041b      	lsls	r3, r3, #16
 8003c66:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3724      	adds	r7, #36	@ 0x24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <DMA_List_ResetQueueNodes>:
  * @param  NodeInfo : Pointer to a DMA_NodeInQInfoTypeDef structure that contains node linked to queue information.
  * @retval None.
  */
static void DMA_List_ResetQueueNodes(DMA_QListTypeDef const *const pQList,
                                     DMA_NodeInQInfoTypeDef const *const NodeInfo)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b087      	sub	sp, #28
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	6039      	str	r1, [r7, #0]
  uint32_t node_idx = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]
  uint32_t currentnode_address  = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	613b      	str	r3, [r7, #16]
  uint32_t previousnode_address;
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60bb      	str	r3, [r7, #8]

  /* Check that previous node is linked to the selected queue */
  while (node_idx < pQList->NodeNumber)
 8003c92:	e031      	b.n	8003cf8 <DMA_List_ResetQueueNodes+0x7e>
  {
    /* Get head node address */
    if (node_idx == 0U)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d110      	bne.n	8003cbc <DMA_List_ResetQueueNodes+0x42>
    {
      previousnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
      currentnode_address  = (pQList->Head->LinkRegisters[cllr_offset] & DMA_CLLR_LA);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003cb2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	e00f      	b.n	8003cdc <DMA_List_ResetQueueNodes+0x62>
    }
    /* Calculate nodes addresses */
    else
    {
      previousnode_address = currentnode_address;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	60fb      	str	r3, [r7, #12]
      currentnode_address =
        ((DMA_NodeTypeDef *)(currentnode_address +
                             ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	0c1b      	lsrs	r3, r3, #16
 8003cc6:	041b      	lsls	r3, r3, #16
        ((DMA_NodeTypeDef *)(currentnode_address +
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4413      	add	r3, r2
 8003ccc:	461a      	mov	r2, r3
                             ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
      currentnode_address =
 8003cd4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003cd8:	4013      	ands	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
    }

    /* Reset node */
    ((DMA_NodeTypeDef *)(previousnode_address +
                         ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] = 0U;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	0c1b      	lsrs	r3, r3, #16
 8003ce2:	041b      	lsls	r3, r3, #16
    ((DMA_NodeTypeDef *)(previousnode_address +
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	4619      	mov	r1, r3
                         ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] = 0U;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* Increment node index */
    node_idx++;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	617b      	str	r3, [r7, #20]
  while (node_idx < pQList->NodeNumber)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d3c8      	bcc.n	8003c94 <DMA_List_ResetQueueNodes+0x1a>
  }
}
 8003d02:	bf00      	nop
 8003d04:	bf00      	nop
 8003d06:	371c      	adds	r7, #28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b089      	sub	sp, #36	@ 0x24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003d22:	e1ba      	b.n	800409a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	2101      	movs	r1, #1
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d30:	4013      	ands	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 81aa 	beq.w	8004094 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a55      	ldr	r2, [pc, #340]	@ (8003e98 <HAL_GPIO_Init+0x188>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d15d      	bne.n	8003e04 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003d4e:	2201      	movs	r2, #1
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 0201 	and.w	r2, r3, #1
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003d78:	4a48      	ldr	r2, [pc, #288]	@ (8003e9c <HAL_GPIO_Init+0x18c>)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d80:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003d82:	4a46      	ldr	r2, [pc, #280]	@ (8003e9c <HAL_GPIO_Init+0x18c>)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	4413      	add	r3, r2
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	08da      	lsrs	r2, r3, #3
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	3208      	adds	r2, #8
 8003d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d9a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	220f      	movs	r2, #15
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43db      	mvns	r3, r3
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	4013      	ands	r3, r2
 8003db0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	220b      	movs	r2, #11
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	08da      	lsrs	r2, r3, #3
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	3208      	adds	r2, #8
 8003dce:	69f9      	ldr	r1, [r7, #28]
 8003dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	2203      	movs	r2, #3
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69fa      	ldr	r2, [r7, #28]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	2202      	movs	r2, #2
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	e067      	b.n	8003ed4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d003      	beq.n	8003e14 <HAL_GPIO_Init+0x104>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b12      	cmp	r3, #18
 8003e12:	d145      	bne.n	8003ea0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	08da      	lsrs	r2, r3, #3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3208      	adds	r2, #8
 8003e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e20:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	220f      	movs	r2, #15
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	4013      	ands	r3, r2
 8003e36:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f003 020f 	and.w	r2, r3, #15
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	08da      	lsrs	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3208      	adds	r2, #8
 8003e5a:	69f9      	ldr	r1, [r7, #28]
 8003e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	69fa      	ldr	r2, [r7, #28]
 8003e74:	4013      	ands	r3, r2
 8003e76:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 0203 	and.w	r2, r3, #3
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	e01e      	b.n	8003ed4 <HAL_GPIO_Init+0x1c4>
 8003e96:	bf00      	nop
 8003e98:	46020000 	.word	0x46020000
 8003e9c:	0802fa4c 	.word	0x0802fa4c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	2203      	movs	r2, #3
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 0203 	and.w	r2, r3, #3
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	69fa      	ldr	r2, [r7, #28]
 8003ed2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d00b      	beq.n	8003ef4 <HAL_GPIO_Init+0x1e4>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d007      	beq.n	8003ef4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ee8:	2b11      	cmp	r3, #17
 8003eea:	d003      	beq.n	8003ef4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b12      	cmp	r3, #18
 8003ef2:	d130      	bne.n	8003f56 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	2203      	movs	r2, #3
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69fa      	ldr	r2, [r7, #28]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	43db      	mvns	r3, r3
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	4013      	ands	r3, r2
 8003f38:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	091b      	lsrs	r3, r3, #4
 8003f40:	f003 0201 	and.w	r2, r3, #1
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d017      	beq.n	8003f8e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	2203      	movs	r2, #3
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	4013      	ands	r3, r2
 8003f74:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d07c      	beq.n	8004094 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003f9a:	4a47      	ldr	r2, [pc, #284]	@ (80040b8 <HAL_GPIO_Init+0x3a8>)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	089b      	lsrs	r3, r3, #2
 8003fa0:	3318      	adds	r3, #24
 8003fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	220f      	movs	r2, #15
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	0a9a      	lsrs	r2, r3, #10
 8003fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80040bc <HAL_GPIO_Init+0x3ac>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	f002 0203 	and.w	r2, r2, #3
 8003fcc:	00d2      	lsls	r2, r2, #3
 8003fce:	4093      	lsls	r3, r2
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003fd6:	4938      	ldr	r1, [pc, #224]	@ (80040b8 <HAL_GPIO_Init+0x3a8>)
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	089b      	lsrs	r3, r3, #2
 8003fdc:	3318      	adds	r3, #24
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003fe4:	4b34      	ldr	r3, [pc, #208]	@ (80040b8 <HAL_GPIO_Init+0x3a8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	43db      	mvns	r3, r3
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4313      	orrs	r3, r2
 8004006:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004008:	4a2b      	ldr	r2, [pc, #172]	@ (80040b8 <HAL_GPIO_Init+0x3a8>)
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800400e:	4b2a      	ldr	r3, [pc, #168]	@ (80040b8 <HAL_GPIO_Init+0x3a8>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	43db      	mvns	r3, r3
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	4013      	ands	r3, r2
 800401c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800402a:	69fa      	ldr	r2, [r7, #28]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004032:	4a21      	ldr	r2, [pc, #132]	@ (80040b8 <HAL_GPIO_Init+0x3a8>)
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004038:	4b1f      	ldr	r3, [pc, #124]	@ (80040b8 <HAL_GPIO_Init+0x3a8>)
 800403a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800403e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	43db      	mvns	r3, r3
 8004044:	69fa      	ldr	r2, [r7, #28]
 8004046:	4013      	ands	r3, r2
 8004048:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800405e:	4a16      	ldr	r2, [pc, #88]	@ (80040b8 <HAL_GPIO_Init+0x3a8>)
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004066:	4b14      	ldr	r3, [pc, #80]	@ (80040b8 <HAL_GPIO_Init+0x3a8>)
 8004068:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800406c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	43db      	mvns	r3, r3
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	4013      	ands	r3, r2
 8004076:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800408c:	4a0a      	ldr	r2, [pc, #40]	@ (80040b8 <HAL_GPIO_Init+0x3a8>)
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	3301      	adds	r3, #1
 8004098:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	fa22 f303 	lsr.w	r3, r2, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f47f ae3d 	bne.w	8003d24 <HAL_GPIO_Init+0x14>
  }
}
 80040aa:	bf00      	nop
 80040ac:	bf00      	nop
 80040ae:	3724      	adds	r7, #36	@ 0x24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	46022000 	.word	0x46022000
 80040bc:	002f7f7f 	.word	0x002f7f7f

080040c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	887b      	ldrh	r3, [r7, #2]
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
 80040dc:	e001      	b.n	80040e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040de:	2300      	movs	r3, #0
 80040e0:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	807b      	strh	r3, [r7, #2]
 80040fc:	4613      	mov	r3, r2
 80040fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004100:	787b      	ldrb	r3, [r7, #1]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004106:	887a      	ldrh	r2, [r7, #2]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800410c:	e002      	b.n	8004114 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800410e:	887a      	ldrh	r2, [r7, #2]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e08d      	b.n	800424e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fd f8c0 	bl	80012cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2224      	movs	r2, #36	@ 0x24
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0201 	bic.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004170:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004180:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d107      	bne.n	800419a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004196:	609a      	str	r2, [r3, #8]
 8004198:	e006      	b.n	80041a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80041a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d108      	bne.n	80041c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041be:	605a      	str	r2, [r3, #4]
 80041c0:	e007      	b.n	80041d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6812      	ldr	r2, [r2, #0]
 80041dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69d9      	ldr	r1, [r3, #28]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1a      	ldr	r2, [r3, #32]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af02      	add	r7, sp, #8
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	461a      	mov	r2, r3
 8004264:	460b      	mov	r3, r1
 8004266:	817b      	strh	r3, [r7, #10]
 8004268:	4613      	mov	r3, r2
 800426a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b20      	cmp	r3, #32
 8004276:	f040 80da 	bne.w	800442e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004280:	2b01      	cmp	r3, #1
 8004282:	d101      	bne.n	8004288 <HAL_I2C_Master_Transmit+0x30>
 8004284:	2302      	movs	r3, #2
 8004286:	e0d3      	b.n	8004430 <HAL_I2C_Master_Transmit+0x1d8>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004290:	f7fd fdfc 	bl	8001e8c <HAL_GetTick>
 8004294:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	2319      	movs	r3, #25
 800429c:	2201      	movs	r2, #1
 800429e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fbc6 	bl	8004a34 <I2C_WaitOnFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e0be      	b.n	8004430 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2221      	movs	r2, #33	@ 0x21
 80042b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2210      	movs	r2, #16
 80042be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	893a      	ldrh	r2, [r7, #8]
 80042d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042de:	b29b      	uxth	r3, r3
 80042e0:	2bff      	cmp	r3, #255	@ 0xff
 80042e2:	d90e      	bls.n	8004302 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	22ff      	movs	r2, #255	@ 0xff
 80042e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	8979      	ldrh	r1, [r7, #10]
 80042f2:	4b51      	ldr	r3, [pc, #324]	@ (8004438 <HAL_I2C_Master_Transmit+0x1e0>)
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 fd5e 	bl	8004dbc <I2C_TransferConfig>
 8004300:	e06c      	b.n	80043dc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004310:	b2da      	uxtb	r2, r3
 8004312:	8979      	ldrh	r1, [r7, #10]
 8004314:	4b48      	ldr	r3, [pc, #288]	@ (8004438 <HAL_I2C_Master_Transmit+0x1e0>)
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 fd4d 	bl	8004dbc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004322:	e05b      	b.n	80043dc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	6a39      	ldr	r1, [r7, #32]
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 fbdc 	bl	8004ae6 <I2C_WaitOnTXISFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e07b      	b.n	8004430 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	781a      	ldrb	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d034      	beq.n	80043dc <HAL_I2C_Master_Transmit+0x184>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004376:	2b00      	cmp	r3, #0
 8004378:	d130      	bne.n	80043dc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	2200      	movs	r2, #0
 8004382:	2180      	movs	r1, #128	@ 0x80
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 fb55 	bl	8004a34 <I2C_WaitOnFlagUntilTimeout>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e04d      	b.n	8004430 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	2bff      	cmp	r3, #255	@ 0xff
 800439c:	d90e      	bls.n	80043bc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	22ff      	movs	r2, #255	@ 0xff
 80043a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	8979      	ldrh	r1, [r7, #10]
 80043ac:	2300      	movs	r3, #0
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 fd01 	bl	8004dbc <I2C_TransferConfig>
 80043ba:	e00f      	b.n	80043dc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	8979      	ldrh	r1, [r7, #10]
 80043ce:	2300      	movs	r3, #0
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 fcf0 	bl	8004dbc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d19e      	bne.n	8004324 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	6a39      	ldr	r1, [r7, #32]
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 fbc2 	bl	8004b74 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e01a      	b.n	8004430 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2220      	movs	r2, #32
 8004400:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6859      	ldr	r1, [r3, #4]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	4b0b      	ldr	r3, [pc, #44]	@ (800443c <HAL_I2C_Master_Transmit+0x1e4>)
 800440e:	400b      	ands	r3, r1
 8004410:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	e000      	b.n	8004430 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800442e:	2302      	movs	r3, #2
  }
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	80002000 	.word	0x80002000
 800443c:	fe00e800 	.word	0xfe00e800

08004440 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	4608      	mov	r0, r1
 800444a:	4611      	mov	r1, r2
 800444c:	461a      	mov	r2, r3
 800444e:	4603      	mov	r3, r0
 8004450:	817b      	strh	r3, [r7, #10]
 8004452:	460b      	mov	r3, r1
 8004454:	813b      	strh	r3, [r7, #8]
 8004456:	4613      	mov	r3, r2
 8004458:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b20      	cmp	r3, #32
 8004464:	f040 80f9 	bne.w	800465a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <HAL_I2C_Mem_Write+0x34>
 800446e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004470:	2b00      	cmp	r3, #0
 8004472:	d105      	bne.n	8004480 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800447a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0ed      	b.n	800465c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_I2C_Mem_Write+0x4e>
 800448a:	2302      	movs	r3, #2
 800448c:	e0e6      	b.n	800465c <HAL_I2C_Mem_Write+0x21c>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004496:	f7fd fcf9 	bl	8001e8c <HAL_GetTick>
 800449a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	2319      	movs	r3, #25
 80044a2:	2201      	movs	r2, #1
 80044a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fac3 	bl	8004a34 <I2C_WaitOnFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0d1      	b.n	800465c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2221      	movs	r2, #33	@ 0x21
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2240      	movs	r2, #64	@ 0x40
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a3a      	ldr	r2, [r7, #32]
 80044d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80044d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044e0:	88f8      	ldrh	r0, [r7, #6]
 80044e2:	893a      	ldrh	r2, [r7, #8]
 80044e4:	8979      	ldrh	r1, [r7, #10]
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	9301      	str	r3, [sp, #4]
 80044ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	4603      	mov	r3, r0
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f9d3 	bl	800489c <I2C_RequestMemoryWrite>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e0a9      	b.n	800465c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800450c:	b29b      	uxth	r3, r3
 800450e:	2bff      	cmp	r3, #255	@ 0xff
 8004510:	d90e      	bls.n	8004530 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	22ff      	movs	r2, #255	@ 0xff
 8004516:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800451c:	b2da      	uxtb	r2, r3
 800451e:	8979      	ldrh	r1, [r7, #10]
 8004520:	2300      	movs	r3, #0
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 fc47 	bl	8004dbc <I2C_TransferConfig>
 800452e:	e00f      	b.n	8004550 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800453e:	b2da      	uxtb	r2, r3
 8004540:	8979      	ldrh	r1, [r7, #10]
 8004542:	2300      	movs	r3, #0
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 fc36 	bl	8004dbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 fac6 	bl	8004ae6 <I2C_WaitOnTXISFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e07b      	b.n	800465c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004568:	781a      	ldrb	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d034      	beq.n	8004608 <HAL_I2C_Mem_Write+0x1c8>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d130      	bne.n	8004608 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ac:	2200      	movs	r2, #0
 80045ae:	2180      	movs	r1, #128	@ 0x80
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 fa3f 	bl	8004a34 <I2C_WaitOnFlagUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e04d      	b.n	800465c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2bff      	cmp	r3, #255	@ 0xff
 80045c8:	d90e      	bls.n	80045e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	22ff      	movs	r2, #255	@ 0xff
 80045ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	8979      	ldrh	r1, [r7, #10]
 80045d8:	2300      	movs	r3, #0
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 fbeb 	bl	8004dbc <I2C_TransferConfig>
 80045e6:	e00f      	b.n	8004608 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	8979      	ldrh	r1, [r7, #10]
 80045fa:	2300      	movs	r3, #0
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 fbda 	bl	8004dbc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d19e      	bne.n	8004550 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 faac 	bl	8004b74 <I2C_WaitOnSTOPFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e01a      	b.n	800465c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2220      	movs	r2, #32
 800462c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6859      	ldr	r1, [r3, #4]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	4b0a      	ldr	r3, [pc, #40]	@ (8004664 <HAL_I2C_Mem_Write+0x224>)
 800463a:	400b      	ands	r3, r1
 800463c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2220      	movs	r2, #32
 8004642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	e000      	b.n	800465c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800465a:	2302      	movs	r3, #2
  }
}
 800465c:	4618      	mov	r0, r3
 800465e:	3718      	adds	r7, #24
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	fe00e800 	.word	0xfe00e800

08004668 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af02      	add	r7, sp, #8
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	4608      	mov	r0, r1
 8004672:	4611      	mov	r1, r2
 8004674:	461a      	mov	r2, r3
 8004676:	4603      	mov	r3, r0
 8004678:	817b      	strh	r3, [r7, #10]
 800467a:	460b      	mov	r3, r1
 800467c:	813b      	strh	r3, [r7, #8]
 800467e:	4613      	mov	r3, r2
 8004680:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b20      	cmp	r3, #32
 800468c:	f040 80fd 	bne.w	800488a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_I2C_Mem_Read+0x34>
 8004696:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004698:	2b00      	cmp	r3, #0
 800469a:	d105      	bne.n	80046a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046a2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e0f1      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <HAL_I2C_Mem_Read+0x4e>
 80046b2:	2302      	movs	r3, #2
 80046b4:	e0ea      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046be:	f7fd fbe5 	bl	8001e8c <HAL_GetTick>
 80046c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	2319      	movs	r3, #25
 80046ca:	2201      	movs	r2, #1
 80046cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f9af 	bl	8004a34 <I2C_WaitOnFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e0d5      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2222      	movs	r2, #34	@ 0x22
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2240      	movs	r2, #64	@ 0x40
 80046ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a3a      	ldr	r2, [r7, #32]
 80046fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004700:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004708:	88f8      	ldrh	r0, [r7, #6]
 800470a:	893a      	ldrh	r2, [r7, #8]
 800470c:	8979      	ldrh	r1, [r7, #10]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	9301      	str	r3, [sp, #4]
 8004712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	4603      	mov	r3, r0
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f913 	bl	8004944 <I2C_RequestMemoryRead>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0ad      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004734:	b29b      	uxth	r3, r3
 8004736:	2bff      	cmp	r3, #255	@ 0xff
 8004738:	d90e      	bls.n	8004758 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	22ff      	movs	r2, #255	@ 0xff
 800473e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004744:	b2da      	uxtb	r2, r3
 8004746:	8979      	ldrh	r1, [r7, #10]
 8004748:	4b52      	ldr	r3, [pc, #328]	@ (8004894 <HAL_I2C_Mem_Read+0x22c>)
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 fb33 	bl	8004dbc <I2C_TransferConfig>
 8004756:	e00f      	b.n	8004778 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004766:	b2da      	uxtb	r2, r3
 8004768:	8979      	ldrh	r1, [r7, #10]
 800476a:	4b4a      	ldr	r3, [pc, #296]	@ (8004894 <HAL_I2C_Mem_Read+0x22c>)
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 fb22 	bl	8004dbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477e:	2200      	movs	r2, #0
 8004780:	2104      	movs	r1, #4
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f956 	bl	8004a34 <I2C_WaitOnFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e07c      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d034      	beq.n	8004838 <HAL_I2C_Mem_Read+0x1d0>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d130      	bne.n	8004838 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047dc:	2200      	movs	r2, #0
 80047de:	2180      	movs	r1, #128	@ 0x80
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 f927 	bl	8004a34 <I2C_WaitOnFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e04d      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2bff      	cmp	r3, #255	@ 0xff
 80047f8:	d90e      	bls.n	8004818 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	22ff      	movs	r2, #255	@ 0xff
 80047fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004804:	b2da      	uxtb	r2, r3
 8004806:	8979      	ldrh	r1, [r7, #10]
 8004808:	2300      	movs	r3, #0
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 fad3 	bl	8004dbc <I2C_TransferConfig>
 8004816:	e00f      	b.n	8004838 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004826:	b2da      	uxtb	r2, r3
 8004828:	8979      	ldrh	r1, [r7, #10]
 800482a:	2300      	movs	r3, #0
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 fac2 	bl	8004dbc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d19a      	bne.n	8004778 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f994 	bl	8004b74 <I2C_WaitOnSTOPFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e01a      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2220      	movs	r2, #32
 800485c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6859      	ldr	r1, [r3, #4]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4b0b      	ldr	r3, [pc, #44]	@ (8004898 <HAL_I2C_Mem_Read+0x230>)
 800486a:	400b      	ands	r3, r1
 800486c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2220      	movs	r2, #32
 8004872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	e000      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800488a:	2302      	movs	r3, #2
  }
}
 800488c:	4618      	mov	r0, r3
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	80002400 	.word	0x80002400
 8004898:	fe00e800 	.word	0xfe00e800

0800489c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	4608      	mov	r0, r1
 80048a6:	4611      	mov	r1, r2
 80048a8:	461a      	mov	r2, r3
 80048aa:	4603      	mov	r3, r0
 80048ac:	817b      	strh	r3, [r7, #10]
 80048ae:	460b      	mov	r3, r1
 80048b0:	813b      	strh	r3, [r7, #8]
 80048b2:	4613      	mov	r3, r2
 80048b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80048b6:	88fb      	ldrh	r3, [r7, #6]
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	8979      	ldrh	r1, [r7, #10]
 80048bc:	4b20      	ldr	r3, [pc, #128]	@ (8004940 <I2C_RequestMemoryWrite+0xa4>)
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 fa79 	bl	8004dbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	69b9      	ldr	r1, [r7, #24]
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 f909 	bl	8004ae6 <I2C_WaitOnTXISFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e02c      	b.n	8004938 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048de:	88fb      	ldrh	r3, [r7, #6]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d105      	bne.n	80048f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048e4:	893b      	ldrh	r3, [r7, #8]
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80048ee:	e015      	b.n	800491c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048f0:	893b      	ldrh	r3, [r7, #8]
 80048f2:	0a1b      	lsrs	r3, r3, #8
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048fe:	69fa      	ldr	r2, [r7, #28]
 8004900:	69b9      	ldr	r1, [r7, #24]
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 f8ef 	bl	8004ae6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e012      	b.n	8004938 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004912:	893b      	ldrh	r3, [r7, #8]
 8004914:	b2da      	uxtb	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	2200      	movs	r2, #0
 8004924:	2180      	movs	r1, #128	@ 0x80
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 f884 	bl	8004a34 <I2C_WaitOnFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	80002000 	.word	0x80002000

08004944 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af02      	add	r7, sp, #8
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	4608      	mov	r0, r1
 800494e:	4611      	mov	r1, r2
 8004950:	461a      	mov	r2, r3
 8004952:	4603      	mov	r3, r0
 8004954:	817b      	strh	r3, [r7, #10]
 8004956:	460b      	mov	r3, r1
 8004958:	813b      	strh	r3, [r7, #8]
 800495a:	4613      	mov	r3, r2
 800495c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800495e:	88fb      	ldrh	r3, [r7, #6]
 8004960:	b2da      	uxtb	r2, r3
 8004962:	8979      	ldrh	r1, [r7, #10]
 8004964:	4b20      	ldr	r3, [pc, #128]	@ (80049e8 <I2C_RequestMemoryRead+0xa4>)
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	2300      	movs	r3, #0
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 fa26 	bl	8004dbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004970:	69fa      	ldr	r2, [r7, #28]
 8004972:	69b9      	ldr	r1, [r7, #24]
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 f8b6 	bl	8004ae6 <I2C_WaitOnTXISFlagUntilTimeout>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e02c      	b.n	80049de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d105      	bne.n	8004996 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800498a:	893b      	ldrh	r3, [r7, #8]
 800498c:	b2da      	uxtb	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	629a      	str	r2, [r3, #40]	@ 0x28
 8004994:	e015      	b.n	80049c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004996:	893b      	ldrh	r3, [r7, #8]
 8004998:	0a1b      	lsrs	r3, r3, #8
 800499a:	b29b      	uxth	r3, r3
 800499c:	b2da      	uxtb	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	69b9      	ldr	r1, [r7, #24]
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 f89c 	bl	8004ae6 <I2C_WaitOnTXISFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e012      	b.n	80049de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049b8:	893b      	ldrh	r3, [r7, #8]
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	2200      	movs	r2, #0
 80049ca:	2140      	movs	r1, #64	@ 0x40
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f831 	bl	8004a34 <I2C_WaitOnFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	80002000 	.word	0x80002000

080049ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d103      	bne.n	8004a0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2200      	movs	r2, #0
 8004a08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d007      	beq.n	8004a28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0201 	orr.w	r2, r2, #1
 8004a26:	619a      	str	r2, [r3, #24]
  }
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a44:	e03b      	b.n	8004abe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	6839      	ldr	r1, [r7, #0]
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 f8d6 	bl	8004bfc <I2C_IsErrorOccurred>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e041      	b.n	8004ade <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a60:	d02d      	beq.n	8004abe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a62:	f7fd fa13 	bl	8001e8c <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d302      	bcc.n	8004a78 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d122      	bne.n	8004abe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4013      	ands	r3, r2
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	bf0c      	ite	eq
 8004a88:	2301      	moveq	r3, #1
 8004a8a:	2300      	movne	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	461a      	mov	r2, r3
 8004a90:	79fb      	ldrb	r3, [r7, #7]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d113      	bne.n	8004abe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9a:	f043 0220 	orr.w	r2, r3, #32
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e00f      	b.n	8004ade <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	699a      	ldr	r2, [r3, #24]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	bf0c      	ite	eq
 8004ace:	2301      	moveq	r3, #1
 8004ad0:	2300      	movne	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d0b4      	beq.n	8004a46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004af2:	e033      	b.n	8004b5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 f87f 	bl	8004bfc <I2C_IsErrorOccurred>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e031      	b.n	8004b6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0e:	d025      	beq.n	8004b5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b10:	f7fd f9bc 	bl	8001e8c <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d302      	bcc.n	8004b26 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d11a      	bne.n	8004b5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d013      	beq.n	8004b5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b38:	f043 0220 	orr.w	r2, r3, #32
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e007      	b.n	8004b6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d1c4      	bne.n	8004af4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b80:	e02f      	b.n	8004be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	68b9      	ldr	r1, [r7, #8]
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f838 	bl	8004bfc <I2C_IsErrorOccurred>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e02d      	b.n	8004bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b96:	f7fd f979 	bl	8001e8c <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d302      	bcc.n	8004bac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d11a      	bne.n	8004be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d013      	beq.n	8004be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bbe:	f043 0220 	orr.w	r2, r3, #32
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e007      	b.n	8004bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	f003 0320 	and.w	r3, r3, #32
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d1c8      	bne.n	8004b82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08a      	sub	sp, #40	@ 0x28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c16:	2300      	movs	r3, #0
 8004c18:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d068      	beq.n	8004cfa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2210      	movs	r2, #16
 8004c2e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c30:	e049      	b.n	8004cc6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c38:	d045      	beq.n	8004cc6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c3a:	f7fd f927 	bl	8001e8c <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d302      	bcc.n	8004c50 <I2C_IsErrorOccurred+0x54>
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d13a      	bne.n	8004cc6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c5a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c62:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c72:	d121      	bne.n	8004cb8 <I2C_IsErrorOccurred+0xbc>
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c7a:	d01d      	beq.n	8004cb8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004c7c:	7cfb      	ldrb	r3, [r7, #19]
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	d01a      	beq.n	8004cb8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c90:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004c92:	f7fd f8fb 	bl	8001e8c <HAL_GetTick>
 8004c96:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c98:	e00e      	b.n	8004cb8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004c9a:	f7fd f8f7 	bl	8001e8c <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b19      	cmp	r3, #25
 8004ca6:	d907      	bls.n	8004cb8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	f043 0320 	orr.w	r3, r3, #32
 8004cae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004cb6:	e006      	b.n	8004cc6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	d1e9      	bne.n	8004c9a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d003      	beq.n	8004cdc <I2C_IsErrorOccurred+0xe0>
 8004cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0aa      	beq.n	8004c32 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d103      	bne.n	8004cec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	f043 0304 	orr.w	r3, r3, #4
 8004cf2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00b      	beq.n	8004d24 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	f043 0301 	orr.w	r3, r3, #1
 8004d12:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00b      	beq.n	8004d46 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	f043 0308 	orr.w	r3, r3, #8
 8004d34:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00b      	beq.n	8004d68 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	f043 0302 	orr.w	r3, r3, #2
 8004d56:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004d68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01c      	beq.n	8004daa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff fe3b 	bl	80049ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6859      	ldr	r1, [r3, #4]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	4b0d      	ldr	r3, [pc, #52]	@ (8004db8 <I2C_IsErrorOccurred+0x1bc>)
 8004d82:	400b      	ands	r3, r1
 8004d84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004daa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3728      	adds	r7, #40	@ 0x28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	fe00e800 	.word	0xfe00e800

08004dbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	817b      	strh	r3, [r7, #10]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dce:	897b      	ldrh	r3, [r7, #10]
 8004dd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004dd4:	7a7b      	ldrb	r3, [r7, #9]
 8004dd6:	041b      	lsls	r3, r3, #16
 8004dd8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ddc:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004dea:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	0d5b      	lsrs	r3, r3, #21
 8004df6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004dfa:	4b08      	ldr	r3, [pc, #32]	@ (8004e1c <I2C_TransferConfig+0x60>)
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	ea02 0103 	and.w	r1, r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e0e:	bf00      	nop
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	03ff63ff 	.word	0x03ff63ff

08004e20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d138      	bne.n	8004ea8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e032      	b.n	8004eaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2224      	movs	r2, #36	@ 0x24
 8004e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0201 	bic.w	r2, r2, #1
 8004e62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6819      	ldr	r1, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	e000      	b.n	8004eaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ea8:	2302      	movs	r3, #2
  }
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b085      	sub	sp, #20
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d139      	bne.n	8004f40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e033      	b.n	8004f42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2224      	movs	r2, #36	@ 0x24
 8004ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0201 	bic.w	r2, r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004f08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	021b      	lsls	r3, r3, #8
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	e000      	b.n	8004f42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f40:	2302      	movs	r3, #2
  }
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f043 0201 	orr.w	r2, r3, #1
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	601a      	str	r2, [r3, #0]
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004f7c:	f7fc ff86 	bl	8001e8c <HAL_GetTick>
 8004f80:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d102      	bne.n	8004f8e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	73fb      	strb	r3, [r7, #15]
 8004f8c:	e0a5      	b.n	80050da <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f040 809e 	bne.w	80050da <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fc fb5e 	bl	8001660 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004fa4:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 fba4 	bl	80056f6 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	4b4b      	ldr	r3, [pc, #300]	@ (80050e4 <HAL_OSPI_Init+0x174>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	68d1      	ldr	r1, [r2, #12]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6912      	ldr	r2, [r2, #16]
 8004fc0:	3a01      	subs	r2, #1
 8004fc2:	0412      	lsls	r2, r2, #16
 8004fc4:	4311      	orrs	r1, r2
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6952      	ldr	r2, [r2, #20]
 8004fca:	3a01      	subs	r2, #1
 8004fcc:	0212      	lsls	r2, r2, #8
 8004fce:	4311      	orrs	r1, r2
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004fd4:	4311      	orrs	r1, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	69d2      	ldr	r2, [r2, #28]
 8004fda:	4311      	orrs	r1, r2
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6812      	ldr	r2, [r2, #0]
 8004fe0:	430b      	orrs	r3, r1
 8004fe2:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1a      	ldr	r2, [r3, #32]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffe:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005014:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	3b01      	subs	r3, #1
 8005026:	021a      	lsls	r2, r3, #8
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2200      	movs	r2, #0
 800503a:	2120      	movs	r1, #32
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f001 f89b 	bl	8006178 <OSPI_WaitFlagStateUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d146      	bne.n	80050da <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505a:	1e5a      	subs	r2, r3, #1
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005082:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f042 0201 	orr.w	r2, r2, #1
 80050a8:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d107      	bne.n	80050c2 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0202 	orr.w	r2, r2, #2
 80050c0:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050ca:	d103      	bne.n	80050d4 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80050d2:	e002      	b.n	80050da <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80050da:	7bfb      	ldrb	r3, [r7, #15]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	f8e0c0f4 	.word	0xf8e0c0f4

080050e8 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3350      	adds	r3, #80	@ 0x50
 80050f6:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800510c:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b00      	cmp	r3, #0
 8005116:	d03a      	beq.n	800518e <HAL_OSPI_IRQHandler+0xa6>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d035      	beq.n	800518e <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2b18      	cmp	r3, #24
 8005126:	d10f      	bne.n	8005148 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512c:	781a      	ldrb	r2, [r3, #0]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	641a      	str	r2, [r3, #64]	@ 0x40
      hospi->XferCount--;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005140:	1e5a      	subs	r2, r3, #1
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	649a      	str	r2, [r3, #72]	@ 0x48
 8005146:	e012      	b.n	800516e <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b28      	cmp	r3, #40	@ 0x28
 800514c:	d10f      	bne.n	800516e <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	7812      	ldrb	r2, [r2, #0]
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	641a      	str	r2, [r3, #64]	@ 0x40
      hospi->XferCount--;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005168:	1e5a      	subs	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	649a      	str	r2, [r3, #72]	@ 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005172:	2b00      	cmp	r3, #0
 8005174:	d107      	bne.n	8005186 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005184:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fa04 	bl	8005594 <HAL_OSPI_FifoThresholdCallback>
 800518c:	e0e7      	b.n	800535e <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d067      	beq.n	8005268 <HAL_OSPI_IRQHandler+0x180>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d062      	beq.n	8005268 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2b28      	cmp	r3, #40	@ 0x28
 80051a6:	d131      	bne.n	800520c <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d015      	beq.n	80051dc <HAL_OSPI_IRQHandler+0xf4>
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d010      	beq.n	80051dc <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	7812      	ldrb	r2, [r2, #0]
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051d4:	1e5a      	subs	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	649a      	str	r2, [r3, #72]	@ 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80051da:	e0bd      	b.n	8005358 <HAL_OSPI_IRQHandler+0x270>
      }
      else if (hospi->XferCount == 0U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f040 80b9 	bne.w	8005358 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2202      	movs	r2, #2
 80051ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 80051fc:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2202      	movs	r2, #2
 8005202:	651a      	str	r2, [r3, #80]	@ 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f9d9 	bl	80055bc <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800520a:	e0a5      	b.n	8005358 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2202      	movs	r2, #2
 8005212:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8005222:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	651a      	str	r2, [r3, #80]	@ 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b18      	cmp	r3, #24
 800522e:	d103      	bne.n	8005238 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f9cd 	bl	80055d0 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8005236:	e08f      	b.n	8005358 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b08      	cmp	r3, #8
 800523c:	d103      	bne.n	8005246 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f9b2 	bl	80055a8 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8005244:	e088      	b.n	8005358 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800524c:	f040 8084 	bne.w	8005358 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f991 	bl	8005580 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800525e:	e07b      	b.n	8005358 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f983 	bl	800556c <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8005266:	e077      	b.n	8005358 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d01e      	beq.n	80052b0 <HAL_OSPI_IRQHandler+0x1c8>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d019      	beq.n	80052b0 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2208      	movs	r2, #8
 8005282:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 80052a0:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2202      	movs	r2, #2
 80052a6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f99b 	bl	80055e4 <HAL_OSPI_StatusMatchCallback>
 80052ae:	e056      	b.n	800535e <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d03c      	beq.n	8005334 <HAL_OSPI_IRQHandler+0x24c>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d037      	beq.n	8005334 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2201      	movs	r2, #1
 80052ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 80052da:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d01a      	beq.n	8005326 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0204 	bic.w	r2, r2, #4
 80052fe:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005304:	4a18      	ldr	r2, [pc, #96]	@ (8005368 <HAL_OSPI_IRQHandler+0x280>)
 8005306:	66da      	str	r2, [r3, #108]	@ 0x6c
      if (HAL_DMA_Abort_IT(hospi->hdma) != HAL_OK)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800530c:	4618      	mov	r0, r3
 800530e:	f7fd f8f3 	bl	80024f8 <HAL_DMA_Abort_IT>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d021      	beq.n	800535c <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f924 	bl	800556c <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8005324:	e01a      	b.n	800535c <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2202      	movs	r2, #2
 800532a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f91d 	bl	800556c <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8005332:	e013      	b.n	800535c <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f003 0310 	and.w	r3, r3, #16
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00f      	beq.n	800535e <HAL_OSPI_IRQHandler+0x276>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2210      	movs	r2, #16
 800534e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f951 	bl	80055f8 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005356:	e002      	b.n	800535e <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8005358:	bf00      	nop
 800535a:	e000      	b.n	800535e <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800535c:	bf00      	nop
}
 800535e:	bf00      	nop
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	08006101 	.word	0x08006101

0800536c <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08a      	sub	sp, #40	@ 0x28
 8005370:	af02      	add	r7, sp, #8
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8005378:	f7fc fd88 	bl	8001e8c <HAL_GetTick>
 800537c:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005382:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005388:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d104      	bne.n	800539a <HAL_OSPI_Command+0x2e>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005398:	d115      	bne.n	80053c6 <HAL_OSPI_Command+0x5a>
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2b14      	cmp	r3, #20
 800539e:	d107      	bne.n	80053b0 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d00e      	beq.n	80053c6 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d00a      	beq.n	80053c6 <HAL_OSPI_Command+0x5a>
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	2b24      	cmp	r3, #36	@ 0x24
 80053b4:	d15b      	bne.n	800546e <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d003      	beq.n	80053c6 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80053c2:	2b03      	cmp	r3, #3
 80053c4:	d153      	bne.n	800546e <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2200      	movs	r2, #0
 80053ce:	2120      	movs	r1, #32
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 fed1 	bl	8006178 <OSPI_WaitFlagStateUntilTimeout>
 80053d6:	4603      	mov	r3, r0
 80053d8:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80053da:	7ffb      	ldrb	r3, [r7, #31]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d14c      	bne.n	800547a <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 ff05 	bl	80061f8 <OSPI_ConfigCmd>
 80053ee:	4603      	mov	r3, r0
 80053f0:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80053f2:	7ffb      	ldrb	r3, [r7, #31]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d140      	bne.n	800547a <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10e      	bne.n	800541e <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	2201      	movs	r2, #1
 8005408:	2102      	movs	r1, #2
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 feb4 	bl	8006178 <OSPI_WaitFlagStateUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2202      	movs	r2, #2
 800541a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 800541c:	e02d      	b.n	800547a <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d103      	bne.n	800542e <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2204      	movs	r2, #4
 800542a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800542c:	e025      	b.n	800547a <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d10b      	bne.n	800544e <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800543a:	2b24      	cmp	r3, #36	@ 0x24
 800543c:	d103      	bne.n	8005446 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2204      	movs	r2, #4
 8005442:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8005444:	e019      	b.n	800547a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2214      	movs	r2, #20
 800544a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800544c:	e015      	b.n	800547a <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b02      	cmp	r3, #2
 8005454:	d111      	bne.n	800547a <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800545a:	2b14      	cmp	r3, #20
 800545c:	d103      	bne.n	8005466 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2204      	movs	r2, #4
 8005462:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8005464:	e009      	b.n	800547a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2224      	movs	r2, #36	@ 0x24
 800546a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800546c:	e005      	b.n	800547a <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2210      	movs	r2, #16
 8005476:	655a      	str	r2, [r3, #84]	@ 0x54
 8005478:	e000      	b.n	800547c <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800547a:	bf00      	nop
  }

  /* Return function status */
  return status;
 800547c:	7ffb      	ldrb	r3, [r7, #31]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b08a      	sub	sp, #40	@ 0x28
 800548a:	af02      	add	r7, sp, #8
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005492:	f7fc fcfb 	bl	8001e8c <HAL_GetTick>
 8005496:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3350      	adds	r3, #80	@ 0x50
 800549e:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d105      	bne.n	80054b2 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2208      	movs	r2, #8
 80054ae:	655a      	str	r2, [r3, #84]	@ 0x54
 80054b0:	e057      	b.n	8005562 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d14e      	bne.n	8005558 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80054e2:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	2201      	movs	r2, #1
 80054ec:	2104      	movs	r1, #4
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 fe42 	bl	8006178 <OSPI_WaitFlagStateUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80054f8:	7ffb      	ldrb	r3, [r7, #31]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d113      	bne.n	8005526 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005502:	781a      	ldrb	r2, [r3, #0]
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005516:	1e5a      	subs	r2, r3, #1
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1df      	bne.n	80054e4 <HAL_OSPI_Transmit+0x5e>
 8005524:	e000      	b.n	8005528 <HAL_OSPI_Transmit+0xa2>
          break;
 8005526:	bf00      	nop

      if (status == HAL_OK)
 8005528:	7ffb      	ldrb	r3, [r7, #31]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d119      	bne.n	8005562 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	2201      	movs	r2, #1
 8005536:	2102      	movs	r1, #2
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 fe1d 	bl	8006178 <OSPI_WaitFlagStateUntilTimeout>
 800553e:	4603      	mov	r3, r0
 8005540:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005542:	7ffb      	ldrb	r3, [r7, #31]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10c      	bne.n	8005562 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2202      	movs	r2, #2
 800554e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2202      	movs	r2, #2
 8005554:	651a      	str	r2, [r3, #80]	@ 0x50
 8005556:	e004      	b.n	8005562 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2210      	movs	r2, #16
 8005560:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8005562:	7ffb      	ldrb	r3, [r7, #31]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3720      	adds	r7, #32
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af02      	add	r7, sp, #8
 8005612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8005618:	f7fc fc38 	bl	8001e8c <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005622:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d104      	bne.n	8005638 <HAL_OSPI_Abort+0x2c>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	d052      	beq.n	80056de <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0304 	and.w	r3, r3, #4
 8005642:	2b00      	cmp	r3, #0
 8005644:	d014      	beq.n	8005670 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0204 	bic.w	r2, r2, #4
 8005654:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800565a:	4618      	mov	r0, r3
 800565c:	f7fc fed0 	bl	8002400 <HAL_DMA_Abort>
 8005660:	4603      	mov	r3, r0
 8005662:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8005664:	7dfb      	ldrb	r3, [r7, #23]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2204      	movs	r2, #4
 800566e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	2b00      	cmp	r3, #0
 800567c:	d02b      	beq.n	80056d6 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0202 	orr.w	r2, r2, #2
 800568c:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	2201      	movs	r2, #1
 8005698:	2102      	movs	r1, #2
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fd6c 	bl	8006178 <OSPI_WaitFlagStateUntilTimeout>
 80056a0:	4603      	mov	r3, r0
 80056a2:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80056a4:	7dfb      	ldrb	r3, [r7, #23]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d11f      	bne.n	80056ea <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2202      	movs	r2, #2
 80056b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	2200      	movs	r2, #0
 80056bc:	2120      	movs	r1, #32
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fd5a 	bl	8006178 <OSPI_WaitFlagStateUntilTimeout>
 80056c4:	4603      	mov	r3, r0
 80056c6:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80056c8:	7dfb      	ldrb	r3, [r7, #23]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10d      	bne.n	80056ea <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2202      	movs	r2, #2
 80056d2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80056d4:	e009      	b.n	80056ea <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2202      	movs	r2, #2
 80056da:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80056dc:	e005      	b.n	80056ea <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2210      	movs	r2, #16
 80056e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80056e8:	e000      	b.n	80056ec <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80056ea:	bf00      	nop
  }

  /* Return function status */
  return status;
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b094      	sub	sp, #80	@ 0x50
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005720:	2300      	movs	r3, #0
 8005722:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a9d      	ldr	r2, [pc, #628]	@ (80059a8 <HAL_OSPIM_Config+0x294>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d105      	bne.n	8005742 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 800573a:	2301      	movs	r3, #1
 800573c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8005740:	e004      	b.n	800574c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8005742:	2301      	movs	r3, #1
 8005744:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800574c:	2300      	movs	r3, #0
 800574e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005752:	e01d      	b.n	8005790 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8005754:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005758:	3301      	adds	r3, #1
 800575a:	b2d8      	uxtb	r0, r3
 800575c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8005760:	f107 0114 	add.w	r1, r7, #20
 8005764:	4613      	mov	r3, r2
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	4413      	add	r3, r2
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	440b      	add	r3, r1
 800576e:	4619      	mov	r1, r3
 8005770:	f000 febc 	bl	80064ec <OSPIM_GetConfig>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d005      	beq.n	8005786 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2208      	movs	r2, #8
 8005784:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005786:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800578a:	3301      	adds	r3, #1
 800578c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005790:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005794:	2b01      	cmp	r3, #1
 8005796:	d9dd      	bls.n	8005754 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8005798:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800579c:	2b00      	cmp	r3, #0
 800579e:	f040 84a2 	bne.w	80060e6 <HAL_OSPIM_Config+0x9d2>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80057a2:	4b81      	ldr	r3, [pc, #516]	@ (80059a8 <HAL_OSPIM_Config+0x294>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00b      	beq.n	80057c6 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80057ae:	4b7e      	ldr	r3, [pc, #504]	@ (80059a8 <HAL_OSPIM_Config+0x294>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a7d      	ldr	r2, [pc, #500]	@ (80059a8 <HAL_OSPIM_Config+0x294>)
 80057b4:	f023 0301 	bic.w	r3, r3, #1
 80057b8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80057ba:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80057c6:	4b79      	ldr	r3, [pc, #484]	@ (80059ac <HAL_OSPIM_Config+0x298>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00b      	beq.n	80057ea <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80057d2:	4b76      	ldr	r3, [pc, #472]	@ (80059ac <HAL_OSPIM_Config+0x298>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a75      	ldr	r2, [pc, #468]	@ (80059ac <HAL_OSPIM_Config+0x298>)
 80057d8:	f023 0301 	bic.w	r3, r3, #1
 80057dc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80057de:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80057e2:	f043 0302 	orr.w	r3, r3, #2
 80057e6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80057ea:	4971      	ldr	r1, [pc, #452]	@ (80059b0 <HAL_OSPIM_Config+0x29c>)
 80057ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057ee:	4613      	mov	r3, r2
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	4413      	add	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	3350      	adds	r3, #80	@ 0x50
 80057f8:	443b      	add	r3, r7
 80057fa:	3b34      	subs	r3, #52	@ 0x34
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3b01      	subs	r3, #1
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	440b      	add	r3, r1
 8005804:	6859      	ldr	r1, [r3, #4]
 8005806:	486a      	ldr	r0, [pc, #424]	@ (80059b0 <HAL_OSPIM_Config+0x29c>)
 8005808:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800580a:	4613      	mov	r3, r2
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	4413      	add	r3, r2
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	3350      	adds	r3, #80	@ 0x50
 8005814:	443b      	add	r3, r7
 8005816:	3b34      	subs	r3, #52	@ 0x34
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3b01      	subs	r3, #1
 800581c:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4403      	add	r3, r0
 8005824:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8005826:	4b62      	ldr	r3, [pc, #392]	@ (80059b0 <HAL_OSPIM_Config+0x29c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 80c0 	beq.w	80059b4 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8005834:	4b5e      	ldr	r3, [pc, #376]	@ (80059b0 <HAL_OSPIM_Config+0x29c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a5d      	ldr	r2, [pc, #372]	@ (80059b0 <HAL_OSPIM_Config+0x29c>)
 800583a:	f023 0301 	bic.w	r3, r3, #1
 800583e:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8005840:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005844:	2b01      	cmp	r3, #1
 8005846:	f040 8162 	bne.w	8005b0e <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800584a:	4959      	ldr	r1, [pc, #356]	@ (80059b0 <HAL_OSPIM_Config+0x29c>)
 800584c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005850:	4613      	mov	r3, r2
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	4413      	add	r3, r2
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	3350      	adds	r3, #80	@ 0x50
 800585a:	443b      	add	r3, r7
 800585c:	3b3c      	subs	r3, #60	@ 0x3c
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3b01      	subs	r3, #1
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	6859      	ldr	r1, [r3, #4]
 8005868:	4851      	ldr	r0, [pc, #324]	@ (80059b0 <HAL_OSPIM_Config+0x29c>)
 800586a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800586e:	4613      	mov	r3, r2
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	4413      	add	r3, r2
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	3350      	adds	r3, #80	@ 0x50
 8005878:	443b      	add	r3, r7
 800587a:	3b3c      	subs	r3, #60	@ 0x3c
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3b01      	subs	r3, #1
 8005880:	f041 0202 	orr.w	r2, r1, #2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4403      	add	r3, r0
 8005888:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800588a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800588e:	4613      	mov	r3, r2
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	4413      	add	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	3350      	adds	r3, #80	@ 0x50
 8005898:	443b      	add	r3, r7
 800589a:	3b38      	subs	r3, #56	@ 0x38
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d01f      	beq.n	80058e2 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 80058a2:	4943      	ldr	r1, [pc, #268]	@ (80059b0 <HAL_OSPIM_Config+0x29c>)
 80058a4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80058a8:	4613      	mov	r3, r2
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	4413      	add	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	3350      	adds	r3, #80	@ 0x50
 80058b2:	443b      	add	r3, r7
 80058b4:	3b38      	subs	r3, #56	@ 0x38
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	440b      	add	r3, r1
 80058be:	6859      	ldr	r1, [r3, #4]
 80058c0:	483b      	ldr	r0, [pc, #236]	@ (80059b0 <HAL_OSPIM_Config+0x29c>)
 80058c2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80058c6:	4613      	mov	r3, r2
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	4413      	add	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	3350      	adds	r3, #80	@ 0x50
 80058d0:	443b      	add	r3, r7
 80058d2:	3b38      	subs	r3, #56	@ 0x38
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	f041 0220 	orr.w	r2, r1, #32
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4403      	add	r3, r0
 80058e0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80058e2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80058e6:	4613      	mov	r3, r2
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	4413      	add	r3, r2
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	3350      	adds	r3, #80	@ 0x50
 80058f0:	443b      	add	r3, r7
 80058f2:	3b30      	subs	r3, #48	@ 0x30
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d023      	beq.n	8005942 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80058fa:	492d      	ldr	r1, [pc, #180]	@ (80059b0 <HAL_OSPIM_Config+0x29c>)
 80058fc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005900:	4613      	mov	r3, r2
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	4413      	add	r3, r2
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	3350      	adds	r3, #80	@ 0x50
 800590a:	443b      	add	r3, r7
 800590c:	3b30      	subs	r3, #48	@ 0x30
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3b01      	subs	r3, #1
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	6859      	ldr	r1, [r3, #4]
 800591c:	4824      	ldr	r0, [pc, #144]	@ (80059b0 <HAL_OSPIM_Config+0x29c>)
 800591e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005922:	4613      	mov	r3, r2
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	4413      	add	r3, r2
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	3350      	adds	r3, #80	@ 0x50
 800592c:	443b      	add	r3, r7
 800592e:	3b30      	subs	r3, #48	@ 0x30
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3b01      	subs	r3, #1
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4403      	add	r3, r0
 8005940:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005942:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005946:	4613      	mov	r3, r2
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	4413      	add	r3, r2
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	3350      	adds	r3, #80	@ 0x50
 8005950:	443b      	add	r3, r7
 8005952:	3b2c      	subs	r3, #44	@ 0x2c
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 80d9 	beq.w	8005b0e <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800595c:	4914      	ldr	r1, [pc, #80]	@ (80059b0 <HAL_OSPIM_Config+0x29c>)
 800595e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005962:	4613      	mov	r3, r2
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	4413      	add	r3, r2
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	3350      	adds	r3, #80	@ 0x50
 800596c:	443b      	add	r3, r7
 800596e:	3b2c      	subs	r3, #44	@ 0x2c
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3b01      	subs	r3, #1
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	440b      	add	r3, r1
 800597c:	6859      	ldr	r1, [r3, #4]
 800597e:	480c      	ldr	r0, [pc, #48]	@ (80059b0 <HAL_OSPIM_Config+0x29c>)
 8005980:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005984:	4613      	mov	r3, r2
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	4413      	add	r3, r2
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	3350      	adds	r3, #80	@ 0x50
 800598e:	443b      	add	r3, r7
 8005990:	3b2c      	subs	r3, #44	@ 0x2c
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3b01      	subs	r3, #1
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4403      	add	r3, r0
 80059a2:	605a      	str	r2, [r3, #4]
 80059a4:	e0b3      	b.n	8005b0e <HAL_OSPIM_Config+0x3fa>
 80059a6:	bf00      	nop
 80059a8:	420d1400 	.word	0x420d1400
 80059ac:	420d2400 	.word	0x420d2400
 80059b0:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80059b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059b6:	4613      	mov	r3, r2
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	4413      	add	r3, r2
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	3350      	adds	r3, #80	@ 0x50
 80059c0:	443b      	add	r3, r7
 80059c2:	3b3c      	subs	r3, #60	@ 0x3c
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 80a1 	beq.w	8005b0e <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80059cc:	4995      	ldr	r1, [pc, #596]	@ (8005c24 <HAL_OSPIM_Config+0x510>)
 80059ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059d0:	4613      	mov	r3, r2
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	4413      	add	r3, r2
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	3350      	adds	r3, #80	@ 0x50
 80059da:	443b      	add	r3, r7
 80059dc:	3b3c      	subs	r3, #60	@ 0x3c
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3b01      	subs	r3, #1
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	6859      	ldr	r1, [r3, #4]
 80059e8:	488e      	ldr	r0, [pc, #568]	@ (8005c24 <HAL_OSPIM_Config+0x510>)
 80059ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059ec:	4613      	mov	r3, r2
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	4413      	add	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	3350      	adds	r3, #80	@ 0x50
 80059f6:	443b      	add	r3, r7
 80059f8:	3b3c      	subs	r3, #60	@ 0x3c
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	f021 0201 	bic.w	r2, r1, #1
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4403      	add	r3, r0
 8005a06:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8005a08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	4413      	add	r3, r2
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	3350      	adds	r3, #80	@ 0x50
 8005a14:	443b      	add	r3, r7
 8005a16:	3b38      	subs	r3, #56	@ 0x38
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d01d      	beq.n	8005a5a <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005a1e:	4981      	ldr	r1, [pc, #516]	@ (8005c24 <HAL_OSPIM_Config+0x510>)
 8005a20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a22:	4613      	mov	r3, r2
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	4413      	add	r3, r2
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	3350      	adds	r3, #80	@ 0x50
 8005a2c:	443b      	add	r3, r7
 8005a2e:	3b38      	subs	r3, #56	@ 0x38
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	440b      	add	r3, r1
 8005a38:	6859      	ldr	r1, [r3, #4]
 8005a3a:	487a      	ldr	r0, [pc, #488]	@ (8005c24 <HAL_OSPIM_Config+0x510>)
 8005a3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a3e:	4613      	mov	r3, r2
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	4413      	add	r3, r2
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	3350      	adds	r3, #80	@ 0x50
 8005a48:	443b      	add	r3, r7
 8005a4a:	3b38      	subs	r3, #56	@ 0x38
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	f021 0210 	bic.w	r2, r1, #16
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4403      	add	r3, r0
 8005a58:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005a5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	4413      	add	r3, r2
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	3350      	adds	r3, #80	@ 0x50
 8005a66:	443b      	add	r3, r7
 8005a68:	3b30      	subs	r3, #48	@ 0x30
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d021      	beq.n	8005ab4 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8005a70:	496c      	ldr	r1, [pc, #432]	@ (8005c24 <HAL_OSPIM_Config+0x510>)
 8005a72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a74:	4613      	mov	r3, r2
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	4413      	add	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	3350      	adds	r3, #80	@ 0x50
 8005a7e:	443b      	add	r3, r7
 8005a80:	3b30      	subs	r3, #48	@ 0x30
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	6859      	ldr	r1, [r3, #4]
 8005a90:	4864      	ldr	r0, [pc, #400]	@ (8005c24 <HAL_OSPIM_Config+0x510>)
 8005a92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a94:	4613      	mov	r3, r2
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	4413      	add	r3, r2
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	3350      	adds	r3, #80	@ 0x50
 8005a9e:	443b      	add	r3, r7
 8005aa0:	3b30      	subs	r3, #48	@ 0x30
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4403      	add	r3, r0
 8005ab2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005ab4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	4413      	add	r3, r2
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	3350      	adds	r3, #80	@ 0x50
 8005ac0:	443b      	add	r3, r7
 8005ac2:	3b2c      	subs	r3, #44	@ 0x2c
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d021      	beq.n	8005b0e <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8005aca:	4956      	ldr	r1, [pc, #344]	@ (8005c24 <HAL_OSPIM_Config+0x510>)
 8005acc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ace:	4613      	mov	r3, r2
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	4413      	add	r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	3350      	adds	r3, #80	@ 0x50
 8005ad8:	443b      	add	r3, r7
 8005ada:	3b2c      	subs	r3, #44	@ 0x2c
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	440b      	add	r3, r1
 8005ae8:	6859      	ldr	r1, [r3, #4]
 8005aea:	484e      	ldr	r0, [pc, #312]	@ (8005c24 <HAL_OSPIM_Config+0x510>)
 8005aec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005aee:	4613      	mov	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	4413      	add	r3, r2
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	3350      	adds	r3, #80	@ 0x50
 8005af8:	443b      	add	r3, r7
 8005afa:	3b2c      	subs	r3, #44	@ 0x2c
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4403      	add	r3, r0
 8005b0c:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	6819      	ldr	r1, [r3, #0]
 8005b12:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b16:	4613      	mov	r3, r2
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	4413      	add	r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	3350      	adds	r3, #80	@ 0x50
 8005b20:	443b      	add	r3, r7
 8005b22:	3b3c      	subs	r3, #60	@ 0x3c
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4299      	cmp	r1, r3
 8005b28:	d03c      	beq.n	8005ba4 <HAL_OSPIM_Config+0x490>
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	6899      	ldr	r1, [r3, #8]
 8005b2e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b32:	4613      	mov	r3, r2
 8005b34:	005b      	lsls	r3, r3, #1
 8005b36:	4413      	add	r3, r2
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	3350      	adds	r3, #80	@ 0x50
 8005b3c:	443b      	add	r3, r7
 8005b3e:	3b34      	subs	r3, #52	@ 0x34
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4299      	cmp	r1, r3
 8005b44:	d02e      	beq.n	8005ba4 <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	6859      	ldr	r1, [r3, #4]
 8005b4a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b4e:	4613      	mov	r3, r2
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	4413      	add	r3, r2
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	3350      	adds	r3, #80	@ 0x50
 8005b58:	443b      	add	r3, r7
 8005b5a:	3b38      	subs	r3, #56	@ 0x38
 8005b5c:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8005b5e:	4299      	cmp	r1, r3
 8005b60:	d103      	bne.n	8005b6a <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d11c      	bne.n	8005ba4 <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	68d9      	ldr	r1, [r3, #12]
 8005b6e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b72:	4613      	mov	r3, r2
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	4413      	add	r3, r2
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	3350      	adds	r3, #80	@ 0x50
 8005b7c:	443b      	add	r3, r7
 8005b7e:	3b30      	subs	r3, #48	@ 0x30
 8005b80:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8005b82:	4299      	cmp	r1, r3
 8005b84:	d00e      	beq.n	8005ba4 <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	6919      	ldr	r1, [r3, #16]
 8005b8a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b8e:	4613      	mov	r3, r2
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	4413      	add	r3, r2
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	3350      	adds	r3, #80	@ 0x50
 8005b98:	443b      	add	r3, r7
 8005b9a:	3b2c      	subs	r3, #44	@ 0x2c
 8005b9c:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005b9e:	4299      	cmp	r1, r3
 8005ba0:	f040 810e 	bne.w	8005dc0 <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	6819      	ldr	r1, [r3, #0]
 8005ba8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005bac:	4613      	mov	r3, r2
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	4413      	add	r3, r2
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	3350      	adds	r3, #80	@ 0x50
 8005bb6:	443b      	add	r3, r7
 8005bb8:	3b3c      	subs	r3, #60	@ 0x3c
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4299      	cmp	r1, r3
 8005bbe:	d133      	bne.n	8005c28 <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	6859      	ldr	r1, [r3, #4]
 8005bc4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005bc8:	4613      	mov	r3, r2
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	4413      	add	r3, r2
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	3350      	adds	r3, #80	@ 0x50
 8005bd2:	443b      	add	r3, r7
 8005bd4:	3b38      	subs	r3, #56	@ 0x38
 8005bd6:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8005bd8:	4299      	cmp	r1, r3
 8005bda:	d125      	bne.n	8005c28 <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	68d9      	ldr	r1, [r3, #12]
 8005be0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005be4:	4613      	mov	r3, r2
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	4413      	add	r3, r2
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	3350      	adds	r3, #80	@ 0x50
 8005bee:	443b      	add	r3, r7
 8005bf0:	3b30      	subs	r3, #48	@ 0x30
 8005bf2:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8005bf4:	4299      	cmp	r1, r3
 8005bf6:	d117      	bne.n	8005c28 <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	6919      	ldr	r1, [r3, #16]
 8005bfc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005c00:	4613      	mov	r3, r2
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	4413      	add	r3, r2
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	3350      	adds	r3, #80	@ 0x50
 8005c0a:	443b      	add	r3, r7
 8005c0c:	3b2c      	subs	r3, #44	@ 0x2c
 8005c0e:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8005c10:	4299      	cmp	r1, r3
 8005c12:	d109      	bne.n	8005c28 <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8005c14:	4b03      	ldr	r3, [pc, #12]	@ (8005c24 <HAL_OSPIM_Config+0x510>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a02      	ldr	r2, [pc, #8]	@ (8005c24 <HAL_OSPIM_Config+0x510>)
 8005c1a:	f043 0301 	orr.w	r3, r3, #1
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	e0ce      	b.n	8005dc0 <HAL_OSPIM_Config+0x6ac>
 8005c22:	bf00      	nop
 8005c24:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005c28:	49a4      	ldr	r1, [pc, #656]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005c2a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005c2e:	4613      	mov	r3, r2
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	4413      	add	r3, r2
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	3350      	adds	r3, #80	@ 0x50
 8005c38:	443b      	add	r3, r7
 8005c3a:	3b3c      	subs	r3, #60	@ 0x3c
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	440b      	add	r3, r1
 8005c44:	6859      	ldr	r1, [r3, #4]
 8005c46:	489d      	ldr	r0, [pc, #628]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005c48:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	4413      	add	r3, r2
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	3350      	adds	r3, #80	@ 0x50
 8005c56:	443b      	add	r3, r7
 8005c58:	3b3c      	subs	r3, #60	@ 0x3c
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	f021 0201 	bic.w	r2, r1, #1
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4403      	add	r3, r0
 8005c66:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005c68:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	4413      	add	r3, r2
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	3350      	adds	r3, #80	@ 0x50
 8005c76:	443b      	add	r3, r7
 8005c78:	3b38      	subs	r3, #56	@ 0x38
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01f      	beq.n	8005cc0 <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005c80:	498e      	ldr	r1, [pc, #568]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005c82:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005c86:	4613      	mov	r3, r2
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	4413      	add	r3, r2
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	3350      	adds	r3, #80	@ 0x50
 8005c90:	443b      	add	r3, r7
 8005c92:	3b38      	subs	r3, #56	@ 0x38
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3b01      	subs	r3, #1
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	440b      	add	r3, r1
 8005c9c:	6859      	ldr	r1, [r3, #4]
 8005c9e:	4887      	ldr	r0, [pc, #540]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005ca0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	4413      	add	r3, r2
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	3350      	adds	r3, #80	@ 0x50
 8005cae:	443b      	add	r3, r7
 8005cb0:	3b38      	subs	r3, #56	@ 0x38
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	f021 0210 	bic.w	r2, r1, #16
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4403      	add	r3, r0
 8005cbe:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005cc0:	497e      	ldr	r1, [pc, #504]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005cc2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	4413      	add	r3, r2
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	3350      	adds	r3, #80	@ 0x50
 8005cd0:	443b      	add	r3, r7
 8005cd2:	3b34      	subs	r3, #52	@ 0x34
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	440b      	add	r3, r1
 8005cdc:	6859      	ldr	r1, [r3, #4]
 8005cde:	4877      	ldr	r0, [pc, #476]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005ce0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	4413      	add	r3, r2
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	3350      	adds	r3, #80	@ 0x50
 8005cee:	443b      	add	r3, r7
 8005cf0:	3b34      	subs	r3, #52	@ 0x34
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4403      	add	r3, r0
 8005cfe:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005d00:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005d04:	4613      	mov	r3, r2
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	4413      	add	r3, r2
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	3350      	adds	r3, #80	@ 0x50
 8005d0e:	443b      	add	r3, r7
 8005d10:	3b30      	subs	r3, #48	@ 0x30
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d023      	beq.n	8005d60 <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005d18:	4968      	ldr	r1, [pc, #416]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005d1a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005d1e:	4613      	mov	r3, r2
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	4413      	add	r3, r2
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	3350      	adds	r3, #80	@ 0x50
 8005d28:	443b      	add	r3, r7
 8005d2a:	3b30      	subs	r3, #48	@ 0x30
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	440b      	add	r3, r1
 8005d38:	6859      	ldr	r1, [r3, #4]
 8005d3a:	4860      	ldr	r0, [pc, #384]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005d3c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005d40:	4613      	mov	r3, r2
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	4413      	add	r3, r2
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	3350      	adds	r3, #80	@ 0x50
 8005d4a:	443b      	add	r3, r7
 8005d4c:	3b30      	subs	r3, #48	@ 0x30
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4403      	add	r3, r0
 8005d5e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005d60:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005d64:	4613      	mov	r3, r2
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	4413      	add	r3, r2
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	3350      	adds	r3, #80	@ 0x50
 8005d6e:	443b      	add	r3, r7
 8005d70:	3b2c      	subs	r3, #44	@ 0x2c
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d023      	beq.n	8005dc0 <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005d78:	4950      	ldr	r1, [pc, #320]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005d7a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005d7e:	4613      	mov	r3, r2
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	4413      	add	r3, r2
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	3350      	adds	r3, #80	@ 0x50
 8005d88:	443b      	add	r3, r7
 8005d8a:	3b2c      	subs	r3, #44	@ 0x2c
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	440b      	add	r3, r1
 8005d98:	6859      	ldr	r1, [r3, #4]
 8005d9a:	4848      	ldr	r0, [pc, #288]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005d9c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005da0:	4613      	mov	r3, r2
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	4413      	add	r3, r2
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	3350      	adds	r3, #80	@ 0x50
 8005daa:	443b      	add	r3, r7
 8005dac:	3b2c      	subs	r3, #44	@ 0x2c
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4403      	add	r3, r0
 8005dbe:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8005dc0:	4a3e      	ldr	r2, [pc, #248]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dd4:	025b      	lsls	r3, r3, #9
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	4938      	ldr	r1, [pc, #224]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	440b      	add	r3, r1
 8005de8:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d018      	beq.n	8005e24 <HAL_OSPIM_Config+0x710>
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dfa:	d813      	bhi.n	8005e24 <HAL_OSPIM_Config+0x710>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	1e5a      	subs	r2, r3, #1
 8005e02:	4b2e      	ldr	r3, [pc, #184]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	0c1b      	lsrs	r3, r3, #16
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d90a      	bls.n	8005e24 <HAL_OSPIM_Config+0x710>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8005e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	041b      	lsls	r3, r3, #16
 8005e1e:	4927      	ldr	r1, [pc, #156]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8005e24:	4b25      	ldr	r3, [pc, #148]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 809a 	beq.w	8005f66 <HAL_OSPIM_Config+0x852>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8005e32:	4a22      	ldr	r2, [pc, #136]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f023 0203 	bic.w	r2, r3, #3
 8005e44:	491d      	ldr	r1, [pc, #116]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	f042 0201 	orr.w	r2, r2, #1
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	440b      	add	r3, r1
 8005e54:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d011      	beq.n	8005e82 <HAL_OSPIM_Config+0x76e>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8005e5e:	4a17      	ldr	r2, [pc, #92]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	3b01      	subs	r3, #1
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005e70:	4912      	ldr	r1, [pc, #72]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	f042 0210 	orr.w	r2, r2, #16
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	440b      	add	r3, r1
 8005e80:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d018      	beq.n	8005ec0 <HAL_OSPIM_Config+0x7ac>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005ea4:	4905      	ldr	r1, [pc, #20]	@ (8005ebc <HAL_OSPIM_Config+0x7a8>)
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	440b      	add	r3, r1
 8005eb8:	605a      	str	r2, [r3, #4]
 8005eba:	e01b      	b.n	8005ef4 <HAL_OSPIM_Config+0x7e0>
 8005ebc:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d015      	beq.n	8005ef4 <HAL_OSPIM_Config+0x7e0>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005ec8:	4a8a      	ldr	r2, [pc, #552]	@ (80060f4 <HAL_OSPIM_Config+0x9e0>)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005ede:	4985      	ldr	r1, [pc, #532]	@ (80060f4 <HAL_OSPIM_Config+0x9e0>)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d016      	beq.n	8005f2e <HAL_OSPIM_Config+0x81a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005f00:	4a7c      	ldr	r2, [pc, #496]	@ (80060f4 <HAL_OSPIM_Config+0x9e0>)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005f16:	4977      	ldr	r1, [pc, #476]	@ (80060f4 <HAL_OSPIM_Config+0x9e0>)
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	440b      	add	r3, r1
 8005f2a:	605a      	str	r2, [r3, #4]
 8005f2c:	e0c3      	b.n	80060b6 <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 80bf 	beq.w	80060b6 <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005f38:	4a6e      	ldr	r2, [pc, #440]	@ (80060f4 <HAL_OSPIM_Config+0x9e0>)
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005f4e:	4969      	ldr	r1, [pc, #420]	@ (80060f4 <HAL_OSPIM_Config+0x9e0>)
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	3b01      	subs	r3, #1
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	440b      	add	r3, r1
 8005f62:	605a      	str	r2, [r3, #4]
 8005f64:	e0a7      	b.n	80060b6 <HAL_OSPIM_Config+0x9a2>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8005f66:	4a63      	ldr	r2, [pc, #396]	@ (80060f4 <HAL_OSPIM_Config+0x9e0>)
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f023 0203 	bic.w	r2, r3, #3
 8005f78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	495d      	ldr	r1, [pc, #372]	@ (80060f4 <HAL_OSPIM_Config+0x9e0>)
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	3b01      	subs	r3, #1
 8005f86:	f042 0201 	orr.w	r2, r2, #1
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d014      	beq.n	8005fc2 <HAL_OSPIM_Config+0x8ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8005f98:	4a56      	ldr	r2, [pc, #344]	@ (80060f4 <HAL_OSPIM_Config+0x9e0>)
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005faa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fac:	015b      	lsls	r3, r3, #5
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	4950      	ldr	r1, [pc, #320]	@ (80060f4 <HAL_OSPIM_Config+0x9e0>)
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	f042 0210 	orr.w	r2, r2, #16
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	440b      	add	r3, r1
 8005fc0:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d019      	beq.n	8006002 <HAL_OSPIM_Config+0x8ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005fce:	4a49      	ldr	r2, [pc, #292]	@ (80060f4 <HAL_OSPIM_Config+0x9e0>)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005fe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fe6:	049b      	lsls	r3, r3, #18
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	4942      	ldr	r1, [pc, #264]	@ (80060f4 <HAL_OSPIM_Config+0x9e0>)
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	440b      	add	r3, r1
 8005ffe:	605a      	str	r2, [r3, #4]
 8006000:	e01c      	b.n	800603c <HAL_OSPIM_Config+0x928>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d018      	beq.n	800603c <HAL_OSPIM_Config+0x928>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800600a:	4a3a      	ldr	r2, [pc, #232]	@ (80060f4 <HAL_OSPIM_Config+0x9e0>)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	3b01      	subs	r3, #1
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8006020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006022:	069b      	lsls	r3, r3, #26
 8006024:	431a      	orrs	r2, r3
 8006026:	4933      	ldr	r1, [pc, #204]	@ (80060f4 <HAL_OSPIM_Config+0x9e0>)
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	3b01      	subs	r3, #1
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	440b      	add	r3, r1
 800603a:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d019      	beq.n	800607c <HAL_OSPIM_Config+0x968>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006048:	4a2a      	ldr	r2, [pc, #168]	@ (80060f4 <HAL_OSPIM_Config+0x9e0>)
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	3b01      	subs	r3, #1
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800605e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006060:	049b      	lsls	r3, r3, #18
 8006062:	431a      	orrs	r2, r3
 8006064:	4923      	ldr	r1, [pc, #140]	@ (80060f4 <HAL_OSPIM_Config+0x9e0>)
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	3b01      	subs	r3, #1
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	440b      	add	r3, r1
 8006078:	605a      	str	r2, [r3, #4]
 800607a:	e01c      	b.n	80060b6 <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d018      	beq.n	80060b6 <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006084:	4a1b      	ldr	r2, [pc, #108]	@ (80060f4 <HAL_OSPIM_Config+0x9e0>)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	3b01      	subs	r3, #1
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800609a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800609c:	069b      	lsls	r3, r3, #26
 800609e:	431a      	orrs	r2, r3
 80060a0:	4914      	ldr	r1, [pc, #80]	@ (80060f4 <HAL_OSPIM_Config+0x9e0>)
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	440b      	add	r3, r1
 80060b4:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80060b6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d005      	beq.n	80060ce <HAL_OSPIM_Config+0x9ba>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80060c2:	4b0d      	ldr	r3, [pc, #52]	@ (80060f8 <HAL_OSPIM_Config+0x9e4>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a0c      	ldr	r2, [pc, #48]	@ (80060f8 <HAL_OSPIM_Config+0x9e4>)
 80060c8:	f043 0301 	orr.w	r3, r3, #1
 80060cc:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80060ce:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d005      	beq.n	80060e6 <HAL_OSPIM_Config+0x9d2>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80060da:	4b08      	ldr	r3, [pc, #32]	@ (80060fc <HAL_OSPIM_Config+0x9e8>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a07      	ldr	r2, [pc, #28]	@ (80060fc <HAL_OSPIM_Config+0x9e8>)
 80060e0:	f043 0301 	orr.w	r3, r3, #1
 80060e4:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80060e6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3750      	adds	r7, #80	@ 0x50
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	420c4000 	.word	0x420c4000
 80060f8:	420d1400 	.word	0x420d1400
 80060fc:	420d2400 	.word	0x420d2400

08006100 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hdma->Parent);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800610c:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800611c:	d122      	bne.n	8006164 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	f003 0320 	and.w	r3, r3, #32
 8006128:	2b00      	cmp	r3, #0
 800612a:	d014      	beq.n	8006156 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2202      	movs	r2, #2
 8006132:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006142:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0202 	orr.w	r2, r2, #2
 8006152:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 8006154:	e00c      	b.n	8006170 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2202      	movs	r2, #2
 800615a:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f7ff fa0f 	bl	8005580 <HAL_OSPI_AbortCpltCallback>
}
 8006162:	e005      	b.n	8006170 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2202      	movs	r2, #2
 8006168:	651a      	str	r2, [r3, #80]	@ 0x50
    HAL_OSPI_ErrorCallback(hospi);
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f7ff f9fe 	bl	800556c <HAL_OSPI_ErrorCallback>
}
 8006170:	bf00      	nop
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	4613      	mov	r3, r2
 8006186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006188:	e022      	b.n	80061d0 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006190:	d01e      	beq.n	80061d0 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006192:	f7fb fe7b 	bl	8001e8c <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d302      	bcc.n	80061a8 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d113      	bne.n	80061d0 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6a1a      	ldr	r2, [r3, #32]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	401a      	ands	r2, r3
 80061b2:	79fb      	ldrb	r3, [r7, #7]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d00b      	beq.n	80061d0 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061be:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061c4:	f043 0201 	orr.w	r2, r3, #1
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e00e      	b.n	80061ee <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6a1a      	ldr	r2, [r3, #32]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	4013      	ands	r3, r2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	bf14      	ite	ne
 80061de:	2301      	movne	r3, #1
 80061e0:	2300      	moveq	r3, #0
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	79fb      	ldrb	r3, [r7, #7]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d1ce      	bne.n	800618a <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
	...

080061f8 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b089      	sub	sp, #36	@ 0x24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006214:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_MSEL, cmd->FlashId);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b02      	cmp	r3, #2
 800623a:	d114      	bne.n	8006266 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8006244:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800624e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006258:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	e02c      	b.n	80062c0 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b03      	cmp	r3, #3
 800626c:	d114      	bne.n	8006298 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8006276:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006280:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800628a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	e013      	b.n	80062c0 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80062a0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80062aa:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80062b4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80062be:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062c8:	431a      	orrs	r2, r3
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d012      	beq.n	80062fc <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ee:	4319      	orrs	r1, r3
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f4:	430b      	orrs	r3, r1
 80062f6:	431a      	orrs	r2, r3
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f023 021f 	bic.w	r2, r3, #31
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006308:	431a      	orrs	r2, r3
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006312:	2b00      	cmp	r3, #0
 8006314:	d009      	beq.n	800632a <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d105      	bne.n	800632a <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3a01      	subs	r2, #1
 8006328:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 8099 	beq.w	8006466 <OSPI_ConfigCmd+0x26e>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d055      	beq.n	80063e8 <OSPI_ConfigCmd+0x1f0>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006340:	2b00      	cmp	r3, #0
 8006342:	d01e      	beq.n	8006382 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	4b67      	ldr	r3, [pc, #412]	@ (80064e8 <OSPI_ConfigCmd+0x2f0>)
 800634a:	4013      	ands	r3, r2
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	68d1      	ldr	r1, [r2, #12]
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	6952      	ldr	r2, [r2, #20]
 8006354:	4311      	orrs	r1, r2
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	6912      	ldr	r2, [r2, #16]
 800635a:	4311      	orrs	r1, r2
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	69d2      	ldr	r2, [r2, #28]
 8006360:	4311      	orrs	r1, r2
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006366:	4311      	orrs	r1, r2
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	6a12      	ldr	r2, [r2, #32]
 800636c:	4311      	orrs	r1, r2
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006372:	4311      	orrs	r1, r2
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006378:	430a      	orrs	r2, r1
 800637a:	431a      	orrs	r2, r3
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	e028      	b.n	80063d4 <OSPI_ConfigCmd+0x1dc>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800638a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	68d1      	ldr	r1, [r2, #12]
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	6952      	ldr	r2, [r2, #20]
 8006396:	4311      	orrs	r1, r2
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	6912      	ldr	r2, [r2, #16]
 800639c:	4311      	orrs	r1, r2
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	69d2      	ldr	r2, [r2, #28]
 80063a2:	4311      	orrs	r1, r2
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80063a8:	4311      	orrs	r1, r2
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	6a12      	ldr	r2, [r2, #32]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	431a      	orrs	r2, r3
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063be:	d109      	bne.n	80063d4 <OSPI_ConfigCmd+0x1dc>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d105      	bne.n	80063d4 <OSPI_ConfigCmd+0x1dc>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	6992      	ldr	r2, [r2, #24]
 80063e4:	649a      	str	r2, [r3, #72]	@ 0x48
 80063e6:	e078      	b.n	80064da <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d017      	beq.n	8006420 <OSPI_ConfigCmd+0x228>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80063f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	68d1      	ldr	r1, [r2, #12]
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	6952      	ldr	r2, [r2, #20]
 8006404:	4311      	orrs	r1, r2
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	6912      	ldr	r2, [r2, #16]
 800640a:	4311      	orrs	r1, r2
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006410:	4311      	orrs	r1, r2
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006416:	430a      	orrs	r2, r1
 8006418:	431a      	orrs	r2, r3
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	e01d      	b.n	800645c <OSPI_ConfigCmd+0x264>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	68d9      	ldr	r1, [r3, #12]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	4319      	orrs	r1, r3
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	430b      	orrs	r3, r1
 8006438:	431a      	orrs	r2, r3
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006442:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006446:	d109      	bne.n	800645c <OSPI_ConfigCmd+0x264>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800644c:	2b08      	cmp	r3, #8
 800644e:	d105      	bne.n	800645c <OSPI_ConfigCmd+0x264>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	e039      	b.n	80064da <OSPI_ConfigCmd+0x2e2>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d030      	beq.n	80064d0 <OSPI_ConfigCmd+0x2d8>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006472:	2b00      	cmp	r3, #0
 8006474:	d017      	beq.n	80064a6 <OSPI_ConfigCmd+0x2ae>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800647e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	69d1      	ldr	r1, [r2, #28]
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800648a:	4311      	orrs	r1, r2
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	6a12      	ldr	r2, [r2, #32]
 8006490:	4311      	orrs	r1, r2
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006496:	4311      	orrs	r1, r2
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800649c:	430a      	orrs	r2, r1
 800649e:	431a      	orrs	r2, r3
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	e00e      	b.n	80064c4 <OSPI_ConfigCmd+0x2cc>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	69d9      	ldr	r1, [r3, #28]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b6:	4319      	orrs	r1, r3
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	430b      	orrs	r3, r1
 80064be:	431a      	orrs	r2, r3
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	6992      	ldr	r2, [r2, #24]
 80064cc:	649a      	str	r2, [r3, #72]	@ 0x48
 80064ce:	e004      	b.n	80064da <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2208      	movs	r2, #8
 80064d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 80064da:	7ffb      	ldrb	r3, [r7, #31]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3724      	adds	r7, #36	@ 0x24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	f0ffc0c0 	.word	0xf0ffc0c0

080064ec <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	4603      	mov	r3, r0
 80064f4:	6039      	str	r1, [r7, #0]
 80064f6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80064f8:	2300      	movs	r3, #0
 80064fa:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8006500:	79fb      	ldrb	r3, [r7, #7]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d005      	beq.n	8006512 <OSPIM_GetConfig+0x26>
 8006506:	79fb      	ldrb	r3, [r7, #7]
 8006508:	2b02      	cmp	r3, #2
 800650a:	d802      	bhi.n	8006512 <OSPIM_GetConfig+0x26>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d102      	bne.n	8006518 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	75fb      	strb	r3, [r7, #23]
 8006516:	e098      	b.n	800664a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2200      	movs	r2, #0
 8006522:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2200      	movs	r2, #0
 8006528:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2200      	movs	r2, #0
 800652e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2200      	movs	r2, #0
 8006534:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8006536:	79fb      	ldrb	r3, [r7, #7]
 8006538:	2b02      	cmp	r3, #2
 800653a:	d10b      	bne.n	8006554 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800653c:	4b46      	ldr	r3, [pc, #280]	@ (8006658 <OSPIM_GetConfig+0x16c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d102      	bne.n	800654e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8006548:	4b44      	ldr	r3, [pc, #272]	@ (800665c <OSPIM_GetConfig+0x170>)
 800654a:	613b      	str	r3, [r7, #16]
 800654c:	e002      	b.n	8006554 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800654e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006552:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006554:	2300      	movs	r3, #0
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	e074      	b.n	8006644 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800655a:	4a3f      	ldr	r2, [pc, #252]	@ (8006658 <OSPIM_GetConfig+0x16c>)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	4053      	eors	r3, r2
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d103      	bne.n	8006586 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f003 0310 	and.w	r3, r3, #16
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00a      	beq.n	80065a6 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	4053      	eors	r3, r2
 8006596:	f003 0320 	and.w	r3, r3, #32
 800659a:	2b00      	cmp	r3, #0
 800659c:	d103      	bne.n	80065a6 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00a      	beq.n	80065c6 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	4053      	eors	r3, r2
 80065b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d103      	bne.n	80065c6 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d018      	beq.n	8006602 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	4053      	eors	r3, r2
 80065d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d111      	bne.n	8006602 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d106      	bne.n	80065f6 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3301      	adds	r3, #1
 80065ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	60da      	str	r2, [r3, #12]
 80065f4:	e005      	b.n	8006602 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3301      	adds	r3, #1
 80065fa:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d018      	beq.n	800663e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	4053      	eors	r3, r2
 8006612:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d111      	bne.n	800663e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d106      	bne.n	8006632 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3301      	adds	r3, #1
 8006628:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	611a      	str	r2, [r3, #16]
 8006630:	e005      	b.n	800663e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3301      	adds	r3, #1
 8006636:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3301      	adds	r3, #1
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d987      	bls.n	800655a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800664a:	7dfb      	ldrb	r3, [r7, #23]
}
 800664c:	4618      	mov	r0, r3
 800664e:	371c      	adds	r7, #28
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	420c4000 	.word	0x420c4000
 800665c:	04040222 	.word	0x04040222

08006660 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f042 0202 	orr.w	r2, r2, #2
 800667c:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2208      	movs	r2, #8
 8006682:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a15      	ldr	r2, [pc, #84]	@ (80066e0 <HAL_OSPI_DLYB_SetConfig+0x80>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d109      	bne.n	80066a2 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 800668e:	4815      	ldr	r0, [pc, #84]	@ (80066e4 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8006690:	f7fe fc5d 	bl	8004f4e <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	4813      	ldr	r0, [pc, #76]	@ (80066e4 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8006698:	f005 fa5c 	bl	800bb54 <LL_DLYB_SetDelay>
    status = HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	73fb      	strb	r3, [r7, #15]
 80066a0:	e00d      	b.n	80066be <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a10      	ldr	r2, [pc, #64]	@ (80066e8 <HAL_OSPI_DLYB_SetConfig+0x88>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d108      	bne.n	80066be <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 80066ac:	480f      	ldr	r0, [pc, #60]	@ (80066ec <HAL_OSPI_DLYB_SetConfig+0x8c>)
 80066ae:	f7fe fc4e 	bl	8004f4e <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 80066b2:	6839      	ldr	r1, [r7, #0]
 80066b4:	480d      	ldr	r0, [pc, #52]	@ (80066ec <HAL_OSPI_DLYB_SetConfig+0x8c>)
 80066b6:	f005 fa4d 	bl	800bb54 <LL_DLYB_SetDelay>
    status = HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7fe ffa4 	bl	800560c <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0202 	bic.w	r2, r2, #2
 80066d2:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	420d1400 	.word	0x420d1400
 80066e4:	420cf000 	.word	0x420cf000
 80066e8:	420d2400 	.word	0x420d2400
 80066ec:	420cf400 	.word	0x420cf400

080066f0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80066f8:	4b39      	ldr	r3, [pc, #228]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80066fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006700:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	429a      	cmp	r2, r3
 8006708:	d10b      	bne.n	8006722 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006710:	d905      	bls.n	800671e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006712:	4b33      	ldr	r3, [pc, #204]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	4a32      	ldr	r2, [pc, #200]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006718:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800671c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	e057      	b.n	80067d2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006728:	d90a      	bls.n	8006740 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800672a:	4b2d      	ldr	r3, [pc, #180]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4313      	orrs	r3, r2
 8006736:	4a2a      	ldr	r2, [pc, #168]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800673c:	60d3      	str	r3, [r2, #12]
 800673e:	e007      	b.n	8006750 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8006740:	4b27      	ldr	r3, [pc, #156]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006748:	4925      	ldr	r1, [pc, #148]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4313      	orrs	r3, r2
 800674e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006750:	4b24      	ldr	r3, [pc, #144]	@ (80067e4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a24      	ldr	r2, [pc, #144]	@ (80067e8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006756:	fba2 2303 	umull	r2, r3, r2, r3
 800675a:	099b      	lsrs	r3, r3, #6
 800675c:	2232      	movs	r2, #50	@ 0x32
 800675e:	fb02 f303 	mul.w	r3, r2, r3
 8006762:	4a21      	ldr	r2, [pc, #132]	@ (80067e8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006764:	fba2 2303 	umull	r2, r3, r2, r3
 8006768:	099b      	lsrs	r3, r3, #6
 800676a:	3301      	adds	r3, #1
 800676c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800676e:	e002      	b.n	8006776 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3b01      	subs	r3, #1
 8006774:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006776:	4b1a      	ldr	r3, [pc, #104]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d102      	bne.n	8006788 <HAL_PWREx_ControlVoltageScaling+0x98>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1f3      	bne.n	8006770 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d01b      	beq.n	80067c6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800678e:	4b15      	ldr	r3, [pc, #84]	@ (80067e4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a15      	ldr	r2, [pc, #84]	@ (80067e8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006794:	fba2 2303 	umull	r2, r3, r2, r3
 8006798:	099b      	lsrs	r3, r3, #6
 800679a:	2232      	movs	r2, #50	@ 0x32
 800679c:	fb02 f303 	mul.w	r3, r2, r3
 80067a0:	4a11      	ldr	r2, [pc, #68]	@ (80067e8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80067a2:	fba2 2303 	umull	r2, r3, r2, r3
 80067a6:	099b      	lsrs	r3, r3, #6
 80067a8:	3301      	adds	r3, #1
 80067aa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80067ac:	e002      	b.n	80067b4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3b01      	subs	r3, #1
 80067b2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80067b4:	4b0a      	ldr	r3, [pc, #40]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80067b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d102      	bne.n	80067c6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1f3      	bne.n	80067ae <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e000      	b.n	80067d2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	46020800 	.word	0x46020800
 80067e4:	20000004 	.word	0x20000004
 80067e8:	10624dd3 	.word	0x10624dd3

080067ec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80067f0:	4b04      	ldr	r3, [pc, #16]	@ (8006804 <HAL_PWREx_GetVoltageRange+0x18>)
 80067f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	46020800 	.word	0x46020800

08006808 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b08e      	sub	sp, #56	@ 0x38
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006810:	2300      	movs	r3, #0
 8006812:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d102      	bne.n	8006822 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	f000 bec8 	b.w	80075b2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006822:	4b99      	ldr	r3, [pc, #612]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	f003 030c 	and.w	r3, r3, #12
 800682a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800682c:	4b96      	ldr	r3, [pc, #600]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 800682e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006830:	f003 0303 	and.w	r3, r3, #3
 8006834:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0310 	and.w	r3, r3, #16
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 816c 	beq.w	8006b1c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006846:	2b00      	cmp	r3, #0
 8006848:	d007      	beq.n	800685a <HAL_RCC_OscConfig+0x52>
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	2b0c      	cmp	r3, #12
 800684e:	f040 80de 	bne.w	8006a0e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006854:	2b01      	cmp	r3, #1
 8006856:	f040 80da 	bne.w	8006a0e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d102      	bne.n	8006868 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	f000 bea5 	b.w	80075b2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800686c:	4b86      	ldr	r3, [pc, #536]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d004      	beq.n	8006882 <HAL_RCC_OscConfig+0x7a>
 8006878:	4b83      	ldr	r3, [pc, #524]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006880:	e005      	b.n	800688e <HAL_RCC_OscConfig+0x86>
 8006882:	4b81      	ldr	r3, [pc, #516]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006884:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006888:	041b      	lsls	r3, r3, #16
 800688a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800688e:	4293      	cmp	r3, r2
 8006890:	d255      	bcs.n	800693e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10a      	bne.n	80068ae <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689c:	4618      	mov	r0, r3
 800689e:	f001 fa11 	bl	8007cc4 <RCC_SetFlashLatencyFromMSIRange>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d002      	beq.n	80068ae <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	f000 be82 	b.w	80075b2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80068ae:	4b76      	ldr	r3, [pc, #472]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	4a75      	ldr	r2, [pc, #468]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 80068b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80068b8:	6093      	str	r3, [r2, #8]
 80068ba:	4b73      	ldr	r3, [pc, #460]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c6:	4970      	ldr	r1, [pc, #448]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80068d4:	d309      	bcc.n	80068ea <HAL_RCC_OscConfig+0xe2>
 80068d6:	4b6c      	ldr	r3, [pc, #432]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f023 021f 	bic.w	r2, r3, #31
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	4969      	ldr	r1, [pc, #420]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	60cb      	str	r3, [r1, #12]
 80068e8:	e07e      	b.n	80069e8 <HAL_RCC_OscConfig+0x1e0>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	da0a      	bge.n	8006908 <HAL_RCC_OscConfig+0x100>
 80068f2:	4b65      	ldr	r3, [pc, #404]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	015b      	lsls	r3, r3, #5
 8006900:	4961      	ldr	r1, [pc, #388]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006902:	4313      	orrs	r3, r2
 8006904:	60cb      	str	r3, [r1, #12]
 8006906:	e06f      	b.n	80069e8 <HAL_RCC_OscConfig+0x1e0>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006910:	d30a      	bcc.n	8006928 <HAL_RCC_OscConfig+0x120>
 8006912:	4b5d      	ldr	r3, [pc, #372]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	029b      	lsls	r3, r3, #10
 8006920:	4959      	ldr	r1, [pc, #356]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006922:	4313      	orrs	r3, r2
 8006924:	60cb      	str	r3, [r1, #12]
 8006926:	e05f      	b.n	80069e8 <HAL_RCC_OscConfig+0x1e0>
 8006928:	4b57      	ldr	r3, [pc, #348]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	03db      	lsls	r3, r3, #15
 8006936:	4954      	ldr	r1, [pc, #336]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006938:	4313      	orrs	r3, r2
 800693a:	60cb      	str	r3, [r1, #12]
 800693c:	e054      	b.n	80069e8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800693e:	4b52      	ldr	r3, [pc, #328]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	4a51      	ldr	r2, [pc, #324]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006944:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006948:	6093      	str	r3, [r2, #8]
 800694a:	4b4f      	ldr	r3, [pc, #316]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006956:	494c      	ldr	r1, [pc, #304]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006958:	4313      	orrs	r3, r2
 800695a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006960:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006964:	d309      	bcc.n	800697a <HAL_RCC_OscConfig+0x172>
 8006966:	4b48      	ldr	r3, [pc, #288]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f023 021f 	bic.w	r2, r3, #31
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	4945      	ldr	r1, [pc, #276]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006974:	4313      	orrs	r3, r2
 8006976:	60cb      	str	r3, [r1, #12]
 8006978:	e028      	b.n	80069cc <HAL_RCC_OscConfig+0x1c4>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697e:	2b00      	cmp	r3, #0
 8006980:	da0a      	bge.n	8006998 <HAL_RCC_OscConfig+0x190>
 8006982:	4b41      	ldr	r3, [pc, #260]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	015b      	lsls	r3, r3, #5
 8006990:	493d      	ldr	r1, [pc, #244]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006992:	4313      	orrs	r3, r2
 8006994:	60cb      	str	r3, [r1, #12]
 8006996:	e019      	b.n	80069cc <HAL_RCC_OscConfig+0x1c4>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069a0:	d30a      	bcc.n	80069b8 <HAL_RCC_OscConfig+0x1b0>
 80069a2:	4b39      	ldr	r3, [pc, #228]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	029b      	lsls	r3, r3, #10
 80069b0:	4935      	ldr	r1, [pc, #212]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60cb      	str	r3, [r1, #12]
 80069b6:	e009      	b.n	80069cc <HAL_RCC_OscConfig+0x1c4>
 80069b8:	4b33      	ldr	r3, [pc, #204]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	03db      	lsls	r3, r3, #15
 80069c6:	4930      	ldr	r1, [pc, #192]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80069cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10a      	bne.n	80069e8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d6:	4618      	mov	r0, r3
 80069d8:	f001 f974 	bl	8007cc4 <RCC_SetFlashLatencyFromMSIRange>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	f000 bde5 	b.w	80075b2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80069e8:	f001 f8de 	bl	8007ba8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80069ec:	4b27      	ldr	r3, [pc, #156]	@ (8006a8c <HAL_RCC_OscConfig+0x284>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7fa ff0f 	bl	8001814 <HAL_InitTick>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80069fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 808a 	beq.w	8006b1a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8006a06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a0a:	f000 bdd2 	b.w	80075b2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d066      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8006a16:	4b1c      	ldr	r3, [pc, #112]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a1b      	ldr	r2, [pc, #108]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006a1c:	f043 0301 	orr.w	r3, r3, #1
 8006a20:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006a22:	f7fb fa33 	bl	8001e8c <HAL_GetTick>
 8006a26:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006a28:	e009      	b.n	8006a3e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006a2a:	f7fb fa2f 	bl	8001e8c <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d902      	bls.n	8006a3e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	f000 bdba 	b.w	80075b2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006a3e:	4b12      	ldr	r3, [pc, #72]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0304 	and.w	r3, r3, #4
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0ef      	beq.n	8006a2a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006a50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006a54:	6093      	str	r3, [r2, #8]
 8006a56:	4b0c      	ldr	r3, [pc, #48]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a62:	4909      	ldr	r1, [pc, #36]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006a70:	d30e      	bcc.n	8006a90 <HAL_RCC_OscConfig+0x288>
 8006a72:	4b05      	ldr	r3, [pc, #20]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f023 021f 	bic.w	r2, r3, #31
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	4902      	ldr	r1, [pc, #8]	@ (8006a88 <HAL_RCC_OscConfig+0x280>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	60cb      	str	r3, [r1, #12]
 8006a84:	e04a      	b.n	8006b1c <HAL_RCC_OscConfig+0x314>
 8006a86:	bf00      	nop
 8006a88:	46020c00 	.word	0x46020c00
 8006a8c:	20000008 	.word	0x20000008
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	da0a      	bge.n	8006aae <HAL_RCC_OscConfig+0x2a6>
 8006a98:	4b98      	ldr	r3, [pc, #608]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	015b      	lsls	r3, r3, #5
 8006aa6:	4995      	ldr	r1, [pc, #596]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	60cb      	str	r3, [r1, #12]
 8006aac:	e036      	b.n	8006b1c <HAL_RCC_OscConfig+0x314>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ab6:	d30a      	bcc.n	8006ace <HAL_RCC_OscConfig+0x2c6>
 8006ab8:	4b90      	ldr	r3, [pc, #576]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a1b      	ldr	r3, [r3, #32]
 8006ac4:	029b      	lsls	r3, r3, #10
 8006ac6:	498d      	ldr	r1, [pc, #564]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60cb      	str	r3, [r1, #12]
 8006acc:	e026      	b.n	8006b1c <HAL_RCC_OscConfig+0x314>
 8006ace:	4b8b      	ldr	r3, [pc, #556]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	03db      	lsls	r3, r3, #15
 8006adc:	4987      	ldr	r1, [pc, #540]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60cb      	str	r3, [r1, #12]
 8006ae2:	e01b      	b.n	8006b1c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8006ae4:	4b85      	ldr	r3, [pc, #532]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a84      	ldr	r2, [pc, #528]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006aea:	f023 0301 	bic.w	r3, r3, #1
 8006aee:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006af0:	f7fb f9cc 	bl	8001e8c <HAL_GetTick>
 8006af4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006af6:	e009      	b.n	8006b0c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006af8:	f7fb f9c8 	bl	8001e8c <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d902      	bls.n	8006b0c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	f000 bd53 	b.w	80075b2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006b0c:	4b7b      	ldr	r3, [pc, #492]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1ef      	bne.n	8006af8 <HAL_RCC_OscConfig+0x2f0>
 8006b18:	e000      	b.n	8006b1c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006b1a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 808b 	beq.w	8006c40 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d005      	beq.n	8006b3c <HAL_RCC_OscConfig+0x334>
 8006b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b32:	2b0c      	cmp	r3, #12
 8006b34:	d109      	bne.n	8006b4a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d106      	bne.n	8006b4a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d17d      	bne.n	8006c40 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	f000 bd34 	b.w	80075b2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b52:	d106      	bne.n	8006b62 <HAL_RCC_OscConfig+0x35a>
 8006b54:	4b69      	ldr	r3, [pc, #420]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a68      	ldr	r2, [pc, #416]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b5e:	6013      	str	r3, [r2, #0]
 8006b60:	e041      	b.n	8006be6 <HAL_RCC_OscConfig+0x3de>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b6a:	d112      	bne.n	8006b92 <HAL_RCC_OscConfig+0x38a>
 8006b6c:	4b63      	ldr	r3, [pc, #396]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a62      	ldr	r2, [pc, #392]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006b72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b76:	6013      	str	r3, [r2, #0]
 8006b78:	4b60      	ldr	r3, [pc, #384]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a5f      	ldr	r2, [pc, #380]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006b7e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006b82:	6013      	str	r3, [r2, #0]
 8006b84:	4b5d      	ldr	r3, [pc, #372]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a5c      	ldr	r2, [pc, #368]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006b8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b8e:	6013      	str	r3, [r2, #0]
 8006b90:	e029      	b.n	8006be6 <HAL_RCC_OscConfig+0x3de>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006b9a:	d112      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x3ba>
 8006b9c:	4b57      	ldr	r3, [pc, #348]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a56      	ldr	r2, [pc, #344]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006ba2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	4b54      	ldr	r3, [pc, #336]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a53      	ldr	r2, [pc, #332]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006bae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bb2:	6013      	str	r3, [r2, #0]
 8006bb4:	4b51      	ldr	r3, [pc, #324]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a50      	ldr	r2, [pc, #320]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	e011      	b.n	8006be6 <HAL_RCC_OscConfig+0x3de>
 8006bc2:	4b4e      	ldr	r3, [pc, #312]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a4d      	ldr	r2, [pc, #308]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006bc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	4b4b      	ldr	r3, [pc, #300]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a4a      	ldr	r2, [pc, #296]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006bd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bd8:	6013      	str	r3, [r2, #0]
 8006bda:	4b48      	ldr	r3, [pc, #288]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a47      	ldr	r2, [pc, #284]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006be0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006be4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d014      	beq.n	8006c18 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8006bee:	f7fb f94d 	bl	8001e8c <HAL_GetTick>
 8006bf2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006bf4:	e009      	b.n	8006c0a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bf6:	f7fb f949 	bl	8001e8c <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	2b64      	cmp	r3, #100	@ 0x64
 8006c02:	d902      	bls.n	8006c0a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	f000 bcd4 	b.w	80075b2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c0a:	4b3c      	ldr	r3, [pc, #240]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0ef      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x3ee>
 8006c16:	e013      	b.n	8006c40 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8006c18:	f7fb f938 	bl	8001e8c <HAL_GetTick>
 8006c1c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c1e:	e009      	b.n	8006c34 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c20:	f7fb f934 	bl	8001e8c <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b64      	cmp	r3, #100	@ 0x64
 8006c2c:	d902      	bls.n	8006c34 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	f000 bcbf 	b.w	80075b2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c34:	4b31      	ldr	r3, [pc, #196]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1ef      	bne.n	8006c20 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0302 	and.w	r3, r3, #2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d05f      	beq.n	8006d0c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4e:	2b04      	cmp	r3, #4
 8006c50:	d005      	beq.n	8006c5e <HAL_RCC_OscConfig+0x456>
 8006c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c54:	2b0c      	cmp	r3, #12
 8006c56:	d114      	bne.n	8006c82 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d111      	bne.n	8006c82 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d102      	bne.n	8006c6c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	f000 bca3 	b.w	80075b2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006c6c:	4b23      	ldr	r3, [pc, #140]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	041b      	lsls	r3, r3, #16
 8006c7a:	4920      	ldr	r1, [pc, #128]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006c80:	e044      	b.n	8006d0c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d024      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8006c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c94:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006c96:	f7fb f8f9 	bl	8001e8c <HAL_GetTick>
 8006c9a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c9c:	e009      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c9e:	f7fb f8f5 	bl	8001e8c <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d902      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	f000 bc80 	b.w	80075b2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cb2:	4b12      	ldr	r3, [pc, #72]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d0ef      	beq.n	8006c9e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	041b      	lsls	r3, r3, #16
 8006ccc:	490b      	ldr	r1, [pc, #44]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	610b      	str	r3, [r1, #16]
 8006cd2:	e01b      	b.n	8006d0c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8006cd4:	4b09      	ldr	r3, [pc, #36]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a08      	ldr	r2, [pc, #32]	@ (8006cfc <HAL_RCC_OscConfig+0x4f4>)
 8006cda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cde:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006ce0:	f7fb f8d4 	bl	8001e8c <HAL_GetTick>
 8006ce4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ce6:	e00b      	b.n	8006d00 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ce8:	f7fb f8d0 	bl	8001e8c <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d904      	bls.n	8006d00 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	f000 bc5b 	b.w	80075b2 <HAL_RCC_OscConfig+0xdaa>
 8006cfc:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d00:	4baf      	ldr	r3, [pc, #700]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1ed      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0308 	and.w	r3, r3, #8
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 80c8 	beq.w	8006eaa <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d20:	4ba7      	ldr	r3, [pc, #668]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d26:	f003 0304 	and.w	r3, r3, #4
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d111      	bne.n	8006d52 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d2e:	4ba4      	ldr	r3, [pc, #656]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d34:	4aa2      	ldr	r2, [pc, #648]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006d36:	f043 0304 	orr.w	r3, r3, #4
 8006d3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006d3e:	4ba0      	ldr	r3, [pc, #640]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006d52:	4b9c      	ldr	r3, [pc, #624]	@ (8006fc4 <HAL_RCC_OscConfig+0x7bc>)
 8006d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d119      	bne.n	8006d92 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006d5e:	4b99      	ldr	r3, [pc, #612]	@ (8006fc4 <HAL_RCC_OscConfig+0x7bc>)
 8006d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d62:	4a98      	ldr	r2, [pc, #608]	@ (8006fc4 <HAL_RCC_OscConfig+0x7bc>)
 8006d64:	f043 0301 	orr.w	r3, r3, #1
 8006d68:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d6a:	f7fb f88f 	bl	8001e8c <HAL_GetTick>
 8006d6e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006d70:	e009      	b.n	8006d86 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d72:	f7fb f88b 	bl	8001e8c <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d902      	bls.n	8006d86 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	f000 bc16 	b.w	80075b2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006d86:	4b8f      	ldr	r3, [pc, #572]	@ (8006fc4 <HAL_RCC_OscConfig+0x7bc>)
 8006d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0ef      	beq.n	8006d72 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d05f      	beq.n	8006e5a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8006d9a:	4b89      	ldr	r3, [pc, #548]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006d9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006da0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699a      	ldr	r2, [r3, #24]
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d037      	beq.n	8006e20 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006db0:	6a3b      	ldr	r3, [r7, #32]
 8006db2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d006      	beq.n	8006dc8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e3f4      	b.n	80075b2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d01b      	beq.n	8006e0a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8006dd2:	4b7b      	ldr	r3, [pc, #492]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dd8:	4a79      	ldr	r2, [pc, #484]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006dda:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006dde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8006de2:	f7fb f853 	bl	8001e8c <HAL_GetTick>
 8006de6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006de8:	e008      	b.n	8006dfc <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dea:	f7fb f84f 	bl	8001e8c <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	2b05      	cmp	r3, #5
 8006df6:	d901      	bls.n	8006dfc <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e3da      	b.n	80075b2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006dfc:	4b70      	ldr	r3, [pc, #448]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006dfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1ef      	bne.n	8006dea <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006e0a:	4b6d      	ldr	r3, [pc, #436]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006e0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e10:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	4969      	ldr	r1, [pc, #420]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006e20:	4b67      	ldr	r3, [pc, #412]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006e22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e26:	4a66      	ldr	r2, [pc, #408]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006e28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e2c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006e30:	f7fb f82c 	bl	8001e8c <HAL_GetTick>
 8006e34:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006e36:	e008      	b.n	8006e4a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e38:	f7fb f828 	bl	8001e8c <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	2b05      	cmp	r3, #5
 8006e44:	d901      	bls.n	8006e4a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e3b3      	b.n	80075b2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006e4a:	4b5d      	ldr	r3, [pc, #372]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0ef      	beq.n	8006e38 <HAL_RCC_OscConfig+0x630>
 8006e58:	e01b      	b.n	8006e92 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006e5a:	4b59      	ldr	r3, [pc, #356]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e60:	4a57      	ldr	r2, [pc, #348]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006e62:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006e66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006e6a:	f7fb f80f 	bl	8001e8c <HAL_GetTick>
 8006e6e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006e70:	e008      	b.n	8006e84 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e72:	f7fb f80b 	bl	8001e8c <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	2b05      	cmp	r3, #5
 8006e7e:	d901      	bls.n	8006e84 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e396      	b.n	80075b2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006e84:	4b4e      	ldr	r3, [pc, #312]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006e86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1ef      	bne.n	8006e72 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e92:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d107      	bne.n	8006eaa <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e9a:	4b49      	ldr	r3, [pc, #292]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ea0:	4a47      	ldr	r2, [pc, #284]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006ea2:	f023 0304 	bic.w	r3, r3, #4
 8006ea6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0304 	and.w	r3, r3, #4
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 8111 	beq.w	80070da <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ebe:	4b40      	ldr	r3, [pc, #256]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d111      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ecc:	4b3c      	ldr	r3, [pc, #240]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ed2:	4a3b      	ldr	r2, [pc, #236]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006ed4:	f043 0304 	orr.w	r3, r3, #4
 8006ed8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006edc:	4b38      	ldr	r3, [pc, #224]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ee2:	f003 0304 	and.w	r3, r3, #4
 8006ee6:	613b      	str	r3, [r7, #16]
 8006ee8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006eea:	2301      	movs	r3, #1
 8006eec:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006ef0:	4b34      	ldr	r3, [pc, #208]	@ (8006fc4 <HAL_RCC_OscConfig+0x7bc>)
 8006ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d118      	bne.n	8006f2e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006efc:	4b31      	ldr	r3, [pc, #196]	@ (8006fc4 <HAL_RCC_OscConfig+0x7bc>)
 8006efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f00:	4a30      	ldr	r2, [pc, #192]	@ (8006fc4 <HAL_RCC_OscConfig+0x7bc>)
 8006f02:	f043 0301 	orr.w	r3, r3, #1
 8006f06:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f08:	f7fa ffc0 	bl	8001e8c <HAL_GetTick>
 8006f0c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006f0e:	e008      	b.n	8006f22 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f10:	f7fa ffbc 	bl	8001e8c <HAL_GetTick>
 8006f14:	4602      	mov	r2, r0
 8006f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d901      	bls.n	8006f22 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e347      	b.n	80075b2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006f22:	4b28      	ldr	r3, [pc, #160]	@ (8006fc4 <HAL_RCC_OscConfig+0x7bc>)
 8006f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0f0      	beq.n	8006f10 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d01f      	beq.n	8006f7a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f003 0304 	and.w	r3, r3, #4
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d010      	beq.n	8006f68 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006f46:	4b1e      	ldr	r3, [pc, #120]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006f4e:	f043 0304 	orr.w	r3, r3, #4
 8006f52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006f56:	4b1a      	ldr	r3, [pc, #104]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f5c:	4a18      	ldr	r2, [pc, #96]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006f5e:	f043 0301 	orr.w	r3, r3, #1
 8006f62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006f66:	e018      	b.n	8006f9a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006f68:	4b15      	ldr	r3, [pc, #84]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f6e:	4a14      	ldr	r2, [pc, #80]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006f70:	f043 0301 	orr.w	r3, r3, #1
 8006f74:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006f78:	e00f      	b.n	8006f9a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006f7a:	4b11      	ldr	r3, [pc, #68]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f80:	4a0f      	ldr	r2, [pc, #60]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006f82:	f023 0301 	bic.w	r3, r3, #1
 8006f86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f90:	4a0b      	ldr	r2, [pc, #44]	@ (8006fc0 <HAL_RCC_OscConfig+0x7b8>)
 8006f92:	f023 0304 	bic.w	r3, r3, #4
 8006f96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d057      	beq.n	8007052 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8006fa2:	f7fa ff73 	bl	8001e8c <HAL_GetTick>
 8006fa6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fa8:	e00e      	b.n	8006fc8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006faa:	f7fa ff6f 	bl	8001e8c <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d905      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e2f8      	b.n	80075b2 <HAL_RCC_OscConfig+0xdaa>
 8006fc0:	46020c00 	.word	0x46020c00
 8006fc4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fc8:	4b9c      	ldr	r3, [pc, #624]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 8006fca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0e9      	beq.n	8006faa <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d01b      	beq.n	800701a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006fe2:	4b96      	ldr	r3, [pc, #600]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 8006fe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fe8:	4a94      	ldr	r2, [pc, #592]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 8006fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006ff2:	e00a      	b.n	800700a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ff4:	f7fa ff4a 	bl	8001e8c <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007002:	4293      	cmp	r3, r2
 8007004:	d901      	bls.n	800700a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e2d3      	b.n	80075b2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800700a:	4b8c      	ldr	r3, [pc, #560]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 800700c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007014:	2b00      	cmp	r3, #0
 8007016:	d0ed      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x7ec>
 8007018:	e053      	b.n	80070c2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800701a:	4b88      	ldr	r3, [pc, #544]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 800701c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007020:	4a86      	ldr	r2, [pc, #536]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 8007022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007026:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800702a:	e00a      	b.n	8007042 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800702c:	f7fa ff2e 	bl	8001e8c <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800703a:	4293      	cmp	r3, r2
 800703c:	d901      	bls.n	8007042 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e2b7      	b.n	80075b2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007042:	4b7e      	ldr	r3, [pc, #504]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 8007044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007048:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1ed      	bne.n	800702c <HAL_RCC_OscConfig+0x824>
 8007050:	e037      	b.n	80070c2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8007052:	f7fa ff1b 	bl	8001e8c <HAL_GetTick>
 8007056:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007058:	e00a      	b.n	8007070 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800705a:	f7fa ff17 	bl	8001e8c <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007068:	4293      	cmp	r3, r2
 800706a:	d901      	bls.n	8007070 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e2a0      	b.n	80075b2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007070:	4b72      	ldr	r3, [pc, #456]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 8007072:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1ed      	bne.n	800705a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800707e:	4b6f      	ldr	r3, [pc, #444]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 8007080:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007088:	2b00      	cmp	r3, #0
 800708a:	d01a      	beq.n	80070c2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800708c:	4b6b      	ldr	r3, [pc, #428]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 800708e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007092:	4a6a      	ldr	r2, [pc, #424]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 8007094:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007098:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800709c:	e00a      	b.n	80070b4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800709e:	f7fa fef5 	bl	8001e8c <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d901      	bls.n	80070b4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e27e      	b.n	80075b2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80070b4:	4b61      	ldr	r3, [pc, #388]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 80070b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1ed      	bne.n	800709e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80070c2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d107      	bne.n	80070da <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070ca:	4b5c      	ldr	r3, [pc, #368]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 80070cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070d0:	4a5a      	ldr	r2, [pc, #360]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 80070d2:	f023 0304 	bic.w	r3, r3, #4
 80070d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d036      	beq.n	8007154 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d019      	beq.n	8007122 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80070ee:	4b53      	ldr	r3, [pc, #332]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a52      	ldr	r2, [pc, #328]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 80070f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80070f8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80070fa:	f7fa fec7 	bl	8001e8c <HAL_GetTick>
 80070fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007100:	e008      	b.n	8007114 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007102:	f7fa fec3 	bl	8001e8c <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	2b02      	cmp	r3, #2
 800710e:	d901      	bls.n	8007114 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e24e      	b.n	80075b2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007114:	4b49      	ldr	r3, [pc, #292]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0f0      	beq.n	8007102 <HAL_RCC_OscConfig+0x8fa>
 8007120:	e018      	b.n	8007154 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8007122:	4b46      	ldr	r3, [pc, #280]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a45      	ldr	r2, [pc, #276]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 8007128:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800712c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800712e:	f7fa fead 	bl	8001e8c <HAL_GetTick>
 8007132:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007134:	e008      	b.n	8007148 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007136:	f7fa fea9 	bl	8001e8c <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	2b02      	cmp	r3, #2
 8007142:	d901      	bls.n	8007148 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e234      	b.n	80075b2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007148:	4b3c      	ldr	r3, [pc, #240]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1f0      	bne.n	8007136 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800715c:	2b00      	cmp	r3, #0
 800715e:	d036      	beq.n	80071ce <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007164:	2b00      	cmp	r3, #0
 8007166:	d019      	beq.n	800719c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8007168:	4b34      	ldr	r3, [pc, #208]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a33      	ldr	r2, [pc, #204]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 800716e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007172:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007174:	f7fa fe8a 	bl	8001e8c <HAL_GetTick>
 8007178:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800717a:	e008      	b.n	800718e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800717c:	f7fa fe86 	bl	8001e8c <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b02      	cmp	r3, #2
 8007188:	d901      	bls.n	800718e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e211      	b.n	80075b2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800718e:	4b2b      	ldr	r3, [pc, #172]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d0f0      	beq.n	800717c <HAL_RCC_OscConfig+0x974>
 800719a:	e018      	b.n	80071ce <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800719c:	4b27      	ldr	r3, [pc, #156]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a26      	ldr	r2, [pc, #152]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 80071a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071a6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80071a8:	f7fa fe70 	bl	8001e8c <HAL_GetTick>
 80071ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80071ae:	e008      	b.n	80071c2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80071b0:	f7fa fe6c 	bl	8001e8c <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d901      	bls.n	80071c2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e1f7      	b.n	80075b2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80071c2:	4b1e      	ldr	r3, [pc, #120]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1f0      	bne.n	80071b0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d07f      	beq.n	80072da <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d062      	beq.n	80072a8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80071e2:	4b16      	ldr	r3, [pc, #88]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	4a15      	ldr	r2, [pc, #84]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 80071e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80071ec:	6093      	str	r3, [r2, #8]
 80071ee:	4b13      	ldr	r3, [pc, #76]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fa:	4910      	ldr	r1, [pc, #64]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007204:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007208:	d309      	bcc.n	800721e <HAL_RCC_OscConfig+0xa16>
 800720a:	4b0c      	ldr	r3, [pc, #48]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f023 021f 	bic.w	r2, r3, #31
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	4909      	ldr	r1, [pc, #36]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 8007218:	4313      	orrs	r3, r2
 800721a:	60cb      	str	r3, [r1, #12]
 800721c:	e02a      	b.n	8007274 <HAL_RCC_OscConfig+0xa6c>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007222:	2b00      	cmp	r3, #0
 8007224:	da0c      	bge.n	8007240 <HAL_RCC_OscConfig+0xa38>
 8007226:	4b05      	ldr	r3, [pc, #20]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	015b      	lsls	r3, r3, #5
 8007234:	4901      	ldr	r1, [pc, #4]	@ (800723c <HAL_RCC_OscConfig+0xa34>)
 8007236:	4313      	orrs	r3, r2
 8007238:	60cb      	str	r3, [r1, #12]
 800723a:	e01b      	b.n	8007274 <HAL_RCC_OscConfig+0xa6c>
 800723c:	46020c00 	.word	0x46020c00
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007248:	d30a      	bcc.n	8007260 <HAL_RCC_OscConfig+0xa58>
 800724a:	4ba1      	ldr	r3, [pc, #644]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	029b      	lsls	r3, r3, #10
 8007258:	499d      	ldr	r1, [pc, #628]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 800725a:	4313      	orrs	r3, r2
 800725c:	60cb      	str	r3, [r1, #12]
 800725e:	e009      	b.n	8007274 <HAL_RCC_OscConfig+0xa6c>
 8007260:	4b9b      	ldr	r3, [pc, #620]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	03db      	lsls	r3, r3, #15
 800726e:	4998      	ldr	r1, [pc, #608]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 8007270:	4313      	orrs	r3, r2
 8007272:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8007274:	4b96      	ldr	r3, [pc, #600]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a95      	ldr	r2, [pc, #596]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 800727a:	f043 0310 	orr.w	r3, r3, #16
 800727e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007280:	f7fa fe04 	bl	8001e8c <HAL_GetTick>
 8007284:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007286:	e008      	b.n	800729a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007288:	f7fa fe00 	bl	8001e8c <HAL_GetTick>
 800728c:	4602      	mov	r2, r0
 800728e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	2b02      	cmp	r3, #2
 8007294:	d901      	bls.n	800729a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e18b      	b.n	80075b2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800729a:	4b8d      	ldr	r3, [pc, #564]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0320 	and.w	r3, r3, #32
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d0f0      	beq.n	8007288 <HAL_RCC_OscConfig+0xa80>
 80072a6:	e018      	b.n	80072da <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80072a8:	4b89      	ldr	r3, [pc, #548]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a88      	ldr	r2, [pc, #544]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 80072ae:	f023 0310 	bic.w	r3, r3, #16
 80072b2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80072b4:	f7fa fdea 	bl	8001e8c <HAL_GetTick>
 80072b8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80072ba:	e008      	b.n	80072ce <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80072bc:	f7fa fde6 	bl	8001e8c <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d901      	bls.n	80072ce <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e171      	b.n	80075b2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80072ce:	4b80      	ldr	r3, [pc, #512]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0320 	and.w	r3, r3, #32
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1f0      	bne.n	80072bc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 8166 	beq.w	80075b0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80072e4:	2300      	movs	r3, #0
 80072e6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072ea:	4b79      	ldr	r3, [pc, #484]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	f003 030c 	and.w	r3, r3, #12
 80072f2:	2b0c      	cmp	r3, #12
 80072f4:	f000 80f2 	beq.w	80074dc <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	f040 80c5 	bne.w	800748c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8007302:	4b73      	ldr	r3, [pc, #460]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a72      	ldr	r2, [pc, #456]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 8007308:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800730c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800730e:	f7fa fdbd 	bl	8001e8c <HAL_GetTick>
 8007312:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007314:	e008      	b.n	8007328 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007316:	f7fa fdb9 	bl	8001e8c <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	2b02      	cmp	r3, #2
 8007322:	d901      	bls.n	8007328 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e144      	b.n	80075b2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007328:	4b69      	ldr	r3, [pc, #420]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1f0      	bne.n	8007316 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007334:	4b66      	ldr	r3, [pc, #408]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 8007336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800733a:	f003 0304 	and.w	r3, r3, #4
 800733e:	2b00      	cmp	r3, #0
 8007340:	d111      	bne.n	8007366 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8007342:	4b63      	ldr	r3, [pc, #396]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 8007344:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007348:	4a61      	ldr	r2, [pc, #388]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 800734a:	f043 0304 	orr.w	r3, r3, #4
 800734e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007352:	4b5f      	ldr	r3, [pc, #380]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 8007354:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	60fb      	str	r3, [r7, #12]
 800735e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8007360:	2301      	movs	r3, #1
 8007362:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8007366:	4b5b      	ldr	r3, [pc, #364]	@ (80074d4 <HAL_RCC_OscConfig+0xccc>)
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800736e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007372:	d102      	bne.n	800737a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8007374:	2301      	movs	r3, #1
 8007376:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800737a:	4b56      	ldr	r3, [pc, #344]	@ (80074d4 <HAL_RCC_OscConfig+0xccc>)
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	4a55      	ldr	r2, [pc, #340]	@ (80074d4 <HAL_RCC_OscConfig+0xccc>)
 8007380:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007384:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8007386:	4b52      	ldr	r3, [pc, #328]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 8007388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800738a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800738e:	f023 0303 	bic.w	r3, r3, #3
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800739a:	3a01      	subs	r2, #1
 800739c:	0212      	lsls	r2, r2, #8
 800739e:	4311      	orrs	r1, r2
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80073a4:	430a      	orrs	r2, r1
 80073a6:	494a      	ldr	r1, [pc, #296]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80073ac:	4b48      	ldr	r3, [pc, #288]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 80073ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073b0:	4b49      	ldr	r3, [pc, #292]	@ (80074d8 <HAL_RCC_OscConfig+0xcd0>)
 80073b2:	4013      	ands	r3, r2
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80073b8:	3a01      	subs	r2, #1
 80073ba:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80073c2:	3a01      	subs	r2, #1
 80073c4:	0252      	lsls	r2, r2, #9
 80073c6:	b292      	uxth	r2, r2
 80073c8:	4311      	orrs	r1, r2
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80073ce:	3a01      	subs	r2, #1
 80073d0:	0412      	lsls	r2, r2, #16
 80073d2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80073d6:	4311      	orrs	r1, r2
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80073dc:	3a01      	subs	r2, #1
 80073de:	0612      	lsls	r2, r2, #24
 80073e0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80073e4:	430a      	orrs	r2, r1
 80073e6:	493a      	ldr	r1, [pc, #232]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80073ec:	4b38      	ldr	r3, [pc, #224]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 80073ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f0:	4a37      	ldr	r2, [pc, #220]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 80073f2:	f023 0310 	bic.w	r3, r3, #16
 80073f6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073fc:	4a34      	ldr	r2, [pc, #208]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007402:	4b33      	ldr	r3, [pc, #204]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 8007404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007406:	4a32      	ldr	r2, [pc, #200]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 8007408:	f043 0310 	orr.w	r3, r3, #16
 800740c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800740e:	4b30      	ldr	r3, [pc, #192]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 8007410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007412:	f023 020c 	bic.w	r2, r3, #12
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800741a:	492d      	ldr	r1, [pc, #180]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 800741c:	4313      	orrs	r3, r2
 800741e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8007420:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007424:	2b01      	cmp	r3, #1
 8007426:	d105      	bne.n	8007434 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007428:	4b2a      	ldr	r3, [pc, #168]	@ (80074d4 <HAL_RCC_OscConfig+0xccc>)
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	4a29      	ldr	r2, [pc, #164]	@ (80074d4 <HAL_RCC_OscConfig+0xccc>)
 800742e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007432:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8007434:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8007438:	2b01      	cmp	r3, #1
 800743a:	d107      	bne.n	800744c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800743c:	4b24      	ldr	r3, [pc, #144]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 800743e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007442:	4a23      	ldr	r2, [pc, #140]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 8007444:	f023 0304 	bic.w	r3, r3, #4
 8007448:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800744c:	4b20      	ldr	r3, [pc, #128]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a1f      	ldr	r2, [pc, #124]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 8007452:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007456:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007458:	f7fa fd18 	bl	8001e8c <HAL_GetTick>
 800745c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800745e:	e008      	b.n	8007472 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007460:	f7fa fd14 	bl	8001e8c <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	2b02      	cmp	r3, #2
 800746c:	d901      	bls.n	8007472 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e09f      	b.n	80075b2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007472:	4b17      	ldr	r3, [pc, #92]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d0f0      	beq.n	8007460 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800747e:	4b14      	ldr	r3, [pc, #80]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 8007480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007482:	4a13      	ldr	r2, [pc, #76]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 8007484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007488:	6293      	str	r3, [r2, #40]	@ 0x28
 800748a:	e091      	b.n	80075b0 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800748c:	4b10      	ldr	r3, [pc, #64]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a0f      	ldr	r2, [pc, #60]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 8007492:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007496:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007498:	f7fa fcf8 	bl	8001e8c <HAL_GetTick>
 800749c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800749e:	e008      	b.n	80074b2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074a0:	f7fa fcf4 	bl	8001e8c <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e07f      	b.n	80075b2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80074b2:	4b07      	ldr	r3, [pc, #28]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1f0      	bne.n	80074a0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80074be:	4b04      	ldr	r3, [pc, #16]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 80074c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c2:	4a03      	ldr	r2, [pc, #12]	@ (80074d0 <HAL_RCC_OscConfig+0xcc8>)
 80074c4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80074c8:	f023 0303 	bic.w	r3, r3, #3
 80074cc:	6293      	str	r3, [r2, #40]	@ 0x28
 80074ce:	e06f      	b.n	80075b0 <HAL_RCC_OscConfig+0xda8>
 80074d0:	46020c00 	.word	0x46020c00
 80074d4:	46020800 	.word	0x46020800
 80074d8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80074dc:	4b37      	ldr	r3, [pc, #220]	@ (80075bc <HAL_RCC_OscConfig+0xdb4>)
 80074de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80074e2:	4b36      	ldr	r3, [pc, #216]	@ (80075bc <HAL_RCC_OscConfig+0xdb4>)
 80074e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074e6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d039      	beq.n	8007564 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	f003 0203 	and.w	r2, r3, #3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d132      	bne.n	8007564 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	0a1b      	lsrs	r3, r3, #8
 8007502:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800750c:	429a      	cmp	r2, r3
 800750e:	d129      	bne.n	8007564 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800751a:	429a      	cmp	r2, r3
 800751c:	d122      	bne.n	8007564 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007528:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800752a:	429a      	cmp	r2, r3
 800752c:	d11a      	bne.n	8007564 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	0a5b      	lsrs	r3, r3, #9
 8007532:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800753a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800753c:	429a      	cmp	r2, r3
 800753e:	d111      	bne.n	8007564 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	0c1b      	lsrs	r3, r3, #16
 8007544:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800754c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800754e:	429a      	cmp	r2, r3
 8007550:	d108      	bne.n	8007564 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	0e1b      	lsrs	r3, r3, #24
 8007556:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800755e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007560:	429a      	cmp	r2, r3
 8007562:	d001      	beq.n	8007568 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e024      	b.n	80075b2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007568:	4b14      	ldr	r3, [pc, #80]	@ (80075bc <HAL_RCC_OscConfig+0xdb4>)
 800756a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800756c:	08db      	lsrs	r3, r3, #3
 800756e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007576:	429a      	cmp	r2, r3
 8007578:	d01a      	beq.n	80075b0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800757a:	4b10      	ldr	r3, [pc, #64]	@ (80075bc <HAL_RCC_OscConfig+0xdb4>)
 800757c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757e:	4a0f      	ldr	r2, [pc, #60]	@ (80075bc <HAL_RCC_OscConfig+0xdb4>)
 8007580:	f023 0310 	bic.w	r3, r3, #16
 8007584:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007586:	f7fa fc81 	bl	8001e8c <HAL_GetTick>
 800758a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800758c:	bf00      	nop
 800758e:	f7fa fc7d 	bl	8001e8c <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007596:	4293      	cmp	r3, r2
 8007598:	d0f9      	beq.n	800758e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800759e:	4a07      	ldr	r2, [pc, #28]	@ (80075bc <HAL_RCC_OscConfig+0xdb4>)
 80075a0:	00db      	lsls	r3, r3, #3
 80075a2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80075a4:	4b05      	ldr	r3, [pc, #20]	@ (80075bc <HAL_RCC_OscConfig+0xdb4>)
 80075a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a8:	4a04      	ldr	r2, [pc, #16]	@ (80075bc <HAL_RCC_OscConfig+0xdb4>)
 80075aa:	f043 0310 	orr.w	r3, r3, #16
 80075ae:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3738      	adds	r7, #56	@ 0x38
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	46020c00 	.word	0x46020c00

080075c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d101      	bne.n	80075d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e1d9      	b.n	8007988 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075d4:	4b9b      	ldr	r3, [pc, #620]	@ (8007844 <HAL_RCC_ClockConfig+0x284>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 030f 	and.w	r3, r3, #15
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d910      	bls.n	8007604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075e2:	4b98      	ldr	r3, [pc, #608]	@ (8007844 <HAL_RCC_ClockConfig+0x284>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f023 020f 	bic.w	r2, r3, #15
 80075ea:	4996      	ldr	r1, [pc, #600]	@ (8007844 <HAL_RCC_ClockConfig+0x284>)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075f2:	4b94      	ldr	r3, [pc, #592]	@ (8007844 <HAL_RCC_ClockConfig+0x284>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d001      	beq.n	8007604 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e1c1      	b.n	8007988 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0310 	and.w	r3, r3, #16
 800760c:	2b00      	cmp	r3, #0
 800760e:	d010      	beq.n	8007632 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	695a      	ldr	r2, [r3, #20]
 8007614:	4b8c      	ldr	r3, [pc, #560]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 8007616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007618:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800761c:	429a      	cmp	r2, r3
 800761e:	d908      	bls.n	8007632 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8007620:	4b89      	ldr	r3, [pc, #548]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 8007622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007624:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	4986      	ldr	r1, [pc, #536]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 800762e:	4313      	orrs	r3, r2
 8007630:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0308 	and.w	r3, r3, #8
 800763a:	2b00      	cmp	r3, #0
 800763c:	d012      	beq.n	8007664 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	691a      	ldr	r2, [r3, #16]
 8007642:	4b81      	ldr	r3, [pc, #516]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	091b      	lsrs	r3, r3, #4
 8007648:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800764c:	429a      	cmp	r2, r3
 800764e:	d909      	bls.n	8007664 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007650:	4b7d      	ldr	r3, [pc, #500]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	011b      	lsls	r3, r3, #4
 800765e:	497a      	ldr	r1, [pc, #488]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 8007660:	4313      	orrs	r3, r2
 8007662:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0304 	and.w	r3, r3, #4
 800766c:	2b00      	cmp	r3, #0
 800766e:	d010      	beq.n	8007692 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68da      	ldr	r2, [r3, #12]
 8007674:	4b74      	ldr	r3, [pc, #464]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 8007676:	6a1b      	ldr	r3, [r3, #32]
 8007678:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800767c:	429a      	cmp	r2, r3
 800767e:	d908      	bls.n	8007692 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007680:	4b71      	ldr	r3, [pc, #452]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	496e      	ldr	r1, [pc, #440]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 800768e:	4313      	orrs	r3, r2
 8007690:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d010      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	4b69      	ldr	r3, [pc, #420]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	f003 030f 	and.w	r3, r3, #15
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d908      	bls.n	80076c0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80076ae:	4b66      	ldr	r3, [pc, #408]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	f023 020f 	bic.w	r2, r3, #15
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	4963      	ldr	r1, [pc, #396]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 80d2 	beq.w	8007872 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80076ce:	2300      	movs	r3, #0
 80076d0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d143      	bne.n	8007762 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076da:	4b5b      	ldr	r3, [pc, #364]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 80076dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076e0:	f003 0304 	and.w	r3, r3, #4
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d110      	bne.n	800770a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80076e8:	4b57      	ldr	r3, [pc, #348]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 80076ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076ee:	4a56      	ldr	r2, [pc, #344]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 80076f0:	f043 0304 	orr.w	r3, r3, #4
 80076f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80076f8:	4b53      	ldr	r3, [pc, #332]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 80076fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076fe:	f003 0304 	and.w	r3, r3, #4
 8007702:	60bb      	str	r3, [r7, #8]
 8007704:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8007706:	2301      	movs	r3, #1
 8007708:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800770a:	f7fa fbbf 	bl	8001e8c <HAL_GetTick>
 800770e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007710:	4b4e      	ldr	r3, [pc, #312]	@ (800784c <HAL_RCC_ClockConfig+0x28c>)
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00f      	beq.n	800773c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800771c:	e008      	b.n	8007730 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800771e:	f7fa fbb5 	bl	8001e8c <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	2b02      	cmp	r3, #2
 800772a:	d901      	bls.n	8007730 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e12b      	b.n	8007988 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007730:	4b46      	ldr	r3, [pc, #280]	@ (800784c <HAL_RCC_ClockConfig+0x28c>)
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0f0      	beq.n	800771e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800773c:	7dfb      	ldrb	r3, [r7, #23]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d107      	bne.n	8007752 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007742:	4b41      	ldr	r3, [pc, #260]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 8007744:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007748:	4a3f      	ldr	r2, [pc, #252]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 800774a:	f023 0304 	bic.w	r3, r3, #4
 800774e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007752:	4b3d      	ldr	r3, [pc, #244]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d121      	bne.n	80077a2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e112      	b.n	8007988 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	2b02      	cmp	r3, #2
 8007768:	d107      	bne.n	800777a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800776a:	4b37      	ldr	r3, [pc, #220]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d115      	bne.n	80077a2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e106      	b.n	8007988 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d107      	bne.n	8007792 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007782:	4b31      	ldr	r3, [pc, #196]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0304 	and.w	r3, r3, #4
 800778a:	2b00      	cmp	r3, #0
 800778c:	d109      	bne.n	80077a2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e0fa      	b.n	8007988 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007792:	4b2d      	ldr	r3, [pc, #180]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e0f2      	b.n	8007988 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80077a2:	4b29      	ldr	r3, [pc, #164]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	f023 0203 	bic.w	r2, r3, #3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	4926      	ldr	r1, [pc, #152]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 80077b0:	4313      	orrs	r3, r2
 80077b2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80077b4:	f7fa fb6a 	bl	8001e8c <HAL_GetTick>
 80077b8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d112      	bne.n	80077e8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80077c2:	e00a      	b.n	80077da <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077c4:	f7fa fb62 	bl	8001e8c <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d901      	bls.n	80077da <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e0d6      	b.n	8007988 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80077da:	4b1b      	ldr	r3, [pc, #108]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	f003 030c 	and.w	r3, r3, #12
 80077e2:	2b0c      	cmp	r3, #12
 80077e4:	d1ee      	bne.n	80077c4 <HAL_RCC_ClockConfig+0x204>
 80077e6:	e044      	b.n	8007872 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d112      	bne.n	8007816 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80077f0:	e00a      	b.n	8007808 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077f2:	f7fa fb4b 	bl	8001e8c <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007800:	4293      	cmp	r3, r2
 8007802:	d901      	bls.n	8007808 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	e0bf      	b.n	8007988 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007808:	4b0f      	ldr	r3, [pc, #60]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	f003 030c 	and.w	r3, r3, #12
 8007810:	2b08      	cmp	r3, #8
 8007812:	d1ee      	bne.n	80077f2 <HAL_RCC_ClockConfig+0x232>
 8007814:	e02d      	b.n	8007872 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d123      	bne.n	8007866 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800781e:	e00a      	b.n	8007836 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007820:	f7fa fb34 	bl	8001e8c <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800782e:	4293      	cmp	r3, r2
 8007830:	d901      	bls.n	8007836 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e0a8      	b.n	8007988 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007836:	4b04      	ldr	r3, [pc, #16]	@ (8007848 <HAL_RCC_ClockConfig+0x288>)
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	f003 030c 	and.w	r3, r3, #12
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1ee      	bne.n	8007820 <HAL_RCC_ClockConfig+0x260>
 8007842:	e016      	b.n	8007872 <HAL_RCC_ClockConfig+0x2b2>
 8007844:	40022000 	.word	0x40022000
 8007848:	46020c00 	.word	0x46020c00
 800784c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007850:	f7fa fb1c 	bl	8001e8c <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800785e:	4293      	cmp	r3, r2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e090      	b.n	8007988 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007866:	4b4a      	ldr	r3, [pc, #296]	@ (8007990 <HAL_RCC_ClockConfig+0x3d0>)
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	f003 030c 	and.w	r3, r3, #12
 800786e:	2b04      	cmp	r3, #4
 8007870:	d1ee      	bne.n	8007850 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d010      	beq.n	80078a0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	689a      	ldr	r2, [r3, #8]
 8007882:	4b43      	ldr	r3, [pc, #268]	@ (8007990 <HAL_RCC_ClockConfig+0x3d0>)
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	f003 030f 	and.w	r3, r3, #15
 800788a:	429a      	cmp	r2, r3
 800788c:	d208      	bcs.n	80078a0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800788e:	4b40      	ldr	r3, [pc, #256]	@ (8007990 <HAL_RCC_ClockConfig+0x3d0>)
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	f023 020f 	bic.w	r2, r3, #15
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	493d      	ldr	r1, [pc, #244]	@ (8007990 <HAL_RCC_ClockConfig+0x3d0>)
 800789c:	4313      	orrs	r3, r2
 800789e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078a0:	4b3c      	ldr	r3, [pc, #240]	@ (8007994 <HAL_RCC_ClockConfig+0x3d4>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 030f 	and.w	r3, r3, #15
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d210      	bcs.n	80078d0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ae:	4b39      	ldr	r3, [pc, #228]	@ (8007994 <HAL_RCC_ClockConfig+0x3d4>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f023 020f 	bic.w	r2, r3, #15
 80078b6:	4937      	ldr	r1, [pc, #220]	@ (8007994 <HAL_RCC_ClockConfig+0x3d4>)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078be:	4b35      	ldr	r3, [pc, #212]	@ (8007994 <HAL_RCC_ClockConfig+0x3d4>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 030f 	and.w	r3, r3, #15
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d001      	beq.n	80078d0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e05b      	b.n	8007988 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0304 	and.w	r3, r3, #4
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d010      	beq.n	80078fe <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	4b2b      	ldr	r3, [pc, #172]	@ (8007990 <HAL_RCC_ClockConfig+0x3d0>)
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d208      	bcs.n	80078fe <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80078ec:	4b28      	ldr	r3, [pc, #160]	@ (8007990 <HAL_RCC_ClockConfig+0x3d0>)
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	4925      	ldr	r1, [pc, #148]	@ (8007990 <HAL_RCC_ClockConfig+0x3d0>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0308 	and.w	r3, r3, #8
 8007906:	2b00      	cmp	r3, #0
 8007908:	d012      	beq.n	8007930 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691a      	ldr	r2, [r3, #16]
 800790e:	4b20      	ldr	r3, [pc, #128]	@ (8007990 <HAL_RCC_ClockConfig+0x3d0>)
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	091b      	lsrs	r3, r3, #4
 8007914:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007918:	429a      	cmp	r2, r3
 800791a:	d209      	bcs.n	8007930 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800791c:	4b1c      	ldr	r3, [pc, #112]	@ (8007990 <HAL_RCC_ClockConfig+0x3d0>)
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	011b      	lsls	r3, r3, #4
 800792a:	4919      	ldr	r1, [pc, #100]	@ (8007990 <HAL_RCC_ClockConfig+0x3d0>)
 800792c:	4313      	orrs	r3, r2
 800792e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0310 	and.w	r3, r3, #16
 8007938:	2b00      	cmp	r3, #0
 800793a:	d010      	beq.n	800795e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	695a      	ldr	r2, [r3, #20]
 8007940:	4b13      	ldr	r3, [pc, #76]	@ (8007990 <HAL_RCC_ClockConfig+0x3d0>)
 8007942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007944:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007948:	429a      	cmp	r2, r3
 800794a:	d208      	bcs.n	800795e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800794c:	4b10      	ldr	r3, [pc, #64]	@ (8007990 <HAL_RCC_ClockConfig+0x3d0>)
 800794e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007950:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	490d      	ldr	r1, [pc, #52]	@ (8007990 <HAL_RCC_ClockConfig+0x3d0>)
 800795a:	4313      	orrs	r3, r2
 800795c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800795e:	f000 f821 	bl	80079a4 <HAL_RCC_GetSysClockFreq>
 8007962:	4602      	mov	r2, r0
 8007964:	4b0a      	ldr	r3, [pc, #40]	@ (8007990 <HAL_RCC_ClockConfig+0x3d0>)
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	f003 030f 	and.w	r3, r3, #15
 800796c:	490a      	ldr	r1, [pc, #40]	@ (8007998 <HAL_RCC_ClockConfig+0x3d8>)
 800796e:	5ccb      	ldrb	r3, [r1, r3]
 8007970:	fa22 f303 	lsr.w	r3, r2, r3
 8007974:	4a09      	ldr	r2, [pc, #36]	@ (800799c <HAL_RCC_ClockConfig+0x3dc>)
 8007976:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007978:	4b09      	ldr	r3, [pc, #36]	@ (80079a0 <HAL_RCC_ClockConfig+0x3e0>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4618      	mov	r0, r3
 800797e:	f7f9 ff49 	bl	8001814 <HAL_InitTick>
 8007982:	4603      	mov	r3, r0
 8007984:	73fb      	strb	r3, [r7, #15]

  return status;
 8007986:	7bfb      	ldrb	r3, [r7, #15]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	46020c00 	.word	0x46020c00
 8007994:	40022000 	.word	0x40022000
 8007998:	0802f9f4 	.word	0x0802f9f4
 800799c:	20000004 	.word	0x20000004
 80079a0:	20000008 	.word	0x20000008

080079a4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b08b      	sub	sp, #44	@ 0x2c
 80079a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80079aa:	2300      	movs	r3, #0
 80079ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80079ae:	2300      	movs	r3, #0
 80079b0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079b2:	4b78      	ldr	r3, [pc, #480]	@ (8007b94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80079b4:	69db      	ldr	r3, [r3, #28]
 80079b6:	f003 030c 	and.w	r3, r3, #12
 80079ba:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079bc:	4b75      	ldr	r3, [pc, #468]	@ (8007b94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80079be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c0:	f003 0303 	and.w	r3, r3, #3
 80079c4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d005      	beq.n	80079d8 <HAL_RCC_GetSysClockFreq+0x34>
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	2b0c      	cmp	r3, #12
 80079d0:	d121      	bne.n	8007a16 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d11e      	bne.n	8007a16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80079d8:	4b6e      	ldr	r3, [pc, #440]	@ (8007b94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d107      	bne.n	80079f4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80079e4:	4b6b      	ldr	r3, [pc, #428]	@ (8007b94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80079e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80079ea:	0b1b      	lsrs	r3, r3, #12
 80079ec:	f003 030f 	and.w	r3, r3, #15
 80079f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80079f2:	e005      	b.n	8007a00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80079f4:	4b67      	ldr	r3, [pc, #412]	@ (8007b94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	0f1b      	lsrs	r3, r3, #28
 80079fa:	f003 030f 	and.w	r3, r3, #15
 80079fe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007a00:	4a65      	ldr	r2, [pc, #404]	@ (8007b98 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8007a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a08:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d110      	bne.n	8007a32 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a12:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007a14:	e00d      	b.n	8007a32 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a16:	4b5f      	ldr	r3, [pc, #380]	@ (8007b94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	f003 030c 	and.w	r3, r3, #12
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	d102      	bne.n	8007a28 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007a22:	4b5e      	ldr	r3, [pc, #376]	@ (8007b9c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007a24:	623b      	str	r3, [r7, #32]
 8007a26:	e004      	b.n	8007a32 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	2b08      	cmp	r3, #8
 8007a2c:	d101      	bne.n	8007a32 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007a2e:	4b5b      	ldr	r3, [pc, #364]	@ (8007b9c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007a30:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	2b0c      	cmp	r3, #12
 8007a36:	f040 80a5 	bne.w	8007b84 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007a3a:	4b56      	ldr	r3, [pc, #344]	@ (8007b94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3e:	f003 0303 	and.w	r3, r3, #3
 8007a42:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007a44:	4b53      	ldr	r3, [pc, #332]	@ (8007b94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a48:	0a1b      	lsrs	r3, r3, #8
 8007a4a:	f003 030f 	and.w	r3, r3, #15
 8007a4e:	3301      	adds	r3, #1
 8007a50:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007a52:	4b50      	ldr	r3, [pc, #320]	@ (8007b94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a56:	091b      	lsrs	r3, r3, #4
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007a5e:	4b4d      	ldr	r3, [pc, #308]	@ (8007b94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a62:	08db      	lsrs	r3, r3, #3
 8007a64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	fb02 f303 	mul.w	r3, r2, r3
 8007a6e:	ee07 3a90 	vmov	s15, r3
 8007a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a76:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d003      	beq.n	8007a88 <HAL_RCC_GetSysClockFreq+0xe4>
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d022      	beq.n	8007acc <HAL_RCC_GetSysClockFreq+0x128>
 8007a86:	e043      	b.n	8007b10 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a92:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8007ba0 <HAL_RCC_GetSysClockFreq+0x1fc>
 8007a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8007b94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa2:	ee07 3a90 	vmov	s15, r3
 8007aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007aaa:	ed97 6a01 	vldr	s12, [r7, #4]
 8007aae:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8007ba4 <HAL_RCC_GetSysClockFreq+0x200>
 8007ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007aca:	e046      	b.n	8007b5a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	ee07 3a90 	vmov	s15, r3
 8007ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8007ba0 <HAL_RCC_GetSysClockFreq+0x1fc>
 8007ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ade:	4b2d      	ldr	r3, [pc, #180]	@ (8007b94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae6:	ee07 3a90 	vmov	s15, r3
 8007aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007aee:	ed97 6a01 	vldr	s12, [r7, #4]
 8007af2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8007ba4 <HAL_RCC_GetSysClockFreq+0x200>
 8007af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b0e:	e024      	b.n	8007b5a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b12:	ee07 3a90 	vmov	s15, r3
 8007b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	ee07 3a90 	vmov	s15, r3
 8007b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b28:	4b1a      	ldr	r3, [pc, #104]	@ (8007b94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b30:	ee07 3a90 	vmov	s15, r3
 8007b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007b38:	ed97 6a01 	vldr	s12, [r7, #4]
 8007b3c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8007ba4 <HAL_RCC_GetSysClockFreq+0x200>
 8007b40:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007b44:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007b48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b58:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8007b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8007b94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b5e:	0e1b      	lsrs	r3, r3, #24
 8007b60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b64:	3301      	adds	r3, #1
 8007b66:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	ee07 3a90 	vmov	s15, r3
 8007b6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007b72:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b7e:	ee17 3a90 	vmov	r3, s15
 8007b82:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8007b84:	6a3b      	ldr	r3, [r7, #32]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	372c      	adds	r7, #44	@ 0x2c
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	46020c00 	.word	0x46020c00
 8007b98:	0802fa0c 	.word	0x0802fa0c
 8007b9c:	00f42400 	.word	0x00f42400
 8007ba0:	4b742400 	.word	0x4b742400
 8007ba4:	46000000 	.word	0x46000000

08007ba8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007bac:	f7ff fefa 	bl	80079a4 <HAL_RCC_GetSysClockFreq>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	4b07      	ldr	r3, [pc, #28]	@ (8007bd0 <HAL_RCC_GetHCLKFreq+0x28>)
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	f003 030f 	and.w	r3, r3, #15
 8007bba:	4906      	ldr	r1, [pc, #24]	@ (8007bd4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007bbc:	5ccb      	ldrb	r3, [r1, r3]
 8007bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8007bc2:	4a05      	ldr	r2, [pc, #20]	@ (8007bd8 <HAL_RCC_GetHCLKFreq+0x30>)
 8007bc4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007bc6:	4b04      	ldr	r3, [pc, #16]	@ (8007bd8 <HAL_RCC_GetHCLKFreq+0x30>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	46020c00 	.word	0x46020c00
 8007bd4:	0802f9f4 	.word	0x0802f9f4
 8007bd8:	20000004 	.word	0x20000004

08007bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8007be0:	f7ff ffe2 	bl	8007ba8 <HAL_RCC_GetHCLKFreq>
 8007be4:	4602      	mov	r2, r0
 8007be6:	4b05      	ldr	r3, [pc, #20]	@ (8007bfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	091b      	lsrs	r3, r3, #4
 8007bec:	f003 0307 	and.w	r3, r3, #7
 8007bf0:	4903      	ldr	r1, [pc, #12]	@ (8007c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bf2:	5ccb      	ldrb	r3, [r1, r3]
 8007bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	46020c00 	.word	0x46020c00
 8007c00:	0802fa04 	.word	0x0802fa04

08007c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007c08:	f7ff ffce 	bl	8007ba8 <HAL_RCC_GetHCLKFreq>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	4b05      	ldr	r3, [pc, #20]	@ (8007c24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	0a1b      	lsrs	r3, r3, #8
 8007c14:	f003 0307 	and.w	r3, r3, #7
 8007c18:	4903      	ldr	r1, [pc, #12]	@ (8007c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c1a:	5ccb      	ldrb	r3, [r1, r3]
 8007c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	46020c00 	.word	0x46020c00
 8007c28:	0802fa04 	.word	0x0802fa04

08007c2c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8007c30:	f7ff ffba 	bl	8007ba8 <HAL_RCC_GetHCLKFreq>
 8007c34:	4602      	mov	r2, r0
 8007c36:	4b05      	ldr	r3, [pc, #20]	@ (8007c4c <HAL_RCC_GetPCLK3Freq+0x20>)
 8007c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c3a:	091b      	lsrs	r3, r3, #4
 8007c3c:	f003 0307 	and.w	r3, r3, #7
 8007c40:	4903      	ldr	r1, [pc, #12]	@ (8007c50 <HAL_RCC_GetPCLK3Freq+0x24>)
 8007c42:	5ccb      	ldrb	r3, [r1, r3]
 8007c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	46020c00 	.word	0x46020c00
 8007c50:	0802fa04 	.word	0x0802fa04

08007c54 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	221f      	movs	r2, #31
 8007c62:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8007c64:	4b15      	ldr	r3, [pc, #84]	@ (8007cbc <HAL_RCC_GetClockConfig+0x68>)
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	f003 0203 	and.w	r2, r3, #3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8007c70:	4b12      	ldr	r3, [pc, #72]	@ (8007cbc <HAL_RCC_GetClockConfig+0x68>)
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	f003 020f 	and.w	r2, r3, #15
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8007c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8007cbc <HAL_RCC_GetClockConfig+0x68>)
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8007c88:	4b0c      	ldr	r3, [pc, #48]	@ (8007cbc <HAL_RCC_GetClockConfig+0x68>)
 8007c8a:	6a1b      	ldr	r3, [r3, #32]
 8007c8c:	091b      	lsrs	r3, r3, #4
 8007c8e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8007c96:	4b09      	ldr	r3, [pc, #36]	@ (8007cbc <HAL_RCC_GetClockConfig+0x68>)
 8007c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c9a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ca2:	4b07      	ldr	r3, [pc, #28]	@ (8007cc0 <HAL_RCC_GetClockConfig+0x6c>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 020f 	and.w	r2, r3, #15
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	601a      	str	r2, [r3, #0]
}
 8007cae:	bf00      	nop
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	46020c00 	.word	0x46020c00
 8007cc0:	40022000 	.word	0x40022000

08007cc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007ccc:	4b3e      	ldr	r3, [pc, #248]	@ (8007dc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cd2:	f003 0304 	and.w	r3, r3, #4
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007cda:	f7fe fd87 	bl	80067ec <HAL_PWREx_GetVoltageRange>
 8007cde:	6178      	str	r0, [r7, #20]
 8007ce0:	e019      	b.n	8007d16 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ce2:	4b39      	ldr	r3, [pc, #228]	@ (8007dc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ce8:	4a37      	ldr	r2, [pc, #220]	@ (8007dc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007cea:	f043 0304 	orr.w	r3, r3, #4
 8007cee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007cf2:	4b35      	ldr	r3, [pc, #212]	@ (8007dc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cf8:	f003 0304 	and.w	r3, r3, #4
 8007cfc:	60fb      	str	r3, [r7, #12]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007d00:	f7fe fd74 	bl	80067ec <HAL_PWREx_GetVoltageRange>
 8007d04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007d06:	4b30      	ldr	r3, [pc, #192]	@ (8007dc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d0c:	4a2e      	ldr	r2, [pc, #184]	@ (8007dc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007d0e:	f023 0304 	bic.w	r3, r3, #4
 8007d12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d1c:	d003      	beq.n	8007d26 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d24:	d109      	bne.n	8007d3a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d2c:	d202      	bcs.n	8007d34 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007d2e:	2301      	movs	r3, #1
 8007d30:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007d32:	e033      	b.n	8007d9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007d34:	2300      	movs	r3, #0
 8007d36:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007d38:	e030      	b.n	8007d9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d40:	d208      	bcs.n	8007d54 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d48:	d102      	bne.n	8007d50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	613b      	str	r3, [r7, #16]
 8007d4e:	e025      	b.n	8007d9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e035      	b.n	8007dc0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d5a:	d90f      	bls.n	8007d7c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d109      	bne.n	8007d76 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d68:	d902      	bls.n	8007d70 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	613b      	str	r3, [r7, #16]
 8007d6e:	e015      	b.n	8007d9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007d70:	2301      	movs	r3, #1
 8007d72:	613b      	str	r3, [r7, #16]
 8007d74:	e012      	b.n	8007d9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007d76:	2300      	movs	r3, #0
 8007d78:	613b      	str	r3, [r7, #16]
 8007d7a:	e00f      	b.n	8007d9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d82:	d109      	bne.n	8007d98 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d8a:	d102      	bne.n	8007d92 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	613b      	str	r3, [r7, #16]
 8007d90:	e004      	b.n	8007d9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8007d92:	2302      	movs	r3, #2
 8007d94:	613b      	str	r3, [r7, #16]
 8007d96:	e001      	b.n	8007d9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007d98:	2301      	movs	r3, #1
 8007d9a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007dcc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f023 020f 	bic.w	r2, r3, #15
 8007da4:	4909      	ldr	r1, [pc, #36]	@ (8007dcc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007dac:	4b07      	ldr	r3, [pc, #28]	@ (8007dcc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 030f 	and.w	r3, r3, #15
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d001      	beq.n	8007dbe <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e000      	b.n	8007dc0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3718      	adds	r7, #24
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	46020c00 	.word	0x46020c00
 8007dcc:	40022000 	.word	0x40022000

08007dd0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007dd4:	b0b8      	sub	sp, #224	@ 0xe0
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007de2:	2300      	movs	r3, #0
 8007de4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007de8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	f002 0401 	and.w	r4, r2, #1
 8007df4:	2500      	movs	r5, #0
 8007df6:	ea54 0305 	orrs.w	r3, r4, r5
 8007dfa:	d00b      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007dfc:	4bca      	ldr	r3, [pc, #808]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e02:	f023 0103 	bic.w	r1, r3, #3
 8007e06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e0c:	4ac6      	ldr	r2, [pc, #792]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e0e:	430b      	orrs	r3, r1
 8007e10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1c:	f002 0802 	and.w	r8, r2, #2
 8007e20:	f04f 0900 	mov.w	r9, #0
 8007e24:	ea58 0309 	orrs.w	r3, r8, r9
 8007e28:	d00b      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8007e2a:	4bbf      	ldr	r3, [pc, #764]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e30:	f023 010c 	bic.w	r1, r3, #12
 8007e34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e3a:	4abb      	ldr	r2, [pc, #748]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e3c:	430b      	orrs	r3, r1
 8007e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4a:	f002 0a04 	and.w	sl, r2, #4
 8007e4e:	f04f 0b00 	mov.w	fp, #0
 8007e52:	ea5a 030b 	orrs.w	r3, sl, fp
 8007e56:	d00b      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007e58:	4bb3      	ldr	r3, [pc, #716]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e5e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007e62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e68:	4aaf      	ldr	r2, [pc, #700]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e6a:	430b      	orrs	r3, r1
 8007e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e78:	f002 0308 	and.w	r3, r2, #8
 8007e7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e80:	2300      	movs	r3, #0
 8007e82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	d00b      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007e90:	4ba5      	ldr	r3, [pc, #660]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007e9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ea0:	4aa1      	ldr	r2, [pc, #644]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007ea2:	430b      	orrs	r3, r1
 8007ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ea8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb0:	f002 0310 	and.w	r3, r2, #16
 8007eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007ebe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	d00b      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007ec8:	4b97      	ldr	r3, [pc, #604]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ece:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ed2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ed8:	4a93      	ldr	r2, [pc, #588]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007eda:	430b      	orrs	r3, r1
 8007edc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ee0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee8:	f002 0320 	and.w	r3, r2, #32
 8007eec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ef6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4313      	orrs	r3, r2
 8007efe:	d00b      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007f00:	4b89      	ldr	r3, [pc, #548]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007f02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f06:	f023 0107 	bic.w	r1, r3, #7
 8007f0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f10:	4a85      	ldr	r2, [pc, #532]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007f12:	430b      	orrs	r3, r1
 8007f14:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007f18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f20:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007f24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f2e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f32:	460b      	mov	r3, r1
 8007f34:	4313      	orrs	r3, r2
 8007f36:	d00b      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007f38:	4b7b      	ldr	r3, [pc, #492]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f3e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007f42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f48:	4a77      	ldr	r2, [pc, #476]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007f4a:	430b      	orrs	r3, r1
 8007f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007f5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f60:	2300      	movs	r3, #0
 8007f62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007f66:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	d00b      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007f70:	4b6d      	ldr	r3, [pc, #436]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f80:	4a69      	ldr	r2, [pc, #420]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007f82:	430b      	orrs	r3, r1
 8007f84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007f88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007f94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f98:	2300      	movs	r3, #0
 8007f9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f9e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	d00b      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007fa8:	4b5f      	ldr	r3, [pc, #380]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007faa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007fb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fb8:	4a5b      	ldr	r2, [pc, #364]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007fba:	430b      	orrs	r3, r1
 8007fbc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007fc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007fcc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007fd6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007fda:	460b      	mov	r3, r1
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	d00b      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007fe0:	4b51      	ldr	r3, [pc, #324]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fe6:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8007fea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ff0:	4a4d      	ldr	r2, [pc, #308]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007ff2:	430b      	orrs	r3, r1
 8007ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007ff8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008000:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8008004:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008008:	2300      	movs	r3, #0
 800800a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800800e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008012:	460b      	mov	r3, r1
 8008014:	4313      	orrs	r3, r2
 8008016:	d00b      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8008018:	4b43      	ldr	r3, [pc, #268]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800801a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800801e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8008022:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008026:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008028:	4a3f      	ldr	r2, [pc, #252]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800802a:	430b      	orrs	r3, r1
 800802c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008030:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800803c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008040:	2300      	movs	r3, #0
 8008042:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008046:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800804a:	460b      	mov	r3, r1
 800804c:	4313      	orrs	r3, r2
 800804e:	d00b      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008050:	4b35      	ldr	r3, [pc, #212]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008056:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800805a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800805e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008060:	4a31      	ldr	r2, [pc, #196]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008062:	430b      	orrs	r3, r1
 8008064:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8008068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008070:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008074:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008076:	2300      	movs	r3, #0
 8008078:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800807a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800807e:	460b      	mov	r3, r1
 8008080:	4313      	orrs	r3, r2
 8008082:	d00c      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8008084:	4b28      	ldr	r3, [pc, #160]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008086:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800808a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800808e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008096:	4a24      	ldr	r2, [pc, #144]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008098:	430b      	orrs	r3, r1
 800809a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800809e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80080aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80080ac:	2300      	movs	r3, #0
 80080ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80080b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80080b4:	460b      	mov	r3, r1
 80080b6:	4313      	orrs	r3, r2
 80080b8:	d04f      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80080ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080c2:	2b80      	cmp	r3, #128	@ 0x80
 80080c4:	d02d      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x352>
 80080c6:	2b80      	cmp	r3, #128	@ 0x80
 80080c8:	d827      	bhi.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80080ca:	2b60      	cmp	r3, #96	@ 0x60
 80080cc:	d02e      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80080ce:	2b60      	cmp	r3, #96	@ 0x60
 80080d0:	d823      	bhi.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80080d2:	2b40      	cmp	r3, #64	@ 0x40
 80080d4:	d006      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80080d6:	2b40      	cmp	r3, #64	@ 0x40
 80080d8:	d81f      	bhi.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d009      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x322>
 80080de:	2b20      	cmp	r3, #32
 80080e0:	d011      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80080e2:	e01a      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80080e4:	4b10      	ldr	r3, [pc, #64]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80080e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e8:	4a0f      	ldr	r2, [pc, #60]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80080ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080ee:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80080f0:	e01d      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80080f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080f6:	3308      	adds	r3, #8
 80080f8:	4618      	mov	r0, r3
 80080fa:	f002 f9d1 	bl	800a4a0 <RCCEx_PLL2_Config>
 80080fe:	4603      	mov	r3, r0
 8008100:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008104:	e013      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008106:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800810a:	332c      	adds	r3, #44	@ 0x2c
 800810c:	4618      	mov	r0, r3
 800810e:	f002 fa5f 	bl	800a5d0 <RCCEx_PLL3_Config>
 8008112:	4603      	mov	r3, r0
 8008114:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008118:	e009      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008120:	e005      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8008122:	bf00      	nop
 8008124:	e003      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8008126:	bf00      	nop
 8008128:	46020c00 	.word	0x46020c00
        break;
 800812c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800812e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10d      	bne.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8008136:	4bb6      	ldr	r3, [pc, #728]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008138:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800813c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8008140:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008148:	4ab1      	ldr	r2, [pc, #708]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800814a:	430b      	orrs	r3, r1
 800814c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008150:	e003      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008152:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008156:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800815a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008162:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008166:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008168:	2300      	movs	r3, #0
 800816a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800816c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008170:	460b      	mov	r3, r1
 8008172:	4313      	orrs	r3, r2
 8008174:	d053      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8008176:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800817a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800817e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008182:	d033      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008188:	d82c      	bhi.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800818a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800818e:	d02f      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008190:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008194:	d826      	bhi.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008196:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800819a:	d008      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800819c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081a0:	d820      	bhi.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00a      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80081a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081aa:	d011      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80081ac:	e01a      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80081ae:	4b98      	ldr	r3, [pc, #608]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80081b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b2:	4a97      	ldr	r2, [pc, #604]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80081b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081b8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80081ba:	e01a      	b.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80081bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081c0:	3308      	adds	r3, #8
 80081c2:	4618      	mov	r0, r3
 80081c4:	f002 f96c 	bl	800a4a0 <RCCEx_PLL2_Config>
 80081c8:	4603      	mov	r3, r0
 80081ca:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80081ce:	e010      	b.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80081d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081d4:	332c      	adds	r3, #44	@ 0x2c
 80081d6:	4618      	mov	r0, r3
 80081d8:	f002 f9fa 	bl	800a5d0 <RCCEx_PLL3_Config>
 80081dc:	4603      	mov	r3, r0
 80081de:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80081e2:	e006      	b.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80081ea:	e002      	b.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80081ec:	bf00      	nop
 80081ee:	e000      	b.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80081f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081f2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10d      	bne.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80081fa:	4b85      	ldr	r3, [pc, #532]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80081fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008200:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8008204:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008208:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800820c:	4a80      	ldr	r2, [pc, #512]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800820e:	430b      	orrs	r3, r1
 8008210:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008214:	e003      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008216:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800821a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800821e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800822a:	663b      	str	r3, [r7, #96]	@ 0x60
 800822c:	2300      	movs	r3, #0
 800822e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008230:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008234:	460b      	mov	r3, r1
 8008236:	4313      	orrs	r3, r2
 8008238:	d046      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800823a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800823e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008242:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008246:	d028      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008248:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800824c:	d821      	bhi.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800824e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008252:	d022      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008254:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008258:	d81b      	bhi.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800825a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800825e:	d01c      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008260:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008264:	d815      	bhi.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008266:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800826a:	d008      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800826c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008270:	d80f      	bhi.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008272:	2b00      	cmp	r3, #0
 8008274:	d011      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800827a:	d00e      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800827c:	e009      	b.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800827e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008282:	3308      	adds	r3, #8
 8008284:	4618      	mov	r0, r3
 8008286:	f002 f90b 	bl	800a4a0 <RCCEx_PLL2_Config>
 800828a:	4603      	mov	r3, r0
 800828c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008290:	e004      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008298:	e000      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 800829a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800829c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10d      	bne.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80082a4:	4b5a      	ldr	r3, [pc, #360]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80082a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80082aa:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80082ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80082b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80082b6:	4a56      	ldr	r2, [pc, #344]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80082b8:	430b      	orrs	r3, r1
 80082ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80082be:	e003      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80082c4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80082c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80082d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082d6:	2300      	movs	r3, #0
 80082d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80082de:	460b      	mov	r3, r1
 80082e0:	4313      	orrs	r3, r2
 80082e2:	d03f      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80082e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80082e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082ec:	2b04      	cmp	r3, #4
 80082ee:	d81e      	bhi.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80082f0:	a201      	add	r2, pc, #4	@ (adr r2, 80082f8 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80082f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f6:	bf00      	nop
 80082f8:	08008337 	.word	0x08008337
 80082fc:	0800830d 	.word	0x0800830d
 8008300:	0800831b 	.word	0x0800831b
 8008304:	08008337 	.word	0x08008337
 8008308:	08008337 	.word	0x08008337
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800830c:	4b40      	ldr	r3, [pc, #256]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800830e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008310:	4a3f      	ldr	r2, [pc, #252]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008312:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008316:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008318:	e00e      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800831a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800831e:	332c      	adds	r3, #44	@ 0x2c
 8008320:	4618      	mov	r0, r3
 8008322:	f002 f955 	bl	800a5d0 <RCCEx_PLL3_Config>
 8008326:	4603      	mov	r3, r0
 8008328:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800832c:	e004      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008334:	e000      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8008336:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008338:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10d      	bne.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8008340:	4b33      	ldr	r3, [pc, #204]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008342:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008346:	f023 0107 	bic.w	r1, r3, #7
 800834a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800834e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008352:	4a2f      	ldr	r2, [pc, #188]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008354:	430b      	orrs	r3, r1
 8008356:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800835a:	e003      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800835c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008360:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8008364:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008370:	653b      	str	r3, [r7, #80]	@ 0x50
 8008372:	2300      	movs	r3, #0
 8008374:	657b      	str	r3, [r7, #84]	@ 0x54
 8008376:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800837a:	460b      	mov	r3, r1
 800837c:	4313      	orrs	r3, r2
 800837e:	d04d      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8008380:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008384:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008388:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800838c:	d028      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
 800838e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008392:	d821      	bhi.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008394:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008398:	d024      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800839a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800839e:	d81b      	bhi.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80083a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083a4:	d00e      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80083a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083aa:	d815      	bhi.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d01b      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80083b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083b4:	d110      	bne.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80083b6:	4b16      	ldr	r3, [pc, #88]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80083b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ba:	4a15      	ldr	r2, [pc, #84]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80083bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083c0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80083c2:	e012      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80083c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80083c8:	332c      	adds	r3, #44	@ 0x2c
 80083ca:	4618      	mov	r0, r3
 80083cc:	f002 f900 	bl	800a5d0 <RCCEx_PLL3_Config>
 80083d0:	4603      	mov	r3, r0
 80083d2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80083d6:	e008      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80083de:	e004      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80083e0:	bf00      	nop
 80083e2:	e002      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80083e4:	bf00      	nop
 80083e6:	e000      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80083e8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80083ea:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d110      	bne.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80083f2:	4b07      	ldr	r3, [pc, #28]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80083f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80083f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80083fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008404:	4a02      	ldr	r2, [pc, #8]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008406:	430b      	orrs	r3, r1
 8008408:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800840c:	e006      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800840e:	bf00      	nop
 8008410:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008414:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008418:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800841c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008428:	64bb      	str	r3, [r7, #72]	@ 0x48
 800842a:	2300      	movs	r3, #0
 800842c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800842e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008432:	460b      	mov	r3, r1
 8008434:	4313      	orrs	r3, r2
 8008436:	f000 80b5 	beq.w	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800843a:	2300      	movs	r3, #0
 800843c:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008440:	4b9d      	ldr	r3, [pc, #628]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008446:	f003 0304 	and.w	r3, r3, #4
 800844a:	2b00      	cmp	r3, #0
 800844c:	d113      	bne.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800844e:	4b9a      	ldr	r3, [pc, #616]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008454:	4a98      	ldr	r2, [pc, #608]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008456:	f043 0304 	orr.w	r3, r3, #4
 800845a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800845e:	4b96      	ldr	r3, [pc, #600]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008460:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008464:	f003 0304 	and.w	r3, r3, #4
 8008468:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800846c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8008470:	2301      	movs	r3, #1
 8008472:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008476:	4b91      	ldr	r3, [pc, #580]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800847a:	4a90      	ldr	r2, [pc, #576]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800847c:	f043 0301 	orr.w	r3, r3, #1
 8008480:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008482:	f7f9 fd03 	bl	8001e8c <HAL_GetTick>
 8008486:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800848a:	e00b      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800848c:	f7f9 fcfe 	bl	8001e8c <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	2b02      	cmp	r3, #2
 800849a:	d903      	bls.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 800849c:	2303      	movs	r3, #3
 800849e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80084a2:	e005      	b.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80084a4:	4b85      	ldr	r3, [pc, #532]	@ (80086bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80084a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d0ed      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 80084b0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d165      	bne.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80084b8:	4b7f      	ldr	r3, [pc, #508]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80084ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80084c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d023      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x746>
 80084ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084d2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80084d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084da:	4293      	cmp	r3, r2
 80084dc:	d01b      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80084de:	4b76      	ldr	r3, [pc, #472]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80084e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80084ec:	4b72      	ldr	r3, [pc, #456]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80084ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084f2:	4a71      	ldr	r2, [pc, #452]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80084f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80084fc:	4b6e      	ldr	r3, [pc, #440]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80084fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008502:	4a6d      	ldr	r2, [pc, #436]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008508:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800850c:	4a6a      	ldr	r2, [pc, #424]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800850e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008512:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	2b00      	cmp	r3, #0
 8008520:	d019      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008522:	f7f9 fcb3 	bl	8001e8c <HAL_GetTick>
 8008526:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800852a:	e00d      	b.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800852c:	f7f9 fcae 	bl	8001e8c <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008536:	1ad2      	subs	r2, r2, r3
 8008538:	f241 3388 	movw	r3, #5000	@ 0x1388
 800853c:	429a      	cmp	r2, r3
 800853e:	d903      	bls.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8008540:	2303      	movs	r3, #3
 8008542:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8008546:	e006      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008548:	4b5b      	ldr	r3, [pc, #364]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800854a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800854e:	f003 0302 	and.w	r3, r3, #2
 8008552:	2b00      	cmp	r3, #0
 8008554:	d0ea      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8008556:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10d      	bne.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800855e:	4b56      	ldr	r3, [pc, #344]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008560:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008564:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008568:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800856c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008570:	4a51      	ldr	r2, [pc, #324]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008572:	430b      	orrs	r3, r1
 8008574:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008578:	e008      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800857a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800857e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8008582:	e003      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008584:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008588:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800858c:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8008590:	2b01      	cmp	r3, #1
 8008592:	d107      	bne.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008594:	4b48      	ldr	r3, [pc, #288]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008596:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800859a:	4a47      	ldr	r2, [pc, #284]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800859c:	f023 0304 	bic.w	r3, r3, #4
 80085a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80085a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80085b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80085b2:	2300      	movs	r3, #0
 80085b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80085b6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80085ba:	460b      	mov	r3, r1
 80085bc:	4313      	orrs	r3, r2
 80085be:	d042      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80085c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80085c8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80085cc:	d022      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x844>
 80085ce:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80085d2:	d81b      	bhi.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80085d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085d8:	d011      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80085da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085de:	d815      	bhi.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d019      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80085e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80085e8:	d110      	bne.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80085ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085ee:	3308      	adds	r3, #8
 80085f0:	4618      	mov	r0, r3
 80085f2:	f001 ff55 	bl	800a4a0 <RCCEx_PLL2_Config>
 80085f6:	4603      	mov	r3, r0
 80085f8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80085fc:	e00d      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085fe:	4b2e      	ldr	r3, [pc, #184]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008602:	4a2d      	ldr	r2, [pc, #180]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008608:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800860a:	e006      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008612:	e002      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8008614:	bf00      	nop
 8008616:	e000      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8008618:	bf00      	nop
    }
    if (ret == HAL_OK)
 800861a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10d      	bne.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8008622:	4b25      	ldr	r3, [pc, #148]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008628:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800862c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008630:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008634:	4a20      	ldr	r2, [pc, #128]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008636:	430b      	orrs	r3, r1
 8008638:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800863c:	e003      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800863e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008642:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008646:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008652:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008654:	2300      	movs	r3, #0
 8008656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008658:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800865c:	460b      	mov	r3, r1
 800865e:	4313      	orrs	r3, r2
 8008660:	d032      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8008662:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008666:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800866a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800866e:	d00b      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008670:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008674:	d804      	bhi.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8008676:	2b00      	cmp	r3, #0
 8008678:	d008      	beq.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800867a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800867e:	d007      	beq.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008686:	e004      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8008688:	bf00      	nop
 800868a:	e002      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800868c:	bf00      	nop
 800868e:	e000      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8008690:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008692:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008696:	2b00      	cmp	r3, #0
 8008698:	d112      	bne.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800869a:	4b07      	ldr	r3, [pc, #28]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800869c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80086a0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80086a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80086ac:	4a02      	ldr	r2, [pc, #8]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80086ae:	430b      	orrs	r3, r1
 80086b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80086b4:	e008      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 80086b6:	bf00      	nop
 80086b8:	46020c00 	.word	0x46020c00
 80086bc:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80086c4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80086c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80086d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80086d6:	2300      	movs	r3, #0
 80086d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80086da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80086de:	460b      	mov	r3, r1
 80086e0:	4313      	orrs	r3, r2
 80086e2:	d019      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80086e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086f0:	d105      	bne.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80086f2:	4b88      	ldr	r3, [pc, #544]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80086f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f6:	4a87      	ldr	r2, [pc, #540]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80086f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086fc:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80086fe:	4b85      	ldr	r3, [pc, #532]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008700:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008704:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008708:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800870c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008710:	4a80      	ldr	r2, [pc, #512]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008712:	430b      	orrs	r3, r1
 8008714:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8008718:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800871c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008720:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008724:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008726:	2300      	movs	r3, #0
 8008728:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800872a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800872e:	460b      	mov	r3, r1
 8008730:	4313      	orrs	r3, r2
 8008732:	d00c      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008734:	4b77      	ldr	r3, [pc, #476]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800873a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800873e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008742:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008746:	4973      	ldr	r1, [pc, #460]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008748:	4313      	orrs	r3, r2
 800874a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800874e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008756:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800875a:	623b      	str	r3, [r7, #32]
 800875c:	2300      	movs	r3, #0
 800875e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008760:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008764:	460b      	mov	r3, r1
 8008766:	4313      	orrs	r3, r2
 8008768:	d00c      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800876a:	4b6a      	ldr	r3, [pc, #424]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800876c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008770:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008774:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008778:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800877c:	4965      	ldr	r1, [pc, #404]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800877e:	4313      	orrs	r3, r2
 8008780:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008784:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008790:	61bb      	str	r3, [r7, #24]
 8008792:	2300      	movs	r3, #0
 8008794:	61fb      	str	r3, [r7, #28]
 8008796:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800879a:	460b      	mov	r3, r1
 800879c:	4313      	orrs	r3, r2
 800879e:	d00c      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80087a0:	4b5c      	ldr	r3, [pc, #368]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80087a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80087a6:	f023 0218 	bic.w	r2, r3, #24
 80087aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80087ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80087b2:	4958      	ldr	r1, [pc, #352]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80087b4:	4313      	orrs	r3, r2
 80087b6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80087ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80087c6:	613b      	str	r3, [r7, #16]
 80087c8:	2300      	movs	r3, #0
 80087ca:	617b      	str	r3, [r7, #20]
 80087cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80087d0:	460b      	mov	r3, r1
 80087d2:	4313      	orrs	r3, r2
 80087d4:	d032      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80087d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80087da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80087de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087e2:	d105      	bne.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087e4:	4b4b      	ldr	r3, [pc, #300]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80087e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e8:	4a4a      	ldr	r2, [pc, #296]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80087ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087ee:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80087f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80087f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80087f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80087fc:	d108      	bne.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80087fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008802:	3308      	adds	r3, #8
 8008804:	4618      	mov	r0, r3
 8008806:	f001 fe4b 	bl	800a4a0 <RCCEx_PLL2_Config>
 800880a:	4603      	mov	r3, r0
 800880c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8008810:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10d      	bne.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008818:	4b3e      	ldr	r3, [pc, #248]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800881a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800881e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008822:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008826:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800882a:	493a      	ldr	r1, [pc, #232]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800882c:	4313      	orrs	r3, r2
 800882e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008832:	e003      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008834:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008838:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800883c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008844:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8008848:	60bb      	str	r3, [r7, #8]
 800884a:	2300      	movs	r3, #0
 800884c:	60fb      	str	r3, [r7, #12]
 800884e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008852:	460b      	mov	r3, r1
 8008854:	4313      	orrs	r3, r2
 8008856:	d03a      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8008858:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800885c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008860:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008864:	d00e      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8008866:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800886a:	d815      	bhi.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 800886c:	2b00      	cmp	r3, #0
 800886e:	d017      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8008870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008874:	d110      	bne.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008876:	4b27      	ldr	r3, [pc, #156]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800887a:	4a26      	ldr	r2, [pc, #152]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800887c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008880:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008882:	e00e      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008884:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008888:	3308      	adds	r3, #8
 800888a:	4618      	mov	r0, r3
 800888c:	f001 fe08 	bl	800a4a0 <RCCEx_PLL2_Config>
 8008890:	4603      	mov	r3, r0
 8008892:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008896:	e004      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800889e:	e000      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 80088a0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80088a2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10d      	bne.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80088aa:	4b1a      	ldr	r3, [pc, #104]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80088ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088b0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80088b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80088b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088bc:	4915      	ldr	r1, [pc, #84]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80088c4:	e003      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80088ca:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80088ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80088da:	603b      	str	r3, [r7, #0]
 80088dc:	2300      	movs	r3, #0
 80088de:	607b      	str	r3, [r7, #4]
 80088e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80088e4:	460b      	mov	r3, r1
 80088e6:	4313      	orrs	r3, r2
 80088e8:	d00c      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80088ea:	4b0a      	ldr	r3, [pc, #40]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80088ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80088f0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80088f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80088f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80088fc:	4905      	ldr	r1, [pc, #20]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80088fe:	4313      	orrs	r3, r2
 8008900:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8008904:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8008908:	4618      	mov	r0, r3
 800890a:	37e0      	adds	r7, #224	@ 0xe0
 800890c:	46bd      	mov	sp, r7
 800890e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008912:	bf00      	nop
 8008914:	46020c00 	.word	0x46020c00

08008918 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008918:	b480      	push	{r7}
 800891a:	b089      	sub	sp, #36	@ 0x24
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008920:	4ba6      	ldr	r3, [pc, #664]	@ (8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008928:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800892a:	4ba4      	ldr	r3, [pc, #656]	@ (8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800892c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800892e:	f003 0303 	and.w	r3, r3, #3
 8008932:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8008934:	4ba1      	ldr	r3, [pc, #644]	@ (8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008938:	0a1b      	lsrs	r3, r3, #8
 800893a:	f003 030f 	and.w	r3, r3, #15
 800893e:	3301      	adds	r3, #1
 8008940:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008942:	4b9e      	ldr	r3, [pc, #632]	@ (8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008946:	091b      	lsrs	r3, r3, #4
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800894e:	4b9b      	ldr	r3, [pc, #620]	@ (8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008952:	08db      	lsrs	r3, r3, #3
 8008954:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	fb02 f303 	mul.w	r3, r2, r3
 800895e:	ee07 3a90 	vmov	s15, r3
 8008962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008966:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	2b03      	cmp	r3, #3
 800896e:	d062      	beq.n	8008a36 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	2b03      	cmp	r3, #3
 8008974:	f200 8081 	bhi.w	8008a7a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d024      	beq.n	80089c8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2b02      	cmp	r3, #2
 8008982:	d17a      	bne.n	8008a7a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8008992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008996:	4b89      	ldr	r3, [pc, #548]	@ (8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800899a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800899e:	ee07 3a90 	vmov	s15, r3
 80089a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80089a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80089aa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80089ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80089b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80089b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80089be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089c6:	e08f      	b.n	8008ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80089c8:	4b7c      	ldr	r3, [pc, #496]	@ (8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d005      	beq.n	80089e0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80089d4:	4b79      	ldr	r3, [pc, #484]	@ (8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	0f1b      	lsrs	r3, r3, #28
 80089da:	f003 030f 	and.w	r3, r3, #15
 80089de:	e006      	b.n	80089ee <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80089e0:	4b76      	ldr	r3, [pc, #472]	@ (8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80089e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80089e6:	041b      	lsls	r3, r3, #16
 80089e8:	0f1b      	lsrs	r3, r3, #28
 80089ea:	f003 030f 	and.w	r3, r3, #15
 80089ee:	4a76      	ldr	r2, [pc, #472]	@ (8008bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80089f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089f4:	ee07 3a90 	vmov	s15, r3
 80089f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	ee07 3a90 	vmov	s15, r3
 8008a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a14:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a18:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008a1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a28:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a34:	e058      	b.n	8008ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	ee07 3a90 	vmov	s15, r3
 8008a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a40:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8008a44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a48:	4b5c      	ldr	r3, [pc, #368]	@ (8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a50:	ee07 3a90 	vmov	s15, r3
 8008a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a58:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a5c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008a60:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a64:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a78:	e036      	b.n	8008ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008a7a:	4b50      	ldr	r3, [pc, #320]	@ (8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d005      	beq.n	8008a92 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8008a86:	4b4d      	ldr	r3, [pc, #308]	@ (8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	0f1b      	lsrs	r3, r3, #28
 8008a8c:	f003 030f 	and.w	r3, r3, #15
 8008a90:	e006      	b.n	8008aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8008a92:	4b4a      	ldr	r3, [pc, #296]	@ (8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008a94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008a98:	041b      	lsls	r3, r3, #16
 8008a9a:	0f1b      	lsrs	r3, r3, #28
 8008a9c:	f003 030f 	and.w	r3, r3, #15
 8008aa0:	4a49      	ldr	r2, [pc, #292]	@ (8008bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aa6:	ee07 3a90 	vmov	s15, r3
 8008aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	ee07 3a90 	vmov	s15, r3
 8008ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	ee07 3a90 	vmov	s15, r3
 8008ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aca:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ae2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ae6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008ae8:	4b34      	ldr	r3, [pc, #208]	@ (8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d017      	beq.n	8008b24 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008af4:	4b31      	ldr	r3, [pc, #196]	@ (8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008af8:	0a5b      	lsrs	r3, r3, #9
 8008afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8008b06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b0a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008b0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b1a:	ee17 2a90 	vmov	r2, s15
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	e002      	b.n	8008b2a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008b2a:	4b24      	ldr	r3, [pc, #144]	@ (8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d017      	beq.n	8008b66 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008b36:	4b21      	ldr	r3, [pc, #132]	@ (8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b3a:	0c1b      	lsrs	r3, r3, #16
 8008b3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b40:	ee07 3a90 	vmov	s15, r3
 8008b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008b48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b4c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008b50:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b5c:	ee17 2a90 	vmov	r2, s15
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	605a      	str	r2, [r3, #4]
 8008b64:	e002      	b.n	8008b6c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008b6c:	4b13      	ldr	r3, [pc, #76]	@ (8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d017      	beq.n	8008ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008b78:	4b10      	ldr	r3, [pc, #64]	@ (8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b7c:	0e1b      	lsrs	r3, r3, #24
 8008b7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b82:	ee07 3a90 	vmov	s15, r3
 8008b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8008b8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b8e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008b92:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b9e:	ee17 2a90 	vmov	r2, s15
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008ba6:	e002      	b.n	8008bae <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	609a      	str	r2, [r3, #8]
}
 8008bae:	bf00      	nop
 8008bb0:	3724      	adds	r7, #36	@ 0x24
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	46020c00 	.word	0x46020c00
 8008bc0:	4b742400 	.word	0x4b742400
 8008bc4:	46000000 	.word	0x46000000
 8008bc8:	0802fa0c 	.word	0x0802fa0c

08008bcc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b089      	sub	sp, #36	@ 0x24
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008bd4:	4ba6      	ldr	r3, [pc, #664]	@ (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bdc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008bde:	4ba4      	ldr	r3, [pc, #656]	@ (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be2:	f003 0303 	and.w	r3, r3, #3
 8008be6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8008be8:	4ba1      	ldr	r3, [pc, #644]	@ (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bec:	0a1b      	lsrs	r3, r3, #8
 8008bee:	f003 030f 	and.w	r3, r3, #15
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8008bf6:	4b9e      	ldr	r3, [pc, #632]	@ (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bfa:	091b      	lsrs	r3, r3, #4
 8008bfc:	f003 0301 	and.w	r3, r3, #1
 8008c00:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008c02:	4b9b      	ldr	r3, [pc, #620]	@ (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c06:	08db      	lsrs	r3, r3, #3
 8008c08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	fb02 f303 	mul.w	r3, r2, r3
 8008c12:	ee07 3a90 	vmov	s15, r3
 8008c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c1a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d062      	beq.n	8008cea <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	f200 8081 	bhi.w	8008d2e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d024      	beq.n	8008c7c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d17a      	bne.n	8008d2e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	ee07 3a90 	vmov	s15, r3
 8008c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c42:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c4a:	4b89      	ldr	r3, [pc, #548]	@ (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c52:	ee07 3a90 	vmov	s15, r3
 8008c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c5e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c7a:	e08f      	b.n	8008d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008c7c:	4b7c      	ldr	r3, [pc, #496]	@ (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d005      	beq.n	8008c94 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008c88:	4b79      	ldr	r3, [pc, #484]	@ (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	0f1b      	lsrs	r3, r3, #28
 8008c8e:	f003 030f 	and.w	r3, r3, #15
 8008c92:	e006      	b.n	8008ca2 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8008c94:	4b76      	ldr	r3, [pc, #472]	@ (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008c9a:	041b      	lsls	r3, r3, #16
 8008c9c:	0f1b      	lsrs	r3, r3, #28
 8008c9e:	f003 030f 	and.w	r3, r3, #15
 8008ca2:	4a76      	ldr	r2, [pc, #472]	@ (8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ca8:	ee07 3a90 	vmov	s15, r3
 8008cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	ee07 3a90 	vmov	s15, r3
 8008cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	ee07 3a90 	vmov	s15, r3
 8008cc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ccc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008cd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ce4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ce8:	e058      	b.n	8008d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	ee07 3a90 	vmov	s15, r3
 8008cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008cf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cfc:	4b5c      	ldr	r3, [pc, #368]	@ (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d04:	ee07 3a90 	vmov	s15, r3
 8008d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d10:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008d14:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008d18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d2c:	e036      	b.n	8008d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008d2e:	4b50      	ldr	r3, [pc, #320]	@ (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d005      	beq.n	8008d46 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8008d3a:	4b4d      	ldr	r3, [pc, #308]	@ (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	0f1b      	lsrs	r3, r3, #28
 8008d40:	f003 030f 	and.w	r3, r3, #15
 8008d44:	e006      	b.n	8008d54 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8008d46:	4b4a      	ldr	r3, [pc, #296]	@ (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008d48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008d4c:	041b      	lsls	r3, r3, #16
 8008d4e:	0f1b      	lsrs	r3, r3, #28
 8008d50:	f003 030f 	and.w	r3, r3, #15
 8008d54:	4a49      	ldr	r2, [pc, #292]	@ (8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	ee07 3a90 	vmov	s15, r3
 8008d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	ee07 3a90 	vmov	s15, r3
 8008d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d7e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d9a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008d9c:	4b34      	ldr	r3, [pc, #208]	@ (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d017      	beq.n	8008dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008da8:	4b31      	ldr	r3, [pc, #196]	@ (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dac:	0a5b      	lsrs	r3, r3, #9
 8008dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008db2:	ee07 3a90 	vmov	s15, r3
 8008db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8008dba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dbe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dce:	ee17 2a90 	vmov	r2, s15
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	601a      	str	r2, [r3, #0]
 8008dd6:	e002      	b.n	8008dde <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008dde:	4b24      	ldr	r3, [pc, #144]	@ (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d017      	beq.n	8008e1a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008dea:	4b21      	ldr	r3, [pc, #132]	@ (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dee:	0c1b      	lsrs	r3, r3, #16
 8008df0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008df4:	ee07 3a90 	vmov	s15, r3
 8008df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008dfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e00:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008e04:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e10:	ee17 2a90 	vmov	r2, s15
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	605a      	str	r2, [r3, #4]
 8008e18:	e002      	b.n	8008e20 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008e20:	4b13      	ldr	r3, [pc, #76]	@ (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d017      	beq.n	8008e5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008e2c:	4b10      	ldr	r3, [pc, #64]	@ (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e30:	0e1b      	lsrs	r3, r3, #24
 8008e32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8008e3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e42:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e52:	ee17 2a90 	vmov	r2, s15
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008e5a:	e002      	b.n	8008e62 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	609a      	str	r2, [r3, #8]
}
 8008e62:	bf00      	nop
 8008e64:	3724      	adds	r7, #36	@ 0x24
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	46020c00 	.word	0x46020c00
 8008e74:	4b742400 	.word	0x4b742400
 8008e78:	46000000 	.word	0x46000000
 8008e7c:	0802fa0c 	.word	0x0802fa0c

08008e80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b089      	sub	sp, #36	@ 0x24
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008e88:	4ba6      	ldr	r3, [pc, #664]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e90:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008e92:	4ba4      	ldr	r3, [pc, #656]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e96:	f003 0303 	and.w	r3, r3, #3
 8008e9a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8008e9c:	4ba1      	ldr	r3, [pc, #644]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ea0:	0a1b      	lsrs	r3, r3, #8
 8008ea2:	f003 030f 	and.w	r3, r3, #15
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008eaa:	4b9e      	ldr	r3, [pc, #632]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eae:	091b      	lsrs	r3, r3, #4
 8008eb0:	f003 0301 	and.w	r3, r3, #1
 8008eb4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008eb6:	4b9b      	ldr	r3, [pc, #620]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008eba:	08db      	lsrs	r3, r3, #3
 8008ebc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	fb02 f303 	mul.w	r3, r2, r3
 8008ec6:	ee07 3a90 	vmov	s15, r3
 8008eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ece:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	2b03      	cmp	r3, #3
 8008ed6:	d062      	beq.n	8008f9e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	f200 8081 	bhi.w	8008fe2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d024      	beq.n	8008f30 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d17a      	bne.n	8008fe2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	ee07 3a90 	vmov	s15, r3
 8008ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ef6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008efe:	4b89      	ldr	r3, [pc, #548]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f06:	ee07 3a90 	vmov	s15, r3
 8008f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f12:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800912c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f2a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8008f2e:	e08f      	b.n	8009050 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008f30:	4b7c      	ldr	r3, [pc, #496]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d005      	beq.n	8008f48 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8008f3c:	4b79      	ldr	r3, [pc, #484]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	0f1b      	lsrs	r3, r3, #28
 8008f42:	f003 030f 	and.w	r3, r3, #15
 8008f46:	e006      	b.n	8008f56 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8008f48:	4b76      	ldr	r3, [pc, #472]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008f4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008f4e:	041b      	lsls	r3, r3, #16
 8008f50:	0f1b      	lsrs	r3, r3, #28
 8008f52:	f003 030f 	and.w	r3, r3, #15
 8008f56:	4a76      	ldr	r2, [pc, #472]	@ (8009130 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f5c:	ee07 3a90 	vmov	s15, r3
 8008f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	ee07 3a90 	vmov	s15, r3
 8008f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	ee07 3a90 	vmov	s15, r3
 8008f78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f80:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800912c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008f84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f90:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f9c:	e058      	b.n	8009050 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	ee07 3a90 	vmov	s15, r3
 8008fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fa8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008fac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fb0:	4b5c      	ldr	r3, [pc, #368]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fb8:	ee07 3a90 	vmov	s15, r3
 8008fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fc4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800912c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008fc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008fcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fdc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008fe0:	e036      	b.n	8009050 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008fe2:	4b50      	ldr	r3, [pc, #320]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d005      	beq.n	8008ffa <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8008fee:	4b4d      	ldr	r3, [pc, #308]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	0f1b      	lsrs	r3, r3, #28
 8008ff4:	f003 030f 	and.w	r3, r3, #15
 8008ff8:	e006      	b.n	8009008 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8008ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008ffc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009000:	041b      	lsls	r3, r3, #16
 8009002:	0f1b      	lsrs	r3, r3, #28
 8009004:	f003 030f 	and.w	r3, r3, #15
 8009008:	4a49      	ldr	r2, [pc, #292]	@ (8009130 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800900a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800900e:	ee07 3a90 	vmov	s15, r3
 8009012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	ee07 3a90 	vmov	s15, r3
 800901c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009020:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	ee07 3a90 	vmov	s15, r3
 800902a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800902e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009032:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800912c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800903a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800903e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009042:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800904a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800904e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8009050:	4b34      	ldr	r3, [pc, #208]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d017      	beq.n	800908c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800905c:	4b31      	ldr	r3, [pc, #196]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800905e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009060:	0a5b      	lsrs	r3, r3, #9
 8009062:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009066:	ee07 3a90 	vmov	s15, r3
 800906a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800906e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009072:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009076:	edd7 6a07 	vldr	s13, [r7, #28]
 800907a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800907e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009082:	ee17 2a90 	vmov	r2, s15
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	e002      	b.n	8009092 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8009092:	4b24      	ldr	r3, [pc, #144]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800909a:	2b00      	cmp	r3, #0
 800909c:	d017      	beq.n	80090ce <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800909e:	4b21      	ldr	r3, [pc, #132]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80090a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090a2:	0c1b      	lsrs	r3, r3, #16
 80090a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090a8:	ee07 3a90 	vmov	s15, r3
 80090ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80090b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090b4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80090b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80090bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090c4:	ee17 2a90 	vmov	r2, s15
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	605a      	str	r2, [r3, #4]
 80090cc:	e002      	b.n	80090d4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80090d4:	4b13      	ldr	r3, [pc, #76]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80090d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d017      	beq.n	8009110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80090e0:	4b10      	ldr	r3, [pc, #64]	@ (8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80090e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090e4:	0e1b      	lsrs	r3, r3, #24
 80090e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090ea:	ee07 3a90 	vmov	s15, r3
 80090ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80090f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090f6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80090fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80090fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009106:	ee17 2a90 	vmov	r2, s15
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800910e:	e002      	b.n	8009116 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	609a      	str	r2, [r3, #8]
}
 8009116:	bf00      	nop
 8009118:	3724      	adds	r7, #36	@ 0x24
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	46020c00 	.word	0x46020c00
 8009128:	4b742400 	.word	0x4b742400
 800912c:	46000000 	.word	0x46000000
 8009130:	0802fa0c 	.word	0x0802fa0c

08009134 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b08e      	sub	sp, #56	@ 0x38
 8009138:	af00      	add	r7, sp, #0
 800913a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800913e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009142:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8009146:	430b      	orrs	r3, r1
 8009148:	d145      	bne.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800914a:	4baa      	ldr	r3, [pc, #680]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800914c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009150:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009154:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8009156:	4ba7      	ldr	r3, [pc, #668]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800915c:	f003 0302 	and.w	r3, r3, #2
 8009160:	2b02      	cmp	r3, #2
 8009162:	d108      	bne.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800916a:	d104      	bne.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800916c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009170:	637b      	str	r3, [r7, #52]	@ 0x34
 8009172:	f001 b987 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8009176:	4b9f      	ldr	r3, [pc, #636]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800917c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009180:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009184:	d114      	bne.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8009186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800918c:	d110      	bne.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800918e:	4b99      	ldr	r3, [pc, #612]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009198:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800919c:	d103      	bne.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800919e:	23fa      	movs	r3, #250	@ 0xfa
 80091a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80091a2:	f001 b96f 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80091a6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80091aa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80091ac:	f001 b96a 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80091b0:	4b90      	ldr	r3, [pc, #576]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091bc:	d107      	bne.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80091be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091c4:	d103      	bne.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80091c6:	4b8c      	ldr	r3, [pc, #560]	@ (80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80091c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ca:	f001 b95b 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80091ce:	2300      	movs	r3, #0
 80091d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80091d2:	f001 b957 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80091d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091da:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80091de:	430b      	orrs	r3, r1
 80091e0:	d151      	bne.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80091e2:	4b84      	ldr	r3, [pc, #528]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80091e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80091e8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80091ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80091ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f0:	2b80      	cmp	r3, #128	@ 0x80
 80091f2:	d035      	beq.n	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80091f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f6:	2b80      	cmp	r3, #128	@ 0x80
 80091f8:	d841      	bhi.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80091fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fc:	2b60      	cmp	r3, #96	@ 0x60
 80091fe:	d02a      	beq.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8009200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009202:	2b60      	cmp	r3, #96	@ 0x60
 8009204:	d83b      	bhi.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009208:	2b40      	cmp	r3, #64	@ 0x40
 800920a:	d009      	beq.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800920c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920e:	2b40      	cmp	r3, #64	@ 0x40
 8009210:	d835      	bhi.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00c      	beq.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8009218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921a:	2b20      	cmp	r3, #32
 800921c:	d012      	beq.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800921e:	e02e      	b.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009220:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009224:	4618      	mov	r0, r3
 8009226:	f7ff fb77 	bl	8008918 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800922a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800922e:	f001 b929 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009232:	f107 0318 	add.w	r3, r7, #24
 8009236:	4618      	mov	r0, r3
 8009238:	f7ff fcc8 	bl	8008bcc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009240:	f001 b920 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009244:	f107 030c 	add.w	r3, r7, #12
 8009248:	4618      	mov	r0, r3
 800924a:	f7ff fe19 	bl	8008e80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009252:	f001 b917 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009256:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800925a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800925c:	f001 b912 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009260:	4b64      	ldr	r3, [pc, #400]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800926c:	d103      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800926e:	4b63      	ldr	r3, [pc, #396]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8009270:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009272:	f001 b907 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800927a:	f001 b903 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 800927e:	2300      	movs	r3, #0
 8009280:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009282:	f001 b8ff 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800928a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800928e:	430b      	orrs	r3, r1
 8009290:	d158      	bne.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009292:	4b58      	ldr	r3, [pc, #352]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009294:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009298:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800929c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800929e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092a4:	d03b      	beq.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80092a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092ac:	d846      	bhi.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80092ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092b4:	d02e      	beq.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80092b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092bc:	d83e      	bhi.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80092be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092c4:	d00b      	beq.n	80092de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80092c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092cc:	d836      	bhi.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80092ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00d      	beq.n	80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80092d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092da:	d012      	beq.n	8009302 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80092dc:	e02e      	b.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7ff fb18 	bl	8008918 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80092e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092ec:	f001 b8ca 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092f0:	f107 0318 	add.w	r3, r7, #24
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7ff fc69 	bl	8008bcc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092fe:	f001 b8c1 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009302:	f107 030c 	add.w	r3, r7, #12
 8009306:	4618      	mov	r0, r3
 8009308:	f7ff fdba 	bl	8008e80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009310:	f001 b8b8 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009314:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009318:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800931a:	f001 b8b3 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800931e:	4b35      	ldr	r3, [pc, #212]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800932a:	d103      	bne.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800932c:	4b33      	ldr	r3, [pc, #204]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800932e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009330:	f001 b8a8 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009334:	2300      	movs	r3, #0
 8009336:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009338:	f001 b8a4 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800933c:	2300      	movs	r3, #0
 800933e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009340:	f001 b8a0 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8009344:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009348:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800934c:	430b      	orrs	r3, r1
 800934e:	d16e      	bne.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8009350:	4b28      	ldr	r3, [pc, #160]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009356:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800935a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800935c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009362:	d034      	beq.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8009364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009366:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800936a:	d85c      	bhi.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800936c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009372:	d00b      	beq.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8009374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009376:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800937a:	d854      	bhi.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800937c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937e:	2b00      	cmp	r3, #0
 8009380:	d016      	beq.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8009382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009384:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009388:	d009      	beq.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800938a:	e04c      	b.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800938c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009390:	4618      	mov	r0, r3
 8009392:	f7ff fac1 	bl	8008918 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009398:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800939a:	f001 b873 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800939e:	f107 0318 	add.w	r3, r7, #24
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff fc12 	bl	8008bcc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093ac:	f001 b86a 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80093b0:	4b10      	ldr	r3, [pc, #64]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80093b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093bc:	d103      	bne.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 80093be:	4b10      	ldr	r3, [pc, #64]	@ (8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80093c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80093c2:	f001 b85f 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80093c6:	2300      	movs	r3, #0
 80093c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093ca:	f001 b85b 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80093ce:	4b09      	ldr	r3, [pc, #36]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 0320 	and.w	r3, r3, #32
 80093d6:	2b20      	cmp	r3, #32
 80093d8:	d121      	bne.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80093da:	4b06      	ldr	r3, [pc, #24]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00e      	beq.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 80093e6:	4b03      	ldr	r3, [pc, #12]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	0e1b      	lsrs	r3, r3, #24
 80093ec:	f003 030f 	and.w	r3, r3, #15
 80093f0:	e00f      	b.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80093f2:	bf00      	nop
 80093f4:	46020c00 	.word	0x46020c00
 80093f8:	0007a120 	.word	0x0007a120
 80093fc:	00f42400 	.word	0x00f42400
 8009400:	02dc6c00 	.word	0x02dc6c00
 8009404:	4ba7      	ldr	r3, [pc, #668]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009406:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800940a:	041b      	lsls	r3, r3, #16
 800940c:	0e1b      	lsrs	r3, r3, #24
 800940e:	f003 030f 	and.w	r3, r3, #15
 8009412:	4aa5      	ldr	r2, [pc, #660]	@ (80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8009414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009418:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800941a:	f001 b833 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800941e:	2300      	movs	r3, #0
 8009420:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009422:	f001 b82f 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8009426:	2300      	movs	r3, #0
 8009428:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800942a:	f001 b82b 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800942e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009432:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8009436:	430b      	orrs	r3, r1
 8009438:	d17f      	bne.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800943a:	4b9a      	ldr	r3, [pc, #616]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800943c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009440:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009444:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8009446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009448:	2b00      	cmp	r3, #0
 800944a:	d165      	bne.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800944c:	4b95      	ldr	r3, [pc, #596]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800944e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009452:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8009456:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8009458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800945e:	d034      	beq.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009462:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009466:	d853      	bhi.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800946e:	d00b      	beq.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8009470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009472:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009476:	d84b      	bhi.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947a:	2b00      	cmp	r3, #0
 800947c:	d016      	beq.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800947e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009480:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009484:	d009      	beq.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8009486:	e043      	b.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009488:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800948c:	4618      	mov	r0, r3
 800948e:	f7ff fa43 	bl	8008918 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009494:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009496:	f000 bff5 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800949a:	f107 0318 	add.w	r3, r7, #24
 800949e:	4618      	mov	r0, r3
 80094a0:	f7ff fb94 	bl	8008bcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80094a8:	f000 bfec 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80094ac:	4b7d      	ldr	r3, [pc, #500]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80094b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094b8:	d103      	bne.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 80094ba:	4b7c      	ldr	r3, [pc, #496]	@ (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80094bc:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80094be:	f000 bfe1 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80094c2:	2300      	movs	r3, #0
 80094c4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80094c6:	f000 bfdd 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80094ca:	4b76      	ldr	r3, [pc, #472]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 0320 	and.w	r3, r3, #32
 80094d2:	2b20      	cmp	r3, #32
 80094d4:	d118      	bne.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80094d6:	4b73      	ldr	r3, [pc, #460]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d005      	beq.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80094e2:	4b70      	ldr	r3, [pc, #448]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	0e1b      	lsrs	r3, r3, #24
 80094e8:	f003 030f 	and.w	r3, r3, #15
 80094ec:	e006      	b.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 80094ee:	4b6d      	ldr	r3, [pc, #436]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80094f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80094f4:	041b      	lsls	r3, r3, #16
 80094f6:	0e1b      	lsrs	r3, r3, #24
 80094f8:	f003 030f 	and.w	r3, r3, #15
 80094fc:	4a6a      	ldr	r2, [pc, #424]	@ (80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80094fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009502:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009504:	f000 bfbe 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8009508:	2300      	movs	r3, #0
 800950a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800950c:	f000 bfba 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8009510:	2300      	movs	r3, #0
 8009512:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009514:	f000 bfb6 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8009518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800951e:	d108      	bne.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009520:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009524:	4618      	mov	r0, r3
 8009526:	f7ff f9f7 	bl	8008918 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800952a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952c:	637b      	str	r3, [r7, #52]	@ 0x34
 800952e:	f000 bfa9 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	637b      	str	r3, [r7, #52]	@ 0x34
 8009536:	f000 bfa5 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800953a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800953e:	1e51      	subs	r1, r2, #1
 8009540:	430b      	orrs	r3, r1
 8009542:	d136      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009544:	4b57      	ldr	r3, [pc, #348]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800954a:	f003 0303 	and.w	r3, r3, #3
 800954e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009552:	2b00      	cmp	r3, #0
 8009554:	d104      	bne.n	8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8009556:	f7fe fb55 	bl	8007c04 <HAL_RCC_GetPCLK2Freq>
 800955a:	6378      	str	r0, [r7, #52]	@ 0x34
 800955c:	f000 bf92 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8009560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009562:	2b01      	cmp	r3, #1
 8009564:	d104      	bne.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009566:	f7fe fa1d 	bl	80079a4 <HAL_RCC_GetSysClockFreq>
 800956a:	6378      	str	r0, [r7, #52]	@ 0x34
 800956c:	f000 bf8a 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8009570:	4b4c      	ldr	r3, [pc, #304]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800957c:	d106      	bne.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 800957e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009580:	2b02      	cmp	r3, #2
 8009582:	d103      	bne.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8009584:	4b4a      	ldr	r3, [pc, #296]	@ (80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8009586:	637b      	str	r3, [r7, #52]	@ 0x34
 8009588:	f000 bf7c 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800958c:	4b45      	ldr	r3, [pc, #276]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800958e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009592:	f003 0302 	and.w	r3, r3, #2
 8009596:	2b02      	cmp	r3, #2
 8009598:	d107      	bne.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800959a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959c:	2b03      	cmp	r3, #3
 800959e:	d104      	bne.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 80095a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80095a6:	f000 bf6d 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80095aa:	2300      	movs	r3, #0
 80095ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80095ae:	f000 bf69 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80095b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095b6:	1e91      	subs	r1, r2, #2
 80095b8:	430b      	orrs	r3, r1
 80095ba:	d136      	bne.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80095bc:	4b39      	ldr	r3, [pc, #228]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80095be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095c2:	f003 030c 	and.w	r3, r3, #12
 80095c6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80095c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d104      	bne.n	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80095ce:	f7fe fb05 	bl	8007bdc <HAL_RCC_GetPCLK1Freq>
 80095d2:	6378      	str	r0, [r7, #52]	@ 0x34
 80095d4:	f000 bf56 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80095d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095da:	2b04      	cmp	r3, #4
 80095dc:	d104      	bne.n	80095e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80095de:	f7fe f9e1 	bl	80079a4 <HAL_RCC_GetSysClockFreq>
 80095e2:	6378      	str	r0, [r7, #52]	@ 0x34
 80095e4:	f000 bf4e 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80095e8:	4b2e      	ldr	r3, [pc, #184]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095f4:	d106      	bne.n	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80095f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f8:	2b08      	cmp	r3, #8
 80095fa:	d103      	bne.n	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 80095fc:	4b2c      	ldr	r3, [pc, #176]	@ (80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80095fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009600:	f000 bf40 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009604:	4b27      	ldr	r3, [pc, #156]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009606:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800960a:	f003 0302 	and.w	r3, r3, #2
 800960e:	2b02      	cmp	r3, #2
 8009610:	d107      	bne.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8009612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009614:	2b0c      	cmp	r3, #12
 8009616:	d104      	bne.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8009618:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800961c:	637b      	str	r3, [r7, #52]	@ 0x34
 800961e:	f000 bf31 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8009622:	2300      	movs	r3, #0
 8009624:	637b      	str	r3, [r7, #52]	@ 0x34
 8009626:	f000 bf2d 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800962a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800962e:	1f11      	subs	r1, r2, #4
 8009630:	430b      	orrs	r3, r1
 8009632:	d13f      	bne.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009634:	4b1b      	ldr	r3, [pc, #108]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800963a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800963e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009642:	2b00      	cmp	r3, #0
 8009644:	d104      	bne.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009646:	f7fe fac9 	bl	8007bdc <HAL_RCC_GetPCLK1Freq>
 800964a:	6378      	str	r0, [r7, #52]	@ 0x34
 800964c:	f000 bf1a 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8009650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009652:	2b10      	cmp	r3, #16
 8009654:	d104      	bne.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009656:	f7fe f9a5 	bl	80079a4 <HAL_RCC_GetSysClockFreq>
 800965a:	6378      	str	r0, [r7, #52]	@ 0x34
 800965c:	f000 bf12 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8009660:	4b10      	ldr	r3, [pc, #64]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800966c:	d106      	bne.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800966e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009670:	2b20      	cmp	r3, #32
 8009672:	d103      	bne.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8009674:	4b0e      	ldr	r3, [pc, #56]	@ (80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8009676:	637b      	str	r3, [r7, #52]	@ 0x34
 8009678:	f000 bf04 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800967c:	4b09      	ldr	r3, [pc, #36]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800967e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009682:	f003 0302 	and.w	r3, r3, #2
 8009686:	2b02      	cmp	r3, #2
 8009688:	d107      	bne.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800968a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968c:	2b30      	cmp	r3, #48	@ 0x30
 800968e:	d104      	bne.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8009690:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009694:	637b      	str	r3, [r7, #52]	@ 0x34
 8009696:	f000 bef5 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800969a:	2300      	movs	r3, #0
 800969c:	637b      	str	r3, [r7, #52]	@ 0x34
 800969e:	f000 bef1 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80096a2:	bf00      	nop
 80096a4:	46020c00 	.word	0x46020c00
 80096a8:	0802fa0c 	.word	0x0802fa0c
 80096ac:	02dc6c00 	.word	0x02dc6c00
 80096b0:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80096b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096b8:	f1a2 0108 	sub.w	r1, r2, #8
 80096bc:	430b      	orrs	r3, r1
 80096be:	d136      	bne.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80096c0:	4ba4      	ldr	r3, [pc, #656]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80096c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80096c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80096ca:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80096cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d104      	bne.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80096d2:	f7fe fa83 	bl	8007bdc <HAL_RCC_GetPCLK1Freq>
 80096d6:	6378      	str	r0, [r7, #52]	@ 0x34
 80096d8:	f000 bed4 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80096dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096de:	2b40      	cmp	r3, #64	@ 0x40
 80096e0:	d104      	bne.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80096e2:	f7fe f95f 	bl	80079a4 <HAL_RCC_GetSysClockFreq>
 80096e6:	6378      	str	r0, [r7, #52]	@ 0x34
 80096e8:	f000 becc 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80096ec:	4b99      	ldr	r3, [pc, #612]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096f8:	d106      	bne.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80096fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fc:	2b80      	cmp	r3, #128	@ 0x80
 80096fe:	d103      	bne.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8009700:	4b95      	ldr	r3, [pc, #596]	@ (8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8009702:	637b      	str	r3, [r7, #52]	@ 0x34
 8009704:	f000 bebe 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009708:	4b92      	ldr	r3, [pc, #584]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800970a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b02      	cmp	r3, #2
 8009714:	d107      	bne.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8009716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009718:	2bc0      	cmp	r3, #192	@ 0xc0
 800971a:	d104      	bne.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 800971c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009720:	637b      	str	r3, [r7, #52]	@ 0x34
 8009722:	f000 beaf 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8009726:	2300      	movs	r3, #0
 8009728:	637b      	str	r3, [r7, #52]	@ 0x34
 800972a:	f000 beab 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800972e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009732:	f1a2 0110 	sub.w	r1, r2, #16
 8009736:	430b      	orrs	r3, r1
 8009738:	d139      	bne.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800973a:	4b86      	ldr	r3, [pc, #536]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800973c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009740:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009744:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009748:	2b00      	cmp	r3, #0
 800974a:	d104      	bne.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800974c:	f7fe fa46 	bl	8007bdc <HAL_RCC_GetPCLK1Freq>
 8009750:	6378      	str	r0, [r7, #52]	@ 0x34
 8009752:	f000 be97 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8009756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009758:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800975c:	d104      	bne.n	8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800975e:	f7fe f921 	bl	80079a4 <HAL_RCC_GetSysClockFreq>
 8009762:	6378      	str	r0, [r7, #52]	@ 0x34
 8009764:	f000 be8e 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8009768:	4b7a      	ldr	r3, [pc, #488]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009770:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009774:	d107      	bne.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8009776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800977c:	d103      	bne.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 800977e:	4b76      	ldr	r3, [pc, #472]	@ (8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8009780:	637b      	str	r3, [r7, #52]	@ 0x34
 8009782:	f000 be7f 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8009786:	4b73      	ldr	r3, [pc, #460]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800978c:	f003 0302 	and.w	r3, r3, #2
 8009790:	2b02      	cmp	r3, #2
 8009792:	d108      	bne.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8009794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009796:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800979a:	d104      	bne.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 800979c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80097a2:	f000 be6f 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80097a6:	2300      	movs	r3, #0
 80097a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80097aa:	f000 be6b 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80097ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097b2:	f1a2 0120 	sub.w	r1, r2, #32
 80097b6:	430b      	orrs	r3, r1
 80097b8:	d158      	bne.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80097ba:	4b66      	ldr	r3, [pc, #408]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80097bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097c0:	f003 0307 	and.w	r3, r3, #7
 80097c4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80097c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d104      	bne.n	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80097cc:	f7fe fa2e 	bl	8007c2c <HAL_RCC_GetPCLK3Freq>
 80097d0:	6378      	str	r0, [r7, #52]	@ 0x34
 80097d2:	f000 be57 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80097d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d104      	bne.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80097dc:	f7fe f8e2 	bl	80079a4 <HAL_RCC_GetSysClockFreq>
 80097e0:	6378      	str	r0, [r7, #52]	@ 0x34
 80097e2:	f000 be4f 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80097e6:	4b5b      	ldr	r3, [pc, #364]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097f2:	d106      	bne.n	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 80097f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	d103      	bne.n	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 80097fa:	4b57      	ldr	r3, [pc, #348]	@ (8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80097fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80097fe:	f000 be41 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009802:	4b54      	ldr	r3, [pc, #336]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009808:	f003 0302 	and.w	r3, r3, #2
 800980c:	2b02      	cmp	r3, #2
 800980e:	d107      	bne.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8009810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009812:	2b03      	cmp	r3, #3
 8009814:	d104      	bne.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8009816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800981a:	637b      	str	r3, [r7, #52]	@ 0x34
 800981c:	f000 be32 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8009820:	4b4c      	ldr	r3, [pc, #304]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 0320 	and.w	r3, r3, #32
 8009828:	2b20      	cmp	r3, #32
 800982a:	d11b      	bne.n	8009864 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 800982c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982e:	2b04      	cmp	r3, #4
 8009830:	d118      	bne.n	8009864 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009832:	4b48      	ldr	r3, [pc, #288]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800983a:	2b00      	cmp	r3, #0
 800983c:	d005      	beq.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 800983e:	4b45      	ldr	r3, [pc, #276]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	0e1b      	lsrs	r3, r3, #24
 8009844:	f003 030f 	and.w	r3, r3, #15
 8009848:	e006      	b.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800984a:	4b42      	ldr	r3, [pc, #264]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800984c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009850:	041b      	lsls	r3, r3, #16
 8009852:	0e1b      	lsrs	r3, r3, #24
 8009854:	f003 030f 	and.w	r3, r3, #15
 8009858:	4a40      	ldr	r2, [pc, #256]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800985a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800985e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009860:	f000 be10 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8009864:	2300      	movs	r3, #0
 8009866:	637b      	str	r3, [r7, #52]	@ 0x34
 8009868:	f000 be0c 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800986c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009870:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009874:	430b      	orrs	r3, r1
 8009876:	d173      	bne.n	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8009878:	4b36      	ldr	r3, [pc, #216]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800987a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800987e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009882:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8009884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800988a:	d104      	bne.n	8009896 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800988c:	f7fe f88a 	bl	80079a4 <HAL_RCC_GetSysClockFreq>
 8009890:	6378      	str	r0, [r7, #52]	@ 0x34
 8009892:	f000 bdf7 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8009896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800989c:	d108      	bne.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800989e:	f107 0318 	add.w	r3, r7, #24
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7ff f992 	bl	8008bcc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80098a8:	6a3b      	ldr	r3, [r7, #32]
 80098aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80098ac:	f000 bdea 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80098b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d104      	bne.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80098b6:	f7fe f977 	bl	8007ba8 <HAL_RCC_GetHCLKFreq>
 80098ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80098bc:	f000 bde2 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80098c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80098c6:	d122      	bne.n	800990e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80098c8:	4b22      	ldr	r3, [pc, #136]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 0320 	and.w	r3, r3, #32
 80098d0:	2b20      	cmp	r3, #32
 80098d2:	d118      	bne.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80098d4:	4b1f      	ldr	r3, [pc, #124]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d005      	beq.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80098e0:	4b1c      	ldr	r3, [pc, #112]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	0e1b      	lsrs	r3, r3, #24
 80098e6:	f003 030f 	and.w	r3, r3, #15
 80098ea:	e006      	b.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80098ec:	4b19      	ldr	r3, [pc, #100]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80098ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80098f2:	041b      	lsls	r3, r3, #16
 80098f4:	0e1b      	lsrs	r3, r3, #24
 80098f6:	f003 030f 	and.w	r3, r3, #15
 80098fa:	4a18      	ldr	r2, [pc, #96]	@ (800995c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80098fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009900:	637b      	str	r3, [r7, #52]	@ 0x34
 8009902:	f000 bdbf 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8009906:	2300      	movs	r3, #0
 8009908:	637b      	str	r3, [r7, #52]	@ 0x34
 800990a:	f000 bdbb 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800990e:	4b11      	ldr	r3, [pc, #68]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009916:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800991a:	d107      	bne.n	800992c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 800991c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009922:	d103      	bne.n	800992c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8009924:	4b0c      	ldr	r3, [pc, #48]	@ (8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8009926:	637b      	str	r3, [r7, #52]	@ 0x34
 8009928:	f000 bdac 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800992c:	4b09      	ldr	r3, [pc, #36]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009938:	d107      	bne.n	800994a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800993a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009940:	d103      	bne.n	800994a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8009942:	4b05      	ldr	r3, [pc, #20]	@ (8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8009944:	637b      	str	r3, [r7, #52]	@ 0x34
 8009946:	f000 bd9d 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800994a:	2300      	movs	r3, #0
 800994c:	637b      	str	r3, [r7, #52]	@ 0x34
 800994e:	f000 bd99 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8009952:	bf00      	nop
 8009954:	46020c00 	.word	0x46020c00
 8009958:	00f42400 	.word	0x00f42400
 800995c:	0802fa0c 	.word	0x0802fa0c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8009960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009964:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009968:	430b      	orrs	r3, r1
 800996a:	d158      	bne.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800996c:	4bad      	ldr	r3, [pc, #692]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800996e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009972:	f003 0307 	and.w	r3, r3, #7
 8009976:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997a:	2b04      	cmp	r3, #4
 800997c:	d84b      	bhi.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800997e:	a201      	add	r2, pc, #4	@ (adr r2, 8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8009980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009984:	080099bd 	.word	0x080099bd
 8009988:	08009999 	.word	0x08009999
 800998c:	080099ab 	.word	0x080099ab
 8009990:	080099c7 	.word	0x080099c7
 8009994:	080099d1 	.word	0x080099d1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009998:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800999c:	4618      	mov	r0, r3
 800999e:	f7fe ffbb 	bl	8008918 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80099a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099a6:	f000 bd6d 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099aa:	f107 030c 	add.w	r3, r7, #12
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7ff fa66 	bl	8008e80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099b8:	f000 bd64 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80099bc:	f7fe f8f4 	bl	8007ba8 <HAL_RCC_GetHCLKFreq>
 80099c0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80099c2:	f000 bd5f 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80099c6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80099ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099cc:	f000 bd5a 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80099d0:	4b94      	ldr	r3, [pc, #592]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 0320 	and.w	r3, r3, #32
 80099d8:	2b20      	cmp	r3, #32
 80099da:	d118      	bne.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80099dc:	4b91      	ldr	r3, [pc, #580]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d005      	beq.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 80099e8:	4b8e      	ldr	r3, [pc, #568]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	0e1b      	lsrs	r3, r3, #24
 80099ee:	f003 030f 	and.w	r3, r3, #15
 80099f2:	e006      	b.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 80099f4:	4b8b      	ldr	r3, [pc, #556]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80099f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80099fa:	041b      	lsls	r3, r3, #16
 80099fc:	0e1b      	lsrs	r3, r3, #24
 80099fe:	f003 030f 	and.w	r3, r3, #15
 8009a02:	4a89      	ldr	r2, [pc, #548]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a08:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009a0a:	f000 bd3b 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a12:	f000 bd37 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009a16:	2300      	movs	r3, #0
 8009a18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a1a:	f000 bd33 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8009a1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a22:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8009a26:	430b      	orrs	r3, r1
 8009a28:	d167      	bne.n	8009afa <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8009a2a:	4b7e      	ldr	r3, [pc, #504]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a30:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009a34:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009a3c:	d036      	beq.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8009a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009a44:	d855      	bhi.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8009a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a4c:	d029      	beq.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8009a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a54:	d84d      	bhi.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8009a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a5c:	d013      	beq.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8009a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a64:	d845      	bhi.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8009a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d015      	beq.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8009a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a72:	d13e      	bne.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7fe ff4d 	bl	8008918 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a82:	f000 bcff 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a86:	f107 030c 	add.w	r3, r7, #12
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7ff f9f8 	bl	8008e80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a94:	f000 bcf6 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8009a98:	f7fe f886 	bl	8007ba8 <HAL_RCC_GetHCLKFreq>
 8009a9c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009a9e:	f000 bcf1 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009aa2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009aa6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009aa8:	f000 bcec 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009aac:	4b5d      	ldr	r3, [pc, #372]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 0320 	and.w	r3, r3, #32
 8009ab4:	2b20      	cmp	r3, #32
 8009ab6:	d118      	bne.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009ab8:	4b5a      	ldr	r3, [pc, #360]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d005      	beq.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8009ac4:	4b57      	ldr	r3, [pc, #348]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	0e1b      	lsrs	r3, r3, #24
 8009aca:	f003 030f 	and.w	r3, r3, #15
 8009ace:	e006      	b.n	8009ade <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8009ad0:	4b54      	ldr	r3, [pc, #336]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009ad2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009ad6:	041b      	lsls	r3, r3, #16
 8009ad8:	0e1b      	lsrs	r3, r3, #24
 8009ada:	f003 030f 	and.w	r3, r3, #15
 8009ade:	4a52      	ldr	r2, [pc, #328]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ae4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009ae6:	f000 bccd 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009aea:	2300      	movs	r3, #0
 8009aec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009aee:	f000 bcc9 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009af2:	2300      	movs	r3, #0
 8009af4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009af6:	f000 bcc5 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8009afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009afe:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8009b02:	430b      	orrs	r3, r1
 8009b04:	d14c      	bne.n	8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009b06:	4b47      	ldr	r3, [pc, #284]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009b10:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d104      	bne.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009b18:	f7fe f860 	bl	8007bdc <HAL_RCC_GetPCLK1Freq>
 8009b1c:	6378      	str	r0, [r7, #52]	@ 0x34
 8009b1e:	f000 bcb1 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8009b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b28:	d104      	bne.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009b2a:	f7fd ff3b 	bl	80079a4 <HAL_RCC_GetSysClockFreq>
 8009b2e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009b30:	f000 bca8 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009b34:	4b3b      	ldr	r3, [pc, #236]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b40:	d107      	bne.n	8009b52 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8009b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b48:	d103      	bne.n	8009b52 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8009b4a:	4b38      	ldr	r3, [pc, #224]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b4e:	f000 bc99 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8009b52:	4b34      	ldr	r3, [pc, #208]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f003 0320 	and.w	r3, r3, #32
 8009b5a:	2b20      	cmp	r3, #32
 8009b5c:	d11c      	bne.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b64:	d118      	bne.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009b66:	4b2f      	ldr	r3, [pc, #188]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d005      	beq.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8009b72:	4b2c      	ldr	r3, [pc, #176]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	0e1b      	lsrs	r3, r3, #24
 8009b78:	f003 030f 	and.w	r3, r3, #15
 8009b7c:	e006      	b.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8009b7e:	4b29      	ldr	r3, [pc, #164]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009b80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b84:	041b      	lsls	r3, r3, #16
 8009b86:	0e1b      	lsrs	r3, r3, #24
 8009b88:	f003 030f 	and.w	r3, r3, #15
 8009b8c:	4a26      	ldr	r2, [pc, #152]	@ (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b94:	f000 bc76 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b9c:	f000 bc72 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8009ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ba4:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8009ba8:	430b      	orrs	r3, r1
 8009baa:	d152      	bne.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009bac:	4b1d      	ldr	r3, [pc, #116]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009bb2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009bb6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d104      	bne.n	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009bbe:	f7fe f80d 	bl	8007bdc <HAL_RCC_GetPCLK1Freq>
 8009bc2:	6378      	str	r0, [r7, #52]	@ 0x34
 8009bc4:	f000 bc5e 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8009bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bce:	d104      	bne.n	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009bd0:	f7fd fee8 	bl	80079a4 <HAL_RCC_GetSysClockFreq>
 8009bd4:	6378      	str	r0, [r7, #52]	@ 0x34
 8009bd6:	f000 bc55 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009bda:	4b12      	ldr	r3, [pc, #72]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009be6:	d107      	bne.n	8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8009be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bee:	d103      	bne.n	8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8009bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bf4:	f000 bc46 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8009bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f003 0320 	and.w	r3, r3, #32
 8009c00:	2b20      	cmp	r3, #32
 8009c02:	d122      	bne.n	8009c4a <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8009c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c0a:	d11e      	bne.n	8009c4a <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009c0c:	4b05      	ldr	r3, [pc, #20]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00b      	beq.n	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8009c18:	4b02      	ldr	r3, [pc, #8]	@ (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	0e1b      	lsrs	r3, r3, #24
 8009c1e:	f003 030f 	and.w	r3, r3, #15
 8009c22:	e00c      	b.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8009c24:	46020c00 	.word	0x46020c00
 8009c28:	0802fa0c 	.word	0x0802fa0c
 8009c2c:	00f42400 	.word	0x00f42400
 8009c30:	4ba1      	ldr	r3, [pc, #644]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c36:	041b      	lsls	r3, r3, #16
 8009c38:	0e1b      	lsrs	r3, r3, #24
 8009c3a:	f003 030f 	and.w	r3, r3, #15
 8009c3e:	4a9f      	ldr	r2, [pc, #636]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c44:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c46:	f000 bc1d 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c4e:	f000 bc19 	b.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8009c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c56:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009c5a:	430b      	orrs	r3, r1
 8009c5c:	d151      	bne.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009c5e:	4b96      	ldr	r3, [pc, #600]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c64:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009c68:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6c:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c6e:	d024      	beq.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8009c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c72:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c74:	d842      	bhi.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8009c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c78:	2b80      	cmp	r3, #128	@ 0x80
 8009c7a:	d00d      	beq.n	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7e:	2b80      	cmp	r3, #128	@ 0x80
 8009c80:	d83c      	bhi.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8009c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d003      	beq.n	8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8009c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8a:	2b40      	cmp	r3, #64	@ 0x40
 8009c8c:	d011      	beq.n	8009cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8009c8e:	e035      	b.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009c90:	f7fd ffcc 	bl	8007c2c <HAL_RCC_GetPCLK3Freq>
 8009c94:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009c96:	e3f5      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009c98:	4b87      	ldr	r3, [pc, #540]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ca4:	d102      	bne.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8009ca6:	4b86      	ldr	r3, [pc, #536]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009ca8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009caa:	e3eb      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009cac:	2300      	movs	r3, #0
 8009cae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cb0:	e3e8      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8009cb2:	f7fd fe77 	bl	80079a4 <HAL_RCC_GetSysClockFreq>
 8009cb6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009cb8:	e3e4      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009cba:	4b7f      	ldr	r3, [pc, #508]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f003 0320 	and.w	r3, r3, #32
 8009cc2:	2b20      	cmp	r3, #32
 8009cc4:	d117      	bne.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009cc6:	4b7c      	ldr	r3, [pc, #496]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d005      	beq.n	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8009cd2:	4b79      	ldr	r3, [pc, #484]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	0e1b      	lsrs	r3, r3, #24
 8009cd8:	f003 030f 	and.w	r3, r3, #15
 8009cdc:	e006      	b.n	8009cec <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8009cde:	4b76      	ldr	r3, [pc, #472]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009ce0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009ce4:	041b      	lsls	r3, r3, #16
 8009ce6:	0e1b      	lsrs	r3, r3, #24
 8009ce8:	f003 030f 	and.w	r3, r3, #15
 8009cec:	4a73      	ldr	r2, [pc, #460]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cf2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009cf4:	e3c6      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cfa:	e3c3      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d00:	e3c0      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8009d02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d06:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8009d0a:	430b      	orrs	r3, r1
 8009d0c:	d147      	bne.n	8009d9e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009d0e:	4b6a      	ldr	r3, [pc, #424]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009d18:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d103      	bne.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009d20:	f7fd ff5c 	bl	8007bdc <HAL_RCC_GetPCLK1Freq>
 8009d24:	6378      	str	r0, [r7, #52]	@ 0x34
 8009d26:	e3ad      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8009d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d2e:	d103      	bne.n	8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009d30:	f7fd fe38 	bl	80079a4 <HAL_RCC_GetSysClockFreq>
 8009d34:	6378      	str	r0, [r7, #52]	@ 0x34
 8009d36:	e3a5      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009d38:	4b5f      	ldr	r3, [pc, #380]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d44:	d106      	bne.n	8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8009d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d4c:	d102      	bne.n	8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8009d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009d50:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d52:	e397      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8009d54:	4b58      	ldr	r3, [pc, #352]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f003 0320 	and.w	r3, r3, #32
 8009d5c:	2b20      	cmp	r3, #32
 8009d5e:	d11b      	bne.n	8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8009d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d62:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009d66:	d117      	bne.n	8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009d68:	4b53      	ldr	r3, [pc, #332]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d005      	beq.n	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8009d74:	4b50      	ldr	r3, [pc, #320]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	0e1b      	lsrs	r3, r3, #24
 8009d7a:	f003 030f 	and.w	r3, r3, #15
 8009d7e:	e006      	b.n	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8009d80:	4b4d      	ldr	r3, [pc, #308]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009d82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009d86:	041b      	lsls	r3, r3, #16
 8009d88:	0e1b      	lsrs	r3, r3, #24
 8009d8a:	f003 030f 	and.w	r3, r3, #15
 8009d8e:	4a4b      	ldr	r2, [pc, #300]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d96:	e375      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d9c:	e372      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8009d9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009da2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009da6:	430b      	orrs	r3, r1
 8009da8:	d164      	bne.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8009daa:	4b43      	ldr	r3, [pc, #268]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009db0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009db4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8009db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d120      	bne.n	8009dfe <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009dbc:	4b3e      	ldr	r3, [pc, #248]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 0320 	and.w	r3, r3, #32
 8009dc4:	2b20      	cmp	r3, #32
 8009dc6:	d117      	bne.n	8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d005      	beq.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8009dd4:	4b38      	ldr	r3, [pc, #224]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	0e1b      	lsrs	r3, r3, #24
 8009dda:	f003 030f 	and.w	r3, r3, #15
 8009dde:	e006      	b.n	8009dee <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8009de0:	4b35      	ldr	r3, [pc, #212]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009de2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009de6:	041b      	lsls	r3, r3, #16
 8009de8:	0e1b      	lsrs	r3, r3, #24
 8009dea:	f003 030f 	and.w	r3, r3, #15
 8009dee:	4a33      	ldr	r2, [pc, #204]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009df6:	e345      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dfc:	e342      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8009dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e0c:	d112      	bne.n	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e14:	d10e      	bne.n	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e16:	4b28      	ldr	r3, [pc, #160]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009e18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e24:	d102      	bne.n	8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8009e26:	23fa      	movs	r3, #250	@ 0xfa
 8009e28:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e2a:	e32b      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009e2c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009e30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e32:	e327      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009e34:	4b20      	ldr	r3, [pc, #128]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e40:	d106      	bne.n	8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8009e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e48:	d102      	bne.n	8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8009e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e4e:	e319      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009e50:	4b19      	ldr	r3, [pc, #100]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009e52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e56:	f003 0302 	and.w	r3, r3, #2
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d107      	bne.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e64:	d103      	bne.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8009e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e6c:	e30a      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e72:	e307      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e78:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009e7c:	430b      	orrs	r3, r1
 8009e7e:	d16b      	bne.n	8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009e80:	4b0d      	ldr	r3, [pc, #52]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009e82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e86:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009e8a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8009e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d127      	bne.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009e92:	4b09      	ldr	r3, [pc, #36]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f003 0320 	and.w	r3, r3, #32
 8009e9a:	2b20      	cmp	r3, #32
 8009e9c:	d11e      	bne.n	8009edc <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009e9e:	4b06      	ldr	r3, [pc, #24]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00c      	beq.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8009eaa:	4b03      	ldr	r3, [pc, #12]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	0e1b      	lsrs	r3, r3, #24
 8009eb0:	f003 030f 	and.w	r3, r3, #15
 8009eb4:	e00d      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8009eb6:	bf00      	nop
 8009eb8:	46020c00 	.word	0x46020c00
 8009ebc:	0802fa0c 	.word	0x0802fa0c
 8009ec0:	00f42400 	.word	0x00f42400
 8009ec4:	4b94      	ldr	r3, [pc, #592]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009ec6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009eca:	041b      	lsls	r3, r3, #16
 8009ecc:	0e1b      	lsrs	r3, r3, #24
 8009ece:	f003 030f 	and.w	r3, r3, #15
 8009ed2:	4a92      	ldr	r2, [pc, #584]	@ (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8009ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eda:	e2d3      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8009edc:	2300      	movs	r3, #0
 8009ede:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ee0:	e2d0      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009ee2:	4b8d      	ldr	r3, [pc, #564]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009eec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ef0:	d112      	bne.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ef8:	d10e      	bne.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009efa:	4b87      	ldr	r3, [pc, #540]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009efc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f08:	d102      	bne.n	8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8009f0a:	23fa      	movs	r3, #250	@ 0xfa
 8009f0c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009f0e:	e2b9      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009f10:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009f14:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009f16:	e2b5      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009f18:	4b7f      	ldr	r3, [pc, #508]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f24:	d106      	bne.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8009f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f2c:	d102      	bne.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8009f2e:	4b7c      	ldr	r3, [pc, #496]	@ (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f32:	e2a7      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009f34:	4b78      	ldr	r3, [pc, #480]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009f36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f3a:	f003 0302 	and.w	r3, r3, #2
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d107      	bne.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8009f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f48:	d103      	bne.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8009f4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f50:	e298      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009f52:	2300      	movs	r3, #0
 8009f54:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f56:	e295      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f5c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009f60:	430b      	orrs	r3, r1
 8009f62:	d147      	bne.n	8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009f64:	4b6c      	ldr	r3, [pc, #432]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009f6a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009f6e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d103      	bne.n	8009f7e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009f76:	f7fd fe31 	bl	8007bdc <HAL_RCC_GetPCLK1Freq>
 8009f7a:	6378      	str	r0, [r7, #52]	@ 0x34
 8009f7c:	e282      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009f7e:	4b66      	ldr	r3, [pc, #408]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f8c:	d112      	bne.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8009f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009f94:	d10e      	bne.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009f96:	4b60      	ldr	r3, [pc, #384]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009fa0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fa4:	d102      	bne.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8009fa6:	23fa      	movs	r3, #250	@ 0xfa
 8009fa8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009faa:	e26b      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009fac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009fb0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009fb2:	e267      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009fb4:	4b58      	ldr	r3, [pc, #352]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fc0:	d106      	bne.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009fc8:	d102      	bne.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8009fca:	4b55      	ldr	r3, [pc, #340]	@ (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fce:	e259      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009fd0:	4b51      	ldr	r3, [pc, #324]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009fd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009fd6:	f003 0302 	and.w	r3, r3, #2
 8009fda:	2b02      	cmp	r3, #2
 8009fdc:	d107      	bne.n	8009fee <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8009fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009fe4:	d103      	bne.n	8009fee <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8009fe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fec:	e24a      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ff2:	e247      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ff8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8009ffc:	430b      	orrs	r3, r1
 8009ffe:	d12d      	bne.n	800a05c <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800a000:	4b45      	ldr	r3, [pc, #276]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a006:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800a00a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800a00c:	4b42      	ldr	r3, [pc, #264]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a014:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a018:	d105      	bne.n	800a026 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 800a01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d102      	bne.n	800a026 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 800a020:	4b3f      	ldr	r3, [pc, #252]	@ (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a022:	637b      	str	r3, [r7, #52]	@ 0x34
 800a024:	e22e      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800a026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a02c:	d107      	bne.n	800a03e <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a02e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe fc70 	bl	8008918 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800a038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a03a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a03c:	e222      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800a03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a040:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a044:	d107      	bne.n	800a056 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a046:	f107 0318 	add.w	r3, r7, #24
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fe fdbe 	bl	8008bcc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	637b      	str	r3, [r7, #52]	@ 0x34
 800a054:	e216      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800a056:	2300      	movs	r3, #0
 800a058:	637b      	str	r3, [r7, #52]	@ 0x34
 800a05a:	e213      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800a05c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a060:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800a064:	430b      	orrs	r3, r1
 800a066:	d15d      	bne.n	800a124 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800a068:	4b2b      	ldr	r3, [pc, #172]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a06a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a06e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a072:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800a074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a076:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a07a:	d028      	beq.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 800a07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a082:	d845      	bhi.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800a084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a086:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a08a:	d013      	beq.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 800a08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a08e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a092:	d83d      	bhi.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800a094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a096:	2b00      	cmp	r3, #0
 800a098:	d004      	beq.n	800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800a09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0a0:	d004      	beq.n	800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 800a0a2:	e035      	b.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800a0a4:	f7fd fdae 	bl	8007c04 <HAL_RCC_GetPCLK2Freq>
 800a0a8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a0aa:	e1eb      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a0ac:	f7fd fc7a 	bl	80079a4 <HAL_RCC_GetSysClockFreq>
 800a0b0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a0b2:	e1e7      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a0b4:	4b18      	ldr	r3, [pc, #96]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0c0:	d102      	bne.n	800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 800a0c2:	4b17      	ldr	r3, [pc, #92]	@ (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a0c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a0c6:	e1dd      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a0cc:	e1da      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a0ce:	4b12      	ldr	r3, [pc, #72]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f003 0320 	and.w	r3, r3, #32
 800a0d6:	2b20      	cmp	r3, #32
 800a0d8:	d117      	bne.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a0da:	4b0f      	ldr	r3, [pc, #60]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d005      	beq.n	800a0f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800a0e6:	4b0c      	ldr	r3, [pc, #48]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	0e1b      	lsrs	r3, r3, #24
 800a0ec:	f003 030f 	and.w	r3, r3, #15
 800a0f0:	e006      	b.n	800a100 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 800a0f2:	4b09      	ldr	r3, [pc, #36]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a0f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a0f8:	041b      	lsls	r3, r3, #16
 800a0fa:	0e1b      	lsrs	r3, r3, #24
 800a0fc:	f003 030f 	and.w	r3, r3, #15
 800a100:	4a06      	ldr	r2, [pc, #24]	@ (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800a102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a106:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a108:	e1bc      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a10a:	2300      	movs	r3, #0
 800a10c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a10e:	e1b9      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800a110:	2300      	movs	r3, #0
 800a112:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a114:	e1b6      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800a116:	bf00      	nop
 800a118:	46020c00 	.word	0x46020c00
 800a11c:	0802fa0c 	.word	0x0802fa0c
 800a120:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800a124:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a128:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800a12c:	430b      	orrs	r3, r1
 800a12e:	d156      	bne.n	800a1de <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800a130:	4ba5      	ldr	r3, [pc, #660]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a136:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a13a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800a13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a13e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a142:	d028      	beq.n	800a196 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 800a144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a146:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a14a:	d845      	bhi.n	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800a14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a152:	d013      	beq.n	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 800a154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a156:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a15a:	d83d      	bhi.n	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800a15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d004      	beq.n	800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 800a162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a168:	d004      	beq.n	800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800a16a:	e035      	b.n	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800a16c:	f7fd fd36 	bl	8007bdc <HAL_RCC_GetPCLK1Freq>
 800a170:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a172:	e187      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a174:	f7fd fc16 	bl	80079a4 <HAL_RCC_GetSysClockFreq>
 800a178:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a17a:	e183      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a17c:	4b92      	ldr	r3, [pc, #584]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a188:	d102      	bne.n	800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 800a18a:	4b90      	ldr	r3, [pc, #576]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800a18c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a18e:	e179      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a190:	2300      	movs	r3, #0
 800a192:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a194:	e176      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a196:	4b8c      	ldr	r3, [pc, #560]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f003 0320 	and.w	r3, r3, #32
 800a19e:	2b20      	cmp	r3, #32
 800a1a0:	d117      	bne.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a1a2:	4b89      	ldr	r3, [pc, #548]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d005      	beq.n	800a1ba <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 800a1ae:	4b86      	ldr	r3, [pc, #536]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	0e1b      	lsrs	r3, r3, #24
 800a1b4:	f003 030f 	and.w	r3, r3, #15
 800a1b8:	e006      	b.n	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 800a1ba:	4b83      	ldr	r3, [pc, #524]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a1bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a1c0:	041b      	lsls	r3, r3, #16
 800a1c2:	0e1b      	lsrs	r3, r3, #24
 800a1c4:	f003 030f 	and.w	r3, r3, #15
 800a1c8:	4a81      	ldr	r2, [pc, #516]	@ (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800a1ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a1d0:	e158      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1d6:	e155      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1dc:	e152      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800a1de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1e2:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800a1e6:	430b      	orrs	r3, r1
 800a1e8:	d177      	bne.n	800a2da <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800a1ea:	4b77      	ldr	r3, [pc, #476]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a1ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a1f0:	f003 0318 	and.w	r3, r3, #24
 800a1f4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800a1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f8:	2b18      	cmp	r3, #24
 800a1fa:	d86b      	bhi.n	800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 800a1fc:	a201      	add	r2, pc, #4	@ (adr r2, 800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 800a1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a202:	bf00      	nop
 800a204:	0800a269 	.word	0x0800a269
 800a208:	0800a2d5 	.word	0x0800a2d5
 800a20c:	0800a2d5 	.word	0x0800a2d5
 800a210:	0800a2d5 	.word	0x0800a2d5
 800a214:	0800a2d5 	.word	0x0800a2d5
 800a218:	0800a2d5 	.word	0x0800a2d5
 800a21c:	0800a2d5 	.word	0x0800a2d5
 800a220:	0800a2d5 	.word	0x0800a2d5
 800a224:	0800a271 	.word	0x0800a271
 800a228:	0800a2d5 	.word	0x0800a2d5
 800a22c:	0800a2d5 	.word	0x0800a2d5
 800a230:	0800a2d5 	.word	0x0800a2d5
 800a234:	0800a2d5 	.word	0x0800a2d5
 800a238:	0800a2d5 	.word	0x0800a2d5
 800a23c:	0800a2d5 	.word	0x0800a2d5
 800a240:	0800a2d5 	.word	0x0800a2d5
 800a244:	0800a279 	.word	0x0800a279
 800a248:	0800a2d5 	.word	0x0800a2d5
 800a24c:	0800a2d5 	.word	0x0800a2d5
 800a250:	0800a2d5 	.word	0x0800a2d5
 800a254:	0800a2d5 	.word	0x0800a2d5
 800a258:	0800a2d5 	.word	0x0800a2d5
 800a25c:	0800a2d5 	.word	0x0800a2d5
 800a260:	0800a2d5 	.word	0x0800a2d5
 800a264:	0800a293 	.word	0x0800a293
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800a268:	f7fd fce0 	bl	8007c2c <HAL_RCC_GetPCLK3Freq>
 800a26c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a26e:	e109      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a270:	f7fd fb98 	bl	80079a4 <HAL_RCC_GetSysClockFreq>
 800a274:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a276:	e105      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a278:	4b53      	ldr	r3, [pc, #332]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a284:	d102      	bne.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 800a286:	4b51      	ldr	r3, [pc, #324]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800a288:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a28a:	e0fb      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a28c:	2300      	movs	r3, #0
 800a28e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a290:	e0f8      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a292:	4b4d      	ldr	r3, [pc, #308]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f003 0320 	and.w	r3, r3, #32
 800a29a:	2b20      	cmp	r3, #32
 800a29c:	d117      	bne.n	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a29e:	4b4a      	ldr	r3, [pc, #296]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d005      	beq.n	800a2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 800a2aa:	4b47      	ldr	r3, [pc, #284]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	0e1b      	lsrs	r3, r3, #24
 800a2b0:	f003 030f 	and.w	r3, r3, #15
 800a2b4:	e006      	b.n	800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800a2b6:	4b44      	ldr	r3, [pc, #272]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a2b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a2bc:	041b      	lsls	r3, r3, #16
 800a2be:	0e1b      	lsrs	r3, r3, #24
 800a2c0:	f003 030f 	and.w	r3, r3, #15
 800a2c4:	4a42      	ldr	r2, [pc, #264]	@ (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800a2c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a2cc:	e0da      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2d2:	e0d7      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2d8:	e0d4      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800a2da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2de:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800a2e2:	430b      	orrs	r3, r1
 800a2e4:	d155      	bne.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a2e6:	4b38      	ldr	r3, [pc, #224]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a2e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a2ec:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a2f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a2f8:	d013      	beq.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a300:	d844      	bhi.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800a302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a304:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a308:	d013      	beq.n	800a332 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800a30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a30c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a310:	d83c      	bhi.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800a312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a314:	2b00      	cmp	r3, #0
 800a316:	d014      	beq.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 800a318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a31e:	d014      	beq.n	800a34a <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 800a320:	e034      	b.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a322:	f107 0318 	add.w	r3, r7, #24
 800a326:	4618      	mov	r0, r3
 800a328:	f7fe fc50 	bl	8008bcc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a330:	e0a8      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a336:	4618      	mov	r0, r3
 800a338:	f7fe faee 	bl	8008918 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a33e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a340:	e0a0      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a342:	f7fd fb2f 	bl	80079a4 <HAL_RCC_GetSysClockFreq>
 800a346:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a348:	e09c      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a34a:	4b1f      	ldr	r3, [pc, #124]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f003 0320 	and.w	r3, r3, #32
 800a352:	2b20      	cmp	r3, #32
 800a354:	d117      	bne.n	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a356:	4b1c      	ldr	r3, [pc, #112]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d005      	beq.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800a362:	4b19      	ldr	r3, [pc, #100]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	0e1b      	lsrs	r3, r3, #24
 800a368:	f003 030f 	and.w	r3, r3, #15
 800a36c:	e006      	b.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 800a36e:	4b16      	ldr	r3, [pc, #88]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a370:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a374:	041b      	lsls	r3, r3, #16
 800a376:	0e1b      	lsrs	r3, r3, #24
 800a378:	f003 030f 	and.w	r3, r3, #15
 800a37c:	4a14      	ldr	r2, [pc, #80]	@ (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800a37e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a382:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a384:	e07e      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a386:	2300      	movs	r3, #0
 800a388:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a38a:	e07b      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800a38c:	2300      	movs	r3, #0
 800a38e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a390:	e078      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800a392:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a396:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800a39a:	430b      	orrs	r3, r1
 800a39c:	d138      	bne.n	800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800a39e:	4b0a      	ldr	r3, [pc, #40]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a3a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a3a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3a8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800a3aa:	4b07      	ldr	r3, [pc, #28]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a3ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a3b0:	f003 0302 	and.w	r3, r3, #2
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d10d      	bne.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800a3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10a      	bne.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800a3be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3c4:	e05e      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800a3c6:	bf00      	nop
 800a3c8:	46020c00 	.word	0x46020c00
 800a3cc:	00f42400 	.word	0x00f42400
 800a3d0:	0802fa0c 	.word	0x0802fa0c
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800a3d4:	4b2e      	ldr	r3, [pc, #184]	@ (800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a3d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a3da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3e2:	d112      	bne.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 800a3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3ea:	d10e      	bne.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a3ec:	4b28      	ldr	r3, [pc, #160]	@ (800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a3ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a3f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3fa:	d102      	bne.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 800a3fc:	23fa      	movs	r3, #250	@ 0xfa
 800a3fe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a400:	e040      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800a402:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a406:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a408:	e03c      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800a40a:	2300      	movs	r3, #0
 800a40c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a40e:	e039      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800a410:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a414:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a418:	430b      	orrs	r3, r1
 800a41a:	d131      	bne.n	800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a41c:	4b1c      	ldr	r3, [pc, #112]	@ (800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a41e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a422:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a426:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a428:	4b19      	ldr	r3, [pc, #100]	@ (800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a430:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a434:	d105      	bne.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 800a436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d102      	bne.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 800a43c:	4b15      	ldr	r3, [pc, #84]	@ (800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 800a43e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a440:	e020      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800a442:	4b13      	ldr	r3, [pc, #76]	@ (800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a44a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a44e:	d106      	bne.n	800a45e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 800a450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a456:	d102      	bne.n	800a45e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 800a458:	4b0f      	ldr	r3, [pc, #60]	@ (800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800a45a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a45c:	e012      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800a45e:	4b0c      	ldr	r3, [pc, #48]	@ (800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a46a:	d106      	bne.n	800a47a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 800a46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a472:	d102      	bne.n	800a47a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 800a474:	4b09      	ldr	r3, [pc, #36]	@ (800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800a476:	637b      	str	r3, [r7, #52]	@ 0x34
 800a478:	e004      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800a47a:	2300      	movs	r3, #0
 800a47c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a47e:	e001      	b.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800a480:	2300      	movs	r3, #0
 800a482:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800a484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a486:	4618      	mov	r0, r3
 800a488:	3738      	adds	r7, #56	@ 0x38
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	46020c00 	.word	0x46020c00
 800a494:	02dc6c00 	.word	0x02dc6c00
 800a498:	016e3600 	.word	0x016e3600
 800a49c:	00f42400 	.word	0x00f42400

0800a4a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800a4a8:	4b47      	ldr	r3, [pc, #284]	@ (800a5c8 <RCCEx_PLL2_Config+0x128>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a46      	ldr	r2, [pc, #280]	@ (800a5c8 <RCCEx_PLL2_Config+0x128>)
 800a4ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a4b2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a4b4:	f7f7 fcea 	bl	8001e8c <HAL_GetTick>
 800a4b8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a4ba:	e008      	b.n	800a4ce <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a4bc:	f7f7 fce6 	bl	8001e8c <HAL_GetTick>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	2b02      	cmp	r3, #2
 800a4c8:	d901      	bls.n	800a4ce <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	e077      	b.n	800a5be <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a4ce:	4b3e      	ldr	r3, [pc, #248]	@ (800a5c8 <RCCEx_PLL2_Config+0x128>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1f0      	bne.n	800a4bc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a4da:	4b3b      	ldr	r3, [pc, #236]	@ (800a5c8 <RCCEx_PLL2_Config+0x128>)
 800a4dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a4e2:	f023 0303 	bic.w	r3, r3, #3
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	6811      	ldr	r1, [r2, #0]
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	6852      	ldr	r2, [r2, #4]
 800a4ee:	3a01      	subs	r2, #1
 800a4f0:	0212      	lsls	r2, r2, #8
 800a4f2:	430a      	orrs	r2, r1
 800a4f4:	4934      	ldr	r1, [pc, #208]	@ (800a5c8 <RCCEx_PLL2_Config+0x128>)
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a4fa:	4b33      	ldr	r3, [pc, #204]	@ (800a5c8 <RCCEx_PLL2_Config+0x128>)
 800a4fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a4fe:	4b33      	ldr	r3, [pc, #204]	@ (800a5cc <RCCEx_PLL2_Config+0x12c>)
 800a500:	4013      	ands	r3, r2
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	6892      	ldr	r2, [r2, #8]
 800a506:	3a01      	subs	r2, #1
 800a508:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	68d2      	ldr	r2, [r2, #12]
 800a510:	3a01      	subs	r2, #1
 800a512:	0252      	lsls	r2, r2, #9
 800a514:	b292      	uxth	r2, r2
 800a516:	4311      	orrs	r1, r2
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	6912      	ldr	r2, [r2, #16]
 800a51c:	3a01      	subs	r2, #1
 800a51e:	0412      	lsls	r2, r2, #16
 800a520:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a524:	4311      	orrs	r1, r2
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	6952      	ldr	r2, [r2, #20]
 800a52a:	3a01      	subs	r2, #1
 800a52c:	0612      	lsls	r2, r2, #24
 800a52e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a532:	430a      	orrs	r2, r1
 800a534:	4924      	ldr	r1, [pc, #144]	@ (800a5c8 <RCCEx_PLL2_Config+0x128>)
 800a536:	4313      	orrs	r3, r2
 800a538:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a53a:	4b23      	ldr	r3, [pc, #140]	@ (800a5c8 <RCCEx_PLL2_Config+0x128>)
 800a53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a53e:	f023 020c 	bic.w	r2, r3, #12
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	699b      	ldr	r3, [r3, #24]
 800a546:	4920      	ldr	r1, [pc, #128]	@ (800a5c8 <RCCEx_PLL2_Config+0x128>)
 800a548:	4313      	orrs	r3, r2
 800a54a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a54c:	4b1e      	ldr	r3, [pc, #120]	@ (800a5c8 <RCCEx_PLL2_Config+0x128>)
 800a54e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6a1b      	ldr	r3, [r3, #32]
 800a554:	491c      	ldr	r1, [pc, #112]	@ (800a5c8 <RCCEx_PLL2_Config+0x128>)
 800a556:	4313      	orrs	r3, r2
 800a558:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800a55a:	4b1b      	ldr	r3, [pc, #108]	@ (800a5c8 <RCCEx_PLL2_Config+0x128>)
 800a55c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a55e:	4a1a      	ldr	r2, [pc, #104]	@ (800a5c8 <RCCEx_PLL2_Config+0x128>)
 800a560:	f023 0310 	bic.w	r3, r3, #16
 800a564:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a566:	4b18      	ldr	r3, [pc, #96]	@ (800a5c8 <RCCEx_PLL2_Config+0x128>)
 800a568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a56a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a56e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	69d2      	ldr	r2, [r2, #28]
 800a576:	00d2      	lsls	r2, r2, #3
 800a578:	4913      	ldr	r1, [pc, #76]	@ (800a5c8 <RCCEx_PLL2_Config+0x128>)
 800a57a:	4313      	orrs	r3, r2
 800a57c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800a57e:	4b12      	ldr	r3, [pc, #72]	@ (800a5c8 <RCCEx_PLL2_Config+0x128>)
 800a580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a582:	4a11      	ldr	r2, [pc, #68]	@ (800a5c8 <RCCEx_PLL2_Config+0x128>)
 800a584:	f043 0310 	orr.w	r3, r3, #16
 800a588:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800a58a:	4b0f      	ldr	r3, [pc, #60]	@ (800a5c8 <RCCEx_PLL2_Config+0x128>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a0e      	ldr	r2, [pc, #56]	@ (800a5c8 <RCCEx_PLL2_Config+0x128>)
 800a590:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a594:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a596:	f7f7 fc79 	bl	8001e8c <HAL_GetTick>
 800a59a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a59c:	e008      	b.n	800a5b0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a59e:	f7f7 fc75 	bl	8001e8c <HAL_GetTick>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	1ad3      	subs	r3, r2, r3
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d901      	bls.n	800a5b0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	e006      	b.n	800a5be <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a5b0:	4b05      	ldr	r3, [pc, #20]	@ (800a5c8 <RCCEx_PLL2_Config+0x128>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d0f0      	beq.n	800a59e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800a5bc:	2300      	movs	r3, #0

}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	46020c00 	.word	0x46020c00
 800a5cc:	80800000 	.word	0x80800000

0800a5d0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800a5d8:	4b47      	ldr	r3, [pc, #284]	@ (800a6f8 <RCCEx_PLL3_Config+0x128>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a46      	ldr	r2, [pc, #280]	@ (800a6f8 <RCCEx_PLL3_Config+0x128>)
 800a5de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a5e2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a5e4:	f7f7 fc52 	bl	8001e8c <HAL_GetTick>
 800a5e8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a5ea:	e008      	b.n	800a5fe <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a5ec:	f7f7 fc4e 	bl	8001e8c <HAL_GetTick>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d901      	bls.n	800a5fe <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a5fa:	2303      	movs	r3, #3
 800a5fc:	e077      	b.n	800a6ee <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a5fe:	4b3e      	ldr	r3, [pc, #248]	@ (800a6f8 <RCCEx_PLL3_Config+0x128>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1f0      	bne.n	800a5ec <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a60a:	4b3b      	ldr	r3, [pc, #236]	@ (800a6f8 <RCCEx_PLL3_Config+0x128>)
 800a60c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a60e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a612:	f023 0303 	bic.w	r3, r3, #3
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	6811      	ldr	r1, [r2, #0]
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	6852      	ldr	r2, [r2, #4]
 800a61e:	3a01      	subs	r2, #1
 800a620:	0212      	lsls	r2, r2, #8
 800a622:	430a      	orrs	r2, r1
 800a624:	4934      	ldr	r1, [pc, #208]	@ (800a6f8 <RCCEx_PLL3_Config+0x128>)
 800a626:	4313      	orrs	r3, r2
 800a628:	630b      	str	r3, [r1, #48]	@ 0x30
 800a62a:	4b33      	ldr	r3, [pc, #204]	@ (800a6f8 <RCCEx_PLL3_Config+0x128>)
 800a62c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a62e:	4b33      	ldr	r3, [pc, #204]	@ (800a6fc <RCCEx_PLL3_Config+0x12c>)
 800a630:	4013      	ands	r3, r2
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	6892      	ldr	r2, [r2, #8]
 800a636:	3a01      	subs	r2, #1
 800a638:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	68d2      	ldr	r2, [r2, #12]
 800a640:	3a01      	subs	r2, #1
 800a642:	0252      	lsls	r2, r2, #9
 800a644:	b292      	uxth	r2, r2
 800a646:	4311      	orrs	r1, r2
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	6912      	ldr	r2, [r2, #16]
 800a64c:	3a01      	subs	r2, #1
 800a64e:	0412      	lsls	r2, r2, #16
 800a650:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a654:	4311      	orrs	r1, r2
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	6952      	ldr	r2, [r2, #20]
 800a65a:	3a01      	subs	r2, #1
 800a65c:	0612      	lsls	r2, r2, #24
 800a65e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a662:	430a      	orrs	r2, r1
 800a664:	4924      	ldr	r1, [pc, #144]	@ (800a6f8 <RCCEx_PLL3_Config+0x128>)
 800a666:	4313      	orrs	r3, r2
 800a668:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800a66a:	4b23      	ldr	r3, [pc, #140]	@ (800a6f8 <RCCEx_PLL3_Config+0x128>)
 800a66c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a66e:	f023 020c 	bic.w	r2, r3, #12
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	699b      	ldr	r3, [r3, #24]
 800a676:	4920      	ldr	r1, [pc, #128]	@ (800a6f8 <RCCEx_PLL3_Config+0x128>)
 800a678:	4313      	orrs	r3, r2
 800a67a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a67c:	4b1e      	ldr	r3, [pc, #120]	@ (800a6f8 <RCCEx_PLL3_Config+0x128>)
 800a67e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a1b      	ldr	r3, [r3, #32]
 800a684:	491c      	ldr	r1, [pc, #112]	@ (800a6f8 <RCCEx_PLL3_Config+0x128>)
 800a686:	4313      	orrs	r3, r2
 800a688:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800a68a:	4b1b      	ldr	r3, [pc, #108]	@ (800a6f8 <RCCEx_PLL3_Config+0x128>)
 800a68c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a68e:	4a1a      	ldr	r2, [pc, #104]	@ (800a6f8 <RCCEx_PLL3_Config+0x128>)
 800a690:	f023 0310 	bic.w	r3, r3, #16
 800a694:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a696:	4b18      	ldr	r3, [pc, #96]	@ (800a6f8 <RCCEx_PLL3_Config+0x128>)
 800a698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a69a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a69e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	69d2      	ldr	r2, [r2, #28]
 800a6a6:	00d2      	lsls	r2, r2, #3
 800a6a8:	4913      	ldr	r1, [pc, #76]	@ (800a6f8 <RCCEx_PLL3_Config+0x128>)
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800a6ae:	4b12      	ldr	r3, [pc, #72]	@ (800a6f8 <RCCEx_PLL3_Config+0x128>)
 800a6b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6b2:	4a11      	ldr	r2, [pc, #68]	@ (800a6f8 <RCCEx_PLL3_Config+0x128>)
 800a6b4:	f043 0310 	orr.w	r3, r3, #16
 800a6b8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800a6ba:	4b0f      	ldr	r3, [pc, #60]	@ (800a6f8 <RCCEx_PLL3_Config+0x128>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a0e      	ldr	r2, [pc, #56]	@ (800a6f8 <RCCEx_PLL3_Config+0x128>)
 800a6c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6c4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a6c6:	f7f7 fbe1 	bl	8001e8c <HAL_GetTick>
 800a6ca:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a6cc:	e008      	b.n	800a6e0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a6ce:	f7f7 fbdd 	bl	8001e8c <HAL_GetTick>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	1ad3      	subs	r3, r2, r3
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d901      	bls.n	800a6e0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e006      	b.n	800a6ee <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a6e0:	4b05      	ldr	r3, [pc, #20]	@ (800a6f8 <RCCEx_PLL3_Config+0x128>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d0f0      	beq.n	800a6ce <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3710      	adds	r7, #16
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	46020c00 	.word	0x46020c00
 800a6fc:	80800000 	.word	0x80800000

0800a700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d101      	bne.n	800a712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	e049      	b.n	800a7a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d106      	bne.n	800a72c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f7f7 fa66 	bl	8001bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2202      	movs	r2, #2
 800a730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	3304      	adds	r3, #4
 800a73c:	4619      	mov	r1, r3
 800a73e:	4610      	mov	r0, r2
 800a740:	f000 fa4e 	bl	800abe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2201      	movs	r2, #1
 800a778:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2201      	movs	r2, #1
 800a790:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2201      	movs	r2, #1
 800a798:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
	...

0800a7b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d001      	beq.n	800a7c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	e072      	b.n	800a8ae <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2202      	movs	r2, #2
 800a7cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68da      	ldr	r2, [r3, #12]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f042 0201 	orr.w	r2, r2, #1
 800a7de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a35      	ldr	r2, [pc, #212]	@ (800a8bc <HAL_TIM_Base_Start_IT+0x10c>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d040      	beq.n	800a86c <HAL_TIM_Base_Start_IT+0xbc>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a34      	ldr	r2, [pc, #208]	@ (800a8c0 <HAL_TIM_Base_Start_IT+0x110>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d03b      	beq.n	800a86c <HAL_TIM_Base_Start_IT+0xbc>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7fc:	d036      	beq.n	800a86c <HAL_TIM_Base_Start_IT+0xbc>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a806:	d031      	beq.n	800a86c <HAL_TIM_Base_Start_IT+0xbc>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a2d      	ldr	r2, [pc, #180]	@ (800a8c4 <HAL_TIM_Base_Start_IT+0x114>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d02c      	beq.n	800a86c <HAL_TIM_Base_Start_IT+0xbc>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a2c      	ldr	r2, [pc, #176]	@ (800a8c8 <HAL_TIM_Base_Start_IT+0x118>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d027      	beq.n	800a86c <HAL_TIM_Base_Start_IT+0xbc>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a2a      	ldr	r2, [pc, #168]	@ (800a8cc <HAL_TIM_Base_Start_IT+0x11c>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d022      	beq.n	800a86c <HAL_TIM_Base_Start_IT+0xbc>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a29      	ldr	r2, [pc, #164]	@ (800a8d0 <HAL_TIM_Base_Start_IT+0x120>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d01d      	beq.n	800a86c <HAL_TIM_Base_Start_IT+0xbc>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a27      	ldr	r2, [pc, #156]	@ (800a8d4 <HAL_TIM_Base_Start_IT+0x124>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d018      	beq.n	800a86c <HAL_TIM_Base_Start_IT+0xbc>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a26      	ldr	r2, [pc, #152]	@ (800a8d8 <HAL_TIM_Base_Start_IT+0x128>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d013      	beq.n	800a86c <HAL_TIM_Base_Start_IT+0xbc>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a24      	ldr	r2, [pc, #144]	@ (800a8dc <HAL_TIM_Base_Start_IT+0x12c>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d00e      	beq.n	800a86c <HAL_TIM_Base_Start_IT+0xbc>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a23      	ldr	r2, [pc, #140]	@ (800a8e0 <HAL_TIM_Base_Start_IT+0x130>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d009      	beq.n	800a86c <HAL_TIM_Base_Start_IT+0xbc>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a21      	ldr	r2, [pc, #132]	@ (800a8e4 <HAL_TIM_Base_Start_IT+0x134>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d004      	beq.n	800a86c <HAL_TIM_Base_Start_IT+0xbc>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a20      	ldr	r2, [pc, #128]	@ (800a8e8 <HAL_TIM_Base_Start_IT+0x138>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d115      	bne.n	800a898 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	689a      	ldr	r2, [r3, #8]
 800a872:	4b1e      	ldr	r3, [pc, #120]	@ (800a8ec <HAL_TIM_Base_Start_IT+0x13c>)
 800a874:	4013      	ands	r3, r2
 800a876:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2b06      	cmp	r3, #6
 800a87c:	d015      	beq.n	800a8aa <HAL_TIM_Base_Start_IT+0xfa>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a884:	d011      	beq.n	800a8aa <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f042 0201 	orr.w	r2, r2, #1
 800a894:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a896:	e008      	b.n	800a8aa <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f042 0201 	orr.w	r2, r2, #1
 800a8a6:	601a      	str	r2, [r3, #0]
 800a8a8:	e000      	b.n	800a8ac <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3714      	adds	r7, #20
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	40012c00 	.word	0x40012c00
 800a8c0:	50012c00 	.word	0x50012c00
 800a8c4:	40000400 	.word	0x40000400
 800a8c8:	50000400 	.word	0x50000400
 800a8cc:	40000800 	.word	0x40000800
 800a8d0:	50000800 	.word	0x50000800
 800a8d4:	40000c00 	.word	0x40000c00
 800a8d8:	50000c00 	.word	0x50000c00
 800a8dc:	40013400 	.word	0x40013400
 800a8e0:	50013400 	.word	0x50013400
 800a8e4:	40014000 	.word	0x40014000
 800a8e8:	50014000 	.word	0x50014000
 800a8ec:	00010007 	.word	0x00010007

0800a8f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	f003 0302 	and.w	r3, r3, #2
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d020      	beq.n	800a954 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f003 0302 	and.w	r3, r3, #2
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d01b      	beq.n	800a954 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f06f 0202 	mvn.w	r2, #2
 800a924:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2201      	movs	r2, #1
 800a92a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	699b      	ldr	r3, [r3, #24]
 800a932:	f003 0303 	and.w	r3, r3, #3
 800a936:	2b00      	cmp	r3, #0
 800a938:	d003      	beq.n	800a942 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f931 	bl	800aba2 <HAL_TIM_IC_CaptureCallback>
 800a940:	e005      	b.n	800a94e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 f923 	bl	800ab8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 f934 	bl	800abb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	f003 0304 	and.w	r3, r3, #4
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d020      	beq.n	800a9a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f003 0304 	and.w	r3, r3, #4
 800a964:	2b00      	cmp	r3, #0
 800a966:	d01b      	beq.n	800a9a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f06f 0204 	mvn.w	r2, #4
 800a970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2202      	movs	r2, #2
 800a976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f90b 	bl	800aba2 <HAL_TIM_IC_CaptureCallback>
 800a98c:	e005      	b.n	800a99a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 f8fd 	bl	800ab8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 f90e 	bl	800abb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	f003 0308 	and.w	r3, r3, #8
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d020      	beq.n	800a9ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f003 0308 	and.w	r3, r3, #8
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d01b      	beq.n	800a9ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f06f 0208 	mvn.w	r2, #8
 800a9bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2204      	movs	r2, #4
 800a9c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	69db      	ldr	r3, [r3, #28]
 800a9ca:	f003 0303 	and.w	r3, r3, #3
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d003      	beq.n	800a9da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 f8e5 	bl	800aba2 <HAL_TIM_IC_CaptureCallback>
 800a9d8:	e005      	b.n	800a9e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f8d7 	bl	800ab8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 f8e8 	bl	800abb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	f003 0310 	and.w	r3, r3, #16
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d020      	beq.n	800aa38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f003 0310 	and.w	r3, r3, #16
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d01b      	beq.n	800aa38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f06f 0210 	mvn.w	r2, #16
 800aa08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2208      	movs	r2, #8
 800aa0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	69db      	ldr	r3, [r3, #28]
 800aa16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d003      	beq.n	800aa26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f8bf 	bl	800aba2 <HAL_TIM_IC_CaptureCallback>
 800aa24:	e005      	b.n	800aa32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f8b1 	bl	800ab8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 f8c2 	bl	800abb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	f003 0301 	and.w	r3, r3, #1
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00c      	beq.n	800aa5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f003 0301 	and.w	r3, r3, #1
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d007      	beq.n	800aa5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f06f 0201 	mvn.w	r2, #1
 800aa54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7f6 fd70 	bl	800153c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d104      	bne.n	800aa70 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00c      	beq.n	800aa8a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d007      	beq.n	800aa8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800aa82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fa77 	bl	800af78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d00c      	beq.n	800aaae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d007      	beq.n	800aaae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800aaa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 fa6f 	bl	800af8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d00c      	beq.n	800aad2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d007      	beq.n	800aad2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aaca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 f87c 	bl	800abca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	f003 0320 	and.w	r3, r3, #32
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00c      	beq.n	800aaf6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f003 0320 	and.w	r3, r3, #32
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d007      	beq.n	800aaf6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f06f 0220 	mvn.w	r2, #32
 800aaee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 fa37 	bl	800af64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d00c      	beq.n	800ab1a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d007      	beq.n	800ab1a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800ab12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fa43 	bl	800afa0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00c      	beq.n	800ab3e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d007      	beq.n	800ab3e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800ab36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fa3b 	bl	800afb4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00c      	beq.n	800ab62 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d007      	beq.n	800ab62 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800ab5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 fa33 	bl	800afc8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00c      	beq.n	800ab86 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d007      	beq.n	800ab86 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800ab7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 fa2b 	bl	800afdc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab86:	bf00      	nop
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab8e:	b480      	push	{r7}
 800ab90:	b083      	sub	sp, #12
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab96:	bf00      	nop
 800ab98:	370c      	adds	r7, #12
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr

0800aba2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aba2:	b480      	push	{r7}
 800aba4:	b083      	sub	sp, #12
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800abaa:	bf00      	nop
 800abac:	370c      	adds	r7, #12
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr

0800abb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800abb6:	b480      	push	{r7}
 800abb8:	b083      	sub	sp, #12
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800abbe:	bf00      	nop
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800abca:	b480      	push	{r7}
 800abcc:	b083      	sub	sp, #12
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800abd2:	bf00      	nop
 800abd4:	370c      	adds	r7, #12
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
	...

0800abe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a6b      	ldr	r2, [pc, #428]	@ (800ada0 <TIM_Base_SetConfig+0x1c0>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d02b      	beq.n	800ac50 <TIM_Base_SetConfig+0x70>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a6a      	ldr	r2, [pc, #424]	@ (800ada4 <TIM_Base_SetConfig+0x1c4>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d027      	beq.n	800ac50 <TIM_Base_SetConfig+0x70>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac06:	d023      	beq.n	800ac50 <TIM_Base_SetConfig+0x70>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac0e:	d01f      	beq.n	800ac50 <TIM_Base_SetConfig+0x70>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4a65      	ldr	r2, [pc, #404]	@ (800ada8 <TIM_Base_SetConfig+0x1c8>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d01b      	beq.n	800ac50 <TIM_Base_SetConfig+0x70>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	4a64      	ldr	r2, [pc, #400]	@ (800adac <TIM_Base_SetConfig+0x1cc>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d017      	beq.n	800ac50 <TIM_Base_SetConfig+0x70>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4a63      	ldr	r2, [pc, #396]	@ (800adb0 <TIM_Base_SetConfig+0x1d0>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d013      	beq.n	800ac50 <TIM_Base_SetConfig+0x70>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4a62      	ldr	r2, [pc, #392]	@ (800adb4 <TIM_Base_SetConfig+0x1d4>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d00f      	beq.n	800ac50 <TIM_Base_SetConfig+0x70>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a61      	ldr	r2, [pc, #388]	@ (800adb8 <TIM_Base_SetConfig+0x1d8>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d00b      	beq.n	800ac50 <TIM_Base_SetConfig+0x70>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a60      	ldr	r2, [pc, #384]	@ (800adbc <TIM_Base_SetConfig+0x1dc>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d007      	beq.n	800ac50 <TIM_Base_SetConfig+0x70>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a5f      	ldr	r2, [pc, #380]	@ (800adc0 <TIM_Base_SetConfig+0x1e0>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d003      	beq.n	800ac50 <TIM_Base_SetConfig+0x70>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a5e      	ldr	r2, [pc, #376]	@ (800adc4 <TIM_Base_SetConfig+0x1e4>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d108      	bne.n	800ac62 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4a4e      	ldr	r2, [pc, #312]	@ (800ada0 <TIM_Base_SetConfig+0x1c0>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d043      	beq.n	800acf2 <TIM_Base_SetConfig+0x112>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4a4d      	ldr	r2, [pc, #308]	@ (800ada4 <TIM_Base_SetConfig+0x1c4>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d03f      	beq.n	800acf2 <TIM_Base_SetConfig+0x112>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac78:	d03b      	beq.n	800acf2 <TIM_Base_SetConfig+0x112>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac80:	d037      	beq.n	800acf2 <TIM_Base_SetConfig+0x112>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	4a48      	ldr	r2, [pc, #288]	@ (800ada8 <TIM_Base_SetConfig+0x1c8>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d033      	beq.n	800acf2 <TIM_Base_SetConfig+0x112>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4a47      	ldr	r2, [pc, #284]	@ (800adac <TIM_Base_SetConfig+0x1cc>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d02f      	beq.n	800acf2 <TIM_Base_SetConfig+0x112>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4a46      	ldr	r2, [pc, #280]	@ (800adb0 <TIM_Base_SetConfig+0x1d0>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d02b      	beq.n	800acf2 <TIM_Base_SetConfig+0x112>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a45      	ldr	r2, [pc, #276]	@ (800adb4 <TIM_Base_SetConfig+0x1d4>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d027      	beq.n	800acf2 <TIM_Base_SetConfig+0x112>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a44      	ldr	r2, [pc, #272]	@ (800adb8 <TIM_Base_SetConfig+0x1d8>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d023      	beq.n	800acf2 <TIM_Base_SetConfig+0x112>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a43      	ldr	r2, [pc, #268]	@ (800adbc <TIM_Base_SetConfig+0x1dc>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d01f      	beq.n	800acf2 <TIM_Base_SetConfig+0x112>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a42      	ldr	r2, [pc, #264]	@ (800adc0 <TIM_Base_SetConfig+0x1e0>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d01b      	beq.n	800acf2 <TIM_Base_SetConfig+0x112>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a41      	ldr	r2, [pc, #260]	@ (800adc4 <TIM_Base_SetConfig+0x1e4>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d017      	beq.n	800acf2 <TIM_Base_SetConfig+0x112>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a40      	ldr	r2, [pc, #256]	@ (800adc8 <TIM_Base_SetConfig+0x1e8>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d013      	beq.n	800acf2 <TIM_Base_SetConfig+0x112>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a3f      	ldr	r2, [pc, #252]	@ (800adcc <TIM_Base_SetConfig+0x1ec>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d00f      	beq.n	800acf2 <TIM_Base_SetConfig+0x112>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a3e      	ldr	r2, [pc, #248]	@ (800add0 <TIM_Base_SetConfig+0x1f0>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d00b      	beq.n	800acf2 <TIM_Base_SetConfig+0x112>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a3d      	ldr	r2, [pc, #244]	@ (800add4 <TIM_Base_SetConfig+0x1f4>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d007      	beq.n	800acf2 <TIM_Base_SetConfig+0x112>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4a3c      	ldr	r2, [pc, #240]	@ (800add8 <TIM_Base_SetConfig+0x1f8>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d003      	beq.n	800acf2 <TIM_Base_SetConfig+0x112>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a3b      	ldr	r2, [pc, #236]	@ (800addc <TIM_Base_SetConfig+0x1fc>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d108      	bne.n	800ad04 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800acf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	695b      	ldr	r3, [r3, #20]
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	689a      	ldr	r2, [r3, #8]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4a1e      	ldr	r2, [pc, #120]	@ (800ada0 <TIM_Base_SetConfig+0x1c0>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d023      	beq.n	800ad72 <TIM_Base_SetConfig+0x192>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4a1d      	ldr	r2, [pc, #116]	@ (800ada4 <TIM_Base_SetConfig+0x1c4>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d01f      	beq.n	800ad72 <TIM_Base_SetConfig+0x192>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	4a22      	ldr	r2, [pc, #136]	@ (800adc0 <TIM_Base_SetConfig+0x1e0>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d01b      	beq.n	800ad72 <TIM_Base_SetConfig+0x192>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a21      	ldr	r2, [pc, #132]	@ (800adc4 <TIM_Base_SetConfig+0x1e4>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d017      	beq.n	800ad72 <TIM_Base_SetConfig+0x192>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4a20      	ldr	r2, [pc, #128]	@ (800adc8 <TIM_Base_SetConfig+0x1e8>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d013      	beq.n	800ad72 <TIM_Base_SetConfig+0x192>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4a1f      	ldr	r2, [pc, #124]	@ (800adcc <TIM_Base_SetConfig+0x1ec>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d00f      	beq.n	800ad72 <TIM_Base_SetConfig+0x192>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4a1e      	ldr	r2, [pc, #120]	@ (800add0 <TIM_Base_SetConfig+0x1f0>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d00b      	beq.n	800ad72 <TIM_Base_SetConfig+0x192>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4a1d      	ldr	r2, [pc, #116]	@ (800add4 <TIM_Base_SetConfig+0x1f4>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d007      	beq.n	800ad72 <TIM_Base_SetConfig+0x192>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	4a1c      	ldr	r2, [pc, #112]	@ (800add8 <TIM_Base_SetConfig+0x1f8>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d003      	beq.n	800ad72 <TIM_Base_SetConfig+0x192>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	4a1b      	ldr	r2, [pc, #108]	@ (800addc <TIM_Base_SetConfig+0x1fc>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d103      	bne.n	800ad7a <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	691a      	ldr	r2, [r3, #16]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f043 0204 	orr.w	r2, r3, #4
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	601a      	str	r2, [r3, #0]
}
 800ad92:	bf00      	nop
 800ad94:	3714      	adds	r7, #20
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop
 800ada0:	40012c00 	.word	0x40012c00
 800ada4:	50012c00 	.word	0x50012c00
 800ada8:	40000400 	.word	0x40000400
 800adac:	50000400 	.word	0x50000400
 800adb0:	40000800 	.word	0x40000800
 800adb4:	50000800 	.word	0x50000800
 800adb8:	40000c00 	.word	0x40000c00
 800adbc:	50000c00 	.word	0x50000c00
 800adc0:	40013400 	.word	0x40013400
 800adc4:	50013400 	.word	0x50013400
 800adc8:	40014000 	.word	0x40014000
 800adcc:	50014000 	.word	0x50014000
 800add0:	40014400 	.word	0x40014400
 800add4:	50014400 	.word	0x50014400
 800add8:	40014800 	.word	0x40014800
 800addc:	50014800 	.word	0x50014800

0800ade0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b085      	sub	sp, #20
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d101      	bne.n	800adf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800adf4:	2302      	movs	r3, #2
 800adf6:	e097      	b.n	800af28 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2201      	movs	r2, #1
 800adfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2202      	movs	r2, #2
 800ae04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a45      	ldr	r2, [pc, #276]	@ (800af34 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d00e      	beq.n	800ae40 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a44      	ldr	r2, [pc, #272]	@ (800af38 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d009      	beq.n	800ae40 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a42      	ldr	r2, [pc, #264]	@ (800af3c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d004      	beq.n	800ae40 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a41      	ldr	r2, [pc, #260]	@ (800af40 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d108      	bne.n	800ae52 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ae46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ae58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	68fa      	ldr	r2, [r7, #12]
 800ae6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a2f      	ldr	r2, [pc, #188]	@ (800af34 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d040      	beq.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a2e      	ldr	r2, [pc, #184]	@ (800af38 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d03b      	beq.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae8c:	d036      	beq.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ae96:	d031      	beq.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a29      	ldr	r2, [pc, #164]	@ (800af44 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d02c      	beq.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a28      	ldr	r2, [pc, #160]	@ (800af48 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d027      	beq.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a26      	ldr	r2, [pc, #152]	@ (800af4c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d022      	beq.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a25      	ldr	r2, [pc, #148]	@ (800af50 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d01d      	beq.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a23      	ldr	r2, [pc, #140]	@ (800af54 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d018      	beq.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a22      	ldr	r2, [pc, #136]	@ (800af58 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d013      	beq.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a18      	ldr	r2, [pc, #96]	@ (800af3c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d00e      	beq.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a17      	ldr	r2, [pc, #92]	@ (800af40 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d009      	beq.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a1b      	ldr	r2, [pc, #108]	@ (800af5c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d004      	beq.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a1a      	ldr	r2, [pc, #104]	@ (800af60 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d10c      	bne.n	800af16 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	68ba      	ldr	r2, [r7, #8]
 800af0a:	4313      	orrs	r3, r2
 800af0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2201      	movs	r2, #1
 800af1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3714      	adds	r7, #20
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr
 800af34:	40012c00 	.word	0x40012c00
 800af38:	50012c00 	.word	0x50012c00
 800af3c:	40013400 	.word	0x40013400
 800af40:	50013400 	.word	0x50013400
 800af44:	40000400 	.word	0x40000400
 800af48:	50000400 	.word	0x50000400
 800af4c:	40000800 	.word	0x40000800
 800af50:	50000800 	.word	0x50000800
 800af54:	40000c00 	.word	0x40000c00
 800af58:	50000c00 	.word	0x50000c00
 800af5c:	40014000 	.word	0x40014000
 800af60:	50014000 	.word	0x50014000

0800af64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af6c:	bf00      	nop
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af80:	bf00      	nop
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800afbc:	bf00      	nop
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800afd0:	bf00      	nop
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800afe4:	bf00      	nop
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d101      	bne.n	800b002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	e042      	b.n	800b088 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d106      	bne.n	800b01a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f7f6 fe63 	bl	8001ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2224      	movs	r2, #36	@ 0x24
 800b01e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f022 0201 	bic.w	r2, r2, #1
 800b030:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b036:	2b00      	cmp	r3, #0
 800b038:	d002      	beq.n	800b040 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 fa68 	bl	800b510 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 f8c3 	bl	800b1cc <UART_SetConfig>
 800b046:	4603      	mov	r3, r0
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d101      	bne.n	800b050 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b04c:	2301      	movs	r3, #1
 800b04e:	e01b      	b.n	800b088 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	685a      	ldr	r2, [r3, #4]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b05e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	689a      	ldr	r2, [r3, #8]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b06e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f042 0201 	orr.w	r2, r2, #1
 800b07e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 fae7 	bl	800b654 <UART_CheckIdleState>
 800b086:	4603      	mov	r3, r0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3708      	adds	r7, #8
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b08a      	sub	sp, #40	@ 0x28
 800b094:	af02      	add	r7, sp, #8
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	603b      	str	r3, [r7, #0]
 800b09c:	4613      	mov	r3, r2
 800b09e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0a6:	2b20      	cmp	r3, #32
 800b0a8:	f040 808b 	bne.w	800b1c2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d002      	beq.n	800b0b8 <HAL_UART_Transmit+0x28>
 800b0b2:	88fb      	ldrh	r3, [r7, #6]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d101      	bne.n	800b0bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e083      	b.n	800b1c4 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0c6:	2b80      	cmp	r3, #128	@ 0x80
 800b0c8:	d107      	bne.n	800b0da <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	689a      	ldr	r2, [r3, #8]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b0d8:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2221      	movs	r2, #33	@ 0x21
 800b0e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b0ea:	f7f6 fecf 	bl	8001e8c <HAL_GetTick>
 800b0ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	88fa      	ldrh	r2, [r7, #6]
 800b0f4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	88fa      	ldrh	r2, [r7, #6]
 800b0fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b108:	d108      	bne.n	800b11c <HAL_UART_Transmit+0x8c>
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d104      	bne.n	800b11c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800b112:	2300      	movs	r3, #0
 800b114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	61bb      	str	r3, [r7, #24]
 800b11a:	e003      	b.n	800b124 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b120:	2300      	movs	r3, #0
 800b122:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b124:	e030      	b.n	800b188 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	2200      	movs	r2, #0
 800b12e:	2180      	movs	r1, #128	@ 0x80
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	f000 fb39 	bl	800b7a8 <UART_WaitOnFlagUntilTimeout>
 800b136:	4603      	mov	r3, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d005      	beq.n	800b148 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2220      	movs	r2, #32
 800b140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b144:	2303      	movs	r3, #3
 800b146:	e03d      	b.n	800b1c4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10b      	bne.n	800b166 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	881b      	ldrh	r3, [r3, #0]
 800b152:	461a      	mov	r2, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b15c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	3302      	adds	r3, #2
 800b162:	61bb      	str	r3, [r7, #24]
 800b164:	e007      	b.n	800b176 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	781a      	ldrb	r2, [r3, #0]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	3301      	adds	r3, #1
 800b174:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	3b01      	subs	r3, #1
 800b180:	b29a      	uxth	r2, r3
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b18e:	b29b      	uxth	r3, r3
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1c8      	bne.n	800b126 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	9300      	str	r3, [sp, #0]
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	2200      	movs	r2, #0
 800b19c:	2140      	movs	r1, #64	@ 0x40
 800b19e:	68f8      	ldr	r0, [r7, #12]
 800b1a0:	f000 fb02 	bl	800b7a8 <UART_WaitOnFlagUntilTimeout>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d005      	beq.n	800b1b6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2220      	movs	r2, #32
 800b1ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b1b2:	2303      	movs	r3, #3
 800b1b4:	e006      	b.n	800b1c4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2220      	movs	r2, #32
 800b1ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	e000      	b.n	800b1c4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b1c2:	2302      	movs	r3, #2
  }
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3720      	adds	r7, #32
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1d0:	b094      	sub	sp, #80	@ 0x50
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	4b7e      	ldr	r3, [pc, #504]	@ (800b3dc <UART_SetConfig+0x210>)
 800b1e2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1e6:	689a      	ldr	r2, [r3, #8]
 800b1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ea:	691b      	ldr	r3, [r3, #16]
 800b1ec:	431a      	orrs	r2, r3
 800b1ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1f0:	695b      	ldr	r3, [r3, #20]
 800b1f2:	431a      	orrs	r2, r3
 800b1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1f6:	69db      	ldr	r3, [r3, #28]
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4977      	ldr	r1, [pc, #476]	@ (800b3e0 <UART_SetConfig+0x214>)
 800b204:	4019      	ands	r1, r3
 800b206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b20c:	430b      	orrs	r3, r1
 800b20e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b21c:	68d9      	ldr	r1, [r3, #12]
 800b21e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	ea40 0301 	orr.w	r3, r0, r1
 800b226:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b22a:	699b      	ldr	r3, [r3, #24]
 800b22c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	4b6a      	ldr	r3, [pc, #424]	@ (800b3dc <UART_SetConfig+0x210>)
 800b234:	429a      	cmp	r2, r3
 800b236:	d009      	beq.n	800b24c <UART_SetConfig+0x80>
 800b238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	4b69      	ldr	r3, [pc, #420]	@ (800b3e4 <UART_SetConfig+0x218>)
 800b23e:	429a      	cmp	r2, r3
 800b240:	d004      	beq.n	800b24c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b244:	6a1a      	ldr	r2, [r3, #32]
 800b246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b248:	4313      	orrs	r3, r2
 800b24a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b256:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b260:	430b      	orrs	r3, r1
 800b262:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b26a:	f023 000f 	bic.w	r0, r3, #15
 800b26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b270:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	ea40 0301 	orr.w	r3, r0, r1
 800b27a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	4b59      	ldr	r3, [pc, #356]	@ (800b3e8 <UART_SetConfig+0x21c>)
 800b282:	429a      	cmp	r2, r3
 800b284:	d102      	bne.n	800b28c <UART_SetConfig+0xc0>
 800b286:	2301      	movs	r3, #1
 800b288:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b28a:	e029      	b.n	800b2e0 <UART_SetConfig+0x114>
 800b28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	4b56      	ldr	r3, [pc, #344]	@ (800b3ec <UART_SetConfig+0x220>)
 800b292:	429a      	cmp	r2, r3
 800b294:	d102      	bne.n	800b29c <UART_SetConfig+0xd0>
 800b296:	2302      	movs	r3, #2
 800b298:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b29a:	e021      	b.n	800b2e0 <UART_SetConfig+0x114>
 800b29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	4b53      	ldr	r3, [pc, #332]	@ (800b3f0 <UART_SetConfig+0x224>)
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d102      	bne.n	800b2ac <UART_SetConfig+0xe0>
 800b2a6:	2304      	movs	r3, #4
 800b2a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2aa:	e019      	b.n	800b2e0 <UART_SetConfig+0x114>
 800b2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	4b50      	ldr	r3, [pc, #320]	@ (800b3f4 <UART_SetConfig+0x228>)
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d102      	bne.n	800b2bc <UART_SetConfig+0xf0>
 800b2b6:	2308      	movs	r3, #8
 800b2b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2ba:	e011      	b.n	800b2e0 <UART_SetConfig+0x114>
 800b2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	4b4d      	ldr	r3, [pc, #308]	@ (800b3f8 <UART_SetConfig+0x22c>)
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d102      	bne.n	800b2cc <UART_SetConfig+0x100>
 800b2c6:	2310      	movs	r3, #16
 800b2c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2ca:	e009      	b.n	800b2e0 <UART_SetConfig+0x114>
 800b2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	4b42      	ldr	r3, [pc, #264]	@ (800b3dc <UART_SetConfig+0x210>)
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d102      	bne.n	800b2dc <UART_SetConfig+0x110>
 800b2d6:	2320      	movs	r3, #32
 800b2d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2da:	e001      	b.n	800b2e0 <UART_SetConfig+0x114>
 800b2dc:	2300      	movs	r3, #0
 800b2de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	4b3d      	ldr	r3, [pc, #244]	@ (800b3dc <UART_SetConfig+0x210>)
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d005      	beq.n	800b2f6 <UART_SetConfig+0x12a>
 800b2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	4b3d      	ldr	r3, [pc, #244]	@ (800b3e4 <UART_SetConfig+0x218>)
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	f040 8085 	bne.w	800b400 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b2f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	623b      	str	r3, [r7, #32]
 800b2fc:	627a      	str	r2, [r7, #36]	@ 0x24
 800b2fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b302:	f7fd ff17 	bl	8009134 <HAL_RCCEx_GetPeriphCLKFreq>
 800b306:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f000 80e8 	beq.w	800b4e0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b314:	4a39      	ldr	r2, [pc, #228]	@ (800b3fc <UART_SetConfig+0x230>)
 800b316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b31a:	461a      	mov	r2, r3
 800b31c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b31e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b322:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b326:	685a      	ldr	r2, [r3, #4]
 800b328:	4613      	mov	r3, r2
 800b32a:	005b      	lsls	r3, r3, #1
 800b32c:	4413      	add	r3, r2
 800b32e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b330:	429a      	cmp	r2, r3
 800b332:	d305      	bcc.n	800b340 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b33a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d903      	bls.n	800b348 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800b340:	2301      	movs	r3, #1
 800b342:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b346:	e048      	b.n	800b3da <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b34a:	2200      	movs	r2, #0
 800b34c:	61bb      	str	r3, [r7, #24]
 800b34e:	61fa      	str	r2, [r7, #28]
 800b350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b354:	4a29      	ldr	r2, [pc, #164]	@ (800b3fc <UART_SetConfig+0x230>)
 800b356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	2200      	movs	r2, #0
 800b35e:	613b      	str	r3, [r7, #16]
 800b360:	617a      	str	r2, [r7, #20]
 800b362:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b366:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b36a:	f7f4 ffd9 	bl	8000320 <__aeabi_uldivmod>
 800b36e:	4602      	mov	r2, r0
 800b370:	460b      	mov	r3, r1
 800b372:	4610      	mov	r0, r2
 800b374:	4619      	mov	r1, r3
 800b376:	f04f 0200 	mov.w	r2, #0
 800b37a:	f04f 0300 	mov.w	r3, #0
 800b37e:	020b      	lsls	r3, r1, #8
 800b380:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b384:	0202      	lsls	r2, r0, #8
 800b386:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b388:	6849      	ldr	r1, [r1, #4]
 800b38a:	0849      	lsrs	r1, r1, #1
 800b38c:	2000      	movs	r0, #0
 800b38e:	460c      	mov	r4, r1
 800b390:	4605      	mov	r5, r0
 800b392:	eb12 0804 	adds.w	r8, r2, r4
 800b396:	eb43 0905 	adc.w	r9, r3, r5
 800b39a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	60bb      	str	r3, [r7, #8]
 800b3a2:	60fa      	str	r2, [r7, #12]
 800b3a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b3a8:	4640      	mov	r0, r8
 800b3aa:	4649      	mov	r1, r9
 800b3ac:	f7f4 ffb8 	bl	8000320 <__aeabi_uldivmod>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b3b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b3be:	d308      	bcc.n	800b3d2 <UART_SetConfig+0x206>
 800b3c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3c6:	d204      	bcs.n	800b3d2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800b3c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b3ce:	60da      	str	r2, [r3, #12]
 800b3d0:	e003      	b.n	800b3da <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b3d8:	e082      	b.n	800b4e0 <UART_SetConfig+0x314>
 800b3da:	e081      	b.n	800b4e0 <UART_SetConfig+0x314>
 800b3dc:	46002400 	.word	0x46002400
 800b3e0:	cfff69f3 	.word	0xcfff69f3
 800b3e4:	56002400 	.word	0x56002400
 800b3e8:	40013800 	.word	0x40013800
 800b3ec:	40004400 	.word	0x40004400
 800b3f0:	40004800 	.word	0x40004800
 800b3f4:	40004c00 	.word	0x40004c00
 800b3f8:	40005000 	.word	0x40005000
 800b3fc:	0802facc 	.word	0x0802facc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b402:	69db      	ldr	r3, [r3, #28]
 800b404:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b408:	d13c      	bne.n	800b484 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b40a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b40c:	2200      	movs	r2, #0
 800b40e:	603b      	str	r3, [r7, #0]
 800b410:	607a      	str	r2, [r7, #4]
 800b412:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b416:	f7fd fe8d 	bl	8009134 <HAL_RCCEx_GetPeriphCLKFreq>
 800b41a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b41c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d05e      	beq.n	800b4e0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b426:	4a39      	ldr	r2, [pc, #228]	@ (800b50c <UART_SetConfig+0x340>)
 800b428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b42c:	461a      	mov	r2, r3
 800b42e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b430:	fbb3 f3f2 	udiv	r3, r3, r2
 800b434:	005a      	lsls	r2, r3, #1
 800b436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	085b      	lsrs	r3, r3, #1
 800b43c:	441a      	add	r2, r3
 800b43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	fbb2 f3f3 	udiv	r3, r2, r3
 800b446:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b44a:	2b0f      	cmp	r3, #15
 800b44c:	d916      	bls.n	800b47c <UART_SetConfig+0x2b0>
 800b44e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b454:	d212      	bcs.n	800b47c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b458:	b29b      	uxth	r3, r3
 800b45a:	f023 030f 	bic.w	r3, r3, #15
 800b45e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b462:	085b      	lsrs	r3, r3, #1
 800b464:	b29b      	uxth	r3, r3
 800b466:	f003 0307 	and.w	r3, r3, #7
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b46e:	4313      	orrs	r3, r2
 800b470:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b478:	60da      	str	r2, [r3, #12]
 800b47a:	e031      	b.n	800b4e0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b47c:	2301      	movs	r3, #1
 800b47e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b482:	e02d      	b.n	800b4e0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b484:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b486:	2200      	movs	r2, #0
 800b488:	469a      	mov	sl, r3
 800b48a:	4693      	mov	fp, r2
 800b48c:	4650      	mov	r0, sl
 800b48e:	4659      	mov	r1, fp
 800b490:	f7fd fe50 	bl	8009134 <HAL_RCCEx_GetPeriphCLKFreq>
 800b494:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d021      	beq.n	800b4e0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b49e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a0:	4a1a      	ldr	r2, [pc, #104]	@ (800b50c <UART_SetConfig+0x340>)
 800b4a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4aa:	fbb3 f2f2 	udiv	r2, r3, r2
 800b4ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	085b      	lsrs	r3, r3, #1
 800b4b4:	441a      	add	r2, r3
 800b4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4c2:	2b0f      	cmp	r3, #15
 800b4c4:	d909      	bls.n	800b4da <UART_SetConfig+0x30e>
 800b4c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4cc:	d205      	bcs.n	800b4da <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b4ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4d0:	b29a      	uxth	r2, r3
 800b4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	60da      	str	r2, [r3, #12]
 800b4d8:	e002      	b.n	800b4e0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b4fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b500:	4618      	mov	r0, r3
 800b502:	3750      	adds	r7, #80	@ 0x50
 800b504:	46bd      	mov	sp, r7
 800b506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b50a:	bf00      	nop
 800b50c:	0802facc 	.word	0x0802facc

0800b510 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b51c:	f003 0308 	and.w	r3, r3, #8
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00a      	beq.n	800b53a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	430a      	orrs	r2, r1
 800b538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b53e:	f003 0301 	and.w	r3, r3, #1
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00a      	beq.n	800b55c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	430a      	orrs	r2, r1
 800b55a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b560:	f003 0302 	and.w	r3, r3, #2
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00a      	beq.n	800b57e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	430a      	orrs	r2, r1
 800b57c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b582:	f003 0304 	and.w	r3, r3, #4
 800b586:	2b00      	cmp	r3, #0
 800b588:	d00a      	beq.n	800b5a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	430a      	orrs	r2, r1
 800b59e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5a4:	f003 0310 	and.w	r3, r3, #16
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00a      	beq.n	800b5c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	430a      	orrs	r2, r1
 800b5c0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5c6:	f003 0320 	and.w	r3, r3, #32
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00a      	beq.n	800b5e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	430a      	orrs	r2, r1
 800b5e2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d01a      	beq.n	800b626 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	430a      	orrs	r2, r1
 800b604:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b60a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b60e:	d10a      	bne.n	800b626 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	430a      	orrs	r2, r1
 800b624:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b62a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00a      	beq.n	800b648 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	430a      	orrs	r2, r1
 800b646:	605a      	str	r2, [r3, #4]
  }
}
 800b648:	bf00      	nop
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b098      	sub	sp, #96	@ 0x60
 800b658:	af02      	add	r7, sp, #8
 800b65a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b664:	f7f6 fc12 	bl	8001e8c <HAL_GetTick>
 800b668:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f003 0308 	and.w	r3, r3, #8
 800b674:	2b08      	cmp	r3, #8
 800b676:	d12f      	bne.n	800b6d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b678:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b680:	2200      	movs	r2, #0
 800b682:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 f88e 	bl	800b7a8 <UART_WaitOnFlagUntilTimeout>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d022      	beq.n	800b6d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b69a:	e853 3f00 	ldrex	r3, [r3]
 800b69e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b6a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b6a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b6b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6b8:	e841 2300 	strex	r3, r2, [r1]
 800b6bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b6be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d1e6      	bne.n	800b692 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2220      	movs	r2, #32
 800b6c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6d4:	2303      	movs	r3, #3
 800b6d6:	e063      	b.n	800b7a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f003 0304 	and.w	r3, r3, #4
 800b6e2:	2b04      	cmp	r3, #4
 800b6e4:	d149      	bne.n	800b77a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b6ea:	9300      	str	r3, [sp, #0]
 800b6ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 f857 	bl	800b7a8 <UART_WaitOnFlagUntilTimeout>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d03c      	beq.n	800b77a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b708:	e853 3f00 	ldrex	r3, [r3]
 800b70c:	623b      	str	r3, [r7, #32]
   return(result);
 800b70e:	6a3b      	ldr	r3, [r7, #32]
 800b710:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b714:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	461a      	mov	r2, r3
 800b71c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b71e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b720:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b722:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b726:	e841 2300 	strex	r3, r2, [r1]
 800b72a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b72c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d1e6      	bne.n	800b700 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	3308      	adds	r3, #8
 800b738:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	e853 3f00 	ldrex	r3, [r3]
 800b740:	60fb      	str	r3, [r7, #12]
   return(result);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f023 0301 	bic.w	r3, r3, #1
 800b748:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	3308      	adds	r3, #8
 800b750:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b752:	61fa      	str	r2, [r7, #28]
 800b754:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b756:	69b9      	ldr	r1, [r7, #24]
 800b758:	69fa      	ldr	r2, [r7, #28]
 800b75a:	e841 2300 	strex	r3, r2, [r1]
 800b75e:	617b      	str	r3, [r7, #20]
   return(result);
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1e5      	bne.n	800b732 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2220      	movs	r2, #32
 800b76a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2200      	movs	r2, #0
 800b772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b776:	2303      	movs	r3, #3
 800b778:	e012      	b.n	800b7a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2220      	movs	r2, #32
 800b77e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2220      	movs	r2, #32
 800b786:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3758      	adds	r7, #88	@ 0x58
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	603b      	str	r3, [r7, #0]
 800b7b4:	4613      	mov	r3, r2
 800b7b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7b8:	e04f      	b.n	800b85a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7c0:	d04b      	beq.n	800b85a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7c2:	f7f6 fb63 	bl	8001e8c <HAL_GetTick>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	69ba      	ldr	r2, [r7, #24]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d302      	bcc.n	800b7d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d101      	bne.n	800b7dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b7d8:	2303      	movs	r3, #3
 800b7da:	e04e      	b.n	800b87a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f003 0304 	and.w	r3, r3, #4
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d037      	beq.n	800b85a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	2b80      	cmp	r3, #128	@ 0x80
 800b7ee:	d034      	beq.n	800b85a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	2b40      	cmp	r3, #64	@ 0x40
 800b7f4:	d031      	beq.n	800b85a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	69db      	ldr	r3, [r3, #28]
 800b7fc:	f003 0308 	and.w	r3, r3, #8
 800b800:	2b08      	cmp	r3, #8
 800b802:	d110      	bne.n	800b826 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2208      	movs	r2, #8
 800b80a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	f000 f838 	bl	800b882 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2208      	movs	r2, #8
 800b816:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2200      	movs	r2, #0
 800b81e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	e029      	b.n	800b87a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	69db      	ldr	r3, [r3, #28]
 800b82c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b830:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b834:	d111      	bne.n	800b85a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b83e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f000 f81e 	bl	800b882 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2220      	movs	r2, #32
 800b84a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2200      	movs	r2, #0
 800b852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b856:	2303      	movs	r3, #3
 800b858:	e00f      	b.n	800b87a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	69da      	ldr	r2, [r3, #28]
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	4013      	ands	r3, r2
 800b864:	68ba      	ldr	r2, [r7, #8]
 800b866:	429a      	cmp	r2, r3
 800b868:	bf0c      	ite	eq
 800b86a:	2301      	moveq	r3, #1
 800b86c:	2300      	movne	r3, #0
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	461a      	mov	r2, r3
 800b872:	79fb      	ldrb	r3, [r7, #7]
 800b874:	429a      	cmp	r2, r3
 800b876:	d0a0      	beq.n	800b7ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3710      	adds	r7, #16
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}

0800b882 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b882:	b480      	push	{r7}
 800b884:	b095      	sub	sp, #84	@ 0x54
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b892:	e853 3f00 	ldrex	r3, [r3]
 800b896:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b89a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b89e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b8ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b8b0:	e841 2300 	strex	r3, r2, [r1]
 800b8b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1e6      	bne.n	800b88a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	3308      	adds	r3, #8
 800b8c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c4:	6a3b      	ldr	r3, [r7, #32]
 800b8c6:	e853 3f00 	ldrex	r3, [r3]
 800b8ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b8d2:	f023 0301 	bic.w	r3, r3, #1
 800b8d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	3308      	adds	r3, #8
 800b8de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b8e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8e8:	e841 2300 	strex	r3, r2, [r1]
 800b8ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d1e3      	bne.n	800b8bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d118      	bne.n	800b92e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	e853 3f00 	ldrex	r3, [r3]
 800b908:	60bb      	str	r3, [r7, #8]
   return(result);
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	f023 0310 	bic.w	r3, r3, #16
 800b910:	647b      	str	r3, [r7, #68]	@ 0x44
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	461a      	mov	r2, r3
 800b918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b91a:	61bb      	str	r3, [r7, #24]
 800b91c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b91e:	6979      	ldr	r1, [r7, #20]
 800b920:	69ba      	ldr	r2, [r7, #24]
 800b922:	e841 2300 	strex	r3, r2, [r1]
 800b926:	613b      	str	r3, [r7, #16]
   return(result);
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1e6      	bne.n	800b8fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2220      	movs	r2, #32
 800b932:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b942:	bf00      	nop
 800b944:	3754      	adds	r7, #84	@ 0x54
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr

0800b94e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b94e:	b480      	push	{r7}
 800b950:	b085      	sub	sp, #20
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d101      	bne.n	800b964 <HAL_UARTEx_DisableFifoMode+0x16>
 800b960:	2302      	movs	r3, #2
 800b962:	e027      	b.n	800b9b4 <HAL_UARTEx_DisableFifoMode+0x66>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2224      	movs	r2, #36	@ 0x24
 800b970:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f022 0201 	bic.w	r2, r2, #1
 800b98a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b992:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	68fa      	ldr	r2, [r7, #12]
 800b9a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2220      	movs	r2, #32
 800b9a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3714      	adds	r7, #20
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d101      	bne.n	800b9d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	e02d      	b.n	800ba34 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2224      	movs	r2, #36	@ 0x24
 800b9e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	681a      	ldr	r2, [r3, #0]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f022 0201 	bic.w	r2, r2, #1
 800b9fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	683a      	ldr	r2, [r7, #0]
 800ba10:	430a      	orrs	r2, r1
 800ba12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 f84f 	bl	800bab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68fa      	ldr	r2, [r7, #12]
 800ba20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2220      	movs	r2, #32
 800ba26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d101      	bne.n	800ba54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba50:	2302      	movs	r3, #2
 800ba52:	e02d      	b.n	800bab0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2224      	movs	r2, #36	@ 0x24
 800ba60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f022 0201 	bic.w	r2, r2, #1
 800ba7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	430a      	orrs	r2, r1
 800ba8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 f811 	bl	800bab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2220      	movs	r2, #32
 800baa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800baae:	2300      	movs	r3, #0
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d108      	bne.n	800bada <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2201      	movs	r2, #1
 800bacc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2201      	movs	r2, #1
 800bad4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bad8:	e031      	b.n	800bb3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bada:	2308      	movs	r3, #8
 800badc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bade:	2308      	movs	r3, #8
 800bae0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	0e5b      	lsrs	r3, r3, #25
 800baea:	b2db      	uxtb	r3, r3
 800baec:	f003 0307 	and.w	r3, r3, #7
 800baf0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	0f5b      	lsrs	r3, r3, #29
 800bafa:	b2db      	uxtb	r3, r3
 800bafc:	f003 0307 	and.w	r3, r3, #7
 800bb00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb02:	7bbb      	ldrb	r3, [r7, #14]
 800bb04:	7b3a      	ldrb	r2, [r7, #12]
 800bb06:	4911      	ldr	r1, [pc, #68]	@ (800bb4c <UARTEx_SetNbDataToProcess+0x94>)
 800bb08:	5c8a      	ldrb	r2, [r1, r2]
 800bb0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb0e:	7b3a      	ldrb	r2, [r7, #12]
 800bb10:	490f      	ldr	r1, [pc, #60]	@ (800bb50 <UARTEx_SetNbDataToProcess+0x98>)
 800bb12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb14:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb18:	b29a      	uxth	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb20:	7bfb      	ldrb	r3, [r7, #15]
 800bb22:	7b7a      	ldrb	r2, [r7, #13]
 800bb24:	4909      	ldr	r1, [pc, #36]	@ (800bb4c <UARTEx_SetNbDataToProcess+0x94>)
 800bb26:	5c8a      	ldrb	r2, [r1, r2]
 800bb28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb2c:	7b7a      	ldrb	r2, [r7, #13]
 800bb2e:	4908      	ldr	r1, [pc, #32]	@ (800bb50 <UARTEx_SetNbDataToProcess+0x98>)
 800bb30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb32:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bb3e:	bf00      	nop
 800bb40:	3714      	adds	r7, #20
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop
 800bb4c:	0802fae4 	.word	0x0802fae4
 800bb50:	0802faec 	.word	0x0802faec

0800bb54 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f043 0202 	orr.w	r2, r3, #2
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	685a      	ldr	r2, [r3, #4]
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	021b      	lsls	r3, r3, #8
 800bb74:	431a      	orrs	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f023 0202 	bic.w	r2, r3, #2
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	601a      	str	r2, [r3, #0]
}
 800bb86:	bf00      	nop
 800bb88:	370c      	adds	r7, #12
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr
	...

0800bb94 <__NVIC_SetPriority>:
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	6039      	str	r1, [r7, #0]
 800bb9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	db0a      	blt.n	800bbbe <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	b2da      	uxtb	r2, r3
 800bbac:	490c      	ldr	r1, [pc, #48]	@ (800bbe0 <__NVIC_SetPriority+0x4c>)
 800bbae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbb2:	0112      	lsls	r2, r2, #4
 800bbb4:	b2d2      	uxtb	r2, r2
 800bbb6:	440b      	add	r3, r1
 800bbb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bbbc:	e00a      	b.n	800bbd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	b2da      	uxtb	r2, r3
 800bbc2:	4908      	ldr	r1, [pc, #32]	@ (800bbe4 <__NVIC_SetPriority+0x50>)
 800bbc4:	79fb      	ldrb	r3, [r7, #7]
 800bbc6:	f003 030f 	and.w	r3, r3, #15
 800bbca:	3b04      	subs	r3, #4
 800bbcc:	0112      	lsls	r2, r2, #4
 800bbce:	b2d2      	uxtb	r2, r2
 800bbd0:	440b      	add	r3, r1
 800bbd2:	761a      	strb	r2, [r3, #24]
}
 800bbd4:	bf00      	nop
 800bbd6:	370c      	adds	r7, #12
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr
 800bbe0:	e000e100 	.word	0xe000e100
 800bbe4:	e000ed00 	.word	0xe000ed00

0800bbe8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800bbec:	4b05      	ldr	r3, [pc, #20]	@ (800bc04 <SysTick_Handler+0x1c>)
 800bbee:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bbf0:	f002 fa82 	bl	800e0f8 <xTaskGetSchedulerState>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	d001      	beq.n	800bbfe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bbfa:	f003 f80d 	bl	800ec18 <xPortSysTickHandler>
  }
}
 800bbfe:	bf00      	nop
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	e000e010 	.word	0xe000e010

0800bc08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	f06f 0004 	mvn.w	r0, #4
 800bc12:	f7ff ffbf 	bl	800bb94 <__NVIC_SetPriority>
#endif
}
 800bc16:	bf00      	nop
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b086      	sub	sp, #24
 800bc1e:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800bc20:	2300      	movs	r3, #0
 800bc22:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc24:	f3ef 8305 	mrs	r3, IPSR
 800bc28:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc2a:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800bc30:	2301      	movs	r3, #1
 800bc32:	617b      	str	r3, [r7, #20]
 800bc34:	e013      	b.n	800bc5e <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800bc36:	f002 fa5f 	bl	800e0f8 <xTaskGetSchedulerState>
 800bc3a:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d00d      	beq.n	800bc5e <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800bc42:	f3ef 8310 	mrs	r3, PRIMASK
 800bc46:	60bb      	str	r3, [r7, #8]
  return(result);
 800bc48:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d105      	bne.n	800bc5a <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bc4e:	f3ef 8311 	mrs	r3, BASEPRI
 800bc52:	607b      	str	r3, [r7, #4]
  return(result);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d001      	beq.n	800bc5e <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800bc5e:	697b      	ldr	r3, [r7, #20]
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3718      	adds	r7, #24
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800bc6e:	f7ff ffd4 	bl	800bc1a <IRQ_Context>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d003      	beq.n	800bc80 <osKernelInitialize+0x18>
    stat = osErrorISR;
 800bc78:	f06f 0305 	mvn.w	r3, #5
 800bc7c:	607b      	str	r3, [r7, #4]
 800bc7e:	e012      	b.n	800bca6 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800bc80:	f002 fa3a 	bl	800e0f8 <xTaskGetSchedulerState>
 800bc84:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d109      	bne.n	800bca0 <osKernelInitialize+0x38>
 800bc8c:	4b08      	ldr	r3, [pc, #32]	@ (800bcb0 <osKernelInitialize+0x48>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d105      	bne.n	800bca0 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bc94:	4b06      	ldr	r3, [pc, #24]	@ (800bcb0 <osKernelInitialize+0x48>)
 800bc96:	2201      	movs	r2, #1
 800bc98:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	607b      	str	r3, [r7, #4]
 800bc9e:	e002      	b.n	800bca6 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800bca0:	f04f 33ff 	mov.w	r3, #4294967295
 800bca4:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800bca6:	687b      	ldr	r3, [r7, #4]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3708      	adds	r7, #8
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}
 800bcb0:	20045c8c 	.word	0x20045c8c

0800bcb4 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800bcba:	f7ff ffae 	bl	800bc1a <IRQ_Context>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d003      	beq.n	800bccc <osKernelStart+0x18>
    stat = osErrorISR;
 800bcc4:	f06f 0305 	mvn.w	r3, #5
 800bcc8:	607b      	str	r3, [r7, #4]
 800bcca:	e016      	b.n	800bcfa <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800bccc:	f002 fa14 	bl	800e0f8 <xTaskGetSchedulerState>
 800bcd0:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d10d      	bne.n	800bcf4 <osKernelStart+0x40>
 800bcd8:	4b0a      	ldr	r3, [pc, #40]	@ (800bd04 <osKernelStart+0x50>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d109      	bne.n	800bcf4 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bce0:	f7ff ff92 	bl	800bc08 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 800bce4:	4b07      	ldr	r3, [pc, #28]	@ (800bd04 <osKernelStart+0x50>)
 800bce6:	2202      	movs	r2, #2
 800bce8:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bcea:	f001 fcc7 	bl	800d67c <vTaskStartScheduler>
      stat = osOK;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	607b      	str	r3, [r7, #4]
 800bcf2:	e002      	b.n	800bcfa <osKernelStart+0x46>
    } else {
      stat = osError;
 800bcf4:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf8:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800bcfa:	687b      	ldr	r3, [r7, #4]
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	20045c8c 	.word	0x20045c8c

0800bd08 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b08e      	sub	sp, #56	@ 0x38
 800bd0c:	af04      	add	r7, sp, #16
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	60b9      	str	r1, [r7, #8]
 800bd12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bd14:	2300      	movs	r3, #0
 800bd16:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 800bd18:	f7ff ff7f 	bl	800bc1a <IRQ_Context>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d17f      	bne.n	800be22 <osThreadNew+0x11a>
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d07c      	beq.n	800be22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bd28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd2c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bd2e:	2318      	movs	r3, #24
 800bd30:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bd32:	2300      	movs	r3, #0
 800bd34:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bd36:	f04f 33ff 	mov.w	r3, #4294967295
 800bd3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d045      	beq.n	800bdce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d002      	beq.n	800bd50 <osThreadNew+0x48>
        name = attr->name;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	699b      	ldr	r3, [r3, #24]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d002      	beq.n	800bd5e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	699b      	ldr	r3, [r3, #24]
 800bd5c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d008      	beq.n	800bd76 <osThreadNew+0x6e>
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	2b38      	cmp	r3, #56	@ 0x38
 800bd68:	d805      	bhi.n	800bd76 <osThreadNew+0x6e>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	f003 0301 	and.w	r3, r3, #1
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d001      	beq.n	800bd7a <osThreadNew+0x72>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 800bd76:	2300      	movs	r3, #0
 800bd78:	e054      	b.n	800be24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d003      	beq.n	800bd8a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	695b      	ldr	r3, [r3, #20]
 800bd86:	089b      	lsrs	r3, r3, #2
 800bd88:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d00e      	beq.n	800bdb0 <osThreadNew+0xa8>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	2b5b      	cmp	r3, #91	@ 0x5b
 800bd98:	d90a      	bls.n	800bdb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d006      	beq.n	800bdb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	695b      	ldr	r3, [r3, #20]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d002      	beq.n	800bdb0 <osThreadNew+0xa8>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	61bb      	str	r3, [r7, #24]
 800bdae:	e010      	b.n	800bdd2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	689b      	ldr	r3, [r3, #8]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d10c      	bne.n	800bdd2 <osThreadNew+0xca>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d108      	bne.n	800bdd2 <osThreadNew+0xca>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	691b      	ldr	r3, [r3, #16]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d104      	bne.n	800bdd2 <osThreadNew+0xca>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	61bb      	str	r3, [r7, #24]
 800bdcc:	e001      	b.n	800bdd2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bdd2:	69bb      	ldr	r3, [r7, #24]
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d110      	bne.n	800bdfa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bde0:	9202      	str	r2, [sp, #8]
 800bde2:	9301      	str	r3, [sp, #4]
 800bde4:	69fb      	ldr	r3, [r7, #28]
 800bde6:	9300      	str	r3, [sp, #0]
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	6a3a      	ldr	r2, [r7, #32]
 800bdec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bdee:	68f8      	ldr	r0, [r7, #12]
 800bdf0:	f001 fa74 	bl	800d2dc <xTaskCreateStatic>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	617b      	str	r3, [r7, #20]
 800bdf8:	e013      	b.n	800be22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d110      	bne.n	800be22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800be00:	6a3b      	ldr	r3, [r7, #32]
 800be02:	b29a      	uxth	r2, r3
 800be04:	f107 0314 	add.w	r3, r7, #20
 800be08:	9301      	str	r3, [sp, #4]
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	9300      	str	r3, [sp, #0]
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800be12:	68f8      	ldr	r0, [r7, #12]
 800be14:	f001 faaf 	bl	800d376 <xTaskCreate>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d001      	beq.n	800be22 <osThreadNew+0x11a>
            hTask = NULL;
 800be1e:	2300      	movs	r3, #0
 800be20:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800be22:	697b      	ldr	r3, [r7, #20]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3728      	adds	r7, #40	@ 0x28
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 800be34:	f7ff fef1 	bl	800bc1a <IRQ_Context>
 800be38:	4603      	mov	r3, r0
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d003      	beq.n	800be46 <osDelay+0x1a>
    stat = osErrorISR;
 800be3e:	f06f 0305 	mvn.w	r3, #5
 800be42:	60fb      	str	r3, [r7, #12]
 800be44:	e007      	b.n	800be56 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 800be46:	2300      	movs	r3, #0
 800be48:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d002      	beq.n	800be56 <osDelay+0x2a>
      vTaskDelay(ticks);
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f001 fbed 	bl	800d630 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800be56:	68fb      	ldr	r3, [r7, #12]
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3710      	adds	r7, #16
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <osSemaphoreNew>:
/* ==== Semaphore Management Functions ==== */

/*
  Create and Initialize a Semaphore object.
*/
osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800be60:	b580      	push	{r7, lr}
 800be62:	b088      	sub	sp, #32
 800be64:	af02      	add	r7, sp, #8
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
  SemaphoreHandle_t hSemaphore;
  int32_t mem;

  hSemaphore = NULL;
 800be6c:	2300      	movs	r3, #0
 800be6e:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (max_count > 0U) && (initial_count <= max_count)) {
 800be70:	f7ff fed3 	bl	800bc1a <IRQ_Context>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d175      	bne.n	800bf66 <osSemaphoreNew+0x106>
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d072      	beq.n	800bf66 <osSemaphoreNew+0x106>
 800be80:	68ba      	ldr	r2, [r7, #8]
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	429a      	cmp	r2, r3
 800be86:	d86e      	bhi.n	800bf66 <osSemaphoreNew+0x106>
    mem = -1;
 800be88:	f04f 33ff 	mov.w	r3, #4294967295
 800be8c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d015      	beq.n	800bec0 <osSemaphoreNew+0x60>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d006      	beq.n	800beaa <osSemaphoreNew+0x4a>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	2b4f      	cmp	r3, #79	@ 0x4f
 800bea2:	d902      	bls.n	800beaa <osSemaphoreNew+0x4a>
        /* The memory for control block is provided, use static object */
        mem = 1;
 800bea4:	2301      	movs	r3, #1
 800bea6:	613b      	str	r3, [r7, #16]
 800bea8:	e00c      	b.n	800bec4 <osSemaphoreNew+0x64>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	689b      	ldr	r3, [r3, #8]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d108      	bne.n	800bec4 <osSemaphoreNew+0x64>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d104      	bne.n	800bec4 <osSemaphoreNew+0x64>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800beba:	2300      	movs	r3, #0
 800bebc:	613b      	str	r3, [r7, #16]
 800bebe:	e001      	b.n	800bec4 <osSemaphoreNew+0x64>
        }
      }
    }
    else {
      mem = 0;
 800bec0:	2300      	movs	r3, #0
 800bec2:	613b      	str	r3, [r7, #16]
    }

    if (mem != -1) {
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beca:	d04c      	beq.n	800bf66 <osSemaphoreNew+0x106>
      if (max_count == 1U) {
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2b01      	cmp	r3, #1
 800bed0:	d128      	bne.n	800bf24 <osSemaphoreNew+0xc4>
        if (mem == 1) {
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d10a      	bne.n	800beee <osSemaphoreNew+0x8e>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	2203      	movs	r2, #3
 800bede:	9200      	str	r2, [sp, #0]
 800bee0:	2200      	movs	r2, #0
 800bee2:	2100      	movs	r1, #0
 800bee4:	2001      	movs	r0, #1
 800bee6:	f000 fb2e 	bl	800c546 <xQueueGenericCreateStatic>
 800beea:	6178      	str	r0, [r7, #20]
 800beec:	e005      	b.n	800befa <osSemaphoreNew+0x9a>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800beee:	2203      	movs	r2, #3
 800bef0:	2100      	movs	r1, #0
 800bef2:	2001      	movs	r0, #1
 800bef4:	f000 fb70 	bl	800c5d8 <xQueueGenericCreate>
 800bef8:	6178      	str	r0, [r7, #20]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d022      	beq.n	800bf46 <osSemaphoreNew+0xe6>
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d01f      	beq.n	800bf46 <osSemaphoreNew+0xe6>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bf06:	2300      	movs	r3, #0
 800bf08:	2200      	movs	r2, #0
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	6978      	ldr	r0, [r7, #20]
 800bf0e:	f000 fc23 	bl	800c758 <xQueueGenericSend>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d016      	beq.n	800bf46 <osSemaphoreNew+0xe6>
            vSemaphoreDelete (hSemaphore);
 800bf18:	6978      	ldr	r0, [r7, #20]
 800bf1a:	f000 fff0 	bl	800cefe <vQueueDelete>
            hSemaphore = NULL;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	617b      	str	r3, [r7, #20]
 800bf22:	e010      	b.n	800bf46 <osSemaphoreNew+0xe6>
          }
        }
      }
      else {
        if (mem == 1) {
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d108      	bne.n	800bf3c <osSemaphoreNew+0xdc>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	461a      	mov	r2, r3
 800bf30:	68b9      	ldr	r1, [r7, #8]
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f000 fbbe 	bl	800c6b4 <xQueueCreateCountingSemaphoreStatic>
 800bf38:	6178      	str	r0, [r7, #20]
 800bf3a:	e004      	b.n	800bf46 <osSemaphoreNew+0xe6>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800bf3c:	68b9      	ldr	r1, [r7, #8]
 800bf3e:	68f8      	ldr	r0, [r7, #12]
 800bf40:	f000 fbe3 	bl	800c70a <xQueueCreateCountingSemaphore>
 800bf44:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00c      	beq.n	800bf66 <osSemaphoreNew+0x106>
        if ((attr != NULL) && (attr->name != NULL)) {
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d009      	beq.n	800bf66 <osSemaphoreNew+0x106>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d005      	beq.n	800bf66 <osSemaphoreNew+0x106>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hSemaphore, attr->name);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4619      	mov	r1, r3
 800bf60:	6978      	ldr	r0, [r7, #20]
 800bf62:	f001 f911 	bl	800d188 <vQueueAddToRegistry>
      #endif
    }
  }

  /* Return semaphore ID */
  return ((osSemaphoreId_t)hSemaphore);
 800bf66:	697b      	ldr	r3, [r7, #20]
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3718      	adds	r7, #24
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <osSemaphoreAcquire>:

/*
  Acquire a Semaphore token or timeout if no tokens are available.
*/
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b086      	sub	sp, #24
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d103      	bne.n	800bf90 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800bf88:	f06f 0303 	mvn.w	r3, #3
 800bf8c:	617b      	str	r3, [r7, #20]
 800bf8e:	e034      	b.n	800bffa <osSemaphoreAcquire+0x8a>
  }
  else if (IRQ_Context() != 0U) {
 800bf90:	f7ff fe43 	bl	800bc1a <IRQ_Context>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d01e      	beq.n	800bfd8 <osSemaphoreAcquire+0x68>
    if (timeout != 0U) {
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d003      	beq.n	800bfa8 <osSemaphoreAcquire+0x38>
      stat = osErrorParameter;
 800bfa0:	f06f 0303 	mvn.w	r3, #3
 800bfa4:	617b      	str	r3, [r7, #20]
 800bfa6:	e028      	b.n	800bffa <osSemaphoreAcquire+0x8a>
    }
    else {
      yield = pdFALSE;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800bfac:	f107 030c 	add.w	r3, r7, #12
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	6938      	ldr	r0, [r7, #16]
 800bfb6:	f000 ff30 	bl	800ce1a <xQueueReceiveFromISR>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d003      	beq.n	800bfc8 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
 800bfc0:	f06f 0302 	mvn.w	r3, #2
 800bfc4:	617b      	str	r3, [r7, #20]
 800bfc6:	e018      	b.n	800bffa <osSemaphoreAcquire+0x8a>
      } else {
        portYIELD_FROM_ISR (yield);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d015      	beq.n	800bffa <osSemaphoreAcquire+0x8a>
 800bfce:	4b0d      	ldr	r3, [pc, #52]	@ (800c004 <osSemaphoreAcquire+0x94>)
 800bfd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfd4:	601a      	str	r2, [r3, #0]
 800bfd6:	e010      	b.n	800bffa <osSemaphoreAcquire+0x8a>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800bfd8:	6839      	ldr	r1, [r7, #0]
 800bfda:	6938      	ldr	r0, [r7, #16]
 800bfdc:	f000 fe43 	bl	800cc66 <xQueueSemaphoreTake>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d009      	beq.n	800bffa <osSemaphoreAcquire+0x8a>
      if (timeout != 0U) {
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d003      	beq.n	800bff4 <osSemaphoreAcquire+0x84>
        stat = osErrorTimeout;
 800bfec:	f06f 0301 	mvn.w	r3, #1
 800bff0:	617b      	str	r3, [r7, #20]
 800bff2:	e002      	b.n	800bffa <osSemaphoreAcquire+0x8a>
      } else {
        stat = osErrorResource;
 800bff4:	f06f 0302 	mvn.w	r3, #2
 800bff8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800bffa:	697b      	ldr	r3, [r7, #20]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3718      	adds	r7, #24
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	e000ed04 	.word	0xe000ed04

0800c008 <osSemaphoreRelease>:

/*
  Release a Semaphore token up to the initial maximum count.
*/
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c008:	b580      	push	{r7, lr}
 800c00a:	b086      	sub	sp, #24
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c014:	2300      	movs	r3, #0
 800c016:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d103      	bne.n	800c026 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c01e:	f06f 0303 	mvn.w	r3, #3
 800c022:	617b      	str	r3, [r7, #20]
 800c024:	e027      	b.n	800c076 <osSemaphoreRelease+0x6e>
  }
  else if (IRQ_Context() != 0U) {
 800c026:	f7ff fdf8 	bl	800bc1a <IRQ_Context>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d016      	beq.n	800c05e <osSemaphoreRelease+0x56>
    yield = pdFALSE;
 800c030:	2300      	movs	r3, #0
 800c032:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c034:	f107 030c 	add.w	r3, r7, #12
 800c038:	4619      	mov	r1, r3
 800c03a:	6938      	ldr	r0, [r7, #16]
 800c03c:	f000 fcdf 	bl	800c9fe <xQueueGiveFromISR>
 800c040:	4603      	mov	r3, r0
 800c042:	2b01      	cmp	r3, #1
 800c044:	d003      	beq.n	800c04e <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800c046:	f06f 0302 	mvn.w	r3, #2
 800c04a:	617b      	str	r3, [r7, #20]
 800c04c:	e013      	b.n	800c076 <osSemaphoreRelease+0x6e>
    } else {
      portYIELD_FROM_ISR (yield);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d010      	beq.n	800c076 <osSemaphoreRelease+0x6e>
 800c054:	4b0a      	ldr	r3, [pc, #40]	@ (800c080 <osSemaphoreRelease+0x78>)
 800c056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c05a:	601a      	str	r2, [r3, #0]
 800c05c:	e00b      	b.n	800c076 <osSemaphoreRelease+0x6e>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c05e:	2300      	movs	r3, #0
 800c060:	2200      	movs	r2, #0
 800c062:	2100      	movs	r1, #0
 800c064:	6938      	ldr	r0, [r7, #16]
 800c066:	f000 fb77 	bl	800c758 <xQueueGenericSend>
 800c06a:	4603      	mov	r3, r0
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d002      	beq.n	800c076 <osSemaphoreRelease+0x6e>
      stat = osErrorResource;
 800c070:	f06f 0302 	mvn.w	r3, #2
 800c074:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return execution status */
  return (stat);
 800c076:	697b      	ldr	r3, [r7, #20]
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3718      	adds	r7, #24
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	e000ed04 	.word	0xe000ed04

0800c084 <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c084:	b580      	push	{r7, lr}
 800c086:	b088      	sub	sp, #32
 800c088:	af02      	add	r7, sp, #8
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 800c090:	2300      	movs	r3, #0
 800c092:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 800c094:	f7ff fdc1 	bl	800bc1a <IRQ_Context>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d15f      	bne.n	800c15e <osMessageQueueNew+0xda>
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d05c      	beq.n	800c15e <osMessageQueueNew+0xda>
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d059      	beq.n	800c15e <osMessageQueueNew+0xda>
    mem = -1;
 800c0aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ae:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d029      	beq.n	800c10a <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	689b      	ldr	r3, [r3, #8]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d012      	beq.n	800c0e4 <osMessageQueueNew+0x60>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	2b4f      	cmp	r3, #79	@ 0x4f
 800c0c4:	d90e      	bls.n	800c0e4 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d00a      	beq.n	800c0e4 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	695a      	ldr	r2, [r3, #20]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	68b9      	ldr	r1, [r7, #8]
 800c0d6:	fb01 f303 	mul.w	r3, r1, r3
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d302      	bcc.n	800c0e4 <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	613b      	str	r3, [r7, #16]
 800c0e2:	e014      	b.n	800c10e <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d110      	bne.n	800c10e <osMessageQueueNew+0x8a>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d10c      	bne.n	800c10e <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d108      	bne.n	800c10e <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	695b      	ldr	r3, [r3, #20]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d104      	bne.n	800c10e <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800c104:	2300      	movs	r3, #0
 800c106:	613b      	str	r3, [r7, #16]
 800c108:	e001      	b.n	800c10e <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800c10a:	2300      	movs	r3, #0
 800c10c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	2b01      	cmp	r3, #1
 800c112:	d10b      	bne.n	800c12c <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	691a      	ldr	r2, [r3, #16]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	2100      	movs	r1, #0
 800c11e:	9100      	str	r1, [sp, #0]
 800c120:	68b9      	ldr	r1, [r7, #8]
 800c122:	68f8      	ldr	r0, [r7, #12]
 800c124:	f000 fa0f 	bl	800c546 <xQueueGenericCreateStatic>
 800c128:	6178      	str	r0, [r7, #20]
 800c12a:	e008      	b.n	800c13e <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d105      	bne.n	800c13e <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c132:	2200      	movs	r2, #0
 800c134:	68b9      	ldr	r1, [r7, #8]
 800c136:	68f8      	ldr	r0, [r7, #12]
 800c138:	f000 fa4e 	bl	800c5d8 <xQueueGenericCreate>
 800c13c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d00c      	beq.n	800c15e <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d009      	beq.n	800c15e <osMessageQueueNew+0xda>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d005      	beq.n	800c15e <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4619      	mov	r1, r3
 800c158:	6978      	ldr	r0, [r7, #20]
 800c15a:	f001 f815 	bl	800d188 <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 800c15e:	697b      	ldr	r3, [r7, #20]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3718      	adds	r7, #24
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <osMessageQueuePut>:
  Put a Message into a Queue or timeout if Queue is full.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c168:	b580      	push	{r7, lr}
 800c16a:	b088      	sub	sp, #32
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	603b      	str	r3, [r7, #0]
 800c174:	4613      	mov	r3, r2
 800c176:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c17c:	2300      	movs	r3, #0
 800c17e:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 800c180:	f7ff fd4b 	bl	800bc1a <IRQ_Context>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d024      	beq.n	800c1d4 <osMessageQueuePut+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d005      	beq.n	800c19c <osMessageQueuePut+0x34>
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d002      	beq.n	800c19c <osMessageQueuePut+0x34>
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d003      	beq.n	800c1a4 <osMessageQueuePut+0x3c>
      stat = osErrorParameter;
 800c19c:	f06f 0303 	mvn.w	r3, #3
 800c1a0:	61fb      	str	r3, [r7, #28]
 800c1a2:	e034      	b.n	800c20e <osMessageQueuePut+0xa6>
    }
    else {
      yield = pdFALSE;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c1a8:	f107 0214 	add.w	r2, r7, #20
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	68b9      	ldr	r1, [r7, #8]
 800c1b0:	69b8      	ldr	r0, [r7, #24]
 800c1b2:	f000 fb9e 	bl	800c8f2 <xQueueGenericSendFromISR>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d003      	beq.n	800c1c4 <osMessageQueuePut+0x5c>
        stat = osErrorResource;
 800c1bc:	f06f 0302 	mvn.w	r3, #2
 800c1c0:	61fb      	str	r3, [r7, #28]
 800c1c2:	e024      	b.n	800c20e <osMessageQueuePut+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d021      	beq.n	800c20e <osMessageQueuePut+0xa6>
 800c1ca:	4b13      	ldr	r3, [pc, #76]	@ (800c218 <osMessageQueuePut+0xb0>)
 800c1cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1d0:	601a      	str	r2, [r3, #0]
 800c1d2:	e01c      	b.n	800c20e <osMessageQueuePut+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d002      	beq.n	800c1e0 <osMessageQueuePut+0x78>
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d103      	bne.n	800c1e8 <osMessageQueuePut+0x80>
      stat = osErrorParameter;
 800c1e0:	f06f 0303 	mvn.w	r3, #3
 800c1e4:	61fb      	str	r3, [r7, #28]
 800c1e6:	e012      	b.n	800c20e <osMessageQueuePut+0xa6>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	683a      	ldr	r2, [r7, #0]
 800c1ec:	68b9      	ldr	r1, [r7, #8]
 800c1ee:	69b8      	ldr	r0, [r7, #24]
 800c1f0:	f000 fab2 	bl	800c758 <xQueueGenericSend>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d009      	beq.n	800c20e <osMessageQueuePut+0xa6>
        if (timeout != 0U) {
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d003      	beq.n	800c208 <osMessageQueuePut+0xa0>
          stat = osErrorTimeout;
 800c200:	f06f 0301 	mvn.w	r3, #1
 800c204:	61fb      	str	r3, [r7, #28]
 800c206:	e002      	b.n	800c20e <osMessageQueuePut+0xa6>
        } else {
          stat = osErrorResource;
 800c208:	f06f 0302 	mvn.w	r3, #2
 800c20c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800c20e:	69fb      	ldr	r3, [r7, #28]
}
 800c210:	4618      	mov	r0, r3
 800c212:	3720      	adds	r7, #32
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}
 800c218:	e000ed04 	.word	0xe000ed04

0800c21c <osMessageQueueGet>:
  Get a Message from a Queue or timeout if Queue is empty.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b088      	sub	sp, #32
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
 800c228:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c22e:	2300      	movs	r3, #0
 800c230:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 800c232:	f7ff fcf2 	bl	800bc1a <IRQ_Context>
 800c236:	4603      	mov	r3, r0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d024      	beq.n	800c286 <osMessageQueueGet+0x6a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c23c:	69bb      	ldr	r3, [r7, #24]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d005      	beq.n	800c24e <osMessageQueueGet+0x32>
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d002      	beq.n	800c24e <osMessageQueueGet+0x32>
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d003      	beq.n	800c256 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 800c24e:	f06f 0303 	mvn.w	r3, #3
 800c252:	61fb      	str	r3, [r7, #28]
 800c254:	e033      	b.n	800c2be <osMessageQueueGet+0xa2>
    }
    else {
      yield = pdFALSE;
 800c256:	2300      	movs	r3, #0
 800c258:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c25a:	f107 0314 	add.w	r3, r7, #20
 800c25e:	461a      	mov	r2, r3
 800c260:	68b9      	ldr	r1, [r7, #8]
 800c262:	69b8      	ldr	r0, [r7, #24]
 800c264:	f000 fdd9 	bl	800ce1a <xQueueReceiveFromISR>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d003      	beq.n	800c276 <osMessageQueueGet+0x5a>
        stat = osErrorResource;
 800c26e:	f06f 0302 	mvn.w	r3, #2
 800c272:	61fb      	str	r3, [r7, #28]
 800c274:	e023      	b.n	800c2be <osMessageQueueGet+0xa2>
      } else {
        portYIELD_FROM_ISR (yield);
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d020      	beq.n	800c2be <osMessageQueueGet+0xa2>
 800c27c:	4b12      	ldr	r3, [pc, #72]	@ (800c2c8 <osMessageQueueGet+0xac>)
 800c27e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c282:	601a      	str	r2, [r3, #0]
 800c284:	e01b      	b.n	800c2be <osMessageQueueGet+0xa2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d002      	beq.n	800c292 <osMessageQueueGet+0x76>
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d103      	bne.n	800c29a <osMessageQueueGet+0x7e>
      stat = osErrorParameter;
 800c292:	f06f 0303 	mvn.w	r3, #3
 800c296:	61fb      	str	r3, [r7, #28]
 800c298:	e011      	b.n	800c2be <osMessageQueueGet+0xa2>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c29a:	683a      	ldr	r2, [r7, #0]
 800c29c:	68b9      	ldr	r1, [r7, #8]
 800c29e:	69b8      	ldr	r0, [r7, #24]
 800c2a0:	f000 fc25 	bl	800caee <xQueueReceive>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d009      	beq.n	800c2be <osMessageQueueGet+0xa2>
        if (timeout != 0U) {
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d003      	beq.n	800c2b8 <osMessageQueueGet+0x9c>
          stat = osErrorTimeout;
 800c2b0:	f06f 0301 	mvn.w	r3, #1
 800c2b4:	61fb      	str	r3, [r7, #28]
 800c2b6:	e002      	b.n	800c2be <osMessageQueueGet+0xa2>
        } else {
          stat = osErrorResource;
 800c2b8:	f06f 0302 	mvn.w	r3, #2
 800c2bc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800c2be:	69fb      	ldr	r3, [r7, #28]
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3720      	adds	r7, #32
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	e000ed04 	.word	0xe000ed04

0800c2cc <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c2cc:	b480      	push	{r7}
 800c2ce:	b085      	sub	sp, #20
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	60b9      	str	r1, [r7, #8]
 800c2d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	4a07      	ldr	r2, [pc, #28]	@ (800c2f8 <vApplicationGetIdleTaskMemory+0x2c>)
 800c2dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	4a06      	ldr	r2, [pc, #24]	@ (800c2fc <vApplicationGetIdleTaskMemory+0x30>)
 800c2e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c2ea:	601a      	str	r2, [r3, #0]
}
 800c2ec:	bf00      	nop
 800c2ee:	3714      	adds	r7, #20
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr
 800c2f8:	20045c90 	.word	0x20045c90
 800c2fc:	20045cec 	.word	0x20045cec

0800c300 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	4a07      	ldr	r2, [pc, #28]	@ (800c32c <vApplicationGetTimerTaskMemory+0x2c>)
 800c310:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	4a06      	ldr	r2, [pc, #24]	@ (800c330 <vApplicationGetTimerTaskMemory+0x30>)
 800c316:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2280      	movs	r2, #128	@ 0x80
 800c31c:	601a      	str	r2, [r3, #0]
}
 800c31e:	bf00      	nop
 800c320:	3714      	adds	r7, #20
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr
 800c32a:	bf00      	nop
 800c32c:	200464ec 	.word	0x200464ec
 800c330:	20046548 	.word	0x20046548

0800c334 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f103 0208 	add.w	r2, r3, #8
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f04f 32ff 	mov.w	r2, #4294967295
 800c34c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f103 0208 	add.w	r2, r3, #8
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f103 0208 	add.w	r2, r3, #8
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c368:	bf00      	nop
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2200      	movs	r2, #0
 800c380:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c382:	bf00      	nop
 800c384:	370c      	adds	r7, #12
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr

0800c38e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800c38e:	b480      	push	{r7}
 800c390:	b085      	sub	sp, #20
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
 800c396:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3a4:	d103      	bne.n	800c3ae <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	691b      	ldr	r3, [r3, #16]
 800c3aa:	60fb      	str	r3, [r7, #12]
 800c3ac:	e00c      	b.n	800c3c8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	3308      	adds	r3, #8
 800c3b2:	60fb      	str	r3, [r7, #12]
 800c3b4:	e002      	b.n	800c3bc <vListInsert+0x2e>
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	60fb      	str	r3, [r7, #12]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d2f6      	bcs.n	800c3b6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	685a      	ldr	r2, [r3, #4]
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	683a      	ldr	r2, [r7, #0]
 800c3d6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	68fa      	ldr	r2, [r7, #12]
 800c3dc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	683a      	ldr	r2, [r7, #0]
 800c3e2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	1c5a      	adds	r2, r3, #1
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	601a      	str	r2, [r3, #0]
}
 800c3f4:	bf00      	nop
 800c3f6:	3714      	adds	r7, #20
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	691b      	ldr	r3, [r3, #16]
 800c40c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	6892      	ldr	r2, [r2, #8]
 800c416:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	6852      	ldr	r2, [r2, #4]
 800c420:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d103      	bne.n	800c434 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	689a      	ldr	r2, [r3, #8]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2200      	movs	r2, #0
 800c438:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	1e5a      	subs	r2, r3, #1
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3714      	adds	r7, #20
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr

0800c454 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800c45e:	2301      	movs	r3, #1
 800c460:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d103      	bne.n	800c474 <xQueueGenericReset+0x20>
 800c46c:	f002 fd74 	bl	800ef58 <ulSetInterruptMask>
 800c470:	bf00      	nop
 800c472:	e7fd      	b.n	800c470 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d057      	beq.n	800c52a <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d053      	beq.n	800c52a <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c48a:	2100      	movs	r1, #0
 800c48c:	fba3 2302 	umull	r2, r3, r3, r2
 800c490:	2b00      	cmp	r3, #0
 800c492:	d000      	beq.n	800c496 <xQueueGenericReset+0x42>
 800c494:	2101      	movs	r1, #1
 800c496:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d146      	bne.n	800c52a <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 800c49c:	f002 fb90 	bl	800ebc0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4a8:	68b9      	ldr	r1, [r7, #8]
 800c4aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c4ac:	fb01 f303 	mul.w	r3, r1, r3
 800c4b0:	441a      	add	r2, r3
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	68b9      	ldr	r1, [r7, #8]
 800c4d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c4d2:	fb01 f303 	mul.w	r3, r1, r3
 800c4d6:	441a      	add	r2, r3
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	22ff      	movs	r2, #255	@ 0xff
 800c4e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	22ff      	movs	r2, #255	@ 0xff
 800c4e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d10e      	bne.n	800c510 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	691b      	ldr	r3, [r3, #16]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d014      	beq.n	800c524 <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	3310      	adds	r3, #16
 800c4fe:	4618      	mov	r0, r3
 800c500:	f001 fbf0 	bl	800dce4 <xTaskRemoveFromEventList>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00c      	beq.n	800c524 <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800c50a:	f002 fb47 	bl	800eb9c <vPortYield>
 800c50e:	e009      	b.n	800c524 <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	3310      	adds	r3, #16
 800c514:	4618      	mov	r0, r3
 800c516:	f7ff ff0d 	bl	800c334 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	3324      	adds	r3, #36	@ 0x24
 800c51e:	4618      	mov	r0, r3
 800c520:	f7ff ff08 	bl	800c334 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800c524:	f002 fb5e 	bl	800ebe4 <vPortExitCritical>
 800c528:	e001      	b.n	800c52e <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 800c52a:	2300      	movs	r3, #0
 800c52c:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d103      	bne.n	800c53c <xQueueGenericReset+0xe8>
 800c534:	f002 fd10 	bl	800ef58 <ulSetInterruptMask>
 800c538:	bf00      	nop
 800c53a:	e7fd      	b.n	800c538 <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800c53c:	68fb      	ldr	r3, [r7, #12]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800c546:	b580      	push	{r7, lr}
 800c548:	b088      	sub	sp, #32
 800c54a:	af02      	add	r7, sp, #8
 800c54c:	60f8      	str	r0, [r7, #12]
 800c54e:	60b9      	str	r1, [r7, #8]
 800c550:	607a      	str	r2, [r7, #4]
 800c552:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800c554:	2300      	movs	r3, #0
 800c556:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d103      	bne.n	800c566 <xQueueGenericCreateStatic+0x20>
 800c55e:	f002 fcfb 	bl	800ef58 <ulSetInterruptMask>
 800c562:	bf00      	nop
 800c564:	e7fd      	b.n	800c562 <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d029      	beq.n	800c5c0 <xQueueGenericCreateStatic+0x7a>
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d026      	beq.n	800c5c0 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d002      	beq.n	800c57e <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d020      	beq.n	800c5c0 <xQueueGenericCreateStatic+0x7a>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d102      	bne.n	800c58a <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d11a      	bne.n	800c5c0 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800c58a:	2350      	movs	r3, #80	@ 0x50
 800c58c:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	2b50      	cmp	r3, #80	@ 0x50
 800c592:	d003      	beq.n	800c59c <xQueueGenericCreateStatic+0x56>
 800c594:	f002 fce0 	bl	800ef58 <ulSetInterruptMask>
 800c598:	bf00      	nop
 800c59a:	e7fd      	b.n	800c598 <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800c59c:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c5aa:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	9300      	str	r3, [sp, #0]
 800c5b2:	4613      	mov	r3, r2
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	68b9      	ldr	r1, [r7, #8]
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f000 f858 	bl	800c66e <prvInitialiseNewQueue>
 800c5be:	e006      	b.n	800c5ce <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d103      	bne.n	800c5ce <xQueueGenericCreateStatic+0x88>
 800c5c6:	f002 fcc7 	bl	800ef58 <ulSetInterruptMask>
 800c5ca:	bf00      	nop
 800c5cc:	e7fd      	b.n	800c5ca <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800c5ce:	697b      	ldr	r3, [r7, #20]
    }
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3718      	adds	r7, #24
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b08a      	sub	sp, #40	@ 0x28
 800c5dc:	af02      	add	r7, sp, #8
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d032      	beq.n	800c656 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800c5f0:	2100      	movs	r1, #0
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	fba3 2302 	umull	r2, r3, r3, r2
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d000      	beq.n	800c600 <xQueueGenericCreate+0x28>
 800c5fe:	2101      	movs	r1, #1
 800c600:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c602:	2b00      	cmp	r3, #0
 800c604:	d127      	bne.n	800c656 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	68ba      	ldr	r2, [r7, #8]
 800c60a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800c60e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800c612:	d820      	bhi.n	800c656 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	fb02 f303 	mul.w	r3, r2, r3
 800c61c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	3350      	adds	r3, #80	@ 0x50
 800c622:	4618      	mov	r0, r3
 800c624:	f002 fd00 	bl	800f028 <pvPortMalloc>
 800c628:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d019      	beq.n	800c664 <xQueueGenericCreate+0x8c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	3350      	adds	r3, #80	@ 0x50
 800c638:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c63a:	69fb      	ldr	r3, [r7, #28]
 800c63c:	2200      	movs	r2, #0
 800c63e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c642:	79fa      	ldrb	r2, [r7, #7]
 800c644:	69fb      	ldr	r3, [r7, #28]
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	4613      	mov	r3, r2
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	68b9      	ldr	r1, [r7, #8]
 800c64e:	68f8      	ldr	r0, [r7, #12]
 800c650:	f000 f80d 	bl	800c66e <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800c654:	e006      	b.n	800c664 <xQueueGenericCreate+0x8c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d103      	bne.n	800c664 <xQueueGenericCreate+0x8c>
 800c65c:	f002 fc7c 	bl	800ef58 <ulSetInterruptMask>
 800c660:	bf00      	nop
 800c662:	e7fd      	b.n	800c660 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800c664:	69fb      	ldr	r3, [r7, #28]
    }
 800c666:	4618      	mov	r0, r3
 800c668:	3720      	adds	r7, #32
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}

0800c66e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800c66e:	b580      	push	{r7, lr}
 800c670:	b084      	sub	sp, #16
 800c672:	af00      	add	r7, sp, #0
 800c674:	60f8      	str	r0, [r7, #12]
 800c676:	60b9      	str	r1, [r7, #8]
 800c678:	607a      	str	r2, [r7, #4]
 800c67a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d103      	bne.n	800c68a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c682:	69bb      	ldr	r3, [r7, #24]
 800c684:	69ba      	ldr	r2, [r7, #24]
 800c686:	601a      	str	r2, [r3, #0]
 800c688:	e002      	b.n	800c690 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c68a:	69bb      	ldr	r3, [r7, #24]
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800c690:	69bb      	ldr	r3, [r7, #24]
 800c692:	68fa      	ldr	r2, [r7, #12]
 800c694:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	68ba      	ldr	r2, [r7, #8]
 800c69a:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c69c:	2101      	movs	r1, #1
 800c69e:	69b8      	ldr	r0, [r7, #24]
 800c6a0:	f7ff fed8 	bl	800c454 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	78fa      	ldrb	r2, [r7, #3]
 800c6a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800c6ac:	bf00      	nop
 800c6ae:	3710      	adds	r7, #16
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <xQueueCreateCountingSemaphoreStatic>:
#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                       const UBaseType_t uxInitialCount,
                                                       StaticQueue_t * pxStaticQueue )
    {
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b088      	sub	sp, #32
 800c6b8:	af02      	add	r7, sp, #8
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	617b      	str	r3, [r7, #20]

        if( ( uxMaxCount != 0 ) &&
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d013      	beq.n	800c6f2 <xQueueCreateCountingSemaphoreStatic+0x3e>
 800c6ca:	68ba      	ldr	r2, [r7, #8]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d80f      	bhi.n	800c6f2 <xQueueCreateCountingSemaphoreStatic+0x3e>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c6d2:	2302      	movs	r3, #2
 800c6d4:	9300      	str	r3, [sp, #0]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	2100      	movs	r1, #0
 800c6dc:	68f8      	ldr	r0, [r7, #12]
 800c6de:	f7ff ff32 	bl	800c546 <xQueueGenericCreateStatic>
 800c6e2:	6178      	str	r0, [r7, #20]

            if( xHandle != NULL )
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00a      	beq.n	800c700 <xQueueCreateCountingSemaphoreStatic+0x4c>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 800c6f0:	e006      	b.n	800c700 <xQueueCreateCountingSemaphoreStatic+0x4c>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d103      	bne.n	800c700 <xQueueCreateCountingSemaphoreStatic+0x4c>
 800c6f8:	f002 fc2e 	bl	800ef58 <ulSetInterruptMask>
 800c6fc:	bf00      	nop
 800c6fe:	e7fd      	b.n	800c6fc <xQueueCreateCountingSemaphoreStatic+0x48>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 800c700:	697b      	ldr	r3, [r7, #20]
    }
 800c702:	4618      	mov	r0, r3
 800c704:	3718      	adds	r7, #24
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b084      	sub	sp, #16
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
 800c712:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 800c714:	2300      	movs	r3, #0
 800c716:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d010      	beq.n	800c740 <xQueueCreateCountingSemaphore+0x36>
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	429a      	cmp	r2, r3
 800c724:	d80c      	bhi.n	800c740 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c726:	2202      	movs	r2, #2
 800c728:	2100      	movs	r1, #0
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f7ff ff54 	bl	800c5d8 <xQueueGenericCreate>
 800c730:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d00a      	beq.n	800c74e <xQueueCreateCountingSemaphore+0x44>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	683a      	ldr	r2, [r7, #0]
 800c73c:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 800c73e:	e006      	b.n	800c74e <xQueueCreateCountingSemaphore+0x44>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d103      	bne.n	800c74e <xQueueCreateCountingSemaphore+0x44>
 800c746:	f002 fc07 	bl	800ef58 <ulSetInterruptMask>
 800c74a:	bf00      	nop
 800c74c:	e7fd      	b.n	800c74a <xQueueCreateCountingSemaphore+0x40>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 800c74e:	68fb      	ldr	r3, [r7, #12]
    }
 800c750:	4618      	mov	r0, r3
 800c752:	3710      	adds	r7, #16
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b08a      	sub	sp, #40	@ 0x28
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
 800c764:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c766:	2300      	movs	r3, #0
 800c768:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800c76e:	6a3b      	ldr	r3, [r7, #32]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d103      	bne.n	800c77c <xQueueGenericSend+0x24>
 800c774:	f002 fbf0 	bl	800ef58 <ulSetInterruptMask>
 800c778:	bf00      	nop
 800c77a:	e7fd      	b.n	800c778 <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d103      	bne.n	800c78a <xQueueGenericSend+0x32>
 800c782:	6a3b      	ldr	r3, [r7, #32]
 800c784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c786:	2b00      	cmp	r3, #0
 800c788:	d101      	bne.n	800c78e <xQueueGenericSend+0x36>
 800c78a:	2301      	movs	r3, #1
 800c78c:	e000      	b.n	800c790 <xQueueGenericSend+0x38>
 800c78e:	2300      	movs	r3, #0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d103      	bne.n	800c79c <xQueueGenericSend+0x44>
 800c794:	f002 fbe0 	bl	800ef58 <ulSetInterruptMask>
 800c798:	bf00      	nop
 800c79a:	e7fd      	b.n	800c798 <xQueueGenericSend+0x40>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	2b02      	cmp	r3, #2
 800c7a0:	d103      	bne.n	800c7aa <xQueueGenericSend+0x52>
 800c7a2:	6a3b      	ldr	r3, [r7, #32]
 800c7a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d101      	bne.n	800c7ae <xQueueGenericSend+0x56>
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	e000      	b.n	800c7b0 <xQueueGenericSend+0x58>
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d103      	bne.n	800c7bc <xQueueGenericSend+0x64>
 800c7b4:	f002 fbd0 	bl	800ef58 <ulSetInterruptMask>
 800c7b8:	bf00      	nop
 800c7ba:	e7fd      	b.n	800c7b8 <xQueueGenericSend+0x60>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7bc:	f001 fc9c 	bl	800e0f8 <xTaskGetSchedulerState>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d102      	bne.n	800c7cc <xQueueGenericSend+0x74>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d101      	bne.n	800c7d0 <xQueueGenericSend+0x78>
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	e000      	b.n	800c7d2 <xQueueGenericSend+0x7a>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d103      	bne.n	800c7de <xQueueGenericSend+0x86>
 800c7d6:	f002 fbbf 	bl	800ef58 <ulSetInterruptMask>
 800c7da:	bf00      	nop
 800c7dc:	e7fd      	b.n	800c7da <xQueueGenericSend+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800c7de:	f002 f9ef 	bl	800ebc0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c7e2:	6a3b      	ldr	r3, [r7, #32]
 800c7e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7e6:	6a3b      	ldr	r3, [r7, #32]
 800c7e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d302      	bcc.n	800c7f4 <xQueueGenericSend+0x9c>
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	2b02      	cmp	r3, #2
 800c7f2:	d11d      	bne.n	800c830 <xQueueGenericSend+0xd8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c7f4:	683a      	ldr	r2, [r7, #0]
 800c7f6:	68b9      	ldr	r1, [r7, #8]
 800c7f8:	6a38      	ldr	r0, [r7, #32]
 800c7fa:	f000 fbb4 	bl	800cf66 <prvCopyDataToQueue>
 800c7fe:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c800:	6a3b      	ldr	r3, [r7, #32]
 800c802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c804:	2b00      	cmp	r3, #0
 800c806:	d00a      	beq.n	800c81e <xQueueGenericSend+0xc6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c808:	6a3b      	ldr	r3, [r7, #32]
 800c80a:	3324      	adds	r3, #36	@ 0x24
 800c80c:	4618      	mov	r0, r3
 800c80e:	f001 fa69 	bl	800dce4 <xTaskRemoveFromEventList>
 800c812:	4603      	mov	r3, r0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d007      	beq.n	800c828 <xQueueGenericSend+0xd0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800c818:	f002 f9c0 	bl	800eb9c <vPortYield>
 800c81c:	e004      	b.n	800c828 <xQueueGenericSend+0xd0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d001      	beq.n	800c828 <xQueueGenericSend+0xd0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800c824:	f002 f9ba 	bl	800eb9c <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800c828:	f002 f9dc 	bl	800ebe4 <vPortExitCritical>
                return pdPASS;
 800c82c:	2301      	movs	r3, #1
 800c82e:	e05c      	b.n	800c8ea <xQueueGenericSend+0x192>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d103      	bne.n	800c83e <xQueueGenericSend+0xe6>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c836:	f002 f9d5 	bl	800ebe4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800c83a:	2300      	movs	r3, #0
 800c83c:	e055      	b.n	800c8ea <xQueueGenericSend+0x192>
                }
                else if( xEntryTimeSet == pdFALSE )
 800c83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c840:	2b00      	cmp	r3, #0
 800c842:	d106      	bne.n	800c852 <xQueueGenericSend+0xfa>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800c844:	f107 0314 	add.w	r3, r7, #20
 800c848:	4618      	mov	r0, r3
 800c84a:	f001 fb19 	bl	800de80 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c84e:	2301      	movs	r3, #1
 800c850:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c852:	f002 f9c7 	bl	800ebe4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800c856:	f000 ff6d 	bl	800d734 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800c85a:	f002 f9b1 	bl	800ebc0 <vPortEnterCritical>
 800c85e:	6a3b      	ldr	r3, [r7, #32]
 800c860:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c864:	b25b      	sxtb	r3, r3
 800c866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c86a:	d103      	bne.n	800c874 <xQueueGenericSend+0x11c>
 800c86c:	6a3b      	ldr	r3, [r7, #32]
 800c86e:	2200      	movs	r2, #0
 800c870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c874:	6a3b      	ldr	r3, [r7, #32]
 800c876:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c87a:	b25b      	sxtb	r3, r3
 800c87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c880:	d103      	bne.n	800c88a <xQueueGenericSend+0x132>
 800c882:	6a3b      	ldr	r3, [r7, #32]
 800c884:	2200      	movs	r2, #0
 800c886:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c88a:	f002 f9ab 	bl	800ebe4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c88e:	1d3a      	adds	r2, r7, #4
 800c890:	f107 0314 	add.w	r3, r7, #20
 800c894:	4611      	mov	r1, r2
 800c896:	4618      	mov	r0, r3
 800c898:	f001 fb08 	bl	800deac <xTaskCheckForTimeOut>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d11d      	bne.n	800c8de <xQueueGenericSend+0x186>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c8a2:	6a38      	ldr	r0, [r7, #32]
 800c8a4:	f000 fc57 	bl	800d156 <prvIsQueueFull>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d011      	beq.n	800c8d2 <xQueueGenericSend+0x17a>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c8ae:	6a3b      	ldr	r3, [r7, #32]
 800c8b0:	3310      	adds	r3, #16
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	4611      	mov	r1, r2
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f001 f9b8 	bl	800dc2c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800c8bc:	6a38      	ldr	r0, [r7, #32]
 800c8be:	f000 fbe2 	bl	800d086 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800c8c2:	f000 ff45 	bl	800d750 <xTaskResumeAll>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d188      	bne.n	800c7de <xQueueGenericSend+0x86>
                {
                    portYIELD_WITHIN_API();
 800c8cc:	f002 f966 	bl	800eb9c <vPortYield>
 800c8d0:	e785      	b.n	800c7de <xQueueGenericSend+0x86>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800c8d2:	6a38      	ldr	r0, [r7, #32]
 800c8d4:	f000 fbd7 	bl	800d086 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800c8d8:	f000 ff3a 	bl	800d750 <xTaskResumeAll>
 800c8dc:	e77f      	b.n	800c7de <xQueueGenericSend+0x86>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800c8de:	6a38      	ldr	r0, [r7, #32]
 800c8e0:	f000 fbd1 	bl	800d086 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800c8e4:	f000 ff34 	bl	800d750 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800c8e8:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3728      	adds	r7, #40	@ 0x28
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b08a      	sub	sp, #40	@ 0x28
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	60f8      	str	r0, [r7, #12]
 800c8fa:	60b9      	str	r1, [r7, #8]
 800c8fc:	607a      	str	r2, [r7, #4]
 800c8fe:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800c904:	6a3b      	ldr	r3, [r7, #32]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d103      	bne.n	800c912 <xQueueGenericSendFromISR+0x20>
 800c90a:	f002 fb25 	bl	800ef58 <ulSetInterruptMask>
 800c90e:	bf00      	nop
 800c910:	e7fd      	b.n	800c90e <xQueueGenericSendFromISR+0x1c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d103      	bne.n	800c920 <xQueueGenericSendFromISR+0x2e>
 800c918:	6a3b      	ldr	r3, [r7, #32]
 800c91a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d101      	bne.n	800c924 <xQueueGenericSendFromISR+0x32>
 800c920:	2301      	movs	r3, #1
 800c922:	e000      	b.n	800c926 <xQueueGenericSendFromISR+0x34>
 800c924:	2300      	movs	r3, #0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d103      	bne.n	800c932 <xQueueGenericSendFromISR+0x40>
 800c92a:	f002 fb15 	bl	800ef58 <ulSetInterruptMask>
 800c92e:	bf00      	nop
 800c930:	e7fd      	b.n	800c92e <xQueueGenericSendFromISR+0x3c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	2b02      	cmp	r3, #2
 800c936:	d103      	bne.n	800c940 <xQueueGenericSendFromISR+0x4e>
 800c938:	6a3b      	ldr	r3, [r7, #32]
 800c93a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d101      	bne.n	800c944 <xQueueGenericSendFromISR+0x52>
 800c940:	2301      	movs	r3, #1
 800c942:	e000      	b.n	800c946 <xQueueGenericSendFromISR+0x54>
 800c944:	2300      	movs	r3, #0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d103      	bne.n	800c952 <xQueueGenericSendFromISR+0x60>
 800c94a:	f002 fb05 	bl	800ef58 <ulSetInterruptMask>
 800c94e:	bf00      	nop
 800c950:	e7fd      	b.n	800c94e <xQueueGenericSendFromISR+0x5c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c952:	f002 fa99 	bl	800ee88 <vPortValidateInterruptPriority>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c956:	f002 faff 	bl	800ef58 <ulSetInterruptMask>
 800c95a:	61f8      	str	r0, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c95c:	6a3b      	ldr	r3, [r7, #32]
 800c95e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c960:	6a3b      	ldr	r3, [r7, #32]
 800c962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c964:	429a      	cmp	r2, r3
 800c966:	d302      	bcc.n	800c96e <xQueueGenericSendFromISR+0x7c>
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	2b02      	cmp	r3, #2
 800c96c:	d13d      	bne.n	800c9ea <xQueueGenericSendFromISR+0xf8>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800c96e:	6a3b      	ldr	r3, [r7, #32]
 800c970:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c974:	76fb      	strb	r3, [r7, #27]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c976:	6a3b      	ldr	r3, [r7, #32]
 800c978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c97a:	617b      	str	r3, [r7, #20]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c97c:	683a      	ldr	r2, [r7, #0]
 800c97e:	68b9      	ldr	r1, [r7, #8]
 800c980:	6a38      	ldr	r0, [r7, #32]
 800c982:	f000 faf0 	bl	800cf66 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800c986:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c98a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c98e:	d112      	bne.n	800c9b6 <xQueueGenericSendFromISR+0xc4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c990:	6a3b      	ldr	r3, [r7, #32]
 800c992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c994:	2b00      	cmp	r3, #0
 800c996:	d025      	beq.n	800c9e4 <xQueueGenericSendFromISR+0xf2>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c998:	6a3b      	ldr	r3, [r7, #32]
 800c99a:	3324      	adds	r3, #36	@ 0x24
 800c99c:	4618      	mov	r0, r3
 800c99e:	f001 f9a1 	bl	800dce4 <xTaskRemoveFromEventList>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d01d      	beq.n	800c9e4 <xQueueGenericSendFromISR+0xf2>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d01a      	beq.n	800c9e4 <xQueueGenericSendFromISR+0xf2>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	601a      	str	r2, [r3, #0]
 800c9b4:	e016      	b.n	800c9e4 <xQueueGenericSendFromISR+0xf2>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800c9b6:	f000 ffc9 	bl	800d94c <uxTaskGetNumberOfTasks>
 800c9ba:	6138      	str	r0, [r7, #16]
 800c9bc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c9c0:	693a      	ldr	r2, [r7, #16]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d90e      	bls.n	800c9e4 <xQueueGenericSendFromISR+0xf2>
 800c9c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c9ca:	2b7f      	cmp	r3, #127	@ 0x7f
 800c9cc:	d103      	bne.n	800c9d6 <xQueueGenericSendFromISR+0xe4>
 800c9ce:	f002 fac3 	bl	800ef58 <ulSetInterruptMask>
 800c9d2:	bf00      	nop
 800c9d4:	e7fd      	b.n	800c9d2 <xQueueGenericSendFromISR+0xe0>
 800c9d6:	7efb      	ldrb	r3, [r7, #27]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	b25a      	sxtb	r2, r3
 800c9de:	6a3b      	ldr	r3, [r7, #32]
 800c9e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	627b      	str	r3, [r7, #36]	@ 0x24
        {
 800c9e8:	e001      	b.n	800c9ee <xQueueGenericSendFromISR+0xfc>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c9ee:	69f8      	ldr	r0, [r7, #28]
 800c9f0:	f002 fabf 	bl	800ef72 <vClearInterruptMask>

    return xReturn;
 800c9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3728      	adds	r7, #40	@ 0x28
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b088      	sub	sp, #32
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
 800ca06:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	61bb      	str	r3, [r7, #24]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d103      	bne.n	800ca1a <xQueueGiveFromISR+0x1c>
 800ca12:	f002 faa1 	bl	800ef58 <ulSetInterruptMask>
 800ca16:	bf00      	nop
 800ca18:	e7fd      	b.n	800ca16 <xQueueGiveFromISR+0x18>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800ca1a:	69bb      	ldr	r3, [r7, #24]
 800ca1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d003      	beq.n	800ca2a <xQueueGiveFromISR+0x2c>
 800ca22:	f002 fa99 	bl	800ef58 <ulSetInterruptMask>
 800ca26:	bf00      	nop
 800ca28:	e7fd      	b.n	800ca26 <xQueueGiveFromISR+0x28>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ca2a:	69bb      	ldr	r3, [r7, #24]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d103      	bne.n	800ca3a <xQueueGiveFromISR+0x3c>
 800ca32:	69bb      	ldr	r3, [r7, #24]
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d101      	bne.n	800ca3e <xQueueGiveFromISR+0x40>
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	e000      	b.n	800ca40 <xQueueGiveFromISR+0x42>
 800ca3e:	2300      	movs	r3, #0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d103      	bne.n	800ca4c <xQueueGiveFromISR+0x4e>
 800ca44:	f002 fa88 	bl	800ef58 <ulSetInterruptMask>
 800ca48:	bf00      	nop
 800ca4a:	e7fd      	b.n	800ca48 <xQueueGiveFromISR+0x4a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca4c:	f002 fa1c 	bl	800ee88 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca50:	f002 fa82 	bl	800ef58 <ulSetInterruptMask>
 800ca54:	6178      	str	r0, [r7, #20]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca5a:	613b      	str	r3, [r7, #16]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800ca5c:	69bb      	ldr	r3, [r7, #24]
 800ca5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca60:	693a      	ldr	r2, [r7, #16]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d239      	bcs.n	800cada <xQueueGiveFromISR+0xdc>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca6c:	73fb      	strb	r3, [r7, #15]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	1c5a      	adds	r2, r3, #1
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800ca76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca7e:	d112      	bne.n	800caa6 <xQueueGiveFromISR+0xa8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca80:	69bb      	ldr	r3, [r7, #24]
 800ca82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d025      	beq.n	800cad4 <xQueueGiveFromISR+0xd6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca88:	69bb      	ldr	r3, [r7, #24]
 800ca8a:	3324      	adds	r3, #36	@ 0x24
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f001 f929 	bl	800dce4 <xTaskRemoveFromEventList>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d01d      	beq.n	800cad4 <xQueueGiveFromISR+0xd6>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d01a      	beq.n	800cad4 <xQueueGiveFromISR+0xd6>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	2201      	movs	r2, #1
 800caa2:	601a      	str	r2, [r3, #0]
 800caa4:	e016      	b.n	800cad4 <xQueueGiveFromISR+0xd6>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800caa6:	f000 ff51 	bl	800d94c <uxTaskGetNumberOfTasks>
 800caaa:	60b8      	str	r0, [r7, #8]
 800caac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cab0:	68ba      	ldr	r2, [r7, #8]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d90e      	bls.n	800cad4 <xQueueGiveFromISR+0xd6>
 800cab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caba:	2b7f      	cmp	r3, #127	@ 0x7f
 800cabc:	d103      	bne.n	800cac6 <xQueueGiveFromISR+0xc8>
 800cabe:	f002 fa4b 	bl	800ef58 <ulSetInterruptMask>
 800cac2:	bf00      	nop
 800cac4:	e7fd      	b.n	800cac2 <xQueueGiveFromISR+0xc4>
 800cac6:	7bfb      	ldrb	r3, [r7, #15]
 800cac8:	3301      	adds	r3, #1
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	b25a      	sxtb	r2, r3
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800cad4:	2301      	movs	r3, #1
 800cad6:	61fb      	str	r3, [r7, #28]
 800cad8:	e001      	b.n	800cade <xQueueGiveFromISR+0xe0>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800cada:	2300      	movs	r3, #0
 800cadc:	61fb      	str	r3, [r7, #28]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800cade:	6978      	ldr	r0, [r7, #20]
 800cae0:	f002 fa47 	bl	800ef72 <vClearInterruptMask>

    return xReturn;
 800cae4:	69fb      	ldr	r3, [r7, #28]
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3720      	adds	r7, #32
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}

0800caee <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800caee:	b580      	push	{r7, lr}
 800caf0:	b08a      	sub	sp, #40	@ 0x28
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	60f8      	str	r0, [r7, #12]
 800caf6:	60b9      	str	r1, [r7, #8]
 800caf8:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800cafa:	2300      	movs	r3, #0
 800cafc:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800cb02:	6a3b      	ldr	r3, [r7, #32]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d103      	bne.n	800cb10 <xQueueReceive+0x22>
 800cb08:	f002 fa26 	bl	800ef58 <ulSetInterruptMask>
 800cb0c:	bf00      	nop
 800cb0e:	e7fd      	b.n	800cb0c <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d103      	bne.n	800cb1e <xQueueReceive+0x30>
 800cb16:	6a3b      	ldr	r3, [r7, #32]
 800cb18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d101      	bne.n	800cb22 <xQueueReceive+0x34>
 800cb1e:	2301      	movs	r3, #1
 800cb20:	e000      	b.n	800cb24 <xQueueReceive+0x36>
 800cb22:	2300      	movs	r3, #0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d103      	bne.n	800cb30 <xQueueReceive+0x42>
 800cb28:	f002 fa16 	bl	800ef58 <ulSetInterruptMask>
 800cb2c:	bf00      	nop
 800cb2e:	e7fd      	b.n	800cb2c <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb30:	f001 fae2 	bl	800e0f8 <xTaskGetSchedulerState>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d102      	bne.n	800cb40 <xQueueReceive+0x52>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d101      	bne.n	800cb44 <xQueueReceive+0x56>
 800cb40:	2301      	movs	r3, #1
 800cb42:	e000      	b.n	800cb46 <xQueueReceive+0x58>
 800cb44:	2300      	movs	r3, #0
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d103      	bne.n	800cb52 <xQueueReceive+0x64>
 800cb4a:	f002 fa05 	bl	800ef58 <ulSetInterruptMask>
 800cb4e:	bf00      	nop
 800cb50:	e7fd      	b.n	800cb4e <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800cb52:	f002 f835 	bl	800ebc0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb56:	6a3b      	ldr	r3, [r7, #32]
 800cb58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb5a:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cb5c:	69fb      	ldr	r3, [r7, #28]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d019      	beq.n	800cb96 <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cb62:	68b9      	ldr	r1, [r7, #8]
 800cb64:	6a38      	ldr	r0, [r7, #32]
 800cb66:	f000 fa68 	bl	800d03a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	1e5a      	subs	r2, r3, #1
 800cb6e:	6a3b      	ldr	r3, [r7, #32]
 800cb70:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb72:	6a3b      	ldr	r3, [r7, #32]
 800cb74:	691b      	ldr	r3, [r3, #16]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d009      	beq.n	800cb8e <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb7a:	6a3b      	ldr	r3, [r7, #32]
 800cb7c:	3310      	adds	r3, #16
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f001 f8b0 	bl	800dce4 <xTaskRemoveFromEventList>
 800cb84:	4603      	mov	r3, r0
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d001      	beq.n	800cb8e <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800cb8a:	f002 f807 	bl	800eb9c <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800cb8e:	f002 f829 	bl	800ebe4 <vPortExitCritical>
                return pdPASS;
 800cb92:	2301      	movs	r3, #1
 800cb94:	e063      	b.n	800cc5e <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d103      	bne.n	800cba4 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800cb9c:	f002 f822 	bl	800ebe4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800cba0:	2300      	movs	r3, #0
 800cba2:	e05c      	b.n	800cc5e <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 800cba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d106      	bne.n	800cbb8 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800cbaa:	f107 0314 	add.w	r3, r7, #20
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f001 f966 	bl	800de80 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800cbb8:	f002 f814 	bl	800ebe4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800cbbc:	f000 fdba 	bl	800d734 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800cbc0:	f001 fffe 	bl	800ebc0 <vPortEnterCritical>
 800cbc4:	6a3b      	ldr	r3, [r7, #32]
 800cbc6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cbca:	b25b      	sxtb	r3, r3
 800cbcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbd0:	d103      	bne.n	800cbda <xQueueReceive+0xec>
 800cbd2:	6a3b      	ldr	r3, [r7, #32]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cbda:	6a3b      	ldr	r3, [r7, #32]
 800cbdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cbe0:	b25b      	sxtb	r3, r3
 800cbe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe6:	d103      	bne.n	800cbf0 <xQueueReceive+0x102>
 800cbe8:	6a3b      	ldr	r3, [r7, #32]
 800cbea:	2200      	movs	r2, #0
 800cbec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cbf0:	f001 fff8 	bl	800ebe4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cbf4:	1d3a      	adds	r2, r7, #4
 800cbf6:	f107 0314 	add.w	r3, r7, #20
 800cbfa:	4611      	mov	r1, r2
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f001 f955 	bl	800deac <xTaskCheckForTimeOut>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d11d      	bne.n	800cc44 <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc08:	6a38      	ldr	r0, [r7, #32]
 800cc0a:	f000 fa8e 	bl	800d12a <prvIsQueueEmpty>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d011      	beq.n	800cc38 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc14:	6a3b      	ldr	r3, [r7, #32]
 800cc16:	3324      	adds	r3, #36	@ 0x24
 800cc18:	687a      	ldr	r2, [r7, #4]
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f001 f805 	bl	800dc2c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800cc22:	6a38      	ldr	r0, [r7, #32]
 800cc24:	f000 fa2f 	bl	800d086 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800cc28:	f000 fd92 	bl	800d750 <xTaskResumeAll>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d18f      	bne.n	800cb52 <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 800cc32:	f001 ffb3 	bl	800eb9c <vPortYield>
 800cc36:	e78c      	b.n	800cb52 <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800cc38:	6a38      	ldr	r0, [r7, #32]
 800cc3a:	f000 fa24 	bl	800d086 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800cc3e:	f000 fd87 	bl	800d750 <xTaskResumeAll>
 800cc42:	e786      	b.n	800cb52 <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800cc44:	6a38      	ldr	r0, [r7, #32]
 800cc46:	f000 fa1e 	bl	800d086 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800cc4a:	f000 fd81 	bl	800d750 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc4e:	6a38      	ldr	r0, [r7, #32]
 800cc50:	f000 fa6b 	bl	800d12a <prvIsQueueEmpty>
 800cc54:	4603      	mov	r3, r0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	f43f af7b 	beq.w	800cb52 <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800cc5c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3728      	adds	r7, #40	@ 0x28
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}

0800cc66 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800cc66:	b580      	push	{r7, lr}
 800cc68:	b08a      	sub	sp, #40	@ 0x28
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
 800cc6e:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800cc70:	2300      	movs	r3, #0
 800cc72:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d103      	bne.n	800cc8a <xQueueSemaphoreTake+0x24>
 800cc82:	f002 f969 	bl	800ef58 <ulSetInterruptMask>
 800cc86:	bf00      	nop
 800cc88:	e7fd      	b.n	800cc86 <xQueueSemaphoreTake+0x20>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800cc8a:	69fb      	ldr	r3, [r7, #28]
 800cc8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d003      	beq.n	800cc9a <xQueueSemaphoreTake+0x34>
 800cc92:	f002 f961 	bl	800ef58 <ulSetInterruptMask>
 800cc96:	bf00      	nop
 800cc98:	e7fd      	b.n	800cc96 <xQueueSemaphoreTake+0x30>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc9a:	f001 fa2d 	bl	800e0f8 <xTaskGetSchedulerState>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d102      	bne.n	800ccaa <xQueueSemaphoreTake+0x44>
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d101      	bne.n	800ccae <xQueueSemaphoreTake+0x48>
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e000      	b.n	800ccb0 <xQueueSemaphoreTake+0x4a>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d103      	bne.n	800ccbc <xQueueSemaphoreTake+0x56>
 800ccb4:	f002 f950 	bl	800ef58 <ulSetInterruptMask>
 800ccb8:	bf00      	nop
 800ccba:	e7fd      	b.n	800ccb8 <xQueueSemaphoreTake+0x52>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800ccbc:	f001 ff80 	bl	800ebc0 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ccc0:	69fb      	ldr	r3, [r7, #28]
 800ccc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccc4:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d01e      	beq.n	800cd0a <xQueueSemaphoreTake+0xa4>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cccc:	69bb      	ldr	r3, [r7, #24]
 800ccce:	1e5a      	subs	r2, r3, #1
 800ccd0:	69fb      	ldr	r3, [r7, #28]
 800ccd2:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ccd4:	69fb      	ldr	r3, [r7, #28]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d104      	bne.n	800cce6 <xQueueSemaphoreTake+0x80>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ccdc:	f001 fbde 	bl	800e49c <pvTaskIncrementMutexHeldCount>
 800cce0:	4602      	mov	r2, r0
 800cce2:	69fb      	ldr	r3, [r7, #28]
 800cce4:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	691b      	ldr	r3, [r3, #16]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d009      	beq.n	800cd02 <xQueueSemaphoreTake+0x9c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccee:	69fb      	ldr	r3, [r7, #28]
 800ccf0:	3310      	adds	r3, #16
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f000 fff6 	bl	800dce4 <xTaskRemoveFromEventList>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d001      	beq.n	800cd02 <xQueueSemaphoreTake+0x9c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800ccfe:	f001 ff4d 	bl	800eb9c <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800cd02:	f001 ff6f 	bl	800ebe4 <vPortExitCritical>
                return pdPASS;
 800cd06:	2301      	movs	r3, #1
 800cd08:	e083      	b.n	800ce12 <xQueueSemaphoreTake+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d103      	bne.n	800cd18 <xQueueSemaphoreTake+0xb2>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800cd10:	f001 ff68 	bl	800ebe4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800cd14:	2300      	movs	r3, #0
 800cd16:	e07c      	b.n	800ce12 <xQueueSemaphoreTake+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 800cd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d106      	bne.n	800cd2c <xQueueSemaphoreTake+0xc6>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800cd1e:	f107 030c 	add.w	r3, r7, #12
 800cd22:	4618      	mov	r0, r3
 800cd24:	f001 f8ac 	bl	800de80 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800cd2c:	f001 ff5a 	bl	800ebe4 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800cd30:	f000 fd00 	bl	800d734 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800cd34:	f001 ff44 	bl	800ebc0 <vPortEnterCritical>
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cd3e:	b25b      	sxtb	r3, r3
 800cd40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd44:	d103      	bne.n	800cd4e <xQueueSemaphoreTake+0xe8>
 800cd46:	69fb      	ldr	r3, [r7, #28]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cd4e:	69fb      	ldr	r3, [r7, #28]
 800cd50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd54:	b25b      	sxtb	r3, r3
 800cd56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd5a:	d103      	bne.n	800cd64 <xQueueSemaphoreTake+0xfe>
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cd64:	f001 ff3e 	bl	800ebe4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd68:	463a      	mov	r2, r7
 800cd6a:	f107 030c 	add.w	r3, r7, #12
 800cd6e:	4611      	mov	r1, r2
 800cd70:	4618      	mov	r0, r3
 800cd72:	f001 f89b 	bl	800deac <xTaskCheckForTimeOut>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d12c      	bne.n	800cdd6 <xQueueSemaphoreTake+0x170>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd7c:	69f8      	ldr	r0, [r7, #28]
 800cd7e:	f000 f9d4 	bl	800d12a <prvIsQueueEmpty>
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d020      	beq.n	800cdca <xQueueSemaphoreTake+0x164>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd88:	69fb      	ldr	r3, [r7, #28]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d109      	bne.n	800cda4 <xQueueSemaphoreTake+0x13e>
                    {
                        taskENTER_CRITICAL();
 800cd90:	f001 ff16 	bl	800ebc0 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cd94:	69fb      	ldr	r3, [r7, #28]
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f001 f9cb 	bl	800e134 <xTaskPriorityInherit>
 800cd9e:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 800cda0:	f001 ff20 	bl	800ebe4 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	3324      	adds	r3, #36	@ 0x24
 800cda8:	683a      	ldr	r2, [r7, #0]
 800cdaa:	4611      	mov	r1, r2
 800cdac:	4618      	mov	r0, r3
 800cdae:	f000 ff3d 	bl	800dc2c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800cdb2:	69f8      	ldr	r0, [r7, #28]
 800cdb4:	f000 f967 	bl	800d086 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800cdb8:	f000 fcca 	bl	800d750 <xTaskResumeAll>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	f47f af7c 	bne.w	800ccbc <xQueueSemaphoreTake+0x56>
                {
                    portYIELD_WITHIN_API();
 800cdc4:	f001 feea 	bl	800eb9c <vPortYield>
 800cdc8:	e778      	b.n	800ccbc <xQueueSemaphoreTake+0x56>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800cdca:	69f8      	ldr	r0, [r7, #28]
 800cdcc:	f000 f95b 	bl	800d086 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800cdd0:	f000 fcbe 	bl	800d750 <xTaskResumeAll>
 800cdd4:	e772      	b.n	800ccbc <xQueueSemaphoreTake+0x56>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800cdd6:	69f8      	ldr	r0, [r7, #28]
 800cdd8:	f000 f955 	bl	800d086 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800cddc:	f000 fcb8 	bl	800d750 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cde0:	69f8      	ldr	r0, [r7, #28]
 800cde2:	f000 f9a2 	bl	800d12a <prvIsQueueEmpty>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f43f af67 	beq.w	800ccbc <xQueueSemaphoreTake+0x56>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800cdee:	6a3b      	ldr	r3, [r7, #32]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d00d      	beq.n	800ce10 <xQueueSemaphoreTake+0x1aa>
                    {
                        taskENTER_CRITICAL();
 800cdf4:	f001 fee4 	bl	800ebc0 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cdf8:	69f8      	ldr	r0, [r7, #28]
 800cdfa:	f000 f89c 	bl	800cf36 <prvGetDisinheritPriorityAfterTimeout>
 800cdfe:	6178      	str	r0, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	6979      	ldr	r1, [r7, #20]
 800ce06:	4618      	mov	r0, r3
 800ce08:	f001 faac 	bl	800e364 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800ce0c:	f001 feea 	bl	800ebe4 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800ce10:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3728      	adds	r7, #40	@ 0x28
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}

0800ce1a <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ce1a:	b580      	push	{r7, lr}
 800ce1c:	b08a      	sub	sp, #40	@ 0x28
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	60f8      	str	r0, [r7, #12]
 800ce22:	60b9      	str	r1, [r7, #8]
 800ce24:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800ce2a:	6a3b      	ldr	r3, [r7, #32]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d103      	bne.n	800ce38 <xQueueReceiveFromISR+0x1e>
 800ce30:	f002 f892 	bl	800ef58 <ulSetInterruptMask>
 800ce34:	bf00      	nop
 800ce36:	e7fd      	b.n	800ce34 <xQueueReceiveFromISR+0x1a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d103      	bne.n	800ce46 <xQueueReceiveFromISR+0x2c>
 800ce3e:	6a3b      	ldr	r3, [r7, #32]
 800ce40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d101      	bne.n	800ce4a <xQueueReceiveFromISR+0x30>
 800ce46:	2301      	movs	r3, #1
 800ce48:	e000      	b.n	800ce4c <xQueueReceiveFromISR+0x32>
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d103      	bne.n	800ce58 <xQueueReceiveFromISR+0x3e>
 800ce50:	f002 f882 	bl	800ef58 <ulSetInterruptMask>
 800ce54:	bf00      	nop
 800ce56:	e7fd      	b.n	800ce54 <xQueueReceiveFromISR+0x3a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce58:	f002 f816 	bl	800ee88 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce5c:	f002 f87c 	bl	800ef58 <ulSetInterruptMask>
 800ce60:	61f8      	str	r0, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce62:	6a3b      	ldr	r3, [r7, #32]
 800ce64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce66:	61bb      	str	r3, [r7, #24]

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d03d      	beq.n	800ceea <xQueueReceiveFromISR+0xd0>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800ce6e:	6a3b      	ldr	r3, [r7, #32]
 800ce70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ce74:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ce76:	68b9      	ldr	r1, [r7, #8]
 800ce78:	6a38      	ldr	r0, [r7, #32]
 800ce7a:	f000 f8de 	bl	800d03a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ce7e:	69bb      	ldr	r3, [r7, #24]
 800ce80:	1e5a      	subs	r2, r3, #1
 800ce82:	6a3b      	ldr	r3, [r7, #32]
 800ce84:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800ce86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce8e:	d112      	bne.n	800ceb6 <xQueueReceiveFromISR+0x9c>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce90:	6a3b      	ldr	r3, [r7, #32]
 800ce92:	691b      	ldr	r3, [r3, #16]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d025      	beq.n	800cee4 <xQueueReceiveFromISR+0xca>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce98:	6a3b      	ldr	r3, [r7, #32]
 800ce9a:	3310      	adds	r3, #16
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f000 ff21 	bl	800dce4 <xTaskRemoveFromEventList>
 800cea2:	4603      	mov	r3, r0
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d01d      	beq.n	800cee4 <xQueueReceiveFromISR+0xca>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d01a      	beq.n	800cee4 <xQueueReceiveFromISR+0xca>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	601a      	str	r2, [r3, #0]
 800ceb4:	e016      	b.n	800cee4 <xQueueReceiveFromISR+0xca>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 800ceb6:	f000 fd49 	bl	800d94c <uxTaskGetNumberOfTasks>
 800ceba:	6138      	str	r0, [r7, #16]
 800cebc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cec0:	693a      	ldr	r2, [r7, #16]
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d90e      	bls.n	800cee4 <xQueueReceiveFromISR+0xca>
 800cec6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ceca:	2b7f      	cmp	r3, #127	@ 0x7f
 800cecc:	d103      	bne.n	800ced6 <xQueueReceiveFromISR+0xbc>
 800cece:	f002 f843 	bl	800ef58 <ulSetInterruptMask>
 800ced2:	bf00      	nop
 800ced4:	e7fd      	b.n	800ced2 <xQueueReceiveFromISR+0xb8>
 800ced6:	7dfb      	ldrb	r3, [r7, #23]
 800ced8:	3301      	adds	r3, #1
 800ceda:	b2db      	uxtb	r3, r3
 800cedc:	b25a      	sxtb	r2, r3
 800cede:	6a3b      	ldr	r3, [r7, #32]
 800cee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 800cee4:	2301      	movs	r3, #1
 800cee6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cee8:	e001      	b.n	800ceee <xQueueReceiveFromISR+0xd4>
        }
        else
        {
            xReturn = pdFAIL;
 800ceea:	2300      	movs	r3, #0
 800ceec:	627b      	str	r3, [r7, #36]	@ 0x24
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ceee:	69f8      	ldr	r0, [r7, #28]
 800cef0:	f002 f83f 	bl	800ef72 <vClearInterruptMask>

    return xReturn;
 800cef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3728      	adds	r7, #40	@ 0x28
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b084      	sub	sp, #16
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d103      	bne.n	800cf18 <vQueueDelete+0x1a>
 800cf10:	f002 f822 	bl	800ef58 <ulSetInterruptMask>
 800cf14:	bf00      	nop
 800cf16:	e7fd      	b.n	800cf14 <vQueueDelete+0x16>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 800cf18:	68f8      	ldr	r0, [r7, #12]
 800cf1a:	f000 f97b 	bl	800d214 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d102      	bne.n	800cf2e <vQueueDelete+0x30>
        {
            vPortFree( pxQueue );
 800cf28:	68f8      	ldr	r0, [r7, #12]
 800cf2a:	f002 f939 	bl	800f1a0 <vPortFree>
        /* The queue must have been statically allocated, so is not going to be
         * deleted.  Avoid compiler warnings about the unused parameter. */
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cf2e:	bf00      	nop
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800cf36:	b480      	push	{r7}
 800cf38:	b085      	sub	sp, #20
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d006      	beq.n	800cf54 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800cf50:	60fb      	str	r3, [r7, #12]
 800cf52:	e001      	b.n	800cf58 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cf54:	2300      	movs	r3, #0
 800cf56:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800cf58:	68fb      	ldr	r3, [r7, #12]
    }
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3714      	adds	r7, #20
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr

0800cf66 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800cf66:	b580      	push	{r7, lr}
 800cf68:	b086      	sub	sp, #24
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	60f8      	str	r0, [r7, #12]
 800cf6e:	60b9      	str	r1, [r7, #8]
 800cf70:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800cf72:	2300      	movs	r3, #0
 800cf74:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf7a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d10d      	bne.n	800cfa0 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d14d      	bne.n	800d028 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	689b      	ldr	r3, [r3, #8]
 800cf90:	4618      	mov	r0, r3
 800cf92:	f001 f95f 	bl	800e254 <xTaskPriorityDisinherit>
 800cf96:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	609a      	str	r2, [r3, #8]
 800cf9e:	e043      	b.n	800d028 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d119      	bne.n	800cfda <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	6858      	ldr	r0, [r3, #4]
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfae:	461a      	mov	r2, r3
 800cfb0:	68b9      	ldr	r1, [r7, #8]
 800cfb2:	f021 f9b0 	bl	802e316 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	685a      	ldr	r2, [r3, #4]
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfbe:	441a      	add	r2, r3
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	685a      	ldr	r2, [r3, #4]
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	689b      	ldr	r3, [r3, #8]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d32b      	bcc.n	800d028 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681a      	ldr	r2, [r3, #0]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	605a      	str	r2, [r3, #4]
 800cfd8:	e026      	b.n	800d028 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	68d8      	ldr	r0, [r3, #12]
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	68b9      	ldr	r1, [r7, #8]
 800cfe6:	f021 f996 	bl	802e316 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	68da      	ldr	r2, [r3, #12]
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cff2:	425b      	negs	r3, r3
 800cff4:	441a      	add	r2, r3
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	68da      	ldr	r2, [r3, #12]
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	429a      	cmp	r2, r3
 800d004:	d207      	bcs.n	800d016 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	689a      	ldr	r2, [r3, #8]
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d00e:	425b      	negs	r3, r3
 800d010:	441a      	add	r2, r3
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2b02      	cmp	r3, #2
 800d01a:	d105      	bne.n	800d028 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d002      	beq.n	800d028 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	3b01      	subs	r3, #1
 800d026:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	1c5a      	adds	r2, r3, #1
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800d030:	697b      	ldr	r3, [r7, #20]
}
 800d032:	4618      	mov	r0, r3
 800d034:	3718      	adds	r7, #24
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}

0800d03a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800d03a:	b580      	push	{r7, lr}
 800d03c:	b082      	sub	sp, #8
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
 800d042:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d018      	beq.n	800d07e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	68da      	ldr	r2, [r3, #12]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d054:	441a      	add	r2, r3
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	68da      	ldr	r2, [r3, #12]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	689b      	ldr	r3, [r3, #8]
 800d062:	429a      	cmp	r2, r3
 800d064:	d303      	bcc.n	800d06e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	68d9      	ldr	r1, [r3, #12]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d076:	461a      	mov	r2, r3
 800d078:	6838      	ldr	r0, [r7, #0]
 800d07a:	f021 f94c 	bl	802e316 <memcpy>
    }
}
 800d07e:	bf00      	nop
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b084      	sub	sp, #16
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800d08e:	f001 fd97 	bl	800ebc0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d098:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800d09a:	e011      	b.n	800d0c0 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d012      	beq.n	800d0ca <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	3324      	adds	r3, #36	@ 0x24
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f000 fe1b 	bl	800dce4 <xTaskRemoveFromEventList>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d001      	beq.n	800d0b8 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800d0b4:	f000 ff52 	bl	800df5c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800d0b8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ba:	3b01      	subs	r3, #1
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800d0c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	dce9      	bgt.n	800d09c <prvUnlockQueue+0x16>
 800d0c8:	e000      	b.n	800d0cc <prvUnlockQueue+0x46>
                    break;
 800d0ca:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	22ff      	movs	r2, #255	@ 0xff
 800d0d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800d0d4:	f001 fd86 	bl	800ebe4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800d0d8:	f001 fd72 	bl	800ebc0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d0e2:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800d0e4:	e011      	b.n	800d10a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	691b      	ldr	r3, [r3, #16]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d012      	beq.n	800d114 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	3310      	adds	r3, #16
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f000 fdf6 	bl	800dce4 <xTaskRemoveFromEventList>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d001      	beq.n	800d102 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800d0fe:	f000 ff2d 	bl	800df5c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800d102:	7bbb      	ldrb	r3, [r7, #14]
 800d104:	3b01      	subs	r3, #1
 800d106:	b2db      	uxtb	r3, r3
 800d108:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800d10a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	dce9      	bgt.n	800d0e6 <prvUnlockQueue+0x60>
 800d112:	e000      	b.n	800d116 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800d114:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	22ff      	movs	r2, #255	@ 0xff
 800d11a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800d11e:	f001 fd61 	bl	800ebe4 <vPortExitCritical>
}
 800d122:	bf00      	nop
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b084      	sub	sp, #16
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800d132:	f001 fd45 	bl	800ebc0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d102      	bne.n	800d144 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800d13e:	2301      	movs	r3, #1
 800d140:	60fb      	str	r3, [r7, #12]
 800d142:	e001      	b.n	800d148 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800d144:	2300      	movs	r3, #0
 800d146:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800d148:	f001 fd4c 	bl	800ebe4 <vPortExitCritical>

    return xReturn;
 800d14c:	68fb      	ldr	r3, [r7, #12]
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3710      	adds	r7, #16
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800d156:	b580      	push	{r7, lr}
 800d158:	b084      	sub	sp, #16
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800d15e:	f001 fd2f 	bl	800ebc0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d102      	bne.n	800d174 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800d16e:	2301      	movs	r3, #1
 800d170:	60fb      	str	r3, [r7, #12]
 800d172:	e001      	b.n	800d178 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800d174:	2300      	movs	r3, #0
 800d176:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800d178:	f001 fd34 	bl	800ebe4 <vPortExitCritical>

    return xReturn;
 800d17c:	68fb      	ldr	r3, [r7, #12]
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3710      	adds	r7, #16
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
	...

0800d188 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800d188:	b580      	push	{r7, lr}
 800d18a:	b084      	sub	sp, #16
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800d192:	2300      	movs	r3, #0
 800d194:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d103      	bne.n	800d1a4 <vQueueAddToRegistry+0x1c>
 800d19c:	f001 fedc 	bl	800ef58 <ulSetInterruptMask>
 800d1a0:	bf00      	nop
 800d1a2:	e7fd      	b.n	800d1a0 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d024      	beq.n	800d1f4 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	60fb      	str	r3, [r7, #12]
 800d1ae:	e01e      	b.n	800d1ee <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800d1b0:	4a17      	ldr	r2, [pc, #92]	@ (800d210 <vQueueAddToRegistry+0x88>)
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	00db      	lsls	r3, r3, #3
 800d1b6:	4413      	add	r3, r2
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d105      	bne.n	800d1cc <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	00db      	lsls	r3, r3, #3
 800d1c4:	4a12      	ldr	r2, [pc, #72]	@ (800d210 <vQueueAddToRegistry+0x88>)
 800d1c6:	4413      	add	r3, r2
 800d1c8:	60bb      	str	r3, [r7, #8]
                    break;
 800d1ca:	e013      	b.n	800d1f4 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d10a      	bne.n	800d1e8 <vQueueAddToRegistry+0x60>
 800d1d2:	4a0f      	ldr	r2, [pc, #60]	@ (800d210 <vQueueAddToRegistry+0x88>)
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d104      	bne.n	800d1e8 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	00db      	lsls	r3, r3, #3
 800d1e2:	4a0b      	ldr	r2, [pc, #44]	@ (800d210 <vQueueAddToRegistry+0x88>)
 800d1e4:	4413      	add	r3, r2
 800d1e6:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	60fb      	str	r3, [r7, #12]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2b07      	cmp	r3, #7
 800d1f2:	d9dd      	bls.n	800d1b0 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d005      	beq.n	800d206 <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	683a      	ldr	r2, [r7, #0]
 800d1fe:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800d206:	bf00      	nop
 800d208:	3710      	adds	r7, #16
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	20046748 	.word	0x20046748

0800d214 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d103      	bne.n	800d22a <vQueueUnregisterQueue+0x16>
 800d222:	f001 fe99 	bl	800ef58 <ulSetInterruptMask>
 800d226:	bf00      	nop
 800d228:	e7fd      	b.n	800d226 <vQueueUnregisterQueue+0x12>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d22a:	2300      	movs	r3, #0
 800d22c:	60fb      	str	r3, [r7, #12]
 800d22e:	e016      	b.n	800d25e <vQueueUnregisterQueue+0x4a>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d230:	4a0f      	ldr	r2, [pc, #60]	@ (800d270 <vQueueUnregisterQueue+0x5c>)
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	00db      	lsls	r3, r3, #3
 800d236:	4413      	add	r3, r2
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d10b      	bne.n	800d258 <vQueueUnregisterQueue+0x44>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 800d240:	4a0b      	ldr	r2, [pc, #44]	@ (800d270 <vQueueUnregisterQueue+0x5c>)
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2100      	movs	r1, #0
 800d246:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d24a:	4a09      	ldr	r2, [pc, #36]	@ (800d270 <vQueueUnregisterQueue+0x5c>)
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	00db      	lsls	r3, r3, #3
 800d250:	4413      	add	r3, r2
 800d252:	2200      	movs	r2, #0
 800d254:	605a      	str	r2, [r3, #4]
                break;
 800d256:	e006      	b.n	800d266 <vQueueUnregisterQueue+0x52>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	3301      	adds	r3, #1
 800d25c:	60fb      	str	r3, [r7, #12]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	2b07      	cmp	r3, #7
 800d262:	d9e5      	bls.n	800d230 <vQueueUnregisterQueue+0x1c>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d264:	bf00      	nop
 800d266:	bf00      	nop
 800d268:	3710      	adds	r7, #16
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	20046748 	.word	0x20046748

0800d274 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800d274:	b580      	push	{r7, lr}
 800d276:	b086      	sub	sp, #24
 800d278:	af00      	add	r7, sp, #0
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800d284:	f001 fc9c 	bl	800ebc0 <vPortEnterCritical>
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d28e:	b25b      	sxtb	r3, r3
 800d290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d294:	d103      	bne.n	800d29e <vQueueWaitForMessageRestricted+0x2a>
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	2200      	movs	r2, #0
 800d29a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d2a4:	b25b      	sxtb	r3, r3
 800d2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2aa:	d103      	bne.n	800d2b4 <vQueueWaitForMessageRestricted+0x40>
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d2b4:	f001 fc96 	bl	800ebe4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d106      	bne.n	800d2ce <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	3324      	adds	r3, #36	@ 0x24
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	68b9      	ldr	r1, [r7, #8]
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f000 fccd 	bl	800dc68 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800d2ce:	6978      	ldr	r0, [r7, #20]
 800d2d0:	f7ff fed9 	bl	800d086 <prvUnlockQueue>
    }
 800d2d4:	bf00      	nop
 800d2d6:	3718      	adds	r7, #24
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b08c      	sub	sp, #48	@ 0x30
 800d2e0:	af04      	add	r7, sp, #16
 800d2e2:	60f8      	str	r0, [r7, #12]
 800d2e4:	60b9      	str	r1, [r7, #8]
 800d2e6:	607a      	str	r2, [r7, #4]
 800d2e8:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800d2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d103      	bne.n	800d2f8 <xTaskCreateStatic+0x1c>
 800d2f0:	f001 fe32 	bl	800ef58 <ulSetInterruptMask>
 800d2f4:	bf00      	nop
 800d2f6:	e7fd      	b.n	800d2f4 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800d2f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d103      	bne.n	800d306 <xTaskCreateStatic+0x2a>
 800d2fe:	f001 fe2b 	bl	800ef58 <ulSetInterruptMask>
 800d302:	bf00      	nop
 800d304:	e7fd      	b.n	800d302 <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800d306:	235c      	movs	r3, #92	@ 0x5c
 800d308:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	2b5c      	cmp	r3, #92	@ 0x5c
 800d30e:	d003      	beq.n	800d318 <xTaskCreateStatic+0x3c>
 800d310:	f001 fe22 	bl	800ef58 <ulSetInterruptMask>
 800d314:	bf00      	nop
 800d316:	e7fd      	b.n	800d314 <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d318:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d023      	beq.n	800d368 <xTaskCreateStatic+0x8c>
 800d320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d322:	2b00      	cmp	r3, #0
 800d324:	d020      	beq.n	800d368 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d328:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d32a:	225c      	movs	r2, #92	@ 0x5c
 800d32c:	2100      	movs	r1, #0
 800d32e:	69f8      	ldr	r0, [r7, #28]
 800d330:	f020 ff22 	bl	802e178 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d334:	69fb      	ldr	r3, [r7, #28]
 800d336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d338:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d33a:	69fb      	ldr	r3, [r7, #28]
 800d33c:	2202      	movs	r2, #2
 800d33e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d342:	2300      	movs	r3, #0
 800d344:	9303      	str	r3, [sp, #12]
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	9302      	str	r3, [sp, #8]
 800d34a:	f107 0318 	add.w	r3, r7, #24
 800d34e:	9301      	str	r3, [sp, #4]
 800d350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d352:	9300      	str	r3, [sp, #0]
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	68b9      	ldr	r1, [r7, #8]
 800d35a:	68f8      	ldr	r0, [r7, #12]
 800d35c:	f000 f855 	bl	800d40a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800d360:	69f8      	ldr	r0, [r7, #28]
 800d362:	f000 f8d5 	bl	800d510 <prvAddNewTaskToReadyList>
 800d366:	e001      	b.n	800d36c <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 800d368:	2300      	movs	r3, #0
 800d36a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800d36c:	69bb      	ldr	r3, [r7, #24]
    }
 800d36e:	4618      	mov	r0, r3
 800d370:	3720      	adds	r7, #32
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800d376:	b580      	push	{r7, lr}
 800d378:	b08c      	sub	sp, #48	@ 0x30
 800d37a:	af04      	add	r7, sp, #16
 800d37c:	60f8      	str	r0, [r7, #12]
 800d37e:	60b9      	str	r1, [r7, #8]
 800d380:	603b      	str	r3, [r7, #0]
 800d382:	4613      	mov	r3, r2
 800d384:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d386:	88fb      	ldrh	r3, [r7, #6]
 800d388:	009b      	lsls	r3, r3, #2
 800d38a:	4618      	mov	r0, r3
 800d38c:	f001 fe4c 	bl	800f028 <pvPortMalloc>
 800d390:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d013      	beq.n	800d3c0 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d398:	205c      	movs	r0, #92	@ 0x5c
 800d39a:	f001 fe45 	bl	800f028 <pvPortMalloc>
 800d39e:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d008      	beq.n	800d3b8 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d3a6:	225c      	movs	r2, #92	@ 0x5c
 800d3a8:	2100      	movs	r1, #0
 800d3aa:	69f8      	ldr	r0, [r7, #28]
 800d3ac:	f020 fee4 	bl	802e178 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800d3b0:	69fb      	ldr	r3, [r7, #28]
 800d3b2:	697a      	ldr	r2, [r7, #20]
 800d3b4:	631a      	str	r2, [r3, #48]	@ 0x30
 800d3b6:	e005      	b.n	800d3c4 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800d3b8:	6978      	ldr	r0, [r7, #20]
 800d3ba:	f001 fef1 	bl	800f1a0 <vPortFree>
 800d3be:	e001      	b.n	800d3c4 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d017      	beq.n	800d3fa <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d3ca:	69fb      	ldr	r3, [r7, #28]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d3d2:	88fa      	ldrh	r2, [r7, #6]
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	9303      	str	r3, [sp, #12]
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	9302      	str	r3, [sp, #8]
 800d3dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3de:	9301      	str	r3, [sp, #4]
 800d3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3e2:	9300      	str	r3, [sp, #0]
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	68b9      	ldr	r1, [r7, #8]
 800d3e8:	68f8      	ldr	r0, [r7, #12]
 800d3ea:	f000 f80e 	bl	800d40a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800d3ee:	69f8      	ldr	r0, [r7, #28]
 800d3f0:	f000 f88e 	bl	800d510 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	61bb      	str	r3, [r7, #24]
 800d3f8:	e002      	b.n	800d400 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d3fa:	f04f 33ff 	mov.w	r3, #4294967295
 800d3fe:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800d400:	69bb      	ldr	r3, [r7, #24]
    }
 800d402:	4618      	mov	r0, r3
 800d404:	3720      	adds	r7, #32
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}

0800d40a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800d40a:	b580      	push	{r7, lr}
 800d40c:	b086      	sub	sp, #24
 800d40e:	af00      	add	r7, sp, #0
 800d410:	60f8      	str	r0, [r7, #12]
 800d412:	60b9      	str	r1, [r7, #8]
 800d414:	607a      	str	r2, [r7, #4]
 800d416:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d41a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	009b      	lsls	r3, r3, #2
 800d420:	461a      	mov	r2, r3
 800d422:	21a5      	movs	r1, #165	@ 0xa5
 800d424:	f020 fea8 	bl	802e178 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d42a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d432:	3b01      	subs	r3, #1
 800d434:	009b      	lsls	r3, r3, #2
 800d436:	4413      	add	r3, r2
 800d438:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	f023 0307 	bic.w	r3, r3, #7
 800d440:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	f003 0307 	and.w	r3, r3, #7
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d003      	beq.n	800d454 <prvInitialiseNewTask+0x4a>
 800d44c:	f001 fd84 	bl	800ef58 <ulSetInterruptMask>
 800d450:	bf00      	nop
 800d452:	e7fd      	b.n	800d450 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d01e      	beq.n	800d498 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d45a:	2300      	movs	r3, #0
 800d45c:	617b      	str	r3, [r7, #20]
 800d45e:	e012      	b.n	800d486 <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d460:	68ba      	ldr	r2, [r7, #8]
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	4413      	add	r3, r2
 800d466:	7819      	ldrb	r1, [r3, #0]
 800d468:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	4413      	add	r3, r2
 800d46e:	3334      	adds	r3, #52	@ 0x34
 800d470:	460a      	mov	r2, r1
 800d472:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800d474:	68ba      	ldr	r2, [r7, #8]
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	4413      	add	r3, r2
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d006      	beq.n	800d48e <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	3301      	adds	r3, #1
 800d484:	617b      	str	r3, [r7, #20]
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	2b0f      	cmp	r3, #15
 800d48a:	d9e9      	bls.n	800d460 <prvInitialiseNewTask+0x56>
 800d48c:	e000      	b.n	800d490 <prvInitialiseNewTask+0x86>
            {
                break;
 800d48e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d492:	2200      	movs	r2, #0
 800d494:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800d498:	6a3b      	ldr	r3, [r7, #32]
 800d49a:	2b37      	cmp	r3, #55	@ 0x37
 800d49c:	d903      	bls.n	800d4a6 <prvInitialiseNewTask+0x9c>
 800d49e:	f001 fd5b 	bl	800ef58 <ulSetInterruptMask>
 800d4a2:	bf00      	nop
 800d4a4:	e7fd      	b.n	800d4a2 <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d4a6:	6a3b      	ldr	r3, [r7, #32]
 800d4a8:	2b37      	cmp	r3, #55	@ 0x37
 800d4aa:	d901      	bls.n	800d4b0 <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d4ac:	2337      	movs	r3, #55	@ 0x37
 800d4ae:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800d4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4b2:	6a3a      	ldr	r2, [r7, #32]
 800d4b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800d4b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4b8:	6a3a      	ldr	r2, [r7, #32]
 800d4ba:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4be:	3304      	adds	r3, #4
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7fe ff57 	bl	800c374 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4c8:	3318      	adds	r3, #24
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7fe ff52 	bl	800c374 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4d4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4d6:	6a3b      	ldr	r3, [r7, #32]
 800d4d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4de:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4e4:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800d4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	6938      	ldr	r0, [r7, #16]
 800d4f0:	f001 fbc6 	bl	800ec80 <pxPortInitialiseStack>
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4f8:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800d4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d002      	beq.n	800d506 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d502:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d504:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d506:	bf00      	nop
 800d508:	3718      	adds	r7, #24
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
	...

0800d510 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b084      	sub	sp, #16
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800d518:	f001 fb52 	bl	800ebc0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800d51c:	4b3e      	ldr	r3, [pc, #248]	@ (800d618 <prvAddNewTaskToReadyList+0x108>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	3301      	adds	r3, #1
 800d522:	4a3d      	ldr	r2, [pc, #244]	@ (800d618 <prvAddNewTaskToReadyList+0x108>)
 800d524:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800d526:	4b3d      	ldr	r3, [pc, #244]	@ (800d61c <prvAddNewTaskToReadyList+0x10c>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d109      	bne.n	800d542 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800d52e:	4a3b      	ldr	r2, [pc, #236]	@ (800d61c <prvAddNewTaskToReadyList+0x10c>)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d534:	4b38      	ldr	r3, [pc, #224]	@ (800d618 <prvAddNewTaskToReadyList+0x108>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d110      	bne.n	800d55e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800d53c:	f000 fd2a 	bl	800df94 <prvInitialiseTaskLists>
 800d540:	e00d      	b.n	800d55e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800d542:	4b37      	ldr	r3, [pc, #220]	@ (800d620 <prvAddNewTaskToReadyList+0x110>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d109      	bne.n	800d55e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d54a:	4b34      	ldr	r3, [pc, #208]	@ (800d61c <prvAddNewTaskToReadyList+0x10c>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d554:	429a      	cmp	r2, r3
 800d556:	d802      	bhi.n	800d55e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800d558:	4a30      	ldr	r2, [pc, #192]	@ (800d61c <prvAddNewTaskToReadyList+0x10c>)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800d55e:	4b31      	ldr	r3, [pc, #196]	@ (800d624 <prvAddNewTaskToReadyList+0x114>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	3301      	adds	r3, #1
 800d564:	4a2f      	ldr	r2, [pc, #188]	@ (800d624 <prvAddNewTaskToReadyList+0x114>)
 800d566:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d568:	4b2e      	ldr	r3, [pc, #184]	@ (800d624 <prvAddNewTaskToReadyList+0x114>)
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d574:	4b2c      	ldr	r3, [pc, #176]	@ (800d628 <prvAddNewTaskToReadyList+0x118>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	429a      	cmp	r2, r3
 800d57a:	d903      	bls.n	800d584 <prvAddNewTaskToReadyList+0x74>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d580:	4a29      	ldr	r2, [pc, #164]	@ (800d628 <prvAddNewTaskToReadyList+0x118>)
 800d582:	6013      	str	r3, [r2, #0]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d588:	4928      	ldr	r1, [pc, #160]	@ (800d62c <prvAddNewTaskToReadyList+0x11c>)
 800d58a:	4613      	mov	r3, r2
 800d58c:	009b      	lsls	r3, r3, #2
 800d58e:	4413      	add	r3, r2
 800d590:	009b      	lsls	r3, r3, #2
 800d592:	440b      	add	r3, r1
 800d594:	3304      	adds	r3, #4
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	60fb      	str	r3, [r7, #12]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	68fa      	ldr	r2, [r7, #12]
 800d59e:	609a      	str	r2, [r3, #8]
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	689a      	ldr	r2, [r3, #8]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	60da      	str	r2, [r3, #12]
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	689b      	ldr	r3, [r3, #8]
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	3204      	adds	r2, #4
 800d5b0:	605a      	str	r2, [r3, #4]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	1d1a      	adds	r2, r3, #4
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	609a      	str	r2, [r3, #8]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5be:	4613      	mov	r3, r2
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	4413      	add	r3, r2
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	4a19      	ldr	r2, [pc, #100]	@ (800d62c <prvAddNewTaskToReadyList+0x11c>)
 800d5c8:	441a      	add	r2, r3
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	615a      	str	r2, [r3, #20]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5d2:	4916      	ldr	r1, [pc, #88]	@ (800d62c <prvAddNewTaskToReadyList+0x11c>)
 800d5d4:	4613      	mov	r3, r2
 800d5d6:	009b      	lsls	r3, r3, #2
 800d5d8:	4413      	add	r3, r2
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	440b      	add	r3, r1
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	1c59      	adds	r1, r3, #1
 800d5e2:	4812      	ldr	r0, [pc, #72]	@ (800d62c <prvAddNewTaskToReadyList+0x11c>)
 800d5e4:	4613      	mov	r3, r2
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	4413      	add	r3, r2
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	4403      	add	r3, r0
 800d5ee:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800d5f0:	f001 faf8 	bl	800ebe4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800d5f4:	4b0a      	ldr	r3, [pc, #40]	@ (800d620 <prvAddNewTaskToReadyList+0x110>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d008      	beq.n	800d60e <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d5fc:	4b07      	ldr	r3, [pc, #28]	@ (800d61c <prvAddNewTaskToReadyList+0x10c>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d606:	429a      	cmp	r2, r3
 800d608:	d201      	bcs.n	800d60e <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800d60a:	f001 fac7 	bl	800eb9c <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d60e:	bf00      	nop
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	20046c5c 	.word	0x20046c5c
 800d61c:	20046788 	.word	0x20046788
 800d620:	20046c68 	.word	0x20046c68
 800d624:	20046c78 	.word	0x20046c78
 800d628:	20046c64 	.word	0x20046c64
 800d62c:	2004678c 	.word	0x2004678c

0800d630 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800d630:	b580      	push	{r7, lr}
 800d632:	b084      	sub	sp, #16
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800d638:	2300      	movs	r3, #0
 800d63a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d010      	beq.n	800d664 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 800d642:	4b0d      	ldr	r3, [pc, #52]	@ (800d678 <vTaskDelay+0x48>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d003      	beq.n	800d652 <vTaskDelay+0x22>
 800d64a:	f001 fc85 	bl	800ef58 <ulSetInterruptMask>
 800d64e:	bf00      	nop
 800d650:	e7fd      	b.n	800d64e <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800d652:	f000 f86f 	bl	800d734 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d656:	2100      	movs	r1, #0
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f000 ff33 	bl	800e4c4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800d65e:	f000 f877 	bl	800d750 <xTaskResumeAll>
 800d662:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d101      	bne.n	800d66e <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 800d66a:	f001 fa97 	bl	800eb9c <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800d66e:	bf00      	nop
 800d670:	3710      	adds	r7, #16
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	20046c84 	.word	0x20046c84

0800d67c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b088      	sub	sp, #32
 800d680:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800d682:	2300      	movs	r3, #0
 800d684:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800d686:	2300      	movs	r3, #0
 800d688:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d68a:	463a      	mov	r2, r7
 800d68c:	1d39      	adds	r1, r7, #4
 800d68e:	f107 0308 	add.w	r3, r7, #8
 800d692:	4618      	mov	r0, r3
 800d694:	f7fe fe1a 	bl	800c2cc <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800d698:	6839      	ldr	r1, [r7, #0]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	68ba      	ldr	r2, [r7, #8]
 800d69e:	9202      	str	r2, [sp, #8]
 800d6a0:	9301      	str	r3, [sp, #4]
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	9300      	str	r3, [sp, #0]
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	460a      	mov	r2, r1
 800d6aa:	491b      	ldr	r1, [pc, #108]	@ (800d718 <vTaskStartScheduler+0x9c>)
 800d6ac:	481b      	ldr	r0, [pc, #108]	@ (800d71c <vTaskStartScheduler+0xa0>)
 800d6ae:	f7ff fe15 	bl	800d2dc <xTaskCreateStatic>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	4a1a      	ldr	r2, [pc, #104]	@ (800d720 <vTaskStartScheduler+0xa4>)
 800d6b6:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800d6b8:	4b19      	ldr	r3, [pc, #100]	@ (800d720 <vTaskStartScheduler+0xa4>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d002      	beq.n	800d6c6 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	60fb      	str	r3, [r7, #12]
 800d6c4:	e001      	b.n	800d6ca <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	d102      	bne.n	800d6d6 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800d6d0:	f000 ff66 	bl	800e5a0 <xTimerCreateTimerTask>
 800d6d4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d10e      	bne.n	800d6fa <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800d6dc:	f001 fc3c 	bl	800ef58 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800d6e0:	4b10      	ldr	r3, [pc, #64]	@ (800d724 <vTaskStartScheduler+0xa8>)
 800d6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800d6e8:	4b0f      	ldr	r3, [pc, #60]	@ (800d728 <vTaskStartScheduler+0xac>)
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d6ee:	4b0f      	ldr	r3, [pc, #60]	@ (800d72c <vTaskStartScheduler+0xb0>)
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800d6f4:	f001 fb4e 	bl	800ed94 <xPortStartScheduler>
 800d6f8:	e007      	b.n	800d70a <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d700:	d103      	bne.n	800d70a <vTaskStartScheduler+0x8e>
 800d702:	f001 fc29 	bl	800ef58 <ulSetInterruptMask>
 800d706:	bf00      	nop
 800d708:	e7fd      	b.n	800d706 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800d70a:	4b09      	ldr	r3, [pc, #36]	@ (800d730 <vTaskStartScheduler+0xb4>)
 800d70c:	681b      	ldr	r3, [r3, #0]
}
 800d70e:	bf00      	nop
 800d710:	3710      	adds	r7, #16
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	0802ed74 	.word	0x0802ed74
 800d71c:	0800df75 	.word	0x0800df75
 800d720:	20046c80 	.word	0x20046c80
 800d724:	20046c7c 	.word	0x20046c7c
 800d728:	20046c68 	.word	0x20046c68
 800d72c:	20046c60 	.word	0x20046c60
 800d730:	0802faf4 	.word	0x0802faf4

0800d734 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d734:	b480      	push	{r7}
 800d736:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800d738:	4b04      	ldr	r3, [pc, #16]	@ (800d74c <vTaskSuspendAll+0x18>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	3301      	adds	r3, #1
 800d73e:	4a03      	ldr	r2, [pc, #12]	@ (800d74c <vTaskSuspendAll+0x18>)
 800d740:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800d742:	bf00      	nop
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr
 800d74c:	20046c84 	.word	0x20046c84

0800d750 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b086      	sub	sp, #24
 800d754:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800d756:	2300      	movs	r3, #0
 800d758:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800d75a:	2300      	movs	r3, #0
 800d75c:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 800d75e:	4b6b      	ldr	r3, [pc, #428]	@ (800d90c <xTaskResumeAll+0x1bc>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d103      	bne.n	800d76e <xTaskResumeAll+0x1e>
 800d766:	f001 fbf7 	bl	800ef58 <ulSetInterruptMask>
 800d76a:	bf00      	nop
 800d76c:	e7fd      	b.n	800d76a <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800d76e:	f001 fa27 	bl	800ebc0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800d772:	4b66      	ldr	r3, [pc, #408]	@ (800d90c <xTaskResumeAll+0x1bc>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	3b01      	subs	r3, #1
 800d778:	4a64      	ldr	r2, [pc, #400]	@ (800d90c <xTaskResumeAll+0x1bc>)
 800d77a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800d77c:	4b63      	ldr	r3, [pc, #396]	@ (800d90c <xTaskResumeAll+0x1bc>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	2b00      	cmp	r3, #0
 800d782:	f040 80bb 	bne.w	800d8fc <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d786:	4b62      	ldr	r3, [pc, #392]	@ (800d910 <xTaskResumeAll+0x1c0>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	f000 80b6 	beq.w	800d8fc <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d790:	e08b      	b.n	800d8aa <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d792:	4b60      	ldr	r3, [pc, #384]	@ (800d914 <xTaskResumeAll+0x1c4>)
 800d794:	68db      	ldr	r3, [r3, #12]
 800d796:	68db      	ldr	r3, [r3, #12]
 800d798:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d79e:	60bb      	str	r3, [r7, #8]
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	69db      	ldr	r3, [r3, #28]
 800d7a4:	697a      	ldr	r2, [r7, #20]
 800d7a6:	6a12      	ldr	r2, [r2, #32]
 800d7a8:	609a      	str	r2, [r3, #8]
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	6a1b      	ldr	r3, [r3, #32]
 800d7ae:	697a      	ldr	r2, [r7, #20]
 800d7b0:	69d2      	ldr	r2, [r2, #28]
 800d7b2:	605a      	str	r2, [r3, #4]
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	685a      	ldr	r2, [r3, #4]
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	3318      	adds	r3, #24
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d103      	bne.n	800d7c8 <xTaskResumeAll+0x78>
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	6a1a      	ldr	r2, [r3, #32]
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	605a      	str	r2, [r3, #4]
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	629a      	str	r2, [r3, #40]	@ 0x28
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	1e5a      	subs	r2, r3, #1
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	695b      	ldr	r3, [r3, #20]
 800d7dc:	607b      	str	r3, [r7, #4]
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	689b      	ldr	r3, [r3, #8]
 800d7e2:	697a      	ldr	r2, [r7, #20]
 800d7e4:	68d2      	ldr	r2, [r2, #12]
 800d7e6:	609a      	str	r2, [r3, #8]
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	68db      	ldr	r3, [r3, #12]
 800d7ec:	697a      	ldr	r2, [r7, #20]
 800d7ee:	6892      	ldr	r2, [r2, #8]
 800d7f0:	605a      	str	r2, [r3, #4]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	685a      	ldr	r2, [r3, #4]
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	3304      	adds	r3, #4
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d103      	bne.n	800d806 <xTaskResumeAll+0xb6>
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	68da      	ldr	r2, [r3, #12]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	605a      	str	r2, [r3, #4]
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	2200      	movs	r2, #0
 800d80a:	615a      	str	r2, [r3, #20]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	1e5a      	subs	r2, r3, #1
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d81a:	4b3f      	ldr	r3, [pc, #252]	@ (800d918 <xTaskResumeAll+0x1c8>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	429a      	cmp	r2, r3
 800d820:	d903      	bls.n	800d82a <xTaskResumeAll+0xda>
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d826:	4a3c      	ldr	r2, [pc, #240]	@ (800d918 <xTaskResumeAll+0x1c8>)
 800d828:	6013      	str	r3, [r2, #0]
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d82e:	493b      	ldr	r1, [pc, #236]	@ (800d91c <xTaskResumeAll+0x1cc>)
 800d830:	4613      	mov	r3, r2
 800d832:	009b      	lsls	r3, r3, #2
 800d834:	4413      	add	r3, r2
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	440b      	add	r3, r1
 800d83a:	3304      	adds	r3, #4
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	603b      	str	r3, [r7, #0]
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	683a      	ldr	r2, [r7, #0]
 800d844:	609a      	str	r2, [r3, #8]
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	689a      	ldr	r2, [r3, #8]
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	60da      	str	r2, [r3, #12]
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	689b      	ldr	r3, [r3, #8]
 800d852:	697a      	ldr	r2, [r7, #20]
 800d854:	3204      	adds	r2, #4
 800d856:	605a      	str	r2, [r3, #4]
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	1d1a      	adds	r2, r3, #4
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	609a      	str	r2, [r3, #8]
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d864:	4613      	mov	r3, r2
 800d866:	009b      	lsls	r3, r3, #2
 800d868:	4413      	add	r3, r2
 800d86a:	009b      	lsls	r3, r3, #2
 800d86c:	4a2b      	ldr	r2, [pc, #172]	@ (800d91c <xTaskResumeAll+0x1cc>)
 800d86e:	441a      	add	r2, r3
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	615a      	str	r2, [r3, #20]
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d878:	4928      	ldr	r1, [pc, #160]	@ (800d91c <xTaskResumeAll+0x1cc>)
 800d87a:	4613      	mov	r3, r2
 800d87c:	009b      	lsls	r3, r3, #2
 800d87e:	4413      	add	r3, r2
 800d880:	009b      	lsls	r3, r3, #2
 800d882:	440b      	add	r3, r1
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	1c59      	adds	r1, r3, #1
 800d888:	4824      	ldr	r0, [pc, #144]	@ (800d91c <xTaskResumeAll+0x1cc>)
 800d88a:	4613      	mov	r3, r2
 800d88c:	009b      	lsls	r3, r3, #2
 800d88e:	4413      	add	r3, r2
 800d890:	009b      	lsls	r3, r3, #2
 800d892:	4403      	add	r3, r0
 800d894:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d89a:	4b21      	ldr	r3, [pc, #132]	@ (800d920 <xTaskResumeAll+0x1d0>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d902      	bls.n	800d8aa <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 800d8a4:	4b1f      	ldr	r3, [pc, #124]	@ (800d924 <xTaskResumeAll+0x1d4>)
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d8aa:	4b1a      	ldr	r3, [pc, #104]	@ (800d914 <xTaskResumeAll+0x1c4>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	f47f af6f 	bne.w	800d792 <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d001      	beq.n	800d8be <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800d8ba:	f000 fc01 	bl	800e0c0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d8be:	4b1a      	ldr	r3, [pc, #104]	@ (800d928 <xTaskResumeAll+0x1d8>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d010      	beq.n	800d8ec <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800d8ca:	f000 f84b 	bl	800d964 <xTaskIncrementTick>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d002      	beq.n	800d8da <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 800d8d4:	4b13      	ldr	r3, [pc, #76]	@ (800d924 <xTaskResumeAll+0x1d4>)
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d1f1      	bne.n	800d8ca <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 800d8e6:	4b10      	ldr	r3, [pc, #64]	@ (800d928 <xTaskResumeAll+0x1d8>)
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800d8ec:	4b0d      	ldr	r3, [pc, #52]	@ (800d924 <xTaskResumeAll+0x1d4>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d003      	beq.n	800d8fc <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800d8f8:	f001 f950 	bl	800eb9c <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800d8fc:	f001 f972 	bl	800ebe4 <vPortExitCritical>

    return xAlreadyYielded;
 800d900:	693b      	ldr	r3, [r7, #16]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3718      	adds	r7, #24
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	20046c84 	.word	0x20046c84
 800d910:	20046c5c 	.word	0x20046c5c
 800d914:	20046c1c 	.word	0x20046c1c
 800d918:	20046c64 	.word	0x20046c64
 800d91c:	2004678c 	.word	0x2004678c
 800d920:	20046788 	.word	0x20046788
 800d924:	20046c70 	.word	0x20046c70
 800d928:	20046c6c 	.word	0x20046c6c

0800d92c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d92c:	b480      	push	{r7}
 800d92e:	b083      	sub	sp, #12
 800d930:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800d932:	4b05      	ldr	r3, [pc, #20]	@ (800d948 <xTaskGetTickCount+0x1c>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800d938:	687b      	ldr	r3, [r7, #4]
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	370c      	adds	r7, #12
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr
 800d946:	bf00      	nop
 800d948:	20046c60 	.word	0x20046c60

0800d94c <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800d94c:	b480      	push	{r7}
 800d94e:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 800d950:	4b03      	ldr	r3, [pc, #12]	@ (800d960 <uxTaskGetNumberOfTasks+0x14>)
 800d952:	681b      	ldr	r3, [r3, #0]
}
 800d954:	4618      	mov	r0, r3
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr
 800d95e:	bf00      	nop
 800d960:	20046c5c 	.word	0x20046c5c

0800d964 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b088      	sub	sp, #32
 800d968:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800d96a:	2300      	movs	r3, #0
 800d96c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800d96e:	4b7a      	ldr	r3, [pc, #488]	@ (800db58 <xTaskIncrementTick+0x1f4>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	f040 80e6 	bne.w	800db44 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d978:	4b78      	ldr	r3, [pc, #480]	@ (800db5c <xTaskIncrementTick+0x1f8>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	3301      	adds	r3, #1
 800d97e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800d980:	4a76      	ldr	r2, [pc, #472]	@ (800db5c <xTaskIncrementTick+0x1f8>)
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d986:	69bb      	ldr	r3, [r7, #24]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d119      	bne.n	800d9c0 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 800d98c:	4b74      	ldr	r3, [pc, #464]	@ (800db60 <xTaskIncrementTick+0x1fc>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d003      	beq.n	800d99e <xTaskIncrementTick+0x3a>
 800d996:	f001 fadf 	bl	800ef58 <ulSetInterruptMask>
 800d99a:	bf00      	nop
 800d99c:	e7fd      	b.n	800d99a <xTaskIncrementTick+0x36>
 800d99e:	4b70      	ldr	r3, [pc, #448]	@ (800db60 <xTaskIncrementTick+0x1fc>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	617b      	str	r3, [r7, #20]
 800d9a4:	4b6f      	ldr	r3, [pc, #444]	@ (800db64 <xTaskIncrementTick+0x200>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4a6d      	ldr	r2, [pc, #436]	@ (800db60 <xTaskIncrementTick+0x1fc>)
 800d9aa:	6013      	str	r3, [r2, #0]
 800d9ac:	4a6d      	ldr	r2, [pc, #436]	@ (800db64 <xTaskIncrementTick+0x200>)
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	6013      	str	r3, [r2, #0]
 800d9b2:	4b6d      	ldr	r3, [pc, #436]	@ (800db68 <xTaskIncrementTick+0x204>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	4a6b      	ldr	r2, [pc, #428]	@ (800db68 <xTaskIncrementTick+0x204>)
 800d9ba:	6013      	str	r3, [r2, #0]
 800d9bc:	f000 fb80 	bl	800e0c0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800d9c0:	4b6a      	ldr	r3, [pc, #424]	@ (800db6c <xTaskIncrementTick+0x208>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	69ba      	ldr	r2, [r7, #24]
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	f0c0 80a7 	bcc.w	800db1a <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9cc:	4b64      	ldr	r3, [pc, #400]	@ (800db60 <xTaskIncrementTick+0x1fc>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d104      	bne.n	800d9e0 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9d6:	4b65      	ldr	r3, [pc, #404]	@ (800db6c <xTaskIncrementTick+0x208>)
 800d9d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d9dc:	601a      	str	r2, [r3, #0]
                    break;
 800d9de:	e09c      	b.n	800db1a <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9e0:	4b5f      	ldr	r3, [pc, #380]	@ (800db60 <xTaskIncrementTick+0x1fc>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	68db      	ldr	r3, [r3, #12]
 800d9e6:	68db      	ldr	r3, [r3, #12]
 800d9e8:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800d9f0:	69ba      	ldr	r2, [r7, #24]
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d203      	bcs.n	800da00 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800d9f8:	4a5c      	ldr	r2, [pc, #368]	@ (800db6c <xTaskIncrementTick+0x208>)
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800d9fe:	e08c      	b.n	800db1a <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	695b      	ldr	r3, [r3, #20]
 800da04:	60bb      	str	r3, [r7, #8]
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	689b      	ldr	r3, [r3, #8]
 800da0a:	693a      	ldr	r2, [r7, #16]
 800da0c:	68d2      	ldr	r2, [r2, #12]
 800da0e:	609a      	str	r2, [r3, #8]
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	693a      	ldr	r2, [r7, #16]
 800da16:	6892      	ldr	r2, [r2, #8]
 800da18:	605a      	str	r2, [r3, #4]
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	685a      	ldr	r2, [r3, #4]
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	3304      	adds	r3, #4
 800da22:	429a      	cmp	r2, r3
 800da24:	d103      	bne.n	800da2e <xTaskIncrementTick+0xca>
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	68da      	ldr	r2, [r3, #12]
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	605a      	str	r2, [r3, #4]
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	2200      	movs	r2, #0
 800da32:	615a      	str	r2, [r3, #20]
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	1e5a      	subs	r2, r3, #1
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da42:	2b00      	cmp	r3, #0
 800da44:	d01e      	beq.n	800da84 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da4a:	607b      	str	r3, [r7, #4]
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	69db      	ldr	r3, [r3, #28]
 800da50:	693a      	ldr	r2, [r7, #16]
 800da52:	6a12      	ldr	r2, [r2, #32]
 800da54:	609a      	str	r2, [r3, #8]
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	6a1b      	ldr	r3, [r3, #32]
 800da5a:	693a      	ldr	r2, [r7, #16]
 800da5c:	69d2      	ldr	r2, [r2, #28]
 800da5e:	605a      	str	r2, [r3, #4]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	685a      	ldr	r2, [r3, #4]
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	3318      	adds	r3, #24
 800da68:	429a      	cmp	r2, r3
 800da6a:	d103      	bne.n	800da74 <xTaskIncrementTick+0x110>
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	6a1a      	ldr	r2, [r3, #32]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	605a      	str	r2, [r3, #4]
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	2200      	movs	r2, #0
 800da78:	629a      	str	r2, [r3, #40]	@ 0x28
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	1e5a      	subs	r2, r3, #1
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da88:	4b39      	ldr	r3, [pc, #228]	@ (800db70 <xTaskIncrementTick+0x20c>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d903      	bls.n	800da98 <xTaskIncrementTick+0x134>
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da94:	4a36      	ldr	r2, [pc, #216]	@ (800db70 <xTaskIncrementTick+0x20c>)
 800da96:	6013      	str	r3, [r2, #0]
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da9c:	4935      	ldr	r1, [pc, #212]	@ (800db74 <xTaskIncrementTick+0x210>)
 800da9e:	4613      	mov	r3, r2
 800daa0:	009b      	lsls	r3, r3, #2
 800daa2:	4413      	add	r3, r2
 800daa4:	009b      	lsls	r3, r3, #2
 800daa6:	440b      	add	r3, r1
 800daa8:	3304      	adds	r3, #4
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	603b      	str	r3, [r7, #0]
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	683a      	ldr	r2, [r7, #0]
 800dab2:	609a      	str	r2, [r3, #8]
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	689a      	ldr	r2, [r3, #8]
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	60da      	str	r2, [r3, #12]
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	689b      	ldr	r3, [r3, #8]
 800dac0:	693a      	ldr	r2, [r7, #16]
 800dac2:	3204      	adds	r2, #4
 800dac4:	605a      	str	r2, [r3, #4]
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	1d1a      	adds	r2, r3, #4
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	609a      	str	r2, [r3, #8]
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dad2:	4613      	mov	r3, r2
 800dad4:	009b      	lsls	r3, r3, #2
 800dad6:	4413      	add	r3, r2
 800dad8:	009b      	lsls	r3, r3, #2
 800dada:	4a26      	ldr	r2, [pc, #152]	@ (800db74 <xTaskIncrementTick+0x210>)
 800dadc:	441a      	add	r2, r3
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	615a      	str	r2, [r3, #20]
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dae6:	4923      	ldr	r1, [pc, #140]	@ (800db74 <xTaskIncrementTick+0x210>)
 800dae8:	4613      	mov	r3, r2
 800daea:	009b      	lsls	r3, r3, #2
 800daec:	4413      	add	r3, r2
 800daee:	009b      	lsls	r3, r3, #2
 800daf0:	440b      	add	r3, r1
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	1c59      	adds	r1, r3, #1
 800daf6:	481f      	ldr	r0, [pc, #124]	@ (800db74 <xTaskIncrementTick+0x210>)
 800daf8:	4613      	mov	r3, r2
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	4413      	add	r3, r2
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	4403      	add	r3, r0
 800db02:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db08:	4b1b      	ldr	r3, [pc, #108]	@ (800db78 <xTaskIncrementTick+0x214>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db0e:	429a      	cmp	r2, r3
 800db10:	f67f af5c 	bls.w	800d9cc <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 800db14:	2301      	movs	r3, #1
 800db16:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db18:	e758      	b.n	800d9cc <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800db1a:	4b17      	ldr	r3, [pc, #92]	@ (800db78 <xTaskIncrementTick+0x214>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db20:	4914      	ldr	r1, [pc, #80]	@ (800db74 <xTaskIncrementTick+0x210>)
 800db22:	4613      	mov	r3, r2
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	4413      	add	r3, r2
 800db28:	009b      	lsls	r3, r3, #2
 800db2a:	440b      	add	r3, r1
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d901      	bls.n	800db36 <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 800db32:	2301      	movs	r3, #1
 800db34:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800db36:	4b11      	ldr	r3, [pc, #68]	@ (800db7c <xTaskIncrementTick+0x218>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d007      	beq.n	800db4e <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 800db3e:	2301      	movs	r3, #1
 800db40:	61fb      	str	r3, [r7, #28]
 800db42:	e004      	b.n	800db4e <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800db44:	4b0e      	ldr	r3, [pc, #56]	@ (800db80 <xTaskIncrementTick+0x21c>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	3301      	adds	r3, #1
 800db4a:	4a0d      	ldr	r2, [pc, #52]	@ (800db80 <xTaskIncrementTick+0x21c>)
 800db4c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800db4e:	69fb      	ldr	r3, [r7, #28]
}
 800db50:	4618      	mov	r0, r3
 800db52:	3720      	adds	r7, #32
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	20046c84 	.word	0x20046c84
 800db5c:	20046c60 	.word	0x20046c60
 800db60:	20046c14 	.word	0x20046c14
 800db64:	20046c18 	.word	0x20046c18
 800db68:	20046c74 	.word	0x20046c74
 800db6c:	20046c7c 	.word	0x20046c7c
 800db70:	20046c64 	.word	0x20046c64
 800db74:	2004678c 	.word	0x2004678c
 800db78:	20046788 	.word	0x20046788
 800db7c:	20046c70 	.word	0x20046c70
 800db80:	20046c6c 	.word	0x20046c6c

0800db84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800db8a:	4b23      	ldr	r3, [pc, #140]	@ (800dc18 <vTaskSwitchContext+0x94>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d003      	beq.n	800db9a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800db92:	4b22      	ldr	r3, [pc, #136]	@ (800dc1c <vTaskSwitchContext+0x98>)
 800db94:	2201      	movs	r2, #1
 800db96:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800db98:	e039      	b.n	800dc0e <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800db9a:	4b20      	ldr	r3, [pc, #128]	@ (800dc1c <vTaskSwitchContext+0x98>)
 800db9c:	2200      	movs	r2, #0
 800db9e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dba0:	4b1f      	ldr	r3, [pc, #124]	@ (800dc20 <vTaskSwitchContext+0x9c>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	607b      	str	r3, [r7, #4]
 800dba6:	e009      	b.n	800dbbc <vTaskSwitchContext+0x38>
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d103      	bne.n	800dbb6 <vTaskSwitchContext+0x32>
 800dbae:	f001 f9d3 	bl	800ef58 <ulSetInterruptMask>
 800dbb2:	bf00      	nop
 800dbb4:	e7fd      	b.n	800dbb2 <vTaskSwitchContext+0x2e>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	3b01      	subs	r3, #1
 800dbba:	607b      	str	r3, [r7, #4]
 800dbbc:	4919      	ldr	r1, [pc, #100]	@ (800dc24 <vTaskSwitchContext+0xa0>)
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	4613      	mov	r3, r2
 800dbc2:	009b      	lsls	r3, r3, #2
 800dbc4:	4413      	add	r3, r2
 800dbc6:	009b      	lsls	r3, r3, #2
 800dbc8:	440b      	add	r3, r1
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d0eb      	beq.n	800dba8 <vTaskSwitchContext+0x24>
 800dbd0:	687a      	ldr	r2, [r7, #4]
 800dbd2:	4613      	mov	r3, r2
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	4413      	add	r3, r2
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	4a12      	ldr	r2, [pc, #72]	@ (800dc24 <vTaskSwitchContext+0xa0>)
 800dbdc:	4413      	add	r3, r2
 800dbde:	603b      	str	r3, [r7, #0]
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	685a      	ldr	r2, [r3, #4]
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	605a      	str	r2, [r3, #4]
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	685a      	ldr	r2, [r3, #4]
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	3308      	adds	r3, #8
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d103      	bne.n	800dbfe <vTaskSwitchContext+0x7a>
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	68da      	ldr	r2, [r3, #12]
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	605a      	str	r2, [r3, #4]
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	68db      	ldr	r3, [r3, #12]
 800dc04:	4a08      	ldr	r2, [pc, #32]	@ (800dc28 <vTaskSwitchContext+0xa4>)
 800dc06:	6013      	str	r3, [r2, #0]
 800dc08:	4a05      	ldr	r2, [pc, #20]	@ (800dc20 <vTaskSwitchContext+0x9c>)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6013      	str	r3, [r2, #0]
}
 800dc0e:	bf00      	nop
 800dc10:	3708      	adds	r7, #8
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	20046c84 	.word	0x20046c84
 800dc1c:	20046c70 	.word	0x20046c70
 800dc20:	20046c64 	.word	0x20046c64
 800dc24:	2004678c 	.word	0x2004678c
 800dc28:	20046788 	.word	0x20046788

0800dc2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d103      	bne.n	800dc44 <vTaskPlaceOnEventList+0x18>
 800dc3c:	f001 f98c 	bl	800ef58 <ulSetInterruptMask>
 800dc40:	bf00      	nop
 800dc42:	e7fd      	b.n	800dc40 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc44:	4b07      	ldr	r3, [pc, #28]	@ (800dc64 <vTaskPlaceOnEventList+0x38>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	3318      	adds	r3, #24
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f7fe fb9e 	bl	800c38e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dc52:	2101      	movs	r1, #1
 800dc54:	6838      	ldr	r0, [r7, #0]
 800dc56:	f000 fc35 	bl	800e4c4 <prvAddCurrentTaskToDelayedList>
}
 800dc5a:	bf00      	nop
 800dc5c:	3708      	adds	r7, #8
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	20046788 	.word	0x20046788

0800dc68 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b086      	sub	sp, #24
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	60b9      	str	r1, [r7, #8]
 800dc72:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d103      	bne.n	800dc82 <vTaskPlaceOnEventListRestricted+0x1a>
 800dc7a:	f001 f96d 	bl	800ef58 <ulSetInterruptMask>
 800dc7e:	bf00      	nop
 800dc80:	e7fd      	b.n	800dc7e <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	617b      	str	r3, [r7, #20]
 800dc88:	4b15      	ldr	r3, [pc, #84]	@ (800dce0 <vTaskPlaceOnEventListRestricted+0x78>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	697a      	ldr	r2, [r7, #20]
 800dc8e:	61da      	str	r2, [r3, #28]
 800dc90:	4b13      	ldr	r3, [pc, #76]	@ (800dce0 <vTaskPlaceOnEventListRestricted+0x78>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	697a      	ldr	r2, [r7, #20]
 800dc96:	6892      	ldr	r2, [r2, #8]
 800dc98:	621a      	str	r2, [r3, #32]
 800dc9a:	4b11      	ldr	r3, [pc, #68]	@ (800dce0 <vTaskPlaceOnEventListRestricted+0x78>)
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	689b      	ldr	r3, [r3, #8]
 800dca2:	3218      	adds	r2, #24
 800dca4:	605a      	str	r2, [r3, #4]
 800dca6:	4b0e      	ldr	r3, [pc, #56]	@ (800dce0 <vTaskPlaceOnEventListRestricted+0x78>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f103 0218 	add.w	r2, r3, #24
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	609a      	str	r2, [r3, #8]
 800dcb2:	4b0b      	ldr	r3, [pc, #44]	@ (800dce0 <vTaskPlaceOnEventListRestricted+0x78>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	629a      	str	r2, [r3, #40]	@ 0x28
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	1c5a      	adds	r2, r3, #1
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d002      	beq.n	800dcd0 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 800dcca:	f04f 33ff 	mov.w	r3, #4294967295
 800dcce:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dcd0:	6879      	ldr	r1, [r7, #4]
 800dcd2:	68b8      	ldr	r0, [r7, #8]
 800dcd4:	f000 fbf6 	bl	800e4c4 <prvAddCurrentTaskToDelayedList>
    }
 800dcd8:	bf00      	nop
 800dcda:	3718      	adds	r7, #24
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}
 800dce0:	20046788 	.word	0x20046788

0800dce4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b088      	sub	sp, #32
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	68db      	ldr	r3, [r3, #12]
 800dcf0:	68db      	ldr	r3, [r3, #12]
 800dcf2:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800dcf4:	69bb      	ldr	r3, [r7, #24]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d103      	bne.n	800dd02 <xTaskRemoveFromEventList+0x1e>
 800dcfa:	f001 f92d 	bl	800ef58 <ulSetInterruptMask>
 800dcfe:	bf00      	nop
 800dd00:	e7fd      	b.n	800dcfe <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800dd02:	69bb      	ldr	r3, [r7, #24]
 800dd04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd06:	617b      	str	r3, [r7, #20]
 800dd08:	69bb      	ldr	r3, [r7, #24]
 800dd0a:	69db      	ldr	r3, [r3, #28]
 800dd0c:	69ba      	ldr	r2, [r7, #24]
 800dd0e:	6a12      	ldr	r2, [r2, #32]
 800dd10:	609a      	str	r2, [r3, #8]
 800dd12:	69bb      	ldr	r3, [r7, #24]
 800dd14:	6a1b      	ldr	r3, [r3, #32]
 800dd16:	69ba      	ldr	r2, [r7, #24]
 800dd18:	69d2      	ldr	r2, [r2, #28]
 800dd1a:	605a      	str	r2, [r3, #4]
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	685a      	ldr	r2, [r3, #4]
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	3318      	adds	r3, #24
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d103      	bne.n	800dd30 <xTaskRemoveFromEventList+0x4c>
 800dd28:	69bb      	ldr	r3, [r7, #24]
 800dd2a:	6a1a      	ldr	r2, [r3, #32]
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	605a      	str	r2, [r3, #4]
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	2200      	movs	r2, #0
 800dd34:	629a      	str	r2, [r3, #40]	@ 0x28
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	1e5a      	subs	r2, r3, #1
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800dd40:	4b49      	ldr	r3, [pc, #292]	@ (800de68 <xTaskRemoveFromEventList+0x184>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d15f      	bne.n	800de08 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800dd48:	69bb      	ldr	r3, [r7, #24]
 800dd4a:	695b      	ldr	r3, [r3, #20]
 800dd4c:	60fb      	str	r3, [r7, #12]
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	69ba      	ldr	r2, [r7, #24]
 800dd54:	68d2      	ldr	r2, [r2, #12]
 800dd56:	609a      	str	r2, [r3, #8]
 800dd58:	69bb      	ldr	r3, [r7, #24]
 800dd5a:	68db      	ldr	r3, [r3, #12]
 800dd5c:	69ba      	ldr	r2, [r7, #24]
 800dd5e:	6892      	ldr	r2, [r2, #8]
 800dd60:	605a      	str	r2, [r3, #4]
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	685a      	ldr	r2, [r3, #4]
 800dd66:	69bb      	ldr	r3, [r7, #24]
 800dd68:	3304      	adds	r3, #4
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d103      	bne.n	800dd76 <xTaskRemoveFromEventList+0x92>
 800dd6e:	69bb      	ldr	r3, [r7, #24]
 800dd70:	68da      	ldr	r2, [r3, #12]
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	605a      	str	r2, [r3, #4]
 800dd76:	69bb      	ldr	r3, [r7, #24]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	615a      	str	r2, [r3, #20]
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	1e5a      	subs	r2, r3, #1
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800dd86:	69bb      	ldr	r3, [r7, #24]
 800dd88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd8a:	4b38      	ldr	r3, [pc, #224]	@ (800de6c <xTaskRemoveFromEventList+0x188>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d903      	bls.n	800dd9a <xTaskRemoveFromEventList+0xb6>
 800dd92:	69bb      	ldr	r3, [r7, #24]
 800dd94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd96:	4a35      	ldr	r2, [pc, #212]	@ (800de6c <xTaskRemoveFromEventList+0x188>)
 800dd98:	6013      	str	r3, [r2, #0]
 800dd9a:	69bb      	ldr	r3, [r7, #24]
 800dd9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd9e:	4934      	ldr	r1, [pc, #208]	@ (800de70 <xTaskRemoveFromEventList+0x18c>)
 800dda0:	4613      	mov	r3, r2
 800dda2:	009b      	lsls	r3, r3, #2
 800dda4:	4413      	add	r3, r2
 800dda6:	009b      	lsls	r3, r3, #2
 800dda8:	440b      	add	r3, r1
 800ddaa:	3304      	adds	r3, #4
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	60bb      	str	r3, [r7, #8]
 800ddb0:	69bb      	ldr	r3, [r7, #24]
 800ddb2:	68ba      	ldr	r2, [r7, #8]
 800ddb4:	609a      	str	r2, [r3, #8]
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	689a      	ldr	r2, [r3, #8]
 800ddba:	69bb      	ldr	r3, [r7, #24]
 800ddbc:	60da      	str	r2, [r3, #12]
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	689b      	ldr	r3, [r3, #8]
 800ddc2:	69ba      	ldr	r2, [r7, #24]
 800ddc4:	3204      	adds	r2, #4
 800ddc6:	605a      	str	r2, [r3, #4]
 800ddc8:	69bb      	ldr	r3, [r7, #24]
 800ddca:	1d1a      	adds	r2, r3, #4
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	609a      	str	r2, [r3, #8]
 800ddd0:	69bb      	ldr	r3, [r7, #24]
 800ddd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddd4:	4613      	mov	r3, r2
 800ddd6:	009b      	lsls	r3, r3, #2
 800ddd8:	4413      	add	r3, r2
 800ddda:	009b      	lsls	r3, r3, #2
 800dddc:	4a24      	ldr	r2, [pc, #144]	@ (800de70 <xTaskRemoveFromEventList+0x18c>)
 800ddde:	441a      	add	r2, r3
 800dde0:	69bb      	ldr	r3, [r7, #24]
 800dde2:	615a      	str	r2, [r3, #20]
 800dde4:	69bb      	ldr	r3, [r7, #24]
 800dde6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dde8:	4921      	ldr	r1, [pc, #132]	@ (800de70 <xTaskRemoveFromEventList+0x18c>)
 800ddea:	4613      	mov	r3, r2
 800ddec:	009b      	lsls	r3, r3, #2
 800ddee:	4413      	add	r3, r2
 800ddf0:	009b      	lsls	r3, r3, #2
 800ddf2:	440b      	add	r3, r1
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	1c59      	adds	r1, r3, #1
 800ddf8:	481d      	ldr	r0, [pc, #116]	@ (800de70 <xTaskRemoveFromEventList+0x18c>)
 800ddfa:	4613      	mov	r3, r2
 800ddfc:	009b      	lsls	r3, r3, #2
 800ddfe:	4413      	add	r3, r2
 800de00:	009b      	lsls	r3, r3, #2
 800de02:	4403      	add	r3, r0
 800de04:	6019      	str	r1, [r3, #0]
 800de06:	e01b      	b.n	800de40 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800de08:	4b1a      	ldr	r3, [pc, #104]	@ (800de74 <xTaskRemoveFromEventList+0x190>)
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	613b      	str	r3, [r7, #16]
 800de0e:	69bb      	ldr	r3, [r7, #24]
 800de10:	693a      	ldr	r2, [r7, #16]
 800de12:	61da      	str	r2, [r3, #28]
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	689a      	ldr	r2, [r3, #8]
 800de18:	69bb      	ldr	r3, [r7, #24]
 800de1a:	621a      	str	r2, [r3, #32]
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	69ba      	ldr	r2, [r7, #24]
 800de22:	3218      	adds	r2, #24
 800de24:	605a      	str	r2, [r3, #4]
 800de26:	69bb      	ldr	r3, [r7, #24]
 800de28:	f103 0218 	add.w	r2, r3, #24
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	609a      	str	r2, [r3, #8]
 800de30:	69bb      	ldr	r3, [r7, #24]
 800de32:	4a10      	ldr	r2, [pc, #64]	@ (800de74 <xTaskRemoveFromEventList+0x190>)
 800de34:	629a      	str	r2, [r3, #40]	@ 0x28
 800de36:	4b0f      	ldr	r3, [pc, #60]	@ (800de74 <xTaskRemoveFromEventList+0x190>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	3301      	adds	r3, #1
 800de3c:	4a0d      	ldr	r2, [pc, #52]	@ (800de74 <xTaskRemoveFromEventList+0x190>)
 800de3e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800de40:	69bb      	ldr	r3, [r7, #24]
 800de42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de44:	4b0c      	ldr	r3, [pc, #48]	@ (800de78 <xTaskRemoveFromEventList+0x194>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d905      	bls.n	800de5a <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800de4e:	2301      	movs	r3, #1
 800de50:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800de52:	4b0a      	ldr	r3, [pc, #40]	@ (800de7c <xTaskRemoveFromEventList+0x198>)
 800de54:	2201      	movs	r2, #1
 800de56:	601a      	str	r2, [r3, #0]
 800de58:	e001      	b.n	800de5e <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800de5a:	2300      	movs	r3, #0
 800de5c:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800de5e:	69fb      	ldr	r3, [r7, #28]
}
 800de60:	4618      	mov	r0, r3
 800de62:	3720      	adds	r7, #32
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}
 800de68:	20046c84 	.word	0x20046c84
 800de6c:	20046c64 	.word	0x20046c64
 800de70:	2004678c 	.word	0x2004678c
 800de74:	20046c1c 	.word	0x20046c1c
 800de78:	20046788 	.word	0x20046788
 800de7c:	20046c70 	.word	0x20046c70

0800de80 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800de80:	b480      	push	{r7}
 800de82:	b083      	sub	sp, #12
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800de88:	4b06      	ldr	r3, [pc, #24]	@ (800dea4 <vTaskInternalSetTimeOutState+0x24>)
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800de90:	4b05      	ldr	r3, [pc, #20]	@ (800dea8 <vTaskInternalSetTimeOutState+0x28>)
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	605a      	str	r2, [r3, #4]
}
 800de98:	bf00      	nop
 800de9a:	370c      	adds	r7, #12
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr
 800dea4:	20046c74 	.word	0x20046c74
 800dea8:	20046c60 	.word	0x20046c60

0800deac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b086      	sub	sp, #24
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d103      	bne.n	800dec4 <xTaskCheckForTimeOut+0x18>
 800debc:	f001 f84c 	bl	800ef58 <ulSetInterruptMask>
 800dec0:	bf00      	nop
 800dec2:	e7fd      	b.n	800dec0 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d103      	bne.n	800ded2 <xTaskCheckForTimeOut+0x26>
 800deca:	f001 f845 	bl	800ef58 <ulSetInterruptMask>
 800dece:	bf00      	nop
 800ded0:	e7fd      	b.n	800dece <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 800ded2:	f000 fe75 	bl	800ebc0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800ded6:	4b1f      	ldr	r3, [pc, #124]	@ (800df54 <xTaskCheckForTimeOut+0xa8>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	693a      	ldr	r2, [r7, #16]
 800dee2:	1ad3      	subs	r3, r2, r3
 800dee4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deee:	d102      	bne.n	800def6 <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800def0:	2300      	movs	r3, #0
 800def2:	617b      	str	r3, [r7, #20]
 800def4:	e026      	b.n	800df44 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681a      	ldr	r2, [r3, #0]
 800defa:	4b17      	ldr	r3, [pc, #92]	@ (800df58 <xTaskCheckForTimeOut+0xac>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	429a      	cmp	r2, r3
 800df00:	d00a      	beq.n	800df18 <xTaskCheckForTimeOut+0x6c>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	693a      	ldr	r2, [r7, #16]
 800df08:	429a      	cmp	r2, r3
 800df0a:	d305      	bcc.n	800df18 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800df0c:	2301      	movs	r3, #1
 800df0e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	2200      	movs	r2, #0
 800df14:	601a      	str	r2, [r3, #0]
 800df16:	e015      	b.n	800df44 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	429a      	cmp	r2, r3
 800df20:	d20b      	bcs.n	800df3a <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	681a      	ldr	r2, [r3, #0]
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	1ad2      	subs	r2, r2, r3
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f7ff ffa6 	bl	800de80 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800df34:	2300      	movs	r3, #0
 800df36:	617b      	str	r3, [r7, #20]
 800df38:	e004      	b.n	800df44 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	2200      	movs	r2, #0
 800df3e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800df40:	2301      	movs	r3, #1
 800df42:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800df44:	f000 fe4e 	bl	800ebe4 <vPortExitCritical>

    return xReturn;
 800df48:	697b      	ldr	r3, [r7, #20]
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3718      	adds	r7, #24
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}
 800df52:	bf00      	nop
 800df54:	20046c60 	.word	0x20046c60
 800df58:	20046c74 	.word	0x20046c74

0800df5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800df5c:	b480      	push	{r7}
 800df5e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800df60:	4b03      	ldr	r3, [pc, #12]	@ (800df70 <vTaskMissedYield+0x14>)
 800df62:	2201      	movs	r2, #1
 800df64:	601a      	str	r2, [r3, #0]
}
 800df66:	bf00      	nop
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr
 800df70:	20046c70 	.word	0x20046c70

0800df74 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800df7c:	f000 f84a 	bl	800e014 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800df80:	4b03      	ldr	r3, [pc, #12]	@ (800df90 <prvIdleTask+0x1c>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	2b01      	cmp	r3, #1
 800df86:	d9f9      	bls.n	800df7c <prvIdleTask+0x8>
            {
                taskYIELD();
 800df88:	f000 fe08 	bl	800eb9c <vPortYield>
        prvCheckTasksWaitingTermination();
 800df8c:	e7f6      	b.n	800df7c <prvIdleTask+0x8>
 800df8e:	bf00      	nop
 800df90:	2004678c 	.word	0x2004678c

0800df94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800df9a:	2300      	movs	r3, #0
 800df9c:	607b      	str	r3, [r7, #4]
 800df9e:	e00c      	b.n	800dfba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dfa0:	687a      	ldr	r2, [r7, #4]
 800dfa2:	4613      	mov	r3, r2
 800dfa4:	009b      	lsls	r3, r3, #2
 800dfa6:	4413      	add	r3, r2
 800dfa8:	009b      	lsls	r3, r3, #2
 800dfaa:	4a12      	ldr	r2, [pc, #72]	@ (800dff4 <prvInitialiseTaskLists+0x60>)
 800dfac:	4413      	add	r3, r2
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7fe f9c0 	bl	800c334 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	3301      	adds	r3, #1
 800dfb8:	607b      	str	r3, [r7, #4]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2b37      	cmp	r3, #55	@ 0x37
 800dfbe:	d9ef      	bls.n	800dfa0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800dfc0:	480d      	ldr	r0, [pc, #52]	@ (800dff8 <prvInitialiseTaskLists+0x64>)
 800dfc2:	f7fe f9b7 	bl	800c334 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800dfc6:	480d      	ldr	r0, [pc, #52]	@ (800dffc <prvInitialiseTaskLists+0x68>)
 800dfc8:	f7fe f9b4 	bl	800c334 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800dfcc:	480c      	ldr	r0, [pc, #48]	@ (800e000 <prvInitialiseTaskLists+0x6c>)
 800dfce:	f7fe f9b1 	bl	800c334 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800dfd2:	480c      	ldr	r0, [pc, #48]	@ (800e004 <prvInitialiseTaskLists+0x70>)
 800dfd4:	f7fe f9ae 	bl	800c334 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800dfd8:	480b      	ldr	r0, [pc, #44]	@ (800e008 <prvInitialiseTaskLists+0x74>)
 800dfda:	f7fe f9ab 	bl	800c334 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800dfde:	4b0b      	ldr	r3, [pc, #44]	@ (800e00c <prvInitialiseTaskLists+0x78>)
 800dfe0:	4a05      	ldr	r2, [pc, #20]	@ (800dff8 <prvInitialiseTaskLists+0x64>)
 800dfe2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dfe4:	4b0a      	ldr	r3, [pc, #40]	@ (800e010 <prvInitialiseTaskLists+0x7c>)
 800dfe6:	4a05      	ldr	r2, [pc, #20]	@ (800dffc <prvInitialiseTaskLists+0x68>)
 800dfe8:	601a      	str	r2, [r3, #0]
}
 800dfea:	bf00      	nop
 800dfec:	3708      	adds	r7, #8
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	2004678c 	.word	0x2004678c
 800dff8:	20046bec 	.word	0x20046bec
 800dffc:	20046c00 	.word	0x20046c00
 800e000:	20046c1c 	.word	0x20046c1c
 800e004:	20046c30 	.word	0x20046c30
 800e008:	20046c48 	.word	0x20046c48
 800e00c:	20046c14 	.word	0x20046c14
 800e010:	20046c18 	.word	0x20046c18

0800e014 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e01a:	e019      	b.n	800e050 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800e01c:	f000 fdd0 	bl	800ebc0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e020:	4b10      	ldr	r3, [pc, #64]	@ (800e064 <prvCheckTasksWaitingTermination+0x50>)
 800e022:	68db      	ldr	r3, [r3, #12]
 800e024:	68db      	ldr	r3, [r3, #12]
 800e026:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	3304      	adds	r3, #4
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7fe f9e7 	bl	800c400 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800e032:	4b0d      	ldr	r3, [pc, #52]	@ (800e068 <prvCheckTasksWaitingTermination+0x54>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	3b01      	subs	r3, #1
 800e038:	4a0b      	ldr	r2, [pc, #44]	@ (800e068 <prvCheckTasksWaitingTermination+0x54>)
 800e03a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800e03c:	4b0b      	ldr	r3, [pc, #44]	@ (800e06c <prvCheckTasksWaitingTermination+0x58>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	3b01      	subs	r3, #1
 800e042:	4a0a      	ldr	r2, [pc, #40]	@ (800e06c <prvCheckTasksWaitingTermination+0x58>)
 800e044:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800e046:	f000 fdcd 	bl	800ebe4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f000 f810 	bl	800e070 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e050:	4b06      	ldr	r3, [pc, #24]	@ (800e06c <prvCheckTasksWaitingTermination+0x58>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d1e1      	bne.n	800e01c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800e058:	bf00      	nop
 800e05a:	bf00      	nop
 800e05c:	3708      	adds	r7, #8
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	20046c30 	.word	0x20046c30
 800e068:	20046c5c 	.word	0x20046c5c
 800e06c:	20046c44 	.word	0x20046c44

0800e070 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800e070:	b580      	push	{r7, lr}
 800e072:	b082      	sub	sp, #8
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d108      	bne.n	800e094 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e086:	4618      	mov	r0, r3
 800e088:	f001 f88a 	bl	800f1a0 <vPortFree>
                vPortFree( pxTCB );
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f001 f887 	bl	800f1a0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800e092:	e011      	b.n	800e0b8 <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	d103      	bne.n	800e0a6 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f001 f87e 	bl	800f1a0 <vPortFree>
    }
 800e0a4:	e008      	b.n	800e0b8 <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e0ac:	2b02      	cmp	r3, #2
 800e0ae:	d003      	beq.n	800e0b8 <prvDeleteTCB+0x48>
 800e0b0:	f000 ff52 	bl	800ef58 <ulSetInterruptMask>
 800e0b4:	bf00      	nop
 800e0b6:	e7fd      	b.n	800e0b4 <prvDeleteTCB+0x44>
    }
 800e0b8:	bf00      	nop
 800e0ba:	3708      	adds	r7, #8
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0c4:	4b0a      	ldr	r3, [pc, #40]	@ (800e0f0 <prvResetNextTaskUnblockTime+0x30>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d104      	bne.n	800e0d8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800e0ce:	4b09      	ldr	r3, [pc, #36]	@ (800e0f4 <prvResetNextTaskUnblockTime+0x34>)
 800e0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800e0d4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800e0d6:	e005      	b.n	800e0e4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e0d8:	4b05      	ldr	r3, [pc, #20]	@ (800e0f0 <prvResetNextTaskUnblockTime+0x30>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	68db      	ldr	r3, [r3, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4a04      	ldr	r2, [pc, #16]	@ (800e0f4 <prvResetNextTaskUnblockTime+0x34>)
 800e0e2:	6013      	str	r3, [r2, #0]
}
 800e0e4:	bf00      	nop
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr
 800e0ee:	bf00      	nop
 800e0f0:	20046c14 	.word	0x20046c14
 800e0f4:	20046c7c 	.word	0x20046c7c

0800e0f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800e0f8:	b480      	push	{r7}
 800e0fa:	b083      	sub	sp, #12
 800e0fc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800e0fe:	4b0b      	ldr	r3, [pc, #44]	@ (800e12c <xTaskGetSchedulerState+0x34>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d102      	bne.n	800e10c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800e106:	2301      	movs	r3, #1
 800e108:	607b      	str	r3, [r7, #4]
 800e10a:	e008      	b.n	800e11e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800e10c:	4b08      	ldr	r3, [pc, #32]	@ (800e130 <xTaskGetSchedulerState+0x38>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d102      	bne.n	800e11a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800e114:	2302      	movs	r3, #2
 800e116:	607b      	str	r3, [r7, #4]
 800e118:	e001      	b.n	800e11e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800e11a:	2300      	movs	r3, #0
 800e11c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800e11e:	687b      	ldr	r3, [r7, #4]
    }
 800e120:	4618      	mov	r0, r3
 800e122:	370c      	adds	r7, #12
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr
 800e12c:	20046c68 	.word	0x20046c68
 800e130:	20046c84 	.word	0x20046c84

0800e134 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800e134:	b580      	push	{r7, lr}
 800e136:	b086      	sub	sp, #24
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800e140:	2300      	movs	r3, #0
 800e142:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d079      	beq.n	800e23e <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e14e:	4b3e      	ldr	r3, [pc, #248]	@ (800e248 <xTaskPriorityInherit+0x114>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e154:	429a      	cmp	r2, r3
 800e156:	d269      	bcs.n	800e22c <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	699b      	ldr	r3, [r3, #24]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	db06      	blt.n	800e16e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e160:	4b39      	ldr	r3, [pc, #228]	@ (800e248 <xTaskPriorityInherit+0x114>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e166:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	6959      	ldr	r1, [r3, #20]
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e176:	4613      	mov	r3, r2
 800e178:	009b      	lsls	r3, r3, #2
 800e17a:	4413      	add	r3, r2
 800e17c:	009b      	lsls	r3, r3, #2
 800e17e:	4a33      	ldr	r2, [pc, #204]	@ (800e24c <xTaskPriorityInherit+0x118>)
 800e180:	4413      	add	r3, r2
 800e182:	4299      	cmp	r1, r3
 800e184:	d14a      	bne.n	800e21c <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	3304      	adds	r3, #4
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7fe f938 	bl	800c400 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e190:	4b2d      	ldr	r3, [pc, #180]	@ (800e248 <xTaskPriorityInherit+0x114>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e19e:	4b2c      	ldr	r3, [pc, #176]	@ (800e250 <xTaskPriorityInherit+0x11c>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d903      	bls.n	800e1ae <xTaskPriorityInherit+0x7a>
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1aa:	4a29      	ldr	r2, [pc, #164]	@ (800e250 <xTaskPriorityInherit+0x11c>)
 800e1ac:	6013      	str	r3, [r2, #0]
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1b2:	4926      	ldr	r1, [pc, #152]	@ (800e24c <xTaskPriorityInherit+0x118>)
 800e1b4:	4613      	mov	r3, r2
 800e1b6:	009b      	lsls	r3, r3, #2
 800e1b8:	4413      	add	r3, r2
 800e1ba:	009b      	lsls	r3, r3, #2
 800e1bc:	440b      	add	r3, r1
 800e1be:	3304      	adds	r3, #4
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	60fb      	str	r3, [r7, #12]
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	68fa      	ldr	r2, [r7, #12]
 800e1c8:	609a      	str	r2, [r3, #8]
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	689a      	ldr	r2, [r3, #8]
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	60da      	str	r2, [r3, #12]
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	689b      	ldr	r3, [r3, #8]
 800e1d6:	693a      	ldr	r2, [r7, #16]
 800e1d8:	3204      	adds	r2, #4
 800e1da:	605a      	str	r2, [r3, #4]
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	1d1a      	adds	r2, r3, #4
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	609a      	str	r2, [r3, #8]
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1e8:	4613      	mov	r3, r2
 800e1ea:	009b      	lsls	r3, r3, #2
 800e1ec:	4413      	add	r3, r2
 800e1ee:	009b      	lsls	r3, r3, #2
 800e1f0:	4a16      	ldr	r2, [pc, #88]	@ (800e24c <xTaskPriorityInherit+0x118>)
 800e1f2:	441a      	add	r2, r3
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	615a      	str	r2, [r3, #20]
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1fc:	4913      	ldr	r1, [pc, #76]	@ (800e24c <xTaskPriorityInherit+0x118>)
 800e1fe:	4613      	mov	r3, r2
 800e200:	009b      	lsls	r3, r3, #2
 800e202:	4413      	add	r3, r2
 800e204:	009b      	lsls	r3, r3, #2
 800e206:	440b      	add	r3, r1
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	1c59      	adds	r1, r3, #1
 800e20c:	480f      	ldr	r0, [pc, #60]	@ (800e24c <xTaskPriorityInherit+0x118>)
 800e20e:	4613      	mov	r3, r2
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	4413      	add	r3, r2
 800e214:	009b      	lsls	r3, r3, #2
 800e216:	4403      	add	r3, r0
 800e218:	6019      	str	r1, [r3, #0]
 800e21a:	e004      	b.n	800e226 <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e21c:	4b0a      	ldr	r3, [pc, #40]	@ (800e248 <xTaskPriorityInherit+0x114>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800e226:	2301      	movs	r3, #1
 800e228:	617b      	str	r3, [r7, #20]
 800e22a:	e008      	b.n	800e23e <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e230:	4b05      	ldr	r3, [pc, #20]	@ (800e248 <xTaskPriorityInherit+0x114>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e236:	429a      	cmp	r2, r3
 800e238:	d201      	bcs.n	800e23e <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800e23a:	2301      	movs	r3, #1
 800e23c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800e23e:	697b      	ldr	r3, [r7, #20]
    }
 800e240:	4618      	mov	r0, r3
 800e242:	3718      	adds	r7, #24
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	20046788 	.word	0x20046788
 800e24c:	2004678c 	.word	0x2004678c
 800e250:	20046c64 	.word	0x20046c64

0800e254 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800e254:	b580      	push	{r7, lr}
 800e256:	b086      	sub	sp, #24
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800e260:	2300      	movs	r3, #0
 800e262:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d070      	beq.n	800e34c <xTaskPriorityDisinherit+0xf8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800e26a:	4b3b      	ldr	r3, [pc, #236]	@ (800e358 <xTaskPriorityDisinherit+0x104>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	693a      	ldr	r2, [r7, #16]
 800e270:	429a      	cmp	r2, r3
 800e272:	d003      	beq.n	800e27c <xTaskPriorityDisinherit+0x28>
 800e274:	f000 fe70 	bl	800ef58 <ulSetInterruptMask>
 800e278:	bf00      	nop
 800e27a:	e7fd      	b.n	800e278 <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e280:	2b00      	cmp	r3, #0
 800e282:	d103      	bne.n	800e28c <xTaskPriorityDisinherit+0x38>
 800e284:	f000 fe68 	bl	800ef58 <ulSetInterruptMask>
 800e288:	bf00      	nop
 800e28a:	e7fd      	b.n	800e288 <xTaskPriorityDisinherit+0x34>
            ( pxTCB->uxMutexesHeld )--;
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e290:	1e5a      	subs	r2, r3, #1
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d054      	beq.n	800e34c <xTaskPriorityDisinherit+0xf8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d150      	bne.n	800e34c <xTaskPriorityDisinherit+0xf8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	3304      	adds	r3, #4
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7fe f8a6 	bl	800c400 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2cc:	4b23      	ldr	r3, [pc, #140]	@ (800e35c <xTaskPriorityDisinherit+0x108>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d903      	bls.n	800e2dc <xTaskPriorityDisinherit+0x88>
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2d8:	4a20      	ldr	r2, [pc, #128]	@ (800e35c <xTaskPriorityDisinherit+0x108>)
 800e2da:	6013      	str	r3, [r2, #0]
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2e0:	491f      	ldr	r1, [pc, #124]	@ (800e360 <xTaskPriorityDisinherit+0x10c>)
 800e2e2:	4613      	mov	r3, r2
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	4413      	add	r3, r2
 800e2e8:	009b      	lsls	r3, r3, #2
 800e2ea:	440b      	add	r3, r1
 800e2ec:	3304      	adds	r3, #4
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	60fb      	str	r3, [r7, #12]
 800e2f2:	693b      	ldr	r3, [r7, #16]
 800e2f4:	68fa      	ldr	r2, [r7, #12]
 800e2f6:	609a      	str	r2, [r3, #8]
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	689a      	ldr	r2, [r3, #8]
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	60da      	str	r2, [r3, #12]
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	693a      	ldr	r2, [r7, #16]
 800e306:	3204      	adds	r2, #4
 800e308:	605a      	str	r2, [r3, #4]
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	1d1a      	adds	r2, r3, #4
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	609a      	str	r2, [r3, #8]
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e316:	4613      	mov	r3, r2
 800e318:	009b      	lsls	r3, r3, #2
 800e31a:	4413      	add	r3, r2
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	4a10      	ldr	r2, [pc, #64]	@ (800e360 <xTaskPriorityDisinherit+0x10c>)
 800e320:	441a      	add	r2, r3
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	615a      	str	r2, [r3, #20]
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e32a:	490d      	ldr	r1, [pc, #52]	@ (800e360 <xTaskPriorityDisinherit+0x10c>)
 800e32c:	4613      	mov	r3, r2
 800e32e:	009b      	lsls	r3, r3, #2
 800e330:	4413      	add	r3, r2
 800e332:	009b      	lsls	r3, r3, #2
 800e334:	440b      	add	r3, r1
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	1c59      	adds	r1, r3, #1
 800e33a:	4809      	ldr	r0, [pc, #36]	@ (800e360 <xTaskPriorityDisinherit+0x10c>)
 800e33c:	4613      	mov	r3, r2
 800e33e:	009b      	lsls	r3, r3, #2
 800e340:	4413      	add	r3, r2
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	4403      	add	r3, r0
 800e346:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800e348:	2301      	movs	r3, #1
 800e34a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800e34c:	697b      	ldr	r3, [r7, #20]
    }
 800e34e:	4618      	mov	r0, r3
 800e350:	3718      	adds	r7, #24
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	20046788 	.word	0x20046788
 800e35c:	20046c64 	.word	0x20046c64
 800e360:	2004678c 	.word	0x2004678c

0800e364 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800e364:	b580      	push	{r7, lr}
 800e366:	b088      	sub	sp, #32
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e372:	2301      	movs	r3, #1
 800e374:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	f000 8085 	beq.w	800e488 <vTaskPriorityDisinheritAfterTimeout+0x124>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800e37e:	69bb      	ldr	r3, [r7, #24]
 800e380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e382:	2b00      	cmp	r3, #0
 800e384:	d103      	bne.n	800e38e <vTaskPriorityDisinheritAfterTimeout+0x2a>
 800e386:	f000 fde7 	bl	800ef58 <ulSetInterruptMask>
 800e38a:	bf00      	nop
 800e38c:	e7fd      	b.n	800e38a <vTaskPriorityDisinheritAfterTimeout+0x26>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e38e:	69bb      	ldr	r3, [r7, #24]
 800e390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e392:	683a      	ldr	r2, [r7, #0]
 800e394:	429a      	cmp	r2, r3
 800e396:	d902      	bls.n	800e39e <vTaskPriorityDisinheritAfterTimeout+0x3a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	61fb      	str	r3, [r7, #28]
 800e39c:	e002      	b.n	800e3a4 <vTaskPriorityDisinheritAfterTimeout+0x40>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800e39e:	69bb      	ldr	r3, [r7, #24]
 800e3a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3a2:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800e3a4:	69bb      	ldr	r3, [r7, #24]
 800e3a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3a8:	69fa      	ldr	r2, [r7, #28]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d06c      	beq.n	800e488 <vTaskPriorityDisinheritAfterTimeout+0x124>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e3ae:	69bb      	ldr	r3, [r7, #24]
 800e3b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3b2:	697a      	ldr	r2, [r7, #20]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d167      	bne.n	800e488 <vTaskPriorityDisinheritAfterTimeout+0x124>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800e3b8:	4b35      	ldr	r3, [pc, #212]	@ (800e490 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	69ba      	ldr	r2, [r7, #24]
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d103      	bne.n	800e3ca <vTaskPriorityDisinheritAfterTimeout+0x66>
 800e3c2:	f000 fdc9 	bl	800ef58 <ulSetInterruptMask>
 800e3c6:	bf00      	nop
 800e3c8:	e7fd      	b.n	800e3c6 <vTaskPriorityDisinheritAfterTimeout+0x62>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e3ca:	69bb      	ldr	r3, [r7, #24]
 800e3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3ce:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800e3d0:	69bb      	ldr	r3, [r7, #24]
 800e3d2:	69fa      	ldr	r2, [r7, #28]
 800e3d4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e3d6:	69bb      	ldr	r3, [r7, #24]
 800e3d8:	699b      	ldr	r3, [r3, #24]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	db04      	blt.n	800e3e8 <vTaskPriorityDisinheritAfterTimeout+0x84>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3de:	69fb      	ldr	r3, [r7, #28]
 800e3e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e3e4:	69bb      	ldr	r3, [r7, #24]
 800e3e6:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e3e8:	69bb      	ldr	r3, [r7, #24]
 800e3ea:	6959      	ldr	r1, [r3, #20]
 800e3ec:	693a      	ldr	r2, [r7, #16]
 800e3ee:	4613      	mov	r3, r2
 800e3f0:	009b      	lsls	r3, r3, #2
 800e3f2:	4413      	add	r3, r2
 800e3f4:	009b      	lsls	r3, r3, #2
 800e3f6:	4a27      	ldr	r2, [pc, #156]	@ (800e494 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e3f8:	4413      	add	r3, r2
 800e3fa:	4299      	cmp	r1, r3
 800e3fc:	d144      	bne.n	800e488 <vTaskPriorityDisinheritAfterTimeout+0x124>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3fe:	69bb      	ldr	r3, [r7, #24]
 800e400:	3304      	adds	r3, #4
 800e402:	4618      	mov	r0, r3
 800e404:	f7fd fffc 	bl	800c400 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800e408:	69bb      	ldr	r3, [r7, #24]
 800e40a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e40c:	4b22      	ldr	r3, [pc, #136]	@ (800e498 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	429a      	cmp	r2, r3
 800e412:	d903      	bls.n	800e41c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800e414:	69bb      	ldr	r3, [r7, #24]
 800e416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e418:	4a1f      	ldr	r2, [pc, #124]	@ (800e498 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e41a:	6013      	str	r3, [r2, #0]
 800e41c:	69bb      	ldr	r3, [r7, #24]
 800e41e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e420:	491c      	ldr	r1, [pc, #112]	@ (800e494 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e422:	4613      	mov	r3, r2
 800e424:	009b      	lsls	r3, r3, #2
 800e426:	4413      	add	r3, r2
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	440b      	add	r3, r1
 800e42c:	3304      	adds	r3, #4
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	60fb      	str	r3, [r7, #12]
 800e432:	69bb      	ldr	r3, [r7, #24]
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	609a      	str	r2, [r3, #8]
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	689a      	ldr	r2, [r3, #8]
 800e43c:	69bb      	ldr	r3, [r7, #24]
 800e43e:	60da      	str	r2, [r3, #12]
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	689b      	ldr	r3, [r3, #8]
 800e444:	69ba      	ldr	r2, [r7, #24]
 800e446:	3204      	adds	r2, #4
 800e448:	605a      	str	r2, [r3, #4]
 800e44a:	69bb      	ldr	r3, [r7, #24]
 800e44c:	1d1a      	adds	r2, r3, #4
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	609a      	str	r2, [r3, #8]
 800e452:	69bb      	ldr	r3, [r7, #24]
 800e454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e456:	4613      	mov	r3, r2
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	4413      	add	r3, r2
 800e45c:	009b      	lsls	r3, r3, #2
 800e45e:	4a0d      	ldr	r2, [pc, #52]	@ (800e494 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e460:	441a      	add	r2, r3
 800e462:	69bb      	ldr	r3, [r7, #24]
 800e464:	615a      	str	r2, [r3, #20]
 800e466:	69bb      	ldr	r3, [r7, #24]
 800e468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e46a:	490a      	ldr	r1, [pc, #40]	@ (800e494 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e46c:	4613      	mov	r3, r2
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	4413      	add	r3, r2
 800e472:	009b      	lsls	r3, r3, #2
 800e474:	440b      	add	r3, r1
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	1c59      	adds	r1, r3, #1
 800e47a:	4806      	ldr	r0, [pc, #24]	@ (800e494 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e47c:	4613      	mov	r3, r2
 800e47e:	009b      	lsls	r3, r3, #2
 800e480:	4413      	add	r3, r2
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	4403      	add	r3, r0
 800e486:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800e488:	bf00      	nop
 800e48a:	3720      	adds	r7, #32
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}
 800e490:	20046788 	.word	0x20046788
 800e494:	2004678c 	.word	0x2004678c
 800e498:	20046c64 	.word	0x20046c64

0800e49c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800e49c:	b480      	push	{r7}
 800e49e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800e4a0:	4b07      	ldr	r3, [pc, #28]	@ (800e4c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d004      	beq.n	800e4b2 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800e4a8:	4b05      	ldr	r3, [pc, #20]	@ (800e4c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e4ae:	3201      	adds	r2, #1
 800e4b0:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
 800e4b2:	4b03      	ldr	r3, [pc, #12]	@ (800e4c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
    }
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr
 800e4c0:	20046788 	.word	0x20046788

0800e4c4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b086      	sub	sp, #24
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800e4ce:	4b2e      	ldr	r3, [pc, #184]	@ (800e588 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4d4:	4b2d      	ldr	r3, [pc, #180]	@ (800e58c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	3304      	adds	r3, #4
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7fd ff90 	bl	800c400 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4e6:	d124      	bne.n	800e532 <prvAddCurrentTaskToDelayedList+0x6e>
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d021      	beq.n	800e532 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4ee:	4b28      	ldr	r3, [pc, #160]	@ (800e590 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	613b      	str	r3, [r7, #16]
 800e4f4:	4b25      	ldr	r3, [pc, #148]	@ (800e58c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	693a      	ldr	r2, [r7, #16]
 800e4fa:	609a      	str	r2, [r3, #8]
 800e4fc:	4b23      	ldr	r3, [pc, #140]	@ (800e58c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	693a      	ldr	r2, [r7, #16]
 800e502:	6892      	ldr	r2, [r2, #8]
 800e504:	60da      	str	r2, [r3, #12]
 800e506:	4b21      	ldr	r3, [pc, #132]	@ (800e58c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	693b      	ldr	r3, [r7, #16]
 800e50c:	689b      	ldr	r3, [r3, #8]
 800e50e:	3204      	adds	r2, #4
 800e510:	605a      	str	r2, [r3, #4]
 800e512:	4b1e      	ldr	r3, [pc, #120]	@ (800e58c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	1d1a      	adds	r2, r3, #4
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	609a      	str	r2, [r3, #8]
 800e51c:	4b1b      	ldr	r3, [pc, #108]	@ (800e58c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4a1b      	ldr	r2, [pc, #108]	@ (800e590 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e522:	615a      	str	r2, [r3, #20]
 800e524:	4b1a      	ldr	r3, [pc, #104]	@ (800e590 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	3301      	adds	r3, #1
 800e52a:	4a19      	ldr	r2, [pc, #100]	@ (800e590 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e52c:	6013      	str	r3, [r2, #0]
 800e52e:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800e530:	e026      	b.n	800e580 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800e532:	697a      	ldr	r2, [r7, #20]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	4413      	add	r3, r2
 800e538:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e53a:	4b14      	ldr	r3, [pc, #80]	@ (800e58c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	68fa      	ldr	r2, [r7, #12]
 800e540:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800e542:	68fa      	ldr	r2, [r7, #12]
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	429a      	cmp	r2, r3
 800e548:	d209      	bcs.n	800e55e <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e54a:	4b12      	ldr	r3, [pc, #72]	@ (800e594 <prvAddCurrentTaskToDelayedList+0xd0>)
 800e54c:	681a      	ldr	r2, [r3, #0]
 800e54e:	4b0f      	ldr	r3, [pc, #60]	@ (800e58c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	3304      	adds	r3, #4
 800e554:	4619      	mov	r1, r3
 800e556:	4610      	mov	r0, r2
 800e558:	f7fd ff19 	bl	800c38e <vListInsert>
}
 800e55c:	e010      	b.n	800e580 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e55e:	4b0e      	ldr	r3, [pc, #56]	@ (800e598 <prvAddCurrentTaskToDelayedList+0xd4>)
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	4b0a      	ldr	r3, [pc, #40]	@ (800e58c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	3304      	adds	r3, #4
 800e568:	4619      	mov	r1, r3
 800e56a:	4610      	mov	r0, r2
 800e56c:	f7fd ff0f 	bl	800c38e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800e570:	4b0a      	ldr	r3, [pc, #40]	@ (800e59c <prvAddCurrentTaskToDelayedList+0xd8>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	68fa      	ldr	r2, [r7, #12]
 800e576:	429a      	cmp	r2, r3
 800e578:	d202      	bcs.n	800e580 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800e57a:	4a08      	ldr	r2, [pc, #32]	@ (800e59c <prvAddCurrentTaskToDelayedList+0xd8>)
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	6013      	str	r3, [r2, #0]
}
 800e580:	bf00      	nop
 800e582:	3718      	adds	r7, #24
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}
 800e588:	20046c60 	.word	0x20046c60
 800e58c:	20046788 	.word	0x20046788
 800e590:	20046c48 	.word	0x20046c48
 800e594:	20046c18 	.word	0x20046c18
 800e598:	20046c14 	.word	0x20046c14
 800e59c:	20046c7c 	.word	0x20046c7c

0800e5a0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b088      	sub	sp, #32
 800e5a4:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800e5aa:	f000 fa5f 	bl	800ea6c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800e5ae:	4b18      	ldr	r3, [pc, #96]	@ (800e610 <xTimerCreateTimerTask+0x70>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d020      	beq.n	800e5f8 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e5be:	463a      	mov	r2, r7
 800e5c0:	1d39      	adds	r1, r7, #4
 800e5c2:	f107 0308 	add.w	r3, r7, #8
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f7fd fe9a 	bl	800c300 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800e5cc:	6839      	ldr	r1, [r7, #0]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	68ba      	ldr	r2, [r7, #8]
 800e5d2:	9202      	str	r2, [sp, #8]
 800e5d4:	9301      	str	r3, [sp, #4]
 800e5d6:	2302      	movs	r3, #2
 800e5d8:	9300      	str	r3, [sp, #0]
 800e5da:	2300      	movs	r3, #0
 800e5dc:	460a      	mov	r2, r1
 800e5de:	490d      	ldr	r1, [pc, #52]	@ (800e614 <xTimerCreateTimerTask+0x74>)
 800e5e0:	480d      	ldr	r0, [pc, #52]	@ (800e618 <xTimerCreateTimerTask+0x78>)
 800e5e2:	f7fe fe7b 	bl	800d2dc <xTaskCreateStatic>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	4a0c      	ldr	r2, [pc, #48]	@ (800e61c <xTimerCreateTimerTask+0x7c>)
 800e5ea:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800e5ec:	4b0b      	ldr	r3, [pc, #44]	@ (800e61c <xTimerCreateTimerTask+0x7c>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d001      	beq.n	800e5f8 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d103      	bne.n	800e606 <xTimerCreateTimerTask+0x66>
 800e5fe:	f000 fcab 	bl	800ef58 <ulSetInterruptMask>
 800e602:	bf00      	nop
 800e604:	e7fd      	b.n	800e602 <xTimerCreateTimerTask+0x62>
        return xReturn;
 800e606:	68fb      	ldr	r3, [r7, #12]
    }
 800e608:	4618      	mov	r0, r3
 800e60a:	3710      	adds	r7, #16
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}
 800e610:	20046cb8 	.word	0x20046cb8
 800e614:	0802ed7c 	.word	0x0802ed7c
 800e618:	0800e6c5 	.word	0x0800e6c5
 800e61c:	20046cbc 	.word	0x20046cbc

0800e620 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800e620:	b580      	push	{r7, lr}
 800e622:	b084      	sub	sp, #16
 800e624:	af00      	add	r7, sp, #0
 800e626:	60f8      	str	r0, [r7, #12]
 800e628:	60b9      	str	r1, [r7, #8]
 800e62a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800e62c:	e008      	b.n	800e640 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	699b      	ldr	r3, [r3, #24]
 800e632:	68ba      	ldr	r2, [r7, #8]
 800e634:	4413      	add	r3, r2
 800e636:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	6a1b      	ldr	r3, [r3, #32]
 800e63c:	68f8      	ldr	r0, [r7, #12]
 800e63e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	699a      	ldr	r2, [r3, #24]
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	18d1      	adds	r1, r2, r3
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	687a      	ldr	r2, [r7, #4]
 800e64c:	68f8      	ldr	r0, [r7, #12]
 800e64e:	f000 f8d7 	bl	800e800 <prvInsertTimerInActiveList>
 800e652:	4603      	mov	r3, r0
 800e654:	2b00      	cmp	r3, #0
 800e656:	d1ea      	bne.n	800e62e <prvReloadTimer+0xe>
        }
    }
 800e658:	bf00      	nop
 800e65a:	bf00      	nop
 800e65c:	3710      	adds	r7, #16
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}
	...

0800e664 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800e664:	b580      	push	{r7, lr}
 800e666:	b084      	sub	sp, #16
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e66e:	4b14      	ldr	r3, [pc, #80]	@ (800e6c0 <prvProcessExpiredTimer+0x5c>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	68db      	ldr	r3, [r3, #12]
 800e674:	68db      	ldr	r3, [r3, #12]
 800e676:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	3304      	adds	r3, #4
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7fd febf 	bl	800c400 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e688:	f003 0304 	and.w	r3, r3, #4
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d005      	beq.n	800e69c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800e690:	683a      	ldr	r2, [r7, #0]
 800e692:	6879      	ldr	r1, [r7, #4]
 800e694:	68f8      	ldr	r0, [r7, #12]
 800e696:	f7ff ffc3 	bl	800e620 <prvReloadTimer>
 800e69a:	e008      	b.n	800e6ae <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e6a2:	f023 0301 	bic.w	r3, r3, #1
 800e6a6:	b2da      	uxtb	r2, r3
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	6a1b      	ldr	r3, [r3, #32]
 800e6b2:	68f8      	ldr	r0, [r7, #12]
 800e6b4:	4798      	blx	r3
    }
 800e6b6:	bf00      	nop
 800e6b8:	3710      	adds	r7, #16
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop
 800e6c0:	20046cb0 	.word	0x20046cb0

0800e6c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b084      	sub	sp, #16
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e6cc:	f107 0308 	add.w	r3, r7, #8
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f000 f851 	bl	800e778 <prvGetNextExpireTime>
 800e6d6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	4619      	mov	r1, r3
 800e6dc:	68f8      	ldr	r0, [r7, #12]
 800e6de:	f000 f805 	bl	800e6ec <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800e6e2:	f000 f8cf 	bl	800e884 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e6e6:	bf00      	nop
 800e6e8:	e7f0      	b.n	800e6cc <prvTimerTask+0x8>
	...

0800e6ec <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b084      	sub	sp, #16
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800e6f6:	f7ff f81d 	bl	800d734 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e6fa:	f107 0308 	add.w	r3, r7, #8
 800e6fe:	4618      	mov	r0, r3
 800e700:	f000 f85e 	bl	800e7c0 <prvSampleTimeNow>
 800e704:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d12a      	bne.n	800e762 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d10a      	bne.n	800e728 <prvProcessTimerOrBlockTask+0x3c>
 800e712:	687a      	ldr	r2, [r7, #4]
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	429a      	cmp	r2, r3
 800e718:	d806      	bhi.n	800e728 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800e71a:	f7ff f819 	bl	800d750 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e71e:	68f9      	ldr	r1, [r7, #12]
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f7ff ff9f 	bl	800e664 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800e726:	e01e      	b.n	800e766 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d008      	beq.n	800e740 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e72e:	4b10      	ldr	r3, [pc, #64]	@ (800e770 <prvProcessTimerOrBlockTask+0x84>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d101      	bne.n	800e73c <prvProcessTimerOrBlockTask+0x50>
 800e738:	2301      	movs	r3, #1
 800e73a:	e000      	b.n	800e73e <prvProcessTimerOrBlockTask+0x52>
 800e73c:	2300      	movs	r3, #0
 800e73e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e740:	4b0c      	ldr	r3, [pc, #48]	@ (800e774 <prvProcessTimerOrBlockTask+0x88>)
 800e742:	6818      	ldr	r0, [r3, #0]
 800e744:	687a      	ldr	r2, [r7, #4]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	1ad3      	subs	r3, r2, r3
 800e74a:	683a      	ldr	r2, [r7, #0]
 800e74c:	4619      	mov	r1, r3
 800e74e:	f7fe fd91 	bl	800d274 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800e752:	f7fe fffd 	bl	800d750 <xTaskResumeAll>
 800e756:	4603      	mov	r3, r0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d104      	bne.n	800e766 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800e75c:	f000 fa1e 	bl	800eb9c <vPortYield>
    }
 800e760:	e001      	b.n	800e766 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800e762:	f7fe fff5 	bl	800d750 <xTaskResumeAll>
    }
 800e766:	bf00      	nop
 800e768:	3710      	adds	r7, #16
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	bf00      	nop
 800e770:	20046cb4 	.word	0x20046cb4
 800e774:	20046cb8 	.word	0x20046cb8

0800e778 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800e778:	b480      	push	{r7}
 800e77a:	b085      	sub	sp, #20
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e780:	4b0e      	ldr	r3, [pc, #56]	@ (800e7bc <prvGetNextExpireTime+0x44>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d101      	bne.n	800e78e <prvGetNextExpireTime+0x16>
 800e78a:	2201      	movs	r2, #1
 800e78c:	e000      	b.n	800e790 <prvGetNextExpireTime+0x18>
 800e78e:	2200      	movs	r2, #0
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d105      	bne.n	800e7a8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e79c:	4b07      	ldr	r3, [pc, #28]	@ (800e7bc <prvGetNextExpireTime+0x44>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	68db      	ldr	r3, [r3, #12]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	60fb      	str	r3, [r7, #12]
 800e7a6:	e001      	b.n	800e7ac <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
    }
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3714      	adds	r7, #20
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr
 800e7ba:	bf00      	nop
 800e7bc:	20046cb0 	.word	0x20046cb0

0800e7c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800e7c8:	f7ff f8b0 	bl	800d92c <xTaskGetTickCount>
 800e7cc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800e7ce:	4b0b      	ldr	r3, [pc, #44]	@ (800e7fc <prvSampleTimeNow+0x3c>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	68fa      	ldr	r2, [r7, #12]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d205      	bcs.n	800e7e4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800e7d8:	f000 f922 	bl	800ea20 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2201      	movs	r2, #1
 800e7e0:	601a      	str	r2, [r3, #0]
 800e7e2:	e002      	b.n	800e7ea <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800e7ea:	4a04      	ldr	r2, [pc, #16]	@ (800e7fc <prvSampleTimeNow+0x3c>)
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
    }
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3710      	adds	r7, #16
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	20046cc0 	.word	0x20046cc0

0800e800 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800e800:	b580      	push	{r7, lr}
 800e802:	b086      	sub	sp, #24
 800e804:	af00      	add	r7, sp, #0
 800e806:	60f8      	str	r0, [r7, #12]
 800e808:	60b9      	str	r1, [r7, #8]
 800e80a:	607a      	str	r2, [r7, #4]
 800e80c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800e80e:	2300      	movs	r3, #0
 800e810:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	68ba      	ldr	r2, [r7, #8]
 800e816:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	68fa      	ldr	r2, [r7, #12]
 800e81c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800e81e:	68ba      	ldr	r2, [r7, #8]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	429a      	cmp	r2, r3
 800e824:	d812      	bhi.n	800e84c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e826:	687a      	ldr	r2, [r7, #4]
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	1ad2      	subs	r2, r2, r3
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	699b      	ldr	r3, [r3, #24]
 800e830:	429a      	cmp	r2, r3
 800e832:	d302      	bcc.n	800e83a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800e834:	2301      	movs	r3, #1
 800e836:	617b      	str	r3, [r7, #20]
 800e838:	e01b      	b.n	800e872 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e83a:	4b10      	ldr	r3, [pc, #64]	@ (800e87c <prvInsertTimerInActiveList+0x7c>)
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	3304      	adds	r3, #4
 800e842:	4619      	mov	r1, r3
 800e844:	4610      	mov	r0, r2
 800e846:	f7fd fda2 	bl	800c38e <vListInsert>
 800e84a:	e012      	b.n	800e872 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	429a      	cmp	r2, r3
 800e852:	d206      	bcs.n	800e862 <prvInsertTimerInActiveList+0x62>
 800e854:	68ba      	ldr	r2, [r7, #8]
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d302      	bcc.n	800e862 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800e85c:	2301      	movs	r3, #1
 800e85e:	617b      	str	r3, [r7, #20]
 800e860:	e007      	b.n	800e872 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e862:	4b07      	ldr	r3, [pc, #28]	@ (800e880 <prvInsertTimerInActiveList+0x80>)
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	3304      	adds	r3, #4
 800e86a:	4619      	mov	r1, r3
 800e86c:	4610      	mov	r0, r2
 800e86e:	f7fd fd8e 	bl	800c38e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800e872:	697b      	ldr	r3, [r7, #20]
    }
 800e874:	4618      	mov	r0, r3
 800e876:	3718      	adds	r7, #24
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	20046cb4 	.word	0x20046cb4
 800e880:	20046cb0 	.word	0x20046cb0

0800e884 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800e884:	b580      	push	{r7, lr}
 800e886:	b088      	sub	sp, #32
 800e888:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e88a:	e0b7      	b.n	800e9fc <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	da11      	bge.n	800e8b6 <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e892:	1d3b      	adds	r3, r7, #4
 800e894:	3304      	adds	r3, #4
 800e896:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d103      	bne.n	800e8a6 <prvProcessReceivedCommands+0x22>
 800e89e:	f000 fb5b 	bl	800ef58 <ulSetInterruptMask>
 800e8a2:	bf00      	nop
 800e8a4:	e7fd      	b.n	800e8a2 <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e8a6:	69fb      	ldr	r3, [r7, #28]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	69fa      	ldr	r2, [r7, #28]
 800e8ac:	6850      	ldr	r0, [r2, #4]
 800e8ae:	69fa      	ldr	r2, [r7, #28]
 800e8b0:	6892      	ldr	r2, [r2, #8]
 800e8b2:	4611      	mov	r1, r2
 800e8b4:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	f2c0 809f 	blt.w	800e9fc <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e8c2:	69bb      	ldr	r3, [r7, #24]
 800e8c4:	695b      	ldr	r3, [r3, #20]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d004      	beq.n	800e8d4 <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e8ca:	69bb      	ldr	r3, [r7, #24]
 800e8cc:	3304      	adds	r3, #4
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7fd fd96 	bl	800c400 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e8d4:	463b      	mov	r3, r7
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7ff ff72 	bl	800e7c0 <prvSampleTimeNow>
 800e8dc:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	3b01      	subs	r3, #1
 800e8e2:	2b08      	cmp	r3, #8
 800e8e4:	f200 8087 	bhi.w	800e9f6 <prvProcessReceivedCommands+0x172>
 800e8e8:	a201      	add	r2, pc, #4	@ (adr r2, 800e8f0 <prvProcessReceivedCommands+0x6c>)
 800e8ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8ee:	bf00      	nop
 800e8f0:	0800e915 	.word	0x0800e915
 800e8f4:	0800e915 	.word	0x0800e915
 800e8f8:	0800e97d 	.word	0x0800e97d
 800e8fc:	0800e991 	.word	0x0800e991
 800e900:	0800e9cd 	.word	0x0800e9cd
 800e904:	0800e915 	.word	0x0800e915
 800e908:	0800e915 	.word	0x0800e915
 800e90c:	0800e97d 	.word	0x0800e97d
 800e910:	0800e991 	.word	0x0800e991
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e914:	69bb      	ldr	r3, [r7, #24]
 800e916:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e91a:	f043 0301 	orr.w	r3, r3, #1
 800e91e:	b2da      	uxtb	r2, r3
 800e920:	69bb      	ldr	r3, [r7, #24]
 800e922:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e926:	68ba      	ldr	r2, [r7, #8]
 800e928:	69bb      	ldr	r3, [r7, #24]
 800e92a:	699b      	ldr	r3, [r3, #24]
 800e92c:	18d1      	adds	r1, r2, r3
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	697a      	ldr	r2, [r7, #20]
 800e932:	69b8      	ldr	r0, [r7, #24]
 800e934:	f7ff ff64 	bl	800e800 <prvInsertTimerInActiveList>
 800e938:	4603      	mov	r3, r0
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d05d      	beq.n	800e9fa <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e93e:	69bb      	ldr	r3, [r7, #24]
 800e940:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e944:	f003 0304 	and.w	r3, r3, #4
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d009      	beq.n	800e960 <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800e94c:	68ba      	ldr	r2, [r7, #8]
 800e94e:	69bb      	ldr	r3, [r7, #24]
 800e950:	699b      	ldr	r3, [r3, #24]
 800e952:	4413      	add	r3, r2
 800e954:	697a      	ldr	r2, [r7, #20]
 800e956:	4619      	mov	r1, r3
 800e958:	69b8      	ldr	r0, [r7, #24]
 800e95a:	f7ff fe61 	bl	800e620 <prvReloadTimer>
 800e95e:	e008      	b.n	800e972 <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e966:	f023 0301 	bic.w	r3, r3, #1
 800e96a:	b2da      	uxtb	r2, r3
 800e96c:	69bb      	ldr	r3, [r7, #24]
 800e96e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e972:	69bb      	ldr	r3, [r7, #24]
 800e974:	6a1b      	ldr	r3, [r3, #32]
 800e976:	69b8      	ldr	r0, [r7, #24]
 800e978:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800e97a:	e03e      	b.n	800e9fa <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e97c:	69bb      	ldr	r3, [r7, #24]
 800e97e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e982:	f023 0301 	bic.w	r3, r3, #1
 800e986:	b2da      	uxtb	r2, r3
 800e988:	69bb      	ldr	r3, [r7, #24]
 800e98a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800e98e:	e035      	b.n	800e9fc <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e990:	69bb      	ldr	r3, [r7, #24]
 800e992:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e996:	f043 0301 	orr.w	r3, r3, #1
 800e99a:	b2da      	uxtb	r2, r3
 800e99c:	69bb      	ldr	r3, [r7, #24]
 800e99e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e9a2:	68ba      	ldr	r2, [r7, #8]
 800e9a4:	69bb      	ldr	r3, [r7, #24]
 800e9a6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e9a8:	69bb      	ldr	r3, [r7, #24]
 800e9aa:	699b      	ldr	r3, [r3, #24]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d103      	bne.n	800e9b8 <prvProcessReceivedCommands+0x134>
 800e9b0:	f000 fad2 	bl	800ef58 <ulSetInterruptMask>
 800e9b4:	bf00      	nop
 800e9b6:	e7fd      	b.n	800e9b4 <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e9b8:	69bb      	ldr	r3, [r7, #24]
 800e9ba:	699a      	ldr	r2, [r3, #24]
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	18d1      	adds	r1, r2, r3
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	697a      	ldr	r2, [r7, #20]
 800e9c4:	69b8      	ldr	r0, [r7, #24]
 800e9c6:	f7ff ff1b 	bl	800e800 <prvInsertTimerInActiveList>
                        break;
 800e9ca:	e017      	b.n	800e9fc <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e9cc:	69bb      	ldr	r3, [r7, #24]
 800e9ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e9d2:	f003 0302 	and.w	r3, r3, #2
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d103      	bne.n	800e9e2 <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 800e9da:	69b8      	ldr	r0, [r7, #24]
 800e9dc:	f000 fbe0 	bl	800f1a0 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800e9e0:	e00c      	b.n	800e9fc <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e9e2:	69bb      	ldr	r3, [r7, #24]
 800e9e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e9e8:	f023 0301 	bic.w	r3, r3, #1
 800e9ec:	b2da      	uxtb	r2, r3
 800e9ee:	69bb      	ldr	r3, [r7, #24]
 800e9f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800e9f4:	e002      	b.n	800e9fc <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 800e9f6:	bf00      	nop
 800e9f8:	e000      	b.n	800e9fc <prvProcessReceivedCommands+0x178>
                        break;
 800e9fa:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e9fc:	4b07      	ldr	r3, [pc, #28]	@ (800ea1c <prvProcessReceivedCommands+0x198>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	1d39      	adds	r1, r7, #4
 800ea02:	2200      	movs	r2, #0
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7fe f872 	bl	800caee <xQueueReceive>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	f47f af3d 	bne.w	800e88c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800ea12:	bf00      	nop
 800ea14:	bf00      	nop
 800ea16:	3720      	adds	r7, #32
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	20046cb8 	.word	0x20046cb8

0800ea20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ea26:	e009      	b.n	800ea3c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ea28:	4b0e      	ldr	r3, [pc, #56]	@ (800ea64 <prvSwitchTimerLists+0x44>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	68db      	ldr	r3, [r3, #12]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800ea32:	f04f 31ff 	mov.w	r1, #4294967295
 800ea36:	6838      	ldr	r0, [r7, #0]
 800ea38:	f7ff fe14 	bl	800e664 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ea3c:	4b09      	ldr	r3, [pc, #36]	@ (800ea64 <prvSwitchTimerLists+0x44>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d1f0      	bne.n	800ea28 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800ea46:	4b07      	ldr	r3, [pc, #28]	@ (800ea64 <prvSwitchTimerLists+0x44>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800ea4c:	4b06      	ldr	r3, [pc, #24]	@ (800ea68 <prvSwitchTimerLists+0x48>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	4a04      	ldr	r2, [pc, #16]	@ (800ea64 <prvSwitchTimerLists+0x44>)
 800ea52:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800ea54:	4a04      	ldr	r2, [pc, #16]	@ (800ea68 <prvSwitchTimerLists+0x48>)
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6013      	str	r3, [r2, #0]
    }
 800ea5a:	bf00      	nop
 800ea5c:	3708      	adds	r7, #8
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	bf00      	nop
 800ea64:	20046cb0 	.word	0x20046cb0
 800ea68:	20046cb4 	.word	0x20046cb4

0800ea6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800ea72:	f000 f8a5 	bl	800ebc0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800ea76:	4b15      	ldr	r3, [pc, #84]	@ (800eacc <prvCheckForValidListAndQueue+0x60>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d120      	bne.n	800eac0 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800ea7e:	4814      	ldr	r0, [pc, #80]	@ (800ead0 <prvCheckForValidListAndQueue+0x64>)
 800ea80:	f7fd fc58 	bl	800c334 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800ea84:	4813      	ldr	r0, [pc, #76]	@ (800ead4 <prvCheckForValidListAndQueue+0x68>)
 800ea86:	f7fd fc55 	bl	800c334 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800ea8a:	4b13      	ldr	r3, [pc, #76]	@ (800ead8 <prvCheckForValidListAndQueue+0x6c>)
 800ea8c:	4a10      	ldr	r2, [pc, #64]	@ (800ead0 <prvCheckForValidListAndQueue+0x64>)
 800ea8e:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800ea90:	4b12      	ldr	r3, [pc, #72]	@ (800eadc <prvCheckForValidListAndQueue+0x70>)
 800ea92:	4a10      	ldr	r2, [pc, #64]	@ (800ead4 <prvCheckForValidListAndQueue+0x68>)
 800ea94:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ea96:	2300      	movs	r3, #0
 800ea98:	9300      	str	r3, [sp, #0]
 800ea9a:	4b11      	ldr	r3, [pc, #68]	@ (800eae0 <prvCheckForValidListAndQueue+0x74>)
 800ea9c:	4a11      	ldr	r2, [pc, #68]	@ (800eae4 <prvCheckForValidListAndQueue+0x78>)
 800ea9e:	2110      	movs	r1, #16
 800eaa0:	200a      	movs	r0, #10
 800eaa2:	f7fd fd50 	bl	800c546 <xQueueGenericCreateStatic>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	4a08      	ldr	r2, [pc, #32]	@ (800eacc <prvCheckForValidListAndQueue+0x60>)
 800eaaa:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800eaac:	4b07      	ldr	r3, [pc, #28]	@ (800eacc <prvCheckForValidListAndQueue+0x60>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d005      	beq.n	800eac0 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800eab4:	4b05      	ldr	r3, [pc, #20]	@ (800eacc <prvCheckForValidListAndQueue+0x60>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	490b      	ldr	r1, [pc, #44]	@ (800eae8 <prvCheckForValidListAndQueue+0x7c>)
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7fe fb64 	bl	800d188 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800eac0:	f000 f890 	bl	800ebe4 <vPortExitCritical>
    }
 800eac4:	bf00      	nop
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	20046cb8 	.word	0x20046cb8
 800ead0:	20046c88 	.word	0x20046c88
 800ead4:	20046c9c 	.word	0x20046c9c
 800ead8:	20046cb0 	.word	0x20046cb0
 800eadc:	20046cb4 	.word	0x20046cb4
 800eae0:	20046d64 	.word	0x20046d64
 800eae4:	20046cc4 	.word	0x20046cc4
 800eae8:	0802ed84 	.word	0x0802ed84

0800eaec <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800eaec:	b480      	push	{r7}
 800eaee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eaf0:	4b0b      	ldr	r3, [pc, #44]	@ (800eb20 <vPortSetupTimerInterrupt+0x34>)
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eaf6:	4b0b      	ldr	r3, [pc, #44]	@ (800eb24 <vPortSetupTimerInterrupt+0x38>)
 800eaf8:	2200      	movs	r2, #0
 800eafa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eafc:	4b0a      	ldr	r3, [pc, #40]	@ (800eb28 <vPortSetupTimerInterrupt+0x3c>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4a0a      	ldr	r2, [pc, #40]	@ (800eb2c <vPortSetupTimerInterrupt+0x40>)
 800eb02:	fba2 2303 	umull	r2, r3, r2, r3
 800eb06:	099b      	lsrs	r3, r3, #6
 800eb08:	4a09      	ldr	r2, [pc, #36]	@ (800eb30 <vPortSetupTimerInterrupt+0x44>)
 800eb0a:	3b01      	subs	r3, #1
 800eb0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800eb0e:	4b04      	ldr	r3, [pc, #16]	@ (800eb20 <vPortSetupTimerInterrupt+0x34>)
 800eb10:	2207      	movs	r2, #7
 800eb12:	601a      	str	r2, [r3, #0]
}
 800eb14:	bf00      	nop
 800eb16:	46bd      	mov	sp, r7
 800eb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1c:	4770      	bx	lr
 800eb1e:	bf00      	nop
 800eb20:	e000e010 	.word	0xe000e010
 800eb24:	e000e018 	.word	0xe000e018
 800eb28:	20000004 	.word	0x20000004
 800eb2c:	10624dd3 	.word	0x10624dd3
 800eb30:	e000e014 	.word	0xe000e014

0800eb34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800eb3e:	4b0a      	ldr	r3, [pc, #40]	@ (800eb68 <prvTaskExitError+0x34>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb46:	d003      	beq.n	800eb50 <prvTaskExitError+0x1c>
 800eb48:	f000 fa06 	bl	800ef58 <ulSetInterruptMask>
 800eb4c:	bf00      	nop
 800eb4e:	e7fd      	b.n	800eb4c <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800eb50:	f000 fa02 	bl	800ef58 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800eb54:	bf00      	nop
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d0fc      	beq.n	800eb56 <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800eb5c:	bf00      	nop
 800eb5e:	bf00      	nop
 800eb60:	3708      	adds	r7, #8
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	bf00      	nop
 800eb68:	20000010 	.word	0x20000010

0800eb6c <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if ( configENABLE_FPU == 1 )
    static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
    {
 800eb6c:	b480      	push	{r7}
 800eb6e:	af00      	add	r7, sp, #0
        #endif /* configENABLE_TRUSTZONE */

        /* CP10 = 11 ==> Full access to FPU i.e. both privileged and
         * unprivileged code should be able to access FPU. CP11 should be
         * programmed to the same value as CP10. */
        *( portCPACR ) |= ( ( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 800eb70:	4b08      	ldr	r3, [pc, #32]	@ (800eb94 <prvSetupFPU+0x28>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	4a07      	ldr	r2, [pc, #28]	@ (800eb94 <prvSetupFPU+0x28>)
 800eb76:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800eb7a:	6013      	str	r3, [r2, #0]
                            );

        /* ASPEN = 1 ==> Hardware should automatically preserve floating point
         * context on exception entry and restore on exception return.
         * LSPEN = 1 ==> Enable lazy context save of FP state. */
        *( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 800eb7c:	4b06      	ldr	r3, [pc, #24]	@ (800eb98 <prvSetupFPU+0x2c>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4a05      	ldr	r2, [pc, #20]	@ (800eb98 <prvSetupFPU+0x2c>)
 800eb82:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800eb86:	6013      	str	r3, [r2, #0]
    }
 800eb88:	bf00      	nop
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb90:	4770      	bx	lr
 800eb92:	bf00      	nop
 800eb94:	e000ed88 	.word	0xe000ed88
 800eb98:	e000ef34 	.word	0xe000ef34

0800eb9c <vPortYield>:
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eba0:	4b06      	ldr	r3, [pc, #24]	@ (800ebbc <vPortYield+0x20>)
 800eba2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eba6:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800eba8:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800ebac:	f3bf 8f6f 	isb	sy
}
 800ebb0:	bf00      	nop
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb8:	4770      	bx	lr
 800ebba:	bf00      	nop
 800ebbc:	e000ed04 	.word	0xe000ed04

0800ebc0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800ebc4:	f000 f9c8 	bl	800ef58 <ulSetInterruptMask>
    ulCriticalNesting++;
 800ebc8:	4b05      	ldr	r3, [pc, #20]	@ (800ebe0 <vPortEnterCritical+0x20>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	3301      	adds	r3, #1
 800ebce:	4a04      	ldr	r2, [pc, #16]	@ (800ebe0 <vPortEnterCritical+0x20>)
 800ebd0:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800ebd2:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800ebd6:	f3bf 8f6f 	isb	sy
}
 800ebda:	bf00      	nop
 800ebdc:	bd80      	pop	{r7, pc}
 800ebde:	bf00      	nop
 800ebe0:	20000010 	.word	0x20000010

0800ebe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800ebe8:	4b0a      	ldr	r3, [pc, #40]	@ (800ec14 <vPortExitCritical+0x30>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d103      	bne.n	800ebf8 <vPortExitCritical+0x14>
 800ebf0:	f000 f9b2 	bl	800ef58 <ulSetInterruptMask>
 800ebf4:	bf00      	nop
 800ebf6:	e7fd      	b.n	800ebf4 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800ebf8:	4b06      	ldr	r3, [pc, #24]	@ (800ec14 <vPortExitCritical+0x30>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	3b01      	subs	r3, #1
 800ebfe:	4a05      	ldr	r2, [pc, #20]	@ (800ec14 <vPortExitCritical+0x30>)
 800ec00:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800ec02:	4b04      	ldr	r3, [pc, #16]	@ (800ec14 <vPortExitCritical+0x30>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d102      	bne.n	800ec10 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 800ec0a:	2000      	movs	r0, #0
 800ec0c:	f000 f9b1 	bl	800ef72 <vClearInterruptMask>
    }
}
 800ec10:	bf00      	nop
 800ec12:	bd80      	pop	{r7, pc}
 800ec14:	20000010 	.word	0x20000010

0800ec18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b082      	sub	sp, #8
 800ec1c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec1e:	f000 f99b 	bl	800ef58 <ulSetInterruptMask>
 800ec22:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800ec24:	f7fe fe9e 	bl	800d964 <xTaskIncrementTick>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d003      	beq.n	800ec36 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ec2e:	4b05      	ldr	r3, [pc, #20]	@ (800ec44 <xPortSysTickHandler+0x2c>)
 800ec30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec34:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f000 f99b 	bl	800ef72 <vClearInterruptMask>
}
 800ec3c:	bf00      	nop
 800ec3e:	3708      	adds	r7, #8
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}
 800ec44:	e000ed04 	.word	0xe000ed04

0800ec48 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b084      	sub	sp, #16
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	699b      	ldr	r3, [r3, #24]
 800ec54:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	3b02      	subs	r3, #2
 800ec5a:	781b      	ldrb	r3, [r3, #0]
 800ec5c:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800ec5e:	7afb      	ldrb	r3, [r7, #11]
 800ec60:	2b66      	cmp	r3, #102	@ 0x66
 800ec62:	d104      	bne.n	800ec6e <vPortSVCHandler_C+0x26>
            #endif /* configENABLE_TRUSTZONE */

            #if ( configENABLE_FPU == 1 )
            {
                /* Setup the Floating Point Unit (FPU). */
                prvSetupFPU();
 800ec64:	f7ff ff82 	bl	800eb6c <prvSetupFPU>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800ec68:	f000 f942 	bl	800eef0 <vRestoreContextOfFirstTask>
            break;
 800ec6c:	e003      	b.n	800ec76 <vPortSVCHandler_C+0x2e>
                break;
        #endif /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 1 ) */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800ec6e:	f000 f973 	bl	800ef58 <ulSetInterruptMask>
 800ec72:	bf00      	nop
 800ec74:	e7fd      	b.n	800ec72 <vPortSVCHandler_C+0x2a>
    }
}
 800ec76:	bf00      	nop
 800ec78:	3710      	adds	r7, #16
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}
	...

0800ec80 <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 800ec80:	b480      	push	{r7}
 800ec82:	b085      	sub	sp, #20
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	60f8      	str	r0, [r7, #12]
 800ec88:	60b9      	str	r1, [r7, #8]
 800ec8a:	607a      	str	r2, [r7, #4]
 800ec8c:	603b      	str	r3, [r7, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	3b04      	subs	r3, #4
 800ec92:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ec9a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	3b04      	subs	r3, #4
 800eca0:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	3b04      	subs	r3, #4
 800ecac:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 800ecae:	4a38      	ldr	r2, [pc, #224]	@ (800ed90 <pxPortInitialiseStack+0x110>)
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	3b04      	subs	r3, #4
 800ecb8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800ecc0:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	3b04      	subs	r3, #4
 800ecc6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800ecce:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	3b04      	subs	r3, #4
 800ecd4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800ecdc:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	3b04      	subs	r3, #4
 800ece2:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800ecea:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	3b04      	subs	r3, #4
 800ecf0:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
 800ecf2:	683a      	ldr	r2, [r7, #0]
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	3b04      	subs	r3, #4
 800ecfc:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800ed04:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	3b04      	subs	r3, #4
 800ed0a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800ed12:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	3b04      	subs	r3, #4
 800ed18:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800ed20:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	3b04      	subs	r3, #4
 800ed26:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800ed2e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	3b04      	subs	r3, #4
 800ed34:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800ed3c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	3b04      	subs	r3, #4
 800ed42:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800ed4a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	3b04      	subs	r3, #4
 800ed50:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800ed58:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	3b04      	subs	r3, #4
 800ed5e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800ed66:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	3b04      	subs	r3, #4
 800ed6c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 800ed74:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	3b04      	subs	r3, #4
 800ed7a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800ed7c:	68ba      	ldr	r2, [r7, #8]
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	601a      	str	r2, [r3, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
 800ed82:	68fb      	ldr	r3, [r7, #12]
    }
 800ed84:	4618      	mov	r0, r3
 800ed86:	3714      	adds	r7, #20
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr
 800ed90:	0800eb35 	.word	0x0800eb35

0800ed94 <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b084      	sub	sp, #16
 800ed98:	af00      	add	r7, sp, #0
    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	60bb      	str	r3, [r7, #8]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = portNVIC_SHPR2_REG;
 800ed9e:	4b35      	ldr	r3, [pc, #212]	@ (800ee74 <xPortStartScheduler+0xe0>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	60fb      	str	r3, [r7, #12]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        portNVIC_SHPR2_REG = 0xFF000000;
 800eda4:	4b33      	ldr	r3, [pc, #204]	@ (800ee74 <xPortStartScheduler+0xe0>)
 800eda6:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800edaa:	601a      	str	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 800edac:	4b31      	ldr	r3, [pc, #196]	@ (800ee74 <xPortStartScheduler+0xe0>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	0e1b      	lsrs	r3, r3, #24
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800edb6:	79fb      	ldrb	r3, [r7, #7]
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800edbe:	b2da      	uxtb	r2, r3
 800edc0:	4b2d      	ldr	r3, [pc, #180]	@ (800ee78 <xPortStartScheduler+0xe4>)
 800edc2:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800edc4:	4b2c      	ldr	r3, [pc, #176]	@ (800ee78 <xPortStartScheduler+0xe4>)
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d103      	bne.n	800edd4 <xPortStartScheduler+0x40>
 800edcc:	f000 f8c4 	bl	800ef58 <ulSetInterruptMask>
 800edd0:	bf00      	nop
 800edd2:	e7fd      	b.n	800edd0 <xPortStartScheduler+0x3c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800edd4:	79fb      	ldrb	r3, [r7, #7]
 800edd6:	b2db      	uxtb	r3, r3
 800edd8:	43db      	mvns	r3, r3
 800edda:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d00b      	beq.n	800edfa <xPortStartScheduler+0x66>
 800ede2:	f000 f8b9 	bl	800ef58 <ulSetInterruptMask>
 800ede6:	bf00      	nop
 800ede8:	e7fd      	b.n	800ede6 <xPortStartScheduler+0x52>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	3301      	adds	r3, #1
 800edee:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800edf0:	79fb      	ldrb	r3, [r7, #7]
 800edf2:	b2db      	uxtb	r3, r3
 800edf4:	005b      	lsls	r3, r3, #1
 800edf6:	b2db      	uxtb	r3, r3
 800edf8:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800edfa:	79fb      	ldrb	r3, [r7, #7]
 800edfc:	b2db      	uxtb	r3, r3
 800edfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee02:	2b80      	cmp	r3, #128	@ 0x80
 800ee04:	d0f1      	beq.n	800edea <xPortStartScheduler+0x56>
        }

        if( ulImplementedPrioBits == 8 )
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	2b08      	cmp	r3, #8
 800ee0a:	d103      	bne.n	800ee14 <xPortStartScheduler+0x80>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800ee0c:	4b1b      	ldr	r3, [pc, #108]	@ (800ee7c <xPortStartScheduler+0xe8>)
 800ee0e:	2200      	movs	r2, #0
 800ee10:	601a      	str	r2, [r3, #0]
 800ee12:	e004      	b.n	800ee1e <xPortStartScheduler+0x8a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	f1c3 0307 	rsb	r3, r3, #7
 800ee1a:	4a18      	ldr	r2, [pc, #96]	@ (800ee7c <xPortStartScheduler+0xe8>)
 800ee1c:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ee1e:	4b17      	ldr	r3, [pc, #92]	@ (800ee7c <xPortStartScheduler+0xe8>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	021b      	lsls	r3, r3, #8
 800ee24:	4a15      	ldr	r2, [pc, #84]	@ (800ee7c <xPortStartScheduler+0xe8>)
 800ee26:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ee28:	4b14      	ldr	r3, [pc, #80]	@ (800ee7c <xPortStartScheduler+0xe8>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ee30:	4a12      	ldr	r2, [pc, #72]	@ (800ee7c <xPortStartScheduler+0xe8>)
 800ee32:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        portNVIC_SHPR2_REG = ulOriginalPriority;
 800ee34:	4a0f      	ldr	r2, [pc, #60]	@ (800ee74 <xPortStartScheduler+0xe0>)
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	6013      	str	r3, [r2, #0]
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) ) */

    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800ee3a:	4b11      	ldr	r3, [pc, #68]	@ (800ee80 <xPortStartScheduler+0xec>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	4a10      	ldr	r2, [pc, #64]	@ (800ee80 <xPortStartScheduler+0xec>)
 800ee40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ee44:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800ee46:	4b0e      	ldr	r3, [pc, #56]	@ (800ee80 <xPortStartScheduler+0xec>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	4a0d      	ldr	r2, [pc, #52]	@ (800ee80 <xPortStartScheduler+0xec>)
 800ee4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ee50:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800ee52:	f7ff fe4b 	bl	800eaec <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800ee56:	4b0b      	ldr	r3, [pc, #44]	@ (800ee84 <xPortStartScheduler+0xf0>)
 800ee58:	2200      	movs	r2, #0
 800ee5a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
 800ee5c:	f000 f868 	bl	800ef30 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800ee60:	f7fe fe90 	bl	800db84 <vTaskSwitchContext>
    prvTaskExitError();
 800ee64:	f7ff fe66 	bl	800eb34 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800ee68:	2300      	movs	r3, #0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3710      	adds	r7, #16
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	e000ed1c 	.word	0xe000ed1c
 800ee78:	20046db4 	.word	0x20046db4
 800ee7c:	20046db8 	.word	0x20046db8
 800ee80:	e000ed20 	.word	0xe000ed20
 800ee84:	20000010 	.word	0x20000010

0800ee88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )

    void vPortValidateInterruptPriority( void )
    {
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b082      	sub	sp, #8
 800ee8c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800ee8e:	f3ef 8305 	mrs	r3, IPSR
 800ee92:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2b0f      	cmp	r3, #15
 800ee98:	d90d      	bls.n	800eeb6 <vPortValidateInterruptPriority+0x2e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ee9a:	4a0f      	ldr	r2, [pc, #60]	@ (800eed8 <vPortValidateInterruptPriority+0x50>)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	4413      	add	r3, r2
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eea4:	4b0d      	ldr	r3, [pc, #52]	@ (800eedc <vPortValidateInterruptPriority+0x54>)
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	78fa      	ldrb	r2, [r7, #3]
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	d203      	bcs.n	800eeb6 <vPortValidateInterruptPriority+0x2e>
 800eeae:	f000 f853 	bl	800ef58 <ulSetInterruptMask>
 800eeb2:	bf00      	nop
 800eeb4:	e7fd      	b.n	800eeb2 <vPortValidateInterruptPriority+0x2a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eeb6:	4b0a      	ldr	r3, [pc, #40]	@ (800eee0 <vPortValidateInterruptPriority+0x58>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800eebe:	4b09      	ldr	r3, [pc, #36]	@ (800eee4 <vPortValidateInterruptPriority+0x5c>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d903      	bls.n	800eece <vPortValidateInterruptPriority+0x46>
 800eec6:	f000 f847 	bl	800ef58 <ulSetInterruptMask>
 800eeca:	bf00      	nop
 800eecc:	e7fd      	b.n	800eeca <vPortValidateInterruptPriority+0x42>
    }
 800eece:	bf00      	nop
 800eed0:	3708      	adds	r7, #8
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	e000e3f0 	.word	0xe000e3f0
 800eedc:	20046db4 	.word	0x20046db4
 800eee0:	e000ed0c 	.word	0xe000ed0c
 800eee4:	20046db8 	.word	0x20046db8
	...

0800eef0 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800eef0:	4a0b      	ldr	r2, [pc, #44]	@ (800ef20 <pxCurrentTCBConst2>)
 800eef2:	6811      	ldr	r1, [r2, #0]
 800eef4:	6808      	ldr	r0, [r1, #0]
 800eef6:	c806      	ldmia	r0!, {r1, r2}
 800eef8:	f381 880b 	msr	PSPLIM, r1
 800eefc:	2102      	movs	r1, #2
 800eefe:	f381 8814 	msr	CONTROL, r1
 800ef02:	3020      	adds	r0, #32
 800ef04:	f380 8809 	msr	PSP, r0
 800ef08:	f3bf 8f6f 	isb	sy
 800ef0c:	f04f 0000 	mov.w	r0, #0
 800ef10:	f380 8811 	msr	BASEPRI, r0
 800ef14:	4710      	bx	r2
 800ef16:	bf00      	nop
 800ef18:	f3af 8000 	nop.w
 800ef1c:	f3af 8000 	nop.w

0800ef20 <pxCurrentTCBConst2>:
 800ef20:	20046788 	.word	0x20046788
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
    }
 800ef24:	bf00      	nop
 800ef26:	bf00      	nop
	...

0800ef30 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ef30:	4807      	ldr	r0, [pc, #28]	@ (800ef50 <xVTORConst>)
 800ef32:	6800      	ldr	r0, [r0, #0]
 800ef34:	6800      	ldr	r0, [r0, #0]
 800ef36:	f380 8808 	msr	MSP, r0
 800ef3a:	b662      	cpsie	i
 800ef3c:	b661      	cpsie	f
 800ef3e:	f3bf 8f4f 	dsb	sy
 800ef42:	f3bf 8f6f 	isb	sy
 800ef46:	df66      	svc	102	@ 0x66
 800ef48:	bf00      	nop
 800ef4a:	bf00      	nop
 800ef4c:	f3af 8000 	nop.w

0800ef50 <xVTORConst>:
 800ef50:	e000ed08 	.word	0xe000ed08
        "                                                   \n"
        "   .align 4                                        \n"
        "xVTORConst: .word 0xe000ed08                       \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800ef54:	bf00      	nop
 800ef56:	bf00      	nop

0800ef58 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ef58:	f3ef 8011 	mrs	r0, BASEPRI
 800ef5c:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800ef60:	f381 8811 	msr	BASEPRI, r1
 800ef64:	f3bf 8f4f 	dsb	sy
 800ef68:	f3bf 8f6f 	isb	sy
 800ef6c:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800ef6e:	bf00      	nop
 800ef70:	4618      	mov	r0, r3

0800ef72 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ef72:	f380 8811 	msr	BASEPRI, r0
 800ef76:	f3bf 8f4f 	dsb	sy
 800ef7a:	f3bf 8f6f 	isb	sy
 800ef7e:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::: "memory"
    );
}
 800ef80:	bf00      	nop
	...

0800ef90 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800ef90:	f3ef 8009 	mrs	r0, PSP
 800ef94:	f01e 0f10 	tst.w	lr, #16
 800ef98:	bf08      	it	eq
 800ef9a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ef9e:	f3ef 820b 	mrs	r2, PSPLIM
 800efa2:	4673      	mov	r3, lr
 800efa4:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800efa8:	4a11      	ldr	r2, [pc, #68]	@ (800eff0 <pxCurrentTCBConst>)
 800efaa:	6811      	ldr	r1, [r2, #0]
 800efac:	6008      	str	r0, [r1, #0]
 800efae:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800efb2:	f380 8811 	msr	BASEPRI, r0
 800efb6:	f3bf 8f4f 	dsb	sy
 800efba:	f3bf 8f6f 	isb	sy
 800efbe:	f7fe fde1 	bl	800db84 <vTaskSwitchContext>
 800efc2:	f04f 0000 	mov.w	r0, #0
 800efc6:	f380 8811 	msr	BASEPRI, r0
 800efca:	4a09      	ldr	r2, [pc, #36]	@ (800eff0 <pxCurrentTCBConst>)
 800efcc:	6811      	ldr	r1, [r2, #0]
 800efce:	6808      	ldr	r0, [r1, #0]
 800efd0:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800efd4:	f013 0f10 	tst.w	r3, #16
 800efd8:	bf08      	it	eq
 800efda:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800efde:	f382 880b 	msr	PSPLIM, r2
 800efe2:	f380 8809 	msr	PSP, r0
 800efe6:	4718      	bx	r3
 800efe8:	f3af 8000 	nop.w
 800efec:	f3af 8000 	nop.w

0800eff0 <pxCurrentTCBConst>:
 800eff0:	20046788 	.word	0x20046788
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst: .word pxCurrentTCB              \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 800eff4:	bf00      	nop
 800eff6:	bf00      	nop
	...

0800f000 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800f000:	f01e 0f04 	tst.w	lr, #4
 800f004:	bf0c      	ite	eq
 800f006:	f3ef 8008 	mrseq	r0, MSP
 800f00a:	f3ef 8009 	mrsne	r0, PSP
 800f00e:	4904      	ldr	r1, [pc, #16]	@ (800f020 <svchandler_address_const>)
 800f010:	4708      	bx	r1
 800f012:	bf00      	nop
 800f014:	f3af 8000 	nop.w
 800f018:	f3af 8000 	nop.w
 800f01c:	f3af 8000 	nop.w

0800f020 <svchandler_address_const>:
 800f020:	0800ec49 	.word	0x0800ec49
            "   bx r1                                           \n"
            "                                                   \n"
            "   .align 4                                        \n"
            "svchandler_address_const: .word vPortSVCHandler_C  \n"
        );
    }
 800f024:	bf00      	nop
 800f026:	bf00      	nop

0800f028 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b088      	sub	sp, #32
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800f030:	2300      	movs	r3, #0
 800f032:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800f034:	f7fe fb7e 	bl	800d734 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800f038:	4b54      	ldr	r3, [pc, #336]	@ (800f18c <pvPortMalloc+0x164>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d101      	bne.n	800f044 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800f040:	f000 f8f8 	bl	800f234 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d022      	beq.n	800f090 <pvPortMalloc+0x68>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800f04a:	2308      	movs	r3, #8
 800f04c:	43db      	mvns	r3, r3
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	429a      	cmp	r2, r3
 800f052:	d81b      	bhi.n	800f08c <pvPortMalloc+0x64>
            {
                xWantedSize += xHeapStructSize;
 800f054:	2208      	movs	r2, #8
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	4413      	add	r3, r2
 800f05a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f003 0307 	and.w	r3, r3, #7
 800f062:	2b00      	cmp	r3, #0
 800f064:	d014      	beq.n	800f090 <pvPortMalloc+0x68>
                {
                    /* Byte alignment required. */
                    xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f003 0307 	and.w	r3, r3, #7
 800f06c:	f1c3 0308 	rsb	r3, r3, #8
 800f070:	613b      	str	r3, [r7, #16]

                    if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	43db      	mvns	r3, r3
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	429a      	cmp	r2, r3
 800f07a:	d804      	bhi.n	800f086 <pvPortMalloc+0x5e>
                    {
                        xWantedSize += xAdditionalRequiredSize;
 800f07c:	687a      	ldr	r2, [r7, #4]
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	4413      	add	r3, r2
 800f082:	607b      	str	r3, [r7, #4]
 800f084:	e004      	b.n	800f090 <pvPortMalloc+0x68>
                    }
                    else
                    {
                        xWantedSize = 0;
 800f086:	2300      	movs	r3, #0
 800f088:	607b      	str	r3, [r7, #4]
 800f08a:	e001      	b.n	800f090 <pvPortMalloc+0x68>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800f08c:	2300      	movs	r3, #0
 800f08e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2b00      	cmp	r3, #0
 800f094:	db69      	blt.n	800f16a <pvPortMalloc+0x142>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d066      	beq.n	800f16a <pvPortMalloc+0x142>
 800f09c:	4b3c      	ldr	r3, [pc, #240]	@ (800f190 <pvPortMalloc+0x168>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d861      	bhi.n	800f16a <pvPortMalloc+0x142>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800f0a6:	4b3b      	ldr	r3, [pc, #236]	@ (800f194 <pvPortMalloc+0x16c>)
 800f0a8:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800f0aa:	4b3a      	ldr	r3, [pc, #232]	@ (800f194 <pvPortMalloc+0x16c>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f0b0:	e004      	b.n	800f0bc <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 800f0b2:	69fb      	ldr	r3, [r7, #28]
 800f0b4:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800f0b6:	69fb      	ldr	r3, [r7, #28]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f0bc:	69fb      	ldr	r3, [r7, #28]
 800f0be:	685b      	ldr	r3, [r3, #4]
 800f0c0:	687a      	ldr	r2, [r7, #4]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d903      	bls.n	800f0ce <pvPortMalloc+0xa6>
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d1f1      	bne.n	800f0b2 <pvPortMalloc+0x8a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800f0ce:	4b2f      	ldr	r3, [pc, #188]	@ (800f18c <pvPortMalloc+0x164>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	69fa      	ldr	r2, [r7, #28]
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	d048      	beq.n	800f16a <pvPortMalloc+0x142>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f0d8:	69bb      	ldr	r3, [r7, #24]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	2208      	movs	r2, #8
 800f0de:	4413      	add	r3, r2
 800f0e0:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f0e2:	69fb      	ldr	r3, [r7, #28]
 800f0e4:	681a      	ldr	r2, [r3, #0]
 800f0e6:	69bb      	ldr	r3, [r7, #24]
 800f0e8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f0ea:	69fb      	ldr	r3, [r7, #28]
 800f0ec:	685a      	ldr	r2, [r3, #4]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	1ad2      	subs	r2, r2, r3
 800f0f2:	2308      	movs	r3, #8
 800f0f4:	005b      	lsls	r3, r3, #1
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d918      	bls.n	800f12c <pvPortMalloc+0x104>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f0fa:	69fa      	ldr	r2, [r7, #28]
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	4413      	add	r3, r2
 800f100:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	f003 0307 	and.w	r3, r3, #7
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d003      	beq.n	800f114 <pvPortMalloc+0xec>
 800f10c:	f7ff ff24 	bl	800ef58 <ulSetInterruptMask>
 800f110:	bf00      	nop
 800f112:	e7fd      	b.n	800f110 <pvPortMalloc+0xe8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f114:	69fb      	ldr	r3, [r7, #28]
 800f116:	685a      	ldr	r2, [r3, #4]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	1ad2      	subs	r2, r2, r3
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800f120:	69fb      	ldr	r3, [r7, #28]
 800f122:	687a      	ldr	r2, [r7, #4]
 800f124:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f126:	68f8      	ldr	r0, [r7, #12]
 800f128:	f000 f8e2 	bl	800f2f0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f12c:	4b18      	ldr	r3, [pc, #96]	@ (800f190 <pvPortMalloc+0x168>)
 800f12e:	681a      	ldr	r2, [r3, #0]
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	685b      	ldr	r3, [r3, #4]
 800f134:	1ad3      	subs	r3, r2, r3
 800f136:	4a16      	ldr	r2, [pc, #88]	@ (800f190 <pvPortMalloc+0x168>)
 800f138:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f13a:	4b15      	ldr	r3, [pc, #84]	@ (800f190 <pvPortMalloc+0x168>)
 800f13c:	681a      	ldr	r2, [r3, #0]
 800f13e:	4b16      	ldr	r3, [pc, #88]	@ (800f198 <pvPortMalloc+0x170>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	429a      	cmp	r2, r3
 800f144:	d203      	bcs.n	800f14e <pvPortMalloc+0x126>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f146:	4b12      	ldr	r3, [pc, #72]	@ (800f190 <pvPortMalloc+0x168>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	4a13      	ldr	r2, [pc, #76]	@ (800f198 <pvPortMalloc+0x170>)
 800f14c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800f14e:	69fb      	ldr	r3, [r7, #28]
 800f150:	685b      	ldr	r3, [r3, #4]
 800f152:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800f156:	69fb      	ldr	r3, [r7, #28]
 800f158:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800f15a:	69fb      	ldr	r3, [r7, #28]
 800f15c:	2200      	movs	r2, #0
 800f15e:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800f160:	4b0e      	ldr	r3, [pc, #56]	@ (800f19c <pvPortMalloc+0x174>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	3301      	adds	r3, #1
 800f166:	4a0d      	ldr	r2, [pc, #52]	@ (800f19c <pvPortMalloc+0x174>)
 800f168:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800f16a:	f7fe faf1 	bl	800d750 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	f003 0307 	and.w	r3, r3, #7
 800f174:	2b00      	cmp	r3, #0
 800f176:	d003      	beq.n	800f180 <pvPortMalloc+0x158>
 800f178:	f7ff feee 	bl	800ef58 <ulSetInterruptMask>
 800f17c:	bf00      	nop
 800f17e:	e7fd      	b.n	800f17c <pvPortMalloc+0x154>
    return pvReturn;
 800f180:	697b      	ldr	r3, [r7, #20]
}
 800f182:	4618      	mov	r0, r3
 800f184:	3720      	adds	r7, #32
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
 800f18a:	bf00      	nop
 800f18c:	2005a644 	.word	0x2005a644
 800f190:	2005a648 	.word	0x2005a648
 800f194:	2005a63c 	.word	0x2005a63c
 800f198:	2005a64c 	.word	0x2005a64c
 800f19c:	2005a650 	.word	0x2005a650

0800f1a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b084      	sub	sp, #16
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d037      	beq.n	800f222 <vPortFree+0x82>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800f1b2:	2308      	movs	r3, #8
 800f1b4:	425b      	negs	r3, r3
 800f1b6:	68fa      	ldr	r2, [r7, #12]
 800f1b8:	4413      	add	r3, r2
 800f1ba:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	db03      	blt.n	800f1d0 <vPortFree+0x30>
 800f1c8:	f7ff fec6 	bl	800ef58 <ulSetInterruptMask>
 800f1cc:	bf00      	nop
 800f1ce:	e7fd      	b.n	800f1cc <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d003      	beq.n	800f1e0 <vPortFree+0x40>
 800f1d8:	f7ff febe 	bl	800ef58 <ulSetInterruptMask>
 800f1dc:	bf00      	nop
 800f1de:	e7fd      	b.n	800f1dc <vPortFree+0x3c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	da1c      	bge.n	800f222 <vPortFree+0x82>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d118      	bne.n	800f222 <vPortFree+0x82>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	685b      	ldr	r3, [r3, #4]
 800f1f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800f1fc:	f7fe fa9a 	bl	800d734 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	685a      	ldr	r2, [r3, #4]
 800f204:	4b09      	ldr	r3, [pc, #36]	@ (800f22c <vPortFree+0x8c>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4413      	add	r3, r2
 800f20a:	4a08      	ldr	r2, [pc, #32]	@ (800f22c <vPortFree+0x8c>)
 800f20c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f20e:	68b8      	ldr	r0, [r7, #8]
 800f210:	f000 f86e 	bl	800f2f0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800f214:	4b06      	ldr	r3, [pc, #24]	@ (800f230 <vPortFree+0x90>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	3301      	adds	r3, #1
 800f21a:	4a05      	ldr	r2, [pc, #20]	@ (800f230 <vPortFree+0x90>)
 800f21c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800f21e:	f7fe fa97 	bl	800d750 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800f222:	bf00      	nop
 800f224:	3710      	adds	r7, #16
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	2005a648 	.word	0x2005a648
 800f230:	2005a654 	.word	0x2005a654

0800f234 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800f234:	b480      	push	{r7}
 800f236:	b085      	sub	sp, #20
 800f238:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f23a:	4b27      	ldr	r3, [pc, #156]	@ (800f2d8 <prvHeapInit+0xa4>)
 800f23c:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800f23e:	4b27      	ldr	r3, [pc, #156]	@ (800f2dc <prvHeapInit+0xa8>)
 800f240:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f003 0307 	and.w	r3, r3, #7
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d00c      	beq.n	800f266 <prvHeapInit+0x32>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	3307      	adds	r3, #7
 800f250:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	f023 0307 	bic.w	r3, r3, #7
 800f258:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 800f25a:	68ba      	ldr	r2, [r7, #8]
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	1ad3      	subs	r3, r2, r3
 800f260:	4a1e      	ldr	r2, [pc, #120]	@ (800f2dc <prvHeapInit+0xa8>)
 800f262:	4413      	add	r3, r2
 800f264:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f26a:	4a1d      	ldr	r2, [pc, #116]	@ (800f2e0 <prvHeapInit+0xac>)
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800f270:	4b1b      	ldr	r3, [pc, #108]	@ (800f2e0 <prvHeapInit+0xac>)
 800f272:	2200      	movs	r2, #0
 800f274:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ( pucAlignedHeap + xTotalHeapSize );
 800f276:	687a      	ldr	r2, [r7, #4]
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	4413      	add	r3, r2
 800f27c:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800f27e:	2208      	movs	r2, #8
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	1a9b      	subs	r3, r3, r2
 800f284:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	f023 0307 	bic.w	r3, r3, #7
 800f28c:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	4a14      	ldr	r2, [pc, #80]	@ (800f2e4 <prvHeapInit+0xb0>)
 800f292:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800f294:	4b13      	ldr	r3, [pc, #76]	@ (800f2e4 <prvHeapInit+0xb0>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	2200      	movs	r2, #0
 800f29a:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800f29c:	4b11      	ldr	r3, [pc, #68]	@ (800f2e4 <prvHeapInit+0xb0>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	68fa      	ldr	r2, [r7, #12]
 800f2ac:	1ad2      	subs	r2, r2, r3
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f2b2:	4b0c      	ldr	r3, [pc, #48]	@ (800f2e4 <prvHeapInit+0xb0>)
 800f2b4:	681a      	ldr	r2, [r3, #0]
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	4a0a      	ldr	r2, [pc, #40]	@ (800f2e8 <prvHeapInit+0xb4>)
 800f2c0:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	685b      	ldr	r3, [r3, #4]
 800f2c6:	4a09      	ldr	r2, [pc, #36]	@ (800f2ec <prvHeapInit+0xb8>)
 800f2c8:	6013      	str	r3, [r2, #0]
}
 800f2ca:	bf00      	nop
 800f2cc:	3714      	adds	r7, #20
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d4:	4770      	bx	lr
 800f2d6:	bf00      	nop
 800f2d8:	00013880 	.word	0x00013880
 800f2dc:	20046dbc 	.word	0x20046dbc
 800f2e0:	2005a63c 	.word	0x2005a63c
 800f2e4:	2005a644 	.word	0x2005a644
 800f2e8:	2005a64c 	.word	0x2005a64c
 800f2ec:	2005a648 	.word	0x2005a648

0800f2f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b085      	sub	sp, #20
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f2f8:	4b28      	ldr	r3, [pc, #160]	@ (800f39c <prvInsertBlockIntoFreeList+0xac>)
 800f2fa:	60fb      	str	r3, [r7, #12]
 800f2fc:	e002      	b.n	800f304 <prvInsertBlockIntoFreeList+0x14>
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	60fb      	str	r3, [r7, #12]
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	687a      	ldr	r2, [r7, #4]
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d8f7      	bhi.n	800f2fe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	685b      	ldr	r3, [r3, #4]
 800f316:	68ba      	ldr	r2, [r7, #8]
 800f318:	4413      	add	r3, r2
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d108      	bne.n	800f332 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	685a      	ldr	r2, [r3, #4]
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	441a      	add	r2, r3
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	685b      	ldr	r3, [r3, #4]
 800f33a:	68ba      	ldr	r2, [r7, #8]
 800f33c:	441a      	add	r2, r3
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	429a      	cmp	r2, r3
 800f344:	d118      	bne.n	800f378 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	681a      	ldr	r2, [r3, #0]
 800f34a:	4b15      	ldr	r3, [pc, #84]	@ (800f3a0 <prvInsertBlockIntoFreeList+0xb0>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	429a      	cmp	r2, r3
 800f350:	d00d      	beq.n	800f36e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	685a      	ldr	r2, [r3, #4]
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	441a      	add	r2, r3
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	681a      	ldr	r2, [r3, #0]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	601a      	str	r2, [r3, #0]
 800f36c:	e008      	b.n	800f380 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f36e:	4b0c      	ldr	r3, [pc, #48]	@ (800f3a0 <prvInsertBlockIntoFreeList+0xb0>)
 800f370:	681a      	ldr	r2, [r3, #0]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	601a      	str	r2, [r3, #0]
 800f376:	e003      	b.n	800f380 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	681a      	ldr	r2, [r3, #0]
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800f380:	68fa      	ldr	r2, [r7, #12]
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	429a      	cmp	r2, r3
 800f386:	d002      	beq.n	800f38e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	687a      	ldr	r2, [r7, #4]
 800f38c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800f38e:	bf00      	nop
 800f390:	3714      	adds	r7, #20
 800f392:	46bd      	mov	sp, r7
 800f394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f398:	4770      	bx	lr
 800f39a:	bf00      	nop
 800f39c:	2005a63c 	.word	0x2005a63c
 800f3a0:	2005a644 	.word	0x2005a644

0800f3a4 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	af00      	add	r7, sp, #0
}
 800f3a8:	bf00      	nop
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b0:	4770      	bx	lr

0800f3b2 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800f3b2:	b580      	push	{r7, lr}
 800f3b4:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800f3b6:	f004 fda5 	bl	8013f04 <touchgfx_components_init>
    touchgfx_init();
 800f3ba:	f004 fd71 	bl	8013ea0 <touchgfx_init>
}
 800f3be:	bf00      	nop
 800f3c0:	bd80      	pop	{r7, pc}

0800f3c2 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800f3c2:	b580      	push	{r7, lr}
 800f3c4:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 800f3c6:	f004 fda5 	bl	8013f14 <touchgfx_taskEntry>
}
 800f3ca:	bf00      	nop
 800f3cc:	bd80      	pop	{r7, pc}
	...

0800f3d0 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800f3d0:	b480      	push	{r7}
 800f3d2:	b083      	sub	sp, #12
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
    {
 800f3d8:	4a04      	ldr	r2, [pc, #16]	@ (800f3ec <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	601a      	str	r2, [r3, #0]
    }
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	370c      	adds	r7, #12
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ea:	4770      	bx	lr
 800f3ec:	0802fb14 	.word	0x0802fb14

0800f3f0 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
    }
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f7ff ffe9 	bl	800f3d0 <_ZN8touchgfx12FontProviderD1Ev>
 800f3fe:	2104      	movs	r1, #4
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f01d fcb8 	bl	802cd76 <_ZdlPvj>
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	4618      	mov	r0, r3
 800f40a:	3708      	adds	r7, #8
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b082      	sub	sp, #8
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	460b      	mov	r3, r1
 800f41a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f41c:	887b      	ldrh	r3, [r7, #2]
 800f41e:	2b02      	cmp	r3, #2
 800f420:	d010      	beq.n	800f444 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800f422:	2b02      	cmp	r3, #2
 800f424:	dc13      	bgt.n	800f44e <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800f426:	2b00      	cmp	r3, #0
 800f428:	d002      	beq.n	800f430 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800f42a:	2b01      	cmp	r3, #1
 800f42c:	d005      	beq.n	800f43a <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800f42e:	e00e      	b.n	800f44e <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f430:	f002 fbce 	bl	8011bd0 <_ZN17TypedTextDatabase8getFontsEv>
 800f434:	4603      	mov	r3, r0
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	e00a      	b.n	800f450 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f43a:	f002 fbc9 	bl	8011bd0 <_ZN17TypedTextDatabase8getFontsEv>
 800f43e:	4603      	mov	r3, r0
 800f440:	685b      	ldr	r3, [r3, #4]
 800f442:	e005      	b.n	800f450 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f444:	f002 fbc4 	bl	8011bd0 <_ZN17TypedTextDatabase8getFontsEv>
 800f448:	4603      	mov	r3, r0
 800f44a:	689b      	ldr	r3, [r3, #8]
 800f44c:	e000      	b.n	800f450 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800f44e:	2300      	movs	r3, #0
    }
}
 800f450:	4618      	mov	r0, r3
 800f452:	3708      	adds	r7, #8
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}

0800f458 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f458:	b580      	push	{r7, lr}
 800f45a:	b082      	sub	sp, #8
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	4a05      	ldr	r2, [pc, #20]	@ (800f478 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	601a      	str	r2, [r3, #0]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	4618      	mov	r0, r3
 800f46a:	f7ff ffb1 	bl	800f3d0 <_ZN8touchgfx12FontProviderD1Ev>
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	4618      	mov	r0, r3
 800f472:	3708      	adds	r7, #8
 800f474:	46bd      	mov	sp, r7
 800f476:	bd80      	pop	{r7, pc}
 800f478:	0802fb00 	.word	0x0802fb00

0800f47c <_ZN23ApplicationFontProviderD0Ev>:
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f7ff ffe7 	bl	800f458 <_ZN23ApplicationFontProviderD1Ev>
 800f48a:	2104      	movs	r1, #4
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f01d fc72 	bl	802cd76 <_ZdlPvj>
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	4618      	mov	r0, r3
 800f496:	3708      	adds	r7, #8
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}

0800f49c <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800f49c:	b480      	push	{r7}
 800f49e:	b083      	sub	sp, #12
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
    {
 800f4a4:	4a04      	ldr	r2, [pc, #16]	@ (800f4b8 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	601a      	str	r2, [r3, #0]
    }
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	370c      	adds	r7, #12
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr
 800f4b8:	08030078 	.word	0x08030078

0800f4bc <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
    }
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f7ff ffe9 	bl	800f49c <_ZN8touchgfx4FontD1Ev>
 800f4ca:	2114      	movs	r1, #20
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f01d fc52 	bl	802cd76 <_ZdlPvj>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3708      	adds	r7, #8
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}

0800f4dc <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800f4dc:	b590      	push	{r4, r7, lr}
 800f4de:	b087      	sub	sp, #28
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	460b      	mov	r3, r1
 800f4e6:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800f4e8:	887b      	ldrh	r3, [r7, #2]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d101      	bne.n	800f4f2 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	e010      	b.n	800f514 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	3308      	adds	r3, #8
 800f500:	681c      	ldr	r4, [r3, #0]
 800f502:	f107 030f 	add.w	r3, r7, #15
 800f506:	f107 0210 	add.w	r2, r7, #16
 800f50a:	8879      	ldrh	r1, [r7, #2]
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	47a0      	blx	r4
 800f510:	6178      	str	r0, [r7, #20]
        return glyph;
 800f512:	697b      	ldr	r3, [r7, #20]
    }
 800f514:	4618      	mov	r0, r3
 800f516:	371c      	adds	r7, #28
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd90      	pop	{r4, r7, pc}

0800f51c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800f51c:	b480      	push	{r7}
 800f51e:	b083      	sub	sp, #12
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	89db      	ldrh	r3, [r3, #14]
    }
 800f528:	4618      	mov	r0, r3
 800f52a:	370c      	adds	r7, #12
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr

0800f534 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800f534:	b480      	push	{r7}
 800f536:	b083      	sub	sp, #12
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	8a1b      	ldrh	r3, [r3, #16]
    }
 800f540:	4618      	mov	r0, r3
 800f542:	370c      	adds	r7, #12
 800f544:	46bd      	mov	sp, r7
 800f546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54a:	4770      	bx	lr

0800f54c <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800f54c:	b480      	push	{r7}
 800f54e:	b083      	sub	sp, #12
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	88db      	ldrh	r3, [r3, #6]
    }
 800f558:	4618      	mov	r0, r3
 800f55a:	370c      	adds	r7, #12
 800f55c:	46bd      	mov	sp, r7
 800f55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f562:	4770      	bx	lr

0800f564 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800f564:	b480      	push	{r7}
 800f566:	b083      	sub	sp, #12
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	889b      	ldrh	r3, [r3, #4]
    }
 800f570:	4618      	mov	r0, r3
 800f572:	370c      	adds	r7, #12
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	4770      	bx	lr

0800f57c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800f57c:	b480      	push	{r7}
 800f57e:	b083      	sub	sp, #12
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	7a9b      	ldrb	r3, [r3, #10]
 800f588:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800f58c:	b2db      	uxtb	r3, r3
    }
 800f58e:	4618      	mov	r0, r3
 800f590:	370c      	adds	r7, #12
 800f592:	46bd      	mov	sp, r7
 800f594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f598:	4770      	bx	lr

0800f59a <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800f59a:	b480      	push	{r7}
 800f59c:	b083      	sub	sp, #12
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	7a9b      	ldrb	r3, [r3, #10]
 800f5a6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f5aa:	b2db      	uxtb	r3, r3
    }
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	370c      	adds	r7, #12
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b6:	4770      	bx	lr

0800f5b8 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800f5b8:	b480      	push	{r7}
 800f5ba:	b083      	sub	sp, #12
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
    {
        return false;
 800f5c0:	2300      	movs	r3, #0
    }
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	370c      	adds	r7, #12
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5cc:	4770      	bx	lr

0800f5ce <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800f5ce:	b480      	push	{r7}
 800f5d0:	b083      	sub	sp, #12
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f5d6:	f04f 0300 	mov.w	r3, #0
 800f5da:	ee07 3a90 	vmov	s15, r3
    }
 800f5de:	eeb0 0a67 	vmov.f32	s0, s15
 800f5e2:	370c      	adds	r7, #12
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	4a05      	ldr	r2, [pc, #20]	@ (800f60c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	601a      	str	r2, [r3, #0]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7ff ff4d 	bl	800f49c <_ZN8touchgfx4FontD1Ev>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	4618      	mov	r0, r3
 800f606:	3708      	adds	r7, #8
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}
 800f60c:	08031058 	.word	0x08031058

0800f610 <_ZN8touchgfx9ConstFontD0Ev>:
 800f610:	b580      	push	{r7, lr}
 800f612:	b082      	sub	sp, #8
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f7ff ffe7 	bl	800f5ec <_ZN8touchgfx9ConstFontD1Ev>
 800f61e:	211c      	movs	r1, #28
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f01d fba8 	bl	802cd76 <_ZdlPvj>
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	4618      	mov	r0, r3
 800f62a:	3708      	adds	r7, #8
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}

0800f630 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800f630:	b580      	push	{r7, lr}
 800f632:	b082      	sub	sp, #8
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	4a05      	ldr	r2, [pc, #20]	@ (800f650 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	601a      	str	r2, [r3, #0]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	4618      	mov	r0, r3
 800f642:	f7ff ffd3 	bl	800f5ec <_ZN8touchgfx9ConstFontD1Ev>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	4618      	mov	r0, r3
 800f64a:	3708      	adds	r7, #8
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}
 800f650:	0802fb28 	.word	0x0802fb28

0800f654 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f654:	b580      	push	{r7, lr}
 800f656:	b082      	sub	sp, #8
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f7ff ffe7 	bl	800f630 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f662:	212c      	movs	r1, #44	@ 0x2c
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f01d fb86 	bl	802cd76 <_ZdlPvj>
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	4618      	mov	r0, r3
 800f66e:	3708      	adds	r7, #8
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}

0800f674 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f674:	b480      	push	{r7}
 800f676:	af00      	add	r7, sp, #0
    {
        return instance;
 800f678:	4b03      	ldr	r3, [pc, #12]	@ (800f688 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f67a:	681b      	ldr	r3, [r3, #0]
    }
 800f67c:	4618      	mov	r0, r3
 800f67e:	46bd      	mov	sp, r7
 800f680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f684:	4770      	bx	lr
 800f686:	bf00      	nop
 800f688:	2005bd1c 	.word	0x2005bd1c

0800f68c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800f68c:	b480      	push	{r7}
 800f68e:	b083      	sub	sp, #12
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800f698:	4618      	mov	r0, r3
 800f69a:	370c      	adds	r7, #12
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr

0800f6a4 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800f6a4:	b480      	push	{r7}
 800f6a6:	b083      	sub	sp, #12
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	370c      	adds	r7, #12
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr

0800f6bc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <math.h>
#include <stddef.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b08e      	sub	sp, #56	@ 0x38
 800f6c0:	af0a      	add	r7, sp, #40	@ 0x28
 800f6c2:	60f8      	str	r0, [r7, #12]
 800f6c4:	60b9      	str	r1, [r7, #8]
 800f6c6:	4611      	mov	r1, r2
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	460b      	mov	r3, r1
 800f6cc:	80fb      	strh	r3, [r7, #6]
 800f6ce:	4613      	mov	r3, r2
 800f6d0:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800f6d2:	68f8      	ldr	r0, [r7, #12]
 800f6d4:	88b9      	ldrh	r1, [r7, #4]
 800f6d6:	88fa      	ldrh	r2, [r7, #6]
 800f6d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800f6dc:	9308      	str	r3, [sp, #32]
 800f6de:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f6e0:	9307      	str	r3, [sp, #28]
 800f6e2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800f6e6:	9306      	str	r3, [sp, #24]
 800f6e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f6ec:	9305      	str	r3, [sp, #20]
 800f6ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f6f2:	9304      	str	r3, [sp, #16]
 800f6f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f6f8:	9303      	str	r3, [sp, #12]
 800f6fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f6fe:	9302      	str	r3, [sp, #8]
 800f700:	7f3b      	ldrb	r3, [r7, #28]
 800f702:	9301      	str	r3, [sp, #4]
 800f704:	8b3b      	ldrh	r3, [r7, #24]
 800f706:	9300      	str	r3, [sp, #0]
 800f708:	460b      	mov	r3, r1
 800f70a:	68b9      	ldr	r1, [r7, #8]
 800f70c:	f00c feae 	bl	801c46c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800f710:	4a09      	ldr	r2, [pc, #36]	@ (800f738 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f71a:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f720:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f726:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f72c:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	4618      	mov	r0, r3
 800f732:	3710      	adds	r7, #16
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}
 800f738:	0802fb28 	.word	0x0802fb28

0800f73c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f73c:	b480      	push	{r7}
 800f73e:	b087      	sub	sp, #28
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	6039      	str	r1, [r7, #0]
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	617b      	str	r3, [r7, #20]
    uint32_t offset = dataOffset[0];
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	881b      	ldrh	r3, [r3, #0]
 800f74e:	b29b      	uxth	r3, r3
 800f750:	613b      	str	r3, [r7, #16]
    offset |= dataOffset[1] << 16;
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	3302      	adds	r3, #2
 800f756:	881b      	ldrh	r3, [r3, #0]
 800f758:	b29b      	uxth	r3, r3
 800f75a:	041b      	lsls	r3, r3, #16
 800f75c:	461a      	mov	r2, r3
 800f75e:	693b      	ldr	r3, [r7, #16]
 800f760:	4313      	orrs	r3, r2
 800f762:	613b      	str	r3, [r7, #16]

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	69db      	ldr	r3, [r3, #28]
 800f768:	60fb      	str	r3, [r7, #12]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	889b      	ldrh	r3, [r3, #4]
 800f76e:	0adb      	lsrs	r3, r3, #11
 800f770:	b29b      	uxth	r3, r3
 800f772:	009b      	lsls	r3, r3, #2
 800f774:	68fa      	ldr	r2, [r7, #12]
 800f776:	4413      	add	r3, r2
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	60bb      	str	r3, [r7, #8]
    return pixels + offset;
 800f77c:	68ba      	ldr	r2, [r7, #8]
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	4413      	add	r3, r2
}
 800f782:	4618      	mov	r0, r3
 800f784:	371c      	adds	r7, #28
 800f786:	46bd      	mov	sp, r7
 800f788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78c:	4770      	bx	lr

0800f78e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f78e:	b480      	push	{r7}
 800f790:	b089      	sub	sp, #36	@ 0x24
 800f792:	af00      	add	r7, sp, #0
 800f794:	60f8      	str	r0, [r7, #12]
 800f796:	460b      	mov	r3, r1
 800f798:	607a      	str	r2, [r7, #4]
 800f79a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d003      	beq.n	800f7aa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	7b1b      	ldrb	r3, [r3, #12]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d101      	bne.n	800f7ae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	e032      	b.n	800f814 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	6a1a      	ldr	r2, [r3, #32]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	7b5b      	ldrb	r3, [r3, #13]
 800f7ba:	b21b      	sxth	r3, r3
 800f7bc:	021b      	lsls	r3, r3, #8
 800f7be:	b21b      	sxth	r3, r3
 800f7c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f7c4:	b219      	sxth	r1, r3
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	7adb      	ldrb	r3, [r3, #11]
 800f7ca:	b21b      	sxth	r3, r3
 800f7cc:	430b      	orrs	r3, r1
 800f7ce:	b21b      	sxth	r3, r3
 800f7d0:	b29b      	uxth	r3, r3
 800f7d2:	009b      	lsls	r3, r3, #2
 800f7d4:	4413      	add	r3, r2
 800f7d6:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	7b1b      	ldrb	r3, [r3, #12]
 800f7dc:	837b      	strh	r3, [r7, #26]
 800f7de:	e013      	b.n	800f808 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7a>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800f7e0:	69fb      	ldr	r3, [r7, #28]
 800f7e2:	881b      	ldrh	r3, [r3, #0]
 800f7e4:	897a      	ldrh	r2, [r7, #10]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d103      	bne.n	800f7f2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x64>
        {
            return kerndata->distance;
 800f7ea:	69fb      	ldr	r3, [r7, #28]
 800f7ec:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f7f0:	e010      	b.n	800f814 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800f7f2:	69fb      	ldr	r3, [r7, #28]
 800f7f4:	881b      	ldrh	r3, [r3, #0]
 800f7f6:	897a      	ldrh	r2, [r7, #10]
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	d309      	bcc.n	800f810 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f7fc:	8b7b      	ldrh	r3, [r7, #26]
 800f7fe:	3b01      	subs	r3, #1
 800f800:	837b      	strh	r3, [r7, #26]
 800f802:	69fb      	ldr	r3, [r7, #28]
 800f804:	3304      	adds	r3, #4
 800f806:	61fb      	str	r3, [r7, #28]
 800f808:	8b7b      	ldrh	r3, [r7, #26]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d1e8      	bne.n	800f7e0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
 800f80e:	e000      	b.n	800f812 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        {
            break;
 800f810:	bf00      	nop
        }
    }
    return 0;
 800f812:	2300      	movs	r3, #0
}
 800f814:	4618      	mov	r0, r3
 800f816:	3724      	adds	r7, #36	@ 0x24
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr

0800f820 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800f820:	b580      	push	{r7, lr}
 800f822:	af00      	add	r7, sp, #0
 800f824:	4801      	ldr	r0, [pc, #4]	@ (800f82c <__tcf_0+0xc>)
 800f826:	f7ff ff03 	bl	800f630 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	2005a658 	.word	0x2005a658

0800f830 <_Z23getFont_verdana_10_4bppv>:
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b08e      	sub	sp, #56	@ 0x38
 800f834:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800f836:	4b20      	ldr	r3, [pc, #128]	@ (800f8b8 <_Z23getFont_verdana_10_4bppv+0x88>)
 800f838:	e8d3 3faf 	lda	r3, [r3]
 800f83c:	f003 0301 	and.w	r3, r3, #1
 800f840:	2b00      	cmp	r3, #0
 800f842:	bf0c      	ite	eq
 800f844:	2301      	moveq	r3, #1
 800f846:	2300      	movne	r3, #0
 800f848:	b2db      	uxtb	r3, r3
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d030      	beq.n	800f8b0 <_Z23getFont_verdana_10_4bppv+0x80>
 800f84e:	481a      	ldr	r0, [pc, #104]	@ (800f8b8 <_Z23getFont_verdana_10_4bppv+0x88>)
 800f850:	f01d fa93 	bl	802cd7a <__cxa_guard_acquire>
 800f854:	4603      	mov	r3, r0
 800f856:	2b00      	cmp	r3, #0
 800f858:	bf14      	ite	ne
 800f85a:	2301      	movne	r3, #1
 800f85c:	2300      	moveq	r3, #0
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	2b00      	cmp	r3, #0
 800f862:	d025      	beq.n	800f8b0 <_Z23getFont_verdana_10_4bppv+0x80>
 800f864:	2300      	movs	r3, #0
 800f866:	930c      	str	r3, [sp, #48]	@ 0x30
 800f868:	2300      	movs	r3, #0
 800f86a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f86c:	2300      	movs	r3, #0
 800f86e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f870:	233f      	movs	r3, #63	@ 0x3f
 800f872:	9309      	str	r3, [sp, #36]	@ 0x24
 800f874:	4b11      	ldr	r3, [pc, #68]	@ (800f8bc <_Z23getFont_verdana_10_4bppv+0x8c>)
 800f876:	9308      	str	r3, [sp, #32]
 800f878:	4b11      	ldr	r3, [pc, #68]	@ (800f8c0 <_Z23getFont_verdana_10_4bppv+0x90>)
 800f87a:	9307      	str	r3, [sp, #28]
 800f87c:	2300      	movs	r3, #0
 800f87e:	9306      	str	r3, [sp, #24]
 800f880:	2300      	movs	r3, #0
 800f882:	9305      	str	r3, [sp, #20]
 800f884:	2301      	movs	r3, #1
 800f886:	9304      	str	r3, [sp, #16]
 800f888:	2304      	movs	r3, #4
 800f88a:	9303      	str	r3, [sp, #12]
 800f88c:	2300      	movs	r3, #0
 800f88e:	9302      	str	r3, [sp, #8]
 800f890:	2300      	movs	r3, #0
 800f892:	9301      	str	r3, [sp, #4]
 800f894:	230a      	movs	r3, #10
 800f896:	9300      	str	r3, [sp, #0]
 800f898:	230a      	movs	r3, #10
 800f89a:	2201      	movs	r2, #1
 800f89c:	4909      	ldr	r1, [pc, #36]	@ (800f8c4 <_Z23getFont_verdana_10_4bppv+0x94>)
 800f89e:	480a      	ldr	r0, [pc, #40]	@ (800f8c8 <_Z23getFont_verdana_10_4bppv+0x98>)
 800f8a0:	f7ff ff0c 	bl	800f6bc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f8a4:	4809      	ldr	r0, [pc, #36]	@ (800f8cc <_Z23getFont_verdana_10_4bppv+0x9c>)
 800f8a6:	f01e f979 	bl	802db9c <atexit>
 800f8aa:	4803      	ldr	r0, [pc, #12]	@ (800f8b8 <_Z23getFont_verdana_10_4bppv+0x88>)
 800f8ac:	f01d fa71 	bl	802cd92 <__cxa_guard_release>
    return verdana_10_4bpp;
 800f8b0:	4b05      	ldr	r3, [pc, #20]	@ (800f8c8 <_Z23getFont_verdana_10_4bppv+0x98>)
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}
 800f8b8:	2005a684 	.word	0x2005a684
 800f8bc:	08031a54 	.word	0x08031a54
 800f8c0:	08031a60 	.word	0x08031a60
 800f8c4:	08031a24 	.word	0x08031a24
 800f8c8:	2005a658 	.word	0x2005a658
 800f8cc:	0800f821 	.word	0x0800f821

0800f8d0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	af00      	add	r7, sp, #0
 800f8d4:	4801      	ldr	r0, [pc, #4]	@ (800f8dc <__tcf_0+0xc>)
 800f8d6:	f7ff feab 	bl	800f630 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	2005a688 	.word	0x2005a688

0800f8e0 <_Z23getFont_verdana_20_4bppv>:
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b08e      	sub	sp, #56	@ 0x38
 800f8e4:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800f8e6:	4b20      	ldr	r3, [pc, #128]	@ (800f968 <_Z23getFont_verdana_20_4bppv+0x88>)
 800f8e8:	e8d3 3faf 	lda	r3, [r3]
 800f8ec:	f003 0301 	and.w	r3, r3, #1
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	bf0c      	ite	eq
 800f8f4:	2301      	moveq	r3, #1
 800f8f6:	2300      	movne	r3, #0
 800f8f8:	b2db      	uxtb	r3, r3
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d030      	beq.n	800f960 <_Z23getFont_verdana_20_4bppv+0x80>
 800f8fe:	481a      	ldr	r0, [pc, #104]	@ (800f968 <_Z23getFont_verdana_20_4bppv+0x88>)
 800f900:	f01d fa3b 	bl	802cd7a <__cxa_guard_acquire>
 800f904:	4603      	mov	r3, r0
 800f906:	2b00      	cmp	r3, #0
 800f908:	bf14      	ite	ne
 800f90a:	2301      	movne	r3, #1
 800f90c:	2300      	moveq	r3, #0
 800f90e:	b2db      	uxtb	r3, r3
 800f910:	2b00      	cmp	r3, #0
 800f912:	d025      	beq.n	800f960 <_Z23getFont_verdana_20_4bppv+0x80>
 800f914:	2300      	movs	r3, #0
 800f916:	930c      	str	r3, [sp, #48]	@ 0x30
 800f918:	2300      	movs	r3, #0
 800f91a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f91c:	2300      	movs	r3, #0
 800f91e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f920:	233f      	movs	r3, #63	@ 0x3f
 800f922:	9309      	str	r3, [sp, #36]	@ 0x24
 800f924:	4b11      	ldr	r3, [pc, #68]	@ (800f96c <_Z23getFont_verdana_20_4bppv+0x8c>)
 800f926:	9308      	str	r3, [sp, #32]
 800f928:	4b11      	ldr	r3, [pc, #68]	@ (800f970 <_Z23getFont_verdana_20_4bppv+0x90>)
 800f92a:	9307      	str	r3, [sp, #28]
 800f92c:	2300      	movs	r3, #0
 800f92e:	9306      	str	r3, [sp, #24]
 800f930:	2300      	movs	r3, #0
 800f932:	9305      	str	r3, [sp, #20]
 800f934:	2301      	movs	r3, #1
 800f936:	9304      	str	r3, [sp, #16]
 800f938:	2304      	movs	r3, #4
 800f93a:	9303      	str	r3, [sp, #12]
 800f93c:	2300      	movs	r3, #0
 800f93e:	9302      	str	r3, [sp, #8]
 800f940:	2300      	movs	r3, #0
 800f942:	9301      	str	r3, [sp, #4]
 800f944:	2314      	movs	r3, #20
 800f946:	9300      	str	r3, [sp, #0]
 800f948:	2314      	movs	r3, #20
 800f94a:	2201      	movs	r2, #1
 800f94c:	4909      	ldr	r1, [pc, #36]	@ (800f974 <_Z23getFont_verdana_20_4bppv+0x94>)
 800f94e:	480a      	ldr	r0, [pc, #40]	@ (800f978 <_Z23getFont_verdana_20_4bppv+0x98>)
 800f950:	f7ff feb4 	bl	800f6bc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f954:	4809      	ldr	r0, [pc, #36]	@ (800f97c <_Z23getFont_verdana_20_4bppv+0x9c>)
 800f956:	f01e f921 	bl	802db9c <atexit>
 800f95a:	4803      	ldr	r0, [pc, #12]	@ (800f968 <_Z23getFont_verdana_20_4bppv+0x88>)
 800f95c:	f01d fa19 	bl	802cd92 <__cxa_guard_release>
    return verdana_20_4bpp;
 800f960:	4b05      	ldr	r3, [pc, #20]	@ (800f978 <_Z23getFont_verdana_20_4bppv+0x98>)
}
 800f962:	4618      	mov	r0, r3
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}
 800f968:	2005a6b4 	.word	0x2005a6b4
 800f96c:	08031a58 	.word	0x08031a58
 800f970:	08031a64 	.word	0x08031a64
 800f974:	08031a34 	.word	0x08031a34
 800f978:	2005a688 	.word	0x2005a688
 800f97c:	0800f8d1 	.word	0x0800f8d1

0800f980 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800f980:	b580      	push	{r7, lr}
 800f982:	af00      	add	r7, sp, #0
 800f984:	4801      	ldr	r0, [pc, #4]	@ (800f98c <__tcf_0+0xc>)
 800f986:	f7ff fe53 	bl	800f630 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f98a:	bd80      	pop	{r7, pc}
 800f98c:	2005a6b8 	.word	0x2005a6b8

0800f990 <_Z23getFont_verdana_40_4bppv>:
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b08e      	sub	sp, #56	@ 0x38
 800f994:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800f996:	4b20      	ldr	r3, [pc, #128]	@ (800fa18 <_Z23getFont_verdana_40_4bppv+0x88>)
 800f998:	e8d3 3faf 	lda	r3, [r3]
 800f99c:	f003 0301 	and.w	r3, r3, #1
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	bf0c      	ite	eq
 800f9a4:	2301      	moveq	r3, #1
 800f9a6:	2300      	movne	r3, #0
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d030      	beq.n	800fa10 <_Z23getFont_verdana_40_4bppv+0x80>
 800f9ae:	481a      	ldr	r0, [pc, #104]	@ (800fa18 <_Z23getFont_verdana_40_4bppv+0x88>)
 800f9b0:	f01d f9e3 	bl	802cd7a <__cxa_guard_acquire>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	bf14      	ite	ne
 800f9ba:	2301      	movne	r3, #1
 800f9bc:	2300      	moveq	r3, #0
 800f9be:	b2db      	uxtb	r3, r3
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d025      	beq.n	800fa10 <_Z23getFont_verdana_40_4bppv+0x80>
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	930c      	str	r3, [sp, #48]	@ 0x30
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9d0:	233f      	movs	r3, #63	@ 0x3f
 800f9d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9d4:	4b11      	ldr	r3, [pc, #68]	@ (800fa1c <_Z23getFont_verdana_40_4bppv+0x8c>)
 800f9d6:	9308      	str	r3, [sp, #32]
 800f9d8:	4b11      	ldr	r3, [pc, #68]	@ (800fa20 <_Z23getFont_verdana_40_4bppv+0x90>)
 800f9da:	9307      	str	r3, [sp, #28]
 800f9dc:	2300      	movs	r3, #0
 800f9de:	9306      	str	r3, [sp, #24]
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	9305      	str	r3, [sp, #20]
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	9304      	str	r3, [sp, #16]
 800f9e8:	2304      	movs	r3, #4
 800f9ea:	9303      	str	r3, [sp, #12]
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	9302      	str	r3, [sp, #8]
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	9301      	str	r3, [sp, #4]
 800f9f4:	2328      	movs	r3, #40	@ 0x28
 800f9f6:	9300      	str	r3, [sp, #0]
 800f9f8:	2328      	movs	r3, #40	@ 0x28
 800f9fa:	2201      	movs	r2, #1
 800f9fc:	4909      	ldr	r1, [pc, #36]	@ (800fa24 <_Z23getFont_verdana_40_4bppv+0x94>)
 800f9fe:	480a      	ldr	r0, [pc, #40]	@ (800fa28 <_Z23getFont_verdana_40_4bppv+0x98>)
 800fa00:	f7ff fe5c 	bl	800f6bc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800fa04:	4809      	ldr	r0, [pc, #36]	@ (800fa2c <_Z23getFont_verdana_40_4bppv+0x9c>)
 800fa06:	f01e f8c9 	bl	802db9c <atexit>
 800fa0a:	4803      	ldr	r0, [pc, #12]	@ (800fa18 <_Z23getFont_verdana_40_4bppv+0x88>)
 800fa0c:	f01d f9c1 	bl	802cd92 <__cxa_guard_release>
    return verdana_40_4bpp;
 800fa10:	4b05      	ldr	r3, [pc, #20]	@ (800fa28 <_Z23getFont_verdana_40_4bppv+0x98>)
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}
 800fa18:	2005a6e4 	.word	0x2005a6e4
 800fa1c:	08031a5c 	.word	0x08031a5c
 800fa20:	08031a68 	.word	0x08031a68
 800fa24:	08031a44 	.word	0x08031a44
 800fa28:	2005a6b8 	.word	0x2005a6b8
 800fa2c:	0800f981 	.word	0x0800f981

0800fa30 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 800fa30:	b480      	push	{r7}
 800fa32:	b085      	sub	sp, #20
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	60f8      	str	r0, [r7, #12]
 800fa38:	60b9      	str	r1, [r7, #8]
 800fa3a:	607a      	str	r2, [r7, #4]
 800fa3c:	603b      	str	r3, [r7, #0]
    pointArray = 0;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	2200      	movs	r2, #0
 800fa42:	601a      	str	r2, [r3, #0]
    pointArraySize = 0;
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	2200      	movs	r2, #0
 800fa48:	601a      	str	r2, [r3, #0]
    commandArray = 0;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	601a      	str	r2, [r3, #0]
    commandArraySize = 0;
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	2200      	movs	r2, #0
 800fa54:	601a      	str	r2, [r3, #0]
}
 800fa56:	bf00      	nop
 800fa58:	3714      	adds	r7, #20
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr

0800fa62 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800fa62:	b480      	push	{r7}
 800fa64:	b083      	sub	sp, #12
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	6078      	str	r0, [r7, #4]
 800fa6a:	6039      	str	r1, [r7, #0]
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	4618      	mov	r0, r3
 800fa70:	370c      	adds	r7, #12
 800fa72:	46bd      	mov	sp, r7
 800fa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa78:	4770      	bx	lr

0800fa7a <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800fa7a:	b480      	push	{r7}
 800fa7c:	b083      	sub	sp, #12
 800fa7e:	af00      	add	r7, sp, #0
 800fa80:	6078      	str	r0, [r7, #4]
 800fa82:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800fa84:	bf00      	nop
 800fa86:	370c      	adds	r7, #12
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8e:	4770      	bx	lr

0800fa90 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800fa90:	b480      	push	{r7}
 800fa92:	b083      	sub	sp, #12
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
 800fa98:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800fa9a:	bf00      	nop
 800fa9c:	370c      	adds	r7, #12
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa4:	4770      	bx	lr

0800faa6 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800faa6:	b480      	push	{r7}
 800faa8:	b083      	sub	sp, #12
 800faaa:	af00      	add	r7, sp, #0
 800faac:	6078      	str	r0, [r7, #4]
 800faae:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800fab0:	bf00      	nop
 800fab2:	370c      	adds	r7, #12
 800fab4:	46bd      	mov	sp, r7
 800fab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faba:	4770      	bx	lr

0800fabc <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800fabc:	b480      	push	{r7}
 800fabe:	b083      	sub	sp, #12
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	460b      	mov	r3, r1
 800fac6:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800fac8:	bf00      	nop
 800faca:	370c      	adds	r7, #12
 800facc:	46bd      	mov	sp, r7
 800face:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad2:	4770      	bx	lr

0800fad4 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800fad4:	b480      	push	{r7}
 800fad6:	b083      	sub	sp, #12
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
    {
    }
 800fadc:	bf00      	nop
 800fade:	370c      	adds	r7, #12
 800fae0:	46bd      	mov	sp, r7
 800fae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae6:	4770      	bx	lr

0800fae8 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800fae8:	b480      	push	{r7}
 800faea:	b083      	sub	sp, #12
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
    {
    }
 800faf0:	bf00      	nop
 800faf2:	370c      	adds	r7, #12
 800faf4:	46bd      	mov	sp, r7
 800faf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafa:	4770      	bx	lr

0800fafc <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800fafc:	b480      	push	{r7}
 800fafe:	b083      	sub	sp, #12
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
    {
 800fb04:	4a04      	ldr	r2, [pc, #16]	@ (800fb18 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	601a      	str	r2, [r3, #0]
    }
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	370c      	adds	r7, #12
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr
 800fb18:	0802fcb0 	.word	0x0802fcb0

0800fb1c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b082      	sub	sp, #8
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
    }
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f7ff ffe9 	bl	800fafc <_ZN8touchgfx15UIEventListenerD1Ev>
 800fb2a:	2104      	movs	r1, #4
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f01d f922 	bl	802cd76 <_ZdlPvj>
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	4618      	mov	r0, r3
 800fb36:	3708      	adds	r7, #8
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}

0800fb3c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800fb3c:	b480      	push	{r7}
 800fb3e:	b083      	sub	sp, #12
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
    {
    }
 800fb44:	bf00      	nop
 800fb46:	370c      	adds	r7, #12
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4e:	4770      	bx	lr

0800fb50 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800fb50:	b480      	push	{r7}
 800fb52:	b083      	sub	sp, #12
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	460b      	mov	r3, r1
 800fb5a:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800fb5c:	bf00      	nop
 800fb5e:	370c      	adds	r7, #12
 800fb60:	46bd      	mov	sp, r7
 800fb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb66:	4770      	bx	lr

0800fb68 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800fb68:	b480      	push	{r7}
 800fb6a:	b083      	sub	sp, #12
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	683a      	ldr	r2, [r7, #0]
 800fb76:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800fb7a:	6810      	ldr	r0, [r2, #0]
 800fb7c:	6851      	ldr	r1, [r2, #4]
 800fb7e:	c303      	stmia	r3!, {r0, r1}
    }
 800fb80:	bf00      	nop
 800fb82:	370c      	adds	r7, #12
 800fb84:	46bd      	mov	sp, r7
 800fb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8a:	4770      	bx	lr

0800fb8c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	3304      	adds	r3, #4
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f00a fe59 	bl	801a850 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800fb9e:	bf00      	nop
 800fba0:	3708      	adds	r7, #8
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}
	...

0800fba8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800fba8:	b480      	push	{r7}
 800fbaa:	b083      	sub	sp, #12
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
    {
 800fbb0:	4a04      	ldr	r2, [pc, #16]	@ (800fbc4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	601a      	str	r2, [r3, #0]
    }
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	4618      	mov	r0, r3
 800fbba:	370c      	adds	r7, #12
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	4770      	bx	lr
 800fbc4:	0802fc98 	.word	0x0802fc98

0800fbc8 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b082      	sub	sp, #8
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
    }
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f7ff ffe9 	bl	800fba8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800fbd6:	2104      	movs	r1, #4
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f01d f8cc 	bl	802cd76 <_ZdlPvj>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3708      	adds	r7, #8
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}

0800fbe8 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800fbe8:	b480      	push	{r7}
 800fbea:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800fbec:	4b0b      	ldr	r3, [pc, #44]	@ (800fc1c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d008      	beq.n	800fc0a <_ZN8touchgfx3HAL3lcdEv+0x22>
 800fbf8:	4b08      	ldr	r3, [pc, #32]	@ (800fc1c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d003      	beq.n	800fc0a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800fc02:	4b06      	ldr	r3, [pc, #24]	@ (800fc1c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc08:	e002      	b.n	800fc10 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800fc0a:	4b04      	ldr	r3, [pc, #16]	@ (800fc1c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	689b      	ldr	r3, [r3, #8]
    }
 800fc10:	4618      	mov	r0, r3
 800fc12:	46bd      	mov	sp, r7
 800fc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc18:	4770      	bx	lr
 800fc1a:	bf00      	nop
 800fc1c:	2005bd1c 	.word	0x2005bd1c

0800fc20 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800fc20:	b480      	push	{r7}
 800fc22:	b083      	sub	sp, #12
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800fc28:	4a07      	ldr	r2, [pc, #28]	@ (800fc48 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	601a      	str	r2, [r3, #0]
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2200      	movs	r2, #0
 800fc32:	605a      	str	r2, [r3, #4]
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2200      	movs	r2, #0
 800fc38:	721a      	strb	r2, [r3, #8]
    {
    }
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	370c      	adds	r7, #12
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr
 800fc48:	0802fc74 	.word	0x0802fc74

0800fc4c <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800fc4c:	b480      	push	{r7}
 800fc4e:	b083      	sub	sp, #12
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
    {
 800fc54:	4a04      	ldr	r2, [pc, #16]	@ (800fc68 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	601a      	str	r2, [r3, #0]
    }
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	370c      	adds	r7, #12
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr
 800fc68:	0802fc74 	.word	0x0802fc74

0800fc6c <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b082      	sub	sp, #8
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
    }
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f7ff ffe9 	bl	800fc4c <_ZN8touchgfx10TransitionD1Ev>
 800fc7a:	210c      	movs	r1, #12
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f01d f87a 	bl	802cd76 <_ZdlPvj>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	4618      	mov	r0, r3
 800fc86:	3708      	adds	r7, #8
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}

0800fc8c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800fc8c:	b480      	push	{r7}
 800fc8e:	b083      	sub	sp, #12
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
    {
    }
 800fc94:	bf00      	nop
 800fc96:	370c      	adds	r7, #12
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9e:	4770      	bx	lr

0800fca0 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800fca0:	b480      	push	{r7}
 800fca2:	b083      	sub	sp, #12
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
    {
    }
 800fca8:	bf00      	nop
 800fcaa:	370c      	adds	r7, #12
 800fcac:	46bd      	mov	sp, r7
 800fcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb2:	4770      	bx	lr

0800fcb4 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800fcb4:	b480      	push	{r7}
 800fcb6:	b083      	sub	sp, #12
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
    {
    }
 800fcbc:	bf00      	nop
 800fcbe:	370c      	adds	r7, #12
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc6:	4770      	bx	lr

0800fcc8 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800fcd0:	f00a fd80 	bl	801a7d4 <_ZN8touchgfx11Application11getInstanceEv>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	681a      	ldr	r2, [r3, #0]
 800fcd8:	323c      	adds	r2, #60	@ 0x3c
 800fcda:	6812      	ldr	r2, [r2, #0]
 800fcdc:	4618      	mov	r0, r3
 800fcde:	4790      	blx	r2
    }
 800fce0:	bf00      	nop
 800fce2:	3708      	adds	r7, #8
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800fce8:	b480      	push	{r7}
 800fcea:	b083      	sub	sp, #12
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	683a      	ldr	r2, [r7, #0]
 800fcf6:	605a      	str	r2, [r3, #4]
    }
 800fcf8:	bf00      	nop
 800fcfa:	370c      	adds	r7, #12
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr

0800fd04 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b082      	sub	sp, #8
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	4a05      	ldr	r2, [pc, #20]	@ (800fd24 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	601a      	str	r2, [r3, #0]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7ff fef1 	bl	800fafc <_ZN8touchgfx15UIEventListenerD1Ev>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	3708      	adds	r7, #8
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}
 800fd24:	08030f88 	.word	0x08030f88

0800fd28 <_ZN8touchgfx11ApplicationD0Ev>:
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b082      	sub	sp, #8
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f7ff ffe7 	bl	800fd04 <_ZN8touchgfx11ApplicationD1Ev>
 800fd36:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f01d f81b 	bl	802cd76 <_ZdlPvj>
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	4618      	mov	r0, r3
 800fd44:	3708      	adds	r7, #8
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
	...

0800fd4c <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b082      	sub	sp, #8
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	4618      	mov	r0, r3
 800fd58:	f00a fe48 	bl	801a9ec <_ZN8touchgfx11ApplicationC1Ev>
 800fd5c:	4a09      	ldr	r2, [pc, #36]	@ (800fd84 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2200      	movs	r2, #0
 800fd66:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	4a04      	ldr	r2, [pc, #16]	@ (800fd88 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800fd76:	6013      	str	r3, [r2, #0]
    }
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3708      	adds	r7, #8
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
 800fd82:	bf00      	nop
 800fd84:	0802fc20 	.word	0x0802fc20
 800fd88:	2005bd70 	.word	0x2005bd70

0800fd8c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b082      	sub	sp, #8
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f000 f804 	bl	800fda2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800fd9a:	bf00      	nop
 800fd9c:	3708      	adds	r7, #8
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}

0800fda2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800fda2:	b580      	push	{r7, lr}
 800fda4:	b082      	sub	sp, #8
 800fda6:	af00      	add	r7, sp, #0
 800fda8:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d00f      	beq.n	800fdd4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	330c      	adds	r3, #12
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	4610      	mov	r0, r2
 800fdc8:	4798      	blx	r3
 800fdca:	4603      	mov	r3, r0
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d001      	beq.n	800fdd4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	e000      	b.n	800fdd6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d00e      	beq.n	800fdf8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	3308      	adds	r3, #8
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	4610      	mov	r0, r2
 800fdee:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 800fdf8:	bf00      	nop
 800fdfa:	3708      	adds	r7, #8
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}

0800fe00 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800fe00:	b480      	push	{r7}
 800fe02:	b083      	sub	sp, #12
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	683a      	ldr	r2, [r7, #0]
 800fe0e:	601a      	str	r2, [r3, #0]
    }
 800fe10:	bf00      	nop
 800fe12:	370c      	adds	r7, #12
 800fe14:	46bd      	mov	sp, r7
 800fe16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1a:	4770      	bx	lr

0800fe1c <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	4a05      	ldr	r2, [pc, #20]	@ (800fe3c <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	601a      	str	r2, [r3, #0]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7ff ff69 	bl	800fd04 <_ZN8touchgfx11ApplicationD1Ev>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	4618      	mov	r0, r3
 800fe36:	3708      	adds	r7, #8
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	0802fc20 	.word	0x0802fc20

0800fe40 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f7ff ffe7 	bl	800fe1c <_ZN8touchgfx14MVPApplicationD1Ev>
 800fe4e:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f01c ff8f 	bl	802cd76 <_ZdlPvj>
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3708      	adds	r7, #8
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
	...

0800fe64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	4a05      	ldr	r2, [pc, #20]	@ (800fe84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	601a      	str	r2, [r3, #0]
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	4618      	mov	r0, r3
 800fe76:	f7ff fe97 	bl	800fba8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3708      	adds	r7, #8
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}
 800fe84:	0802fc08 	.word	0x0802fc08

0800fe88 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	6878      	ldr	r0, [r7, #4]
 800fe92:	f7ff ffe7 	bl	800fe64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fe96:	2110      	movs	r1, #16
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f01c ff6c 	bl	802cd76 <_ZdlPvj>
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	4618      	mov	r0, r3
 800fea2:	3708      	adds	r7, #8
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd80      	pop	{r7, pc}

0800fea8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	4a08      	ldr	r2, [pc, #32]	@ (800fed4 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	601a      	str	r2, [r3, #0]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800febc:	4618      	mov	r0, r3
 800febe:	f7ff ffd1 	bl	800fe64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7ff ffa9 	bl	800fe1c <_ZN8touchgfx14MVPApplicationD1Ev>
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	4618      	mov	r0, r3
 800fece:	3708      	adds	r7, #8
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}
 800fed4:	0802fbb4 	.word	0x0802fbb4

0800fed8 <_ZN23FrontendApplicationBaseD0Ev>:
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f7ff ffe1 	bl	800fea8 <_ZN23FrontendApplicationBaseD1Ev>
 800fee6:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f01c ff43 	bl	802cd76 <_ZdlPvj>
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	4618      	mov	r0, r3
 800fef4:	3708      	adds	r7, #8
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800fefa:	b580      	push	{r7, lr}
 800fefc:	b082      	sub	sp, #8
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	6078      	str	r0, [r7, #4]
    {
        gotomainPageScreenNoTransition();
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f000 f886 	bl	8010014 <_ZN23FrontendApplicationBase30gotomainPageScreenNoTransitionEv>
    }
 800ff08:	bf00      	nop
 800ff0a:	3708      	adds	r7, #8
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}

0800ff10 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800ff10:	b480      	push	{r7}
 800ff12:	b083      	sub	sp, #12
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2201      	movs	r2, #1
 800ff1c:	721a      	strb	r2, [r3, #8]
    }
 800ff1e:	bf00      	nop
 800ff20:	370c      	adds	r7, #12
 800ff22:	46bd      	mov	sp, r7
 800ff24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff28:	4770      	bx	lr

0800ff2a <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800ff2a:	b480      	push	{r7}
 800ff2c:	b083      	sub	sp, #12
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	6078      	str	r0, [r7, #4]
 800ff32:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	683a      	ldr	r2, [r7, #0]
 800ff38:	605a      	str	r2, [r3, #4]
    }
 800ff3a:	bf00      	nop
 800ff3c:	370c      	adds	r7, #12
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff44:	4770      	bx	lr
	...

0800ff48 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/mainpage_screen/mainPageView.hpp>
#include <gui/mainpage_screen/mainPagePresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b084      	sub	sp, #16
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	60f8      	str	r0, [r7, #12]
 800ff50:	60b9      	str	r1, [r7, #8]
 800ff52:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7ff fef8 	bl	800fd4c <_ZN8touchgfx14MVPApplicationC1Ev>
 800ff5c:	4a18      	ldr	r2, [pc, #96]	@ (800ffc0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f000 f8a9 	bl	80100c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	687a      	ldr	r2, [r7, #4]
 800ff72:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	68ba      	ldr	r2, [r7, #8]
 800ff7a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800ff7e:	f7ff fb79 	bl	800f674 <_ZN8touchgfx3HAL11getInstanceEv>
 800ff82:	4603      	mov	r3, r0
 800ff84:	681a      	ldr	r2, [r3, #0]
 800ff86:	3208      	adds	r2, #8
 800ff88:	6812      	ldr	r2, [r2, #0]
 800ff8a:	2101      	movs	r1, #1
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800ff90:	f7ff fe2a 	bl	800fbe8 <_ZN8touchgfx3HAL3lcdEv>
 800ff94:	4603      	mov	r3, r0
 800ff96:	4618      	mov	r0, r3
 800ff98:	f014 fe13 	bl	8024bc2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800ff9c:	f7ff fe24 	bl	800fbe8 <_ZN8touchgfx3HAL3lcdEv>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f014 fe84 	bl	8024cb0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800ffa8:	f7ff fe1e 	bl	800fbe8 <_ZN8touchgfx3HAL3lcdEv>
 800ffac:	4603      	mov	r3, r0
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f014 fe8a 	bl	8024cc8 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>
}
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3710      	adds	r7, #16
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}
 800ffbe:	bf00      	nop
 800ffc0:	0802fbb4 	.word	0x0802fbb4

0800ffc4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800ffc4:	b480      	push	{r7}
 800ffc6:	b083      	sub	sp, #12
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	6039      	str	r1, [r7, #0]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	370c      	adds	r7, #12
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffda:	4770      	bx	lr

0800ffdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b082      	sub	sp, #8
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	6039      	str	r1, [r7, #0]
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	683a      	ldr	r2, [r7, #0]
 800ffea:	4611      	mov	r1, r2
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7ff ffe9 	bl	800ffc4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	685a      	ldr	r2, [r3, #4]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	605a      	str	r2, [r3, #4]
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	683a      	ldr	r2, [r7, #0]
 800fffe:	3308      	adds	r3, #8
 8010000:	3208      	adds	r2, #8
 8010002:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010006:	e883 0003 	stmia.w	r3, {r0, r1}
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	4618      	mov	r0, r3
 801000e:	3708      	adds	r7, #8
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}

08010014 <_ZN23FrontendApplicationBase30gotomainPageScreenNoTransitionEv>:
 */

// mainPage

void FrontendApplicationBase::gotomainPageScreenNoTransition()
{
 8010014:	b590      	push	{r4, r7, lr}
 8010016:	b089      	sub	sp, #36	@ 0x24
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotomainPageScreenNoTransitionImpl);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 8010022:	4b10      	ldr	r3, [pc, #64]	@ (8010064 <_ZN23FrontendApplicationBase30gotomainPageScreenNoTransitionEv+0x50>)
 8010024:	61bb      	str	r3, [r7, #24]
 8010026:	2300      	movs	r3, #0
 8010028:	61fb      	str	r3, [r7, #28]
 801002a:	f107 0008 	add.w	r0, r7, #8
 801002e:	f107 0318 	add.w	r3, r7, #24
 8010032:	cb0c      	ldmia	r3, {r2, r3}
 8010034:	6879      	ldr	r1, [r7, #4]
 8010036:	f000 f85f 	bl	80100f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801003a:	f107 0308 	add.w	r3, r7, #8
 801003e:	4619      	mov	r1, r3
 8010040:	4620      	mov	r0, r4
 8010042:	f7ff ffcb 	bl	800ffdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8010046:	f107 0308 	add.w	r3, r7, #8
 801004a:	4618      	mov	r0, r3
 801004c:	f7ff ff0a 	bl	800fe64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 801005c:	bf00      	nop
 801005e:	3724      	adds	r7, #36	@ 0x24
 8010060:	46bd      	mov	sp, r7
 8010062:	bd90      	pop	{r4, r7, pc}
 8010064:	08010069 	.word	0x08010069

08010068 <_ZN23FrontendApplicationBase34gotomainPageScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotomainPageScreenNoTransitionImpl()
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b084      	sub	sp, #16
 801006c:	af02      	add	r7, sp, #8
 801006e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<mainPageView, mainPagePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 801007c:	461a      	mov	r2, r3
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8010084:	9300      	str	r3, [sp, #0]
 8010086:	4b04      	ldr	r3, [pc, #16]	@ (8010098 <_ZN23FrontendApplicationBase34gotomainPageScreenNoTransitionImplEv+0x30>)
 8010088:	4804      	ldr	r0, [pc, #16]	@ (801009c <_ZN23FrontendApplicationBase34gotomainPageScreenNoTransitionImplEv+0x34>)
 801008a:	f000 f867 	bl	801015c <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801008e:	bf00      	nop
 8010090:	3708      	adds	r7, #8
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop
 8010098:	2005bd64 	.word	0x2005bd64
 801009c:	2005bd60 	.word	0x2005bd60

080100a0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80100a0:	b480      	push	{r7}
 80100a2:	b083      	sub	sp, #12
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	4a04      	ldr	r2, [pc, #16]	@ (80100bc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	601a      	str	r2, [r3, #0]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	4618      	mov	r0, r3
 80100b2:	370c      	adds	r7, #12
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr
 80100bc:	0802fc98 	.word	0x0802fc98

080100c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b082      	sub	sp, #8
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7ff ffe8 	bl	80100a0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80100d0:	4a08      	ldr	r2, [pc, #32]	@ (80100f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	601a      	str	r2, [r3, #0]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	2200      	movs	r2, #0
 80100da:	605a      	str	r2, [r3, #4]
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2200      	movs	r2, #0
 80100e0:	609a      	str	r2, [r3, #8]
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2200      	movs	r2, #0
 80100e6:	60da      	str	r2, [r3, #12]
    {
    }
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	4618      	mov	r0, r3
 80100ec:	3708      	adds	r7, #8
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}
 80100f2:	bf00      	nop
 80100f4:	0802fc08 	.word	0x0802fc08

080100f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b084      	sub	sp, #16
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	60f8      	str	r0, [r7, #12]
 8010100:	60b9      	str	r1, [r7, #8]
 8010102:	4639      	mov	r1, r7
 8010104:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	4618      	mov	r0, r3
 801010c:	f7ff ffc8 	bl	80100a0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8010110:	4a08      	ldr	r2, [pc, #32]	@ (8010134 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	601a      	str	r2, [r3, #0]
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	68ba      	ldr	r2, [r7, #8]
 801011a:	605a      	str	r2, [r3, #4]
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	3308      	adds	r3, #8
 8010120:	463a      	mov	r2, r7
 8010122:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010126:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	4618      	mov	r0, r3
 801012e:	3710      	adds	r7, #16
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}
 8010134:	0802fc08 	.word	0x0802fc08

08010138 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	4618      	mov	r0, r3
 8010144:	f7ff fd6c 	bl	800fc20 <_ZN8touchgfx10TransitionC1Ev>
 8010148:	4a03      	ldr	r2, [pc, #12]	@ (8010158 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	601a      	str	r2, [r3, #0]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	4618      	mov	r0, r3
 8010152:	3708      	adds	r7, #8
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}
 8010158:	0802fb90 	.word	0x0802fb90

0801015c <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801015c:	b590      	push	{r4, r7, lr}
 801015e:	b08f      	sub	sp, #60	@ 0x3c
 8010160:	af00      	add	r7, sp, #0
 8010162:	60f8      	str	r0, [r7, #12]
 8010164:	60b9      	str	r1, [r7, #8]
 8010166:	607a      	str	r2, [r7, #4]
 8010168:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	689a      	ldr	r2, [r3, #8]
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	689b      	ldr	r3, [r3, #8]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	3320      	adds	r3, #32
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	4610      	mov	r0, r2
 801017a:	4798      	blx	r3
 801017c:	4603      	mov	r3, r0
 801017e:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8010182:	d205      	bcs.n	8010190 <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8010184:	4b7d      	ldr	r3, [pc, #500]	@ (801037c <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8010186:	4a7e      	ldr	r2, [pc, #504]	@ (8010380 <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8010188:	21a3      	movs	r1, #163	@ 0xa3
 801018a:	487e      	ldr	r0, [pc, #504]	@ (8010384 <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 801018c:	f01d fce8 	bl	802db60 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	685a      	ldr	r2, [r3, #4]
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	685b      	ldr	r3, [r3, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	3320      	adds	r3, #32
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	4610      	mov	r0, r2
 80101a0:	4798      	blx	r3
 80101a2:	4603      	mov	r3, r0
 80101a4:	2b0f      	cmp	r3, #15
 80101a6:	d805      	bhi.n	80101b4 <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 80101a8:	4b77      	ldr	r3, [pc, #476]	@ (8010388 <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80101aa:	4a75      	ldr	r2, [pc, #468]	@ (8010380 <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80101ac:	21a4      	movs	r1, #164	@ 0xa4
 80101ae:	4875      	ldr	r0, [pc, #468]	@ (8010384 <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80101b0:	f01d fcd6 	bl	802db60 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	68da      	ldr	r2, [r3, #12]
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	68db      	ldr	r3, [r3, #12]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	3320      	adds	r3, #32
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	4610      	mov	r0, r2
 80101c4:	4798      	blx	r3
 80101c6:	4603      	mov	r3, r0
 80101c8:	2b0b      	cmp	r3, #11
 80101ca:	d805      	bhi.n	80101d8 <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 80101cc:	4b6f      	ldr	r3, [pc, #444]	@ (801038c <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80101ce:	4a6c      	ldr	r2, [pc, #432]	@ (8010380 <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80101d0:	21a5      	movs	r1, #165	@ 0xa5
 80101d2:	486c      	ldr	r0, [pc, #432]	@ (8010384 <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80101d4:	f01d fcc4 	bl	802db60 <__assert_func>
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	627b      	str	r3, [r7, #36]	@ 0x24
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80101e4:	f00a faf6 	bl	801a7d4 <_ZN8touchgfx11Application11getInstanceEv>
 80101e8:	4603      	mov	r3, r0
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7ff fcce 	bl	800fb8c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80101f0:	6a3b      	ldr	r3, [r7, #32]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d008      	beq.n	801020a <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 80101f8:	6a3b      	ldr	r3, [r7, #32]
 80101fa:	681a      	ldr	r2, [r3, #0]
 80101fc:	6a3b      	ldr	r3, [r7, #32]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	330c      	adds	r3, #12
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	4610      	mov	r0, r2
 8010208:	4798      	blx	r3
    if (*currentTrans)
 801020a:	6a3b      	ldr	r3, [r7, #32]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d007      	beq.n	8010222 <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 8010212:	6a3b      	ldr	r3, [r7, #32]
 8010214:	681a      	ldr	r2, [r3, #0]
 8010216:	6a3b      	ldr	r3, [r7, #32]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	4610      	mov	r0, r2
 8010220:	4798      	blx	r3
    if (*currentScreen)
 8010222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d008      	beq.n	801023c <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 801022a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801022c:	681a      	ldr	r2, [r3, #0]
 801022e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	3314      	adds	r3, #20
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	4610      	mov	r0, r2
 801023a:	4798      	blx	r3
    if (*currentPresenter)
 801023c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d008      	beq.n	8010256 <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 8010244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	3304      	adds	r3, #4
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	4610      	mov	r0, r2
 8010254:	4798      	blx	r3
    if (*currentScreen)
 8010256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d007      	beq.n	801026e <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 801025e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010260:	681a      	ldr	r2, [r3, #0]
 8010262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	4610      	mov	r0, r2
 801026c:	4798      	blx	r3
    if (*currentPresenter)
 801026e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d008      	beq.n	8010288 <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 8010276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010278:	681a      	ldr	r2, [r3, #0]
 801027a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	3308      	adds	r3, #8
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	4610      	mov	r0, r2
 8010286:	4798      	blx	r3
}
 8010288:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	68db      	ldr	r3, [r3, #12]
 801028e:	2100      	movs	r1, #0
 8010290:	4618      	mov	r0, r3
 8010292:	f000 f87d 	bl	8010390 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8010296:	4603      	mov	r3, r0
 8010298:	4619      	mov	r1, r3
 801029a:	200c      	movs	r0, #12
 801029c:	f7ff fbe1 	bl	800fa62 <_ZnwjPv>
 80102a0:	4604      	mov	r4, r0
 80102a2:	4620      	mov	r0, r4
 80102a4:	f7ff ff48 	bl	8010138 <_ZN8touchgfx12NoTransitionC1Ev>
 80102a8:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	689b      	ldr	r3, [r3, #8]
 80102ae:	2100      	movs	r1, #0
 80102b0:	4618      	mov	r0, r3
 80102b2:	f000 f880 	bl	80103b6 <_ZN8touchgfx17AbstractPartition2atI12mainPageViewEERT_t>
 80102b6:	4603      	mov	r3, r0
 80102b8:	4619      	mov	r1, r3
 80102ba:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80102be:	f7ff fbd0 	bl	800fa62 <_ZnwjPv>
 80102c2:	4604      	mov	r4, r0
 80102c4:	4620      	mov	r0, r4
 80102c6:	f001 ff5d 	bl	8012184 <_ZN12mainPageViewC1Ev>
 80102ca:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	685b      	ldr	r3, [r3, #4]
 80102d0:	2100      	movs	r1, #0
 80102d2:	4618      	mov	r0, r3
 80102d4:	f000 f882 	bl	80103dc <_ZN8touchgfx17AbstractPartition2atI17mainPagePresenterEERT_t>
 80102d8:	4603      	mov	r3, r0
 80102da:	4619      	mov	r1, r3
 80102dc:	2010      	movs	r0, #16
 80102de:	f7ff fbc0 	bl	800fa62 <_ZnwjPv>
 80102e2:	4604      	mov	r4, r0
 80102e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80102e6:	4620      	mov	r0, r4
 80102e8:	f001 fef4 	bl	80120d4 <_ZN17mainPagePresenterC1ER12mainPageView>
 80102ec:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80102f2:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80102f8:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80102fe:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8010300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010302:	2b00      	cmp	r3, #0
 8010304:	d002      	beq.n	801030c <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 8010306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010308:	3304      	adds	r3, #4
 801030a:	e000      	b.n	801030e <_ZN8touchgfx14makeTransitionI12mainPageView17mainPagePresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 801030c:	2300      	movs	r3, #0
 801030e:	4619      	mov	r1, r3
 8010310:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8010312:	f7ff fd75 	bl	800fe00 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010318:	3304      	adds	r3, #4
 801031a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801031c:	4618      	mov	r0, r3
 801031e:	f7ff fe04 	bl	800ff2a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010324:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010326:	4618      	mov	r0, r3
 8010328:	f000 f86b 	bl	8010402 <_ZN8touchgfx4ViewI17mainPagePresenterE4bindERS1_>
 801032c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801032e:	61fb      	str	r3, [r7, #28]
 8010330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010332:	61bb      	str	r3, [r7, #24]
 8010334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010336:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8010338:	69fb      	ldr	r3, [r7, #28]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	330c      	adds	r3, #12
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	69f8      	ldr	r0, [r7, #28]
 8010342:	4798      	blx	r3
    newPresenter->activate();
 8010344:	69bb      	ldr	r3, [r7, #24]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	69b8      	ldr	r0, [r7, #24]
 801034c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 801034e:	6979      	ldr	r1, [r7, #20]
 8010350:	69f8      	ldr	r0, [r7, #28]
 8010352:	f00c fc29 	bl	801cba8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	3310      	adds	r3, #16
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	6978      	ldr	r0, [r7, #20]
 8010360:	4798      	blx	r3
    newTransition->invalidate();
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	3314      	adds	r3, #20
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	6978      	ldr	r0, [r7, #20]
 801036c:	4798      	blx	r3
}
 801036e:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8010370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8010372:	4618      	mov	r0, r3
 8010374:	373c      	adds	r7, #60	@ 0x3c
 8010376:	46bd      	mov	sp, r7
 8010378:	bd90      	pop	{r4, r7, pc}
 801037a:	bf00      	nop
 801037c:	0802ed8c 	.word	0x0802ed8c
 8010380:	0802ee1c 	.word	0x0802ee1c
 8010384:	0802eef0 	.word	0x0802eef0
 8010388:	0802ef34 	.word	0x0802ef34
 801038c:	0802efd8 	.word	0x0802efd8

08010390 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
 8010398:	460b      	mov	r3, r1
 801039a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	3324      	adds	r3, #36	@ 0x24
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	887a      	ldrh	r2, [r7, #2]
 80103a6:	4611      	mov	r1, r2
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	4798      	blx	r3
 80103ac:	4603      	mov	r3, r0
    }
 80103ae:	4618      	mov	r0, r3
 80103b0:	3708      	adds	r7, #8
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}

080103b6 <_ZN8touchgfx17AbstractPartition2atI12mainPageViewEERT_t>:
    T& at(const uint16_t index)
 80103b6:	b580      	push	{r7, lr}
 80103b8:	b082      	sub	sp, #8
 80103ba:	af00      	add	r7, sp, #0
 80103bc:	6078      	str	r0, [r7, #4]
 80103be:	460b      	mov	r3, r1
 80103c0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	3324      	adds	r3, #36	@ 0x24
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	887a      	ldrh	r2, [r7, #2]
 80103cc:	4611      	mov	r1, r2
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	4798      	blx	r3
 80103d2:	4603      	mov	r3, r0
    }
 80103d4:	4618      	mov	r0, r3
 80103d6:	3708      	adds	r7, #8
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}

080103dc <_ZN8touchgfx17AbstractPartition2atI17mainPagePresenterEERT_t>:
    T& at(const uint16_t index)
 80103dc:	b580      	push	{r7, lr}
 80103de:	b082      	sub	sp, #8
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	460b      	mov	r3, r1
 80103e6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	3324      	adds	r3, #36	@ 0x24
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	887a      	ldrh	r2, [r7, #2]
 80103f2:	4611      	mov	r1, r2
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	4798      	blx	r3
 80103f8:	4603      	mov	r3, r0
    }
 80103fa:	4618      	mov	r0, r3
 80103fc:	3708      	adds	r7, #8
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd80      	pop	{r7, pc}

08010402 <_ZN8touchgfx4ViewI17mainPagePresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 8010402:	b480      	push	{r7}
 8010404:	b083      	sub	sp, #12
 8010406:	af00      	add	r7, sp, #0
 8010408:	6078      	str	r0, [r7, #4]
 801040a:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	683a      	ldr	r2, [r7, #0]
 8010410:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8010412:	bf00      	nop
 8010414:	370c      	adds	r7, #12
 8010416:	46bd      	mov	sp, r7
 8010418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041c:	4770      	bx	lr
	...

08010420 <_ZN8touchgfx12NoTransitionD1Ev>:
 8010420:	b580      	push	{r7, lr}
 8010422:	b082      	sub	sp, #8
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	4a05      	ldr	r2, [pc, #20]	@ (8010440 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	601a      	str	r2, [r3, #0]
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	4618      	mov	r0, r3
 8010432:	f7ff fc0b 	bl	800fc4c <_ZN8touchgfx10TransitionD1Ev>
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	4618      	mov	r0, r3
 801043a:	3708      	adds	r7, #8
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}
 8010440:	0802fb90 	.word	0x0802fb90

08010444 <_ZN8touchgfx12NoTransitionD0Ev>:
 8010444:	b580      	push	{r7, lr}
 8010446:	b082      	sub	sp, #8
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f7ff ffe7 	bl	8010420 <_ZN8touchgfx12NoTransitionD1Ev>
 8010452:	210c      	movs	r1, #12
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f01c fc8e 	bl	802cd76 <_ZdlPvj>
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	4618      	mov	r0, r3
 801045e:	3708      	adds	r7, #8
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	685b      	ldr	r3, [r3, #4]
 8010470:	687a      	ldr	r2, [r7, #4]
 8010472:	68d2      	ldr	r2, [r2, #12]
 8010474:	1052      	asrs	r2, r2, #1
 8010476:	1899      	adds	r1, r3, r2
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	68db      	ldr	r3, [r3, #12]
 801047c:	f003 0301 	and.w	r3, r3, #1
 8010480:	2b00      	cmp	r3, #0
 8010482:	d102      	bne.n	801048a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	689b      	ldr	r3, [r3, #8]
 8010488:	e00a      	b.n	80104a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	685b      	ldr	r3, [r3, #4]
 801048e:	687a      	ldr	r2, [r7, #4]
 8010490:	68d2      	ldr	r2, [r2, #12]
 8010492:	1052      	asrs	r2, r2, #1
 8010494:	4413      	add	r3, r2
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	687a      	ldr	r2, [r7, #4]
 801049a:	6892      	ldr	r2, [r2, #8]
 801049c:	4413      	add	r3, r2
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	4608      	mov	r0, r1
 80104a2:	4798      	blx	r3
    }
 80104a4:	bf00      	nop
 80104a6:	3708      	adds	r7, #8
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80104ac:	b480      	push	{r7}
 80104ae:	b083      	sub	sp, #12
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	685b      	ldr	r3, [r3, #4]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d010      	beq.n	80104de <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	689b      	ldr	r3, [r3, #8]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d107      	bne.n	80104d4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	68db      	ldr	r3, [r3, #12]
 80104c8:	f003 0301 	and.w	r3, r3, #1
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d101      	bne.n	80104d4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80104d0:	2301      	movs	r3, #1
 80104d2:	e000      	b.n	80104d6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80104d4:	2300      	movs	r3, #0
 80104d6:	2b01      	cmp	r3, #1
 80104d8:	d001      	beq.n	80104de <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80104da:	2301      	movs	r3, #1
 80104dc:	e000      	b.n	80104e0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80104de:	2300      	movs	r3, #0
    }
 80104e0:	4618      	mov	r0, r3
 80104e2:	370c      	adds	r7, #12
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr

080104ec <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 80104ec:	b480      	push	{r7}
 80104ee:	b083      	sub	sp, #12
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	6039      	str	r1, [r7, #0]
        : color(col)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	683a      	ldr	r2, [r7, #0]
 80104fa:	601a      	str	r2, [r3, #0]
    {
    }
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	4618      	mov	r0, r3
 8010500:	370c      	adds	r7, #12
 8010502:	46bd      	mov	sp, r7
 8010504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010508:	4770      	bx	lr

0801050a <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 801050a:	b480      	push	{r7}
 801050c:	b083      	sub	sp, #12
 801050e:	af00      	add	r7, sp, #0
 8010510:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2200      	movs	r2, #0
 8010516:	801a      	strh	r2, [r3, #0]
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2200      	movs	r2, #0
 801051c:	805a      	strh	r2, [r3, #2]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2200      	movs	r2, #0
 8010522:	809a      	strh	r2, [r3, #4]
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2200      	movs	r2, #0
 8010528:	80da      	strh	r2, [r3, #6]
    {
    }
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	4618      	mov	r0, r3
 801052e:	370c      	adds	r7, #12
 8010530:	46bd      	mov	sp, r7
 8010532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010536:	4770      	bx	lr

08010538 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8010538:	b480      	push	{r7}
 801053a:	b083      	sub	sp, #12
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	460b      	mov	r3, r1
 8010542:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	887a      	ldrh	r2, [r7, #2]
 8010548:	801a      	strh	r2, [r3, #0]
    {
    }
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	4618      	mov	r0, r3
 801054e:	370c      	adds	r7, #12
 8010550:	46bd      	mov	sp, r7
 8010552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010556:	4770      	bx	lr

08010558 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8010560:	4a14      	ldr	r2, [pc, #80]	@ (80105b4 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	601a      	str	r2, [r3, #0]
        : rect(),
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	3304      	adds	r3, #4
 801056a:	4618      	mov	r0, r3
 801056c:	f7ff ffcd 	bl	801050a <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	330c      	adds	r3, #12
 8010574:	4618      	mov	r0, r3
 8010576:	f7ff ffc8 	bl	801050a <_ZN8touchgfx4RectC1Ev>
          parent(0),
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2200      	movs	r2, #0
 801057e:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2200      	movs	r2, #0
 8010584:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2200      	movs	r2, #0
 801058a:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2200      	movs	r2, #0
 8010590:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2200      	movs	r2, #0
 8010596:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2200      	movs	r2, #0
 801059c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2201      	movs	r2, #1
 80105a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	4618      	mov	r0, r3
 80105ac:	3708      	adds	r7, #8
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bd80      	pop	{r7, pc}
 80105b2:	bf00      	nop
 80105b4:	08030fdc 	.word	0x08030fdc

080105b8 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 80105b8:	b480      	push	{r7}
 80105ba:	b083      	sub	sp, #12
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
    {
 80105c0:	4a04      	ldr	r2, [pc, #16]	@ (80105d4 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	601a      	str	r2, [r3, #0]
    }
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	4618      	mov	r0, r3
 80105ca:	370c      	adds	r7, #12
 80105cc:	46bd      	mov	sp, r7
 80105ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d2:	4770      	bx	lr
 80105d4:	08030fdc 	.word	0x08030fdc

080105d8 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 80105d8:	b580      	push	{r7, lr}
 80105da:	b082      	sub	sp, #8
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
    }
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	f7ff ffe9 	bl	80105b8 <_ZN8touchgfx8DrawableD1Ev>
 80105e6:	2128      	movs	r1, #40	@ 0x28
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f01c fbc4 	bl	802cd76 <_ZdlPvj>
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	4618      	mov	r0, r3
 80105f2:	3708      	adds	r7, #8
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd80      	pop	{r7, pc}

080105f8 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b082      	sub	sp, #8
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8010606:	2b00      	cmp	r3, #0
 8010608:	d005      	beq.n	8010616 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	3314      	adds	r3, #20
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	4798      	blx	r3
        }
    }
 8010616:	bf00      	nop
 8010618:	3708      	adds	r7, #8
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}

0801061e <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 801061e:	b480      	push	{r7}
 8010620:	b083      	sub	sp, #12
 8010622:	af00      	add	r7, sp, #0
 8010624:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8010626:	2300      	movs	r3, #0
    }
 8010628:	4618      	mov	r0, r3
 801062a:	370c      	adds	r7, #12
 801062c:	46bd      	mov	sp, r7
 801062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010632:	4770      	bx	lr

08010634 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010634:	b580      	push	{r7, lr}
 8010636:	b084      	sub	sp, #16
 8010638:	af00      	add	r7, sp, #0
 801063a:	60f8      	str	r0, [r7, #12]
 801063c:	4608      	mov	r0, r1
 801063e:	4611      	mov	r1, r2
 8010640:	461a      	mov	r2, r3
 8010642:	4603      	mov	r3, r0
 8010644:	817b      	strh	r3, [r7, #10]
 8010646:	460b      	mov	r3, r1
 8010648:	813b      	strh	r3, [r7, #8]
 801064a:	4613      	mov	r3, r2
 801064c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 801064e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010652:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010656:	4619      	mov	r1, r3
 8010658:	68f8      	ldr	r0, [r7, #12]
 801065a:	f000 f82a 	bl	80106b2 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 801065e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010666:	4619      	mov	r1, r3
 8010668:	68f8      	ldr	r0, [r7, #12]
 801066a:	f000 f87e 	bl	801076a <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 801066e:	bf00      	nop
 8010670:	3710      	adds	r7, #16
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}

08010676 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8010676:	b480      	push	{r7}
 8010678:	b083      	sub	sp, #12
 801067a:	af00      	add	r7, sp, #0
 801067c:	6078      	str	r0, [r7, #4]
 801067e:	460b      	mov	r3, r1
 8010680:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	887a      	ldrh	r2, [r7, #2]
 8010686:	809a      	strh	r2, [r3, #4]
    }
 8010688:	bf00      	nop
 801068a:	370c      	adds	r7, #12
 801068c:	46bd      	mov	sp, r7
 801068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010692:	4770      	bx	lr

08010694 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8010694:	b480      	push	{r7}
 8010696:	b083      	sub	sp, #12
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	460b      	mov	r3, r1
 801069e:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	887a      	ldrh	r2, [r7, #2]
 80106a4:	80da      	strh	r2, [r3, #6]
    }
 80106a6:	bf00      	nop
 80106a8:	370c      	adds	r7, #12
 80106aa:	46bd      	mov	sp, r7
 80106ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b0:	4770      	bx	lr

080106b2 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 80106b2:	b580      	push	{r7, lr}
 80106b4:	b082      	sub	sp, #8
 80106b6:	af00      	add	r7, sp, #0
 80106b8:	6078      	str	r0, [r7, #4]
 80106ba:	460b      	mov	r3, r1
 80106bc:	807b      	strh	r3, [r7, #2]
 80106be:	4613      	mov	r3, r2
 80106c0:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	3330      	adds	r3, #48	@ 0x30
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80106ce:	4611      	mov	r1, r2
 80106d0:	6878      	ldr	r0, [r7, #4]
 80106d2:	4798      	blx	r3
        setY(y);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	3334      	adds	r3, #52	@ 0x34
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	f9b7 2000 	ldrsh.w	r2, [r7]
 80106e0:	4611      	mov	r1, r2
 80106e2:	6878      	ldr	r0, [r7, #4]
 80106e4:	4798      	blx	r3
    }
 80106e6:	bf00      	nop
 80106e8:	3708      	adds	r7, #8
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}

080106ee <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80106ee:	b480      	push	{r7}
 80106f0:	b083      	sub	sp, #12
 80106f2:	af00      	add	r7, sp, #0
 80106f4:	6078      	str	r0, [r7, #4]
 80106f6:	460b      	mov	r3, r1
 80106f8:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	887a      	ldrh	r2, [r7, #2]
 80106fe:	811a      	strh	r2, [r3, #8]
    }
 8010700:	bf00      	nop
 8010702:	370c      	adds	r7, #12
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr

0801070c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 801070c:	b480      	push	{r7}
 801070e:	b083      	sub	sp, #12
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	460b      	mov	r3, r1
 8010716:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	887a      	ldrh	r2, [r7, #2]
 801071c:	815a      	strh	r2, [r3, #10]
    }
 801071e:	bf00      	nop
 8010720:	370c      	adds	r7, #12
 8010722:	46bd      	mov	sp, r7
 8010724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010728:	4770      	bx	lr

0801072a <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 801072a:	b480      	push	{r7}
 801072c:	b083      	sub	sp, #12
 801072e:	af00      	add	r7, sp, #0
 8010730:	6078      	str	r0, [r7, #4]
    {
    }
 8010732:	bf00      	nop
 8010734:	370c      	adds	r7, #12
 8010736:	46bd      	mov	sp, r7
 8010738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073c:	4770      	bx	lr

0801073e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 801073e:	b480      	push	{r7}
 8010740:	b083      	sub	sp, #12
 8010742:	af00      	add	r7, sp, #0
 8010744:	6078      	str	r0, [r7, #4]
 8010746:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8010748:	bf00      	nop
 801074a:	370c      	adds	r7, #12
 801074c:	46bd      	mov	sp, r7
 801074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010752:	4770      	bx	lr

08010754 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8010754:	b480      	push	{r7}
 8010756:	b083      	sub	sp, #12
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 801075e:	bf00      	nop
 8010760:	370c      	adds	r7, #12
 8010762:	46bd      	mov	sp, r7
 8010764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010768:	4770      	bx	lr

0801076a <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 801076a:	b580      	push	{r7, lr}
 801076c:	b082      	sub	sp, #8
 801076e:	af00      	add	r7, sp, #0
 8010770:	6078      	str	r0, [r7, #4]
 8010772:	460b      	mov	r3, r1
 8010774:	807b      	strh	r3, [r7, #2]
 8010776:	4613      	mov	r3, r2
 8010778:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	3338      	adds	r3, #56	@ 0x38
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010786:	4611      	mov	r1, r2
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	4798      	blx	r3
        setHeight(height);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	333c      	adds	r3, #60	@ 0x3c
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010798:	4611      	mov	r1, r2
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	4798      	blx	r3
    }
 801079e:	bf00      	nop
 80107a0:	3708      	adds	r7, #8
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}

080107a6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80107a6:	b480      	push	{r7}
 80107a8:	b083      	sub	sp, #12
 80107aa:	af00      	add	r7, sp, #0
 80107ac:	6078      	str	r0, [r7, #4]
 80107ae:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80107b0:	bf00      	nop
 80107b2:	370c      	adds	r7, #12
 80107b4:	46bd      	mov	sp, r7
 80107b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ba:	4770      	bx	lr

080107bc <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 80107bc:	b480      	push	{r7}
 80107be:	b083      	sub	sp, #12
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
    {
    }
 80107c4:	bf00      	nop
 80107c6:	370c      	adds	r7, #12
 80107c8:	46bd      	mov	sp, r7
 80107ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ce:	4770      	bx	lr

080107d0 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 80107d0:	b480      	push	{r7}
 80107d2:	b083      	sub	sp, #12
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	460b      	mov	r3, r1
 80107da:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	78fa      	ldrb	r2, [r7, #3]
 80107e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 80107e4:	bf00      	nop
 80107e6:	370c      	adds	r7, #12
 80107e8:	46bd      	mov	sp, r7
 80107ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ee:	4770      	bx	lr

080107f0 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80107f0:	b480      	push	{r7}
 80107f2:	b083      	sub	sp, #12
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 80107fe:	4618      	mov	r0, r3
 8010800:	370c      	adds	r7, #12
 8010802:	46bd      	mov	sp, r7
 8010804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010808:	4770      	bx	lr

0801080a <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 801080a:	b480      	push	{r7}
 801080c:	b083      	sub	sp, #12
 801080e:	af00      	add	r7, sp, #0
 8010810:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 8010818:	4618      	mov	r0, r3
 801081a:	370c      	adds	r7, #12
 801081c:	46bd      	mov	sp, r7
 801081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010822:	4770      	bx	lr

08010824 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8010824:	b580      	push	{r7, lr}
 8010826:	b082      	sub	sp, #8
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	460b      	mov	r3, r1
 801082e:	807b      	strh	r3, [r7, #2]
 8010830:	4613      	mov	r3, r2
 8010832:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	3354      	adds	r3, #84	@ 0x54
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	8879      	ldrh	r1, [r7, #2]
 801083e:	687a      	ldr	r2, [r7, #4]
 8010840:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010844:	b292      	uxth	r2, r2
 8010846:	1a8a      	subs	r2, r1, r2
 8010848:	b292      	uxth	r2, r2
 801084a:	b210      	sxth	r0, r2
 801084c:	8839      	ldrh	r1, [r7, #0]
 801084e:	687a      	ldr	r2, [r7, #4]
 8010850:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8010854:	b292      	uxth	r2, r2
 8010856:	1a8a      	subs	r2, r1, r2
 8010858:	b292      	uxth	r2, r2
 801085a:	b212      	sxth	r2, r2
 801085c:	4601      	mov	r1, r0
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	4798      	blx	r3
    }
 8010862:	bf00      	nop
 8010864:	3708      	adds	r7, #8
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}

0801086a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 801086a:	b480      	push	{r7}
 801086c:	b083      	sub	sp, #12
 801086e:	af00      	add	r7, sp, #0
 8010870:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010878:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010880:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010888:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 801088a:	bf00      	nop
 801088c:	370c      	adds	r7, #12
 801088e:	46bd      	mov	sp, r7
 8010890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010894:	4770      	bx	lr

08010896 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8010896:	b580      	push	{r7, lr}
 8010898:	b084      	sub	sp, #16
 801089a:	af00      	add	r7, sp, #0
 801089c:	60f8      	str	r0, [r7, #12]
 801089e:	60b9      	str	r1, [r7, #8]
 80108a0:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 80108a2:	68f8      	ldr	r0, [r7, #12]
 80108a4:	f7ff ffe1 	bl	801086a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681a      	ldr	r2, [r3, #0]
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	68fa      	ldr	r2, [r7, #12]
 80108b4:	601a      	str	r2, [r3, #0]
    }
 80108b6:	bf00      	nop
 80108b8:	3710      	adds	r7, #16
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}

080108be <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 80108be:	b580      	push	{r7, lr}
 80108c0:	b084      	sub	sp, #16
 80108c2:	af00      	add	r7, sp, #0
 80108c4:	60f8      	str	r0, [r7, #12]
 80108c6:	607b      	str	r3, [r7, #4]
 80108c8:	460b      	mov	r3, r1
 80108ca:	817b      	strh	r3, [r7, #10]
 80108cc:	4613      	mov	r3, r2
 80108ce:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	4618      	mov	r0, r3
 80108d4:	f7ff ff8c 	bl	80107f0 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80108d8:	4603      	mov	r3, r0
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d008      	beq.n	80108f0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7ff ff92 	bl	801080a <_ZNK8touchgfx8Drawable11isTouchableEv>
 80108e6:	4603      	mov	r3, r0
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d001      	beq.n	80108f0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80108ec:	2301      	movs	r3, #1
 80108ee:	e000      	b.n	80108f2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80108f0:	2300      	movs	r3, #0
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d002      	beq.n	80108fc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80108f6:	68fa      	ldr	r2, [r7, #12]
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	601a      	str	r2, [r3, #0]
        }
    }
 80108fc:	bf00      	nop
 80108fe:	3710      	adds	r7, #16
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}

08010904 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
     * @param [in] w The widget to remove.
     *
     * @note If widget has been registered multiple times, an equal number of calls to unregister
     *       are required to stop widget from receiving tick events.
     */
    void unregisterTimerWidget(const Drawable* w)
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
    {
        timerWidgets.remove(w);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	3304      	adds	r3, #4
 8010912:	6839      	ldr	r1, [r7, #0]
 8010914:	4618      	mov	r0, r3
 8010916:	f009 ff82 	bl	801a81e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
    }
 801091a:	bf00      	nop
 801091c:	3708      	adds	r7, #8
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}
	...

08010924 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 8010924:	b580      	push	{r7, lr}
 8010926:	b082      	sub	sp, #8
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	4618      	mov	r0, r3
 8010930:	f7ff fe12 	bl	8010558 <_ZN8touchgfx8DrawableC1Ev>
 8010934:	4a05      	ldr	r2, [pc, #20]	@ (801094c <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	601a      	str	r2, [r3, #0]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	2200      	movs	r2, #0
 801093e:	629a      	str	r2, [r3, #40]	@ 0x28
    {
    }
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	4618      	mov	r0, r3
 8010944:	3708      	adds	r7, #8
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}
 801094a:	bf00      	nop
 801094c:	08030758 	.word	0x08030758

08010950 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 8010950:	b480      	push	{r7}
 8010952:	b083      	sub	sp, #12
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 801095c:	4618      	mov	r0, r3
 801095e:	370c      	adds	r7, #12
 8010960:	46bd      	mov	sp, r7
 8010962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010966:	4770      	bx	lr

08010968 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8010968:	b580      	push	{r7, lr}
 801096a:	b082      	sub	sp, #8
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	4a05      	ldr	r2, [pc, #20]	@ (8010988 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	601a      	str	r2, [r3, #0]
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	4618      	mov	r0, r3
 801097a:	f7ff fe1d 	bl	80105b8 <_ZN8touchgfx8DrawableD1Ev>
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	4618      	mov	r0, r3
 8010982:	3708      	adds	r7, #8
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}
 8010988:	08030758 	.word	0x08030758

0801098c <_ZN8touchgfx9ContainerD0Ev>:
 801098c:	b580      	push	{r7, lr}
 801098e:	b082      	sub	sp, #8
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f7ff ffe7 	bl	8010968 <_ZN8touchgfx9ContainerD1Ev>
 801099a:	212c      	movs	r1, #44	@ 0x2c
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f01c f9ea 	bl	802cd76 <_ZdlPvj>
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	4618      	mov	r0, r3
 80109a6:	3708      	adds	r7, #8
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7ff fdce 	bl	8010558 <_ZN8touchgfx8DrawableC1Ev>
 80109bc:	4a03      	ldr	r2, [pc, #12]	@ (80109cc <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	601a      	str	r2, [r3, #0]
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	4618      	mov	r0, r3
 80109c6:	3708      	adds	r7, #8
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}
 80109cc:	0802fe04 	.word	0x0802fe04

080109d0 <_ZN8touchgfx6WidgetD1Ev>:
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b082      	sub	sp, #8
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	4a05      	ldr	r2, [pc, #20]	@ (80109f0 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	601a      	str	r2, [r3, #0]
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	4618      	mov	r0, r3
 80109e2:	f7ff fde9 	bl	80105b8 <_ZN8touchgfx8DrawableD1Ev>
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	4618      	mov	r0, r3
 80109ea:	3708      	adds	r7, #8
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}
 80109f0:	0802fe04 	.word	0x0802fe04

080109f4 <_ZN8touchgfx6WidgetD0Ev>:
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b082      	sub	sp, #8
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	f7ff ffe7 	bl	80109d0 <_ZN8touchgfx6WidgetD1Ev>
 8010a02:	2128      	movs	r1, #40	@ 0x28
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f01c f9b6 	bl	802cd76 <_ZdlPvj>
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	3708      	adds	r7, #8
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}

08010a14 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b082      	sub	sp, #8
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
 8010a1c:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	4618      	mov	r0, r3
 8010a22:	2326      	movs	r3, #38	@ 0x26
 8010a24:	461a      	mov	r2, r3
 8010a26:	2100      	movs	r1, #0
 8010a28:	f01d fba6 	bl	802e178 <memset>
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f7ff ffbc 	bl	80109ac <_ZN8touchgfx6WidgetC1Ev>
 8010a34:	4a09      	ldr	r2, [pc, #36]	@ (8010a5c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	601a      	str	r2, [r3, #0]
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	683a      	ldr	r2, [r7, #0]
 8010a3e:	8812      	ldrh	r2, [r2, #0]
 8010a40:	84da      	strh	r2, [r3, #38]	@ 0x26
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	22ff      	movs	r2, #255	@ 0xff
 8010a46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    {
        Image::setBitmap(bmp);
 8010a4a:	6839      	ldr	r1, [r7, #0]
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f007 ff8d 	bl	801896c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	4618      	mov	r0, r3
 8010a56:	3708      	adds	r7, #8
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}
 8010a5c:	08030eb4 	.word	0x08030eb4

08010a60 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b082      	sub	sp, #8
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
 8010a68:	4a05      	ldr	r2, [pc, #20]	@ (8010a80 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	601a      	str	r2, [r3, #0]
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	4618      	mov	r0, r3
 8010a72:	f7ff ffad 	bl	80109d0 <_ZN8touchgfx6WidgetD1Ev>
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3708      	adds	r7, #8
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}
 8010a80:	08030eb4 	.word	0x08030eb4

08010a84 <_ZN8touchgfx5ImageD0Ev>:
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f7ff ffe7 	bl	8010a60 <_ZN8touchgfx5ImageD1Ev>
 8010a92:	212c      	movs	r1, #44	@ 0x2c
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f01c f96e 	bl	802cd76 <_ZdlPvj>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3708      	adds	r7, #8
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}

08010aa4 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b082      	sub	sp, #8
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	4618      	mov	r0, r3
 8010ab0:	2326      	movs	r3, #38	@ 0x26
 8010ab2:	461a      	mov	r2, r3
 8010ab4:	2100      	movs	r1, #0
 8010ab6:	f01d fb5f 	bl	802e178 <memset>
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	4618      	mov	r0, r3
 8010abe:	f7ff ff75 	bl	80109ac <_ZN8touchgfx6WidgetC1Ev>
 8010ac2:	4a09      	ldr	r2, [pc, #36]	@ (8010ae8 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	601a      	str	r2, [r3, #0]
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	22ff      	movs	r2, #255	@ 0xff
 8010acc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	3328      	adds	r3, #40	@ 0x28
 8010ad4:	2100      	movs	r1, #0
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7ff fd08 	bl	80104ec <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3708      	adds	r7, #8
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}
 8010ae6:	bf00      	nop
 8010ae8:	08030d54 	.word	0x08030d54

08010aec <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8010aec:	b480      	push	{r7}
 8010aee:	b083      	sub	sp, #12
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
 8010af4:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	683a      	ldr	r2, [r7, #0]
 8010afa:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 8010afc:	bf00      	nop
 8010afe:	370c      	adds	r7, #12
 8010b00:	46bd      	mov	sp, r7
 8010b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b06:	4770      	bx	lr

08010b08 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b082      	sub	sp, #8
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	4618      	mov	r0, r3
 8010b14:	2326      	movs	r3, #38	@ 0x26
 8010b16:	461a      	mov	r2, r3
 8010b18:	2100      	movs	r1, #0
 8010b1a:	f01d fb2d 	bl	802e178 <memset>
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7ff ff43 	bl	80109ac <_ZN8touchgfx6WidgetC1Ev>
 8010b26:	4a0a      	ldr	r2, [pc, #40]	@ (8010b50 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	601a      	str	r2, [r3, #0]
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	629a      	str	r2, [r3, #40]	@ 0x28
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2200      	movs	r2, #0
 8010b36:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    {
        setTouchable(true);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2101      	movs	r1, #1
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f7ff fe46 	bl	80107d0 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	4618      	mov	r0, r3
 8010b48:	3708      	adds	r7, #8
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}
 8010b4e:	bf00      	nop
 8010b50:	08030c70 	.word	0x08030c70

08010b54 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b082      	sub	sp, #8
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	4a05      	ldr	r2, [pc, #20]	@ (8010b74 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	601a      	str	r2, [r3, #0]
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	4618      	mov	r0, r3
 8010b66:	f7ff ff33 	bl	80109d0 <_ZN8touchgfx6WidgetD1Ev>
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	3708      	adds	r7, #8
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}
 8010b74:	08030c70 	.word	0x08030c70

08010b78 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f7ff ffe7 	bl	8010b54 <_ZN8touchgfx14AbstractButtonD1Ev>
 8010b86:	2130      	movs	r1, #48	@ 0x30
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	f01c f8f4 	bl	802cd76 <_ZdlPvj>
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	4618      	mov	r0, r3
 8010b92:	3708      	adds	r7, #8
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}

08010b98 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b082      	sub	sp, #8
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f7ff ffb0 	bl	8010b08 <_ZN8touchgfx14AbstractButtonC1Ev>
 8010ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8010bdc <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	601a      	str	r2, [r3, #0]
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	332e      	adds	r3, #46	@ 0x2e
 8010bb2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f7ff fcbe 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	3330      	adds	r3, #48	@ 0x30
 8010bc0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f7ff fcb7 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	22ff      	movs	r2, #255	@ 0xff
 8010bce:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    {
    }
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3708      	adds	r7, #8
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}
 8010bdc:	08030e40 	.word	0x08030e40

08010be0 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b084      	sub	sp, #16
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	60f8      	str	r0, [r7, #12]
 8010be8:	60b9      	str	r1, [r7, #8]
 8010bea:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	687a      	ldr	r2, [r7, #4]
 8010bf0:	8812      	ldrh	r2, [r2, #0]
 8010bf2:	869a      	strh	r2, [r3, #52]	@ 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	687a      	ldr	r2, [r7, #4]
 8010bf8:	68b9      	ldr	r1, [r7, #8]
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f007 fe0c 	bl	8018818 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 8010c00:	bf00      	nop
 8010c02:	3710      	adds	r7, #16
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}

08010c08 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEED1Ev>:
 * callback when the animation has finished.
 *
 * This mixin can be used on any Drawable.
 */
template <class T>
class MoveAnimator : public T
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b082      	sub	sp, #8
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
 8010c10:	4a05      	ldr	r2, [pc, #20]	@ (8010c28 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEED1Ev+0x20>)
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	601a      	str	r2, [r3, #0]
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7ff fea5 	bl	8010968 <_ZN8touchgfx9ContainerD1Ev>
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	4618      	mov	r0, r3
 8010c22:	3708      	adds	r7, #8
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}
 8010c28:	0802fd6c 	.word	0x0802fd6c

08010c2c <_ZN8touchgfx12MoveAnimatorINS_9ContainerEED0Ev>:
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b082      	sub	sp, #8
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f7ff ffe7 	bl	8010c08 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEED1Ev>
 8010c3a:	2148      	movs	r1, #72	@ 0x48
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f01c f89a 	bl	802cd76 <_ZdlPvj>
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	4618      	mov	r0, r3
 8010c46:	3708      	adds	r7, #8
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}

08010c4c <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b082      	sub	sp, #8
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	4a05      	ldr	r2, [pc, #20]	@ (8010c6c <_ZN8touchgfx3BoxD1Ev+0x20>)
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	601a      	str	r2, [r3, #0]
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7ff feb7 	bl	80109d0 <_ZN8touchgfx6WidgetD1Ev>
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	4618      	mov	r0, r3
 8010c66:	3708      	adds	r7, #8
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd80      	pop	{r7, pc}
 8010c6c:	08030d54 	.word	0x08030d54

08010c70 <_ZN8touchgfx3BoxD0Ev>:
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b082      	sub	sp, #8
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f7ff ffe7 	bl	8010c4c <_ZN8touchgfx3BoxD1Ev>
 8010c7e:	212c      	movs	r1, #44	@ 0x2c
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f01c f878 	bl	802cd76 <_ZdlPvj>
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3708      	adds	r7, #8
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}

08010c90 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b082      	sub	sp, #8
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
 8010c98:	4a05      	ldr	r2, [pc, #20]	@ (8010cb0 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	601a      	str	r2, [r3, #0]
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7ff ff57 	bl	8010b54 <_ZN8touchgfx14AbstractButtonD1Ev>
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	3708      	adds	r7, #8
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}
 8010cb0:	08030e40 	.word	0x08030e40

08010cb4 <_ZN8touchgfx6ButtonD0Ev>:
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b082      	sub	sp, #8
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f7ff ffe7 	bl	8010c90 <_ZN8touchgfx6ButtonD1Ev>
 8010cc2:	2134      	movs	r1, #52	@ 0x34
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f01c f856 	bl	802cd76 <_ZdlPvj>
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3708      	adds	r7, #8
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}

08010cd4 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b082      	sub	sp, #8
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7ff ff5a 	bl	8010b98 <_ZN8touchgfx6ButtonC1Ev>
 8010ce4:	4a07      	ldr	r2, [pc, #28]	@ (8010d04 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	601a      	str	r2, [r3, #0]
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	3334      	adds	r3, #52	@ 0x34
 8010cee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7ff fc20 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3708      	adds	r7, #8
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	08030ce0 	.word	0x08030ce0

08010d08 <_ZN8touchgfx12ToggleButtonD1Ev>:
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b082      	sub	sp, #8
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
 8010d10:	4a05      	ldr	r2, [pc, #20]	@ (8010d28 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	601a      	str	r2, [r3, #0]
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7ff ffb9 	bl	8010c90 <_ZN8touchgfx6ButtonD1Ev>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	4618      	mov	r0, r3
 8010d22:	3708      	adds	r7, #8
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}
 8010d28:	08030ce0 	.word	0x08030ce0

08010d2c <_ZN8touchgfx12ToggleButtonD0Ev>:
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b082      	sub	sp, #8
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f7ff ffe7 	bl	8010d08 <_ZN8touchgfx12ToggleButtonD1Ev>
 8010d3a:	2138      	movs	r1, #56	@ 0x38
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f01c f81a 	bl	802cd76 <_ZdlPvj>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	4618      	mov	r0, r3
 8010d46:	3708      	adds	r7, #8
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}

08010d4c <_ZN17SwipeMenuPageBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/SwipeMenuPageBase.hpp>
#include <images/BitmapDatabase.hpp>
#include <touchgfx/Color.hpp>

SwipeMenuPageBase::SwipeMenuPageBase()
 8010d4c:	b590      	push	{r4, r7, lr}
 8010d4e:	b09b      	sub	sp, #108	@ 0x6c
 8010d50:	af02      	add	r7, sp, #8
 8010d52:	6078      	str	r0, [r7, #4]
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7ff fde4 	bl	8010924 <_ZN8touchgfx9ContainerC1Ev>
 8010d5c:	4add      	ldr	r2, [pc, #884]	@ (80110d4 <_ZN17SwipeMenuPageBaseC1Ev+0x388>)
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	601a      	str	r2, [r3, #0]
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	332c      	adds	r3, #44	@ 0x2c
 8010d66:	4618      	mov	r0, r3
 8010d68:	f004 fb5e 	bl	8015428 <_ZN8touchgfx14SwipeContainerC1Ev>
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8010d72:	4618      	mov	r0, r3
 8010d74:	f7ff fdd6 	bl	8010924 <_ZN8touchgfx9ContainerC1Ev>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f7ff fdd0 	bl	8010924 <_ZN8touchgfx9ContainerC1Ev>
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f503 74be 	add.w	r4, r3, #380	@ 0x17c
 8010d8a:	f107 0308 	add.w	r3, r7, #8
 8010d8e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8010d92:	4618      	mov	r0, r3
 8010d94:	f7ff fbd0 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 8010d98:	f107 0308 	add.w	r3, r7, #8
 8010d9c:	4619      	mov	r1, r3
 8010d9e:	4620      	mov	r0, r4
 8010da0:	f7ff fe38 	bl	8010a14 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7ff fdba 	bl	8010924 <_ZN8touchgfx9ContainerC1Ev>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8010db6:	4618      	mov	r0, r3
 8010db8:	f000 fb28 	bl	801140c <_ZN8touchgfx12MoveAnimatorINS_9ContainerEEC1Ev>
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f7ff fe6e 	bl	8010aa4 <_ZN8touchgfx3BoxC1Ev>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7ff ff80 	bl	8010cd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f7ff ff7a 	bl	8010cd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8010de6:	4618      	mov	r0, r3
 8010de8:	f7ff ff74 	bl	8010cd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8010df2:	4618      	mov	r0, r3
 8010df4:	f7ff ff6e 	bl	8010cd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f503 734a 	add.w	r3, r3, #808	@ 0x328
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7ff ff68 	bl	8010cd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f7ff ff62 	bl	8010cd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 8010e16:	4618      	mov	r0, r3
 8010e18:	f7ff ff5c 	bl	8010cd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	f503 7374 	add.w	r3, r3, #976	@ 0x3d0
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7ff ff56 	bl	8010cd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f7ff ff50 	bl	8010cd4 <_ZN8touchgfx12ToggleButtonC1Ev>
{
    setWidth(240);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	21f0      	movs	r1, #240	@ 0xf0
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f7ff fc58 	bl	80106ee <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(296);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7ff fc61 	bl	801070c <_ZN8touchgfx8Drawable9setHeightEs>
    swipeContainerPage.setXY(0, 0);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	332c      	adds	r3, #44	@ 0x2c
 8010e4e:	2200      	movs	r2, #0
 8010e50:	2100      	movs	r1, #0
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7ff fc2d 	bl	80106b2 <_ZN8touchgfx8Drawable5setXYEss>
    swipeContainerPage.setSwipeCutoff(50);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	332c      	adds	r3, #44	@ 0x2c
 8010e5c:	2132      	movs	r1, #50	@ 0x32
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f004 f9c7 	bl	80151f2 <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>
    swipeContainerPage.setEndSwipeElasticWidth(50);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	332c      	adds	r3, #44	@ 0x2c
 8010e68:	2132      	movs	r1, #50	@ 0x32
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f004 fa2c 	bl	80152c8 <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>

    sportsPage.setWidth(240);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8010e76:	21f0      	movs	r1, #240	@ 0xf0
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f7ff fc38 	bl	80106ee <_ZN8touchgfx8Drawable8setWidthEs>
    sportsPage.setHeight(296);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8010e84:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7ff fc3f 	bl	801070c <_ZN8touchgfx8Drawable9setHeightEs>
    swipeContainerPage.add(sportsPage);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8010e9a:	4619      	mov	r1, r3
 8010e9c:	4610      	mov	r0, r2
 8010e9e:	f004 fbc4 	bl	801562a <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>

    mainPage.setWidth(240);
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010ea8:	21f0      	movs	r1, #240	@ 0xf0
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7ff fc1f 	bl	80106ee <_ZN8touchgfx8Drawable8setWidthEs>
    mainPage.setHeight(296);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010eb6:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7ff fc26 	bl	801070c <_ZN8touchgfx8Drawable9setHeightEs>
    image1.setXY(0, 0);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	2100      	movs	r1, #0
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7ff fbf1 	bl	80106b2 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_MIANIMAGE_ID));
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f503 74be 	add.w	r4, r3, #380	@ 0x17c
 8010ed6:	f107 030c 	add.w	r3, r7, #12
 8010eda:	2108      	movs	r1, #8
 8010edc:	4618      	mov	r0, r3
 8010ede:	f7ff fb2b 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 8010ee2:	f107 030c 	add.w	r3, r7, #12
 8010ee6:	4619      	mov	r1, r3
 8010ee8:	4620      	mov	r0, r4
 8010eea:	f007 fd3f 	bl	801896c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    mainPage.add(image1);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f503 72a8 	add.w	r2, r3, #336	@ 0x150
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8010efa:	4619      	mov	r1, r3
 8010efc:	4610      	mov	r0, r2
 8010efe:	f003 fef9 	bl	8014cf4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    swipeContainerPage.add(mainPage);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010f0e:	4619      	mov	r1, r3
 8010f10:	4610      	mov	r0, r2
 8010f12:	f004 fb8a 	bl	801562a <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>

    healthyPage.setWidth(240);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8010f1c:	21f0      	movs	r1, #240	@ 0xf0
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7ff fbe5 	bl	80106ee <_ZN8touchgfx8Drawable8setWidthEs>
    healthyPage.setHeight(296);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8010f2a:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f7ff fbec 	bl	801070c <_ZN8touchgfx8Drawable9setHeightEs>
    swipeContainerPage.add(healthyPage);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8010f40:	4619      	mov	r1, r3
 8010f42:	4610      	mov	r0, r2
 8010f44:	f004 fb71 	bl	801562a <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>

    swipeContainerPage.setSelectedPage(1);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	332c      	adds	r3, #44	@ 0x2c
 8010f4c:	2101      	movs	r1, #1
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f004 fb5c 	bl	801560c <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
    add(swipeContainerPage);
 8010f54:	687a      	ldr	r2, [r7, #4]
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	332c      	adds	r3, #44	@ 0x2c
 8010f5a:	4619      	mov	r1, r3
 8010f5c:	4610      	mov	r0, r2
 8010f5e:	f003 fec9 	bl	8014cf4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    slideMenuPage.setPosition(0, -296, 240, 296);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8010f68:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8010f6c:	9300      	str	r3, [sp, #0]
 8010f6e:	23f0      	movs	r3, #240	@ 0xf0
 8010f70:	4a59      	ldr	r2, [pc, #356]	@ (80110d8 <_ZN17SwipeMenuPageBaseC1Ev+0x38c>)
 8010f72:	2100      	movs	r1, #0
 8010f74:	f7ff fb5e 	bl	8010634 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setPosition(0, 0, 240, 296);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f503 7007 	add.w	r0, r3, #540	@ 0x21c
 8010f7e:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8010f82:	9300      	str	r3, [sp, #0]
 8010f84:	23f0      	movs	r3, #240	@ 0xf0
 8010f86:	2200      	movs	r2, #0
 8010f88:	2100      	movs	r1, #0
 8010f8a:	f7ff fb53 	bl	8010634 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f503 7407 	add.w	r4, r3, #540	@ 0x21c
 8010f94:	2300      	movs	r3, #0
 8010f96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8010fa6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010faa:	041a      	lsls	r2, r3, #16
 8010fac:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8010fb0:	021b      	lsls	r3, r3, #8
 8010fb2:	431a      	orrs	r2, r3
 8010fb4:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8010fb8:	4313      	orrs	r3, r2
 8010fba:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010fbe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8010fc2:	4611      	mov	r1, r2
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7ff fa91 	bl	80104ec <_ZN8touchgfx9colortypeC1Em>
 8010fca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010fcc:	4619      	mov	r1, r3
 8010fce:	4620      	mov	r0, r4
 8010fd0:	f7ff fd8c 	bl	8010aec <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    slideMenuPage.add(box1);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	f503 72ea 	add.w	r2, r3, #468	@ 0x1d4
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8010fe0:	4619      	mov	r1, r3
 8010fe2:	4610      	mov	r0, r2
 8010fe4:	f003 fe86 	bl	8014cf4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    zhendong_button.setXY(168, 200);
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8010fee:	22c8      	movs	r2, #200	@ 0xc8
 8010ff0:	21a8      	movs	r1, #168	@ 0xa8
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f7ff fb5d 	bl	80106b2 <_ZN8touchgfx8Drawable5setXYEss>
    zhendong_button.setBitmaps(touchgfx::Bitmap(BITMAP_ZHENDONG_ID), touchgfx::Bitmap(BITMAP_ZHENDONG_PRESSED_ID));
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	f503 7412 	add.w	r4, r3, #584	@ 0x248
 8010ffe:	f107 0310 	add.w	r3, r7, #16
 8011002:	2113      	movs	r1, #19
 8011004:	4618      	mov	r0, r3
 8011006:	f7ff fa97 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 801100a:	f107 0314 	add.w	r3, r7, #20
 801100e:	2114      	movs	r1, #20
 8011010:	4618      	mov	r0, r3
 8011012:	f7ff fa91 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 8011016:	f107 0214 	add.w	r2, r7, #20
 801101a:	f107 0310 	add.w	r3, r7, #16
 801101e:	4619      	mov	r1, r3
 8011020:	4620      	mov	r0, r4
 8011022:	f7ff fddd 	bl	8010be0 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    slideMenuPage.add(zhendong_button);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f503 72ea 	add.w	r2, r3, #468	@ 0x1d4
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8011032:	4619      	mov	r1, r3
 8011034:	4610      	mov	r0, r2
 8011036:	f003 fe5d 	bl	8014cf4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    wurao_button.setXY(88, 200);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8011040:	22c8      	movs	r2, #200	@ 0xc8
 8011042:	2158      	movs	r1, #88	@ 0x58
 8011044:	4618      	mov	r0, r3
 8011046:	f7ff fb34 	bl	80106b2 <_ZN8touchgfx8Drawable5setXYEss>
    wurao_button.setBitmaps(touchgfx::Bitmap(BITMAP_WURAO_ID), touchgfx::Bitmap(BITMAP_WURAO_PRESSED_ID));
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f503 7420 	add.w	r4, r3, #640	@ 0x280
 8011050:	f107 0318 	add.w	r3, r7, #24
 8011054:	2111      	movs	r1, #17
 8011056:	4618      	mov	r0, r3
 8011058:	f7ff fa6e 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 801105c:	f107 031c 	add.w	r3, r7, #28
 8011060:	2112      	movs	r1, #18
 8011062:	4618      	mov	r0, r3
 8011064:	f7ff fa68 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 8011068:	f107 021c 	add.w	r2, r7, #28
 801106c:	f107 0318 	add.w	r3, r7, #24
 8011070:	4619      	mov	r1, r3
 8011072:	4620      	mov	r0, r4
 8011074:	f7ff fdb4 	bl	8010be0 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    slideMenuPage.add(wurao_button);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f503 72ea 	add.w	r2, r3, #468	@ 0x1d4
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8011084:	4619      	mov	r1, r3
 8011086:	4610      	mov	r0, r2
 8011088:	f003 fe34 	bl	8014cf4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    taiwan_button.setXY(10, 200);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8011092:	22c8      	movs	r2, #200	@ 0xc8
 8011094:	210a      	movs	r1, #10
 8011096:	4618      	mov	r0, r3
 8011098:	f7ff fb0b 	bl	80106b2 <_ZN8touchgfx8Drawable5setXYEss>
    taiwan_button.setBitmaps(touchgfx::Bitmap(BITMAP_TAIWAN_ID), touchgfx::Bitmap(BITMAP_TAIWAN_PRESSED_ID));
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f503 742e 	add.w	r4, r3, #696	@ 0x2b8
 80110a2:	f107 0320 	add.w	r3, r7, #32
 80110a6:	210f      	movs	r1, #15
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7ff fa45 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 80110ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80110b2:	2110      	movs	r1, #16
 80110b4:	4618      	mov	r0, r3
 80110b6:	f7ff fa3f 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 80110ba:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80110be:	f107 0320 	add.w	r3, r7, #32
 80110c2:	4619      	mov	r1, r3
 80110c4:	4620      	mov	r0, r4
 80110c6:	f7ff fd8b 	bl	8010be0 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    slideMenuPage.add(taiwan_button);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f503 72ea 	add.w	r2, r3, #468	@ 0x1d4
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	e003      	b.n	80110dc <_ZN17SwipeMenuPageBaseC1Ev+0x390>
 80110d4:	0802fcd8 	.word	0x0802fcd8
 80110d8:	fffffed8 	.word	0xfffffed8
 80110dc:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 80110e0:	4619      	mov	r1, r3
 80110e2:	4610      	mov	r0, r2
 80110e4:	f003 fe06 	bl	8014cf4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    shezhi_button.setXY(168, 116);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 80110ee:	2274      	movs	r2, #116	@ 0x74
 80110f0:	21a8      	movs	r1, #168	@ 0xa8
 80110f2:	4618      	mov	r0, r3
 80110f4:	f7ff fadd 	bl	80106b2 <_ZN8touchgfx8Drawable5setXYEss>
    shezhi_button.setBitmaps(touchgfx::Bitmap(BITMAP_SHEZHI_ID), touchgfx::Bitmap(BITMAP_SHEZHI_PRESSED_ID));
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f503 743c 	add.w	r4, r3, #752	@ 0x2f0
 80110fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011102:	210d      	movs	r1, #13
 8011104:	4618      	mov	r0, r3
 8011106:	f7ff fa17 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 801110a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801110e:	210e      	movs	r1, #14
 8011110:	4618      	mov	r0, r3
 8011112:	f7ff fa11 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 8011116:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801111a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801111e:	4619      	mov	r1, r3
 8011120:	4620      	mov	r0, r4
 8011122:	f7ff fd5d 	bl	8010be0 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    slideMenuPage.add(shezhi_button);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f503 72ea 	add.w	r2, r3, #468	@ 0x1d4
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8011132:	4619      	mov	r1, r3
 8011134:	4610      	mov	r0, r2
 8011136:	f003 fddd 	bl	8014cf4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    naozhong_button.setXY(88, 116);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f503 734a 	add.w	r3, r3, #808	@ 0x328
 8011140:	2274      	movs	r2, #116	@ 0x74
 8011142:	2158      	movs	r1, #88	@ 0x58
 8011144:	4618      	mov	r0, r3
 8011146:	f7ff fab4 	bl	80106b2 <_ZN8touchgfx8Drawable5setXYEss>
    naozhong_button.setBitmaps(touchgfx::Bitmap(BITMAP_NAOZHONG_ID), touchgfx::Bitmap(BITMAP_NAOZHONG_PRESSED_ID));
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	f503 744a 	add.w	r4, r3, #808	@ 0x328
 8011150:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011154:	210b      	movs	r1, #11
 8011156:	4618      	mov	r0, r3
 8011158:	f7ff f9ee 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 801115c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011160:	210c      	movs	r1, #12
 8011162:	4618      	mov	r0, r3
 8011164:	f7ff f9e8 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 8011168:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801116c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011170:	4619      	mov	r1, r3
 8011172:	4620      	mov	r0, r4
 8011174:	f7ff fd34 	bl	8010be0 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    slideMenuPage.add(naozhong_button);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f503 72ea 	add.w	r2, r3, #468	@ 0x1d4
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f503 734a 	add.w	r3, r3, #808	@ 0x328
 8011184:	4619      	mov	r1, r3
 8011186:	4610      	mov	r0, r2
 8011188:	f003 fdb4 	bl	8014cf4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    miaobiao_button.setXY(10, 116);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8011192:	2274      	movs	r2, #116	@ 0x74
 8011194:	210a      	movs	r1, #10
 8011196:	4618      	mov	r0, r3
 8011198:	f7ff fa8b 	bl	80106b2 <_ZN8touchgfx8Drawable5setXYEss>
    miaobiao_button.setBitmaps(touchgfx::Bitmap(BITMAP_MIAOBIAO_ID), touchgfx::Bitmap(BITMAP_MIAOBIAO_PRESSED_ID));
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f503 7458 	add.w	r4, r3, #864	@ 0x360
 80111a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80111a6:	2109      	movs	r1, #9
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7ff f9c5 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 80111ae:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80111b2:	210a      	movs	r1, #10
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7ff f9bf 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 80111ba:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80111be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80111c2:	4619      	mov	r1, r3
 80111c4:	4620      	mov	r0, r4
 80111c6:	f7ff fd0b 	bl	8010be0 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    slideMenuPage.add(miaobiao_button);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f503 72ea 	add.w	r2, r3, #468	@ 0x1d4
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80111d6:	4619      	mov	r1, r3
 80111d8:	4610      	mov	r0, r2
 80111da:	f003 fd8b 	bl	8014cf4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    liangdu_button.setXY(168, 33);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 80111e4:	2221      	movs	r2, #33	@ 0x21
 80111e6:	21a8      	movs	r1, #168	@ 0xa8
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7ff fa62 	bl	80106b2 <_ZN8touchgfx8Drawable5setXYEss>
    liangdu_button.setBitmaps(touchgfx::Bitmap(BITMAP_LIANGDU_ID), touchgfx::Bitmap(BITMAP_LIANGDU_PRESSED_ID));
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	f503 7466 	add.w	r4, r3, #920	@ 0x398
 80111f4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80111f8:	2106      	movs	r1, #6
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7ff f99c 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 8011200:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8011204:	2107      	movs	r1, #7
 8011206:	4618      	mov	r0, r3
 8011208:	f7ff f996 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 801120c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8011210:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8011214:	4619      	mov	r1, r3
 8011216:	4620      	mov	r0, r4
 8011218:	f7ff fce2 	bl	8010be0 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    slideMenuPage.add(liangdu_button);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f503 72ea 	add.w	r2, r3, #468	@ 0x1d4
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 8011228:	4619      	mov	r1, r3
 801122a:	4610      	mov	r0, r2
 801122c:	f003 fd62 	bl	8014cf4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    jishi_button.setXY(89, 33);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f503 7374 	add.w	r3, r3, #976	@ 0x3d0
 8011236:	2221      	movs	r2, #33	@ 0x21
 8011238:	2159      	movs	r1, #89	@ 0x59
 801123a:	4618      	mov	r0, r3
 801123c:	f7ff fa39 	bl	80106b2 <_ZN8touchgfx8Drawable5setXYEss>
    jishi_button.setBitmaps(touchgfx::Bitmap(BITMAP_JISHI_ID), touchgfx::Bitmap(BITMAP_JISHI_PRESSED_ID));
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f503 7474 	add.w	r4, r3, #976	@ 0x3d0
 8011246:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801124a:	2104      	movs	r1, #4
 801124c:	4618      	mov	r0, r3
 801124e:	f7ff f973 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 8011252:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8011256:	2105      	movs	r1, #5
 8011258:	4618      	mov	r0, r3
 801125a:	f7ff f96d 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 801125e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8011262:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8011266:	4619      	mov	r1, r3
 8011268:	4620      	mov	r0, r4
 801126a:	f7ff fcb9 	bl	8010be0 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    slideMenuPage.add(jishi_button);
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	f503 72ea 	add.w	r2, r3, #468	@ 0x1d4
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f503 7374 	add.w	r3, r3, #976	@ 0x3d0
 801127a:	4619      	mov	r1, r3
 801127c:	4610      	mov	r0, r2
 801127e:	f003 fd39 	bl	8014cf4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    fore_button.setXY(10, 33);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8011288:	2221      	movs	r2, #33	@ 0x21
 801128a:	210a      	movs	r1, #10
 801128c:	4618      	mov	r0, r3
 801128e:	f7ff fa10 	bl	80106b2 <_ZN8touchgfx8Drawable5setXYEss>
    fore_button.setBitmaps(touchgfx::Bitmap(BITMAP_FORE_ID), touchgfx::Bitmap(BITMAP_FORE_PRESSED_ID));
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f503 6481 	add.w	r4, r3, #1032	@ 0x408
 8011298:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801129c:	2102      	movs	r1, #2
 801129e:	4618      	mov	r0, r3
 80112a0:	f7ff f94a 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 80112a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80112a8:	2103      	movs	r1, #3
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7ff f944 	bl	8010538 <_ZN8touchgfx6BitmapC1Et>
 80112b0:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80112b4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80112b8:	4619      	mov	r1, r3
 80112ba:	4620      	mov	r0, r4
 80112bc:	f7ff fc90 	bl	8010be0 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    slideMenuPage.add(fore_button);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f503 72ea 	add.w	r2, r3, #468	@ 0x1d4
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80112cc:	4619      	mov	r1, r3
 80112ce:	4610      	mov	r0, r2
 80112d0:	f003 fd10 	bl	8014cf4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(slideMenuPage);
 80112d4:	687a      	ldr	r2, [r7, #4]
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80112dc:	4619      	mov	r1, r3
 80112de:	4610      	mov	r0, r2
 80112e0:	f003 fd08 	bl	8014cf4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	4618      	mov	r0, r3
 80112e8:	3764      	adds	r7, #100	@ 0x64
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd90      	pop	{r4, r7, pc}
 80112ee:	bf00      	nop

080112f0 <_ZN17SwipeMenuPageBaseD1Ev>:

SwipeMenuPageBase::~SwipeMenuPageBase()
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b082      	sub	sp, #8
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
 80112f8:	4a35      	ldr	r2, [pc, #212]	@ (80113d0 <_ZN17SwipeMenuPageBaseD1Ev+0xe0>)
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	601a      	str	r2, [r3, #0]
{

}
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8011304:	4618      	mov	r0, r3
 8011306:	f7ff fcff 	bl	8010d08 <_ZN8touchgfx12ToggleButtonD1Ev>
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f503 7374 	add.w	r3, r3, #976	@ 0x3d0
 8011310:	4618      	mov	r0, r3
 8011312:	f7ff fcf9 	bl	8010d08 <_ZN8touchgfx12ToggleButtonD1Ev>
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 801131c:	4618      	mov	r0, r3
 801131e:	f7ff fcf3 	bl	8010d08 <_ZN8touchgfx12ToggleButtonD1Ev>
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8011328:	4618      	mov	r0, r3
 801132a:	f7ff fced 	bl	8010d08 <_ZN8touchgfx12ToggleButtonD1Ev>
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f503 734a 	add.w	r3, r3, #808	@ 0x328
 8011334:	4618      	mov	r0, r3
 8011336:	f7ff fce7 	bl	8010d08 <_ZN8touchgfx12ToggleButtonD1Ev>
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8011340:	4618      	mov	r0, r3
 8011342:	f7ff fce1 	bl	8010d08 <_ZN8touchgfx12ToggleButtonD1Ev>
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 801134c:	4618      	mov	r0, r3
 801134e:	f7ff fcdb 	bl	8010d08 <_ZN8touchgfx12ToggleButtonD1Ev>
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8011358:	4618      	mov	r0, r3
 801135a:	f7ff fcd5 	bl	8010d08 <_ZN8touchgfx12ToggleButtonD1Ev>
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8011364:	4618      	mov	r0, r3
 8011366:	f7ff fccf 	bl	8010d08 <_ZN8touchgfx12ToggleButtonD1Ev>
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8011370:	4618      	mov	r0, r3
 8011372:	f7ff fc6b 	bl	8010c4c <_ZN8touchgfx3BoxD1Ev>
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 801137c:	4618      	mov	r0, r3
 801137e:	f7ff fc43 	bl	8010c08 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEED1Ev>
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8011388:	4618      	mov	r0, r3
 801138a:	f7ff faed 	bl	8010968 <_ZN8touchgfx9ContainerD1Ev>
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8011394:	4618      	mov	r0, r3
 8011396:	f7ff fb63 	bl	8010a60 <_ZN8touchgfx5ImageD1Ev>
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80113a0:	4618      	mov	r0, r3
 80113a2:	f7ff fae1 	bl	8010968 <_ZN8touchgfx9ContainerD1Ev>
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80113ac:	4618      	mov	r0, r3
 80113ae:	f7ff fadb 	bl	8010968 <_ZN8touchgfx9ContainerD1Ev>
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	332c      	adds	r3, #44	@ 0x2c
 80113b6:	4618      	mov	r0, r3
 80113b8:	f003 ff26 	bl	8015208 <_ZN8touchgfx14SwipeContainerD1Ev>
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	4618      	mov	r0, r3
 80113c0:	f7ff fad2 	bl	8010968 <_ZN8touchgfx9ContainerD1Ev>
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	4618      	mov	r0, r3
 80113c8:	3708      	adds	r7, #8
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bd80      	pop	{r7, pc}
 80113ce:	bf00      	nop
 80113d0:	0802fcd8 	.word	0x0802fcd8

080113d4 <_ZN17SwipeMenuPageBaseD0Ev>:
SwipeMenuPageBase::~SwipeMenuPageBase()
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b082      	sub	sp, #8
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
}
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f7ff ff87 	bl	80112f0 <_ZN17SwipeMenuPageBaseD1Ev>
 80113e2:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80113e6:	6878      	ldr	r0, [r7, #4]
 80113e8:	f01b fcc5 	bl	802cd76 <_ZdlPvj>
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	4618      	mov	r0, r3
 80113f0:	3708      	adds	r7, #8
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}

080113f6 <_ZN17SwipeMenuPageBase10initializeEv>:

void SwipeMenuPageBase::initialize()
{
 80113f6:	b480      	push	{r7}
 80113f8:	b083      	sub	sp, #12
 80113fa:	af00      	add	r7, sp, #0
 80113fc:	6078      	str	r0, [r7, #4]

}
 80113fe:	bf00      	nop
 8011400:	370c      	adds	r7, #12
 8011402:	46bd      	mov	sp, r7
 8011404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011408:	4770      	bx	lr
	...

0801140c <_ZN8touchgfx12MoveAnimatorINS_9ContainerEEC1Ev>:
{
public:
    MoveAnimator()
 801140c:	b580      	push	{r7, lr}
 801140e:	b082      	sub	sp, #8
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
          moveAnimationStartY(0),
          moveAnimationEndX(0),
          moveAnimationEndY(0),
          moveAnimationXEquation(),
          moveAnimationYEquation(),
          moveAnimationEndedCallback(0)
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	4618      	mov	r0, r3
 8011418:	f7ff fa84 	bl	8010924 <_ZN8touchgfx9ContainerC1Ev>
 801141c:	4a14      	ldr	r2, [pc, #80]	@ (8011470 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEEC1Ev+0x64>)
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	601a      	str	r2, [r3, #0]
          moveAnimationRunning(false),
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	2200      	movs	r2, #0
 8011426:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
          moveAnimationCounter(0),
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	2200      	movs	r2, #0
 801142e:	85da      	strh	r2, [r3, #46]	@ 0x2e
          moveAnimationDelay(0),
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	2200      	movs	r2, #0
 8011434:	861a      	strh	r2, [r3, #48]	@ 0x30
          moveAnimationDuration(0),
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	2200      	movs	r2, #0
 801143a:	865a      	strh	r2, [r3, #50]	@ 0x32
          moveAnimationStartX(0),
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2200      	movs	r2, #0
 8011440:	869a      	strh	r2, [r3, #52]	@ 0x34
          moveAnimationStartY(0),
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2200      	movs	r2, #0
 8011446:	86da      	strh	r2, [r3, #54]	@ 0x36
          moveAnimationEndX(0),
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2200      	movs	r2, #0
 801144c:	871a      	strh	r2, [r3, #56]	@ 0x38
          moveAnimationEndY(0),
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	2200      	movs	r2, #0
 8011452:	875a      	strh	r2, [r3, #58]	@ 0x3a
          moveAnimationXEquation(),
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2200      	movs	r2, #0
 8011458:	63da      	str	r2, [r3, #60]	@ 0x3c
          moveAnimationYEquation(),
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2200      	movs	r2, #0
 801145e:	641a      	str	r2, [r3, #64]	@ 0x40
          moveAnimationEndedCallback(0)
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2200      	movs	r2, #0
 8011464:	645a      	str	r2, [r3, #68]	@ 0x44
    {
    }
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	4618      	mov	r0, r3
 801146a:	3708      	adds	r7, #8
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}
 8011470:	0802fd6c 	.word	0x0802fd6c

08011474 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE15handleTickEventEv>:
            moveAnimationRunning = false;
        }
    }

    /** The tick handler that handles the actual animation steps. */
    virtual void handleTickEvent()
 8011474:	b580      	push	{r7, lr}
 8011476:	b082      	sub	sp, #8
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
    {
        T::handleTickEvent();
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	4618      	mov	r0, r3
 8011480:	f7ff f99c 	bl	80107bc <_ZN8touchgfx8Drawable15handleTickEventEv>
        nextMoveAnimationStep();
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f000 f81f 	bl	80114c8 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21nextMoveAnimationStepEv>
    }
 801148a:	bf00      	nop
 801148c:	3708      	adds	r7, #8
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}

08011492 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21setMoveAnimationDelayEt>:
    virtual void setMoveAnimationDelay(uint16_t delay)
 8011492:	b480      	push	{r7}
 8011494:	b083      	sub	sp, #12
 8011496:	af00      	add	r7, sp, #0
 8011498:	6078      	str	r0, [r7, #4]
 801149a:	460b      	mov	r3, r1
 801149c:	807b      	strh	r3, [r7, #2]
        moveAnimationDelay = delay;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	887a      	ldrh	r2, [r7, #2]
 80114a2:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
 80114a4:	bf00      	nop
 80114a6:	370c      	adds	r7, #12
 80114a8:	46bd      	mov	sp, r7
 80114aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ae:	4770      	bx	lr

080114b0 <_ZNK8touchgfx12MoveAnimatorINS_9ContainerEE21getMoveAnimationDelayEv>:
    virtual uint16_t getMoveAnimationDelay() const
 80114b0:	b480      	push	{r7}
 80114b2:	b083      	sub	sp, #12
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
        return moveAnimationDelay;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
    }
 80114bc:	4618      	mov	r0, r3
 80114be:	370c      	adds	r7, #12
 80114c0:	46bd      	mov	sp, r7
 80114c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c6:	4770      	bx	lr

080114c8 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21nextMoveAnimationStepEv>:

protected:
    /** Execute next step in move animation and stop the timer if the animation has finished. */
    void nextMoveAnimationStep()
 80114c8:	b590      	push	{r4, r7, lr}
 80114ca:	b085      	sub	sp, #20
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
    {
        if (moveAnimationRunning)
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	f000 808a 	beq.w	80115f0 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21nextMoveAnimationStepEv+0x128>
        {
            moveAnimationCounter++;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80114e0:	3301      	adds	r3, #1
 80114e2:	b29a      	uxth	r2, r3
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
            if (moveAnimationCounter >= moveAnimationDelay)
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80114f0:	429a      	cmp	r2, r3
 80114f2:	d37d      	bcc.n	80115f0 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21nextMoveAnimationStepEv+0x128>
            {
                // Adjust the used animationCounter for the startup delay
                uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80114f8:	461a      	mov	r2, r3
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80114fe:	1ad3      	subs	r3, r2, r3
 8011500:	60fb      	str	r3, [r7, #12]

                int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	b298      	uxth	r0, r3
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 8011510:	b29a      	uxth	r2, r3
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8011518:	b29b      	uxth	r3, r3
 801151a:	1ad3      	subs	r3, r2, r3
 801151c:	b29b      	uxth	r3, r3
 801151e:	b21a      	sxth	r2, r3
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011524:	2100      	movs	r1, #0
 8011526:	47a0      	blx	r4
 8011528:	4603      	mov	r3, r0
 801152a:	817b      	strh	r3, [r7, #10]
                int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	b298      	uxth	r0, r3
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	@ 0x3a
 801153a:	b29a      	uxth	r2, r3
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 8011542:	b29b      	uxth	r3, r3
 8011544:	1ad3      	subs	r3, r2, r3
 8011546:	b29b      	uxth	r3, r3
 8011548:	b21a      	sxth	r2, r3
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801154e:	2100      	movs	r1, #0
 8011550:	47a0      	blx	r4
 8011552:	4603      	mov	r3, r0
 8011554:	813b      	strh	r3, [r7, #8]

                T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 801155e:	b29a      	uxth	r2, r3
 8011560:	897b      	ldrh	r3, [r7, #10]
 8011562:	4413      	add	r3, r2
 8011564:	b29b      	uxth	r3, r3
 8011566:	b219      	sxth	r1, r3
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 801156e:	b29a      	uxth	r2, r3
 8011570:	893b      	ldrh	r3, [r7, #8]
 8011572:	4413      	add	r3, r2
 8011574:	b29b      	uxth	r3, r3
 8011576:	b21b      	sxth	r3, r3
 8011578:	461a      	mov	r2, r3
 801157a:	f7ff f953 	bl	8010824 <_ZN8touchgfx8Drawable6moveToEss>

                if (moveAnimationCounter >= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011582:	461a      	mov	r2, r3
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8011588:	4619      	mov	r1, r3
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801158e:	440b      	add	r3, r1
 8011590:	429a      	cmp	r2, r3
 8011592:	d32d      	bcc.n	80115f0 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21nextMoveAnimationStepEv+0x128>
                {
                    // End of animation
                    moveAnimationRunning = false;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2200      	movs	r2, #0
 8011598:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                    moveAnimationCounter = 0;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2200      	movs	r2, #0
 80115a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
                    Application::getInstance()->unregisterTimerWidget(this);
 80115a2:	f009 f917 	bl	801a7d4 <_ZN8touchgfx11Application11getInstanceEv>
 80115a6:	4602      	mov	r2, r0
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	4619      	mov	r1, r3
 80115ac:	4610      	mov	r0, r2
 80115ae:	f7ff f9a9 	bl	8010904 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>

                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d00d      	beq.n	80115d6 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21nextMoveAnimationStepEv+0x10e>
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	330c      	adds	r3, #12
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	4610      	mov	r0, r2
 80115ca:	4798      	blx	r3
 80115cc:	4603      	mov	r3, r0
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d001      	beq.n	80115d6 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21nextMoveAnimationStepEv+0x10e>
 80115d2:	2301      	movs	r3, #1
 80115d4:	e000      	b.n	80115d8 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21nextMoveAnimationStepEv+0x110>
 80115d6:	2300      	movs	r3, #0
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d009      	beq.n	80115f0 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21nextMoveAnimationStepEv+0x128>
                    {
                        moveAnimationEndedCallback->execute(*this);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	3308      	adds	r3, #8
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	6879      	ldr	r1, [r7, #4]
 80115ec:	4610      	mov	r0, r2
 80115ee:	4798      	blx	r3
                    }
                }
            }
        }
    }
 80115f0:	bf00      	nop
 80115f2:	3714      	adds	r7, #20
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd90      	pop	{r4, r7, pc}

080115f8 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b082      	sub	sp, #8
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
    {
 8011600:	4a06      	ldr	r2, [pc, #24]	@ (801161c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	601a      	str	r2, [r3, #0]
    }
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	3304      	adds	r3, #4
 801160a:	4618      	mov	r0, r3
 801160c:	f7ff f9ac 	bl	8010968 <_ZN8touchgfx9ContainerD1Ev>
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	4618      	mov	r0, r3
 8011614:	3708      	adds	r7, #8
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}
 801161a:	bf00      	nop
 801161c:	080310fc 	.word	0x080310fc

08011620 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8011620:	b580      	push	{r7, lr}
 8011622:	b082      	sub	sp, #8
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
    }
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f7ff ffe5 	bl	80115f8 <_ZN8touchgfx6ScreenD1Ev>
 801162e:	213c      	movs	r1, #60	@ 0x3c
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	f01b fba0 	bl	802cd76 <_ZdlPvj>
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	4618      	mov	r0, r3
 801163a:	3708      	adds	r7, #8
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}

08011640 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8011640:	b480      	push	{r7}
 8011642:	b083      	sub	sp, #12
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
    {
    }
 8011648:	bf00      	nop
 801164a:	370c      	adds	r7, #12
 801164c:	46bd      	mov	sp, r7
 801164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011652:	4770      	bx	lr

08011654 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8011654:	b480      	push	{r7}
 8011656:	b083      	sub	sp, #12
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
    {
    }
 801165c:	bf00      	nop
 801165e:	370c      	adds	r7, #12
 8011660:	46bd      	mov	sp, r7
 8011662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011666:	4770      	bx	lr

08011668 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8011668:	b480      	push	{r7}
 801166a:	b083      	sub	sp, #12
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
    {
    }
 8011670:	bf00      	nop
 8011672:	370c      	adds	r7, #12
 8011674:	46bd      	mov	sp, r7
 8011676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167a:	4770      	bx	lr

0801167c <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 801167c:	b480      	push	{r7}
 801167e:	b083      	sub	sp, #12
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
    {
    }
 8011684:	bf00      	nop
 8011686:	370c      	adds	r7, #12
 8011688:	46bd      	mov	sp, r7
 801168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168e:	4770      	bx	lr

08011690 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8011690:	b480      	push	{r7}
 8011692:	b083      	sub	sp, #12
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
 8011698:	460b      	mov	r3, r1
 801169a:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 801169c:	bf00      	nop
 801169e:	370c      	adds	r7, #12
 80116a0:	46bd      	mov	sp, r7
 80116a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a6:	4770      	bx	lr

080116a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	3304      	adds	r3, #4
 80116b6:	6839      	ldr	r1, [r7, #0]
 80116b8:	4618      	mov	r0, r3
 80116ba:	f003 fb1b 	bl	8014cf4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80116be:	bf00      	nop
 80116c0:	3708      	adds	r7, #8
 80116c2:	46bd      	mov	sp, r7
 80116c4:	bd80      	pop	{r7, pc}
	...

080116c8 <_ZN13SwipeMenuPageD1Ev>:

class SwipeMenuPage : public SwipeMenuPageBase
{
public:
    SwipeMenuPage();
    virtual ~SwipeMenuPage() {}
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	4a05      	ldr	r2, [pc, #20]	@ (80116e8 <_ZN13SwipeMenuPageD1Ev+0x20>)
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	601a      	str	r2, [r3, #0]
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	4618      	mov	r0, r3
 80116da:	f7ff fe09 	bl	80112f0 <_ZN17SwipeMenuPageBaseD1Ev>
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	4618      	mov	r0, r3
 80116e2:	3708      	adds	r7, #8
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}
 80116e8:	08030130 	.word	0x08030130

080116ec <_ZN13SwipeMenuPageD0Ev>:
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b082      	sub	sp, #8
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f7ff ffe7 	bl	80116c8 <_ZN13SwipeMenuPageD1Ev>
 80116fa:	f240 4144 	movw	r1, #1092	@ 0x444
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f01b fb39 	bl	802cd76 <_ZdlPvj>
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	4618      	mov	r0, r3
 8011708:	3708      	adds	r7, #8
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
	...

08011710 <_ZN8touchgfx4ViewI17mainPagePresenterED1Ev>:
class View : public Screen
 8011710:	b580      	push	{r7, lr}
 8011712:	b082      	sub	sp, #8
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	4a05      	ldr	r2, [pc, #20]	@ (8011730 <_ZN8touchgfx4ViewI17mainPagePresenterED1Ev+0x20>)
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	601a      	str	r2, [r3, #0]
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	4618      	mov	r0, r3
 8011722:	f7ff ff69 	bl	80115f8 <_ZN8touchgfx6ScreenD1Ev>
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	4618      	mov	r0, r3
 801172a:	3708      	adds	r7, #8
 801172c:	46bd      	mov	sp, r7
 801172e:	bd80      	pop	{r7, pc}
 8011730:	0802fea0 	.word	0x0802fea0

08011734 <_ZN8touchgfx4ViewI17mainPagePresenterED0Ev>:
 8011734:	b580      	push	{r7, lr}
 8011736:	b082      	sub	sp, #8
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	f7ff ffe7 	bl	8011710 <_ZN8touchgfx4ViewI17mainPagePresenterED1Ev>
 8011742:	2140      	movs	r1, #64	@ 0x40
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f01b fb16 	bl	802cd76 <_ZdlPvj>
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	4618      	mov	r0, r3
 801174e:	3708      	adds	r7, #8
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}

08011754 <_ZN16mainPageViewBaseC1Ev>:
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/mainpage_screen/mainPageViewBase.hpp>
#include <touchgfx/Color.hpp>

mainPageViewBase::mainPageViewBase()
 8011754:	b590      	push	{r4, r7, lr}
 8011756:	b087      	sub	sp, #28
 8011758:	af02      	add	r7, sp, #8
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	4618      	mov	r0, r3
 8011760:	f000 f88c 	bl	801187c <_ZN8touchgfx4ViewI17mainPagePresenterEC1Ev>
 8011764:	4a27      	ldr	r2, [pc, #156]	@ (8011804 <_ZN16mainPageViewBaseC1Ev+0xb0>)
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	601a      	str	r2, [r3, #0]
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	3340      	adds	r3, #64	@ 0x40
 801176e:	4618      	mov	r0, r3
 8011770:	f7ff f998 	bl	8010aa4 <_ZN8touchgfx3BoxC1Ev>
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	336c      	adds	r3, #108	@ 0x6c
 8011778:	4618      	mov	r0, r3
 801177a:	f000 fadd 	bl	8011d38 <_ZN13SwipeMenuPageC1Ev>
{
    __background.setPosition(0, 0, 240, 296);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8011784:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8011788:	9300      	str	r3, [sp, #0]
 801178a:	23f0      	movs	r3, #240	@ 0xf0
 801178c:	2200      	movs	r2, #0
 801178e:	2100      	movs	r1, #0
 8011790:	f7fe ff50 	bl	8010634 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 801179a:	2300      	movs	r3, #0
 801179c:	73fb      	strb	r3, [r7, #15]
 801179e:	2300      	movs	r3, #0
 80117a0:	73bb      	strb	r3, [r7, #14]
 80117a2:	2300      	movs	r3, #0
 80117a4:	737b      	strb	r3, [r7, #13]
 80117a6:	7bfb      	ldrb	r3, [r7, #15]
 80117a8:	041a      	lsls	r2, r3, #16
 80117aa:	7bbb      	ldrb	r3, [r7, #14]
 80117ac:	021b      	lsls	r3, r3, #8
 80117ae:	431a      	orrs	r2, r3
 80117b0:	7b7b      	ldrb	r3, [r7, #13]
 80117b2:	4313      	orrs	r3, r2
 80117b4:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80117b8:	f107 0308 	add.w	r3, r7, #8
 80117bc:	4611      	mov	r1, r2
 80117be:	4618      	mov	r0, r3
 80117c0:	f7fe fe94 	bl	80104ec <_ZN8touchgfx9colortypeC1Em>
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	4619      	mov	r1, r3
 80117c8:	4620      	mov	r0, r4
 80117ca:	f7ff f98f 	bl	8010aec <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 80117ce:	687a      	ldr	r2, [r7, #4]
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	3340      	adds	r3, #64	@ 0x40
 80117d4:	4619      	mov	r1, r3
 80117d6:	4610      	mov	r0, r2
 80117d8:	f7ff ff66 	bl	80116a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    swipeMenuPage1.setXY(0, 0);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	336c      	adds	r3, #108	@ 0x6c
 80117e0:	2200      	movs	r2, #0
 80117e2:	2100      	movs	r1, #0
 80117e4:	4618      	mov	r0, r3
 80117e6:	f7fe ff64 	bl	80106b2 <_ZN8touchgfx8Drawable5setXYEss>
    add(swipeMenuPage1);
 80117ea:	687a      	ldr	r2, [r7, #4]
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	336c      	adds	r3, #108	@ 0x6c
 80117f0:	4619      	mov	r1, r3
 80117f2:	4610      	mov	r0, r2
 80117f4:	f7ff ff58 	bl	80116a8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	4618      	mov	r0, r3
 80117fc:	3714      	adds	r7, #20
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd90      	pop	{r4, r7, pc}
 8011802:	bf00      	nop
 8011804:	0802fe6c 	.word	0x0802fe6c

08011808 <_ZN16mainPageViewBaseD1Ev>:

mainPageViewBase::~mainPageViewBase()
 8011808:	b580      	push	{r7, lr}
 801180a:	b082      	sub	sp, #8
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
 8011810:	4a0a      	ldr	r2, [pc, #40]	@ (801183c <_ZN16mainPageViewBaseD1Ev+0x34>)
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	601a      	str	r2, [r3, #0]
{

}
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	336c      	adds	r3, #108	@ 0x6c
 801181a:	4618      	mov	r0, r3
 801181c:	f7ff ff54 	bl	80116c8 <_ZN13SwipeMenuPageD1Ev>
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	3340      	adds	r3, #64	@ 0x40
 8011824:	4618      	mov	r0, r3
 8011826:	f7ff fa11 	bl	8010c4c <_ZN8touchgfx3BoxD1Ev>
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	4618      	mov	r0, r3
 801182e:	f7ff ff6f 	bl	8011710 <_ZN8touchgfx4ViewI17mainPagePresenterED1Ev>
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	4618      	mov	r0, r3
 8011836:	3708      	adds	r7, #8
 8011838:	46bd      	mov	sp, r7
 801183a:	bd80      	pop	{r7, pc}
 801183c:	0802fe6c 	.word	0x0802fe6c

08011840 <_ZN16mainPageViewBaseD0Ev>:
mainPageViewBase::~mainPageViewBase()
 8011840:	b580      	push	{r7, lr}
 8011842:	b082      	sub	sp, #8
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
}
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f7ff ffdd 	bl	8011808 <_ZN16mainPageViewBaseD1Ev>
 801184e:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8011852:	6878      	ldr	r0, [r7, #4]
 8011854:	f01b fa8f 	bl	802cd76 <_ZdlPvj>
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	4618      	mov	r0, r3
 801185c:	3708      	adds	r7, #8
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}

08011862 <_ZN16mainPageViewBase11setupScreenEv>:

void mainPageViewBase::setupScreen()
{
 8011862:	b580      	push	{r7, lr}
 8011864:	b082      	sub	sp, #8
 8011866:	af00      	add	r7, sp, #0
 8011868:	6078      	str	r0, [r7, #4]
    swipeMenuPage1.initialize();
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	336c      	adds	r3, #108	@ 0x6c
 801186e:	4618      	mov	r0, r3
 8011870:	f000 fa78 	bl	8011d64 <_ZN13SwipeMenuPage10initializeEv>
}
 8011874:	bf00      	nop
 8011876:	3708      	adds	r7, #8
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <_ZN8touchgfx4ViewI17mainPagePresenterEC1Ev>:
    View()
 801187c:	b580      	push	{r7, lr}
 801187e:	b082      	sub	sp, #8
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	4618      	mov	r0, r3
 8011888:	f00a ffe2 	bl	801c850 <_ZN8touchgfx6ScreenC1Ev>
 801188c:	4a05      	ldr	r2, [pc, #20]	@ (80118a4 <_ZN8touchgfx4ViewI17mainPagePresenterEC1Ev+0x28>)
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	601a      	str	r2, [r3, #0]
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	2200      	movs	r2, #0
 8011896:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	4618      	mov	r0, r3
 801189c:	3708      	adds	r7, #8
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}
 80118a2:	bf00      	nop
 80118a4:	0802fea0 	.word	0x0802fea0

080118a8 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80118a8:	b480      	push	{r7}
 80118aa:	af00      	add	r7, sp, #0
    return bitmap_database;
 80118ac:	4b02      	ldr	r3, [pc, #8]	@ (80118b8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80118ae:	4618      	mov	r0, r3
 80118b0:	46bd      	mov	sp, r7
 80118b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b6:	4770      	bx	lr
 80118b8:	0802fecc 	.word	0x0802fecc

080118bc <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80118bc:	b480      	push	{r7}
 80118be:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80118c0:	2315      	movs	r3, #21
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr

080118cc <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 80118cc:	b480      	push	{r7}
 80118ce:	b085      	sub	sp, #20
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	60f8      	str	r0, [r7, #12]
 80118d4:	460b      	mov	r3, r1
 80118d6:	607a      	str	r2, [r7, #4]
 80118d8:	817b      	strh	r3, [r7, #10]
        return 0;
 80118da:	2300      	movs	r3, #0
    }
 80118dc:	4618      	mov	r0, r3
 80118de:	3714      	adds	r7, #20
 80118e0:	46bd      	mov	sp, r7
 80118e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e6:	4770      	bx	lr

080118e8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 80118e8:	b480      	push	{r7}
 80118ea:	b083      	sub	sp, #12
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
        return 0;
 80118f0:	2300      	movs	r3, #0
    }
 80118f2:	4618      	mov	r0, r3
 80118f4:	370c      	adds	r7, #12
 80118f6:	46bd      	mov	sp, r7
 80118f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fc:	4770      	bx	lr

080118fe <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80118fe:	b480      	push	{r7}
 8011900:	b083      	sub	sp, #12
 8011902:	af00      	add	r7, sp, #0
 8011904:	6078      	str	r0, [r7, #4]
        return 0;
 8011906:	2300      	movs	r3, #0
    }
 8011908:	4618      	mov	r0, r3
 801190a:	370c      	adds	r7, #12
 801190c:	46bd      	mov	sp, r7
 801190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011912:	4770      	bx	lr

08011914 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8011914:	b480      	push	{r7}
 8011916:	b085      	sub	sp, #20
 8011918:	af00      	add	r7, sp, #0
 801191a:	60f8      	str	r0, [r7, #12]
 801191c:	60b9      	str	r1, [r7, #8]
 801191e:	4613      	mov	r3, r2
 8011920:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8011922:	4a07      	ldr	r2, [pc, #28]	@ (8011940 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	6013      	str	r3, [r2, #0]
        fonts = f;
 8011928:	4a06      	ldr	r2, [pc, #24]	@ (8011944 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801192a:	68bb      	ldr	r3, [r7, #8]
 801192c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801192e:	4a06      	ldr	r2, [pc, #24]	@ (8011948 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8011930:	88fb      	ldrh	r3, [r7, #6]
 8011932:	8013      	strh	r3, [r2, #0]
    }
 8011934:	bf00      	nop
 8011936:	3714      	adds	r7, #20
 8011938:	46bd      	mov	sp, r7
 801193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193e:	4770      	bx	lr
 8011940:	2005bd74 	.word	0x2005bd74
 8011944:	2005bd7c 	.word	0x2005bd7c
 8011948:	2005bd78 	.word	0x2005bd78

0801194c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 801194c:	b40e      	push	{r1, r2, r3}
 801194e:	b580      	push	{r7, lr}
 8011950:	b085      	sub	sp, #20
 8011952:	af00      	add	r7, sp, #0
 8011954:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8011956:	f107 0320 	add.w	r3, r7, #32
 801195a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	69fa      	ldr	r2, [r7, #28]
 8011960:	2100      	movs	r1, #0
 8011962:	6878      	ldr	r0, [r7, #4]
 8011964:	f00a f808 	bl	801b978 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8011968:	4603      	mov	r3, r0
 801196a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 801196c:	89fb      	ldrh	r3, [r7, #14]
}
 801196e:	4618      	mov	r0, r3
 8011970:	3714      	adds	r7, #20
 8011972:	46bd      	mov	sp, r7
 8011974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011978:	b003      	add	sp, #12
 801197a:	4770      	bx	lr

0801197c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 801197c:	b40c      	push	{r2, r3}
 801197e:	b580      	push	{r7, lr}
 8011980:	b084      	sub	sp, #16
 8011982:	af00      	add	r7, sp, #0
 8011984:	6078      	str	r0, [r7, #4]
 8011986:	460b      	mov	r3, r1
 8011988:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 801198a:	f107 031c 	add.w	r3, r7, #28
 801198e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8011990:	78f9      	ldrb	r1, [r7, #3]
 8011992:	68bb      	ldr	r3, [r7, #8]
 8011994:	69ba      	ldr	r2, [r7, #24]
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f009 ffee 	bl	801b978 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 801199c:	4603      	mov	r3, r0
 801199e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80119a0:	89fb      	ldrh	r3, [r7, #14]
}
 80119a2:	4618      	mov	r0, r3
 80119a4:	3710      	adds	r7, #16
 80119a6:	46bd      	mov	sp, r7
 80119a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80119ac:	b002      	add	sp, #8
 80119ae:	4770      	bx	lr

080119b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b08a      	sub	sp, #40	@ 0x28
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	460b      	mov	r3, r1
 80119ba:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d016      	beq.n	80119f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	3322      	adds	r3, #34	@ 0x22
 80119c8:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80119ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119cc:	8adb      	ldrh	r3, [r3, #22]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d105      	bne.n	80119de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 80119d2:	4b43      	ldr	r3, [pc, #268]	@ (8011ae0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80119d4:	4a43      	ldr	r2, [pc, #268]	@ (8011ae4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80119d6:	21c5      	movs	r1, #197	@ 0xc5
 80119d8:	4843      	ldr	r0, [pc, #268]	@ (8011ae8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80119da:	f01c f8c1 	bl	802db60 <__assert_func>
            return buffer[pos];
 80119de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119e0:	8a9b      	ldrh	r3, [r3, #20]
 80119e2:	461a      	mov	r2, r3
 80119e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d001      	beq.n	80119f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80119ee:	2301      	movs	r3, #1
 80119f0:	e000      	b.n	80119f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80119f2:	2300      	movs	r3, #0
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d06a      	beq.n	8011ace <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	f00b fe82 	bl	801d702 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	3322      	adds	r3, #34	@ 0x22
 8011a02:	623b      	str	r3, [r7, #32]
 8011a04:	2301      	movs	r3, #1
 8011a06:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8011a08:	6a3b      	ldr	r3, [r7, #32]
 8011a0a:	8adb      	ldrh	r3, [r3, #22]
 8011a0c:	8bfa      	ldrh	r2, [r7, #30]
 8011a0e:	429a      	cmp	r2, r3
 8011a10:	d305      	bcc.n	8011a1e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8011a12:	4b36      	ldr	r3, [pc, #216]	@ (8011aec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8011a14:	4a36      	ldr	r2, [pc, #216]	@ (8011af0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8011a16:	21cb      	movs	r1, #203	@ 0xcb
 8011a18:	4833      	ldr	r0, [pc, #204]	@ (8011ae8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011a1a:	f01c f8a1 	bl	802db60 <__assert_func>
            const uint16_t index = pos + offset;
 8011a1e:	6a3b      	ldr	r3, [r7, #32]
 8011a20:	8a9a      	ldrh	r2, [r3, #20]
 8011a22:	8bfb      	ldrh	r3, [r7, #30]
 8011a24:	4413      	add	r3, r2
 8011a26:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8011a28:	8bbb      	ldrh	r3, [r7, #28]
 8011a2a:	2b09      	cmp	r3, #9
 8011a2c:	d801      	bhi.n	8011a32 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8011a2e:	8bbb      	ldrh	r3, [r7, #28]
 8011a30:	e001      	b.n	8011a36 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8011a32:	8bbb      	ldrh	r3, [r7, #28]
 8011a34:	3b0a      	subs	r3, #10
 8011a36:	6a3a      	ldr	r2, [r7, #32]
 8011a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011a3c:	f640 123f 	movw	r2, #2367	@ 0x93f
 8011a40:	4293      	cmp	r3, r2
 8011a42:	bf0c      	ite	eq
 8011a44:	2301      	moveq	r3, #1
 8011a46:	2300      	movne	r3, #0
 8011a48:	b2db      	uxtb	r3, r3
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d03f      	beq.n	8011ace <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	3322      	adds	r3, #34	@ 0x22
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	3222      	adds	r2, #34	@ 0x22
 8011a56:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8011a58:	68ba      	ldr	r2, [r7, #8]
 8011a5a:	8ad2      	ldrh	r2, [r2, #22]
 8011a5c:	2a00      	cmp	r2, #0
 8011a5e:	d105      	bne.n	8011a6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8011a60:	4b1f      	ldr	r3, [pc, #124]	@ (8011ae0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8011a62:	4a20      	ldr	r2, [pc, #128]	@ (8011ae4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8011a64:	21c5      	movs	r1, #197	@ 0xc5
 8011a66:	4820      	ldr	r0, [pc, #128]	@ (8011ae8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011a68:	f01c f87a 	bl	802db60 <__assert_func>
            return buffer[pos];
 8011a6c:	68ba      	ldr	r2, [r7, #8]
 8011a6e:	8a92      	ldrh	r2, [r2, #20]
 8011a70:	4611      	mov	r1, r2
 8011a72:	68ba      	ldr	r2, [r7, #8]
 8011a74:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8011a78:	613b      	str	r3, [r7, #16]
 8011a7a:	4613      	mov	r3, r2
 8011a7c:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8011a7e:	693b      	ldr	r3, [r7, #16]
 8011a80:	8adb      	ldrh	r3, [r3, #22]
 8011a82:	2b01      	cmp	r3, #1
 8011a84:	d806      	bhi.n	8011a94 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8011a86:	4b1b      	ldr	r3, [pc, #108]	@ (8011af4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8011a88:	4a1b      	ldr	r2, [pc, #108]	@ (8011af8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8011a8a:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8011a8e:	4816      	ldr	r0, [pc, #88]	@ (8011ae8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011a90:	f01c f866 	bl	802db60 <__assert_func>
            const uint16_t index = pos + 1;
 8011a94:	693b      	ldr	r3, [r7, #16]
 8011a96:	8a9b      	ldrh	r3, [r3, #20]
 8011a98:	3301      	adds	r3, #1
 8011a9a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8011a9c:	89bb      	ldrh	r3, [r7, #12]
 8011a9e:	2b09      	cmp	r3, #9
 8011aa0:	d801      	bhi.n	8011aa6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8011aa2:	89bb      	ldrh	r3, [r7, #12]
 8011aa4:	e000      	b.n	8011aa8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	693a      	ldr	r2, [r7, #16]
 8011aaa:	89f9      	ldrh	r1, [r7, #14]
 8011aac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8011ab0:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	3322      	adds	r3, #34	@ 0x22
 8011ab6:	61bb      	str	r3, [r7, #24]
 8011ab8:	f640 133f 	movw	r3, #2367	@ 0x93f
 8011abc:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8011abe:	69bb      	ldr	r3, [r7, #24]
 8011ac0:	8a9b      	ldrh	r3, [r3, #20]
 8011ac2:	4619      	mov	r1, r3
 8011ac4:	69bb      	ldr	r3, [r7, #24]
 8011ac6:	8afa      	ldrh	r2, [r7, #22]
 8011ac8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8011acc:	bf00      	nop
        }
    }
    return getNextChar();
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	f00b fd1a 	bl	801d508 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011ad4:	4603      	mov	r3, r0
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	3728      	adds	r7, #40	@ 0x28
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}
 8011ade:	bf00      	nop
 8011ae0:	0802f07c 	.word	0x0802f07c
 8011ae4:	0802f088 	.word	0x0802f088
 8011ae8:	0802f134 	.word	0x0802f134
 8011aec:	0802f17c 	.word	0x0802f17c
 8011af0:	0802f18c 	.word	0x0802f18c
 8011af4:	0802f260 	.word	0x0802f260
 8011af8:	0802f26c 	.word	0x0802f26c

08011afc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b082      	sub	sp, #8
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	f00b fcc6 	bl	801d496 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8011b0a:	bf00      	nop
 8011b0c:	3708      	adds	r7, #8
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}
	...

08011b14 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8011b14:	b590      	push	{r4, r7, lr}
 8011b16:	b085      	sub	sp, #20
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8011b22:	88fb      	ldrh	r3, [r7, #6]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d127      	bne.n	8011b78 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8011b28:	88fb      	ldrh	r3, [r7, #6]
 8011b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8011ba4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d016      	beq.n	8011b62 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8011b34:	88fb      	ldrh	r3, [r7, #6]
 8011b36:	4a1b      	ldr	r2, [pc, #108]	@ (8011ba4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b3c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	68ba      	ldr	r2, [r7, #8]
 8011b44:	4413      	add	r3, r2
 8011b46:	4a18      	ldr	r2, [pc, #96]	@ (8011ba8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011b48:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	685b      	ldr	r3, [r3, #4]
 8011b4e:	68ba      	ldr	r2, [r7, #8]
 8011b50:	4413      	add	r3, r2
 8011b52:	4a16      	ldr	r2, [pc, #88]	@ (8011bac <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011b54:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	689b      	ldr	r3, [r3, #8]
 8011b5a:	68ba      	ldr	r2, [r7, #8]
 8011b5c:	4413      	add	r3, r2
 8011b5e:	60fb      	str	r3, [r7, #12]
 8011b60:	e00a      	b.n	8011b78 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8011b62:	4b11      	ldr	r3, [pc, #68]	@ (8011ba8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011b64:	4a12      	ldr	r2, [pc, #72]	@ (8011bb0 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8011b66:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8011b68:	4a12      	ldr	r2, [pc, #72]	@ (8011bb4 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8011b6a:	4b10      	ldr	r3, [pc, #64]	@ (8011bac <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011b6c:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8011b6e:	88fb      	ldrh	r3, [r7, #6]
 8011b70:	4a11      	ldr	r2, [pc, #68]	@ (8011bb8 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8011b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b76:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d00d      	beq.n	8011b9a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8011b7e:	4a0f      	ldr	r2, [pc, #60]	@ (8011bbc <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8011b80:	88fb      	ldrh	r3, [r7, #6]
 8011b82:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8011b84:	f000 f824 	bl	8011bd0 <_ZN17TypedTextDatabase8getFontsEv>
 8011b88:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8011b8a:	f000 f819 	bl	8011bc0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	461a      	mov	r2, r3
 8011b92:	4621      	mov	r1, r4
 8011b94:	68f8      	ldr	r0, [r7, #12]
 8011b96:	f7ff febd 	bl	8011914 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8011b9a:	bf00      	nop
 8011b9c:	3714      	adds	r7, #20
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd90      	pop	{r4, r7, pc}
 8011ba2:	bf00      	nop
 8011ba4:	2005a6e8 	.word	0x2005a6e8
 8011ba8:	2005a6f0 	.word	0x2005a6f0
 8011bac:	2005a6f4 	.word	0x2005a6f4
 8011bb0:	0807a438 	.word	0x0807a438
 8011bb4:	0807a434 	.word	0x0807a434
 8011bb8:	0807a440 	.word	0x0807a440
 8011bbc:	2005a6ec 	.word	0x2005a6ec

08011bc0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8011bc0:	b480      	push	{r7}
 8011bc2:	af00      	add	r7, sp, #0
    return 0;
 8011bc4:	2300      	movs	r3, #0
}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bce:	4770      	bx	lr

08011bd0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8011bd0:	b480      	push	{r7}
 8011bd2:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8011bd4:	4b02      	ldr	r3, [pc, #8]	@ (8011be0 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bde:	4770      	bx	lr
 8011be0:	2005a6f8 	.word	0x2005a6f8

08011be4 <_Z41__static_initialization_and_destruction_0v>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8011be4:	b580      	push	{r7, lr}
 8011be6:	af00      	add	r7, sp, #0
    &(getFont_verdana_20_4bpp()),
 8011be8:	f7fd fe7a 	bl	800f8e0 <_Z23getFont_verdana_20_4bppv>
 8011bec:	4603      	mov	r3, r0
};
 8011bee:	4a07      	ldr	r2, [pc, #28]	@ (8011c0c <_Z41__static_initialization_and_destruction_0v+0x28>)
 8011bf0:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8011bf2:	f7fd fecd 	bl	800f990 <_Z23getFont_verdana_40_4bppv>
 8011bf6:	4603      	mov	r3, r0
};
 8011bf8:	4a04      	ldr	r2, [pc, #16]	@ (8011c0c <_Z41__static_initialization_and_destruction_0v+0x28>)
 8011bfa:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8011bfc:	f7fd fe18 	bl	800f830 <_Z23getFont_verdana_10_4bppv>
 8011c00:	4603      	mov	r3, r0
};
 8011c02:	4a02      	ldr	r2, [pc, #8]	@ (8011c0c <_Z41__static_initialization_and_destruction_0v+0x28>)
 8011c04:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8011c06:	bf00      	nop
 8011c08:	bd80      	pop	{r7, pc}
 8011c0a:	bf00      	nop
 8011c0c:	2005a6f8 	.word	0x2005a6f8

08011c10 <_GLOBAL__sub_I_touchgfx_fonts>:
 8011c10:	b580      	push	{r7, lr}
 8011c12:	af00      	add	r7, sp, #0
 8011c14:	f7ff ffe6 	bl	8011be4 <_Z41__static_initialization_and_destruction_0v>
 8011c18:	bd80      	pop	{r7, pc}
	...

08011c1c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b082      	sub	sp, #8
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
 8011c24:	4a05      	ldr	r2, [pc, #20]	@ (8011c3c <_ZN19FrontendApplicationD1Ev+0x20>)
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	601a      	str	r2, [r3, #0]
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f7fe f93b 	bl	800fea8 <_ZN23FrontendApplicationBaseD1Ev>
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	4618      	mov	r0, r3
 8011c36:	3708      	adds	r7, #8
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}
 8011c3c:	080300dc 	.word	0x080300dc

08011c40 <_ZN19FrontendApplicationD0Ev>:
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b082      	sub	sp, #8
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f7ff ffe7 	bl	8011c1c <_ZN19FrontendApplicationD1Ev>
 8011c4e:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f01b f88f 	bl	802cd76 <_ZdlPvj>
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	3708      	adds	r7, #8
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}

08011c62 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8011c62:	b580      	push	{r7, lr}
 8011c64:	b082      	sub	sp, #8
 8011c66:	af00      	add	r7, sp, #0
 8011c68:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8011c70:	4618      	mov	r0, r3
 8011c72:	f000 faf7 	bl	8012264 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f008 fe47 	bl	801a90c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8011c7e:	bf00      	nop
 8011c80:	3708      	adds	r7, #8
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}
	...

08011c88 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b084      	sub	sp, #16
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	60f8      	str	r0, [r7, #12]
 8011c90:	60b9      	str	r1, [r7, #8]
 8011c92:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	687a      	ldr	r2, [r7, #4]
 8011c98:	68b9      	ldr	r1, [r7, #8]
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f7fe f954 	bl	800ff48 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8011ca0:	4a03      	ldr	r2, [pc, #12]	@ (8011cb0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	601a      	str	r2, [r3, #0]
{

}
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	4618      	mov	r0, r3
 8011caa:	3710      	adds	r7, #16
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}
 8011cb0:	080300dc 	.word	0x080300dc

08011cb4 <_ZNK8touchgfx12GestureEvent11getVelocityEv>:
    /**
     * Gets the velocity of this gesture event.
     *
     * @return The velocity of this gesture event.
     */
    int16_t getVelocity() const
 8011cb4:	b480      	push	{r7}
 8011cb6:	b083      	sub	sp, #12
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
    {
        return gestureVelocity;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	370c      	adds	r7, #12
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ccc:	4770      	bx	lr

08011cce <_ZNK8touchgfx12GestureEvent7getTypeEv>:
    /**
     * Gets the type of this gesture event.
     *
     * @return The type of this gesture event.
     */
    GestureEventType getType() const
 8011cce:	b480      	push	{r7}
 8011cd0:	b083      	sub	sp, #12
 8011cd2:	af00      	add	r7, sp, #0
 8011cd4:	6078      	str	r0, [r7, #4]
    {
        return gestureEventType;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	791b      	ldrb	r3, [r3, #4]
    }
 8011cda:	4618      	mov	r0, r3
 8011cdc:	370c      	adds	r7, #12
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce4:	4770      	bx	lr

08011ce6 <_ZNK8touchgfx8Drawable4getXEv>:
    int16_t getX() const
 8011ce6:	b480      	push	{r7}
 8011ce8:	b083      	sub	sp, #12
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	6078      	str	r0, [r7, #4]
        return rect.x;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	370c      	adds	r7, #12
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfe:	4770      	bx	lr

08011d00 <_ZNK8touchgfx8Drawable4getYEv>:
    int16_t getY() const
 8011d00:	b480      	push	{r7}
 8011d02:	b083      	sub	sp, #12
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
        return rect.y;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 8011d0e:	4618      	mov	r0, r3
 8011d10:	370c      	adds	r7, #12
 8011d12:	46bd      	mov	sp, r7
 8011d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d18:	4770      	bx	lr

08011d1a <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
    void registerTimerWidget(Drawable* w)
 8011d1a:	b580      	push	{r7, lr}
 8011d1c:	b082      	sub	sp, #8
 8011d1e:	af00      	add	r7, sp, #0
 8011d20:	6078      	str	r0, [r7, #4]
 8011d22:	6039      	str	r1, [r7, #0]
        timerWidgets.add(w);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	3304      	adds	r3, #4
 8011d28:	6839      	ldr	r1, [r7, #0]
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f008 fe20 	bl	801a970 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
    }
 8011d30:	bf00      	nop
 8011d32:	3708      	adds	r7, #8
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}

08011d38 <_ZN13SwipeMenuPageC1Ev>:
#include <gui/containers/SwipeMenuPage.hpp>

SwipeMenuPage::SwipeMenuPage()
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b082      	sub	sp, #8
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7ff f802 	bl	8010d4c <_ZN17SwipeMenuPageBaseC1Ev>
 8011d48:	4a05      	ldr	r2, [pc, #20]	@ (8011d60 <_ZN13SwipeMenuPageC1Ev+0x28>)
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	601a      	str	r2, [r3, #0]
{
    menuVisible = false;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	2200      	movs	r2, #0
 8011d52:	f883 2440 	strb.w	r2, [r3, #1088]	@ 0x440
}
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	4618      	mov	r0, r3
 8011d5a:	3708      	adds	r7, #8
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	bd80      	pop	{r7, pc}
 8011d60:	08030130 	.word	0x08030130

08011d64 <_ZN13SwipeMenuPage10initializeEv>:

void SwipeMenuPage::initialize()
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b084      	sub	sp, #16
 8011d68:	af02      	add	r7, sp, #8
 8011d6a:	6078      	str	r0, [r7, #4]
    SwipeMenuPageBase::initialize();
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f7ff fb41 	bl	80113f6 <_ZN17SwipeMenuPageBase10initializeEv>

    // 初始化时隐藏菜单，保持mainPage可见
    slideMenuPage.setPosition(0, -296, 240, 296);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8011d7a:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8011d7e:	9300      	str	r3, [sp, #0]
 8011d80:	23f0      	movs	r3, #240	@ 0xf0
 8011d82:	4a06      	ldr	r2, [pc, #24]	@ (8011d9c <_ZN13SwipeMenuPage10initializeEv+0x38>)
 8011d84:	2100      	movs	r1, #0
 8011d86:	f7fe fc55 	bl	8010634 <_ZN8touchgfx8Drawable11setPositionEssss>
    menuVisible = false;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	f883 2440 	strb.w	r2, [r3, #1088]	@ 0x440
}
 8011d92:	bf00      	nop
 8011d94:	3708      	adds	r7, #8
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}
 8011d9a:	bf00      	nop
 8011d9c:	fffffed8 	.word	0xfffffed8

08011da0 <_ZN13SwipeMenuPage13showSlideMenuEv>:

void SwipeMenuPage::showSlideMenu()
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b084      	sub	sp, #16
 8011da4:	af02      	add	r7, sp, #8
 8011da6:	6078      	str	r0, [r7, #4]
    // 使用MoveAnimator将SlideMenuPage从屏幕外移动到可见位置
    slideMenuPage.startMoveAnimation(0, 0, 20, EasingEquations::cubicEaseInOut, EasingEquations::cubicEaseInOut);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8011dae:	4b12      	ldr	r3, [pc, #72]	@ (8011df8 <_ZN13SwipeMenuPage13showSlideMenuEv+0x58>)
 8011db0:	9301      	str	r3, [sp, #4]
 8011db2:	4b11      	ldr	r3, [pc, #68]	@ (8011df8 <_ZN13SwipeMenuPage13showSlideMenuEv+0x58>)
 8011db4:	9300      	str	r3, [sp, #0]
 8011db6:	2314      	movs	r3, #20
 8011db8:	2200      	movs	r2, #0
 8011dba:	2100      	movs	r1, #0
 8011dbc:	f000 f88c 	bl	8011ed8 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE18startMoveAnimationEsstPFstsstES4_>

    // 不要移除swipeContainerPage，而是将它移到slideMenuPage的下方
    // 确保slideMenuPage在最上层显示
    remove(slideMenuPage);
 8011dc0:	6878      	ldr	r0, [r7, #4]
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	3364      	adds	r3, #100	@ 0x64
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	687a      	ldr	r2, [r7, #4]
 8011dcc:	f502 72ea 	add.w	r2, r2, #468	@ 0x1d4
 8011dd0:	4611      	mov	r1, r2
 8011dd2:	4798      	blx	r3
    add(slideMenuPage);
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	3360      	adds	r3, #96	@ 0x60
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	687a      	ldr	r2, [r7, #4]
 8011de0:	f502 72ea 	add.w	r2, r2, #468	@ 0x1d4
 8011de4:	4611      	mov	r1, r2
 8011de6:	4798      	blx	r3

    menuVisible = true;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2201      	movs	r2, #1
 8011dec:	f883 2440 	strb.w	r2, [r3, #1088]	@ 0x440
}
 8011df0:	bf00      	nop
 8011df2:	3708      	adds	r7, #8
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}
 8011df8:	0801cc97 	.word	0x0801cc97

08011dfc <_ZN13SwipeMenuPage13hideSlideMenuEv>:

void SwipeMenuPage::hideSlideMenu()
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b084      	sub	sp, #16
 8011e00:	af02      	add	r7, sp, #8
 8011e02:	6078      	str	r0, [r7, #4]
    // 使用MoveAnimator将SlideMenuPage移动到屏幕外
    slideMenuPage.startMoveAnimation(0, -296, 20, EasingEquations::cubicEaseInOut, EasingEquations::cubicEaseInOut);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8011e0a:	4b08      	ldr	r3, [pc, #32]	@ (8011e2c <_ZN13SwipeMenuPage13hideSlideMenuEv+0x30>)
 8011e0c:	9301      	str	r3, [sp, #4]
 8011e0e:	4b07      	ldr	r3, [pc, #28]	@ (8011e2c <_ZN13SwipeMenuPage13hideSlideMenuEv+0x30>)
 8011e10:	9300      	str	r3, [sp, #0]
 8011e12:	2314      	movs	r3, #20
 8011e14:	4a06      	ldr	r2, [pc, #24]	@ (8011e30 <_ZN13SwipeMenuPage13hideSlideMenuEv+0x34>)
 8011e16:	2100      	movs	r1, #0
 8011e18:	f000 f85e 	bl	8011ed8 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE18startMoveAnimationEsstPFstsstES4_>

    menuVisible = false;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	2200      	movs	r2, #0
 8011e20:	f883 2440 	strb.w	r2, [r3, #1088]	@ 0x440
}
 8011e24:	bf00      	nop
 8011e26:	3708      	adds	r7, #8
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}
 8011e2c:	0801cc97 	.word	0x0801cc97
 8011e30:	fffffed8 	.word	0xfffffed8

08011e34 <_ZN13SwipeMenuPage18handleGestureEventERKN8touchgfx12GestureEventE>:
#include <stdio.h>
void SwipeMenuPage::handleGestureEvent(const touchgfx::GestureEvent &event)
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b082      	sub	sp, #8
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
 8011e3c:	6039      	str	r1, [r7, #0]
    printf("handleGestureEvent\r\n");
 8011e3e:	4823      	ldr	r0, [pc, #140]	@ (8011ecc <_ZN13SwipeMenuPage18handleGestureEventERKN8touchgfx12GestureEventE+0x98>)
 8011e40:	f01c f8ba 	bl	802dfb8 <puts>
    // 检测垂直滑动手势
    if (event.getType() == event.SWIPE_VERTICAL)
 8011e44:	6838      	ldr	r0, [r7, #0]
 8011e46:	f7ff ff42 	bl	8011cce <_ZNK8touchgfx12GestureEvent7getTypeEv>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	2b01      	cmp	r3, #1
 8011e4e:	bf0c      	ite	eq
 8011e50:	2301      	moveq	r3, #1
 8011e52:	2300      	movne	r3, #0
 8011e54:	b2db      	uxtb	r3, r3
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d02f      	beq.n	8011eba <_ZN13SwipeMenuPage18handleGestureEventERKN8touchgfx12GestureEventE+0x86>
    {
        // 下滑显示菜单 (正值表示向下滑动)
        if (event.getVelocity() > 0 && !menuVisible)
 8011e5a:	6838      	ldr	r0, [r7, #0]
 8011e5c:	f7ff ff2a 	bl	8011cb4 <_ZNK8touchgfx12GestureEvent11getVelocityEv>
 8011e60:	4603      	mov	r3, r0
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	dd09      	ble.n	8011e7a <_ZN13SwipeMenuPage18handleGestureEventERKN8touchgfx12GestureEventE+0x46>
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 8011e6c:	f083 0301 	eor.w	r3, r3, #1
 8011e70:	b2db      	uxtb	r3, r3
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d001      	beq.n	8011e7a <_ZN13SwipeMenuPage18handleGestureEventERKN8touchgfx12GestureEventE+0x46>
 8011e76:	2301      	movs	r3, #1
 8011e78:	e000      	b.n	8011e7c <_ZN13SwipeMenuPage18handleGestureEventERKN8touchgfx12GestureEventE+0x48>
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d006      	beq.n	8011e8e <_ZN13SwipeMenuPage18handleGestureEventERKN8touchgfx12GestureEventE+0x5a>
        {
            showSlideMenu();
 8011e80:	6878      	ldr	r0, [r7, #4]
 8011e82:	f7ff ff8d 	bl	8011da0 <_ZN13SwipeMenuPage13showSlideMenuEv>
            printf("down\r\n");
 8011e86:	4812      	ldr	r0, [pc, #72]	@ (8011ed0 <_ZN13SwipeMenuPage18handleGestureEventERKN8touchgfx12GestureEventE+0x9c>)
 8011e88:	f01c f896 	bl	802dfb8 <puts>
 8011e8c:	e015      	b.n	8011eba <_ZN13SwipeMenuPage18handleGestureEventERKN8touchgfx12GestureEventE+0x86>
        }
        // 上滑隐藏菜单 (负值表示向上滑动)
        else if (event.getVelocity() < 0 && menuVisible)
 8011e8e:	6838      	ldr	r0, [r7, #0]
 8011e90:	f7ff ff10 	bl	8011cb4 <_ZNK8touchgfx12GestureEvent11getVelocityEv>
 8011e94:	4603      	mov	r3, r0
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	da06      	bge.n	8011ea8 <_ZN13SwipeMenuPage18handleGestureEventERKN8touchgfx12GestureEventE+0x74>
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d001      	beq.n	8011ea8 <_ZN13SwipeMenuPage18handleGestureEventERKN8touchgfx12GestureEventE+0x74>
 8011ea4:	2301      	movs	r3, #1
 8011ea6:	e000      	b.n	8011eaa <_ZN13SwipeMenuPage18handleGestureEventERKN8touchgfx12GestureEventE+0x76>
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d005      	beq.n	8011eba <_ZN13SwipeMenuPage18handleGestureEventERKN8touchgfx12GestureEventE+0x86>
        {
            hideSlideMenu();
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	f7ff ffa4 	bl	8011dfc <_ZN13SwipeMenuPage13hideSlideMenuEv>
            printf("up\r\n");
 8011eb4:	4807      	ldr	r0, [pc, #28]	@ (8011ed4 <_ZN13SwipeMenuPage18handleGestureEventERKN8touchgfx12GestureEventE+0xa0>)
 8011eb6:	f01c f87f 	bl	802dfb8 <puts>
        }
    }

    // 调用父类的手势处理方法
    SwipeMenuPageBase::handleGestureEvent(event);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	6839      	ldr	r1, [r7, #0]
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f7fe fc48 	bl	8010754 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>
}
 8011ec4:	bf00      	nop
 8011ec6:	3708      	adds	r7, #8
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}
 8011ecc:	0802f320 	.word	0x0802f320
 8011ed0:	0802f334 	.word	0x0802f334
 8011ed4:	0802f33c 	.word	0x0802f33c

08011ed8 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE18startMoveAnimationEsstPFstsstES4_>:
    void startMoveAnimation(int16_t endX, int16_t endY, uint16_t duration, EasingEquation xProgressionEquation = &EasingEquations::linearEaseNone, EasingEquation yProgressionEquation = &EasingEquations::linearEaseNone)
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b084      	sub	sp, #16
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	60f8      	str	r0, [r7, #12]
 8011ee0:	4608      	mov	r0, r1
 8011ee2:	4611      	mov	r1, r2
 8011ee4:	461a      	mov	r2, r3
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	817b      	strh	r3, [r7, #10]
 8011eea:	460b      	mov	r3, r1
 8011eec:	813b      	strh	r3, [r7, #8]
 8011eee:	4613      	mov	r3, r2
 8011ef0:	80fb      	strh	r3, [r7, #6]
        if (!moveAnimationRunning)
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8011ef8:	f083 0301 	eor.w	r3, r3, #1
 8011efc:	b2db      	uxtb	r3, r3
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d007      	beq.n	8011f12 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE18startMoveAnimationEsstPFstsstES4_+0x3a>
            Application::getInstance()->registerTimerWidget(this);
 8011f02:	f008 fc67 	bl	801a7d4 <_ZN8touchgfx11Application11getInstanceEv>
 8011f06:	4602      	mov	r2, r0
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	4619      	mov	r1, r3
 8011f0c:	4610      	mov	r0, r2
 8011f0e:	f7ff ff04 	bl	8011d1a <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        moveAnimationCounter = 0;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	2200      	movs	r2, #0
 8011f16:	85da      	strh	r2, [r3, #46]	@ 0x2e
        moveAnimationStartX = T::getX();
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7ff fee3 	bl	8011ce6 <_ZNK8touchgfx8Drawable4getXEv>
 8011f20:	4603      	mov	r3, r0
 8011f22:	461a      	mov	r2, r3
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	869a      	strh	r2, [r3, #52]	@ 0x34
        moveAnimationStartY = T::getY();
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f7ff fee8 	bl	8011d00 <_ZNK8touchgfx8Drawable4getYEv>
 8011f30:	4603      	mov	r3, r0
 8011f32:	461a      	mov	r2, r3
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	86da      	strh	r2, [r3, #54]	@ 0x36
        moveAnimationEndX = endX;
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	897a      	ldrh	r2, [r7, #10]
 8011f3c:	871a      	strh	r2, [r3, #56]	@ 0x38
        moveAnimationEndY = endY;
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	893a      	ldrh	r2, [r7, #8]
 8011f42:	875a      	strh	r2, [r3, #58]	@ 0x3a
        moveAnimationDuration = duration;
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	88fa      	ldrh	r2, [r7, #6]
 8011f48:	865a      	strh	r2, [r3, #50]	@ 0x32
        moveAnimationXEquation = xProgressionEquation;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	69ba      	ldr	r2, [r7, #24]
 8011f4e:	63da      	str	r2, [r3, #60]	@ 0x3c
        moveAnimationYEquation = yProgressionEquation;
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	69fa      	ldr	r2, [r7, #28]
 8011f54:	641a      	str	r2, [r3, #64]	@ 0x40
        moveAnimationRunning = true;
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	2201      	movs	r2, #1
 8011f5a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
        if (moveAnimationDelay == 0 && moveAnimationDuration == 0)
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d106      	bne.n	8011f74 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE18startMoveAnimationEsstPFstsstES4_+0x9c>
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d102      	bne.n	8011f74 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE18startMoveAnimationEsstPFstsstES4_+0x9c>
            nextMoveAnimationStep(); // Set end position and shut down
 8011f6e:	68f8      	ldr	r0, [r7, #12]
 8011f70:	f7ff faaa 	bl	80114c8 <_ZN8touchgfx12MoveAnimatorINS_9ContainerEE21nextMoveAnimationStepEv>
    }
 8011f74:	bf00      	nop
 8011f76:	3710      	adds	r7, #16
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}

08011f7c <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8011f7c:	b480      	push	{r7}
 8011f7e:	b083      	sub	sp, #12
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
    {
    }
 8011f84:	bf00      	nop
 8011f86:	370c      	adds	r7, #12
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8e:	4770      	bx	lr

08011f90 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8011f90:	b480      	push	{r7}
 8011f92:	b083      	sub	sp, #12
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
    {
    }
 8011f98:	bf00      	nop
 8011f9a:	370c      	adds	r7, #12
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa2:	4770      	bx	lr

08011fa4 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8011fa4:	b480      	push	{r7}
 8011fa6:	b083      	sub	sp, #12
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
    {
 8011fac:	4a04      	ldr	r2, [pc, #16]	@ (8011fc0 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	601a      	str	r2, [r3, #0]
    }
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	370c      	adds	r7, #12
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbe:	4770      	bx	lr
 8011fc0:	080301fc 	.word	0x080301fc

08011fc4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b082      	sub	sp, #8
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
    }
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f7ff ffe9 	bl	8011fa4 <_ZN8touchgfx9PresenterD1Ev>
 8011fd2:	2104      	movs	r1, #4
 8011fd4:	6878      	ldr	r0, [r7, #4]
 8011fd6:	f01a fece 	bl	802cd76 <_ZdlPvj>
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3708      	adds	r7, #8
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8011fe4:	b480      	push	{r7}
 8011fe6:	b083      	sub	sp, #12
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
    {
 8011fec:	4a04      	ldr	r2, [pc, #16]	@ (8012000 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	601a      	str	r2, [r3, #0]
    }
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	370c      	adds	r7, #12
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffe:	4770      	bx	lr
 8012000:	080301fc 	.word	0x080301fc

08012004 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8012004:	b480      	push	{r7}
 8012006:	b083      	sub	sp, #12
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
 801200c:	4a06      	ldr	r2, [pc, #24]	@ (8012028 <_ZN13ModelListenerC1Ev+0x24>)
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	601a      	str	r2, [r3, #0]
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2200      	movs	r2, #0
 8012016:	605a      	str	r2, [r3, #4]
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	4618      	mov	r0, r3
 801201c:	370c      	adds	r7, #12
 801201e:	46bd      	mov	sp, r7
 8012020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012024:	4770      	bx	lr
 8012026:	bf00      	nop
 8012028:	080301ec 	.word	0x080301ec

0801202c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 801202c:	b480      	push	{r7}
 801202e:	b083      	sub	sp, #12
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	4a04      	ldr	r2, [pc, #16]	@ (8012048 <_ZN13ModelListenerD1Ev+0x1c>)
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	601a      	str	r2, [r3, #0]
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	4618      	mov	r0, r3
 801203e:	370c      	adds	r7, #12
 8012040:	46bd      	mov	sp, r7
 8012042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012046:	4770      	bx	lr
 8012048:	080301ec 	.word	0x080301ec

0801204c <_ZN13ModelListenerD0Ev>:
 801204c:	b580      	push	{r7, lr}
 801204e:	b082      	sub	sp, #8
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f7ff ffe9 	bl	801202c <_ZN13ModelListenerD1Ev>
 801205a:	2108      	movs	r1, #8
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f01a fe8a 	bl	802cd76 <_ZdlPvj>
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	4618      	mov	r0, r3
 8012066:	3708      	adds	r7, #8
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}

0801206c <_ZN17mainPagePresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainPagePresenter() {}
 801206c:	b580      	push	{r7, lr}
 801206e:	b082      	sub	sp, #8
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
 8012074:	4a09      	ldr	r2, [pc, #36]	@ (801209c <_ZN17mainPagePresenterD1Ev+0x30>)
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	601a      	str	r2, [r3, #0]
 801207a:	4a09      	ldr	r2, [pc, #36]	@ (80120a0 <_ZN17mainPagePresenterD1Ev+0x34>)
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	605a      	str	r2, [r3, #4]
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	3304      	adds	r3, #4
 8012084:	4618      	mov	r0, r3
 8012086:	f7ff ffd1 	bl	801202c <_ZN13ModelListenerD1Ev>
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	4618      	mov	r0, r3
 801208e:	f7ff ff89 	bl	8011fa4 <_ZN8touchgfx9PresenterD1Ev>
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	4618      	mov	r0, r3
 8012096:	3708      	adds	r7, #8
 8012098:	46bd      	mov	sp, r7
 801209a:	bd80      	pop	{r7, pc}
 801209c:	080301c4 	.word	0x080301c4
 80120a0:	080301dc 	.word	0x080301dc

080120a4 <_ZThn4_N17mainPagePresenterD1Ev>:
 80120a4:	f1a0 0004 	sub.w	r0, r0, #4
 80120a8:	e7e0      	b.n	801206c <_ZN17mainPagePresenterD1Ev>
 80120aa:	bf00      	nop

080120ac <_ZN17mainPagePresenterD0Ev>:
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b082      	sub	sp, #8
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
 80120b4:	6878      	ldr	r0, [r7, #4]
 80120b6:	f7ff ffd9 	bl	801206c <_ZN17mainPagePresenterD1Ev>
 80120ba:	2110      	movs	r1, #16
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f01a fe5a 	bl	802cd76 <_ZdlPvj>
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	4618      	mov	r0, r3
 80120c6:	3708      	adds	r7, #8
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd80      	pop	{r7, pc}

080120cc <_ZThn4_N17mainPagePresenterD0Ev>:
 80120cc:	f1a0 0004 	sub.w	r0, r0, #4
 80120d0:	e7ec      	b.n	80120ac <_ZN17mainPagePresenterD0Ev>
	...

080120d4 <_ZN17mainPagePresenterC1ER12mainPageView>:
#include <gui/mainpage_screen/mainPageView.hpp>
#include <gui/mainpage_screen/mainPagePresenter.hpp>

mainPagePresenter::mainPagePresenter(mainPageView& v)
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b082      	sub	sp, #8
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
 80120dc:	6039      	str	r1, [r7, #0]
    : view(v)
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	4618      	mov	r0, r3
 80120e2:	f7ff ff7f 	bl	8011fe4 <_ZN8touchgfx9PresenterC1Ev>
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	3304      	adds	r3, #4
 80120ea:	4618      	mov	r0, r3
 80120ec:	f7ff ff8a 	bl	8012004 <_ZN13ModelListenerC1Ev>
 80120f0:	4a06      	ldr	r2, [pc, #24]	@ (801210c <_ZN17mainPagePresenterC1ER12mainPageView+0x38>)
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	601a      	str	r2, [r3, #0]
 80120f6:	4a06      	ldr	r2, [pc, #24]	@ (8012110 <_ZN17mainPagePresenterC1ER12mainPageView+0x3c>)
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	605a      	str	r2, [r3, #4]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	683a      	ldr	r2, [r7, #0]
 8012100:	60da      	str	r2, [r3, #12]
{

}
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	4618      	mov	r0, r3
 8012106:	3708      	adds	r7, #8
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}
 801210c:	080301c4 	.word	0x080301c4
 8012110:	080301dc 	.word	0x080301dc

08012114 <_ZN17mainPagePresenter8activateEv>:

void mainPagePresenter::activate()
{
 8012114:	b480      	push	{r7}
 8012116:	b083      	sub	sp, #12
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]

}
 801211c:	bf00      	nop
 801211e:	370c      	adds	r7, #12
 8012120:	46bd      	mov	sp, r7
 8012122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012126:	4770      	bx	lr

08012128 <_ZN17mainPagePresenter10deactivateEv>:

void mainPagePresenter::deactivate()
{
 8012128:	b480      	push	{r7}
 801212a:	b083      	sub	sp, #12
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]

}
 8012130:	bf00      	nop
 8012132:	370c      	adds	r7, #12
 8012134:	46bd      	mov	sp, r7
 8012136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213a:	4770      	bx	lr

0801213c <_ZN12mainPageViewD1Ev>:

class mainPageView : public mainPageViewBase
{
public:
    mainPageView();
    virtual ~mainPageView() {}
 801213c:	b580      	push	{r7, lr}
 801213e:	b082      	sub	sp, #8
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
 8012144:	4a05      	ldr	r2, [pc, #20]	@ (801215c <_ZN12mainPageViewD1Ev+0x20>)
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	601a      	str	r2, [r3, #0]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	4618      	mov	r0, r3
 801214e:	f7ff fb5b 	bl	8011808 <_ZN16mainPageViewBaseD1Ev>
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	4618      	mov	r0, r3
 8012156:	3708      	adds	r7, #8
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}
 801215c:	08030214 	.word	0x08030214

08012160 <_ZN12mainPageViewD0Ev>:
 8012160:	b580      	push	{r7, lr}
 8012162:	b082      	sub	sp, #8
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f7ff ffe7 	bl	801213c <_ZN12mainPageViewD1Ev>
 801216e:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8012172:	6878      	ldr	r0, [r7, #4]
 8012174:	f01a fdff 	bl	802cd76 <_ZdlPvj>
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	4618      	mov	r0, r3
 801217c:	3708      	adds	r7, #8
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}
	...

08012184 <_ZN12mainPageViewC1Ev>:
#include <gui/mainpage_screen/mainPageView.hpp>

mainPageView::mainPageView()
 8012184:	b580      	push	{r7, lr}
 8012186:	b082      	sub	sp, #8
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	4618      	mov	r0, r3
 8012190:	f7ff fae0 	bl	8011754 <_ZN16mainPageViewBaseC1Ev>
 8012194:	4a03      	ldr	r2, [pc, #12]	@ (80121a4 <_ZN12mainPageViewC1Ev+0x20>)
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	601a      	str	r2, [r3, #0]
{

}
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	4618      	mov	r0, r3
 801219e:	3708      	adds	r7, #8
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}
 80121a4:	08030214 	.word	0x08030214

080121a8 <_ZN12mainPageView11setupScreenEv>:

void mainPageView::setupScreen()
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b082      	sub	sp, #8
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
    mainPageViewBase::setupScreen();
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	4618      	mov	r0, r3
 80121b4:	f7ff fb55 	bl	8011862 <_ZN16mainPageViewBase11setupScreenEv>
}
 80121b8:	bf00      	nop
 80121ba:	3708      	adds	r7, #8
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}

080121c0 <_ZN12mainPageView14tearDownScreenEv>:

void mainPageView::tearDownScreen()
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b082      	sub	sp, #8
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
    mainPageViewBase::tearDownScreen();
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	4618      	mov	r0, r3
 80121cc:	f7ff fa4c 	bl	8011668 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80121d0:	bf00      	nop
 80121d2:	3708      	adds	r7, #8
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}

080121d8 <_ZN12mainPageView18handleGestureEventERKN8touchgfx12GestureEventE>:
void mainPageView::handleGestureEvent(const touchgfx::GestureEvent &evt)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b082      	sub	sp, #8
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
 80121e0:	6039      	str	r1, [r7, #0]
    // 检测下滑手势
    if (evt.getType() == touchgfx::GestureEvent::SWIPE_VERTICAL)
 80121e2:	6838      	ldr	r0, [r7, #0]
 80121e4:	f7ff fd73 	bl	8011cce <_ZNK8touchgfx12GestureEvent7getTypeEv>
 80121e8:	4603      	mov	r3, r0
 80121ea:	2b01      	cmp	r3, #1
 80121ec:	bf0c      	ite	eq
 80121ee:	2301      	moveq	r3, #1
 80121f0:	2300      	movne	r3, #0
 80121f2:	b2db      	uxtb	r3, r3
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d01e      	beq.n	8012236 <_ZN12mainPageView18handleGestureEventERKN8touchgfx12GestureEventE+0x5e>
    {
        // 下滑时 (正值表示向下滑动)
        if (evt.getVelocity() > 0)
 80121f8:	6838      	ldr	r0, [r7, #0]
 80121fa:	f7ff fd5b 	bl	8011cb4 <_ZNK8touchgfx12GestureEvent11getVelocityEv>
 80121fe:	4603      	mov	r3, r0
 8012200:	2b00      	cmp	r3, #0
 8012202:	bfcc      	ite	gt
 8012204:	2301      	movgt	r3, #1
 8012206:	2300      	movle	r3, #0
 8012208:	b2db      	uxtb	r3, r3
 801220a:	2b00      	cmp	r3, #0
 801220c:	d005      	beq.n	801221a <_ZN12mainPageView18handleGestureEventERKN8touchgfx12GestureEventE+0x42>
        {
            // 调用SwipeMenuPage的显示菜单方法
            swipeMenuPage1.showSlideMenu();
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	336c      	adds	r3, #108	@ 0x6c
 8012212:	4618      	mov	r0, r3
 8012214:	f7ff fdc4 	bl	8011da0 <_ZN13SwipeMenuPage13showSlideMenuEv>
 8012218:	e00d      	b.n	8012236 <_ZN12mainPageView18handleGestureEventERKN8touchgfx12GestureEventE+0x5e>
        }
        // 上滑时 (负值表示向上滑动)
        else if (evt.getVelocity() < 0)
 801221a:	6838      	ldr	r0, [r7, #0]
 801221c:	f7ff fd4a 	bl	8011cb4 <_ZNK8touchgfx12GestureEvent11getVelocityEv>
 8012220:	4603      	mov	r3, r0
 8012222:	b29b      	uxth	r3, r3
 8012224:	0bdb      	lsrs	r3, r3, #15
 8012226:	b2db      	uxtb	r3, r3
 8012228:	2b00      	cmp	r3, #0
 801222a:	d004      	beq.n	8012236 <_ZN12mainPageView18handleGestureEventERKN8touchgfx12GestureEventE+0x5e>
        {
            // 调用SwipeMenuPage的隐藏菜单方法
            swipeMenuPage1.hideSlideMenu();
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	336c      	adds	r3, #108	@ 0x6c
 8012230:	4618      	mov	r0, r3
 8012232:	f7ff fde3 	bl	8011dfc <_ZN13SwipeMenuPage13hideSlideMenuEv>
        }
    }

    // 正确调用父类方法
    mainPageViewBase::handleGestureEvent(evt);
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	6839      	ldr	r1, [r7, #0]
 801223a:	4618      	mov	r0, r3
 801223c:	f00a f9c6 	bl	801c5cc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>
}
 8012240:	bf00      	nop
 8012242:	3708      	adds	r7, #8
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}

08012248 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8012248:	b480      	push	{r7}
 801224a:	b083      	sub	sp, #12
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	2200      	movs	r2, #0
 8012254:	601a      	str	r2, [r3, #0]
{

}
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	4618      	mov	r0, r3
 801225a:	370c      	adds	r7, #12
 801225c:	46bd      	mov	sp, r7
 801225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012262:	4770      	bx	lr

08012264 <_ZN5Model4tickEv>:

void Model::tick()
{
 8012264:	b480      	push	{r7}
 8012266:	b083      	sub	sp, #12
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]

}
 801226c:	bf00      	nop
 801226e:	370c      	adds	r7, #12
 8012270:	46bd      	mov	sp, r7
 8012272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012276:	4770      	bx	lr

08012278 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8012278:	b480      	push	{r7}
 801227a:	b083      	sub	sp, #12
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2b00      	cmp	r3, #0
 8012284:	bfb8      	it	lt
 8012286:	425b      	neglt	r3, r3
 8012288:	4618      	mov	r0, r3
 801228a:	370c      	adds	r7, #12
 801228c:	46bd      	mov	sp, r7
 801228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012292:	4770      	bx	lr

08012294 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8012294:	b480      	push	{r7}
 8012296:	b083      	sub	sp, #12
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
    {
 801229c:	4a04      	ldr	r2, [pc, #16]	@ (80122b0 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	601a      	str	r2, [r3, #0]
    }
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	4618      	mov	r0, r3
 80122a6:	370c      	adds	r7, #12
 80122a8:	46bd      	mov	sp, r7
 80122aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ae:	4770      	bx	lr
 80122b0:	08030260 	.word	0x08030260

080122b4 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
    }
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f7ff ffe9 	bl	8012294 <_ZN8touchgfx15TouchControllerD1Ev>
 80122c2:	2104      	movs	r1, #4
 80122c4:	6878      	ldr	r0, [r7, #4]
 80122c6:	f01a fd56 	bl	802cd76 <_ZdlPvj>
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	4618      	mov	r0, r3
 80122ce:	3708      	adds	r7, #8
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd80      	pop	{r7, pc}

080122d4 <_ZN20STM32TouchController4initEv>:
#include <stdio.h>

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b084      	sub	sp, #16
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    CST816D_Init();
 80122dc:	f7ee fa16 	bl	800070c <CST816D_Init>
    uint8_t irq_setting = EnTouch | EnChange | EnMotion;
 80122e0:	2370      	movs	r3, #112	@ 0x70
 80122e2:	73fb      	strb	r3, [r7, #15]
    CST816D_SetIrqCtl(irq_setting);
 80122e4:	7bfb      	ldrb	r3, [r7, #15]
 80122e6:	4618      	mov	r0, r3
 80122e8:	f7ee fa7e 	bl	80007e8 <CST816D_SetIrqCtl>
    CST816D_SetMotionMask(0x07);
 80122ec:	2007      	movs	r0, #7
 80122ee:	f7ee fa6b 	bl	80007c8 <CST816D_SetMotionMask>
    printf("cst816d init\n");
 80122f2:	4803      	ldr	r0, [pc, #12]	@ (8012300 <_ZN20STM32TouchController4initEv+0x2c>)
 80122f4:	f01b fe60 	bl	802dfb8 <puts>
}
 80122f8:	bf00      	nop
 80122fa:	3710      	adds	r7, #16
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	0802f340 	.word	0x0802f340

08012304 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t &x, int32_t &y)
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b08e      	sub	sp, #56	@ 0x38
 8012308:	af00      	add	r7, sp, #0
 801230a:	60f8      	str	r0, [r7, #12]
 801230c:	60b9      	str	r1, [r7, #8]
 801230e:	607a      	str	r2, [r7, #4]
    static int32_t lastY = 0;
    static bool wasTouched = false;
    static uint32_t touchStartTime = 0;
    static uint8_t lastGesture = 0;

    const int32_t MIN_X = 0;
 8012310:	2300      	movs	r3, #0
 8012312:	637b      	str	r3, [r7, #52]	@ 0x34
    const int32_t MAX_X = 239;
 8012314:	23ef      	movs	r3, #239	@ 0xef
 8012316:	633b      	str	r3, [r7, #48]	@ 0x30
    const int32_t MIN_Y = 0;
 8012318:	2300      	movs	r3, #0
 801231a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const int32_t MAX_Y = 295;
 801231c:	f240 1327 	movw	r3, #295	@ 0x127
 8012320:	62bb      	str	r3, [r7, #40]	@ 0x28
    const int32_t MIN_DELTA = 1;
 8012322:	2301      	movs	r3, #1
 8012324:	627b      	str	r3, [r7, #36]	@ 0x24

    if (CST816D_IsTouched())
 8012326:	f7ee fa3d 	bl	80007a4 <CST816D_IsTouched>
 801232a:	4603      	mov	r3, r0
 801232c:	2b00      	cmp	r3, #0
 801232e:	bf14      	ite	ne
 8012330:	2301      	movne	r3, #1
 8012332:	2300      	moveq	r3, #0
 8012334:	b2db      	uxtb	r3, r3
 8012336:	2b00      	cmp	r3, #0
 8012338:	f000 809e 	beq.w	8012478 <_ZN20STM32TouchController11sampleTouchERlS0_+0x174>
    {
        uint8_t raw_data[7] = {0};
 801233c:	f107 0318 	add.w	r3, r7, #24
 8012340:	2200      	movs	r2, #0
 8012342:	601a      	str	r2, [r3, #0]
 8012344:	f8c3 2003 	str.w	r2, [r3, #3]
        extern HAL_StatusTypeDef CST816D_ReadReg(uint8_t reg_addr, uint8_t *data, uint16_t len);

        if (CST816D_ReadReg(0x01, raw_data, 7) == HAL_OK)
 8012348:	f107 0318 	add.w	r3, r7, #24
 801234c:	2207      	movs	r2, #7
 801234e:	4619      	mov	r1, r3
 8012350:	2001      	movs	r0, #1
 8012352:	f7ee f9a3 	bl	800069c <CST816D_ReadReg>
 8012356:	4603      	mov	r3, r0
 8012358:	2b00      	cmp	r3, #0
 801235a:	bf0c      	ite	eq
 801235c:	2301      	moveq	r3, #1
 801235e:	2300      	movne	r3, #0
 8012360:	b2db      	uxtb	r3, r3
 8012362:	2b00      	cmp	r3, #0
 8012364:	f000 8099 	beq.w	801249a <_ZN20STM32TouchController11sampleTouchERlS0_+0x196>
        {
            uint8_t gesture = raw_data[0];
 8012368:	7e3b      	ldrb	r3, [r7, #24]
 801236a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            uint8_t finger_num = raw_data[1] & 0x0F;
 801236e:	7e7b      	ldrb	r3, [r7, #25]
 8012370:	f003 030f 	and.w	r3, r3, #15
 8012374:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            int32_t newX = ((uint16_t)(raw_data[2] & 0x0F) << 8) | raw_data[3];
 8012378:	7ebb      	ldrb	r3, [r7, #26]
 801237a:	021b      	lsls	r3, r3, #8
 801237c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8012380:	7efa      	ldrb	r2, [r7, #27]
 8012382:	4313      	orrs	r3, r2
 8012384:	617b      	str	r3, [r7, #20]
            int32_t newY = ((uint16_t)(raw_data[4] & 0x0F) << 8) | raw_data[5];
 8012386:	7f3b      	ldrb	r3, [r7, #28]
 8012388:	021b      	lsls	r3, r3, #8
 801238a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801238e:	7f7a      	ldrb	r2, [r7, #29]
 8012390:	4313      	orrs	r3, r2
 8012392:	613b      	str	r3, [r7, #16]
            // printf("Raw: [%02X %02X %02X %02X %02X %02X %02X] -> fingers=%d, X=%ld, Y=%ld\n",
            //        raw_data[0], raw_data[1], raw_data[2], raw_data[3],
            //        raw_data[4], raw_data[5], raw_data[6],
            //        finger_num, newX, newY);

            if (finger_num > 0)
 8012394:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012398:	2b00      	cmp	r3, #0
 801239a:	d07e      	beq.n	801249a <_ZN20STM32TouchController11sampleTouchERlS0_+0x196>
            {
                // 如果是新的触摸事件
                if (!wasTouched)
 801239c:	4b41      	ldr	r3, [pc, #260]	@ (80124a4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a0>)
 801239e:	781b      	ldrb	r3, [r3, #0]
 80123a0:	f083 0301 	eor.w	r3, r3, #1
 80123a4:	b2db      	uxtb	r3, r3
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d008      	beq.n	80123bc <_ZN20STM32TouchController11sampleTouchERlS0_+0xb8>
                {
                    touchStartTime = HAL_GetTick();
 80123aa:	f7ef fd6f 	bl	8001e8c <HAL_GetTick>
 80123ae:	4603      	mov	r3, r0
 80123b0:	4a3d      	ldr	r2, [pc, #244]	@ (80124a8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a4>)
 80123b2:	6013      	str	r3, [r2, #0]
                    lastGesture = gesture;
 80123b4:	4a3d      	ldr	r2, [pc, #244]	@ (80124ac <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a8>)
 80123b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80123ba:	7013      	strb	r3, [r2, #0]
                }

                // 确保坐标在有效范围内
                newX = (newX < MIN_X) ? MIN_X : (newX > MAX_X) ? MAX_X
 80123bc:	697b      	ldr	r3, [r7, #20]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	db08      	blt.n	80123d4 <_ZN20STM32TouchController11sampleTouchERlS0_+0xd0>
 80123c2:	697b      	ldr	r3, [r7, #20]
 80123c4:	2bef      	cmp	r3, #239	@ 0xef
 80123c6:	dc03      	bgt.n	80123d0 <_ZN20STM32TouchController11sampleTouchERlS0_+0xcc>
                                                               : newX;
 80123c8:	f107 0314 	add.w	r3, r7, #20
                newX = (newX < MIN_X) ? MIN_X : (newX > MAX_X) ? MAX_X
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	e002      	b.n	80123d6 <_ZN20STM32TouchController11sampleTouchERlS0_+0xd2>
 80123d0:	23ef      	movs	r3, #239	@ 0xef
 80123d2:	e000      	b.n	80123d6 <_ZN20STM32TouchController11sampleTouchERlS0_+0xd2>
 80123d4:	2300      	movs	r3, #0
 80123d6:	617b      	str	r3, [r7, #20]
                newY = (newY < MIN_Y) ? MIN_Y : (newY > MAX_Y) ? MAX_Y
 80123d8:	693b      	ldr	r3, [r7, #16]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	db0a      	blt.n	80123f4 <_ZN20STM32TouchController11sampleTouchERlS0_+0xf0>
 80123de:	693b      	ldr	r3, [r7, #16]
 80123e0:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 80123e4:	da03      	bge.n	80123ee <_ZN20STM32TouchController11sampleTouchERlS0_+0xea>
                                                               : newY;
 80123e6:	f107 0310 	add.w	r3, r7, #16
                newY = (newY < MIN_Y) ? MIN_Y : (newY > MAX_Y) ? MAX_Y
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	e003      	b.n	80123f6 <_ZN20STM32TouchController11sampleTouchERlS0_+0xf2>
 80123ee:	f240 1327 	movw	r3, #295	@ 0x127
 80123f2:	e000      	b.n	80123f6 <_ZN20STM32TouchController11sampleTouchERlS0_+0xf2>
 80123f4:	2300      	movs	r3, #0
 80123f6:	613b      	str	r3, [r7, #16]

                bool significantChange = !wasTouched ||
 80123f8:	4b2a      	ldr	r3, [pc, #168]	@ (80124a4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a0>)
 80123fa:	781b      	ldrb	r3, [r3, #0]
 80123fc:	f083 0301 	eor.w	r3, r3, #1
 8012400:	b2db      	uxtb	r3, r3
                                         abs(newX - lastX) > MIN_DELTA ||
 8012402:	2b00      	cmp	r3, #0
 8012404:	d113      	bne.n	801242e <_ZN20STM32TouchController11sampleTouchERlS0_+0x12a>
 8012406:	697a      	ldr	r2, [r7, #20]
 8012408:	4b29      	ldr	r3, [pc, #164]	@ (80124b0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1ac>)
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	1ad3      	subs	r3, r2, r3
 801240e:	4618      	mov	r0, r3
 8012410:	f7ff ff32 	bl	8012278 <_ZSt3absl>
 8012414:	4603      	mov	r3, r0
                bool significantChange = !wasTouched ||
 8012416:	2b01      	cmp	r3, #1
 8012418:	dc09      	bgt.n	801242e <_ZN20STM32TouchController11sampleTouchERlS0_+0x12a>
                                         abs(newY - lastY) > MIN_DELTA;
 801241a:	693a      	ldr	r2, [r7, #16]
 801241c:	4b25      	ldr	r3, [pc, #148]	@ (80124b4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1b0>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	1ad3      	subs	r3, r2, r3
 8012422:	4618      	mov	r0, r3
 8012424:	f7ff ff28 	bl	8012278 <_ZSt3absl>
 8012428:	4603      	mov	r3, r0
                                         abs(newX - lastX) > MIN_DELTA ||
 801242a:	2b01      	cmp	r3, #1
 801242c:	dd01      	ble.n	8012432 <_ZN20STM32TouchController11sampleTouchERlS0_+0x12e>
 801242e:	2301      	movs	r3, #1
 8012430:	e000      	b.n	8012434 <_ZN20STM32TouchController11sampleTouchERlS0_+0x130>
 8012432:	2300      	movs	r3, #0
                                         abs(newY - lastY) > MIN_DELTA;
 8012434:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                if (significantChange)
 8012438:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801243c:	2b00      	cmp	r3, #0
 801243e:	d00e      	beq.n	801245e <_ZN20STM32TouchController11sampleTouchERlS0_+0x15a>
                {
                    x = newX;
 8012440:	697a      	ldr	r2, [r7, #20]
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	601a      	str	r2, [r3, #0]
                    y = newY;
 8012446:	693a      	ldr	r2, [r7, #16]
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	601a      	str	r2, [r3, #0]
                    lastX = x;
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	4a17      	ldr	r2, [pc, #92]	@ (80124b0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1ac>)
 8012452:	6013      	str	r3, [r2, #0]
                    lastY = y;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	4a16      	ldr	r2, [pc, #88]	@ (80124b4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1b0>)
 801245a:	6013      	str	r3, [r2, #0]
 801245c:	e007      	b.n	801246e <_ZN20STM32TouchController11sampleTouchERlS0_+0x16a>
                    // printf("Touch Event - X: %ld, Y: %ld, isDrag: %s, Gesture: 0x%02X\n",
                    //        x, y, wasTouched ? "true" : "false", gesture);
                }
                else
                {
                    x = lastX;
 801245e:	4b14      	ldr	r3, [pc, #80]	@ (80124b0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1ac>)
 8012460:	681a      	ldr	r2, [r3, #0]
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	601a      	str	r2, [r3, #0]
                    y = lastY;
 8012466:	4b13      	ldr	r3, [pc, #76]	@ (80124b4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1b0>)
 8012468:	681a      	ldr	r2, [r3, #0]
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	601a      	str	r2, [r3, #0]
                }

                wasTouched = true;
 801246e:	4b0d      	ldr	r3, [pc, #52]	@ (80124a4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a0>)
 8012470:	2201      	movs	r2, #1
 8012472:	701a      	strb	r2, [r3, #0]
                return true;
 8012474:	2301      	movs	r3, #1
 8012476:	e011      	b.n	801249c <_ZN20STM32TouchController11sampleTouchERlS0_+0x198>
            }
        }
    }
    else if (wasTouched)
 8012478:	4b0a      	ldr	r3, [pc, #40]	@ (80124a4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a0>)
 801247a:	781b      	ldrb	r3, [r3, #0]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d00c      	beq.n	801249a <_ZN20STM32TouchController11sampleTouchERlS0_+0x196>
    {
        // // 只在真正释放时发送一次释放事件
        // printf("Touch Released - Final X: %ld, Y: %ld, Duration: %ldms\n",
        //        lastX, lastY, HAL_GetTick() - touchStartTime);
        x = lastX;
 8012480:	4b0b      	ldr	r3, [pc, #44]	@ (80124b0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1ac>)
 8012482:	681a      	ldr	r2, [r3, #0]
 8012484:	68bb      	ldr	r3, [r7, #8]
 8012486:	601a      	str	r2, [r3, #0]
        y = lastY;
 8012488:	4b0a      	ldr	r3, [pc, #40]	@ (80124b4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1b0>)
 801248a:	681a      	ldr	r2, [r3, #0]
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	601a      	str	r2, [r3, #0]
        wasTouched = false;
 8012490:	4b04      	ldr	r3, [pc, #16]	@ (80124a4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1a0>)
 8012492:	2200      	movs	r2, #0
 8012494:	701a      	strb	r2, [r3, #0]
        return true;
 8012496:	2301      	movs	r3, #1
 8012498:	e000      	b.n	801249c <_ZN20STM32TouchController11sampleTouchERlS0_+0x198>
    }

    return false;
 801249a:	2300      	movs	r3, #0
}
 801249c:	4618      	mov	r0, r3
 801249e:	3738      	adds	r7, #56	@ 0x38
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}
 80124a4:	2005a70c 	.word	0x2005a70c
 80124a8:	2005a710 	.word	0x2005a710
 80124ac:	2005a714 	.word	0x2005a714
 80124b0:	2005a704 	.word	0x2005a704
 80124b4:	2005a708 	.word	0x2005a708

080124b8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b082      	sub	sp, #8
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	4a05      	ldr	r2, [pc, #20]	@ (80124d8 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	601a      	str	r2, [r3, #0]
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	4618      	mov	r0, r3
 80124ca:	f7ff fee3 	bl	8012294 <_ZN8touchgfx15TouchControllerD1Ev>
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	4618      	mov	r0, r3
 80124d2:	3708      	adds	r7, #8
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}
 80124d8:	08030248 	.word	0x08030248

080124dc <_ZN20STM32TouchControllerD0Ev>:
 80124dc:	b580      	push	{r7, lr}
 80124de:	b082      	sub	sp, #8
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f7ff ffe7 	bl	80124b8 <_ZN20STM32TouchControllerD1Ev>
 80124ea:	2104      	movs	r1, #4
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f01a fc42 	bl	802cd76 <_ZdlPvj>
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	4618      	mov	r0, r3
 80124f6:	3708      	adds	r7, #8
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd80      	pop	{r7, pc}

080124fc <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 80124fc:	b480      	push	{r7}
 80124fe:	af00      	add	r7, sp, #0

}
 8012500:	bf00      	nop
 8012502:	46bd      	mov	sp, r7
 8012504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012508:	4770      	bx	lr
	...

0801250c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 801250c:	b480      	push	{r7}
 801250e:	b083      	sub	sp, #12
 8012510:	af00      	add	r7, sp, #0
 8012512:	4603      	mov	r3, r0
 8012514:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8012516:	79fb      	ldrb	r3, [r7, #7]
 8012518:	2b03      	cmp	r3, #3
 801251a:	d80c      	bhi.n	8012536 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 801251c:	a201      	add	r2, pc, #4	@ (adr r2, 8012524 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 801251e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012522:	bf00      	nop
 8012524:	08012535 	.word	0x08012535
 8012528:	08012535 	.word	0x08012535
 801252c:	08012535 	.word	0x08012535
 8012530:	08012535 	.word	0x08012535
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 8012534:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 8012536:	bf00      	nop
 8012538:	370c      	adds	r7, #12
 801253a:	46bd      	mov	sp, r7
 801253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012540:	4770      	bx	lr
 8012542:	bf00      	nop

08012544 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8012544:	b480      	push	{r7}
 8012546:	b083      	sub	sp, #12
 8012548:	af00      	add	r7, sp, #0
 801254a:	4603      	mov	r3, r0
 801254c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801254e:	79fb      	ldrb	r3, [r7, #7]
 8012550:	2b03      	cmp	r3, #3
 8012552:	d80c      	bhi.n	801256e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8012554:	a201      	add	r2, pc, #4	@ (adr r2, 801255c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8012556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801255a:	bf00      	nop
 801255c:	0801256d 	.word	0x0801256d
 8012560:	0801256d 	.word	0x0801256d
 8012564:	0801256d 	.word	0x0801256d
 8012568:	0801256d 	.word	0x0801256d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 801256c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 801256e:	bf00      	nop
 8012570:	370c      	adds	r7, #12
 8012572:	46bd      	mov	sp, r7
 8012574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012578:	4770      	bx	lr
 801257a:	bf00      	nop

0801257c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 801257c:	b480      	push	{r7}
 801257e:	b083      	sub	sp, #12
 8012580:	af00      	add	r7, sp, #0
 8012582:	4603      	mov	r3, r0
 8012584:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8012586:	79fb      	ldrb	r3, [r7, #7]
 8012588:	2b03      	cmp	r3, #3
 801258a:	d80c      	bhi.n	80125a6 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 801258c:	a201      	add	r2, pc, #4	@ (adr r2, 8012594 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 801258e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012592:	bf00      	nop
 8012594:	080125a5 	.word	0x080125a5
 8012598:	080125a5 	.word	0x080125a5
 801259c:	080125a5 	.word	0x080125a5
 80125a0:	080125a5 	.word	0x080125a5
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 80125a4:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80125a6:	bf00      	nop
 80125a8:	370c      	adds	r7, #12
 80125aa:	46bd      	mov	sp, r7
 80125ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b0:	4770      	bx	lr
 80125b2:	bf00      	nop

080125b4 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80125b4:	b480      	push	{r7}
 80125b6:	b083      	sub	sp, #12
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	6078      	str	r0, [r7, #4]
    {
 80125bc:	4a04      	ldr	r2, [pc, #16]	@ (80125d0 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	601a      	str	r2, [r3, #0]
    }
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	4618      	mov	r0, r3
 80125c6:	370c      	adds	r7, #12
 80125c8:	46bd      	mov	sp, r7
 80125ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ce:	4770      	bx	lr
 80125d0:	080309e0 	.word	0x080309e0

080125d4 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b082      	sub	sp, #8
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
    }
 80125dc:	6878      	ldr	r0, [r7, #4]
 80125de:	f7ff ffe9 	bl	80125b4 <_ZN8touchgfx3HALD1Ev>
 80125e2:	2184      	movs	r1, #132	@ 0x84
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f01a fbc6 	bl	802cd76 <_ZdlPvj>
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	4618      	mov	r0, r3
 80125ee:	3708      	adds	r7, #8
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}

080125f4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80125f4:	b480      	push	{r7}
 80125f6:	b083      	sub	sp, #12
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	460b      	mov	r3, r1
 80125fe:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	78fa      	ldrb	r2, [r7, #3]
 8012604:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	2201      	movs	r2, #1
 801260c:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 8012610:	bf00      	nop
 8012612:	370c      	adds	r7, #12
 8012614:	46bd      	mov	sp, r7
 8012616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261a:	4770      	bx	lr

0801261c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 801261c:	b580      	push	{r7, lr}
 801261e:	b082      	sub	sp, #8
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
 8012624:	460b      	mov	r3, r1
 8012626:	807b      	strh	r3, [r7, #2]
 8012628:	4613      	mov	r3, r2
 801262a:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 801262c:	4b0c      	ldr	r3, [pc, #48]	@ (8012660 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 801262e:	881b      	ldrh	r3, [r3, #0]
 8012630:	887a      	ldrh	r2, [r7, #2]
 8012632:	429a      	cmp	r2, r3
 8012634:	d304      	bcc.n	8012640 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8012636:	4b0b      	ldr	r3, [pc, #44]	@ (8012664 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8012638:	881b      	ldrh	r3, [r3, #0]
 801263a:	883a      	ldrh	r2, [r7, #0]
 801263c:	429a      	cmp	r2, r3
 801263e:	d205      	bcs.n	801264c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8012640:	4b09      	ldr	r3, [pc, #36]	@ (8012668 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8012642:	4a0a      	ldr	r2, [pc, #40]	@ (801266c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8012644:	21a3      	movs	r1, #163	@ 0xa3
 8012646:	480a      	ldr	r0, [pc, #40]	@ (8012670 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8012648:	f01b fa8a 	bl	802db60 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 801264c:	4a09      	ldr	r2, [pc, #36]	@ (8012674 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 801264e:	887b      	ldrh	r3, [r7, #2]
 8012650:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8012652:	4a09      	ldr	r2, [pc, #36]	@ (8012678 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8012654:	883b      	ldrh	r3, [r7, #0]
 8012656:	8013      	strh	r3, [r2, #0]
    }
 8012658:	bf00      	nop
 801265a:	3708      	adds	r7, #8
 801265c:	46bd      	mov	sp, r7
 801265e:	bd80      	pop	{r7, pc}
 8012660:	2005bd10 	.word	0x2005bd10
 8012664:	2005bd12 	.word	0x2005bd12
 8012668:	0802f350 	.word	0x0802f350
 801266c:	0802f3b4 	.word	0x0802f3b4
 8012670:	0802f3f8 	.word	0x0802f3f8
 8012674:	2005bd16 	.word	0x2005bd16
 8012678:	2005bd18 	.word	0x2005bd18

0801267c <_ZN8touchgfx3HAL11submitGPU2DEv>:
    virtual void submitGPU2D()
 801267c:	b480      	push	{r7}
 801267e:	b083      	sub	sp, #12
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
    }
 8012684:	bf00      	nop
 8012686:	370c      	adds	r7, #12
 8012688:	46bd      	mov	sp, r7
 801268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268e:	4770      	bx	lr

08012690 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8012690:	b580      	push	{r7, lr}
 8012692:	b082      	sub	sp, #8
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d009      	beq.n	80126b6 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	685a      	ldr	r2, [r3, #4]
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	685b      	ldr	r3, [r3, #4]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	4610      	mov	r0, r2
 80126b0:	4798      	blx	r3
 80126b2:	4603      	mov	r3, r0
 80126b4:	e000      	b.n	80126b8 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 80126b6:	2300      	movs	r3, #0
    }
 80126b8:	4618      	mov	r0, r3
 80126ba:	3708      	adds	r7, #8
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd80      	pop	{r7, pc}

080126c0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    }

    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b082      	sub	sp, #8
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f004 f841 	bl	8016750 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	33bc      	adds	r3, #188	@ 0xbc
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	4798      	blx	r3
    }
 80126da:	bf00      	nop
 80126dc:	3708      	adds	r7, #8
 80126de:	46bd      	mov	sp, r7
 80126e0:	bd80      	pop	{r7, pc}

080126e2 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80126e2:	b480      	push	{r7}
 80126e4:	b083      	sub	sp, #12
 80126e6:	af00      	add	r7, sp, #0
 80126e8:	6078      	str	r0, [r7, #4]
 80126ea:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 80126ec:	2300      	movs	r3, #0
    }
 80126ee:	4618      	mov	r0, r3
 80126f0:	370c      	adds	r7, #12
 80126f2:	46bd      	mov	sp, r7
 80126f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f8:	4770      	bx	lr
	...

080126fc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b084      	sub	sp, #16
 8012700:	af00      	add	r7, sp, #0
 8012702:	60f8      	str	r0, [r7, #12]
 8012704:	60b9      	str	r1, [r7, #8]
 8012706:	607a      	str	r2, [r7, #4]
 8012708:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801270a:	68bb      	ldr	r3, [r7, #8]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d106      	bne.n	801271e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8012710:	4b0f      	ldr	r3, [pc, #60]	@ (8012750 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8012712:	4a10      	ldr	r2, [pc, #64]	@ (8012754 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8012714:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8012718:	480f      	ldr	r0, [pc, #60]	@ (8012758 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801271a:	f01b fa21 	bl	802db60 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	68ba      	ldr	r2, [r7, #8]
 8012722:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	687a      	ldr	r2, [r7, #4]
 8012728:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	2b00      	cmp	r3, #0
 801272e:	bf14      	ite	ne
 8012730:	2301      	movne	r3, #1
 8012732:	2300      	moveq	r3, #0
 8012734:	b2da      	uxtb	r2, r3
 8012736:	4b09      	ldr	r3, [pc, #36]	@ (801275c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8012738:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	3390      	adds	r3, #144	@ 0x90
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	6839      	ldr	r1, [r7, #0]
 8012744:	68f8      	ldr	r0, [r7, #12]
 8012746:	4798      	blx	r3
    }
 8012748:	bf00      	nop
 801274a:	3710      	adds	r7, #16
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}
 8012750:	0802f43c 	.word	0x0802f43c
 8012754:	0802f474 	.word	0x0802f474
 8012758:	0802f3f8 	.word	0x0802f3f8
 801275c:	2005bd1a 	.word	0x2005bd1a

08012760 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8012760:	b480      	push	{r7}
 8012762:	b083      	sub	sp, #12
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
 8012768:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	683a      	ldr	r2, [r7, #0]
 801276e:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	2b00      	cmp	r3, #0
 8012774:	bf14      	ite	ne
 8012776:	2301      	movne	r3, #1
 8012778:	2300      	moveq	r3, #0
 801277a:	b2da      	uxtb	r2, r3
 801277c:	4b03      	ldr	r3, [pc, #12]	@ (801278c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 801277e:	701a      	strb	r2, [r3, #0]
    }
 8012780:	bf00      	nop
 8012782:	370c      	adds	r7, #12
 8012784:	46bd      	mov	sp, r7
 8012786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278a:	4770      	bx	lr
 801278c:	2005bd1b 	.word	0x2005bd1b

08012790 <_ZN8touchgfx3HAL16waitForLTDCLinesEt>:
     * Only applicable on LTDC systems and when the partial framebuffer strategy is
     * enabled.
     *
     * @param numberOfLines Number of lines to wait.
     */
    virtual void waitForLTDCLines(uint16_t numberOfLines)
 8012790:	b480      	push	{r7}
 8012792:	b083      	sub	sp, #12
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
 8012798:	460b      	mov	r3, r1
 801279a:	807b      	strh	r3, [r7, #2]
    {
    }
 801279c:	bf00      	nop
 801279e:	370c      	adds	r7, #12
 80127a0:	46bd      	mov	sp, r7
 80127a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a6:	4770      	bx	lr

080127a8 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 80127a8:	b480      	push	{r7}
 80127aa:	b083      	sub	sp, #12
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80127b0:	2300      	movs	r3, #0
    }
 80127b2:	4618      	mov	r0, r3
 80127b4:	370c      	adds	r7, #12
 80127b6:	46bd      	mov	sp, r7
 80127b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127bc:	4770      	bx	lr

080127be <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 80127be:	b580      	push	{r7, lr}
 80127c0:	b082      	sub	sp, #8
 80127c2:	af00      	add	r7, sp, #0
 80127c4:	6078      	str	r0, [r7, #4]
 80127c6:	460b      	mov	r3, r1
 80127c8:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d004      	beq.n	80127dc <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80127d6:	887a      	ldrh	r2, [r7, #2]
 80127d8:	4610      	mov	r0, r2
 80127da:	4798      	blx	r3
        }
    }
 80127dc:	bf00      	nop
 80127de:	3708      	adds	r7, #8
 80127e0:	46bd      	mov	sp, r7
 80127e2:	bd80      	pop	{r7, pc}

080127e4 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 80127e4:	b480      	push	{r7}
 80127e6:	b083      	sub	sp, #12
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 80127ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
 80127f0:	4618      	mov	r0, r3
 80127f2:	370c      	adds	r7, #12
 80127f4:	46bd      	mov	sp, r7
 80127f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fa:	4770      	bx	lr

080127fc <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b082      	sub	sp, #8
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	685a      	ldr	r2, [r3, #4]
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	685b      	ldr	r3, [r3, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	3318      	adds	r3, #24
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	4610      	mov	r0, r2
 8012814:	4798      	blx	r3
 8012816:	4603      	mov	r3, r0
    }
 8012818:	4618      	mov	r0, r3
 801281a:	3708      	adds	r7, #8
 801281c:	46bd      	mov	sp, r7
 801281e:	bd80      	pop	{r7, pc}

08012820 <_ZN8touchgfx3HAL25partialLTDCDeadlineMissedEv>:
     * This occurrence will lead to tearing on the display.
     *
     * This empty function can be overridden to e.g. output this error condition
     * on a pin.
     */
    virtual void partialLTDCDeadlineMissed()
 8012820:	b480      	push	{r7}
 8012822:	b083      	sub	sp, #12
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
    {
    }
 8012828:	bf00      	nop
 801282a:	370c      	adds	r7, #12
 801282c:	46bd      	mov	sp, r7
 801282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012832:	4770      	bx	lr

08012834 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
    /**
     * Gets client framebuffer.
     *
     * @return The address of the framebuffer currently used by the framework to draw in.
     */
    uint16_t* getClientFrameBuffer()
 8012834:	b580      	push	{r7, lr}
 8012836:	b082      	sub	sp, #8
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
    {
        if (USE_DOUBLE_BUFFERING && getTFTFrameBuffer() == frameBuffer0)
 801283c:	4b0e      	ldr	r3, [pc, #56]	@ (8012878 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x44>)
 801283e:	781b      	ldrb	r3, [r3, #0]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d00c      	beq.n	801285e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	3334      	adds	r3, #52	@ 0x34
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	6878      	ldr	r0, [r7, #4]
 801284e:	4798      	blx	r3
 8012850:	4602      	mov	r2, r0
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012856:	429a      	cmp	r2, r3
 8012858:	d101      	bne.n	801285e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 801285a:	2301      	movs	r3, #1
 801285c:	e000      	b.n	8012860 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2c>
 801285e:	2300      	movs	r3, #0
 8012860:	2b00      	cmp	r3, #0
 8012862:	d002      	beq.n	801286a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x36>
        {
            return frameBuffer1;
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012868:	e001      	b.n	801286e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x3a>
        }
        return frameBuffer0;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 801286e:	4618      	mov	r0, r3
 8012870:	3708      	adds	r7, #8
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}
 8012876:	bf00      	nop
 8012878:	2005bd1a 	.word	0x2005bd1a

0801287c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 801287c:	b480      	push	{r7}
 801287e:	b085      	sub	sp, #20
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012890:	429a      	cmp	r2, r3
 8012892:	d011      	beq.n	80128b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8012894:	4b14      	ldr	r3, [pc, #80]	@ (80128e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8012896:	781b      	ldrb	r3, [r3, #0]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d11e      	bne.n	80128da <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 801289c:	4b13      	ldr	r3, [pc, #76]	@ (80128ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801289e:	881b      	ldrh	r3, [r3, #0]
 80128a0:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80128a2:	4b13      	ldr	r3, [pc, #76]	@ (80128f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80128a4:	881a      	ldrh	r2, [r3, #0]
 80128a6:	4b11      	ldr	r3, [pc, #68]	@ (80128ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80128a8:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 80128aa:	4a11      	ldr	r2, [pc, #68]	@ (80128f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80128ac:	89bb      	ldrh	r3, [r7, #12]
 80128ae:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80128b0:	4b0d      	ldr	r3, [pc, #52]	@ (80128e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80128b2:	2201      	movs	r2, #1
 80128b4:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80128b6:	e010      	b.n	80128da <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 80128b8:	4b0b      	ldr	r3, [pc, #44]	@ (80128e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80128ba:	781b      	ldrb	r3, [r3, #0]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d00c      	beq.n	80128da <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 80128c0:	4b0a      	ldr	r3, [pc, #40]	@ (80128ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80128c2:	881b      	ldrh	r3, [r3, #0]
 80128c4:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80128c6:	4b0a      	ldr	r3, [pc, #40]	@ (80128f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80128c8:	881a      	ldrh	r2, [r3, #0]
 80128ca:	4b08      	ldr	r3, [pc, #32]	@ (80128ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80128cc:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 80128ce:	4a08      	ldr	r2, [pc, #32]	@ (80128f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80128d0:	89fb      	ldrh	r3, [r7, #14]
 80128d2:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80128d4:	4b04      	ldr	r3, [pc, #16]	@ (80128e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80128d6:	2200      	movs	r2, #0
 80128d8:	701a      	strb	r2, [r3, #0]
    }
 80128da:	bf00      	nop
 80128dc:	3714      	adds	r7, #20
 80128de:	46bd      	mov	sp, r7
 80128e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e4:	4770      	bx	lr
 80128e6:	bf00      	nop
 80128e8:	2005bd14 	.word	0x2005bd14
 80128ec:	2005bd12 	.word	0x2005bd12
 80128f0:	2005bd10 	.word	0x2005bd10

080128f4 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 80128f4:	b480      	push	{r7}
 80128f6:	b083      	sub	sp, #12
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
    {
    }
 80128fc:	bf00      	nop
 80128fe:	370c      	adds	r7, #12
 8012900:	46bd      	mov	sp, r7
 8012902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012906:	4770      	bx	lr

08012908 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8012908:	b480      	push	{r7}
 801290a:	b083      	sub	sp, #12
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
    {
    }
 8012910:	bf00      	nop
 8012912:	370c      	adds	r7, #12
 8012914:	46bd      	mov	sp, r7
 8012916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291a:	4770      	bx	lr

0801291c <_ZN8touchgfx3HAL22InvalidateTextureCacheEv>:
     * Invalidate texture cache(s).
     *
     * Called on every tick before drawing into the framebuffer to enable
     * invalidation of any caches that may be incoherent with main memory.
     */
    virtual void InvalidateTextureCache()
 801291c:	b480      	push	{r7}
 801291e:	b083      	sub	sp, #12
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
    {
    }
 8012924:	bf00      	nop
 8012926:	370c      	adds	r7, #12
 8012928:	46bd      	mov	sp, r7
 801292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292e:	4770      	bx	lr

08012930 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8012930:	b580      	push	{r7, lr}
 8012932:	b082      	sub	sp, #8
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	4618      	mov	r0, r3
 801293c:	f003 f935 	bl	8015baa <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8012940:	bf00      	nop
 8012942:	3708      	adds	r7, #8
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}

08012948 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8012948:	b580      	push	{r7, lr}
 801294a:	b082      	sub	sp, #8
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
 8012950:	4a05      	ldr	r2, [pc, #20]	@ (8012968 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	601a      	str	r2, [r3, #0]
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	4618      	mov	r0, r3
 801295a:	f7ff fe2b 	bl	80125b4 <_ZN8touchgfx3HALD1Ev>
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	4618      	mov	r0, r3
 8012962:	3708      	adds	r7, #8
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}
 8012968:	080305f8 	.word	0x080305f8

0801296c <_ZN20TouchGFXGeneratedHALD0Ev>:
 801296c:	b580      	push	{r7, lr}
 801296e:	b082      	sub	sp, #8
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
 8012974:	6878      	ldr	r0, [r7, #4]
 8012976:	f7ff ffe7 	bl	8012948 <_ZN20TouchGFXGeneratedHALD1Ev>
 801297a:	2184      	movs	r1, #132	@ 0x84
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f01a f9fa 	bl	802cd76 <_ZdlPvj>
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	4618      	mov	r0, r3
 8012986:	3708      	adds	r7, #8
 8012988:	46bd      	mov	sp, r7
 801298a:	bd80      	pop	{r7, pc}

0801298c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801298c:	b580      	push	{r7, lr}
 801298e:	b082      	sub	sp, #8
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	4618      	mov	r0, r3
 8012998:	f7ff ffca 	bl	8012930 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 801299c:	bf00      	nop
 801299e:	3708      	adds	r7, #8
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}

080129a4 <_ZN11TouchGFXHAL10initializeEv>:
#include <touchgfx/hal/GPIO.hpp>

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b082      	sub	sp, #8
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    printf("ICNA3306_Init\r\n");
 80129ac:	4806      	ldr	r0, [pc, #24]	@ (80129c8 <_ZN11TouchGFXHAL10initializeEv+0x24>)
 80129ae:	f01b fb03 	bl	802dfb8 <puts>

    TouchGFXGeneratedHAL::initialize();
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	4618      	mov	r0, r3
 80129b6:	f002 f8c3 	bl	8014b40 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    // setAnimationStorage((void *)animationBuffer); // Add animation storage
    ICNA3306_Init();
 80129ba:	f7ee fa1d 	bl	8000df8 <ICNA3306_Init>
}
 80129be:	bf00      	nop
 80129c0:	3708      	adds	r7, #8
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	0802f4c4 	.word	0x0802f4c4

080129cc <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t *TouchGFXHAL::getTFTFrameBuffer() const
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b082      	sub	sp, #8
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	4618      	mov	r0, r3
 80129d8:	f002 f91c 	bl	8014c14 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80129dc:	4603      	mov	r3, r0
}
 80129de:	4618      	mov	r0, r3
 80129e0:	3708      	adds	r7, #8
 80129e2:	46bd      	mov	sp, r7
 80129e4:	bd80      	pop	{r7, pc}

080129e6 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t *address)
{
 80129e6:	b580      	push	{r7, lr}
 80129e8:	b082      	sub	sp, #8
 80129ea:	af00      	add	r7, sp, #0
 80129ec:	6078      	str	r0, [r7, #4]
 80129ee:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6839      	ldr	r1, [r7, #0]
 80129f4:	4618      	mov	r0, r3
 80129f6:	f002 f91b 	bl	8014c30 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80129fa:	bf00      	nop
 80129fc:	3708      	adds	r7, #8
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bd80      	pop	{r7, pc}
	...

08012a04 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect &rect)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b08a      	sub	sp, #40	@ 0x28
 8012a08:	af02      	add	r7, sp, #8
 8012a0a:	6078      	str	r0, [r7, #4]
 8012a0c:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate the start address of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp
    // printf("fluashBuffer\r\n");
    uint8_t *fbPtr = (uint8_t *)getClientFrameBuffer();
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	4618      	mov	r0, r3
 8012a12:	f7ff ff0f 	bl	8012834 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012a16:	6138      	str	r0, [r7, #16]
    for (size_t row = 0; row < rect.height; row++)
 8012a18:	2300      	movs	r3, #0
 8012a1a:	61fb      	str	r3, [r7, #28]
 8012a1c:	e030      	b.n	8012a80 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x7c>
    {
        uint8_t *pixel = fbPtr + ((rect.y + row) * 240 + rect.x) * 2;
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012a24:	461a      	mov	r2, r3
 8012a26:	69fb      	ldr	r3, [r7, #28]
 8012a28:	441a      	add	r2, r3
 8012a2a:	4613      	mov	r3, r2
 8012a2c:	011b      	lsls	r3, r3, #4
 8012a2e:	1a9b      	subs	r3, r3, r2
 8012a30:	011b      	lsls	r3, r3, #4
 8012a32:	461a      	mov	r2, r3
 8012a34:	683b      	ldr	r3, [r7, #0]
 8012a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a3a:	4413      	add	r3, r2
 8012a3c:	005b      	lsls	r3, r3, #1
 8012a3e:	693a      	ldr	r2, [r7, #16]
 8012a40:	4413      	add	r3, r2
 8012a42:	61bb      	str	r3, [r7, #24]
        for (size_t col = 0; col < rect.width; col++)
 8012a44:	2300      	movs	r3, #0
 8012a46:	617b      	str	r3, [r7, #20]
 8012a48:	e010      	b.n	8012a6c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x68>
        {
            uint8_t temp = pixel[0];
 8012a4a:	69bb      	ldr	r3, [r7, #24]
 8012a4c:	781b      	ldrb	r3, [r3, #0]
 8012a4e:	73fb      	strb	r3, [r7, #15]
            pixel[0] = pixel[1];
 8012a50:	69bb      	ldr	r3, [r7, #24]
 8012a52:	785a      	ldrb	r2, [r3, #1]
 8012a54:	69bb      	ldr	r3, [r7, #24]
 8012a56:	701a      	strb	r2, [r3, #0]
            pixel[1] = temp;
 8012a58:	69bb      	ldr	r3, [r7, #24]
 8012a5a:	3301      	adds	r3, #1
 8012a5c:	7bfa      	ldrb	r2, [r7, #15]
 8012a5e:	701a      	strb	r2, [r3, #0]
            pixel += 2;
 8012a60:	69bb      	ldr	r3, [r7, #24]
 8012a62:	3302      	adds	r3, #2
 8012a64:	61bb      	str	r3, [r7, #24]
        for (size_t col = 0; col < rect.width; col++)
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	3301      	adds	r3, #1
 8012a6a:	617b      	str	r3, [r7, #20]
 8012a6c:	683b      	ldr	r3, [r7, #0]
 8012a6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012a72:	461a      	mov	r2, r3
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	4293      	cmp	r3, r2
 8012a78:	d3e7      	bcc.n	8012a4a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x46>
    for (size_t row = 0; row < rect.height; row++)
 8012a7a:	69fb      	ldr	r3, [r7, #28]
 8012a7c:	3301      	adds	r3, #1
 8012a7e:	61fb      	str	r3, [r7, #28]
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012a86:	461a      	mov	r2, r3
 8012a88:	69fb      	ldr	r3, [r7, #28]
 8012a8a:	4293      	cmp	r3, r2
 8012a8c:	d3c7      	bcc.n	8012a1e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1a>
        }
    }
    // printf("fluashBuffer\r\n");
    ICNA3306_DrawBuffer(0, 0, 240, 296, fbPtr, (240 * 296) * 2);
 8012a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8012ab8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0xb4>)
 8012a90:	9301      	str	r3, [sp, #4]
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	9300      	str	r3, [sp, #0]
 8012a96:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8012a9a:	22f0      	movs	r2, #240	@ 0xf0
 8012a9c:	2100      	movs	r1, #0
 8012a9e:	2000      	movs	r0, #0
 8012aa0:	f7ee f94c 	bl	8000d3c <ICNA3306_DrawBuffer>

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6839      	ldr	r1, [r7, #0]
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f002 f8cc 	bl	8014c46 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8012aae:	bf00      	nop
 8012ab0:	3720      	adds	r7, #32
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}
 8012ab6:	bf00      	nop
 8012ab8:	00022b00 	.word	0x00022b00

08012abc <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void *RESTRICT dest, const void *RESTRICT src, uint32_t numBytes)
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b084      	sub	sp, #16
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	60f8      	str	r0, [r7, #12]
 8012ac4:	60b9      	str	r1, [r7, #8]
 8012ac6:	607a      	str	r2, [r7, #4]
 8012ac8:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8012aca:	68f8      	ldr	r0, [r7, #12]
 8012acc:	683b      	ldr	r3, [r7, #0]
 8012ace:	687a      	ldr	r2, [r7, #4]
 8012ad0:	68b9      	ldr	r1, [r7, #8]
 8012ad2:	f002 f8c6 	bl	8014c62 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8012ad6:	4603      	mov	r3, r0
}
 8012ad8:	4618      	mov	r0, r3
 8012ada:	3710      	adds	r7, #16
 8012adc:	46bd      	mov	sp, r7
 8012ade:	bd80      	pop	{r7, pc}

08012ae0 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b082      	sub	sp, #8
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	4618      	mov	r0, r3
 8012aec:	f002 f84c 	bl	8014b88 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8012af0:	bf00      	nop
 8012af2:	3708      	adds	r7, #8
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}

08012af8 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b082      	sub	sp, #8
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	4618      	mov	r0, r3
 8012b04:	f002 f84c 	bl	8014ba0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8012b08:	bf00      	nop
 8012b0a:	3708      	adds	r7, #8
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}

08012b10 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b082      	sub	sp, #8
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f002 f84b 	bl	8014bb6 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8012b20:	bf00      	nop
 8012b22:	3708      	adds	r7, #8
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bd80      	pop	{r7, pc}

08012b28 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b082      	sub	sp, #8
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	4618      	mov	r0, r3
 8012b34:	f002 f84a 	bl	8014bcc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8012b38:	bf00      	nop
 8012b3a:	3708      	adds	r7, #8
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	bd80      	pop	{r7, pc}

08012b40 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b082      	sub	sp, #8
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
    //printf("TouchGFX beginFrame\n");
    return TouchGFXGeneratedHAL::beginFrame();
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f002 f848 	bl	8014be0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 8012b50:	4603      	mov	r3, r0
}
 8012b52:	4618      	mov	r0, r3
 8012b54:	3708      	adds	r7, #8
 8012b56:	46bd      	mov	sp, r7
 8012b58:	bd80      	pop	{r7, pc}

08012b5a <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8012b5a:	b580      	push	{r7, lr}
 8012b5c:	b082      	sub	sp, #8
 8012b5e:	af00      	add	r7, sp, #0
 8012b60:	6078      	str	r0, [r7, #4]
    //printf("TouchGFX endFrame\n");
    TouchGFXGeneratedHAL::endFrame();
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	4618      	mov	r0, r3
 8012b66:	f002 f848 	bl	8014bfa <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8012b6a:	bf00      	nop
 8012b6c:	3708      	adds	r7, #8
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	bd80      	pop	{r7, pc}

08012b72 <touchgfx_tim_vsync>:
extern "C" void touchgfx_tim_vsync(void)
{
 8012b72:	b580      	push	{r7, lr}
 8012b74:	af00      	add	r7, sp, #0
    OSWrappers::signalVSync();
 8012b76:	f000 f88b 	bl	8012c90 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
    // printf("5555\r\n");
}
 8012b7a:	bf00      	nop
 8012b7c:	bd80      	pop	{r7, pc}
	...

08012b80 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b082      	sub	sp, #8
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
 8012b88:	4a05      	ldr	r2, [pc, #20]	@ (8012ba0 <_ZN11TouchGFXHALD1Ev+0x20>)
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	601a      	str	r2, [r3, #0]
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	4618      	mov	r0, r3
 8012b92:	f7ff fed9 	bl	8012948 <_ZN20TouchGFXGeneratedHALD1Ev>
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	4618      	mov	r0, r3
 8012b9a:	3708      	adds	r7, #8
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}
 8012ba0:	08030278 	.word	0x08030278

08012ba4 <_ZN11TouchGFXHALD0Ev>:
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b082      	sub	sp, #8
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f7ff ffe7 	bl	8012b80 <_ZN11TouchGFXHALD1Ev>
 8012bb2:	2184      	movs	r1, #132	@ 0x84
 8012bb4:	6878      	ldr	r0, [r7, #4]
 8012bb6:	f01a f8de 	bl	802cd76 <_ZdlPvj>
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	3708      	adds	r7, #8
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	bd80      	pop	{r7, pc}

08012bc4 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8012bc8:	2200      	movs	r2, #0
 8012bca:	2101      	movs	r1, #1
 8012bcc:	2001      	movs	r0, #1
 8012bce:	f7f9 f947 	bl	800be60 <osSemaphoreNew>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8012c14 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8012bd6:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8012bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8012c14 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d105      	bne.n	8012bec <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8012be0:	4b0d      	ldr	r3, [pc, #52]	@ (8012c18 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8012be2:	4a0e      	ldr	r2, [pc, #56]	@ (8012c1c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8012be4:	2128      	movs	r1, #40	@ 0x28
 8012be6:	480e      	ldr	r0, [pc, #56]	@ (8012c20 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8012be8:	f01a ffba 	bl	802db60 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8012bec:	2200      	movs	r2, #0
 8012bee:	2104      	movs	r1, #4
 8012bf0:	2001      	movs	r0, #1
 8012bf2:	f7f9 fa47 	bl	800c084 <osMessageQueueNew>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8012c24 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8012bfa:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8012bfc:	4b09      	ldr	r3, [pc, #36]	@ (8012c24 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d105      	bne.n	8012c10 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8012c04:	4b08      	ldr	r3, [pc, #32]	@ (8012c28 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8012c06:	4a05      	ldr	r2, [pc, #20]	@ (8012c1c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8012c08:	212c      	movs	r1, #44	@ 0x2c
 8012c0a:	4805      	ldr	r0, [pc, #20]	@ (8012c20 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8012c0c:	f01a ffa8 	bl	802db60 <__assert_func>
}
 8012c10:	bf00      	nop
 8012c12:	bd80      	pop	{r7, pc}
 8012c14:	2005a718 	.word	0x2005a718
 8012c18:	0802f4d4 	.word	0x0802f4d4
 8012c1c:	0802f520 	.word	0x0802f520
 8012c20:	0802f550 	.word	0x0802f550
 8012c24:	2005a71c 	.word	0x2005a71c
 8012c28:	0802f57c 	.word	0x0802f57c

08012c2c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8012c30:	4b04      	ldr	r3, [pc, #16]	@ (8012c44 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	f04f 31ff 	mov.w	r1, #4294967295
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7f9 f999 	bl	800bf70 <osSemaphoreAcquire>
}
 8012c3e:	bf00      	nop
 8012c40:	bd80      	pop	{r7, pc}
 8012c42:	bf00      	nop
 8012c44:	2005a718 	.word	0x2005a718

08012c48 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8012c4c:	4b03      	ldr	r3, [pc, #12]	@ (8012c5c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	4618      	mov	r0, r3
 8012c52:	f7f9 f9d9 	bl	800c008 <osSemaphoreRelease>
}
 8012c56:	bf00      	nop
 8012c58:	bd80      	pop	{r7, pc}
 8012c5a:	bf00      	nop
 8012c5c:	2005a718 	.word	0x2005a718

08012c60 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8012c64:	4b03      	ldr	r3, [pc, #12]	@ (8012c74 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	2100      	movs	r1, #0
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f7f9 f980 	bl	800bf70 <osSemaphoreAcquire>
}
 8012c70:	bf00      	nop
 8012c72:	bd80      	pop	{r7, pc}
 8012c74:	2005a718 	.word	0x2005a718

08012c78 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8012c7c:	4b03      	ldr	r3, [pc, #12]	@ (8012c8c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7f9 f9c1 	bl	800c008 <osSemaphoreRelease>
}
 8012c86:	bf00      	nop
 8012c88:	bd80      	pop	{r7, pc}
 8012c8a:	bf00      	nop
 8012c8c:	2005a718 	.word	0x2005a718

08012c90 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8012c94:	4b04      	ldr	r3, [pc, #16]	@ (8012ca8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8012c96:	6818      	ldr	r0, [r3, #0]
 8012c98:	2300      	movs	r3, #0
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	4903      	ldr	r1, [pc, #12]	@ (8012cac <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8012c9e:	f7f9 fa63 	bl	800c168 <osMessageQueuePut>
}
 8012ca2:	bf00      	nop
 8012ca4:	bd80      	pop	{r7, pc}
 8012ca6:	bf00      	nop
 8012ca8:	2005a71c 	.word	0x2005a71c
 8012cac:	20000014 	.word	0x20000014

08012cb0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b082      	sub	sp, #8
 8012cb4:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8012cb6:	4b09      	ldr	r3, [pc, #36]	@ (8012cdc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8012cb8:	6818      	ldr	r0, [r3, #0]
 8012cba:	1d39      	adds	r1, r7, #4
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	f7f9 faac 	bl	800c21c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8012cc4:	4b05      	ldr	r3, [pc, #20]	@ (8012cdc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8012cc6:	6818      	ldr	r0, [r3, #0]
 8012cc8:	1d39      	adds	r1, r7, #4
 8012cca:	f04f 33ff 	mov.w	r3, #4294967295
 8012cce:	2200      	movs	r2, #0
 8012cd0:	f7f9 faa4 	bl	800c21c <osMessageQueueGet>
}
 8012cd4:	bf00      	nop
 8012cd6:	3708      	adds	r7, #8
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}
 8012cdc:	2005a71c 	.word	0x2005a71c

08012ce0 <__NVIC_EnableIRQ>:
{
 8012ce0:	b480      	push	{r7}
 8012ce2:	b083      	sub	sp, #12
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	db0b      	blt.n	8012d0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012cf2:	79fb      	ldrb	r3, [r7, #7]
 8012cf4:	f003 021f 	and.w	r2, r3, #31
 8012cf8:	4907      	ldr	r1, [pc, #28]	@ (8012d18 <__NVIC_EnableIRQ+0x38>)
 8012cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012cfe:	095b      	lsrs	r3, r3, #5
 8012d00:	2001      	movs	r0, #1
 8012d02:	fa00 f202 	lsl.w	r2, r0, r2
 8012d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012d0a:	bf00      	nop
 8012d0c:	370c      	adds	r7, #12
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d14:	4770      	bx	lr
 8012d16:	bf00      	nop
 8012d18:	e000e100 	.word	0xe000e100

08012d1c <__NVIC_DisableIRQ>:
{
 8012d1c:	b480      	push	{r7}
 8012d1e:	b083      	sub	sp, #12
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	4603      	mov	r3, r0
 8012d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	db12      	blt.n	8012d54 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012d2e:	79fb      	ldrb	r3, [r7, #7]
 8012d30:	f003 021f 	and.w	r2, r3, #31
 8012d34:	490a      	ldr	r1, [pc, #40]	@ (8012d60 <__NVIC_DisableIRQ+0x44>)
 8012d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012d3a:	095b      	lsrs	r3, r3, #5
 8012d3c:	2001      	movs	r0, #1
 8012d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8012d42:	3320      	adds	r3, #32
 8012d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8012d48:	f3bf 8f4f 	dsb	sy
}
 8012d4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012d4e:	f3bf 8f6f 	isb	sy
}
 8012d52:	bf00      	nop
}
 8012d54:	bf00      	nop
 8012d56:	370c      	adds	r7, #12
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5e:	4770      	bx	lr
 8012d60:	e000e100 	.word	0xe000e100

08012d64 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8012d64:	b480      	push	{r7}
 8012d66:	b083      	sub	sp, #12
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
        : color(0)
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	2200      	movs	r2, #0
 8012d70:	601a      	str	r2, [r3, #0]
    }
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	4618      	mov	r0, r3
 8012d76:	370c      	adds	r7, #12
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d7e:	4770      	bx	lr

08012d80 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8012d80:	b480      	push	{r7}
 8012d82:	b083      	sub	sp, #12
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
        return color;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	681b      	ldr	r3, [r3, #0]
    }
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	370c      	adds	r7, #12
 8012d90:	46bd      	mov	sp, r7
 8012d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d96:	4770      	bx	lr

08012d98 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8012d98:	b480      	push	{r7}
 8012d9a:	b083      	sub	sp, #12
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
    {
 8012da0:	4a04      	ldr	r2, [pc, #16]	@ (8012db4 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	601a      	str	r2, [r3, #0]
    }
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	4618      	mov	r0, r3
 8012daa:	370c      	adds	r7, #12
 8012dac:	46bd      	mov	sp, r7
 8012dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db2:	4770      	bx	lr
 8012db4:	080303b4 	.word	0x080303b4

08012db8 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b082      	sub	sp, #8
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
    }
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f7ff ffe9 	bl	8012d98 <_ZN8touchgfx9DMA_QueueD1Ev>
 8012dc6:	2104      	movs	r1, #4
 8012dc8:	6878      	ldr	r0, [r7, #4]
 8012dca:	f019 ffd4 	bl	802cd76 <_ZdlPvj>
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3708      	adds	r7, #8
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}

08012dd8 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b082      	sub	sp, #8
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	3344      	adds	r3, #68	@ 0x44
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	4798      	blx	r3
    }
 8012dec:	bf00      	nop
 8012dee:	3708      	adds	r7, #8
 8012df0:	46bd      	mov	sp, r7
 8012df2:	bd80      	pop	{r7, pc}

08012df4 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8012df4:	b480      	push	{r7}
 8012df6:	b083      	sub	sp, #12
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
    {
 8012dfc:	4a04      	ldr	r2, [pc, #16]	@ (8012e10 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	601a      	str	r2, [r3, #0]
    }
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	4618      	mov	r0, r3
 8012e06:	370c      	adds	r7, #12
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0e:	4770      	bx	lr
 8012e10:	08030acc 	.word	0x08030acc

08012e14 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b082      	sub	sp, #8
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
    }
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	f7ff ffe9 	bl	8012df4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8012e22:	210c      	movs	r1, #12
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f019 ffa6 	bl	802cd76 <_ZdlPvj>
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	3708      	adds	r7, #8
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bd80      	pop	{r7, pc}

08012e34 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8012e34:	b480      	push	{r7}
 8012e36:	b083      	sub	sp, #12
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
 8012e3c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8012e3e:	4a09      	ldr	r2, [pc, #36]	@ (8012e64 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	601a      	str	r2, [r3, #0]
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	683a      	ldr	r2, [r7, #0]
 8012e48:	605a      	str	r2, [r3, #4]
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	721a      	strb	r2, [r3, #8]
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	2200      	movs	r2, #0
 8012e54:	725a      	strb	r2, [r3, #9]
    {
    }
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	4618      	mov	r0, r3
 8012e5a:	370c      	adds	r7, #12
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e62:	4770      	bx	lr
 8012e64:	08030acc 	.word	0x08030acc

08012e68 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8012e68:	b480      	push	{r7}
 8012e6a:	b083      	sub	sp, #12
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8012e70:	2301      	movs	r3, #1
    }
 8012e72:	4618      	mov	r0, r3
 8012e74:	370c      	adds	r7, #12
 8012e76:	46bd      	mov	sp, r7
 8012e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7c:	4770      	bx	lr

08012e7e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8012e7e:	b580      	push	{r7, lr}
 8012e80:	b082      	sub	sp, #8
 8012e82:	af00      	add	r7, sp, #0
 8012e84:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8012e86:	687a      	ldr	r2, [r7, #4]
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	3328      	adds	r3, #40	@ 0x28
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	4610      	mov	r0, r2
 8012e92:	4798      	blx	r3
    }
 8012e94:	bf00      	nop
 8012e96:	3708      	adds	r7, #8
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	bd80      	pop	{r7, pc}

08012e9c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b082      	sub	sp, #8
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	685a      	ldr	r2, [r3, #4]
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	3314      	adds	r3, #20
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	4610      	mov	r0, r2
 8012eb4:	4798      	blx	r3
    }
 8012eb6:	bf00      	nop
 8012eb8:	3708      	adds	r7, #8
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}

08012ebe <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8012ebe:	b580      	push	{r7, lr}
 8012ec0:	b082      	sub	sp, #8
 8012ec2:	af00      	add	r7, sp, #0
 8012ec4:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8012ec6:	f7fc fbd5 	bl	800f674 <_ZN8touchgfx3HAL11getInstanceEv>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f7ff ffe5 	bl	8012e9c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8012ed2:	bf00      	nop
 8012ed4:	3708      	adds	r7, #8
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	bd80      	pop	{r7, pc}

08012eda <DMA2D_XferErrorCallback>:

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
 8012eda:	b480      	push	{r7}
 8012edc:	b083      	sub	sp, #12
 8012ede:	af00      	add	r7, sp, #0
 8012ee0:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        while (1)
 8012ee2:	bf00      	nop
 8012ee4:	e7fd      	b.n	8012ee2 <DMA2D_XferErrorCallback+0x8>
	...

08012ee8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b082      	sub	sp, #8
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
 8012ef0:	4a05      	ldr	r2, [pc, #20]	@ (8012f08 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	601a      	str	r2, [r3, #0]
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	4618      	mov	r0, r3
 8012efa:	f7ff ff4d 	bl	8012d98 <_ZN8touchgfx9DMA_QueueD1Ev>
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	4618      	mov	r0, r3
 8012f02:	3708      	adds	r7, #8
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd80      	pop	{r7, pc}
 8012f08:	08030b1c 	.word	0x08030b1c

08012f0c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b082      	sub	sp, #8
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f7ff ffe7 	bl	8012ee8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8012f1a:	2114      	movs	r1, #20
 8012f1c:	6878      	ldr	r0, [r7, #4]
 8012f1e:	f019 ff2a 	bl	802cd76 <_ZdlPvj>
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	4618      	mov	r0, r3
 8012f26:	3708      	adds	r7, #8
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	bd80      	pop	{r7, pc}

08012f2c <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b082      	sub	sp, #8
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	6078      	str	r0, [r7, #4]
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	330c      	adds	r3, #12
 8012f38:	4618      	mov	r0, r3
 8012f3a:	f7ff ff13 	bl	8012d64 <_ZN8touchgfx9colortypeC1Ev>
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	4618      	mov	r0, r3
 8012f42:	3708      	adds	r7, #8
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}

08012f48 <_ZN8STM32DMAC1Ev>:

        }
    }
}

STM32DMA::STM32DMA()
 8012f48:	b5b0      	push	{r4, r5, r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8012f50:	687a      	ldr	r2, [r7, #4]
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	330c      	adds	r3, #12
 8012f56:	4619      	mov	r1, r3
 8012f58:	4610      	mov	r0, r2
 8012f5a:	f7ff ff6b 	bl	8012e34 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8012f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8012f98 <_ZN8STM32DMAC1Ev+0x50>)
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	601a      	str	r2, [r3, #0]
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	f103 000c 	add.w	r0, r3, #12
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	3320      	adds	r3, #32
 8012f6e:	2260      	movs	r2, #96	@ 0x60
 8012f70:	4619      	mov	r1, r3
 8012f72:	f003 fd3f 	bl	80169f4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	3320      	adds	r3, #32
 8012f7a:	245f      	movs	r4, #95	@ 0x5f
 8012f7c:	461d      	mov	r5, r3
 8012f7e:	e004      	b.n	8012f8a <_ZN8STM32DMAC1Ev+0x42>
 8012f80:	4628      	mov	r0, r5
 8012f82:	f7ff ffd3 	bl	8012f2c <_ZN8touchgfx6BlitOpC1Ev>
 8012f86:	3c01      	subs	r4, #1
 8012f88:	3524      	adds	r5, #36	@ 0x24
 8012f8a:	2c00      	cmp	r4, #0
 8012f8c:	daf8      	bge.n	8012f80 <_ZN8STM32DMAC1Ev+0x38>
{
}
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	4618      	mov	r0, r3
 8012f92:	3708      	adds	r7, #8
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bdb0      	pop	{r4, r5, r7, pc}
 8012f98:	08030364 	.word	0x08030364

08012f9c <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b082      	sub	sp, #8
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
 8012fa4:	4a09      	ldr	r2, [pc, #36]	@ (8012fcc <_ZN8STM32DMAD1Ev+0x30>)
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8012faa:	2076      	movs	r0, #118	@ 0x76
 8012fac:	f7ff feb6 	bl	8012d1c <__NVIC_DisableIRQ>
}
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	330c      	adds	r3, #12
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	f7ff ff97 	bl	8012ee8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7ff ff19 	bl	8012df4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	3708      	adds	r7, #8
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}
 8012fcc:	08030364 	.word	0x08030364

08012fd0 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b082      	sub	sp, #8
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
}
 8012fd8:	6878      	ldr	r0, [r7, #4]
 8012fda:	f7ff ffdf 	bl	8012f9c <_ZN8STM32DMAD1Ev>
 8012fde:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8012fe2:	6878      	ldr	r0, [r7, #4]
 8012fe4:	f019 fec7 	bl	802cd76 <_ZdlPvj>
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	4618      	mov	r0, r3
 8012fec:	3708      	adds	r7, #8
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	bd80      	pop	{r7, pc}
	...

08012ff4 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b084      	sub	sp, #16
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8012ffc:	4b13      	ldr	r3, [pc, #76]	@ (801304c <_ZN8STM32DMA10initializeEv+0x58>)
 8012ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013002:	4a12      	ldr	r2, [pc, #72]	@ (801304c <_ZN8STM32DMA10initializeEv+0x58>)
 8013004:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8013008:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 801300c:	4b0f      	ldr	r3, [pc, #60]	@ (801304c <_ZN8STM32DMA10initializeEv+0x58>)
 801300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013012:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8013016:	60fb      	str	r3, [r7, #12]
 8013018:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 801301a:	4b0c      	ldr	r3, [pc, #48]	@ (801304c <_ZN8STM32DMA10initializeEv+0x58>)
 801301c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801301e:	4a0b      	ldr	r2, [pc, #44]	@ (801304c <_ZN8STM32DMA10initializeEv+0x58>)
 8013020:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8013024:	6613      	str	r3, [r2, #96]	@ 0x60
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8013026:	4b09      	ldr	r3, [pc, #36]	@ (801304c <_ZN8STM32DMA10initializeEv+0x58>)
 8013028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801302a:	4a08      	ldr	r2, [pc, #32]	@ (801304c <_ZN8STM32DMA10initializeEv+0x58>)
 801302c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013030:	6613      	str	r3, [r2, #96]	@ 0x60

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8013032:	4b07      	ldr	r3, [pc, #28]	@ (8013050 <_ZN8STM32DMA10initializeEv+0x5c>)
 8013034:	4a07      	ldr	r2, [pc, #28]	@ (8013054 <_ZN8STM32DMA10initializeEv+0x60>)
 8013036:	621a      	str	r2, [r3, #32]

    /* Add transfer error callback function */
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8013038:	4b05      	ldr	r3, [pc, #20]	@ (8013050 <_ZN8STM32DMA10initializeEv+0x5c>)
 801303a:	4a07      	ldr	r2, [pc, #28]	@ (8013058 <_ZN8STM32DMA10initializeEv+0x64>)
 801303c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 801303e:	2076      	movs	r0, #118	@ 0x76
 8013040:	f7ff fe4e 	bl	8012ce0 <__NVIC_EnableIRQ>
}
 8013044:	bf00      	nop
 8013046:	3710      	adds	r7, #16
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}
 801304c:	46020c00 	.word	0x46020c00
 8013050:	200459d0 	.word	0x200459d0
 8013054:	08012ebf 	.word	0x08012ebf
 8013058:	08012edb 	.word	0x08012edb

0801305c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b084      	sub	sp, #16
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
 8013064:	460b      	mov	r3, r1
 8013066:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8013068:	2300      	movs	r3, #0
 801306a:	60fb      	str	r3, [r7, #12]

    switch (format)
 801306c:	78fb      	ldrb	r3, [r7, #3]
 801306e:	2b0b      	cmp	r3, #11
 8013070:	d826      	bhi.n	80130c0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8013072:	a201      	add	r2, pc, #4	@ (adr r2, 8013078 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8013074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013078:	080130b5 	.word	0x080130b5
 801307c:	080130af 	.word	0x080130af
 8013080:	080130a9 	.word	0x080130a9
 8013084:	080130c1 	.word	0x080130c1
 8013088:	080130c1 	.word	0x080130c1
 801308c:	080130c1 	.word	0x080130c1
 8013090:	080130c1 	.word	0x080130c1
 8013094:	080130bb 	.word	0x080130bb
 8013098:	080130bb 	.word	0x080130bb
 801309c:	080130bb 	.word	0x080130bb
 80130a0:	080130bb 	.word	0x080130bb
 80130a4:	080130bb 	.word	0x080130bb
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80130a8:	2300      	movs	r3, #0
 80130aa:	60fb      	str	r3, [r7, #12]
        break;
 80130ac:	e00e      	b.n	80130cc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80130ae:	2301      	movs	r3, #1
 80130b0:	60fb      	str	r3, [r7, #12]
        break;
 80130b2:	e00b      	b.n	80130cc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80130b4:	2302      	movs	r3, #2
 80130b6:	60fb      	str	r3, [r7, #12]
        break;
 80130b8:	e008      	b.n	80130cc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80130ba:	2305      	movs	r3, #5
 80130bc:	60fb      	str	r3, [r7, #12]
        break;
 80130be:	e005      	b.n	80130cc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80130c0:	4b05      	ldr	r3, [pc, #20]	@ (80130d8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80130c2:	4a06      	ldr	r2, [pc, #24]	@ (80130dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80130c4:	216f      	movs	r1, #111	@ 0x6f
 80130c6:	4806      	ldr	r0, [pc, #24]	@ (80130e0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80130c8:	f01a fd4a 	bl	802db60 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80130cc:	68fb      	ldr	r3, [r7, #12]
}
 80130ce:	4618      	mov	r0, r3
 80130d0:	3710      	adds	r7, #16
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}
 80130d6:	bf00      	nop
 80130d8:	0802f5c0 	.word	0x0802f5c0
 80130dc:	0802f5dc 	.word	0x0802f5dc
 80130e0:	0802f628 	.word	0x0802f628

080130e4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b084      	sub	sp, #16
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
 80130ec:	460b      	mov	r3, r1
 80130ee:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80130f0:	2300      	movs	r3, #0
 80130f2:	60fb      	str	r3, [r7, #12]

    switch (format)
 80130f4:	78fb      	ldrb	r3, [r7, #3]
 80130f6:	2b0a      	cmp	r3, #10
 80130f8:	d821      	bhi.n	801313e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 80130fa:	a201      	add	r2, pc, #4	@ (adr r2, 8013100 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80130fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013100:	08013139 	.word	0x08013139
 8013104:	08013133 	.word	0x08013133
 8013108:	0801312d 	.word	0x0801312d
 801310c:	0801313f 	.word	0x0801313f
 8013110:	0801313f 	.word	0x0801313f
 8013114:	0801313f 	.word	0x0801313f
 8013118:	0801313f 	.word	0x0801313f
 801311c:	08013133 	.word	0x08013133
 8013120:	08013133 	.word	0x08013133
 8013124:	08013133 	.word	0x08013133
 8013128:	08013133 	.word	0x08013133
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 801312c:	2300      	movs	r3, #0
 801312e:	60fb      	str	r3, [r7, #12]
        break;
 8013130:	e00b      	b.n	801314a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8013132:	2301      	movs	r3, #1
 8013134:	60fb      	str	r3, [r7, #12]
        break;
 8013136:	e008      	b.n	801314a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8013138:	2302      	movs	r3, #2
 801313a:	60fb      	str	r3, [r7, #12]
        break;
 801313c:	e005      	b.n	801314a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 801313e:	4b05      	ldr	r3, [pc, #20]	@ (8013154 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8013140:	4a05      	ldr	r2, [pc, #20]	@ (8013158 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8013142:	2190      	movs	r1, #144	@ 0x90
 8013144:	4805      	ldr	r0, [pc, #20]	@ (801315c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8013146:	f01a fd0b 	bl	802db60 <__assert_func>
        break;
    }

    return dma2dColorMode;
 801314a:	68fb      	ldr	r3, [r7, #12]
}
 801314c:	4618      	mov	r0, r3
 801314e:	3710      	adds	r7, #16
 8013150:	46bd      	mov	sp, r7
 8013152:	bd80      	pop	{r7, pc}
 8013154:	0802f5c0 	.word	0x0802f5c0
 8013158:	0802f654 	.word	0x0802f654
 801315c:	0802f628 	.word	0x0802f628

08013160 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8013160:	b480      	push	{r7}
 8013162:	b083      	sub	sp, #12
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8013168:	f240 33ef 	movw	r3, #1007	@ 0x3ef
}
 801316c:	4618      	mov	r0, r3
 801316e:	370c      	adds	r7, #12
 8013170:	46bd      	mov	sp, r7
 8013172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013176:	4770      	bx	lr

08013178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8013178:	b590      	push	{r4, r7, lr}
 801317a:	b089      	sub	sp, #36	@ 0x24
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
 8013180:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	7f5b      	ldrb	r3, [r3, #29]
 8013186:	4619      	mov	r1, r3
 8013188:	6878      	ldr	r0, [r7, #4]
 801318a:	f7ff ff67 	bl	801305c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801318e:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8013190:	683b      	ldr	r3, [r7, #0]
 8013192:	7f9b      	ldrb	r3, [r3, #30]
 8013194:	4619      	mov	r1, r3
 8013196:	6878      	ldr	r0, [r7, #4]
 8013198:	f7ff ff60 	bl	801305c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801319c:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801319e:	683b      	ldr	r3, [r7, #0]
 80131a0:	7f9b      	ldrb	r3, [r3, #30]
 80131a2:	4619      	mov	r1, r3
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f7ff ff9d 	bl	80130e4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80131aa:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	8b5b      	ldrh	r3, [r3, #26]
 80131b0:	461a      	mov	r2, r3
 80131b2:	683b      	ldr	r3, [r7, #0]
 80131b4:	8a9b      	ldrh	r3, [r3, #20]
 80131b6:	1ad2      	subs	r2, r2, r3
 80131b8:	4b97      	ldr	r3, [pc, #604]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80131ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	8b5b      	ldrh	r3, [r3, #26]
 80131c0:	461a      	mov	r2, r3
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	8a9b      	ldrh	r3, [r3, #20]
 80131c6:	1ad2      	subs	r2, r2, r3
 80131c8:	4b93      	ldr	r3, [pc, #588]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80131ca:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	8b1b      	ldrh	r3, [r3, #24]
 80131d0:	461a      	mov	r2, r3
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	8a9b      	ldrh	r3, [r3, #20]
 80131d6:	1ad2      	subs	r2, r2, r3
 80131d8:	4b8f      	ldr	r3, [pc, #572]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80131da:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80131dc:	4a8e      	ldr	r2, [pc, #568]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80131de:	693b      	ldr	r3, [r7, #16]
 80131e0:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	8adb      	ldrh	r3, [r3, #22]
 80131e6:	461a      	mov	r2, r3
 80131e8:	683b      	ldr	r3, [r7, #0]
 80131ea:	8a9b      	ldrh	r3, [r3, #20]
 80131ec:	041b      	lsls	r3, r3, #16
 80131ee:	431a      	orrs	r2, r3
 80131f0:	4b89      	ldr	r3, [pc, #548]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80131f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80131f4:	683b      	ldr	r3, [r7, #0]
 80131f6:	691a      	ldr	r2, [r3, #16]
 80131f8:	4b87      	ldr	r3, [pc, #540]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80131fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	685a      	ldr	r2, [r3, #4]
 8013200:	4b85      	ldr	r3, [pc, #532]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013202:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801320c:	d037      	beq.n	801327e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 801320e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013212:	f200 80e4 	bhi.w	80133de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8013216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801321a:	d014      	beq.n	8013246 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 801321c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013220:	f200 80dd 	bhi.w	80133de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8013224:	2b80      	cmp	r3, #128	@ 0x80
 8013226:	d05a      	beq.n	80132de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x166>
 8013228:	2b80      	cmp	r3, #128	@ 0x80
 801322a:	f200 80d8 	bhi.w	80133de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 801322e:	2b40      	cmp	r3, #64	@ 0x40
 8013230:	f000 80c1 	beq.w	80133b6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23e>
 8013234:	2b40      	cmp	r3, #64	@ 0x40
 8013236:	f200 80d2 	bhi.w	80133de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 801323a:	2b04      	cmp	r3, #4
 801323c:	d03b      	beq.n	80132b6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
 801323e:	2b20      	cmp	r3, #32
 8013240:	f000 80b9 	beq.w	80133b6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23e>
 8013244:	e0cb      	b.n	80133de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8013246:	683b      	ldr	r3, [r7, #0]
 8013248:	7f1b      	ldrb	r3, [r3, #28]
 801324a:	061b      	lsls	r3, r3, #24
 801324c:	4a72      	ldr	r2, [pc, #456]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801324e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013252:	f043 030a 	orr.w	r3, r3, #10
 8013256:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	330c      	adds	r3, #12
 801325c:	4c6e      	ldr	r4, [pc, #440]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801325e:	4618      	mov	r0, r3
 8013260:	f7ff fd8e 	bl	8012d80 <_ZNK8touchgfx9colortypecvmEv>
 8013264:	4603      	mov	r3, r0
 8013266:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8013268:	4a6b      	ldr	r2, [pc, #428]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801326a:	697b      	ldr	r3, [r7, #20]
 801326c:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801326e:	683b      	ldr	r3, [r7, #0]
 8013270:	691a      	ldr	r2, [r3, #16]
 8013272:	4b69      	ldr	r3, [pc, #420]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013274:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8013276:	4b68      	ldr	r3, [pc, #416]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013278:	4a68      	ldr	r2, [pc, #416]	@ (801341c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801327a:	601a      	str	r2, [r3, #0]
        break;
 801327c:	e0c7      	b.n	801340e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	7f1b      	ldrb	r3, [r3, #28]
 8013282:	061b      	lsls	r3, r3, #24
 8013284:	4a64      	ldr	r2, [pc, #400]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013286:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801328a:	f043 0309 	orr.w	r3, r3, #9
 801328e:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	330c      	adds	r3, #12
 8013294:	4c60      	ldr	r4, [pc, #384]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013296:	4618      	mov	r0, r3
 8013298:	f7ff fd72 	bl	8012d80 <_ZNK8touchgfx9colortypecvmEv>
 801329c:	4603      	mov	r3, r0
 801329e:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80132a0:	4a5d      	ldr	r2, [pc, #372]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80132a2:	697b      	ldr	r3, [r7, #20]
 80132a4:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80132a6:	683b      	ldr	r3, [r7, #0]
 80132a8:	691a      	ldr	r2, [r3, #16]
 80132aa:	4b5b      	ldr	r3, [pc, #364]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80132ac:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80132ae:	4b5a      	ldr	r3, [pc, #360]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80132b0:	4a5a      	ldr	r2, [pc, #360]	@ (801341c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80132b2:	601a      	str	r2, [r3, #0]
        break;
 80132b4:	e0ab      	b.n	801340e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80132b6:	683b      	ldr	r3, [r7, #0]
 80132b8:	7f1b      	ldrb	r3, [r3, #28]
 80132ba:	061a      	lsls	r2, r3, #24
 80132bc:	69bb      	ldr	r3, [r7, #24]
 80132be:	4313      	orrs	r3, r2
 80132c0:	4a55      	ldr	r2, [pc, #340]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80132c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80132c6:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80132c8:	4a53      	ldr	r2, [pc, #332]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80132ca:	697b      	ldr	r3, [r7, #20]
 80132cc:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	691a      	ldr	r2, [r3, #16]
 80132d2:	4b51      	ldr	r3, [pc, #324]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80132d4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80132d6:	4b50      	ldr	r3, [pc, #320]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80132d8:	4a50      	ldr	r2, [pc, #320]	@ (801341c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80132da:	601a      	str	r2, [r3, #0]
        break;
 80132dc:	e097      	b.n	801340e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 80132de:	2301      	movs	r3, #1
 80132e0:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	689b      	ldr	r3, [r3, #8]
 80132e6:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	1d1a      	adds	r2, r3, #4
 80132ec:	4b4a      	ldr	r3, [pc, #296]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80132ee:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80132f0:	683b      	ldr	r3, [r7, #0]
 80132f2:	7f1b      	ldrb	r3, [r3, #28]
 80132f4:	061a      	lsls	r2, r3, #24
 80132f6:	69bb      	ldr	r3, [r7, #24]
 80132f8:	4313      	orrs	r3, r2
 80132fa:	4a47      	ldr	r2, [pc, #284]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80132fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013300:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8013302:	4a45      	ldr	r2, [pc, #276]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013304:	697b      	ldr	r3, [r7, #20]
 8013306:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013308:	683b      	ldr	r3, [r7, #0]
 801330a:	691a      	ldr	r2, [r3, #16]
 801330c:	4b42      	ldr	r3, [pc, #264]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801330e:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	881b      	ldrh	r3, [r3, #0]
 8013314:	b2db      	uxtb	r3, r3
 8013316:	2b00      	cmp	r3, #0
 8013318:	d002      	beq.n	8013320 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 801331a:	2b01      	cmp	r3, #1
 801331c:	d00e      	beq.n	801333c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>
 801331e:	e023      	b.n	8013368 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8013320:	4b3d      	ldr	r3, [pc, #244]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013322:	69db      	ldr	r3, [r3, #28]
 8013324:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013328:	f023 0310 	bic.w	r3, r3, #16
 801332c:	68fa      	ldr	r2, [r7, #12]
 801332e:	8852      	ldrh	r2, [r2, #2]
 8013330:	3a01      	subs	r2, #1
 8013332:	0212      	lsls	r2, r2, #8
 8013334:	4938      	ldr	r1, [pc, #224]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013336:	4313      	orrs	r3, r2
 8013338:	61cb      	str	r3, [r1, #28]
                break;
 801333a:	e01c      	b.n	8013376 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fe>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 801333c:	683b      	ldr	r3, [r7, #0]
 801333e:	7f1b      	ldrb	r3, [r3, #28]
 8013340:	2bff      	cmp	r3, #255	@ 0xff
 8013342:	d101      	bne.n	8013348 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
                {
                    blend = false;
 8013344:	2300      	movs	r3, #0
 8013346:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8013348:	4b33      	ldr	r3, [pc, #204]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801334a:	69db      	ldr	r3, [r3, #28]
 801334c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013350:	f023 0310 	bic.w	r3, r3, #16
 8013354:	68fa      	ldr	r2, [r7, #12]
 8013356:	8852      	ldrh	r2, [r2, #2]
 8013358:	3a01      	subs	r2, #1
 801335a:	0212      	lsls	r2, r2, #8
 801335c:	4313      	orrs	r3, r2
 801335e:	4a2e      	ldr	r2, [pc, #184]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013360:	f043 0310 	orr.w	r3, r3, #16
 8013364:	61d3      	str	r3, [r2, #28]
                break;
 8013366:	e006      	b.n	8013376 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fe>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8013368:	4b2d      	ldr	r3, [pc, #180]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801336a:	4a2e      	ldr	r2, [pc, #184]	@ (8013424 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 801336c:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8013370:	482d      	ldr	r0, [pc, #180]	@ (8013428 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8013372:	f01a fbf5 	bl	802db60 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8013376:	4b28      	ldr	r3, [pc, #160]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013378:	69db      	ldr	r3, [r3, #28]
 801337a:	4a27      	ldr	r2, [pc, #156]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801337c:	f043 0320 	orr.w	r3, r3, #32
 8013380:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8013382:	bf00      	nop
 8013384:	4b24      	ldr	r3, [pc, #144]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013386:	69db      	ldr	r3, [r3, #28]
 8013388:	f003 0320 	and.w	r3, r3, #32
 801338c:	2b00      	cmp	r3, #0
 801338e:	bf14      	ite	ne
 8013390:	2301      	movne	r3, #1
 8013392:	2300      	moveq	r3, #0
 8013394:	b2db      	uxtb	r3, r3
 8013396:	2b00      	cmp	r3, #0
 8013398:	d1f4      	bne.n	8013384 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 801339a:	4b1f      	ldr	r3, [pc, #124]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801339c:	2210      	movs	r2, #16
 801339e:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 80133a0:	7ffb      	ldrb	r3, [r7, #31]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d003      	beq.n	80133ae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x236>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80133a6:	4b1c      	ldr	r3, [pc, #112]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80133a8:	4a1c      	ldr	r2, [pc, #112]	@ (801341c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80133aa:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
            }
        }
        break;
 80133ac:	e02f      	b.n	801340e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80133ae:	4b1a      	ldr	r3, [pc, #104]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80133b0:	4a1e      	ldr	r2, [pc, #120]	@ (801342c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 80133b2:	601a      	str	r2, [r3, #0]
        break;
 80133b4:	e02b      	b.n	801340e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80133b6:	683b      	ldr	r3, [r7, #0]
 80133b8:	7f1b      	ldrb	r3, [r3, #28]
 80133ba:	061a      	lsls	r2, r3, #24
 80133bc:	69bb      	ldr	r3, [r7, #24]
 80133be:	4313      	orrs	r3, r2
 80133c0:	4a15      	ldr	r2, [pc, #84]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80133c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80133c6:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80133c8:	4a13      	ldr	r2, [pc, #76]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80133ca:	697b      	ldr	r3, [r7, #20]
 80133cc:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	691a      	ldr	r2, [r3, #16]
 80133d2:	4b11      	ldr	r3, [pc, #68]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80133d4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80133d6:	4b10      	ldr	r3, [pc, #64]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80133d8:	4a10      	ldr	r2, [pc, #64]	@ (801341c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80133da:	601a      	str	r2, [r3, #0]
        break;
 80133dc:	e017      	b.n	801340e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	7f1b      	ldrb	r3, [r3, #28]
 80133e2:	061a      	lsls	r2, r3, #24
 80133e4:	69bb      	ldr	r3, [r7, #24]
 80133e6:	4313      	orrs	r3, r2
 80133e8:	4a0b      	ldr	r2, [pc, #44]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80133ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80133ee:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80133f0:	683b      	ldr	r3, [r7, #0]
 80133f2:	7f5a      	ldrb	r2, [r3, #29]
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	7f9b      	ldrb	r3, [r3, #30]
 80133f8:	429a      	cmp	r2, r3
 80133fa:	d003      	beq.n	8013404 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80133fc:	4b06      	ldr	r3, [pc, #24]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80133fe:	4a0b      	ldr	r2, [pc, #44]	@ (801342c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8013400:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
        }
        break;
 8013402:	e003      	b.n	801340c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8013404:	4b04      	ldr	r3, [pc, #16]	@ (8013418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013406:	f242 3201 	movw	r2, #8961	@ 0x2301
 801340a:	601a      	str	r2, [r3, #0]
        break;
 801340c:	bf00      	nop
    }
}
 801340e:	bf00      	nop
 8013410:	3724      	adds	r7, #36	@ 0x24
 8013412:	46bd      	mov	sp, r7
 8013414:	bd90      	pop	{r4, r7, pc}
 8013416:	bf00      	nop
 8013418:	4002b000 	.word	0x4002b000
 801341c:	00022301 	.word	0x00022301
 8013420:	0802f6a0 	.word	0x0802f6a0
 8013424:	0802f6bc 	.word	0x0802f6bc
 8013428:	0802f628 	.word	0x0802f628
 801342c:	00012301 	.word	0x00012301

08013430 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8013430:	b590      	push	{r4, r7, lr}
 8013432:	b085      	sub	sp, #20
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
 8013438:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801343a:	683b      	ldr	r3, [r7, #0]
 801343c:	7f9b      	ldrb	r3, [r3, #30]
 801343e:	4619      	mov	r1, r3
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	f7ff fe4f 	bl	80130e4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8013446:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8013448:	4a3b      	ldr	r2, [pc, #236]	@ (8013538 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	8adb      	ldrh	r3, [r3, #22]
 8013452:	461a      	mov	r2, r3
 8013454:	683b      	ldr	r3, [r7, #0]
 8013456:	8a9b      	ldrh	r3, [r3, #20]
 8013458:	041b      	lsls	r3, r3, #16
 801345a:	431a      	orrs	r2, r3
 801345c:	4b36      	ldr	r3, [pc, #216]	@ (8013538 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801345e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	691a      	ldr	r2, [r3, #16]
 8013464:	4b34      	ldr	r3, [pc, #208]	@ (8013538 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8013466:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8013468:	683b      	ldr	r3, [r7, #0]
 801346a:	8b5b      	ldrh	r3, [r3, #26]
 801346c:	461a      	mov	r2, r3
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	8a9b      	ldrh	r3, [r3, #20]
 8013472:	1ad2      	subs	r2, r2, r3
 8013474:	4b30      	ldr	r3, [pc, #192]	@ (8013538 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8013476:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8013478:	683b      	ldr	r3, [r7, #0]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	2b08      	cmp	r3, #8
 801347e:	d12f      	bne.n	80134e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	8b5b      	ldrh	r3, [r3, #26]
 8013484:	461a      	mov	r2, r3
 8013486:	683b      	ldr	r3, [r7, #0]
 8013488:	8a9b      	ldrh	r3, [r3, #20]
 801348a:	1ad2      	subs	r2, r2, r3
 801348c:	4b2a      	ldr	r3, [pc, #168]	@ (8013538 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801348e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	8b5b      	ldrh	r3, [r3, #26]
 8013494:	461a      	mov	r2, r3
 8013496:	683b      	ldr	r3, [r7, #0]
 8013498:	8a9b      	ldrh	r3, [r3, #20]
 801349a:	1ad2      	subs	r2, r2, r3
 801349c:	4b26      	ldr	r3, [pc, #152]	@ (8013538 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801349e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80134a0:	4a25      	ldr	r2, [pc, #148]	@ (8013538 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	7f1b      	ldrb	r3, [r3, #28]
 80134aa:	061b      	lsls	r3, r3, #24
 80134ac:	4a22      	ldr	r2, [pc, #136]	@ (8013538 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80134ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80134b2:	f043 0309 	orr.w	r3, r3, #9
 80134b6:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80134b8:	683b      	ldr	r3, [r7, #0]
 80134ba:	330c      	adds	r3, #12
 80134bc:	4c1e      	ldr	r4, [pc, #120]	@ (8013538 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80134be:	4618      	mov	r0, r3
 80134c0:	f7ff fc5e 	bl	8012d80 <_ZNK8touchgfx9colortypecvmEv>
 80134c4:	4603      	mov	r3, r0
 80134c6:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80134c8:	683b      	ldr	r3, [r7, #0]
 80134ca:	691a      	ldr	r2, [r3, #16]
 80134cc:	4b1a      	ldr	r3, [pc, #104]	@ (8013538 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80134ce:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	691a      	ldr	r2, [r3, #16]
 80134d4:	4b18      	ldr	r3, [pc, #96]	@ (8013538 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80134d6:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 80134d8:	4b17      	ldr	r3, [pc, #92]	@ (8013538 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80134da:	4a18      	ldr	r2, [pc, #96]	@ (801353c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 80134dc:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
    }
}
 80134de:	e027      	b.n	8013530 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80134e0:	4a15      	ldr	r2, [pc, #84]	@ (8013538 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80134e6:	4b14      	ldr	r3, [pc, #80]	@ (8013538 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80134e8:	2200      	movs	r2, #0
 80134ea:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 80134ec:	683b      	ldr	r3, [r7, #0]
 80134ee:	330c      	adds	r3, #12
 80134f0:	4618      	mov	r0, r3
 80134f2:	f7ff fc45 	bl	8012d80 <_ZNK8touchgfx9colortypecvmEv>
 80134f6:	4603      	mov	r3, r0
 80134f8:	0a1b      	lsrs	r3, r3, #8
 80134fa:	f403 4478 	and.w	r4, r3, #63488	@ 0xf800
 80134fe:	683b      	ldr	r3, [r7, #0]
 8013500:	330c      	adds	r3, #12
 8013502:	4618      	mov	r0, r3
 8013504:	f7ff fc3c 	bl	8012d80 <_ZNK8touchgfx9colortypecvmEv>
 8013508:	4603      	mov	r3, r0
 801350a:	095b      	lsrs	r3, r3, #5
 801350c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8013510:	431c      	orrs	r4, r3
 8013512:	683b      	ldr	r3, [r7, #0]
 8013514:	330c      	adds	r3, #12
 8013516:	4618      	mov	r0, r3
 8013518:	f7ff fc32 	bl	8012d80 <_ZNK8touchgfx9colortypecvmEv>
 801351c:	4603      	mov	r3, r0
 801351e:	08db      	lsrs	r3, r3, #3
 8013520:	f003 031f 	and.w	r3, r3, #31
 8013524:	4a04      	ldr	r2, [pc, #16]	@ (8013538 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8013526:	4323      	orrs	r3, r4
 8013528:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 801352a:	4b03      	ldr	r3, [pc, #12]	@ (8013538 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801352c:	4a04      	ldr	r2, [pc, #16]	@ (8013540 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 801352e:	601a      	str	r2, [r3, #0]
}
 8013530:	bf00      	nop
 8013532:	3714      	adds	r7, #20
 8013534:	46bd      	mov	sp, r7
 8013536:	bd90      	pop	{r4, r7, pc}
 8013538:	4002b000 	.word	0x4002b000
 801353c:	00022301 	.word	0x00022301
 8013540:	00032301 	.word	0x00032301

08013544 <_ZN8touchgfx5paint8tearDownEv>:
 * @fn void tearDown();
 *
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
 8013544:	b480      	push	{r7}
 8013546:	af00      	add	r7, sp, #0
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8013548:	bf00      	nop
 801354a:	4b09      	ldr	r3, [pc, #36]	@ (8013570 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	f003 0301 	and.w	r3, r3, #1
 8013552:	2b00      	cmp	r3, #0
 8013554:	bf14      	ite	ne
 8013556:	2301      	movne	r3, #1
 8013558:	2300      	moveq	r3, #0
 801355a:	b2db      	uxtb	r3, r3
 801355c:	2b00      	cmp	r3, #0
 801355e:	d1f4      	bne.n	801354a <_ZN8touchgfx5paint8tearDownEv+0x6>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8013560:	4b03      	ldr	r3, [pc, #12]	@ (8013570 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 8013562:	2223      	movs	r2, #35	@ 0x23
 8013564:	609a      	str	r2, [r3, #8]
}
 8013566:	bf00      	nop
 8013568:	46bd      	mov	sp, r7
 801356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356e:	4770      	bx	lr
 8013570:	4002b000 	.word	0x4002b000

08013574 <_ZN8touchgfx5paint9flushLineEPmi>:
/** Flushes a line of pixels in the data cache if used.
 *
 * @brief Flushes decoded RGB pixels when rendering compressed images
 */
void flushLine(uint32_t* addr, int sizebytes)
{
 8013574:	b480      	push	{r7}
 8013576:	b083      	sub	sp, #12
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
 801357c:	6039      	str	r1, [r7, #0]
}
 801357e:	bf00      	nop
 8013580:	370c      	adds	r7, #12
 8013582:	46bd      	mov	sp, r7
 8013584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013588:	4770      	bx	lr
	...

0801358c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 801358c:	b480      	push	{r7}
 801358e:	b085      	sub	sp, #20
 8013590:	af00      	add	r7, sp, #0
 8013592:	60f8      	str	r0, [r7, #12]
 8013594:	60b9      	str	r1, [r7, #8]
 8013596:	607a      	str	r2, [r7, #4]
 8013598:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 801359a:	bf00      	nop
 801359c:	4b21      	ldr	r3, [pc, #132]	@ (8013624 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	f003 0301 	and.w	r3, r3, #1
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	bf14      	ite	ne
 80135a8:	2301      	movne	r3, #1
 80135aa:	2300      	moveq	r3, #0
 80135ac:	b2db      	uxtb	r3, r3
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d1f4      	bne.n	801359c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80135b2:	4b1c      	ldr	r3, [pc, #112]	@ (8013624 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80135b4:	2223      	movs	r2, #35	@ 0x23
 80135b6:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 80135b8:	4b1a      	ldr	r3, [pc, #104]	@ (8013624 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80135ba:	2202      	movs	r2, #2
 80135bc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80135be:	68bb      	ldr	r3, [r7, #8]
 80135c0:	041b      	lsls	r3, r3, #16
 80135c2:	4a18      	ldr	r2, [pc, #96]	@ (8013624 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80135c4:	f043 0301 	orr.w	r3, r3, #1
 80135c8:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80135ca:	4a16      	ldr	r2, [pc, #88]	@ (8013624 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	63d3      	str	r3, [r2, #60]	@ 0x3c

    if (alpha < 0xFF)
 80135d0:	78fb      	ldrb	r3, [r7, #3]
 80135d2:	2bff      	cmp	r3, #255	@ 0xff
 80135d4:	d017      	beq.n	8013606 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x7a>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80135d6:	4b13      	ldr	r3, [pc, #76]	@ (8013624 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80135d8:	2202      	movs	r2, #2
 80135da:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80135dc:	78fb      	ldrb	r3, [r7, #3]
 80135de:	061b      	lsls	r3, r3, #24
 80135e0:	4a10      	ldr	r2, [pc, #64]	@ (8013624 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80135e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80135e6:	f043 0309 	orr.w	r3, r3, #9
 80135ea:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color);
 80135ec:	4a0d      	ldr	r2, [pc, #52]	@ (8013624 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 80135f2:	4a0c      	ldr	r2, [pc, #48]	@ (8013624 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	6153      	str	r3, [r2, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 80135f8:	4a0a      	ldr	r2, [pc, #40]	@ (8013624 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	60d3      	str	r3, [r2, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 80135fe:	4b09      	ldr	r3, [pc, #36]	@ (8013624 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8013600:	4a09      	ldr	r2, [pc, #36]	@ (8013628 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x9c>)
 8013602:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, color565);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}
 8013604:	e008      	b.n	8013618 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x8c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8013606:	4b07      	ldr	r3, [pc, #28]	@ (8013624 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8013608:	2202      	movs	r2, #2
 801360a:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, color565);
 801360c:	4a05      	ldr	r2, [pc, #20]	@ (8013624 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801360e:	69bb      	ldr	r3, [r7, #24]
 8013610:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8013612:	4b04      	ldr	r3, [pc, #16]	@ (8013624 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8013614:	4a05      	ldr	r2, [pc, #20]	@ (801362c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0xa0>)
 8013616:	601a      	str	r2, [r3, #0]
}
 8013618:	bf00      	nop
 801361a:	3714      	adds	r7, #20
 801361c:	46bd      	mov	sp, r7
 801361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013622:	4770      	bx	lr
 8013624:	4002b000 	.word	0x4002b000
 8013628:	00020001 	.word	0x00020001
 801362c:	00030001 	.word	0x00030001

08013630 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>:

void lineFromRGB565(uint16_t* const ptr, const uint16_t* const data, const unsigned count, const uint8_t alpha)
{
 8013630:	b480      	push	{r7}
 8013632:	b085      	sub	sp, #20
 8013634:	af00      	add	r7, sp, #0
 8013636:	60f8      	str	r0, [r7, #12]
 8013638:	60b9      	str	r1, [r7, #8]
 801363a:	607a      	str	r2, [r7, #4]
 801363c:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 801363e:	bf00      	nop
 8013640:	4b1f      	ldr	r3, [pc, #124]	@ (80136c0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	f003 0301 	and.w	r3, r3, #1
 8013648:	2b00      	cmp	r3, #0
 801364a:	bf14      	ite	ne
 801364c:	2301      	movne	r3, #1
 801364e:	2300      	moveq	r3, #0
 8013650:	b2db      	uxtb	r3, r3
 8013652:	2b00      	cmp	r3, #0
 8013654:	d1f4      	bne.n	8013640 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8013656:	4b1a      	ldr	r3, [pc, #104]	@ (80136c0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8013658:	2223      	movs	r2, #35	@ 0x23
 801365a:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 801365c:	4b18      	ldr	r3, [pc, #96]	@ (80136c0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 801365e:	2202      	movs	r2, #2
 8013660:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	041b      	lsls	r3, r3, #16
 8013666:	4a16      	ldr	r2, [pc, #88]	@ (80136c0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8013668:	f043 0301 	orr.w	r3, r3, #1
 801366c:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 801366e:	4a14      	ldr	r2, [pc, #80]	@ (80136c0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8013674:	4a12      	ldr	r2, [pc, #72]	@ (80136c0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	60d3      	str	r3, [r2, #12]

    if (alpha < 0xFF)
 801367a:	78fb      	ldrb	r3, [r7, #3]
 801367c:	2bff      	cmp	r3, #255	@ 0xff
 801367e:	d00f      	beq.n	80136a0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x70>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8013680:	78fb      	ldrb	r3, [r7, #3]
 8013682:	061b      	lsls	r3, r3, #24
 8013684:	4a0e      	ldr	r2, [pc, #56]	@ (80136c0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8013686:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 801368a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801368c:	4b0c      	ldr	r3, [pc, #48]	@ (80136c0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 801368e:	2202      	movs	r2, #2
 8013690:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8013692:	4a0b      	ldr	r2, [pc, #44]	@ (80136c0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	6153      	str	r3, [r2, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8013698:	4b09      	ldr	r3, [pc, #36]	@ (80136c0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 801369a:	4a0a      	ldr	r2, [pc, #40]	@ (80136c4 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x94>)
 801369c:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 801369e:	e008      	b.n	80136b2 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80136a0:	78fb      	ldrb	r3, [r7, #3]
 80136a2:	061b      	lsls	r3, r3, #24
 80136a4:	4a06      	ldr	r2, [pc, #24]	@ (80136c0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80136a6:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 80136aa:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 80136ac:	4b04      	ldr	r3, [pc, #16]	@ (80136c0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80136ae:	2201      	movs	r2, #1
 80136b0:	601a      	str	r2, [r3, #0]
}
 80136b2:	bf00      	nop
 80136b4:	3714      	adds	r7, #20
 80136b6:	46bd      	mov	sp, r7
 80136b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136bc:	4770      	bx	lr
 80136be:	bf00      	nop
 80136c0:	4002b000 	.word	0x4002b000
 80136c4:	00020001 	.word	0x00020001

080136c8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>:

void lineFromARGB8888(uint16_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 80136c8:	b480      	push	{r7}
 80136ca:	b085      	sub	sp, #20
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	60f8      	str	r0, [r7, #12]
 80136d0:	60b9      	str	r1, [r7, #8]
 80136d2:	607a      	str	r2, [r7, #4]
 80136d4:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80136d6:	bf00      	nop
 80136d8:	4b18      	ldr	r3, [pc, #96]	@ (801373c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	f003 0301 	and.w	r3, r3, #1
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	bf14      	ite	ne
 80136e4:	2301      	movne	r3, #1
 80136e6:	2300      	moveq	r3, #0
 80136e8:	b2db      	uxtb	r3, r3
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d1f4      	bne.n	80136d8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80136ee:	4b13      	ldr	r3, [pc, #76]	@ (801373c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 80136f0:	2223      	movs	r2, #35	@ 0x23
 80136f2:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 80136f4:	4b11      	ldr	r3, [pc, #68]	@ (801373c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 80136f6:	2202      	movs	r2, #2
 80136f8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	041b      	lsls	r3, r3, #16
 80136fe:	4a0f      	ldr	r2, [pc, #60]	@ (801373c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8013700:	f043 0301 	orr.w	r3, r3, #1
 8013704:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8013706:	4a0d      	ldr	r2, [pc, #52]	@ (801373c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 801370c:	4a0b      	ldr	r2, [pc, #44]	@ (801373c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	60d3      	str	r3, [r2, #12]

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8013712:	78fb      	ldrb	r3, [r7, #3]
 8013714:	061b      	lsls	r3, r3, #24
 8013716:	4a09      	ldr	r2, [pc, #36]	@ (801373c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8013718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801371c:	61d3      	str	r3, [r2, #28]

    /* Write DMA2D BGPFCCR register */
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801371e:	4b07      	ldr	r3, [pc, #28]	@ (801373c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8013720:	2202      	movs	r2, #2
 8013722:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8013724:	4a05      	ldr	r2, [pc, #20]	@ (801373c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	6153      	str	r3, [r2, #20]

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 801372a:	4b04      	ldr	r3, [pc, #16]	@ (801373c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 801372c:	4a04      	ldr	r2, [pc, #16]	@ (8013740 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x78>)
 801372e:	601a      	str	r2, [r3, #0]
}
 8013730:	bf00      	nop
 8013732:	3714      	adds	r7, #20
 8013734:	46bd      	mov	sp, r7
 8013736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801373a:	4770      	bx	lr
 801373c:	4002b000 	.word	0x4002b000
 8013740:	00020001 	.word	0x00020001

08013744 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8013744:	b480      	push	{r7}
 8013746:	b083      	sub	sp, #12
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 801374c:	4a04      	ldr	r2, [pc, #16]	@ (8013760 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	6013      	str	r3, [r2, #0]
    }
 8013752:	bf00      	nop
 8013754:	370c      	adds	r7, #12
 8013756:	46bd      	mov	sp, r7
 8013758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375c:	4770      	bx	lr
 801375e:	bf00      	nop
 8013760:	2005bd80 	.word	0x2005bd80

08013764 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8013764:	b480      	push	{r7}
 8013766:	b085      	sub	sp, #20
 8013768:	af00      	add	r7, sp, #0
 801376a:	60f8      	str	r0, [r7, #12]
 801376c:	60b9      	str	r1, [r7, #8]
 801376e:	607a      	str	r2, [r7, #4]
 8013770:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8013772:	4a0b      	ldr	r2, [pc, #44]	@ (80137a0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	68ba      	ldr	r2, [r7, #8]
 801377c:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	687a      	ldr	r2, [r7, #4]
 8013782:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	683a      	ldr	r2, [r7, #0]
 8013788:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	69ba      	ldr	r2, [r7, #24]
 801378e:	611a      	str	r2, [r3, #16]
    {
    }
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	4618      	mov	r0, r3
 8013794:	3714      	adds	r7, #20
 8013796:	46bd      	mov	sp, r7
 8013798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379c:	4770      	bx	lr
 801379e:	bf00      	nop
 80137a0:	080304b0 	.word	0x080304b0

080137a4 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80137a4:	b480      	push	{r7}
 80137a6:	b083      	sub	sp, #12
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
    {
 80137ac:	4a04      	ldr	r2, [pc, #16]	@ (80137c0 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	601a      	str	r2, [r3, #0]
    }
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	4618      	mov	r0, r3
 80137b6:	370c      	adds	r7, #12
 80137b8:	46bd      	mov	sp, r7
 80137ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137be:	4770      	bx	lr
 80137c0:	080304b0 	.word	0x080304b0

080137c4 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b082      	sub	sp, #8
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
    }
 80137cc:	6878      	ldr	r0, [r7, #4]
 80137ce:	f7ff ffe9 	bl	80137a4 <_ZN8touchgfx7MVPHeapD1Ev>
 80137d2:	2114      	movs	r1, #20
 80137d4:	6878      	ldr	r0, [r7, #4]
 80137d6:	f019 face 	bl	802cd76 <_ZdlPvj>
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	4618      	mov	r0, r3
 80137de:	3708      	adds	r7, #8
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd80      	pop	{r7, pc}

080137e4 <_ZN8touchgfx18VectorFontRendererD1Ev>:
 */
class VectorFontRenderer
{
public:
    /** Virtual destructor. */
    virtual ~VectorFontRenderer()
 80137e4:	b480      	push	{r7}
 80137e6:	b083      	sub	sp, #12
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
    {
 80137ec:	4a04      	ldr	r2, [pc, #16]	@ (8013800 <_ZN8touchgfx18VectorFontRendererD1Ev+0x1c>)
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	601a      	str	r2, [r3, #0]
    }
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	4618      	mov	r0, r3
 80137f6:	370c      	adds	r7, #12
 80137f8:	46bd      	mov	sp, r7
 80137fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fe:	4770      	bx	lr
 8013800:	0803049c 	.word	0x0803049c

08013804 <_ZN8touchgfx18VectorFontRendererD0Ev>:
    virtual ~VectorFontRenderer()
 8013804:	b580      	push	{r7, lr}
 8013806:	b082      	sub	sp, #8
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
    }
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f7ff ffe9 	bl	80137e4 <_ZN8touchgfx18VectorFontRendererD1Ev>
 8013812:	2104      	movs	r1, #4
 8013814:	6878      	ldr	r0, [r7, #4]
 8013816:	f019 faae 	bl	802cd76 <_ZdlPvj>
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	4618      	mov	r0, r3
 801381e:	3708      	adds	r7, #8
 8013820:	46bd      	mov	sp, r7
 8013822:	bd80      	pop	{r7, pc}

08013824 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8013824:	b480      	push	{r7}
 8013826:	b083      	sub	sp, #12
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
    {
 801382c:	4a04      	ldr	r2, [pc, #16]	@ (8013840 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	601a      	str	r2, [r3, #0]
    }
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	4618      	mov	r0, r3
 8013836:	370c      	adds	r7, #12
 8013838:	46bd      	mov	sp, r7
 801383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383e:	4770      	bx	lr
 8013840:	08030f30 	.word	0x08030f30

08013844 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
    }
 801384c:	6878      	ldr	r0, [r7, #4]
 801384e:	f7ff ffe9 	bl	8013824 <_ZN8touchgfx3LCDD1Ev>
 8013852:	210c      	movs	r1, #12
 8013854:	6878      	ldr	r0, [r7, #4]
 8013856:	f019 fa8e 	bl	802cd76 <_ZdlPvj>
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	4618      	mov	r0, r3
 801385e:	3708      	adds	r7, #8
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}

08013864 <_ZN8touchgfx3LCD21setVectorFontRendererEPNS_18VectorFontRendererE>:
    /**
     * Set the vector font renderer
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
 8013864:	b480      	push	{r7}
 8013866:	b083      	sub	sp, #12
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
 801386c:	6039      	str	r1, [r7, #0]
    {
        vectorFontRenderer = renderer;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	683a      	ldr	r2, [r7, #0]
 8013872:	609a      	str	r2, [r3, #8]
    }
 8013874:	bf00      	nop
 8013876:	370c      	adds	r7, #12
 8013878:	46bd      	mov	sp, r7
 801387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387e:	4770      	bx	lr

08013880 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8013880:	b480      	push	{r7}
 8013882:	b083      	sub	sp, #12
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
            : startX(0),
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	2200      	movs	r2, #0
 801388c:	801a      	strh	r2, [r3, #0]
              startY(0),
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	2200      	movs	r2, #0
 8013892:	805a      	strh	r2, [r3, #2]
              downX(0),
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	2200      	movs	r2, #0
 8013898:	809a      	strh	r2, [r3, #4]
              downY(0),
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	2200      	movs	r2, #0
 801389e:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	2200      	movs	r2, #0
 80138a4:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	2200      	movs	r2, #0
 80138aa:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	2200      	movs	r2, #0
 80138b0:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2200      	movs	r2, #0
 80138b6:	739a      	strb	r2, [r3, #14]
        {
        }
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	4618      	mov	r0, r3
 80138bc:	370c      	adds	r7, #12
 80138be:	46bd      	mov	sp, r7
 80138c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c4:	4770      	bx	lr

080138c6 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80138c6:	b580      	push	{r7, lr}
 80138c8:	b082      	sub	sp, #8
 80138ca:	af00      	add	r7, sp, #0
 80138cc:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	4618      	mov	r0, r3
 80138d2:	f7ff ffd5 	bl	8013880 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	2200      	movs	r2, #0
 80138da:	611a      	str	r2, [r3, #16]
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	2200      	movs	r2, #0
 80138e0:	829a      	strh	r2, [r3, #20]
    {
    }
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	4618      	mov	r0, r3
 80138e6:	3708      	adds	r7, #8
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}

080138ec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b084      	sub	sp, #16
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	60f8      	str	r0, [r7, #12]
 80138f4:	60b9      	str	r1, [r7, #8]
 80138f6:	607a      	str	r2, [r7, #4]
 80138f8:	603b      	str	r3, [r7, #0]
          maxBlockLines(20)
 80138fa:	4a65      	ldr	r2, [pc, #404]	@ (8013a90 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1a4>)
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	68ba      	ldr	r2, [r7, #8]
 8013904:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	687a      	ldr	r2, [r7, #4]
 801390a:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	683a      	ldr	r2, [r7, #0]
 8013910:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	2200      	movs	r2, #0
 8013916:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	2200      	movs	r2, #0
 801391c:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	2200      	movs	r2, #0
 8013922:	619a      	str	r2, [r3, #24]
          gestures(),
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	331c      	adds	r3, #28
 8013928:	4618      	mov	r0, r3
 801392a:	f7ff ffcc 	bl	80138c6 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	2200      	movs	r2, #0
 8013932:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	2200      	movs	r2, #0
 801393a:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	2200      	movs	r2, #0
 8013940:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	2200      	movs	r2, #0
 8013946:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	2200      	movs	r2, #0
 801394c:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	2200      	movs	r2, #0
 8013952:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	2201      	movs	r2, #1
 801395a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	2200      	movs	r2, #0
 8013962:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	2200      	movs	r2, #0
 801396a:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	2200      	movs	r2, #0
 8013972:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	3350      	adds	r3, #80	@ 0x50
 8013978:	4618      	mov	r0, r3
 801397a:	f7fc fdc6 	bl	801050a <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	2200      	movs	r2, #0
 8013982:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          listener(0),
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	2200      	movs	r2, #0
 801398a:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastX(0),
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	2200      	movs	r2, #0
 8013990:	661a      	str	r2, [r3, #96]	@ 0x60
          lastY(0),
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	2200      	movs	r2, #0
 8013996:	665a      	str	r2, [r3, #100]	@ 0x64
          touchSampleRate(1),
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	2201      	movs	r2, #1
 801399c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          mcuLoadPct(0),
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	2200      	movs	r2, #0
 80139a4:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          vSyncCnt(0),
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	2200      	movs	r2, #0
 80139ac:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          vSyncForFrame(1),
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	2201      	movs	r2, #1
 80139b4:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	2200      	movs	r2, #0
 80139bc:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          clientDirty(false),
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	2200      	movs	r2, #0
 80139c4:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
          swapRequested(false),
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	2200      	movs	r2, #0
 80139cc:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
          lastTouched(false),
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	2200      	movs	r2, #0
 80139d4:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
          updateMCULoad(0),
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	2200      	movs	r2, #0
 80139dc:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	2200      	movs	r2, #0
 80139e4:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	2200      	movs	r2, #0
 80139ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	2200      	movs	r2, #0
 80139f2:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
          useDMAAcceleration(true),
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	2201      	movs	r2, #1
 80139fa:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
          lastRenderMethod(HARDWARE),
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	2201      	movs	r2, #1
 8013a02:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
          isFrontPorchEntered(false),
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	2200      	movs	r2, #0
 8013a0a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
          numberOfBlocks(4),
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	2204      	movs	r2, #4
 8013a12:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
          maxDrawingHeight(height / numberOfBlocks), // Best guess based on testing (but not ideal in all cases)
 8013a16:	8bbb      	ldrh	r3, [r7, #28]
 8013a18:	68fa      	ldr	r2, [r7, #12]
 8013a1a:	f892 207d 	ldrb.w	r2, [r2, #125]	@ 0x7d
 8013a1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8013a22:	b29a      	uxth	r2, r3
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 8013a30:	4a18      	ldr	r2, [pc, #96]	@ (8013a94 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1a8>)
 8013a32:	fba2 2303 	umull	r2, r3, r2, r3
 8013a36:	085b      	lsrs	r3, r3, #1
 8013a38:	b29a      	uxth	r2, r3
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
          maxBlockLines(20)
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	2214      	movs	r2, #20
 8013a44:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
        instance = this;
 8013a48:	4a13      	ldr	r2, [pc, #76]	@ (8013a98 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1ac>)
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8013a4e:	4a13      	ldr	r2, [pc, #76]	@ (8013a9c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b0>)
 8013a50:	8b3b      	ldrh	r3, [r7, #24]
 8013a52:	8013      	strh	r3, [r2, #0]
 8013a54:	4b11      	ldr	r3, [pc, #68]	@ (8013a9c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b0>)
 8013a56:	881a      	ldrh	r2, [r3, #0]
 8013a58:	4b11      	ldr	r3, [pc, #68]	@ (8013aa0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b4>)
 8013a5a:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8013a5c:	4a11      	ldr	r2, [pc, #68]	@ (8013aa4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b8>)
 8013a5e:	8bbb      	ldrh	r3, [r7, #28]
 8013a60:	8013      	strh	r3, [r2, #0]
 8013a62:	4b10      	ldr	r3, [pc, #64]	@ (8013aa4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b8>)
 8013a64:	881a      	ldrh	r2, [r3, #0]
 8013a66:	4b10      	ldr	r3, [pc, #64]	@ (8013aa8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1bc>)
 8013a68:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8013a6a:	4b10      	ldr	r3, [pc, #64]	@ (8013aac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1c0>)
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8013a70:	8b3a      	ldrh	r2, [r7, #24]
 8013a72:	8bbb      	ldrh	r3, [r7, #28]
 8013a74:	429a      	cmp	r2, r3
 8013a76:	bf34      	ite	cc
 8013a78:	2301      	movcc	r3, #1
 8013a7a:	2300      	movcs	r3, #0
 8013a7c:	b2db      	uxtb	r3, r3
 8013a7e:	461a      	mov	r2, r3
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	4618      	mov	r0, r3
 8013a8a:	3710      	adds	r7, #16
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bd80      	pop	{r7, pc}
 8013a90:	080309e0 	.word	0x080309e0
 8013a94:	aaaaaaab 	.word	0xaaaaaaab
 8013a98:	2005bd1c 	.word	0x2005bd1c
 8013a9c:	2005bd10 	.word	0x2005bd10
 8013aa0:	2005bd16 	.word	0x2005bd16
 8013aa4:	2005bd12 	.word	0x2005bd12
 8013aa8:	2005bd18 	.word	0x2005bd18
 8013aac:	2005bd14 	.word	0x2005bd14

08013ab0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b082      	sub	sp, #8
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
 8013ab8:	6039      	str	r1, [r7, #0]
    {
        app.gotomainPageScreenNoTransition();
 8013aba:	683b      	ldr	r3, [r7, #0]
 8013abc:	4618      	mov	r0, r3
 8013abe:	f7fc faa9 	bl	8010014 <_ZN23FrontendApplicationBase30gotomainPageScreenNoTransitionEv>
    }
 8013ac2:	bf00      	nop
 8013ac4:	3708      	adds	r7, #8
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}
	...

08013acc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b086      	sub	sp, #24
 8013ad0:	af02      	add	r7, sp, #8
 8013ad2:	60f8      	str	r0, [r7, #12]
 8013ad4:	60b9      	str	r1, [r7, #8]
 8013ad6:	607a      	str	r2, [r7, #4]
 8013ad8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8013ada:	68f8      	ldr	r0, [r7, #12]
 8013adc:	69bb      	ldr	r3, [r7, #24]
 8013ade:	9300      	str	r3, [sp, #0]
 8013ae0:	683b      	ldr	r3, [r7, #0]
 8013ae2:	687a      	ldr	r2, [r7, #4]
 8013ae4:	68b9      	ldr	r1, [r7, #8]
 8013ae6:	f7ff fe3d 	bl	8013764 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8013aea:	4a04      	ldr	r2, [pc, #16]	@ (8013afc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	601a      	str	r2, [r3, #0]
    {

    }
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	4618      	mov	r0, r3
 8013af4:	3710      	adds	r7, #16
 8013af6:	46bd      	mov	sp, r7
 8013af8:	bd80      	pop	{r7, pc}
 8013afa:	bf00      	nop
 8013afc:	08030488 	.word	0x08030488

08013b00 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b082      	sub	sp, #8
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
 8013b08:	4a05      	ldr	r2, [pc, #20]	@ (8013b20 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	601a      	str	r2, [r3, #0]
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	4618      	mov	r0, r3
 8013b12:	f7ff fe47 	bl	80137a4 <_ZN8touchgfx7MVPHeapD1Ev>
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	4618      	mov	r0, r3
 8013b1a:	3708      	adds	r7, #8
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	bd80      	pop	{r7, pc}
 8013b20:	08030488 	.word	0x08030488

08013b24 <_ZN16FrontendHeapBaseD0Ev>:
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b082      	sub	sp, #8
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
 8013b2c:	6878      	ldr	r0, [r7, #4]
 8013b2e:	f7ff ffe7 	bl	8013b00 <_ZN16FrontendHeapBaseD1Ev>
 8013b32:	2114      	movs	r1, #20
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f019 f91e 	bl	802cd76 <_ZdlPvj>
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	3708      	adds	r7, #8
 8013b40:	46bd      	mov	sp, r7
 8013b42:	bd80      	pop	{r7, pc}

08013b44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17mainPagePresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b082      	sub	sp, #8
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	6078      	str	r0, [r7, #4]
 8013b4c:	4a05      	ldr	r2, [pc, #20]	@ (8013b64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17mainPagePresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	601a      	str	r2, [r3, #0]
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	4618      	mov	r0, r3
 8013b56:	f001 f8b9 	bl	8014ccc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	3708      	adds	r7, #8
 8013b60:	46bd      	mov	sp, r7
 8013b62:	bd80      	pop	{r7, pc}
 8013b64:	08030454 	.word	0x08030454

08013b68 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17mainPagePresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b082      	sub	sp, #8
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
 8013b70:	6878      	ldr	r0, [r7, #4]
 8013b72:	f7ff ffe7 	bl	8013b44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17mainPagePresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013b76:	2118      	movs	r1, #24
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	f019 f8fc 	bl	802cd76 <_ZdlPvj>
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	4618      	mov	r0, r3
 8013b82:	3708      	adds	r7, #8
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}

08013b88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12mainPageViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b082      	sub	sp, #8
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
 8013b90:	4a05      	ldr	r2, [pc, #20]	@ (8013ba8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12mainPageViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	601a      	str	r2, [r3, #0]
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f001 f897 	bl	8014ccc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	3708      	adds	r7, #8
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd80      	pop	{r7, pc}
 8013ba8:	08030420 	.word	0x08030420

08013bac <_ZN8touchgfx9PartitionINS_4meta8TypeListI12mainPageViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b082      	sub	sp, #8
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
 8013bb4:	6878      	ldr	r0, [r7, #4]
 8013bb6:	f7ff ffe7 	bl	8013b88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12mainPageViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013bba:	f44f 6197 	mov.w	r1, #1208	@ 0x4b8
 8013bbe:	6878      	ldr	r0, [r7, #4]
 8013bc0:	f019 f8d9 	bl	802cd76 <_ZdlPvj>
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	3708      	adds	r7, #8
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}
	...

08013bd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b082      	sub	sp, #8
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
 8013bd8:	4a05      	ldr	r2, [pc, #20]	@ (8013bf0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	601a      	str	r2, [r3, #0]
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	4618      	mov	r0, r3
 8013be2:	f001 f873 	bl	8014ccc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	4618      	mov	r0, r3
 8013bea:	3708      	adds	r7, #8
 8013bec:	46bd      	mov	sp, r7
 8013bee:	bd80      	pop	{r7, pc}
 8013bf0:	080303ec 	.word	0x080303ec

08013bf4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b082      	sub	sp, #8
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
 8013bfc:	6878      	ldr	r0, [r7, #4]
 8013bfe:	f7ff ffe7 	bl	8013bd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013c02:	2114      	movs	r1, #20
 8013c04:	6878      	ldr	r0, [r7, #4]
 8013c06:	f019 f8b6 	bl	802cd76 <_ZdlPvj>
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	3708      	adds	r7, #8
 8013c10:	46bd      	mov	sp, r7
 8013c12:	bd80      	pop	{r7, pc}

08013c14 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b082      	sub	sp, #8
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
 8013c1c:	4a10      	ldr	r2, [pc, #64]	@ (8013c60 <_ZN12FrontendHeapD1Ev+0x4c>)
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	601a      	str	r2, [r3, #0]
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	f203 43fc 	addw	r3, r3, #1276	@ 0x4fc
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f7fd fff7 	bl	8011c1c <_ZN19FrontendApplicationD1Ev>
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	f203 43e4 	addw	r3, r3, #1252	@ 0x4e4
 8013c34:	4618      	mov	r0, r3
 8013c36:	f7ff ffcb 	bl	8013bd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	332c      	adds	r3, #44	@ 0x2c
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f7ff ffa2 	bl	8013b88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12mainPageViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	3314      	adds	r3, #20
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f7ff ff7b 	bl	8013b44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17mainPagePresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7ff ff55 	bl	8013b00 <_ZN16FrontendHeapBaseD1Ev>
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	4618      	mov	r0, r3
 8013c5a:	3708      	adds	r7, #8
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}
 8013c60:	080303d8 	.word	0x080303d8

08013c64 <_ZN12FrontendHeapD0Ev>:
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
 8013c6c:	6878      	ldr	r0, [r7, #4]
 8013c6e:	f7ff ffd1 	bl	8013c14 <_ZN12FrontendHeapD1Ev>
 8013c72:	f44f 61cb 	mov.w	r1, #1624	@ 0x658
 8013c76:	6878      	ldr	r0, [r7, #4]
 8013c78:	f019 f87d 	bl	802cd76 <_ZdlPvj>
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	4618      	mov	r0, r3
 8013c80:	3708      	adds	r7, #8
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}
	...

08013c88 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	af00      	add	r7, sp, #0
 8013c8c:	4801      	ldr	r0, [pc, #4]	@ (8013c94 <__tcf_0+0xc>)
 8013c8e:	f7ff ffc1 	bl	8013c14 <_ZN12FrontendHeapD1Ev>
 8013c92:	bd80      	pop	{r7, pc}
 8013c94:	2005a720 	.word	0x2005a720

08013c98 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8013c9c:	4b11      	ldr	r3, [pc, #68]	@ (8013ce4 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8013c9e:	e8d3 3faf 	lda	r3, [r3]
 8013ca2:	f003 0301 	and.w	r3, r3, #1
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	bf0c      	ite	eq
 8013caa:	2301      	moveq	r3, #1
 8013cac:	2300      	movne	r3, #0
 8013cae:	b2db      	uxtb	r3, r3
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d013      	beq.n	8013cdc <_ZN12FrontendHeap11getInstanceEv+0x44>
 8013cb4:	480b      	ldr	r0, [pc, #44]	@ (8013ce4 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8013cb6:	f019 f860 	bl	802cd7a <__cxa_guard_acquire>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	bf14      	ite	ne
 8013cc0:	2301      	movne	r3, #1
 8013cc2:	2300      	moveq	r3, #0
 8013cc4:	b2db      	uxtb	r3, r3
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d008      	beq.n	8013cdc <_ZN12FrontendHeap11getInstanceEv+0x44>
 8013cca:	4807      	ldr	r0, [pc, #28]	@ (8013ce8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8013ccc:	f000 f846 	bl	8013d5c <_ZN12FrontendHeapC1Ev>
 8013cd0:	4806      	ldr	r0, [pc, #24]	@ (8013cec <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8013cd2:	f019 ff63 	bl	802db9c <atexit>
 8013cd6:	4803      	ldr	r0, [pc, #12]	@ (8013ce4 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8013cd8:	f019 f85b 	bl	802cd92 <__cxa_guard_release>
        return instance;
 8013cdc:	4b02      	ldr	r3, [pc, #8]	@ (8013ce8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8013cde:	4618      	mov	r0, r3
 8013ce0:	bd80      	pop	{r7, pc}
 8013ce2:	bf00      	nop
 8013ce4:	2005ad78 	.word	0x2005ad78
 8013ce8:	2005a720 	.word	0x2005a720
 8013cec:	08013c89 	.word	0x08013c89

08013cf0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17mainPagePresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f000 ffe8 	bl	8014cd0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013d00:	4a03      	ldr	r2, [pc, #12]	@ (8013d10 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17mainPagePresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	601a      	str	r2, [r3, #0]
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	4618      	mov	r0, r3
 8013d0a:	3708      	adds	r7, #8
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}
 8013d10:	08030454 	.word	0x08030454

08013d14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12mainPageViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b082      	sub	sp, #8
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f000 ffd6 	bl	8014cd0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013d24:	4a03      	ldr	r2, [pc, #12]	@ (8013d34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12mainPageViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	601a      	str	r2, [r3, #0]
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	3708      	adds	r7, #8
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd80      	pop	{r7, pc}
 8013d34:	08030420 	.word	0x08030420

08013d38 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b082      	sub	sp, #8
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	4618      	mov	r0, r3
 8013d44:	f000 ffc4 	bl	8014cd0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013d48:	4a03      	ldr	r2, [pc, #12]	@ (8013d58 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	601a      	str	r2, [r3, #0]
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	4618      	mov	r0, r3
 8013d52:	3708      	adds	r7, #8
 8013d54:	46bd      	mov	sp, r7
 8013d56:	bd80      	pop	{r7, pc}
 8013d58:	080303ec 	.word	0x080303ec

08013d5c <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8013d5c:	b590      	push	{r4, r7, lr}
 8013d5e:	b085      	sub	sp, #20
 8013d60:	af02      	add	r7, sp, #8
 8013d62:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8013d64:	6878      	ldr	r0, [r7, #4]
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	f103 0114 	add.w	r1, r3, #20
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	f203 44e4 	addw	r4, r3, #1252	@ 0x4e4
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	f203 43fc 	addw	r3, r3, #1276	@ 0x4fc
                     app(model, *this)
 8013d7e:	9300      	str	r3, [sp, #0]
 8013d80:	4623      	mov	r3, r4
 8013d82:	f7ff fea3 	bl	8013acc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8013d86:	4a18      	ldr	r2, [pc, #96]	@ (8013de8 <_ZN12FrontendHeapC1Ev+0x8c>)
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	601a      	str	r2, [r3, #0]
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	3314      	adds	r3, #20
 8013d90:	4618      	mov	r0, r3
 8013d92:	f7ff ffad 	bl	8013cf0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17mainPagePresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	332c      	adds	r3, #44	@ 0x2c
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7ff ffba 	bl	8013d14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12mainPageViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	f203 43e4 	addw	r3, r3, #1252	@ 0x4e4
 8013da6:	4618      	mov	r0, r3
 8013da8:	f7ff ffc6 	bl	8013d38 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	f503 639f 	add.w	r3, r3, #1272	@ 0x4f8
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7fe fa48 	bl	8012248 <_ZN5ModelC1Ev>
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	f203 40fc 	addw	r0, r3, #1276	@ 0x4fc
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	f503 639f 	add.w	r3, r3, #1272	@ 0x4f8
 8013dc4:	687a      	ldr	r2, [r7, #4]
 8013dc6:	4619      	mov	r1, r3
 8013dc8:	f7fd ff5e 	bl	8011c88 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8013dcc:	687a      	ldr	r2, [r7, #4]
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	f203 43fc 	addw	r3, r3, #1276	@ 0x4fc
 8013dd4:	4619      	mov	r1, r3
 8013dd6:	4610      	mov	r0, r2
 8013dd8:	f7ff fe6a 	bl	8013ab0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	4618      	mov	r0, r3
 8013de0:	370c      	adds	r7, #12
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd90      	pop	{r4, r7, pc}
 8013de6:	bf00      	nop
 8013de8:	080303d8 	.word	0x080303d8

08013dec <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b086      	sub	sp, #24
 8013df0:	af02      	add	r7, sp, #8
 8013df2:	60f8      	str	r0, [r7, #12]
 8013df4:	60b9      	str	r1, [r7, #8]
 8013df6:	607a      	str	r2, [r7, #4]
 8013df8:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8013dfa:	68f8      	ldr	r0, [r7, #12]
 8013dfc:	8bbb      	ldrh	r3, [r7, #28]
 8013dfe:	9301      	str	r3, [sp, #4]
 8013e00:	8b3b      	ldrh	r3, [r7, #24]
 8013e02:	9300      	str	r3, [sp, #0]
 8013e04:	683b      	ldr	r3, [r7, #0]
 8013e06:	687a      	ldr	r2, [r7, #4]
 8013e08:	68b9      	ldr	r1, [r7, #8]
 8013e0a:	f7ff fd6f 	bl	80138ec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8013e0e:	4a04      	ldr	r2, [pc, #16]	@ (8013e20 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	601a      	str	r2, [r3, #0]
    }
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	4618      	mov	r0, r3
 8013e18:	3710      	adds	r7, #16
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}
 8013e1e:	bf00      	nop
 8013e20:	080305f8 	.word	0x080305f8

08013e24 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b086      	sub	sp, #24
 8013e28:	af02      	add	r7, sp, #8
 8013e2a:	60f8      	str	r0, [r7, #12]
 8013e2c:	60b9      	str	r1, [r7, #8]
 8013e2e:	607a      	str	r2, [r7, #4]
 8013e30:	603b      	str	r3, [r7, #0]
 8013e32:	68f8      	ldr	r0, [r7, #12]
 8013e34:	8bbb      	ldrh	r3, [r7, #28]
 8013e36:	9301      	str	r3, [sp, #4]
 8013e38:	8b3b      	ldrh	r3, [r7, #24]
 8013e3a:	9300      	str	r3, [sp, #0]
 8013e3c:	683b      	ldr	r3, [r7, #0]
 8013e3e:	687a      	ldr	r2, [r7, #4]
 8013e40:	68b9      	ldr	r1, [r7, #8]
 8013e42:	f7ff ffd3 	bl	8013dec <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8013e46:	4a04      	ldr	r2, [pc, #16]	@ (8013e58 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	601a      	str	r2, [r3, #0]
    }
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	4618      	mov	r0, r3
 8013e50:	3710      	adds	r7, #16
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd80      	pop	{r7, pc}
 8013e56:	bf00      	nop
 8013e58:	08030278 	.word	0x08030278

08013e5c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8013e5c:	b480      	push	{r7}
 8013e5e:	b083      	sub	sp, #12
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
 8013e64:	4a04      	ldr	r2, [pc, #16]	@ (8013e78 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	601a      	str	r2, [r3, #0]
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	370c      	adds	r7, #12
 8013e70:	46bd      	mov	sp, r7
 8013e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e76:	4770      	bx	lr
 8013e78:	08030260 	.word	0x08030260

08013e7c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b082      	sub	sp, #8
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	4618      	mov	r0, r3
 8013e88:	f7ff ffe8 	bl	8013e5c <_ZN8touchgfx15TouchControllerC1Ev>
 8013e8c:	4a03      	ldr	r2, [pc, #12]	@ (8013e9c <_ZN20STM32TouchControllerC1Ev+0x20>)
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	601a      	str	r2, [r3, #0]
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	4618      	mov	r0, r3
 8013e96:	3708      	adds	r7, #8
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd80      	pop	{r7, pc}
 8013e9c:	08030248 	.word	0x08030248

08013ea0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 296);

void touchgfx_init()
{
 8013ea0:	b590      	push	{r4, r7, lr}
 8013ea2:	b085      	sub	sp, #20
 8013ea4:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8013ea6:	f7fd fcff 	bl	80118a8 <_ZN14BitmapDatabase11getInstanceEv>
 8013eaa:	4604      	mov	r4, r0
 8013eac:	f7fd fd06 	bl	80118bc <_ZN14BitmapDatabase15getInstanceSizeEv>
 8013eb0:	4603      	mov	r3, r0
 8013eb2:	4619      	mov	r1, r3
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	9300      	str	r3, [sp, #0]
 8013eb8:	2300      	movs	r3, #0
 8013eba:	2200      	movs	r2, #0
 8013ebc:	4620      	mov	r0, r4
 8013ebe:	f009 fef5 	bl	801dcac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8013ec2:	480b      	ldr	r0, [pc, #44]	@ (8013ef0 <touchgfx_init+0x50>)
 8013ec4:	f7ff fc3e 	bl	8013744 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8013ec8:	2000      	movs	r0, #0
 8013eca:	f7fd fe23 	bl	8011b14 <_ZN8touchgfx5Texts11setLanguageEt>

    display.setVectorFontRenderer(&vectorFontRenderer);
 8013ece:	4909      	ldr	r1, [pc, #36]	@ (8013ef4 <touchgfx_init+0x54>)
 8013ed0:	4809      	ldr	r0, [pc, #36]	@ (8013ef8 <touchgfx_init+0x58>)
 8013ed2:	f7ff fcc7 	bl	8013864 <_ZN8touchgfx3LCD21setVectorFontRendererEPNS_18VectorFontRendererE>

    FontManager::setFontProvider(&fontProvider);
 8013ed6:	4809      	ldr	r0, [pc, #36]	@ (8013efc <touchgfx_init+0x5c>)
 8013ed8:	f009 fe50 	bl	801db7c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8013edc:	f7ff fedc 	bl	8013c98 <_ZN12FrontendHeap11getInstanceEv>
 8013ee0:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8013ee2:	4807      	ldr	r0, [pc, #28]	@ (8013f00 <touchgfx_init+0x60>)
 8013ee4:	f7fe fd5e 	bl	80129a4 <_ZN11TouchGFXHAL10initializeEv>
}
 8013ee8:	bf00      	nop
 8013eea:	370c      	adds	r7, #12
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd90      	pop	{r4, r7, pc}
 8013ef0:	2005bbc8 	.word	0x2005bbc8
 8013ef4:	2005bbac 	.word	0x2005bbac
 8013ef8:	2005bb20 	.word	0x2005bb20
 8013efc:	20000018 	.word	0x20000018
 8013f00:	2005bbcc 	.word	0x2005bbcc

08013f04 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8013f04:	b480      	push	{r7}
 8013f06:	af00      	add	r7, sp, #0
}
 8013f08:	bf00      	nop
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f10:	4770      	bx	lr
	...

08013f14 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8013f18:	4802      	ldr	r0, [pc, #8]	@ (8013f24 <touchgfx_taskEntry+0x10>)
 8013f1a:	f001 feb0 	bl	8015c7e <_ZN8touchgfx3HAL9taskEntryEv>
}
 8013f1e:	bf00      	nop
 8013f20:	bd80      	pop	{r7, pc}
 8013f22:	bf00      	nop
 8013f24:	2005bbcc 	.word	0x2005bbcc

08013f28 <_Z41__static_initialization_and_destruction_0v>:
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b082      	sub	sp, #8
 8013f2c:	af02      	add	r7, sp, #8
static STM32TouchController tc;
 8013f2e:	480d      	ldr	r0, [pc, #52]	@ (8013f64 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8013f30:	f7ff ffa4 	bl	8013e7c <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8013f34:	480c      	ldr	r0, [pc, #48]	@ (8013f68 <_Z41__static_initialization_and_destruction_0v+0x40>)
 8013f36:	f7ff f807 	bl	8012f48 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8013f3a:	480c      	ldr	r0, [pc, #48]	@ (8013f6c <_Z41__static_initialization_and_destruction_0v+0x44>)
 8013f3c:	f00e ffb6 	bl	8022eac <_ZN8touchgfx8LCD16bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8013f40:	480b      	ldr	r0, [pc, #44]	@ (8013f70 <_Z41__static_initialization_and_destruction_0v+0x48>)
 8013f42:	f007 fef1 	bl	801bd28 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 296);
 8013f46:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8013f4a:	9301      	str	r3, [sp, #4]
 8013f4c:	23f0      	movs	r3, #240	@ 0xf0
 8013f4e:	9300      	str	r3, [sp, #0]
 8013f50:	4b04      	ldr	r3, [pc, #16]	@ (8013f64 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8013f52:	4a06      	ldr	r2, [pc, #24]	@ (8013f6c <_Z41__static_initialization_and_destruction_0v+0x44>)
 8013f54:	4904      	ldr	r1, [pc, #16]	@ (8013f68 <_Z41__static_initialization_and_destruction_0v+0x40>)
 8013f56:	4807      	ldr	r0, [pc, #28]	@ (8013f74 <_Z41__static_initialization_and_destruction_0v+0x4c>)
 8013f58:	f7ff ff64 	bl	8013e24 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 8013f5c:	bf00      	nop
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}
 8013f62:	bf00      	nop
 8013f64:	2005ad7c 	.word	0x2005ad7c
 8013f68:	2005ad80 	.word	0x2005ad80
 8013f6c:	2005bb20 	.word	0x2005bb20
 8013f70:	2005bbac 	.word	0x2005bbac
 8013f74:	2005bbcc 	.word	0x2005bbcc

08013f78 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
namespace touchgfx
{
/**
 * Implementation of the VectorFontRenderer interface
 */
class VectorFontRendererImpl : public VectorFontRenderer
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b082      	sub	sp, #8
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
 8013f80:	4a05      	ldr	r2, [pc, #20]	@ (8013f98 <_ZN8touchgfx22VectorFontRendererImplD1Ev+0x20>)
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	601a      	str	r2, [r3, #0]
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f7ff fc2b 	bl	80137e4 <_ZN8touchgfx18VectorFontRendererD1Ev>
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	4618      	mov	r0, r3
 8013f92:	3708      	adds	r7, #8
 8013f94:	46bd      	mov	sp, r7
 8013f96:	bd80      	pop	{r7, pc}
 8013f98:	08031044 	.word	0x08031044

08013f9c <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b082      	sub	sp, #8
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
 8013fa4:	6878      	ldr	r0, [r7, #4]
 8013fa6:	f7ff ffe7 	bl	8013f78 <_ZN8touchgfx22VectorFontRendererImplD1Ev>
 8013faa:	211c      	movs	r1, #28
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	f018 fee2 	bl	802cd76 <_ZdlPvj>
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	3708      	adds	r7, #8
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}

08013fbc <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b082      	sub	sp, #8
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
 8013fc4:	4a05      	ldr	r2, [pc, #20]	@ (8013fdc <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	601a      	str	r2, [r3, #0]
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	4618      	mov	r0, r3
 8013fce:	f7ff fc29 	bl	8013824 <_ZN8touchgfx3LCDD1Ev>
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	3708      	adds	r7, #8
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	bd80      	pop	{r7, pc}
 8013fdc:	080313cc 	.word	0x080313cc

08013fe0 <_ZN8touchgfx8LCD16bppD0Ev>:
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b082      	sub	sp, #8
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
 8013fe8:	6878      	ldr	r0, [r7, #4]
 8013fea:	f7ff ffe7 	bl	8013fbc <_ZN8touchgfx8LCD16bppD1Ev>
 8013fee:	218c      	movs	r1, #140	@ 0x8c
 8013ff0:	6878      	ldr	r0, [r7, #4]
 8013ff2:	f018 fec0 	bl	802cd76 <_ZdlPvj>
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	3708      	adds	r7, #8
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	bd80      	pop	{r7, pc}

08014000 <_Z41__static_initialization_and_destruction_1v>:
 8014000:	b580      	push	{r7, lr}
 8014002:	af00      	add	r7, sp, #0
static TouchGFXHAL hal(dma, display, tc, 240, 296);
 8014004:	4809      	ldr	r0, [pc, #36]	@ (801402c <_Z41__static_initialization_and_destruction_1v+0x2c>)
 8014006:	f7fe fdbb 	bl	8012b80 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801400a:	4809      	ldr	r0, [pc, #36]	@ (8014030 <_Z41__static_initialization_and_destruction_1v+0x30>)
 801400c:	f7fb fa24 	bl	800f458 <_ZN23ApplicationFontProviderD1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8014010:	4808      	ldr	r0, [pc, #32]	@ (8014034 <_Z41__static_initialization_and_destruction_1v+0x34>)
 8014012:	f7ff ffb1 	bl	8013f78 <_ZN8touchgfx22VectorFontRendererImplD1Ev>
static LCD16bpp display;
 8014016:	4808      	ldr	r0, [pc, #32]	@ (8014038 <_Z41__static_initialization_and_destruction_1v+0x38>)
 8014018:	f7ff ffd0 	bl	8013fbc <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 801401c:	4807      	ldr	r0, [pc, #28]	@ (801403c <_Z41__static_initialization_and_destruction_1v+0x3c>)
 801401e:	f7fe ffbd 	bl	8012f9c <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8014022:	4807      	ldr	r0, [pc, #28]	@ (8014040 <_Z41__static_initialization_and_destruction_1v+0x40>)
 8014024:	f7fe fa48 	bl	80124b8 <_ZN20STM32TouchControllerD1Ev>
}
 8014028:	bf00      	nop
 801402a:	bd80      	pop	{r7, pc}
 801402c:	2005bbcc 	.word	0x2005bbcc
 8014030:	20000018 	.word	0x20000018
 8014034:	2005bbac 	.word	0x2005bbac
 8014038:	2005bb20 	.word	0x2005bb20
 801403c:	2005ad80 	.word	0x2005ad80
 8014040:	2005ad7c 	.word	0x2005ad7c

08014044 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8014044:	b480      	push	{r7}
 8014046:	b083      	sub	sp, #12
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 801404c:	2301      	movs	r3, #1
    }
 801404e:	4618      	mov	r0, r3
 8014050:	370c      	adds	r7, #12
 8014052:	46bd      	mov	sp, r7
 8014054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014058:	4770      	bx	lr

0801405a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 801405a:	b480      	push	{r7}
 801405c:	b083      	sub	sp, #12
 801405e:	af00      	add	r7, sp, #0
 8014060:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8014062:	230c      	movs	r3, #12
    }
 8014064:	4618      	mov	r0, r3
 8014066:	370c      	adds	r7, #12
 8014068:	46bd      	mov	sp, r7
 801406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406e:	4770      	bx	lr

08014070 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8014070:	b480      	push	{r7}
 8014072:	b083      	sub	sp, #12
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
 8014078:	460b      	mov	r3, r1
 801407a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801407c:	887a      	ldrh	r2, [r7, #2]
 801407e:	4613      	mov	r3, r2
 8014080:	005b      	lsls	r3, r3, #1
 8014082:	4413      	add	r3, r2
 8014084:	009b      	lsls	r3, r3, #2
 8014086:	3308      	adds	r3, #8
 8014088:	687a      	ldr	r2, [r7, #4]
 801408a:	4413      	add	r3, r2
    }
 801408c:	4618      	mov	r0, r3
 801408e:	370c      	adds	r7, #12
 8014090:	46bd      	mov	sp, r7
 8014092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014096:	4770      	bx	lr

08014098 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8014098:	b480      	push	{r7}
 801409a:	b083      	sub	sp, #12
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
 80140a0:	460b      	mov	r3, r1
 80140a2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80140a4:	887a      	ldrh	r2, [r7, #2]
 80140a6:	4613      	mov	r3, r2
 80140a8:	005b      	lsls	r3, r3, #1
 80140aa:	4413      	add	r3, r2
 80140ac:	009b      	lsls	r3, r3, #2
 80140ae:	3308      	adds	r3, #8
 80140b0:	687a      	ldr	r2, [r7, #4]
 80140b2:	4413      	add	r3, r2
    }
 80140b4:	4618      	mov	r0, r3
 80140b6:	370c      	adds	r7, #12
 80140b8:	46bd      	mov	sp, r7
 80140ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140be:	4770      	bx	lr

080140c0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12mainPageViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80140c0:	b480      	push	{r7}
 80140c2:	b083      	sub	sp, #12
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80140c8:	2301      	movs	r3, #1
    }
 80140ca:	4618      	mov	r0, r3
 80140cc:	370c      	adds	r7, #12
 80140ce:	46bd      	mov	sp, r7
 80140d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d4:	4770      	bx	lr

080140d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12mainPageViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80140d6:	b480      	push	{r7}
 80140d8:	b083      	sub	sp, #12
 80140da:	af00      	add	r7, sp, #0
 80140dc:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80140de:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
    }
 80140e2:	4618      	mov	r0, r3
 80140e4:	370c      	adds	r7, #12
 80140e6:	46bd      	mov	sp, r7
 80140e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ec:	4770      	bx	lr

080140ee <_ZN8touchgfx9PartitionINS_4meta8TypeListI12mainPageViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80140ee:	b480      	push	{r7}
 80140f0:	b083      	sub	sp, #12
 80140f2:	af00      	add	r7, sp, #0
 80140f4:	6078      	str	r0, [r7, #4]
 80140f6:	460b      	mov	r3, r1
 80140f8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80140fa:	887b      	ldrh	r3, [r7, #2]
 80140fc:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8014100:	fb02 f303 	mul.w	r3, r2, r3
 8014104:	3308      	adds	r3, #8
 8014106:	687a      	ldr	r2, [r7, #4]
 8014108:	4413      	add	r3, r2
    }
 801410a:	4618      	mov	r0, r3
 801410c:	370c      	adds	r7, #12
 801410e:	46bd      	mov	sp, r7
 8014110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014114:	4770      	bx	lr

08014116 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12mainPageViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014116:	b480      	push	{r7}
 8014118:	b083      	sub	sp, #12
 801411a:	af00      	add	r7, sp, #0
 801411c:	6078      	str	r0, [r7, #4]
 801411e:	460b      	mov	r3, r1
 8014120:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014122:	887b      	ldrh	r3, [r7, #2]
 8014124:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8014128:	fb02 f303 	mul.w	r3, r2, r3
 801412c:	3308      	adds	r3, #8
 801412e:	687a      	ldr	r2, [r7, #4]
 8014130:	4413      	add	r3, r2
    }
 8014132:	4618      	mov	r0, r3
 8014134:	370c      	adds	r7, #12
 8014136:	46bd      	mov	sp, r7
 8014138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413c:	4770      	bx	lr

0801413e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI17mainPagePresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801413e:	b480      	push	{r7}
 8014140:	b083      	sub	sp, #12
 8014142:	af00      	add	r7, sp, #0
 8014144:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014146:	2301      	movs	r3, #1
    }
 8014148:	4618      	mov	r0, r3
 801414a:	370c      	adds	r7, #12
 801414c:	46bd      	mov	sp, r7
 801414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014152:	4770      	bx	lr

08014154 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17mainPagePresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014154:	b480      	push	{r7}
 8014156:	b083      	sub	sp, #12
 8014158:	af00      	add	r7, sp, #0
 801415a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801415c:	2310      	movs	r3, #16
    }
 801415e:	4618      	mov	r0, r3
 8014160:	370c      	adds	r7, #12
 8014162:	46bd      	mov	sp, r7
 8014164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014168:	4770      	bx	lr

0801416a <_ZN8touchgfx9PartitionINS_4meta8TypeListI17mainPagePresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801416a:	b480      	push	{r7}
 801416c:	b083      	sub	sp, #12
 801416e:	af00      	add	r7, sp, #0
 8014170:	6078      	str	r0, [r7, #4]
 8014172:	460b      	mov	r3, r1
 8014174:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014176:	887b      	ldrh	r3, [r7, #2]
 8014178:	011b      	lsls	r3, r3, #4
 801417a:	3308      	adds	r3, #8
 801417c:	687a      	ldr	r2, [r7, #4]
 801417e:	4413      	add	r3, r2
    }
 8014180:	4618      	mov	r0, r3
 8014182:	370c      	adds	r7, #12
 8014184:	46bd      	mov	sp, r7
 8014186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801418a:	4770      	bx	lr

0801418c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI17mainPagePresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801418c:	b480      	push	{r7}
 801418e:	b083      	sub	sp, #12
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
 8014194:	460b      	mov	r3, r1
 8014196:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014198:	887b      	ldrh	r3, [r7, #2]
 801419a:	011b      	lsls	r3, r3, #4
 801419c:	3308      	adds	r3, #8
 801419e:	687a      	ldr	r2, [r7, #4]
 80141a0:	4413      	add	r3, r2
    }
 80141a2:	4618      	mov	r0, r3
 80141a4:	370c      	adds	r7, #12
 80141a6:	46bd      	mov	sp, r7
 80141a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ac:	4770      	bx	lr

080141ae <_GLOBAL__sub_I_touchgfx_init>:
 80141ae:	b580      	push	{r7, lr}
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	f7ff feb9 	bl	8013f28 <_Z41__static_initialization_and_destruction_0v>
 80141b6:	bd80      	pop	{r7, pc}

080141b8 <_GLOBAL__sub_D_touchgfx_init>:
 80141b8:	b580      	push	{r7, lr}
 80141ba:	af00      	add	r7, sp, #0
 80141bc:	f7ff ff20 	bl	8014000 <_Z41__static_initialization_and_destruction_1v>
 80141c0:	bd80      	pop	{r7, pc}

080141c2 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 80141c2:	b480      	push	{r7}
 80141c4:	b085      	sub	sp, #20
 80141c6:	af00      	add	r7, sp, #0
 80141c8:	60f8      	str	r0, [r7, #12]
 80141ca:	4608      	mov	r0, r1
 80141cc:	4611      	mov	r1, r2
 80141ce:	461a      	mov	r2, r3
 80141d0:	4603      	mov	r3, r0
 80141d2:	817b      	strh	r3, [r7, #10]
 80141d4:	460b      	mov	r3, r1
 80141d6:	813b      	strh	r3, [r7, #8]
 80141d8:	4613      	mov	r3, r2
 80141da:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	897a      	ldrh	r2, [r7, #10]
 80141e0:	801a      	strh	r2, [r3, #0]
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	893a      	ldrh	r2, [r7, #8]
 80141e6:	805a      	strh	r2, [r3, #2]
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	88fa      	ldrh	r2, [r7, #6]
 80141ec:	809a      	strh	r2, [r3, #4]
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	8b3a      	ldrh	r2, [r7, #24]
 80141f2:	80da      	strh	r2, [r3, #6]
    {
    }
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	4618      	mov	r0, r3
 80141f8:	3714      	adds	r7, #20
 80141fa:	46bd      	mov	sp, r7
 80141fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014200:	4770      	bx	lr

08014202 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8014202:	b480      	push	{r7}
 8014204:	b083      	sub	sp, #12
 8014206:	af00      	add	r7, sp, #0
 8014208:	6078      	str	r0, [r7, #4]
        return rect.width;
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8014210:	4618      	mov	r0, r3
 8014212:	370c      	adds	r7, #12
 8014214:	46bd      	mov	sp, r7
 8014216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801421a:	4770      	bx	lr

0801421c <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 801421c:	b480      	push	{r7}
 801421e:	b083      	sub	sp, #12
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
        return rect.height;
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 801422a:	4618      	mov	r0, r3
 801422c:	370c      	adds	r7, #12
 801422e:	46bd      	mov	sp, r7
 8014230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014234:	4770      	bx	lr
	...

08014238 <_ZN8touchgfx14VectorRendererD1Ev>:
 */
class VectorRenderer
{
public:
    /** Virtual destructor. */
    virtual ~VectorRenderer()
 8014238:	b480      	push	{r7}
 801423a:	b083      	sub	sp, #12
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
    {
 8014240:	4a04      	ldr	r2, [pc, #16]	@ (8014254 <_ZN8touchgfx14VectorRendererD1Ev+0x1c>)
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	601a      	str	r2, [r3, #0]
    }
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	4618      	mov	r0, r3
 801424a:	370c      	adds	r7, #12
 801424c:	46bd      	mov	sp, r7
 801424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014252:	4770      	bx	lr
 8014254:	080306e4 	.word	0x080306e4

08014258 <_ZN8touchgfx14VectorRendererD0Ev>:
    virtual ~VectorRenderer()
 8014258:	b580      	push	{r7, lr}
 801425a:	b082      	sub	sp, #8
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
    }
 8014260:	6878      	ldr	r0, [r7, #4]
 8014262:	f7ff ffe9 	bl	8014238 <_ZN8touchgfx14VectorRendererD1Ev>
 8014266:	2104      	movs	r1, #4
 8014268:	6878      	ldr	r0, [r7, #4]
 801426a:	f018 fd84 	bl	802cd76 <_ZdlPvj>
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	4618      	mov	r0, r3
 8014272:	3708      	adds	r7, #8
 8014274:	46bd      	mov	sp, r7
 8014276:	bd80      	pop	{r7, pc}

08014278 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    LCD* getAuxiliaryLCD()
 8014278:	b480      	push	{r7}
 801427a:	b083      	sub	sp, #12
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
        return auxiliaryLCD;
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    }
 8014284:	4618      	mov	r0, r3
 8014286:	370c      	adds	r7, #12
 8014288:	46bd      	mov	sp, r7
 801428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428e:	4770      	bx	lr

08014290 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 8014290:	b580      	push	{r7, lr}
 8014292:	b082      	sub	sp, #8
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
 8014298:	6039      	str	r1, [r7, #0]
    {
 801429a:	4a08      	ldr	r2, [pc, #32]	@ (80142bc <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	601a      	str	r2, [r3, #0]
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	3304      	adds	r3, #4
 80142a4:	4618      	mov	r0, r3
 80142a6:	f7fe fd5d 	bl	8012d64 <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 80142aa:	6839      	ldr	r1, [r7, #0]
 80142ac:	6878      	ldr	r0, [r7, #4]
 80142ae:	f000 f827 	bl	8014300 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	4618      	mov	r0, r3
 80142b6:	3708      	adds	r7, #8
 80142b8:	46bd      	mov	sp, r7
 80142ba:	bd80      	pop	{r7, pc}
 80142bc:	080305e4 	.word	0x080305e4

080142c0 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 80142c0:	b480      	push	{r7}
 80142c2:	b083      	sub	sp, #12
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
    {
 80142c8:	4a04      	ldr	r2, [pc, #16]	@ (80142dc <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	601a      	str	r2, [r3, #0]
    }
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	4618      	mov	r0, r3
 80142d2:	370c      	adds	r7, #12
 80142d4:	46bd      	mov	sp, r7
 80142d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142da:	4770      	bx	lr
 80142dc:	080305e4 	.word	0x080305e4

080142e0 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b082      	sub	sp, #8
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
    }
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f7ff ffe9 	bl	80142c0 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 80142ee:	2108      	movs	r1, #8
 80142f0:	6878      	ldr	r0, [r7, #4]
 80142f2:	f018 fd40 	bl	802cd76 <_ZdlPvj>
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	4618      	mov	r0, r3
 80142fa:	3708      	adds	r7, #8
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bd80      	pop	{r7, pc}

08014300 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 8014300:	b480      	push	{r7}
 8014302:	b083      	sub	sp, #12
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
 8014308:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	683a      	ldr	r2, [r7, #0]
 801430e:	605a      	str	r2, [r3, #4]
    }
 8014310:	bf00      	nop
 8014312:	370c      	adds	r7, #12
 8014314:	46bd      	mov	sp, r7
 8014316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431a:	4770      	bx	lr

0801431c <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 801431c:	b480      	push	{r7}
 801431e:	b083      	sub	sp, #12
 8014320:	af00      	add	r7, sp, #0
 8014322:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 8014324:	4a06      	ldr	r2, [pc, #24]	@ (8014340 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	601a      	str	r2, [r3, #0]
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	2200      	movs	r2, #0
 801432e:	809a      	strh	r2, [r3, #4]
    {
    }
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	4618      	mov	r0, r3
 8014334:	370c      	adds	r7, #12
 8014336:	46bd      	mov	sp, r7
 8014338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433c:	4770      	bx	lr
 801433e:	bf00      	nop
 8014340:	080305c4 	.word	0x080305c4

08014344 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 8014344:	b480      	push	{r7}
 8014346:	b083      	sub	sp, #12
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
    {
 801434c:	4a04      	ldr	r2, [pc, #16]	@ (8014360 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	601a      	str	r2, [r3, #0]
    }
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	4618      	mov	r0, r3
 8014356:	370c      	adds	r7, #12
 8014358:	46bd      	mov	sp, r7
 801435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435e:	4770      	bx	lr
 8014360:	080305c4 	.word	0x080305c4

08014364 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 8014364:	b580      	push	{r7, lr}
 8014366:	b082      	sub	sp, #8
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
    }
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f7ff ffe9 	bl	8014344 <_ZN8touchgfx15AbstractPainterD1Ev>
 8014372:	2108      	movs	r1, #8
 8014374:	6878      	ldr	r0, [r7, #4]
 8014376:	f018 fcfe 	bl	802cd76 <_ZdlPvj>
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	4618      	mov	r0, r3
 801437e:	3708      	adds	r7, #8
 8014380:	46bd      	mov	sp, r7
 8014382:	bd80      	pop	{r7, pc}

08014384 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 8014384:	b480      	push	{r7}
 8014386:	b083      	sub	sp, #12
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 801438c:	2300      	movs	r3, #0
    }
 801438e:	4618      	mov	r0, r3
 8014390:	370c      	adds	r7, #12
 8014392:	46bd      	mov	sp, r7
 8014394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014398:	4770      	bx	lr

0801439a <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 801439a:	b480      	push	{r7}
 801439c:	b083      	sub	sp, #12
 801439e:	af00      	add	r7, sp, #0
 80143a0:	6078      	str	r0, [r7, #4]
 80143a2:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 80143a4:	683b      	ldr	r3, [r7, #0]
 80143a6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	809a      	strh	r2, [r3, #4]
        return true;
 80143ae:	2301      	movs	r3, #1
    }
 80143b0:	4618      	mov	r0, r3
 80143b2:	370c      	adds	r7, #12
 80143b4:	46bd      	mov	sp, r7
 80143b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ba:	4770      	bx	lr

080143bc <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 80143bc:	b480      	push	{r7}
 80143be:	b083      	sub	sp, #12
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
    {
        return;
 80143c4:	bf00      	nop
    }
 80143c6:	370c      	adds	r7, #12
 80143c8:	46bd      	mov	sp, r7
 80143ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ce:	4770      	bx	lr

080143d0 <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev>:
 */
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b082      	sub	sp, #8
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
        : AbstractPainter(),
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	4618      	mov	r0, r3
 80143dc:	f7ff ff9e 	bl	801431c <_ZN8touchgfx15AbstractPainterC1Ev>
 80143e0:	4a14      	ldr	r2, [pc, #80]	@ (8014434 <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev+0x64>)
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	601a      	str	r2, [r3, #0]
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	2200      	movs	r2, #0
 80143ea:	811a      	strh	r2, [r3, #8]
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	2264      	movs	r2, #100	@ 0x64
 80143f0:	815a      	strh	r2, [r3, #10]
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	2200      	movs	r2, #0
 80143f6:	60da      	str	r2, [r3, #12]
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2200      	movs	r2, #0
 80143fc:	741a      	strb	r2, [r3, #16]
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	2200      	movs	r2, #0
 8014402:	745a      	strb	r2, [r3, #17]
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	2200      	movs	r2, #0
 8014408:	749a      	strb	r2, [r3, #18]
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	f04f 0200 	mov.w	r2, #0
 8014410:	615a      	str	r2, [r3, #20]
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	f04f 0200 	mov.w	r2, #0
 8014418:	619a      	str	r2, [r3, #24]
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	f04f 0200 	mov.w	r2, #0
 8014420:	61da      	str	r2, [r3, #28]
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	f04f 0200 	mov.w	r2, #0
 8014428:	621a      	str	r2, [r3, #32]
    {
    }
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	4618      	mov	r0, r3
 801442e:	3708      	adds	r7, #8
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}
 8014434:	080305a4 	.word	0x080305a4

08014438 <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterLinearGradient()
 8014438:	b580      	push	{r7, lr}
 801443a:	b082      	sub	sp, #8
 801443c:	af00      	add	r7, sp, #0
 801443e:	6078      	str	r0, [r7, #4]
    {
 8014440:	4a05      	ldr	r2, [pc, #20]	@ (8014458 <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev+0x20>)
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	601a      	str	r2, [r3, #0]
    }
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	4618      	mov	r0, r3
 801444a:	f7ff ff7b 	bl	8014344 <_ZN8touchgfx15AbstractPainterD1Ev>
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	4618      	mov	r0, r3
 8014452:	3708      	adds	r7, #8
 8014454:	46bd      	mov	sp, r7
 8014456:	bd80      	pop	{r7, pc}
 8014458:	080305a4 	.word	0x080305a4

0801445c <_ZN8touchgfx29AbstractPainterLinearGradientD0Ev>:
    virtual ~AbstractPainterLinearGradient()
 801445c:	b580      	push	{r7, lr}
 801445e:	b082      	sub	sp, #8
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
    }
 8014464:	6878      	ldr	r0, [r7, #4]
 8014466:	f7ff ffe7 	bl	8014438 <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>
 801446a:	2124      	movs	r1, #36	@ 0x24
 801446c:	6878      	ldr	r0, [r7, #4]
 801446e:	f018 fc82 	bl	802cd76 <_ZdlPvj>
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	4618      	mov	r0, r3
 8014476:	3708      	adds	r7, #8
 8014478:	46bd      	mov	sp, r7
 801447a:	bd80      	pop	{r7, pc}

0801447c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    {
        return canvasPainter;
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 801447c:	b480      	push	{r7}
 801447e:	b083      	sub	sp, #12
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
 8014484:	460b      	mov	r3, r1
 8014486:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	78fa      	ldrb	r2, [r7, #3]
 801448c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    }
 8014490:	bf00      	nop
 8014492:	370c      	adds	r7, #12
 8014494:	46bd      	mov	sp, r7
 8014496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449a:	4770      	bx	lr

0801449c <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 801449c:	b480      	push	{r7}
 801449e:	b083      	sub	sp, #12
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
    }
 80144aa:	4618      	mov	r0, r3
 80144ac:	370c      	adds	r7, #12
 80144ae:	46bd      	mov	sp, r7
 80144b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b4:	4770      	bx	lr

080144b6 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 80144b6:	b590      	push	{r4, r7, lr}
 80144b8:	b085      	sub	sp, #20
 80144ba:	af02      	add	r7, sp, #8
 80144bc:	6078      	str	r0, [r7, #4]
 80144be:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 80144c0:	683b      	ldr	r3, [r7, #0]
 80144c2:	4618      	mov	r0, r3
 80144c4:	f7ff fe9d 	bl	8014202 <_ZNK8touchgfx8Drawable8getWidthEv>
 80144c8:	4603      	mov	r3, r0
 80144ca:	461c      	mov	r4, r3
 80144cc:	683b      	ldr	r3, [r7, #0]
 80144ce:	4618      	mov	r0, r3
 80144d0:	f7ff fea4 	bl	801421c <_ZNK8touchgfx8Drawable9getHeightEv>
 80144d4:	4603      	mov	r3, r0
 80144d6:	9300      	str	r3, [sp, #0]
 80144d8:	4623      	mov	r3, r4
 80144da:	2200      	movs	r2, #0
 80144dc:	2100      	movs	r1, #0
 80144de:	6878      	ldr	r0, [r7, #4]
 80144e0:	f7ff fe6f 	bl	80141c2 <_ZN8touchgfx4RectC1Essss>
    }
 80144e4:	6878      	ldr	r0, [r7, #4]
 80144e6:	370c      	adds	r7, #12
 80144e8:	46bd      	mov	sp, r7
 80144ea:	bd90      	pop	{r4, r7, pc}

080144ec <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
     * @see draw
     *
     * @note Function draw() might fail for some horizontal lines due to memory constraints. These
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b082      	sub	sp, #8
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
 80144f4:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 80144f6:	6878      	ldr	r0, [r7, #4]
 80144f8:	f7fc f807 	bl	801050a <_ZN8touchgfx4RectC1Ev>
    }
 80144fc:	6878      	ldr	r0, [r7, #4]
 80144fe:	3708      	adds	r7, #8
 8014500:	46bd      	mov	sp, r7
 8014502:	bd80      	pop	{r7, pc}

08014504 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 8014504:	b580      	push	{r7, lr}
 8014506:	b084      	sub	sp, #16
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	4618      	mov	r0, r3
 8014510:	f7ff ff04 	bl	801431c <_ZN8touchgfx15AbstractPainterC1Ev>
 8014514:	4a26      	ldr	r2, [pc, #152]	@ (80145b0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xac>)
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	601a      	str	r2, [r3, #0]
 801451a:	2300      	movs	r3, #0
 801451c:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 801451e:	f7fb fb63 	bl	800fbe8 <_ZN8touchgfx3HAL3lcdEv>
 8014522:	4603      	mov	r3, r0
 8014524:	681a      	ldr	r2, [r3, #0]
 8014526:	322c      	adds	r2, #44	@ 0x2c
 8014528:	6812      	ldr	r2, [r2, #0]
 801452a:	4618      	mov	r0, r3
 801452c:	4790      	blx	r2
 801452e:	4603      	mov	r3, r0
 8014530:	461a      	mov	r2, r3
 8014532:	7bfb      	ldrb	r3, [r7, #15]
 8014534:	4293      	cmp	r3, r2
 8014536:	bf0c      	ite	eq
 8014538:	2301      	moveq	r3, #1
 801453a:	2300      	movne	r3, #0
 801453c:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 801453e:	f7fb f899 	bl	800f674 <_ZN8touchgfx3HAL11getInstanceEv>
 8014542:	4603      	mov	r3, r0
 8014544:	4618      	mov	r0, r3
 8014546:	f7ff fe97 	bl	8014278 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 801454a:	4603      	mov	r3, r0
 801454c:	2b00      	cmp	r3, #0
 801454e:	bf14      	ite	ne
 8014550:	2301      	movne	r3, #1
 8014552:	2300      	moveq	r3, #0
 8014554:	b2db      	uxtb	r3, r3
 8014556:	2b00      	cmp	r3, #0
 8014558:	d01b      	beq.n	8014592 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 801455a:	f7fb f88b 	bl	800f674 <_ZN8touchgfx3HAL11getInstanceEv>
 801455e:	4603      	mov	r3, r0
 8014560:	4618      	mov	r0, r3
 8014562:	f7ff fe89 	bl	8014278 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8014566:	4603      	mov	r3, r0
 8014568:	681a      	ldr	r2, [r3, #0]
 801456a:	322c      	adds	r2, #44	@ 0x2c
 801456c:	6812      	ldr	r2, [r2, #0]
 801456e:	4618      	mov	r0, r3
 8014570:	4790      	blx	r2
 8014572:	4603      	mov	r3, r0
 8014574:	461a      	mov	r2, r3
 8014576:	7bfb      	ldrb	r3, [r7, #15]
 8014578:	4293      	cmp	r3, r2
 801457a:	bf0c      	ite	eq
 801457c:	2301      	moveq	r3, #1
 801457e:	2300      	movne	r3, #0
 8014580:	b2da      	uxtb	r2, r3
 8014582:	7bbb      	ldrb	r3, [r7, #14]
 8014584:	4313      	orrs	r3, r2
 8014586:	b2db      	uxtb	r3, r3
 8014588:	2b00      	cmp	r3, #0
 801458a:	bf14      	ite	ne
 801458c:	2301      	movne	r3, #1
 801458e:	2300      	moveq	r3, #0
 8014590:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 8014592:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 8014594:	2b00      	cmp	r3, #0
 8014596:	d105      	bne.n	80145a4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xa0>
 8014598:	4b06      	ldr	r3, [pc, #24]	@ (80145b4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb0>)
 801459a:	4a07      	ldr	r2, [pc, #28]	@ (80145b8 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb4>)
 801459c:	212c      	movs	r1, #44	@ 0x2c
 801459e:	4807      	ldr	r0, [pc, #28]	@ (80145bc <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb8>)
 80145a0:	f019 fade 	bl	802db60 <__assert_func>
    }
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	4618      	mov	r0, r3
 80145a8:	3710      	adds	r7, #16
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}
 80145ae:	bf00      	nop
 80145b0:	08030584 	.word	0x08030584
 80145b4:	0802f870 	.word	0x0802f870
 80145b8:	0802f8d0 	.word	0x0802f8d0
 80145bc:	0802f90c 	.word	0x0802f90c

080145c0 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
class AbstractPainterRGB565 : public AbstractPainter
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b082      	sub	sp, #8
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
 80145c8:	4a05      	ldr	r2, [pc, #20]	@ (80145e0 <_ZN8touchgfx21AbstractPainterRGB565D1Ev+0x20>)
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	601a      	str	r2, [r3, #0]
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	4618      	mov	r0, r3
 80145d2:	f7ff feb7 	bl	8014344 <_ZN8touchgfx15AbstractPainterD1Ev>
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	4618      	mov	r0, r3
 80145da:	3708      	adds	r7, #8
 80145dc:	46bd      	mov	sp, r7
 80145de:	bd80      	pop	{r7, pc}
 80145e0:	08030584 	.word	0x08030584

080145e4 <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b082      	sub	sp, #8
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
 80145ec:	6878      	ldr	r0, [r7, #4]
 80145ee:	f7ff ffe7 	bl	80145c0 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 80145f2:	2108      	movs	r1, #8
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f018 fbbe 	bl	802cd76 <_ZdlPvj>
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	4618      	mov	r0, r3
 80145fe:	3708      	adds	r7, #8
 8014600:	46bd      	mov	sp, r7
 8014602:	bd80      	pop	{r7, pc}

08014604 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
 8014604:	b580      	push	{r7, lr}
 8014606:	b082      	sub	sp, #8
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
 801460c:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	4618      	mov	r0, r3
 8014612:	f7ff ff77 	bl	8014504 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	3308      	adds	r3, #8
 801461a:	6839      	ldr	r1, [r7, #0]
 801461c:	4618      	mov	r0, r3
 801461e:	f7ff fe37 	bl	8014290 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 8014622:	4a05      	ldr	r2, [pc, #20]	@ (8014638 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x34>)
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	601a      	str	r2, [r3, #0]
 8014628:	4a04      	ldr	r2, [pc, #16]	@ (801463c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x38>)
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	609a      	str	r2, [r3, #8]
    {
    }
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	4618      	mov	r0, r3
 8014632:	3708      	adds	r7, #8
 8014634:	46bd      	mov	sp, r7
 8014636:	bd80      	pop	{r7, pc}
 8014638:	08030b60 	.word	0x08030b60
 801463c:	08030b84 	.word	0x08030b84

08014640 <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * The default mode is non-zero filling.
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
 8014640:	b480      	push	{r7}
 8014642:	b083      	sub	sp, #12
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
 8014648:	460b      	mov	r3, r1
 801464a:	70fb      	strb	r3, [r7, #3]
    {
        drawMode = mode;
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	78fa      	ldrb	r2, [r7, #3]
 8014650:	771a      	strb	r2, [r3, #28]
    }
 8014652:	bf00      	nop
 8014654:	370c      	adds	r7, #12
 8014656:	46bd      	mov	sp, r7
 8014658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465c:	4770      	bx	lr

0801465e <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
 801465e:	b480      	push	{r7}
 8014660:	b083      	sub	sp, #12
 8014662:	af00      	add	r7, sp, #0
 8014664:	6078      	str	r0, [r7, #4]
 8014666:	ed87 0a00 	vstr	s0, [r7]
    {
        strokeMiterLimit = miterLimit;
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	683a      	ldr	r2, [r7, #0]
 801466e:	621a      	str	r2, [r3, #32]
    }
 8014670:	bf00      	nop
 8014672:	370c      	adds	r7, #12
 8014674:	46bd      	mov	sp, r7
 8014676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467a:	4770      	bx	lr

0801467c <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
 801467c:	b480      	push	{r7}
 801467e:	b083      	sub	sp, #12
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
 8014684:	460b      	mov	r3, r1
 8014686:	70fb      	strb	r3, [r7, #3]
    {
        strokeLineJoin = lineJoin;
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	78fa      	ldrb	r2, [r7, #3]
 801468c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 8014690:	bf00      	nop
 8014692:	370c      	adds	r7, #12
 8014694:	46bd      	mov	sp, r7
 8014696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469a:	4770      	bx	lr

0801469c <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
 801469c:	b480      	push	{r7}
 801469e:	b083      	sub	sp, #12
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
 80146a4:	460b      	mov	r3, r1
 80146a6:	70fb      	strb	r3, [r7, #3]
    {
        strokeLineCap = lineCap;
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	78fa      	ldrb	r2, [r7, #3]
 80146ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
 80146b0:	bf00      	nop
 80146b2:	370c      	adds	r7, #12
 80146b4:	46bd      	mov	sp, r7
 80146b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ba:	4770      	bx	lr

080146bc <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    void drawStrokeBackwards(uint32_t cmdInxPathStart, uint32_t cmdInx, uint32_t pointInx, const uint8_t* cmds, const float* points, bool drawLineCaps, StrokeCanvas& canvas) const;
    void getPreviousDestination(float& positionX, float& positionY, uint32_t cmdInx, uint32_t pointInx, const uint8_t* cmds, const float* points) const;

    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
 80146bc:	b480      	push	{r7}
 80146be:	b083      	sub	sp, #12
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
 80146c4:	6039      	str	r1, [r7, #0]
        {
            return true;
 80146c6:	2301      	movs	r3, #1
        }
 80146c8:	4618      	mov	r0, r3
 80146ca:	370c      	adds	r7, #12
 80146cc:	46bd      	mov	sp, r7
 80146ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d2:	4770      	bx	lr

080146d4 <_ZN8touchgfx23CWRVectorRendererRGB56516getLinearPainterEv>:
 * Implementation of the CWRVectorRendererInterface
 * for the RGB565 framebuffer format.
 */
class CWRVectorRendererRGB565 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
 80146d4:	b480      	push	{r7}
 80146d6:	b083      	sub	sp, #12
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
    {
        return linearPainter;
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	3398      	adds	r3, #152	@ 0x98
    }
 80146e0:	4618      	mov	r0, r3
 80146e2:	370c      	adds	r7, #12
 80146e4:	46bd      	mov	sp, r7
 80146e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ea:	4770      	bx	lr

080146ec <_ZN8touchgfx23CWRVectorRendererRGB56520getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
 80146ec:	b480      	push	{r7}
 80146ee:	b083      	sub	sp, #12
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
    {
        return colorPainter;
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	338c      	adds	r3, #140	@ 0x8c
    }
 80146f8:	4618      	mov	r0, r3
 80146fa:	370c      	adds	r7, #12
 80146fc:	46bd      	mov	sp, r7
 80146fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014702:	4770      	bx	lr

08014704 <_ZN8touchgfx23CWRVectorRendererRGB56515getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
 8014704:	b480      	push	{r7}
 8014706:	b083      	sub	sp, #12
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
    {
        return colorPainter;
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	3384      	adds	r3, #132	@ 0x84
    }
 8014710:	4618      	mov	r0, r3
 8014712:	370c      	adds	r7, #12
 8014714:	46bd      	mov	sp, r7
 8014716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801471a:	4770      	bx	lr

0801471c <_ZN8touchgfx14VectorRendererC1Ev>:
class VectorRenderer
 801471c:	b480      	push	{r7}
 801471e:	b083      	sub	sp, #12
 8014720:	af00      	add	r7, sp, #0
 8014722:	6078      	str	r0, [r7, #4]
 8014724:	4a04      	ldr	r2, [pc, #16]	@ (8014738 <_ZN8touchgfx14VectorRendererC1Ev+0x1c>)
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	601a      	str	r2, [r3, #0]
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	4618      	mov	r0, r3
 801472e:	370c      	adds	r7, #12
 8014730:	46bd      	mov	sp, r7
 8014732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014736:	4770      	bx	lr
 8014738:	080306e4 	.word	0x080306e4

0801473c <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 801473c:	b580      	push	{r7, lr}
 801473e:	b082      	sub	sp, #8
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
 8014744:	4a05      	ldr	r2, [pc, #20]	@ (801475c <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	601a      	str	r2, [r3, #0]
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	4618      	mov	r0, r3
 801474e:	f7fc f93f 	bl	80109d0 <_ZN8touchgfx6WidgetD1Ev>
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	4618      	mov	r0, r3
 8014756:	3708      	adds	r7, #8
 8014758:	46bd      	mov	sp, r7
 801475a:	bd80      	pop	{r7, pc}
 801475c:	08030bf8 	.word	0x08030bf8

08014760 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8014760:	b580      	push	{r7, lr}
 8014762:	b082      	sub	sp, #8
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
 8014768:	6878      	ldr	r0, [r7, #4]
 801476a:	f7ff ffe7 	bl	801473c <_ZN8touchgfx12CanvasWidgetD1Ev>
 801476e:	212c      	movs	r1, #44	@ 0x2c
 8014770:	6878      	ldr	r0, [r7, #4]
 8014772:	f018 fb00 	bl	802cd76 <_ZdlPvj>
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	4618      	mov	r0, r3
 801477a:	3708      	adds	r7, #8
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}

08014780 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8014780:	b580      	push	{r7, lr}
 8014782:	b082      	sub	sp, #8
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	4618      	mov	r0, r3
 801478c:	f003 fdd2 	bl	8018334 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8014790:	4a03      	ldr	r2, [pc, #12]	@ (80147a0 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev+0x20>)
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	601a      	str	r2, [r3, #0]
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	4618      	mov	r0, r3
 801479a:	3708      	adds	r7, #8
 801479c:	46bd      	mov	sp, r7
 801479e:	bd80      	pop	{r7, pc}
 80147a0:	0803050c 	.word	0x0803050c

080147a4 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b082      	sub	sp, #8
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	6078      	str	r0, [r7, #4]
 80147ac:	4a05      	ldr	r2, [pc, #20]	@ (80147c4 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev+0x20>)
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	601a      	str	r2, [r3, #0]
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7ff ffc1 	bl	801473c <_ZN8touchgfx12CanvasWidgetD1Ev>
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	4618      	mov	r0, r3
 80147be:	3708      	adds	r7, #8
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd80      	pop	{r7, pc}
 80147c4:	0803050c 	.word	0x0803050c

080147c8 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b082      	sub	sp, #8
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
 80147d0:	6878      	ldr	r0, [r7, #4]
 80147d2:	f7ff ffe7 	bl	80147a4 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>
 80147d6:	212c      	movs	r1, #44	@ 0x2c
 80147d8:	6878      	ldr	r0, [r7, #4]
 80147da:	f018 facc 	bl	802cd76 <_ZdlPvj>
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	4618      	mov	r0, r3
 80147e2:	3708      	adds	r7, #8
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}

080147e8 <_ZN8touchgfx17CWRVectorRendererC1Ev>:
class CWRVectorRenderer : public VectorRenderer
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b082      	sub	sp, #8
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	4618      	mov	r0, r3
 80147f4:	f7ff ff92 	bl	801471c <_ZN8touchgfx14VectorRendererC1Ev>
 80147f8:	4a10      	ldr	r2, [pc, #64]	@ (801483c <_ZN8touchgfx17CWRVectorRendererC1Ev+0x54>)
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	601a      	str	r2, [r3, #0]
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	3304      	adds	r3, #4
 8014802:	4618      	mov	r0, r3
 8014804:	f7fb fe81 	bl	801050a <_ZN8touchgfx4RectC1Ev>
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	330c      	adds	r3, #12
 801480c:	4618      	mov	r0, r3
 801480e:	f7fb fe7c 	bl	801050a <_ZN8touchgfx4RectC1Ev>
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	3326      	adds	r3, #38	@ 0x26
 8014816:	4618      	mov	r0, r3
 8014818:	f7fb fe77 	bl	801050a <_ZN8touchgfx4RectC1Ev>
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	3334      	adds	r3, #52	@ 0x34
 8014820:	4618      	mov	r0, r3
 8014822:	f007 fd66 	bl	801c2f2 <_ZN8touchgfx9Matrix3x3C1Ev>
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	3358      	adds	r3, #88	@ 0x58
 801482a:	4618      	mov	r0, r3
 801482c:	f7ff ffa8 	bl	8014780 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev>
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	4618      	mov	r0, r3
 8014834:	3708      	adds	r7, #8
 8014836:	46bd      	mov	sp, r7
 8014838:	bd80      	pop	{r7, pc}
 801483a:	bf00      	nop
 801483c:	08030bac 	.word	0x08030bac

08014840 <_ZN8touchgfx17CWRVectorRendererD1Ev>:
 8014840:	b580      	push	{r7, lr}
 8014842:	b082      	sub	sp, #8
 8014844:	af00      	add	r7, sp, #0
 8014846:	6078      	str	r0, [r7, #4]
 8014848:	4a08      	ldr	r2, [pc, #32]	@ (801486c <_ZN8touchgfx17CWRVectorRendererD1Ev+0x2c>)
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	601a      	str	r2, [r3, #0]
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	3358      	adds	r3, #88	@ 0x58
 8014852:	4618      	mov	r0, r3
 8014854:	f7ff ffa6 	bl	80147a4 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	4618      	mov	r0, r3
 801485c:	f7ff fcec 	bl	8014238 <_ZN8touchgfx14VectorRendererD1Ev>
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	4618      	mov	r0, r3
 8014864:	3708      	adds	r7, #8
 8014866:	46bd      	mov	sp, r7
 8014868:	bd80      	pop	{r7, pc}
 801486a:	bf00      	nop
 801486c:	08030bac 	.word	0x08030bac

08014870 <_ZN8touchgfx17CWRVectorRendererD0Ev>:
 8014870:	b580      	push	{r7, lr}
 8014872:	b082      	sub	sp, #8
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f7ff ffe1 	bl	8014840 <_ZN8touchgfx17CWRVectorRendererD1Ev>
 801487e:	2184      	movs	r1, #132	@ 0x84
 8014880:	6878      	ldr	r0, [r7, #4]
 8014882:	f018 fa78 	bl	802cd76 <_ZdlPvj>
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	4618      	mov	r0, r3
 801488a:	3708      	adds	r7, #8
 801488c:	46bd      	mov	sp, r7
 801488e:	bd80      	pop	{r7, pc}

08014890 <_ZN8touchgfx13PainterRGB565D1Ev>:
class PainterRGB565 : public AbstractPainterRGB565, public AbstractPainterColor
 8014890:	b580      	push	{r7, lr}
 8014892:	b082      	sub	sp, #8
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
 8014898:	4a09      	ldr	r2, [pc, #36]	@ (80148c0 <_ZN8touchgfx13PainterRGB565D1Ev+0x30>)
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	601a      	str	r2, [r3, #0]
 801489e:	4a09      	ldr	r2, [pc, #36]	@ (80148c4 <_ZN8touchgfx13PainterRGB565D1Ev+0x34>)
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	609a      	str	r2, [r3, #8]
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	3308      	adds	r3, #8
 80148a8:	4618      	mov	r0, r3
 80148aa:	f7ff fd09 	bl	80142c0 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	4618      	mov	r0, r3
 80148b2:	f7ff fe85 	bl	80145c0 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	4618      	mov	r0, r3
 80148ba:	3708      	adds	r7, #8
 80148bc:	46bd      	mov	sp, r7
 80148be:	bd80      	pop	{r7, pc}
 80148c0:	08030b60 	.word	0x08030b60
 80148c4:	08030b84 	.word	0x08030b84

080148c8 <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 80148c8:	f1a0 0008 	sub.w	r0, r0, #8
 80148cc:	e7e0      	b.n	8014890 <_ZN8touchgfx13PainterRGB565D1Ev>
 80148ce:	bf00      	nop

080148d0 <_ZN8touchgfx13PainterRGB565D0Ev>:
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b082      	sub	sp, #8
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
 80148d8:	6878      	ldr	r0, [r7, #4]
 80148da:	f7ff ffd9 	bl	8014890 <_ZN8touchgfx13PainterRGB565D1Ev>
 80148de:	2114      	movs	r1, #20
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f018 fa48 	bl	802cd76 <_ZdlPvj>
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	4618      	mov	r0, r3
 80148ea:	3708      	adds	r7, #8
 80148ec:	46bd      	mov	sp, r7
 80148ee:	bd80      	pop	{r7, pc}

080148f0 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 80148f0:	f1a0 0008 	sub.w	r0, r0, #8
 80148f4:	e7ec      	b.n	80148d0 <_ZN8touchgfx13PainterRGB565D0Ev>
	...

080148f8 <_ZN8touchgfx27PainterRGB565LinearGradientC1Ev>:
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB565LinearGradient : public AbstractPainterLinearGradient
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b082      	sub	sp, #8
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	4618      	mov	r0, r3
 8014904:	f7ff fd64 	bl	80143d0 <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev>
 8014908:	4a03      	ldr	r2, [pc, #12]	@ (8014918 <_ZN8touchgfx27PainterRGB565LinearGradientC1Ev+0x20>)
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	601a      	str	r2, [r3, #0]
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	4618      	mov	r0, r3
 8014912:	3708      	adds	r7, #8
 8014914:	46bd      	mov	sp, r7
 8014916:	bd80      	pop	{r7, pc}
 8014918:	08030b40 	.word	0x08030b40

0801491c <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev>:
 801491c:	b580      	push	{r7, lr}
 801491e:	b082      	sub	sp, #8
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
 8014924:	4a05      	ldr	r2, [pc, #20]	@ (801493c <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev+0x20>)
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	601a      	str	r2, [r3, #0]
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	4618      	mov	r0, r3
 801492e:	f7ff fd83 	bl	8014438 <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	4618      	mov	r0, r3
 8014936:	3708      	adds	r7, #8
 8014938:	46bd      	mov	sp, r7
 801493a:	bd80      	pop	{r7, pc}
 801493c:	08030b40 	.word	0x08030b40

08014940 <_ZN8touchgfx27PainterRGB565LinearGradientD0Ev>:
 8014940:	b580      	push	{r7, lr}
 8014942:	b082      	sub	sp, #8
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
 8014948:	6878      	ldr	r0, [r7, #4]
 801494a:	f7ff ffe7 	bl	801491c <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev>
 801494e:	2124      	movs	r1, #36	@ 0x24
 8014950:	6878      	ldr	r0, [r7, #4]
 8014952:	f018 fa10 	bl	802cd76 <_ZdlPvj>
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	4618      	mov	r0, r3
 801495a:	3708      	adds	r7, #8
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}

08014960 <_ZN8touchgfx23CWRVectorRendererRGB565C1Ev>:
class CWRVectorRendererRGB565 : public CWRVectorRenderer
 8014960:	b590      	push	{r4, r7, lr}
 8014962:	b085      	sub	sp, #20
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	4618      	mov	r0, r3
 801496c:	f7ff ff3c 	bl	80147e8 <_ZN8touchgfx17CWRVectorRendererC1Ev>
 8014970:	4a0c      	ldr	r2, [pc, #48]	@ (80149a4 <_ZN8touchgfx23CWRVectorRendererRGB565C1Ev+0x44>)
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	601a      	str	r2, [r3, #0]
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	f103 0484 	add.w	r4, r3, #132	@ 0x84
 801497c:	f107 030c 	add.w	r3, r7, #12
 8014980:	2100      	movs	r1, #0
 8014982:	4618      	mov	r0, r3
 8014984:	f7fb fdb2 	bl	80104ec <_ZN8touchgfx9colortypeC1Em>
 8014988:	68f9      	ldr	r1, [r7, #12]
 801498a:	4620      	mov	r0, r4
 801498c:	f7ff fe3a 	bl	8014604 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	3398      	adds	r3, #152	@ 0x98
 8014994:	4618      	mov	r0, r3
 8014996:	f7ff ffaf 	bl	80148f8 <_ZN8touchgfx27PainterRGB565LinearGradientC1Ev>
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	4618      	mov	r0, r3
 801499e:	3714      	adds	r7, #20
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd90      	pop	{r4, r7, pc}
 80149a4:	080304c0 	.word	0x080304c0

080149a8 <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev>:
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b082      	sub	sp, #8
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
 80149b0:	4a0a      	ldr	r2, [pc, #40]	@ (80149dc <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev+0x34>)
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	601a      	str	r2, [r3, #0]
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	3398      	adds	r3, #152	@ 0x98
 80149ba:	4618      	mov	r0, r3
 80149bc:	f7ff ffae 	bl	801491c <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev>
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	3384      	adds	r3, #132	@ 0x84
 80149c4:	4618      	mov	r0, r3
 80149c6:	f7ff ff63 	bl	8014890 <_ZN8touchgfx13PainterRGB565D1Ev>
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	4618      	mov	r0, r3
 80149ce:	f7ff ff37 	bl	8014840 <_ZN8touchgfx17CWRVectorRendererD1Ev>
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	4618      	mov	r0, r3
 80149d6:	3708      	adds	r7, #8
 80149d8:	46bd      	mov	sp, r7
 80149da:	bd80      	pop	{r7, pc}
 80149dc:	080304c0 	.word	0x080304c0

080149e0 <_ZN8touchgfx23CWRVectorRendererRGB565D0Ev>:
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b082      	sub	sp, #8
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
 80149e8:	6878      	ldr	r0, [r7, #4]
 80149ea:	f7ff ffdd 	bl	80149a8 <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev>
 80149ee:	21bc      	movs	r1, #188	@ 0xbc
 80149f0:	6878      	ldr	r0, [r7, #4]
 80149f2:	f018 f9c0 	bl	802cd76 <_ZdlPvj>
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	4618      	mov	r0, r3
 80149fa:	3708      	adds	r7, #8
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd80      	pop	{r7, pc}

08014a00 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB565 renderer;
 8014a00:	b580      	push	{r7, lr}
 8014a02:	af00      	add	r7, sp, #0
 8014a04:	4801      	ldr	r0, [pc, #4]	@ (8014a0c <__tcf_1+0xc>)
 8014a06:	f7ff ffcf 	bl	80149a8 <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev>
 8014a0a:	bd80      	pop	{r7, pc}
 8014a0c:	2005bc50 	.word	0x2005bc50

08014a10 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	af00      	add	r7, sp, #0
    static CWRVectorRendererRGB565 renderer;
 8014a14:	4b11      	ldr	r3, [pc, #68]	@ (8014a5c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 8014a16:	e8d3 3faf 	lda	r3, [r3]
 8014a1a:	f003 0301 	and.w	r3, r3, #1
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	bf0c      	ite	eq
 8014a22:	2301      	moveq	r3, #1
 8014a24:	2300      	movne	r3, #0
 8014a26:	b2db      	uxtb	r3, r3
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d013      	beq.n	8014a54 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x44>
 8014a2c:	480b      	ldr	r0, [pc, #44]	@ (8014a5c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 8014a2e:	f018 f9a4 	bl	802cd7a <__cxa_guard_acquire>
 8014a32:	4603      	mov	r3, r0
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	bf14      	ite	ne
 8014a38:	2301      	movne	r3, #1
 8014a3a:	2300      	moveq	r3, #0
 8014a3c:	b2db      	uxtb	r3, r3
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d008      	beq.n	8014a54 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x44>
 8014a42:	4807      	ldr	r0, [pc, #28]	@ (8014a60 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x50>)
 8014a44:	f7ff ff8c 	bl	8014960 <_ZN8touchgfx23CWRVectorRendererRGB565C1Ev>
 8014a48:	4806      	ldr	r0, [pc, #24]	@ (8014a64 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x54>)
 8014a4a:	f019 f8a7 	bl	802db9c <atexit>
 8014a4e:	4803      	ldr	r0, [pc, #12]	@ (8014a5c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 8014a50:	f018 f99f 	bl	802cd92 <__cxa_guard_release>

    return &renderer;
 8014a54:	4b02      	ldr	r3, [pc, #8]	@ (8014a60 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x50>)
}
 8014a56:	4618      	mov	r0, r3
 8014a58:	bd80      	pop	{r7, pc}
 8014a5a:	bf00      	nop
 8014a5c:	2005bd0c 	.word	0x2005bd0c
 8014a60:	2005bc50 	.word	0x2005bc50
 8014a64:	08014a01 	.word	0x08014a01

08014a68 <__NVIC_EnableIRQ>:
{
 8014a68:	b480      	push	{r7}
 8014a6a:	b083      	sub	sp, #12
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	4603      	mov	r3, r0
 8014a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	db0b      	blt.n	8014a92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014a7a:	79fb      	ldrb	r3, [r7, #7]
 8014a7c:	f003 021f 	and.w	r2, r3, #31
 8014a80:	4907      	ldr	r1, [pc, #28]	@ (8014aa0 <__NVIC_EnableIRQ+0x38>)
 8014a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014a86:	095b      	lsrs	r3, r3, #5
 8014a88:	2001      	movs	r0, #1
 8014a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8014a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8014a92:	bf00      	nop
 8014a94:	370c      	adds	r7, #12
 8014a96:	46bd      	mov	sp, r7
 8014a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9c:	4770      	bx	lr
 8014a9e:	bf00      	nop
 8014aa0:	e000e100 	.word	0xe000e100

08014aa4 <__NVIC_DisableIRQ>:
{
 8014aa4:	b480      	push	{r7}
 8014aa6:	b083      	sub	sp, #12
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	4603      	mov	r3, r0
 8014aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	db12      	blt.n	8014adc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014ab6:	79fb      	ldrb	r3, [r7, #7]
 8014ab8:	f003 021f 	and.w	r2, r3, #31
 8014abc:	490a      	ldr	r1, [pc, #40]	@ (8014ae8 <__NVIC_DisableIRQ+0x44>)
 8014abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ac2:	095b      	lsrs	r3, r3, #5
 8014ac4:	2001      	movs	r0, #1
 8014ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8014aca:	3320      	adds	r3, #32
 8014acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014ad0:	f3bf 8f4f 	dsb	sy
}
 8014ad4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8014ad6:	f3bf 8f6f 	isb	sy
}
 8014ada:	bf00      	nop
}
 8014adc:	bf00      	nop
 8014ade:	370c      	adds	r7, #12
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae6:	4770      	bx	lr
 8014ae8:	e000e100 	.word	0xe000e100

08014aec <__NVIC_SetPriority>:
{
 8014aec:	b480      	push	{r7}
 8014aee:	b083      	sub	sp, #12
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	4603      	mov	r3, r0
 8014af4:	6039      	str	r1, [r7, #0]
 8014af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	db0a      	blt.n	8014b16 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014b00:	683b      	ldr	r3, [r7, #0]
 8014b02:	b2da      	uxtb	r2, r3
 8014b04:	490c      	ldr	r1, [pc, #48]	@ (8014b38 <__NVIC_SetPriority+0x4c>)
 8014b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014b0a:	0112      	lsls	r2, r2, #4
 8014b0c:	b2d2      	uxtb	r2, r2
 8014b0e:	440b      	add	r3, r1
 8014b10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8014b14:	e00a      	b.n	8014b2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014b16:	683b      	ldr	r3, [r7, #0]
 8014b18:	b2da      	uxtb	r2, r3
 8014b1a:	4908      	ldr	r1, [pc, #32]	@ (8014b3c <__NVIC_SetPriority+0x50>)
 8014b1c:	79fb      	ldrb	r3, [r7, #7]
 8014b1e:	f003 030f 	and.w	r3, r3, #15
 8014b22:	3b04      	subs	r3, #4
 8014b24:	0112      	lsls	r2, r2, #4
 8014b26:	b2d2      	uxtb	r2, r2
 8014b28:	440b      	add	r3, r1
 8014b2a:	761a      	strb	r2, [r3, #24]
}
 8014b2c:	bf00      	nop
 8014b2e:	370c      	adds	r7, #12
 8014b30:	46bd      	mov	sp, r7
 8014b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b36:	4770      	bx	lr
 8014b38:	e000e100 	.word	0xe000e100
 8014b3c:	e000ed00 	.word	0xe000ed00

08014b40 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
uint32_t frameBuf[(240 * 296 * 2 + 3) / 4 * 2] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}

void TouchGFXGeneratedHAL::initialize()
{
 8014b40:	b5b0      	push	{r4, r5, r7, lr}
 8014b42:	b082      	sub	sp, #8
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	f001 f883 	bl	8015c56 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8014b50:	687d      	ldr	r5, [r7, #4]
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	3368      	adds	r3, #104	@ 0x68
 8014b58:	681c      	ldr	r4, [r3, #0]
 8014b5a:	f005 fe3b 	bl	801a7d4 <_ZN8touchgfx11Application11getInstanceEv>
 8014b5e:	4603      	mov	r3, r0
 8014b60:	4619      	mov	r1, r3
 8014b62:	4628      	mov	r0, r5
 8014b64:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8014b66:	6878      	ldr	r0, [r7, #4]
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	338c      	adds	r3, #140	@ 0x8c
 8014b6e:	681c      	ldr	r4, [r3, #0]
 8014b70:	4a03      	ldr	r2, [pc, #12]	@ (8014b80 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8014b72:	2300      	movs	r3, #0
 8014b74:	4903      	ldr	r1, [pc, #12]	@ (8014b84 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8014b76:	47a0      	blx	r4
}
 8014b78:	bf00      	nop
 8014b7a:	3708      	adds	r7, #8
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	bdb0      	pop	{r4, r5, r7, pc}
 8014b80:	20022bfc 	.word	0x20022bfc
 8014b84:	200000fc 	.word	0x200000fc

08014b88 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b082      	sub	sp, #8
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8014b90:	2109      	movs	r1, #9
 8014b92:	2076      	movs	r0, #118	@ 0x76
 8014b94:	f7ff ffaa 	bl	8014aec <__NVIC_SetPriority>
}
 8014b98:	bf00      	nop
 8014b9a:	3708      	adds	r7, #8
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd80      	pop	{r7, pc}

08014ba0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b082      	sub	sp, #8
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8014ba8:	2076      	movs	r0, #118	@ 0x76
 8014baa:	f7ff ff5d 	bl	8014a68 <__NVIC_EnableIRQ>
}
 8014bae:	bf00      	nop
 8014bb0:	3708      	adds	r7, #8
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	bd80      	pop	{r7, pc}

08014bb6 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8014bb6:	b580      	push	{r7, lr}
 8014bb8:	b082      	sub	sp, #8
 8014bba:	af00      	add	r7, sp, #0
 8014bbc:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8014bbe:	2076      	movs	r0, #118	@ 0x76
 8014bc0:	f7ff ff70 	bl	8014aa4 <__NVIC_DisableIRQ>
}
 8014bc4:	bf00      	nop
 8014bc6:	3708      	adds	r7, #8
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd80      	pop	{r7, pc}

08014bcc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8014bcc:	b480      	push	{r7}
 8014bce:	b083      	sub	sp, #12
 8014bd0:	af00      	add	r7, sp, #0
 8014bd2:	6078      	str	r0, [r7, #4]
}
 8014bd4:	bf00      	nop
 8014bd6:	370c      	adds	r7, #12
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bde:	4770      	bx	lr

08014be0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b082      	sub	sp, #8
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	4618      	mov	r0, r3
 8014bec:	f001 f81a 	bl	8015c24 <_ZN8touchgfx3HAL10beginFrameEv>
 8014bf0:	4603      	mov	r3, r0
}
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	3708      	adds	r7, #8
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}

08014bfa <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8014bfa:	b580      	push	{r7, lr}
 8014bfc:	b082      	sub	sp, #8
 8014bfe:	af00      	add	r7, sp, #0
 8014c00:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	4618      	mov	r0, r3
 8014c06:	f001 f819 	bl	8015c3c <_ZN8touchgfx3HAL8endFrameEv>
}
 8014c0a:	bf00      	nop
 8014c0c:	3708      	adds	r7, #8
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	bd80      	pop	{r7, pc}
	...

08014c14 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8014c14:	b480      	push	{r7}
 8014c16:	b083      	sub	sp, #12
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)frameBuf;
 8014c1c:	4b03      	ldr	r3, [pc, #12]	@ (8014c2c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
}
 8014c1e:	4618      	mov	r0, r3
 8014c20:	370c      	adds	r7, #12
 8014c22:	46bd      	mov	sp, r7
 8014c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c28:	4770      	bx	lr
 8014c2a:	bf00      	nop
 8014c2c:	200000fc 	.word	0x200000fc

08014c30 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8014c30:	b480      	push	{r7}
 8014c32:	b083      	sub	sp, #12
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
 8014c38:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 8014c3a:	bf00      	nop
 8014c3c:	370c      	adds	r7, #12
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c44:	4770      	bx	lr

08014c46 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8014c46:	b580      	push	{r7, lr}
 8014c48:	b082      	sub	sp, #8
 8014c4a:	af00      	add	r7, sp, #0
 8014c4c:	6078      	str	r0, [r7, #4]
 8014c4e:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	6839      	ldr	r1, [r7, #0]
 8014c54:	4618      	mov	r0, r3
 8014c56:	f000 ffae 	bl	8015bb6 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8014c5a:	bf00      	nop
 8014c5c:	3708      	adds	r7, #8
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}

08014c62 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8014c62:	b580      	push	{r7, lr}
 8014c64:	b084      	sub	sp, #16
 8014c66:	af00      	add	r7, sp, #0
 8014c68:	60f8      	str	r0, [r7, #12]
 8014c6a:	60b9      	str	r1, [r7, #8]
 8014c6c:	607a      	str	r2, [r7, #4]
 8014c6e:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8014c70:	68f8      	ldr	r0, [r7, #12]
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	687a      	ldr	r2, [r7, #4]
 8014c76:	68b9      	ldr	r1, [r7, #8]
 8014c78:	f001 f921 	bl	8015ebe <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8014c7c:	4603      	mov	r3, r0
}
 8014c7e:	4618      	mov	r0, r3
 8014c80:	3710      	adds	r7, #16
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bd80      	pop	{r7, pc}

08014c86 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8014c86:	8880      	ldrh	r0, [r0, #4]
 8014c88:	4770      	bx	lr

08014c8a <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8014c8a:	b570      	push	{r4, r5, r6, lr}
 8014c8c:	6803      	ldr	r3, [r0, #0]
 8014c8e:	4605      	mov	r5, r0
 8014c90:	460c      	mov	r4, r1
 8014c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c94:	2100      	movs	r1, #0
 8014c96:	4798      	blx	r3
 8014c98:	682b      	ldr	r3, [r5, #0]
 8014c9a:	4606      	mov	r6, r0
 8014c9c:	6a1b      	ldr	r3, [r3, #32]
 8014c9e:	4628      	mov	r0, r5
 8014ca0:	4798      	blx	r3
 8014ca2:	1ba4      	subs	r4, r4, r6
 8014ca4:	b2a4      	uxth	r4, r4
 8014ca6:	fbb4 f0f0 	udiv	r0, r4, r0
 8014caa:	bd70      	pop	{r4, r5, r6, pc}

08014cac <_ZN8touchgfx17AbstractPartition5clearEv>:
 8014cac:	2300      	movs	r3, #0
 8014cae:	8083      	strh	r3, [r0, #4]
 8014cb0:	4770      	bx	lr

08014cb2 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8014cb2:	b510      	push	{r4, lr}
 8014cb4:	4604      	mov	r4, r0
 8014cb6:	6803      	ldr	r3, [r0, #0]
 8014cb8:	8881      	ldrh	r1, [r0, #4]
 8014cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cbc:	4798      	blx	r3
 8014cbe:	88a3      	ldrh	r3, [r4, #4]
 8014cc0:	3301      	adds	r3, #1
 8014cc2:	80a3      	strh	r3, [r4, #4]
 8014cc4:	bd10      	pop	{r4, pc}

08014cc6 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8014cc6:	6803      	ldr	r3, [r0, #0]
 8014cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cca:	4718      	bx	r3

08014ccc <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8014ccc:	4770      	bx	lr
	...

08014cd0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8014cd0:	4a02      	ldr	r2, [pc, #8]	@ (8014cdc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8014cd2:	6002      	str	r2, [r0, #0]
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	8082      	strh	r2, [r0, #4]
 8014cd8:	4770      	bx	lr
 8014cda:	bf00      	nop
 8014cdc:	08030724 	.word	0x08030724

08014ce0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8014ce0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014ce2:	2000      	movs	r0, #0
 8014ce4:	b12b      	cbz	r3, 8014cf2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014ce6:	b920      	cbnz	r0, 8014cf2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014ce8:	1a5a      	subs	r2, r3, r1
 8014cea:	4250      	negs	r0, r2
 8014cec:	4150      	adcs	r0, r2
 8014cee:	699b      	ldr	r3, [r3, #24]
 8014cf0:	e7f8      	b.n	8014ce4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8014cf2:	4770      	bx	lr

08014cf4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	6148      	str	r0, [r1, #20]
 8014cf8:	618b      	str	r3, [r1, #24]
 8014cfa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014cfc:	b913      	cbnz	r3, 8014d04 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8014cfe:	6281      	str	r1, [r0, #40]	@ 0x28
 8014d00:	4770      	bx	lr
 8014d02:	4613      	mov	r3, r2
 8014d04:	699a      	ldr	r2, [r3, #24]
 8014d06:	2a00      	cmp	r2, #0
 8014d08:	d1fb      	bne.n	8014d02 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8014d0a:	6199      	str	r1, [r3, #24]
 8014d0c:	4770      	bx	lr

08014d0e <_ZN8touchgfx9Container9removeAllEv>:
 8014d0e:	2200      	movs	r2, #0
 8014d10:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014d12:	b123      	cbz	r3, 8014d1e <_ZN8touchgfx9Container9removeAllEv+0x10>
 8014d14:	6999      	ldr	r1, [r3, #24]
 8014d16:	6281      	str	r1, [r0, #40]	@ 0x28
 8014d18:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8014d1c:	e7f8      	b.n	8014d10 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8014d1e:	4770      	bx	lr

08014d20 <_ZN8touchgfx9Container6unlinkEv>:
 8014d20:	2300      	movs	r3, #0
 8014d22:	6283      	str	r3, [r0, #40]	@ 0x28
 8014d24:	4770      	bx	lr

08014d26 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8014d26:	2200      	movs	r2, #0
 8014d28:	8002      	strh	r2, [r0, #0]
 8014d2a:	8042      	strh	r2, [r0, #2]
 8014d2c:	8082      	strh	r2, [r0, #4]
 8014d2e:	80c2      	strh	r2, [r0, #6]
 8014d30:	4770      	bx	lr

08014d32 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8014d32:	b570      	push	{r4, r5, r6, lr}
 8014d34:	460d      	mov	r5, r1
 8014d36:	4616      	mov	r6, r2
 8014d38:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8014d3a:	b13c      	cbz	r4, 8014d4c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8014d3c:	6823      	ldr	r3, [r4, #0]
 8014d3e:	4620      	mov	r0, r4
 8014d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d42:	4632      	mov	r2, r6
 8014d44:	4629      	mov	r1, r5
 8014d46:	4798      	blx	r3
 8014d48:	69a4      	ldr	r4, [r4, #24]
 8014d4a:	e7f6      	b.n	8014d3a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8014d4c:	bd70      	pop	{r4, r5, r6, pc}

08014d4e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8014d4e:	b538      	push	{r3, r4, r5, lr}
 8014d50:	460d      	mov	r5, r1
 8014d52:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8014d54:	b134      	cbz	r4, 8014d64 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8014d56:	682b      	ldr	r3, [r5, #0]
 8014d58:	4621      	mov	r1, r4
 8014d5a:	689b      	ldr	r3, [r3, #8]
 8014d5c:	4628      	mov	r0, r5
 8014d5e:	4798      	blx	r3
 8014d60:	69a4      	ldr	r4, [r4, #24]
 8014d62:	e7f7      	b.n	8014d54 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8014d64:	bd38      	pop	{r3, r4, r5, pc}

08014d66 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8014d66:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014d68:	b19b      	cbz	r3, 8014d92 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014d6a:	428b      	cmp	r3, r1
 8014d6c:	d109      	bne.n	8014d82 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8014d6e:	2100      	movs	r1, #0
 8014d70:	699a      	ldr	r2, [r3, #24]
 8014d72:	6159      	str	r1, [r3, #20]
 8014d74:	6282      	str	r2, [r0, #40]	@ 0x28
 8014d76:	b902      	cbnz	r2, 8014d7a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8014d78:	4770      	bx	lr
 8014d7a:	6199      	str	r1, [r3, #24]
 8014d7c:	4770      	bx	lr
 8014d7e:	4613      	mov	r3, r2
 8014d80:	b13a      	cbz	r2, 8014d92 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014d82:	699a      	ldr	r2, [r3, #24]
 8014d84:	428a      	cmp	r2, r1
 8014d86:	d1fa      	bne.n	8014d7e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8014d88:	698a      	ldr	r2, [r1, #24]
 8014d8a:	619a      	str	r2, [r3, #24]
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8014d92:	4770      	bx	lr

08014d94 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8014d94:	b410      	push	{r4}
 8014d96:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014d98:	4604      	mov	r4, r0
 8014d9a:	b92b      	cbnz	r3, 8014da8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8014d9c:	6803      	ldr	r3, [r0, #0]
 8014d9e:	4611      	mov	r1, r2
 8014da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014da2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014da6:	4718      	bx	r3
 8014da8:	b941      	cbnz	r1, 8014dbc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8014daa:	6193      	str	r3, [r2, #24]
 8014dac:	6282      	str	r2, [r0, #40]	@ 0x28
 8014dae:	6154      	str	r4, [r2, #20]
 8014db0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014db4:	4770      	bx	lr
 8014db6:	4603      	mov	r3, r0
 8014db8:	2800      	cmp	r0, #0
 8014dba:	d0f9      	beq.n	8014db0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8014dbc:	4299      	cmp	r1, r3
 8014dbe:	6998      	ldr	r0, [r3, #24]
 8014dc0:	d1f9      	bne.n	8014db6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8014dc2:	6190      	str	r0, [r2, #24]
 8014dc4:	618a      	str	r2, [r1, #24]
 8014dc6:	e7f2      	b.n	8014dae <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08014dc8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8014dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dcc:	461f      	mov	r7, r3
 8014dce:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8014dd2:	460d      	mov	r5, r1
 8014dd4:	4616      	mov	r6, r2
 8014dd6:	b103      	cbz	r3, 8014dda <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8014dd8:	6038      	str	r0, [r7, #0]
 8014dda:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8014ddc:	b314      	cbz	r4, 8014e24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8014dde:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8014de2:	b1eb      	cbz	r3, 8014e20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014de4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014de8:	428d      	cmp	r5, r1
 8014dea:	db19      	blt.n	8014e20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014dec:	8923      	ldrh	r3, [r4, #8]
 8014dee:	b289      	uxth	r1, r1
 8014df0:	440b      	add	r3, r1
 8014df2:	b21b      	sxth	r3, r3
 8014df4:	429d      	cmp	r5, r3
 8014df6:	da13      	bge.n	8014e20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014df8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014dfc:	4296      	cmp	r6, r2
 8014dfe:	db0f      	blt.n	8014e20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014e00:	8963      	ldrh	r3, [r4, #10]
 8014e02:	b292      	uxth	r2, r2
 8014e04:	4413      	add	r3, r2
 8014e06:	b21b      	sxth	r3, r3
 8014e08:	429e      	cmp	r6, r3
 8014e0a:	da09      	bge.n	8014e20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014e0c:	6823      	ldr	r3, [r4, #0]
 8014e0e:	1ab2      	subs	r2, r6, r2
 8014e10:	1a69      	subs	r1, r5, r1
 8014e12:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8014e16:	b212      	sxth	r2, r2
 8014e18:	463b      	mov	r3, r7
 8014e1a:	b209      	sxth	r1, r1
 8014e1c:	4620      	mov	r0, r4
 8014e1e:	47c0      	blx	r8
 8014e20:	69a4      	ldr	r4, [r4, #24]
 8014e22:	e7db      	b.n	8014ddc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8014e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8014e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e2c:	4c6c      	ldr	r4, [pc, #432]	@ (8014fe0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 8014e2e:	b0a1      	sub	sp, #132	@ 0x84
 8014e30:	6824      	ldr	r4, [r4, #0]
 8014e32:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8014e34:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8014e38:	2400      	movs	r4, #0
 8014e3a:	802c      	strh	r4, [r5, #0]
 8014e3c:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8014e3e:	4606      	mov	r6, r0
 8014e40:	802c      	strh	r4, [r5, #0]
 8014e42:	601c      	str	r4, [r3, #0]
 8014e44:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8014e48:	9303      	str	r3, [sp, #12]
 8014e4a:	f7ff ffbd 	bl	8014dc8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8014e4e:	f1b9 0f03 	cmp.w	r9, #3
 8014e52:	f340 80bf 	ble.w	8014fd4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 8014e56:	4631      	mov	r1, r6
 8014e58:	a80c      	add	r0, sp, #48	@ 0x30
 8014e5a:	f006 ff53 	bl	801bd04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014e5e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8014e62:	9306      	str	r3, [sp, #24]
 8014e64:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8014e68:	9307      	str	r3, [sp, #28]
 8014e6a:	9b03      	ldr	r3, [sp, #12]
 8014e6c:	f8d3 a000 	ldr.w	sl, [r3]
 8014e70:	f1ba 0f00 	cmp.w	sl, #0
 8014e74:	f000 80b1 	beq.w	8014fda <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8014e78:	4651      	mov	r1, sl
 8014e7a:	a810      	add	r0, sp, #64	@ 0x40
 8014e7c:	f006 ff42 	bl	801bd04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014e80:	2002      	movs	r0, #2
 8014e82:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8014e86:	9b01      	ldr	r3, [sp, #4]
 8014e88:	fb91 f1f0 	sdiv	r1, r1, r0
 8014e8c:	9a06      	ldr	r2, [sp, #24]
 8014e8e:	189d      	adds	r5, r3, r2
 8014e90:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8014e94:	9a07      	ldr	r2, [sp, #28]
 8014e96:	4419      	add	r1, r3
 8014e98:	9b02      	ldr	r3, [sp, #8]
 8014e9a:	1a6d      	subs	r5, r5, r1
 8014e9c:	4413      	add	r3, r2
 8014e9e:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8014ea2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8014ea6:	fb92 f2f0 	sdiv	r2, r2, r0
 8014eaa:	440a      	add	r2, r1
 8014eac:	1a9b      	subs	r3, r3, r2
 8014eae:	435b      	muls	r3, r3
 8014eb0:	fb05 3505 	mla	r5, r5, r5, r3
 8014eb4:	4f4b      	ldr	r7, [pc, #300]	@ (8014fe4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8014eb6:	ac10      	add	r4, sp, #64	@ 0x40
 8014eb8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ebc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ec0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ec4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8014ec8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014ecc:	2303      	movs	r3, #3
 8014ece:	f1b9 0f0c 	cmp.w	r9, #12
 8014ed2:	bfda      	itte	le
 8014ed4:	f109 32ff 	addle.w	r2, r9, #4294967295
 8014ed8:	fb92 f8f3 	sdivle	r8, r2, r3
 8014edc:	4698      	movgt	r8, r3
 8014ede:	2400      	movs	r4, #0
 8014ee0:	f8cd 9000 	str.w	r9, [sp]
 8014ee4:	1c63      	adds	r3, r4, #1
 8014ee6:	9308      	str	r3, [sp, #32]
 8014ee8:	9b00      	ldr	r3, [sp, #0]
 8014eea:	f04f 0b00 	mov.w	fp, #0
 8014eee:	fb93 f3f8 	sdiv	r3, r3, r8
 8014ef2:	f004 0401 	and.w	r4, r4, #1
 8014ef6:	aa10      	add	r2, sp, #64	@ 0x40
 8014ef8:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8014efc:	b29b      	uxth	r3, r3
 8014efe:	3404      	adds	r4, #4
 8014f00:	9304      	str	r3, [sp, #16]
 8014f02:	9a04      	ldr	r2, [sp, #16]
 8014f04:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014f08:	fb13 f302 	smulbb	r3, r3, r2
 8014f0c:	9a01      	ldr	r2, [sp, #4]
 8014f0e:	b29b      	uxth	r3, r3
 8014f10:	1899      	adds	r1, r3, r2
 8014f12:	9305      	str	r3, [sp, #20]
 8014f14:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8014f18:	b209      	sxth	r1, r1
 8014f1a:	4299      	cmp	r1, r3
 8014f1c:	db4d      	blt.n	8014fba <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8014f1e:	8932      	ldrh	r2, [r6, #8]
 8014f20:	4413      	add	r3, r2
 8014f22:	b21b      	sxth	r3, r3
 8014f24:	4299      	cmp	r1, r3
 8014f26:	da48      	bge.n	8014fba <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8014f28:	9b04      	ldr	r3, [sp, #16]
 8014f2a:	6827      	ldr	r7, [r4, #0]
 8014f2c:	fb17 f703 	smulbb	r7, r7, r3
 8014f30:	9b02      	ldr	r3, [sp, #8]
 8014f32:	b2bf      	uxth	r7, r7
 8014f34:	18fa      	adds	r2, r7, r3
 8014f36:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8014f3a:	b212      	sxth	r2, r2
 8014f3c:	429a      	cmp	r2, r3
 8014f3e:	db3c      	blt.n	8014fba <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8014f40:	8970      	ldrh	r0, [r6, #10]
 8014f42:	4403      	add	r3, r0
 8014f44:	b21b      	sxth	r3, r3
 8014f46:	429a      	cmp	r2, r3
 8014f48:	da37      	bge.n	8014fba <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	4630      	mov	r0, r6
 8014f4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014f50:	ab0b      	add	r3, sp, #44	@ 0x2c
 8014f52:	f7ff ff39 	bl	8014dc8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8014f56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014f58:	b37a      	cbz	r2, 8014fba <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8014f5a:	4552      	cmp	r2, sl
 8014f5c:	d02d      	beq.n	8014fba <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8014f5e:	4611      	mov	r1, r2
 8014f60:	a80e      	add	r0, sp, #56	@ 0x38
 8014f62:	9209      	str	r2, [sp, #36]	@ 0x24
 8014f64:	f006 fece 	bl	801bd04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014f68:	f04f 0e02 	mov.w	lr, #2
 8014f6c:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8014f70:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8014f74:	fb91 f1fe 	sdiv	r1, r1, lr
 8014f78:	fb9c fcfe 	sdiv	ip, ip, lr
 8014f7c:	9a06      	ldr	r2, [sp, #24]
 8014f7e:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8014f82:	9b01      	ldr	r3, [sp, #4]
 8014f84:	4401      	add	r1, r0
 8014f86:	4413      	add	r3, r2
 8014f88:	1a58      	subs	r0, r3, r1
 8014f8a:	9a07      	ldr	r2, [sp, #28]
 8014f8c:	9b02      	ldr	r3, [sp, #8]
 8014f8e:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8014f92:	4413      	add	r3, r2
 8014f94:	448c      	add	ip, r1
 8014f96:	eba3 030c 	sub.w	r3, r3, ip
 8014f9a:	435b      	muls	r3, r3
 8014f9c:	fb00 3300 	mla	r3, r0, r0, r3
 8014fa0:	42ab      	cmp	r3, r5
 8014fa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014fa4:	d208      	bcs.n	8014fb8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 8014fa6:	461d      	mov	r5, r3
 8014fa8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014faa:	9803      	ldr	r0, [sp, #12]
 8014fac:	6001      	str	r1, [r0, #0]
 8014fae:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8014fb0:	9805      	ldr	r0, [sp, #20]
 8014fb2:	8008      	strh	r0, [r1, #0]
 8014fb4:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8014fb6:	800f      	strh	r7, [r1, #0]
 8014fb8:	4692      	mov	sl, r2
 8014fba:	f10b 0b01 	add.w	fp, fp, #1
 8014fbe:	f1bb 0f04 	cmp.w	fp, #4
 8014fc2:	f104 0408 	add.w	r4, r4, #8
 8014fc6:	d19c      	bne.n	8014f02 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 8014fc8:	9b00      	ldr	r3, [sp, #0]
 8014fca:	9c08      	ldr	r4, [sp, #32]
 8014fcc:	444b      	add	r3, r9
 8014fce:	4544      	cmp	r4, r8
 8014fd0:	9300      	str	r3, [sp, #0]
 8014fd2:	d187      	bne.n	8014ee4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 8014fd4:	b021      	add	sp, #132	@ 0x84
 8014fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fda:	f04f 35ff 	mov.w	r5, #4294967295
 8014fde:	e769      	b.n	8014eb4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8014fe0:	2005bd1c 	.word	0x2005bd1c
 8014fe4:	0802f96c 	.word	0x0802f96c

08014fe8 <_ZN8touchgfx4RectaNERKS0_>:
 8014fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014fec:	f9b1 7000 	ldrsh.w	r7, [r1]
 8014ff0:	888c      	ldrh	r4, [r1, #4]
 8014ff2:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014ff6:	443c      	add	r4, r7
 8014ff8:	b2a4      	uxth	r4, r4
 8014ffa:	fa0f f884 	sxth.w	r8, r4
 8014ffe:	45c1      	cmp	r9, r8
 8015000:	da2f      	bge.n	8015062 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015002:	8882      	ldrh	r2, [r0, #4]
 8015004:	444a      	add	r2, r9
 8015006:	b292      	uxth	r2, r2
 8015008:	fa0f fe82 	sxth.w	lr, r2
 801500c:	4577      	cmp	r7, lr
 801500e:	da28      	bge.n	8015062 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015010:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015014:	88cb      	ldrh	r3, [r1, #6]
 8015016:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801501a:	442b      	add	r3, r5
 801501c:	b21b      	sxth	r3, r3
 801501e:	429e      	cmp	r6, r3
 8015020:	da1f      	bge.n	8015062 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015022:	88c3      	ldrh	r3, [r0, #6]
 8015024:	4433      	add	r3, r6
 8015026:	b29b      	uxth	r3, r3
 8015028:	fa0f fc83 	sxth.w	ip, r3
 801502c:	4565      	cmp	r5, ip
 801502e:	da18      	bge.n	8015062 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015030:	454f      	cmp	r7, r9
 8015032:	bfb8      	it	lt
 8015034:	464f      	movlt	r7, r9
 8015036:	42b5      	cmp	r5, r6
 8015038:	bfb8      	it	lt
 801503a:	4635      	movlt	r5, r6
 801503c:	45f0      	cmp	r8, lr
 801503e:	bfd8      	it	le
 8015040:	4622      	movle	r2, r4
 8015042:	1bd2      	subs	r2, r2, r7
 8015044:	8082      	strh	r2, [r0, #4]
 8015046:	884a      	ldrh	r2, [r1, #2]
 8015048:	88c9      	ldrh	r1, [r1, #6]
 801504a:	8007      	strh	r7, [r0, #0]
 801504c:	440a      	add	r2, r1
 801504e:	b292      	uxth	r2, r2
 8015050:	b211      	sxth	r1, r2
 8015052:	458c      	cmp	ip, r1
 8015054:	bfa8      	it	ge
 8015056:	4613      	movge	r3, r2
 8015058:	1b5b      	subs	r3, r3, r5
 801505a:	80c3      	strh	r3, [r0, #6]
 801505c:	8045      	strh	r5, [r0, #2]
 801505e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015062:	2300      	movs	r3, #0
 8015064:	8003      	strh	r3, [r0, #0]
 8015066:	8043      	strh	r3, [r0, #2]
 8015068:	8083      	strh	r3, [r0, #4]
 801506a:	80c3      	strh	r3, [r0, #6]
 801506c:	e7f7      	b.n	801505e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801506e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801506e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015072:	2b00      	cmp	r3, #0
 8015074:	dd06      	ble.n	8015084 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8015076:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801507a:	2800      	cmp	r0, #0
 801507c:	bfcc      	ite	gt
 801507e:	2000      	movgt	r0, #0
 8015080:	2001      	movle	r0, #1
 8015082:	4770      	bx	lr
 8015084:	2001      	movs	r0, #1
 8015086:	4770      	bx	lr

08015088 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015088:	2300      	movs	r3, #0
 801508a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801508e:	4604      	mov	r4, r0
 8015090:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8015092:	8003      	strh	r3, [r0, #0]
 8015094:	8043      	strh	r3, [r0, #2]
 8015096:	8083      	strh	r3, [r0, #4]
 8015098:	80c3      	strh	r3, [r0, #6]
 801509a:	2d00      	cmp	r5, #0
 801509c:	d040      	beq.n	8015120 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801509e:	1d28      	adds	r0, r5, #4
 80150a0:	f7ff ffe5 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 80150a4:	b988      	cbnz	r0, 80150ca <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80150a6:	4620      	mov	r0, r4
 80150a8:	f7ff ffe1 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 80150ac:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80150b0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80150b4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80150b8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80150bc:	b138      	cbz	r0, 80150ce <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80150be:	8022      	strh	r2, [r4, #0]
 80150c0:	8063      	strh	r3, [r4, #2]
 80150c2:	f8a4 e004 	strh.w	lr, [r4, #4]
 80150c6:	f8a4 c006 	strh.w	ip, [r4, #6]
 80150ca:	69ad      	ldr	r5, [r5, #24]
 80150cc:	e7e5      	b.n	801509a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80150ce:	f9b4 0000 	ldrsh.w	r0, [r4]
 80150d2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80150d6:	4290      	cmp	r0, r2
 80150d8:	4607      	mov	r7, r0
 80150da:	bfa8      	it	ge
 80150dc:	4617      	movge	r7, r2
 80150de:	4299      	cmp	r1, r3
 80150e0:	460e      	mov	r6, r1
 80150e2:	bfa8      	it	ge
 80150e4:	461e      	movge	r6, r3
 80150e6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80150ea:	4472      	add	r2, lr
 80150ec:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80150f0:	4440      	add	r0, r8
 80150f2:	4471      	add	r1, lr
 80150f4:	4463      	add	r3, ip
 80150f6:	b200      	sxth	r0, r0
 80150f8:	b212      	sxth	r2, r2
 80150fa:	b209      	sxth	r1, r1
 80150fc:	b21b      	sxth	r3, r3
 80150fe:	4290      	cmp	r0, r2
 8015100:	bfac      	ite	ge
 8015102:	ebc7 0200 	rsbge	r2, r7, r0
 8015106:	ebc7 0202 	rsblt	r2, r7, r2
 801510a:	4299      	cmp	r1, r3
 801510c:	bfac      	ite	ge
 801510e:	ebc6 0301 	rsbge	r3, r6, r1
 8015112:	ebc6 0303 	rsblt	r3, r6, r3
 8015116:	8027      	strh	r7, [r4, #0]
 8015118:	8066      	strh	r6, [r4, #2]
 801511a:	80a2      	strh	r2, [r4, #4]
 801511c:	80e3      	strh	r3, [r4, #6]
 801511e:	e7d4      	b.n	80150ca <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015120:	4620      	mov	r0, r4
 8015122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015126 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8015126:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801512a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801512e:	b383      	cbz	r3, 8015192 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015130:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8015132:	b374      	cbz	r4, 8015192 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015134:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015138:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801513c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015140:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015144:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8015148:	b303      	cbz	r3, 801518c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801514a:	4668      	mov	r0, sp
 801514c:	1d21      	adds	r1, r4, #4
 801514e:	f8ad 5000 	strh.w	r5, [sp]
 8015152:	f8ad 6002 	strh.w	r6, [sp, #2]
 8015156:	f8ad 7004 	strh.w	r7, [sp, #4]
 801515a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801515e:	f7ff ff43 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 8015162:	4668      	mov	r0, sp
 8015164:	f7ff ff83 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015168:	b980      	cbnz	r0, 801518c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801516a:	f8bd 3000 	ldrh.w	r3, [sp]
 801516e:	88a2      	ldrh	r2, [r4, #4]
 8015170:	4669      	mov	r1, sp
 8015172:	1a9b      	subs	r3, r3, r2
 8015174:	f8ad 3000 	strh.w	r3, [sp]
 8015178:	88e2      	ldrh	r2, [r4, #6]
 801517a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801517e:	4620      	mov	r0, r4
 8015180:	1a9b      	subs	r3, r3, r2
 8015182:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015186:	6823      	ldr	r3, [r4, #0]
 8015188:	689b      	ldr	r3, [r3, #8]
 801518a:	4798      	blx	r3
 801518c:	69a4      	ldr	r4, [r4, #24]
 801518e:	2c00      	cmp	r4, #0
 8015190:	d1d8      	bne.n	8015144 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8015192:	b002      	add	sp, #8
 8015194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015198 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015198:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801519a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801519e:	460d      	mov	r5, r1
 80151a0:	4616      	mov	r6, r2
 80151a2:	b323      	cbz	r3, 80151ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80151a4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80151a6:	b314      	cbz	r4, 80151ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80151a8:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80151ac:	b1eb      	cbz	r3, 80151ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80151ae:	466b      	mov	r3, sp
 80151b0:	6828      	ldr	r0, [r5, #0]
 80151b2:	6869      	ldr	r1, [r5, #4]
 80151b4:	c303      	stmia	r3!, {r0, r1}
 80151b6:	4668      	mov	r0, sp
 80151b8:	1d21      	adds	r1, r4, #4
 80151ba:	f7ff ff15 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 80151be:	4668      	mov	r0, sp
 80151c0:	f7ff ff55 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 80151c4:	b988      	cbnz	r0, 80151ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80151c6:	f8bd 3000 	ldrh.w	r3, [sp]
 80151ca:	88a2      	ldrh	r2, [r4, #4]
 80151cc:	4669      	mov	r1, sp
 80151ce:	1a9b      	subs	r3, r3, r2
 80151d0:	f8ad 3000 	strh.w	r3, [sp]
 80151d4:	88e2      	ldrh	r2, [r4, #6]
 80151d6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80151da:	4620      	mov	r0, r4
 80151dc:	1a9b      	subs	r3, r3, r2
 80151de:	f8ad 3002 	strh.w	r3, [sp, #2]
 80151e2:	6823      	ldr	r3, [r4, #0]
 80151e4:	4632      	mov	r2, r6
 80151e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80151e8:	4798      	blx	r3
 80151ea:	69a4      	ldr	r4, [r4, #24]
 80151ec:	e7db      	b.n	80151a6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80151ee:	b002      	add	sp, #8
 80151f0:	bd70      	pop	{r4, r5, r6, pc}

080151f2 <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>:
 80151f2:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 80151f4:	4770      	bx	lr

080151f6 <_ZN8touchgfx14SwipeContainer13PageIndicatorD1Ev>:
 80151f6:	4770      	bx	lr

080151f8 <_ZN8touchgfx14SwipeContainer13PageIndicatorD0Ev>:
 80151f8:	b510      	push	{r4, lr}
 80151fa:	4604      	mov	r4, r0
 80151fc:	218c      	movs	r1, #140	@ 0x8c
 80151fe:	f017 fdba 	bl	802cd76 <_ZdlPvj>
 8015202:	4620      	mov	r0, r4
 8015204:	bd10      	pop	{r4, pc}
	...

08015208 <_ZN8touchgfx14SwipeContainerD1Ev>:
 8015208:	4b05      	ldr	r3, [pc, #20]	@ (8015220 <_ZN8touchgfx14SwipeContainerD1Ev+0x18>)
 801520a:	b510      	push	{r4, lr}
 801520c:	6003      	str	r3, [r0, #0]
 801520e:	4604      	mov	r4, r0
 8015210:	f005 fae0 	bl	801a7d4 <_ZN8touchgfx11Application11getInstanceEv>
 8015214:	4621      	mov	r1, r4
 8015216:	3004      	adds	r0, #4
 8015218:	f005 fb01 	bl	801a81e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 801521c:	4620      	mov	r0, r4
 801521e:	bd10      	pop	{r4, pc}
 8015220:	08030878 	.word	0x08030878

08015224 <_ZN8touchgfx14SwipeContainerD0Ev>:
 8015224:	b510      	push	{r4, lr}
 8015226:	4604      	mov	r4, r0
 8015228:	f7ff ffee 	bl	8015208 <_ZN8touchgfx14SwipeContainerD1Ev>
 801522c:	4620      	mov	r0, r4
 801522e:	21f8      	movs	r1, #248	@ 0xf8
 8015230:	f017 fda1 	bl	802cd76 <_ZdlPvj>
 8015234:	4620      	mov	r0, r4
 8015236:	bd10      	pop	{r4, pc}

08015238 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE>:
 8015238:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801523c:	2b07      	cmp	r3, #7
 801523e:	d118      	bne.n	8015272 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 8015240:	790b      	ldrb	r3, [r1, #4]
 8015242:	2b01      	cmp	r3, #1
 8015244:	d115      	bne.n	8015272 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 8015246:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	@ 0x30
 801524a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	@ 0x40
 801524e:	2b00      	cmp	r3, #0
 8015250:	8643      	strh	r3, [r0, #50]	@ 0x32
 8015252:	8682      	strh	r2, [r0, #52]	@ 0x34
 8015254:	f890 10f5 	ldrb.w	r1, [r0, #245]	@ 0xf5
 8015258:	da0e      	bge.n	8015278 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x40>
 801525a:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
 801525e:	3a01      	subs	r2, #1
 8015260:	4291      	cmp	r1, r2
 8015262:	d007      	beq.n	8015274 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3c>
 8015264:	8dc2      	ldrh	r2, [r0, #46]	@ 0x2e
 8015266:	4252      	negs	r2, r2
 8015268:	4293      	cmp	r3, r2
 801526a:	dc03      	bgt.n	8015274 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3c>
 801526c:	2302      	movs	r3, #2
 801526e:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8015272:	4770      	bx	lr
 8015274:	2300      	movs	r3, #0
 8015276:	e7fa      	b.n	801526e <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>
 8015278:	d0fb      	beq.n	8015272 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 801527a:	b111      	cbz	r1, 8015282 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x4a>
 801527c:	8dc2      	ldrh	r2, [r0, #46]	@ 0x2e
 801527e:	4293      	cmp	r3, r2
 8015280:	da01      	bge.n	8015286 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x4e>
 8015282:	2301      	movs	r3, #1
 8015284:	e7f3      	b.n	801526e <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>
 8015286:	2303      	movs	r3, #3
 8015288:	e7f1      	b.n	801526e <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>

0801528a <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE>:
 801528a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801528e:	2b07      	cmp	r3, #7
 8015290:	d114      	bne.n	80152bc <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 8015292:	790b      	ldrb	r3, [r1, #4]
 8015294:	b993      	cbnz	r3, 80152bc <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 8015296:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8015298:	f890 20f5 	ldrb.w	r2, [r0, #245]	@ 0xf5
 801529c:	8643      	strh	r3, [r0, #50]	@ 0x32
 801529e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80152a2:	8683      	strh	r3, [r0, #52]	@ 0x34
 80152a4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	da08      	bge.n	80152be <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x34>
 80152ac:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 80152b0:	3b01      	subs	r3, #1
 80152b2:	429a      	cmp	r2, r3
 80152b4:	da02      	bge.n	80152bc <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 80152b6:	2302      	movs	r3, #2
 80152b8:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80152bc:	4770      	bx	lr
 80152be:	d0fd      	beq.n	80152bc <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 80152c0:	2a00      	cmp	r2, #0
 80152c2:	d0fb      	beq.n	80152bc <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 80152c4:	2303      	movs	r3, #3
 80152c6:	e7f7      	b.n	80152b8 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x2e>

080152c8 <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>:
 80152c8:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80152ca:	4770      	bx	lr

080152cc <_ZN8touchgfx14SwipeContainer11adjustPagesEv>:
 80152cc:	b508      	push	{r3, lr}
 80152ce:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 80152d0:	f890 10f5 	ldrb.w	r1, [r0, #245]	@ 0xf5
 80152d4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80152d8:	303c      	adds	r0, #60	@ 0x3c
 80152da:	fb03 2111 	mls	r1, r3, r1, r2
 80152de:	2200      	movs	r2, #0
 80152e0:	b209      	sxth	r1, r1
 80152e2:	f7fb fa9f 	bl	8010824 <_ZN8touchgfx8Drawable6moveToEss>
 80152e6:	bd08      	pop	{r3, pc}

080152e8 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE>:
 80152e8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80152ec:	2b07      	cmp	r3, #7
 80152ee:	d119      	bne.n	8015324 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x3c>
 80152f0:	88ca      	ldrh	r2, [r1, #6]
 80152f2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80152f4:	1a9b      	subs	r3, r3, r2
 80152f6:	894a      	ldrh	r2, [r1, #10]
 80152f8:	f890 10f5 	ldrb.w	r1, [r0, #245]	@ 0xf5
 80152fc:	4413      	add	r3, r2
 80152fe:	b21b      	sxth	r3, r3
 8015300:	8603      	strh	r3, [r0, #48]	@ 0x30
 8015302:	b921      	cbnz	r1, 801530e <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x26>
 8015304:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
 8015306:	4293      	cmp	r3, r2
 8015308:	dd01      	ble.n	801530e <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x26>
 801530a:	8602      	strh	r2, [r0, #48]	@ 0x30
 801530c:	e008      	b.n	8015320 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x38>
 801530e:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
 8015312:	3a01      	subs	r2, #1
 8015314:	4291      	cmp	r1, r2
 8015316:	d103      	bne.n	8015320 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x38>
 8015318:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
 801531a:	4252      	negs	r2, r2
 801531c:	4293      	cmp	r3, r2
 801531e:	dbf4      	blt.n	801530a <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x22>
 8015320:	f7ff bfd4 	b.w	80152cc <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8015324:	4770      	bx	lr

08015326 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv>:
 8015326:	b538      	push	{r3, r4, r5, lr}
 8015328:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 801532c:	4604      	mov	r4, r0
 801532e:	2d0e      	cmp	r5, #14
 8015330:	d813      	bhi.n	801535a <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv+0x34>
 8015332:	8e42      	ldrh	r2, [r0, #50]	@ 0x32
 8015334:	230e      	movs	r3, #14
 8015336:	4252      	negs	r2, r2
 8015338:	b212      	sxth	r2, r2
 801533a:	2100      	movs	r1, #0
 801533c:	4628      	mov	r0, r5
 801533e:	f007 fc39 	bl	801cbb4 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
 8015342:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015344:	4418      	add	r0, r3
 8015346:	8620      	strh	r0, [r4, #48]	@ 0x30
 8015348:	4620      	mov	r0, r4
 801534a:	f7ff ffbf 	bl	80152cc <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 801534e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015352:	3301      	adds	r3, #1
 8015354:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015358:	bd38      	pop	{r3, r4, r5, pc}
 801535a:	2307      	movs	r3, #7
 801535c:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8015360:	2300      	movs	r3, #0
 8015362:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 8015366:	8603      	strh	r3, [r0, #48]	@ 0x30
 8015368:	e7ef      	b.n	801534a <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv+0x24>

0801536a <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv>:
 801536a:	b538      	push	{r3, r4, r5, lr}
 801536c:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 8015370:	4604      	mov	r4, r0
 8015372:	2d0e      	cmp	r5, #14
 8015374:	d812      	bhi.n	801539c <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv+0x32>
 8015376:	230e      	movs	r3, #14
 8015378:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	@ 0x32
 801537c:	2100      	movs	r1, #0
 801537e:	4628      	mov	r0, r5
 8015380:	f007 fc18 	bl	801cbb4 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
 8015384:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015386:	1a18      	subs	r0, r3, r0
 8015388:	8620      	strh	r0, [r4, #48]	@ 0x30
 801538a:	4620      	mov	r0, r4
 801538c:	f7ff ff9e 	bl	80152cc <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8015390:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015394:	3301      	adds	r3, #1
 8015396:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801539a:	bd38      	pop	{r3, r4, r5, pc}
 801539c:	2307      	movs	r3, #7
 801539e:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80153a2:	2300      	movs	r3, #0
 80153a4:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 80153a8:	8603      	strh	r3, [r0, #48]	@ 0x30
 80153aa:	e7ef      	b.n	801538c <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv+0x22>

080153ac <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev>:
 80153ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80153b0:	4604      	mov	r4, r0
 80153b2:	2500      	movs	r5, #0
 80153b4:	4626      	mov	r6, r4
 80153b6:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 80153ba:	f7fb f8cd 	bl	8010558 <_ZN8touchgfx8DrawableC1Ev>
 80153be:	4b18      	ldr	r3, [pc, #96]	@ (8015420 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev+0x74>)
 80153c0:	af02      	add	r7, sp, #8
 80153c2:	f827 9d04 	strh.w	r9, [r7, #-4]!
 80153c6:	62a5      	str	r5, [r4, #40]	@ 0x28
 80153c8:	f846 3b2c 	str.w	r3, [r6], #44
 80153cc:	4639      	mov	r1, r7
 80153ce:	4630      	mov	r0, r6
 80153d0:	f7fb fb20 	bl	8010a14 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80153d4:	4b13      	ldr	r3, [pc, #76]	@ (8015424 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev+0x78>)
 80153d6:	f104 085c 	add.w	r8, r4, #92	@ 0x5c
 80153da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80153dc:	4639      	mov	r1, r7
 80153de:	f8a4 5056 	strh.w	r5, [r4, #86]	@ 0x56
 80153e2:	f8a4 5058 	strh.w	r5, [r4, #88]	@ 0x58
 80153e6:	4640      	mov	r0, r8
 80153e8:	f8ad 9004 	strh.w	r9, [sp, #4]
 80153ec:	f7fb fb12 	bl	8010a14 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80153f0:	462a      	mov	r2, r5
 80153f2:	4629      	mov	r1, r5
 80153f4:	4630      	mov	r0, r6
 80153f6:	f8a4 5088 	strh.w	r5, [r4, #136]	@ 0x88
 80153fa:	f7fb f95a 	bl	80106b2 <_ZN8touchgfx8Drawable5setXYEss>
 80153fe:	462a      	mov	r2, r5
 8015400:	4629      	mov	r1, r5
 8015402:	4640      	mov	r0, r8
 8015404:	f7fb f955 	bl	80106b2 <_ZN8touchgfx8Drawable5setXYEss>
 8015408:	4631      	mov	r1, r6
 801540a:	4620      	mov	r0, r4
 801540c:	f7ff fc72 	bl	8014cf4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015410:	4620      	mov	r0, r4
 8015412:	4641      	mov	r1, r8
 8015414:	f7ff fc6e 	bl	8014cf4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015418:	4620      	mov	r0, r4
 801541a:	b003      	add	sp, #12
 801541c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015420:	080307e8 	.word	0x080307e8
 8015424:	08030dbc 	.word	0x08030dbc

08015428 <_ZN8touchgfx14SwipeContainerC1Ev>:
 8015428:	b570      	push	{r4, r5, r6, lr}
 801542a:	4604      	mov	r4, r0
 801542c:	f7fb f894 	bl	8010558 <_ZN8touchgfx8DrawableC1Ev>
 8015430:	4b1c      	ldr	r3, [pc, #112]	@ (80154a4 <_ZN8touchgfx14SwipeContainerC1Ev+0x7c>)
 8015432:	2500      	movs	r5, #0
 8015434:	6023      	str	r3, [r4, #0]
 8015436:	2307      	movs	r3, #7
 8015438:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801543c:	2350      	movs	r3, #80	@ 0x50
 801543e:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8015440:	231e      	movs	r3, #30
 8015442:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8015444:	2314      	movs	r3, #20
 8015446:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 801544a:	62a5      	str	r5, [r4, #40]	@ 0x28
 801544c:	f884 502d 	strb.w	r5, [r4, #45]	@ 0x2d
 8015450:	8625      	strh	r5, [r4, #48]	@ 0x30
 8015452:	8665      	strh	r5, [r4, #50]	@ 0x32
 8015454:	86a5      	strh	r5, [r4, #52]	@ 0x34
 8015456:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 801545a:	f884 5039 	strb.w	r5, [r4, #57]	@ 0x39
 801545e:	4630      	mov	r0, r6
 8015460:	f7fb f87a 	bl	8010558 <_ZN8touchgfx8DrawableC1Ev>
 8015464:	4b10      	ldr	r3, [pc, #64]	@ (80154a8 <_ZN8touchgfx14SwipeContainerC1Ev+0x80>)
 8015466:	6665      	str	r5, [r4, #100]	@ 0x64
 8015468:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801546a:	2302      	movs	r3, #2
 801546c:	f8a4 506a 	strh.w	r5, [r4, #106]	@ 0x6a
 8015470:	f104 056c 	add.w	r5, r4, #108	@ 0x6c
 8015474:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8015478:	4628      	mov	r0, r5
 801547a:	f7ff ff97 	bl	80153ac <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev>
 801547e:	f005 f9a9 	bl	801a7d4 <_ZN8touchgfx11Application11getInstanceEv>
 8015482:	4621      	mov	r1, r4
 8015484:	3004      	adds	r0, #4
 8015486:	f005 fa73 	bl	801a970 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 801548a:	2301      	movs	r3, #1
 801548c:	4631      	mov	r1, r6
 801548e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8015492:	4620      	mov	r0, r4
 8015494:	f7ff fc2e 	bl	8014cf4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015498:	4620      	mov	r0, r4
 801549a:	4629      	mov	r1, r5
 801549c:	f7ff fc2a 	bl	8014cf4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80154a0:	4620      	mov	r0, r4
 80154a2:	bd70      	pop	{r4, r5, r6, pc}
 80154a4:	08030878 	.word	0x08030878
 80154a8:	0803093c 	.word	0x0803093c

080154ac <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>:
 80154ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80154ae:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 80154b2:	4604      	mov	r4, r0
 80154b4:	428b      	cmp	r3, r1
 80154b6:	460d      	mov	r5, r1
 80154b8:	d915      	bls.n	80154e6 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh+0x3a>
 80154ba:	f890 3089 	ldrb.w	r3, [r0, #137]	@ 0x89
 80154be:	428b      	cmp	r3, r1
 80154c0:	d011      	beq.n	80154e6 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh+0x3a>
 80154c2:	f884 1089 	strb.w	r1, [r4, #137]	@ 0x89
 80154c6:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 80154ca:	a802      	add	r0, sp, #8
 80154cc:	f820 3d04 	strh.w	r3, [r0, #-4]!
 80154d0:	f008 fc00 	bl	801dcd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80154d4:	fb15 f100 	smulbb	r1, r5, r0
 80154d8:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	@ 0x62
 80154dc:	b209      	sxth	r1, r1
 80154de:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 80154e2:	f7fb f99f 	bl	8010824 <_ZN8touchgfx8Drawable6moveToEss>
 80154e6:	b003      	add	sp, #12
 80154e8:	bd30      	pop	{r4, r5, pc}

080154ea <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>:
 80154ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80154ec:	4604      	mov	r4, r0
 80154ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80154f2:	f884 1088 	strb.w	r1, [r4, #136]	@ 0x88
 80154f6:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 80154fa:	460d      	mov	r5, r1
 80154fc:	4293      	cmp	r3, r2
 80154fe:	d01e      	beq.n	801553e <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x54>
 8015500:	a802      	add	r0, sp, #8
 8015502:	f820 3d04 	strh.w	r3, [r0, #-4]!
 8015506:	f008 fbe5 	bl	801dcd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801550a:	fb15 f000 	smulbb	r0, r5, r0
 801550e:	6823      	ldr	r3, [r4, #0]
 8015510:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8015512:	695b      	ldr	r3, [r3, #20]
 8015514:	4620      	mov	r0, r4
 8015516:	4798      	blx	r3
 8015518:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 801551c:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 8015520:	4620      	mov	r0, r4
 8015522:	f7fb f922 	bl	801076a <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015526:	f894 1089 	ldrb.w	r1, [r4, #137]	@ 0x89
 801552a:	4620      	mov	r0, r4
 801552c:	42a9      	cmp	r1, r5
 801552e:	bf28      	it	cs
 8015530:	4629      	movcs	r1, r5
 8015532:	f7ff ffbb 	bl	80154ac <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 8015536:	6823      	ldr	r3, [r4, #0]
 8015538:	4620      	mov	r0, r4
 801553a:	695b      	ldr	r3, [r3, #20]
 801553c:	4798      	blx	r3
 801553e:	b003      	add	sp, #12
 8015540:	bd30      	pop	{r4, r5, pc}

08015542 <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>:
 8015542:	f890 1089 	ldrb.w	r1, [r0, #137]	@ 0x89
 8015546:	f890 2088 	ldrb.w	r2, [r0, #136]	@ 0x88
 801554a:	3101      	adds	r1, #1
 801554c:	fb91 f3f2 	sdiv	r3, r1, r2
 8015550:	fb02 1113 	mls	r1, r2, r3, r1
 8015554:	b2c9      	uxtb	r1, r1
 8015556:	f7ff bfa9 	b.w	80154ac <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>

0801555a <_ZN8touchgfx14SwipeContainer11animateLeftEv>:
 801555a:	b510      	push	{r4, lr}
 801555c:	4604      	mov	r4, r0
 801555e:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8015562:	280a      	cmp	r0, #10
 8015564:	d813      	bhi.n	801558e <_ZN8touchgfx14SwipeContainer11animateLeftEv+0x34>
 8015566:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015568:	8922      	ldrh	r2, [r4, #8]
 801556a:	2100      	movs	r1, #0
 801556c:	441a      	add	r2, r3
 801556e:	b212      	sxth	r2, r2
 8015570:	230a      	movs	r3, #10
 8015572:	f007 fb5d 	bl	801cc30 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8015576:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015578:	1a18      	subs	r0, r3, r0
 801557a:	8620      	strh	r0, [r4, #48]	@ 0x30
 801557c:	4620      	mov	r0, r4
 801557e:	f7ff fea5 	bl	80152cc <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8015582:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015586:	3301      	adds	r3, #1
 8015588:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801558c:	bd10      	pop	{r4, pc}
 801558e:	2307      	movs	r3, #7
 8015590:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8015594:	2300      	movs	r3, #0
 8015596:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 801559a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801559e:	8623      	strh	r3, [r4, #48]	@ 0x30
 80155a0:	f7ff ffcf 	bl	8015542 <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>
 80155a4:	e7ea      	b.n	801557c <_ZN8touchgfx14SwipeContainer11animateLeftEv+0x22>

080155a6 <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>:
 80155a6:	f890 2088 	ldrb.w	r2, [r0, #136]	@ 0x88
 80155aa:	f890 1089 	ldrb.w	r1, [r0, #137]	@ 0x89
 80155ae:	4411      	add	r1, r2
 80155b0:	3901      	subs	r1, #1
 80155b2:	fb91 f3f2 	sdiv	r3, r1, r2
 80155b6:	fb02 1113 	mls	r1, r2, r3, r1
 80155ba:	b2c9      	uxtb	r1, r1
 80155bc:	f7ff bf76 	b.w	80154ac <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>

080155c0 <_ZN8touchgfx14SwipeContainer12animateRightEv>:
 80155c0:	b510      	push	{r4, lr}
 80155c2:	4604      	mov	r4, r0
 80155c4:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 80155c8:	280a      	cmp	r0, #10
 80155ca:	d813      	bhi.n	80155f4 <_ZN8touchgfx14SwipeContainer12animateRightEv+0x34>
 80155cc:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80155ce:	8922      	ldrh	r2, [r4, #8]
 80155d0:	2100      	movs	r1, #0
 80155d2:	1ad2      	subs	r2, r2, r3
 80155d4:	b212      	sxth	r2, r2
 80155d6:	230a      	movs	r3, #10
 80155d8:	f007 fb2a 	bl	801cc30 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80155dc:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80155de:	4418      	add	r0, r3
 80155e0:	8620      	strh	r0, [r4, #48]	@ 0x30
 80155e2:	4620      	mov	r0, r4
 80155e4:	f7ff fe72 	bl	80152cc <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80155e8:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80155ec:	3301      	adds	r3, #1
 80155ee:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80155f2:	bd10      	pop	{r4, pc}
 80155f4:	2307      	movs	r3, #7
 80155f6:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80155fa:	2300      	movs	r3, #0
 80155fc:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8015600:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015604:	8623      	strh	r3, [r4, #48]	@ 0x30
 8015606:	f7ff ffce 	bl	80155a6 <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>
 801560a:	e7ea      	b.n	80155e2 <_ZN8touchgfx14SwipeContainer12animateRightEv+0x22>

0801560c <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>:
 801560c:	b510      	push	{r4, lr}
 801560e:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 8015612:	4604      	mov	r4, r0
 8015614:	428b      	cmp	r3, r1
 8015616:	d907      	bls.n	8015628 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh+0x1c>
 8015618:	306c      	adds	r0, #108	@ 0x6c
 801561a:	f7ff ff47 	bl	80154ac <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 801561e:	4620      	mov	r0, r4
 8015620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015624:	f7ff be52 	b.w	80152cc <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8015628:	bd10      	pop	{r4, pc}

0801562a <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>:
 801562a:	b538      	push	{r3, r4, r5, lr}
 801562c:	4604      	mov	r4, r0
 801562e:	460d      	mov	r5, r1
 8015630:	303c      	adds	r0, #60	@ 0x3c
 8015632:	f000 f9fd 	bl	8015a30 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
 8015636:	f894 10f4 	ldrb.w	r1, [r4, #244]	@ 0xf4
 801563a:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 801563e:	3101      	adds	r1, #1
 8015640:	b2c9      	uxtb	r1, r1
 8015642:	f7ff ff52 	bl	80154ea <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
 8015646:	f894 10f5 	ldrb.w	r1, [r4, #245]	@ 0xf5
 801564a:	4620      	mov	r0, r4
 801564c:	f7ff ffde 	bl	801560c <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
 8015650:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 8015654:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8015658:	4620      	mov	r0, r4
 801565a:	f7fb f886 	bl	801076a <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801565e:	bd38      	pop	{r3, r4, r5, pc}

08015660 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE>:
 8015660:	b538      	push	{r3, r4, r5, lr}
 8015662:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 8015666:	4604      	mov	r4, r0
 8015668:	b1e3      	cbz	r3, 80156a4 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x44>
 801566a:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 801566c:	b1d3      	cbz	r3, 80156a4 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x44>
 801566e:	428b      	cmp	r3, r1
 8015670:	d125      	bne.n	80156be <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x5e>
 8015672:	4619      	mov	r1, r3
 8015674:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 8015678:	f000 fa5a 	bl	8015b30 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>
 801567c:	f894 10f4 	ldrb.w	r1, [r4, #244]	@ 0xf4
 8015680:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8015684:	3901      	subs	r1, #1
 8015686:	b2c9      	uxtb	r1, r1
 8015688:	f7ff ff2f 	bl	80154ea <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
 801568c:	f894 50f4 	ldrb.w	r5, [r4, #244]	@ 0xf4
 8015690:	b94d      	cbnz	r5, 80156a6 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x46>
 8015692:	6823      	ldr	r3, [r4, #0]
 8015694:	4620      	mov	r0, r4
 8015696:	695b      	ldr	r3, [r3, #20]
 8015698:	4798      	blx	r3
 801569a:	462a      	mov	r2, r5
 801569c:	4629      	mov	r1, r5
 801569e:	4620      	mov	r0, r4
 80156a0:	f7fb f863 	bl	801076a <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80156a4:	bd38      	pop	{r3, r4, r5, pc}
 80156a6:	f894 10f5 	ldrb.w	r1, [r4, #245]	@ 0xf5
 80156aa:	3d01      	subs	r5, #1
 80156ac:	42a9      	cmp	r1, r5
 80156ae:	bfa8      	it	ge
 80156b0:	4629      	movge	r1, r5
 80156b2:	4620      	mov	r0, r4
 80156b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156b8:	b2c9      	uxtb	r1, r1
 80156ba:	f7ff bfa7 	b.w	801560c <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
 80156be:	699b      	ldr	r3, [r3, #24]
 80156c0:	e7d4      	b.n	801566c <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0xc>

080156c2 <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv>:
 80156c2:	b510      	push	{r4, lr}
 80156c4:	4604      	mov	r4, r0
 80156c6:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 80156ca:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80156ce:	4298      	cmp	r0, r3
 80156d0:	d812      	bhi.n	80156f8 <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv+0x36>
 80156d2:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 80156d4:	8922      	ldrh	r2, [r4, #8]
 80156d6:	440a      	add	r2, r1
 80156d8:	b212      	sxth	r2, r2
 80156da:	2100      	movs	r1, #0
 80156dc:	f007 faa8 	bl	801cc30 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80156e0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80156e2:	1a18      	subs	r0, r3, r0
 80156e4:	8620      	strh	r0, [r4, #48]	@ 0x30
 80156e6:	4620      	mov	r0, r4
 80156e8:	f7ff fdf0 	bl	80152cc <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80156ec:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80156f0:	3301      	adds	r3, #1
 80156f2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80156f6:	bd10      	pop	{r4, pc}
 80156f8:	2307      	movs	r3, #7
 80156fa:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80156fe:	2300      	movs	r3, #0
 8015700:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8015704:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015708:	8623      	strh	r3, [r4, #48]	@ 0x30
 801570a:	f7ff ff1a 	bl	8015542 <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>
 801570e:	e7ea      	b.n	80156e6 <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv+0x24>

08015710 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv>:
 8015710:	b510      	push	{r4, lr}
 8015712:	4604      	mov	r4, r0
 8015714:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8015718:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801571c:	4298      	cmp	r0, r3
 801571e:	d812      	bhi.n	8015746 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv+0x36>
 8015720:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 8015722:	8922      	ldrh	r2, [r4, #8]
 8015724:	1a52      	subs	r2, r2, r1
 8015726:	b212      	sxth	r2, r2
 8015728:	2100      	movs	r1, #0
 801572a:	f007 fa81 	bl	801cc30 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 801572e:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015730:	4418      	add	r0, r3
 8015732:	8620      	strh	r0, [r4, #48]	@ 0x30
 8015734:	4620      	mov	r0, r4
 8015736:	f7ff fdc9 	bl	80152cc <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 801573a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801573e:	3301      	adds	r3, #1
 8015740:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015744:	bd10      	pop	{r4, pc}
 8015746:	2307      	movs	r3, #7
 8015748:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801574c:	2300      	movs	r3, #0
 801574e:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8015752:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015756:	8623      	strh	r3, [r4, #48]	@ 0x30
 8015758:	f7ff ff25 	bl	80155a6 <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>
 801575c:	e7ea      	b.n	8015734 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv+0x24>

0801575e <_ZN8touchgfx14SwipeContainer13animateToPageEv>:
 801575e:	b538      	push	{r3, r4, r5, lr}
 8015760:	4604      	mov	r4, r0
 8015762:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8015766:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801576a:	f994 1039 	ldrsb.w	r1, [r4, #57]	@ 0x39
 801576e:	4298      	cmp	r0, r3
 8015770:	d814      	bhi.n	801579c <_ZN8touchgfx14SwipeContainer13animateToPageEv+0x3e>
 8015772:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 8015776:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
 8015778:	fb05 2201 	mla	r2, r5, r1, r2
 801577c:	2100      	movs	r1, #0
 801577e:	b212      	sxth	r2, r2
 8015780:	f007 fa56 	bl	801cc30 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8015784:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015786:	1a18      	subs	r0, r3, r0
 8015788:	8620      	strh	r0, [r4, #48]	@ 0x30
 801578a:	4620      	mov	r0, r4
 801578c:	f7ff fd9e 	bl	80152cc <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8015790:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015794:	3301      	adds	r3, #1
 8015796:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801579a:	bd38      	pop	{r3, r4, r5, pc}
 801579c:	2307      	movs	r3, #7
 801579e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80157a2:	2300      	movs	r3, #0
 80157a4:	f894 20f5 	ldrb.w	r2, [r4, #245]	@ 0xf5
 80157a8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80157ac:	4411      	add	r1, r2
 80157ae:	8623      	strh	r3, [r4, #48]	@ 0x30
 80157b0:	b2c9      	uxtb	r1, r1
 80157b2:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 80157b6:	f7ff fe79 	bl	80154ac <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 80157ba:	e7e6      	b.n	801578a <_ZN8touchgfx14SwipeContainer13animateToPageEv+0x2c>

080157bc <_ZN8touchgfx14SwipeContainer15handleTickEventEv>:
 80157bc:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80157c0:	b90b      	cbnz	r3, 80157c6 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0xa>
 80157c2:	f7ff bdb0 	b.w	8015326 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv>
 80157c6:	2b01      	cmp	r3, #1
 80157c8:	d101      	bne.n	80157ce <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x12>
 80157ca:	f7ff bdce 	b.w	801536a <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv>
 80157ce:	2b02      	cmp	r3, #2
 80157d0:	d101      	bne.n	80157d6 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x1a>
 80157d2:	f7ff bec2 	b.w	801555a <_ZN8touchgfx14SwipeContainer11animateLeftEv>
 80157d6:	2b03      	cmp	r3, #3
 80157d8:	d101      	bne.n	80157de <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x22>
 80157da:	f7ff bef1 	b.w	80155c0 <_ZN8touchgfx14SwipeContainer12animateRightEv>
 80157de:	2b04      	cmp	r3, #4
 80157e0:	d101      	bne.n	80157e6 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x2a>
 80157e2:	f7ff bf6e 	b.w	80156c2 <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv>
 80157e6:	2b05      	cmp	r3, #5
 80157e8:	d101      	bne.n	80157ee <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x32>
 80157ea:	f7ff bf91 	b.w	8015710 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv>
 80157ee:	2b06      	cmp	r3, #6
 80157f0:	d101      	bne.n	80157f6 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x3a>
 80157f2:	f7ff bfb4 	b.w	801575e <_ZN8touchgfx14SwipeContainer13animateToPageEv>
 80157f6:	4770      	bx	lr

080157f8 <_ZNK8touchgfx10ListLayout12getDirectionEv>:
 80157f8:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 80157fc:	4770      	bx	lr

080157fe <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE>:
 80157fe:	b538      	push	{r3, r4, r5, lr}
 8015800:	7882      	ldrb	r2, [r0, #2]
 8015802:	4604      	mov	r4, r0
 8015804:	460d      	mov	r5, r1
 8015806:	6843      	ldr	r3, [r0, #4]
 8015808:	b98a      	cbnz	r2, 801582e <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x30>
 801580a:	4299      	cmp	r1, r3
 801580c:	d101      	bne.n	8015812 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 801580e:	2301      	movs	r3, #1
 8015810:	7083      	strb	r3, [r0, #2]
 8015812:	6863      	ldr	r3, [r4, #4]
 8015814:	42ab      	cmp	r3, r5
 8015816:	d009      	beq.n	801582c <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 8015818:	7a23      	ldrb	r3, [r4, #8]
 801581a:	2b01      	cmp	r3, #1
 801581c:	d11b      	bne.n	8015856 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x58>
 801581e:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8015822:	f9b4 2000 	ldrsh.w	r2, [r4]
 8015826:	429a      	cmp	r2, r3
 8015828:	bfb8      	it	lt
 801582a:	8023      	strhlt	r3, [r4, #0]
 801582c:	bd38      	pop	{r3, r4, r5, pc}
 801582e:	7a02      	ldrb	r2, [r0, #8]
 8015830:	2a01      	cmp	r2, #1
 8015832:	d108      	bne.n	8015846 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x48>
 8015834:	895b      	ldrh	r3, [r3, #10]
 8015836:	88c9      	ldrh	r1, [r1, #6]
 8015838:	1ac9      	subs	r1, r1, r3
 801583a:	682b      	ldr	r3, [r5, #0]
 801583c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801583e:	b209      	sxth	r1, r1
 8015840:	4628      	mov	r0, r5
 8015842:	4798      	blx	r3
 8015844:	e7e5      	b.n	8015812 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 8015846:	2a02      	cmp	r2, #2
 8015848:	d1e3      	bne.n	8015812 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 801584a:	891b      	ldrh	r3, [r3, #8]
 801584c:	8889      	ldrh	r1, [r1, #4]
 801584e:	1ac9      	subs	r1, r1, r3
 8015850:	682b      	ldr	r3, [r5, #0]
 8015852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015854:	e7f3      	b.n	801583e <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x40>
 8015856:	2b02      	cmp	r3, #2
 8015858:	d1e8      	bne.n	801582c <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 801585a:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 801585e:	e7e0      	b.n	8015822 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x24>

08015860 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev>:
 8015860:	4770      	bx	lr

08015862 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED1Ev>:
 8015862:	4770      	bx	lr

08015864 <_ZN8touchgfx10ListLayoutD1Ev>:
 8015864:	4770      	bx	lr

08015866 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7executeES3_>:
 8015866:	4603      	mov	r3, r0
 8015868:	b430      	push	{r4, r5}
 801586a:	68c5      	ldr	r5, [r0, #12]
 801586c:	6844      	ldr	r4, [r0, #4]
 801586e:	106a      	asrs	r2, r5, #1
 8015870:	07ed      	lsls	r5, r5, #31
 8015872:	eb04 0002 	add.w	r0, r4, r2
 8015876:	689b      	ldr	r3, [r3, #8]
 8015878:	bf48      	it	mi
 801587a:	58a2      	ldrmi	r2, [r4, r2]
 801587c:	bc30      	pop	{r4, r5}
 801587e:	bf48      	it	mi
 8015880:	58d3      	ldrmi	r3, [r2, r3]
 8015882:	4718      	bx	r3

08015884 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv>:
 8015884:	6843      	ldr	r3, [r0, #4]
 8015886:	b12b      	cbz	r3, 8015894 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x10>
 8015888:	6883      	ldr	r3, [r0, #8]
 801588a:	b92b      	cbnz	r3, 8015898 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x14>
 801588c:	68c0      	ldr	r0, [r0, #12]
 801588e:	f000 0001 	and.w	r0, r0, #1
 8015892:	4770      	bx	lr
 8015894:	4618      	mov	r0, r3
 8015896:	4770      	bx	lr
 8015898:	2001      	movs	r0, #1
 801589a:	4770      	bx	lr

0801589c <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7executeES3_>:
 801589c:	4603      	mov	r3, r0
 801589e:	b430      	push	{r4, r5}
 80158a0:	68c5      	ldr	r5, [r0, #12]
 80158a2:	6844      	ldr	r4, [r0, #4]
 80158a4:	106a      	asrs	r2, r5, #1
 80158a6:	07ed      	lsls	r5, r5, #31
 80158a8:	eb04 0002 	add.w	r0, r4, r2
 80158ac:	689b      	ldr	r3, [r3, #8]
 80158ae:	bf48      	it	mi
 80158b0:	58a2      	ldrmi	r2, [r4, r2]
 80158b2:	bc30      	pop	{r4, r5}
 80158b4:	bf48      	it	mi
 80158b6:	58d3      	ldrmi	r3, [r2, r3]
 80158b8:	4718      	bx	r3

080158ba <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv>:
 80158ba:	6843      	ldr	r3, [r0, #4]
 80158bc:	b12b      	cbz	r3, 80158ca <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x10>
 80158be:	6883      	ldr	r3, [r0, #8]
 80158c0:	b92b      	cbnz	r3, 80158ce <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x14>
 80158c2:	68c0      	ldr	r0, [r0, #12]
 80158c4:	f000 0001 	and.w	r0, r0, #1
 80158c8:	4770      	bx	lr
 80158ca:	4618      	mov	r0, r3
 80158cc:	4770      	bx	lr
 80158ce:	2001      	movs	r0, #1
 80158d0:	4770      	bx	lr

080158d2 <_ZN8touchgfx10ListLayoutD0Ev>:
 80158d2:	b510      	push	{r4, lr}
 80158d4:	4604      	mov	r4, r0
 80158d6:	2130      	movs	r1, #48	@ 0x30
 80158d8:	f017 fa4d 	bl	802cd76 <_ZdlPvj>
 80158dc:	4620      	mov	r0, r4
 80158de:	bd10      	pop	{r4, pc}

080158e0 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED0Ev>:
 80158e0:	b510      	push	{r4, lr}
 80158e2:	4604      	mov	r4, r0
 80158e4:	2110      	movs	r1, #16
 80158e6:	f017 fa46 	bl	802cd76 <_ZdlPvj>
 80158ea:	4620      	mov	r0, r4
 80158ec:	bd10      	pop	{r4, pc}

080158ee <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED0Ev>:
 80158ee:	b510      	push	{r4, lr}
 80158f0:	4604      	mov	r4, r0
 80158f2:	2110      	movs	r1, #16
 80158f4:	f017 fa3f 	bl	802cd76 <_ZdlPvj>
 80158f8:	4620      	mov	r0, r4
 80158fa:	bd10      	pop	{r4, pc}

080158fc <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE>:
 80158fc:	4603      	mov	r3, r0
 80158fe:	789a      	ldrb	r2, [r3, #2]
 8015900:	4608      	mov	r0, r1
 8015902:	b992      	cbnz	r2, 801592a <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x2e>
 8015904:	685a      	ldr	r2, [r3, #4]
 8015906:	428a      	cmp	r2, r1
 8015908:	d102      	bne.n	8015910 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x14>
 801590a:	2201      	movs	r2, #1
 801590c:	709a      	strb	r2, [r3, #2]
 801590e:	4770      	bx	lr
 8015910:	7a1a      	ldrb	r2, [r3, #8]
 8015912:	2a01      	cmp	r2, #1
 8015914:	d104      	bne.n	8015920 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x24>
 8015916:	88ca      	ldrh	r2, [r1, #6]
 8015918:	8949      	ldrh	r1, [r1, #10]
 801591a:	440a      	add	r2, r1
 801591c:	801a      	strh	r2, [r3, #0]
 801591e:	4770      	bx	lr
 8015920:	2a02      	cmp	r2, #2
 8015922:	d116      	bne.n	8015952 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 8015924:	888a      	ldrh	r2, [r1, #4]
 8015926:	8909      	ldrh	r1, [r1, #8]
 8015928:	e7f7      	b.n	801591a <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x1e>
 801592a:	7a1a      	ldrb	r2, [r3, #8]
 801592c:	2a01      	cmp	r2, #1
 801592e:	d107      	bne.n	8015940 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x44>
 8015930:	685b      	ldr	r3, [r3, #4]
 8015932:	8959      	ldrh	r1, [r3, #10]
 8015934:	88c3      	ldrh	r3, [r0, #6]
 8015936:	4419      	add	r1, r3
 8015938:	6803      	ldr	r3, [r0, #0]
 801593a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801593c:	b209      	sxth	r1, r1
 801593e:	4718      	bx	r3
 8015940:	2a02      	cmp	r2, #2
 8015942:	d106      	bne.n	8015952 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 8015944:	685b      	ldr	r3, [r3, #4]
 8015946:	8919      	ldrh	r1, [r3, #8]
 8015948:	8883      	ldrh	r3, [r0, #4]
 801594a:	4419      	add	r1, r3
 801594c:	6803      	ldr	r3, [r0, #0]
 801594e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015950:	e7f4      	b.n	801593c <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x40>
 8015952:	4770      	bx	lr

08015954 <_ZN8touchgfx10ListLayout9removeAllEv>:
 8015954:	2200      	movs	r2, #0
 8015956:	b510      	push	{r4, lr}
 8015958:	4604      	mov	r4, r0
 801595a:	85c2      	strh	r2, [r0, #46]	@ 0x2e
 801595c:	4611      	mov	r1, r2
 801595e:	f7fa ff04 	bl	801076a <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015962:	4620      	mov	r0, r4
 8015964:	f7ff f9d3 	bl	8014d0e <_ZN8touchgfx9Container9removeAllEv>
 8015968:	6960      	ldr	r0, [r4, #20]
 801596a:	b120      	cbz	r0, 8015976 <_ZN8touchgfx10ListLayout9removeAllEv+0x22>
 801596c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015970:	6803      	ldr	r3, [r0, #0]
 8015972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015974:	4718      	bx	r3
 8015976:	bd10      	pop	{r4, pc}

08015978 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>:
 8015978:	b530      	push	{r4, r5, lr}
 801597a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801597e:	b085      	sub	sp, #20
 8015980:	428b      	cmp	r3, r1
 8015982:	4604      	mov	r4, r0
 8015984:	d017      	beq.n	80159b6 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 8015986:	2500      	movs	r5, #0
 8015988:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 801598c:	85c5      	strh	r5, [r0, #46]	@ 0x2e
 801598e:	462a      	mov	r2, r5
 8015990:	4629      	mov	r1, r5
 8015992:	f7fa feea 	bl	801076a <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015996:	4b09      	ldr	r3, [pc, #36]	@ (80159bc <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x44>)
 8015998:	4620      	mov	r0, r4
 801599a:	e9cd 3400 	strd	r3, r4, [sp]
 801599e:	4b08      	ldr	r3, [pc, #32]	@ (80159c0 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x48>)
 80159a0:	4669      	mov	r1, sp
 80159a2:	e9cd 3502 	strd	r3, r5, [sp, #8]
 80159a6:	6823      	ldr	r3, [r4, #0]
 80159a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80159aa:	4798      	blx	r3
 80159ac:	6960      	ldr	r0, [r4, #20]
 80159ae:	b110      	cbz	r0, 80159b6 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 80159b0:	6803      	ldr	r3, [r0, #0]
 80159b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80159b4:	4798      	blx	r3
 80159b6:	b005      	add	sp, #20
 80159b8:	bd30      	pop	{r4, r5, pc}
 80159ba:	bf00      	nop
 80159bc:	0803090c 	.word	0x0803090c
 80159c0:	08015a29 	.word	0x08015a29

080159c4 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>:
 80159c4:	b538      	push	{r3, r4, r5, lr}
 80159c6:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80159ca:	460d      	mov	r5, r1
 80159cc:	2b01      	cmp	r3, #1
 80159ce:	4604      	mov	r4, r0
 80159d0:	4611      	mov	r1, r2
 80159d2:	d002      	beq.n	80159da <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x16>
 80159d4:	2b02      	cmp	r3, #2
 80159d6:	d015      	beq.n	8015a04 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x40>
 80159d8:	bd38      	pop	{r3, r4, r5, pc}
 80159da:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80159de:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80159e2:	429a      	cmp	r2, r3
 80159e4:	bfb8      	it	lt
 80159e6:	8103      	strhlt	r3, [r0, #8]
 80159e8:	896a      	ldrh	r2, [r5, #10]
 80159ea:	8943      	ldrh	r3, [r0, #10]
 80159ec:	4413      	add	r3, r2
 80159ee:	8143      	strh	r3, [r0, #10]
 80159f0:	460a      	mov	r2, r1
 80159f2:	4628      	mov	r0, r5
 80159f4:	2100      	movs	r1, #0
 80159f6:	f7fa fe5c 	bl	80106b2 <_ZN8touchgfx8Drawable5setXYEss>
 80159fa:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80159fc:	896a      	ldrh	r2, [r5, #10]
 80159fe:	4413      	add	r3, r2
 8015a00:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8015a02:	e7e9      	b.n	80159d8 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x14>
 8015a04:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8015a08:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015a0c:	429a      	cmp	r2, r3
 8015a0e:	bfb8      	it	lt
 8015a10:	8143      	strhlt	r3, [r0, #10]
 8015a12:	892a      	ldrh	r2, [r5, #8]
 8015a14:	8903      	ldrh	r3, [r0, #8]
 8015a16:	4413      	add	r3, r2
 8015a18:	8103      	strh	r3, [r0, #8]
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	4628      	mov	r0, r5
 8015a1e:	f7fa fe48 	bl	80106b2 <_ZN8touchgfx8Drawable5setXYEss>
 8015a22:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8015a24:	892a      	ldrh	r2, [r5, #8]
 8015a26:	e7ea      	b.n	80159fe <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x3a>

08015a28 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>:
 8015a28:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	@ 0x2e
 8015a2c:	f7ff bfca 	b.w	80159c4 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>

08015a30 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>:
 8015a30:	b570      	push	{r4, r5, r6, lr}
 8015a32:	4604      	mov	r4, r0
 8015a34:	460d      	mov	r5, r1
 8015a36:	f7ff fff7 	bl	8015a28 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>
 8015a3a:	4620      	mov	r0, r4
 8015a3c:	4629      	mov	r1, r5
 8015a3e:	f7ff f959 	bl	8014cf4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015a42:	6960      	ldr	r0, [r4, #20]
 8015a44:	b120      	cbz	r0, 8015a50 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE+0x20>
 8015a46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a4a:	6803      	ldr	r3, [r0, #0]
 8015a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015a4e:	4718      	bx	r3
 8015a50:	bd70      	pop	{r4, r5, r6, pc}
	...

08015a54 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_>:
 8015a54:	b530      	push	{r4, r5, lr}
 8015a56:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8015a58:	b089      	sub	sp, #36	@ 0x24
 8015a5a:	4604      	mov	r4, r0
 8015a5c:	4615      	mov	r5, r2
 8015a5e:	b92b      	cbnz	r3, 8015a6c <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x18>
 8015a60:	6803      	ldr	r3, [r0, #0]
 8015a62:	4611      	mov	r1, r2
 8015a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015a66:	4798      	blx	r3
 8015a68:	b009      	add	sp, #36	@ 0x24
 8015a6a:	bd30      	pop	{r4, r5, pc}
 8015a6c:	f7ff f992 	bl	8014d94 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>
 8015a70:	2300      	movs	r3, #0
 8015a72:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8015a76:	f8ad 3004 	strh.w	r3, [sp, #4]
 8015a7a:	f88d 200c 	strb.w	r2, [sp, #12]
 8015a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8015ab8 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x64>)
 8015a80:	f88d 3006 	strb.w	r3, [sp, #6]
 8015a84:	9204      	str	r2, [sp, #16]
 8015a86:	aa01      	add	r2, sp, #4
 8015a88:	9205      	str	r2, [sp, #20]
 8015a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8015abc <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x68>)
 8015a8c:	a904      	add	r1, sp, #16
 8015a8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015a92:	6823      	ldr	r3, [r4, #0]
 8015a94:	4620      	mov	r0, r4
 8015a96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015a98:	9502      	str	r5, [sp, #8]
 8015a9a:	4798      	blx	r3
 8015a9c:	4620      	mov	r0, r4
 8015a9e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8015aa2:	4629      	mov	r1, r5
 8015aa4:	f7ff ff8e 	bl	80159c4 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>
 8015aa8:	6960      	ldr	r0, [r4, #20]
 8015aaa:	2800      	cmp	r0, #0
 8015aac:	d0dc      	beq.n	8015a68 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 8015aae:	6803      	ldr	r3, [r0, #0]
 8015ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015ab2:	4798      	blx	r3
 8015ab4:	e7d8      	b.n	8015a68 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 8015ab6:	bf00      	nop
 8015ab8:	08030924 	.word	0x08030924
 8015abc:	080158fd 	.word	0x080158fd

08015ac0 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>:
 8015ac0:	b538      	push	{r3, r4, r5, lr}
 8015ac2:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8015ac6:	4604      	mov	r4, r0
 8015ac8:	2b01      	cmp	r3, #1
 8015aca:	460d      	mov	r5, r1
 8015acc:	d002      	beq.n	8015ad4 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x14>
 8015ace:	2b02      	cmp	r3, #2
 8015ad0:	d018      	beq.n	8015b04 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x44>
 8015ad2:	bd38      	pop	{r3, r4, r5, pc}
 8015ad4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8015ad8:	4293      	cmp	r3, r2
 8015ada:	bfc8      	it	gt
 8015adc:	8102      	strhgt	r2, [r0, #8]
 8015ade:	894a      	ldrh	r2, [r1, #10]
 8015ae0:	8943      	ldrh	r3, [r0, #10]
 8015ae2:	1a9b      	subs	r3, r3, r2
 8015ae4:	8143      	strh	r3, [r0, #10]
 8015ae6:	680b      	ldr	r3, [r1, #0]
 8015ae8:	4628      	mov	r0, r5
 8015aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015aec:	2100      	movs	r1, #0
 8015aee:	4798      	blx	r3
 8015af0:	682b      	ldr	r3, [r5, #0]
 8015af2:	2100      	movs	r1, #0
 8015af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015af6:	4628      	mov	r0, r5
 8015af8:	4798      	blx	r3
 8015afa:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8015afc:	896a      	ldrh	r2, [r5, #10]
 8015afe:	1a9b      	subs	r3, r3, r2
 8015b00:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8015b02:	e7e6      	b.n	8015ad2 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x12>
 8015b04:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015b08:	4293      	cmp	r3, r2
 8015b0a:	bfc8      	it	gt
 8015b0c:	8142      	strhgt	r2, [r0, #10]
 8015b0e:	890a      	ldrh	r2, [r1, #8]
 8015b10:	8903      	ldrh	r3, [r0, #8]
 8015b12:	1a9b      	subs	r3, r3, r2
 8015b14:	8103      	strh	r3, [r0, #8]
 8015b16:	680b      	ldr	r3, [r1, #0]
 8015b18:	4628      	mov	r0, r5
 8015b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015b1c:	2100      	movs	r1, #0
 8015b1e:	4798      	blx	r3
 8015b20:	682b      	ldr	r3, [r5, #0]
 8015b22:	2100      	movs	r1, #0
 8015b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015b26:	4628      	mov	r0, r5
 8015b28:	4798      	blx	r3
 8015b2a:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8015b2c:	892a      	ldrh	r2, [r5, #8]
 8015b2e:	e7e6      	b.n	8015afe <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x3e>

08015b30 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>:
 8015b30:	2300      	movs	r3, #0
 8015b32:	b530      	push	{r4, r5, lr}
 8015b34:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8015b38:	b089      	sub	sp, #36	@ 0x24
 8015b3a:	f88d 200c 	strb.w	r2, [sp, #12]
 8015b3e:	4a13      	ldr	r2, [pc, #76]	@ (8015b8c <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x5c>)
 8015b40:	f8ad 3004 	strh.w	r3, [sp, #4]
 8015b44:	9204      	str	r2, [sp, #16]
 8015b46:	aa01      	add	r2, sp, #4
 8015b48:	9205      	str	r2, [sp, #20]
 8015b4a:	4a11      	ldr	r2, [pc, #68]	@ (8015b90 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x60>)
 8015b4c:	f88d 3006 	strb.w	r3, [sp, #6]
 8015b50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015b54:	6803      	ldr	r3, [r0, #0]
 8015b56:	9102      	str	r1, [sp, #8]
 8015b58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015b5a:	460d      	mov	r5, r1
 8015b5c:	a904      	add	r1, sp, #16
 8015b5e:	4604      	mov	r4, r0
 8015b60:	4798      	blx	r3
 8015b62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8015b66:	b14b      	cbz	r3, 8015b7c <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x4c>
 8015b68:	4629      	mov	r1, r5
 8015b6a:	4620      	mov	r0, r4
 8015b6c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8015b70:	f7ff ffa6 	bl	8015ac0 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>
 8015b74:	4629      	mov	r1, r5
 8015b76:	4620      	mov	r0, r4
 8015b78:	f7ff f8f5 	bl	8014d66 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 8015b7c:	6960      	ldr	r0, [r4, #20]
 8015b7e:	b110      	cbz	r0, 8015b86 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x56>
 8015b80:	6803      	ldr	r3, [r0, #0]
 8015b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015b84:	4798      	blx	r3
 8015b86:	b009      	add	sp, #36	@ 0x24
 8015b88:	bd30      	pop	{r4, r5, pc}
 8015b8a:	bf00      	nop
 8015b8c:	08030924 	.word	0x08030924
 8015b90:	080157ff 	.word	0x080157ff

08015b94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015b94:	b513      	push	{r0, r1, r4, lr}
 8015b96:	6803      	ldr	r3, [r0, #0]
 8015b98:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	e9cd 3300 	strd	r3, r3, [sp]
 8015ba2:	466b      	mov	r3, sp
 8015ba4:	47a0      	blx	r4
 8015ba6:	b002      	add	sp, #8
 8015ba8:	bd10      	pop	{r4, pc}

08015baa <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015baa:	2301      	movs	r3, #1
 8015bac:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8015bb0:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8015bb4:	4770      	bx	lr

08015bb6 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015bb6:	2301      	movs	r3, #1
 8015bb8:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8015bbc:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8015bc0:	4770      	bx	lr

08015bc2 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015bc2:	2201      	movs	r2, #1
 8015bc4:	6843      	ldr	r3, [r0, #4]
 8015bc6:	725a      	strb	r2, [r3, #9]
 8015bc8:	6840      	ldr	r0, [r0, #4]
 8015bca:	6803      	ldr	r3, [r0, #0]
 8015bcc:	691b      	ldr	r3, [r3, #16]
 8015bce:	4718      	bx	r3

08015bd0 <_ZN8touchgfx3HAL8flushDMAEv>:
 8015bd0:	6840      	ldr	r0, [r0, #4]
 8015bd2:	6803      	ldr	r3, [r0, #0]
 8015bd4:	689b      	ldr	r3, [r3, #8]
 8015bd6:	4718      	bx	r3

08015bd8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8015bd8:	b530      	push	{r4, r5, lr}
 8015bda:	b08b      	sub	sp, #44	@ 0x2c
 8015bdc:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8015be0:	6804      	ldr	r4, [r0, #0]
 8015be2:	9509      	str	r5, [sp, #36]	@ 0x24
 8015be4:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8015be8:	9508      	str	r5, [sp, #32]
 8015bea:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8015bee:	9507      	str	r5, [sp, #28]
 8015bf0:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8015bf4:	9506      	str	r5, [sp, #24]
 8015bf6:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8015bfa:	9505      	str	r5, [sp, #20]
 8015bfc:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8015c00:	9504      	str	r5, [sp, #16]
 8015c02:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8015c06:	9503      	str	r5, [sp, #12]
 8015c08:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8015c0c:	9502      	str	r5, [sp, #8]
 8015c0e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8015c12:	e9cd 3500 	strd	r3, r5, [sp]
 8015c16:	4613      	mov	r3, r2
 8015c18:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	47a0      	blx	r4
 8015c1e:	b00b      	add	sp, #44	@ 0x2c
 8015c20:	bd30      	pop	{r4, r5, pc}
	...

08015c24 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015c24:	4b04      	ldr	r3, [pc, #16]	@ (8015c38 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015c26:	781b      	ldrb	r3, [r3, #0]
 8015c28:	b123      	cbz	r3, 8015c34 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8015c2a:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8015c2e:	f080 0001 	eor.w	r0, r0, #1
 8015c32:	4770      	bx	lr
 8015c34:	2001      	movs	r0, #1
 8015c36:	4770      	bx	lr
 8015c38:	2005bd1a 	.word	0x2005bd1a

08015c3c <_ZN8touchgfx3HAL8endFrameEv>:
 8015c3c:	b510      	push	{r4, lr}
 8015c3e:	4604      	mov	r4, r0
 8015c40:	6840      	ldr	r0, [r0, #4]
 8015c42:	6803      	ldr	r3, [r0, #0]
 8015c44:	689b      	ldr	r3, [r3, #8]
 8015c46:	4798      	blx	r3
 8015c48:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8015c4c:	b113      	cbz	r3, 8015c54 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015c4e:	2301      	movs	r3, #1
 8015c50:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8015c54:	bd10      	pop	{r4, pc}

08015c56 <_ZN8touchgfx3HAL10initializeEv>:
 8015c56:	b510      	push	{r4, lr}
 8015c58:	4604      	mov	r4, r0
 8015c5a:	f7fc ffb3 	bl	8012bc4 <_ZN8touchgfx10OSWrappers10initializeEv>
 8015c5e:	f7fc fc4d 	bl	80124fc <_ZN8touchgfx4GPIO4initEv>
 8015c62:	6860      	ldr	r0, [r4, #4]
 8015c64:	6803      	ldr	r3, [r0, #0]
 8015c66:	68db      	ldr	r3, [r3, #12]
 8015c68:	4798      	blx	r3
 8015c6a:	68e0      	ldr	r0, [r4, #12]
 8015c6c:	6803      	ldr	r3, [r0, #0]
 8015c6e:	689b      	ldr	r3, [r3, #8]
 8015c70:	4798      	blx	r3
 8015c72:	6823      	ldr	r3, [r4, #0]
 8015c74:	4620      	mov	r0, r4
 8015c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015c7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015c7c:	4718      	bx	r3

08015c7e <_ZN8touchgfx3HAL9taskEntryEv>:
 8015c7e:	4604      	mov	r4, r0
 8015c80:	b508      	push	{r3, lr}
 8015c82:	6803      	ldr	r3, [r0, #0]
 8015c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015c88:	4798      	blx	r3
 8015c8a:	6823      	ldr	r3, [r4, #0]
 8015c8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015c8e:	4620      	mov	r0, r4
 8015c90:	4798      	blx	r3
 8015c92:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8015c96:	2b02      	cmp	r3, #2
 8015c98:	d001      	beq.n	8015c9e <_ZN8touchgfx3HAL9taskEntryEv+0x20>
 8015c9a:	f7fd f809 	bl	8012cb0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015c9e:	6823      	ldr	r3, [r4, #0]
 8015ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015ca2:	e7f4      	b.n	8015c8e <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08015ca4 <_ZN8touchgfx3HAL4tickEv>:
 8015ca4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015ca6:	6803      	ldr	r3, [r0, #0]
 8015ca8:	4604      	mov	r4, r0
 8015caa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8015cae:	4798      	blx	r3
 8015cb0:	4d60      	ldr	r5, [pc, #384]	@ (8015e34 <_ZN8touchgfx3HAL4tickEv+0x190>)
 8015cb2:	2800      	cmp	r0, #0
 8015cb4:	f000 809e 	beq.w	8015df4 <_ZN8touchgfx3HAL4tickEv+0x150>
 8015cb8:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8015cbc:	2b02      	cmp	r3, #2
 8015cbe:	d002      	beq.n	8015cc6 <_ZN8touchgfx3HAL4tickEv+0x22>
 8015cc0:	2001      	movs	r0, #1
 8015cc2:	f7fc fc23 	bl	801250c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015cc6:	2600      	movs	r6, #0
 8015cc8:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8015ccc:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8015cd0:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8015cd4:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8015cd8:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8015cdc:	b133      	cbz	r3, 8015cec <_ZN8touchgfx3HAL4tickEv+0x48>
 8015cde:	6823      	ldr	r3, [r4, #0]
 8015ce0:	4620      	mov	r0, r4
 8015ce2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8015ce6:	4798      	blx	r3
 8015ce8:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8015cec:	2601      	movs	r6, #1
 8015cee:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8015cf2:	6862      	ldr	r2, [r4, #4]
 8015cf4:	f083 0301 	eor.w	r3, r3, #1
 8015cf8:	7253      	strb	r3, [r2, #9]
 8015cfa:	702e      	strb	r6, [r5, #0]
 8015cfc:	f004 fd6a 	bl	801a7d4 <_ZN8touchgfx11Application11getInstanceEv>
 8015d00:	6803      	ldr	r3, [r0, #0]
 8015d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015d04:	4798      	blx	r3
 8015d06:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8015d0a:	b90b      	cbnz	r3, 8015d10 <_ZN8touchgfx3HAL4tickEv+0x6c>
 8015d0c:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8015d10:	f004 fd60 	bl	801a7d4 <_ZN8touchgfx11Application11getInstanceEv>
 8015d14:	6803      	ldr	r3, [r0, #0]
 8015d16:	695b      	ldr	r3, [r3, #20]
 8015d18:	4798      	blx	r3
 8015d1a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8015d1c:	6803      	ldr	r3, [r0, #0]
 8015d1e:	691b      	ldr	r3, [r3, #16]
 8015d20:	4798      	blx	r3
 8015d22:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8015d26:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8015d2a:	3b01      	subs	r3, #1
 8015d2c:	b2db      	uxtb	r3, r3
 8015d2e:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8015d32:	b10a      	cbz	r2, 8015d38 <_ZN8touchgfx3HAL4tickEv+0x94>
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d1eb      	bne.n	8015d10 <_ZN8touchgfx3HAL4tickEv+0x6c>
 8015d38:	4a3f      	ldr	r2, [pc, #252]	@ (8015e38 <_ZN8touchgfx3HAL4tickEv+0x194>)
 8015d3a:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8015d3e:	7813      	ldrb	r3, [r2, #0]
 8015d40:	3301      	adds	r3, #1
 8015d42:	b25b      	sxtb	r3, r3
 8015d44:	4299      	cmp	r1, r3
 8015d46:	7013      	strb	r3, [r2, #0]
 8015d48:	dc10      	bgt.n	8015d6c <_ZN8touchgfx3HAL4tickEv+0xc8>
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	68e0      	ldr	r0, [r4, #12]
 8015d4e:	7013      	strb	r3, [r2, #0]
 8015d50:	6803      	ldr	r3, [r0, #0]
 8015d52:	aa03      	add	r2, sp, #12
 8015d54:	68db      	ldr	r3, [r3, #12]
 8015d56:	a902      	add	r1, sp, #8
 8015d58:	4798      	blx	r3
 8015d5a:	6823      	ldr	r3, [r4, #0]
 8015d5c:	2800      	cmp	r0, #0
 8015d5e:	d059      	beq.n	8015e14 <_ZN8touchgfx3HAL4tickEv+0x170>
 8015d60:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015d64:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8015d68:	4620      	mov	r0, r4
 8015d6a:	4798      	blx	r3
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	6960      	ldr	r0, [r4, #20]
 8015d70:	f88d 3007 	strb.w	r3, [sp, #7]
 8015d74:	b158      	cbz	r0, 8015d8e <_ZN8touchgfx3HAL4tickEv+0xea>
 8015d76:	6803      	ldr	r3, [r0, #0]
 8015d78:	f10d 0107 	add.w	r1, sp, #7
 8015d7c:	68db      	ldr	r3, [r3, #12]
 8015d7e:	4798      	blx	r3
 8015d80:	b128      	cbz	r0, 8015d8e <_ZN8touchgfx3HAL4tickEv+0xea>
 8015d82:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8015d84:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015d88:	6803      	ldr	r3, [r0, #0]
 8015d8a:	68db      	ldr	r3, [r3, #12]
 8015d8c:	4798      	blx	r3
 8015d8e:	f104 001c 	add.w	r0, r4, #28
 8015d92:	f016 f9f3 	bl	802c17c <_ZN8touchgfx8Gestures4tickEv>
 8015d96:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8015d9a:	b30b      	cbz	r3, 8015de0 <_ZN8touchgfx3HAL4tickEv+0x13c>
 8015d9c:	6920      	ldr	r0, [r4, #16]
 8015d9e:	6803      	ldr	r3, [r0, #0]
 8015da0:	691b      	ldr	r3, [r3, #16]
 8015da2:	4798      	blx	r3
 8015da4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8015da6:	4606      	mov	r6, r0
 8015da8:	b903      	cbnz	r3, 8015dac <_ZN8touchgfx3HAL4tickEv+0x108>
 8015daa:	6760      	str	r0, [r4, #116]	@ 0x74
 8015dac:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8015dae:	4a23      	ldr	r2, [pc, #140]	@ (8015e3c <_ZN8touchgfx3HAL4tickEv+0x198>)
 8015db0:	1af3      	subs	r3, r6, r3
 8015db2:	4293      	cmp	r3, r2
 8015db4:	d914      	bls.n	8015de0 <_ZN8touchgfx3HAL4tickEv+0x13c>
 8015db6:	6920      	ldr	r0, [r4, #16]
 8015db8:	6803      	ldr	r3, [r0, #0]
 8015dba:	699b      	ldr	r3, [r3, #24]
 8015dbc:	4798      	blx	r3
 8015dbe:	2264      	movs	r2, #100	@ 0x64
 8015dc0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8015dc2:	1af3      	subs	r3, r6, r3
 8015dc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8015dc8:	fbb0 f0f3 	udiv	r0, r0, r3
 8015dcc:	2800      	cmp	r0, #0
 8015dce:	dc26      	bgt.n	8015e1e <_ZN8touchgfx3HAL4tickEv+0x17a>
 8015dd0:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8015dd4:	6920      	ldr	r0, [r4, #16]
 8015dd6:	2100      	movs	r1, #0
 8015dd8:	6803      	ldr	r3, [r0, #0]
 8015dda:	69db      	ldr	r3, [r3, #28]
 8015ddc:	4798      	blx	r3
 8015dde:	6766      	str	r6, [r4, #116]	@ 0x74
 8015de0:	6823      	ldr	r3, [r4, #0]
 8015de2:	4620      	mov	r0, r4
 8015de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015de8:	4798      	blx	r3
 8015dea:	f004 fcf3 	bl	801a7d4 <_ZN8touchgfx11Application11getInstanceEv>
 8015dee:	6803      	ldr	r3, [r0, #0]
 8015df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015df2:	4798      	blx	r3
 8015df4:	6823      	ldr	r3, [r4, #0]
 8015df6:	4620      	mov	r0, r4
 8015df8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8015dfc:	4798      	blx	r3
 8015dfe:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8015e02:	2b02      	cmp	r3, #2
 8015e04:	d002      	beq.n	8015e0c <_ZN8touchgfx3HAL4tickEv+0x168>
 8015e06:	2001      	movs	r0, #1
 8015e08:	f7fc fb9c 	bl	8012544 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	702b      	strb	r3, [r5, #0]
 8015e10:	b004      	add	sp, #16
 8015e12:	bd70      	pop	{r4, r5, r6, pc}
 8015e14:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8015e18:	4620      	mov	r0, r4
 8015e1a:	4798      	blx	r3
 8015e1c:	e7a6      	b.n	8015d6c <_ZN8touchgfx3HAL4tickEv+0xc8>
 8015e1e:	2863      	cmp	r0, #99	@ 0x63
 8015e20:	bfcb      	itete	gt
 8015e22:	2300      	movgt	r3, #0
 8015e24:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8015e28:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8015e2c:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8015e30:	e7d0      	b.n	8015dd4 <_ZN8touchgfx3HAL4tickEv+0x130>
 8015e32:	bf00      	nop
 8015e34:	2005bd20 	.word	0x2005bd20
 8015e38:	2005bd21 	.word	0x2005bd21
 8015e3c:	05f5e100 	.word	0x05f5e100

08015e40 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015e40:	b510      	push	{r4, lr}
 8015e42:	4604      	mov	r4, r0
 8015e44:	f7fc ff00 	bl	8012c48 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8015e48:	2200      	movs	r2, #0
 8015e4a:	6863      	ldr	r3, [r4, #4]
 8015e4c:	729a      	strb	r2, [r3, #10]
 8015e4e:	bd10      	pop	{r4, pc}

08015e50 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015e50:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8015e52:	301c      	adds	r0, #28
 8015e54:	f016 b990 	b.w	802c178 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015e58 <_ZN8touchgfx3HAL5touchEll>:
 8015e58:	b530      	push	{r4, r5, lr}
 8015e5a:	4604      	mov	r4, r0
 8015e5c:	b087      	sub	sp, #28
 8015e5e:	a804      	add	r0, sp, #16
 8015e60:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015e64:	f004 faa8 	bl	801a3b8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015e68:	9b04      	ldr	r3, [sp, #16]
 8015e6a:	a906      	add	r1, sp, #24
 8015e6c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015e70:	9b05      	ldr	r3, [sp, #20]
 8015e72:	a803      	add	r0, sp, #12
 8015e74:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015e78:	f004 faf0 	bl	801a45c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015e7c:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8015e80:	f104 001c 	add.w	r0, r4, #28
 8015e84:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015e88:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015e8c:	b189      	cbz	r1, 8015eb2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015e8e:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8015e92:	9300      	str	r3, [sp, #0]
 8015e94:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8015e98:	4613      	mov	r3, r2
 8015e9a:	462a      	mov	r2, r5
 8015e9c:	f016 f97c 	bl	802c198 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015ea0:	b128      	cbz	r0, 8015eae <_ZN8touchgfx3HAL5touchEll+0x56>
 8015ea2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015ea6:	6623      	str	r3, [r4, #96]	@ 0x60
 8015ea8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015eac:	6663      	str	r3, [r4, #100]	@ 0x64
 8015eae:	b007      	add	sp, #28
 8015eb0:	bd30      	pop	{r4, r5, pc}
 8015eb2:	f016 f9b1 	bl	802c218 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015eb6:	2301      	movs	r3, #1
 8015eb8:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8015ebc:	e7f1      	b.n	8015ea2 <_ZN8touchgfx3HAL5touchEll+0x4a>

08015ebe <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015ebe:	b510      	push	{r4, lr}
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d046      	beq.n	8015f52 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015ec4:	ea81 0002 	eor.w	r0, r1, r2
 8015ec8:	07c4      	lsls	r4, r0, #31
 8015eca:	d508      	bpl.n	8015ede <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015ecc:	440b      	add	r3, r1
 8015ece:	3a01      	subs	r2, #1
 8015ed0:	428b      	cmp	r3, r1
 8015ed2:	d93e      	bls.n	8015f52 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015ed4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015ed8:	f801 0b01 	strb.w	r0, [r1], #1
 8015edc:	e7f8      	b.n	8015ed0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015ede:	07d0      	lsls	r0, r2, #31
 8015ee0:	bf42      	ittt	mi
 8015ee2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015ee6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015eea:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015eee:	2b01      	cmp	r3, #1
 8015ef0:	d911      	bls.n	8015f16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015ef2:	ea81 0402 	eor.w	r4, r1, r2
 8015ef6:	07a4      	lsls	r4, r4, #30
 8015ef8:	4610      	mov	r0, r2
 8015efa:	d022      	beq.n	8015f42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8015efc:	f023 0401 	bic.w	r4, r3, #1
 8015f00:	440c      	add	r4, r1
 8015f02:	428c      	cmp	r4, r1
 8015f04:	4602      	mov	r2, r0
 8015f06:	d904      	bls.n	8015f12 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8015f08:	8812      	ldrh	r2, [r2, #0]
 8015f0a:	3002      	adds	r0, #2
 8015f0c:	f821 2b02 	strh.w	r2, [r1], #2
 8015f10:	e7f7      	b.n	8015f02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8015f12:	f003 0301 	and.w	r3, r3, #1
 8015f16:	f023 0003 	bic.w	r0, r3, #3
 8015f1a:	4408      	add	r0, r1
 8015f1c:	4288      	cmp	r0, r1
 8015f1e:	4614      	mov	r4, r2
 8015f20:	d904      	bls.n	8015f2c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8015f22:	6824      	ldr	r4, [r4, #0]
 8015f24:	3204      	adds	r2, #4
 8015f26:	f841 4b04 	str.w	r4, [r1], #4
 8015f2a:	e7f7      	b.n	8015f1c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8015f2c:	f003 0303 	and.w	r3, r3, #3
 8015f30:	440b      	add	r3, r1
 8015f32:	3a01      	subs	r2, #1
 8015f34:	428b      	cmp	r3, r1
 8015f36:	d90c      	bls.n	8015f52 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015f38:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015f3c:	f801 0b01 	strb.w	r0, [r1], #1
 8015f40:	e7f8      	b.n	8015f34 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8015f42:	0790      	lsls	r0, r2, #30
 8015f44:	d0e7      	beq.n	8015f16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015f46:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015f4a:	3b02      	subs	r3, #2
 8015f4c:	f821 0b02 	strh.w	r0, [r1], #2
 8015f50:	e7e1      	b.n	8015f16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015f52:	2001      	movs	r0, #1
 8015f54:	bd10      	pop	{r4, pc}

08015f56 <_ZN8touchgfx3HAL7noTouchEv>:
 8015f56:	b510      	push	{r4, lr}
 8015f58:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8015f5c:	4604      	mov	r4, r0
 8015f5e:	b153      	cbz	r3, 8015f76 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015f60:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8015f64:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8015f68:	2101      	movs	r1, #1
 8015f6a:	301c      	adds	r0, #28
 8015f6c:	f016 f954 	bl	802c218 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015f70:	2300      	movs	r3, #0
 8015f72:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8015f76:	bd10      	pop	{r4, pc}

08015f78 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f7c:	4604      	mov	r4, r0
 8015f7e:	2000      	movs	r0, #0
 8015f80:	b085      	sub	sp, #20
 8015f82:	ad04      	add	r5, sp, #16
 8015f84:	f845 0d04 	str.w	r0, [r5, #-4]!
 8015f88:	69a0      	ldr	r0, [r4, #24]
 8015f8a:	4699      	mov	r9, r3
 8015f8c:	6806      	ldr	r6, [r0, #0]
 8015f8e:	9501      	str	r5, [sp, #4]
 8015f90:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8015f94:	460f      	mov	r7, r1
 8015f96:	9500      	str	r5, [sp, #0]
 8015f98:	6835      	ldr	r5, [r6, #0]
 8015f9a:	4690      	mov	r8, r2
 8015f9c:	47a8      	blx	r5
 8015f9e:	4d10      	ldr	r5, [pc, #64]	@ (8015fe0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8015fa0:	4606      	mov	r6, r0
 8015fa2:	f8a5 9000 	strh.w	r9, [r5]
 8015fa6:	f7f9 fe1f 	bl	800fbe8 <_ZN8touchgfx3HAL3lcdEv>
 8015faa:	6803      	ldr	r3, [r0, #0]
 8015fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fae:	4798      	blx	r3
 8015fb0:	b128      	cbz	r0, 8015fbe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8015fb2:	2801      	cmp	r0, #1
 8015fb4:	d00b      	beq.n	8015fce <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8015fb6:	4630      	mov	r0, r6
 8015fb8:	b005      	add	sp, #20
 8015fba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fbe:	882b      	ldrh	r3, [r5, #0]
 8015fc0:	fb08 7203 	mla	r2, r8, r3, r7
 8015fc4:	9b03      	ldr	r3, [sp, #12]
 8015fc6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015fca:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8015fcc:	e7f3      	b.n	8015fb6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015fce:	882a      	ldrh	r2, [r5, #0]
 8015fd0:	9b03      	ldr	r3, [sp, #12]
 8015fd2:	fb08 7202 	mla	r2, r8, r2, r7
 8015fd6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015fda:	1a9a      	subs	r2, r3, r2
 8015fdc:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8015fde:	e7ea      	b.n	8015fb6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015fe0:	2005bd16 	.word	0x2005bd16

08015fe4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs>:
 8015fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fe6:	4b15      	ldr	r3, [pc, #84]	@ (801603c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x58>)
 8015fe8:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 8015fec:	881b      	ldrh	r3, [r3, #0]
 8015fee:	460f      	mov	r7, r1
 8015ff0:	fb93 f4f4 	sdiv	r4, r3, r4
 8015ff4:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8015ff6:	4606      	mov	r6, r0
 8015ff8:	f7f9 fdf6 	bl	800fbe8 <_ZN8touchgfx3HAL3lcdEv>
 8015ffc:	6803      	ldr	r3, [r0, #0]
 8015ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016000:	4798      	blx	r3
 8016002:	2801      	cmp	r0, #1
 8016004:	d00b      	beq.n	801601e <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x3a>
 8016006:	d303      	bcc.n	8016010 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x2c>
 8016008:	2802      	cmp	r0, #2
 801600a:	d010      	beq.n	801602e <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x4a>
 801600c:	63f5      	str	r5, [r6, #60]	@ 0x3c
 801600e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016010:	437c      	muls	r4, r7
 8016012:	4b0b      	ldr	r3, [pc, #44]	@ (8016040 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 8016014:	8819      	ldrh	r1, [r3, #0]
 8016016:	434c      	muls	r4, r1
 8016018:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 801601c:	e7f6      	b.n	801600c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 801601e:	437c      	muls	r4, r7
 8016020:	4b07      	ldr	r3, [pc, #28]	@ (8016040 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 8016022:	8819      	ldrh	r1, [r3, #0]
 8016024:	434c      	muls	r4, r1
 8016026:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801602a:	1b2d      	subs	r5, r5, r4
 801602c:	e7ee      	b.n	801600c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 801602e:	437c      	muls	r4, r7
 8016030:	4b03      	ldr	r3, [pc, #12]	@ (8016040 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 8016032:	8819      	ldrh	r1, [r3, #0]
 8016034:	434c      	muls	r4, r1
 8016036:	eba5 0584 	sub.w	r5, r5, r4, lsl #2
 801603a:	e7e7      	b.n	801600c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 801603c:	2005bd18 	.word	0x2005bd18
 8016040:	2005bd16 	.word	0x2005bd16

08016044 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8016044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016046:	b08b      	sub	sp, #44	@ 0x2c
 8016048:	4617      	mov	r7, r2
 801604a:	4604      	mov	r4, r0
 801604c:	460e      	mov	r6, r1
 801604e:	461d      	mov	r5, r3
 8016050:	f7f9 fdca 	bl	800fbe8 <_ZN8touchgfx3HAL3lcdEv>
 8016054:	6803      	ldr	r3, [r0, #0]
 8016056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016058:	4798      	blx	r3
 801605a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 801605e:	9007      	str	r0, [sp, #28]
 8016060:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8016064:	4b0d      	ldr	r3, [pc, #52]	@ (801609c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8016066:	6822      	ldr	r2, [r4, #0]
 8016068:	881b      	ldrh	r3, [r3, #0]
 801606a:	4631      	mov	r1, r6
 801606c:	9306      	str	r3, [sp, #24]
 801606e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8016072:	4620      	mov	r0, r4
 8016074:	9305      	str	r3, [sp, #20]
 8016076:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 801607a:	9304      	str	r3, [sp, #16]
 801607c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8016080:	9303      	str	r3, [sp, #12]
 8016082:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8016086:	9302      	str	r3, [sp, #8]
 8016088:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801608c:	e9cd 5300 	strd	r5, r3, [sp]
 8016090:	463b      	mov	r3, r7
 8016092:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8016094:	2200      	movs	r2, #0
 8016096:	47a8      	blx	r5
 8016098:	b00b      	add	sp, #44	@ 0x2c
 801609a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801609c:	2005bd16 	.word	0x2005bd16

080160a0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80160a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80160a4:	4698      	mov	r8, r3
 80160a6:	6803      	ldr	r3, [r0, #0]
 80160a8:	b08b      	sub	sp, #44	@ 0x2c
 80160aa:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 80160ac:	4b14      	ldr	r3, [pc, #80]	@ (8016100 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80160ae:	4617      	mov	r7, r2
 80160b0:	f8b3 9000 	ldrh.w	r9, [r3]
 80160b4:	460e      	mov	r6, r1
 80160b6:	4604      	mov	r4, r0
 80160b8:	f7f9 fd96 	bl	800fbe8 <_ZN8touchgfx3HAL3lcdEv>
 80160bc:	6803      	ldr	r3, [r0, #0]
 80160be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160c0:	4798      	blx	r3
 80160c2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80160c6:	2200      	movs	r2, #0
 80160c8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80160cc:	2302      	movs	r3, #2
 80160ce:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80160d2:	2301      	movs	r3, #1
 80160d4:	9305      	str	r3, [sp, #20]
 80160d6:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80160da:	4631      	mov	r1, r6
 80160dc:	9304      	str	r3, [sp, #16]
 80160de:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80160e2:	4620      	mov	r0, r4
 80160e4:	9303      	str	r3, [sp, #12]
 80160e6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80160ea:	9302      	str	r3, [sp, #8]
 80160ec:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80160f0:	e9cd 8300 	strd	r8, r3, [sp]
 80160f4:	463b      	mov	r3, r7
 80160f6:	47a8      	blx	r5
 80160f8:	b00b      	add	sp, #44	@ 0x2c
 80160fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160fe:	bf00      	nop
 8016100:	2005bd16 	.word	0x2005bd16

08016104 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8016104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016108:	4698      	mov	r8, r3
 801610a:	6803      	ldr	r3, [r0, #0]
 801610c:	b087      	sub	sp, #28
 801610e:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 8016110:	4b10      	ldr	r3, [pc, #64]	@ (8016154 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8016112:	460e      	mov	r6, r1
 8016114:	f8b3 9000 	ldrh.w	r9, [r3]
 8016118:	4617      	mov	r7, r2
 801611a:	4604      	mov	r4, r0
 801611c:	f7f9 fd64 	bl	800fbe8 <_ZN8touchgfx3HAL3lcdEv>
 8016120:	6803      	ldr	r3, [r0, #0]
 8016122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016124:	4798      	blx	r3
 8016126:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 801612a:	f8cd 900c 	str.w	r9, [sp, #12]
 801612e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8016132:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8016136:	463a      	mov	r2, r7
 8016138:	9302      	str	r3, [sp, #8]
 801613a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801613e:	4631      	mov	r1, r6
 8016140:	9301      	str	r3, [sp, #4]
 8016142:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8016146:	4620      	mov	r0, r4
 8016148:	9300      	str	r3, [sp, #0]
 801614a:	4643      	mov	r3, r8
 801614c:	47a8      	blx	r5
 801614e:	b007      	add	sp, #28
 8016150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016154:	2005bd16 	.word	0x2005bd16

08016158 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8016158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801615c:	4604      	mov	r4, r0
 801615e:	b08f      	sub	sp, #60	@ 0x3c
 8016160:	4610      	mov	r0, r2
 8016162:	460d      	mov	r5, r1
 8016164:	4691      	mov	r9, r2
 8016166:	461e      	mov	r6, r3
 8016168:	f007 fd20 	bl	801dbac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801616c:	2800      	cmp	r0, #0
 801616e:	f000 809d 	beq.w	80162ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8016172:	6823      	ldr	r3, [r4, #0]
 8016174:	4620      	mov	r0, r4
 8016176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016178:	4798      	blx	r3
 801617a:	6823      	ldr	r3, [r4, #0]
 801617c:	f8df b190 	ldr.w	fp, [pc, #400]	@ 8016310 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8016180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016182:	4620      	mov	r0, r4
 8016184:	4798      	blx	r3
 8016186:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8016314 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801618a:	f8bb 3000 	ldrh.w	r3, [fp]
 801618e:	4f5d      	ldr	r7, [pc, #372]	@ (8016304 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016190:	9301      	str	r3, [sp, #4]
 8016192:	f8ba 3000 	ldrh.w	r3, [sl]
 8016196:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 801619a:	9302      	str	r3, [sp, #8]
 801619c:	883b      	ldrh	r3, [r7, #0]
 801619e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80161a2:	9303      	str	r3, [sp, #12]
 80161a4:	4b58      	ldr	r3, [pc, #352]	@ (8016308 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80161a6:	4640      	mov	r0, r8
 80161a8:	881a      	ldrh	r2, [r3, #0]
 80161aa:	9305      	str	r3, [sp, #20]
 80161ac:	9204      	str	r2, [sp, #16]
 80161ae:	f007 fd91 	bl	801dcd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80161b2:	8038      	strh	r0, [r7, #0]
 80161b4:	4640      	mov	r0, r8
 80161b6:	f007 fdc1 	bl	801dd3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80161ba:	9b05      	ldr	r3, [sp, #20]
 80161bc:	b280      	uxth	r0, r0
 80161be:	8018      	strh	r0, [r3, #0]
 80161c0:	4b52      	ldr	r3, [pc, #328]	@ (801630c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80161c2:	781b      	ldrb	r3, [r3, #0]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d174      	bne.n	80162b2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80161c8:	883b      	ldrh	r3, [r7, #0]
 80161ca:	f8aa 0000 	strh.w	r0, [sl]
 80161ce:	f8ab 3000 	strh.w	r3, [fp]
 80161d2:	4648      	mov	r0, r9
 80161d4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 80161d8:	f007 fce8 	bl	801dbac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80161dc:	2200      	movs	r2, #0
 80161de:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80161e2:	4611      	mov	r1, r2
 80161e4:	4628      	mov	r0, r5
 80161e6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80161ea:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80161ee:	f7fa fa60 	bl	80106b2 <_ZN8touchgfx8Drawable5setXYEss>
 80161f2:	2301      	movs	r3, #1
 80161f4:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 80161f8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80161fc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016200:	2b00      	cmp	r3, #0
 8016202:	dd5c      	ble.n	80162be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8016204:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8016208:	2b00      	cmp	r3, #0
 801620a:	dd58      	ble.n	80162be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801620c:	462a      	mov	r2, r5
 801620e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016212:	ab0a      	add	r3, sp, #40	@ 0x28
 8016214:	6851      	ldr	r1, [r2, #4]
 8016216:	c303      	stmia	r3!, {r0, r1}
 8016218:	4631      	mov	r1, r6
 801621a:	a80a      	add	r0, sp, #40	@ 0x28
 801621c:	f7fe fee4 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 8016220:	2100      	movs	r1, #0
 8016222:	4b38      	ldr	r3, [pc, #224]	@ (8016304 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016224:	910c      	str	r1, [sp, #48]	@ 0x30
 8016226:	f9b3 2000 	ldrsh.w	r2, [r3]
 801622a:	4b37      	ldr	r3, [pc, #220]	@ (8016308 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801622c:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8016230:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016234:	aa0a      	add	r2, sp, #40	@ 0x28
 8016236:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801623a:	ab08      	add	r3, sp, #32
 801623c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016240:	e883 0003 	stmia.w	r3, {r0, r1}
 8016244:	4618      	mov	r0, r3
 8016246:	a90c      	add	r1, sp, #48	@ 0x30
 8016248:	f7fe fece 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 801624c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801624e:	2b00      	cmp	r3, #0
 8016250:	d13c      	bne.n	80162cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8016252:	2000      	movs	r0, #0
 8016254:	2600      	movs	r6, #0
 8016256:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 801625a:	696b      	ldr	r3, [r5, #20]
 801625c:	682a      	ldr	r2, [r5, #0]
 801625e:	616e      	str	r6, [r5, #20]
 8016260:	9305      	str	r3, [sp, #20]
 8016262:	6892      	ldr	r2, [r2, #8]
 8016264:	a908      	add	r1, sp, #32
 8016266:	4628      	mov	r0, r5
 8016268:	4790      	blx	r2
 801626a:	9b05      	ldr	r3, [sp, #20]
 801626c:	4652      	mov	r2, sl
 801626e:	616b      	str	r3, [r5, #20]
 8016270:	4649      	mov	r1, r9
 8016272:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8016276:	4628      	mov	r0, r5
 8016278:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 801627c:	f7fa fa19 	bl	80106b2 <_ZN8touchgfx8Drawable5setXYEss>
 8016280:	9a01      	ldr	r2, [sp, #4]
 8016282:	4b23      	ldr	r3, [pc, #140]	@ (8016310 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8016284:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8016288:	801a      	strh	r2, [r3, #0]
 801628a:	9a02      	ldr	r2, [sp, #8]
 801628c:	4b21      	ldr	r3, [pc, #132]	@ (8016314 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801628e:	4620      	mov	r0, r4
 8016290:	801a      	strh	r2, [r3, #0]
 8016292:	9a03      	ldr	r2, [sp, #12]
 8016294:	4b1b      	ldr	r3, [pc, #108]	@ (8016304 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016296:	801a      	strh	r2, [r3, #0]
 8016298:	4b1b      	ldr	r3, [pc, #108]	@ (8016308 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801629a:	9a04      	ldr	r2, [sp, #16]
 801629c:	801a      	strh	r2, [r3, #0]
 801629e:	6823      	ldr	r3, [r4, #0]
 80162a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162a2:	4798      	blx	r3
 80162a4:	6823      	ldr	r3, [r4, #0]
 80162a6:	4620      	mov	r0, r4
 80162a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80162aa:	4798      	blx	r3
 80162ac:	b00f      	add	sp, #60	@ 0x3c
 80162ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162b2:	883b      	ldrh	r3, [r7, #0]
 80162b4:	f8ab 0000 	strh.w	r0, [fp]
 80162b8:	f8aa 3000 	strh.w	r3, [sl]
 80162bc:	e789      	b.n	80161d2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80162be:	462a      	mov	r2, r5
 80162c0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80162c4:	ab0a      	add	r3, sp, #40	@ 0x28
 80162c6:	6851      	ldr	r1, [r2, #4]
 80162c8:	c303      	stmia	r3!, {r0, r1}
 80162ca:	e7a9      	b.n	8016220 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80162cc:	a807      	add	r0, sp, #28
 80162ce:	f007 fe77 	bl	801dfc0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80162d2:	4606      	mov	r6, r0
 80162d4:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80162d6:	6803      	ldr	r3, [r0, #0]
 80162d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162da:	4798      	blx	r3
 80162dc:	4286      	cmp	r6, r0
 80162de:	d1b8      	bne.n	8016252 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80162e0:	f7f9 fc82 	bl	800fbe8 <_ZN8touchgfx3HAL3lcdEv>
 80162e4:	6803      	ldr	r3, [r0, #0]
 80162e6:	4606      	mov	r6, r0
 80162e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80162ea:	a807      	add	r0, sp, #28
 80162ec:	9305      	str	r3, [sp, #20]
 80162ee:	f007 fe67 	bl	801dfc0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80162f2:	9b05      	ldr	r3, [sp, #20]
 80162f4:	4601      	mov	r1, r0
 80162f6:	4630      	mov	r0, r6
 80162f8:	4798      	blx	r3
 80162fa:	f080 0001 	eor.w	r0, r0, #1
 80162fe:	b2c0      	uxtb	r0, r0
 8016300:	e7a8      	b.n	8016254 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8016302:	bf00      	nop
 8016304:	2005bd10 	.word	0x2005bd10
 8016308:	2005bd12 	.word	0x2005bd12
 801630c:	2005bd14 	.word	0x2005bd14
 8016310:	2005bd16 	.word	0x2005bd16
 8016314:	2005bd18 	.word	0x2005bd18

08016318 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8016318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801631c:	461d      	mov	r5, r3
 801631e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016322:	2400      	movs	r4, #0
 8016324:	b08a      	sub	sp, #40	@ 0x28
 8016326:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801632a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801632e:	4690      	mov	r8, r2
 8016330:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016334:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8016338:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 801633c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016340:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8016344:	4607      	mov	r7, r0
 8016346:	f8ad 301c 	strh.w	r3, [sp, #28]
 801634a:	9404      	str	r4, [sp, #16]
 801634c:	f88d 4020 	strb.w	r4, [sp, #32]
 8016350:	f7fc fa70 	bl	8012834 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016354:	fb06 8505 	mla	r5, r6, r5, r8
 8016358:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801635c:	6878      	ldr	r0, [r7, #4]
 801635e:	9505      	str	r5, [sp, #20]
 8016360:	f8ad 601e 	strh.w	r6, [sp, #30]
 8016364:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8016368:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 801636c:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8016370:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8016374:	6803      	ldr	r3, [r0, #0]
 8016376:	a901      	add	r1, sp, #4
 8016378:	685b      	ldr	r3, [r3, #4]
 801637a:	4798      	blx	r3
 801637c:	b00a      	add	sp, #40	@ 0x28
 801637e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016382 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8016382:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016386:	2400      	movs	r4, #0
 8016388:	461d      	mov	r5, r3
 801638a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801638e:	4691      	mov	r9, r2
 8016390:	b08b      	sub	sp, #44	@ 0x2c
 8016392:	4688      	mov	r8, r1
 8016394:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8016398:	4607      	mov	r7, r0
 801639a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801639e:	9404      	str	r4, [sp, #16]
 80163a0:	f7fc fa48 	bl	8012834 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80163a4:	fb06 9505 	mla	r5, r6, r5, r9
 80163a8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80163ac:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80163b0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80163b4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	9505      	str	r5, [sp, #20]
 80163bc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80163c0:	f8ad 401c 	strh.w	r4, [sp, #28]
 80163c4:	f8ad 601e 	strh.w	r6, [sp, #30]
 80163c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80163cc:	f8ad 4020 	strh.w	r4, [sp, #32]
 80163d0:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80163d4:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80163d8:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80163dc:	6803      	ldr	r3, [r0, #0]
 80163de:	a901      	add	r1, sp, #4
 80163e0:	685b      	ldr	r3, [r3, #4]
 80163e2:	4798      	blx	r3
 80163e4:	b00b      	add	sp, #44	@ 0x2c
 80163e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080163ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80163ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163f0:	4698      	mov	r8, r3
 80163f2:	2300      	movs	r3, #0
 80163f4:	b08a      	sub	sp, #40	@ 0x28
 80163f6:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80163fa:	4606      	mov	r6, r0
 80163fc:	2d0b      	cmp	r5, #11
 80163fe:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8016402:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8016406:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 801640a:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 801640e:	9304      	str	r3, [sp, #16]
 8016410:	d137      	bne.n	8016482 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8016412:	2380      	movs	r3, #128	@ 0x80
 8016414:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016418:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801641c:	f88d 0020 	strb.w	r0, [sp, #32]
 8016420:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016424:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8016428:	4630      	mov	r0, r6
 801642a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801642e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8016432:	9203      	str	r2, [sp, #12]
 8016434:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016438:	f7fc f9fc 	bl	8012834 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801643c:	2c0b      	cmp	r4, #11
 801643e:	bf8c      	ite	hi
 8016440:	2100      	movhi	r1, #0
 8016442:	4b1b      	ldrls	r3, [pc, #108]	@ (80164b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8016444:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8016448:	bf98      	it	ls
 801644a:	5d19      	ldrbls	r1, [r3, r4]
 801644c:	fb02 8307 	mla	r3, r2, r7, r8
 8016450:	10c9      	asrs	r1, r1, #3
 8016452:	fb01 0003 	mla	r0, r1, r3, r0
 8016456:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 801645a:	9005      	str	r0, [sp, #20]
 801645c:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8016460:	2300      	movs	r3, #0
 8016462:	6870      	ldr	r0, [r6, #4]
 8016464:	f8ad 701e 	strh.w	r7, [sp, #30]
 8016468:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 801646c:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8016470:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8016474:	6803      	ldr	r3, [r0, #0]
 8016476:	a901      	add	r1, sp, #4
 8016478:	685b      	ldr	r3, [r3, #4]
 801647a:	4798      	blx	r3
 801647c:	b00a      	add	sp, #40	@ 0x28
 801647e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016482:	2d02      	cmp	r5, #2
 8016484:	d109      	bne.n	801649a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8016486:	28ff      	cmp	r0, #255	@ 0xff
 8016488:	d105      	bne.n	8016496 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801648a:	f1bc 0f00 	cmp.w	ip, #0
 801648e:	bf14      	ite	ne
 8016490:	2340      	movne	r3, #64	@ 0x40
 8016492:	2320      	moveq	r3, #32
 8016494:	e7be      	b.n	8016414 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8016496:	2340      	movs	r3, #64	@ 0x40
 8016498:	e7bc      	b.n	8016414 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801649a:	28ff      	cmp	r0, #255	@ 0xff
 801649c:	d105      	bne.n	80164aa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801649e:	f1bc 0f00 	cmp.w	ip, #0
 80164a2:	bf14      	ite	ne
 80164a4:	2304      	movne	r3, #4
 80164a6:	2301      	moveq	r3, #1
 80164a8:	e7b4      	b.n	8016414 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80164aa:	2304      	movs	r3, #4
 80164ac:	e7b2      	b.n	8016414 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80164ae:	bf00      	nop
 80164b0:	080309cc 	.word	0x080309cc

080164b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80164b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164b8:	b08b      	sub	sp, #44	@ 0x2c
 80164ba:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 80164be:	461d      	mov	r5, r3
 80164c0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80164c4:	bf14      	ite	ne
 80164c6:	2308      	movne	r3, #8
 80164c8:	2302      	moveq	r3, #2
 80164ca:	2400      	movs	r4, #0
 80164cc:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 80164d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80164d4:	4688      	mov	r8, r1
 80164d6:	4693      	mov	fp, r2
 80164d8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 80164dc:	9404      	str	r4, [sp, #16]
 80164de:	4607      	mov	r7, r0
 80164e0:	f7fc f9a8 	bl	8012834 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80164e4:	2e0b      	cmp	r6, #11
 80164e6:	bf98      	it	ls
 80164e8:	4b15      	ldrls	r3, [pc, #84]	@ (8016540 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80164ea:	fb05 b50a 	mla	r5, r5, sl, fp
 80164ee:	bf98      	it	ls
 80164f0:	5d9c      	ldrbls	r4, [r3, r6]
 80164f2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80164f6:	10e4      	asrs	r4, r4, #3
 80164f8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80164fc:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8016500:	fb04 0405 	mla	r4, r4, r5, r0
 8016504:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016508:	2300      	movs	r3, #0
 801650a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801650e:	6878      	ldr	r0, [r7, #4]
 8016510:	9405      	str	r4, [sp, #20]
 8016512:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016516:	f8ad a01e 	strh.w	sl, [sp, #30]
 801651a:	f8cd 8010 	str.w	r8, [sp, #16]
 801651e:	f88d 9020 	strb.w	r9, [sp, #32]
 8016522:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8016526:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801652a:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 801652e:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8016532:	6803      	ldr	r3, [r0, #0]
 8016534:	a901      	add	r1, sp, #4
 8016536:	685b      	ldr	r3, [r3, #4]
 8016538:	4798      	blx	r3
 801653a:	b00b      	add	sp, #44	@ 0x2c
 801653c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016540:	080309cc 	.word	0x080309cc

08016544 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016548:	461e      	mov	r6, r3
 801654a:	4b0a      	ldr	r3, [pc, #40]	@ (8016574 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 801654c:	460f      	mov	r7, r1
 801654e:	881d      	ldrh	r5, [r3, #0]
 8016550:	4690      	mov	r8, r2
 8016552:	f7f9 fb49 	bl	800fbe8 <_ZN8touchgfx3HAL3lcdEv>
 8016556:	6803      	ldr	r3, [r0, #0]
 8016558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801655a:	4798      	blx	r3
 801655c:	280b      	cmp	r0, #11
 801655e:	bf8e      	itee	hi
 8016560:	2400      	movhi	r4, #0
 8016562:	4b05      	ldrls	r3, [pc, #20]	@ (8016578 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8016564:	5c1c      	ldrbls	r4, [r3, r0]
 8016566:	fb08 7005 	mla	r0, r8, r5, r7
 801656a:	10e4      	asrs	r4, r4, #3
 801656c:	fb04 6000 	mla	r0, r4, r0, r6
 8016570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016574:	2005bd16 	.word	0x2005bd16
 8016578:	080309cc 	.word	0x080309cc

0801657c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801657c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801657e:	2500      	movs	r5, #0
 8016580:	b08b      	sub	sp, #44	@ 0x2c
 8016582:	461f      	mov	r7, r3
 8016584:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8016588:	4604      	mov	r4, r0
 801658a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801658e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8016592:	4616      	mov	r6, r2
 8016594:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016598:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801659c:	9504      	str	r5, [sp, #16]
 801659e:	f8ad 301a 	strh.w	r3, [sp, #26]
 80165a2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80165a6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80165aa:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80165ae:	f88d 3020 	strb.w	r3, [sp, #32]
 80165b2:	f7fc f93f 	bl	8012834 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80165b6:	463a      	mov	r2, r7
 80165b8:	4631      	mov	r1, r6
 80165ba:	4603      	mov	r3, r0
 80165bc:	4620      	mov	r0, r4
 80165be:	f7ff ffc1 	bl	8016544 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80165c2:	4b0e      	ldr	r3, [pc, #56]	@ (80165fc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80165c4:	9005      	str	r0, [sp, #20]
 80165c6:	881b      	ldrh	r3, [r3, #0]
 80165c8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80165cc:	f7f9 fb0c 	bl	800fbe8 <_ZN8touchgfx3HAL3lcdEv>
 80165d0:	6803      	ldr	r3, [r0, #0]
 80165d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165d4:	4798      	blx	r3
 80165d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80165d8:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 80165dc:	9304      	str	r3, [sp, #16]
 80165de:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80165e2:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80165e6:	6860      	ldr	r0, [r4, #4]
 80165e8:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80165ec:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 80165f0:	6803      	ldr	r3, [r0, #0]
 80165f2:	a901      	add	r1, sp, #4
 80165f4:	685b      	ldr	r3, [r3, #4]
 80165f6:	4798      	blx	r3
 80165f8:	b00b      	add	sp, #44	@ 0x2c
 80165fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165fc:	2005bd16 	.word	0x2005bd16

08016600 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016602:	b08d      	sub	sp, #52	@ 0x34
 8016604:	466b      	mov	r3, sp
 8016606:	e883 0006 	stmia.w	r3, {r1, r2}
 801660a:	2300      	movs	r3, #0
 801660c:	2501      	movs	r5, #1
 801660e:	9306      	str	r3, [sp, #24]
 8016610:	6803      	ldr	r3, [r0, #0]
 8016612:	9503      	str	r5, [sp, #12]
 8016614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016616:	4604      	mov	r4, r0
 8016618:	f8bd 6000 	ldrh.w	r6, [sp]
 801661c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8016620:	4798      	blx	r3
 8016622:	463a      	mov	r2, r7
 8016624:	4631      	mov	r1, r6
 8016626:	4603      	mov	r3, r0
 8016628:	4620      	mov	r0, r4
 801662a:	f7ff ff8b 	bl	8016544 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801662e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8016630:	9004      	str	r0, [sp, #16]
 8016632:	9307      	str	r3, [sp, #28]
 8016634:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016638:	f8ad 3020 	strh.w	r3, [sp, #32]
 801663c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016640:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8016644:	4b0e      	ldr	r3, [pc, #56]	@ (8016680 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8016646:	881b      	ldrh	r3, [r3, #0]
 8016648:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801664c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8016650:	f7f9 faca 	bl	800fbe8 <_ZN8touchgfx3HAL3lcdEv>
 8016654:	6803      	ldr	r3, [r0, #0]
 8016656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016658:	4798      	blx	r3
 801665a:	23ff      	movs	r3, #255	@ 0xff
 801665c:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8016660:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8016664:	6860      	ldr	r0, [r4, #4]
 8016666:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 801666a:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 801666e:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8016672:	6803      	ldr	r3, [r0, #0]
 8016674:	a903      	add	r1, sp, #12
 8016676:	685b      	ldr	r3, [r3, #4]
 8016678:	4798      	blx	r3
 801667a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 801667c:	b00d      	add	sp, #52	@ 0x34
 801667e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016680:	2005bd16 	.word	0x2005bd16

08016684 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8016684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016688:	b08c      	sub	sp, #48	@ 0x30
 801668a:	466d      	mov	r5, sp
 801668c:	461e      	mov	r6, r3
 801668e:	2300      	movs	r3, #0
 8016690:	e885 0006 	stmia.w	r5, {r1, r2}
 8016694:	2501      	movs	r5, #1
 8016696:	9306      	str	r3, [sp, #24]
 8016698:	6803      	ldr	r3, [r0, #0]
 801669a:	9503      	str	r5, [sp, #12]
 801669c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801669e:	4604      	mov	r4, r0
 80166a0:	f8bd 7000 	ldrh.w	r7, [sp]
 80166a4:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80166a8:	4798      	blx	r3
 80166aa:	4642      	mov	r2, r8
 80166ac:	4639      	mov	r1, r7
 80166ae:	4603      	mov	r3, r0
 80166b0:	4620      	mov	r0, r4
 80166b2:	f7ff ff47 	bl	8016544 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80166b6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80166ba:	9004      	str	r0, [sp, #16]
 80166bc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80166c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80166c4:	9607      	str	r6, [sp, #28]
 80166c6:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80166ca:	4b10      	ldr	r3, [pc, #64]	@ (801670c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80166cc:	881b      	ldrh	r3, [r3, #0]
 80166ce:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80166d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80166d4:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80166d8:	f7f9 fa86 	bl	800fbe8 <_ZN8touchgfx3HAL3lcdEv>
 80166dc:	6803      	ldr	r3, [r0, #0]
 80166de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166e0:	4798      	blx	r3
 80166e2:	23ff      	movs	r3, #255	@ 0xff
 80166e4:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80166e8:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80166ec:	6860      	ldr	r0, [r4, #4]
 80166ee:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80166f2:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80166f6:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80166fa:	6803      	ldr	r3, [r0, #0]
 80166fc:	a903      	add	r1, sp, #12
 80166fe:	685b      	ldr	r3, [r3, #4]
 8016700:	4798      	blx	r3
 8016702:	4630      	mov	r0, r6
 8016704:	b00c      	add	sp, #48	@ 0x30
 8016706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801670a:	bf00      	nop
 801670c:	2005bd16 	.word	0x2005bd16

08016710 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8016710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016712:	b085      	sub	sp, #20
 8016714:	ac02      	add	r4, sp, #8
 8016716:	e884 0006 	stmia.w	r4, {r1, r2}
 801671a:	4605      	mov	r5, r0
 801671c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8016720:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8016724:	f7fc f886 	bl	8012834 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016728:	463a      	mov	r2, r7
 801672a:	4603      	mov	r3, r0
 801672c:	4631      	mov	r1, r6
 801672e:	4628      	mov	r0, r5
 8016730:	f7ff ff08 	bl	8016544 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016734:	4a05      	ldr	r2, [pc, #20]	@ (801674c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8016736:	682b      	ldr	r3, [r5, #0]
 8016738:	8812      	ldrh	r2, [r2, #0]
 801673a:	9200      	str	r2, [sp, #0]
 801673c:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 801673e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8016742:	4603      	mov	r3, r0
 8016744:	4628      	mov	r0, r5
 8016746:	47b0      	blx	r6
 8016748:	b005      	add	sp, #20
 801674a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801674c:	2005bd16 	.word	0x2005bd16

08016750 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016750:	b570      	push	{r4, r5, r6, lr}
 8016752:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8016756:	4604      	mov	r4, r0
 8016758:	b19b      	cbz	r3, 8016782 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801675a:	2002      	movs	r0, #2
 801675c:	f7fb ff0e 	bl	801257c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016760:	2300      	movs	r3, #0
 8016762:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8016766:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 801676a:	6823      	ldr	r3, [r4, #0]
 801676c:	4620      	mov	r0, r4
 801676e:	f8d3 50c8 	ldr.w	r5, [r3, #200]	@ 0xc8
 8016772:	f7fc f85f 	bl	8012834 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016776:	462b      	mov	r3, r5
 8016778:	4601      	mov	r1, r0
 801677a:	4620      	mov	r0, r4
 801677c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016780:	4718      	bx	r3
 8016782:	bd70      	pop	{r4, r5, r6, pc}

08016784 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8016784:	b538      	push	{r3, r4, r5, lr}
 8016786:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 801678a:	4604      	mov	r4, r0
 801678c:	428b      	cmp	r3, r1
 801678e:	460d      	mov	r5, r1
 8016790:	d006      	beq.n	80167a0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8016792:	6803      	ldr	r3, [r0, #0]
 8016794:	b929      	cbnz	r1, 80167a2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8016796:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801679a:	4798      	blx	r3
 801679c:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 80167a0:	bd38      	pop	{r3, r4, r5, pc}
 80167a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80167a6:	e7f8      	b.n	801679a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080167a8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80167a8:	b510      	push	{r4, lr}
 80167aa:	4b0c      	ldr	r3, [pc, #48]	@ (80167dc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x34>)
 80167ac:	4604      	mov	r4, r0
 80167ae:	781b      	ldrb	r3, [r3, #0]
 80167b0:	b953      	cbnz	r3, 80167c8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 80167b2:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 80167b6:	b93b      	cbnz	r3, 80167c8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 80167b8:	6840      	ldr	r0, [r0, #4]
 80167ba:	f000 f927 	bl	8016a0c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80167be:	b118      	cbz	r0, 80167c8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 80167c0:	6862      	ldr	r2, [r4, #4]
 80167c2:	7a53      	ldrb	r3, [r2, #9]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d0fc      	beq.n	80167c2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1a>
 80167c8:	f7fc fa30 	bl	8012c2c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80167cc:	4620      	mov	r0, r4
 80167ce:	2100      	movs	r1, #0
 80167d0:	f7ff ffd8 	bl	8016784 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80167d4:	4620      	mov	r0, r4
 80167d6:	f7fc f82d 	bl	8012834 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80167da:	bd10      	pop	{r4, pc}
 80167dc:	2005bd1a 	.word	0x2005bd1a

080167e0 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 80167e0:	b570      	push	{r4, r5, r6, lr}
 80167e2:	4604      	mov	r4, r0
 80167e4:	6803      	ldr	r3, [r0, #0]
 80167e6:	b919      	cbnz	r1, 80167f0 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 80167e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80167ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80167ee:	4718      	bx	r3
 80167f0:	2200      	movs	r2, #0
 80167f2:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 80167f6:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 80167fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80167fc:	4798      	blx	r3
 80167fe:	2101      	movs	r1, #1
 8016800:	4605      	mov	r5, r0
 8016802:	6863      	ldr	r3, [r4, #4]
 8016804:	4620      	mov	r0, r4
 8016806:	7299      	strb	r1, [r3, #10]
 8016808:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 801680c:	f7ff ffba 	bl	8016784 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016810:	4628      	mov	r0, r5
 8016812:	bd70      	pop	{r4, r5, r6, pc}

08016814 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016814:	4770      	bx	lr

08016816 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8016816:	2000      	movs	r0, #0
 8016818:	4770      	bx	lr

0801681a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801681a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801681e:	1a13      	subs	r3, r2, r0
 8016820:	4258      	negs	r0, r3
 8016822:	4158      	adcs	r0, r3
 8016824:	4770      	bx	lr

08016826 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016826:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801682a:	1a9b      	subs	r3, r3, r2
 801682c:	2b00      	cmp	r3, #0
 801682e:	bfdc      	itt	le
 8016830:	6882      	ldrle	r2, [r0, #8]
 8016832:	189b      	addle	r3, r3, r2
 8016834:	2b01      	cmp	r3, #1
 8016836:	bfcc      	ite	gt
 8016838:	2000      	movgt	r0, #0
 801683a:	2001      	movle	r0, #1
 801683c:	4770      	bx	lr

0801683e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801683e:	6902      	ldr	r2, [r0, #16]
 8016840:	6843      	ldr	r3, [r0, #4]
 8016842:	2024      	movs	r0, #36	@ 0x24
 8016844:	fb00 3002 	mla	r0, r0, r2, r3
 8016848:	4770      	bx	lr

0801684a <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801684a:	6803      	ldr	r3, [r0, #0]
 801684c:	691b      	ldr	r3, [r3, #16]
 801684e:	4718      	bx	r3

08016850 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8016850:	2301      	movs	r3, #1
 8016852:	b570      	push	{r4, r5, r6, lr}
 8016854:	7203      	strb	r3, [r0, #8]
 8016856:	4604      	mov	r4, r0
 8016858:	6840      	ldr	r0, [r0, #4]
 801685a:	6803      	ldr	r3, [r0, #0]
 801685c:	699b      	ldr	r3, [r3, #24]
 801685e:	4798      	blx	r3
 8016860:	6803      	ldr	r3, [r0, #0]
 8016862:	4605      	mov	r5, r0
 8016864:	2b40      	cmp	r3, #64	@ 0x40
 8016866:	d00c      	beq.n	8016882 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016868:	d810      	bhi.n	801688c <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801686a:	2b04      	cmp	r3, #4
 801686c:	d01d      	beq.n	80168aa <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801686e:	d804      	bhi.n	801687a <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8016870:	2b01      	cmp	r3, #1
 8016872:	d006      	beq.n	8016882 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016874:	2b02      	cmp	r3, #2
 8016876:	d02c      	beq.n	80168d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8016878:	bd70      	pop	{r4, r5, r6, pc}
 801687a:	2b08      	cmp	r3, #8
 801687c:	d01d      	beq.n	80168ba <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801687e:	2b20      	cmp	r3, #32
 8016880:	d1fa      	bne.n	8016878 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8016882:	6823      	ldr	r3, [r4, #0]
 8016884:	4620      	mov	r0, r4
 8016886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016888:	4798      	blx	r3
 801688a:	e013      	b.n	80168b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801688c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016890:	d0f7      	beq.n	8016882 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016892:	d804      	bhi.n	801689e <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8016894:	2b80      	cmp	r3, #128	@ 0x80
 8016896:	d0f4      	beq.n	8016882 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016898:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801689c:	e7f0      	b.n	8016880 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801689e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80168a2:	d0ee      	beq.n	8016882 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80168a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80168a8:	e7e5      	b.n	8016876 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80168aa:	6823      	ldr	r3, [r4, #0]
 80168ac:	7f01      	ldrb	r1, [r0, #28]
 80168ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80168b0:	4620      	mov	r0, r4
 80168b2:	4798      	blx	r3
 80168b4:	6823      	ldr	r3, [r4, #0]
 80168b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80168b8:	e006      	b.n	80168c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80168ba:	6823      	ldr	r3, [r4, #0]
 80168bc:	7f01      	ldrb	r1, [r0, #28]
 80168be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80168c0:	4620      	mov	r0, r4
 80168c2:	4798      	blx	r3
 80168c4:	6823      	ldr	r3, [r4, #0]
 80168c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80168c8:	4629      	mov	r1, r5
 80168ca:	4620      	mov	r0, r4
 80168cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80168d0:	4718      	bx	r3
 80168d2:	6823      	ldr	r3, [r4, #0]
 80168d4:	4620      	mov	r0, r4
 80168d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80168d8:	4798      	blx	r3
 80168da:	e7f3      	b.n	80168c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080168dc <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80168dc:	4770      	bx	lr

080168de <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80168de:	4770      	bx	lr

080168e0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80168e0:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80168e4:	1ad2      	subs	r2, r2, r3
 80168e6:	2a00      	cmp	r2, #0
 80168e8:	b510      	push	{r4, lr}
 80168ea:	bfdc      	itt	le
 80168ec:	6884      	ldrle	r4, [r0, #8]
 80168ee:	1912      	addle	r2, r2, r4
 80168f0:	2a01      	cmp	r2, #1
 80168f2:	dd16      	ble.n	8016922 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80168f4:	2424      	movs	r4, #36	@ 0x24
 80168f6:	6842      	ldr	r2, [r0, #4]
 80168f8:	fb04 2303 	mla	r3, r4, r3, r2
 80168fc:	f101 0220 	add.w	r2, r1, #32
 8016900:	f851 4b04 	ldr.w	r4, [r1], #4
 8016904:	4291      	cmp	r1, r2
 8016906:	f843 4b04 	str.w	r4, [r3], #4
 801690a:	d1f9      	bne.n	8016900 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801690c:	780a      	ldrb	r2, [r1, #0]
 801690e:	701a      	strb	r2, [r3, #0]
 8016910:	68c3      	ldr	r3, [r0, #12]
 8016912:	6882      	ldr	r2, [r0, #8]
 8016914:	3301      	adds	r3, #1
 8016916:	429a      	cmp	r2, r3
 8016918:	bfd8      	it	le
 801691a:	1a9b      	suble	r3, r3, r2
 801691c:	f3bf 8f5b 	dmb	ish
 8016920:	60c3      	str	r3, [r0, #12]
 8016922:	bd10      	pop	{r4, pc}

08016924 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016924:	6903      	ldr	r3, [r0, #16]
 8016926:	6882      	ldr	r2, [r0, #8]
 8016928:	3301      	adds	r3, #1
 801692a:	429a      	cmp	r2, r3
 801692c:	bfd8      	it	le
 801692e:	1a9b      	suble	r3, r3, r2
 8016930:	f3bf 8f5b 	dmb	ish
 8016934:	6103      	str	r3, [r0, #16]
 8016936:	4770      	bx	lr

08016938 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016938:	b570      	push	{r4, r5, r6, lr}
 801693a:	4604      	mov	r4, r0
 801693c:	460e      	mov	r6, r1
 801693e:	6860      	ldr	r0, [r4, #4]
 8016940:	6803      	ldr	r3, [r0, #0]
 8016942:	685b      	ldr	r3, [r3, #4]
 8016944:	4798      	blx	r3
 8016946:	2800      	cmp	r0, #0
 8016948:	d1f9      	bne.n	801693e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801694a:	4d0d      	ldr	r5, [pc, #52]	@ (8016980 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801694c:	6828      	ldr	r0, [r5, #0]
 801694e:	6803      	ldr	r3, [r0, #0]
 8016950:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016954:	4798      	blx	r3
 8016956:	f7fc f983 	bl	8012c60 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801695a:	6828      	ldr	r0, [r5, #0]
 801695c:	2101      	movs	r1, #1
 801695e:	f7ff ff11 	bl	8016784 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016962:	6860      	ldr	r0, [r4, #4]
 8016964:	4631      	mov	r1, r6
 8016966:	6803      	ldr	r3, [r0, #0]
 8016968:	689b      	ldr	r3, [r3, #8]
 801696a:	4798      	blx	r3
 801696c:	6823      	ldr	r3, [r4, #0]
 801696e:	4620      	mov	r0, r4
 8016970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016972:	4798      	blx	r3
 8016974:	6828      	ldr	r0, [r5, #0]
 8016976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801697a:	6803      	ldr	r3, [r0, #0]
 801697c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801697e:	4718      	bx	r3
 8016980:	2005bd1c 	.word	0x2005bd1c

08016984 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016984:	b508      	push	{r3, lr}
 8016986:	f7fc f951 	bl	8012c2c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801698a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801698e:	f7fc b95b 	b.w	8012c48 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016992 <_ZN8touchgfx13DMA_Interface5startEv>:
 8016992:	b510      	push	{r4, lr}
 8016994:	4604      	mov	r4, r0
 8016996:	6840      	ldr	r0, [r0, #4]
 8016998:	6803      	ldr	r3, [r0, #0]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	4798      	blx	r3
 801699e:	b948      	cbnz	r0, 80169b4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80169a0:	7a63      	ldrb	r3, [r4, #9]
 80169a2:	b13b      	cbz	r3, 80169b4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80169a4:	7a23      	ldrb	r3, [r4, #8]
 80169a6:	b92b      	cbnz	r3, 80169b4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80169a8:	6823      	ldr	r3, [r4, #0]
 80169aa:	4620      	mov	r0, r4
 80169ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80169b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80169b2:	4718      	bx	r3
 80169b4:	bd10      	pop	{r4, pc}

080169b6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80169b6:	b570      	push	{r4, r5, r6, lr}
 80169b8:	4604      	mov	r4, r0
 80169ba:	6840      	ldr	r0, [r0, #4]
 80169bc:	6803      	ldr	r3, [r0, #0]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	4798      	blx	r3
 80169c2:	4605      	mov	r5, r0
 80169c4:	b930      	cbnz	r0, 80169d4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80169c6:	7a23      	ldrb	r3, [r4, #8]
 80169c8:	b123      	cbz	r3, 80169d4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80169ca:	6860      	ldr	r0, [r4, #4]
 80169cc:	6803      	ldr	r3, [r0, #0]
 80169ce:	695b      	ldr	r3, [r3, #20]
 80169d0:	4798      	blx	r3
 80169d2:	7225      	strb	r5, [r4, #8]
 80169d4:	6860      	ldr	r0, [r4, #4]
 80169d6:	6803      	ldr	r3, [r0, #0]
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	4798      	blx	r3
 80169dc:	b928      	cbnz	r0, 80169ea <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80169de:	6823      	ldr	r3, [r4, #0]
 80169e0:	4620      	mov	r0, r4
 80169e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80169e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80169e8:	4718      	bx	r3
 80169ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80169ee:	f7fc b943 	b.w	8012c78 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

080169f4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80169f4:	6082      	str	r2, [r0, #8]
 80169f6:	2200      	movs	r2, #0
 80169f8:	b510      	push	{r4, lr}
 80169fa:	4c03      	ldr	r4, [pc, #12]	@ (8016a08 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80169fc:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016a00:	e9c0 4100 	strd	r4, r1, [r0]
 8016a04:	bd10      	pop	{r4, pc}
 8016a06:	bf00      	nop
 8016a08:	08030b1c 	.word	0x08030b1c

08016a0c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016a0c:	6840      	ldr	r0, [r0, #4]
 8016a0e:	6803      	ldr	r3, [r0, #0]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	4718      	bx	r3
 8016a14:	0000      	movs	r0, r0
	...

08016a18 <_ZN8touchgfxL10applyNoiseEiihhh>:
 8016a18:	fb80 0101 	smull	r0, r1, r0, r1
 8016a1c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8016a20:	4f1f      	ldr	r7, [pc, #124]	@ (8016aa0 <_ZN8touchgfxL10applyNoiseEiihhh+0x88>)
 8016a22:	461c      	mov	r4, r3
 8016a24:	fba0 bc07 	umull	fp, ip, r0, r7
 8016a28:	fb07 cc01 	mla	ip, r7, r1, ip
 8016a2c:	fbab 010b 	umull	r0, r1, fp, fp
 8016a30:	fb0b f70c 	mul.w	r7, fp, ip
 8016a34:	fb00 f30c 	mul.w	r3, r0, ip
 8016a38:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8016a3c:	fb0b 3301 	mla	r3, fp, r1, r3
 8016a40:	fba0 010b 	umull	r0, r1, r0, fp
 8016a44:	4616      	mov	r6, r2
 8016a46:	4419      	add	r1, r3
 8016a48:	a313      	add	r3, pc, #76	@ (adr r3, 8016a98 <_ZN8touchgfxL10applyNoiseEiihhh+0x80>)
 8016a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a4e:	f7e9 fc17 	bl	8000280 <__aeabi_ldivmod>
 8016a52:	2ef7      	cmp	r6, #247	@ 0xf7
 8016a54:	b290      	uxth	r0, r2
 8016a56:	bf9e      	ittt	ls
 8016a58:	f002 0207 	andls.w	r2, r2, #7
 8016a5c:	18b6      	addls	r6, r6, r2
 8016a5e:	b2f6      	uxtbls	r6, r6
 8016a60:	2cfb      	cmp	r4, #251	@ 0xfb
 8016a62:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8016a66:	bf9e      	ittt	ls
 8016a68:	f3c0 03c1 	ubfxls	r3, r0, #3, #2
 8016a6c:	18e4      	addls	r4, r4, r3
 8016a6e:	b2e4      	uxtbls	r4, r4
 8016a70:	2df7      	cmp	r5, #247	@ 0xf7
 8016a72:	bf9c      	itt	ls
 8016a74:	f3c0 1042 	ubfxls	r0, r0, #5, #3
 8016a78:	182d      	addls	r5, r5, r0
 8016a7a:	480a      	ldr	r0, [pc, #40]	@ (8016aa4 <_ZN8touchgfxL10applyNoiseEiihhh+0x8c>)
 8016a7c:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8016a80:	ea00 2006 	and.w	r0, r0, r6, lsl #8
 8016a84:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8016a88:	bf98      	it	ls
 8016a8a:	b2ed      	uxtbls	r5, r5
 8016a8c:	4304      	orrs	r4, r0
 8016a8e:	ea44 00d5 	orr.w	r0, r4, r5, lsr #3
 8016a92:	b280      	uxth	r0, r0
 8016a94:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8016a98:	797a8d77 	.word	0x797a8d77
 8016a9c:	00000000 	.word	0x00000000
 8016aa0:	00ec4ba7 	.word	0x00ec4ba7
 8016aa4:	fffff800 	.word	0xfffff800

08016aa8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh>:
 8016aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aac:	ed2d 8b02 	vpush	{d8}
 8016ab0:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8016ab4:	7c41      	ldrb	r1, [r0, #17]
 8016ab6:	b087      	sub	sp, #28
 8016ab8:	4605      	mov	r5, r0
 8016aba:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	@ 0x48
 8016abe:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	@ 0x4c
 8016ac2:	f89d a050 	ldrb.w	sl, [sp, #80]	@ 0x50
 8016ac6:	2900      	cmp	r1, #0
 8016ac8:	f000 809a 	beq.w	8016c00 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x158>
 8016acc:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8016ad0:	ed90 7a08 	vldr	s14, [r0, #32]
 8016ad4:	454a      	cmp	r2, r9
 8016ad6:	68c0      	ldr	r0, [r0, #12]
 8016ad8:	db25      	blt.n	8016b26 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x7e>
 8016ada:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8016ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ae2:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8016ae6:	bfc8      	it	gt
 8016ae8:	2200      	movgt	r2, #0
 8016aea:	2100      	movs	r1, #0
 8016aec:	5882      	ldr	r2, [r0, r2]
 8016aee:	7c2d      	ldrb	r5, [r5, #16]
 8016af0:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8016af4:	0950      	lsrs	r0, r2, #5
 8016af6:	f408 4e78 	and.w	lr, r8, #63488	@ 0xf800
 8016afa:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8016afe:	f3c2 0cc4 	ubfx	ip, r2, #3, #5
 8016b02:	eb04 0746 	add.w	r7, r4, r6, lsl #1
 8016b06:	2d00      	cmp	r5, #0
 8016b08:	d044      	beq.n	8016b94 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xec>
 8016b0a:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8016b0e:	d141      	bne.n	8016b94 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xec>
 8016b10:	bb61      	cbnz	r1, 8016b6c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xc4>
 8016b12:	ea4e 0000 	orr.w	r0, lr, r0
 8016b16:	ea4c 0500 	orr.w	r5, ip, r0
 8016b1a:	42bc      	cmp	r4, r7
 8016b1c:	f080 8216 	bcs.w	8016f4c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8016b20:	f824 5b02 	strh.w	r5, [r4], #2
 8016b24:	e7f9      	b.n	8016b1a <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x72>
 8016b26:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 8016b2a:	454f      	cmp	r7, r9
 8016b2c:	dc08      	bgt.n	8016b40 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x98>
 8016b2e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8016b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b36:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8016b3a:	bfd8      	it	le
 8016b3c:	2200      	movle	r2, #0
 8016b3e:	e7d4      	b.n	8016aea <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x42>
 8016b40:	eba9 0202 	sub.w	r2, r9, r2
 8016b44:	ee07 2a90 	vmov	s15, r2
 8016b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016b50:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8016b54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b5c:	ee17 2a90 	vmov	r2, s15
 8016b60:	bfd8      	it	le
 8016b62:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 8016b66:	0092      	lsls	r2, r2, #2
 8016b68:	5882      	ldr	r2, [r0, r2]
 8016b6a:	e7c0      	b.n	8016aee <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x46>
 8016b6c:	461e      	mov	r6, r3
 8016b6e:	b2d5      	uxtb	r5, r2
 8016b70:	fa5f f888 	uxtb.w	r8, r8
 8016b74:	f3c2 4a07 	ubfx	sl, r2, #16, #8
 8016b78:	42bc      	cmp	r4, r7
 8016b7a:	f080 81e7 	bcs.w	8016f4c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8016b7e:	4630      	mov	r0, r6
 8016b80:	9500      	str	r5, [sp, #0]
 8016b82:	4643      	mov	r3, r8
 8016b84:	4652      	mov	r2, sl
 8016b86:	4649      	mov	r1, r9
 8016b88:	f7ff ff46 	bl	8016a18 <_ZN8touchgfxL10applyNoiseEiihhh>
 8016b8c:	3601      	adds	r6, #1
 8016b8e:	f824 0b02 	strh.w	r0, [r4], #2
 8016b92:	e7f1      	b.n	8016b78 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xd0>
 8016b94:	0e12      	lsrs	r2, r2, #24
 8016b96:	fb02 f20a 	mul.w	r2, r2, sl
 8016b9a:	1c53      	adds	r3, r2, #1
 8016b9c:	eb03 2222 	add.w	r2, r3, r2, asr #8
 8016ba0:	1212      	asrs	r2, r2, #8
 8016ba2:	fb02 f50c 	mul.w	r5, r2, ip
 8016ba6:	fb02 f10e 	mul.w	r1, r2, lr
 8016baa:	4350      	muls	r0, r2
 8016bac:	43d2      	mvns	r2, r2
 8016bae:	26ff      	movs	r6, #255	@ 0xff
 8016bb0:	f8df c3ac 	ldr.w	ip, [pc, #940]	@ 8016f60 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 8016bb4:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8016bb8:	42bc      	cmp	r4, r7
 8016bba:	f080 81c7 	bcs.w	8016f4c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8016bbe:	f8b4 e000 	ldrh.w	lr, [r4]
 8016bc2:	ea0e 030c 	and.w	r3, lr, ip
 8016bc6:	f40e 68fc 	and.w	r8, lr, #2016	@ 0x7e0
 8016bca:	fb02 1303 	mla	r3, r2, r3, r1
 8016bce:	fb02 0808 	mla	r8, r2, r8, r0
 8016bd2:	f00e 0e1f 	and.w	lr, lr, #31
 8016bd6:	fb02 5e0e 	mla	lr, r2, lr, r5
 8016bda:	fb93 f3f6 	sdiv	r3, r3, r6
 8016bde:	fb98 f8f6 	sdiv	r8, r8, r6
 8016be2:	fb9e fef6 	sdiv	lr, lr, r6
 8016be6:	ea03 030c 	and.w	r3, r3, ip
 8016bea:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8016bee:	ea43 0308 	orr.w	r3, r3, r8
 8016bf2:	f00e 0e1f 	and.w	lr, lr, #31
 8016bf6:	ea43 030e 	orr.w	r3, r3, lr
 8016bfa:	f824 3b02 	strh.w	r3, [r4], #2
 8016bfe:	e7db      	b.n	8016bb8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x110>
 8016c00:	7c82      	ldrb	r2, [r0, #18]
 8016c02:	2a00      	cmp	r2, #0
 8016c04:	d050      	beq.n	8016ca8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x200>
 8016c06:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8016c0a:	ee07 2a90 	vmov	s15, r2
 8016c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c12:	ee07 3a10 	vmov	s14, r3
 8016c16:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8016c1a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8016c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c22:	461f      	mov	r7, r3
 8016c24:	f200 8096 	bhi.w	8016d54 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2ac>
 8016c28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016c2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016c30:	ee37 7a66 	vsub.f32	s14, s14, s13
 8016c34:	ee06 6a90 	vmov	s13, r6
 8016c38:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016c3c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c44:	bf44      	itt	mi
 8016c46:	eebd 7ac7 	vcvtmi.s32.f32	s14, s14
 8016c4a:	ed8d 7a02 	vstrmi	s14, [sp, #8]
 8016c4e:	ed95 7a08 	vldr	s14, [r5, #32]
 8016c52:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8016c56:	bf58      	it	pl
 8016c58:	9602      	strpl	r6, [sp, #8]
 8016c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c5e:	f640 71fc 	movw	r1, #4092	@ 0xffc
 8016c62:	bfc8      	it	gt
 8016c64:	2100      	movgt	r1, #0
 8016c66:	68ea      	ldr	r2, [r5, #12]
 8016c68:	f895 c010 	ldrb.w	ip, [r5, #16]
 8016c6c:	5852      	ldr	r2, [r2, r1]
 8016c6e:	9902      	ldr	r1, [sp, #8]
 8016c70:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 8016c74:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8016c78:	0950      	lsrs	r0, r2, #5
 8016c7a:	9103      	str	r1, [sp, #12]
 8016c7c:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 8016c80:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8016c84:	f3c2 01c4 	ubfx	r1, r2, #3, #5
 8016c88:	f1bc 0f00 	cmp.w	ip, #0
 8016c8c:	d024      	beq.n	8016cd8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x230>
 8016c8e:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8016c92:	d121      	bne.n	8016cd8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x230>
 8016c94:	ea4b 0b00 	orr.w	fp, fp, r0
 8016c98:	ea41 010b 	orr.w	r1, r1, fp
 8016c9c:	9a03      	ldr	r2, [sp, #12]
 8016c9e:	4294      	cmp	r4, r2
 8016ca0:	d255      	bcs.n	8016d4e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2a6>
 8016ca2:	f824 1b02 	strh.w	r1, [r4], #2
 8016ca6:	e7f9      	b.n	8016c9c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x1f4>
 8016ca8:	ee07 9a10 	vmov	s14, r9
 8016cac:	edd0 7a06 	vldr	s15, [r0, #24]
 8016cb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016cb4:	edd0 6a05 	vldr	s13, [r0, #20]
 8016cb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016cbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016cc0:	ed90 7a08 	vldr	s14, [r0, #32]
 8016cc4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8016cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ccc:	bf44      	itt	mi
 8016cce:	ed90 7a07 	vldrmi	s14, [r0, #28]
 8016cd2:	ee77 7ac7 	vsubmi.f32	s15, s15, s14
 8016cd6:	e79c      	b.n	8016c12 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x16a>
 8016cd8:	0e12      	lsrs	r2, r2, #24
 8016cda:	fb02 f20a 	mul.w	r2, r2, sl
 8016cde:	f102 0c01 	add.w	ip, r2, #1
 8016ce2:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8016ce6:	1212      	asrs	r2, r2, #8
 8016ce8:	4350      	muls	r0, r2
 8016cea:	4351      	muls	r1, r2
 8016cec:	fb02 fb0b 	mul.w	fp, r2, fp
 8016cf0:	43d2      	mvns	r2, r2
 8016cf2:	f04f 0eff 	mov.w	lr, #255	@ 0xff
 8016cf6:	f8df 8268 	ldr.w	r8, [pc, #616]	@ 8016f60 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 8016cfa:	9004      	str	r0, [sp, #16]
 8016cfc:	9105      	str	r1, [sp, #20]
 8016cfe:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8016d02:	9903      	ldr	r1, [sp, #12]
 8016d04:	428c      	cmp	r4, r1
 8016d06:	d222      	bcs.n	8016d4e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2a6>
 8016d08:	8820      	ldrh	r0, [r4, #0]
 8016d0a:	f400 61fc 	and.w	r1, r0, #2016	@ 0x7e0
 8016d0e:	460f      	mov	r7, r1
 8016d10:	9904      	ldr	r1, [sp, #16]
 8016d12:	ea00 0c08 	and.w	ip, r0, r8
 8016d16:	fb02 bc0c 	mla	ip, r2, ip, fp
 8016d1a:	fb02 1107 	mla	r1, r2, r7, r1
 8016d1e:	fb9c fcfe 	sdiv	ip, ip, lr
 8016d22:	fb91 f1fe 	sdiv	r1, r1, lr
 8016d26:	ea0c 0c08 	and.w	ip, ip, r8
 8016d2a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8016d2e:	ea4c 0101 	orr.w	r1, ip, r1
 8016d32:	f000 0c1f 	and.w	ip, r0, #31
 8016d36:	9805      	ldr	r0, [sp, #20]
 8016d38:	fb02 0c0c 	mla	ip, r2, ip, r0
 8016d3c:	fb9c fcfe 	sdiv	ip, ip, lr
 8016d40:	f00c 0c1f 	and.w	ip, ip, #31
 8016d44:	ea41 010c 	orr.w	r1, r1, ip
 8016d48:	f824 1b02 	strh.w	r1, [r4], #2
 8016d4c:	e7d9      	b.n	8016d02 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x25a>
 8016d4e:	9a02      	ldr	r2, [sp, #8]
 8016d50:	441a      	add	r2, r3
 8016d52:	4617      	mov	r7, r2
 8016d54:	441e      	add	r6, r3
 8016d56:	b236      	sxth	r6, r6
 8016d58:	42be      	cmp	r6, r7
 8016d5a:	f340 80f7 	ble.w	8016f4c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8016d5e:	ed95 7a07 	vldr	s14, [r5, #28]
 8016d62:	ee06 7a90 	vmov	s13, r7
 8016d66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016d6a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016d6e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d76:	f340 80b3 	ble.w	8016ee0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x438>
 8016d7a:	ee06 6a10 	vmov	s12, r6
 8016d7e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8016d82:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8016d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d8a:	bfdc      	itt	le
 8016d8c:	eebd 7ac7 	vcvtle.s32.f32	s14, s14
 8016d90:	ee17 8a10 	vmovle	r8, s14
 8016d94:	ed95 7a08 	vldr	s14, [r5, #32]
 8016d98:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8016d9c:	bfc8      	it	gt
 8016d9e:	46b0      	movgt	r8, r6
 8016da0:	ed9f 8a6d 	vldr	s16, [pc, #436]	@ 8016f58 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b0>
 8016da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016da8:	ed9f 6a6c 	vldr	s12, [pc, #432]	@ 8016f5c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b4>
 8016dac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8016db0:	7c2b      	ldrb	r3, [r5, #16]
 8016db2:	eba8 0707 	sub.w	r7, r8, r7
 8016db6:	fe38 8a06 	vselgt.f32	s16, s16, s12
 8016dba:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8016dbe:	eea7 8a27 	vfma.f32	s16, s14, s15
 8016dc2:	b1db      	cbz	r3, 8016dfc <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x354>
 8016dc4:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8016dc8:	d118      	bne.n	8016dfc <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x354>
 8016dca:	42bc      	cmp	r4, r7
 8016dcc:	d262      	bcs.n	8016e94 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3ec>
 8016dce:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8016dd2:	ee17 0a90 	vmov	r0, s15
 8016dd6:	68eb      	ldr	r3, [r5, #12]
 8016dd8:	4649      	mov	r1, r9
 8016dda:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8016dde:	b2d3      	uxtb	r3, r2
 8016de0:	9300      	str	r3, [sp, #0]
 8016de2:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8016de6:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8016dea:	f7ff fe15 	bl	8016a18 <_ZN8touchgfxL10applyNoiseEiihhh>
 8016dee:	f824 0b02 	strh.w	r0, [r4], #2
 8016df2:	edd5 7a08 	vldr	s15, [r5, #32]
 8016df6:	ee38 8a27 	vadd.f32	s16, s16, s15
 8016dfa:	e7e6      	b.n	8016dca <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x322>
 8016dfc:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 8016e00:	f8df b15c 	ldr.w	fp, [pc, #348]	@ 8016f60 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 8016e04:	42bc      	cmp	r4, r7
 8016e06:	d245      	bcs.n	8016e94 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3ec>
 8016e08:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8016e0c:	ee17 2a90 	vmov	r2, s15
 8016e10:	68eb      	ldr	r3, [r5, #12]
 8016e12:	f8b4 e000 	ldrh.w	lr, [r4]
 8016e16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016e1a:	0e13      	lsrs	r3, r2, #24
 8016e1c:	fb03 f30a 	mul.w	r3, r3, sl
 8016e20:	1c58      	adds	r0, r3, #1
 8016e22:	eb00 2023 	add.w	r0, r0, r3, asr #8
 8016e26:	1200      	asrs	r0, r0, #8
 8016e28:	ea6f 0c00 	mvn.w	ip, r0
 8016e2c:	ea0e 030b 	and.w	r3, lr, fp
 8016e30:	fa5f fc8c 	uxtb.w	ip, ip
 8016e34:	fb0c f303 	mul.w	r3, ip, r3
 8016e38:	ea0b 2112 	and.w	r1, fp, r2, lsr #8
 8016e3c:	b289      	uxth	r1, r1
 8016e3e:	fb00 3101 	mla	r1, r0, r1, r3
 8016e42:	fb91 f1f9 	sdiv	r1, r1, r9
 8016e46:	ea01 030b 	and.w	r3, r1, fp
 8016e4a:	9302      	str	r3, [sp, #8]
 8016e4c:	0953      	lsrs	r3, r2, #5
 8016e4e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8016e52:	4619      	mov	r1, r3
 8016e54:	f40e 63fc 	and.w	r3, lr, #2016	@ 0x7e0
 8016e58:	fb0c f303 	mul.w	r3, ip, r3
 8016e5c:	f00e 0e1f 	and.w	lr, lr, #31
 8016e60:	fb0c fc0e 	mul.w	ip, ip, lr
 8016e64:	fb00 3301 	mla	r3, r0, r1, r3
 8016e68:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8016e6c:	fb00 c002 	mla	r0, r0, r2, ip
 8016e70:	fb93 f3f9 	sdiv	r3, r3, r9
 8016e74:	fb90 f0f9 	sdiv	r0, r0, r9
 8016e78:	9902      	ldr	r1, [sp, #8]
 8016e7a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8016e7e:	4319      	orrs	r1, r3
 8016e80:	f000 001f 	and.w	r0, r0, #31
 8016e84:	4301      	orrs	r1, r0
 8016e86:	f824 1b02 	strh.w	r1, [r4], #2
 8016e8a:	edd5 7a08 	vldr	s15, [r5, #32]
 8016e8e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8016e92:	e7b7      	b.n	8016e04 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x35c>
 8016e94:	4546      	cmp	r6, r8
 8016e96:	dd59      	ble.n	8016f4c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8016e98:	edd5 7a08 	vldr	s15, [r5, #32]
 8016e9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ea4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8016ea8:	bfd8      	it	le
 8016eaa:	2300      	movle	r3, #0
 8016eac:	68ea      	ldr	r2, [r5, #12]
 8016eae:	7c29      	ldrb	r1, [r5, #16]
 8016eb0:	58d2      	ldr	r2, [r2, r3]
 8016eb2:	eba6 0608 	sub.w	r6, r6, r8
 8016eb6:	0a10      	lsrs	r0, r2, #8
 8016eb8:	0953      	lsrs	r3, r2, #5
 8016eba:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 8016ebe:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8016ec2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8016ec6:	f3c2 07c4 	ubfx	r7, r2, #3, #5
 8016eca:	b159      	cbz	r1, 8016ee4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x43c>
 8016ecc:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8016ed0:	d108      	bne.n	8016ee4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x43c>
 8016ed2:	4318      	orrs	r0, r3
 8016ed4:	4338      	orrs	r0, r7
 8016ed6:	42b4      	cmp	r4, r6
 8016ed8:	d238      	bcs.n	8016f4c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8016eda:	f824 0b02 	strh.w	r0, [r4], #2
 8016ede:	e7fa      	b.n	8016ed6 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x42e>
 8016ee0:	46b8      	mov	r8, r7
 8016ee2:	e7d9      	b.n	8016e98 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3f0>
 8016ee4:	0e12      	lsrs	r2, r2, #24
 8016ee6:	fb02 f10a 	mul.w	r1, r2, sl
 8016eea:	1c4a      	adds	r2, r1, #1
 8016eec:	eb02 2221 	add.w	r2, r2, r1, asr #8
 8016ef0:	1212      	asrs	r2, r2, #8
 8016ef2:	fb02 f507 	mul.w	r5, r2, r7
 8016ef6:	4350      	muls	r0, r2
 8016ef8:	4353      	muls	r3, r2
 8016efa:	43d2      	mvns	r2, r2
 8016efc:	27ff      	movs	r7, #255	@ 0xff
 8016efe:	f8df c060 	ldr.w	ip, [pc, #96]	@ 8016f60 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 8016f02:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8016f06:	42b4      	cmp	r4, r6
 8016f08:	d220      	bcs.n	8016f4c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8016f0a:	f8b4 e000 	ldrh.w	lr, [r4]
 8016f0e:	ea0e 010c 	and.w	r1, lr, ip
 8016f12:	f40e 68fc 	and.w	r8, lr, #2016	@ 0x7e0
 8016f16:	fb02 0101 	mla	r1, r2, r1, r0
 8016f1a:	fb02 3808 	mla	r8, r2, r8, r3
 8016f1e:	f00e 0e1f 	and.w	lr, lr, #31
 8016f22:	fb02 5e0e 	mla	lr, r2, lr, r5
 8016f26:	fb91 f1f7 	sdiv	r1, r1, r7
 8016f2a:	fb98 f8f7 	sdiv	r8, r8, r7
 8016f2e:	fb9e fef7 	sdiv	lr, lr, r7
 8016f32:	ea01 010c 	and.w	r1, r1, ip
 8016f36:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8016f3a:	ea41 0108 	orr.w	r1, r1, r8
 8016f3e:	f00e 0e1f 	and.w	lr, lr, #31
 8016f42:	ea41 010e 	orr.w	r1, r1, lr
 8016f46:	f824 1b02 	strh.w	r1, [r4], #2
 8016f4a:	e7dc      	b.n	8016f06 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x45e>
 8016f4c:	b007      	add	sp, #28
 8016f4e:	ecbd 8b02 	vpop	{d8}
 8016f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f56:	bf00      	nop
 8016f58:	00000000 	.word	0x00000000
 8016f5c:	447ffffe 	.word	0x447ffffe
 8016f60:	fffff800 	.word	0xfffff800

08016f64 <_ZNK8touchgfx27PainterRGB565LinearGradient8tearDownEv>:
 8016f64:	4770      	bx	lr
	...

08016f68 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8016f68:	4b06      	ldr	r3, [pc, #24]	@ (8016f84 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
 8016f6a:	094a      	lsrs	r2, r1, #5
 8016f6c:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 8016f70:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8016f74:	60c1      	str	r1, [r0, #12]
 8016f76:	4313      	orrs	r3, r2
 8016f78:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8016f7c:	4319      	orrs	r1, r3
 8016f7e:	8201      	strh	r1, [r0, #16]
 8016f80:	4770      	bx	lr
 8016f82:	bf00      	nop
 8016f84:	fffff800 	.word	0xfffff800

08016f88 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8016f88:	f1a0 0008 	sub.w	r0, r0, #8
 8016f8c:	e7ec      	b.n	8016f68 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
 8016f8e:	bf00      	nop

08016f90 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 8016f90:	b508      	push	{r3, lr}
 8016f92:	4b05      	ldr	r3, [pc, #20]	@ (8016fa8 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 8016f94:	6818      	ldr	r0, [r3, #0]
 8016f96:	6803      	ldr	r3, [r0, #0]
 8016f98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8016f9c:	4798      	blx	r3
 8016f9e:	1e43      	subs	r3, r0, #1
 8016fa0:	4258      	negs	r0, r3
 8016fa2:	4158      	adcs	r0, r3
 8016fa4:	bd08      	pop	{r3, pc}
 8016fa6:	bf00      	nop
 8016fa8:	2005bd1c 	.word	0x2005bd1c

08016fac <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 8016fac:	b430      	push	{r4, r5}
 8016fae:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8016fb2:	8a02      	ldrh	r2, [r0, #16]
 8016fb4:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8016fb8:	9202      	str	r2, [sp, #8]
 8016fba:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8016fbe:	68c2      	ldr	r2, [r0, #12]
 8016fc0:	4629      	mov	r1, r5
 8016fc2:	4620      	mov	r0, r4
 8016fc4:	bc30      	pop	{r4, r5}
 8016fc6:	f7fc bae1 	b.w	801358c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

08016fca <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 8016fca:	f7fc babb 	b.w	8013544 <_ZN8touchgfx5paint8tearDownEv>

08016fce <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 8016fce:	2300      	movs	r3, #0
 8016fd0:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8016fd2:	8503      	strh	r3, [r0, #40]	@ 0x28
 8016fd4:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8016fd6:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8016fd8:	6980      	ldr	r0, [r0, #24]
 8016fda:	b110      	cbz	r0, 8016fe2 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 8016fdc:	6803      	ldr	r3, [r0, #0]
 8016fde:	691b      	ldr	r3, [r3, #16]
 8016fe0:	4718      	bx	r3
 8016fe2:	4770      	bx	lr

08016fe4 <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 8016fe4:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 8016fe8:	4770      	bx	lr

08016fea <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 8016fea:	b538      	push	{r3, r4, r5, lr}
 8016fec:	0e0b      	lsrs	r3, r1, #24
 8016fee:	7783      	strb	r3, [r0, #30]
 8016ff0:	6803      	ldr	r3, [r0, #0]
 8016ff2:	4604      	mov	r4, r0
 8016ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016ff6:	460d      	mov	r5, r1
 8016ff8:	4798      	blx	r3
 8016ffa:	6803      	ldr	r3, [r0, #0]
 8016ffc:	4629      	mov	r1, r5
 8016ffe:	689b      	ldr	r3, [r3, #8]
 8017000:	4798      	blx	r3
 8017002:	6823      	ldr	r3, [r4, #0]
 8017004:	4620      	mov	r0, r4
 8017006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017008:	4798      	blx	r3
 801700a:	61a0      	str	r0, [r4, #24]
 801700c:	bd38      	pop	{r3, r4, r5, pc}

0801700e <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 801700e:	7741      	strb	r1, [r0, #29]
 8017010:	4770      	bx	lr

08017012 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 8017012:	b530      	push	{r4, r5, lr}
 8017014:	460d      	mov	r5, r1
 8017016:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 801701a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801701c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801701e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017022:	682b      	ldr	r3, [r5, #0]
 8017024:	6023      	str	r3, [r4, #0]
 8017026:	bd30      	pop	{r4, r5, pc}

08017028 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 8017028:	b538      	push	{r3, r4, r5, lr}
 801702a:	4604      	mov	r4, r0
 801702c:	2500      	movs	r5, #0
 801702e:	1d03      	adds	r3, r0, #4
 8017030:	6808      	ldr	r0, [r1, #0]
 8017032:	6849      	ldr	r1, [r1, #4]
 8017034:	c303      	stmia	r3!, {r0, r1}
 8017036:	6813      	ldr	r3, [r2, #0]
 8017038:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 801703c:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 8017040:	6853      	ldr	r3, [r2, #4]
 8017042:	61a5      	str	r5, [r4, #24]
 8017044:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 8017048:	f005 f946 	bl	801c2d8 <_ZN8touchgfx9Matrix3x35resetEv>
 801704c:	23ff      	movs	r3, #255	@ 0xff
 801704e:	7763      	strb	r3, [r4, #29]
 8017050:	77a3      	strb	r3, [r4, #30]
 8017052:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8017056:	6323      	str	r3, [r4, #48]	@ 0x30
 8017058:	2301      	movs	r3, #1
 801705a:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 801705e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8017062:	bd38      	pop	{r3, r4, r5, pc}

08017064 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 8017064:	ee70 7a41 	vsub.f32	s15, s0, s2
 8017068:	eef5 7a40 	vcmp.f32	s15, #0.0
 801706c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017070:	ed2d 8b0a 	vpush	{d8-d12}
 8017074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017078:	b087      	sub	sp, #28
 801707a:	4605      	mov	r5, r0
 801707c:	eef0 9a40 	vmov.f32	s19, s0
 8017080:	eeb0 aa60 	vmov.f32	s20, s1
 8017084:	eeb0 9a41 	vmov.f32	s18, s2
 8017088:	eef0 8a61 	vmov.f32	s17, s3
 801708c:	eeb0 ca42 	vmov.f32	s24, s4
 8017090:	eef0 ca62 	vmov.f32	s25, s5
 8017094:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8017098:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 801709a:	6802      	ldr	r2, [r0, #0]
 801709c:	d112      	bne.n	80170c4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 801709e:	ee70 7ae1 	vsub.f32	s15, s1, s3
 80170a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80170a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170aa:	d10b      	bne.n	80170c4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 80170ac:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80170b0:	3901      	subs	r1, #1
 80170b2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80170b4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80170b8:	b007      	add	sp, #28
 80170ba:	ecbd 8b0a 	vpop	{d8-d12}
 80170be:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80170c2:	4710      	bx	r2
 80170c4:	23ff      	movs	r3, #255	@ 0xff
 80170c6:	77ab      	strb	r3, [r5, #30]
 80170c8:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80170ca:	4628      	mov	r0, r5
 80170cc:	4798      	blx	r3
 80170ce:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80170d2:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 80170d6:	80c3      	strh	r3, [r0, #6]
 80170d8:	eef0 0a4a 	vmov.f32	s1, s20
 80170dc:	eeb0 0a69 	vmov.f32	s0, s19
 80170e0:	4604      	mov	r4, r0
 80170e2:	4640      	mov	r0, r8
 80170e4:	f005 f9a7 	bl	801c436 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80170e8:	4640      	mov	r0, r8
 80170ea:	eeb0 ba40 	vmov.f32	s22, s0
 80170ee:	eef0 ba60 	vmov.f32	s23, s1
 80170f2:	ed8d 0a00 	vstr	s0, [sp]
 80170f6:	edcd 0a01 	vstr	s1, [sp, #4]
 80170fa:	eeb0 0a49 	vmov.f32	s0, s18
 80170fe:	eef0 0a68 	vmov.f32	s1, s17
 8017102:	f005 f998 	bl	801c436 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017106:	eeb4 ba40 	vcmp.f32	s22, s0
 801710a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801710e:	eef4 ba60 	vcmp.f32	s23, s1
 8017112:	bf0c      	ite	eq
 8017114:	2301      	moveq	r3, #1
 8017116:	2300      	movne	r3, #0
 8017118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801711c:	eeb4 ba40 	vcmp.f32	s22, s0
 8017120:	7463      	strb	r3, [r4, #17]
 8017122:	bf0c      	ite	eq
 8017124:	2301      	moveq	r3, #1
 8017126:	2300      	movne	r3, #0
 8017128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801712c:	eeb0 8a40 	vmov.f32	s16, s0
 8017130:	eef0 aa60 	vmov.f32	s21, s1
 8017134:	ed8d 0a02 	vstr	s0, [sp, #8]
 8017138:	edcd 0a03 	vstr	s1, [sp, #12]
 801713c:	74a3      	strb	r3, [r4, #18]
 801713e:	f8df 9250 	ldr.w	r9, [pc, #592]	@ 8017390 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x32c>
 8017142:	d030      	beq.n	80171a6 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x142>
 8017144:	eef4 ba60 	vcmp.f32	s23, s1
 8017148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801714c:	d02b      	beq.n	80171a6 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x142>
 801714e:	ee39 9a69 	vsub.f32	s18, s18, s19
 8017152:	ee78 8aca 	vsub.f32	s17, s17, s20
 8017156:	ee89 7a0c 	vdiv.f32	s14, s18, s24
 801715a:	eec8 7aac 	vdiv.f32	s15, s17, s25
 801715e:	eef0 0a4a 	vmov.f32	s1, s20
 8017162:	eeb0 0a69 	vmov.f32	s0, s19
 8017166:	eeec 0a87 	vfma.f32	s1, s25, s14
 801716a:	eea7 0acc 	vfms.f32	s0, s15, s24
 801716e:	4640      	mov	r0, r8
 8017170:	f005 f961 	bl	801c436 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017174:	edcd 0a05 	vstr	s1, [sp, #20]
 8017178:	ee70 0aeb 	vsub.f32	s1, s1, s23
 801717c:	f899 3000 	ldrb.w	r3, [r9]
 8017180:	ed8d 0a04 	vstr	s0, [sp, #16]
 8017184:	2b01      	cmp	r3, #1
 8017186:	ee30 0a4b 	vsub.f32	s0, s0, s22
 801718a:	bf02      	ittt	eq
 801718c:	eef1 7a60 	vnegeq.f32	s15, s1
 8017190:	eef0 0a40 	vmoveq.f32	s1, s0
 8017194:	eeb0 0a67 	vmoveq.f32	s0, s15
 8017198:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801719c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171a0:	d134      	bne.n	801720c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1a8>
 80171a2:	2301      	movs	r3, #1
 80171a4:	74a3      	strb	r3, [r4, #18]
 80171a6:	f899 2000 	ldrb.w	r2, [r9]
 80171aa:	7c63      	ldrb	r3, [r4, #17]
 80171ac:	2a01      	cmp	r2, #1
 80171ae:	f040 80a4 	bne.w	80172fa <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x296>
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d072      	beq.n	801729c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x238>
 80171b6:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 80171ba:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8017388 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x324>
 80171be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80171c2:	edc4 7a08 	vstr	s15, [r4, #32]
 80171c6:	eefd 7aea 	vcvt.s32.f32	s15, s21
 80171ca:	ee17 3a90 	vmov	r3, s15
 80171ce:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 80171d2:	eef4 baea 	vcmpe.f32	s23, s21
 80171d6:	b21a      	sxth	r2, r3
 80171d8:	ee17 3a90 	vmov	r3, s15
 80171dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171e0:	b21b      	sxth	r3, r3
 80171e2:	bf47      	ittee	mi
 80171e4:	8123      	strhmi	r3, [r4, #8]
 80171e6:	8162      	strhmi	r2, [r4, #10]
 80171e8:	8122      	strhpl	r2, [r4, #8]
 80171ea:	8163      	strhpl	r3, [r4, #10]
 80171ec:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80171f0:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80171f4:	1a9b      	subs	r3, r3, r2
 80171f6:	ee07 3a90 	vmov	s15, r3
 80171fa:	2300      	movs	r3, #0
 80171fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017200:	7463      	strb	r3, [r4, #17]
 8017202:	edc4 7a07 	vstr	s15, [r4, #28]
 8017206:	2301      	movs	r3, #1
 8017208:	74a3      	strb	r3, [r4, #18]
 801720a:	e03f      	b.n	801728c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 801720c:	ee80 7a80 	vdiv.f32	s14, s1, s0
 8017210:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8017214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017218:	ed84 7a05 	vstr	s14, [r4, #20]
 801721c:	d102      	bne.n	8017224 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1c0>
 801721e:	2301      	movs	r3, #1
 8017220:	7463      	strb	r3, [r4, #17]
 8017222:	e7c0      	b.n	80171a6 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x142>
 8017224:	2b01      	cmp	r3, #1
 8017226:	bf09      	itett	eq
 8017228:	f9b4 2006 	ldrsheq.w	r2, [r4, #6]
 801722c:	eef0 7a6b 	vmovne.f32	s15, s23
 8017230:	ee07 2a90 	vmoveq	s15, r2
 8017234:	eef8 7ae7 	vcvteq.f32.s32	s15, s15
 8017238:	bf0a      	itet	eq
 801723a:	ee77 7acb 	vsubeq.f32	s15, s15, s22
 801723e:	eeeb 7a47 	vfmsne.f32	s15, s22, s14
 8017242:	eeeb 7ac7 	vfmseq.f32	s15, s23, s14
 8017246:	ee38 8a4b 	vsub.f32	s16, s16, s22
 801724a:	2b01      	cmp	r3, #1
 801724c:	ee7a aaeb 	vsub.f32	s21, s21, s23
 8017250:	edc4 7a06 	vstr	s15, [r4, #24]
 8017254:	bf02      	ittt	eq
 8017256:	eef1 7a48 	vnegeq.f32	s15, s16
 801725a:	eeb0 8a6a 	vmoveq.f32	s16, s21
 801725e:	eef0 aa67 	vmoveq.f32	s21, s15
 8017262:	eeca 7a87 	vdiv.f32	s15, s21, s14
 8017266:	ee38 8a67 	vsub.f32	s16, s16, s15
 801726a:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 801738c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 801726e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017272:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8017276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801727a:	ed84 8a07 	vstr	s16, [r4, #28]
 801727e:	edc4 7a08 	vstr	s15, [r4, #32]
 8017282:	d503      	bpl.n	801728c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 8017284:	eeb1 8a48 	vneg.f32	s16, s16
 8017288:	ed84 8a07 	vstr	s16, [r4, #28]
 801728c:	60e7      	str	r7, [r4, #12]
 801728e:	7426      	strb	r6, [r4, #16]
 8017290:	61ac      	str	r4, [r5, #24]
 8017292:	b007      	add	sp, #28
 8017294:	ecbd 8b0a 	vpop	{d8-d12}
 8017298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801729c:	7ca3      	ldrb	r3, [r4, #18]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d0f4      	beq.n	801728c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 80172a2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80172a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8017388 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x324>
 80172aa:	ee00 3a10 	vmov	s0, r3
 80172ae:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80172b2:	ee30 8a48 	vsub.f32	s16, s0, s16
 80172b6:	ee30 0a4b 	vsub.f32	s0, s0, s22
 80172ba:	ee38 7a40 	vsub.f32	s14, s16, s0
 80172be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80172c2:	edc4 7a08 	vstr	s15, [r4, #32]
 80172c6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80172ca:	ee17 3a90 	vmov	r3, s15
 80172ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80172d2:	eeb4 8ac0 	vcmpe.f32	s16, s0
 80172d6:	b21a      	sxth	r2, r3
 80172d8:	ee17 3a90 	vmov	r3, s15
 80172dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172e0:	b21b      	sxth	r3, r3
 80172e2:	bfcc      	ite	gt
 80172e4:	8123      	strhgt	r3, [r4, #8]
 80172e6:	8163      	strhle	r3, [r4, #10]
 80172e8:	f04f 0301 	mov.w	r3, #1
 80172ec:	bfc8      	it	gt
 80172ee:	8162      	strhgt	r2, [r4, #10]
 80172f0:	7463      	strb	r3, [r4, #17]
 80172f2:	bfd8      	it	le
 80172f4:	8122      	strhle	r2, [r4, #8]
 80172f6:	2300      	movs	r3, #0
 80172f8:	e786      	b.n	8017208 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1a4>
 80172fa:	b1db      	cbz	r3, 8017334 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x2d0>
 80172fc:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 8017300:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8017388 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x324>
 8017304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017308:	edc4 7a08 	vstr	s15, [r4, #32]
 801730c:	eefd 7aea 	vcvt.s32.f32	s15, s21
 8017310:	ee17 3a90 	vmov	r3, s15
 8017314:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 8017318:	eef4 baea 	vcmpe.f32	s23, s21
 801731c:	b21a      	sxth	r2, r3
 801731e:	ee17 3a90 	vmov	r3, s15
 8017322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017326:	b21b      	sxth	r3, r3
 8017328:	bf47      	ittee	mi
 801732a:	8123      	strhmi	r3, [r4, #8]
 801732c:	8162      	strhmi	r2, [r4, #10]
 801732e:	8122      	strhpl	r2, [r4, #8]
 8017330:	8163      	strhpl	r3, [r4, #10]
 8017332:	e7ab      	b.n	801728c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 8017334:	7ca3      	ldrb	r3, [r4, #18]
 8017336:	2b00      	cmp	r3, #0
 8017338:	d0a8      	beq.n	801728c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 801733a:	ee38 7a4b 	vsub.f32	s14, s16, s22
 801733e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8017388 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x324>
 8017342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017346:	edc4 7a08 	vstr	s15, [r4, #32]
 801734a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801734e:	ee17 3a90 	vmov	r3, s15
 8017352:	eefd 7acb 	vcvt.s32.f32	s15, s22
 8017356:	eeb4 bac8 	vcmpe.f32	s22, s16
 801735a:	b21a      	sxth	r2, r3
 801735c:	ee17 3a90 	vmov	r3, s15
 8017360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017364:	b21b      	sxth	r3, r3
 8017366:	bf47      	ittee	mi
 8017368:	8123      	strhmi	r3, [r4, #8]
 801736a:	8162      	strhmi	r2, [r4, #10]
 801736c:	8122      	strhpl	r2, [r4, #8]
 801736e:	8163      	strhpl	r3, [r4, #10]
 8017370:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017374:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8017378:	1a9b      	subs	r3, r3, r2
 801737a:	ee07 3a90 	vmov	s15, r3
 801737e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017382:	edc4 7a07 	vstr	s15, [r4, #28]
 8017386:	e781      	b.n	801728c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 8017388:	447ffffe 	.word	0x447ffffe
 801738c:	44800000 	.word	0x44800000
 8017390:	2005bd14 	.word	0x2005bd14

08017394 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 8017394:	b510      	push	{r4, lr}
 8017396:	ed2d 8b02 	vpush	{d8}
 801739a:	eef0 8a62 	vmov.f32	s17, s5
 801739e:	2100      	movs	r1, #0
 80173a0:	4604      	mov	r4, r0
 80173a2:	eeb0 8a42 	vmov.f32	s16, s4
 80173a6:	f015 fa77 	bl	802c898 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 80173aa:	eef0 7a68 	vmov.f32	s15, s17
 80173ae:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80173b2:	ee17 2a90 	vmov	r2, s15
 80173b6:	eef0 7a48 	vmov.f32	s15, s16
 80173ba:	ecbd 8b02 	vpop	{d8}
 80173be:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80173c2:	6823      	ldr	r3, [r4, #0]
 80173c4:	4620      	mov	r0, r4
 80173c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173ca:	689b      	ldr	r3, [r3, #8]
 80173cc:	ee17 1a90 	vmov	r1, s15
 80173d0:	4718      	bx	r3

080173d2 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 80173d2:	b510      	push	{r4, lr}
 80173d4:	ed2d 8b02 	vpush	{d8}
 80173d8:	eef0 8a63 	vmov.f32	s17, s7
 80173dc:	2100      	movs	r1, #0
 80173de:	4604      	mov	r4, r0
 80173e0:	eeb0 8a43 	vmov.f32	s16, s6
 80173e4:	f015 fb1a 	bl	802ca1c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 80173e8:	eef0 7a68 	vmov.f32	s15, s17
 80173ec:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80173f0:	ee17 2a90 	vmov	r2, s15
 80173f4:	eef0 7a48 	vmov.f32	s15, s16
 80173f8:	ecbd 8b02 	vpop	{d8}
 80173fc:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8017400:	6823      	ldr	r3, [r4, #0]
 8017402:	4620      	mov	r0, r4
 8017404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017408:	689b      	ldr	r3, [r3, #8]
 801740a:	ee17 1a90 	vmov	r1, s15
 801740e:	4718      	bx	r3

08017410 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 8017410:	b513      	push	{r0, r1, r4, lr}
 8017412:	4604      	mov	r4, r0
 8017414:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8017416:	f005 f80e 	bl	801c436 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801741a:	eef0 7a60 	vmov.f32	s15, s1
 801741e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8017422:	ee17 2a90 	vmov	r2, s15
 8017426:	eef0 7a40 	vmov.f32	s15, s0
 801742a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801742e:	4620      	mov	r0, r4
 8017430:	ee17 1a90 	vmov	r1, s15
 8017434:	b002      	add	sp, #8
 8017436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801743a:	f015 b987 	b.w	802c74c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

0801743e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 801743e:	b513      	push	{r0, r1, r4, lr}
 8017440:	4604      	mov	r4, r0
 8017442:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8017444:	f004 fff7 	bl	801c436 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017448:	eef0 7a60 	vmov.f32	s15, s1
 801744c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8017450:	ee17 2a90 	vmov	r2, s15
 8017454:	eef0 7a40 	vmov.f32	s15, s0
 8017458:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801745c:	4620      	mov	r0, r4
 801745e:	ee17 1a90 	vmov	r1, s15
 8017462:	b002      	add	sp, #8
 8017464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017468:	f015 b9bd 	b.w	802c7e6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

0801746c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 801746c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801746e:	2400      	movs	r4, #0
 8017470:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 8017474:	4626      	mov	r6, r4
 8017476:	f04f 0e01 	mov.w	lr, #1
 801747a:	9f07      	ldr	r7, [sp, #28]
 801747c:	4463      	add	r3, ip
 801747e:	4563      	cmp	r3, ip
 8017480:	d02d      	beq.n	80174de <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 8017482:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 8017486:	2d06      	cmp	r5, #6
 8017488:	d8f9      	bhi.n	801747e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801748a:	fa0e f505 	lsl.w	r5, lr, r5
 801748e:	f015 0f66 	tst.w	r5, #102	@ 0x66
 8017492:	d10d      	bne.n	80174b0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 8017494:	f015 0f10 	tst.w	r5, #16
 8017498:	d117      	bne.n	80174ca <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 801749a:	072d      	lsls	r5, r5, #28
 801749c:	d5ef      	bpl.n	801747e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801749e:	3801      	subs	r0, #1
 80174a0:	b91e      	cbnz	r6, 80174aa <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 80174a2:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 80174a6:	682d      	ldr	r5, [r5, #0]
 80174a8:	600d      	str	r5, [r1, #0]
 80174aa:	b96c      	cbnz	r4, 80174c8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80174ac:	2601      	movs	r6, #1
 80174ae:	e7e6      	b.n	801747e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80174b0:	b926      	cbnz	r6, 80174bc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 80174b2:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 80174b6:	f853 3c08 	ldr.w	r3, [r3, #-8]
 80174ba:	600b      	str	r3, [r1, #0]
 80174bc:	b924      	cbnz	r4, 80174c8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80174be:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80174c2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80174c6:	6013      	str	r3, [r2, #0]
 80174c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174ca:	3801      	subs	r0, #1
 80174cc:	b91c      	cbnz	r4, 80174d6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 80174ce:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 80174d2:	6824      	ldr	r4, [r4, #0]
 80174d4:	6014      	str	r4, [r2, #0]
 80174d6:	2e00      	cmp	r6, #0
 80174d8:	d1f6      	bne.n	80174c8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80174da:	2401      	movs	r4, #1
 80174dc:	e7cf      	b.n	801747e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80174de:	b90e      	cbnz	r6, 80174e4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 80174e0:	2300      	movs	r3, #0
 80174e2:	600b      	str	r3, [r1, #0]
 80174e4:	2c00      	cmp	r4, #0
 80174e6:	d1ef      	bne.n	80174c8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80174e8:	2300      	movs	r3, #0
 80174ea:	e7ec      	b.n	80174c6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

080174ec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 80174ec:	b538      	push	{r3, r4, r5, lr}
 80174ee:	4604      	mov	r4, r0
 80174f0:	ed2d 8b0a 	vpush	{d8-d12}
 80174f4:	460d      	mov	r5, r1
 80174f6:	eef0 ba40 	vmov.f32	s23, s0
 80174fa:	eeb0 ca60 	vmov.f32	s24, s1
 80174fe:	eef0 aa41 	vmov.f32	s21, s2
 8017502:	eeb0 ba61 	vmov.f32	s22, s3
 8017506:	eeb0 9a42 	vmov.f32	s18, s4
 801750a:	eef0 9a62 	vmov.f32	s19, s5
 801750e:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 8017512:	ee7b 8a29 	vadd.f32	s17, s22, s19
 8017516:	ee3a 8a89 	vadd.f32	s16, s21, s18
 801751a:	ee68 8a8a 	vmul.f32	s17, s17, s20
 801751e:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8017522:	ee3c 0a68 	vsub.f32	s0, s24, s17
 8017526:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 801752a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801752e:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8017532:	f015 fc49 	bl	802cdc8 <sqrtf>
 8017536:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801753a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801753e:	d12e      	bne.n	801759e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 8017540:	ee79 7a6a 	vsub.f32	s15, s18, s21
 8017544:	ee39 7acb 	vsub.f32	s14, s19, s22
 8017548:	eeb0 8a6a 	vmov.f32	s16, s21
 801754c:	eef0 8a4b 	vmov.f32	s17, s22
 8017550:	eea7 8a8a 	vfma.f32	s16, s15, s20
 8017554:	eee7 8a0a 	vfma.f32	s17, s14, s20
 8017558:	eea7 8a0a 	vfma.f32	s16, s14, s20
 801755c:	eee7 8aca 	vfms.f32	s17, s15, s20
 8017560:	2d02      	cmp	r5, #2
 8017562:	dc2f      	bgt.n	80175c4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 8017564:	3501      	adds	r5, #1
 8017566:	eef0 1a4b 	vmov.f32	s3, s22
 801756a:	eeb0 1a6a 	vmov.f32	s2, s21
 801756e:	4629      	mov	r1, r5
 8017570:	eef0 2a68 	vmov.f32	s5, s17
 8017574:	eeb0 2a48 	vmov.f32	s4, s16
 8017578:	eef0 0a4c 	vmov.f32	s1, s24
 801757c:	eeb0 0a6b 	vmov.f32	s0, s23
 8017580:	4620      	mov	r0, r4
 8017582:	f7ff ffb3 	bl	80174ec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8017586:	eef0 0a68 	vmov.f32	s1, s17
 801758a:	eeb0 0a48 	vmov.f32	s0, s16
 801758e:	4620      	mov	r0, r4
 8017590:	f7ff ff55 	bl	801743e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8017594:	eeb0 ba68 	vmov.f32	s22, s17
 8017598:	eef0 aa48 	vmov.f32	s21, s16
 801759c:	e7b9      	b.n	8017512 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 801759e:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 80175a2:	ee38 8a6b 	vsub.f32	s16, s16, s23
 80175a6:	ee78 8acc 	vsub.f32	s17, s17, s24
 80175aa:	ee28 7a27 	vmul.f32	s14, s16, s15
 80175ae:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80175b2:	ee87 8a00 	vdiv.f32	s16, s14, s0
 80175b6:	eec7 8a80 	vdiv.f32	s17, s15, s0
 80175ba:	ee3b 8a88 	vadd.f32	s16, s23, s16
 80175be:	ee7c 8a28 	vadd.f32	s17, s24, s17
 80175c2:	e7cd      	b.n	8017560 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 80175c4:	eef0 0a68 	vmov.f32	s1, s17
 80175c8:	eeb0 0a48 	vmov.f32	s0, s16
 80175cc:	4620      	mov	r0, r4
 80175ce:	f7ff ff36 	bl	801743e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80175d2:	ecbd 8b0a 	vpop	{d8-d12}
 80175d6:	bd38      	pop	{r3, r4, r5, pc}

080175d8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 80175d8:	b510      	push	{r4, lr}
 80175da:	ed2d 8b0a 	vpush	{d8-d12}
 80175de:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80175e2:	4604      	mov	r4, r0
 80175e4:	2b02      	cmp	r3, #2
 80175e6:	eeb0 ca40 	vmov.f32	s24, s0
 80175ea:	eeb0 9a60 	vmov.f32	s18, s1
 80175ee:	eef0 9a41 	vmov.f32	s19, s2
 80175f2:	eef0 8a61 	vmov.f32	s17, s3
 80175f6:	eeb0 ba42 	vmov.f32	s22, s4
 80175fa:	eef0 ba62 	vmov.f32	s23, s5
 80175fe:	eeb0 aa43 	vmov.f32	s20, s6
 8017602:	eef0 aa63 	vmov.f32	s21, s7
 8017606:	eeb0 8a44 	vmov.f32	s16, s8
 801760a:	eef0 ca64 	vmov.f32	s25, s9
 801760e:	d12c      	bne.n	801766a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 8017610:	eef0 0a62 	vmov.f32	s1, s5
 8017614:	eeb0 0a42 	vmov.f32	s0, s4
 8017618:	f7ff ff11 	bl	801743e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801761c:	ee79 9acb 	vsub.f32	s19, s19, s22
 8017620:	ee7a caec 	vsub.f32	s25, s21, s25
 8017624:	ee78 8aeb 	vsub.f32	s17, s17, s23
 8017628:	ee3a 8a48 	vsub.f32	s16, s20, s16
 801762c:	ee69 9aac 	vmul.f32	s19, s19, s25
 8017630:	ee28 8a88 	vmul.f32	s16, s17, s16
 8017634:	eef4 9ac8 	vcmpe.f32	s19, s16
 8017638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801763c:	db0f      	blt.n	801765e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 801763e:	2101      	movs	r1, #1
 8017640:	eef0 2a6a 	vmov.f32	s5, s21
 8017644:	eeb0 2a4a 	vmov.f32	s4, s20
 8017648:	eef0 1a6b 	vmov.f32	s3, s23
 801764c:	eeb0 1a4b 	vmov.f32	s2, s22
 8017650:	eef0 0a49 	vmov.f32	s1, s18
 8017654:	eeb0 0a4c 	vmov.f32	s0, s24
 8017658:	4620      	mov	r0, r4
 801765a:	f7ff ff47 	bl	80174ec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 801765e:	eef0 0a6a 	vmov.f32	s1, s21
 8017662:	eeb0 0a4a 	vmov.f32	s0, s20
 8017666:	4620      	mov	r0, r4
 8017668:	e035      	b.n	80176d6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 801766a:	2b01      	cmp	r3, #1
 801766c:	d138      	bne.n	80176e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 801766e:	ee31 4ae2 	vsub.f32	s8, s3, s5
 8017672:	ee33 6a48 	vsub.f32	s12, s6, s16
 8017676:	ee71 7a42 	vsub.f32	s15, s2, s4
 801767a:	ee73 6ae4 	vsub.f32	s13, s7, s9
 801767e:	ee26 7a44 	vnmul.f32	s14, s12, s8
 8017682:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8017686:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801768a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801768e:	d027      	beq.n	80176e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8017690:	ee28 8a63 	vnmul.f32	s16, s16, s7
 8017694:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 8017698:	eea4 8a83 	vfma.f32	s16, s9, s6
 801769c:	eee1 8a22 	vfma.f32	s17, s2, s5
 80176a0:	ee68 7a67 	vnmul.f32	s15, s16, s15
 80176a4:	ee28 8a44 	vnmul.f32	s16, s16, s8
 80176a8:	eea6 8aa8 	vfma.f32	s16, s13, s17
 80176ac:	eee6 7a28 	vfma.f32	s15, s12, s17
 80176b0:	eec8 0a07 	vdiv.f32	s1, s16, s14
 80176b4:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80176b8:	ee39 9a60 	vsub.f32	s18, s18, s1
 80176bc:	ee3c ca40 	vsub.f32	s24, s24, s0
 80176c0:	ee29 9a09 	vmul.f32	s18, s18, s18
 80176c4:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 80176c8:	eeac 9a0c 	vfma.f32	s18, s24, s24
 80176cc:	eef4 7ac9 	vcmpe.f32	s15, s18
 80176d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176d4:	db04      	blt.n	80176e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80176d6:	f7ff feb2 	bl	801743e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80176da:	ecbd 8b0a 	vpop	{d8-d12}
 80176de:	bd10      	pop	{r4, pc}
 80176e0:	eef0 0a6b 	vmov.f32	s1, s23
 80176e4:	eeb0 0a4b 	vmov.f32	s0, s22
 80176e8:	4620      	mov	r0, r4
 80176ea:	f7ff fea8 	bl	801743e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80176ee:	e7b6      	b.n	801765e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

080176f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 80176f0:	b510      	push	{r4, lr}
 80176f2:	ed2d 8b0c 	vpush	{d8-d13}
 80176f6:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 80176fa:	4604      	mov	r4, r0
 80176fc:	eeb0 9a40 	vmov.f32	s18, s0
 8017700:	eef0 9a60 	vmov.f32	s19, s1
 8017704:	eef0 aa41 	vmov.f32	s21, s2
 8017708:	eeb0 ba61 	vmov.f32	s22, s3
 801770c:	b933      	cbnz	r3, 801771c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 801770e:	f7ff fe96 	bl	801743e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8017712:	eef0 0a4b 	vmov.f32	s1, s22
 8017716:	eeb0 0a6a 	vmov.f32	s0, s21
 801771a:	e015      	b.n	8017748 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 801771c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017720:	ee71 8a40 	vsub.f32	s17, s2, s0
 8017724:	ee31 8ae0 	vsub.f32	s16, s3, s1
 8017728:	2b02      	cmp	r3, #2
 801772a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801772e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017732:	d10f      	bne.n	8017754 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8017734:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8017738:	ee30 0a08 	vadd.f32	s0, s0, s16
 801773c:	f7ff fe7f 	bl	801743e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8017740:	ee7b 0a68 	vsub.f32	s1, s22, s17
 8017744:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8017748:	4620      	mov	r0, r4
 801774a:	f7ff fe78 	bl	801743e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801774e:	ecbd 8b0c 	vpop	{d8-d13}
 8017752:	bd10      	pop	{r4, pc}
 8017754:	f7ff fe73 	bl	801743e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8017758:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8017890 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 801775c:	eef0 0a69 	vmov.f32	s1, s19
 8017760:	eeb0 0a49 	vmov.f32	s0, s18
 8017764:	eeb1 aa68 	vneg.f32	s20, s17
 8017768:	eddf ba4a 	vldr	s23, [pc, #296]	@ 8017894 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 801776c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8017770:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8017774:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8017778:	eea8 0a2b 	vfma.f32	s0, s16, s23
 801777c:	4620      	mov	r0, r4
 801777e:	f7ff fe5e 	bl	801743e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8017782:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8017898 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 8017786:	eef0 0a69 	vmov.f32	s1, s19
 801778a:	eeb0 0a49 	vmov.f32	s0, s18
 801778e:	ed9f ca43 	vldr	s24, [pc, #268]	@ 801789c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 8017792:	eee8 0a27 	vfma.f32	s1, s16, s15
 8017796:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801779a:	eeea 0a0c 	vfma.f32	s1, s20, s24
 801779e:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80177a2:	4620      	mov	r0, r4
 80177a4:	f7ff fe4b 	bl	801743e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80177a8:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 80178a0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 80177ac:	eef0 0a69 	vmov.f32	s1, s19
 80177b0:	eeb0 0a49 	vmov.f32	s0, s18
 80177b4:	eddf ca3b 	vldr	s25, [pc, #236]	@ 80178a4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 80177b8:	eee8 0a27 	vfma.f32	s1, s16, s15
 80177bc:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80177c0:	eeea 0a2c 	vfma.f32	s1, s20, s25
 80177c4:	eea8 0a2c 	vfma.f32	s0, s16, s25
 80177c8:	4620      	mov	r0, r4
 80177ca:	f7ff fe38 	bl	801743e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80177ce:	eddf 7a36 	vldr	s15, [pc, #216]	@ 80178a8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 80177d2:	eef0 0a69 	vmov.f32	s1, s19
 80177d6:	eeb0 0a49 	vmov.f32	s0, s18
 80177da:	eee8 0a27 	vfma.f32	s1, s16, s15
 80177de:	ed9f da33 	vldr	s26, [pc, #204]	@ 80178ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 80177e2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80177e6:	eeea 0a0d 	vfma.f32	s1, s20, s26
 80177ea:	eea8 0a0d 	vfma.f32	s0, s16, s26
 80177ee:	4620      	mov	r0, r4
 80177f0:	f7ff fe25 	bl	801743e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80177f4:	ee79 0a88 	vadd.f32	s1, s19, s16
 80177f8:	ee39 0a28 	vadd.f32	s0, s18, s17
 80177fc:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8017800:	ee30 0a08 	vadd.f32	s0, s0, s16
 8017804:	4620      	mov	r0, r4
 8017806:	f7ff fe1a 	bl	801743e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801780a:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80178b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 801780e:	eef0 0a69 	vmov.f32	s1, s19
 8017812:	eeb0 0a49 	vmov.f32	s0, s18
 8017816:	eee8 0a27 	vfma.f32	s1, s16, s15
 801781a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801781e:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8017822:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8017826:	4620      	mov	r0, r4
 8017828:	f7ff fe09 	bl	801743e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801782c:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80178b4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 8017830:	eef0 0a69 	vmov.f32	s1, s19
 8017834:	eeb0 0a49 	vmov.f32	s0, s18
 8017838:	eee8 0a27 	vfma.f32	s1, s16, s15
 801783c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8017840:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8017844:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8017848:	4620      	mov	r0, r4
 801784a:	f7ff fdf8 	bl	801743e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801784e:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80178b8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 8017852:	eef0 0a69 	vmov.f32	s1, s19
 8017856:	eeb0 0a49 	vmov.f32	s0, s18
 801785a:	eee8 0a27 	vfma.f32	s1, s16, s15
 801785e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8017862:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8017866:	eea8 0a0c 	vfma.f32	s0, s16, s24
 801786a:	4620      	mov	r0, r4
 801786c:	f7ff fde7 	bl	801743e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8017870:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80178bc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 8017874:	eef0 0a69 	vmov.f32	s1, s19
 8017878:	eeb0 0a49 	vmov.f32	s0, s18
 801787c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8017880:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8017884:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8017888:	eea8 0a2b 	vfma.f32	s0, s16, s23
 801788c:	4620      	mov	r0, r4
 801788e:	e73e      	b.n	801770e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 8017890:	3d23d70a 	.word	0x3d23d70a
 8017894:	3e8f5c29 	.word	0x3e8f5c29
 8017898:	3e4ccccd 	.word	0x3e4ccccd
 801789c:	3f19999a 	.word	0x3f19999a
 80178a0:	3ecccccd 	.word	0x3ecccccd
 80178a4:	3f4ccccd 	.word	0x3f4ccccd
 80178a8:	3f3851ec 	.word	0x3f3851ec
 80178ac:	3f75c28f 	.word	0x3f75c28f
 80178b0:	3fa3d70a 	.word	0x3fa3d70a
 80178b4:	3fcccccd 	.word	0x3fcccccd
 80178b8:	3fe66666 	.word	0x3fe66666
 80178bc:	3ffae148 	.word	0x3ffae148

080178c0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 80178c0:	b570      	push	{r4, r5, r6, lr}
 80178c2:	ed2d 8b06 	vpush	{d8-d10}
 80178c6:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 80178ca:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 80178ce:	ee30 8ac8 	vsub.f32	s16, s1, s16
 80178d2:	ee30 9a49 	vsub.f32	s18, s0, s18
 80178d6:	eef0 aa40 	vmov.f32	s21, s0
 80178da:	ee28 0a08 	vmul.f32	s0, s16, s16
 80178de:	eea9 0a09 	vfma.f32	s0, s18, s18
 80178e2:	4604      	mov	r4, r0
 80178e4:	eeb0 aa60 	vmov.f32	s20, s1
 80178e8:	f015 fa6e 	bl	802cdc8 <sqrtf>
 80178ec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80178f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178f4:	dd36      	ble.n	8017964 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 80178f6:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 80178fa:	eec0 6a27 	vdiv.f32	s13, s0, s15
 80178fe:	2600      	movs	r6, #0
 8017900:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8017904:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 8017908:	ee89 8a26 	vdiv.f32	s16, s18, s13
 801790c:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 8017910:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 8017914:	ee70 9a28 	vadd.f32	s19, s0, s17
 8017918:	ee30 9ac8 	vsub.f32	s18, s1, s16
 801791c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8017920:	ee78 8aaa 	vadd.f32	s17, s17, s21
 8017924:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8017928:	b1fd      	cbz	r5, 801796a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 801792a:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 801792e:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 8017932:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 8017936:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 801793a:	eef0 0a49 	vmov.f32	s1, s18
 801793e:	eeb0 0a69 	vmov.f32	s0, s19
 8017942:	4620      	mov	r0, r4
 8017944:	f7ff fd64 	bl	8017410 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8017948:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 801794c:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 8017950:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 8017954:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 8017958:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 801795c:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 8017960:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 8017964:	ecbd 8b06 	vpop	{d8-d10}
 8017968:	bd70      	pop	{r4, r5, r6, pc}
 801796a:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 801796e:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8017972:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8017976:	b16b      	cbz	r3, 8017994 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 8017978:	eef0 1a49 	vmov.f32	s3, s18
 801797c:	eeb0 1a69 	vmov.f32	s2, s19
 8017980:	eef0 0a62 	vmov.f32	s1, s5
 8017984:	eeb0 0a42 	vmov.f32	s0, s4
 8017988:	4620      	mov	r0, r4
 801798a:	f7ff feb1 	bl	80176f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 801798e:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 8017992:	e7db      	b.n	801794c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 8017994:	eef0 4a48 	vmov.f32	s9, s16
 8017998:	eeb0 4a68 	vmov.f32	s8, s17
 801799c:	eef0 3a49 	vmov.f32	s7, s18
 80179a0:	eeb0 3a69 	vmov.f32	s6, s19
 80179a4:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 80179a8:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 80179ac:	4620      	mov	r0, r4
 80179ae:	f7ff fe13 	bl	80175d8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 80179b2:	e7cb      	b.n	801794c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

080179b4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 80179b4:	ee07 2a90 	vmov	s15, r2
 80179b8:	ee07 1a10 	vmov	s14, r1
 80179bc:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80179c0:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 80179c4:	eddf 7a03 	vldr	s15, [pc, #12]	@ 80179d4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 80179c8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80179cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80179d0:	f7ff bf76 	b.w	80178c0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80179d4:	3d000000 	.word	0x3d000000

080179d8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 80179d8:	b538      	push	{r3, r4, r5, lr}
 80179da:	ed2d 8b02 	vpush	{d8}
 80179de:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 80179e2:	4604      	mov	r4, r0
 80179e4:	b31d      	cbz	r5, 8017a2e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 80179e6:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 80179ea:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 80179ee:	ee78 8a67 	vsub.f32	s17, s16, s15
 80179f2:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 80179f6:	eef0 0a68 	vmov.f32	s1, s17
 80179fa:	ee38 8a27 	vadd.f32	s16, s16, s15
 80179fe:	f7ff fd07 	bl	8017410 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8017a02:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8017a06:	eef0 1a48 	vmov.f32	s3, s16
 8017a0a:	eeb0 0a41 	vmov.f32	s0, s2
 8017a0e:	eef0 0a68 	vmov.f32	s1, s17
 8017a12:	4620      	mov	r0, r4
 8017a14:	f7ff fe6c 	bl	80176f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8017a18:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8017a1c:	eef0 1a68 	vmov.f32	s3, s17
 8017a20:	eef0 0a48 	vmov.f32	s1, s16
 8017a24:	eeb0 0a41 	vmov.f32	s0, s2
 8017a28:	4620      	mov	r0, r4
 8017a2a:	f7ff fe61 	bl	80176f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8017a2e:	ecbd 8b02 	vpop	{d8}
 8017a32:	4628      	mov	r0, r5
 8017a34:	bd38      	pop	{r3, r4, r5, pc}

08017a36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 8017a36:	b510      	push	{r4, lr}
 8017a38:	ed2d 8b02 	vpush	{d8}
 8017a3c:	4604      	mov	r4, r0
 8017a3e:	eeb0 8a40 	vmov.f32	s16, s0
 8017a42:	eef0 8a60 	vmov.f32	s17, s1
 8017a46:	f7ff ffc7 	bl	80179d8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8017a4a:	b9d0      	cbnz	r0, 8017a82 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 8017a4c:	4620      	mov	r0, r4
 8017a4e:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 8017a52:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 8017a56:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 8017a5a:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 8017a5e:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8017a62:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8017a66:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8017a6a:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8017a6e:	eef0 0a68 	vmov.f32	s1, s17
 8017a72:	eeb0 0a48 	vmov.f32	s0, s16
 8017a76:	f7ff fdaf 	bl	80175d8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8017a7a:	2001      	movs	r0, #1
 8017a7c:	ecbd 8b02 	vpop	{d8}
 8017a80:	bd10      	pop	{r4, pc}
 8017a82:	2000      	movs	r0, #0
 8017a84:	e7fa      	b.n	8017a7c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

08017a86 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 8017a86:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 8017a8a:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 8017a8e:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 8017a92:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 8017a96:	f7ff be2b 	b.w	80176f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

08017a9c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 8017a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aa0:	b089      	sub	sp, #36	@ 0x24
 8017aa2:	461c      	mov	r4, r3
 8017aa4:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8017aa8:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8017aac:	4682      	mov	sl, r0
 8017aae:	9304      	str	r3, [sp, #16]
 8017ab0:	2300      	movs	r3, #0
 8017ab2:	4615      	mov	r5, r2
 8017ab4:	f10d 0820 	add.w	r8, sp, #32
 8017ab8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8017aba:	9306      	str	r3, [sp, #24]
 8017abc:	f848 3d04 	str.w	r3, [r8, #-4]!
 8017ac0:	9b04      	ldr	r3, [sp, #16]
 8017ac2:	9105      	str	r1, [sp, #20]
 8017ac4:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 8017ac8:	9b05      	ldr	r3, [sp, #20]
 8017aca:	429d      	cmp	r5, r3
 8017acc:	d96d      	bls.n	8017baa <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 8017ace:	3d01      	subs	r5, #1
 8017ad0:	f819 3005 	ldrb.w	r3, [r9, r5]
 8017ad4:	2b06      	cmp	r3, #6
 8017ad6:	d8f7      	bhi.n	8017ac8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8017ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8017ae0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 8017ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ade:	bf00      	nop
 8017ae0:	08017aff 	.word	0x08017aff
 8017ae4:	08017ac9 	.word	0x08017ac9
 8017ae8:	08017afd 	.word	0x08017afd
 8017aec:	08017b21 	.word	0x08017b21
 8017af0:	08017b21 	.word	0x08017b21
 8017af4:	08017b25 	.word	0x08017b25
 8017af8:	08017b65 	.word	0x08017b65
 8017afc:	3c02      	subs	r4, #2
 8017afe:	4650      	mov	r0, sl
 8017b00:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8017b04:	9400      	str	r4, [sp, #0]
 8017b06:	462b      	mov	r3, r5
 8017b08:	4642      	mov	r2, r8
 8017b0a:	a906      	add	r1, sp, #24
 8017b0c:	f7ff fcae 	bl	801746c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8017b10:	eddd 0a07 	vldr	s1, [sp, #28]
 8017b14:	ed9d 0a06 	vldr	s0, [sp, #24]
 8017b18:	4630      	mov	r0, r6
 8017b1a:	f7ff fed1 	bl	80178c0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8017b1e:	e7d3      	b.n	8017ac8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8017b20:	3c01      	subs	r4, #1
 8017b22:	e7ec      	b.n	8017afe <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8017b24:	f1a4 0b04 	sub.w	fp, r4, #4
 8017b28:	3c02      	subs	r4, #2
 8017b2a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8017b2e:	4650      	mov	r0, sl
 8017b30:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8017b34:	f8cd b000 	str.w	fp, [sp]
 8017b38:	462b      	mov	r3, r5
 8017b3a:	4642      	mov	r2, r8
 8017b3c:	a906      	add	r1, sp, #24
 8017b3e:	f7ff fc95 	bl	801746c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8017b42:	eddd 2a07 	vldr	s5, [sp, #28]
 8017b46:	ed9d 2a06 	vldr	s4, [sp, #24]
 8017b4a:	ed54 1a01 	vldr	s3, [r4, #-4]
 8017b4e:	ed14 1a02 	vldr	s2, [r4, #-8]
 8017b52:	edd4 0a01 	vldr	s1, [r4, #4]
 8017b56:	ed94 0a00 	vldr	s0, [r4]
 8017b5a:	4630      	mov	r0, r6
 8017b5c:	f7ff fc1a 	bl	8017394 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8017b60:	465c      	mov	r4, fp
 8017b62:	e7b1      	b.n	8017ac8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8017b64:	f1a4 0b06 	sub.w	fp, r4, #6
 8017b68:	3c02      	subs	r4, #2
 8017b6a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8017b6e:	4650      	mov	r0, sl
 8017b70:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8017b74:	f8cd b000 	str.w	fp, [sp]
 8017b78:	462b      	mov	r3, r5
 8017b7a:	4642      	mov	r2, r8
 8017b7c:	a906      	add	r1, sp, #24
 8017b7e:	f7ff fc75 	bl	801746c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8017b82:	eddd 3a07 	vldr	s7, [sp, #28]
 8017b86:	ed9d 3a06 	vldr	s6, [sp, #24]
 8017b8a:	ed54 2a03 	vldr	s5, [r4, #-12]
 8017b8e:	ed14 2a04 	vldr	s4, [r4, #-16]
 8017b92:	ed54 1a01 	vldr	s3, [r4, #-4]
 8017b96:	ed14 1a02 	vldr	s2, [r4, #-8]
 8017b9a:	edd4 0a01 	vldr	s1, [r4, #4]
 8017b9e:	ed94 0a00 	vldr	s0, [r4]
 8017ba2:	4630      	mov	r0, r6
 8017ba4:	f7ff fc15 	bl	80173d2 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8017ba8:	e7da      	b.n	8017b60 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 8017baa:	9b04      	ldr	r3, [sp, #16]
 8017bac:	b113      	cbz	r3, 8017bb4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 8017bae:	4630      	mov	r0, r6
 8017bb0:	f7ff ff69 	bl	8017a86 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8017bb4:	b009      	add	sp, #36	@ 0x24
 8017bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bba:	bf00      	nop

08017bbc <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 8017bbc:	eef0 7a60 	vmov.f32	s15, s1
 8017bc0:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8017bc4:	ee17 2a90 	vmov	r2, s15
 8017bc8:	eef0 7a40 	vmov.f32	s15, s0
 8017bcc:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8017bd0:	6803      	ldr	r3, [r0, #0]
 8017bd2:	ee17 1a90 	vmov	r1, s15
 8017bd6:	689b      	ldr	r3, [r3, #8]
 8017bd8:	4718      	bx	r3
	...

08017bdc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 8017bdc:	b510      	push	{r4, lr}
 8017bde:	4604      	mov	r4, r0
 8017be0:	4b03      	ldr	r3, [pc, #12]	@ (8017bf0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 8017be2:	f840 3b14 	str.w	r3, [r0], #20
 8017be6:	f000 ff2d 	bl	8018a44 <_ZN8touchgfx7OutlineD1Ev>
 8017bea:	4620      	mov	r0, r4
 8017bec:	bd10      	pop	{r4, pc}
 8017bee:	bf00      	nop
 8017bf0:	08031424 	.word	0x08031424

08017bf4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8017bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bf8:	ed2d 8b04 	vpush	{d8-d9}
 8017bfc:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 8017c00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c08:	b0b5      	sub	sp, #212	@ 0xd4
 8017c0a:	4605      	mov	r5, r0
 8017c0c:	468b      	mov	fp, r1
 8017c0e:	9206      	str	r2, [sp, #24]
 8017c10:	461e      	mov	r6, r3
 8017c12:	f04f 0400 	mov.w	r4, #0
 8017c16:	f240 814e 	bls.w	8017eb6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 8017c1a:	23ff      	movs	r3, #255	@ 0xff
 8017c1c:	9300      	str	r3, [sp, #0]
 8017c1e:	1d02      	adds	r2, r0, #4
 8017c20:	6981      	ldr	r1, [r0, #24]
 8017c22:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8017c24:	a808      	add	r0, sp, #32
 8017c26:	f014 fc45 	bl	802c4b4 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8017c2a:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 8017c2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c36:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8017c3a:	bf48      	it	mi
 8017c3c:	eef1 7a67 	vnegmi.f32	s15, s15
 8017c40:	edd5 6a08 	vldr	s13, [r5, #32]
 8017c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017c48:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8017c4c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017c50:	ed9f 9a9a 	vldr	s18, [pc, #616]	@ 8017ebc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 8017c54:	f04f 0800 	mov.w	r8, #0
 8017c58:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 8017c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017c60:	4b97      	ldr	r3, [pc, #604]	@ (8017ec0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 8017c62:	2201      	movs	r2, #1
 8017c64:	9308      	str	r3, [sp, #32]
 8017c66:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8017c6a:	9325      	str	r3, [sp, #148]	@ 0x94
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	942a      	str	r4, [sp, #168]	@ 0xa8
 8017c70:	942b      	str	r4, [sp, #172]	@ 0xac
 8017c72:	942c      	str	r4, [sp, #176]	@ 0xb0
 8017c74:	942d      	str	r4, [sp, #180]	@ 0xb4
 8017c76:	942e      	str	r4, [sp, #184]	@ 0xb8
 8017c78:	942f      	str	r4, [sp, #188]	@ 0xbc
 8017c7a:	9430      	str	r4, [sp, #192]	@ 0xc0
 8017c7c:	9431      	str	r4, [sp, #196]	@ 0xc4
 8017c7e:	9432      	str	r4, [sp, #200]	@ 0xc8
 8017c80:	9433      	str	r4, [sp, #204]	@ 0xcc
 8017c82:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8017c86:	eef0 9a49 	vmov.f32	s19, s18
 8017c8a:	eeb0 8a49 	vmov.f32	s16, s18
 8017c8e:	eef0 8a49 	vmov.f32	s17, s18
 8017c92:	4644      	mov	r4, r8
 8017c94:	46c1      	mov	r9, r8
 8017c96:	f04f 0a01 	mov.w	sl, #1
 8017c9a:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 8017c9e:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 8017ca2:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 8017ca6:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8017caa:	7f6a      	ldrb	r2, [r5, #29]
 8017cac:	7fab      	ldrb	r3, [r5, #30]
 8017cae:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 8017cb2:	435a      	muls	r2, r3
 8017cb4:	1c53      	adds	r3, r2, #1
 8017cb6:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8017cba:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8017cbe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8017cc2:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8017cc6:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 8017cca:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 8017cce:	af08      	add	r7, sp, #32
 8017cd0:	9b06      	ldr	r3, [sp, #24]
 8017cd2:	454b      	cmp	r3, r9
 8017cd4:	f000 80cc 	beq.w	8017e70 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8017cd8:	f109 0301 	add.w	r3, r9, #1
 8017cdc:	9305      	str	r3, [sp, #20]
 8017cde:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8017ce2:	2b06      	cmp	r3, #6
 8017ce4:	d839      	bhi.n	8017d5a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8017ce6:	e8df f003 	tbb	[pc, r3]
 8017cea:	3b04      	.short	0x3b04
 8017cec:	817c6f60 	.word	0x817c6f60
 8017cf0:	a0          	.byte	0xa0
 8017cf1:	00          	.byte	0x00
 8017cf2:	45c1      	cmp	r9, r8
 8017cf4:	d92b      	bls.n	8017d4e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8017cf6:	eef0 0a49 	vmov.f32	s1, s18
 8017cfa:	eeb0 0a69 	vmov.f32	s0, s19
 8017cfe:	4638      	mov	r0, r7
 8017d00:	f7ff fdde 	bl	80178c0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8017d04:	4638      	mov	r0, r7
 8017d06:	f7ff fe67 	bl	80179d8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8017d0a:	4681      	mov	r9, r0
 8017d0c:	b9f8      	cbnz	r0, 8017d4e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8017d0e:	eef0 0a49 	vmov.f32	s1, s18
 8017d12:	eeb0 0a69 	vmov.f32	s0, s19
 8017d16:	4638      	mov	r0, r7
 8017d18:	f7ff fe8d 	bl	8017a36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8017d1c:	4628      	mov	r0, r5
 8017d1e:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8017d22:	e9cd b600 	strd	fp, r6, [sp]
 8017d26:	4623      	mov	r3, r4
 8017d28:	9a05      	ldr	r2, [sp, #20]
 8017d2a:	4641      	mov	r1, r8
 8017d2c:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 8017d30:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8017d34:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8017d38:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8017d3c:	f7ff feae 	bl	8017a9c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8017d40:	eef0 0a49 	vmov.f32	s1, s18
 8017d44:	eeb0 0a69 	vmov.f32	s0, s19
 8017d48:	4638      	mov	r0, r7
 8017d4a:	f7ff fe74 	bl	8017a36 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8017d4e:	eeb0 8a49 	vmov.f32	s16, s18
 8017d52:	eef0 8a69 	vmov.f32	s17, s19
 8017d56:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017d5a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8017d5e:	e7b7      	b.n	8017cd0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8017d60:	45c1      	cmp	r9, r8
 8017d62:	d90d      	bls.n	8017d80 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8017d64:	4638      	mov	r0, r7
 8017d66:	f7ff fe37 	bl	80179d8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8017d6a:	b948      	cbnz	r0, 8017d80 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8017d6c:	e9cd a702 	strd	sl, r7, [sp, #8]
 8017d70:	e9cd b600 	strd	fp, r6, [sp]
 8017d74:	4623      	mov	r3, r4
 8017d76:	464a      	mov	r2, r9
 8017d78:	4641      	mov	r1, r8
 8017d7a:	4628      	mov	r0, r5
 8017d7c:	f7ff fe8e 	bl	8017a9c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8017d80:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017d84:	edd3 8a00 	vldr	s17, [r3]
 8017d88:	ed93 8a01 	vldr	s16, [r3, #4]
 8017d8c:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8017d90:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8017d94:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8017d98:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8017d9c:	3402      	adds	r4, #2
 8017d9e:	46c8      	mov	r8, r9
 8017da0:	eeb0 9a48 	vmov.f32	s18, s16
 8017da4:	eef0 9a68 	vmov.f32	s19, s17
 8017da8:	e7d7      	b.n	8017d5a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8017daa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017dae:	edd3 8a00 	vldr	s17, [r3]
 8017db2:	ed93 8a01 	vldr	s16, [r3, #4]
 8017db6:	eeb0 0a68 	vmov.f32	s0, s17
 8017dba:	eef0 0a48 	vmov.f32	s1, s16
 8017dbe:	4638      	mov	r0, r7
 8017dc0:	f7ff fd7e 	bl	80178c0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8017dc4:	3402      	adds	r4, #2
 8017dc6:	e7c8      	b.n	8017d5a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8017dc8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017dcc:	edd3 8a00 	vldr	s17, [r3]
 8017dd0:	eef0 0a48 	vmov.f32	s1, s16
 8017dd4:	eeb0 0a68 	vmov.f32	s0, s17
 8017dd8:	4638      	mov	r0, r7
 8017dda:	f7ff fd71 	bl	80178c0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8017dde:	3401      	adds	r4, #1
 8017de0:	e7bb      	b.n	8017d5a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8017de2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017de6:	ed93 8a00 	vldr	s16, [r3]
 8017dea:	e7f1      	b.n	8017dd0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8017dec:	00a3      	lsls	r3, r4, #2
 8017dee:	f103 0208 	add.w	r2, r3, #8
 8017df2:	f103 090c 	add.w	r9, r3, #12
 8017df6:	4432      	add	r2, r6
 8017df8:	4433      	add	r3, r6
 8017dfa:	44b1      	add	r9, r6
 8017dfc:	ed92 2a00 	vldr	s4, [r2]
 8017e00:	eef0 0a48 	vmov.f32	s1, s16
 8017e04:	eeb0 0a68 	vmov.f32	s0, s17
 8017e08:	edd9 2a00 	vldr	s5, [r9]
 8017e0c:	edd3 1a01 	vldr	s3, [r3, #4]
 8017e10:	ed93 1a00 	vldr	s2, [r3]
 8017e14:	4638      	mov	r0, r7
 8017e16:	9207      	str	r2, [sp, #28]
 8017e18:	f7ff fabc 	bl	8017394 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8017e1c:	9a07      	ldr	r2, [sp, #28]
 8017e1e:	ed99 8a00 	vldr	s16, [r9]
 8017e22:	edd2 8a00 	vldr	s17, [r2]
 8017e26:	3404      	adds	r4, #4
 8017e28:	e797      	b.n	8017d5a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8017e2a:	00a3      	lsls	r3, r4, #2
 8017e2c:	f103 0210 	add.w	r2, r3, #16
 8017e30:	f103 0914 	add.w	r9, r3, #20
 8017e34:	4432      	add	r2, r6
 8017e36:	4433      	add	r3, r6
 8017e38:	44b1      	add	r9, r6
 8017e3a:	ed92 3a00 	vldr	s6, [r2]
 8017e3e:	eef0 0a48 	vmov.f32	s1, s16
 8017e42:	eeb0 0a68 	vmov.f32	s0, s17
 8017e46:	edd9 3a00 	vldr	s7, [r9]
 8017e4a:	edd3 2a03 	vldr	s5, [r3, #12]
 8017e4e:	ed93 2a02 	vldr	s4, [r3, #8]
 8017e52:	edd3 1a01 	vldr	s3, [r3, #4]
 8017e56:	ed93 1a00 	vldr	s2, [r3]
 8017e5a:	4638      	mov	r0, r7
 8017e5c:	9207      	str	r2, [sp, #28]
 8017e5e:	f7ff fab8 	bl	80173d2 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8017e62:	9a07      	ldr	r2, [sp, #28]
 8017e64:	ed99 8a00 	vldr	s16, [r9]
 8017e68:	edd2 8a00 	vldr	s17, [r2]
 8017e6c:	3406      	adds	r4, #6
 8017e6e:	e774      	b.n	8017d5a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8017e70:	9b06      	ldr	r3, [sp, #24]
 8017e72:	af08      	add	r7, sp, #32
 8017e74:	4543      	cmp	r3, r8
 8017e76:	d90f      	bls.n	8017e98 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8017e78:	4638      	mov	r0, r7
 8017e7a:	f7ff fdad 	bl	80179d8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8017e7e:	b958      	cbnz	r0, 8017e98 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8017e80:	2301      	movs	r3, #1
 8017e82:	9703      	str	r7, [sp, #12]
 8017e84:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8017e88:	f8cd b000 	str.w	fp, [sp]
 8017e8c:	4623      	mov	r3, r4
 8017e8e:	9a06      	ldr	r2, [sp, #24]
 8017e90:	4641      	mov	r1, r8
 8017e92:	4628      	mov	r0, r5
 8017e94:	f7ff fe02 	bl	8017a9c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8017e98:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 8017e9c:	4638      	mov	r0, r7
 8017e9e:	f014 fb9d 	bl	802c5dc <_ZN8touchgfx6Canvas6renderEh>
 8017ea2:	4604      	mov	r4, r0
 8017ea4:	4638      	mov	r0, r7
 8017ea6:	f7ff fe99 	bl	8017bdc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8017eaa:	4620      	mov	r0, r4
 8017eac:	b035      	add	sp, #212	@ 0xd4
 8017eae:	ecbd 8b04 	vpop	{d8-d9}
 8017eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017eb6:	2401      	movs	r4, #1
 8017eb8:	e7f7      	b.n	8017eaa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 8017eba:	bf00      	nop
 8017ebc:	00000000 	.word	0x00000000
 8017ec0:	08030b98 	.word	0x08030b98

08017ec4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8017ec4:	b510      	push	{r4, lr}
 8017ec6:	4604      	mov	r4, r0
 8017ec8:	f7ff fe88 	bl	8017bdc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8017ecc:	4620      	mov	r0, r4
 8017ece:	21b0      	movs	r1, #176	@ 0xb0
 8017ed0:	f014 ff51 	bl	802cd76 <_ZdlPvj>
 8017ed4:	4620      	mov	r0, r4
 8017ed6:	bd10      	pop	{r4, pc}

08017ed8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8017ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017edc:	ed2d 8b06 	vpush	{d8-d10}
 8017ee0:	4698      	mov	r8, r3
 8017ee2:	23ff      	movs	r3, #255	@ 0xff
 8017ee4:	4607      	mov	r7, r0
 8017ee6:	b0aa      	sub	sp, #168	@ 0xa8
 8017ee8:	9300      	str	r3, [sp, #0]
 8017eea:	4689      	mov	r9, r1
 8017eec:	4692      	mov	sl, r2
 8017eee:	6981      	ldr	r1, [r0, #24]
 8017ef0:	1d02      	adds	r2, r0, #4
 8017ef2:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8017ef4:	a80d      	add	r0, sp, #52	@ 0x34
 8017ef6:	f014 fadd 	bl	802c4b4 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8017efa:	eddf 0a80 	vldr	s1, [pc, #512]	@ 80180fc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8017efe:	7f3b      	ldrb	r3, [r7, #28]
 8017f00:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8017f04:	1e5a      	subs	r2, r3, #1
 8017f06:	4253      	negs	r3, r2
 8017f08:	4153      	adcs	r3, r2
 8017f0a:	eeb0 0a60 	vmov.f32	s0, s1
 8017f0e:	4628      	mov	r0, r5
 8017f10:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8017f14:	ed9f 8a79 	vldr	s16, [pc, #484]	@ 80180fc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8017f18:	f004 fa8d 	bl	801c436 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017f1c:	eef0 8a48 	vmov.f32	s17, s16
 8017f20:	eeb0 9a40 	vmov.f32	s18, s0
 8017f24:	eef0 9a60 	vmov.f32	s19, s1
 8017f28:	2400      	movs	r4, #0
 8017f2a:	44ca      	add	sl, r9
 8017f2c:	45ca      	cmp	sl, r9
 8017f2e:	f000 80cd 	beq.w	80180cc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8017f32:	f819 3b01 	ldrb.w	r3, [r9], #1
 8017f36:	2b06      	cmp	r3, #6
 8017f38:	d8f8      	bhi.n	8017f2c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8017f3a:	e8df f003 	tbb	[pc, r3]
 8017f3e:	0804      	.short	0x0804
 8017f40:	58533f2a 	.word	0x58533f2a
 8017f44:	8a          	.byte	0x8a
 8017f45:	00          	.byte	0x00
 8017f46:	a80d      	add	r0, sp, #52	@ 0x34
 8017f48:	f014 fb26 	bl	802c598 <_ZN8touchgfx6Canvas5closeEv>
 8017f4c:	e7ee      	b.n	8017f2c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8017f4e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8017f52:	edd3 8a00 	vldr	s17, [r3]
 8017f56:	ed93 8a01 	vldr	s16, [r3, #4]
 8017f5a:	eeb0 0a68 	vmov.f32	s0, s17
 8017f5e:	eef0 0a48 	vmov.f32	s1, s16
 8017f62:	4628      	mov	r0, r5
 8017f64:	f004 fa67 	bl	801c436 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017f68:	eef0 7a60 	vmov.f32	s15, s1
 8017f6c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8017f70:	ee17 2a90 	vmov	r2, s15
 8017f74:	eef0 7a40 	vmov.f32	s15, s0
 8017f78:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8017f7c:	a80d      	add	r0, sp, #52	@ 0x34
 8017f7e:	ee17 1a90 	vmov	r1, s15
 8017f82:	eeb0 9a40 	vmov.f32	s18, s0
 8017f86:	eef0 9a60 	vmov.f32	s19, s1
 8017f8a:	f014 fbdf 	bl	802c74c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8017f8e:	3402      	adds	r4, #2
 8017f90:	e7cc      	b.n	8017f2c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8017f92:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8017f96:	edd3 8a00 	vldr	s17, [r3]
 8017f9a:	ed93 8a01 	vldr	s16, [r3, #4]
 8017f9e:	eeb0 0a68 	vmov.f32	s0, s17
 8017fa2:	eef0 0a48 	vmov.f32	s1, s16
 8017fa6:	4628      	mov	r0, r5
 8017fa8:	f004 fa45 	bl	801c436 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017fac:	a80d      	add	r0, sp, #52	@ 0x34
 8017fae:	eeb0 9a40 	vmov.f32	s18, s0
 8017fb2:	eef0 9a60 	vmov.f32	s19, s1
 8017fb6:	f7ff fe01 	bl	8017bbc <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8017fba:	e7e8      	b.n	8017f8e <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 8017fbc:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8017fc0:	edd3 8a00 	vldr	s17, [r3]
 8017fc4:	eef0 0a48 	vmov.f32	s1, s16
 8017fc8:	eeb0 0a68 	vmov.f32	s0, s17
 8017fcc:	4628      	mov	r0, r5
 8017fce:	f004 fa32 	bl	801c436 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8017fd2:	a80d      	add	r0, sp, #52	@ 0x34
 8017fd4:	eeb0 9a40 	vmov.f32	s18, s0
 8017fd8:	eef0 9a60 	vmov.f32	s19, s1
 8017fdc:	3401      	adds	r4, #1
 8017fde:	f7ff fded 	bl	8017bbc <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8017fe2:	e7a3      	b.n	8017f2c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8017fe4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8017fe8:	ed93 8a00 	vldr	s16, [r3]
 8017fec:	e7ea      	b.n	8017fc4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 8017fee:	1ca3      	adds	r3, r4, #2
 8017ff0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8017ff4:	ed53 0a01 	vldr	s1, [r3, #-4]
 8017ff8:	ed13 0a02 	vldr	s0, [r3, #-8]
 8017ffc:	4628      	mov	r0, r5
 8017ffe:	edd3 8a00 	vldr	s17, [r3]
 8018002:	ed93 8a01 	vldr	s16, [r3, #4]
 8018006:	f004 fa16 	bl	801c436 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801800a:	4628      	mov	r0, r5
 801800c:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8018010:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8018014:	eeb0 0a68 	vmov.f32	s0, s17
 8018018:	eef0 0a48 	vmov.f32	s1, s16
 801801c:	f004 fa0b 	bl	801c436 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8018020:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 8018024:	eef0 2a60 	vmov.f32	s5, s1
 8018028:	eeb0 2a40 	vmov.f32	s4, s0
 801802c:	eeb0 aa40 	vmov.f32	s20, s0
 8018030:	eef0 aa60 	vmov.f32	s21, s1
 8018034:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 8018038:	eef0 0a69 	vmov.f32	s1, s19
 801803c:	eeb0 0a49 	vmov.f32	s0, s18
 8018040:	a80d      	add	r0, sp, #52	@ 0x34
 8018042:	f7ff f9a7 	bl	8017394 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8018046:	3404      	adds	r4, #4
 8018048:	eef0 9a6a 	vmov.f32	s19, s21
 801804c:	eeb0 9a4a 	vmov.f32	s18, s20
 8018050:	e76c      	b.n	8017f2c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8018052:	1d26      	adds	r6, r4, #4
 8018054:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8018058:	ed56 0a03 	vldr	s1, [r6, #-12]
 801805c:	ed16 0a04 	vldr	s0, [r6, #-16]
 8018060:	4628      	mov	r0, r5
 8018062:	edd6 8a00 	vldr	s17, [r6]
 8018066:	ed96 8a01 	vldr	s16, [r6, #4]
 801806a:	f004 f9e4 	bl	801c436 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801806e:	4628      	mov	r0, r5
 8018070:	ed8d 0a07 	vstr	s0, [sp, #28]
 8018074:	edcd 0a08 	vstr	s1, [sp, #32]
 8018078:	ed16 0a02 	vldr	s0, [r6, #-8]
 801807c:	ed56 0a01 	vldr	s1, [r6, #-4]
 8018080:	f004 f9d9 	bl	801c436 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8018084:	4628      	mov	r0, r5
 8018086:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 801808a:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 801808e:	eeb0 0a68 	vmov.f32	s0, s17
 8018092:	eef0 0a48 	vmov.f32	s1, s16
 8018096:	f004 f9ce 	bl	801c436 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801809a:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 801809e:	eef0 3a60 	vmov.f32	s7, s1
 80180a2:	eeb0 3a40 	vmov.f32	s6, s0
 80180a6:	eeb0 aa40 	vmov.f32	s20, s0
 80180aa:	eef0 aa60 	vmov.f32	s21, s1
 80180ae:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 80180b2:	eddd 1a08 	vldr	s3, [sp, #32]
 80180b6:	ed9d 1a07 	vldr	s2, [sp, #28]
 80180ba:	eef0 0a69 	vmov.f32	s1, s19
 80180be:	eeb0 0a49 	vmov.f32	s0, s18
 80180c2:	a80d      	add	r0, sp, #52	@ 0x34
 80180c4:	f7ff f985 	bl	80173d2 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 80180c8:	3406      	adds	r4, #6
 80180ca:	e7bd      	b.n	8018048 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 80180cc:	7f7b      	ldrb	r3, [r7, #29]
 80180ce:	7fb9      	ldrb	r1, [r7, #30]
 80180d0:	a80d      	add	r0, sp, #52	@ 0x34
 80180d2:	4359      	muls	r1, r3
 80180d4:	1c4b      	adds	r3, r1, #1
 80180d6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80180da:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80180de:	f014 fa7d 	bl	802c5dc <_ZN8touchgfx6Canvas6renderEh>
 80180e2:	4604      	mov	r4, r0
 80180e4:	4b06      	ldr	r3, [pc, #24]	@ (8018100 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 80180e6:	a812      	add	r0, sp, #72	@ 0x48
 80180e8:	930d      	str	r3, [sp, #52]	@ 0x34
 80180ea:	f000 fcab 	bl	8018a44 <_ZN8touchgfx7OutlineD1Ev>
 80180ee:	4620      	mov	r0, r4
 80180f0:	b02a      	add	sp, #168	@ 0xa8
 80180f2:	ecbd 8b06 	vpop	{d8-d10}
 80180f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180fa:	bf00      	nop
 80180fc:	00000000 	.word	0x00000000
 8018100:	08031424 	.word	0x08031424

08018104 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8018104:	b410      	push	{r4}
 8018106:	7f04      	ldrb	r4, [r0, #28]
 8018108:	b11c      	cbz	r4, 8018112 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 801810a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801810e:	f7ff bee3 	b.w	8017ed8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 8018112:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018116:	f7ff bd6d 	b.w	8017bf4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>
	...

0801811c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 801811c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018120:	4691      	mov	r9, r2
 8018122:	4602      	mov	r2, r0
 8018124:	4605      	mov	r5, r0
 8018126:	f852 0f26 	ldr.w	r0, [r2, #38]!
 801812a:	b085      	sub	sp, #20
 801812c:	4688      	mov	r8, r1
 801812e:	6851      	ldr	r1, [r2, #4]
 8018130:	469a      	mov	sl, r3
 8018132:	ab02      	add	r3, sp, #8
 8018134:	c303      	stmia	r3!, {r0, r1}
 8018136:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801813a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801813e:	2b00      	cmp	r3, #0
 8018140:	af02      	add	r7, sp, #8
 8018142:	dd08      	ble.n	8018156 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8018144:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8018148:	2c00      	cmp	r4, #0
 801814a:	dd04      	ble.n	8018156 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 801814c:	4a2e      	ldr	r2, [pc, #184]	@ (8018208 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xec>)
 801814e:	7812      	ldrb	r2, [r2, #0]
 8018150:	b122      	cbz	r2, 801815c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x40>
 8018152:	2a01      	cmp	r2, #1
 8018154:	d02d      	beq.n	80181b2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x96>
 8018156:	b005      	add	sp, #20
 8018158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801815c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018160:	441c      	add	r4, r3
 8018162:	b2a4      	uxth	r4, r4
 8018164:	b226      	sxth	r6, r4
 8018166:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801816a:	42b3      	cmp	r3, r6
 801816c:	daf3      	bge.n	8018156 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 801816e:	e9cd b700 	strd	fp, r7, [sp]
 8018172:	4653      	mov	r3, sl
 8018174:	464a      	mov	r2, r9
 8018176:	4641      	mov	r1, r8
 8018178:	4628      	mov	r0, r5
 801817a:	f7ff ffc3 	bl	8018104 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 801817e:	b940      	cbnz	r0, 8018192 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 8018180:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018184:	2b01      	cmp	r3, #1
 8018186:	d004      	beq.n	8018192 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 8018188:	3301      	adds	r3, #1
 801818a:	105b      	asrs	r3, r3, #1
 801818c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018190:	e7ed      	b.n	801816e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x52>
 8018192:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8018196:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801819a:	4413      	add	r3, r2
 801819c:	b29b      	uxth	r3, r3
 801819e:	441a      	add	r2, r3
 80181a0:	b212      	sxth	r2, r2
 80181a2:	4296      	cmp	r6, r2
 80181a4:	f8ad 300a 	strh.w	r3, [sp, #10]
 80181a8:	dadd      	bge.n	8018166 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 80181aa:	1ae3      	subs	r3, r4, r3
 80181ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 80181b0:	e7d9      	b.n	8018166 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 80181b2:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 80181b6:	441c      	add	r4, r3
 80181b8:	b2a4      	uxth	r4, r4
 80181ba:	b226      	sxth	r6, r4
 80181bc:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80181c0:	42b3      	cmp	r3, r6
 80181c2:	dac8      	bge.n	8018156 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 80181c4:	e9cd b700 	strd	fp, r7, [sp]
 80181c8:	4653      	mov	r3, sl
 80181ca:	464a      	mov	r2, r9
 80181cc:	4641      	mov	r1, r8
 80181ce:	4628      	mov	r0, r5
 80181d0:	f7ff ff98 	bl	8018104 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 80181d4:	b940      	cbnz	r0, 80181e8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 80181d6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80181da:	2b01      	cmp	r3, #1
 80181dc:	d004      	beq.n	80181e8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 80181de:	3301      	adds	r3, #1
 80181e0:	105b      	asrs	r3, r3, #1
 80181e2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80181e6:	e7ed      	b.n	80181c4 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa8>
 80181e8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80181ec:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80181f0:	4413      	add	r3, r2
 80181f2:	b29b      	uxth	r3, r3
 80181f4:	441a      	add	r2, r3
 80181f6:	b212      	sxth	r2, r2
 80181f8:	4296      	cmp	r6, r2
 80181fa:	f8ad 3008 	strh.w	r3, [sp, #8]
 80181fe:	dadd      	bge.n	80181bc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 8018200:	1ae3      	subs	r3, r4, r3
 8018202:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018206:	e7d9      	b.n	80181bc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 8018208:	2005bd14 	.word	0x2005bd14

0801820c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801820c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801820e:	6803      	ldr	r3, [r0, #0]
 8018210:	460d      	mov	r5, r1
 8018212:	4604      	mov	r4, r0
 8018214:	4601      	mov	r1, r0
 8018216:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018218:	a802      	add	r0, sp, #8
 801821a:	4798      	blx	r3
 801821c:	466b      	mov	r3, sp
 801821e:	6828      	ldr	r0, [r5, #0]
 8018220:	6869      	ldr	r1, [r5, #4]
 8018222:	c303      	stmia	r3!, {r0, r1}
 8018224:	4668      	mov	r0, sp
 8018226:	4619      	mov	r1, r3
 8018228:	f7fc fede 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 801822c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801822e:	b188      	cbz	r0, 8018254 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8018230:	6803      	ldr	r3, [r0, #0]
 8018232:	1d21      	adds	r1, r4, #4
 8018234:	68db      	ldr	r3, [r3, #12]
 8018236:	4798      	blx	r3
 8018238:	b160      	cbz	r0, 8018254 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801823a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801823e:	2b00      	cmp	r3, #0
 8018240:	dd08      	ble.n	8018254 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8018242:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8018246:	2d00      	cmp	r5, #0
 8018248:	dd04      	ble.n	8018254 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801824a:	4a2b      	ldr	r2, [pc, #172]	@ (80182f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 801824c:	7812      	ldrb	r2, [r2, #0]
 801824e:	b11a      	cbz	r2, 8018258 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8018250:	2a01      	cmp	r2, #1
 8018252:	d029      	beq.n	80182a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8018254:	b004      	add	sp, #16
 8018256:	bd70      	pop	{r4, r5, r6, pc}
 8018258:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801825c:	441d      	add	r5, r3
 801825e:	b2ad      	uxth	r5, r5
 8018260:	b22e      	sxth	r6, r5
 8018262:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8018266:	42b3      	cmp	r3, r6
 8018268:	daf4      	bge.n	8018254 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801826a:	6823      	ldr	r3, [r4, #0]
 801826c:	4669      	mov	r1, sp
 801826e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018270:	4620      	mov	r0, r4
 8018272:	4798      	blx	r3
 8018274:	b940      	cbnz	r0, 8018288 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8018276:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801827a:	2b01      	cmp	r3, #1
 801827c:	d004      	beq.n	8018288 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801827e:	3301      	adds	r3, #1
 8018280:	105b      	asrs	r3, r3, #1
 8018282:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018286:	e7f0      	b.n	801826a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8018288:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801828c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018290:	4413      	add	r3, r2
 8018292:	b29b      	uxth	r3, r3
 8018294:	441a      	add	r2, r3
 8018296:	b212      	sxth	r2, r2
 8018298:	4296      	cmp	r6, r2
 801829a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801829e:	dae0      	bge.n	8018262 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80182a0:	1aeb      	subs	r3, r5, r3
 80182a2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80182a6:	e7dc      	b.n	8018262 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80182a8:	f8bd 5000 	ldrh.w	r5, [sp]
 80182ac:	441d      	add	r5, r3
 80182ae:	b2ad      	uxth	r5, r5
 80182b0:	b22e      	sxth	r6, r5
 80182b2:	f9bd 3000 	ldrsh.w	r3, [sp]
 80182b6:	42b3      	cmp	r3, r6
 80182b8:	dacc      	bge.n	8018254 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80182ba:	6823      	ldr	r3, [r4, #0]
 80182bc:	4669      	mov	r1, sp
 80182be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80182c0:	4620      	mov	r0, r4
 80182c2:	4798      	blx	r3
 80182c4:	b940      	cbnz	r0, 80182d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80182c6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80182ca:	2b01      	cmp	r3, #1
 80182cc:	d004      	beq.n	80182d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80182ce:	3301      	adds	r3, #1
 80182d0:	105b      	asrs	r3, r3, #1
 80182d2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80182d6:	e7f0      	b.n	80182ba <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80182d8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80182dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80182e0:	4413      	add	r3, r2
 80182e2:	b29b      	uxth	r3, r3
 80182e4:	441a      	add	r2, r3
 80182e6:	b212      	sxth	r2, r2
 80182e8:	4296      	cmp	r6, r2
 80182ea:	f8ad 3000 	strh.w	r3, [sp]
 80182ee:	dae0      	bge.n	80182b2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 80182f0:	1aeb      	subs	r3, r5, r3
 80182f2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80182f6:	e7dc      	b.n	80182b2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 80182f8:	2005bd14 	.word	0x2005bd14

080182fc <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80182fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80182fe:	6803      	ldr	r3, [r0, #0]
 8018300:	4604      	mov	r4, r0
 8018302:	4601      	mov	r1, r0
 8018304:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018306:	4668      	mov	r0, sp
 8018308:	4798      	blx	r3
 801830a:	2100      	movs	r1, #0
 801830c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8018310:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018314:	9102      	str	r1, [sp, #8]
 8018316:	4668      	mov	r0, sp
 8018318:	a902      	add	r1, sp, #8
 801831a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801831e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018322:	f7fc fe61 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 8018326:	6823      	ldr	r3, [r4, #0]
 8018328:	4669      	mov	r1, sp
 801832a:	691b      	ldr	r3, [r3, #16]
 801832c:	4620      	mov	r0, r4
 801832e:	4798      	blx	r3
 8018330:	b004      	add	sp, #16
 8018332:	bd10      	pop	{r4, pc}

08018334 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8018334:	2101      	movs	r1, #1
 8018336:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801833a:	490b      	ldr	r1, [pc, #44]	@ (8018368 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801833c:	2200      	movs	r2, #0
 801833e:	6001      	str	r1, [r0, #0]
 8018340:	21ff      	movs	r1, #255	@ 0xff
 8018342:	8082      	strh	r2, [r0, #4]
 8018344:	80c2      	strh	r2, [r0, #6]
 8018346:	8102      	strh	r2, [r0, #8]
 8018348:	8142      	strh	r2, [r0, #10]
 801834a:	8182      	strh	r2, [r0, #12]
 801834c:	81c2      	strh	r2, [r0, #14]
 801834e:	8202      	strh	r2, [r0, #16]
 8018350:	8242      	strh	r2, [r0, #18]
 8018352:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8018356:	61c2      	str	r2, [r0, #28]
 8018358:	8402      	strh	r2, [r0, #32]
 801835a:	8442      	strh	r2, [r0, #34]	@ 0x22
 801835c:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8018360:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8018364:	6282      	str	r2, [r0, #40]	@ 0x28
 8018366:	4770      	bx	lr
 8018368:	08030bf8 	.word	0x08030bf8

0801836c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801836c:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8018370:	4770      	bx	lr

08018372 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8018372:	b510      	push	{r4, lr}
 8018374:	4604      	mov	r4, r0
 8018376:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8018378:	b150      	cbz	r0, 8018390 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801837a:	6803      	ldr	r3, [r0, #0]
 801837c:	68db      	ldr	r3, [r3, #12]
 801837e:	4798      	blx	r3
 8018380:	b130      	cbz	r0, 8018390 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8018382:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8018384:	4621      	mov	r1, r4
 8018386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801838a:	6803      	ldr	r3, [r0, #0]
 801838c:	689b      	ldr	r3, [r3, #8]
 801838e:	4718      	bx	r3
 8018390:	bd10      	pop	{r4, pc}

08018392 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8018392:	790b      	ldrb	r3, [r1, #4]
 8018394:	b570      	push	{r4, r5, r6, lr}
 8018396:	2b00      	cmp	r3, #0
 8018398:	bf0c      	ite	eq
 801839a:	2301      	moveq	r3, #1
 801839c:	2300      	movne	r3, #0
 801839e:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80183a2:	4604      	mov	r4, r0
 80183a4:	460e      	mov	r6, r1
 80183a6:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80183aa:	d109      	bne.n	80183c0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80183ac:	b14d      	cbz	r5, 80183c2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80183ae:	7933      	ldrb	r3, [r6, #4]
 80183b0:	2b01      	cmp	r3, #1
 80183b2:	d10c      	bne.n	80183ce <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80183b4:	6823      	ldr	r3, [r4, #0]
 80183b6:	4620      	mov	r0, r4
 80183b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80183bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80183be:	4718      	bx	r3
 80183c0:	b12d      	cbz	r5, 80183ce <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80183c2:	6823      	ldr	r3, [r4, #0]
 80183c4:	4620      	mov	r0, r4
 80183c6:	695b      	ldr	r3, [r3, #20]
 80183c8:	4798      	blx	r3
 80183ca:	2d00      	cmp	r5, #0
 80183cc:	d1ef      	bne.n	80183ae <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80183ce:	bd70      	pop	{r4, r5, r6, pc}

080183d0 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 80183d0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80183d4:	b133      	cbz	r3, 80183e4 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 80183d6:	790b      	ldrb	r3, [r1, #4]
 80183d8:	2b01      	cmp	r3, #1
 80183da:	bf01      	itttt	eq
 80183dc:	8dc3      	ldrheq	r3, [r0, #46]	@ 0x2e
 80183de:	8e02      	ldrheq	r2, [r0, #48]	@ 0x30
 80183e0:	8603      	strheq	r3, [r0, #48]	@ 0x30
 80183e2:	85c2      	strheq	r2, [r0, #46]	@ 0x2e
 80183e4:	f7ff bfd5 	b.w	8018392 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

080183e8 <_ZNK8touchgfx6Button17invalidateContentEv>:
 80183e8:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 80183ec:	b12a      	cbz	r2, 80183fa <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 80183ee:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80183f2:	b112      	cbz	r2, 80183fa <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 80183f4:	6803      	ldr	r3, [r0, #0]
 80183f6:	695b      	ldr	r3, [r3, #20]
 80183f8:	4718      	bx	r3
 80183fa:	4770      	bx	lr

080183fc <_ZNK8touchgfx3Box12getSolidRectEv>:
 80183fc:	2300      	movs	r3, #0
 80183fe:	8083      	strh	r3, [r0, #4]
 8018400:	80c3      	strh	r3, [r0, #6]
 8018402:	8003      	strh	r3, [r0, #0]
 8018404:	8043      	strh	r3, [r0, #2]
 8018406:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 801840a:	2bff      	cmp	r3, #255	@ 0xff
 801840c:	bf01      	itttt	eq
 801840e:	890b      	ldrheq	r3, [r1, #8]
 8018410:	8083      	strheq	r3, [r0, #4]
 8018412:	894b      	ldrheq	r3, [r1, #10]
 8018414:	80c3      	strheq	r3, [r0, #6]
 8018416:	4770      	bx	lr

08018418 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8018418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801841a:	4604      	mov	r4, r0
 801841c:	466b      	mov	r3, sp
 801841e:	6808      	ldr	r0, [r1, #0]
 8018420:	6849      	ldr	r1, [r1, #4]
 8018422:	c303      	stmia	r3!, {r0, r1}
 8018424:	6823      	ldr	r3, [r4, #0]
 8018426:	4669      	mov	r1, sp
 8018428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801842a:	4620      	mov	r0, r4
 801842c:	4798      	blx	r3
 801842e:	4b08      	ldr	r3, [pc, #32]	@ (8018450 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8018436:	b10a      	cbz	r2, 801843c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8018438:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801843a:	b900      	cbnz	r0, 801843e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801843c:	6898      	ldr	r0, [r3, #8]
 801843e:	6803      	ldr	r3, [r0, #0]
 8018440:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8018442:	6a1d      	ldr	r5, [r3, #32]
 8018444:	4669      	mov	r1, sp
 8018446:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801844a:	47a8      	blx	r5
 801844c:	b003      	add	sp, #12
 801844e:	bd30      	pop	{r4, r5, pc}
 8018450:	2005bd1c 	.word	0x2005bd1c

08018454 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8018454:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8018458:	b12a      	cbz	r2, 8018466 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801845a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801845e:	b112      	cbz	r2, 8018466 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8018460:	6803      	ldr	r3, [r0, #0]
 8018462:	695b      	ldr	r3, [r3, #20]
 8018464:	4718      	bx	r3
 8018466:	4770      	bx	lr

08018468 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 8018468:	b570      	push	{r4, r5, r6, lr}
 801846a:	4604      	mov	r4, r0
 801846c:	4615      	mov	r5, r2
 801846e:	6803      	ldr	r3, [r0, #0]
 8018470:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018472:	4798      	blx	r3
 8018474:	6823      	ldr	r3, [r4, #0]
 8018476:	4629      	mov	r1, r5
 8018478:	4620      	mov	r0, r4
 801847a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801847e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018480:	4718      	bx	r3

08018482 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 8018482:	b570      	push	{r4, r5, r6, lr}
 8018484:	6803      	ldr	r3, [r0, #0]
 8018486:	4604      	mov	r4, r0
 8018488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801848a:	460e      	mov	r6, r1
 801848c:	4615      	mov	r5, r2
 801848e:	4798      	blx	r3
 8018490:	8030      	strh	r0, [r6, #0]
 8018492:	6823      	ldr	r3, [r4, #0]
 8018494:	4620      	mov	r0, r4
 8018496:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018498:	4798      	blx	r3
 801849a:	8028      	strh	r0, [r5, #0]
 801849c:	bd70      	pop	{r4, r5, r6, pc}

0801849e <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 801849e:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	@ 0x2a
 80184a2:	4770      	bx	lr

080184a4 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 80184a4:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 80184a8:	4770      	bx	lr

080184aa <_ZN8touchgfx10TiledImageD1Ev>:
 80184aa:	4770      	bx	lr

080184ac <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 80184ac:	b510      	push	{r4, lr}
 80184ae:	4604      	mov	r4, r0
 80184b0:	f000 fa5c 	bl	801896c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80184b4:	6823      	ldr	r3, [r4, #0]
 80184b6:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	@ 0x2c
 80184ba:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	@ 0x2a
 80184be:	4620      	mov	r0, r4
 80184c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80184c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80184c6:	4718      	bx	r3

080184c8 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 80184c8:	b538      	push	{r3, r4, r5, lr}
 80184ca:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 80184ce:	4604      	mov	r4, r0
 80184d0:	8541      	strh	r1, [r0, #42]	@ 0x2a
 80184d2:	4628      	mov	r0, r5
 80184d4:	f005 fbfe 	bl	801dcd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80184d8:	b188      	cbz	r0, 80184fe <_ZN8touchgfx10TiledImage10setXOffsetEs+0x36>
 80184da:	4628      	mov	r0, r5
 80184dc:	f005 fbfa 	bl	801dcd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80184e0:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	@ 0x2a
 80184e4:	fb92 f3f0 	sdiv	r3, r2, r0
 80184e8:	fb03 2010 	mls	r0, r3, r0, r2
 80184ec:	2800      	cmp	r0, #0
 80184ee:	8560      	strh	r0, [r4, #42]	@ 0x2a
 80184f0:	da05      	bge.n	80184fe <_ZN8touchgfx10TiledImage10setXOffsetEs+0x36>
 80184f2:	4628      	mov	r0, r5
 80184f4:	f005 fbee 	bl	801dcd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80184f8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80184fa:	4418      	add	r0, r3
 80184fc:	8560      	strh	r0, [r4, #42]	@ 0x2a
 80184fe:	bd38      	pop	{r3, r4, r5, pc}

08018500 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 8018500:	b538      	push	{r3, r4, r5, lr}
 8018502:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 8018506:	4604      	mov	r4, r0
 8018508:	8581      	strh	r1, [r0, #44]	@ 0x2c
 801850a:	4628      	mov	r0, r5
 801850c:	f005 fc16 	bl	801dd3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018510:	b188      	cbz	r0, 8018536 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x36>
 8018512:	4628      	mov	r0, r5
 8018514:	f005 fc12 	bl	801dd3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018518:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	@ 0x2c
 801851c:	fb92 f3f0 	sdiv	r3, r2, r0
 8018520:	fb03 2010 	mls	r0, r3, r0, r2
 8018524:	2800      	cmp	r0, #0
 8018526:	85a0      	strh	r0, [r4, #44]	@ 0x2c
 8018528:	da05      	bge.n	8018536 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x36>
 801852a:	4628      	mov	r0, r5
 801852c:	f005 fc06 	bl	801dd3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018530:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8018532:	4418      	add	r0, r3
 8018534:	85a0      	strh	r0, [r4, #44]	@ 0x2c
 8018536:	bd38      	pop	{r3, r4, r5, pc}

08018538 <_ZN8touchgfx10TiledImageD0Ev>:
 8018538:	b510      	push	{r4, lr}
 801853a:	4604      	mov	r4, r0
 801853c:	2130      	movs	r1, #48	@ 0x30
 801853e:	f014 fc1a 	bl	802cd76 <_ZdlPvj>
 8018542:	4620      	mov	r0, r4
 8018544:	bd10      	pop	{r4, pc}
	...

08018548 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 8018548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801854c:	f100 0b26 	add.w	fp, r0, #38	@ 0x26
 8018550:	b093      	sub	sp, #76	@ 0x4c
 8018552:	4607      	mov	r7, r0
 8018554:	4658      	mov	r0, fp
 8018556:	460e      	mov	r6, r1
 8018558:	f005 fbbc 	bl	801dcd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801855c:	4681      	mov	r9, r0
 801855e:	4658      	mov	r0, fp
 8018560:	f005 fbec 	bl	801dd3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018564:	4605      	mov	r5, r0
 8018566:	f1b9 0f00 	cmp.w	r9, #0
 801856a:	f000 80c4 	beq.w	80186f6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801856e:	2800      	cmp	r0, #0
 8018570:	f000 80c1 	beq.w	80186f6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8018574:	2300      	movs	r3, #0
 8018576:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 801857a:	683b      	ldr	r3, [r7, #0]
 801857c:	a90e      	add	r1, sp, #56	@ 0x38
 801857e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018580:	4638      	mov	r0, r7
 8018582:	4798      	blx	r3
 8018584:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8018588:	f9b6 3000 	ldrsh.w	r3, [r6]
 801858c:	88b1      	ldrh	r1, [r6, #4]
 801858e:	189c      	adds	r4, r3, r2
 8018590:	440b      	add	r3, r1
 8018592:	fa02 f383 	sxtah	r3, r2, r3
 8018596:	3b01      	subs	r3, #1
 8018598:	fb93 f3f9 	sdiv	r3, r3, r9
 801859c:	fb94 f4f9 	sdiv	r4, r4, r9
 80185a0:	fa1f f889 	uxth.w	r8, r9
 80185a4:	fb13 f308 	smulbb	r3, r3, r8
 80185a8:	fb14 f408 	smulbb	r4, r4, r8
 80185ac:	b21b      	sxth	r3, r3
 80185ae:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80185b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80185b4:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80185b8:	1aa4      	subs	r4, r4, r2
 80185ba:	b2aa      	uxth	r2, r5
 80185bc:	9205      	str	r2, [sp, #20]
 80185be:	185a      	adds	r2, r3, r1
 80185c0:	fb92 f2f5 	sdiv	r2, r2, r5
 80185c4:	9805      	ldr	r0, [sp, #20]
 80185c6:	b2a4      	uxth	r4, r4
 80185c8:	fb12 f200 	smulbb	r2, r2, r0
 80185cc:	1a52      	subs	r2, r2, r1
 80185ce:	b212      	sxth	r2, r2
 80185d0:	920c      	str	r2, [sp, #48]	@ 0x30
 80185d2:	88f2      	ldrh	r2, [r6, #6]
 80185d4:	4413      	add	r3, r2
 80185d6:	fa01 f383 	sxtah	r3, r1, r3
 80185da:	3b01      	subs	r3, #1
 80185dc:	fb93 f3f5 	sdiv	r3, r3, r5
 80185e0:	fb13 f300 	smulbb	r3, r3, r0
 80185e4:	b21b      	sxth	r3, r3
 80185e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80185e8:	eb08 0504 	add.w	r5, r8, r4
 80185ec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80185ee:	b223      	sxth	r3, r4
 80185f0:	4293      	cmp	r3, r2
 80185f2:	b2ad      	uxth	r5, r5
 80185f4:	9306      	str	r3, [sp, #24]
 80185f6:	dc7e      	bgt.n	80186f6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80185f8:	b22b      	sxth	r3, r5
 80185fa:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 80185fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8018600:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018602:	4599      	cmp	r9, r3
 8018604:	dd03      	ble.n	801860e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc6>
 8018606:	4444      	add	r4, r8
 8018608:	b2a4      	uxth	r4, r4
 801860a:	4445      	add	r5, r8
 801860c:	e7ee      	b.n	80185ec <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xa4>
 801860e:	f9b6 c000 	ldrsh.w	ip, [r6]
 8018612:	88b2      	ldrh	r2, [r6, #4]
 8018614:	9806      	ldr	r0, [sp, #24]
 8018616:	4462      	add	r2, ip
 8018618:	b292      	uxth	r2, r2
 801861a:	b213      	sxth	r3, r2
 801861c:	9905      	ldr	r1, [sp, #20]
 801861e:	9308      	str	r3, [sp, #32]
 8018620:	fa1f f389 	uxth.w	r3, r9
 8018624:	4419      	add	r1, r3
 8018626:	9307      	str	r3, [sp, #28]
 8018628:	4603      	mov	r3, r0
 801862a:	9808      	ldr	r0, [sp, #32]
 801862c:	b289      	uxth	r1, r1
 801862e:	4283      	cmp	r3, r0
 8018630:	fa0f fa81 	sxth.w	sl, r1
 8018634:	da5b      	bge.n	80186ee <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8018636:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018638:	4584      	cmp	ip, r0
 801863a:	da58      	bge.n	80186ee <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801863c:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8018640:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 8018644:	4486      	add	lr, r0
 8018646:	fa1f fe8e 	uxth.w	lr, lr
 801864a:	fa0f f38e 	sxth.w	r3, lr
 801864e:	4599      	cmp	r9, r3
 8018650:	9309      	str	r3, [sp, #36]	@ 0x24
 8018652:	da4c      	bge.n	80186ee <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8018654:	4550      	cmp	r0, sl
 8018656:	da4a      	bge.n	80186ee <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8018658:	9b06      	ldr	r3, [sp, #24]
 801865a:	459c      	cmp	ip, r3
 801865c:	bfb8      	it	lt
 801865e:	469c      	movlt	ip, r3
 8018660:	9b08      	ldr	r3, [sp, #32]
 8018662:	4548      	cmp	r0, r9
 8018664:	bfb8      	it	lt
 8018666:	4648      	movlt	r0, r9
 8018668:	4699      	mov	r9, r3
 801866a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801866c:	f8ad c040 	strh.w	ip, [sp, #64]	@ 0x40
 8018670:	4599      	cmp	r9, r3
 8018672:	bfc8      	it	gt
 8018674:	462a      	movgt	r2, r5
 8018676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018678:	eba2 020c 	sub.w	r2, r2, ip
 801867c:	4553      	cmp	r3, sl
 801867e:	bfd8      	it	le
 8018680:	4671      	movle	r1, lr
 8018682:	1a09      	subs	r1, r1, r0
 8018684:	f8ad 2044 	strh.w	r2, [sp, #68]	@ 0x44
 8018688:	f8ad 1046 	strh.w	r1, [sp, #70]	@ 0x46
 801868c:	f8ad 0042 	strh.w	r0, [sp, #66]	@ 0x42
 8018690:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8018694:	9b07      	ldr	r3, [sp, #28]
 8018696:	1b12      	subs	r2, r2, r4
 8018698:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801869c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80186a0:	1ad2      	subs	r2, r2, r3
 80186a2:	4b16      	ldr	r3, [pc, #88]	@ (80186fc <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 80186a4:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 80186a8:	681a      	ldr	r2, [r3, #0]
 80186aa:	f892 1058 	ldrb.w	r1, [r2, #88]	@ 0x58
 80186ae:	b109      	cbz	r1, 80186b4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 80186b0:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 80186b2:	b900      	cbnz	r0, 80186b6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16e>
 80186b4:	6890      	ldr	r0, [r2, #8]
 80186b6:	f04f 0c01 	mov.w	ip, #1
 80186ba:	6801      	ldr	r1, [r0, #0]
 80186bc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80186c0:	f8cd c008 	str.w	ip, [sp, #8]
 80186c4:	9b07      	ldr	r3, [sp, #28]
 80186c6:	f897 c028 	ldrb.w	ip, [r7, #40]	@ 0x28
 80186ca:	4413      	add	r3, r2
 80186cc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 80186d0:	f8cd c004 	str.w	ip, [sp, #4]
 80186d4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80186d8:	f8cd c000 	str.w	ip, [sp]
 80186dc:	4422      	add	r2, r4
 80186de:	f8d1 9008 	ldr.w	r9, [r1, #8]
 80186e2:	b21b      	sxth	r3, r3
 80186e4:	b212      	sxth	r2, r2
 80186e6:	4659      	mov	r1, fp
 80186e8:	47c8      	blx	r9
 80186ea:	46d1      	mov	r9, sl
 80186ec:	e788      	b.n	8018600 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb8>
 80186ee:	2300      	movs	r3, #0
 80186f0:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
 80186f4:	e7cc      	b.n	8018690 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x148>
 80186f6:	b013      	add	sp, #76	@ 0x4c
 80186f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186fc:	2005bd1c 	.word	0x2005bd1c

08018700 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 8018700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018704:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8018708:	4606      	mov	r6, r0
 801870a:	2bff      	cmp	r3, #255	@ 0xff
 801870c:	4689      	mov	r9, r1
 801870e:	d008      	beq.n	8018722 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 8018710:	2300      	movs	r3, #0
 8018712:	8003      	strh	r3, [r0, #0]
 8018714:	8043      	strh	r3, [r0, #2]
 8018716:	8083      	strh	r3, [r0, #4]
 8018718:	4630      	mov	r0, r6
 801871a:	80f3      	strh	r3, [r6, #6]
 801871c:	b003      	add	sp, #12
 801871e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018722:	f101 0b26 	add.w	fp, r1, #38	@ 0x26
 8018726:	4659      	mov	r1, fp
 8018728:	4668      	mov	r0, sp
 801872a:	f005 fb3b 	bl	801dda4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801872e:	4658      	mov	r0, fp
 8018730:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8018734:	f9bd 7000 	ldrsh.w	r7, [sp]
 8018738:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 801873c:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 8018740:	f005 fac8 	bl	801dcd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018744:	4284      	cmp	r4, r0
 8018746:	d10d      	bne.n	8018764 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 8018748:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 801874c:	4658      	mov	r0, fp
 801874e:	f005 faf5 	bl	801dd3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018752:	4580      	cmp	r8, r0
 8018754:	d12a      	bne.n	80187ac <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 8018756:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 801875a:	8037      	strh	r7, [r6, #0]
 801875c:	f8a6 a002 	strh.w	sl, [r6, #2]
 8018760:	80b5      	strh	r5, [r6, #4]
 8018762:	e7d9      	b.n	8018718 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 8018764:	4658      	mov	r0, fp
 8018766:	f8b9 502a 	ldrh.w	r5, [r9, #42]	@ 0x2a
 801876a:	f005 fab3 	bl	801dcd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801876e:	1b7f      	subs	r7, r7, r5
 8018770:	b2bd      	uxth	r5, r7
 8018772:	b22f      	sxth	r7, r5
 8018774:	2f00      	cmp	r7, #0
 8018776:	4428      	add	r0, r5
 8018778:	bfa8      	it	ge
 801877a:	4625      	movge	r5, r4
 801877c:	b2a3      	uxth	r3, r4
 801877e:	b280      	uxth	r0, r0
 8018780:	bfb8      	it	lt
 8018782:	18ed      	addlt	r5, r5, r3
 8018784:	4403      	add	r3, r0
 8018786:	b29b      	uxth	r3, r3
 8018788:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 801878c:	bfb8      	it	lt
 801878e:	b22d      	sxthlt	r5, r5
 8018790:	b219      	sxth	r1, r3
 8018792:	bfbc      	itt	lt
 8018794:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 8018798:	2700      	movlt	r7, #0
 801879a:	4291      	cmp	r1, r2
 801879c:	bfc4      	itt	gt
 801879e:	1a9c      	subgt	r4, r3, r2
 80187a0:	b224      	sxthgt	r4, r4
 80187a2:	42ac      	cmp	r4, r5
 80187a4:	bfc4      	itt	gt
 80187a6:	b207      	sxthgt	r7, r0
 80187a8:	4625      	movgt	r5, r4
 80187aa:	e7cf      	b.n	801874c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 80187ac:	4658      	mov	r0, fp
 80187ae:	f8b9 402c 	ldrh.w	r4, [r9, #44]	@ 0x2c
 80187b2:	f005 fac3 	bl	801dd3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80187b6:	ebaa 0404 	sub.w	r4, sl, r4
 80187ba:	b2a4      	uxth	r4, r4
 80187bc:	fa0f fa84 	sxth.w	sl, r4
 80187c0:	f1ba 0f00 	cmp.w	sl, #0
 80187c4:	bfa8      	it	ge
 80187c6:	4643      	movge	r3, r8
 80187c8:	4420      	add	r0, r4
 80187ca:	fa1f f288 	uxth.w	r2, r8
 80187ce:	b280      	uxth	r0, r0
 80187d0:	bfb8      	it	lt
 80187d2:	18a3      	addlt	r3, r4, r2
 80187d4:	4402      	add	r2, r0
 80187d6:	b292      	uxth	r2, r2
 80187d8:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 80187dc:	bfb8      	it	lt
 80187de:	b21b      	sxthlt	r3, r3
 80187e0:	b214      	sxth	r4, r2
 80187e2:	bfbc      	itt	lt
 80187e4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80187e8:	f04f 0a00 	movlt.w	sl, #0
 80187ec:	428c      	cmp	r4, r1
 80187ee:	bfc4      	itt	gt
 80187f0:	eba2 0801 	subgt.w	r8, r2, r1
 80187f4:	fa0f f888 	sxthgt.w	r8, r8
 80187f8:	4598      	cmp	r8, r3
 80187fa:	bfc4      	itt	gt
 80187fc:	fa0f fa80 	sxthgt.w	sl, r0
 8018800:	4643      	movgt	r3, r8
 8018802:	e7aa      	b.n	801875a <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

08018804 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8018804:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 8018808:	b12a      	cbz	r2, 8018816 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801880a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801880e:	b112      	cbz	r2, 8018816 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8018810:	6803      	ldr	r3, [r0, #0]
 8018812:	695b      	ldr	r3, [r3, #20]
 8018814:	4718      	bx	r3
 8018816:	4770      	bx	lr

08018818 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8018818:	b570      	push	{r4, r5, r6, lr}
 801881a:	4605      	mov	r5, r0
 801881c:	880b      	ldrh	r3, [r1, #0]
 801881e:	4604      	mov	r4, r0
 8018820:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8018822:	8813      	ldrh	r3, [r2, #0]
 8018824:	f825 3f30 	strh.w	r3, [r5, #48]!
 8018828:	4628      	mov	r0, r5
 801882a:	f005 fa53 	bl	801dcd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801882e:	4606      	mov	r6, r0
 8018830:	4628      	mov	r0, r5
 8018832:	f005 fa83 	bl	801dd3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018836:	4605      	mov	r5, r0
 8018838:	6823      	ldr	r3, [r4, #0]
 801883a:	4631      	mov	r1, r6
 801883c:	4620      	mov	r0, r4
 801883e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018840:	4798      	blx	r3
 8018842:	6823      	ldr	r3, [r4, #0]
 8018844:	4629      	mov	r1, r5
 8018846:	4620      	mov	r0, r4
 8018848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801884c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801884e:	4718      	bx	r3

08018850 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8018850:	b510      	push	{r4, lr}
 8018852:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8018856:	4604      	mov	r4, r0
 8018858:	2bff      	cmp	r3, #255	@ 0xff
 801885a:	d006      	beq.n	801886a <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801885c:	2300      	movs	r3, #0
 801885e:	8003      	strh	r3, [r0, #0]
 8018860:	8043      	strh	r3, [r0, #2]
 8018862:	8083      	strh	r3, [r0, #4]
 8018864:	80c3      	strh	r3, [r0, #6]
 8018866:	4620      	mov	r0, r4
 8018868:	bd10      	pop	{r4, pc}
 801886a:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 801886e:	b11b      	cbz	r3, 8018878 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8018870:	3130      	adds	r1, #48	@ 0x30
 8018872:	f005 fa97 	bl	801dda4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018876:	e7f6      	b.n	8018866 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8018878:	312e      	adds	r1, #46	@ 0x2e
 801887a:	e7fa      	b.n	8018872 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0801887c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801887c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018880:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8018884:	b08a      	sub	sp, #40	@ 0x28
 8018886:	4604      	mov	r4, r0
 8018888:	4688      	mov	r8, r1
 801888a:	2b00      	cmp	r3, #0
 801888c:	d066      	beq.n	801895c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801888e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8018890:	a805      	add	r0, sp, #20
 8018892:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018896:	f005 fa1d 	bl	801dcd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801889a:	4607      	mov	r7, r0
 801889c:	a805      	add	r0, sp, #20
 801889e:	f005 fa4d 	bl	801dd3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80188a2:	2300      	movs	r3, #0
 80188a4:	f9b8 6000 	ldrsh.w	r6, [r8]
 80188a8:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80188ac:	9306      	str	r3, [sp, #24]
 80188ae:	4432      	add	r2, r6
 80188b0:	b292      	uxth	r2, r2
 80188b2:	fa0f fc82 	sxth.w	ip, r2
 80188b6:	459c      	cmp	ip, r3
 80188b8:	dd52      	ble.n	8018960 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80188ba:	42b7      	cmp	r7, r6
 80188bc:	dd50      	ble.n	8018960 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80188be:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 80188c2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80188c6:	442b      	add	r3, r5
 80188c8:	b29b      	uxth	r3, r3
 80188ca:	b219      	sxth	r1, r3
 80188cc:	2900      	cmp	r1, #0
 80188ce:	dd47      	ble.n	8018960 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80188d0:	42a8      	cmp	r0, r5
 80188d2:	dd45      	ble.n	8018960 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80188d4:	4567      	cmp	r7, ip
 80188d6:	bfb8      	it	lt
 80188d8:	b2ba      	uxthlt	r2, r7
 80188da:	4288      	cmp	r0, r1
 80188dc:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80188e0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80188e4:	bfb8      	it	lt
 80188e6:	b283      	uxthlt	r3, r0
 80188e8:	1b92      	subs	r2, r2, r6
 80188ea:	1b5b      	subs	r3, r3, r5
 80188ec:	f8ad 201c 	strh.w	r2, [sp, #28]
 80188f0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80188f4:	f8ad 6018 	strh.w	r6, [sp, #24]
 80188f8:	f8ad 501a 	strh.w	r5, [sp, #26]
 80188fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018900:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018904:	429a      	cmp	r2, r3
 8018906:	d026      	beq.n	8018956 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8018908:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801890c:	2b00      	cmp	r3, #0
 801890e:	dd22      	ble.n	8018956 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8018910:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8018914:	2b00      	cmp	r3, #0
 8018916:	dd1e      	ble.n	8018956 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8018918:	2300      	movs	r3, #0
 801891a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801891e:	6823      	ldr	r3, [r4, #0]
 8018920:	a908      	add	r1, sp, #32
 8018922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018924:	4620      	mov	r0, r4
 8018926:	4798      	blx	r3
 8018928:	4b0f      	ldr	r3, [pc, #60]	@ (8018968 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8018930:	b10a      	cbz	r2, 8018936 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8018932:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8018934:	b900      	cbnz	r0, 8018938 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8018936:	6898      	ldr	r0, [r3, #8]
 8018938:	2501      	movs	r5, #1
 801893a:	6801      	ldr	r1, [r0, #0]
 801893c:	9502      	str	r5, [sp, #8]
 801893e:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8018942:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8018946:	9401      	str	r4, [sp, #4]
 8018948:	ac06      	add	r4, sp, #24
 801894a:	9400      	str	r4, [sp, #0]
 801894c:	688c      	ldr	r4, [r1, #8]
 801894e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8018952:	a905      	add	r1, sp, #20
 8018954:	47a0      	blx	r4
 8018956:	b00a      	add	sp, #40	@ 0x28
 8018958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801895c:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 801895e:	e797      	b.n	8018890 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8018960:	2300      	movs	r3, #0
 8018962:	9307      	str	r3, [sp, #28]
 8018964:	e7ca      	b.n	80188fc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8018966:	bf00      	nop
 8018968:	2005bd1c 	.word	0x2005bd1c

0801896c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801896c:	b570      	push	{r4, r5, r6, lr}
 801896e:	880b      	ldrh	r3, [r1, #0]
 8018970:	4604      	mov	r4, r0
 8018972:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8018974:	4608      	mov	r0, r1
 8018976:	460d      	mov	r5, r1
 8018978:	f005 f9ac 	bl	801dcd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801897c:	4606      	mov	r6, r0
 801897e:	4628      	mov	r0, r5
 8018980:	f005 f9dc 	bl	801dd3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018984:	4605      	mov	r5, r0
 8018986:	6823      	ldr	r3, [r4, #0]
 8018988:	4631      	mov	r1, r6
 801898a:	4620      	mov	r0, r4
 801898c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801898e:	4798      	blx	r3
 8018990:	6823      	ldr	r3, [r4, #0]
 8018992:	4629      	mov	r1, r5
 8018994:	4620      	mov	r0, r4
 8018996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801899a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801899c:	4718      	bx	r3

0801899e <_ZNK8touchgfx5Image12getSolidRectEv>:
 801899e:	b510      	push	{r4, lr}
 80189a0:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80189a4:	4604      	mov	r4, r0
 80189a6:	2bff      	cmp	r3, #255	@ 0xff
 80189a8:	d006      	beq.n	80189b8 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80189aa:	2300      	movs	r3, #0
 80189ac:	8003      	strh	r3, [r0, #0]
 80189ae:	8043      	strh	r3, [r0, #2]
 80189b0:	8083      	strh	r3, [r0, #4]
 80189b2:	80c3      	strh	r3, [r0, #6]
 80189b4:	4620      	mov	r0, r4
 80189b6:	bd10      	pop	{r4, pc}
 80189b8:	3126      	adds	r1, #38	@ 0x26
 80189ba:	f005 f9f3 	bl	801dda4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80189be:	e7f9      	b.n	80189b4 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080189c0 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80189c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189c4:	4604      	mov	r4, r0
 80189c6:	2500      	movs	r5, #0
 80189c8:	f854 3b26 	ldr.w	r3, [r4], #38
 80189cc:	b088      	sub	sp, #32
 80189ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80189d0:	460f      	mov	r7, r1
 80189d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80189d6:	a904      	add	r1, sp, #16
 80189d8:	4606      	mov	r6, r0
 80189da:	4798      	blx	r3
 80189dc:	4620      	mov	r0, r4
 80189de:	f005 f979 	bl	801dcd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80189e2:	4680      	mov	r8, r0
 80189e4:	4620      	mov	r0, r4
 80189e6:	f005 f9a9 	bl	801dd3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80189ea:	9506      	str	r5, [sp, #24]
 80189ec:	ad06      	add	r5, sp, #24
 80189ee:	f8ad 001e 	strh.w	r0, [sp, #30]
 80189f2:	4639      	mov	r1, r7
 80189f4:	4628      	mov	r0, r5
 80189f6:	f8ad 801c 	strh.w	r8, [sp, #28]
 80189fa:	f7fc faf5 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 80189fe:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	dd19      	ble.n	8018a3a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8018a06:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	dd15      	ble.n	8018a3a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8018a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8018a40 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8018a16:	b10a      	cbz	r2, 8018a1c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8018a18:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8018a1a:	b900      	cbnz	r0, 8018a1e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8018a1c:	6898      	ldr	r0, [r3, #8]
 8018a1e:	2701      	movs	r7, #1
 8018a20:	6801      	ldr	r1, [r0, #0]
 8018a22:	9702      	str	r7, [sp, #8]
 8018a24:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8018a28:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8018a2c:	e9cd 5600 	strd	r5, r6, [sp]
 8018a30:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8018a34:	688d      	ldr	r5, [r1, #8]
 8018a36:	4621      	mov	r1, r4
 8018a38:	47a8      	blx	r5
 8018a3a:	b008      	add	sp, #32
 8018a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a40:	2005bd1c 	.word	0x2005bd1c

08018a44 <_ZN8touchgfx7OutlineD1Ev>:
 8018a44:	4770      	bx	lr

08018a46 <_ZN8touchgfx7OutlineD0Ev>:
 8018a46:	b510      	push	{r4, lr}
 8018a48:	4604      	mov	r4, r0
 8018a4a:	2130      	movs	r1, #48	@ 0x30
 8018a4c:	f014 f993 	bl	802cd76 <_ZdlPvj>
 8018a50:	4620      	mov	r0, r4
 8018a52:	bd10      	pop	{r4, pc}

08018a54 <_ZN8touchgfx7Outline5resetEv>:
 8018a54:	b510      	push	{r4, lr}
 8018a56:	4604      	mov	r4, r0
 8018a58:	f000 fe80 	bl	801975c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8018a5c:	60e0      	str	r0, [r4, #12]
 8018a5e:	f000 fe83 	bl	8019768 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8018a62:	2200      	movs	r2, #0
 8018a64:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8018a68:	68e3      	ldr	r3, [r4, #12]
 8018a6a:	08c0      	lsrs	r0, r0, #3
 8018a6c:	3801      	subs	r0, #1
 8018a6e:	6123      	str	r3, [r4, #16]
 8018a70:	6060      	str	r0, [r4, #4]
 8018a72:	60a2      	str	r2, [r4, #8]
 8018a74:	8019      	strh	r1, [r3, #0]
 8018a76:	8059      	strh	r1, [r3, #2]
 8018a78:	809a      	strh	r2, [r3, #4]
 8018a7a:	80da      	strh	r2, [r3, #6]
 8018a7c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018a7e:	f023 0301 	bic.w	r3, r3, #1
 8018a82:	f043 0302 	orr.w	r3, r3, #2
 8018a86:	6263      	str	r3, [r4, #36]	@ 0x24
 8018a88:	bd10      	pop	{r4, pc}
	...

08018a8c <_ZN8touchgfx7OutlineC1Ev>:
 8018a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8018ab8 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8018a8e:	b510      	push	{r4, lr}
 8018a90:	6003      	str	r3, [r0, #0]
 8018a92:	2300      	movs	r3, #0
 8018a94:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8018a98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018a9c:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8018aa0:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8018aa4:	6243      	str	r3, [r0, #36]	@ 0x24
 8018aa6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018aaa:	4604      	mov	r4, r0
 8018aac:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8018ab0:	f7ff ffd0 	bl	8018a54 <_ZN8touchgfx7Outline5resetEv>
 8018ab4:	4620      	mov	r0, r4
 8018ab6:	bd10      	pop	{r4, pc}
 8018ab8:	08030f20 	.word	0x08030f20

08018abc <_ZN8touchgfx7Outline10renderLineEiiii>:
 8018abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ac0:	b093      	sub	sp, #76	@ 0x4c
 8018ac2:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8018ac4:	9305      	str	r3, [sp, #20]
 8018ac6:	f004 051f 	and.w	r5, r4, #31
 8018aca:	1153      	asrs	r3, r2, #5
 8018acc:	9504      	str	r5, [sp, #16]
 8018ace:	1156      	asrs	r6, r2, #5
 8018ad0:	1165      	asrs	r5, r4, #5
 8018ad2:	9303      	str	r3, [sp, #12]
 8018ad4:	42ae      	cmp	r6, r5
 8018ad6:	ea4f 1364 	mov.w	r3, r4, asr #5
 8018ada:	9306      	str	r3, [sp, #24]
 8018adc:	f002 031f 	and.w	r3, r2, #31
 8018ae0:	f040 80f8 	bne.w	8018cd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x218>
 8018ae4:	9c04      	ldr	r4, [sp, #16]
 8018ae6:	9a05      	ldr	r2, [sp, #20]
 8018ae8:	42a3      	cmp	r3, r4
 8018aea:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8018aee:	6902      	ldr	r2, [r0, #16]
 8018af0:	d125      	bne.n	8018b3e <_ZN8touchgfx7Outline10renderLineEiiii+0x82>
 8018af2:	f9b2 3000 	ldrsh.w	r3, [r2]
 8018af6:	459e      	cmp	lr, r3
 8018af8:	d103      	bne.n	8018b02 <_ZN8touchgfx7Outline10renderLineEiiii+0x46>
 8018afa:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8018afe:	429e      	cmp	r6, r3
 8018b00:	d035      	beq.n	8018b6e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8018b02:	88d1      	ldrh	r1, [r2, #6]
 8018b04:	8893      	ldrh	r3, [r2, #4]
 8018b06:	430b      	orrs	r3, r1
 8018b08:	d010      	beq.n	8018b2c <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8018b0a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	db0c      	blt.n	8018b2c <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8018b12:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8018b14:	428b      	cmp	r3, r1
 8018b16:	da09      	bge.n	8018b2c <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8018b18:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8018b1c:	428b      	cmp	r3, r1
 8018b1e:	bf38      	it	cc
 8018b20:	3208      	addcc	r2, #8
 8018b22:	f103 0301 	add.w	r3, r3, #1
 8018b26:	bf38      	it	cc
 8018b28:	6102      	strcc	r2, [r0, #16]
 8018b2a:	6083      	str	r3, [r0, #8]
 8018b2c:	6903      	ldr	r3, [r0, #16]
 8018b2e:	9a03      	ldr	r2, [sp, #12]
 8018b30:	f8a3 e000 	strh.w	lr, [r3]
 8018b34:	805a      	strh	r2, [r3, #2]
 8018b36:	2200      	movs	r2, #0
 8018b38:	809a      	strh	r2, [r3, #4]
 8018b3a:	80da      	strh	r2, [r3, #6]
 8018b3c:	e017      	b.n	8018b6e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8018b3e:	9c05      	ldr	r4, [sp, #20]
 8018b40:	114e      	asrs	r6, r1, #5
 8018b42:	f004 041f 	and.w	r4, r4, #31
 8018b46:	9402      	str	r4, [sp, #8]
 8018b48:	9c04      	ldr	r4, [sp, #16]
 8018b4a:	4576      	cmp	r6, lr
 8018b4c:	f001 0c1f 	and.w	ip, r1, #31
 8018b50:	eba4 0403 	sub.w	r4, r4, r3
 8018b54:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8018b58:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8018b5c:	d10a      	bne.n	8018b74 <_ZN8touchgfx7Outline10renderLineEiiii+0xb8>
 8018b5e:	9b02      	ldr	r3, [sp, #8]
 8018b60:	44a0      	add	r8, r4
 8018b62:	449c      	add	ip, r3
 8018b64:	fb04 a40c 	mla	r4, r4, ip, sl
 8018b68:	f8a2 8004 	strh.w	r8, [r2, #4]
 8018b6c:	80d4      	strh	r4, [r2, #6]
 8018b6e:	b013      	add	sp, #76	@ 0x4c
 8018b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b74:	9d05      	ldr	r5, [sp, #20]
 8018b76:	1a69      	subs	r1, r5, r1
 8018b78:	bf5b      	ittet	pl
 8018b7a:	f1cc 0520 	rsbpl	r5, ip, #32
 8018b7e:	436c      	mulpl	r4, r5
 8018b80:	2500      	movmi	r5, #0
 8018b82:	2520      	movpl	r5, #32
 8018b84:	bf44      	itt	mi
 8018b86:	fb04 f40c 	mulmi.w	r4, r4, ip
 8018b8a:	4249      	negmi	r1, r1
 8018b8c:	9501      	str	r5, [sp, #4]
 8018b8e:	fb94 f5f1 	sdiv	r5, r4, r1
 8018b92:	bf54      	ite	pl
 8018b94:	f04f 0901 	movpl.w	r9, #1
 8018b98:	f04f 39ff 	movmi.w	r9, #4294967295
 8018b9c:	fb01 4415 	mls	r4, r1, r5, r4
 8018ba0:	9f01      	ldr	r7, [sp, #4]
 8018ba2:	2c00      	cmp	r4, #0
 8018ba4:	bfb8      	it	lt
 8018ba6:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8018baa:	44bc      	add	ip, r7
 8018bac:	fb05 ac0c 	mla	ip, r5, ip, sl
 8018bb0:	44a8      	add	r8, r5
 8018bb2:	f8a2 8004 	strh.w	r8, [r2, #4]
 8018bb6:	f8a2 c006 	strh.w	ip, [r2, #6]
 8018bba:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018bbe:	bfb8      	it	lt
 8018bc0:	1864      	addlt	r4, r4, r1
 8018bc2:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8018bc6:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8018bca:	444e      	add	r6, r9
 8018bcc:	ea58 0202 	orrs.w	r2, r8, r2
 8018bd0:	d011      	beq.n	8018bf6 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8018bd2:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8018bd6:	f1b8 0f00 	cmp.w	r8, #0
 8018bda:	db0c      	blt.n	8018bf6 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8018bdc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8018bde:	4590      	cmp	r8, r2
 8018be0:	da09      	bge.n	8018bf6 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8018be2:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8018be6:	4590      	cmp	r8, r2
 8018be8:	bf3c      	itt	cc
 8018bea:	f10c 0208 	addcc.w	r2, ip, #8
 8018bee:	6102      	strcc	r2, [r0, #16]
 8018bf0:	f108 0201 	add.w	r2, r8, #1
 8018bf4:	6082      	str	r2, [r0, #8]
 8018bf6:	2700      	movs	r7, #0
 8018bf8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018bfc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8018c00:	45b6      	cmp	lr, r6
 8018c02:	f8ac 6000 	strh.w	r6, [ip]
 8018c06:	f8ac 2002 	strh.w	r2, [ip, #2]
 8018c0a:	f8ac 7004 	strh.w	r7, [ip, #4]
 8018c0e:	f8ac 7006 	strh.w	r7, [ip, #6]
 8018c12:	442b      	add	r3, r5
 8018c14:	d04d      	beq.n	8018cb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1f6>
 8018c16:	9f04      	ldr	r7, [sp, #16]
 8018c18:	f04f 0a00 	mov.w	sl, #0
 8018c1c:	1aff      	subs	r7, r7, r3
 8018c1e:	443d      	add	r5, r7
 8018c20:	016d      	lsls	r5, r5, #5
 8018c22:	fb95 f8f1 	sdiv	r8, r5, r1
 8018c26:	fb01 5518 	mls	r5, r1, r8, r5
 8018c2a:	2d00      	cmp	r5, #0
 8018c2c:	bfb8      	it	lt
 8018c2e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8018c32:	f108 0701 	add.w	r7, r8, #1
 8018c36:	bfb8      	it	lt
 8018c38:	186d      	addlt	r5, r5, r1
 8018c3a:	1a64      	subs	r4, r4, r1
 8018c3c:	9703      	str	r7, [sp, #12]
 8018c3e:	1964      	adds	r4, r4, r5
 8018c40:	bf48      	it	mi
 8018c42:	4647      	movmi	r7, r8
 8018c44:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018c48:	bf58      	it	pl
 8018c4a:	9f03      	ldrpl	r7, [sp, #12]
 8018c4c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8018c50:	443b      	add	r3, r7
 8018c52:	44bb      	add	fp, r7
 8018c54:	f8ac b004 	strh.w	fp, [ip, #4]
 8018c58:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018c5c:	bf58      	it	pl
 8018c5e:	1a64      	subpl	r4, r4, r1
 8018c60:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8018c64:	f8ac b006 	strh.w	fp, [ip, #6]
 8018c68:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018c6c:	444e      	add	r6, r9
 8018c6e:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018c72:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018c76:	ea5b 0707 	orrs.w	r7, fp, r7
 8018c7a:	d011      	beq.n	8018ca0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8018c7c:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8018c80:	f1bb 0f00 	cmp.w	fp, #0
 8018c84:	db0c      	blt.n	8018ca0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8018c86:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018c88:	45bb      	cmp	fp, r7
 8018c8a:	da09      	bge.n	8018ca0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8018c8c:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8018c90:	45bb      	cmp	fp, r7
 8018c92:	bf3c      	itt	cc
 8018c94:	f10c 0708 	addcc.w	r7, ip, #8
 8018c98:	6107      	strcc	r7, [r0, #16]
 8018c9a:	f10b 0701 	add.w	r7, fp, #1
 8018c9e:	6087      	str	r7, [r0, #8]
 8018ca0:	6907      	ldr	r7, [r0, #16]
 8018ca2:	45b6      	cmp	lr, r6
 8018ca4:	803e      	strh	r6, [r7, #0]
 8018ca6:	807a      	strh	r2, [r7, #2]
 8018ca8:	f8a7 a004 	strh.w	sl, [r7, #4]
 8018cac:	f8a7 a006 	strh.w	sl, [r7, #6]
 8018cb0:	d1c5      	bne.n	8018c3e <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 8018cb2:	9a04      	ldr	r2, [sp, #16]
 8018cb4:	1ad3      	subs	r3, r2, r3
 8018cb6:	6902      	ldr	r2, [r0, #16]
 8018cb8:	8891      	ldrh	r1, [r2, #4]
 8018cba:	88d6      	ldrh	r6, [r2, #6]
 8018cbc:	4419      	add	r1, r3
 8018cbe:	8091      	strh	r1, [r2, #4]
 8018cc0:	9902      	ldr	r1, [sp, #8]
 8018cc2:	f101 0c20 	add.w	ip, r1, #32
 8018cc6:	9901      	ldr	r1, [sp, #4]
 8018cc8:	ebac 0c01 	sub.w	ip, ip, r1
 8018ccc:	fb03 630c 	mla	r3, r3, ip, r6
 8018cd0:	80d3      	strh	r3, [r2, #6]
 8018cd2:	e74c      	b.n	8018b6e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8018cd4:	9d05      	ldr	r5, [sp, #20]
 8018cd6:	1aa2      	subs	r2, r4, r2
 8018cd8:	eba5 0501 	sub.w	r5, r5, r1
 8018cdc:	9508      	str	r5, [sp, #32]
 8018cde:	9202      	str	r2, [sp, #8]
 8018ce0:	f140 8128 	bpl.w	8018f34 <_ZN8touchgfx7Outline10renderLineEiiii+0x478>
 8018ce4:	9a03      	ldr	r2, [sp, #12]
 8018ce6:	2a00      	cmp	r2, #0
 8018ce8:	f6ff af41 	blt.w	8018b6e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8018cec:	f04f 34ff 	mov.w	r4, #4294967295
 8018cf0:	9a02      	ldr	r2, [sp, #8]
 8018cf2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018cf4:	4252      	negs	r2, r2
 8018cf6:	9202      	str	r2, [sp, #8]
 8018cf8:	9a06      	ldr	r2, [sp, #24]
 8018cfa:	2400      	movs	r4, #0
 8018cfc:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8018d00:	9206      	str	r2, [sp, #24]
 8018d02:	462a      	mov	r2, r5
 8018d04:	435a      	muls	r2, r3
 8018d06:	9401      	str	r4, [sp, #4]
 8018d08:	9c02      	ldr	r4, [sp, #8]
 8018d0a:	9d02      	ldr	r5, [sp, #8]
 8018d0c:	fb92 f4f4 	sdiv	r4, r2, r4
 8018d10:	fb05 2214 	mls	r2, r5, r4, r2
 8018d14:	2a00      	cmp	r2, #0
 8018d16:	9207      	str	r2, [sp, #28]
 8018d18:	bfbc      	itt	lt
 8018d1a:	1952      	addlt	r2, r2, r5
 8018d1c:	9207      	strlt	r2, [sp, #28]
 8018d1e:	9a01      	ldr	r2, [sp, #4]
 8018d20:	bfb8      	it	lt
 8018d22:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8018d26:	eb04 0901 	add.w	r9, r4, r1
 8018d2a:	429a      	cmp	r2, r3
 8018d2c:	ea4f 1669 	mov.w	r6, r9, asr #5
 8018d30:	6905      	ldr	r5, [r0, #16]
 8018d32:	f040 8112 	bne.w	8018f5a <_ZN8touchgfx7Outline10renderLineEiiii+0x49e>
 8018d36:	f9b5 3000 	ldrsh.w	r3, [r5]
 8018d3a:	429e      	cmp	r6, r3
 8018d3c:	d104      	bne.n	8018d48 <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 8018d3e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018d42:	9a03      	ldr	r2, [sp, #12]
 8018d44:	429a      	cmp	r2, r3
 8018d46:	d01b      	beq.n	8018d80 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8018d48:	88ea      	ldrh	r2, [r5, #6]
 8018d4a:	88ab      	ldrh	r3, [r5, #4]
 8018d4c:	4313      	orrs	r3, r2
 8018d4e:	d010      	beq.n	8018d72 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8018d50:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018d54:	2a00      	cmp	r2, #0
 8018d56:	db0c      	blt.n	8018d72 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8018d58:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018d5a:	429a      	cmp	r2, r3
 8018d5c:	da09      	bge.n	8018d72 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8018d5e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8018d62:	429a      	cmp	r2, r3
 8018d64:	bf38      	it	cc
 8018d66:	3508      	addcc	r5, #8
 8018d68:	f102 0201 	add.w	r2, r2, #1
 8018d6c:	bf38      	it	cc
 8018d6e:	6105      	strcc	r5, [r0, #16]
 8018d70:	6082      	str	r2, [r0, #8]
 8018d72:	6903      	ldr	r3, [r0, #16]
 8018d74:	9a03      	ldr	r2, [sp, #12]
 8018d76:	801e      	strh	r6, [r3, #0]
 8018d78:	805a      	strh	r2, [r3, #2]
 8018d7a:	2200      	movs	r2, #0
 8018d7c:	809a      	strh	r2, [r3, #4]
 8018d7e:	80da      	strh	r2, [r3, #6]
 8018d80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018d82:	9a03      	ldr	r2, [sp, #12]
 8018d84:	6901      	ldr	r1, [r0, #16]
 8018d86:	441a      	add	r2, r3
 8018d88:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018d8c:	42b3      	cmp	r3, r6
 8018d8e:	d103      	bne.n	8018d98 <_ZN8touchgfx7Outline10renderLineEiiii+0x2dc>
 8018d90:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018d94:	429a      	cmp	r2, r3
 8018d96:	d01a      	beq.n	8018dce <_ZN8touchgfx7Outline10renderLineEiiii+0x312>
 8018d98:	88cc      	ldrh	r4, [r1, #6]
 8018d9a:	888b      	ldrh	r3, [r1, #4]
 8018d9c:	4323      	orrs	r3, r4
 8018d9e:	d010      	beq.n	8018dc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8018da0:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8018da4:	2c00      	cmp	r4, #0
 8018da6:	db0c      	blt.n	8018dc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8018da8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018daa:	429c      	cmp	r4, r3
 8018dac:	da09      	bge.n	8018dc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8018dae:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8018db2:	429c      	cmp	r4, r3
 8018db4:	bf38      	it	cc
 8018db6:	3108      	addcc	r1, #8
 8018db8:	f104 0401 	add.w	r4, r4, #1
 8018dbc:	bf38      	it	cc
 8018dbe:	6101      	strcc	r1, [r0, #16]
 8018dc0:	6084      	str	r4, [r0, #8]
 8018dc2:	2100      	movs	r1, #0
 8018dc4:	6903      	ldr	r3, [r0, #16]
 8018dc6:	801e      	strh	r6, [r3, #0]
 8018dc8:	805a      	strh	r2, [r3, #2]
 8018dca:	8099      	strh	r1, [r3, #4]
 8018dcc:	80d9      	strh	r1, [r3, #6]
 8018dce:	9b06      	ldr	r3, [sp, #24]
 8018dd0:	4293      	cmp	r3, r2
 8018dd2:	f000 8082 	beq.w	8018eda <_ZN8touchgfx7Outline10renderLineEiiii+0x41e>
 8018dd6:	9b08      	ldr	r3, [sp, #32]
 8018dd8:	9902      	ldr	r1, [sp, #8]
 8018dda:	015b      	lsls	r3, r3, #5
 8018ddc:	fb93 f1f1 	sdiv	r1, r3, r1
 8018de0:	9c02      	ldr	r4, [sp, #8]
 8018de2:	9103      	str	r1, [sp, #12]
 8018de4:	fb04 3311 	mls	r3, r4, r1, r3
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	9308      	str	r3, [sp, #32]
 8018dec:	da04      	bge.n	8018df8 <_ZN8touchgfx7Outline10renderLineEiiii+0x33c>
 8018dee:	1e4b      	subs	r3, r1, #1
 8018df0:	9303      	str	r3, [sp, #12]
 8018df2:	9b08      	ldr	r3, [sp, #32]
 8018df4:	4423      	add	r3, r4
 8018df6:	9308      	str	r3, [sp, #32]
 8018df8:	464f      	mov	r7, r9
 8018dfa:	2600      	movs	r6, #0
 8018dfc:	9b07      	ldr	r3, [sp, #28]
 8018dfe:	9902      	ldr	r1, [sp, #8]
 8018e00:	1a5b      	subs	r3, r3, r1
 8018e02:	9307      	str	r3, [sp, #28]
 8018e04:	9b01      	ldr	r3, [sp, #4]
 8018e06:	f1c3 0320 	rsb	r3, r3, #32
 8018e0a:	930e      	str	r3, [sp, #56]	@ 0x38
 8018e0c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018e0e:	9b01      	ldr	r3, [sp, #4]
 8018e10:	1a5b      	subs	r3, r3, r1
 8018e12:	930a      	str	r3, [sp, #40]	@ 0x28
 8018e14:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8018e18:	185b      	adds	r3, r3, r1
 8018e1a:	bf58      	it	pl
 8018e1c:	9902      	ldrpl	r1, [sp, #8]
 8018e1e:	9307      	str	r3, [sp, #28]
 8018e20:	bf5d      	ittte	pl
 8018e22:	1a5b      	subpl	r3, r3, r1
 8018e24:	9307      	strpl	r3, [sp, #28]
 8018e26:	9b03      	ldrpl	r3, [sp, #12]
 8018e28:	9903      	ldrmi	r1, [sp, #12]
 8018e2a:	bf58      	it	pl
 8018e2c:	1c59      	addpl	r1, r3, #1
 8018e2e:	4489      	add	r9, r1
 8018e30:	2a00      	cmp	r2, #0
 8018e32:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8018e36:	db2e      	blt.n	8018e96 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8018e38:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018e3a:	4293      	cmp	r3, r2
 8018e3c:	dd2b      	ble.n	8018e96 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8018e3e:	9c01      	ldr	r4, [sp, #4]
 8018e40:	6905      	ldr	r5, [r0, #16]
 8018e42:	46a0      	mov	r8, r4
 8018e44:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8018e46:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8018e4a:	45a0      	cmp	r8, r4
 8018e4c:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8018e50:	f040 8150 	bne.w	80190f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x638>
 8018e54:	f9b5 1000 	ldrsh.w	r1, [r5]
 8018e58:	4551      	cmp	r1, sl
 8018e5a:	d103      	bne.n	8018e64 <_ZN8touchgfx7Outline10renderLineEiiii+0x3a8>
 8018e5c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8018e60:	4291      	cmp	r1, r2
 8018e62:	d018      	beq.n	8018e96 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8018e64:	ea5c 010e 	orrs.w	r1, ip, lr
 8018e68:	d00f      	beq.n	8018e8a <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8018e6a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8018e6e:	2900      	cmp	r1, #0
 8018e70:	db0b      	blt.n	8018e8a <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8018e72:	428b      	cmp	r3, r1
 8018e74:	dd09      	ble.n	8018e8a <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8018e76:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8018e7a:	4299      	cmp	r1, r3
 8018e7c:	bf38      	it	cc
 8018e7e:	3508      	addcc	r5, #8
 8018e80:	f101 0101 	add.w	r1, r1, #1
 8018e84:	bf38      	it	cc
 8018e86:	6105      	strcc	r5, [r0, #16]
 8018e88:	6081      	str	r1, [r0, #8]
 8018e8a:	6903      	ldr	r3, [r0, #16]
 8018e8c:	f8a3 a000 	strh.w	sl, [r3]
 8018e90:	805a      	strh	r2, [r3, #2]
 8018e92:	809e      	strh	r6, [r3, #4]
 8018e94:	80de      	strh	r6, [r3, #6]
 8018e96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018e98:	6901      	ldr	r1, [r0, #16]
 8018e9a:	441a      	add	r2, r3
 8018e9c:	88cc      	ldrh	r4, [r1, #6]
 8018e9e:	888b      	ldrh	r3, [r1, #4]
 8018ea0:	4323      	orrs	r3, r4
 8018ea2:	d010      	beq.n	8018ec6 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8018ea4:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8018ea8:	2c00      	cmp	r4, #0
 8018eaa:	db0c      	blt.n	8018ec6 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8018eac:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018eae:	429c      	cmp	r4, r3
 8018eb0:	da09      	bge.n	8018ec6 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8018eb2:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8018eb6:	429c      	cmp	r4, r3
 8018eb8:	bf38      	it	cc
 8018eba:	3108      	addcc	r1, #8
 8018ebc:	f104 0401 	add.w	r4, r4, #1
 8018ec0:	bf38      	it	cc
 8018ec2:	6101      	strcc	r1, [r0, #16]
 8018ec4:	6084      	str	r4, [r0, #8]
 8018ec6:	6903      	ldr	r3, [r0, #16]
 8018ec8:	464f      	mov	r7, r9
 8018eca:	f8a3 a000 	strh.w	sl, [r3]
 8018ece:	805a      	strh	r2, [r3, #2]
 8018ed0:	809e      	strh	r6, [r3, #4]
 8018ed2:	80de      	strh	r6, [r3, #6]
 8018ed4:	9b06      	ldr	r3, [sp, #24]
 8018ed6:	4293      	cmp	r3, r2
 8018ed8:	d19c      	bne.n	8018e14 <_ZN8touchgfx7Outline10renderLineEiiii+0x358>
 8018eda:	9b01      	ldr	r3, [sp, #4]
 8018edc:	6907      	ldr	r7, [r0, #16]
 8018ede:	f1c3 0620 	rsb	r6, r3, #32
 8018ee2:	9b05      	ldr	r3, [sp, #20]
 8018ee4:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8018ee8:	9b04      	ldr	r3, [sp, #16]
 8018eea:	429e      	cmp	r6, r3
 8018eec:	f040 81cc 	bne.w	8019288 <_ZN8touchgfx7Outline10renderLineEiiii+0x7cc>
 8018ef0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8018ef4:	459e      	cmp	lr, r3
 8018ef6:	d104      	bne.n	8018f02 <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 8018ef8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018efc:	429a      	cmp	r2, r3
 8018efe:	f43f ae36 	beq.w	8018b6e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8018f02:	88f9      	ldrh	r1, [r7, #6]
 8018f04:	88bb      	ldrh	r3, [r7, #4]
 8018f06:	430b      	orrs	r3, r1
 8018f08:	d010      	beq.n	8018f2c <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8018f0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	db0c      	blt.n	8018f2c <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8018f12:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8018f14:	428b      	cmp	r3, r1
 8018f16:	da09      	bge.n	8018f2c <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8018f18:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8018f1c:	428b      	cmp	r3, r1
 8018f1e:	bf38      	it	cc
 8018f20:	3708      	addcc	r7, #8
 8018f22:	f103 0301 	add.w	r3, r3, #1
 8018f26:	bf38      	it	cc
 8018f28:	6107      	strcc	r7, [r0, #16]
 8018f2a:	6083      	str	r3, [r0, #8]
 8018f2c:	6903      	ldr	r3, [r0, #16]
 8018f2e:	f8a3 e000 	strh.w	lr, [r3]
 8018f32:	e5ff      	b.n	8018b34 <_ZN8touchgfx7Outline10renderLineEiiii+0x78>
 8018f34:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8018f36:	9c03      	ldr	r4, [sp, #12]
 8018f38:	42a2      	cmp	r2, r4
 8018f3a:	f6ff ae18 	blt.w	8018b6e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8018f3e:	9c06      	ldr	r4, [sp, #24]
 8018f40:	42a2      	cmp	r2, r4
 8018f42:	bfb8      	it	lt
 8018f44:	3201      	addlt	r2, #1
 8018f46:	9c08      	ldr	r4, [sp, #32]
 8018f48:	bfb8      	it	lt
 8018f4a:	9206      	strlt	r2, [sp, #24]
 8018f4c:	f1c3 0220 	rsb	r2, r3, #32
 8018f50:	4362      	muls	r2, r4
 8018f52:	2401      	movs	r4, #1
 8018f54:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018f56:	2420      	movs	r4, #32
 8018f58:	e6d5      	b.n	8018d06 <_ZN8touchgfx7Outline10renderLineEiiii+0x24a>
 8018f5a:	f009 021f 	and.w	r2, r9, #31
 8018f5e:	ea4f 1861 	mov.w	r8, r1, asr #5
 8018f62:	920c      	str	r2, [sp, #48]	@ 0x30
 8018f64:	9a01      	ldr	r2, [sp, #4]
 8018f66:	45b0      	cmp	r8, r6
 8018f68:	f001 011f 	and.w	r1, r1, #31
 8018f6c:	eba2 0203 	sub.w	r2, r2, r3
 8018f70:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8018f74:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8018f78:	d108      	bne.n	8018f8c <_ZN8touchgfx7Outline10renderLineEiiii+0x4d0>
 8018f7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018f7c:	4496      	add	lr, r2
 8018f7e:	4419      	add	r1, r3
 8018f80:	fb02 a101 	mla	r1, r2, r1, sl
 8018f84:	f8a5 e004 	strh.w	lr, [r5, #4]
 8018f88:	80e9      	strh	r1, [r5, #6]
 8018f8a:	e6f9      	b.n	8018d80 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8018f8c:	2c00      	cmp	r4, #0
 8018f8e:	f2c0 80aa 	blt.w	80190e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x62a>
 8018f92:	2701      	movs	r7, #1
 8018f94:	970a      	str	r7, [sp, #40]	@ 0x28
 8018f96:	2720      	movs	r7, #32
 8018f98:	f1c1 0c20 	rsb	ip, r1, #32
 8018f9c:	fb02 f20c 	mul.w	r2, r2, ip
 8018fa0:	fb92 fcf4 	sdiv	ip, r2, r4
 8018fa4:	fb04 221c 	mls	r2, r4, ip, r2
 8018fa8:	9709      	str	r7, [sp, #36]	@ 0x24
 8018faa:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8018fac:	2a00      	cmp	r2, #0
 8018fae:	bfb8      	it	lt
 8018fb0:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8018fb4:	4439      	add	r1, r7
 8018fb6:	fb0c a101 	mla	r1, ip, r1, sl
 8018fba:	44e6      	add	lr, ip
 8018fbc:	80e9      	strh	r1, [r5, #6]
 8018fbe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018fc0:	f8a5 e004 	strh.w	lr, [r5, #4]
 8018fc4:	eb08 0501 	add.w	r5, r8, r1
 8018fc8:	6901      	ldr	r1, [r0, #16]
 8018fca:	bfb8      	it	lt
 8018fcc:	1912      	addlt	r2, r2, r4
 8018fce:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8018fd2:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8018fd6:	ea58 070e 	orrs.w	r7, r8, lr
 8018fda:	d010      	beq.n	8018ffe <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8018fdc:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8018fe0:	f1be 0f00 	cmp.w	lr, #0
 8018fe4:	db0b      	blt.n	8018ffe <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8018fe6:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018fe8:	45be      	cmp	lr, r7
 8018fea:	da08      	bge.n	8018ffe <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8018fec:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8018ff0:	45be      	cmp	lr, r7
 8018ff2:	bf3c      	itt	cc
 8018ff4:	3108      	addcc	r1, #8
 8018ff6:	6101      	strcc	r1, [r0, #16]
 8018ff8:	f10e 0101 	add.w	r1, lr, #1
 8018ffc:	6081      	str	r1, [r0, #8]
 8018ffe:	f04f 0e00 	mov.w	lr, #0
 8019002:	6901      	ldr	r1, [r0, #16]
 8019004:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8019008:	42ae      	cmp	r6, r5
 801900a:	800d      	strh	r5, [r1, #0]
 801900c:	f8a1 8002 	strh.w	r8, [r1, #2]
 8019010:	f8a1 e004 	strh.w	lr, [r1, #4]
 8019014:	f8a1 e006 	strh.w	lr, [r1, #6]
 8019018:	4463      	add	r3, ip
 801901a:	d055      	beq.n	80190c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x60c>
 801901c:	9901      	ldr	r1, [sp, #4]
 801901e:	1b12      	subs	r2, r2, r4
 8019020:	1ac9      	subs	r1, r1, r3
 8019022:	4461      	add	r1, ip
 8019024:	0149      	lsls	r1, r1, #5
 8019026:	fb91 fef4 	sdiv	lr, r1, r4
 801902a:	fb04 111e 	mls	r1, r4, lr, r1
 801902e:	2900      	cmp	r1, #0
 8019030:	bfb8      	it	lt
 8019032:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8019036:	f10e 0701 	add.w	r7, lr, #1
 801903a:	bfb8      	it	lt
 801903c:	1909      	addlt	r1, r1, r4
 801903e:	970d      	str	r7, [sp, #52]	@ 0x34
 8019040:	1852      	adds	r2, r2, r1
 8019042:	bf48      	it	mi
 8019044:	46f4      	movmi	ip, lr
 8019046:	f8d0 a010 	ldr.w	sl, [r0, #16]
 801904a:	bf58      	it	pl
 801904c:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8019050:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8019054:	4463      	add	r3, ip
 8019056:	44e3      	add	fp, ip
 8019058:	f8aa b004 	strh.w	fp, [sl, #4]
 801905c:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8019060:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8019062:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8019066:	f8aa b006 	strh.w	fp, [sl, #6]
 801906a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801906e:	bf58      	it	pl
 8019070:	1b12      	subpl	r2, r2, r4
 8019072:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8019076:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801907a:	443d      	add	r5, r7
 801907c:	ea5b 070a 	orrs.w	r7, fp, sl
 8019080:	d014      	beq.n	80190ac <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8019082:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8019086:	f1ba 0f00 	cmp.w	sl, #0
 801908a:	db0f      	blt.n	80190ac <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 801908c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801908e:	45ba      	cmp	sl, r7
 8019090:	da0c      	bge.n	80190ac <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8019092:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8019096:	45ba      	cmp	sl, r7
 8019098:	bf38      	it	cc
 801909a:	f10c 0c08 	addcc.w	ip, ip, #8
 801909e:	f10a 0a01 	add.w	sl, sl, #1
 80190a2:	bf38      	it	cc
 80190a4:	f8c0 c010 	strcc.w	ip, [r0, #16]
 80190a8:	f8c0 a008 	str.w	sl, [r0, #8]
 80190ac:	f04f 0700 	mov.w	r7, #0
 80190b0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80190b4:	42ae      	cmp	r6, r5
 80190b6:	f8ac 5000 	strh.w	r5, [ip]
 80190ba:	f8ac 8002 	strh.w	r8, [ip, #2]
 80190be:	f8ac 7004 	strh.w	r7, [ip, #4]
 80190c2:	f8ac 7006 	strh.w	r7, [ip, #6]
 80190c6:	d1bb      	bne.n	8019040 <_ZN8touchgfx7Outline10renderLineEiiii+0x584>
 80190c8:	6904      	ldr	r4, [r0, #16]
 80190ca:	9a01      	ldr	r2, [sp, #4]
 80190cc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80190ce:	1ad3      	subs	r3, r2, r3
 80190d0:	88a2      	ldrh	r2, [r4, #4]
 80190d2:	3120      	adds	r1, #32
 80190d4:	441a      	add	r2, r3
 80190d6:	80a2      	strh	r2, [r4, #4]
 80190d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80190da:	1a89      	subs	r1, r1, r2
 80190dc:	88e2      	ldrh	r2, [r4, #6]
 80190de:	fb03 2301 	mla	r3, r3, r1, r2
 80190e2:	80e3      	strh	r3, [r4, #6]
 80190e4:	e64c      	b.n	8018d80 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 80190e6:	f04f 37ff 	mov.w	r7, #4294967295
 80190ea:	434a      	muls	r2, r1
 80190ec:	970a      	str	r7, [sp, #40]	@ 0x28
 80190ee:	4264      	negs	r4, r4
 80190f0:	2700      	movs	r7, #0
 80190f2:	e755      	b.n	8018fa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4e4>
 80190f4:	ea4f 1867 	mov.w	r8, r7, asr #5
 80190f8:	f009 031f 	and.w	r3, r9, #31
 80190fc:	45d0      	cmp	r8, sl
 80190fe:	f007 071f 	and.w	r7, r7, #31
 8019102:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019104:	fa1f fc8c 	uxth.w	ip, ip
 8019108:	fa1f fe8e 	uxth.w	lr, lr
 801910c:	d10a      	bne.n	8019124 <_ZN8touchgfx7Outline10renderLineEiiii+0x668>
 801910e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019110:	449c      	add	ip, r3
 8019112:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019114:	f8a5 c004 	strh.w	ip, [r5, #4]
 8019118:	441f      	add	r7, r3
 801911a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801911c:	fb03 e707 	mla	r7, r3, r7, lr
 8019120:	80ef      	strh	r7, [r5, #6]
 8019122:	e6b8      	b.n	8018e96 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8019124:	2900      	cmp	r1, #0
 8019126:	f2c0 80a7 	blt.w	8019278 <_ZN8touchgfx7Outline10renderLineEiiii+0x7bc>
 801912a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801912c:	f1c7 0320 	rsb	r3, r7, #32
 8019130:	4363      	muls	r3, r4
 8019132:	2401      	movs	r4, #1
 8019134:	940d      	str	r4, [sp, #52]	@ 0x34
 8019136:	2420      	movs	r4, #32
 8019138:	940c      	str	r4, [sp, #48]	@ 0x30
 801913a:	fb93 f4f1 	sdiv	r4, r3, r1
 801913e:	fb01 3b14 	mls	fp, r1, r4, r3
 8019142:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019144:	f1bb 0f00 	cmp.w	fp, #0
 8019148:	bfb8      	it	lt
 801914a:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801914e:	441f      	add	r7, r3
 8019150:	fb04 e707 	mla	r7, r4, r7, lr
 8019154:	44a4      	add	ip, r4
 8019156:	f8a5 c004 	strh.w	ip, [r5, #4]
 801915a:	80ef      	strh	r7, [r5, #6]
 801915c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019160:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019162:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8019166:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801916a:	bfb8      	it	lt
 801916c:	448b      	addlt	fp, r1
 801916e:	eb08 0503 	add.w	r5, r8, r3
 8019172:	ea5e 0307 	orrs.w	r3, lr, r7
 8019176:	d011      	beq.n	801919c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8019178:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 801917c:	f1be 0f00 	cmp.w	lr, #0
 8019180:	db0c      	blt.n	801919c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8019182:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8019184:	45be      	cmp	lr, r7
 8019186:	da09      	bge.n	801919c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8019188:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801918c:	45be      	cmp	lr, r7
 801918e:	bf3c      	itt	cc
 8019190:	f10c 0708 	addcc.w	r7, ip, #8
 8019194:	6107      	strcc	r7, [r0, #16]
 8019196:	f10e 0701 	add.w	r7, lr, #1
 801919a:	6087      	str	r7, [r0, #8]
 801919c:	6907      	ldr	r7, [r0, #16]
 801919e:	b213      	sxth	r3, r2
 80191a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80191a2:	807b      	strh	r3, [r7, #2]
 80191a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80191a6:	4555      	cmp	r5, sl
 80191a8:	803d      	strh	r5, [r7, #0]
 80191aa:	80be      	strh	r6, [r7, #4]
 80191ac:	80fe      	strh	r6, [r7, #6]
 80191ae:	eb04 0c03 	add.w	ip, r4, r3
 80191b2:	d050      	beq.n	8019256 <_ZN8touchgfx7Outline10renderLineEiiii+0x79a>
 80191b4:	9b01      	ldr	r3, [sp, #4]
 80191b6:	eba3 070c 	sub.w	r7, r3, ip
 80191ba:	443c      	add	r4, r7
 80191bc:	0164      	lsls	r4, r4, #5
 80191be:	fb94 f8f1 	sdiv	r8, r4, r1
 80191c2:	fb01 4418 	mls	r4, r1, r8, r4
 80191c6:	2c00      	cmp	r4, #0
 80191c8:	bfb8      	it	lt
 80191ca:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80191ce:	ebab 0301 	sub.w	r3, fp, r1
 80191d2:	f108 0701 	add.w	r7, r8, #1
 80191d6:	bfb8      	it	lt
 80191d8:	1864      	addlt	r4, r4, r1
 80191da:	9309      	str	r3, [sp, #36]	@ 0x24
 80191dc:	9711      	str	r7, [sp, #68]	@ 0x44
 80191de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80191e0:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80191e4:	191b      	adds	r3, r3, r4
 80191e6:	bf4c      	ite	mi
 80191e8:	4647      	movmi	r7, r8
 80191ea:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 80191ec:	f8be b004 	ldrh.w	fp, [lr, #4]
 80191f0:	44bc      	add	ip, r7
 80191f2:	44bb      	add	fp, r7
 80191f4:	f8ae b004 	strh.w	fp, [lr, #4]
 80191f8:	f8be b006 	ldrh.w	fp, [lr, #6]
 80191fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80191fe:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8019202:	f8ae b006 	strh.w	fp, [lr, #6]
 8019206:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8019208:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801920c:	443d      	add	r5, r7
 801920e:	f8be b006 	ldrh.w	fp, [lr, #6]
 8019212:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8019216:	bf5c      	itt	pl
 8019218:	1a5b      	subpl	r3, r3, r1
 801921a:	9309      	strpl	r3, [sp, #36]	@ 0x24
 801921c:	ea5b 0307 	orrs.w	r3, fp, r7
 8019220:	d011      	beq.n	8019246 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8019222:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8019226:	f1bb 0f00 	cmp.w	fp, #0
 801922a:	db0c      	blt.n	8019246 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 801922c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801922e:	45bb      	cmp	fp, r7
 8019230:	da09      	bge.n	8019246 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8019232:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8019236:	45bb      	cmp	fp, r7
 8019238:	bf3c      	itt	cc
 801923a:	f10e 0708 	addcc.w	r7, lr, #8
 801923e:	6107      	strcc	r7, [r0, #16]
 8019240:	f10b 0701 	add.w	r7, fp, #1
 8019244:	6087      	str	r7, [r0, #8]
 8019246:	6907      	ldr	r7, [r0, #16]
 8019248:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801924a:	4555      	cmp	r5, sl
 801924c:	803d      	strh	r5, [r7, #0]
 801924e:	807b      	strh	r3, [r7, #2]
 8019250:	80be      	strh	r6, [r7, #4]
 8019252:	80fe      	strh	r6, [r7, #6]
 8019254:	d1c3      	bne.n	80191de <_ZN8touchgfx7Outline10renderLineEiiii+0x722>
 8019256:	9b01      	ldr	r3, [sp, #4]
 8019258:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801925a:	eba3 0c0c 	sub.w	ip, r3, ip
 801925e:	6903      	ldr	r3, [r0, #16]
 8019260:	3720      	adds	r7, #32
 8019262:	8899      	ldrh	r1, [r3, #4]
 8019264:	4461      	add	r1, ip
 8019266:	8099      	strh	r1, [r3, #4]
 8019268:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801926a:	1a7f      	subs	r7, r7, r1
 801926c:	88d9      	ldrh	r1, [r3, #6]
 801926e:	fb0c 1c07 	mla	ip, ip, r7, r1
 8019272:	f8a3 c006 	strh.w	ip, [r3, #6]
 8019276:	e60e      	b.n	8018e96 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8019278:	f04f 34ff 	mov.w	r4, #4294967295
 801927c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801927e:	940d      	str	r4, [sp, #52]	@ 0x34
 8019280:	437b      	muls	r3, r7
 8019282:	4249      	negs	r1, r1
 8019284:	2400      	movs	r4, #0
 8019286:	e757      	b.n	8019138 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 8019288:	9905      	ldr	r1, [sp, #20]
 801928a:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801928e:	f001 011f 	and.w	r1, r1, #31
 8019292:	9102      	str	r1, [sp, #8]
 8019294:	9904      	ldr	r1, [sp, #16]
 8019296:	45f3      	cmp	fp, lr
 8019298:	f009 0c1f 	and.w	ip, r9, #31
 801929c:	eba1 0406 	sub.w	r4, r1, r6
 80192a0:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 80192a4:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 80192a8:	d108      	bne.n	80192bc <_ZN8touchgfx7Outline10renderLineEiiii+0x800>
 80192aa:	9b02      	ldr	r3, [sp, #8]
 80192ac:	44a0      	add	r8, r4
 80192ae:	449c      	add	ip, r3
 80192b0:	fb04 a40c 	mla	r4, r4, ip, sl
 80192b4:	f8a7 8004 	strh.w	r8, [r7, #4]
 80192b8:	80fc      	strh	r4, [r7, #6]
 80192ba:	e458      	b.n	8018b6e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80192bc:	9905      	ldr	r1, [sp, #20]
 80192be:	ebb1 0109 	subs.w	r1, r1, r9
 80192c2:	bf5b      	ittet	pl
 80192c4:	f1cc 0520 	rsbpl	r5, ip, #32
 80192c8:	436c      	mulpl	r4, r5
 80192ca:	2500      	movmi	r5, #0
 80192cc:	2520      	movpl	r5, #32
 80192ce:	bf44      	itt	mi
 80192d0:	fb04 f40c 	mulmi.w	r4, r4, ip
 80192d4:	4249      	negmi	r1, r1
 80192d6:	9501      	str	r5, [sp, #4]
 80192d8:	fb94 f5f1 	sdiv	r5, r4, r1
 80192dc:	bf54      	ite	pl
 80192de:	f04f 0901 	movpl.w	r9, #1
 80192e2:	f04f 39ff 	movmi.w	r9, #4294967295
 80192e6:	fb01 4415 	mls	r4, r1, r5, r4
 80192ea:	9b01      	ldr	r3, [sp, #4]
 80192ec:	2c00      	cmp	r4, #0
 80192ee:	bfb8      	it	lt
 80192f0:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80192f4:	449c      	add	ip, r3
 80192f6:	fb05 ac0c 	mla	ip, r5, ip, sl
 80192fa:	44a8      	add	r8, r5
 80192fc:	f8a7 8004 	strh.w	r8, [r7, #4]
 8019300:	f8a7 c006 	strh.w	ip, [r7, #6]
 8019304:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019308:	bfb8      	it	lt
 801930a:	1864      	addlt	r4, r4, r1
 801930c:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8019310:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8019314:	eb0b 0309 	add.w	r3, fp, r9
 8019318:	ea58 0707 	orrs.w	r7, r8, r7
 801931c:	d011      	beq.n	8019342 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 801931e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8019322:	f1b8 0f00 	cmp.w	r8, #0
 8019326:	db0c      	blt.n	8019342 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8019328:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801932a:	45b8      	cmp	r8, r7
 801932c:	da09      	bge.n	8019342 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 801932e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8019332:	45b8      	cmp	r8, r7
 8019334:	bf3c      	itt	cc
 8019336:	f10c 0708 	addcc.w	r7, ip, #8
 801933a:	6107      	strcc	r7, [r0, #16]
 801933c:	f108 0701 	add.w	r7, r8, #1
 8019340:	6087      	str	r7, [r0, #8]
 8019342:	f04f 0c00 	mov.w	ip, #0
 8019346:	6907      	ldr	r7, [r0, #16]
 8019348:	b212      	sxth	r2, r2
 801934a:	459e      	cmp	lr, r3
 801934c:	803b      	strh	r3, [r7, #0]
 801934e:	807a      	strh	r2, [r7, #2]
 8019350:	f8a7 c004 	strh.w	ip, [r7, #4]
 8019354:	f8a7 c006 	strh.w	ip, [r7, #6]
 8019358:	442e      	add	r6, r5
 801935a:	d04d      	beq.n	80193f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 801935c:	9f04      	ldr	r7, [sp, #16]
 801935e:	f04f 0a00 	mov.w	sl, #0
 8019362:	1bbf      	subs	r7, r7, r6
 8019364:	443d      	add	r5, r7
 8019366:	016d      	lsls	r5, r5, #5
 8019368:	fb95 f8f1 	sdiv	r8, r5, r1
 801936c:	fb01 5518 	mls	r5, r1, r8, r5
 8019370:	4565      	cmp	r5, ip
 8019372:	bfb8      	it	lt
 8019374:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8019378:	f108 0701 	add.w	r7, r8, #1
 801937c:	bfb8      	it	lt
 801937e:	186d      	addlt	r5, r5, r1
 8019380:	1a64      	subs	r4, r4, r1
 8019382:	9703      	str	r7, [sp, #12]
 8019384:	1964      	adds	r4, r4, r5
 8019386:	bf48      	it	mi
 8019388:	4647      	movmi	r7, r8
 801938a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801938e:	bf58      	it	pl
 8019390:	9f03      	ldrpl	r7, [sp, #12]
 8019392:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8019396:	443e      	add	r6, r7
 8019398:	44bb      	add	fp, r7
 801939a:	f8ac b004 	strh.w	fp, [ip, #4]
 801939e:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80193a2:	bf58      	it	pl
 80193a4:	1a64      	subpl	r4, r4, r1
 80193a6:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80193aa:	f8ac b006 	strh.w	fp, [ip, #6]
 80193ae:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80193b2:	444b      	add	r3, r9
 80193b4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80193b8:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80193bc:	ea5b 0707 	orrs.w	r7, fp, r7
 80193c0:	d011      	beq.n	80193e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 80193c2:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80193c6:	f1bb 0f00 	cmp.w	fp, #0
 80193ca:	db0c      	blt.n	80193e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 80193cc:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80193ce:	45bb      	cmp	fp, r7
 80193d0:	da09      	bge.n	80193e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 80193d2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80193d6:	45bb      	cmp	fp, r7
 80193d8:	bf3c      	itt	cc
 80193da:	f10c 0708 	addcc.w	r7, ip, #8
 80193de:	6107      	strcc	r7, [r0, #16]
 80193e0:	f10b 0701 	add.w	r7, fp, #1
 80193e4:	6087      	str	r7, [r0, #8]
 80193e6:	6907      	ldr	r7, [r0, #16]
 80193e8:	459e      	cmp	lr, r3
 80193ea:	803b      	strh	r3, [r7, #0]
 80193ec:	807a      	strh	r2, [r7, #2]
 80193ee:	f8a7 a004 	strh.w	sl, [r7, #4]
 80193f2:	f8a7 a006 	strh.w	sl, [r7, #6]
 80193f6:	d1c5      	bne.n	8019384 <_ZN8touchgfx7Outline10renderLineEiiii+0x8c8>
 80193f8:	9b04      	ldr	r3, [sp, #16]
 80193fa:	1b9e      	subs	r6, r3, r6
 80193fc:	6903      	ldr	r3, [r0, #16]
 80193fe:	889a      	ldrh	r2, [r3, #4]
 8019400:	4432      	add	r2, r6
 8019402:	809a      	strh	r2, [r3, #4]
 8019404:	9a02      	ldr	r2, [sp, #8]
 8019406:	f102 0c20 	add.w	ip, r2, #32
 801940a:	9a01      	ldr	r2, [sp, #4]
 801940c:	ebac 0c02 	sub.w	ip, ip, r2
 8019410:	88da      	ldrh	r2, [r3, #6]
 8019412:	fb06 260c 	mla	r6, r6, ip, r2
 8019416:	80de      	strh	r6, [r3, #6]
 8019418:	f7ff bba9 	b.w	8018b6e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>

0801941c <_ZN8touchgfx7Outline6lineToEii>:
 801941c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801941e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019420:	079b      	lsls	r3, r3, #30
 8019422:	460e      	mov	r6, r1
 8019424:	4615      	mov	r5, r2
 8019426:	d511      	bpl.n	801944c <_ZN8touchgfx7Outline6lineToEii+0x30>
 8019428:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 801942c:	ea86 0701 	eor.w	r7, r6, r1
 8019430:	ea85 0302 	eor.w	r3, r5, r2
 8019434:	433b      	orrs	r3, r7
 8019436:	d009      	beq.n	801944c <_ZN8touchgfx7Outline6lineToEii+0x30>
 8019438:	4633      	mov	r3, r6
 801943a:	9500      	str	r5, [sp, #0]
 801943c:	f7ff fb3e 	bl	8018abc <_ZN8touchgfx7Outline10renderLineEiiii>
 8019440:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8019442:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8019446:	f043 0301 	orr.w	r3, r3, #1
 801944a:	6243      	str	r3, [r0, #36]	@ 0x24
 801944c:	b003      	add	sp, #12
 801944e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019450 <_ZN8touchgfx7Outline6moveToEii>:
 8019450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019452:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8019454:	4615      	mov	r5, r2
 8019456:	079a      	lsls	r2, r3, #30
 8019458:	4604      	mov	r4, r0
 801945a:	460e      	mov	r6, r1
 801945c:	d401      	bmi.n	8019462 <_ZN8touchgfx7Outline6moveToEii+0x12>
 801945e:	f7ff faf9 	bl	8018a54 <_ZN8touchgfx7Outline5resetEv>
 8019462:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019464:	07db      	lsls	r3, r3, #31
 8019466:	d504      	bpl.n	8019472 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8019468:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801946c:	4620      	mov	r0, r4
 801946e:	f7ff ffd5 	bl	801941c <_ZN8touchgfx7Outline6lineToEii>
 8019472:	6923      	ldr	r3, [r4, #16]
 8019474:	1170      	asrs	r0, r6, #5
 8019476:	f9b3 2000 	ldrsh.w	r2, [r3]
 801947a:	1169      	asrs	r1, r5, #5
 801947c:	4290      	cmp	r0, r2
 801947e:	d103      	bne.n	8019488 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8019480:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019484:	4291      	cmp	r1, r2
 8019486:	d01a      	beq.n	80194be <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8019488:	88df      	ldrh	r7, [r3, #6]
 801948a:	889a      	ldrh	r2, [r3, #4]
 801948c:	433a      	orrs	r2, r7
 801948e:	d010      	beq.n	80194b2 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8019490:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019494:	2a00      	cmp	r2, #0
 8019496:	db0c      	blt.n	80194b2 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8019498:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801949a:	42ba      	cmp	r2, r7
 801949c:	da09      	bge.n	80194b2 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801949e:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 80194a2:	42ba      	cmp	r2, r7
 80194a4:	bf38      	it	cc
 80194a6:	3308      	addcc	r3, #8
 80194a8:	f102 0201 	add.w	r2, r2, #1
 80194ac:	bf38      	it	cc
 80194ae:	6123      	strcc	r3, [r4, #16]
 80194b0:	60a2      	str	r2, [r4, #8]
 80194b2:	2200      	movs	r2, #0
 80194b4:	6923      	ldr	r3, [r4, #16]
 80194b6:	8018      	strh	r0, [r3, #0]
 80194b8:	8059      	strh	r1, [r3, #2]
 80194ba:	809a      	strh	r2, [r3, #4]
 80194bc:	80da      	strh	r2, [r3, #6]
 80194be:	6166      	str	r6, [r4, #20]
 80194c0:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80194c4:	6225      	str	r5, [r4, #32]
 80194c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080194c8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80194c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80194cc:	b0d0      	sub	sp, #320	@ 0x140
 80194ce:	466c      	mov	r4, sp
 80194d0:	4627      	mov	r7, r4
 80194d2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80194d6:	1a0d      	subs	r5, r1, r0
 80194d8:	2d48      	cmp	r5, #72	@ 0x48
 80194da:	f100 0308 	add.w	r3, r0, #8
 80194de:	f340 80d5 	ble.w	801968c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80194e2:	112d      	asrs	r5, r5, #4
 80194e4:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 80194e8:	6816      	ldr	r6, [r2, #0]
 80194ea:	f9b0 9000 	ldrsh.w	r9, [r0]
 80194ee:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 80194f2:	6006      	str	r6, [r0, #0]
 80194f4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80194f8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80194fc:	6856      	ldr	r6, [r2, #4]
 80194fe:	6046      	str	r6, [r0, #4]
 8019500:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8019504:	f8a2 8002 	strh.w	r8, [r2, #2]
 8019508:	f8a2 e004 	strh.w	lr, [r2, #4]
 801950c:	f8a2 c006 	strh.w	ip, [r2, #6]
 8019510:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8019514:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8019518:	f1a1 0208 	sub.w	r2, r1, #8
 801951c:	4565      	cmp	r5, ip
 801951e:	db06      	blt.n	801952e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8019520:	d119      	bne.n	8019556 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8019522:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8019526:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801952a:	42ae      	cmp	r6, r5
 801952c:	dd13      	ble.n	8019556 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801952e:	460e      	mov	r6, r1
 8019530:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8019534:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8019538:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 801953c:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8019540:	601d      	str	r5, [r3, #0]
 8019542:	6875      	ldr	r5, [r6, #4]
 8019544:	605d      	str	r5, [r3, #4]
 8019546:	f821 9c08 	strh.w	r9, [r1, #-8]
 801954a:	f821 cc06 	strh.w	ip, [r1, #-6]
 801954e:	f821 8c04 	strh.w	r8, [r1, #-4]
 8019552:	f821 ec02 	strh.w	lr, [r1, #-2]
 8019556:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801955a:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801955e:	42ae      	cmp	r6, r5
 8019560:	db06      	blt.n	8019570 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8019562:	d116      	bne.n	8019592 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8019564:	f9b0 c000 	ldrsh.w	ip, [r0]
 8019568:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801956c:	45ac      	cmp	ip, r5
 801956e:	da10      	bge.n	8019592 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8019570:	681d      	ldr	r5, [r3, #0]
 8019572:	f9b0 8000 	ldrsh.w	r8, [r0]
 8019576:	6005      	str	r5, [r0, #0]
 8019578:	685d      	ldr	r5, [r3, #4]
 801957a:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801957e:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8019582:	f8a0 8008 	strh.w	r8, [r0, #8]
 8019586:	6045      	str	r5, [r0, #4]
 8019588:	8146      	strh	r6, [r0, #10]
 801958a:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801958e:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8019592:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8019596:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801959a:	4565      	cmp	r5, ip
 801959c:	db06      	blt.n	80195ac <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801959e:	d119      	bne.n	80195d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80195a0:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 80195a4:	f9b0 5000 	ldrsh.w	r5, [r0]
 80195a8:	42ae      	cmp	r6, r5
 80195aa:	da13      	bge.n	80195d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80195ac:	460e      	mov	r6, r1
 80195ae:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80195b2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80195b6:	6005      	str	r5, [r0, #0]
 80195b8:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 80195bc:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 80195c0:	6875      	ldr	r5, [r6, #4]
 80195c2:	6045      	str	r5, [r0, #4]
 80195c4:	f821 9c08 	strh.w	r9, [r1, #-8]
 80195c8:	f821 cc06 	strh.w	ip, [r1, #-6]
 80195cc:	f821 8c04 	strh.w	r8, [r1, #-4]
 80195d0:	f821 ec02 	strh.w	lr, [r1, #-2]
 80195d4:	3308      	adds	r3, #8
 80195d6:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 80195da:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80195de:	45e6      	cmp	lr, ip
 80195e0:	dbf8      	blt.n	80195d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80195e2:	d105      	bne.n	80195f0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80195e4:	f9b3 6000 	ldrsh.w	r6, [r3]
 80195e8:	f9b0 5000 	ldrsh.w	r5, [r0]
 80195ec:	42ae      	cmp	r6, r5
 80195ee:	dbf1      	blt.n	80195d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80195f0:	4615      	mov	r5, r2
 80195f2:	3a08      	subs	r2, #8
 80195f4:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 80195f8:	45b4      	cmp	ip, r6
 80195fa:	dbf9      	blt.n	80195f0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80195fc:	d105      	bne.n	801960a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 80195fe:	f9b0 8000 	ldrsh.w	r8, [r0]
 8019602:	f9b2 6000 	ldrsh.w	r6, [r2]
 8019606:	45b0      	cmp	r8, r6
 8019608:	dbf2      	blt.n	80195f0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801960a:	4293      	cmp	r3, r2
 801960c:	f1a5 0608 	sub.w	r6, r5, #8
 8019610:	d816      	bhi.n	8019640 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8019612:	f8d6 c000 	ldr.w	ip, [r6]
 8019616:	f9b3 a000 	ldrsh.w	sl, [r3]
 801961a:	f8c3 c000 	str.w	ip, [r3]
 801961e:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8019622:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8019626:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801962a:	f8c3 c004 	str.w	ip, [r3, #4]
 801962e:	f825 ac08 	strh.w	sl, [r5, #-8]
 8019632:	f825 ec06 	strh.w	lr, [r5, #-6]
 8019636:	f825 9c04 	strh.w	r9, [r5, #-4]
 801963a:	f825 8c02 	strh.w	r8, [r5, #-2]
 801963e:	e7c9      	b.n	80195d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8019640:	f8d6 e000 	ldr.w	lr, [r6]
 8019644:	f9b0 a000 	ldrsh.w	sl, [r0]
 8019648:	f8c0 e000 	str.w	lr, [r0]
 801964c:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8019650:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8019654:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8019658:	1a16      	subs	r6, r2, r0
 801965a:	f8c0 e004 	str.w	lr, [r0, #4]
 801965e:	f825 ac08 	strh.w	sl, [r5, #-8]
 8019662:	f825 cc06 	strh.w	ip, [r5, #-6]
 8019666:	f825 9c04 	strh.w	r9, [r5, #-4]
 801966a:	f825 8c02 	strh.w	r8, [r5, #-2]
 801966e:	1acd      	subs	r5, r1, r3
 8019670:	10ed      	asrs	r5, r5, #3
 8019672:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8019676:	bfb5      	itete	lt
 8019678:	e9c4 0200 	strdlt	r0, r2, [r4]
 801967c:	e9c4 3100 	strdge	r3, r1, [r4]
 8019680:	460a      	movlt	r2, r1
 8019682:	4603      	movge	r3, r0
 8019684:	3408      	adds	r4, #8
 8019686:	4618      	mov	r0, r3
 8019688:	4611      	mov	r1, r2
 801968a:	e724      	b.n	80194d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801968c:	4299      	cmp	r1, r3
 801968e:	d928      	bls.n	80196e2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x21a>
 8019690:	f1a3 0210 	sub.w	r2, r3, #16
 8019694:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8019698:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 801969c:	45ac      	cmp	ip, r5
 801969e:	db06      	blt.n	80196ae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 80196a0:	d11d      	bne.n	80196de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 80196a2:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 80196a6:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 80196aa:	42ae      	cmp	r6, r5
 80196ac:	da17      	bge.n	80196de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 80196ae:	4615      	mov	r5, r2
 80196b0:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80196b4:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 80196b8:	6116      	str	r6, [r2, #16]
 80196ba:	686e      	ldr	r6, [r5, #4]
 80196bc:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 80196c0:	f9b2 e016 	ldrsh.w	lr, [r2, #22]
 80196c4:	42a8      	cmp	r0, r5
 80196c6:	6156      	str	r6, [r2, #20]
 80196c8:	f8a2 9008 	strh.w	r9, [r2, #8]
 80196cc:	f8a2 c00a 	strh.w	ip, [r2, #10]
 80196d0:	f8a2 800c 	strh.w	r8, [r2, #12]
 80196d4:	f8a2 e00e 	strh.w	lr, [r2, #14]
 80196d8:	f1a2 0208 	sub.w	r2, r2, #8
 80196dc:	d1da      	bne.n	8019694 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 80196de:	3308      	adds	r3, #8
 80196e0:	e7d4      	b.n	801968c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80196e2:	42bc      	cmp	r4, r7
 80196e4:	d903      	bls.n	80196ee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x226>
 80196e6:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80196ea:	3c08      	subs	r4, #8
 80196ec:	e6f3      	b.n	80194d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80196ee:	b050      	add	sp, #320	@ 0x140
 80196f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080196f4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 80196f4:	b510      	push	{r4, lr}
 80196f6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80196f8:	4604      	mov	r4, r0
 80196fa:	07da      	lsls	r2, r3, #31
 80196fc:	d507      	bpl.n	801970e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 80196fe:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8019702:	f7ff fe8b 	bl	801941c <_ZN8touchgfx7Outline6lineToEii>
 8019706:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8019708:	f023 0301 	bic.w	r3, r3, #1
 801970c:	6243      	str	r3, [r0, #36]	@ 0x24
 801970e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019710:	079b      	lsls	r3, r3, #30
 8019712:	d521      	bpl.n	8019758 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8019714:	6923      	ldr	r3, [r4, #16]
 8019716:	88d9      	ldrh	r1, [r3, #6]
 8019718:	889a      	ldrh	r2, [r3, #4]
 801971a:	430a      	orrs	r2, r1
 801971c:	d010      	beq.n	8019740 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801971e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019722:	2a00      	cmp	r2, #0
 8019724:	db0c      	blt.n	8019740 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8019726:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8019728:	428a      	cmp	r2, r1
 801972a:	da09      	bge.n	8019740 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801972c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8019730:	4291      	cmp	r1, r2
 8019732:	bf88      	it	hi
 8019734:	3308      	addhi	r3, #8
 8019736:	f102 0201 	add.w	r2, r2, #1
 801973a:	bf88      	it	hi
 801973c:	6123      	strhi	r3, [r4, #16]
 801973e:	60a2      	str	r2, [r4, #8]
 8019740:	68a1      	ldr	r1, [r4, #8]
 8019742:	b129      	cbz	r1, 8019750 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8019744:	6863      	ldr	r3, [r4, #4]
 8019746:	4299      	cmp	r1, r3
 8019748:	d802      	bhi.n	8019750 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801974a:	68e0      	ldr	r0, [r4, #12]
 801974c:	f7ff febc 	bl	80194c8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8019750:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019752:	f023 0302 	bic.w	r3, r3, #2
 8019756:	6263      	str	r3, [r4, #36]	@ 0x24
 8019758:	68e0      	ldr	r0, [r4, #12]
 801975a:	bd10      	pop	{r4, pc}

0801975c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801975c:	4b01      	ldr	r3, [pc, #4]	@ (8019764 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801975e:	6818      	ldr	r0, [r3, #0]
 8019760:	4770      	bx	lr
 8019762:	bf00      	nop
 8019764:	2005bd24 	.word	0x2005bd24

08019768 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8019768:	4b01      	ldr	r3, [pc, #4]	@ (8019770 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801976a:	6818      	ldr	r0, [r3, #0]
 801976c:	4770      	bx	lr
 801976e:	bf00      	nop
 8019770:	2005bd28 	.word	0x2005bd28

08019774 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8019774:	b510      	push	{r4, lr}
 8019776:	6803      	ldr	r3, [r0, #0]
 8019778:	460c      	mov	r4, r1
 801977a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801977c:	4798      	blx	r3
 801977e:	1b03      	subs	r3, r0, r4
 8019780:	4258      	negs	r0, r3
 8019782:	4158      	adcs	r0, r3
 8019784:	bd10      	pop	{r4, pc}
	...

08019788 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8019788:	4b01      	ldr	r3, [pc, #4]	@ (8019790 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801978a:	6019      	str	r1, [r3, #0]
 801978c:	4770      	bx	lr
 801978e:	bf00      	nop
 8019790:	2005bd2c 	.word	0x2005bd2c

08019794 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019798:	4696      	mov	lr, r2
 801979a:	4614      	mov	r4, r2
 801979c:	4605      	mov	r5, r0
 801979e:	460e      	mov	r6, r1
 80197a0:	461f      	mov	r7, r3
 80197a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80197a6:	b097      	sub	sp, #92	@ 0x5c
 80197a8:	f10d 0c1c 	add.w	ip, sp, #28
 80197ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80197b0:	f8de 3000 	ldr.w	r3, [lr]
 80197b4:	f104 0e14 	add.w	lr, r4, #20
 80197b8:	f8cc 3000 	str.w	r3, [ip]
 80197bc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80197c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80197c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80197c8:	f8de 3000 	ldr.w	r3, [lr]
 80197cc:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80197d0:	f8cc 3000 	str.w	r3, [ip]
 80197d4:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80197d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80197dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80197e0:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 80197e4:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 80197e8:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 80197ec:	f8de 3000 	ldr.w	r3, [lr]
 80197f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80197f2:	f8cc 3000 	str.w	r3, [ip]
 80197f6:	9201      	str	r2, [sp, #4]
 80197f8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80197fc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80197fe:	682b      	ldr	r3, [r5, #0]
 8019800:	9200      	str	r2, [sp, #0]
 8019802:	f8cd 8008 	str.w	r8, [sp, #8]
 8019806:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 801980a:	aa07      	add	r2, sp, #28
 801980c:	463b      	mov	r3, r7
 801980e:	4631      	mov	r1, r6
 8019810:	4628      	mov	r0, r5
 8019812:	47d8      	blx	fp
 8019814:	46a6      	mov	lr, r4
 8019816:	f10d 0c1c 	add.w	ip, sp, #28
 801981a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801981e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019822:	f8de 3000 	ldr.w	r3, [lr]
 8019826:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801982a:	f8cc 3000 	str.w	r3, [ip]
 801982e:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8019832:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019836:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801983a:	f8de 3000 	ldr.w	r3, [lr]
 801983e:	343c      	adds	r4, #60	@ 0x3c
 8019840:	f8cc 3000 	str.w	r3, [ip]
 8019844:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8019848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801984a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801984e:	6823      	ldr	r3, [r4, #0]
 8019850:	4631      	mov	r1, r6
 8019852:	f8cc 3000 	str.w	r3, [ip]
 8019856:	682b      	ldr	r3, [r5, #0]
 8019858:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801985c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801985e:	f8cd 8008 	str.w	r8, [sp, #8]
 8019862:	9201      	str	r2, [sp, #4]
 8019864:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019866:	4628      	mov	r0, r5
 8019868:	9200      	str	r2, [sp, #0]
 801986a:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 801986c:	aa07      	add	r2, sp, #28
 801986e:	463b      	mov	r3, r7
 8019870:	47a0      	blx	r4
 8019872:	b017      	add	sp, #92	@ 0x5c
 8019874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019878 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019878:	2000      	movs	r0, #0
 801987a:	4770      	bx	lr

0801987c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801987c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019880:	b08d      	sub	sp, #52	@ 0x34
 8019882:	4688      	mov	r8, r1
 8019884:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8019886:	f8d3 c000 	ldr.w	ip, [r3]
 801988a:	680f      	ldr	r7, [r1, #0]
 801988c:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8019890:	eba7 070c 	sub.w	r7, r7, ip
 8019894:	42bc      	cmp	r4, r7
 8019896:	bfa8      	it	ge
 8019898:	463c      	movge	r4, r7
 801989a:	ee07 4a90 	vmov	s15, r4
 801989e:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 80198a2:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80198a6:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 80198aa:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 80198ae:	edd3 6a07 	vldr	s13, [r3, #28]
 80198b2:	ee25 4a04 	vmul.f32	s8, s10, s8
 80198b6:	ee65 4a24 	vmul.f32	s9, s10, s9
 80198ba:	ee25 5a27 	vmul.f32	s10, s10, s15
 80198be:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80198c2:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 80198c6:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 80198ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80198ce:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80198d0:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 80198d4:	f9b1 9000 	ldrsh.w	r9, [r1]
 80198d8:	f9ba 1000 	ldrsh.w	r1, [sl]
 80198dc:	eb09 0e0c 	add.w	lr, r9, ip
 80198e0:	4571      	cmp	r1, lr
 80198e2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80198e6:	ee32 1a05 	vadd.f32	s2, s4, s10
 80198ea:	ee36 0a84 	vadd.f32	s0, s13, s8
 80198ee:	ee61 1a87 	vmul.f32	s3, s3, s14
 80198f2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80198f6:	f340 808c 	ble.w	8019a12 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80198fa:	eba1 060e 	sub.w	r6, r1, lr
 80198fe:	fb96 f5f4 	sdiv	r5, r6, r4
 8019902:	ee07 5a10 	vmov	s14, r5
 8019906:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801990a:	2d00      	cmp	r5, #0
 801990c:	fb04 6615 	mls	r6, r4, r5, r6
 8019910:	eea7 0a04 	vfma.f32	s0, s14, s8
 8019914:	eee7 0a24 	vfma.f32	s1, s14, s9
 8019918:	eea7 1a05 	vfma.f32	s2, s14, s10
 801991c:	dd12      	ble.n	8019944 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801991e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8019922:	eef5 6a40 	vcmp.f32	s13, #0.0
 8019926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801992a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801992e:	bf14      	ite	ne
 8019930:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8019934:	eeb0 7a67 	vmoveq.f32	s14, s15
 8019938:	ee31 2a45 	vsub.f32	s4, s2, s10
 801993c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019940:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019944:	fb05 f204 	mul.w	r2, r5, r4
 8019948:	1abf      	subs	r7, r7, r2
 801994a:	4494      	add	ip, r2
 801994c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8019950:	4411      	add	r1, r2
 8019952:	eb09 020c 	add.w	r2, r9, ip
 8019956:	443a      	add	r2, r7
 8019958:	b209      	sxth	r1, r1
 801995a:	428a      	cmp	r2, r1
 801995c:	bfc4      	itt	gt
 801995e:	eba1 0209 	subgt.w	r2, r1, r9
 8019962:	eba2 070c 	subgt.w	r7, r2, ip
 8019966:	2f00      	cmp	r7, #0
 8019968:	dd50      	ble.n	8019a0c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801996a:	fb97 f1f4 	sdiv	r1, r7, r4
 801996e:	fb04 7211 	mls	r2, r4, r1, r7
 8019972:	b90a      	cbnz	r2, 8019978 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8019974:	4622      	mov	r2, r4
 8019976:	3901      	subs	r1, #1
 8019978:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801997c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8019980:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8019984:	ee21 3a23 	vmul.f32	s6, s2, s7
 8019988:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801998c:	ee17 7a90 	vmov	r7, s15
 8019990:	ee73 7a42 	vsub.f32	s15, s6, s4
 8019994:	eef0 6a42 	vmov.f32	s13, s4
 8019998:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801999c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80199a0:	ee17 ca90 	vmov	ip, s15
 80199a4:	eeb0 7a61 	vmov.f32	s14, s3
 80199a8:	6840      	ldr	r0, [r0, #4]
 80199aa:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 80199ae:	f8d0 a000 	ldr.w	sl, [r0]
 80199b2:	900b      	str	r0, [sp, #44]	@ 0x2c
 80199b4:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80199b6:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80199ba:	9008      	str	r0, [sp, #32]
 80199bc:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80199be:	695b      	ldr	r3, [r3, #20]
 80199c0:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80199c4:	fb9c fcf4 	sdiv	ip, ip, r4
 80199c8:	445b      	add	r3, fp
 80199ca:	9307      	str	r3, [sp, #28]
 80199cc:	ee16 3a90 	vmov	r3, s13
 80199d0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80199d4:	fb0c 3306 	mla	r3, ip, r6, r3
 80199d8:	fb97 f7f4 	sdiv	r7, r7, r4
 80199dc:	9302      	str	r3, [sp, #8]
 80199de:	ee17 3a10 	vmov	r3, s14
 80199e2:	2900      	cmp	r1, #0
 80199e4:	bfcc      	ite	gt
 80199e6:	46a1      	movgt	r9, r4
 80199e8:	4691      	movle	r9, r2
 80199ea:	44b6      	add	lr, r6
 80199ec:	fb04 e505 	mla	r5, r4, r5, lr
 80199f0:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80199f4:	fb07 3706 	mla	r7, r7, r6, r3
 80199f8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80199fc:	e9cd 4700 	strd	r4, r7, [sp]
 8019a00:	eba9 0306 	sub.w	r3, r9, r6
 8019a04:	f8da 4008 	ldr.w	r4, [sl, #8]
 8019a08:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8019a0a:	47a0      	blx	r4
 8019a0c:	b00d      	add	sp, #52	@ 0x34
 8019a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a12:	2500      	movs	r5, #0
 8019a14:	462e      	mov	r6, r5
 8019a16:	e799      	b.n	801994c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08019a18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a1c:	461d      	mov	r5, r3
 8019a1e:	b0db      	sub	sp, #364	@ 0x16c
 8019a20:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8019a24:	910f      	str	r1, [sp, #60]	@ 0x3c
 8019a26:	930a      	str	r3, [sp, #40]	@ 0x28
 8019a28:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8019a2c:	9009      	str	r0, [sp, #36]	@ 0x24
 8019a2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019a30:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8019a34:	4614      	mov	r4, r2
 8019a36:	9310      	str	r3, [sp, #64]	@ 0x40
 8019a38:	6803      	ldr	r3, [r0, #0]
 8019a3a:	4629      	mov	r1, r5
 8019a3c:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8019a3e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8019a42:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8019a46:	47b8      	blx	r7
 8019a48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a4a:	6058      	str	r0, [r3, #4]
 8019a4c:	2800      	cmp	r0, #0
 8019a4e:	f000 83a1 	beq.w	801a194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019a52:	ed94 7a02 	vldr	s14, [r4, #8]
 8019a56:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8019a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019a5e:	682b      	ldr	r3, [r5, #0]
 8019a60:	9314      	str	r3, [sp, #80]	@ 0x50
 8019a62:	686b      	ldr	r3, [r5, #4]
 8019a64:	9315      	str	r3, [sp, #84]	@ 0x54
 8019a66:	4bc1      	ldr	r3, [pc, #772]	@ (8019d6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8019a68:	7819      	ldrb	r1, [r3, #0]
 8019a6a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8019a6e:	2900      	cmp	r1, #0
 8019a70:	bf16      	itet	ne
 8019a72:	4619      	movne	r1, r3
 8019a74:	4611      	moveq	r1, r2
 8019a76:	4613      	movne	r3, r2
 8019a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a7c:	9116      	str	r1, [sp, #88]	@ 0x58
 8019a7e:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8019a82:	f240 8387 	bls.w	801a194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019a86:	ed94 7a07 	vldr	s14, [r4, #28]
 8019a8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a92:	f240 837f 	bls.w	801a194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019a96:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8019a9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019aa2:	f240 8377 	bls.w	801a194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019aa6:	6822      	ldr	r2, [r4, #0]
 8019aa8:	4bb1      	ldr	r3, [pc, #708]	@ (8019d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8019aaa:	429a      	cmp	r2, r3
 8019aac:	f2c0 8372 	blt.w	801a194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019ab0:	49b0      	ldr	r1, [pc, #704]	@ (8019d74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8019ab2:	6963      	ldr	r3, [r4, #20]
 8019ab4:	428a      	cmp	r2, r1
 8019ab6:	f300 836d 	bgt.w	801a194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019aba:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8019abe:	48ae      	ldr	r0, [pc, #696]	@ (8019d78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8019ac0:	33ff      	adds	r3, #255	@ 0xff
 8019ac2:	4283      	cmp	r3, r0
 8019ac4:	f200 8366 	bhi.w	801a194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019ac8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8019aca:	4dac      	ldr	r5, [pc, #688]	@ (8019d7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8019acc:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8019ad0:	33ff      	adds	r3, #255	@ 0xff
 8019ad2:	42ab      	cmp	r3, r5
 8019ad4:	f200 835e 	bhi.w	801a194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019ad8:	6862      	ldr	r2, [r4, #4]
 8019ada:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8019ade:	33ff      	adds	r3, #255	@ 0xff
 8019ae0:	4283      	cmp	r3, r0
 8019ae2:	f200 8357 	bhi.w	801a194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019ae6:	69a1      	ldr	r1, [r4, #24]
 8019ae8:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8019aec:	33ff      	adds	r3, #255	@ 0xff
 8019aee:	4283      	cmp	r3, r0
 8019af0:	f200 8350 	bhi.w	801a194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019af4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8019af6:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8019afa:	30ff      	adds	r0, #255	@ 0xff
 8019afc:	42a8      	cmp	r0, r5
 8019afe:	f200 8349 	bhi.w	801a194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019b02:	428a      	cmp	r2, r1
 8019b04:	f280 8110 	bge.w	8019d28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8019b08:	429a      	cmp	r2, r3
 8019b0a:	f300 8119 	bgt.w	8019d40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8019b0e:	4299      	cmp	r1, r3
 8019b10:	f280 811d 	bge.w	8019d4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8019b14:	2502      	movs	r5, #2
 8019b16:	2701      	movs	r7, #1
 8019b18:	46a9      	mov	r9, r5
 8019b1a:	46b8      	mov	r8, r7
 8019b1c:	f04f 0a00 	mov.w	sl, #0
 8019b20:	4621      	mov	r1, r4
 8019b22:	a849      	add	r0, sp, #292	@ 0x124
 8019b24:	f003 fe0c 	bl	801d740 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8019b28:	4622      	mov	r2, r4
 8019b2a:	4653      	mov	r3, sl
 8019b2c:	a949      	add	r1, sp, #292	@ 0x124
 8019b2e:	f8cd 9000 	str.w	r9, [sp]
 8019b32:	a819      	add	r0, sp, #100	@ 0x64
 8019b34:	f003 ff36 	bl	801d9a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019b38:	4622      	mov	r2, r4
 8019b3a:	4653      	mov	r3, sl
 8019b3c:	a949      	add	r1, sp, #292	@ 0x124
 8019b3e:	f8cd 8000 	str.w	r8, [sp]
 8019b42:	a829      	add	r0, sp, #164	@ 0xa4
 8019b44:	f003 ff2e 	bl	801d9a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019b48:	4643      	mov	r3, r8
 8019b4a:	4622      	mov	r2, r4
 8019b4c:	a949      	add	r1, sp, #292	@ 0x124
 8019b4e:	f8cd 9000 	str.w	r9, [sp]
 8019b52:	a839      	add	r0, sp, #228	@ 0xe4
 8019b54:	f003 ff26 	bl	801d9a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019b58:	42af      	cmp	r7, r5
 8019b5a:	bfb5      	itete	lt
 8019b5c:	2300      	movlt	r3, #0
 8019b5e:	2301      	movge	r3, #1
 8019b60:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8019b62:	930e      	strge	r3, [sp, #56]	@ 0x38
 8019b64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019b66:	af12      	add	r7, sp, #72	@ 0x48
 8019b68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019b6c:	bfb9      	ittee	lt
 8019b6e:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8019b70:	ac19      	addlt	r4, sp, #100	@ 0x64
 8019b72:	ad19      	addge	r5, sp, #100	@ 0x64
 8019b74:	ac29      	addge	r4, sp, #164	@ 0xa4
 8019b76:	e887 0003 	stmia.w	r7, {r0, r1}
 8019b7a:	b928      	cbnz	r0, 8019b88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8019b7c:	4b80      	ldr	r3, [pc, #512]	@ (8019d80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8019b7e:	6818      	ldr	r0, [r3, #0]
 8019b80:	6803      	ldr	r3, [r0, #0]
 8019b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019b84:	4798      	blx	r3
 8019b86:	6038      	str	r0, [r7, #0]
 8019b88:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019b8a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019b8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019b92:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8019b94:	930c      	str	r3, [sp, #48]	@ 0x30
 8019b96:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019b98:	6963      	ldr	r3, [r4, #20]
 8019b9a:	440b      	add	r3, r1
 8019b9c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019ba0:	4408      	add	r0, r1
 8019ba2:	b200      	sxth	r0, r0
 8019ba4:	4283      	cmp	r3, r0
 8019ba6:	900d      	str	r0, [sp, #52]	@ 0x34
 8019ba8:	f280 80dd 	bge.w	8019d66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8019bac:	428b      	cmp	r3, r1
 8019bae:	da08      	bge.n	8019bc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019bb0:	2a00      	cmp	r2, #0
 8019bb2:	dd06      	ble.n	8019bc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019bb4:	1acb      	subs	r3, r1, r3
 8019bb6:	429a      	cmp	r2, r3
 8019bb8:	f2c0 80e4 	blt.w	8019d84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	f300 80e2 	bgt.w	8019d86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8019bc2:	6967      	ldr	r7, [r4, #20]
 8019bc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019bc6:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8019bca:	443b      	add	r3, r7
 8019bcc:	461f      	mov	r7, r3
 8019bce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019bd0:	1bdf      	subs	r7, r3, r7
 8019bd2:	4297      	cmp	r7, r2
 8019bd4:	bfa8      	it	ge
 8019bd6:	4617      	movge	r7, r2
 8019bd8:	2f00      	cmp	r7, #0
 8019bda:	f340 8166 	ble.w	8019eaa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8019bde:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019be0:	6829      	ldr	r1, [r5, #0]
 8019be2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019be6:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019bea:	4411      	add	r1, r2
 8019bec:	4299      	cmp	r1, r3
 8019bee:	6820      	ldr	r0, [r4, #0]
 8019bf0:	dd1a      	ble.n	8019c28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019bf2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019bf6:	4402      	add	r2, r0
 8019bf8:	440b      	add	r3, r1
 8019bfa:	b21b      	sxth	r3, r3
 8019bfc:	429a      	cmp	r2, r3
 8019bfe:	dc13      	bgt.n	8019c28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019c00:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019c04:	a912      	add	r1, sp, #72	@ 0x48
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	9206      	str	r2, [sp, #24]
 8019c0a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019c0c:	9500      	str	r5, [sp, #0]
 8019c0e:	9205      	str	r2, [sp, #20]
 8019c10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019c12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019c14:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019c18:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8019c1a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019c1e:	aa49      	add	r2, sp, #292	@ 0x124
 8019c20:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8019c24:	4623      	mov	r3, r4
 8019c26:	47c8      	blx	r9
 8019c28:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019c2c:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8019c30:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8019c34:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8019c38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019c3c:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8019c40:	ed94 6a08 	vldr	s12, [r4, #32]
 8019c44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019c48:	edd4 6a07 	vldr	s13, [r4, #28]
 8019c4c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019c50:	441a      	add	r2, r3
 8019c52:	6963      	ldr	r3, [r4, #20]
 8019c54:	68a1      	ldr	r1, [r4, #8]
 8019c56:	3301      	adds	r3, #1
 8019c58:	6163      	str	r3, [r4, #20]
 8019c5a:	69a3      	ldr	r3, [r4, #24]
 8019c5c:	6022      	str	r2, [r4, #0]
 8019c5e:	3b01      	subs	r3, #1
 8019c60:	61a3      	str	r3, [r4, #24]
 8019c62:	6923      	ldr	r3, [r4, #16]
 8019c64:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019c68:	440b      	add	r3, r1
 8019c6a:	68e1      	ldr	r1, [r4, #12]
 8019c6c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019c70:	428b      	cmp	r3, r1
 8019c72:	edc4 6a07 	vstr	s13, [r4, #28]
 8019c76:	6123      	str	r3, [r4, #16]
 8019c78:	db15      	blt.n	8019ca6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8019c7a:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8019c7e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019c82:	edc4 6a07 	vstr	s13, [r4, #28]
 8019c86:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8019c8a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019c8e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019c92:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8019c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c9a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019c9e:	3201      	adds	r2, #1
 8019ca0:	1a5b      	subs	r3, r3, r1
 8019ca2:	6022      	str	r2, [r4, #0]
 8019ca4:	6123      	str	r3, [r4, #16]
 8019ca6:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8019caa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019cae:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8019cb2:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8019cb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019cba:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8019cbe:	ed95 6a08 	vldr	s12, [r5, #32]
 8019cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019cc6:	edd5 6a07 	vldr	s13, [r5, #28]
 8019cca:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019cce:	441a      	add	r2, r3
 8019cd0:	696b      	ldr	r3, [r5, #20]
 8019cd2:	68a9      	ldr	r1, [r5, #8]
 8019cd4:	3301      	adds	r3, #1
 8019cd6:	616b      	str	r3, [r5, #20]
 8019cd8:	69ab      	ldr	r3, [r5, #24]
 8019cda:	602a      	str	r2, [r5, #0]
 8019cdc:	3b01      	subs	r3, #1
 8019cde:	61ab      	str	r3, [r5, #24]
 8019ce0:	692b      	ldr	r3, [r5, #16]
 8019ce2:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8019ce6:	440b      	add	r3, r1
 8019ce8:	68e9      	ldr	r1, [r5, #12]
 8019cea:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8019cee:	428b      	cmp	r3, r1
 8019cf0:	edc5 6a07 	vstr	s13, [r5, #28]
 8019cf4:	612b      	str	r3, [r5, #16]
 8019cf6:	db15      	blt.n	8019d24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8019cf8:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8019cfc:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019d00:	edc5 6a07 	vstr	s13, [r5, #28]
 8019d04:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8019d08:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019d0c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8019d10:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8019d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d18:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8019d1c:	3201      	adds	r2, #1
 8019d1e:	1a5b      	subs	r3, r3, r1
 8019d20:	602a      	str	r2, [r5, #0]
 8019d22:	612b      	str	r3, [r5, #16]
 8019d24:	3f01      	subs	r7, #1
 8019d26:	e757      	b.n	8019bd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8019d28:	4299      	cmp	r1, r3
 8019d2a:	dc13      	bgt.n	8019d54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8019d2c:	429a      	cmp	r2, r3
 8019d2e:	da14      	bge.n	8019d5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8019d30:	2502      	movs	r5, #2
 8019d32:	2703      	movs	r7, #3
 8019d34:	46a9      	mov	r9, r5
 8019d36:	f04f 0800 	mov.w	r8, #0
 8019d3a:	f04f 0a01 	mov.w	sl, #1
 8019d3e:	e6ef      	b.n	8019b20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019d40:	2501      	movs	r5, #1
 8019d42:	2700      	movs	r7, #0
 8019d44:	46a9      	mov	r9, r5
 8019d46:	46b8      	mov	r8, r7
 8019d48:	f04f 0a02 	mov.w	sl, #2
 8019d4c:	e6e8      	b.n	8019b20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019d4e:	2501      	movs	r5, #1
 8019d50:	2702      	movs	r7, #2
 8019d52:	e6e1      	b.n	8019b18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8019d54:	2500      	movs	r5, #0
 8019d56:	2701      	movs	r7, #1
 8019d58:	e7f4      	b.n	8019d44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8019d5a:	2702      	movs	r7, #2
 8019d5c:	2503      	movs	r5, #3
 8019d5e:	f04f 0900 	mov.w	r9, #0
 8019d62:	46b8      	mov	r8, r7
 8019d64:	e7e9      	b.n	8019d3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8019d66:	4613      	mov	r3, r2
 8019d68:	e728      	b.n	8019bbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8019d6a:	bf00      	nop
 8019d6c:	2005bd14 	.word	0x2005bd14
 8019d70:	fffd8f01 	.word	0xfffd8f01
 8019d74:	00027100 	.word	0x00027100
 8019d78:	0004e1ff 	.word	0x0004e1ff
 8019d7c:	0004e1fe 	.word	0x0004e1fe
 8019d80:	2005bd1c 	.word	0x2005bd1c
 8019d84:	4613      	mov	r3, r2
 8019d86:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8019d8a:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8019d8e:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8019d92:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8019d96:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8019d9a:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8019d9e:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8019da2:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8019da6:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8019daa:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8019dae:	469e      	mov	lr, r3
 8019db0:	469c      	mov	ip, r3
 8019db2:	f04f 0900 	mov.w	r9, #0
 8019db6:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8019db8:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8019dba:	9111      	str	r1, [sp, #68]	@ 0x44
 8019dbc:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8019dc0:	f1bc 0f00 	cmp.w	ip, #0
 8019dc4:	d147      	bne.n	8019e56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8019dc6:	eb03 0c07 	add.w	ip, r3, r7
 8019dca:	1ad7      	subs	r7, r2, r3
 8019dcc:	f1b9 0f00 	cmp.w	r9, #0
 8019dd0:	d009      	beq.n	8019de6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8019dd2:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8019dd6:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8019dda:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8019dde:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8019de2:	9029      	str	r0, [sp, #164]	@ 0xa4
 8019de4:	912d      	str	r1, [sp, #180]	@ 0xb4
 8019de6:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8019dea:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8019dee:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8019df2:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8019df6:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8019dfa:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8019dfe:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8019e02:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8019e06:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8019e0a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8019e0e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8019e12:	f04f 0800 	mov.w	r8, #0
 8019e16:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8019e18:	9111      	str	r1, [sp, #68]	@ 0x44
 8019e1a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8019e1e:	f1be 0f00 	cmp.w	lr, #0
 8019e22:	d031      	beq.n	8019e88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8019e24:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8019e26:	4450      	add	r0, sl
 8019e28:	4431      	add	r1, r6
 8019e2a:	4549      	cmp	r1, r9
 8019e2c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019e30:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019e34:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019e38:	db08      	blt.n	8019e4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8019e3a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019e3e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019e42:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019e46:	3001      	adds	r0, #1
 8019e48:	eba1 0109 	sub.w	r1, r1, r9
 8019e4c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019e50:	f04f 0801 	mov.w	r8, #1
 8019e54:	e7e3      	b.n	8019e1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8019e56:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8019e58:	4450      	add	r0, sl
 8019e5a:	4431      	add	r1, r6
 8019e5c:	4541      	cmp	r1, r8
 8019e5e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019e62:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019e66:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019e6a:	db08      	blt.n	8019e7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8019e6c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019e70:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019e74:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019e78:	3001      	adds	r0, #1
 8019e7a:	eba1 0108 	sub.w	r1, r1, r8
 8019e7e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019e82:	f04f 0901 	mov.w	r9, #1
 8019e86:	e79b      	b.n	8019dc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8019e88:	449c      	add	ip, r3
 8019e8a:	1aff      	subs	r7, r7, r3
 8019e8c:	f1b8 0f00 	cmp.w	r8, #0
 8019e90:	d009      	beq.n	8019ea6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8019e92:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8019e96:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8019e9a:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8019e9e:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8019ea2:	9019      	str	r0, [sp, #100]	@ 0x64
 8019ea4:	911d      	str	r1, [sp, #116]	@ 0x74
 8019ea6:	1ad2      	subs	r2, r2, r3
 8019ea8:	e68b      	b.n	8019bc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019eaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019eac:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	f000 80d1 	beq.w	801a056 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8019eb4:	ad19      	add	r5, sp, #100	@ 0x64
 8019eb6:	ac39      	add	r4, sp, #228	@ 0xe4
 8019eb8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019eba:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019ebe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019ec2:	930c      	str	r3, [sp, #48]	@ 0x30
 8019ec4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019ec6:	6963      	ldr	r3, [r4, #20]
 8019ec8:	440b      	add	r3, r1
 8019eca:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019ece:	4408      	add	r0, r1
 8019ed0:	b200      	sxth	r0, r0
 8019ed2:	4283      	cmp	r3, r0
 8019ed4:	900d      	str	r0, [sp, #52]	@ 0x34
 8019ed6:	f280 80c1 	bge.w	801a05c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8019eda:	428b      	cmp	r3, r1
 8019edc:	da08      	bge.n	8019ef0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019ede:	2a00      	cmp	r2, #0
 8019ee0:	dd06      	ble.n	8019ef0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019ee2:	1acb      	subs	r3, r1, r3
 8019ee4:	429a      	cmp	r2, r3
 8019ee6:	f2c0 80bb 	blt.w	801a060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	f300 80b9 	bgt.w	801a062 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8019ef0:	6967      	ldr	r7, [r4, #20]
 8019ef2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019ef4:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8019ef8:	443b      	add	r3, r7
 8019efa:	461f      	mov	r7, r3
 8019efc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019efe:	1bdf      	subs	r7, r3, r7
 8019f00:	4297      	cmp	r7, r2
 8019f02:	bfa8      	it	ge
 8019f04:	4617      	movge	r7, r2
 8019f06:	2f00      	cmp	r7, #0
 8019f08:	f340 813c 	ble.w	801a184 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8019f0c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019f0e:	6829      	ldr	r1, [r5, #0]
 8019f10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019f14:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019f18:	4411      	add	r1, r2
 8019f1a:	4299      	cmp	r1, r3
 8019f1c:	6820      	ldr	r0, [r4, #0]
 8019f1e:	dd1a      	ble.n	8019f56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019f20:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019f24:	4402      	add	r2, r0
 8019f26:	440b      	add	r3, r1
 8019f28:	b21b      	sxth	r3, r3
 8019f2a:	429a      	cmp	r2, r3
 8019f2c:	dc13      	bgt.n	8019f56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019f2e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f32:	a912      	add	r1, sp, #72	@ 0x48
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	9206      	str	r2, [sp, #24]
 8019f38:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019f3a:	9500      	str	r5, [sp, #0]
 8019f3c:	9205      	str	r2, [sp, #20]
 8019f3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019f40:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019f42:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019f46:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8019f48:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019f4c:	aa49      	add	r2, sp, #292	@ 0x124
 8019f4e:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8019f52:	4623      	mov	r3, r4
 8019f54:	47c8      	blx	r9
 8019f56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019f5a:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8019f5e:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8019f62:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8019f66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019f6a:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8019f6e:	ed94 6a08 	vldr	s12, [r4, #32]
 8019f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019f76:	edd4 6a07 	vldr	s13, [r4, #28]
 8019f7a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019f7e:	441a      	add	r2, r3
 8019f80:	6963      	ldr	r3, [r4, #20]
 8019f82:	68a1      	ldr	r1, [r4, #8]
 8019f84:	3301      	adds	r3, #1
 8019f86:	6163      	str	r3, [r4, #20]
 8019f88:	69a3      	ldr	r3, [r4, #24]
 8019f8a:	6022      	str	r2, [r4, #0]
 8019f8c:	3b01      	subs	r3, #1
 8019f8e:	61a3      	str	r3, [r4, #24]
 8019f90:	6923      	ldr	r3, [r4, #16]
 8019f92:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019f96:	440b      	add	r3, r1
 8019f98:	68e1      	ldr	r1, [r4, #12]
 8019f9a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019f9e:	428b      	cmp	r3, r1
 8019fa0:	edc4 6a07 	vstr	s13, [r4, #28]
 8019fa4:	6123      	str	r3, [r4, #16]
 8019fa6:	db15      	blt.n	8019fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8019fa8:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8019fac:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019fb0:	edc4 6a07 	vstr	s13, [r4, #28]
 8019fb4:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8019fb8:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019fbc:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019fc0:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8019fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019fc8:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019fcc:	3201      	adds	r2, #1
 8019fce:	1a5b      	subs	r3, r3, r1
 8019fd0:	6022      	str	r2, [r4, #0]
 8019fd2:	6123      	str	r3, [r4, #16]
 8019fd4:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8019fd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019fdc:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8019fe0:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8019fe4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019fe8:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8019fec:	ed95 6a08 	vldr	s12, [r5, #32]
 8019ff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019ff4:	edd5 6a07 	vldr	s13, [r5, #28]
 8019ff8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019ffc:	441a      	add	r2, r3
 8019ffe:	696b      	ldr	r3, [r5, #20]
 801a000:	68a9      	ldr	r1, [r5, #8]
 801a002:	3301      	adds	r3, #1
 801a004:	616b      	str	r3, [r5, #20]
 801a006:	69ab      	ldr	r3, [r5, #24]
 801a008:	602a      	str	r2, [r5, #0]
 801a00a:	3b01      	subs	r3, #1
 801a00c:	61ab      	str	r3, [r5, #24]
 801a00e:	692b      	ldr	r3, [r5, #16]
 801a010:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801a014:	440b      	add	r3, r1
 801a016:	68e9      	ldr	r1, [r5, #12]
 801a018:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801a01c:	428b      	cmp	r3, r1
 801a01e:	edc5 6a07 	vstr	s13, [r5, #28]
 801a022:	612b      	str	r3, [r5, #16]
 801a024:	db15      	blt.n	801a052 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801a026:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801a02a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a02e:	edc5 6a07 	vstr	s13, [r5, #28]
 801a032:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801a036:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a03a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801a03e:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801a042:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a046:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801a04a:	3201      	adds	r2, #1
 801a04c:	1a5b      	subs	r3, r3, r1
 801a04e:	602a      	str	r2, [r5, #0]
 801a050:	612b      	str	r3, [r5, #16]
 801a052:	3f01      	subs	r7, #1
 801a054:	e757      	b.n	8019f06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801a056:	ad39      	add	r5, sp, #228	@ 0xe4
 801a058:	ac19      	add	r4, sp, #100	@ 0x64
 801a05a:	e72d      	b.n	8019eb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801a05c:	4613      	mov	r3, r2
 801a05e:	e744      	b.n	8019eea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801a060:	4613      	mov	r3, r2
 801a062:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 801a066:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 801a06a:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 801a06e:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 801a072:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 801a076:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 801a07a:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 801a07e:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 801a082:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 801a086:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801a08a:	469e      	mov	lr, r3
 801a08c:	461f      	mov	r7, r3
 801a08e:	f04f 0900 	mov.w	r9, #0
 801a092:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 801a094:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 801a098:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801a09a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801a09e:	960e      	str	r6, [sp, #56]	@ 0x38
 801a0a0:	2f00      	cmp	r7, #0
 801a0a2:	d146      	bne.n	801a132 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801a0a4:	449c      	add	ip, r3
 801a0a6:	1ad7      	subs	r7, r2, r3
 801a0a8:	f1b9 0f00 	cmp.w	r9, #0
 801a0ac:	d009      	beq.n	801a0c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801a0ae:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 801a0b2:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801a0b6:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801a0ba:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 801a0be:	9039      	str	r0, [sp, #228]	@ 0xe4
 801a0c0:	913d      	str	r1, [sp, #244]	@ 0xf4
 801a0c2:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801a0c6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801a0ca:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801a0ce:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801a0d2:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801a0d6:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801a0da:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801a0de:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801a0e2:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801a0e6:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801a0ea:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801a0ee:	f04f 0800 	mov.w	r8, #0
 801a0f2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801a0f4:	910e      	str	r1, [sp, #56]	@ 0x38
 801a0f6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801a0fa:	f1be 0f00 	cmp.w	lr, #0
 801a0fe:	d030      	beq.n	801a162 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801a100:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801a102:	4450      	add	r0, sl
 801a104:	4431      	add	r1, r6
 801a106:	4549      	cmp	r1, r9
 801a108:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a10c:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a110:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a114:	db08      	blt.n	801a128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801a116:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a11a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a11e:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a122:	3001      	adds	r0, #1
 801a124:	eba1 0109 	sub.w	r1, r1, r9
 801a128:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a12c:	f04f 0801 	mov.w	r8, #1
 801a130:	e7e3      	b.n	801a0fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801a132:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801a134:	4450      	add	r0, sl
 801a136:	4431      	add	r1, r6
 801a138:	4541      	cmp	r1, r8
 801a13a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a13e:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a142:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a146:	db08      	blt.n	801a15a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801a148:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a14c:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a150:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a154:	3001      	adds	r0, #1
 801a156:	eba1 0108 	sub.w	r1, r1, r8
 801a15a:	3f01      	subs	r7, #1
 801a15c:	f04f 0901 	mov.w	r9, #1
 801a160:	e79e      	b.n	801a0a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801a162:	449c      	add	ip, r3
 801a164:	1aff      	subs	r7, r7, r3
 801a166:	f1b8 0f00 	cmp.w	r8, #0
 801a16a:	d009      	beq.n	801a180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801a16c:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801a170:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801a174:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801a178:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801a17c:	9019      	str	r0, [sp, #100]	@ 0x64
 801a17e:	911d      	str	r1, [sp, #116]	@ 0x74
 801a180:	1ad2      	subs	r2, r2, r3
 801a182:	e6b5      	b.n	8019ef0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	b923      	cbnz	r3, 801a194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a18a:	4b04      	ldr	r3, [pc, #16]	@ (801a19c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801a18c:	6818      	ldr	r0, [r3, #0]
 801a18e:	6803      	ldr	r3, [r0, #0]
 801a190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a192:	4798      	blx	r3
 801a194:	b05b      	add	sp, #364	@ 0x16c
 801a196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a19a:	bf00      	nop
 801a19c:	2005bd1c 	.word	0x2005bd1c

0801a1a0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a1a0:	2b03      	cmp	r3, #3
 801a1a2:	d818      	bhi.n	801a1d6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801a1a4:	e8df f003 	tbb	[pc, r3]
 801a1a8:	130d0602 	.word	0x130d0602
 801a1ac:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a1b0:	1850      	adds	r0, r2, r1
 801a1b2:	4770      	bx	lr
 801a1b4:	8803      	ldrh	r3, [r0, #0]
 801a1b6:	8880      	ldrh	r0, [r0, #4]
 801a1b8:	4418      	add	r0, r3
 801a1ba:	b200      	sxth	r0, r0
 801a1bc:	1a80      	subs	r0, r0, r2
 801a1be:	3801      	subs	r0, #1
 801a1c0:	4770      	bx	lr
 801a1c2:	8803      	ldrh	r3, [r0, #0]
 801a1c4:	8880      	ldrh	r0, [r0, #4]
 801a1c6:	4418      	add	r0, r3
 801a1c8:	b200      	sxth	r0, r0
 801a1ca:	1a40      	subs	r0, r0, r1
 801a1cc:	e7f7      	b.n	801a1be <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801a1ce:	f9b0 0000 	ldrsh.w	r0, [r0]
 801a1d2:	4410      	add	r0, r2
 801a1d4:	4770      	bx	lr
 801a1d6:	2000      	movs	r0, #0
 801a1d8:	4770      	bx	lr

0801a1da <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801a1da:	2b03      	cmp	r3, #3
 801a1dc:	d817      	bhi.n	801a20e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801a1de:	e8df f003 	tbb	[pc, r3]
 801a1e2:	0602      	.short	0x0602
 801a1e4:	1009      	.short	0x1009
 801a1e6:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801a1ea:	1850      	adds	r0, r2, r1
 801a1ec:	4770      	bx	lr
 801a1ee:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a1f2:	e7fa      	b.n	801a1ea <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801a1f4:	8843      	ldrh	r3, [r0, #2]
 801a1f6:	88c0      	ldrh	r0, [r0, #6]
 801a1f8:	4418      	add	r0, r3
 801a1fa:	b200      	sxth	r0, r0
 801a1fc:	1a80      	subs	r0, r0, r2
 801a1fe:	3801      	subs	r0, #1
 801a200:	4770      	bx	lr
 801a202:	8843      	ldrh	r3, [r0, #2]
 801a204:	88c0      	ldrh	r0, [r0, #6]
 801a206:	4418      	add	r0, r3
 801a208:	b200      	sxth	r0, r0
 801a20a:	1a40      	subs	r0, r0, r1
 801a20c:	e7f7      	b.n	801a1fe <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801a20e:	2000      	movs	r0, #0
 801a210:	4770      	bx	lr
	...

0801a214 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801a214:	2200      	movs	r2, #0
 801a216:	4b01      	ldr	r3, [pc, #4]	@ (801a21c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801a218:	601a      	str	r2, [r3, #0]
 801a21a:	4770      	bx	lr
 801a21c:	2005bd2c 	.word	0x2005bd2c

0801a220 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801a220:	4603      	mov	r3, r0
 801a222:	b1c8      	cbz	r0, 801a258 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801a224:	0c02      	lsrs	r2, r0, #16
 801a226:	0412      	lsls	r2, r2, #16
 801a228:	b9a2      	cbnz	r2, 801a254 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801a22a:	0403      	lsls	r3, r0, #16
 801a22c:	2010      	movs	r0, #16
 801a22e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801a232:	bf04      	itt	eq
 801a234:	021b      	lsleq	r3, r3, #8
 801a236:	3008      	addeq	r0, #8
 801a238:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801a23c:	bf04      	itt	eq
 801a23e:	011b      	lsleq	r3, r3, #4
 801a240:	3004      	addeq	r0, #4
 801a242:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801a246:	bf04      	itt	eq
 801a248:	009b      	lsleq	r3, r3, #2
 801a24a:	3002      	addeq	r0, #2
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	db04      	blt.n	801a25a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801a250:	3001      	adds	r0, #1
 801a252:	4770      	bx	lr
 801a254:	2000      	movs	r0, #0
 801a256:	e7ea      	b.n	801a22e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801a258:	2020      	movs	r0, #32
 801a25a:	4770      	bx	lr

0801a25c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801a25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a260:	b087      	sub	sp, #28
 801a262:	460d      	mov	r5, r1
 801a264:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801a268:	4616      	mov	r6, r2
 801a26a:	4698      	mov	r8, r3
 801a26c:	4601      	mov	r1, r0
 801a26e:	b120      	cbz	r0, 801a27a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801a270:	b11a      	cbz	r2, 801a27a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801a272:	2d1f      	cmp	r5, #31
 801a274:	d801      	bhi.n	801a27a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801a276:	2b1f      	cmp	r3, #31
 801a278:	d904      	bls.n	801a284 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801a27a:	2000      	movs	r0, #0
 801a27c:	6038      	str	r0, [r7, #0]
 801a27e:	b007      	add	sp, #28
 801a280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a284:	b97d      	cbnz	r5, 801a2a6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801a286:	b143      	cbz	r3, 801a29a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801a288:	4602      	mov	r2, r0
 801a28a:	e9cd 4700 	strd	r4, r7, [sp]
 801a28e:	462b      	mov	r3, r5
 801a290:	4641      	mov	r1, r8
 801a292:	4630      	mov	r0, r6
 801a294:	f7ff ffe2 	bl	801a25c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a298:	e7f1      	b.n	801a27e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801a29a:	f04f 33ff 	mov.w	r3, #4294967295
 801a29e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801a2a2:	603b      	str	r3, [r7, #0]
 801a2a4:	e7eb      	b.n	801a27e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801a2a6:	fa32 fa05 	lsrs.w	sl, r2, r5
 801a2aa:	d106      	bne.n	801a2ba <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801a2ac:	4346      	muls	r6, r0
 801a2ae:	fbb6 f0f4 	udiv	r0, r6, r4
 801a2b2:	fb04 6610 	mls	r6, r4, r0, r6
 801a2b6:	603e      	str	r6, [r7, #0]
 801a2b8:	e7e1      	b.n	801a27e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801a2ba:	fa00 fb05 	lsl.w	fp, r0, r5
 801a2be:	fbbb f9f4 	udiv	r9, fp, r4
 801a2c2:	2201      	movs	r2, #1
 801a2c4:	fb0a f309 	mul.w	r3, sl, r9
 801a2c8:	40aa      	lsls	r2, r5
 801a2ca:	3a01      	subs	r2, #1
 801a2cc:	4016      	ands	r6, r2
 801a2ce:	4630      	mov	r0, r6
 801a2d0:	9303      	str	r3, [sp, #12]
 801a2d2:	f7ff ffa5 	bl	801a220 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a2d6:	462b      	mov	r3, r5
 801a2d8:	460a      	mov	r2, r1
 801a2da:	e9cd 4700 	strd	r4, r7, [sp]
 801a2de:	4601      	mov	r1, r0
 801a2e0:	4630      	mov	r0, r6
 801a2e2:	f7ff ffbb 	bl	801a25c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a2e6:	fb04 b919 	mls	r9, r4, r9, fp
 801a2ea:	4606      	mov	r6, r0
 801a2ec:	4648      	mov	r0, r9
 801a2ee:	eb05 0108 	add.w	r1, r5, r8
 801a2f2:	f7ff ff95 	bl	801a220 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a2f6:	ab05      	add	r3, sp, #20
 801a2f8:	e9cd 4300 	strd	r4, r3, [sp]
 801a2fc:	464a      	mov	r2, r9
 801a2fe:	4603      	mov	r3, r0
 801a300:	4650      	mov	r0, sl
 801a302:	f7ff ffab 	bl	801a25c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a306:	6839      	ldr	r1, [r7, #0]
 801a308:	9a05      	ldr	r2, [sp, #20]
 801a30a:	9b03      	ldr	r3, [sp, #12]
 801a30c:	4411      	add	r1, r2
 801a30e:	fbb1 f2f4 	udiv	r2, r1, r4
 801a312:	fb04 1412 	mls	r4, r4, r2, r1
 801a316:	18d3      	adds	r3, r2, r3
 801a318:	441e      	add	r6, r3
 801a31a:	4430      	add	r0, r6
 801a31c:	603c      	str	r4, [r7, #0]
 801a31e:	e7ae      	b.n	801a27e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801a320 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801a320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a324:	b085      	sub	sp, #20
 801a326:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801a328:	f1b0 0900 	subs.w	r9, r0, #0
 801a32c:	461d      	mov	r5, r3
 801a32e:	bfbf      	itttt	lt
 801a330:	6823      	ldrlt	r3, [r4, #0]
 801a332:	f1c9 0900 	rsblt	r9, r9, #0
 801a336:	425b      	neglt	r3, r3
 801a338:	6023      	strlt	r3, [r4, #0]
 801a33a:	bfb4      	ite	lt
 801a33c:	f04f 36ff 	movlt.w	r6, #4294967295
 801a340:	2601      	movge	r6, #1
 801a342:	2a00      	cmp	r2, #0
 801a344:	4617      	mov	r7, r2
 801a346:	da04      	bge.n	801a352 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801a348:	6823      	ldr	r3, [r4, #0]
 801a34a:	4257      	negs	r7, r2
 801a34c:	425b      	negs	r3, r3
 801a34e:	4276      	negs	r6, r6
 801a350:	6023      	str	r3, [r4, #0]
 801a352:	2d00      	cmp	r5, #0
 801a354:	4638      	mov	r0, r7
 801a356:	bfba      	itte	lt
 801a358:	426d      	neglt	r5, r5
 801a35a:	f04f 38ff 	movlt.w	r8, #4294967295
 801a35e:	f04f 0801 	movge.w	r8, #1
 801a362:	f7ff ff5d 	bl	801a220 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a366:	ab03      	add	r3, sp, #12
 801a368:	e9cd 5300 	strd	r5, r3, [sp]
 801a36c:	463a      	mov	r2, r7
 801a36e:	4603      	mov	r3, r0
 801a370:	4648      	mov	r0, r9
 801a372:	f7ff ff73 	bl	801a25c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a376:	6823      	ldr	r3, [r4, #0]
 801a378:	9a03      	ldr	r2, [sp, #12]
 801a37a:	4546      	cmp	r6, r8
 801a37c:	441a      	add	r2, r3
 801a37e:	fb92 f3f5 	sdiv	r3, r2, r5
 801a382:	4418      	add	r0, r3
 801a384:	fb05 2313 	mls	r3, r5, r3, r2
 801a388:	bf18      	it	ne
 801a38a:	4240      	negne	r0, r0
 801a38c:	1c72      	adds	r2, r6, #1
 801a38e:	6023      	str	r3, [r4, #0]
 801a390:	d105      	bne.n	801a39e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801a392:	2b00      	cmp	r3, #0
 801a394:	f1c3 0200 	rsb	r2, r3, #0
 801a398:	db0b      	blt.n	801a3b2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801a39a:	6022      	str	r2, [r4, #0]
 801a39c:	e006      	b.n	801a3ac <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a39e:	2e01      	cmp	r6, #1
 801a3a0:	d104      	bne.n	801a3ac <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	da02      	bge.n	801a3ac <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a3a6:	442b      	add	r3, r5
 801a3a8:	3801      	subs	r0, #1
 801a3aa:	6023      	str	r3, [r4, #0]
 801a3ac:	b005      	add	sp, #20
 801a3ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a3b2:	3801      	subs	r0, #1
 801a3b4:	1b52      	subs	r2, r2, r5
 801a3b6:	e7f0      	b.n	801a39a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801a3b8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801a3b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801a3bc:	4c1c      	ldr	r4, [pc, #112]	@ (801a430 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801a3be:	4605      	mov	r5, r0
 801a3c0:	69a3      	ldr	r3, [r4, #24]
 801a3c2:	6807      	ldr	r7, [r0, #0]
 801a3c4:	b92b      	cbnz	r3, 801a3d2 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801a3c6:	6840      	ldr	r0, [r0, #4]
 801a3c8:	e9c5 7000 	strd	r7, r0, [r5]
 801a3cc:	b004      	add	sp, #16
 801a3ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3d2:	f04f 0802 	mov.w	r8, #2
 801a3d6:	fb93 f1f8 	sdiv	r1, r3, r8
 801a3da:	68a2      	ldr	r2, [r4, #8]
 801a3dc:	ae04      	add	r6, sp, #16
 801a3de:	440a      	add	r2, r1
 801a3e0:	f846 2d04 	str.w	r2, [r6, #-4]!
 801a3e4:	69e1      	ldr	r1, [r4, #28]
 801a3e6:	463a      	mov	r2, r7
 801a3e8:	9600      	str	r6, [sp, #0]
 801a3ea:	6820      	ldr	r0, [r4, #0]
 801a3ec:	f7ff ff98 	bl	801a320 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a3f0:	69a3      	ldr	r3, [r4, #24]
 801a3f2:	4607      	mov	r7, r0
 801a3f4:	686a      	ldr	r2, [r5, #4]
 801a3f6:	6a21      	ldr	r1, [r4, #32]
 801a3f8:	9600      	str	r6, [sp, #0]
 801a3fa:	6860      	ldr	r0, [r4, #4]
 801a3fc:	f7ff ff90 	bl	801a320 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a400:	69a3      	ldr	r3, [r4, #24]
 801a402:	6962      	ldr	r2, [r4, #20]
 801a404:	fb93 f8f8 	sdiv	r8, r3, r8
 801a408:	4442      	add	r2, r8
 801a40a:	9203      	str	r2, [sp, #12]
 801a40c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801a40e:	682a      	ldr	r2, [r5, #0]
 801a410:	4407      	add	r7, r0
 801a412:	9600      	str	r6, [sp, #0]
 801a414:	68e0      	ldr	r0, [r4, #12]
 801a416:	f7ff ff83 	bl	801a320 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a41a:	9600      	str	r6, [sp, #0]
 801a41c:	4680      	mov	r8, r0
 801a41e:	69a3      	ldr	r3, [r4, #24]
 801a420:	686a      	ldr	r2, [r5, #4]
 801a422:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801a424:	6920      	ldr	r0, [r4, #16]
 801a426:	f7ff ff7b 	bl	801a320 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a42a:	4440      	add	r0, r8
 801a42c:	e7cc      	b.n	801a3c8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801a42e:	bf00      	nop
 801a430:	2005bd30 	.word	0x2005bd30

0801a434 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801a434:	4b07      	ldr	r3, [pc, #28]	@ (801a454 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801a436:	781b      	ldrb	r3, [r3, #0]
 801a438:	2b01      	cmp	r3, #1
 801a43a:	d109      	bne.n	801a450 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801a43c:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a440:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a444:	8003      	strh	r3, [r0, #0]
 801a446:	4b04      	ldr	r3, [pc, #16]	@ (801a458 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801a448:	881b      	ldrh	r3, [r3, #0]
 801a44a:	3b01      	subs	r3, #1
 801a44c:	1a9b      	subs	r3, r3, r2
 801a44e:	800b      	strh	r3, [r1, #0]
 801a450:	4770      	bx	lr
 801a452:	bf00      	nop
 801a454:	2005bd14 	.word	0x2005bd14
 801a458:	2005bd10 	.word	0x2005bd10

0801a45c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801a45c:	b510      	push	{r4, lr}
 801a45e:	4b07      	ldr	r3, [pc, #28]	@ (801a47c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801a460:	781b      	ldrb	r3, [r3, #0]
 801a462:	2b01      	cmp	r3, #1
 801a464:	d108      	bne.n	801a478 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801a466:	4b06      	ldr	r3, [pc, #24]	@ (801a480 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801a468:	880c      	ldrh	r4, [r1, #0]
 801a46a:	881b      	ldrh	r3, [r3, #0]
 801a46c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a470:	3b01      	subs	r3, #1
 801a472:	1b1b      	subs	r3, r3, r4
 801a474:	8003      	strh	r3, [r0, #0]
 801a476:	800a      	strh	r2, [r1, #0]
 801a478:	bd10      	pop	{r4, pc}
 801a47a:	bf00      	nop
 801a47c:	2005bd14 	.word	0x2005bd14
 801a480:	2005bd10 	.word	0x2005bd10

0801a484 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801a484:	b510      	push	{r4, lr}
 801a486:	4b0a      	ldr	r3, [pc, #40]	@ (801a4b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801a488:	781b      	ldrb	r3, [r3, #0]
 801a48a:	2b01      	cmp	r3, #1
 801a48c:	d10e      	bne.n	801a4ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801a48e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a492:	8843      	ldrh	r3, [r0, #2]
 801a494:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a498:	18ca      	adds	r2, r1, r3
 801a49a:	4b06      	ldr	r3, [pc, #24]	@ (801a4b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801a49c:	8044      	strh	r4, [r0, #2]
 801a49e:	881b      	ldrh	r3, [r3, #0]
 801a4a0:	1a9b      	subs	r3, r3, r2
 801a4a2:	8003      	strh	r3, [r0, #0]
 801a4a4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a4a8:	8081      	strh	r1, [r0, #4]
 801a4aa:	80c3      	strh	r3, [r0, #6]
 801a4ac:	bd10      	pop	{r4, pc}
 801a4ae:	bf00      	nop
 801a4b0:	2005bd14 	.word	0x2005bd14
 801a4b4:	2005bd10 	.word	0x2005bd10

0801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801a4b8:	4b08      	ldr	r3, [pc, #32]	@ (801a4dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801a4ba:	781b      	ldrb	r3, [r3, #0]
 801a4bc:	2b01      	cmp	r3, #1
 801a4be:	d10c      	bne.n	801a4da <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801a4c0:	8803      	ldrh	r3, [r0, #0]
 801a4c2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801a4c6:	8842      	ldrh	r2, [r0, #2]
 801a4c8:	8002      	strh	r2, [r0, #0]
 801a4ca:	185a      	adds	r2, r3, r1
 801a4cc:	4b04      	ldr	r3, [pc, #16]	@ (801a4e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801a4ce:	881b      	ldrh	r3, [r3, #0]
 801a4d0:	1a9b      	subs	r3, r3, r2
 801a4d2:	8043      	strh	r3, [r0, #2]
 801a4d4:	88c3      	ldrh	r3, [r0, #6]
 801a4d6:	80c1      	strh	r1, [r0, #6]
 801a4d8:	8083      	strh	r3, [r0, #4]
 801a4da:	4770      	bx	lr
 801a4dc:	2005bd14 	.word	0x2005bd14
 801a4e0:	2005bd10 	.word	0x2005bd10

0801a4e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801a4e4:	b510      	push	{r4, lr}
 801a4e6:	4b07      	ldr	r3, [pc, #28]	@ (801a504 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801a4e8:	781b      	ldrb	r3, [r3, #0]
 801a4ea:	2b01      	cmp	r3, #1
 801a4ec:	d108      	bne.n	801a500 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801a4ee:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a4f2:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a4f6:	8003      	strh	r3, [r0, #0]
 801a4f8:	8893      	ldrh	r3, [r2, #4]
 801a4fa:	3b01      	subs	r3, #1
 801a4fc:	1b1b      	subs	r3, r3, r4
 801a4fe:	800b      	strh	r3, [r1, #0]
 801a500:	bd10      	pop	{r4, pc}
 801a502:	bf00      	nop
 801a504:	2005bd14 	.word	0x2005bd14

0801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801a508:	b510      	push	{r4, lr}
 801a50a:	4b0a      	ldr	r3, [pc, #40]	@ (801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801a50c:	460a      	mov	r2, r1
 801a50e:	781b      	ldrb	r3, [r3, #0]
 801a510:	2b01      	cmp	r3, #1
 801a512:	d10d      	bne.n	801a530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801a514:	8881      	ldrh	r1, [r0, #4]
 801a516:	8803      	ldrh	r3, [r0, #0]
 801a518:	440b      	add	r3, r1
 801a51a:	4601      	mov	r1, r0
 801a51c:	3b01      	subs	r3, #1
 801a51e:	f821 3b02 	strh.w	r3, [r1], #2
 801a522:	f7ff ffdf 	bl	801a4e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a526:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a52a:	88c2      	ldrh	r2, [r0, #6]
 801a52c:	80c3      	strh	r3, [r0, #6]
 801a52e:	8082      	strh	r2, [r0, #4]
 801a530:	bd10      	pop	{r4, pc}
 801a532:	bf00      	nop
 801a534:	2005bd14 	.word	0x2005bd14

0801a538 <_ZN8touchgfx11Application13requestRedrawEv>:
 801a538:	2100      	movs	r1, #0
 801a53a:	4b06      	ldr	r3, [pc, #24]	@ (801a554 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801a53c:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801a540:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a544:	4b04      	ldr	r3, [pc, #16]	@ (801a558 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801a546:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801a54a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a54e:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801a552:	4770      	bx	lr
 801a554:	2005bd10 	.word	0x2005bd10
 801a558:	2005bd12 	.word	0x2005bd12

0801a55c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801a55c:	4b03      	ldr	r3, [pc, #12]	@ (801a56c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801a55e:	6818      	ldr	r0, [r3, #0]
 801a560:	b110      	cbz	r0, 801a568 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801a562:	6803      	ldr	r3, [r0, #0]
 801a564:	699b      	ldr	r3, [r3, #24]
 801a566:	4718      	bx	r3
 801a568:	4770      	bx	lr
 801a56a:	bf00      	nop
 801a56c:	2005bd60 	.word	0x2005bd60

0801a570 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801a570:	4770      	bx	lr
	...

0801a574 <_ZN8touchgfx11Application4drawEv>:
 801a574:	b507      	push	{r0, r1, r2, lr}
 801a576:	2100      	movs	r1, #0
 801a578:	4b08      	ldr	r3, [pc, #32]	@ (801a59c <_ZN8touchgfx11Application4drawEv+0x28>)
 801a57a:	9100      	str	r1, [sp, #0]
 801a57c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a580:	4b07      	ldr	r3, [pc, #28]	@ (801a5a0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801a582:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a586:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a58a:	4669      	mov	r1, sp
 801a58c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a590:	6803      	ldr	r3, [r0, #0]
 801a592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a594:	4798      	blx	r3
 801a596:	b003      	add	sp, #12
 801a598:	f85d fb04 	ldr.w	pc, [sp], #4
 801a59c:	2005bd10 	.word	0x2005bd10
 801a5a0:	2005bd12 	.word	0x2005bd12

0801a5a4 <_ZN8touchgfx11Application10invalidateEv>:
 801a5a4:	2100      	movs	r1, #0
 801a5a6:	4b09      	ldr	r3, [pc, #36]	@ (801a5cc <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801a5a8:	b082      	sub	sp, #8
 801a5aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a5ae:	4b08      	ldr	r3, [pc, #32]	@ (801a5d0 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801a5b0:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a5b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a5b8:	9100      	str	r1, [sp, #0]
 801a5ba:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a5be:	6803      	ldr	r3, [r0, #0]
 801a5c0:	aa02      	add	r2, sp, #8
 801a5c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a5c4:	e912 0006 	ldmdb	r2, {r1, r2}
 801a5c8:	b002      	add	sp, #8
 801a5ca:	4718      	bx	r3
 801a5cc:	2005bd10 	.word	0x2005bd10
 801a5d0:	2005bd12 	.word	0x2005bd12

0801a5d4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801a5d4:	4b03      	ldr	r3, [pc, #12]	@ (801a5e4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801a5d6:	6818      	ldr	r0, [r3, #0]
 801a5d8:	b110      	cbz	r0, 801a5e0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801a5da:	6803      	ldr	r3, [r0, #0]
 801a5dc:	69db      	ldr	r3, [r3, #28]
 801a5de:	4718      	bx	r3
 801a5e0:	4770      	bx	lr
 801a5e2:	bf00      	nop
 801a5e4:	2005bd60 	.word	0x2005bd60

0801a5e8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801a5e8:	4b03      	ldr	r3, [pc, #12]	@ (801a5f8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801a5ea:	6818      	ldr	r0, [r3, #0]
 801a5ec:	b110      	cbz	r0, 801a5f4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801a5ee:	6803      	ldr	r3, [r0, #0]
 801a5f0:	6a1b      	ldr	r3, [r3, #32]
 801a5f2:	4718      	bx	r3
 801a5f4:	4770      	bx	lr
 801a5f6:	bf00      	nop
 801a5f8:	2005bd60 	.word	0x2005bd60

0801a5fc <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801a5fc:	2300      	movs	r3, #0
 801a5fe:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801a602:	4770      	bx	lr

0801a604 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801a604:	4b03      	ldr	r3, [pc, #12]	@ (801a614 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801a606:	6818      	ldr	r0, [r3, #0]
 801a608:	b110      	cbz	r0, 801a610 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801a60a:	6803      	ldr	r3, [r0, #0]
 801a60c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a60e:	4718      	bx	r3
 801a610:	4770      	bx	lr
 801a612:	bf00      	nop
 801a614:	2005bd60 	.word	0x2005bd60

0801a618 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801a618:	b510      	push	{r4, lr}
 801a61a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a61e:	888a      	ldrh	r2, [r1, #4]
 801a620:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a624:	4422      	add	r2, r4
 801a626:	b212      	sxth	r2, r2
 801a628:	4293      	cmp	r3, r2
 801a62a:	da15      	bge.n	801a658 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a62c:	8882      	ldrh	r2, [r0, #4]
 801a62e:	4413      	add	r3, r2
 801a630:	b21b      	sxth	r3, r3
 801a632:	429c      	cmp	r4, r3
 801a634:	da10      	bge.n	801a658 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a636:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a63a:	88c9      	ldrh	r1, [r1, #6]
 801a63c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a640:	4419      	add	r1, r3
 801a642:	b209      	sxth	r1, r1
 801a644:	428a      	cmp	r2, r1
 801a646:	da07      	bge.n	801a658 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a648:	88c0      	ldrh	r0, [r0, #6]
 801a64a:	4410      	add	r0, r2
 801a64c:	b200      	sxth	r0, r0
 801a64e:	4283      	cmp	r3, r0
 801a650:	bfac      	ite	ge
 801a652:	2000      	movge	r0, #0
 801a654:	2001      	movlt	r0, #1
 801a656:	bd10      	pop	{r4, pc}
 801a658:	2000      	movs	r0, #0
 801a65a:	e7fc      	b.n	801a656 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801a65c <_ZN8touchgfx4Rect10restrictToEss>:
 801a65c:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a660:	b510      	push	{r4, lr}
 801a662:	2b00      	cmp	r3, #0
 801a664:	da04      	bge.n	801a670 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801a666:	8884      	ldrh	r4, [r0, #4]
 801a668:	4423      	add	r3, r4
 801a66a:	8083      	strh	r3, [r0, #4]
 801a66c:	2300      	movs	r3, #0
 801a66e:	8003      	strh	r3, [r0, #0]
 801a670:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a674:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a678:	1b09      	subs	r1, r1, r4
 801a67a:	428b      	cmp	r3, r1
 801a67c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a680:	bfc8      	it	gt
 801a682:	8081      	strhgt	r1, [r0, #4]
 801a684:	2b00      	cmp	r3, #0
 801a686:	da04      	bge.n	801a692 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801a688:	88c1      	ldrh	r1, [r0, #6]
 801a68a:	440b      	add	r3, r1
 801a68c:	80c3      	strh	r3, [r0, #6]
 801a68e:	2300      	movs	r3, #0
 801a690:	8043      	strh	r3, [r0, #2]
 801a692:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801a696:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801a69a:	1a52      	subs	r2, r2, r1
 801a69c:	4293      	cmp	r3, r2
 801a69e:	bfc8      	it	gt
 801a6a0:	80c2      	strhgt	r2, [r0, #6]
 801a6a2:	bd10      	pop	{r4, pc}

0801a6a4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801a6a4:	b510      	push	{r4, lr}
 801a6a6:	460c      	mov	r4, r1
 801a6a8:	4b0f      	ldr	r3, [pc, #60]	@ (801a6e8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801a6aa:	4620      	mov	r0, r4
 801a6ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a6b0:	4b0e      	ldr	r3, [pc, #56]	@ (801a6ec <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801a6b2:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a6b6:	f7ff ffd1 	bl	801a65c <_ZN8touchgfx4Rect10restrictToEss>
 801a6ba:	4b0d      	ldr	r3, [pc, #52]	@ (801a6f0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801a6bc:	6818      	ldr	r0, [r3, #0]
 801a6be:	b190      	cbz	r0, 801a6e6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801a6c0:	6803      	ldr	r3, [r0, #0]
 801a6c2:	4621      	mov	r1, r4
 801a6c4:	689b      	ldr	r3, [r3, #8]
 801a6c6:	4798      	blx	r3
 801a6c8:	4b0a      	ldr	r3, [pc, #40]	@ (801a6f4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801a6ca:	6818      	ldr	r0, [r3, #0]
 801a6cc:	b118      	cbz	r0, 801a6d6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801a6ce:	6803      	ldr	r3, [r0, #0]
 801a6d0:	4621      	mov	r1, r4
 801a6d2:	689b      	ldr	r3, [r3, #8]
 801a6d4:	4798      	blx	r3
 801a6d6:	4b08      	ldr	r3, [pc, #32]	@ (801a6f8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801a6d8:	4621      	mov	r1, r4
 801a6da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a6de:	6818      	ldr	r0, [r3, #0]
 801a6e0:	6803      	ldr	r3, [r0, #0]
 801a6e2:	69db      	ldr	r3, [r3, #28]
 801a6e4:	4718      	bx	r3
 801a6e6:	bd10      	pop	{r4, pc}
 801a6e8:	2005bd12 	.word	0x2005bd12
 801a6ec:	2005bd10 	.word	0x2005bd10
 801a6f0:	2005bd60 	.word	0x2005bd60
 801a6f4:	2005bd5c 	.word	0x2005bd5c
 801a6f8:	2005bd1c 	.word	0x2005bd1c

0801a6fc <_ZNK8touchgfx4Rect8includesERKS0_>:
 801a6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6fe:	4606      	mov	r6, r0
 801a700:	4608      	mov	r0, r1
 801a702:	460f      	mov	r7, r1
 801a704:	f7fa fcb3 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a708:	b9e8      	cbnz	r0, 801a746 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a70a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801a70e:	f9b6 4000 	ldrsh.w	r4, [r6]
 801a712:	42a5      	cmp	r5, r4
 801a714:	db17      	blt.n	801a746 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a716:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801a71a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801a71e:	429a      	cmp	r2, r3
 801a720:	db11      	blt.n	801a746 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a722:	88b9      	ldrh	r1, [r7, #4]
 801a724:	440d      	add	r5, r1
 801a726:	88b1      	ldrh	r1, [r6, #4]
 801a728:	b22d      	sxth	r5, r5
 801a72a:	440c      	add	r4, r1
 801a72c:	b224      	sxth	r4, r4
 801a72e:	42a5      	cmp	r5, r4
 801a730:	dc09      	bgt.n	801a746 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a732:	88f8      	ldrh	r0, [r7, #6]
 801a734:	4410      	add	r0, r2
 801a736:	88f2      	ldrh	r2, [r6, #6]
 801a738:	b200      	sxth	r0, r0
 801a73a:	4413      	add	r3, r2
 801a73c:	b21b      	sxth	r3, r3
 801a73e:	4298      	cmp	r0, r3
 801a740:	bfcc      	ite	gt
 801a742:	2000      	movgt	r0, #0
 801a744:	2001      	movle	r0, #1
 801a746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a748 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801a748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a74a:	4604      	mov	r4, r0
 801a74c:	4608      	mov	r0, r1
 801a74e:	460d      	mov	r5, r1
 801a750:	f7fa fc8d 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a754:	b978      	cbnz	r0, 801a776 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801a756:	4620      	mov	r0, r4
 801a758:	f7fa fc89 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a75c:	f9b5 6000 	ldrsh.w	r6, [r5]
 801a760:	b150      	cbz	r0, 801a778 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801a762:	8026      	strh	r6, [r4, #0]
 801a764:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801a768:	8063      	strh	r3, [r4, #2]
 801a76a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801a76e:	80a3      	strh	r3, [r4, #4]
 801a770:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a774:	80e3      	strh	r3, [r4, #6]
 801a776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a778:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a77c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a780:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801a784:	42b1      	cmp	r1, r6
 801a786:	460f      	mov	r7, r1
 801a788:	bfa8      	it	ge
 801a78a:	4637      	movge	r7, r6
 801a78c:	4293      	cmp	r3, r2
 801a78e:	4618      	mov	r0, r3
 801a790:	bfa8      	it	ge
 801a792:	4610      	movge	r0, r2
 801a794:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801a798:	88ed      	ldrh	r5, [r5, #6]
 801a79a:	4466      	add	r6, ip
 801a79c:	442a      	add	r2, r5
 801a79e:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801a7a2:	88e5      	ldrh	r5, [r4, #6]
 801a7a4:	4461      	add	r1, ip
 801a7a6:	442b      	add	r3, r5
 801a7a8:	b236      	sxth	r6, r6
 801a7aa:	b209      	sxth	r1, r1
 801a7ac:	b212      	sxth	r2, r2
 801a7ae:	b21b      	sxth	r3, r3
 801a7b0:	428e      	cmp	r6, r1
 801a7b2:	bfac      	ite	ge
 801a7b4:	ebc7 0106 	rsbge	r1, r7, r6
 801a7b8:	ebc7 0101 	rsblt	r1, r7, r1
 801a7bc:	429a      	cmp	r2, r3
 801a7be:	bfac      	ite	ge
 801a7c0:	ebc0 0202 	rsbge	r2, r0, r2
 801a7c4:	ebc0 0203 	rsblt	r2, r0, r3
 801a7c8:	8027      	strh	r7, [r4, #0]
 801a7ca:	8060      	strh	r0, [r4, #2]
 801a7cc:	80a1      	strh	r1, [r4, #4]
 801a7ce:	80e2      	strh	r2, [r4, #6]
 801a7d0:	e7d1      	b.n	801a776 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801a7d4 <_ZN8touchgfx11Application11getInstanceEv>:
 801a7d4:	4b01      	ldr	r3, [pc, #4]	@ (801a7dc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801a7d6:	6818      	ldr	r0, [r3, #0]
 801a7d8:	4770      	bx	lr
 801a7da:	bf00      	nop
 801a7dc:	2005bd70 	.word	0x2005bd70

0801a7e0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801a7e0:	2300      	movs	r3, #0
 801a7e2:	b510      	push	{r4, lr}
 801a7e4:	4604      	mov	r4, r0
 801a7e6:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 801a7ea:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801a7ee:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801a7f2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801a7f6:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801a7fa:	429a      	cmp	r2, r3
 801a7fc:	d90e      	bls.n	801a81c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801a7fe:	18e2      	adds	r2, r4, r3
 801a800:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 801a804:	b122      	cbz	r2, 801a810 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801a806:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801a80a:	6803      	ldr	r3, [r0, #0]
 801a80c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a80e:	4798      	blx	r3
 801a810:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801a814:	3301      	adds	r3, #1
 801a816:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801a81a:	e7ea      	b.n	801a7f2 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801a81c:	bd10      	pop	{r4, pc}

0801a81e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 801a81e:	2200      	movs	r2, #0
 801a820:	b530      	push	{r4, r5, lr}
 801a822:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 801a826:	b293      	uxth	r3, r2
 801a828:	429d      	cmp	r5, r3
 801a82a:	d90e      	bls.n	801a84a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801a82c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 801a830:	428b      	cmp	r3, r1
 801a832:	d10b      	bne.n	801a84c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801a834:	1884      	adds	r4, r0, r2
 801a836:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 801a83a:	b13b      	cbz	r3, 801a84c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801a83c:	3b01      	subs	r3, #1
 801a83e:	b2db      	uxtb	r3, r3
 801a840:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 801a844:	b90b      	cbnz	r3, 801a84a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801a846:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a84a:	bd30      	pop	{r4, r5, pc}
 801a84c:	3201      	adds	r2, #1
 801a84e:	e7ea      	b.n	801a826 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

0801a850 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801a850:	2300      	movs	r3, #0
 801a852:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 801a856:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801a85a:	30a4      	adds	r0, #164	@ 0xa4
 801a85c:	f802 3b01 	strb.w	r3, [r2], #1
 801a860:	4282      	cmp	r2, r0
 801a862:	d1fb      	bne.n	801a85c <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801a864:	4770      	bx	lr
	...

0801a868 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801a868:	b570      	push	{r4, r5, r6, lr}
 801a86a:	4c0b      	ldr	r4, [pc, #44]	@ (801a898 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801a86c:	4605      	mov	r5, r0
 801a86e:	6820      	ldr	r0, [r4, #0]
 801a870:	460e      	mov	r6, r1
 801a872:	b110      	cbz	r0, 801a87a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801a874:	6803      	ldr	r3, [r0, #0]
 801a876:	695b      	ldr	r3, [r3, #20]
 801a878:	4798      	blx	r3
 801a87a:	1d28      	adds	r0, r5, #4
 801a87c:	f7ff ffe8 	bl	801a850 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801a880:	6026      	str	r6, [r4, #0]
 801a882:	6833      	ldr	r3, [r6, #0]
 801a884:	4630      	mov	r0, r6
 801a886:	68db      	ldr	r3, [r3, #12]
 801a888:	4798      	blx	r3
 801a88a:	682b      	ldr	r3, [r5, #0]
 801a88c:	4628      	mov	r0, r5
 801a88e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a894:	4718      	bx	r3
 801a896:	bf00      	nop
 801a898:	2005bd60 	.word	0x2005bd60

0801a89c <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801a89c:	2300      	movs	r3, #0
 801a89e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8a0:	461a      	mov	r2, r3
 801a8a2:	461c      	mov	r4, r3
 801a8a4:	461d      	mov	r5, r3
 801a8a6:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 801a8aa:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801a8ae:	459c      	cmp	ip, r3
 801a8b0:	dd1a      	ble.n	801a8e8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801a8b2:	18c6      	adds	r6, r0, r3
 801a8b4:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 801a8b8:	b16e      	cbz	r6, 801a8d6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801a8ba:	429a      	cmp	r2, r3
 801a8bc:	d008      	beq.n	801a8d0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801a8be:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801a8c2:	fa1f fe82 	uxth.w	lr, r2
 801a8c6:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801a8ca:	1887      	adds	r7, r0, r2
 801a8cc:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 801a8d0:	3201      	adds	r2, #1
 801a8d2:	3301      	adds	r3, #1
 801a8d4:	e7eb      	b.n	801a8ae <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801a8d6:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 801a8da:	4299      	cmp	r1, r3
 801a8dc:	bfa8      	it	ge
 801a8de:	3501      	addge	r5, #1
 801a8e0:	429e      	cmp	r6, r3
 801a8e2:	bfc8      	it	gt
 801a8e4:	3401      	addgt	r4, #1
 801a8e6:	e7f4      	b.n	801a8d2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801a8e8:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 801a8ec:	1b49      	subs	r1, r1, r5
 801a8ee:	1b1b      	subs	r3, r3, r4
 801a8f0:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 801a8f4:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801a8f8:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801a8fc:	4293      	cmp	r3, r2
 801a8fe:	dd03      	ble.n	801a908 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801a900:	3b01      	subs	r3, #1
 801a902:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801a906:	e7f7      	b.n	801a8f8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801a908:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801a90c <_ZN8touchgfx11Application15handleTickEventEv>:
 801a90c:	b570      	push	{r4, r5, r6, lr}
 801a90e:	4d16      	ldr	r5, [pc, #88]	@ (801a968 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801a910:	4604      	mov	r4, r0
 801a912:	6828      	ldr	r0, [r5, #0]
 801a914:	b140      	cbz	r0, 801a928 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a916:	7a03      	ldrb	r3, [r0, #8]
 801a918:	b933      	cbnz	r3, 801a928 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a91a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801a91e:	6803      	ldr	r3, [r0, #0]
 801a920:	689b      	ldr	r3, [r3, #8]
 801a922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a926:	4718      	bx	r3
 801a928:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 801a92c:	4e0f      	ldr	r6, [pc, #60]	@ (801a96c <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801a92e:	b973      	cbnz	r3, 801a94e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a930:	b168      	cbz	r0, 801a94e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a932:	7a03      	ldrb	r3, [r0, #8]
 801a934:	b15b      	cbz	r3, 801a94e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a936:	6830      	ldr	r0, [r6, #0]
 801a938:	b110      	cbz	r0, 801a940 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801a93a:	6803      	ldr	r3, [r0, #0]
 801a93c:	691b      	ldr	r3, [r3, #16]
 801a93e:	4798      	blx	r3
 801a940:	6828      	ldr	r0, [r5, #0]
 801a942:	6803      	ldr	r3, [r0, #0]
 801a944:	68db      	ldr	r3, [r3, #12]
 801a946:	4798      	blx	r3
 801a948:	2301      	movs	r3, #1
 801a94a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801a94e:	3404      	adds	r4, #4
 801a950:	4620      	mov	r0, r4
 801a952:	f7ff ff45 	bl	801a7e0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801a956:	4620      	mov	r0, r4
 801a958:	f7ff ffa0 	bl	801a89c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801a95c:	6830      	ldr	r0, [r6, #0]
 801a95e:	b110      	cbz	r0, 801a966 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801a960:	6803      	ldr	r3, [r0, #0]
 801a962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a964:	e7dd      	b.n	801a922 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801a966:	bd70      	pop	{r4, r5, r6, pc}
 801a968:	2005bd64 	.word	0x2005bd64
 801a96c:	2005bd60 	.word	0x2005bd60

0801a970 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 801a970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a972:	2300      	movs	r3, #0
 801a974:	4604      	mov	r4, r0
 801a976:	460d      	mov	r5, r1
 801a978:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 801a97c:	4618      	mov	r0, r3
 801a97e:	b29a      	uxth	r2, r3
 801a980:	4291      	cmp	r1, r2
 801a982:	d911      	bls.n	801a9a8 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x38>
 801a984:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 801a988:	18e6      	adds	r6, r4, r3
 801a98a:	42af      	cmp	r7, r5
 801a98c:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 801a990:	d105      	bne.n	801a99e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 801a992:	2aff      	cmp	r2, #255	@ 0xff
 801a994:	d002      	beq.n	801a99c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801a996:	3201      	adds	r2, #1
 801a998:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 801a99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a99e:	2a00      	cmp	r2, #0
 801a9a0:	bf08      	it	eq
 801a9a2:	2001      	moveq	r0, #1
 801a9a4:	3301      	adds	r3, #1
 801a9a6:	e7ea      	b.n	801a97e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 801a9a8:	b120      	cbz	r0, 801a9b4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x44>
 801a9aa:	2920      	cmp	r1, #32
 801a9ac:	d102      	bne.n	801a9b4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x44>
 801a9ae:	4620      	mov	r0, r4
 801a9b0:	f7ff ff74 	bl	801a89c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801a9b4:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 801a9b8:	2b1f      	cmp	r3, #31
 801a9ba:	d8ef      	bhi.n	801a99c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801a9bc:	2101      	movs	r1, #1
 801a9be:	18e2      	adds	r2, r4, r3
 801a9c0:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 801a9c4:	185a      	adds	r2, r3, r1
 801a9c6:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 801a9ca:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801a9ce:	e7e5      	b.n	801a99c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

0801a9d0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801a9d0:	4603      	mov	r3, r0
 801a9d2:	2200      	movs	r2, #0
 801a9d4:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801a9d8:	801a      	strh	r2, [r3, #0]
 801a9da:	805a      	strh	r2, [r3, #2]
 801a9dc:	809a      	strh	r2, [r3, #4]
 801a9de:	80da      	strh	r2, [r3, #6]
 801a9e0:	3308      	adds	r3, #8
 801a9e2:	428b      	cmp	r3, r1
 801a9e4:	d1f8      	bne.n	801a9d8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801a9e6:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801a9ea:	4770      	bx	lr

0801a9ec <_ZN8touchgfx11ApplicationC1Ev>:
 801a9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9ee:	4606      	mov	r6, r0
 801a9f0:	4604      	mov	r4, r0
 801a9f2:	2500      	movs	r5, #0
 801a9f4:	4b1b      	ldr	r3, [pc, #108]	@ (801aa64 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801a9f6:	22a8      	movs	r2, #168	@ 0xa8
 801a9f8:	f846 3b04 	str.w	r3, [r6], #4
 801a9fc:	2100      	movs	r1, #0
 801a9fe:	4630      	mov	r0, r6
 801aa00:	f013 fbba 	bl	802e178 <memset>
 801aa04:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 801aa08:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801aa0c:	f7ff ffe0 	bl	801a9d0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801aa10:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801aa14:	f7ff ffdc 	bl	801a9d0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801aa18:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801aa1c:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801aa20:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 801aa24:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 801aa28:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 801aa2c:	490e      	ldr	r1, [pc, #56]	@ (801aa68 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801aa2e:	480f      	ldr	r0, [pc, #60]	@ (801aa6c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801aa30:	f011 fb30 	bl	802c094 <CRC_Lock>
 801aa34:	4f0e      	ldr	r7, [pc, #56]	@ (801aa70 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801aa36:	4b0f      	ldr	r3, [pc, #60]	@ (801aa74 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801aa38:	b158      	cbz	r0, 801aa52 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801aa3a:	801d      	strh	r5, [r3, #0]
 801aa3c:	2300      	movs	r3, #0
 801aa3e:	4a0e      	ldr	r2, [pc, #56]	@ (801aa78 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801aa40:	4630      	mov	r0, r6
 801aa42:	6013      	str	r3, [r2, #0]
 801aa44:	4a0d      	ldr	r2, [pc, #52]	@ (801aa7c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801aa46:	603b      	str	r3, [r7, #0]
 801aa48:	6013      	str	r3, [r2, #0]
 801aa4a:	f7ff ff01 	bl	801a850 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801aa4e:	4620      	mov	r0, r4
 801aa50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801aa56:	2002      	movs	r0, #2
 801aa58:	801a      	strh	r2, [r3, #0]
 801aa5a:	6038      	str	r0, [r7, #0]
 801aa5c:	f001 ff30 	bl	801c8c0 <_ZN8touchgfx6Screen4drawEv>
 801aa60:	e7ec      	b.n	801aa3c <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801aa62:	bf00      	nop
 801aa64:	08030f88 	.word	0x08030f88
 801aa68:	b5e8b5cd 	.word	0xb5e8b5cd
 801aa6c:	f407a5c2 	.word	0xf407a5c2
 801aa70:	2005bd60 	.word	0x2005bd60
 801aa74:	2000001c 	.word	0x2000001c
 801aa78:	2005bd70 	.word	0x2005bd70
 801aa7c:	2005bd64 	.word	0x2005bd64

0801aa80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801aa80:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801aa84:	b510      	push	{r4, lr}
 801aa86:	3b01      	subs	r3, #1
 801aa88:	b29b      	uxth	r3, r3
 801aa8a:	428b      	cmp	r3, r1
 801aa8c:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801aa90:	d908      	bls.n	801aaa4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801aa92:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801aa96:	681a      	ldr	r2, [r3, #0]
 801aa98:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801aa9c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801aaa0:	685a      	ldr	r2, [r3, #4]
 801aaa2:	6062      	str	r2, [r4, #4]
 801aaa4:	bd10      	pop	{r4, pc}
	...

0801aaa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aaac:	4b92      	ldr	r3, [pc, #584]	@ (801acf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x250>)
 801aaae:	b08f      	sub	sp, #60	@ 0x3c
 801aab0:	ac0a      	add	r4, sp, #40	@ 0x28
 801aab2:	e884 0006 	stmia.w	r4, {r1, r2}
 801aab6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aaba:	4b90      	ldr	r3, [pc, #576]	@ (801acfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x254>)
 801aabc:	4683      	mov	fp, r0
 801aabe:	f9b3 1000 	ldrsh.w	r1, [r3]
 801aac2:	4620      	mov	r0, r4
 801aac4:	f7ff fdca 	bl	801a65c <_ZN8touchgfx4Rect10restrictToEss>
 801aac8:	4620      	mov	r0, r4
 801aaca:	f7fa fad0 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 801aace:	2800      	cmp	r0, #0
 801aad0:	d170      	bne.n	801abb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 801aad2:	4b8b      	ldr	r3, [pc, #556]	@ (801ad00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801aada:	2b02      	cmp	r3, #2
 801aadc:	d06a      	beq.n	801abb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 801aade:	9403      	str	r4, [sp, #12]
 801aae0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801aae4:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801aae8:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801aaec:	35a4      	adds	r5, #164	@ 0xa4
 801aaee:	9301      	str	r3, [sp, #4]
 801aaf0:	b15c      	cbz	r4, 801ab0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801aaf2:	4629      	mov	r1, r5
 801aaf4:	9803      	ldr	r0, [sp, #12]
 801aaf6:	f7ff fe01 	bl	801a6fc <_ZNK8touchgfx4Rect8includesERKS0_>
 801aafa:	3c01      	subs	r4, #1
 801aafc:	b118      	cbz	r0, 801ab06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 801aafe:	b2a1      	uxth	r1, r4
 801ab00:	9801      	ldr	r0, [sp, #4]
 801ab02:	f7ff ffbd 	bl	801aa80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ab06:	3d08      	subs	r5, #8
 801ab08:	e7f2      	b.n	801aaf0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801ab0a:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801ab0e:	f10a 33ff 	add.w	r3, sl, #4294967295
 801ab12:	9302      	str	r3, [sp, #8]
 801ab14:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801ab18:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 801ab1c:	f8cd a010 	str.w	sl, [sp, #16]
 801ab20:	9306      	str	r3, [sp, #24]
 801ab22:	445c      	add	r4, fp
 801ab24:	2500      	movs	r5, #0
 801ab26:	4626      	mov	r6, r4
 801ab28:	462f      	mov	r7, r5
 801ab2a:	f8cd a014 	str.w	sl, [sp, #20]
 801ab2e:	9b05      	ldr	r3, [sp, #20]
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	d073      	beq.n	801ac1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x174>
 801ab34:	9903      	ldr	r1, [sp, #12]
 801ab36:	4630      	mov	r0, r6
 801ab38:	f7ff fd6e 	bl	801a618 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ab3c:	b350      	cbz	r0, 801ab94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 801ab3e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801ab42:	f9b6 c000 	ldrsh.w	ip, [r6]
 801ab46:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 801ab4a:	45e6      	cmp	lr, ip
 801ab4c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801ab50:	db33      	blt.n	801abba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 801ab52:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801ab56:	88b3      	ldrh	r3, [r6, #4]
 801ab58:	4472      	add	r2, lr
 801ab5a:	4463      	add	r3, ip
 801ab5c:	b212      	sxth	r2, r2
 801ab5e:	b21b      	sxth	r3, r3
 801ab60:	429a      	cmp	r2, r3
 801ab62:	dc2a      	bgt.n	801abba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 801ab64:	88f3      	ldrh	r3, [r6, #6]
 801ab66:	fa1f f289 	uxth.w	r2, r9
 801ab6a:	4413      	add	r3, r2
 801ab6c:	b29b      	uxth	r3, r3
 801ab6e:	45c8      	cmp	r8, r9
 801ab70:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801ab74:	fa1f fc88 	uxth.w	ip, r8
 801ab78:	fa0f fe83 	sxth.w	lr, r3
 801ab7c:	db0f      	blt.n	801ab9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf6>
 801ab7e:	eba3 030c 	sub.w	r3, r3, ip
 801ab82:	1ac9      	subs	r1, r1, r3
 801ab84:	b209      	sxth	r1, r1
 801ab86:	2900      	cmp	r1, #0
 801ab88:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801ab8c:	dd12      	ble.n	801abb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 801ab8e:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801ab92:	4605      	mov	r5, r0
 801ab94:	9b05      	ldr	r3, [sp, #20]
 801ab96:	3e08      	subs	r6, #8
 801ab98:	3b01      	subs	r3, #1
 801ab9a:	9305      	str	r3, [sp, #20]
 801ab9c:	e7c7      	b.n	801ab2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x86>
 801ab9e:	4461      	add	r1, ip
 801aba0:	b209      	sxth	r1, r1
 801aba2:	4571      	cmp	r1, lr
 801aba4:	dc38      	bgt.n	801ac18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 801aba6:	eba2 020c 	sub.w	r2, r2, ip
 801abaa:	b212      	sxth	r2, r2
 801abac:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801abb0:	2a00      	cmp	r2, #0
 801abb2:	dcee      	bgt.n	801ab92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801abb4:	b00f      	add	sp, #60	@ 0x3c
 801abb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abba:	45c8      	cmp	r8, r9
 801abbc:	db2c      	blt.n	801ac18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 801abbe:	88f3      	ldrh	r3, [r6, #6]
 801abc0:	4499      	add	r9, r3
 801abc2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801abc6:	fa0f f989 	sxth.w	r9, r9
 801abca:	4498      	add	r8, r3
 801abcc:	fa0f f888 	sxth.w	r8, r8
 801abd0:	45c1      	cmp	r9, r8
 801abd2:	db21      	blt.n	801ac18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 801abd4:	88b3      	ldrh	r3, [r6, #4]
 801abd6:	fa1f f28c 	uxth.w	r2, ip
 801abda:	4413      	add	r3, r2
 801abdc:	b29b      	uxth	r3, r3
 801abde:	45e6      	cmp	lr, ip
 801abe0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801abe4:	fa1f f88e 	uxth.w	r8, lr
 801abe8:	fa0f f983 	sxth.w	r9, r3
 801abec:	db0a      	blt.n	801ac04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15c>
 801abee:	eba3 0308 	sub.w	r3, r3, r8
 801abf2:	1ac9      	subs	r1, r1, r3
 801abf4:	b209      	sxth	r1, r1
 801abf6:	2900      	cmp	r1, #0
 801abf8:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 801abfc:	ddda      	ble.n	801abb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 801abfe:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801ac02:	e7c6      	b.n	801ab92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801ac04:	4441      	add	r1, r8
 801ac06:	b209      	sxth	r1, r1
 801ac08:	4549      	cmp	r1, r9
 801ac0a:	dc05      	bgt.n	801ac18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 801ac0c:	eba2 0208 	sub.w	r2, r2, r8
 801ac10:	b212      	sxth	r2, r2
 801ac12:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801ac16:	e7cb      	b.n	801abb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x108>
 801ac18:	4607      	mov	r7, r0
 801ac1a:	e7bb      	b.n	801ab94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 801ac1c:	2d00      	cmp	r5, #0
 801ac1e:	d181      	bne.n	801ab24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7c>
 801ac20:	2f00      	cmp	r7, #0
 801ac22:	f000 81e0 	beq.w	801afe6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 801ac26:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 801ac2a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 801ac2e:	b2b3      	uxth	r3, r6
 801ac30:	9305      	str	r3, [sp, #20]
 801ac32:	9a05      	ldr	r2, [sp, #20]
 801ac34:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801ac38:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 801ac3c:	4413      	add	r3, r2
 801ac3e:	b2ba      	uxth	r2, r7
 801ac40:	4492      	add	sl, r2
 801ac42:	b29b      	uxth	r3, r3
 801ac44:	fa1f fa8a 	uxth.w	sl, sl
 801ac48:	fa0f f883 	sxth.w	r8, r3
 801ac4c:	fa0f f98a 	sxth.w	r9, sl
 801ac50:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801ac54:	9b04      	ldr	r3, [sp, #16]
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	d054      	beq.n	801ad04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>
 801ac5a:	9903      	ldr	r1, [sp, #12]
 801ac5c:	4620      	mov	r0, r4
 801ac5e:	f7ff fcdb 	bl	801a618 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ac62:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ac66:	b1c0      	cbz	r0, 801ac9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801ac68:	f9b4 e000 	ldrsh.w	lr, [r4]
 801ac6c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801ac70:	4576      	cmp	r6, lr
 801ac72:	dc22      	bgt.n	801acba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 801ac74:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801ac78:	44f4      	add	ip, lr
 801ac7a:	fa0f fc8c 	sxth.w	ip, ip
 801ac7e:	45e0      	cmp	r8, ip
 801ac80:	db1b      	blt.n	801acba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 801ac82:	428f      	cmp	r7, r1
 801ac84:	fa1f fc81 	uxth.w	ip, r1
 801ac88:	88e1      	ldrh	r1, [r4, #6]
 801ac8a:	dc0d      	bgt.n	801aca8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x200>
 801ac8c:	ebaa 0c0c 	sub.w	ip, sl, ip
 801ac90:	eba1 010c 	sub.w	r1, r1, ip
 801ac94:	f8a4 9002 	strh.w	r9, [r4, #2]
 801ac98:	80e1      	strh	r1, [r4, #6]
 801ac9a:	4628      	mov	r0, r5
 801ac9c:	9904      	ldr	r1, [sp, #16]
 801ac9e:	3c08      	subs	r4, #8
 801aca0:	3901      	subs	r1, #1
 801aca2:	9104      	str	r1, [sp, #16]
 801aca4:	4605      	mov	r5, r0
 801aca6:	e7d3      	b.n	801ac50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a8>
 801aca8:	4461      	add	r1, ip
 801acaa:	b209      	sxth	r1, r1
 801acac:	4549      	cmp	r1, r9
 801acae:	dcf5      	bgt.n	801ac9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801acb0:	eba2 0c0c 	sub.w	ip, r2, ip
 801acb4:	f8a4 c006 	strh.w	ip, [r4, #6]
 801acb8:	e7ef      	b.n	801ac9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801acba:	428f      	cmp	r7, r1
 801acbc:	dcee      	bgt.n	801ac9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801acbe:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801acc2:	4461      	add	r1, ip
 801acc4:	b209      	sxth	r1, r1
 801acc6:	4589      	cmp	r9, r1
 801acc8:	dbe8      	blt.n	801ac9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801acca:	4576      	cmp	r6, lr
 801accc:	fa1f fc8e 	uxth.w	ip, lr
 801acd0:	88a1      	ldrh	r1, [r4, #4]
 801acd2:	dc07      	bgt.n	801ace4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x23c>
 801acd4:	eba3 0c0c 	sub.w	ip, r3, ip
 801acd8:	eba1 010c 	sub.w	r1, r1, ip
 801acdc:	f8a4 8000 	strh.w	r8, [r4]
 801ace0:	80a1      	strh	r1, [r4, #4]
 801ace2:	e7da      	b.n	801ac9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801ace4:	4461      	add	r1, ip
 801ace6:	b209      	sxth	r1, r1
 801ace8:	4588      	cmp	r8, r1
 801acea:	dbd7      	blt.n	801ac9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801acec:	9905      	ldr	r1, [sp, #20]
 801acee:	eba1 0c0c 	sub.w	ip, r1, ip
 801acf2:	f8a4 c004 	strh.w	ip, [r4, #4]
 801acf6:	e7d0      	b.n	801ac9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801acf8:	2005bd12 	.word	0x2005bd12
 801acfc:	2005bd10 	.word	0x2005bd10
 801ad00:	2005bd1c 	.word	0x2005bd1c
 801ad04:	2d00      	cmp	r5, #0
 801ad06:	f000 816e 	beq.w	801afe6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 801ad0a:	9b06      	ldr	r3, [sp, #24]
 801ad0c:	445b      	add	r3, fp
 801ad0e:	461c      	mov	r4, r3
 801ad10:	9b02      	ldr	r3, [sp, #8]
 801ad12:	3301      	adds	r3, #1
 801ad14:	f000 8167 	beq.w	801afe6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 801ad18:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 801ad1c:	4629      	mov	r1, r5
 801ad1e:	9803      	ldr	r0, [sp, #12]
 801ad20:	f7ff fcec 	bl	801a6fc <_ZNK8touchgfx4Rect8includesERKS0_>
 801ad24:	b120      	cbz	r0, 801ad30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x288>
 801ad26:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801ad2a:	9801      	ldr	r0, [sp, #4]
 801ad2c:	f7ff fea8 	bl	801aa80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ad30:	9903      	ldr	r1, [sp, #12]
 801ad32:	4628      	mov	r0, r5
 801ad34:	f7ff fc70 	bl	801a618 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ad38:	2800      	cmp	r0, #0
 801ad3a:	f000 809c 	beq.w	801ae76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 801ad3e:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801ad42:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801ad46:	fa1f f189 	uxth.w	r1, r9
 801ad4a:	eb01 0c03 	add.w	ip, r1, r3
 801ad4e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801ad52:	fa1f fa8c 	uxth.w	sl, ip
 801ad56:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801ad5a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ad5c:	b283      	uxth	r3, r0
 801ad5e:	eb03 050c 	add.w	r5, r3, ip
 801ad62:	b2ad      	uxth	r5, r5
 801ad64:	9505      	str	r5, [sp, #20]
 801ad66:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801ad6a:	4548      	cmp	r0, r9
 801ad6c:	9504      	str	r5, [sp, #16]
 801ad6e:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 801ad72:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 801ad76:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 801ad7a:	f340 8099 	ble.w	801aeb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 801ad7e:	1a5b      	subs	r3, r3, r1
 801ad80:	b29b      	uxth	r3, r3
 801ad82:	4596      	cmp	lr, r2
 801ad84:	fa0f f08a 	sxth.w	r0, sl
 801ad88:	b21e      	sxth	r6, r3
 801ad8a:	dd2e      	ble.n	801adea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x342>
 801ad8c:	9f02      	ldr	r7, [sp, #8]
 801ad8e:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 801ad92:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801ad96:	9f04      	ldr	r7, [sp, #16]
 801ad98:	fa1f fe8e 	uxth.w	lr, lr
 801ad9c:	1a3f      	subs	r7, r7, r0
 801ad9e:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 801ada2:	b292      	uxth	r2, r2
 801ada4:	ebae 0102 	sub.w	r1, lr, r2
 801ada8:	44a6      	add	lr, r4
 801adaa:	4402      	add	r2, r0
 801adac:	b289      	uxth	r1, r1
 801adae:	fa0f fe8e 	sxth.w	lr, lr
 801adb2:	b212      	sxth	r2, r2
 801adb4:	b20d      	sxth	r5, r1
 801adb6:	ebae 0202 	sub.w	r2, lr, r2
 801adba:	436f      	muls	r7, r5
 801adbc:	4372      	muls	r2, r6
 801adbe:	4297      	cmp	r7, r2
 801adc0:	db09      	blt.n	801add6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32e>
 801adc2:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 801adc6:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 801adca:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801adce:	449c      	add	ip, r3
 801add0:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801add4:	e684      	b.n	801aae0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801add6:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 801adda:	4421      	add	r1, r4
 801addc:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 801ade0:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801ade4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801ade8:	e67a      	b.n	801aae0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801adea:	9f04      	ldr	r7, [sp, #16]
 801adec:	42b8      	cmp	r0, r7
 801adee:	da27      	bge.n	801ae40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x398>
 801adf0:	9902      	ldr	r1, [sp, #8]
 801adf2:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 801adf6:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801adfa:	eb05 010e 	add.w	r1, r5, lr
 801adfe:	fa1f f881 	uxth.w	r8, r1
 801ae02:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 801ae06:	fa0f f988 	sxth.w	r9, r8
 801ae0a:	4411      	add	r1, r2
 801ae0c:	eba1 0108 	sub.w	r1, r1, r8
 801ae10:	b289      	uxth	r1, r1
 801ae12:	fa0f f881 	sxth.w	r8, r1
 801ae16:	eba2 020e 	sub.w	r2, r2, lr
 801ae1a:	1a3f      	subs	r7, r7, r0
 801ae1c:	4372      	muls	r2, r6
 801ae1e:	fb08 f707 	mul.w	r7, r8, r7
 801ae22:	42ba      	cmp	r2, r7
 801ae24:	dc06      	bgt.n	801ae34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38c>
 801ae26:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 801ae2a:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 801ae2e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801ae32:	e7ca      	b.n	801adca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801ae34:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 801ae38:	4429      	add	r1, r5
 801ae3a:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801ae3e:	e64f      	b.n	801aae0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801ae40:	9805      	ldr	r0, [sp, #20]
 801ae42:	2d06      	cmp	r5, #6
 801ae44:	ebaa 0000 	sub.w	r0, sl, r0
 801ae48:	b280      	uxth	r0, r0
 801ae4a:	fa0f fe80 	sxth.w	lr, r0
 801ae4e:	d817      	bhi.n	801ae80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d8>
 801ae50:	9b04      	ldr	r3, [sp, #16]
 801ae52:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801ae56:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801ae5a:	1c6b      	adds	r3, r5, #1
 801ae5c:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 801ae60:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801ae64:	9b01      	ldr	r3, [sp, #4]
 801ae66:	9801      	ldr	r0, [sp, #4]
 801ae68:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ae6c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801ae70:	805a      	strh	r2, [r3, #2]
 801ae72:	809e      	strh	r6, [r3, #4]
 801ae74:	80d9      	strh	r1, [r3, #6]
 801ae76:	9b02      	ldr	r3, [sp, #8]
 801ae78:	3c08      	subs	r4, #8
 801ae7a:	3b01      	subs	r3, #1
 801ae7c:	9302      	str	r3, [sp, #8]
 801ae7e:	e747      	b.n	801ad10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x268>
 801ae80:	9a02      	ldr	r2, [sp, #8]
 801ae82:	45b6      	cmp	lr, r6
 801ae84:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801ae88:	db0d      	blt.n	801aea6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fe>
 801ae8a:	449c      	add	ip, r3
 801ae8c:	fa1f fc8c 	uxth.w	ip, ip
 801ae90:	445a      	add	r2, fp
 801ae92:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801ae96:	448c      	add	ip, r1
 801ae98:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801ae9c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801aea0:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 801aea4:	e61c      	b.n	801aae0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801aea6:	445a      	add	r2, fp
 801aea8:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 801aeac:	4484      	add	ip, r0
 801aeae:	e78f      	b.n	801add0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 801aeb0:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 801aeb4:	fa1f f18e 	uxth.w	r1, lr
 801aeb8:	eb01 0806 	add.w	r8, r1, r6
 801aebc:	b293      	uxth	r3, r2
 801aebe:	fa1f f888 	uxth.w	r8, r8
 801aec2:	9306      	str	r3, [sp, #24]
 801aec4:	fa0f f388 	sxth.w	r3, r8
 801aec8:	9307      	str	r3, [sp, #28]
 801aeca:	9f06      	ldr	r7, [sp, #24]
 801aecc:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801aed0:	4596      	cmp	lr, r2
 801aed2:	443b      	add	r3, r7
 801aed4:	b29b      	uxth	r3, r3
 801aed6:	9308      	str	r3, [sp, #32]
 801aed8:	da24      	bge.n	801af24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 801aeda:	9905      	ldr	r1, [sp, #20]
 801aedc:	eba3 0308 	sub.w	r3, r3, r8
 801aee0:	ebaa 0401 	sub.w	r4, sl, r1
 801aee4:	b2a4      	uxth	r4, r4
 801aee6:	b29b      	uxth	r3, r3
 801aee8:	b225      	sxth	r5, r4
 801aeea:	b219      	sxth	r1, r3
 801aeec:	eba2 020e 	sub.w	r2, r2, lr
 801aef0:	eba9 0000 	sub.w	r0, r9, r0
 801aef4:	436a      	muls	r2, r5
 801aef6:	4348      	muls	r0, r1
 801aef8:	4282      	cmp	r2, r0
 801aefa:	9a02      	ldr	r2, [sp, #8]
 801aefc:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801af00:	445a      	add	r2, fp
 801af02:	dc06      	bgt.n	801af12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801af04:	9b07      	ldr	r3, [sp, #28]
 801af06:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 801af0a:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 801af0e:	44a4      	add	ip, r4
 801af10:	e75e      	b.n	801add0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 801af12:	9904      	ldr	r1, [sp, #16]
 801af14:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 801af18:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 801af1c:	4433      	add	r3, r6
 801af1e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801af22:	e5dd      	b.n	801aae0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801af24:	9f06      	ldr	r7, [sp, #24]
 801af26:	9b04      	ldr	r3, [sp, #16]
 801af28:	1bc9      	subs	r1, r1, r7
 801af2a:	fa0f f78a 	sxth.w	r7, sl
 801af2e:	b289      	uxth	r1, r1
 801af30:	429f      	cmp	r7, r3
 801af32:	fa0f fe81 	sxth.w	lr, r1
 801af36:	dd24      	ble.n	801af82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4da>
 801af38:	9a05      	ldr	r2, [sp, #20]
 801af3a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801af3e:	ebaa 0202 	sub.w	r2, sl, r2
 801af42:	9d07      	ldr	r5, [sp, #28]
 801af44:	b292      	uxth	r2, r2
 801af46:	eba5 0a03 	sub.w	sl, r5, r3
 801af4a:	b214      	sxth	r4, r2
 801af4c:	eba9 0000 	sub.w	r0, r9, r0
 801af50:	fb0e f000 	mul.w	r0, lr, r0
 801af54:	fb04 fa0a 	mul.w	sl, r4, sl
 801af58:	9b02      	ldr	r3, [sp, #8]
 801af5a:	4550      	cmp	r0, sl
 801af5c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801af60:	445b      	add	r3, fp
 801af62:	db03      	blt.n	801af6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801af64:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 801af68:	4494      	add	ip, r2
 801af6a:	e731      	b.n	801add0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 801af6c:	9a04      	ldr	r2, [sp, #16]
 801af6e:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801af72:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801af76:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 801af7a:	4431      	add	r1, r6
 801af7c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801af80:	e75b      	b.n	801ae3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x392>
 801af82:	9b08      	ldr	r3, [sp, #32]
 801af84:	2d06      	cmp	r5, #6
 801af86:	eba3 0308 	sub.w	r3, r3, r8
 801af8a:	b29b      	uxth	r3, r3
 801af8c:	b218      	sxth	r0, r3
 801af8e:	d813      	bhi.n	801afb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x510>
 801af90:	9b07      	ldr	r3, [sp, #28]
 801af92:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 801af96:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 801af9a:	1c6b      	adds	r3, r5, #1
 801af9c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801afa0:	9b01      	ldr	r3, [sp, #4]
 801afa2:	9901      	ldr	r1, [sp, #4]
 801afa4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801afa8:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801afac:	805a      	strh	r2, [r3, #2]
 801afae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801afb0:	f8a3 e006 	strh.w	lr, [r3, #6]
 801afb4:	809a      	strh	r2, [r3, #4]
 801afb6:	e75e      	b.n	801ae76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 801afb8:	9c02      	ldr	r4, [sp, #8]
 801afba:	4570      	cmp	r0, lr
 801afbc:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801afc0:	db0d      	blt.n	801afde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x536>
 801afc2:	4431      	add	r1, r6
 801afc4:	9b06      	ldr	r3, [sp, #24]
 801afc6:	b289      	uxth	r1, r1
 801afc8:	445c      	add	r4, fp
 801afca:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801afce:	4419      	add	r1, r3
 801afd0:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801afd4:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 801afd8:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801afdc:	e580      	b.n	801aae0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801afde:	445c      	add	r4, fp
 801afe0:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801afe4:	e79a      	b.n	801af1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 801afe6:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 801afea:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801afee:	1e65      	subs	r5, r4, #1
 801aff0:	b2ad      	uxth	r5, r5
 801aff2:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801aff6:	42b5      	cmp	r5, r6
 801aff8:	d044      	beq.n	801b084 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 801affa:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801affe:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801b002:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801b006:	4282      	cmp	r2, r0
 801b008:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 801b00c:	d11f      	bne.n	801b04e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a6>
 801b00e:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801b012:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801b016:	459c      	cmp	ip, r3
 801b018:	d119      	bne.n	801b04e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a6>
 801b01a:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 801b01e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801b022:	19d8      	adds	r0, r3, r7
 801b024:	b200      	sxth	r0, r0
 801b026:	4288      	cmp	r0, r1
 801b028:	d109      	bne.n	801b03e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 801b02a:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 801b02e:	4413      	add	r3, r2
 801b030:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801b034:	4629      	mov	r1, r5
 801b036:	9801      	ldr	r0, [sp, #4]
 801b038:	f7ff fd22 	bl	801aa80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b03c:	e003      	b.n	801b046 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59e>
 801b03e:	4411      	add	r1, r2
 801b040:	b209      	sxth	r1, r1
 801b042:	42b9      	cmp	r1, r7
 801b044:	d0f3      	beq.n	801b02e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 801b046:	3d01      	subs	r5, #1
 801b048:	b2ad      	uxth	r5, r5
 801b04a:	3c08      	subs	r4, #8
 801b04c:	e7d3      	b.n	801aff6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 801b04e:	42b9      	cmp	r1, r7
 801b050:	d1f9      	bne.n	801b046 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59e>
 801b052:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 801b056:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801b05a:	4299      	cmp	r1, r3
 801b05c:	d1f3      	bne.n	801b046 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59e>
 801b05e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801b062:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801b066:	181f      	adds	r7, r3, r0
 801b068:	b23f      	sxth	r7, r7
 801b06a:	42ba      	cmp	r2, r7
 801b06c:	d105      	bne.n	801b07a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5d2>
 801b06e:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801b072:	440b      	add	r3, r1
 801b074:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801b078:	e7dc      	b.n	801b034 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b07a:	440a      	add	r2, r1
 801b07c:	b212      	sxth	r2, r2
 801b07e:	4290      	cmp	r0, r2
 801b080:	d1e1      	bne.n	801b046 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59e>
 801b082:	e7f6      	b.n	801b072 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801b084:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801b088:	2e07      	cmp	r6, #7
 801b08a:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801b08e:	d812      	bhi.n	801b0b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60e>
 801b090:	1c75      	adds	r5, r6, #1
 801b092:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 801b096:	9d01      	ldr	r5, [sp, #4]
 801b098:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801b09c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801b0a0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801b0a4:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801b0a8:	442c      	add	r4, r5
 801b0aa:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801b0ae:	8061      	strh	r1, [r4, #2]
 801b0b0:	80a2      	strh	r2, [r4, #4]
 801b0b2:	80e3      	strh	r3, [r4, #6]
 801b0b4:	e57e      	b.n	801abb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 801b0b6:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801b0ba:	f04f 37ff 	mov.w	r7, #4294967295
 801b0be:	2500      	movs	r5, #0
 801b0c0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801b0c4:	3e01      	subs	r6, #1
 801b0c6:	445c      	add	r4, fp
 801b0c8:	9305      	str	r3, [sp, #20]
 801b0ca:	1e72      	subs	r2, r6, #1
 801b0cc:	4691      	mov	r9, r2
 801b0ce:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801b0d2:	9302      	str	r3, [sp, #8]
 801b0d4:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801b0d8:	9304      	str	r3, [sp, #16]
 801b0da:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 801b0de:	f1b9 3fff 	cmp.w	r9, #4294967295
 801b0e2:	bf16      	itet	ne
 801b0e4:	9905      	ldrne	r1, [sp, #20]
 801b0e6:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801b0ea:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801b0ee:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801b0f2:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801b0f6:	6818      	ldr	r0, [r3, #0]
 801b0f8:	fb18 f801 	smulbb	r8, r8, r1
 801b0fc:	6859      	ldr	r1, [r3, #4]
 801b0fe:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801b102:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b106:	4671      	mov	r1, lr
 801b108:	a80c      	add	r0, sp, #48	@ 0x30
 801b10a:	9207      	str	r2, [sp, #28]
 801b10c:	9306      	str	r3, [sp, #24]
 801b10e:	f7ff fb1b 	bl	801a748 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b112:	f04f 0c08 	mov.w	ip, #8
 801b116:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801b11a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801b11e:	9b04      	ldr	r3, [sp, #16]
 801b120:	9a02      	ldr	r2, [sp, #8]
 801b122:	fb10 f001 	smulbb	r0, r0, r1
 801b126:	fb02 8803 	mla	r8, r2, r3, r8
 801b12a:	eba0 0108 	sub.w	r1, r0, r8
 801b12e:	fb90 f0fc 	sdiv	r0, r0, ip
 801b132:	4288      	cmp	r0, r1
 801b134:	dc20      	bgt.n	801b178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d0>
 801b136:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801b13a:	4551      	cmp	r1, sl
 801b13c:	da03      	bge.n	801b146 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x69e>
 801b13e:	b1d9      	cbz	r1, 801b178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d0>
 801b140:	468a      	mov	sl, r1
 801b142:	464f      	mov	r7, r9
 801b144:	4635      	mov	r5, r6
 801b146:	f109 39ff 	add.w	r9, r9, #4294967295
 801b14a:	f119 0f02 	cmn.w	r9, #2
 801b14e:	d1c6      	bne.n	801b0de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x636>
 801b150:	4616      	mov	r6, r2
 801b152:	3201      	adds	r2, #1
 801b154:	f1a4 0408 	sub.w	r4, r4, #8
 801b158:	d1b7      	bne.n	801b0ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 801b15a:	9b01      	ldr	r3, [sp, #4]
 801b15c:	b2ac      	uxth	r4, r5
 801b15e:	00ed      	lsls	r5, r5, #3
 801b160:	1958      	adds	r0, r3, r5
 801b162:	1c7b      	adds	r3, r7, #1
 801b164:	d10b      	bne.n	801b17e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d6>
 801b166:	4601      	mov	r1, r0
 801b168:	9803      	ldr	r0, [sp, #12]
 801b16a:	f7ff faed 	bl	801a748 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b16e:	4621      	mov	r1, r4
 801b170:	9801      	ldr	r0, [sp, #4]
 801b172:	f7ff fc85 	bl	801aa80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b176:	e4b3      	b.n	801aae0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801b178:	464f      	mov	r7, r9
 801b17a:	4635      	mov	r5, r6
 801b17c:	e7ed      	b.n	801b15a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b2>
 801b17e:	9b01      	ldr	r3, [sp, #4]
 801b180:	00ff      	lsls	r7, r7, #3
 801b182:	19d9      	adds	r1, r3, r7
 801b184:	f7ff fae0 	bl	801a748 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b188:	9b03      	ldr	r3, [sp, #12]
 801b18a:	445f      	add	r7, fp
 801b18c:	cb03      	ldmia	r3!, {r0, r1}
 801b18e:	445d      	add	r5, fp
 801b190:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801b194:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801b198:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801b19c:	9b03      	ldr	r3, [sp, #12]
 801b19e:	6869      	ldr	r1, [r5, #4]
 801b1a0:	c303      	stmia	r3!, {r0, r1}
 801b1a2:	e7e4      	b.n	801b16e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>

0801b1a4 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801b1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1a8:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 801b1ac:	b0a1      	sub	sp, #132	@ 0x84
 801b1ae:	4604      	mov	r4, r0
 801b1b0:	4630      	mov	r0, r6
 801b1b2:	f7f9 ff5c 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b1b6:	4605      	mov	r5, r0
 801b1b8:	b948      	cbnz	r0, 801b1ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801b1ba:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b1be:	6823      	ldr	r3, [r4, #0]
 801b1c0:	4620      	mov	r0, r4
 801b1c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b1c4:	4798      	blx	r3
 801b1c6:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801b1ca:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801b1ce:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d149      	bne.n	801b26a <_ZN8touchgfx11Application15drawCachedAreasEv+0xc6>
 801b1d6:	4bb2      	ldr	r3, [pc, #712]	@ (801b4a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 801b1d8:	681b      	ldr	r3, [r3, #0]
 801b1da:	f893 7048 	ldrb.w	r7, [r3, #72]	@ 0x48
 801b1de:	1ebb      	subs	r3, r7, #2
 801b1e0:	425f      	negs	r7, r3
 801b1e2:	415f      	adcs	r7, r3
 801b1e4:	4baf      	ldr	r3, [pc, #700]	@ (801b4a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x300>)
 801b1e6:	681b      	ldr	r3, [r3, #0]
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	d040      	beq.n	801b26e <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 801b1ec:	4dae      	ldr	r5, [pc, #696]	@ (801b4a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x304>)
 801b1ee:	4628      	mov	r0, r5
 801b1f0:	f7f9 ff3d 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b1f4:	4606      	mov	r6, r0
 801b1f6:	2800      	cmp	r0, #0
 801b1f8:	d139      	bne.n	801b26e <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 801b1fa:	4628      	mov	r0, r5
 801b1fc:	f7ff f942 	bl	801a484 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b200:	6823      	ldr	r3, [r4, #0]
 801b202:	6829      	ldr	r1, [r5, #0]
 801b204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b206:	686a      	ldr	r2, [r5, #4]
 801b208:	4620      	mov	r0, r4
 801b20a:	4798      	blx	r3
 801b20c:	802e      	strh	r6, [r5, #0]
 801b20e:	806e      	strh	r6, [r5, #2]
 801b210:	80ae      	strh	r6, [r5, #4]
 801b212:	80ee      	strh	r6, [r5, #6]
 801b214:	af0f      	add	r7, sp, #60	@ 0x3c
 801b216:	4ea5      	ldr	r6, [pc, #660]	@ (801b4ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x308>)
 801b218:	4638      	mov	r0, r7
 801b21a:	f7ff fbd9 	bl	801a9d0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b21e:	8835      	ldrh	r5, [r6, #0]
 801b220:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	@ 0xec
 801b224:	462b      	mov	r3, r5
 801b226:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801b22a:	4563      	cmp	r3, ip
 801b22c:	d224      	bcs.n	801b278 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 801b22e:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 801b232:	2907      	cmp	r1, #7
 801b234:	d816      	bhi.n	801b264 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801b236:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801b23a:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801b23e:	f9b2 8004 	ldrsh.w	r8, [r2, #4]
 801b242:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 801b246:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801b24a:	1c4a      	adds	r2, r1, #1
 801b24c:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
 801b250:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
 801b254:	f827 9031 	strh.w	r9, [r7, r1, lsl #3]
 801b258:	f8a2 a002 	strh.w	sl, [r2, #2]
 801b25c:	f8a2 8004 	strh.w	r8, [r2, #4]
 801b260:	f8a2 e006 	strh.w	lr, [r2, #6]
 801b264:	3301      	adds	r3, #1
 801b266:	b29b      	uxth	r3, r3
 801b268:	e7df      	b.n	801b22a <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 801b26a:	2701      	movs	r7, #1
 801b26c:	e7ba      	b.n	801b1e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40>
 801b26e:	2f00      	cmp	r7, #0
 801b270:	d1d0      	bne.n	801b214 <_ZN8touchgfx11Application15drawCachedAreasEv+0x70>
 801b272:	b021      	add	sp, #132	@ 0x84
 801b274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b278:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801b27c:	42ab      	cmp	r3, r5
 801b27e:	d90c      	bls.n	801b29a <_ZN8touchgfx11Application15drawCachedAreasEv+0xf6>
 801b280:	6822      	ldr	r2, [r4, #0]
 801b282:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801b286:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801b288:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801b28c:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801b290:	4620      	mov	r0, r4
 801b292:	3501      	adds	r5, #1
 801b294:	47b8      	blx	r7
 801b296:	b2ad      	uxth	r5, r5
 801b298:	e7ee      	b.n	801b278 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 801b29a:	4d81      	ldr	r5, [pc, #516]	@ (801b4a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 801b29c:	6828      	ldr	r0, [r5, #0]
 801b29e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 801b2a2:	2b01      	cmp	r3, #1
 801b2a4:	f040 813d 	bne.w	801b522 <_ZN8touchgfx11Application15drawCachedAreasEv+0x37e>
 801b2a8:	4a81      	ldr	r2, [pc, #516]	@ (801b4b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>)
 801b2aa:	8833      	ldrh	r3, [r6, #0]
 801b2ac:	7812      	ldrb	r2, [r2, #0]
 801b2ae:	f8b4 00ec 	ldrh.w	r0, [r4, #236]	@ 0xec
 801b2b2:	2a01      	cmp	r2, #1
 801b2b4:	d014      	beq.n	801b2e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 801b2b6:	f04f 0900 	mov.w	r9, #0
 801b2ba:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 801b2be:	32ae      	adds	r2, #174	@ 0xae
 801b2c0:	4283      	cmp	r3, r0
 801b2c2:	f102 0208 	add.w	r2, r2, #8
 801b2c6:	f280 8083 	bge.w	801b3d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 801b2ca:	f832 1c04 	ldrh.w	r1, [r2, #-4]
 801b2ce:	f832 7c08 	ldrh.w	r7, [r2, #-8]
 801b2d2:	3301      	adds	r3, #1
 801b2d4:	4439      	add	r1, r7
 801b2d6:	b209      	sxth	r1, r1
 801b2d8:	4589      	cmp	r9, r1
 801b2da:	bfb8      	it	lt
 801b2dc:	4689      	movlt	r9, r1
 801b2de:	e7ef      	b.n	801b2c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11c>
 801b2e0:	4f74      	ldr	r7, [pc, #464]	@ (801b4b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>)
 801b2e2:	883a      	ldrh	r2, [r7, #0]
 801b2e4:	4693      	mov	fp, r2
 801b2e6:	4283      	cmp	r3, r0
 801b2e8:	da08      	bge.n	801b2fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x158>
 801b2ea:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 801b2ee:	f9b1 10ac 	ldrsh.w	r1, [r1, #172]	@ 0xac
 801b2f2:	3301      	adds	r3, #1
 801b2f4:	458b      	cmp	fp, r1
 801b2f6:	bfa8      	it	ge
 801b2f8:	468b      	movge	fp, r1
 801b2fa:	e7f4      	b.n	801b2e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x142>
 801b2fc:	2300      	movs	r3, #0
 801b2fe:	2a0f      	cmp	r2, #15
 801b300:	bf98      	it	ls
 801b302:	f04f 0801 	movls.w	r8, #1
 801b306:	f8df 91b0 	ldr.w	r9, [pc, #432]	@ 801b4b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 801b30a:	bf88      	it	hi
 801b30c:	ea4f 08d2 	movhi.w	r8, r2, lsr #3
 801b310:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801b314:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801b318:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801b31c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801b320:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801b324:	6828      	ldr	r0, [r5, #0]
 801b326:	455b      	cmp	r3, fp
 801b328:	f340 80c8 	ble.w	801b4bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801b32c:	6803      	ldr	r3, [r0, #0]
 801b32e:	f8b7 a000 	ldrh.w	sl, [r7]
 801b332:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b336:	4798      	blx	r3
 801b338:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 801b33c:	ebaa 0000 	sub.w	r0, sl, r0
 801b340:	682b      	ldr	r3, [r5, #0]
 801b342:	b280      	uxth	r0, r0
 801b344:	ebac 0e08 	sub.w	lr, ip, r8
 801b348:	4570      	cmp	r0, lr
 801b34a:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 801b34e:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 801b352:	dd05      	ble.n	801b360 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 801b354:	4558      	cmp	r0, fp
 801b356:	dd03      	ble.n	801b360 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 801b358:	b901      	cbnz	r1, 801b35c <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 801b35a:	b392      	cbz	r2, 801b3c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x21e>
 801b35c:	4658      	mov	r0, fp
 801b35e:	e006      	b.n	801b36e <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ca>
 801b360:	2900      	cmp	r1, #0
 801b362:	d1fb      	bne.n	801b35c <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 801b364:	2a00      	cmp	r2, #0
 801b366:	d1f9      	bne.n	801b35c <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 801b368:	4558      	cmp	r0, fp
 801b36a:	bfb8      	it	lt
 801b36c:	4658      	movlt	r0, fp
 801b36e:	2200      	movs	r2, #0
 801b370:	f9b9 3000 	ldrsh.w	r3, [r9]
 801b374:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 801b378:	f8b6 a000 	ldrh.w	sl, [r6]
 801b37c:	ebac 0000 	sub.w	r0, ip, r0
 801b380:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801b384:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801b388:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801b38c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801b390:	4553      	cmp	r3, sl
 801b392:	ddc5      	ble.n	801b320 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 801b394:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801b398:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801b39c:	ab0d      	add	r3, sp, #52	@ 0x34
 801b39e:	6851      	ldr	r1, [r2, #4]
 801b3a0:	c303      	stmia	r3!, {r0, r1}
 801b3a2:	a80d      	add	r0, sp, #52	@ 0x34
 801b3a4:	a90b      	add	r1, sp, #44	@ 0x2c
 801b3a6:	f7f9 fe1f 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 801b3aa:	a80d      	add	r0, sp, #52	@ 0x34
 801b3ac:	f7f9 fe5f 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b3b0:	b920      	cbnz	r0, 801b3bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x218>
 801b3b2:	6823      	ldr	r3, [r4, #0]
 801b3b4:	a90d      	add	r1, sp, #52	@ 0x34
 801b3b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b3b8:	4620      	mov	r0, r4
 801b3ba:	4798      	blx	r3
 801b3bc:	f10a 0a01 	add.w	sl, sl, #1
 801b3c0:	e7e4      	b.n	801b38c <_ZN8touchgfx11Application15drawCachedAreasEv+0x1e8>
 801b3c2:	681a      	ldr	r2, [r3, #0]
 801b3c4:	2101      	movs	r1, #1
 801b3c6:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 801b3ca:	4618      	mov	r0, r3
 801b3cc:	4790      	blx	r2
 801b3ce:	e7a7      	b.n	801b320 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 801b3d0:	4b39      	ldr	r3, [pc, #228]	@ (801b4b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>)
 801b3d2:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 801b4b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 801b3d6:	881f      	ldrh	r7, [r3, #0]
 801b3d8:	2300      	movs	r3, #0
 801b3da:	2f0f      	cmp	r7, #15
 801b3dc:	bf98      	it	ls
 801b3de:	2701      	movls	r7, #1
 801b3e0:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 801b3e4:	bf88      	it	hi
 801b3e6:	08ff      	lsrhi	r7, r7, #3
 801b3e8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801b3ec:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 801b3f0:	6828      	ldr	r0, [r5, #0]
 801b3f2:	4413      	add	r3, r2
 801b3f4:	b21b      	sxth	r3, r3
 801b3f6:	454b      	cmp	r3, r9
 801b3f8:	da60      	bge.n	801b4bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801b3fa:	6803      	ldr	r3, [r0, #0]
 801b3fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b400:	4798      	blx	r3
 801b402:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 801b406:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801b40a:	682a      	ldr	r2, [r5, #0]
 801b40c:	4473      	add	r3, lr
 801b40e:	b21b      	sxth	r3, r3
 801b410:	eb03 0e07 	add.w	lr, r3, r7
 801b414:	4570      	cmp	r0, lr
 801b416:	f892 c07c 	ldrb.w	ip, [r2, #124]	@ 0x7c
 801b41a:	f892 106a 	ldrb.w	r1, [r2, #106]	@ 0x6a
 801b41e:	da0d      	bge.n	801b43c <_ZN8touchgfx11Application15drawCachedAreasEv+0x298>
 801b420:	4548      	cmp	r0, r9
 801b422:	da0b      	bge.n	801b43c <_ZN8touchgfx11Application15drawCachedAreasEv+0x298>
 801b424:	f1bc 0f00 	cmp.w	ip, #0
 801b428:	d138      	bne.n	801b49c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>
 801b42a:	2900      	cmp	r1, #0
 801b42c:	d136      	bne.n	801b49c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>
 801b42e:	6813      	ldr	r3, [r2, #0]
 801b430:	2101      	movs	r1, #1
 801b432:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801b436:	4610      	mov	r0, r2
 801b438:	4798      	blx	r3
 801b43a:	e7d5      	b.n	801b3e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801b43c:	f1bc 0f00 	cmp.w	ip, #0
 801b440:	d12c      	bne.n	801b49c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>
 801b442:	bb59      	cbnz	r1, 801b49c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>
 801b444:	4548      	cmp	r0, r9
 801b446:	bfa8      	it	ge
 801b448:	4648      	movge	r0, r9
 801b44a:	2100      	movs	r1, #0
 801b44c:	f9b8 2000 	ldrsh.w	r2, [r8]
 801b450:	1ac0      	subs	r0, r0, r3
 801b452:	f8b6 a000 	ldrh.w	sl, [r6]
 801b456:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 801b45a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801b45e:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801b462:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801b466:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801b46a:	4553      	cmp	r3, sl
 801b46c:	ddbc      	ble.n	801b3e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801b46e:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801b472:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801b476:	ab0d      	add	r3, sp, #52	@ 0x34
 801b478:	6851      	ldr	r1, [r2, #4]
 801b47a:	c303      	stmia	r3!, {r0, r1}
 801b47c:	a80d      	add	r0, sp, #52	@ 0x34
 801b47e:	a90b      	add	r1, sp, #44	@ 0x2c
 801b480:	f7f9 fdb2 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 801b484:	a80d      	add	r0, sp, #52	@ 0x34
 801b486:	f7f9 fdf2 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b48a:	b920      	cbnz	r0, 801b496 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801b48c:	6823      	ldr	r3, [r4, #0]
 801b48e:	a90d      	add	r1, sp, #52	@ 0x34
 801b490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b492:	4620      	mov	r0, r4
 801b494:	4798      	blx	r3
 801b496:	f10a 0a01 	add.w	sl, sl, #1
 801b49a:	e7e4      	b.n	801b466 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c2>
 801b49c:	4648      	mov	r0, r9
 801b49e:	e7d4      	b.n	801b44a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a6>
 801b4a0:	2005bd1c 	.word	0x2005bd1c
 801b4a4:	2005bd5c 	.word	0x2005bd5c
 801b4a8:	2005bd68 	.word	0x2005bd68
 801b4ac:	2000001c 	.word	0x2000001c
 801b4b0:	2005bd14 	.word	0x2005bd14
 801b4b4:	2005bd10 	.word	0x2005bd10
 801b4b8:	2005bd12 	.word	0x2005bd12
 801b4bc:	6828      	ldr	r0, [r5, #0]
 801b4be:	6803      	ldr	r3, [r0, #0]
 801b4c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b4c2:	4798      	blx	r3
 801b4c4:	4ba4      	ldr	r3, [pc, #656]	@ (801b758 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b4>)
 801b4c6:	781b      	ldrb	r3, [r3, #0]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	f43f aed2 	beq.w	801b272 <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 801b4ce:	2300      	movs	r3, #0
 801b4d0:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801b4d4:	4ba1      	ldr	r3, [pc, #644]	@ (801b75c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b8>)
 801b4d6:	f8bd 607c 	ldrh.w	r6, [sp, #124]	@ 0x7c
 801b4da:	881b      	ldrh	r3, [r3, #0]
 801b4dc:	a80f      	add	r0, sp, #60	@ 0x3c
 801b4de:	f104 05ee 	add.w	r5, r4, #238	@ 0xee
 801b4e2:	42b3      	cmp	r3, r6
 801b4e4:	f4bf aec5 	bcs.w	801b272 <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 801b4e8:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801b4ec:	2907      	cmp	r1, #7
 801b4ee:	d815      	bhi.n	801b51c <_ZN8touchgfx11Application15drawCachedAreasEv+0x378>
 801b4f0:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801b4f4:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801b4f8:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801b4fc:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801b500:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801b504:	1c4a      	adds	r2, r1, #1
 801b506:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801b50a:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 801b50e:	f825 8031 	strh.w	r8, [r5, r1, lsl #3]
 801b512:	f8a2 e002 	strh.w	lr, [r2, #2]
 801b516:	f8a2 c004 	strh.w	ip, [r2, #4]
 801b51a:	80d7      	strh	r7, [r2, #6]
 801b51c:	3301      	adds	r3, #1
 801b51e:	b29b      	uxth	r3, r3
 801b520:	e7df      	b.n	801b4e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x33e>
 801b522:	2b02      	cmp	r3, #2
 801b524:	f040 80cf 	bne.w	801b6c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 801b528:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801b52c:	f890 b07d 	ldrb.w	fp, [r0, #125]	@ 0x7d
 801b530:	9308      	str	r3, [sp, #32]
 801b532:	f8b0 307e 	ldrh.w	r3, [r0, #126]	@ 0x7e
 801b536:	f10b 37ff 	add.w	r7, fp, #4294967295
 801b53a:	9307      	str	r3, [sp, #28]
 801b53c:	6803      	ldr	r3, [r0, #0]
 801b53e:	b2bf      	uxth	r7, r7
 801b540:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b544:	4798      	blx	r3
 801b546:	4b86      	ldr	r3, [pc, #536]	@ (801b760 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5bc>)
 801b548:	4682      	mov	sl, r0
 801b54a:	881b      	ldrh	r3, [r3, #0]
 801b54c:	2000      	movs	r0, #0
 801b54e:	9302      	str	r3, [sp, #8]
 801b550:	4b84      	ldr	r3, [pc, #528]	@ (801b764 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c0>)
 801b552:	fa0f f887 	sxth.w	r8, r7
 801b556:	881e      	ldrh	r6, [r3, #0]
 801b558:	4b83      	ldr	r3, [pc, #524]	@ (801b768 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 801b55a:	781b      	ldrb	r3, [r3, #0]
 801b55c:	2b01      	cmp	r3, #1
 801b55e:	bf1e      	ittt	ne
 801b560:	9b02      	ldrne	r3, [sp, #8]
 801b562:	9602      	strne	r6, [sp, #8]
 801b564:	461e      	movne	r6, r3
 801b566:	f7f6 ffd1 	bl	801250c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801b56a:	fb96 fbfb 	sdiv	fp, r6, fp
 801b56e:	fb0b f808 	mul.w	r8, fp, r8
 801b572:	45c2      	cmp	sl, r8
 801b574:	da0c      	bge.n	801b590 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ec>
 801b576:	6828      	ldr	r0, [r5, #0]
 801b578:	210a      	movs	r1, #10
 801b57a:	6803      	ldr	r3, [r0, #0]
 801b57c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801b580:	4798      	blx	r3
 801b582:	6828      	ldr	r0, [r5, #0]
 801b584:	6803      	ldr	r3, [r0, #0]
 801b586:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b58a:	4798      	blx	r3
 801b58c:	4682      	mov	sl, r0
 801b58e:	e7f0      	b.n	801b572 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ce>
 801b590:	f04f 0800 	mov.w	r8, #0
 801b594:	4645      	mov	r5, r8
 801b596:	2000      	movs	r0, #0
 801b598:	f7f6 ffd4 	bl	8012544 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801b59c:	fa1f f38b 	uxth.w	r3, fp
 801b5a0:	fb17 f703 	smulbb	r7, r7, r3
 801b5a4:	9304      	str	r3, [sp, #16]
 801b5a6:	b2bb      	uxth	r3, r7
 801b5a8:	9305      	str	r3, [sp, #20]
 801b5aa:	4f70      	ldr	r7, [pc, #448]	@ (801b76c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c8>)
 801b5ac:	0973      	lsrs	r3, r6, #5
 801b5ae:	9306      	str	r3, [sp, #24]
 801b5b0:	42b5      	cmp	r5, r6
 801b5b2:	d087      	beq.n	801b4c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801b5b4:	6838      	ldr	r0, [r7, #0]
 801b5b6:	6803      	ldr	r3, [r0, #0]
 801b5b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b5bc:	4798      	blx	r3
 801b5be:	4582      	cmp	sl, r0
 801b5c0:	4681      	mov	r9, r0
 801b5c2:	d907      	bls.n	801b5d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x430>
 801b5c4:	f1b8 0f00 	cmp.w	r8, #0
 801b5c8:	d007      	beq.n	801b5da <_ZN8touchgfx11Application15drawCachedAreasEv+0x436>
 801b5ca:	6838      	ldr	r0, [r7, #0]
 801b5cc:	6803      	ldr	r3, [r0, #0]
 801b5ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801b5d2:	e776      	b.n	801b4c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801b5d4:	f1b8 0f00 	cmp.w	r8, #0
 801b5d8:	d003      	beq.n	801b5e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x43e>
 801b5da:	454d      	cmp	r5, r9
 801b5dc:	d3f5      	bcc.n	801b5ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x426>
 801b5de:	f04f 0801 	mov.w	r8, #1
 801b5e2:	fb95 f3fb 	sdiv	r3, r5, fp
 801b5e6:	9a04      	ldr	r2, [sp, #16]
 801b5e8:	9303      	str	r3, [sp, #12]
 801b5ea:	3301      	adds	r3, #1
 801b5ec:	fb13 f302 	smulbb	r3, r3, r2
 801b5f0:	b299      	uxth	r1, r3
 801b5f2:	f1b8 0f00 	cmp.w	r8, #0
 801b5f6:	d04e      	beq.n	801b696 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f2>
 801b5f8:	eb09 030b 	add.w	r3, r9, fp
 801b5fc:	42b3      	cmp	r3, r6
 801b5fe:	bfa8      	it	ge
 801b600:	4633      	movge	r3, r6
 801b602:	b29b      	uxth	r3, r3
 801b604:	428b      	cmp	r3, r1
 801b606:	bf94      	ite	ls
 801b608:	ebc5 0203 	rsbls	r2, r5, r3
 801b60c:	ebc5 0201 	rsbhi	r2, r5, r1
 801b610:	9807      	ldr	r0, [sp, #28]
 801b612:	4282      	cmp	r2, r0
 801b614:	bfa8      	it	ge
 801b616:	4602      	movge	r2, r0
 801b618:	9808      	ldr	r0, [sp, #32]
 801b61a:	fa1f fa82 	uxth.w	sl, r2
 801b61e:	4582      	cmp	sl, r0
 801b620:	d205      	bcs.n	801b62e <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 801b622:	fa15 f082 	uxtah	r0, r5, r2
 801b626:	4286      	cmp	r6, r0
 801b628:	d001      	beq.n	801b62e <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 801b62a:	4299      	cmp	r1, r3
 801b62c:	d240      	bcs.n	801b6b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x50c>
 801b62e:	2001      	movs	r0, #1
 801b630:	9209      	str	r2, [sp, #36]	@ 0x24
 801b632:	f7f6 ff6b 	bl	801250c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801b636:	6838      	ldr	r0, [r7, #0]
 801b638:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 801b63c:	6803      	ldr	r3, [r0, #0]
 801b63e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801b642:	4798      	blx	r3
 801b644:	4b48      	ldr	r3, [pc, #288]	@ (801b768 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 801b646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b648:	781b      	ldrb	r3, [r3, #0]
 801b64a:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801b64e:	2b01      	cmp	r3, #1
 801b650:	b212      	sxth	r2, r2
 801b652:	f04f 0000 	mov.w	r0, #0
 801b656:	d122      	bne.n	801b69e <_ZN8touchgfx11Application15drawCachedAreasEv+0x4fa>
 801b658:	1b73      	subs	r3, r6, r5
 801b65a:	eba3 030a 	sub.w	r3, r3, sl
 801b65e:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801b662:	f8ad 0036 	strh.w	r0, [sp, #54]	@ 0x36
 801b666:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801b66a:	f8ad 103a 	strh.w	r1, [sp, #58]	@ 0x3a
 801b66e:	6823      	ldr	r3, [r4, #0]
 801b670:	a90d      	add	r1, sp, #52	@ 0x34
 801b672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b674:	4620      	mov	r0, r4
 801b676:	4798      	blx	r3
 801b678:	6838      	ldr	r0, [r7, #0]
 801b67a:	9b03      	ldr	r3, [sp, #12]
 801b67c:	4455      	add	r5, sl
 801b67e:	4259      	negs	r1, r3
 801b680:	6803      	ldr	r3, [r0, #0]
 801b682:	b209      	sxth	r1, r1
 801b684:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801b688:	4798      	blx	r3
 801b68a:	2001      	movs	r0, #1
 801b68c:	b2ad      	uxth	r5, r5
 801b68e:	f7f6 ff59 	bl	8012544 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801b692:	46ca      	mov	sl, r9
 801b694:	e78c      	b.n	801b5b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40c>
 801b696:	9b05      	ldr	r3, [sp, #20]
 801b698:	eba9 0303 	sub.w	r3, r9, r3
 801b69c:	e7b1      	b.n	801b602 <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 801b69e:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 801b6a2:	f8ad 5036 	strh.w	r5, [sp, #54]	@ 0x36
 801b6a6:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 801b6aa:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 801b6ae:	e7de      	b.n	801b66e <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ca>
 801b6b0:	6838      	ldr	r0, [r7, #0]
 801b6b2:	6803      	ldr	r3, [r0, #0]
 801b6b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b6b6:	4798      	blx	r3
 801b6b8:	6838      	ldr	r0, [r7, #0]
 801b6ba:	9906      	ldr	r1, [sp, #24]
 801b6bc:	6803      	ldr	r3, [r0, #0]
 801b6be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801b6c2:	4798      	blx	r3
 801b6c4:	e7e5      	b.n	801b692 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ee>
 801b6c6:	2b03      	cmp	r3, #3
 801b6c8:	f040 8130 	bne.w	801b92c <_ZN8touchgfx11Application15drawCachedAreasEv+0x788>
 801b6cc:	4b26      	ldr	r3, [pc, #152]	@ (801b768 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 801b6ce:	f9b0 9082 	ldrsh.w	r9, [r0, #130]	@ 0x82
 801b6d2:	781b      	ldrb	r3, [r3, #0]
 801b6d4:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801b6d8:	2b01      	cmp	r3, #1
 801b6da:	f000 8093 	beq.w	801b804 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 801b6de:	8832      	ldrh	r2, [r6, #0]
 801b6e0:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801b6e4:	3201      	adds	r2, #1
 801b6e6:	b292      	uxth	r2, r2
 801b6e8:	2900      	cmp	r1, #0
 801b6ea:	f43f aeeb 	beq.w	801b4c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801b6ee:	4694      	mov	ip, r2
 801b6f0:	f04f 0800 	mov.w	r8, #0
 801b6f4:	f8b4 50b2 	ldrh.w	r5, [r4, #178]	@ 0xb2
 801b6f8:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 801b6fc:	441d      	add	r5, r3
 801b6fe:	b22d      	sxth	r5, r5
 801b700:	fa1f f38c 	uxth.w	r3, ip
 801b704:	4299      	cmp	r1, r3
 801b706:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801b70a:	f240 80ba 	bls.w	801b882 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6de>
 801b70e:	4427      	add	r7, r4
 801b710:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801b714:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801b718:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801b71c:	4283      	cmp	r3, r0
 801b71e:	f340 809c 	ble.w	801b85a <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b6>
 801b722:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
 801b726:	46e0      	mov	r8, ip
 801b728:	4405      	add	r5, r0
 801b72a:	b22d      	sxth	r5, r5
 801b72c:	429d      	cmp	r5, r3
 801b72e:	bfa8      	it	ge
 801b730:	461d      	movge	r5, r3
 801b732:	f10c 0c01 	add.w	ip, ip, #1
 801b736:	e7e3      	b.n	801b700 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>
 801b738:	d10a      	bne.n	801b750 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5ac>
 801b73a:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	@ 0xb2
 801b73e:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801b742:	4562      	cmp	r2, ip
 801b744:	bfb8      	it	lt
 801b746:	4662      	movlt	r2, ip
 801b748:	4288      	cmp	r0, r1
 801b74a:	bfb8      	it	lt
 801b74c:	4698      	movlt	r8, r3
 801b74e:	e082      	b.n	801b856 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b2>
 801b750:	428a      	cmp	r2, r1
 801b752:	bfb8      	it	lt
 801b754:	460a      	movlt	r2, r1
 801b756:	e07e      	b.n	801b856 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b2>
 801b758:	2005bd1a 	.word	0x2005bd1a
 801b75c:	2000001c 	.word	0x2000001c
 801b760:	2005bd12 	.word	0x2005bd12
 801b764:	2005bd10 	.word	0x2005bd10
 801b768:	2005bd14 	.word	0x2005bd14
 801b76c:	2005bd1c 	.word	0x2005bd1c
 801b770:	19e1      	adds	r1, r4, r7
 801b772:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801b776:	ab0d      	add	r3, sp, #52	@ 0x34
 801b778:	6849      	ldr	r1, [r1, #4]
 801b77a:	c303      	stmia	r3!, {r0, r1}
 801b77c:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 801b780:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801b784:	454b      	cmp	r3, r9
 801b786:	bfb8      	it	lt
 801b788:	f9bd 2034 	ldrshlt.w	r2, [sp, #52]	@ 0x34
 801b78c:	440b      	add	r3, r1
 801b78e:	1a9b      	subs	r3, r3, r2
 801b790:	a80d      	add	r0, sp, #52	@ 0x34
 801b792:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801b796:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801b79a:	f7fe fe8d 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b79e:	a80d      	add	r0, sp, #52	@ 0x34
 801b7a0:	f7f9 fc65 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b7a4:	bb70      	cbnz	r0, 801b804 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 801b7a6:	f9bd c03a 	ldrsh.w	ip, [sp, #58]	@ 0x3a
 801b7aa:	6828      	ldr	r0, [r5, #0]
 801b7ac:	45cc      	cmp	ip, r9
 801b7ae:	f8d0 e000 	ldr.w	lr, [r0]
 801b7b2:	bfd4      	ite	le
 801b7b4:	fa1f fc8c 	uxthle.w	ip, ip
 801b7b8:	fa1f fc89 	uxthgt.w	ip, r9
 801b7bc:	f8cd c000 	str.w	ip, [sp]
 801b7c0:	f8de b094 	ldr.w	fp, [lr, #148]	@ 0x94
 801b7c4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801b7c8:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 801b7cc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801b7d0:	47d8      	blx	fp
 801b7d2:	4683      	mov	fp, r0
 801b7d4:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 801b7d8:	a80d      	add	r0, sp, #52	@ 0x34
 801b7da:	f7fe fe53 	bl	801a484 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b7de:	6823      	ldr	r3, [r4, #0]
 801b7e0:	4620      	mov	r0, r4
 801b7e2:	4427      	add	r7, r4
 801b7e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b7e6:	a90d      	add	r1, sp, #52	@ 0x34
 801b7e8:	4798      	blx	r3
 801b7ea:	f8b7 00b0 	ldrh.w	r0, [r7, #176]	@ 0xb0
 801b7ee:	eba0 000b 	sub.w	r0, r0, fp
 801b7f2:	b200      	sxth	r0, r0
 801b7f4:	f8a7 00b0 	strh.w	r0, [r7, #176]	@ 0xb0
 801b7f8:	b920      	cbnz	r0, 801b804 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 801b7fa:	fa1f f188 	uxth.w	r1, r8
 801b7fe:	4650      	mov	r0, sl
 801b800:	f7ff f93e 	bl	801aa80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b804:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801b808:	f1bb 0f00 	cmp.w	fp, #0
 801b80c:	f43f ae5a 	beq.w	801b4c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801b810:	f04f 0800 	mov.w	r8, #0
 801b814:	8833      	ldrh	r3, [r6, #0]
 801b816:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801b81a:	3301      	adds	r3, #1
 801b81c:	b29b      	uxth	r3, r3
 801b81e:	b299      	uxth	r1, r3
 801b820:	458b      	cmp	fp, r1
 801b822:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801b826:	d9a3      	bls.n	801b770 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>
 801b828:	4427      	add	r7, r4
 801b82a:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 801b82e:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	@ 0xac
 801b832:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801b836:	4408      	add	r0, r1
 801b838:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801b83c:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801b840:	b200      	sxth	r0, r0
 801b842:	4461      	add	r1, ip
 801b844:	b209      	sxth	r1, r1
 801b846:	4288      	cmp	r0, r1
 801b848:	f6bf af76 	bge.w	801b738 <_ZN8touchgfx11Application15drawCachedAreasEv+0x594>
 801b84c:	4584      	cmp	ip, r0
 801b84e:	4662      	mov	r2, ip
 801b850:	4698      	mov	r8, r3
 801b852:	bfb8      	it	lt
 801b854:	4602      	movlt	r2, r0
 801b856:	3301      	adds	r3, #1
 801b858:	e7e1      	b.n	801b81e <_ZN8touchgfx11Application15drawCachedAreasEv+0x67a>
 801b85a:	d10e      	bne.n	801b87a <_ZN8touchgfx11Application15drawCachedAreasEv+0x6d6>
 801b85c:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801b860:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801b864:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801b868:	4473      	add	r3, lr
 801b86a:	b21b      	sxth	r3, r3
 801b86c:	429d      	cmp	r5, r3
 801b86e:	bfa8      	it	ge
 801b870:	461d      	movge	r5, r3
 801b872:	4287      	cmp	r7, r0
 801b874:	bfb8      	it	lt
 801b876:	46e0      	movlt	r8, ip
 801b878:	e75b      	b.n	801b732 <_ZN8touchgfx11Application15drawCachedAreasEv+0x58e>
 801b87a:	4285      	cmp	r5, r0
 801b87c:	bfa8      	it	ge
 801b87e:	4605      	movge	r5, r0
 801b880:	e757      	b.n	801b732 <_ZN8touchgfx11Application15drawCachedAreasEv+0x58e>
 801b882:	eb0a 0007 	add.w	r0, sl, r7
 801b886:	4427      	add	r7, r4
 801b888:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801b88c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801b890:	45cb      	cmp	fp, r9
 801b892:	bfbe      	ittt	lt
 801b894:	f8b7 50ae 	ldrhlt.w	r5, [r7, #174]	@ 0xae
 801b898:	445d      	addlt	r5, fp
 801b89a:	b22d      	sxthlt	r5, r5
 801b89c:	f7f9 fbe7 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b8a0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801b8a4:	2800      	cmp	r0, #0
 801b8a6:	f47f af1f 	bne.w	801b6e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x544>
 801b8aa:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801b8ae:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 801b8b2:	1aad      	subs	r5, r5, r2
 801b8b4:	454d      	cmp	r5, r9
 801b8b6:	bfa8      	it	ge
 801b8b8:	464d      	movge	r5, r9
 801b8ba:	4829      	ldr	r0, [pc, #164]	@ (801b960 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7bc>)
 801b8bc:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801b8c0:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801b8c4:	6800      	ldr	r0, [r0, #0]
 801b8c6:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
 801b8ca:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801b8ce:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801b8d2:	f8d0 c000 	ldr.w	ip, [r0]
 801b8d6:	b2ad      	uxth	r5, r5
 801b8d8:	fa1f fb8b 	uxth.w	fp, fp
 801b8dc:	455d      	cmp	r5, fp
 801b8de:	bf94      	ite	ls
 801b8e0:	9500      	strls	r5, [sp, #0]
 801b8e2:	f8cd b000 	strhi.w	fp, [sp]
 801b8e6:	b292      	uxth	r2, r2
 801b8e8:	f8dc 5094 	ldr.w	r5, [ip, #148]	@ 0x94
 801b8ec:	b29b      	uxth	r3, r3
 801b8ee:	b289      	uxth	r1, r1
 801b8f0:	47a8      	blx	r5
 801b8f2:	6823      	ldr	r3, [r4, #0]
 801b8f4:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 801b8f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b8fa:	a90d      	add	r1, sp, #52	@ 0x34
 801b8fc:	4620      	mov	r0, r4
 801b8fe:	4798      	blx	r3
 801b900:	f8bd 103a 	ldrh.w	r1, [sp, #58]	@ 0x3a
 801b904:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801b908:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801b90c:	1a5b      	subs	r3, r3, r1
 801b90e:	440a      	add	r2, r1
 801b910:	b21b      	sxth	r3, r3
 801b912:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801b916:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	f47f aedf 	bne.w	801b6de <_ZN8touchgfx11Application15drawCachedAreasEv+0x53a>
 801b920:	fa1f f188 	uxth.w	r1, r8
 801b924:	4650      	mov	r0, sl
 801b926:	f7ff f8ab 	bl	801aa80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b92a:	e6d8      	b.n	801b6de <_ZN8touchgfx11Application15drawCachedAreasEv+0x53a>
 801b92c:	8835      	ldrh	r5, [r6, #0]
 801b92e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801b932:	42ab      	cmp	r3, r5
 801b934:	f67f adc6 	bls.w	801b4c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801b938:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801b93c:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801b940:	ab0d      	add	r3, sp, #52	@ 0x34
 801b942:	6851      	ldr	r1, [r2, #4]
 801b944:	c303      	stmia	r3!, {r0, r1}
 801b946:	a80d      	add	r0, sp, #52	@ 0x34
 801b948:	f7f9 fb91 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b94c:	b920      	cbnz	r0, 801b958 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7b4>
 801b94e:	6823      	ldr	r3, [r4, #0]
 801b950:	a90d      	add	r1, sp, #52	@ 0x34
 801b952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b954:	4620      	mov	r0, r4
 801b956:	4798      	blx	r3
 801b958:	3501      	adds	r5, #1
 801b95a:	b2ad      	uxth	r5, r5
 801b95c:	e7e7      	b.n	801b92e <_ZN8touchgfx11Application15drawCachedAreasEv+0x78a>
 801b95e:	bf00      	nop
 801b960:	2005bd1c 	.word	0x2005bd1c

0801b964 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801b964:	2200      	movs	r2, #0
 801b966:	4b03      	ldr	r3, [pc, #12]	@ (801b974 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801b968:	801a      	strh	r2, [r3, #0]
 801b96a:	805a      	strh	r2, [r3, #2]
 801b96c:	809a      	strh	r2, [r3, #4]
 801b96e:	80da      	strh	r2, [r3, #6]
 801b970:	4770      	bx	lr
 801b972:	bf00      	nop
 801b974:	2005bd68 	.word	0x2005bd68

0801b978 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801b978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b97c:	4606      	mov	r6, r0
 801b97e:	b09d      	sub	sp, #116	@ 0x74
 801b980:	a803      	add	r0, sp, #12
 801b982:	4614      	mov	r4, r2
 801b984:	468a      	mov	sl, r1
 801b986:	461d      	mov	r5, r3
 801b988:	f001 f9cd 	bl	801cd26 <_ZN8touchgfx12TextProviderC1Ev>
 801b98c:	6833      	ldr	r3, [r6, #0]
 801b98e:	4630      	mov	r0, r6
 801b990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b992:	4798      	blx	r3
 801b994:	6833      	ldr	r3, [r6, #0]
 801b996:	4607      	mov	r7, r0
 801b998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b99a:	4630      	mov	r0, r6
 801b99c:	4798      	blx	r3
 801b99e:	462a      	mov	r2, r5
 801b9a0:	2500      	movs	r5, #0
 801b9a2:	9000      	str	r0, [sp, #0]
 801b9a4:	4621      	mov	r1, r4
 801b9a6:	463b      	mov	r3, r7
 801b9a8:	a803      	add	r0, sp, #12
 801b9aa:	f001 fa0f 	bl	801cdcc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b9ae:	462c      	mov	r4, r5
 801b9b0:	46a9      	mov	r9, r5
 801b9b2:	46a8      	mov	r8, r5
 801b9b4:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801b9b8:	2300      	movs	r3, #0
 801b9ba:	9302      	str	r3, [sp, #8]
 801b9bc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801b9c0:	429c      	cmp	r4, r3
 801b9c2:	d002      	beq.n	801b9ca <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801b9c4:	455c      	cmp	r4, fp
 801b9c6:	bf18      	it	ne
 801b9c8:	4625      	movne	r5, r4
 801b9ca:	ab02      	add	r3, sp, #8
 801b9cc:	4632      	mov	r2, r6
 801b9ce:	4651      	mov	r1, sl
 801b9d0:	a803      	add	r0, sp, #12
 801b9d2:	f001 fd17 	bl	801d404 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b9d6:	4604      	mov	r4, r0
 801b9d8:	b108      	cbz	r0, 801b9de <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801b9da:	280a      	cmp	r0, #10
 801b9dc:	d10a      	bne.n	801b9f4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801b9de:	45c1      	cmp	r9, r8
 801b9e0:	bf38      	it	cc
 801b9e2:	46c1      	movcc	r9, r8
 801b9e4:	f04f 0800 	mov.w	r8, #0
 801b9e8:	2c00      	cmp	r4, #0
 801b9ea:	d1e5      	bne.n	801b9b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801b9ec:	4648      	mov	r0, r9
 801b9ee:	b01d      	add	sp, #116	@ 0x74
 801b9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9f4:	9a02      	ldr	r2, [sp, #8]
 801b9f6:	2a00      	cmp	r2, #0
 801b9f8:	d0de      	beq.n	801b9b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801b9fa:	7b57      	ldrb	r7, [r2, #13]
 801b9fc:	6833      	ldr	r3, [r6, #0]
 801b9fe:	007f      	lsls	r7, r7, #1
 801ba00:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801ba04:	7a97      	ldrb	r7, [r2, #10]
 801ba06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ba08:	4307      	orrs	r7, r0
 801ba0a:	4629      	mov	r1, r5
 801ba0c:	4630      	mov	r0, r6
 801ba0e:	8894      	ldrh	r4, [r2, #4]
 801ba10:	4798      	blx	r3
 801ba12:	4438      	add	r0, r7
 801ba14:	4480      	add	r8, r0
 801ba16:	fa1f f888 	uxth.w	r8, r8
 801ba1a:	e7e5      	b.n	801b9e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801ba1c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801ba1c:	b508      	push	{r3, lr}
 801ba1e:	6803      	ldr	r3, [r0, #0]
 801ba20:	68db      	ldr	r3, [r3, #12]
 801ba22:	4798      	blx	r3
 801ba24:	b128      	cbz	r0, 801ba32 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801ba26:	7b43      	ldrb	r3, [r0, #13]
 801ba28:	7a80      	ldrb	r0, [r0, #10]
 801ba2a:	005b      	lsls	r3, r3, #1
 801ba2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ba30:	4318      	orrs	r0, r3
 801ba32:	bd08      	pop	{r3, pc}

0801ba34 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801ba34:	b40e      	push	{r1, r2, r3}
 801ba36:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba38:	4605      	mov	r5, r0
 801ba3a:	b09e      	sub	sp, #120	@ 0x78
 801ba3c:	ab23      	add	r3, sp, #140	@ 0x8c
 801ba3e:	f853 4b04 	ldr.w	r4, [r3], #4
 801ba42:	a805      	add	r0, sp, #20
 801ba44:	9303      	str	r3, [sp, #12]
 801ba46:	f001 f96e 	bl	801cd26 <_ZN8touchgfx12TextProviderC1Ev>
 801ba4a:	682b      	ldr	r3, [r5, #0]
 801ba4c:	4628      	mov	r0, r5
 801ba4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ba50:	4798      	blx	r3
 801ba52:	682b      	ldr	r3, [r5, #0]
 801ba54:	4606      	mov	r6, r0
 801ba56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ba58:	4628      	mov	r0, r5
 801ba5a:	4798      	blx	r3
 801ba5c:	4621      	mov	r1, r4
 801ba5e:	2400      	movs	r4, #0
 801ba60:	4633      	mov	r3, r6
 801ba62:	9000      	str	r0, [sp, #0]
 801ba64:	9a03      	ldr	r2, [sp, #12]
 801ba66:	ae1e      	add	r6, sp, #120	@ 0x78
 801ba68:	a805      	add	r0, sp, #20
 801ba6a:	f001 f9af 	bl	801cdcc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ba6e:	f846 4d68 	str.w	r4, [r6, #-104]!
 801ba72:	4633      	mov	r3, r6
 801ba74:	462a      	mov	r2, r5
 801ba76:	4621      	mov	r1, r4
 801ba78:	a805      	add	r0, sp, #20
 801ba7a:	f001 fcc3 	bl	801d404 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ba7e:	b1f0      	cbz	r0, 801babe <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 801ba80:	280a      	cmp	r0, #10
 801ba82:	d018      	beq.n	801bab6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801ba84:	9f04      	ldr	r7, [sp, #16]
 801ba86:	b1b7      	cbz	r7, 801bab6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801ba88:	7b78      	ldrb	r0, [r7, #13]
 801ba8a:	7a3b      	ldrb	r3, [r7, #8]
 801ba8c:	00c1      	lsls	r1, r0, #3
 801ba8e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801ba92:	4319      	orrs	r1, r3
 801ba94:	0643      	lsls	r3, r0, #25
 801ba96:	bf44      	itt	mi
 801ba98:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801ba9c:	b219      	sxthmi	r1, r3
 801ba9e:	0100      	lsls	r0, r0, #4
 801baa0:	79fb      	ldrb	r3, [r7, #7]
 801baa2:	88ea      	ldrh	r2, [r5, #6]
 801baa4:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801baa8:	4303      	orrs	r3, r0
 801baaa:	4413      	add	r3, r2
 801baac:	1a5b      	subs	r3, r3, r1
 801baae:	b21b      	sxth	r3, r3
 801bab0:	429c      	cmp	r4, r3
 801bab2:	bfb8      	it	lt
 801bab4:	461c      	movlt	r4, r3
 801bab6:	4633      	mov	r3, r6
 801bab8:	462a      	mov	r2, r5
 801baba:	2100      	movs	r1, #0
 801babc:	e7dc      	b.n	801ba78 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801babe:	b2a0      	uxth	r0, r4
 801bac0:	b01e      	add	sp, #120	@ 0x78
 801bac2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801bac6:	b003      	add	sp, #12
 801bac8:	4770      	bx	lr

0801baca <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801baca:	7a43      	ldrb	r3, [r0, #9]
 801bacc:	8880      	ldrh	r0, [r0, #4]
 801bace:	4418      	add	r0, r3
 801bad0:	b280      	uxth	r0, r0
 801bad2:	4770      	bx	lr

0801bad4 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801bad4:	6803      	ldr	r3, [r0, #0]
 801bad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bad8:	4718      	bx	r3

0801bada <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801bada:	b40e      	push	{r1, r2, r3}
 801badc:	b570      	push	{r4, r5, r6, lr}
 801bade:	4604      	mov	r4, r0
 801bae0:	b09d      	sub	sp, #116	@ 0x74
 801bae2:	ab21      	add	r3, sp, #132	@ 0x84
 801bae4:	f853 5b04 	ldr.w	r5, [r3], #4
 801bae8:	a803      	add	r0, sp, #12
 801baea:	9302      	str	r3, [sp, #8]
 801baec:	f001 f91b 	bl	801cd26 <_ZN8touchgfx12TextProviderC1Ev>
 801baf0:	6823      	ldr	r3, [r4, #0]
 801baf2:	4620      	mov	r0, r4
 801baf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801baf6:	4798      	blx	r3
 801baf8:	6823      	ldr	r3, [r4, #0]
 801bafa:	4606      	mov	r6, r0
 801bafc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bafe:	4620      	mov	r0, r4
 801bb00:	4798      	blx	r3
 801bb02:	4633      	mov	r3, r6
 801bb04:	9000      	str	r0, [sp, #0]
 801bb06:	9a02      	ldr	r2, [sp, #8]
 801bb08:	4629      	mov	r1, r5
 801bb0a:	a803      	add	r0, sp, #12
 801bb0c:	f001 f95e 	bl	801cdcc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bb10:	a803      	add	r0, sp, #12
 801bb12:	f001 fcf9 	bl	801d508 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801bb16:	2401      	movs	r4, #1
 801bb18:	b2a3      	uxth	r3, r4
 801bb1a:	b140      	cbz	r0, 801bb2e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 801bb1c:	280a      	cmp	r0, #10
 801bb1e:	bf08      	it	eq
 801bb20:	3301      	addeq	r3, #1
 801bb22:	a803      	add	r0, sp, #12
 801bb24:	bf08      	it	eq
 801bb26:	b21c      	sxtheq	r4, r3
 801bb28:	f001 fcee 	bl	801d508 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801bb2c:	e7f4      	b.n	801bb18 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801bb2e:	4618      	mov	r0, r3
 801bb30:	b01d      	add	sp, #116	@ 0x74
 801bb32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bb36:	b003      	add	sp, #12
 801bb38:	4770      	bx	lr

0801bb3a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801bb3a:	b40e      	push	{r1, r2, r3}
 801bb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb3e:	4604      	mov	r4, r0
 801bb40:	b09e      	sub	sp, #120	@ 0x78
 801bb42:	ab23      	add	r3, sp, #140	@ 0x8c
 801bb44:	f853 5b04 	ldr.w	r5, [r3], #4
 801bb48:	a805      	add	r0, sp, #20
 801bb4a:	9303      	str	r3, [sp, #12]
 801bb4c:	f001 f8eb 	bl	801cd26 <_ZN8touchgfx12TextProviderC1Ev>
 801bb50:	6823      	ldr	r3, [r4, #0]
 801bb52:	4620      	mov	r0, r4
 801bb54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bb56:	4798      	blx	r3
 801bb58:	6823      	ldr	r3, [r4, #0]
 801bb5a:	4606      	mov	r6, r0
 801bb5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bb5e:	4620      	mov	r0, r4
 801bb60:	4798      	blx	r3
 801bb62:	4633      	mov	r3, r6
 801bb64:	4629      	mov	r1, r5
 801bb66:	9000      	str	r0, [sp, #0]
 801bb68:	9a03      	ldr	r2, [sp, #12]
 801bb6a:	a805      	add	r0, sp, #20
 801bb6c:	f001 f92e 	bl	801cdcc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bb70:	2100      	movs	r1, #0
 801bb72:	ad1e      	add	r5, sp, #120	@ 0x78
 801bb74:	f845 1d68 	str.w	r1, [r5, #-104]!
 801bb78:	462b      	mov	r3, r5
 801bb7a:	4622      	mov	r2, r4
 801bb7c:	a805      	add	r0, sp, #20
 801bb7e:	f001 fc41 	bl	801d404 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bb82:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801bb86:	b1d8      	cbz	r0, 801bbc0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801bb88:	280a      	cmp	r0, #10
 801bb8a:	d012      	beq.n	801bbb2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801bb8c:	9804      	ldr	r0, [sp, #16]
 801bb8e:	b180      	cbz	r0, 801bbb2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801bb90:	7b47      	ldrb	r7, [r0, #13]
 801bb92:	88e2      	ldrh	r2, [r4, #6]
 801bb94:	00fb      	lsls	r3, r7, #3
 801bb96:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801bb9a:	7a03      	ldrb	r3, [r0, #8]
 801bb9c:	430b      	orrs	r3, r1
 801bb9e:	0679      	lsls	r1, r7, #25
 801bba0:	bf44      	itt	mi
 801bba2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bba6:	b21b      	sxthmi	r3, r3
 801bba8:	1ad3      	subs	r3, r2, r3
 801bbaa:	b21b      	sxth	r3, r3
 801bbac:	429e      	cmp	r6, r3
 801bbae:	bfa8      	it	ge
 801bbb0:	461e      	movge	r6, r3
 801bbb2:	462b      	mov	r3, r5
 801bbb4:	4622      	mov	r2, r4
 801bbb6:	2100      	movs	r1, #0
 801bbb8:	a805      	add	r0, sp, #20
 801bbba:	f001 fc23 	bl	801d404 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bbbe:	e7e2      	b.n	801bb86 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801bbc0:	4630      	mov	r0, r6
 801bbc2:	b01e      	add	sp, #120	@ 0x78
 801bbc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801bbc8:	b003      	add	sp, #12
 801bbca:	4770      	bx	lr

0801bbcc <_ZNK8touchgfx8Drawable10invalidateEv>:
 801bbcc:	b513      	push	{r0, r1, r4, lr}
 801bbce:	2400      	movs	r4, #0
 801bbd0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801bbd4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bbd8:	6803      	ldr	r3, [r0, #0]
 801bbda:	f8ad 1004 	strh.w	r1, [sp, #4]
 801bbde:	9400      	str	r4, [sp, #0]
 801bbe0:	f8ad 2006 	strh.w	r2, [sp, #6]
 801bbe4:	691b      	ldr	r3, [r3, #16]
 801bbe6:	4669      	mov	r1, sp
 801bbe8:	4798      	blx	r3
 801bbea:	b002      	add	sp, #8
 801bbec:	bd10      	pop	{r4, pc}

0801bbee <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801bbee:	b538      	push	{r3, r4, r5, lr}
 801bbf0:	460c      	mov	r4, r1
 801bbf2:	4605      	mov	r5, r0
 801bbf4:	680b      	ldr	r3, [r1, #0]
 801bbf6:	68db      	ldr	r3, [r3, #12]
 801bbf8:	4798      	blx	r3
 801bbfa:	6823      	ldr	r3, [r4, #0]
 801bbfc:	4620      	mov	r0, r4
 801bbfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bc00:	4629      	mov	r1, r5
 801bc02:	4798      	blx	r3
 801bc04:	4628      	mov	r0, r5
 801bc06:	bd38      	pop	{r3, r4, r5, pc}

0801bc08 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801bc08:	b410      	push	{r4}
 801bc0a:	880a      	ldrh	r2, [r1, #0]
 801bc0c:	8884      	ldrh	r4, [r0, #4]
 801bc0e:	4422      	add	r2, r4
 801bc10:	800a      	strh	r2, [r1, #0]
 801bc12:	88c4      	ldrh	r4, [r0, #6]
 801bc14:	884a      	ldrh	r2, [r1, #2]
 801bc16:	4422      	add	r2, r4
 801bc18:	804a      	strh	r2, [r1, #2]
 801bc1a:	6940      	ldr	r0, [r0, #20]
 801bc1c:	b120      	cbz	r0, 801bc28 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801bc1e:	6803      	ldr	r3, [r0, #0]
 801bc20:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bc24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bc26:	4718      	bx	r3
 801bc28:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bc2c:	4770      	bx	lr

0801bc2e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801bc2e:	b570      	push	{r4, r5, r6, lr}
 801bc30:	460c      	mov	r4, r1
 801bc32:	8882      	ldrh	r2, [r0, #4]
 801bc34:	880b      	ldrh	r3, [r1, #0]
 801bc36:	4605      	mov	r5, r0
 801bc38:	4413      	add	r3, r2
 801bc3a:	800b      	strh	r3, [r1, #0]
 801bc3c:	88c2      	ldrh	r2, [r0, #6]
 801bc3e:	884b      	ldrh	r3, [r1, #2]
 801bc40:	4413      	add	r3, r2
 801bc42:	804b      	strh	r3, [r1, #2]
 801bc44:	1d01      	adds	r1, r0, #4
 801bc46:	4620      	mov	r0, r4
 801bc48:	f7f9 f9ce 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 801bc4c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	dd0b      	ble.n	801bc6c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bc54:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	dd07      	ble.n	801bc6c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bc5c:	6968      	ldr	r0, [r5, #20]
 801bc5e:	b128      	cbz	r0, 801bc6c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bc60:	6803      	ldr	r3, [r0, #0]
 801bc62:	4621      	mov	r1, r4
 801bc64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bc68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bc6a:	4718      	bx	r3
 801bc6c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bc70 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801bc70:	b570      	push	{r4, r5, r6, lr}
 801bc72:	460c      	mov	r4, r1
 801bc74:	8882      	ldrh	r2, [r0, #4]
 801bc76:	880b      	ldrh	r3, [r1, #0]
 801bc78:	4605      	mov	r5, r0
 801bc7a:	4413      	add	r3, r2
 801bc7c:	800b      	strh	r3, [r1, #0]
 801bc7e:	88c2      	ldrh	r2, [r0, #6]
 801bc80:	884b      	ldrh	r3, [r1, #2]
 801bc82:	4413      	add	r3, r2
 801bc84:	804b      	strh	r3, [r1, #2]
 801bc86:	1d01      	adds	r1, r0, #4
 801bc88:	4620      	mov	r0, r4
 801bc8a:	f7f9 f9ad 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 801bc8e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	dd19      	ble.n	801bcca <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801bc96:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	dd15      	ble.n	801bcca <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801bc9e:	6968      	ldr	r0, [r5, #20]
 801bca0:	b128      	cbz	r0, 801bcae <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801bca2:	6803      	ldr	r3, [r0, #0]
 801bca4:	4621      	mov	r1, r4
 801bca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bcaa:	691b      	ldr	r3, [r3, #16]
 801bcac:	4718      	bx	r3
 801bcae:	4b07      	ldr	r3, [pc, #28]	@ (801bccc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801bcb0:	681b      	ldr	r3, [r3, #0]
 801bcb2:	3304      	adds	r3, #4
 801bcb4:	429d      	cmp	r5, r3
 801bcb6:	d108      	bne.n	801bcca <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801bcb8:	f7fe fd8c 	bl	801a7d4 <_ZN8touchgfx11Application11getInstanceEv>
 801bcbc:	6803      	ldr	r3, [r0, #0]
 801bcbe:	6821      	ldr	r1, [r4, #0]
 801bcc0:	6862      	ldr	r2, [r4, #4]
 801bcc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bcc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bcc8:	4718      	bx	r3
 801bcca:	bd70      	pop	{r4, r5, r6, pc}
 801bccc:	2005bd60 	.word	0x2005bd60

0801bcd0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801bcd0:	b570      	push	{r4, r5, r6, lr}
 801bcd2:	4604      	mov	r4, r0
 801bcd4:	4616      	mov	r6, r2
 801bcd6:	460d      	mov	r5, r1
 801bcd8:	b901      	cbnz	r1, 801bcdc <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801bcda:	b192      	cbz	r2, 801bd02 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801bcdc:	6823      	ldr	r3, [r4, #0]
 801bcde:	4620      	mov	r0, r4
 801bce0:	699b      	ldr	r3, [r3, #24]
 801bce2:	4798      	blx	r3
 801bce4:	88e2      	ldrh	r2, [r4, #6]
 801bce6:	88a1      	ldrh	r1, [r4, #4]
 801bce8:	4432      	add	r2, r6
 801bcea:	4429      	add	r1, r5
 801bcec:	4620      	mov	r0, r4
 801bcee:	b212      	sxth	r2, r2
 801bcf0:	b209      	sxth	r1, r1
 801bcf2:	f7f4 fcde 	bl	80106b2 <_ZN8touchgfx8Drawable5setXYEss>
 801bcf6:	6823      	ldr	r3, [r4, #0]
 801bcf8:	4620      	mov	r0, r4
 801bcfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bcfe:	699b      	ldr	r3, [r3, #24]
 801bd00:	4718      	bx	r3
 801bd02:	bd70      	pop	{r4, r5, r6, pc}

0801bd04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801bd04:	b510      	push	{r4, lr}
 801bd06:	2300      	movs	r3, #0
 801bd08:	4604      	mov	r4, r0
 801bd0a:	4608      	mov	r0, r1
 801bd0c:	8023      	strh	r3, [r4, #0]
 801bd0e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bd12:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801bd16:	8063      	strh	r3, [r4, #2]
 801bd18:	6803      	ldr	r3, [r0, #0]
 801bd1a:	80a1      	strh	r1, [r4, #4]
 801bd1c:	80e2      	strh	r2, [r4, #6]
 801bd1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd20:	4621      	mov	r1, r4
 801bd22:	4798      	blx	r3
 801bd24:	4620      	mov	r0, r4
 801bd26:	bd10      	pop	{r4, pc}

0801bd28 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 801bd28:	4a04      	ldr	r2, [pc, #16]	@ (801bd3c <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 801bd2a:	6002      	str	r2, [r0, #0]
 801bd2c:	2200      	movs	r2, #0
 801bd2e:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801bd32:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801bd36:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801bd3a:	4770      	bx	lr
 801bd3c:	08031044 	.word	0x08031044

0801bd40 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 801bd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd44:	4604      	mov	r4, r0
 801bd46:	b087      	sub	sp, #28
 801bd48:	8b45      	ldrh	r5, [r0, #26]
 801bd4a:	f8b2 c000 	ldrh.w	ip, [r2]
 801bd4e:	9105      	str	r1, [sp, #20]
 801bd50:	68e1      	ldr	r1, [r4, #12]
 801bd52:	1c68      	adds	r0, r5, #1
 801bd54:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801bd58:	f01c 0501 	ands.w	r5, ip, #1
 801bd5c:	9203      	str	r2, [sp, #12]
 801bd5e:	b280      	uxth	r0, r0
 801bd60:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bd64:	9502      	str	r5, [sp, #8]
 801bd66:	d07d      	beq.n	801be64 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x124>
 801bd68:	ee07 2a90 	vmov	s15, r2
 801bd6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801bd70:	8360      	strh	r0, [r4, #26]
 801bd72:	edc1 6a00 	vstr	s13, [r1]
 801bd76:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801bd7a:	f04f 0e00 	mov.w	lr, #0
 801bd7e:	ee07 2a10 	vmov	s14, r2
 801bd82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bd86:	8b61      	ldrh	r1, [r4, #26]
 801bd88:	68e2      	ldr	r2, [r4, #12]
 801bd8a:	1c48      	adds	r0, r1, #1
 801bd8c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801bd90:	8360      	strh	r0, [r4, #26]
 801bd92:	ee06 ea10 	vmov	s12, lr
 801bd96:	ed82 7a00 	vstr	s14, [r2]
 801bd9a:	2501      	movs	r5, #1
 801bd9c:	8b21      	ldrh	r1, [r4, #24]
 801bd9e:	68a2      	ldr	r2, [r4, #8]
 801bda0:	1c48      	adds	r0, r1, #1
 801bda2:	8320      	strh	r0, [r4, #24]
 801bda4:	5455      	strb	r5, [r2, r1]
 801bda6:	2200      	movs	r2, #0
 801bda8:	3304      	adds	r3, #4
 801bdaa:	9300      	str	r3, [sp, #0]
 801bdac:	46aa      	mov	sl, r5
 801bdae:	ee07 2a90 	vmov	s15, r2
 801bdb2:	4613      	mov	r3, r2
 801bdb4:	4611      	mov	r1, r2
 801bdb6:	462e      	mov	r6, r5
 801bdb8:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801bdbc:	9201      	str	r2, [sp, #4]
 801bdbe:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 801bdc2:	9805      	ldr	r0, [sp, #20]
 801bdc4:	f8d4 b008 	ldr.w	fp, [r4, #8]
 801bdc8:	f108 0701 	add.w	r7, r8, #1
 801bdcc:	42a8      	cmp	r0, r5
 801bdce:	b2bf      	uxth	r7, r7
 801bdd0:	eb0b 0908 	add.w	r9, fp, r8
 801bdd4:	f340 80db 	ble.w	801bf8e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x24e>
 801bdd8:	fa4c f906 	asr.w	r9, ip, r6
 801bddc:	f009 0901 	and.w	r9, r9, #1
 801bde0:	fa5f f389 	uxtb.w	r3, r9
 801bde4:	9304      	str	r3, [sp, #16]
 801bde6:	9b00      	ldr	r3, [sp, #0]
 801bde8:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bdec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801bdf0:	f1b9 0f00 	cmp.w	r9, #0
 801bdf4:	d07d      	beq.n	801bef2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1b2>
 801bdf6:	ee05 1a10 	vmov	s10, r1
 801bdfa:	eef8 4ac5 	vcvt.f32.s32	s9, s10
 801bdfe:	ee05 3a10 	vmov	s10, r3
 801be02:	8327      	strh	r7, [r4, #24]
 801be04:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801be08:	f1ba 0f00 	cmp.w	sl, #0
 801be0c:	d050      	beq.n	801beb0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x170>
 801be0e:	f04f 0002 	mov.w	r0, #2
 801be12:	f80b 0008 	strb.w	r0, [fp, r8]
 801be16:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801be1a:	68e7      	ldr	r7, [r4, #12]
 801be1c:	f108 0901 	add.w	r9, r8, #1
 801be20:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801be24:	f8a4 901a 	strh.w	r9, [r4, #26]
 801be28:	edc7 4a00 	vstr	s9, [r7]
 801be2c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801be30:	68e7      	ldr	r7, [r4, #12]
 801be32:	f108 0901 	add.w	r9, r8, #1
 801be36:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801be3a:	f8a4 901a 	strh.w	r9, [r4, #26]
 801be3e:	ed87 5a00 	vstr	s10, [r7]
 801be42:	3601      	adds	r6, #1
 801be44:	2e10      	cmp	r6, #16
 801be46:	d106      	bne.n	801be56 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x116>
 801be48:	9e01      	ldr	r6, [sp, #4]
 801be4a:	9803      	ldr	r0, [sp, #12]
 801be4c:	3601      	adds	r6, #1
 801be4e:	9601      	str	r6, [sp, #4]
 801be50:	f830 c016 	ldrh.w	ip, [r0, r6, lsl #1]
 801be54:	2600      	movs	r6, #0
 801be56:	9800      	ldr	r0, [sp, #0]
 801be58:	3501      	adds	r5, #1
 801be5a:	3004      	adds	r0, #4
 801be5c:	9000      	str	r0, [sp, #0]
 801be5e:	f8dd a010 	ldr.w	sl, [sp, #16]
 801be62:	e7ac      	b.n	801bdbe <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x7e>
 801be64:	ee06 2a10 	vmov	s12, r2
 801be68:	ee16 5a10 	vmov	r5, s12
 801be6c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801be70:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801be74:	442a      	add	r2, r5
 801be76:	ee06 2a90 	vmov	s13, r2
 801be7a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801be7e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801be82:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801be86:	4472      	add	r2, lr
 801be88:	ee07 2a10 	vmov	s14, r2
 801be8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801be90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be94:	8360      	strh	r0, [r4, #26]
 801be96:	edc1 6a00 	vstr	s13, [r1]
 801be9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801be9e:	8b61      	ldrh	r1, [r4, #26]
 801bea0:	68e2      	ldr	r2, [r4, #12]
 801bea2:	1c48      	adds	r0, r1, #1
 801bea4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801bea8:	8360      	strh	r0, [r4, #26]
 801beaa:	ed82 7a00 	vstr	s14, [r2]
 801beae:	e774      	b.n	801bd9a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x5a>
 801beb0:	f04f 0005 	mov.w	r0, #5
 801beb4:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 801beb8:	f80b 0008 	strb.w	r0, [fp, r8]
 801bebc:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801bec0:	68e7      	ldr	r7, [r4, #12]
 801bec2:	f108 0901 	add.w	r9, r8, #1
 801bec6:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801beca:	f8a4 901a 	strh.w	r9, [r4, #26]
 801bece:	ed87 4a00 	vstr	s8, [r7]
 801bed2:	ee04 2a10 	vmov	s8, r2
 801bed6:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801beda:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801bede:	68e7      	ldr	r7, [r4, #12]
 801bee0:	f108 0901 	add.w	r9, r8, #1
 801bee4:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801bee8:	f8a4 901a 	strh.w	r9, [r4, #26]
 801beec:	ed87 4a00 	vstr	s8, [r7]
 801bef0:	e791      	b.n	801be16 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xd6>
 801bef2:	f1ba 0f00 	cmp.w	sl, #0
 801bef6:	d146      	bne.n	801bf86 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x246>
 801bef8:	f04f 0005 	mov.w	r0, #5
 801befc:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801bf00:	8327      	strh	r7, [r4, #24]
 801bf02:	f80b 0008 	strb.w	r0, [fp, r8]
 801bf06:	ee17 0a90 	vmov	r0, s15
 801bf0a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801bf0e:	68e7      	ldr	r7, [r4, #12]
 801bf10:	f108 0901 	add.w	r9, r8, #1
 801bf14:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801bf18:	f8a4 901a 	strh.w	r9, [r4, #26]
 801bf1c:	ed87 5a00 	vstr	s10, [r7]
 801bf20:	ee05 2a10 	vmov	s10, r2
 801bf24:	4408      	add	r0, r1
 801bf26:	ee07 0a90 	vmov	s15, r0
 801bf2a:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801bf2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bf32:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801bf36:	68e7      	ldr	r7, [r4, #12]
 801bf38:	f108 0901 	add.w	r9, r8, #1
 801bf3c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801bf40:	f8a4 901a 	strh.w	r9, [r4, #26]
 801bf44:	ed87 5a00 	vstr	s10, [r7]
 801bf48:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801bf4c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801bf50:	68e7      	ldr	r7, [r4, #12]
 801bf52:	f108 0901 	add.w	r9, r8, #1
 801bf56:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801bf5a:	441a      	add	r2, r3
 801bf5c:	f8a4 901a 	strh.w	r9, [r4, #26]
 801bf60:	edc7 7a00 	vstr	s15, [r7]
 801bf64:	ee07 2a90 	vmov	s15, r2
 801bf68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bf6c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801bf70:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801bf74:	68e7      	ldr	r7, [r4, #12]
 801bf76:	f108 0901 	add.w	r9, r8, #1
 801bf7a:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801bf7e:	f8a4 901a 	strh.w	r9, [r4, #26]
 801bf82:	edc7 7a00 	vstr	s15, [r7]
 801bf86:	461a      	mov	r2, r3
 801bf88:	ee07 1a90 	vmov	s15, r1
 801bf8c:	e759      	b.n	801be42 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 801bf8e:	f1ba 0f00 	cmp.w	sl, #0
 801bf92:	d045      	beq.n	801c020 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 801bf94:	ee05 1a90 	vmov	s11, r1
 801bf98:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801bf9c:	eef4 5a66 	vcmp.f32	s11, s13
 801bfa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bfa4:	d108      	bne.n	801bfb8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x278>
 801bfa6:	ee05 3a90 	vmov	s11, r3
 801bfaa:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801bfae:	eef4 5a47 	vcmp.f32	s11, s14
 801bfb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bfb6:	d033      	beq.n	801c020 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 801bfb8:	9b02      	ldr	r3, [sp, #8]
 801bfba:	8327      	strh	r7, [r4, #24]
 801bfbc:	b1b3      	cbz	r3, 801bfec <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2ac>
 801bfbe:	2302      	movs	r3, #2
 801bfc0:	f889 3000 	strb.w	r3, [r9]
 801bfc4:	8b62      	ldrh	r2, [r4, #26]
 801bfc6:	68e3      	ldr	r3, [r4, #12]
 801bfc8:	1c51      	adds	r1, r2, #1
 801bfca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801bfce:	8361      	strh	r1, [r4, #26]
 801bfd0:	edc3 6a00 	vstr	s13, [r3]
 801bfd4:	8b62      	ldrh	r2, [r4, #26]
 801bfd6:	68e3      	ldr	r3, [r4, #12]
 801bfd8:	1c51      	adds	r1, r2, #1
 801bfda:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801bfde:	8361      	strh	r1, [r4, #26]
 801bfe0:	ed83 7a00 	vstr	s14, [r3]
 801bfe4:	9800      	ldr	r0, [sp, #0]
 801bfe6:	b007      	add	sp, #28
 801bfe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfec:	2305      	movs	r3, #5
 801bfee:	f889 3000 	strb.w	r3, [r9]
 801bff2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801bff6:	ee07 ea90 	vmov	s15, lr
 801bffa:	8b62      	ldrh	r2, [r4, #26]
 801bffc:	68e3      	ldr	r3, [r4, #12]
 801bffe:	1c51      	adds	r1, r2, #1
 801c000:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801c004:	8361      	strh	r1, [r4, #26]
 801c006:	ed83 6a00 	vstr	s12, [r3]
 801c00a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c00e:	8b62      	ldrh	r2, [r4, #26]
 801c010:	68e3      	ldr	r3, [r4, #12]
 801c012:	1c51      	adds	r1, r2, #1
 801c014:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801c018:	8361      	strh	r1, [r4, #26]
 801c01a:	edc3 7a00 	vstr	s15, [r3]
 801c01e:	e7d1      	b.n	801bfc4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 801c020:	ee05 2a90 	vmov	s11, r2
 801c024:	2305      	movs	r3, #5
 801c026:	9902      	ldr	r1, [sp, #8]
 801c028:	8327      	strh	r7, [r4, #24]
 801c02a:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801c02e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801c032:	f889 3000 	strb.w	r3, [r9]
 801c036:	b181      	cbz	r1, 801c05a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x31a>
 801c038:	8b62      	ldrh	r2, [r4, #26]
 801c03a:	68e3      	ldr	r3, [r4, #12]
 801c03c:	1c51      	adds	r1, r2, #1
 801c03e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801c042:	8361      	strh	r1, [r4, #26]
 801c044:	ed83 5a00 	vstr	s10, [r3]
 801c048:	8b62      	ldrh	r2, [r4, #26]
 801c04a:	68e3      	ldr	r3, [r4, #12]
 801c04c:	1c51      	adds	r1, r2, #1
 801c04e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801c052:	8361      	strh	r1, [r4, #26]
 801c054:	edc3 5a00 	vstr	s11, [r3]
 801c058:	e7b4      	b.n	801bfc4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 801c05a:	8b65      	ldrh	r5, [r4, #26]
 801c05c:	68e1      	ldr	r1, [r4, #12]
 801c05e:	1c6e      	adds	r6, r5, #1
 801c060:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801c064:	8366      	strh	r6, [r4, #26]
 801c066:	ed81 5a00 	vstr	s10, [r1]
 801c06a:	8b65      	ldrh	r5, [r4, #26]
 801c06c:	68e1      	ldr	r1, [r4, #12]
 801c06e:	1c6e      	adds	r6, r5, #1
 801c070:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801c074:	8366      	strh	r6, [r4, #26]
 801c076:	edc1 5a00 	vstr	s11, [r1]
 801c07a:	8b65      	ldrh	r5, [r4, #26]
 801c07c:	68e1      	ldr	r1, [r4, #12]
 801c07e:	1c6e      	adds	r6, r5, #1
 801c080:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801c084:	ee17 0a90 	vmov	r0, s15
 801c088:	ee16 5a10 	vmov	r5, s12
 801c08c:	4428      	add	r0, r5
 801c08e:	ee07 0a90 	vmov	s15, r0
 801c092:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801c096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c09a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801c09e:	4472      	add	r2, lr
 801c0a0:	8366      	strh	r6, [r4, #26]
 801c0a2:	edc1 7a00 	vstr	s15, [r1]
 801c0a6:	ee07 2a90 	vmov	s15, r2
 801c0aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c0ae:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801c0b2:	8b61      	ldrh	r1, [r4, #26]
 801c0b4:	68e5      	ldr	r5, [r4, #12]
 801c0b6:	1c4e      	adds	r6, r1, #1
 801c0b8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801c0bc:	8366      	strh	r6, [r4, #26]
 801c0be:	edc1 7a00 	vstr	s15, [r1]
 801c0c2:	8b22      	ldrh	r2, [r4, #24]
 801c0c4:	68a1      	ldr	r1, [r4, #8]
 801c0c6:	1c55      	adds	r5, r2, #1
 801c0c8:	8325      	strh	r5, [r4, #24]
 801c0ca:	548b      	strb	r3, [r1, r2]
 801c0cc:	e791      	b.n	801bff2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2b2>
	...

0801c0d0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 801c0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c0d4:	b08e      	sub	sp, #56	@ 0x38
 801c0d6:	4604      	mov	r4, r0
 801c0d8:	4688      	mov	r8, r1
 801c0da:	4615      	mov	r5, r2
 801c0dc:	4699      	mov	r9, r3
 801c0de:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801c0e0:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 801c0e4:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801c0e6:	f7f8 fc93 	bl	8014a10 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 801c0ea:	6060      	str	r0, [r4, #4]
 801c0ec:	f1b9 0f00 	cmp.w	r9, #0
 801c0f0:	f000 80e8 	beq.w	801c2c4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801c0f4:	2800      	cmp	r0, #0
 801c0f6:	f000 80e5 	beq.w	801c2c4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801c0fa:	a805      	add	r0, sp, #20
 801c0fc:	f000 f8f9 	bl	801c2f2 <_ZN8touchgfx9Matrix3x3C1Ev>
 801c100:	6833      	ldr	r3, [r6, #0]
 801c102:	4630      	mov	r0, r6
 801c104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c106:	4798      	blx	r3
 801c108:	a805      	add	r0, sp, #20
 801c10a:	eef0 0a40 	vmov.f32	s1, s0
 801c10e:	f000 f8f4 	bl	801c2fa <_ZN8touchgfx9Matrix3x35scaleEff>
 801c112:	6860      	ldr	r0, [r4, #4]
 801c114:	f1ba 0f03 	cmp.w	sl, #3
 801c118:	d83b      	bhi.n	801c192 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801c11a:	e8df f00a 	tbb	[pc, sl]
 801c11e:	1002      	.short	0x1002
 801c120:	9f71      	.short	0x9f71
 801c122:	6803      	ldr	r3, [r0, #0]
 801c124:	462a      	mov	r2, r5
 801c126:	689b      	ldr	r3, [r3, #8]
 801c128:	4641      	mov	r1, r8
 801c12a:	4798      	blx	r3
 801c12c:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801c130:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801c134:	ee07 7a90 	vmov	s15, r7
 801c138:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801c13c:	e026      	b.n	801c18c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801c13e:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801c142:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801c146:	8869      	ldrh	r1, [r5, #2]
 801c148:	1a9b      	subs	r3, r3, r2
 801c14a:	1a5b      	subs	r3, r3, r1
 801c14c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c150:	882b      	ldrh	r3, [r5, #0]
 801c152:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c156:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c15a:	88ab      	ldrh	r3, [r5, #4]
 801c15c:	aa03      	add	r2, sp, #12
 801c15e:	f8ad 3012 	strh.w	r3, [sp, #18]
 801c162:	6803      	ldr	r3, [r0, #0]
 801c164:	4641      	mov	r1, r8
 801c166:	689b      	ldr	r3, [r3, #8]
 801c168:	4798      	blx	r3
 801c16a:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 801c2cc <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 801c16e:	a805      	add	r0, sp, #20
 801c170:	f000 f8e8 	bl	801c344 <_ZN8touchgfx9Matrix3x36rotateEf>
 801c174:	ee07 7a90 	vmov	s15, r7
 801c178:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801c17c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c17e:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801c182:	1a9b      	subs	r3, r3, r2
 801c184:	ee00 3a10 	vmov	s0, r3
 801c188:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801c18c:	a805      	add	r0, sp, #20
 801c18e:	f000 f927 	bl	801c3e0 <_ZN8touchgfx9Matrix3x39translateEff>
 801c192:	2500      	movs	r5, #0
 801c194:	6860      	ldr	r0, [r4, #4]
 801c196:	a905      	add	r1, sp, #20
 801c198:	6803      	ldr	r3, [r0, #0]
 801c19a:	f109 0602 	add.w	r6, r9, #2
 801c19e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c1a0:	4798      	blx	r3
 801c1a2:	6860      	ldr	r0, [r4, #4]
 801c1a4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801c1a6:	6803      	ldr	r3, [r0, #0]
 801c1a8:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 801c1ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c1ae:	4798      	blx	r3
 801c1b0:	6860      	ldr	r0, [r4, #4]
 801c1b2:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 801c1b6:	6803      	ldr	r3, [r0, #0]
 801c1b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c1ba:	4798      	blx	r3
 801c1bc:	6860      	ldr	r0, [r4, #4]
 801c1be:	2101      	movs	r1, #1
 801c1c0:	6803      	ldr	r3, [r0, #0]
 801c1c2:	68db      	ldr	r3, [r3, #12]
 801c1c4:	4798      	blx	r3
 801c1c6:	f8b9 7000 	ldrh.w	r7, [r9]
 801c1ca:	f104 0310 	add.w	r3, r4, #16
 801c1ce:	61a5      	str	r5, [r4, #24]
 801c1d0:	f104 0208 	add.w	r2, r4, #8
 801c1d4:	f104 0114 	add.w	r1, r4, #20
 801c1d8:	f104 000c 	add.w	r0, r4, #12
 801c1dc:	f7f3 fc28 	bl	800fa30 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 801c1e0:	42af      	cmp	r7, r5
 801c1e2:	dd60      	ble.n	801c2a6 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 801c1e4:	8831      	ldrh	r1, [r6, #0]
 801c1e6:	1cb2      	adds	r2, r6, #2
 801c1e8:	f101 030f 	add.w	r3, r1, #15
 801c1ec:	f3c3 1307 	ubfx	r3, r3, #4, #8
 801c1f0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c1f4:	4620      	mov	r0, r4
 801c1f6:	f7ff fda3 	bl	801bd40 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 801c1fa:	3501      	adds	r5, #1
 801c1fc:	4606      	mov	r6, r0
 801c1fe:	e7ef      	b.n	801c1e0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 801c200:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801c204:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801c208:	8829      	ldrh	r1, [r5, #0]
 801c20a:	1a9b      	subs	r3, r3, r2
 801c20c:	1a5b      	subs	r3, r3, r1
 801c20e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c212:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c216:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801c21a:	886d      	ldrh	r5, [r5, #2]
 801c21c:	1a5b      	subs	r3, r3, r1
 801c21e:	1b5b      	subs	r3, r3, r5
 801c220:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c224:	f8ad 1012 	strh.w	r1, [sp, #18]
 801c228:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c22c:	6803      	ldr	r3, [r0, #0]
 801c22e:	aa03      	add	r2, sp, #12
 801c230:	689b      	ldr	r3, [r3, #8]
 801c232:	4641      	mov	r1, r8
 801c234:	4798      	blx	r3
 801c236:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 801c2d0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801c23a:	a805      	add	r0, sp, #20
 801c23c:	f000 f882 	bl	801c344 <_ZN8touchgfx9Matrix3x36rotateEf>
 801c240:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801c244:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c246:	1a9b      	subs	r3, r3, r2
 801c248:	ee00 3a90 	vmov	s1, r3
 801c24c:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801c250:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801c254:	1bdb      	subs	r3, r3, r7
 801c256:	ee00 3a10 	vmov	s0, r3
 801c25a:	e795      	b.n	801c188 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 801c25c:	886b      	ldrh	r3, [r5, #2]
 801c25e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801c262:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c266:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801c26a:	8829      	ldrh	r1, [r5, #0]
 801c26c:	1a9b      	subs	r3, r3, r2
 801c26e:	1a5b      	subs	r3, r3, r1
 801c270:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c274:	88eb      	ldrh	r3, [r5, #6]
 801c276:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c27a:	f8ad 3010 	strh.w	r3, [sp, #16]
 801c27e:	6803      	ldr	r3, [r0, #0]
 801c280:	aa03      	add	r2, sp, #12
 801c282:	689b      	ldr	r3, [r3, #8]
 801c284:	4641      	mov	r1, r8
 801c286:	4798      	blx	r3
 801c288:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 801c2d4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 801c28c:	a805      	add	r0, sp, #20
 801c28e:	f000 f859 	bl	801c344 <_ZN8touchgfx9Matrix3x36rotateEf>
 801c292:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801c296:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801c29a:	1bdb      	subs	r3, r3, r7
 801c29c:	ee00 3a90 	vmov	s1, r3
 801c2a0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801c2a4:	e748      	b.n	801c138 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 801c2a6:	2100      	movs	r1, #0
 801c2a8:	6860      	ldr	r0, [r4, #4]
 801c2aa:	8b22      	ldrh	r2, [r4, #24]
 801c2ac:	6803      	ldr	r3, [r0, #0]
 801c2ae:	9101      	str	r1, [sp, #4]
 801c2b0:	8b61      	ldrh	r1, [r4, #26]
 801c2b2:	9100      	str	r1, [sp, #0]
 801c2b4:	6a1d      	ldr	r5, [r3, #32]
 801c2b6:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801c2ba:	47a8      	blx	r5
 801c2bc:	6860      	ldr	r0, [r4, #4]
 801c2be:	6803      	ldr	r3, [r0, #0]
 801c2c0:	69db      	ldr	r3, [r3, #28]
 801c2c2:	4798      	blx	r3
 801c2c4:	b00e      	add	sp, #56	@ 0x38
 801c2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c2ca:	bf00      	nop
 801c2cc:	42b40000 	.word	0x42b40000
 801c2d0:	43340000 	.word	0x43340000
 801c2d4:	43870000 	.word	0x43870000

0801c2d8 <_ZN8touchgfx9Matrix3x35resetEv>:
 801c2d8:	2300      	movs	r3, #0
 801c2da:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801c2de:	6043      	str	r3, [r0, #4]
 801c2e0:	6002      	str	r2, [r0, #0]
 801c2e2:	6083      	str	r3, [r0, #8]
 801c2e4:	60c3      	str	r3, [r0, #12]
 801c2e6:	6102      	str	r2, [r0, #16]
 801c2e8:	6143      	str	r3, [r0, #20]
 801c2ea:	6183      	str	r3, [r0, #24]
 801c2ec:	61c3      	str	r3, [r0, #28]
 801c2ee:	6202      	str	r2, [r0, #32]
 801c2f0:	4770      	bx	lr

0801c2f2 <_ZN8touchgfx9Matrix3x3C1Ev>:
 801c2f2:	b508      	push	{r3, lr}
 801c2f4:	f7ff fff0 	bl	801c2d8 <_ZN8touchgfx9Matrix3x35resetEv>
 801c2f8:	bd08      	pop	{r3, pc}

0801c2fa <_ZN8touchgfx9Matrix3x35scaleEff>:
 801c2fa:	edd0 7a00 	vldr	s15, [r0]
 801c2fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 801c302:	edc0 7a00 	vstr	s15, [r0]
 801c306:	edd0 7a01 	vldr	s15, [r0, #4]
 801c30a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801c30e:	edc0 7a01 	vstr	s15, [r0, #4]
 801c312:	edd0 7a02 	vldr	s15, [r0, #8]
 801c316:	ee27 0a80 	vmul.f32	s0, s15, s0
 801c31a:	edd0 7a03 	vldr	s15, [r0, #12]
 801c31e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801c322:	edc0 7a03 	vstr	s15, [r0, #12]
 801c326:	edd0 7a04 	vldr	s15, [r0, #16]
 801c32a:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801c32e:	edc0 7a04 	vstr	s15, [r0, #16]
 801c332:	edd0 7a05 	vldr	s15, [r0, #20]
 801c336:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801c33a:	ed80 0a02 	vstr	s0, [r0, #8]
 801c33e:	edc0 0a05 	vstr	s1, [r0, #20]
 801c342:	4770      	bx	lr

0801c344 <_ZN8touchgfx9Matrix3x36rotateEf>:
 801c344:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801c3d8 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 801c348:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c34c:	eddf 7a23 	vldr	s15, [pc, #140]	@ 801c3dc <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 801c350:	b510      	push	{r4, lr}
 801c352:	ed2d 8b02 	vpush	{d8}
 801c356:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801c35a:	eeb0 0a68 	vmov.f32	s0, s17
 801c35e:	4604      	mov	r4, r0
 801c360:	f010 fd50 	bl	802ce04 <cosf>
 801c364:	eeb0 8a40 	vmov.f32	s16, s0
 801c368:	eeb0 0a68 	vmov.f32	s0, s17
 801c36c:	f010 fd8e 	bl	802ce8c <sinf>
 801c370:	edd4 6a03 	vldr	s13, [r4, #12]
 801c374:	edd4 4a00 	vldr	s9, [r4]
 801c378:	ee60 7a66 	vnmul.f32	s15, s0, s13
 801c37c:	ed94 7a04 	vldr	s14, [r4, #16]
 801c380:	eee8 7a24 	vfma.f32	s15, s16, s9
 801c384:	ed94 5a01 	vldr	s10, [r4, #4]
 801c388:	edc4 7a00 	vstr	s15, [r4]
 801c38c:	ee60 7a47 	vnmul.f32	s15, s0, s14
 801c390:	eee8 7a05 	vfma.f32	s15, s16, s10
 801c394:	edc4 7a01 	vstr	s15, [r4, #4]
 801c398:	edd4 7a05 	vldr	s15, [r4, #20]
 801c39c:	edd4 5a02 	vldr	s11, [r4, #8]
 801c3a0:	ee20 6a67 	vnmul.f32	s12, s0, s15
 801c3a4:	ee66 6a88 	vmul.f32	s13, s13, s16
 801c3a8:	ee27 7a08 	vmul.f32	s14, s14, s16
 801c3ac:	ee67 7a88 	vmul.f32	s15, s15, s16
 801c3b0:	eea8 6a25 	vfma.f32	s12, s16, s11
 801c3b4:	ecbd 8b02 	vpop	{d8}
 801c3b8:	eee0 6a24 	vfma.f32	s13, s0, s9
 801c3bc:	eea0 7a05 	vfma.f32	s14, s0, s10
 801c3c0:	eee0 7a25 	vfma.f32	s15, s0, s11
 801c3c4:	ed84 6a02 	vstr	s12, [r4, #8]
 801c3c8:	edc4 6a03 	vstr	s13, [r4, #12]
 801c3cc:	ed84 7a04 	vstr	s14, [r4, #16]
 801c3d0:	edc4 7a05 	vstr	s15, [r4, #20]
 801c3d4:	bd10      	pop	{r4, pc}
 801c3d6:	bf00      	nop
 801c3d8:	40490fdb 	.word	0x40490fdb
 801c3dc:	43340000 	.word	0x43340000

0801c3e0 <_ZN8touchgfx9Matrix3x39translateEff>:
 801c3e0:	ed90 6a06 	vldr	s12, [r0, #24]
 801c3e4:	edd0 7a00 	vldr	s15, [r0]
 801c3e8:	eee6 7a00 	vfma.f32	s15, s12, s0
 801c3ec:	edd0 6a07 	vldr	s13, [r0, #28]
 801c3f0:	edc0 7a00 	vstr	s15, [r0]
 801c3f4:	edd0 7a01 	vldr	s15, [r0, #4]
 801c3f8:	eee6 7a80 	vfma.f32	s15, s13, s0
 801c3fc:	ed90 7a08 	vldr	s14, [r0, #32]
 801c400:	edc0 7a01 	vstr	s15, [r0, #4]
 801c404:	edd0 7a02 	vldr	s15, [r0, #8]
 801c408:	eee7 7a00 	vfma.f32	s15, s14, s0
 801c40c:	edc0 7a02 	vstr	s15, [r0, #8]
 801c410:	edd0 7a03 	vldr	s15, [r0, #12]
 801c414:	eee6 7a20 	vfma.f32	s15, s12, s1
 801c418:	edc0 7a03 	vstr	s15, [r0, #12]
 801c41c:	edd0 7a04 	vldr	s15, [r0, #16]
 801c420:	eee6 7aa0 	vfma.f32	s15, s13, s1
 801c424:	edc0 7a04 	vstr	s15, [r0, #16]
 801c428:	edd0 7a05 	vldr	s15, [r0, #20]
 801c42c:	eee7 7a20 	vfma.f32	s15, s14, s1
 801c430:	edc0 7a05 	vstr	s15, [r0, #20]
 801c434:	4770      	bx	lr

0801c436 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 801c436:	edd0 6a01 	vldr	s13, [r0, #4]
 801c43a:	edd0 7a04 	vldr	s15, [r0, #16]
 801c43e:	ed90 7a03 	vldr	s14, [r0, #12]
 801c442:	ee60 7aa7 	vmul.f32	s15, s1, s15
 801c446:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801c44a:	edd0 6a00 	vldr	s13, [r0]
 801c44e:	eee7 7a00 	vfma.f32	s15, s14, s0
 801c452:	eee6 0a80 	vfma.f32	s1, s13, s0
 801c456:	ed90 7a05 	vldr	s14, [r0, #20]
 801c45a:	ed90 0a02 	vldr	s0, [r0, #8]
 801c45e:	ee30 0a80 	vadd.f32	s0, s1, s0
 801c462:	ee77 0a87 	vadd.f32	s1, s15, s14
 801c466:	b084      	sub	sp, #16
 801c468:	b004      	add	sp, #16
 801c46a:	4770      	bx	lr

0801c46c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801c46c:	b530      	push	{r4, r5, lr}
 801c46e:	8083      	strh	r3, [r0, #4]
 801c470:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801c474:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801c478:	80c3      	strh	r3, [r0, #6]
 801c47a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801c47e:	6141      	str	r1, [r0, #20]
 801c480:	7203      	strb	r3, [r0, #8]
 801c482:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c486:	8302      	strh	r2, [r0, #24]
 801c488:	7243      	strb	r3, [r0, #9]
 801c48a:	7a83      	ldrb	r3, [r0, #10]
 801c48c:	f365 0306 	bfi	r3, r5, #0, #7
 801c490:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801c494:	f365 13c7 	bfi	r3, r5, #7, #1
 801c498:	7283      	strb	r3, [r0, #10]
 801c49a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801c49e:	72c3      	strb	r3, [r0, #11]
 801c4a0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801c4a4:	7303      	strb	r3, [r0, #12]
 801c4a6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801c4aa:	81c3      	strh	r3, [r0, #14]
 801c4ac:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801c4b0:	8203      	strh	r3, [r0, #16]
 801c4b2:	4b01      	ldr	r3, [pc, #4]	@ (801c4b8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801c4b4:	6003      	str	r3, [r0, #0]
 801c4b6:	bd30      	pop	{r4, r5, pc}
 801c4b8:	08031058 	.word	0x08031058

0801c4bc <_ZNK8touchgfx9ConstFont4findEt>:
 801c4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c4be:	6944      	ldr	r4, [r0, #20]
 801c4c0:	b3bc      	cbz	r4, 801c532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c4c2:	88a3      	ldrh	r3, [r4, #4]
 801c4c4:	8b02      	ldrh	r2, [r0, #24]
 801c4c6:	1acb      	subs	r3, r1, r3
 801c4c8:	f102 32ff 	add.w	r2, r2, #4294967295
 801c4cc:	d431      	bmi.n	801c532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c4ce:	4293      	cmp	r3, r2
 801c4d0:	dd0c      	ble.n	801c4ec <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801c4d2:	230e      	movs	r3, #14
 801c4d4:	fb03 4302 	mla	r3, r3, r2, r4
 801c4d8:	889b      	ldrh	r3, [r3, #4]
 801c4da:	1a5b      	subs	r3, r3, r1
 801c4dc:	1ad3      	subs	r3, r2, r3
 801c4de:	429a      	cmp	r2, r3
 801c4e0:	db27      	blt.n	801c532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	bfbc      	itt	lt
 801c4e6:	2302      	movlt	r3, #2
 801c4e8:	fb92 f3f3 	sdivlt	r3, r2, r3
 801c4ec:	2500      	movs	r5, #0
 801c4ee:	260e      	movs	r6, #14
 801c4f0:	4295      	cmp	r5, r2
 801c4f2:	dc1e      	bgt.n	801c532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c4f4:	fb06 4003 	mla	r0, r6, r3, r4
 801c4f8:	8887      	ldrh	r7, [r0, #4]
 801c4fa:	42b9      	cmp	r1, r7
 801c4fc:	d01a      	beq.n	801c534 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801c4fe:	d20d      	bcs.n	801c51c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801c500:	1e5a      	subs	r2, r3, #1
 801c502:	4295      	cmp	r5, r2
 801c504:	dc15      	bgt.n	801c532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c506:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801c50a:	1a5b      	subs	r3, r3, r1
 801c50c:	1ad3      	subs	r3, r2, r3
 801c50e:	429a      	cmp	r2, r3
 801c510:	db0f      	blt.n	801c532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c512:	429d      	cmp	r5, r3
 801c514:	ddec      	ble.n	801c4f0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c516:	1953      	adds	r3, r2, r5
 801c518:	105b      	asrs	r3, r3, #1
 801c51a:	e7e9      	b.n	801c4f0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c51c:	1c5d      	adds	r5, r3, #1
 801c51e:	42aa      	cmp	r2, r5
 801c520:	db07      	blt.n	801c532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c522:	8a43      	ldrh	r3, [r0, #18]
 801c524:	1acb      	subs	r3, r1, r3
 801c526:	442b      	add	r3, r5
 801c528:	429d      	cmp	r5, r3
 801c52a:	dc02      	bgt.n	801c532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c52c:	429a      	cmp	r2, r3
 801c52e:	dadf      	bge.n	801c4f0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c530:	e7f1      	b.n	801c516 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801c532:	2000      	movs	r0, #0
 801c534:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c536 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801c536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c538:	4604      	mov	r4, r0
 801c53a:	4617      	mov	r7, r2
 801c53c:	461e      	mov	r6, r3
 801c53e:	b911      	cbnz	r1, 801c546 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801c540:	2500      	movs	r5, #0
 801c542:	4628      	mov	r0, r5
 801c544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c546:	290a      	cmp	r1, #10
 801c548:	d0fa      	beq.n	801c540 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c54a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801c54e:	4291      	cmp	r1, r2
 801c550:	d0f6      	beq.n	801c540 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c552:	f242 020b 	movw	r2, #8203	@ 0x200b
 801c556:	4291      	cmp	r1, r2
 801c558:	d0f2      	beq.n	801c540 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c55a:	f7ff ffaf 	bl	801c4bc <_ZNK8touchgfx9ConstFont4findEt>
 801c55e:	4605      	mov	r5, r0
 801c560:	b950      	cbnz	r0, 801c578 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801c562:	6823      	ldr	r3, [r4, #0]
 801c564:	4620      	mov	r0, r4
 801c566:	691b      	ldr	r3, [r3, #16]
 801c568:	4798      	blx	r3
 801c56a:	4601      	mov	r1, r0
 801c56c:	4620      	mov	r0, r4
 801c56e:	f7ff ffa5 	bl	801c4bc <_ZNK8touchgfx9ConstFont4findEt>
 801c572:	4605      	mov	r5, r0
 801c574:	2800      	cmp	r0, #0
 801c576:	d0e3      	beq.n	801c540 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c578:	6823      	ldr	r3, [r4, #0]
 801c57a:	4629      	mov	r1, r5
 801c57c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c57e:	4620      	mov	r0, r4
 801c580:	4798      	blx	r3
 801c582:	6038      	str	r0, [r7, #0]
 801c584:	6823      	ldr	r3, [r4, #0]
 801c586:	4620      	mov	r0, r4
 801c588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c58a:	4798      	blx	r3
 801c58c:	7030      	strb	r0, [r6, #0]
 801c58e:	e7d8      	b.n	801c542 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801c590 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801c590:	2000      	movs	r0, #0
 801c592:	4770      	bx	lr

0801c594 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801c594:	2001      	movs	r0, #1
 801c596:	4770      	bx	lr

0801c598 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801c598:	2002      	movs	r0, #2
 801c59a:	4770      	bx	lr

0801c59c <_ZN8touchgfx12GestureEventD1Ev>:
 801c59c:	4770      	bx	lr

0801c59e <_ZN8touchgfx9DragEventD1Ev>:
 801c59e:	4770      	bx	lr

0801c5a0 <_ZN8touchgfx10ClickEventD1Ev>:
 801c5a0:	4770      	bx	lr

0801c5a2 <_ZN8touchgfx10ClickEventD0Ev>:
 801c5a2:	b510      	push	{r4, lr}
 801c5a4:	4604      	mov	r4, r0
 801c5a6:	210c      	movs	r1, #12
 801c5a8:	f010 fbe5 	bl	802cd76 <_ZdlPvj>
 801c5ac:	4620      	mov	r0, r4
 801c5ae:	bd10      	pop	{r4, pc}

0801c5b0 <_ZN8touchgfx9DragEventD0Ev>:
 801c5b0:	b510      	push	{r4, lr}
 801c5b2:	4604      	mov	r4, r0
 801c5b4:	2110      	movs	r1, #16
 801c5b6:	f010 fbde 	bl	802cd76 <_ZdlPvj>
 801c5ba:	4620      	mov	r0, r4
 801c5bc:	bd10      	pop	{r4, pc}

0801c5be <_ZN8touchgfx12GestureEventD0Ev>:
 801c5be:	b510      	push	{r4, lr}
 801c5c0:	4604      	mov	r4, r0
 801c5c2:	210c      	movs	r1, #12
 801c5c4:	f010 fbd7 	bl	802cd76 <_ZdlPvj>
 801c5c8:	4620      	mov	r0, r4
 801c5ca:	bd10      	pop	{r4, pc}

0801c5cc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801c5cc:	b530      	push	{r4, r5, lr}
 801c5ce:	460d      	mov	r5, r1
 801c5d0:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801c5d2:	b087      	sub	sp, #28
 801c5d4:	4604      	mov	r4, r0
 801c5d6:	b301      	cbz	r1, 801c61a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801c5d8:	a801      	add	r0, sp, #4
 801c5da:	f7ff fb93 	bl	801bd04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c5de:	892a      	ldrh	r2, [r5, #8]
 801c5e0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c5e4:	7928      	ldrb	r0, [r5, #4]
 801c5e6:	1ad2      	subs	r2, r2, r3
 801c5e8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801c5ea:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c5ee:	441a      	add	r2, r3
 801c5f0:	896b      	ldrh	r3, [r5, #10]
 801c5f2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801c5f6:	f88d 0010 	strb.w	r0, [sp, #16]
 801c5fa:	1b5b      	subs	r3, r3, r5
 801c5fc:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801c5fe:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801c600:	442b      	add	r3, r5
 801c602:	4d07      	ldr	r5, [pc, #28]	@ (801c620 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801c604:	f8ad 1012 	strh.w	r1, [sp, #18]
 801c608:	9503      	str	r5, [sp, #12]
 801c60a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c60e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c612:	6803      	ldr	r3, [r0, #0]
 801c614:	a903      	add	r1, sp, #12
 801c616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c618:	4798      	blx	r3
 801c61a:	b007      	add	sp, #28
 801c61c:	bd30      	pop	{r4, r5, pc}
 801c61e:	bf00      	nop
 801c620:	080310e8 	.word	0x080310e8

0801c624 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801c624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c628:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c62a:	b08a      	sub	sp, #40	@ 0x28
 801c62c:	4604      	mov	r4, r0
 801c62e:	460d      	mov	r5, r1
 801c630:	b113      	cbz	r3, 801c638 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801c632:	790b      	ldrb	r3, [r1, #4]
 801c634:	2b00      	cmp	r3, #0
 801c636:	d044      	beq.n	801c6c2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c638:	f104 0804 	add.w	r8, r4, #4
 801c63c:	4641      	mov	r1, r8
 801c63e:	a803      	add	r0, sp, #12
 801c640:	f7ff fb60 	bl	801bd04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c644:	792b      	ldrb	r3, [r5, #4]
 801c646:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801c64a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801c64e:	b983      	cbnz	r3, 801c672 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801c650:	892a      	ldrh	r2, [r5, #8]
 801c652:	88e9      	ldrh	r1, [r5, #6]
 801c654:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801c658:	1b92      	subs	r2, r2, r6
 801c65a:	1bc9      	subs	r1, r1, r7
 801c65c:	9301      	str	r3, [sp, #4]
 801c65e:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801c662:	9300      	str	r3, [sp, #0]
 801c664:	b212      	sxth	r2, r2
 801c666:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801c66a:	b209      	sxth	r1, r1
 801c66c:	4640      	mov	r0, r8
 801c66e:	f7f8 fbdb 	bl	8014e28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801c672:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c674:	b329      	cbz	r1, 801c6c2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c676:	a805      	add	r0, sp, #20
 801c678:	f7ff fb44 	bl	801bd04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c67c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c680:	792b      	ldrb	r3, [r5, #4]
 801c682:	1abf      	subs	r7, r7, r2
 801c684:	88ea      	ldrh	r2, [r5, #6]
 801c686:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801c688:	4417      	add	r7, r2
 801c68a:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801c68c:	f88d 3020 	strb.w	r3, [sp, #32]
 801c690:	4417      	add	r7, r2
 801c692:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c696:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801c69a:	1ab6      	subs	r6, r6, r2
 801c69c:	892a      	ldrh	r2, [r5, #8]
 801c69e:	a907      	add	r1, sp, #28
 801c6a0:	4416      	add	r6, r2
 801c6a2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801c6a4:	4416      	add	r6, r2
 801c6a6:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801c6aa:	2600      	movs	r6, #0
 801c6ac:	4a06      	ldr	r2, [pc, #24]	@ (801c6c8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801c6ae:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801c6b2:	9207      	str	r2, [sp, #28]
 801c6b4:	6803      	ldr	r3, [r0, #0]
 801c6b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c6b8:	4798      	blx	r3
 801c6ba:	792b      	ldrb	r3, [r5, #4]
 801c6bc:	b10b      	cbz	r3, 801c6c2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c6be:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801c6c2:	b00a      	add	sp, #40	@ 0x28
 801c6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c6c8:	080310c0 	.word	0x080310c0

0801c6cc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801c6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c6d0:	460c      	mov	r4, r1
 801c6d2:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801c6d4:	b088      	sub	sp, #32
 801c6d6:	4605      	mov	r5, r0
 801c6d8:	2900      	cmp	r1, #0
 801c6da:	d06d      	beq.n	801c7b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801c6dc:	4668      	mov	r0, sp
 801c6de:	f7ff fb11 	bl	801bd04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c6e2:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801c6e4:	88e3      	ldrh	r3, [r4, #6]
 801c6e6:	f9bd 8000 	ldrsh.w	r8, [sp]
 801c6ea:	440b      	add	r3, r1
 801c6ec:	b21b      	sxth	r3, r3
 801c6ee:	4543      	cmp	r3, r8
 801c6f0:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801c6f4:	db31      	blt.n	801c75a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c6f6:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801c6fa:	44c4      	add	ip, r8
 801c6fc:	fa0f fc8c 	sxth.w	ip, ip
 801c700:	4563      	cmp	r3, ip
 801c702:	da2a      	bge.n	801c75a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c704:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801c706:	8926      	ldrh	r6, [r4, #8]
 801c708:	4416      	add	r6, r2
 801c70a:	b236      	sxth	r6, r6
 801c70c:	42be      	cmp	r6, r7
 801c70e:	db24      	blt.n	801c75a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c710:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801c714:	4438      	add	r0, r7
 801c716:	b200      	sxth	r0, r0
 801c718:	4286      	cmp	r6, r0
 801c71a:	da1e      	bge.n	801c75a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c71c:	8963      	ldrh	r3, [r4, #10]
 801c71e:	4419      	add	r1, r3
 801c720:	b209      	sxth	r1, r1
 801c722:	4541      	cmp	r1, r8
 801c724:	db08      	blt.n	801c738 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c726:	4561      	cmp	r1, ip
 801c728:	da06      	bge.n	801c738 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c72a:	89a3      	ldrh	r3, [r4, #12]
 801c72c:	441a      	add	r2, r3
 801c72e:	b212      	sxth	r2, r2
 801c730:	42ba      	cmp	r2, r7
 801c732:	db01      	blt.n	801c738 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c734:	4282      	cmp	r2, r0
 801c736:	db10      	blt.n	801c75a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c738:	4b21      	ldr	r3, [pc, #132]	@ (801c7c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801c73a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801c73c:	9304      	str	r3, [sp, #16]
 801c73e:	2302      	movs	r3, #2
 801c740:	f88d 3014 	strb.w	r3, [sp, #20]
 801c744:	2300      	movs	r3, #0
 801c746:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c74a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c74e:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c752:	6803      	ldr	r3, [r0, #0]
 801c754:	a904      	add	r1, sp, #16
 801c756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c758:	4798      	blx	r3
 801c75a:	1d29      	adds	r1, r5, #4
 801c75c:	a802      	add	r0, sp, #8
 801c75e:	f7ff fad1 	bl	801bd04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c762:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c766:	88e0      	ldrh	r0, [r4, #6]
 801c768:	eba3 0808 	sub.w	r8, r3, r8
 801c76c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c770:	7921      	ldrb	r1, [r4, #4]
 801c772:	1bdf      	subs	r7, r3, r7
 801c774:	b2bb      	uxth	r3, r7
 801c776:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801c77a:	fa1f f888 	uxth.w	r8, r8
 801c77e:	8922      	ldrh	r2, [r4, #8]
 801c780:	8967      	ldrh	r7, [r4, #10]
 801c782:	89a4      	ldrh	r4, [r4, #12]
 801c784:	4440      	add	r0, r8
 801c786:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801c788:	4460      	add	r0, ip
 801c78a:	441a      	add	r2, r3
 801c78c:	44b8      	add	r8, r7
 801c78e:	4423      	add	r3, r4
 801c790:	4c0c      	ldr	r4, [pc, #48]	@ (801c7c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801c792:	f8ad 0016 	strh.w	r0, [sp, #22]
 801c796:	4433      	add	r3, r6
 801c798:	4432      	add	r2, r6
 801c79a:	44e0      	add	r8, ip
 801c79c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801c79e:	f88d 1014 	strb.w	r1, [sp, #20]
 801c7a2:	9404      	str	r4, [sp, #16]
 801c7a4:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c7a8:	f8ad 801a 	strh.w	r8, [sp, #26]
 801c7ac:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c7b0:	6803      	ldr	r3, [r0, #0]
 801c7b2:	a904      	add	r1, sp, #16
 801c7b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c7b6:	4798      	blx	r3
 801c7b8:	b008      	add	sp, #32
 801c7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7be:	bf00      	nop
 801c7c0:	080310c0 	.word	0x080310c0
 801c7c4:	080310d4 	.word	0x080310d4

0801c7c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801c7c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c7ca:	4604      	mov	r4, r0
 801c7cc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801c7d0:	3201      	adds	r2, #1
 801c7d2:	d112      	bne.n	801c7fa <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801c7d4:	2500      	movs	r5, #0
 801c7d6:	9500      	str	r5, [sp, #0]
 801c7d8:	466d      	mov	r5, sp
 801c7da:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c7de:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c7e2:	6803      	ldr	r3, [r0, #0]
 801c7e4:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c7e8:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c7ec:	4629      	mov	r1, r5
 801c7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c7f0:	4798      	blx	r3
 801c7f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c7f6:	e884 0003 	stmia.w	r4, {r0, r1}
 801c7fa:	4620      	mov	r0, r4
 801c7fc:	b003      	add	sp, #12
 801c7fe:	bd30      	pop	{r4, r5, pc}

0801c800 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801c800:	b513      	push	{r0, r1, r4, lr}
 801c802:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801c806:	4604      	mov	r4, r0
 801c808:	3301      	adds	r3, #1
 801c80a:	d109      	bne.n	801c820 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801c80c:	4601      	mov	r1, r0
 801c80e:	4668      	mov	r0, sp
 801c810:	f7ff fa78 	bl	801bd04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c814:	f8bd 3000 	ldrh.w	r3, [sp]
 801c818:	8423      	strh	r3, [r4, #32]
 801c81a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c81e:	8463      	strh	r3, [r4, #34]	@ 0x22
 801c820:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801c824:	b002      	add	sp, #8
 801c826:	bd10      	pop	{r4, pc}

0801c828 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801c828:	b513      	push	{r0, r1, r4, lr}
 801c82a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801c82e:	4604      	mov	r4, r0
 801c830:	3301      	adds	r3, #1
 801c832:	d109      	bne.n	801c848 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801c834:	4601      	mov	r1, r0
 801c836:	4668      	mov	r0, sp
 801c838:	f7ff fa64 	bl	801bd04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c83c:	f8bd 3000 	ldrh.w	r3, [sp]
 801c840:	8423      	strh	r3, [r4, #32]
 801c842:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c846:	8463      	strh	r3, [r4, #34]	@ 0x22
 801c848:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801c84c:	b002      	add	sp, #8
 801c84e:	bd10      	pop	{r4, pc}

0801c850 <_ZN8touchgfx6ScreenC1Ev>:
 801c850:	b570      	push	{r4, r5, r6, lr}
 801c852:	4605      	mov	r5, r0
 801c854:	4b16      	ldr	r3, [pc, #88]	@ (801c8b0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801c856:	2101      	movs	r1, #1
 801c858:	f845 3b04 	str.w	r3, [r5], #4
 801c85c:	2300      	movs	r3, #0
 801c85e:	4604      	mov	r4, r0
 801c860:	8103      	strh	r3, [r0, #8]
 801c862:	8143      	strh	r3, [r0, #10]
 801c864:	8183      	strh	r3, [r0, #12]
 801c866:	81c3      	strh	r3, [r0, #14]
 801c868:	8203      	strh	r3, [r0, #16]
 801c86a:	8243      	strh	r3, [r0, #18]
 801c86c:	8283      	strh	r3, [r0, #20]
 801c86e:	82c3      	strh	r3, [r0, #22]
 801c870:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801c874:	6203      	str	r3, [r0, #32]
 801c876:	8483      	strh	r3, [r0, #36]	@ 0x24
 801c878:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801c87a:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801c87e:	4a0d      	ldr	r2, [pc, #52]	@ (801c8b4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801c880:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801c884:	6343      	str	r3, [r0, #52]	@ 0x34
 801c886:	4b0c      	ldr	r3, [pc, #48]	@ (801c8b8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801c888:	6042      	str	r2, [r0, #4]
 801c88a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c88e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801c890:	4a0a      	ldr	r2, [pc, #40]	@ (801c8bc <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801c892:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801c896:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801c89a:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c89e:	4628      	mov	r0, r5
 801c8a0:	4798      	blx	r3
 801c8a2:	6863      	ldr	r3, [r4, #4]
 801c8a4:	4628      	mov	r0, r5
 801c8a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c8a8:	4631      	mov	r1, r6
 801c8aa:	4798      	blx	r3
 801c8ac:	4620      	mov	r0, r4
 801c8ae:	bd70      	pop	{r4, r5, r6, pc}
 801c8b0:	080310fc 	.word	0x080310fc
 801c8b4:	08030758 	.word	0x08030758
 801c8b8:	2005bd12 	.word	0x2005bd12
 801c8bc:	2005bd10 	.word	0x2005bd10

0801c8c0 <_ZN8touchgfx6Screen4drawEv>:
 801c8c0:	b507      	push	{r0, r1, r2, lr}
 801c8c2:	2100      	movs	r1, #0
 801c8c4:	4b08      	ldr	r3, [pc, #32]	@ (801c8e8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801c8c6:	9100      	str	r1, [sp, #0]
 801c8c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c8cc:	4b07      	ldr	r3, [pc, #28]	@ (801c8ec <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801c8ce:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c8d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c8d6:	4669      	mov	r1, sp
 801c8d8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c8dc:	6803      	ldr	r3, [r0, #0]
 801c8de:	689b      	ldr	r3, [r3, #8]
 801c8e0:	4798      	blx	r3
 801c8e2:	b003      	add	sp, #12
 801c8e4:	f85d fb04 	ldr.w	pc, [sp], #4
 801c8e8:	2005bd10 	.word	0x2005bd10
 801c8ec:	2005bd12 	.word	0x2005bd12

0801c8f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801c8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8f4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c8f8:	b089      	sub	sp, #36	@ 0x24
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	4680      	mov	r8, r0
 801c8fe:	460c      	mov	r4, r1
 801c900:	4615      	mov	r5, r2
 801c902:	dd0e      	ble.n	801c922 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c904:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c908:	2b00      	cmp	r3, #0
 801c90a:	dd0a      	ble.n	801c922 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c90c:	4628      	mov	r0, r5
 801c90e:	f7ff ff5b 	bl	801c7c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c912:	4621      	mov	r1, r4
 801c914:	f7fd fe80 	bl	801a618 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c918:	69eb      	ldr	r3, [r5, #28]
 801c91a:	b928      	cbnz	r0, 801c928 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801c91c:	461d      	mov	r5, r3
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d1f4      	bne.n	801c90c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801c922:	b009      	add	sp, #36	@ 0x24
 801c924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c928:	ae04      	add	r6, sp, #16
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	f000 80b5 	beq.w	801ca9a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c930:	682b      	ldr	r3, [r5, #0]
 801c932:	4629      	mov	r1, r5
 801c934:	68db      	ldr	r3, [r3, #12]
 801c936:	a802      	add	r0, sp, #8
 801c938:	4798      	blx	r3
 801c93a:	4628      	mov	r0, r5
 801c93c:	f7ff ff60 	bl	801c800 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c940:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801c944:	4407      	add	r7, r0
 801c946:	4628      	mov	r0, r5
 801c948:	f7ff ff6e 	bl	801c828 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c94c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c950:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801c954:	4418      	add	r0, r3
 801c956:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801c95a:	4621      	mov	r1, r4
 801c95c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c960:	b23f      	sxth	r7, r7
 801c962:	4630      	mov	r0, r6
 801c964:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c968:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c96c:	f8ad 7010 	strh.w	r7, [sp, #16]
 801c970:	f7f8 fb3a 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 801c974:	4628      	mov	r0, r5
 801c976:	f7ff ff27 	bl	801c7c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c97a:	4602      	mov	r2, r0
 801c97c:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c980:	ab06      	add	r3, sp, #24
 801c982:	e883 0003 	stmia.w	r3, {r0, r1}
 801c986:	4611      	mov	r1, r2
 801c988:	4618      	mov	r0, r3
 801c98a:	f7f8 fb2d 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 801c98e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801c992:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c996:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801c99a:	4299      	cmp	r1, r3
 801c99c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801c9a0:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801c9a4:	d10b      	bne.n	801c9be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c9a6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c9aa:	4552      	cmp	r2, sl
 801c9ac:	d107      	bne.n	801c9be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c9ae:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801c9b2:	455a      	cmp	r2, fp
 801c9b4:	d103      	bne.n	801c9be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c9b6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801c9ba:	454a      	cmp	r2, r9
 801c9bc:	d06d      	beq.n	801ca9a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c9be:	f1bb 0f00 	cmp.w	fp, #0
 801c9c2:	dd65      	ble.n	801ca90 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c9c4:	f1b9 0f00 	cmp.w	r9, #0
 801c9c8:	dd62      	ble.n	801ca90 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c9ca:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c9ce:	fa1f f08a 	uxth.w	r0, sl
 801c9d2:	4552      	cmp	r2, sl
 801c9d4:	9000      	str	r0, [sp, #0]
 801c9d6:	da12      	bge.n	801c9fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801c9d8:	9301      	str	r3, [sp, #4]
 801c9da:	9b00      	ldr	r3, [sp, #0]
 801c9dc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c9e0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c9e4:	1a9a      	subs	r2, r3, r2
 801c9e6:	f8ad 1010 	strh.w	r1, [sp, #16]
 801c9ea:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c9ee:	f8ad 2016 	strh.w	r2, [sp, #22]
 801c9f2:	69ea      	ldr	r2, [r5, #28]
 801c9f4:	4631      	mov	r1, r6
 801c9f6:	4640      	mov	r0, r8
 801c9f8:	f7ff ff7a 	bl	801c8f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c9fc:	9b01      	ldr	r3, [sp, #4]
 801c9fe:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ca02:	b29f      	uxth	r7, r3
 801ca04:	429a      	cmp	r2, r3
 801ca06:	da0d      	bge.n	801ca24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801ca08:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ca0c:	1aba      	subs	r2, r7, r2
 801ca0e:	f8ad a012 	strh.w	sl, [sp, #18]
 801ca12:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ca16:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ca1a:	69ea      	ldr	r2, [r5, #28]
 801ca1c:	4631      	mov	r1, r6
 801ca1e:	4640      	mov	r0, r8
 801ca20:	f7ff ff66 	bl	801c8f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ca24:	8822      	ldrh	r2, [r4, #0]
 801ca26:	88a3      	ldrh	r3, [r4, #4]
 801ca28:	445f      	add	r7, fp
 801ca2a:	4413      	add	r3, r2
 801ca2c:	b29b      	uxth	r3, r3
 801ca2e:	b2bf      	uxth	r7, r7
 801ca30:	b23a      	sxth	r2, r7
 801ca32:	b219      	sxth	r1, r3
 801ca34:	4291      	cmp	r1, r2
 801ca36:	dd0d      	ble.n	801ca54 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801ca38:	1bdb      	subs	r3, r3, r7
 801ca3a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ca3e:	f8ad a012 	strh.w	sl, [sp, #18]
 801ca42:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ca46:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ca4a:	69ea      	ldr	r2, [r5, #28]
 801ca4c:	4631      	mov	r1, r6
 801ca4e:	4640      	mov	r0, r8
 801ca50:	f7ff ff4e 	bl	801c8f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ca54:	88e2      	ldrh	r2, [r4, #6]
 801ca56:	8863      	ldrh	r3, [r4, #2]
 801ca58:	4413      	add	r3, r2
 801ca5a:	9a00      	ldr	r2, [sp, #0]
 801ca5c:	b29b      	uxth	r3, r3
 801ca5e:	444a      	add	r2, r9
 801ca60:	fa1f f982 	uxth.w	r9, r2
 801ca64:	fa0f f289 	sxth.w	r2, r9
 801ca68:	b219      	sxth	r1, r3
 801ca6a:	428a      	cmp	r2, r1
 801ca6c:	da15      	bge.n	801ca9a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801ca6e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ca72:	f9b4 0000 	ldrsh.w	r0, [r4]
 801ca76:	eba3 0309 	sub.w	r3, r3, r9
 801ca7a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801ca7e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801ca82:	f8ad 2012 	strh.w	r2, [sp, #18]
 801ca86:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ca8a:	69ea      	ldr	r2, [r5, #28]
 801ca8c:	4631      	mov	r1, r6
 801ca8e:	e001      	b.n	801ca94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801ca90:	4621      	mov	r1, r4
 801ca92:	69ea      	ldr	r2, [r5, #28]
 801ca94:	4640      	mov	r0, r8
 801ca96:	f7ff ff2b 	bl	801c8f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ca9a:	4628      	mov	r0, r5
 801ca9c:	f7ff fe94 	bl	801c7c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801caa0:	4633      	mov	r3, r6
 801caa2:	4602      	mov	r2, r0
 801caa4:	6861      	ldr	r1, [r4, #4]
 801caa6:	6820      	ldr	r0, [r4, #0]
 801caa8:	c303      	stmia	r3!, {r0, r1}
 801caaa:	4611      	mov	r1, r2
 801caac:	4630      	mov	r0, r6
 801caae:	f7f8 fa9b 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 801cab2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	f77f af33 	ble.w	801c922 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cabc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	f77f af2e 	ble.w	801c922 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cac6:	4628      	mov	r0, r5
 801cac8:	f7ff fe9a 	bl	801c800 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801cacc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801cad0:	1a18      	subs	r0, r3, r0
 801cad2:	f8ad 0010 	strh.w	r0, [sp, #16]
 801cad6:	4628      	mov	r0, r5
 801cad8:	f7ff fea6 	bl	801c828 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801cadc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801cae0:	4631      	mov	r1, r6
 801cae2:	1a18      	subs	r0, r3, r0
 801cae4:	f8ad 0012 	strh.w	r0, [sp, #18]
 801cae8:	682b      	ldr	r3, [r5, #0]
 801caea:	4628      	mov	r0, r5
 801caec:	689b      	ldr	r3, [r3, #8]
 801caee:	4798      	blx	r3
 801caf0:	e717      	b.n	801c922 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801caf2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801caf2:	b570      	push	{r4, r5, r6, lr}
 801caf4:	2300      	movs	r3, #0
 801caf6:	460c      	mov	r4, r1
 801caf8:	b086      	sub	sp, #24
 801cafa:	1d06      	adds	r6, r0, #4
 801cafc:	4631      	mov	r1, r6
 801cafe:	4605      	mov	r5, r0
 801cb00:	a802      	add	r0, sp, #8
 801cb02:	9301      	str	r3, [sp, #4]
 801cb04:	f7ff f8fe 	bl	801bd04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cb08:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801cb0c:	8822      	ldrh	r2, [r4, #0]
 801cb0e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801cb12:	1ad2      	subs	r2, r2, r3
 801cb14:	8863      	ldrh	r3, [r4, #2]
 801cb16:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cb1a:	1a5b      	subs	r3, r3, r1
 801cb1c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801cb20:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cb24:	f8ad 0014 	strh.w	r0, [sp, #20]
 801cb28:	f8ad 1016 	strh.w	r1, [sp, #22]
 801cb2c:	aa01      	add	r2, sp, #4
 801cb2e:	a904      	add	r1, sp, #16
 801cb30:	4630      	mov	r0, r6
 801cb32:	f8ad 3012 	strh.w	r3, [sp, #18]
 801cb36:	f7f8 fb2f 	bl	8015198 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801cb3a:	9a01      	ldr	r2, [sp, #4]
 801cb3c:	b11a      	cbz	r2, 801cb46 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801cb3e:	4621      	mov	r1, r4
 801cb40:	4628      	mov	r0, r5
 801cb42:	f7ff fed5 	bl	801c8f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cb46:	b006      	add	sp, #24
 801cb48:	bd70      	pop	{r4, r5, r6, pc}

0801cb4a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801cb4a:	b530      	push	{r4, r5, lr}
 801cb4c:	4602      	mov	r2, r0
 801cb4e:	b085      	sub	sp, #20
 801cb50:	460d      	mov	r5, r1
 801cb52:	466b      	mov	r3, sp
 801cb54:	4604      	mov	r4, r0
 801cb56:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801cb5a:	6851      	ldr	r1, [r2, #4]
 801cb5c:	c303      	stmia	r3!, {r0, r1}
 801cb5e:	4629      	mov	r1, r5
 801cb60:	4668      	mov	r0, sp
 801cb62:	f7f8 fa41 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 801cb66:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801cb6a:	b12b      	cbz	r3, 801cb78 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801cb6c:	4669      	mov	r1, sp
 801cb6e:	4620      	mov	r0, r4
 801cb70:	f7ff ffbf 	bl	801caf2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801cb74:	b005      	add	sp, #20
 801cb76:	bd30      	pop	{r4, r5, pc}
 801cb78:	3404      	adds	r4, #4
 801cb7a:	4621      	mov	r1, r4
 801cb7c:	a802      	add	r0, sp, #8
 801cb7e:	f7ff f8c1 	bl	801bd04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cb82:	f8bd 3000 	ldrh.w	r3, [sp]
 801cb86:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801cb8a:	4669      	mov	r1, sp
 801cb8c:	1a9b      	subs	r3, r3, r2
 801cb8e:	f8ad 3000 	strh.w	r3, [sp]
 801cb92:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801cb96:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cb9a:	4620      	mov	r0, r4
 801cb9c:	1a9b      	subs	r3, r3, r2
 801cb9e:	f8ad 3002 	strh.w	r3, [sp, #2]
 801cba2:	f7f8 fac0 	bl	8015126 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801cba6:	e7e5      	b.n	801cb74 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801cba8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801cba8:	460b      	mov	r3, r1
 801cbaa:	680a      	ldr	r2, [r1, #0]
 801cbac:	1d01      	adds	r1, r0, #4
 801cbae:	6992      	ldr	r2, [r2, #24]
 801cbb0:	4618      	mov	r0, r3
 801cbb2:	4710      	bx	r2

0801cbb4 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>:
 801cbb4:	4298      	cmp	r0, r3
 801cbb6:	d200      	bcs.n	801cbba <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x6>
 801cbb8:	b913      	cbnz	r3, 801cbc0 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0xc>
 801cbba:	440a      	add	r2, r1
 801cbbc:	b210      	sxth	r0, r2
 801cbbe:	4770      	bx	lr
 801cbc0:	ee07 0a90 	vmov	s15, r0
 801cbc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cbc8:	ee07 3a90 	vmov	s15, r3
 801cbcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cbd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cbd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cbd8:	ee07 2a90 	vmov	s15, r2
 801cbdc:	ee37 7a66 	vsub.f32	s14, s14, s13
 801cbe0:	eddf 4a11 	vldr	s9, [pc, #68]	@ 801cc28 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x74>
 801cbe4:	eddf 5a11 	vldr	s11, [pc, #68]	@ 801cc2c <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x78>
 801cbe8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801cbec:	ee27 5a07 	vmul.f32	s10, s14, s14
 801cbf0:	eee7 5a24 	vfma.f32	s11, s14, s9
 801cbf4:	ee07 1a90 	vmov	s15, r1
 801cbf8:	eee5 6a25 	vfma.f32	s13, s10, s11
 801cbfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cc00:	eee6 7a26 	vfma.f32	s15, s12, s13
 801cc04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cc08:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801cc0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc10:	bfcc      	ite	gt
 801cc12:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801cc16:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801cc1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cc1e:	ee17 3a90 	vmov	r3, s15
 801cc22:	b218      	sxth	r0, r3
 801cc24:	4770      	bx	lr
 801cc26:	bf00      	nop
 801cc28:	402ce6b0 	.word	0x402ce6b0
 801cc2c:	3fd9cd60 	.word	0x3fd9cd60

0801cc30 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801cc30:	4298      	cmp	r0, r3
 801cc32:	d200      	bcs.n	801cc36 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801cc34:	b913      	cbnz	r3, 801cc3c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801cc36:	440a      	add	r2, r1
 801cc38:	b210      	sxth	r0, r2
 801cc3a:	4770      	bx	lr
 801cc3c:	ee07 0a90 	vmov	s15, r0
 801cc40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cc44:	ee07 3a90 	vmov	s15, r3
 801cc48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cc4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cc50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cc54:	ee07 2a90 	vmov	s15, r2
 801cc58:	ee37 7a66 	vsub.f32	s14, s14, s13
 801cc5c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801cc60:	ee67 5a07 	vmul.f32	s11, s14, s14
 801cc64:	ee07 1a90 	vmov	s15, r1
 801cc68:	eee5 6a87 	vfma.f32	s13, s11, s14
 801cc6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cc70:	eee6 7a26 	vfma.f32	s15, s12, s13
 801cc74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cc78:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801cc7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc80:	bfcc      	ite	gt
 801cc82:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801cc86:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801cc8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cc8e:	ee17 3a90 	vmov	r3, s15
 801cc92:	b218      	sxth	r0, r3
 801cc94:	4770      	bx	lr

0801cc96 <_ZN8touchgfx15EasingEquations14cubicEaseInOutEtsst>:
 801cc96:	4298      	cmp	r0, r3
 801cc98:	d200      	bcs.n	801cc9c <_ZN8touchgfx15EasingEquations14cubicEaseInOutEtsst+0x6>
 801cc9a:	b913      	cbnz	r3, 801cca2 <_ZN8touchgfx15EasingEquations14cubicEaseInOutEtsst+0xc>
 801cc9c:	440a      	add	r2, r1
 801cc9e:	b210      	sxth	r0, r2
 801cca0:	4770      	bx	lr
 801cca2:	ee07 0a90 	vmov	s15, r0
 801cca6:	ee07 3a10 	vmov	s14, r3
 801ccaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ccae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ccb2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801ccb6:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801ccba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801ccbe:	eef4 6ae5 	vcmpe.f32	s13, s11
 801ccc2:	ee07 2a90 	vmov	s15, r2
 801ccc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccca:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801ccce:	bf58      	it	pl
 801ccd0:	eef0 5a00 	vmovpl.f32	s11, #0	@ 0x40000000  2.0
 801ccd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ccd8:	bf58      	it	pl
 801ccda:	ee76 6ae5 	vsubpl.f32	s13, s13, s11
 801ccde:	ee27 7a06 	vmul.f32	s14, s14, s12
 801cce2:	bf54      	ite	pl
 801cce4:	ee26 5aa6 	vmulpl.f32	s10, s13, s13
 801cce8:	ee26 7a87 	vmulmi.f32	s14, s13, s14
 801ccec:	ee07 1a90 	vmov	s15, r1
 801ccf0:	bf48      	it	mi
 801ccf2:	ee27 7a26 	vmulmi.f32	s14, s14, s13
 801ccf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ccfa:	bf56      	itet	pl
 801ccfc:	eee5 5a26 	vfmapl.f32	s11, s10, s13
 801cd00:	eee7 7a26 	vfmami.f32	s15, s14, s13
 801cd04:	eee5 7a87 	vfmapl.f32	s15, s11, s14
 801cd08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cd0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd10:	bfcc      	ite	gt
 801cd12:	ee77 7a86 	vaddgt.f32	s15, s15, s12
 801cd16:	ee77 7ac6 	vsuble.f32	s15, s15, s12
 801cd1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cd1e:	ee17 3a90 	vmov	r3, s15
 801cd22:	b218      	sxth	r0, r3
 801cd24:	4770      	bx	lr

0801cd26 <_ZN8touchgfx12TextProviderC1Ev>:
 801cd26:	b538      	push	{r3, r4, r5, lr}
 801cd28:	2500      	movs	r5, #0
 801cd2a:	2302      	movs	r3, #2
 801cd2c:	4604      	mov	r4, r0
 801cd2e:	e9c0 5500 	strd	r5, r5, [r0]
 801cd32:	7403      	strb	r3, [r0, #16]
 801cd34:	6145      	str	r5, [r0, #20]
 801cd36:	7605      	strb	r5, [r0, #24]
 801cd38:	83c5      	strh	r5, [r0, #30]
 801cd3a:	8405      	strh	r5, [r0, #32]
 801cd3c:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801cd3e:	8705      	strh	r5, [r0, #56]	@ 0x38
 801cd40:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801cd42:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801cd46:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801cd4a:	220e      	movs	r2, #14
 801cd4c:	4629      	mov	r1, r5
 801cd4e:	304c      	adds	r0, #76	@ 0x4c
 801cd50:	f011 fa12 	bl	802e178 <memset>
 801cd54:	2301      	movs	r3, #1
 801cd56:	4620      	mov	r0, r4
 801cd58:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801cd5c:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801cd60:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801cd64:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801cd68:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801cd6c:	f7f4 fec6 	bl	8011afc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801cd70:	4620      	mov	r0, r4
 801cd72:	bd38      	pop	{r3, r4, r5, pc}

0801cd74 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801cd74:	b530      	push	{r4, r5, lr}
 801cd76:	2500      	movs	r5, #0
 801cd78:	2401      	movs	r4, #1
 801cd7a:	6843      	ldr	r3, [r0, #4]
 801cd7c:	b913      	cbnz	r3, 801cd84 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801cd7e:	6803      	ldr	r3, [r0, #0]
 801cd80:	b313      	cbz	r3, 801cdc8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801cd82:	6043      	str	r3, [r0, #4]
 801cd84:	7e03      	ldrb	r3, [r0, #24]
 801cd86:	b143      	cbz	r3, 801cd9a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801cd88:	6943      	ldr	r3, [r0, #20]
 801cd8a:	b12b      	cbz	r3, 801cd98 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801cd8c:	881a      	ldrh	r2, [r3, #0]
 801cd8e:	b11a      	cbz	r2, 801cd98 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801cd90:	1c9a      	adds	r2, r3, #2
 801cd92:	6142      	str	r2, [r0, #20]
 801cd94:	8818      	ldrh	r0, [r3, #0]
 801cd96:	bd30      	pop	{r4, r5, pc}
 801cd98:	7605      	strb	r5, [r0, #24]
 801cd9a:	6843      	ldr	r3, [r0, #4]
 801cd9c:	8819      	ldrh	r1, [r3, #0]
 801cd9e:	b199      	cbz	r1, 801cdc8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801cda0:	1c9a      	adds	r2, r3, #2
 801cda2:	2902      	cmp	r1, #2
 801cda4:	6042      	str	r2, [r0, #4]
 801cda6:	d1f5      	bne.n	801cd94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801cda8:	7c03      	ldrb	r3, [r0, #16]
 801cdaa:	2b01      	cmp	r3, #1
 801cdac:	d8e5      	bhi.n	801cd7a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cdae:	1c5a      	adds	r2, r3, #1
 801cdb0:	7402      	strb	r2, [r0, #16]
 801cdb2:	3302      	adds	r3, #2
 801cdb4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801cdb8:	6143      	str	r3, [r0, #20]
 801cdba:	2b00      	cmp	r3, #0
 801cdbc:	d0dd      	beq.n	801cd7a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cdbe:	881b      	ldrh	r3, [r3, #0]
 801cdc0:	2b00      	cmp	r3, #0
 801cdc2:	d0da      	beq.n	801cd7a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cdc4:	7604      	strb	r4, [r0, #24]
 801cdc6:	e7d8      	b.n	801cd7a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cdc8:	2000      	movs	r0, #0
 801cdca:	e7e4      	b.n	801cd96 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801cdcc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801cdcc:	6001      	str	r1, [r0, #0]
 801cdce:	2100      	movs	r1, #0
 801cdd0:	b430      	push	{r4, r5}
 801cdd2:	6041      	str	r1, [r0, #4]
 801cdd4:	6815      	ldr	r5, [r2, #0]
 801cdd6:	6085      	str	r5, [r0, #8]
 801cdd8:	6852      	ldr	r2, [r2, #4]
 801cdda:	6443      	str	r3, [r0, #68]	@ 0x44
 801cddc:	9b02      	ldr	r3, [sp, #8]
 801cdde:	60c2      	str	r2, [r0, #12]
 801cde0:	7401      	strb	r1, [r0, #16]
 801cde2:	6141      	str	r1, [r0, #20]
 801cde4:	7601      	strb	r1, [r0, #24]
 801cde6:	8701      	strh	r1, [r0, #56]	@ 0x38
 801cde8:	8401      	strh	r1, [r0, #32]
 801cdea:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801cdee:	6483      	str	r3, [r0, #72]	@ 0x48
 801cdf0:	bc30      	pop	{r4, r5}
 801cdf2:	f7f4 be83 	b.w	8011afc <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801cdf6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801cdf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cdf8:	4605      	mov	r5, r0
 801cdfa:	4608      	mov	r0, r1
 801cdfc:	b1e9      	cbz	r1, 801ce3a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801cdfe:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801ce02:	460b      	mov	r3, r1
 801ce04:	4622      	mov	r2, r4
 801ce06:	f101 0708 	add.w	r7, r1, #8
 801ce0a:	4626      	mov	r6, r4
 801ce0c:	6818      	ldr	r0, [r3, #0]
 801ce0e:	6859      	ldr	r1, [r3, #4]
 801ce10:	3308      	adds	r3, #8
 801ce12:	c603      	stmia	r6!, {r0, r1}
 801ce14:	42bb      	cmp	r3, r7
 801ce16:	4634      	mov	r4, r6
 801ce18:	d1f7      	bne.n	801ce0a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801ce1a:	6818      	ldr	r0, [r3, #0]
 801ce1c:	6030      	str	r0, [r6, #0]
 801ce1e:	4610      	mov	r0, r2
 801ce20:	889b      	ldrh	r3, [r3, #4]
 801ce22:	80b3      	strh	r3, [r6, #4]
 801ce24:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801ce28:	015b      	lsls	r3, r3, #5
 801ce2a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801ce2e:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801ce32:	430b      	orrs	r3, r1
 801ce34:	425b      	negs	r3, r3
 801ce36:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801ce3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ce3c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801ce3c:	b538      	push	{r3, r4, r5, lr}
 801ce3e:	460c      	mov	r4, r1
 801ce40:	6811      	ldr	r1, [r2, #0]
 801ce42:	4610      	mov	r0, r2
 801ce44:	68cd      	ldr	r5, [r1, #12]
 801ce46:	4619      	mov	r1, r3
 801ce48:	47a8      	blx	r5
 801ce4a:	2800      	cmp	r0, #0
 801ce4c:	bf08      	it	eq
 801ce4e:	4620      	moveq	r0, r4
 801ce50:	bd38      	pop	{r3, r4, r5, pc}
	...

0801ce54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801ce54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce58:	468c      	mov	ip, r1
 801ce5a:	4605      	mov	r5, r0
 801ce5c:	4614      	mov	r4, r2
 801ce5e:	b942      	cbnz	r2, 801ce72 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801ce60:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801ce64:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 801ce68:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 801ce6c:	4620      	mov	r0, r4
 801ce6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce72:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801ce76:	7b50      	ldrb	r0, [r2, #13]
 801ce78:	8893      	ldrh	r3, [r2, #4]
 801ce7a:	0106      	lsls	r6, r0, #4
 801ce7c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801ce80:	79e6      	ldrb	r6, [r4, #7]
 801ce82:	4316      	orrs	r6, r2
 801ce84:	185a      	adds	r2, r3, r1
 801ce86:	b291      	uxth	r1, r2
 801ce88:	291d      	cmp	r1, #29
 801ce8a:	b2b7      	uxth	r7, r6
 801ce8c:	d87d      	bhi.n	801cf8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801ce8e:	2201      	movs	r2, #1
 801ce90:	408a      	lsls	r2, r1
 801ce92:	498a      	ldr	r1, [pc, #552]	@ (801d0bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x268>)
 801ce94:	10f6      	asrs	r6, r6, #3
 801ce96:	420a      	tst	r2, r1
 801ce98:	d12d      	bne.n	801cef6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 801ce9a:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801ce9e:	d074      	beq.n	801cf8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801cea0:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801cea4:	4623      	mov	r3, r4
 801cea6:	f104 0e08 	add.w	lr, r4, #8
 801ceaa:	4614      	mov	r4, r2
 801ceac:	4694      	mov	ip, r2
 801ceae:	6818      	ldr	r0, [r3, #0]
 801ceb0:	6859      	ldr	r1, [r3, #4]
 801ceb2:	3308      	adds	r3, #8
 801ceb4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801ceb8:	4573      	cmp	r3, lr
 801ceba:	4662      	mov	r2, ip
 801cebc:	d1f6      	bne.n	801ceac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801cebe:	6818      	ldr	r0, [r3, #0]
 801cec0:	f8cc 0000 	str.w	r0, [ip]
 801cec4:	889b      	ldrh	r3, [r3, #4]
 801cec6:	f8ac 3004 	strh.w	r3, [ip, #4]
 801ceca:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 801cece:	b2b3      	uxth	r3, r6
 801ced0:	1aca      	subs	r2, r1, r3
 801ced2:	b292      	uxth	r2, r2
 801ced4:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 801ced8:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 801cedc:	10d2      	asrs	r2, r2, #3
 801cede:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801cee2:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801cee6:	4302      	orrs	r2, r0
 801cee8:	1bcf      	subs	r7, r1, r7
 801ceea:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 801ceee:	1afb      	subs	r3, r7, r3
 801cef0:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 801cef4:	e7ba      	b.n	801ce6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801cef6:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801cefa:	4623      	mov	r3, r4
 801cefc:	f104 0808 	add.w	r8, r4, #8
 801cf00:	4614      	mov	r4, r2
 801cf02:	4696      	mov	lr, r2
 801cf04:	6818      	ldr	r0, [r3, #0]
 801cf06:	6859      	ldr	r1, [r3, #4]
 801cf08:	3308      	adds	r3, #8
 801cf0a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801cf0e:	4543      	cmp	r3, r8
 801cf10:	4672      	mov	r2, lr
 801cf12:	d1f6      	bne.n	801cf02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xae>
 801cf14:	6818      	ldr	r0, [r3, #0]
 801cf16:	f8ce 0000 	str.w	r0, [lr]
 801cf1a:	889b      	ldrh	r3, [r3, #4]
 801cf1c:	f8ae 3004 	strh.w	r3, [lr, #4]
 801cf20:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 801cf22:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801cf26:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801cf28:	f640 6333 	movw	r3, #3635	@ 0xe33
 801cf2c:	4299      	cmp	r1, r3
 801cf2e:	d111      	bne.n	801cf54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x100>
 801cf30:	f8dc 3000 	ldr.w	r3, [ip]
 801cf34:	4660      	mov	r0, ip
 801cf36:	68db      	ldr	r3, [r3, #12]
 801cf38:	4798      	blx	r3
 801cf3a:	7b41      	ldrb	r1, [r0, #13]
 801cf3c:	00cb      	lsls	r3, r1, #3
 801cf3e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801cf42:	7a03      	ldrb	r3, [r0, #8]
 801cf44:	4313      	orrs	r3, r2
 801cf46:	064a      	lsls	r2, r1, #25
 801cf48:	bf44      	itt	mi
 801cf4a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801cf4e:	b21b      	sxthmi	r3, r3
 801cf50:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801cf54:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 801cf58:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 801cf5c:	443b      	add	r3, r7
 801cf5e:	4433      	add	r3, r6
 801cf60:	b29b      	uxth	r3, r3
 801cf62:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801cf66:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 801cf6a:	10db      	asrs	r3, r3, #3
 801cf6c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801cf70:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801cf74:	4313      	orrs	r3, r2
 801cf76:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 801cf7a:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 801cf7e:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 801cf82:	1a9b      	subs	r3, r3, r2
 801cf84:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801cf88:	e770      	b.n	801ce6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801cf8a:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801cf8e:	f023 0204 	bic.w	r2, r3, #4
 801cf92:	428a      	cmp	r2, r1
 801cf94:	d003      	beq.n	801cf9e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14a>
 801cf96:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801cf9a:	4293      	cmp	r3, r2
 801cf9c:	d137      	bne.n	801d00e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801cf9e:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 801cfa2:	4622      	mov	r2, r4
 801cfa4:	f104 0808 	add.w	r8, r4, #8
 801cfa8:	4634      	mov	r4, r6
 801cfaa:	46b6      	mov	lr, r6
 801cfac:	6810      	ldr	r0, [r2, #0]
 801cfae:	6851      	ldr	r1, [r2, #4]
 801cfb0:	3208      	adds	r2, #8
 801cfb2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801cfb6:	4542      	cmp	r2, r8
 801cfb8:	4676      	mov	r6, lr
 801cfba:	d1f6      	bne.n	801cfaa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 801cfbc:	6810      	ldr	r0, [r2, #0]
 801cfbe:	3b01      	subs	r3, #1
 801cfc0:	f8ce 0000 	str.w	r0, [lr]
 801cfc4:	8892      	ldrh	r2, [r2, #4]
 801cfc6:	b29b      	uxth	r3, r3
 801cfc8:	f8ae 2004 	strh.w	r2, [lr, #4]
 801cfcc:	4621      	mov	r1, r4
 801cfce:	4662      	mov	r2, ip
 801cfd0:	4628      	mov	r0, r5
 801cfd2:	f7ff ff33 	bl	801ce3c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801cfd6:	7b41      	ldrb	r1, [r0, #13]
 801cfd8:	00cb      	lsls	r3, r1, #3
 801cfda:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801cfde:	7a03      	ldrb	r3, [r0, #8]
 801cfe0:	0648      	lsls	r0, r1, #25
 801cfe2:	ea43 0302 	orr.w	r3, r3, r2
 801cfe6:	bf44      	itt	mi
 801cfe8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801cfec:	b21b      	sxthmi	r3, r3
 801cfee:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801cff2:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801cff6:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 801cffa:	005b      	lsls	r3, r3, #1
 801cffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d000:	4313      	orrs	r3, r2
 801d002:	115a      	asrs	r2, r3, #5
 801d004:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801d008:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 801d00c:	e046      	b.n	801d09c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x248>
 801d00e:	00c2      	lsls	r2, r0, #3
 801d010:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801d014:	7a22      	ldrb	r2, [r4, #8]
 801d016:	430a      	orrs	r2, r1
 801d018:	0641      	lsls	r1, r0, #25
 801d01a:	f640 6109 	movw	r1, #3593	@ 0xe09
 801d01e:	bf44      	itt	mi
 801d020:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801d024:	b212      	sxthmi	r2, r2
 801d026:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801d02a:	f023 0210 	bic.w	r2, r3, #16
 801d02e:	428a      	cmp	r2, r1
 801d030:	d003      	beq.n	801d03a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e6>
 801d032:	f640 6213 	movw	r2, #3603	@ 0xe13
 801d036:	4293      	cmp	r3, r2
 801d038:	d13d      	bne.n	801d0b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x262>
 801d03a:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801d03e:	4696      	mov	lr, r2
 801d040:	f104 0808 	add.w	r8, r4, #8
 801d044:	4616      	mov	r6, r2
 801d046:	6820      	ldr	r0, [r4, #0]
 801d048:	6861      	ldr	r1, [r4, #4]
 801d04a:	3408      	adds	r4, #8
 801d04c:	c603      	stmia	r6!, {r0, r1}
 801d04e:	4544      	cmp	r4, r8
 801d050:	4632      	mov	r2, r6
 801d052:	d1f7      	bne.n	801d044 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f0>
 801d054:	6820      	ldr	r0, [r4, #0]
 801d056:	6030      	str	r0, [r6, #0]
 801d058:	88a1      	ldrh	r1, [r4, #4]
 801d05a:	4628      	mov	r0, r5
 801d05c:	80b1      	strh	r1, [r6, #4]
 801d05e:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 801d062:	4671      	mov	r1, lr
 801d064:	0076      	lsls	r6, r6, #1
 801d066:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801d06a:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 801d06e:	4674      	mov	r4, lr
 801d070:	4316      	orrs	r6, r2
 801d072:	f640 6213 	movw	r2, #3603	@ 0xe13
 801d076:	4293      	cmp	r3, r2
 801d078:	bf1a      	itte	ne
 801d07a:	f103 33ff 	addne.w	r3, r3, #4294967295
 801d07e:	b29b      	uxthne	r3, r3
 801d080:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801d084:	4662      	mov	r2, ip
 801d086:	f7ff fed9 	bl	801ce3c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d08a:	7b43      	ldrb	r3, [r0, #13]
 801d08c:	7a82      	ldrb	r2, [r0, #10]
 801d08e:	005b      	lsls	r3, r3, #1
 801d090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d094:	4313      	orrs	r3, r2
 801d096:	1af6      	subs	r6, r6, r3
 801d098:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 801d09c:	7b61      	ldrb	r1, [r4, #13]
 801d09e:	00cb      	lsls	r3, r1, #3
 801d0a0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d0a4:	7a23      	ldrb	r3, [r4, #8]
 801d0a6:	4313      	orrs	r3, r2
 801d0a8:	064a      	lsls	r2, r1, #25
 801d0aa:	bf44      	itt	mi
 801d0ac:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d0b0:	b21b      	sxthmi	r3, r3
 801d0b2:	1bdb      	subs	r3, r3, r7
 801d0b4:	e71c      	b.n	801cef0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 801d0b6:	2300      	movs	r3, #0
 801d0b8:	e7a6      	b.n	801d008 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>
 801d0ba:	bf00      	nop
 801d0bc:	3fc00079 	.word	0x3fc00079

0801d0c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801d0c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d0c4:	4604      	mov	r4, r0
 801d0c6:	b942      	cbnz	r2, 801d0da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801d0c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801d0cc:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801d0d0:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801d0d4:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801d0d8:	e047      	b.n	801d16a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d0da:	7b51      	ldrb	r1, [r2, #13]
 801d0dc:	8893      	ldrh	r3, [r2, #4]
 801d0de:	010d      	lsls	r5, r1, #4
 801d0e0:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801d0e4:	79d5      	ldrb	r5, [r2, #7]
 801d0e6:	4305      	orrs	r5, r0
 801d0e8:	2d04      	cmp	r5, #4
 801d0ea:	bfcc      	ite	gt
 801d0ec:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801d0f0:	f04f 0e01 	movle.w	lr, #1
 801d0f4:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801d0f8:	f200 80ab 	bhi.w	801d252 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801d0fc:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801d100:	4283      	cmp	r3, r0
 801d102:	d216      	bcs.n	801d132 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d104:	f240 605b 	movw	r0, #1627	@ 0x65b
 801d108:	4283      	cmp	r3, r0
 801d10a:	d859      	bhi.n	801d1c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801d10c:	f240 6057 	movw	r0, #1623	@ 0x657
 801d110:	4283      	cmp	r3, r0
 801d112:	d20e      	bcs.n	801d132 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d114:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801d118:	d24a      	bcs.n	801d1b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801d11a:	f240 604e 	movw	r0, #1614	@ 0x64e
 801d11e:	4283      	cmp	r3, r0
 801d120:	d207      	bcs.n	801d132 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d122:	f240 601a 	movw	r0, #1562	@ 0x61a
 801d126:	4283      	cmp	r3, r0
 801d128:	d02a      	beq.n	801d180 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d12a:	d821      	bhi.n	801d170 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801d12c:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801d130:	d35b      	bcc.n	801d1ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d132:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801d136:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d13a:	f040 80d0 	bne.w	801d2de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801d13e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801d142:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d146:	f040 80ca 	bne.w	801d2de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801d14a:	00cb      	lsls	r3, r1, #3
 801d14c:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d150:	7a13      	ldrb	r3, [r2, #8]
 801d152:	0649      	lsls	r1, r1, #25
 801d154:	ea43 0300 	orr.w	r3, r3, r0
 801d158:	bf44      	itt	mi
 801d15a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d15e:	b21b      	sxthmi	r3, r3
 801d160:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d164:	1b5d      	subs	r5, r3, r5
 801d166:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d16a:	4610      	mov	r0, r2
 801d16c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d170:	f240 604b 	movw	r0, #1611	@ 0x64b
 801d174:	4283      	cmp	r3, r0
 801d176:	d338      	bcc.n	801d1ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d178:	f240 604c 	movw	r0, #1612	@ 0x64c
 801d17c:	4283      	cmp	r3, r0
 801d17e:	d9d8      	bls.n	801d132 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d180:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801d184:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801d188:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d18c:	f040 80f2 	bne.w	801d374 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801d190:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d194:	f040 80ee 	bne.w	801d374 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801d198:	00cb      	lsls	r3, r1, #3
 801d19a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d19e:	7a13      	ldrb	r3, [r2, #8]
 801d1a0:	064e      	lsls	r6, r1, #25
 801d1a2:	ea43 0300 	orr.w	r3, r3, r0
 801d1a6:	bf44      	itt	mi
 801d1a8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d1ac:	b21b      	sxthmi	r3, r3
 801d1ae:	e7d9      	b.n	801d164 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801d1b0:	f240 6054 	movw	r0, #1620	@ 0x654
 801d1b4:	4283      	cmp	r3, r0
 801d1b6:	d8e3      	bhi.n	801d180 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d1b8:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801d1bc:	d9e0      	bls.n	801d180 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d1be:	e7b8      	b.n	801d132 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d1c0:	f240 6074 	movw	r0, #1652	@ 0x674
 801d1c4:	4283      	cmp	r3, r0
 801d1c6:	d0b4      	beq.n	801d132 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d1c8:	d82d      	bhi.n	801d226 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801d1ca:	f240 605e 	movw	r0, #1630	@ 0x65e
 801d1ce:	4283      	cmp	r3, r0
 801d1d0:	d804      	bhi.n	801d1dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801d1d2:	f240 605d 	movw	r0, #1629	@ 0x65d
 801d1d6:	4283      	cmp	r3, r0
 801d1d8:	d3d2      	bcc.n	801d180 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d1da:	e7aa      	b.n	801d132 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d1dc:	f240 605f 	movw	r0, #1631	@ 0x65f
 801d1e0:	4283      	cmp	r3, r0
 801d1e2:	d0cd      	beq.n	801d180 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d1e4:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801d1e8:	d0a3      	beq.n	801d132 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d1ea:	00cb      	lsls	r3, r1, #3
 801d1ec:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801d1f0:	7a13      	ldrb	r3, [r2, #8]
 801d1f2:	0649      	lsls	r1, r1, #25
 801d1f4:	ea43 0300 	orr.w	r3, r3, r0
 801d1f8:	bf44      	itt	mi
 801d1fa:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d1fe:	b21b      	sxthmi	r3, r3
 801d200:	1b5d      	subs	r5, r3, r5
 801d202:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d206:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d20a:	7b53      	ldrb	r3, [r2, #13]
 801d20c:	015b      	lsls	r3, r3, #5
 801d20e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801d212:	7993      	ldrb	r3, [r2, #6]
 801d214:	430b      	orrs	r3, r1
 801d216:	2105      	movs	r1, #5
 801d218:	005b      	lsls	r3, r3, #1
 801d21a:	fb93 f3f1 	sdiv	r3, r3, r1
 801d21e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801d222:	440b      	add	r3, r1
 801d224:	e756      	b.n	801d0d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801d226:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801d22a:	4283      	cmp	r3, r0
 801d22c:	d809      	bhi.n	801d242 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801d22e:	f240 60df 	movw	r0, #1759	@ 0x6df
 801d232:	4283      	cmp	r3, r0
 801d234:	f4bf af7d 	bcs.w	801d132 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d238:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801d23c:	2b05      	cmp	r3, #5
 801d23e:	d8d4      	bhi.n	801d1ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d240:	e777      	b.n	801d132 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d242:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801d246:	4283      	cmp	r3, r0
 801d248:	d09a      	beq.n	801d180 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d24a:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801d24e:	4283      	cmp	r3, r0
 801d250:	e7ca      	b.n	801d1e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d252:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801d256:	d22b      	bcs.n	801d2b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801d258:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801d25c:	4283      	cmp	r3, r0
 801d25e:	d28f      	bcs.n	801d180 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d260:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801d264:	4283      	cmp	r3, r0
 801d266:	d816      	bhi.n	801d296 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801d268:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801d26c:	4283      	cmp	r3, r0
 801d26e:	f4bf af60 	bcs.w	801d132 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d272:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801d276:	4283      	cmp	r3, r0
 801d278:	d80a      	bhi.n	801d290 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801d27a:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801d27e:	4283      	cmp	r3, r0
 801d280:	f4bf af57 	bcs.w	801d132 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d284:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801d288:	4283      	cmp	r3, r0
 801d28a:	f43f af79 	beq.w	801d180 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d28e:	e7ac      	b.n	801d1ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d290:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801d294:	e7f8      	b.n	801d288 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801d296:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801d29a:	4283      	cmp	r3, r0
 801d29c:	d802      	bhi.n	801d2a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801d29e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801d2a2:	e798      	b.n	801d1d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801d2a4:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801d2a8:	4283      	cmp	r3, r0
 801d2aa:	f47f af42 	bne.w	801d132 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d2ae:	e767      	b.n	801d180 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d2b0:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801d2b4:	4283      	cmp	r3, r0
 801d2b6:	f43f af63 	beq.w	801d180 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d2ba:	d802      	bhi.n	801d2c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801d2bc:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801d2c0:	e7f2      	b.n	801d2a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801d2c2:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801d2c6:	4283      	cmp	r3, r0
 801d2c8:	d805      	bhi.n	801d2d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801d2ca:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801d2ce:	4283      	cmp	r3, r0
 801d2d0:	f4ff af2f 	bcc.w	801d132 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d2d4:	e754      	b.n	801d180 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d2d6:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801d2da:	4283      	cmp	r3, r0
 801d2dc:	e7af      	b.n	801d23e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801d2de:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801d2e2:	4617      	mov	r7, r2
 801d2e4:	4666      	mov	r6, ip
 801d2e6:	f102 0808 	add.w	r8, r2, #8
 801d2ea:	46e6      	mov	lr, ip
 801d2ec:	6838      	ldr	r0, [r7, #0]
 801d2ee:	6879      	ldr	r1, [r7, #4]
 801d2f0:	3708      	adds	r7, #8
 801d2f2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d2f6:	4547      	cmp	r7, r8
 801d2f8:	46f4      	mov	ip, lr
 801d2fa:	d1f6      	bne.n	801d2ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801d2fc:	6838      	ldr	r0, [r7, #0]
 801d2fe:	f8ce 0000 	str.w	r0, [lr]
 801d302:	88b9      	ldrh	r1, [r7, #4]
 801d304:	f8ae 1004 	strh.w	r1, [lr, #4]
 801d308:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801d30c:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d310:	d009      	beq.n	801d326 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801d312:	7b51      	ldrb	r1, [r2, #13]
 801d314:	7992      	ldrb	r2, [r2, #6]
 801d316:	0149      	lsls	r1, r1, #5
 801d318:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801d31c:	4311      	orrs	r1, r2
 801d31e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d322:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801d326:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d32a:	b2ad      	uxth	r5, r5
 801d32c:	d00d      	beq.n	801d34a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 801d32e:	442b      	add	r3, r5
 801d330:	b29b      	uxth	r3, r3
 801d332:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801d336:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801d33a:	10db      	asrs	r3, r3, #3
 801d33c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801d340:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d344:	4313      	orrs	r3, r2
 801d346:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801d34a:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801d34e:	00cb      	lsls	r3, r1, #3
 801d350:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d354:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801d358:	064f      	lsls	r7, r1, #25
 801d35a:	ea43 0302 	orr.w	r3, r3, r2
 801d35e:	bf44      	itt	mi
 801d360:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d364:	b21b      	sxthmi	r3, r3
 801d366:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d36a:	1b5b      	subs	r3, r3, r5
 801d36c:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801d370:	4632      	mov	r2, r6
 801d372:	e6fa      	b.n	801d16a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d374:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801d378:	4617      	mov	r7, r2
 801d37a:	4666      	mov	r6, ip
 801d37c:	f102 0908 	add.w	r9, r2, #8
 801d380:	46e0      	mov	r8, ip
 801d382:	6838      	ldr	r0, [r7, #0]
 801d384:	6879      	ldr	r1, [r7, #4]
 801d386:	3708      	adds	r7, #8
 801d388:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801d38c:	454f      	cmp	r7, r9
 801d38e:	46c4      	mov	ip, r8
 801d390:	d1f6      	bne.n	801d380 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801d392:	6838      	ldr	r0, [r7, #0]
 801d394:	f8c8 0000 	str.w	r0, [r8]
 801d398:	88b9      	ldrh	r1, [r7, #4]
 801d39a:	f8a8 1004 	strh.w	r1, [r8, #4]
 801d39e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801d3a2:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d3a6:	d009      	beq.n	801d3bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 801d3a8:	7b51      	ldrb	r1, [r2, #13]
 801d3aa:	7992      	ldrb	r2, [r2, #6]
 801d3ac:	0149      	lsls	r1, r1, #5
 801d3ae:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801d3b2:	4311      	orrs	r1, r2
 801d3b4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d3b8:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801d3bc:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d3c0:	d00e      	beq.n	801d3e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801d3c2:	eba3 030e 	sub.w	r3, r3, lr
 801d3c6:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801d3ca:	b29b      	uxth	r3, r3
 801d3cc:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801d3d0:	10db      	asrs	r3, r3, #3
 801d3d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d3d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801d3da:	4313      	orrs	r3, r2
 801d3dc:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801d3e0:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801d3e4:	00cb      	lsls	r3, r1, #3
 801d3e6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d3ea:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801d3ee:	0648      	lsls	r0, r1, #25
 801d3f0:	ea43 0302 	orr.w	r3, r3, r2
 801d3f4:	bf44      	itt	mi
 801d3f6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d3fa:	b21b      	sxthmi	r3, r3
 801d3fc:	1b5d      	subs	r5, r3, r5
 801d3fe:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d402:	e7b5      	b.n	801d370 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0801d404 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801d404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d408:	461e      	mov	r6, r3
 801d40a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801d40c:	4604      	mov	r4, r0
 801d40e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d412:	4617      	mov	r7, r2
 801d414:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801d418:	f7f4 faca 	bl	80119b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d41c:	4605      	mov	r5, r0
 801d41e:	b918      	cbnz	r0, 801d428 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801d420:	6030      	str	r0, [r6, #0]
 801d422:	4628      	mov	r0, r5
 801d424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d428:	683b      	ldr	r3, [r7, #0]
 801d42a:	4601      	mov	r1, r0
 801d42c:	68db      	ldr	r3, [r3, #12]
 801d42e:	4638      	mov	r0, r7
 801d430:	4798      	blx	r3
 801d432:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801d436:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d43a:	4602      	mov	r2, r0
 801d43c:	6030      	str	r0, [r6, #0]
 801d43e:	d213      	bcs.n	801d468 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801d440:	4643      	mov	r3, r8
 801d442:	4639      	mov	r1, r7
 801d444:	4620      	mov	r0, r4
 801d446:	f7ff fe3b 	bl	801d0c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d44a:	6030      	str	r0, [r6, #0]
 801d44c:	6833      	ldr	r3, [r6, #0]
 801d44e:	b143      	cbz	r3, 801d462 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801d450:	7b5a      	ldrb	r2, [r3, #13]
 801d452:	7a9b      	ldrb	r3, [r3, #10]
 801d454:	0052      	lsls	r2, r2, #1
 801d456:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801d45a:	4313      	orrs	r3, r2
 801d45c:	bf0c      	ite	eq
 801d45e:	2301      	moveq	r3, #1
 801d460:	2300      	movne	r3, #0
 801d462:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801d466:	e7dc      	b.n	801d422 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801d468:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801d46c:	b29b      	uxth	r3, r3
 801d46e:	2b7f      	cmp	r3, #127	@ 0x7f
 801d470:	d804      	bhi.n	801d47c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801d472:	4639      	mov	r1, r7
 801d474:	4620      	mov	r0, r4
 801d476:	f7ff fced 	bl	801ce54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d47a:	e7e6      	b.n	801d44a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801d47c:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801d480:	2b00      	cmp	r3, #0
 801d482:	d0e3      	beq.n	801d44c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d484:	f640 1302 	movw	r3, #2306	@ 0x902
 801d488:	429d      	cmp	r5, r3
 801d48a:	d1df      	bne.n	801d44c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d48c:	4601      	mov	r1, r0
 801d48e:	4620      	mov	r0, r4
 801d490:	f7ff fcb1 	bl	801cdf6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d494:	e7d9      	b.n	801d44a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801d496 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801d496:	b510      	push	{r4, lr}
 801d498:	4604      	mov	r4, r0
 801d49a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801d49e:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d4a0:	b1f1      	cbz	r1, 801d4e0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801d4a2:	2b0a      	cmp	r3, #10
 801d4a4:	d02f      	beq.n	801d506 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801d4a6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801d4a8:	3901      	subs	r1, #1
 801d4aa:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801d4ae:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801d4b0:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801d4b4:	1c51      	adds	r1, r2, #1
 801d4b6:	b289      	uxth	r1, r1
 801d4b8:	2901      	cmp	r1, #1
 801d4ba:	bf84      	itt	hi
 801d4bc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d4c0:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801d4c2:	f103 0201 	add.w	r2, r3, #1
 801d4c6:	8722      	strh	r2, [r4, #56]	@ 0x38
 801d4c8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801d4ca:	bf98      	it	ls
 801d4cc:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801d4ce:	4413      	add	r3, r2
 801d4d0:	b29b      	uxth	r3, r3
 801d4d2:	2b09      	cmp	r3, #9
 801d4d4:	bf88      	it	hi
 801d4d6:	3b0a      	subhi	r3, #10
 801d4d8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d4dc:	8458      	strh	r0, [r3, #34]	@ 0x22
 801d4de:	e7dc      	b.n	801d49a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801d4e0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d4e2:	2b0a      	cmp	r3, #10
 801d4e4:	d00f      	beq.n	801d506 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801d4e6:	4620      	mov	r0, r4
 801d4e8:	f7ff fc44 	bl	801cd74 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801d4ec:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d4ee:	1c5a      	adds	r2, r3, #1
 801d4f0:	8722      	strh	r2, [r4, #56]	@ 0x38
 801d4f2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801d4f4:	4413      	add	r3, r2
 801d4f6:	b29b      	uxth	r3, r3
 801d4f8:	2b09      	cmp	r3, #9
 801d4fa:	bf88      	it	hi
 801d4fc:	3b0a      	subhi	r3, #10
 801d4fe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d502:	8458      	strh	r0, [r3, #34]	@ 0x22
 801d504:	e7ec      	b.n	801d4e0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801d506:	bd10      	pop	{r4, pc}

0801d508 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801d508:	b538      	push	{r3, r4, r5, lr}
 801d50a:	4604      	mov	r4, r0
 801d50c:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801d50e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801d512:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801d514:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801d516:	3a01      	subs	r2, #1
 801d518:	8702      	strh	r2, [r0, #56]	@ 0x38
 801d51a:	1c5a      	adds	r2, r3, #1
 801d51c:	b292      	uxth	r2, r2
 801d51e:	2a09      	cmp	r2, #9
 801d520:	bf86      	itte	hi
 801d522:	3b09      	subhi	r3, #9
 801d524:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801d526:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801d528:	f7ff ffb5 	bl	801d496 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d52c:	8c23      	ldrh	r3, [r4, #32]
 801d52e:	2b01      	cmp	r3, #1
 801d530:	bf9c      	itt	ls
 801d532:	3301      	addls	r3, #1
 801d534:	8423      	strhls	r3, [r4, #32]
 801d536:	8be3      	ldrh	r3, [r4, #30]
 801d538:	b90b      	cbnz	r3, 801d53e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801d53a:	2302      	movs	r3, #2
 801d53c:	83e3      	strh	r3, [r4, #30]
 801d53e:	8be3      	ldrh	r3, [r4, #30]
 801d540:	4628      	mov	r0, r5
 801d542:	3b01      	subs	r3, #1
 801d544:	b29b      	uxth	r3, r3
 801d546:	83e3      	strh	r3, [r4, #30]
 801d548:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d54c:	8365      	strh	r5, [r4, #26]
 801d54e:	bd38      	pop	{r3, r4, r5, pc}

0801d550 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801d550:	428a      	cmp	r2, r1
 801d552:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d556:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801d558:	d931      	bls.n	801d5be <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 801d55a:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801d55c:	1a54      	subs	r4, r2, r1
 801d55e:	19ee      	adds	r6, r5, r7
 801d560:	3e01      	subs	r6, #1
 801d562:	fa1f fe84 	uxth.w	lr, r4
 801d566:	b2b4      	uxth	r4, r6
 801d568:	eba4 090e 	sub.w	r9, r4, lr
 801d56c:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801d570:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801d574:	fa1f f989 	uxth.w	r9, r9
 801d578:	2c09      	cmp	r4, #9
 801d57a:	4626      	mov	r6, r4
 801d57c:	bf88      	it	hi
 801d57e:	f1a4 060a 	subhi.w	r6, r4, #10
 801d582:	f1bc 0f00 	cmp.w	ip, #0
 801d586:	bf08      	it	eq
 801d588:	f04f 0c02 	moveq.w	ip, #2
 801d58c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d590:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d594:	3c01      	subs	r4, #1
 801d596:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801d59a:	fa1f fc8c 	uxth.w	ip, ip
 801d59e:	b2a4      	uxth	r4, r4
 801d5a0:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801d5a4:	454c      	cmp	r4, r9
 801d5a6:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801d5aa:	d1e5      	bne.n	801d578 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801d5ac:	eba5 050e 	sub.w	r5, r5, lr
 801d5b0:	eb0e 0408 	add.w	r4, lr, r8
 801d5b4:	8705      	strh	r5, [r0, #56]	@ 0x38
 801d5b6:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801d5ba:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801d5be:	250a      	movs	r5, #10
 801d5c0:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801d5c2:	1a64      	subs	r4, r4, r1
 801d5c4:	4439      	add	r1, r7
 801d5c6:	b289      	uxth	r1, r1
 801d5c8:	2909      	cmp	r1, #9
 801d5ca:	bf88      	it	hi
 801d5cc:	390a      	subhi	r1, #10
 801d5ce:	8704      	strh	r4, [r0, #56]	@ 0x38
 801d5d0:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801d5d2:	b18a      	cbz	r2, 801d5f8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 801d5d4:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801d5d6:	3a01      	subs	r2, #1
 801d5d8:	3101      	adds	r1, #1
 801d5da:	b292      	uxth	r2, r2
 801d5dc:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801d5e0:	8701      	strh	r1, [r0, #56]	@ 0x38
 801d5e2:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801d5e4:	b901      	cbnz	r1, 801d5e8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 801d5e6:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801d5e8:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801d5ea:	3901      	subs	r1, #1
 801d5ec:	b289      	uxth	r1, r1
 801d5ee:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801d5f0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801d5f4:	844c      	strh	r4, [r1, #34]	@ 0x22
 801d5f6:	e7ec      	b.n	801d5d2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 801d5f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d5fc:	f7ff bf4b 	b.w	801d496 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801d600 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801d600:	b570      	push	{r4, r5, r6, lr}
 801d602:	2500      	movs	r5, #0
 801d604:	4295      	cmp	r5, r2
 801d606:	d011      	beq.n	801d62c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801d608:	8bc4      	ldrh	r4, [r0, #30]
 801d60a:	f831 6b02 	ldrh.w	r6, [r1], #2
 801d60e:	4414      	add	r4, r2
 801d610:	3c01      	subs	r4, #1
 801d612:	1b64      	subs	r4, r4, r5
 801d614:	b2a4      	uxth	r4, r4
 801d616:	2c01      	cmp	r4, #1
 801d618:	bf88      	it	hi
 801d61a:	3c02      	subhi	r4, #2
 801d61c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d620:	8b64      	ldrh	r4, [r4, #26]
 801d622:	42b4      	cmp	r4, r6
 801d624:	d117      	bne.n	801d656 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801d626:	3501      	adds	r5, #1
 801d628:	b2ad      	uxth	r5, r5
 801d62a:	e7eb      	b.n	801d604 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801d62c:	2400      	movs	r4, #0
 801d62e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d632:	4413      	add	r3, r2
 801d634:	b2a2      	uxth	r2, r4
 801d636:	429a      	cmp	r2, r3
 801d638:	da0f      	bge.n	801d65a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801d63a:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801d63c:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801d640:	4432      	add	r2, r6
 801d642:	b292      	uxth	r2, r2
 801d644:	2a09      	cmp	r2, #9
 801d646:	bf88      	it	hi
 801d648:	3a0a      	subhi	r2, #10
 801d64a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d64e:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801d650:	3401      	adds	r4, #1
 801d652:	42aa      	cmp	r2, r5
 801d654:	d0ee      	beq.n	801d634 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801d656:	2000      	movs	r0, #0
 801d658:	bd70      	pop	{r4, r5, r6, pc}
 801d65a:	2001      	movs	r0, #1
 801d65c:	e7fc      	b.n	801d658 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801d65e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801d65e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d662:	4605      	mov	r5, r0
 801d664:	4616      	mov	r6, r2
 801d666:	1c8c      	adds	r4, r1, #2
 801d668:	8809      	ldrh	r1, [r1, #0]
 801d66a:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801d66e:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801d672:	42b3      	cmp	r3, r6
 801d674:	d124      	bne.n	801d6c0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801d676:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801d67a:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801d67e:	f001 070f 	and.w	r7, r1, #15
 801d682:	f8cd 8000 	str.w	r8, [sp]
 801d686:	464b      	mov	r3, r9
 801d688:	4652      	mov	r2, sl
 801d68a:	4621      	mov	r1, r4
 801d68c:	4628      	mov	r0, r5
 801d68e:	f7ff ffb7 	bl	801d600 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801d692:	4683      	mov	fp, r0
 801d694:	b168      	cbz	r0, 801d6b2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801d696:	eb0a 0109 	add.w	r1, sl, r9
 801d69a:	4441      	add	r1, r8
 801d69c:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801d6a0:	463a      	mov	r2, r7
 801d6a2:	4649      	mov	r1, r9
 801d6a4:	4628      	mov	r0, r5
 801d6a6:	f7ff ff53 	bl	801d550 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801d6aa:	4658      	mov	r0, fp
 801d6ac:	b003      	add	sp, #12
 801d6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6b2:	eb07 010a 	add.w	r1, r7, sl
 801d6b6:	4449      	add	r1, r9
 801d6b8:	4441      	add	r1, r8
 801d6ba:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801d6be:	e7d2      	b.n	801d666 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801d6c0:	f04f 0b00 	mov.w	fp, #0
 801d6c4:	e7f1      	b.n	801d6aa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801d6c6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801d6c6:	b570      	push	{r4, r5, r6, lr}
 801d6c8:	8810      	ldrh	r0, [r2, #0]
 801d6ca:	4298      	cmp	r0, r3
 801d6cc:	d817      	bhi.n	801d6fe <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d6ce:	1e48      	subs	r0, r1, #1
 801d6d0:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801d6d4:	4298      	cmp	r0, r3
 801d6d6:	d312      	bcc.n	801d6fe <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d6d8:	2400      	movs	r4, #0
 801d6da:	428c      	cmp	r4, r1
 801d6dc:	d20f      	bcs.n	801d6fe <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d6de:	1860      	adds	r0, r4, r1
 801d6e0:	1040      	asrs	r0, r0, #1
 801d6e2:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801d6e6:	0085      	lsls	r5, r0, #2
 801d6e8:	42b3      	cmp	r3, r6
 801d6ea:	d902      	bls.n	801d6f2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801d6ec:	3001      	adds	r0, #1
 801d6ee:	b284      	uxth	r4, r0
 801d6f0:	e7f3      	b.n	801d6da <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d6f2:	d201      	bcs.n	801d6f8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801d6f4:	b281      	uxth	r1, r0
 801d6f6:	e7f0      	b.n	801d6da <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d6f8:	442a      	add	r2, r5
 801d6fa:	8850      	ldrh	r0, [r2, #2]
 801d6fc:	bd70      	pop	{r4, r5, r6, pc}
 801d6fe:	2000      	movs	r0, #0
 801d700:	e7fc      	b.n	801d6fc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801d702 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801d702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d706:	4604      	mov	r4, r0
 801d708:	260b      	movs	r6, #11
 801d70a:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801d70c:	886f      	ldrh	r7, [r5, #2]
 801d70e:	087f      	lsrs	r7, r7, #1
 801d710:	3e01      	subs	r6, #1
 801d712:	d013      	beq.n	801d73c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d714:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801d716:	462a      	mov	r2, r5
 801d718:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d71c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801d720:	4639      	mov	r1, r7
 801d722:	4643      	mov	r3, r8
 801d724:	4620      	mov	r0, r4
 801d726:	f7ff ffce 	bl	801d6c6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801d72a:	b138      	cbz	r0, 801d73c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d72c:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801d730:	4642      	mov	r2, r8
 801d732:	4620      	mov	r0, r4
 801d734:	f7ff ff93 	bl	801d65e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801d738:	2800      	cmp	r0, #0
 801d73a:	d1e9      	bne.n	801d710 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801d73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d740 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801d740:	b570      	push	{r4, r5, r6, lr}
 801d742:	694a      	ldr	r2, [r1, #20]
 801d744:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801d746:	684b      	ldr	r3, [r1, #4]
 801d748:	1b54      	subs	r4, r2, r5
 801d74a:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801d74c:	f000 8107 	beq.w	801d95e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 801d750:	1b9b      	subs	r3, r3, r6
 801d752:	d003      	beq.n	801d75c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d754:	2210      	movs	r2, #16
 801d756:	4363      	muls	r3, r4
 801d758:	fb93 f3f2 	sdiv	r3, r3, r2
 801d75c:	680c      	ldr	r4, [r1, #0]
 801d75e:	698a      	ldr	r2, [r1, #24]
 801d760:	1b65      	subs	r5, r4, r5
 801d762:	f000 80fe 	beq.w	801d962 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 801d766:	1b92      	subs	r2, r2, r6
 801d768:	d003      	beq.n	801d772 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d76a:	2410      	movs	r4, #16
 801d76c:	436a      	muls	r2, r5
 801d76e:	fb92 f2f4 	sdiv	r2, r2, r4
 801d772:	1a9b      	subs	r3, r3, r2
 801d774:	ee07 3a90 	vmov	s15, r3
 801d778:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801d9a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 801d77c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d780:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d784:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d788:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801d78c:	460a      	mov	r2, r1
 801d78e:	eeb1 6a43 	vneg.f32	s12, s6
 801d792:	4603      	mov	r3, r0
 801d794:	f100 040c 	add.w	r4, r0, #12
 801d798:	edd2 7a02 	vldr	s15, [r2, #8]
 801d79c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801d7a0:	ece3 6a01 	vstmia	r3!, {s13}
 801d7a4:	edd2 7a03 	vldr	s15, [r2, #12]
 801d7a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d7ac:	edc3 7a02 	vstr	s15, [r3, #8]
 801d7b0:	edd2 7a04 	vldr	s15, [r2, #16]
 801d7b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d7b8:	429c      	cmp	r4, r3
 801d7ba:	edc3 7a05 	vstr	s15, [r3, #20]
 801d7be:	f102 0214 	add.w	r2, r2, #20
 801d7c2:	d1e9      	bne.n	801d798 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801d7c4:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801d7c6:	698b      	ldr	r3, [r1, #24]
 801d7c8:	edd0 4a02 	vldr	s9, [r0, #8]
 801d7cc:	1a9b      	subs	r3, r3, r2
 801d7ce:	ee07 3a90 	vmov	s15, r3
 801d7d2:	684b      	ldr	r3, [r1, #4]
 801d7d4:	edd0 3a00 	vldr	s7, [r0]
 801d7d8:	1a9b      	subs	r3, r3, r2
 801d7da:	edd0 6a01 	vldr	s13, [r0, #4]
 801d7de:	ee07 3a10 	vmov	s14, r3
 801d7e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d7e6:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801d7ea:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d7ee:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801d7f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d7f6:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801d7fa:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d7fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d802:	ee67 7a83 	vmul.f32	s15, s15, s6
 801d806:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801d80a:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801d80c:	694a      	ldr	r2, [r1, #20]
 801d80e:	ed90 5a05 	vldr	s10, [r0, #20]
 801d812:	1b13      	subs	r3, r2, r4
 801d814:	ee07 3a10 	vmov	s14, r3
 801d818:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d81c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d820:	680b      	ldr	r3, [r1, #0]
 801d822:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801d826:	1b1b      	subs	r3, r3, r4
 801d828:	ee07 3a10 	vmov	s14, r3
 801d82c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d830:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d834:	eee6 4a87 	vfma.f32	s9, s13, s14
 801d838:	ee64 4a86 	vmul.f32	s9, s9, s12
 801d83c:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801d840:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801d842:	698b      	ldr	r3, [r1, #24]
 801d844:	ed90 2a03 	vldr	s4, [r0, #12]
 801d848:	1a9b      	subs	r3, r3, r2
 801d84a:	ee06 3a90 	vmov	s13, r3
 801d84e:	684b      	ldr	r3, [r1, #4]
 801d850:	edd0 5a04 	vldr	s11, [r0, #16]
 801d854:	1a9b      	subs	r3, r3, r2
 801d856:	ee07 3a10 	vmov	s14, r3
 801d85a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d85e:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801d862:	ee66 6a84 	vmul.f32	s13, s13, s8
 801d866:	ee32 5a45 	vsub.f32	s10, s4, s10
 801d86a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d86e:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801d872:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d876:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d87a:	ee66 6a83 	vmul.f32	s13, s13, s6
 801d87e:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801d882:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801d884:	694a      	ldr	r2, [r1, #20]
 801d886:	ed90 1a07 	vldr	s2, [r0, #28]
 801d88a:	1b13      	subs	r3, r2, r4
 801d88c:	ee07 3a10 	vmov	s14, r3
 801d890:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d894:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d898:	680b      	ldr	r3, [r1, #0]
 801d89a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801d89e:	1b1b      	subs	r3, r3, r4
 801d8a0:	ee07 3a10 	vmov	s14, r3
 801d8a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d8a8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d8ac:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d8b0:	ee25 5a06 	vmul.f32	s10, s10, s12
 801d8b4:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801d8b8:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801d8ba:	698b      	ldr	r3, [r1, #24]
 801d8bc:	edd0 5a08 	vldr	s11, [r0, #32]
 801d8c0:	1a9b      	subs	r3, r3, r2
 801d8c2:	ee07 3a10 	vmov	s14, r3
 801d8c6:	684b      	ldr	r3, [r1, #4]
 801d8c8:	edd0 2a06 	vldr	s5, [r0, #24]
 801d8cc:	1a9b      	subs	r3, r3, r2
 801d8ce:	ee01 3a90 	vmov	s3, r3
 801d8d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d8d6:	ee31 1a65 	vsub.f32	s2, s2, s11
 801d8da:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d8de:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801d8e2:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d8e6:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801d8ea:	ee61 1a84 	vmul.f32	s3, s3, s8
 801d8ee:	eea1 7a21 	vfma.f32	s14, s2, s3
 801d8f2:	ee27 7a03 	vmul.f32	s14, s14, s6
 801d8f6:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801d8fa:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801d8fc:	694a      	ldr	r2, [r1, #20]
 801d8fe:	1b13      	subs	r3, r2, r4
 801d900:	ee03 3a10 	vmov	s6, r3
 801d904:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d908:	ee23 3a04 	vmul.f32	s6, s6, s8
 801d90c:	680b      	ldr	r3, [r1, #0]
 801d90e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801d912:	1b1b      	subs	r3, r3, r4
 801d914:	ee03 3a10 	vmov	s6, r3
 801d918:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d91c:	ee23 4a04 	vmul.f32	s8, s6, s8
 801d920:	eee1 5a04 	vfma.f32	s11, s2, s8
 801d924:	ee25 6a86 	vmul.f32	s12, s11, s12
 801d928:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801d92c:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801d930:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801d934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d938:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801d93c:	dd13      	ble.n	801d966 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801d93e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801d942:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801d946:	eee3 7a87 	vfma.f32	s15, s7, s14
 801d94a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d952:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801d954:	dd15      	ble.n	801d982 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801d956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801d95a:	6403      	str	r3, [r0, #64]	@ 0x40
 801d95c:	bd70      	pop	{r4, r5, r6, pc}
 801d95e:	4623      	mov	r3, r4
 801d960:	e6fc      	b.n	801d75c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d962:	462a      	mov	r2, r5
 801d964:	e705      	b.n	801d772 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d966:	d502      	bpl.n	801d96e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 801d968:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801d96c:	e7e9      	b.n	801d942 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 801d96e:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801d972:	eea3 2a85 	vfma.f32	s4, s7, s10
 801d976:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801d97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d97e:	dade      	bge.n	801d93e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 801d980:	e7f2      	b.n	801d968 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 801d982:	d502      	bpl.n	801d98a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 801d984:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801d988:	e7e7      	b.n	801d95a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 801d98a:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801d98e:	eee3 4a86 	vfma.f32	s9, s7, s12
 801d992:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801d996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d99a:	dadc      	bge.n	801d956 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 801d99c:	e7f2      	b.n	801d984 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 801d99e:	bf00      	nop
 801d9a0:	3d800000 	.word	0x3d800000

0801d9a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801d9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d9a8:	2714      	movs	r7, #20
 801d9aa:	435f      	muls	r7, r3
 801d9ac:	eb02 0c07 	add.w	ip, r2, r7
 801d9b0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801d9b4:	f115 0e0f 	adds.w	lr, r5, #15
 801d9b8:	f100 80a2 	bmi.w	801db00 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801d9bc:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801d9c0:	2614      	movs	r6, #20
 801d9c2:	9c08      	ldr	r4, [sp, #32]
 801d9c4:	f8c0 e014 	str.w	lr, [r0, #20]
 801d9c8:	4366      	muls	r6, r4
 801d9ca:	eb02 0806 	add.w	r8, r2, r6
 801d9ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d9d2:	f115 040f 	adds.w	r4, r5, #15
 801d9d6:	f100 809f 	bmi.w	801db18 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801d9da:	1124      	asrs	r4, r4, #4
 801d9dc:	eba4 040e 	sub.w	r4, r4, lr
 801d9e0:	6184      	str	r4, [r0, #24]
 801d9e2:	2c00      	cmp	r4, #0
 801d9e4:	f000 808a 	beq.w	801dafc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801d9e8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801d9ec:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801d9f0:	5995      	ldr	r5, [r2, r6]
 801d9f2:	eba4 0809 	sub.w	r8, r4, r9
 801d9f6:	59d4      	ldr	r4, [r2, r7]
 801d9f8:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801d9fc:	eba5 0a04 	sub.w	sl, r5, r4
 801da00:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801da04:	fb0e fe05 	mul.w	lr, lr, r5
 801da08:	fb0a ee19 	mls	lr, sl, r9, lr
 801da0c:	fb08 e404 	mla	r4, r8, r4, lr
 801da10:	3c01      	subs	r4, #1
 801da12:	19a4      	adds	r4, r4, r6
 801da14:	f100 808c 	bmi.w	801db30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801da18:	fb94 fef6 	sdiv	lr, r4, r6
 801da1c:	fb06 441e 	mls	r4, r6, lr, r4
 801da20:	f8c0 e000 	str.w	lr, [r0]
 801da24:	6104      	str	r4, [r0, #16]
 801da26:	2d00      	cmp	r5, #0
 801da28:	f2c0 8095 	blt.w	801db56 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801da2c:	fb95 f4f6 	sdiv	r4, r5, r6
 801da30:	fb06 5514 	mls	r5, r6, r4, r5
 801da34:	6044      	str	r4, [r0, #4]
 801da36:	6085      	str	r5, [r0, #8]
 801da38:	60c6      	str	r6, [r0, #12]
 801da3a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801da3e:	6945      	ldr	r5, [r0, #20]
 801da40:	59d2      	ldr	r2, [r2, r7]
 801da42:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801da46:	ee07 4a10 	vmov	s14, r4
 801da4a:	6804      	ldr	r4, [r0, #0]
 801da4c:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 801db78 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801da50:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801da54:	ee07 2a90 	vmov	s15, r2
 801da58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801da5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801da60:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801da64:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801da68:	ee27 7a26 	vmul.f32	s14, s14, s13
 801da6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801da70:	edd3 6a00 	vldr	s13, [r3]
 801da74:	eee6 6a07 	vfma.f32	s13, s12, s14
 801da78:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801da7c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801da80:	edc0 6a07 	vstr	s13, [r0, #28]
 801da84:	edd0 6a01 	vldr	s13, [r0, #4]
 801da88:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801da8c:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801da90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801da94:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801da98:	ed80 6a08 	vstr	s12, [r0, #32]
 801da9c:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801da9e:	6242      	str	r2, [r0, #36]	@ 0x24
 801daa0:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801daa4:	ed93 6a03 	vldr	s12, [r3, #12]
 801daa8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801daac:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801dab0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801dab4:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801dab8:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801dabc:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801dac0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801dac4:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801dac8:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801daca:	6302      	str	r2, [r0, #48]	@ 0x30
 801dacc:	ed93 6a06 	vldr	s12, [r3, #24]
 801dad0:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801dad4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801dad8:	eeb0 7a46 	vmov.f32	s14, s12
 801dadc:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801dae0:	eea6 7a27 	vfma.f32	s14, s12, s15
 801dae4:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801dae8:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801daec:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801daf0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801daf4:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801daf8:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801dafa:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801dafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db00:	2410      	movs	r4, #16
 801db02:	f1c5 0501 	rsb	r5, r5, #1
 801db06:	f015 050f 	ands.w	r5, r5, #15
 801db0a:	fb9e fef4 	sdiv	lr, lr, r4
 801db0e:	bf18      	it	ne
 801db10:	2501      	movne	r5, #1
 801db12:	ebae 0e05 	sub.w	lr, lr, r5
 801db16:	e753      	b.n	801d9c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801db18:	f04f 0910 	mov.w	r9, #16
 801db1c:	f1c5 0501 	rsb	r5, r5, #1
 801db20:	f015 050f 	ands.w	r5, r5, #15
 801db24:	fb94 f4f9 	sdiv	r4, r4, r9
 801db28:	bf18      	it	ne
 801db2a:	2501      	movne	r5, #1
 801db2c:	1b64      	subs	r4, r4, r5
 801db2e:	e755      	b.n	801d9dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801db30:	4264      	negs	r4, r4
 801db32:	fb94 fef6 	sdiv	lr, r4, r6
 801db36:	fb06 441e 	mls	r4, r6, lr, r4
 801db3a:	f1ce 0800 	rsb	r8, lr, #0
 801db3e:	f8c0 8000 	str.w	r8, [r0]
 801db42:	6104      	str	r4, [r0, #16]
 801db44:	2c00      	cmp	r4, #0
 801db46:	f43f af6e 	beq.w	801da26 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801db4a:	ea6f 0e0e 	mvn.w	lr, lr
 801db4e:	1b34      	subs	r4, r6, r4
 801db50:	f8c0 e000 	str.w	lr, [r0]
 801db54:	e766      	b.n	801da24 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801db56:	426d      	negs	r5, r5
 801db58:	fb95 f4f6 	sdiv	r4, r5, r6
 801db5c:	fb06 5514 	mls	r5, r6, r4, r5
 801db60:	f1c4 0e00 	rsb	lr, r4, #0
 801db64:	f8c0 e004 	str.w	lr, [r0, #4]
 801db68:	6085      	str	r5, [r0, #8]
 801db6a:	2d00      	cmp	r5, #0
 801db6c:	f43f af64 	beq.w	801da38 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801db70:	43e4      	mvns	r4, r4
 801db72:	1b75      	subs	r5, r6, r5
 801db74:	6044      	str	r4, [r0, #4]
 801db76:	e75e      	b.n	801da36 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801db78:	3d800000 	.word	0x3d800000

0801db7c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801db7c:	4b01      	ldr	r3, [pc, #4]	@ (801db84 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801db7e:	6018      	str	r0, [r3, #0]
 801db80:	4770      	bx	lr
 801db82:	bf00      	nop
 801db84:	2005bd84 	.word	0x2005bd84

0801db88 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801db88:	4b06      	ldr	r3, [pc, #24]	@ (801dba4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801db8a:	881a      	ldrh	r2, [r3, #0]
 801db8c:	4282      	cmp	r2, r0
 801db8e:	d807      	bhi.n	801dba0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801db90:	4b05      	ldr	r3, [pc, #20]	@ (801dba8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801db92:	881b      	ldrh	r3, [r3, #0]
 801db94:	4413      	add	r3, r2
 801db96:	4298      	cmp	r0, r3
 801db98:	bfac      	ite	ge
 801db9a:	2000      	movge	r0, #0
 801db9c:	2001      	movlt	r0, #1
 801db9e:	4770      	bx	lr
 801dba0:	2000      	movs	r0, #0
 801dba2:	4770      	bx	lr
 801dba4:	2005bda4 	.word	0x2005bda4
 801dba8:	2005bda8 	.word	0x2005bda8

0801dbac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801dbac:	b508      	push	{r3, lr}
 801dbae:	4601      	mov	r1, r0
 801dbb0:	f7ff ffea 	bl	801db88 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801dbb4:	b118      	cbz	r0, 801dbbe <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801dbb6:	4b02      	ldr	r3, [pc, #8]	@ (801dbc0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801dbb8:	681b      	ldr	r3, [r3, #0]
 801dbba:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801dbbe:	bd08      	pop	{r3, pc}
 801dbc0:	2005bd88 	.word	0x2005bd88

0801dbc4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801dbc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dbc6:	4c24      	ldr	r4, [pc, #144]	@ (801dc58 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801dbc8:	6823      	ldr	r3, [r4, #0]
 801dbca:	2b00      	cmp	r3, #0
 801dbcc:	d042      	beq.n	801dc54 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801dbce:	4a23      	ldr	r2, [pc, #140]	@ (801dc5c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801dbd0:	4d23      	ldr	r5, [pc, #140]	@ (801dc60 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801dbd2:	8811      	ldrh	r1, [r2, #0]
 801dbd4:	f8b5 c000 	ldrh.w	ip, [r5]
 801dbd8:	4822      	ldr	r0, [pc, #136]	@ (801dc64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801dbda:	4461      	add	r1, ip
 801dbdc:	1c4a      	adds	r2, r1, #1
 801dbde:	f022 0201 	bic.w	r2, r2, #1
 801dbe2:	008f      	lsls	r7, r1, #2
 801dbe4:	0412      	lsls	r2, r2, #16
 801dbe6:	19de      	adds	r6, r3, r7
 801dbe8:	0c12      	lsrs	r2, r2, #16
 801dbea:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801dbee:	6006      	str	r6, [r0, #0]
 801dbf0:	4e1d      	ldr	r6, [pc, #116]	@ (801dc68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801dbf2:	19da      	adds	r2, r3, r7
 801dbf4:	6032      	str	r2, [r6, #0]
 801dbf6:	220e      	movs	r2, #14
 801dbf8:	fb02 f20c 	mul.w	r2, r2, ip
 801dbfc:	3203      	adds	r2, #3
 801dbfe:	f022 0203 	bic.w	r2, r2, #3
 801dc02:	443a      	add	r2, r7
 801dc04:	4f19      	ldr	r7, [pc, #100]	@ (801dc6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801dc06:	4413      	add	r3, r2
 801dc08:	603b      	str	r3, [r7, #0]
 801dc0a:	2300      	movs	r3, #0
 801dc0c:	4f18      	ldr	r7, [pc, #96]	@ (801dc70 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801dc0e:	469c      	mov	ip, r3
 801dc10:	803b      	strh	r3, [r7, #0]
 801dc12:	4f18      	ldr	r7, [pc, #96]	@ (801dc74 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801dc14:	683f      	ldr	r7, [r7, #0]
 801dc16:	1aba      	subs	r2, r7, r2
 801dc18:	4f17      	ldr	r7, [pc, #92]	@ (801dc78 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801dc1a:	603a      	str	r2, [r7, #0]
 801dc1c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801dc20:	4a16      	ldr	r2, [pc, #88]	@ (801dc7c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801dc22:	8013      	strh	r3, [r2, #0]
 801dc24:	428b      	cmp	r3, r1
 801dc26:	d10d      	bne.n	801dc44 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801dc28:	2300      	movs	r3, #0
 801dc2a:	240e      	movs	r4, #14
 801dc2c:	882d      	ldrh	r5, [r5, #0]
 801dc2e:	6830      	ldr	r0, [r6, #0]
 801dc30:	429d      	cmp	r5, r3
 801dc32:	d90f      	bls.n	801dc54 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801dc34:	fb04 0203 	mla	r2, r4, r3, r0
 801dc38:	7b11      	ldrb	r1, [r2, #12]
 801dc3a:	3301      	adds	r3, #1
 801dc3c:	f36f 1145 	bfc	r1, #5, #1
 801dc40:	7311      	strb	r1, [r2, #12]
 801dc42:	e7f5      	b.n	801dc30 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801dc44:	6822      	ldr	r2, [r4, #0]
 801dc46:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801dc4a:	6802      	ldr	r2, [r0, #0]
 801dc4c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801dc50:	3301      	adds	r3, #1
 801dc52:	e7e7      	b.n	801dc24 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801dc54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc56:	bf00      	nop
 801dc58:	2005bd88 	.word	0x2005bd88
 801dc5c:	2005bda4 	.word	0x2005bda4
 801dc60:	2005bda8 	.word	0x2005bda8
 801dc64:	2005bd9c 	.word	0x2005bd9c
 801dc68:	2005bd8c 	.word	0x2005bd8c
 801dc6c:	2005bd94 	.word	0x2005bd94
 801dc70:	2005bda6 	.word	0x2005bda6
 801dc74:	2005bd90 	.word	0x2005bd90
 801dc78:	2005bda0 	.word	0x2005bda0
 801dc7c:	2005bd98 	.word	0x2005bd98

0801dc80 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801dc80:	4b06      	ldr	r3, [pc, #24]	@ (801dc9c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801dc82:	681b      	ldr	r3, [r3, #0]
 801dc84:	b943      	cbnz	r3, 801dc98 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801dc86:	b139      	cbz	r1, 801dc98 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801dc88:	4b05      	ldr	r3, [pc, #20]	@ (801dca0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801dc8a:	801a      	strh	r2, [r3, #0]
 801dc8c:	4b05      	ldr	r3, [pc, #20]	@ (801dca4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801dc8e:	6019      	str	r1, [r3, #0]
 801dc90:	4b05      	ldr	r3, [pc, #20]	@ (801dca8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801dc92:	6018      	str	r0, [r3, #0]
 801dc94:	f7ff bf96 	b.w	801dbc4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801dc98:	4770      	bx	lr
 801dc9a:	bf00      	nop
 801dc9c:	2005bd94 	.word	0x2005bd94
 801dca0:	2005bda8 	.word	0x2005bda8
 801dca4:	2005bd90 	.word	0x2005bd90
 801dca8:	2005bd88 	.word	0x2005bd88

0801dcac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801dcac:	b470      	push	{r4, r5, r6}
 801dcae:	4c07      	ldr	r4, [pc, #28]	@ (801dccc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801dcb0:	4605      	mov	r5, r0
 801dcb2:	6826      	ldr	r6, [r4, #0]
 801dcb4:	4610      	mov	r0, r2
 801dcb6:	9a03      	ldr	r2, [sp, #12]
 801dcb8:	b936      	cbnz	r6, 801dcc8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801dcba:	6025      	str	r5, [r4, #0]
 801dcbc:	4c04      	ldr	r4, [pc, #16]	@ (801dcd0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801dcbe:	8021      	strh	r1, [r4, #0]
 801dcc0:	bc70      	pop	{r4, r5, r6}
 801dcc2:	4619      	mov	r1, r3
 801dcc4:	f7ff bfdc 	b.w	801dc80 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801dcc8:	bc70      	pop	{r4, r5, r6}
 801dcca:	4770      	bx	lr
 801dccc:	2005bdac 	.word	0x2005bdac
 801dcd0:	2005bda4 	.word	0x2005bda4

0801dcd4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801dcd4:	4a12      	ldr	r2, [pc, #72]	@ (801dd20 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801dcd6:	8803      	ldrh	r3, [r0, #0]
 801dcd8:	8812      	ldrh	r2, [r2, #0]
 801dcda:	4293      	cmp	r3, r2
 801dcdc:	d207      	bcs.n	801dcee <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801dcde:	2114      	movs	r1, #20
 801dce0:	4a10      	ldr	r2, [pc, #64]	@ (801dd24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801dce2:	6812      	ldr	r2, [r2, #0]
 801dce4:	fb01 2303 	mla	r3, r1, r3, r2
 801dce8:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801dcec:	4770      	bx	lr
 801dcee:	490e      	ldr	r1, [pc, #56]	@ (801dd28 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801dcf0:	8809      	ldrh	r1, [r1, #0]
 801dcf2:	4411      	add	r1, r2
 801dcf4:	428b      	cmp	r3, r1
 801dcf6:	da04      	bge.n	801dd02 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801dcf8:	1a9b      	subs	r3, r3, r2
 801dcfa:	4a0c      	ldr	r2, [pc, #48]	@ (801dd2c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801dcfc:	210e      	movs	r1, #14
 801dcfe:	6812      	ldr	r2, [r2, #0]
 801dd00:	e7f0      	b.n	801dce4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801dd02:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801dd06:	4293      	cmp	r3, r2
 801dd08:	d108      	bne.n	801dd1c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801dd0a:	4b09      	ldr	r3, [pc, #36]	@ (801dd30 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801dd0c:	781b      	ldrb	r3, [r3, #0]
 801dd0e:	b91b      	cbnz	r3, 801dd18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801dd10:	4b08      	ldr	r3, [pc, #32]	@ (801dd34 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801dd12:	f9b3 0000 	ldrsh.w	r0, [r3]
 801dd16:	4770      	bx	lr
 801dd18:	4b07      	ldr	r3, [pc, #28]	@ (801dd38 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801dd1a:	e7fa      	b.n	801dd12 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801dd1c:	2000      	movs	r0, #0
 801dd1e:	4770      	bx	lr
 801dd20:	2005bda4 	.word	0x2005bda4
 801dd24:	2005bdac 	.word	0x2005bdac
 801dd28:	2005bda8 	.word	0x2005bda8
 801dd2c:	2005bd8c 	.word	0x2005bd8c
 801dd30:	2005bd14 	.word	0x2005bd14
 801dd34:	2005bd16 	.word	0x2005bd16
 801dd38:	2005bd18 	.word	0x2005bd18

0801dd3c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801dd3c:	4a12      	ldr	r2, [pc, #72]	@ (801dd88 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801dd3e:	8803      	ldrh	r3, [r0, #0]
 801dd40:	8812      	ldrh	r2, [r2, #0]
 801dd42:	4293      	cmp	r3, r2
 801dd44:	d207      	bcs.n	801dd56 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801dd46:	2114      	movs	r1, #20
 801dd48:	4a10      	ldr	r2, [pc, #64]	@ (801dd8c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801dd4a:	6812      	ldr	r2, [r2, #0]
 801dd4c:	fb01 2303 	mla	r3, r1, r3, r2
 801dd50:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801dd54:	4770      	bx	lr
 801dd56:	490e      	ldr	r1, [pc, #56]	@ (801dd90 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801dd58:	8809      	ldrh	r1, [r1, #0]
 801dd5a:	4411      	add	r1, r2
 801dd5c:	428b      	cmp	r3, r1
 801dd5e:	da04      	bge.n	801dd6a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801dd60:	1a9b      	subs	r3, r3, r2
 801dd62:	4a0c      	ldr	r2, [pc, #48]	@ (801dd94 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801dd64:	210e      	movs	r1, #14
 801dd66:	6812      	ldr	r2, [r2, #0]
 801dd68:	e7f0      	b.n	801dd4c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801dd6a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801dd6e:	4293      	cmp	r3, r2
 801dd70:	d108      	bne.n	801dd84 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801dd72:	4b09      	ldr	r3, [pc, #36]	@ (801dd98 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801dd74:	781b      	ldrb	r3, [r3, #0]
 801dd76:	b91b      	cbnz	r3, 801dd80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801dd78:	4b08      	ldr	r3, [pc, #32]	@ (801dd9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801dd7a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801dd7e:	4770      	bx	lr
 801dd80:	4b07      	ldr	r3, [pc, #28]	@ (801dda0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801dd82:	e7fa      	b.n	801dd7a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801dd84:	2000      	movs	r0, #0
 801dd86:	4770      	bx	lr
 801dd88:	2005bda4 	.word	0x2005bda4
 801dd8c:	2005bdac 	.word	0x2005bdac
 801dd90:	2005bda8 	.word	0x2005bda8
 801dd94:	2005bd8c 	.word	0x2005bd8c
 801dd98:	2005bd14 	.word	0x2005bd14
 801dd9c:	2005bd18 	.word	0x2005bd18
 801dda0:	2005bd16 	.word	0x2005bd16

0801dda4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801dda4:	b530      	push	{r4, r5, lr}
 801dda6:	4a22      	ldr	r2, [pc, #136]	@ (801de30 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801dda8:	880b      	ldrh	r3, [r1, #0]
 801ddaa:	8812      	ldrh	r2, [r2, #0]
 801ddac:	4293      	cmp	r3, r2
 801ddae:	d213      	bcs.n	801ddd8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801ddb0:	2114      	movs	r1, #20
 801ddb2:	4a20      	ldr	r2, [pc, #128]	@ (801de34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801ddb4:	6812      	ldr	r2, [r2, #0]
 801ddb6:	fb01 2303 	mla	r3, r1, r3, r2
 801ddba:	8a1a      	ldrh	r2, [r3, #16]
 801ddbc:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801ddc0:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801ddc4:	8a5b      	ldrh	r3, [r3, #18]
 801ddc6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ddca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ddce:	8004      	strh	r4, [r0, #0]
 801ddd0:	8041      	strh	r1, [r0, #2]
 801ddd2:	8082      	strh	r2, [r0, #4]
 801ddd4:	80c3      	strh	r3, [r0, #6]
 801ddd6:	e024      	b.n	801de22 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801ddd8:	4917      	ldr	r1, [pc, #92]	@ (801de38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801ddda:	8809      	ldrh	r1, [r1, #0]
 801dddc:	4411      	add	r1, r2
 801ddde:	428b      	cmp	r3, r1
 801dde0:	da10      	bge.n	801de04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801dde2:	1a9b      	subs	r3, r3, r2
 801dde4:	220e      	movs	r2, #14
 801dde6:	4353      	muls	r3, r2
 801dde8:	4a14      	ldr	r2, [pc, #80]	@ (801de3c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801ddea:	6811      	ldr	r1, [r2, #0]
 801ddec:	18ca      	adds	r2, r1, r3
 801ddee:	5ecd      	ldrsh	r5, [r1, r3]
 801ddf0:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801ddf4:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801ddf8:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801ddfc:	8005      	strh	r5, [r0, #0]
 801ddfe:	8044      	strh	r4, [r0, #2]
 801de00:	8081      	strh	r1, [r0, #4]
 801de02:	e7e7      	b.n	801ddd4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801de04:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801de08:	4293      	cmp	r3, r2
 801de0a:	d10b      	bne.n	801de24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801de0c:	4b0c      	ldr	r3, [pc, #48]	@ (801de40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801de0e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801de12:	4b0c      	ldr	r3, [pc, #48]	@ (801de44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801de14:	8081      	strh	r1, [r0, #4]
 801de16:	f9b3 2000 	ldrsh.w	r2, [r3]
 801de1a:	2300      	movs	r3, #0
 801de1c:	80c2      	strh	r2, [r0, #6]
 801de1e:	8003      	strh	r3, [r0, #0]
 801de20:	8043      	strh	r3, [r0, #2]
 801de22:	bd30      	pop	{r4, r5, pc}
 801de24:	2300      	movs	r3, #0
 801de26:	8003      	strh	r3, [r0, #0]
 801de28:	8043      	strh	r3, [r0, #2]
 801de2a:	8083      	strh	r3, [r0, #4]
 801de2c:	e7d2      	b.n	801ddd4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801de2e:	bf00      	nop
 801de30:	2005bda4 	.word	0x2005bda4
 801de34:	2005bdac 	.word	0x2005bdac
 801de38:	2005bda8 	.word	0x2005bda8
 801de3c:	2005bd8c 	.word	0x2005bd8c
 801de40:	2005bd10 	.word	0x2005bd10
 801de44:	2005bd12 	.word	0x2005bd12

0801de48 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801de48:	4a17      	ldr	r2, [pc, #92]	@ (801dea8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801de4a:	8803      	ldrh	r3, [r0, #0]
 801de4c:	8812      	ldrh	r2, [r2, #0]
 801de4e:	4293      	cmp	r3, r2
 801de50:	d213      	bcs.n	801de7a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801de52:	2114      	movs	r1, #20
 801de54:	4a15      	ldr	r2, [pc, #84]	@ (801deac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801de56:	6812      	ldr	r2, [r2, #0]
 801de58:	fb01 2303 	mla	r3, r1, r3, r2
 801de5c:	8a1a      	ldrh	r2, [r3, #16]
 801de5e:	8919      	ldrh	r1, [r3, #8]
 801de60:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801de64:	428a      	cmp	r2, r1
 801de66:	db1d      	blt.n	801dea4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801de68:	8a58      	ldrh	r0, [r3, #18]
 801de6a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801de6e:	895b      	ldrh	r3, [r3, #10]
 801de70:	4298      	cmp	r0, r3
 801de72:	bfac      	ite	ge
 801de74:	2000      	movge	r0, #0
 801de76:	2001      	movlt	r0, #1
 801de78:	4770      	bx	lr
 801de7a:	490d      	ldr	r1, [pc, #52]	@ (801deb0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801de7c:	8809      	ldrh	r1, [r1, #0]
 801de7e:	4411      	add	r1, r2
 801de80:	428b      	cmp	r3, r1
 801de82:	da0d      	bge.n	801dea0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801de84:	210e      	movs	r1, #14
 801de86:	1a9b      	subs	r3, r3, r2
 801de88:	4a0a      	ldr	r2, [pc, #40]	@ (801deb4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801de8a:	6812      	ldr	r2, [r2, #0]
 801de8c:	fb01 2303 	mla	r3, r1, r3, r2
 801de90:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801de94:	891a      	ldrh	r2, [r3, #8]
 801de96:	4291      	cmp	r1, r2
 801de98:	db04      	blt.n	801dea4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801de9a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801de9e:	e7e6      	b.n	801de6e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801dea0:	2000      	movs	r0, #0
 801dea2:	4770      	bx	lr
 801dea4:	2001      	movs	r0, #1
 801dea6:	4770      	bx	lr
 801dea8:	2005bda4 	.word	0x2005bda4
 801deac:	2005bdac 	.word	0x2005bdac
 801deb0:	2005bda8 	.word	0x2005bda8
 801deb4:	2005bd8c 	.word	0x2005bd8c

0801deb8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801deb8:	4a12      	ldr	r2, [pc, #72]	@ (801df04 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801deba:	8803      	ldrh	r3, [r0, #0]
 801debc:	8811      	ldrh	r1, [r2, #0]
 801debe:	428b      	cmp	r3, r1
 801dec0:	d20b      	bcs.n	801deda <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801dec2:	4a11      	ldr	r2, [pc, #68]	@ (801df08 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801dec4:	6812      	ldr	r2, [r2, #0]
 801dec6:	b112      	cbz	r2, 801dece <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801dec8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801decc:	b9c0      	cbnz	r0, 801df00 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801dece:	4a0f      	ldr	r2, [pc, #60]	@ (801df0c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801ded0:	6811      	ldr	r1, [r2, #0]
 801ded2:	2214      	movs	r2, #20
 801ded4:	4353      	muls	r3, r2
 801ded6:	58c8      	ldr	r0, [r1, r3]
 801ded8:	4770      	bx	lr
 801deda:	4a0d      	ldr	r2, [pc, #52]	@ (801df10 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801dedc:	8812      	ldrh	r2, [r2, #0]
 801dede:	440a      	add	r2, r1
 801dee0:	4293      	cmp	r3, r2
 801dee2:	da04      	bge.n	801deee <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801dee4:	4a08      	ldr	r2, [pc, #32]	@ (801df08 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801dee6:	6812      	ldr	r2, [r2, #0]
 801dee8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801deec:	4770      	bx	lr
 801deee:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801def2:	4293      	cmp	r3, r2
 801def4:	d103      	bne.n	801defe <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801def6:	4b07      	ldr	r3, [pc, #28]	@ (801df14 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801def8:	681b      	ldr	r3, [r3, #0]
 801defa:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801defc:	4770      	bx	lr
 801defe:	2000      	movs	r0, #0
 801df00:	4770      	bx	lr
 801df02:	bf00      	nop
 801df04:	2005bda4 	.word	0x2005bda4
 801df08:	2005bd88 	.word	0x2005bd88
 801df0c:	2005bdac 	.word	0x2005bdac
 801df10:	2005bda8 	.word	0x2005bda8
 801df14:	2005bd1c 	.word	0x2005bd1c

0801df18 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801df18:	4b24      	ldr	r3, [pc, #144]	@ (801dfac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801df1a:	8802      	ldrh	r2, [r0, #0]
 801df1c:	8818      	ldrh	r0, [r3, #0]
 801df1e:	4282      	cmp	r2, r0
 801df20:	d221      	bcs.n	801df66 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801df22:	4b23      	ldr	r3, [pc, #140]	@ (801dfb0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801df24:	6819      	ldr	r1, [r3, #0]
 801df26:	2314      	movs	r3, #20
 801df28:	fb03 1302 	mla	r3, r3, r2, r1
 801df2c:	6858      	ldr	r0, [r3, #4]
 801df2e:	2800      	cmp	r0, #0
 801df30:	d03a      	beq.n	801dfa8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801df32:	4920      	ldr	r1, [pc, #128]	@ (801dfb4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801df34:	6809      	ldr	r1, [r1, #0]
 801df36:	2900      	cmp	r1, #0
 801df38:	d036      	beq.n	801dfa8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801df3a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801df3e:	2900      	cmp	r1, #0
 801df40:	d032      	beq.n	801dfa8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801df42:	891a      	ldrh	r2, [r3, #8]
 801df44:	8958      	ldrh	r0, [r3, #10]
 801df46:	4350      	muls	r0, r2
 801df48:	7c5a      	ldrb	r2, [r3, #17]
 801df4a:	7cdb      	ldrb	r3, [r3, #19]
 801df4c:	0952      	lsrs	r2, r2, #5
 801df4e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801df52:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801df56:	2b0b      	cmp	r3, #11
 801df58:	bf18      	it	ne
 801df5a:	0040      	lslne	r0, r0, #1
 801df5c:	3003      	adds	r0, #3
 801df5e:	f020 0003 	bic.w	r0, r0, #3
 801df62:	4408      	add	r0, r1
 801df64:	4770      	bx	lr
 801df66:	4b14      	ldr	r3, [pc, #80]	@ (801dfb8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801df68:	881b      	ldrh	r3, [r3, #0]
 801df6a:	4403      	add	r3, r0
 801df6c:	429a      	cmp	r2, r3
 801df6e:	da1a      	bge.n	801dfa6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801df70:	210e      	movs	r1, #14
 801df72:	4b12      	ldr	r3, [pc, #72]	@ (801dfbc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801df74:	1a10      	subs	r0, r2, r0
 801df76:	681b      	ldr	r3, [r3, #0]
 801df78:	fb01 3000 	mla	r0, r1, r0, r3
 801df7c:	7b03      	ldrb	r3, [r0, #12]
 801df7e:	f003 031f 	and.w	r3, r3, #31
 801df82:	2b0b      	cmp	r3, #11
 801df84:	d10b      	bne.n	801df9e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801df86:	8903      	ldrh	r3, [r0, #8]
 801df88:	8940      	ldrh	r0, [r0, #10]
 801df8a:	4358      	muls	r0, r3
 801df8c:	4b09      	ldr	r3, [pc, #36]	@ (801dfb4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801df8e:	3003      	adds	r0, #3
 801df90:	6819      	ldr	r1, [r3, #0]
 801df92:	f020 0303 	bic.w	r3, r0, #3
 801df96:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801df9a:	4418      	add	r0, r3
 801df9c:	4770      	bx	lr
 801df9e:	2b0d      	cmp	r3, #13
 801dfa0:	d101      	bne.n	801dfa6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801dfa2:	300d      	adds	r0, #13
 801dfa4:	4770      	bx	lr
 801dfa6:	2000      	movs	r0, #0
 801dfa8:	4770      	bx	lr
 801dfaa:	bf00      	nop
 801dfac:	2005bda4 	.word	0x2005bda4
 801dfb0:	2005bdac 	.word	0x2005bdac
 801dfb4:	2005bd88 	.word	0x2005bd88
 801dfb8:	2005bda8 	.word	0x2005bda8
 801dfbc:	2005bd8c 	.word	0x2005bd8c

0801dfc0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801dfc0:	b510      	push	{r4, lr}
 801dfc2:	4b1f      	ldr	r3, [pc, #124]	@ (801e040 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801dfc4:	8802      	ldrh	r2, [r0, #0]
 801dfc6:	881b      	ldrh	r3, [r3, #0]
 801dfc8:	429a      	cmp	r2, r3
 801dfca:	d21a      	bcs.n	801e002 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801dfcc:	2114      	movs	r1, #20
 801dfce:	4b1d      	ldr	r3, [pc, #116]	@ (801e044 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801dfd0:	681b      	ldr	r3, [r3, #0]
 801dfd2:	fb01 3102 	mla	r1, r1, r2, r3
 801dfd6:	7c4b      	ldrb	r3, [r1, #17]
 801dfd8:	0958      	lsrs	r0, r3, #5
 801dfda:	7ccb      	ldrb	r3, [r1, #19]
 801dfdc:	491a      	ldr	r1, [pc, #104]	@ (801e048 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801dfde:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801dfe2:	6809      	ldr	r1, [r1, #0]
 801dfe4:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801dfe8:	b2d8      	uxtb	r0, r3
 801dfea:	b149      	cbz	r1, 801e000 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801dfec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801dff0:	b132      	cbz	r2, 801e000 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801dff2:	2b0e      	cmp	r3, #14
 801dff4:	d021      	beq.n	801e03a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801dff6:	280f      	cmp	r0, #15
 801dff8:	d01d      	beq.n	801e036 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801dffa:	2810      	cmp	r0, #16
 801dffc:	bf08      	it	eq
 801dffe:	2002      	moveq	r0, #2
 801e000:	bd10      	pop	{r4, pc}
 801e002:	4912      	ldr	r1, [pc, #72]	@ (801e04c <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801e004:	8809      	ldrh	r1, [r1, #0]
 801e006:	4419      	add	r1, r3
 801e008:	428a      	cmp	r2, r1
 801e00a:	da09      	bge.n	801e020 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801e00c:	210e      	movs	r1, #14
 801e00e:	1ad3      	subs	r3, r2, r3
 801e010:	4a0f      	ldr	r2, [pc, #60]	@ (801e050 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801e012:	6812      	ldr	r2, [r2, #0]
 801e014:	fb01 2303 	mla	r3, r1, r3, r2
 801e018:	7b18      	ldrb	r0, [r3, #12]
 801e01a:	f000 001f 	and.w	r0, r0, #31
 801e01e:	e7ef      	b.n	801e000 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e020:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801e024:	429a      	cmp	r2, r3
 801e026:	d108      	bne.n	801e03a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801e028:	f7f1 fdde 	bl	800fbe8 <_ZN8touchgfx3HAL3lcdEv>
 801e02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e030:	6803      	ldr	r3, [r0, #0]
 801e032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e034:	4718      	bx	r3
 801e036:	2001      	movs	r0, #1
 801e038:	e7e2      	b.n	801e000 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e03a:	2000      	movs	r0, #0
 801e03c:	e7e0      	b.n	801e000 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e03e:	bf00      	nop
 801e040:	2005bda4 	.word	0x2005bda4
 801e044:	2005bdac 	.word	0x2005bdac
 801e048:	2005bd88 	.word	0x2005bd88
 801e04c:	2005bda8 	.word	0x2005bda8
 801e050:	2005bd8c 	.word	0x2005bd8c

0801e054 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801e054:	2010      	movs	r0, #16
 801e056:	4770      	bx	lr

0801e058 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801e058:	2000      	movs	r0, #0
 801e05a:	4770      	bx	lr

0801e05c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801e05c:	4b02      	ldr	r3, [pc, #8]	@ (801e068 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801e05e:	8818      	ldrh	r0, [r3, #0]
 801e060:	0040      	lsls	r0, r0, #1
 801e062:	b280      	uxth	r0, r0
 801e064:	4770      	bx	lr
 801e066:	bf00      	nop
 801e068:	2005bd16 	.word	0x2005bd16

0801e06c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e06c:	2bff      	cmp	r3, #255	@ 0xff
 801e06e:	d05e      	beq.n	801e12e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 801e070:	2a0b      	cmp	r2, #11
 801e072:	d058      	beq.n	801e126 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801e074:	d80e      	bhi.n	801e094 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801e076:	2a03      	cmp	r2, #3
 801e078:	d04d      	beq.n	801e116 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 801e07a:	d804      	bhi.n	801e086 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e07c:	2a01      	cmp	r2, #1
 801e07e:	d04c      	beq.n	801e11a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 801e080:	d94d      	bls.n	801e11e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 801e082:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801e084:	e031      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e086:	2a09      	cmp	r2, #9
 801e088:	d04d      	beq.n	801e126 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801e08a:	d84a      	bhi.n	801e122 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801e08c:	2a08      	cmp	r2, #8
 801e08e:	d048      	beq.n	801e122 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801e090:	2300      	movs	r3, #0
 801e092:	e02a      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e094:	2a2f      	cmp	r2, #47	@ 0x2f
 801e096:	d02c      	beq.n	801e0f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801e098:	d811      	bhi.n	801e0be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801e09a:	2a2d      	cmp	r2, #45	@ 0x2d
 801e09c:	d018      	beq.n	801e0d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 801e09e:	d831      	bhi.n	801e104 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 801e0a0:	2a2c      	cmp	r2, #44	@ 0x2c
 801e0a2:	d1f5      	bne.n	801e090 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0a4:	684a      	ldr	r2, [r1, #4]
 801e0a6:	7813      	ldrb	r3, [r2, #0]
 801e0a8:	7852      	ldrb	r2, [r2, #1]
 801e0aa:	2a00      	cmp	r2, #0
 801e0ac:	d1f0      	bne.n	801e090 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0ae:	2b01      	cmp	r3, #1
 801e0b0:	d01d      	beq.n	801e0ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801e0b2:	2b00      	cmp	r3, #0
 801e0b4:	d02d      	beq.n	801e112 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801e0b6:	2b02      	cmp	r3, #2
 801e0b8:	d1ea      	bne.n	801e090 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0ba:	68c3      	ldr	r3, [r0, #12]
 801e0bc:	e015      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e0be:	2a31      	cmp	r2, #49	@ 0x31
 801e0c0:	d004      	beq.n	801e0cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 801e0c2:	d332      	bcc.n	801e12a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801e0c4:	2a32      	cmp	r2, #50	@ 0x32
 801e0c6:	d030      	beq.n	801e12a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801e0c8:	2a33      	cmp	r2, #51	@ 0x33
 801e0ca:	d1e1      	bne.n	801e090 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0cc:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 801e0ce:	e00c      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e0d0:	684a      	ldr	r2, [r1, #4]
 801e0d2:	7813      	ldrb	r3, [r2, #0]
 801e0d4:	7852      	ldrb	r2, [r2, #1]
 801e0d6:	2a00      	cmp	r2, #0
 801e0d8:	d1da      	bne.n	801e090 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0da:	2b01      	cmp	r3, #1
 801e0dc:	d004      	beq.n	801e0e8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 801e0de:	d30f      	bcc.n	801e100 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 801e0e0:	2b02      	cmp	r3, #2
 801e0e2:	d1d5      	bne.n	801e090 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0e4:	6943      	ldr	r3, [r0, #20]
 801e0e6:	e000      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e0e8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801e0ea:	4618      	mov	r0, r3
 801e0ec:	4770      	bx	lr
 801e0ee:	69c3      	ldr	r3, [r0, #28]
 801e0f0:	e7fb      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e0f2:	684b      	ldr	r3, [r1, #4]
 801e0f4:	781a      	ldrb	r2, [r3, #0]
 801e0f6:	785b      	ldrb	r3, [r3, #1]
 801e0f8:	2b00      	cmp	r3, #0
 801e0fa:	d1c9      	bne.n	801e090 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0fc:	2a00      	cmp	r2, #0
 801e0fe:	d1f4      	bne.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e100:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801e102:	e7f2      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e104:	684b      	ldr	r3, [r1, #4]
 801e106:	781a      	ldrb	r2, [r3, #0]
 801e108:	785b      	ldrb	r3, [r3, #1]
 801e10a:	2b00      	cmp	r3, #0
 801e10c:	d1c0      	bne.n	801e090 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e10e:	2a00      	cmp	r2, #0
 801e110:	d1eb      	bne.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e112:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801e114:	e7e9      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e116:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801e118:	e7e7      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e11a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801e11c:	e7e5      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e11e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801e120:	e7e3      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e122:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 801e124:	e7e1      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e126:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 801e128:	e7df      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e12a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801e12c:	e7dd      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e12e:	2a0b      	cmp	r2, #11
 801e130:	d059      	beq.n	801e1e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801e132:	d80e      	bhi.n	801e152 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 801e134:	2a03      	cmp	r2, #3
 801e136:	d050      	beq.n	801e1da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 801e138:	d804      	bhi.n	801e144 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801e13a:	2a01      	cmp	r2, #1
 801e13c:	d04f      	beq.n	801e1de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 801e13e:	d950      	bls.n	801e1e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 801e140:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801e142:	e7d2      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e144:	2a09      	cmp	r2, #9
 801e146:	d04e      	beq.n	801e1e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801e148:	d801      	bhi.n	801e14e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801e14a:	2a08      	cmp	r2, #8
 801e14c:	d1a0      	bne.n	801e090 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e14e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 801e150:	e7cb      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e152:	2a2f      	cmp	r2, #47	@ 0x2f
 801e154:	d02d      	beq.n	801e1b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 801e156:	d811      	bhi.n	801e17c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801e158:	2a2d      	cmp	r2, #45	@ 0x2d
 801e15a:	d018      	beq.n	801e18e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 801e15c:	d833      	bhi.n	801e1c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 801e15e:	2a2c      	cmp	r2, #44	@ 0x2c
 801e160:	d196      	bne.n	801e090 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e162:	684a      	ldr	r2, [r1, #4]
 801e164:	7813      	ldrb	r3, [r2, #0]
 801e166:	7852      	ldrb	r2, [r2, #1]
 801e168:	2a00      	cmp	r2, #0
 801e16a:	d191      	bne.n	801e090 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e16c:	2b01      	cmp	r3, #1
 801e16e:	d01e      	beq.n	801e1ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e170:	2b00      	cmp	r3, #0
 801e172:	d030      	beq.n	801e1d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 801e174:	2b02      	cmp	r3, #2
 801e176:	d18b      	bne.n	801e090 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e178:	6903      	ldr	r3, [r0, #16]
 801e17a:	e7b6      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e17c:	2a31      	cmp	r2, #49	@ 0x31
 801e17e:	d004      	beq.n	801e18a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 801e180:	d333      	bcc.n	801e1ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801e182:	2a32      	cmp	r2, #50	@ 0x32
 801e184:	d031      	beq.n	801e1ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801e186:	2a33      	cmp	r2, #51	@ 0x33
 801e188:	d182      	bne.n	801e090 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e18a:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801e18c:	e7ad      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e18e:	684a      	ldr	r2, [r1, #4]
 801e190:	7813      	ldrb	r3, [r2, #0]
 801e192:	7852      	ldrb	r2, [r2, #1]
 801e194:	2a00      	cmp	r2, #0
 801e196:	f47f af7b 	bne.w	801e090 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e19a:	2b01      	cmp	r3, #1
 801e19c:	d005      	beq.n	801e1aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e19e:	d310      	bcc.n	801e1c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 801e1a0:	2b02      	cmp	r3, #2
 801e1a2:	f47f af75 	bne.w	801e090 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e1a6:	6983      	ldr	r3, [r0, #24]
 801e1a8:	e79f      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e1aa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801e1ac:	e79d      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e1ae:	6a03      	ldr	r3, [r0, #32]
 801e1b0:	e79b      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e1b2:	684b      	ldr	r3, [r1, #4]
 801e1b4:	781a      	ldrb	r2, [r3, #0]
 801e1b6:	785b      	ldrb	r3, [r3, #1]
 801e1b8:	2b00      	cmp	r3, #0
 801e1ba:	f47f af69 	bne.w	801e090 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e1be:	2a00      	cmp	r2, #0
 801e1c0:	d193      	bne.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e1c2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801e1c4:	e791      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e1c6:	684b      	ldr	r3, [r1, #4]
 801e1c8:	781a      	ldrb	r2, [r3, #0]
 801e1ca:	785b      	ldrb	r3, [r3, #1]
 801e1cc:	2b00      	cmp	r3, #0
 801e1ce:	f47f af5f 	bne.w	801e090 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e1d2:	2a00      	cmp	r2, #0
 801e1d4:	d189      	bne.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e1d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801e1d8:	e787      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e1da:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801e1dc:	e785      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e1de:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801e1e0:	e783      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e1e2:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801e1e4:	e781      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e1e6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801e1e8:	e77f      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e1ea:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801e1ec:	e77d      	b.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

0801e1ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e1ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1f2:	b087      	sub	sp, #28
 801e1f4:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801e1f6:	9101      	str	r1, [sp, #4]
 801e1f8:	9205      	str	r2, [sp, #20]
 801e1fa:	6841      	ldr	r1, [r0, #4]
 801e1fc:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801e200:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801e204:	9202      	str	r2, [sp, #8]
 801e206:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801e20a:	fb01 2404 	mla	r4, r1, r4, r2
 801e20e:	6802      	ldr	r2, [r0, #0]
 801e210:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e214:	f8de 2000 	ldr.w	r2, [lr]
 801e218:	9203      	str	r2, [sp, #12]
 801e21a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e21e:	3204      	adds	r2, #4
 801e220:	9204      	str	r2, [sp, #16]
 801e222:	9a02      	ldr	r2, [sp, #8]
 801e224:	43d6      	mvns	r6, r2
 801e226:	b2f6      	uxtb	r6, r6
 801e228:	9a01      	ldr	r2, [sp, #4]
 801e22a:	2a00      	cmp	r2, #0
 801e22c:	dc03      	bgt.n	801e236 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e22e:	9a05      	ldr	r2, [sp, #20]
 801e230:	2a00      	cmp	r2, #0
 801e232:	f340 8129 	ble.w	801e488 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e236:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e238:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e23c:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e240:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e242:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e246:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e24a:	2b00      	cmp	r3, #0
 801e24c:	dd0e      	ble.n	801e26c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e24e:	1408      	asrs	r0, r1, #16
 801e250:	d405      	bmi.n	801e25e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e252:	4560      	cmp	r0, ip
 801e254:	da03      	bge.n	801e25e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e256:	1410      	asrs	r0, r2, #16
 801e258:	d401      	bmi.n	801e25e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e25a:	42b8      	cmp	r0, r7
 801e25c:	db07      	blt.n	801e26e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e25e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e260:	3b01      	subs	r3, #1
 801e262:	4401      	add	r1, r0
 801e264:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801e266:	3402      	adds	r4, #2
 801e268:	4402      	add	r2, r0
 801e26a:	e7ee      	b.n	801e24a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e26c:	d071      	beq.n	801e352 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e26e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801e270:	1e58      	subs	r0, r3, #1
 801e272:	fb05 1500 	mla	r5, r5, r0, r1
 801e276:	142d      	asrs	r5, r5, #16
 801e278:	d45f      	bmi.n	801e33a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e27a:	4565      	cmp	r5, ip
 801e27c:	da5d      	bge.n	801e33a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e27e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801e280:	fb05 2000 	mla	r0, r5, r0, r2
 801e284:	1400      	asrs	r0, r0, #16
 801e286:	d458      	bmi.n	801e33a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e288:	42b8      	cmp	r0, r7
 801e28a:	da56      	bge.n	801e33a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e28c:	4699      	mov	r9, r3
 801e28e:	46a2      	mov	sl, r4
 801e290:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801e294:	f1b9 0f00 	cmp.w	r9, #0
 801e298:	dd57      	ble.n	801e34a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801e29a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e29e:	9803      	ldr	r0, [sp, #12]
 801e2a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e2a4:	fb07 000c 	mla	r0, r7, ip, r0
 801e2a8:	140d      	asrs	r5, r1, #16
 801e2aa:	5d40      	ldrb	r0, [r0, r5]
 801e2ac:	9d04      	ldr	r5, [sp, #16]
 801e2ae:	f109 39ff 	add.w	r9, r9, #4294967295
 801e2b2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e2b6:	f8ba 5000 	ldrh.w	r5, [sl]
 801e2ba:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e2be:	122f      	asrs	r7, r5, #8
 801e2c0:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e2c4:	fb17 f706 	smulbb	r7, r7, r6
 801e2c8:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e2cc:	00ed      	lsls	r5, r5, #3
 801e2ce:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801e2d2:	b2ed      	uxtb	r5, r5
 801e2d4:	fb18 f806 	smulbb	r8, r8, r6
 801e2d8:	fb15 f506 	smulbb	r5, r5, r6
 801e2dc:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e2e0:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e2e4:	10c7      	asrs	r7, r0, #3
 801e2e6:	00c0      	lsls	r0, r0, #3
 801e2e8:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e2ec:	b2c0      	uxtb	r0, r0
 801e2ee:	fb07 870b 	mla	r7, r7, fp, r8
 801e2f2:	fb00 500b 	mla	r0, r0, fp, r5
 801e2f6:	fa1f fc8c 	uxth.w	ip, ip
 801e2fa:	b280      	uxth	r0, r0
 801e2fc:	b2bf      	uxth	r7, r7
 801e2fe:	f10c 0501 	add.w	r5, ip, #1
 801e302:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e306:	f107 0801 	add.w	r8, r7, #1
 801e30a:	1c45      	adds	r5, r0, #1
 801e30c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e310:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e314:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e316:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e31a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e31e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e322:	ea45 0c0c 	orr.w	ip, r5, ip
 801e326:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801e32a:	4401      	add	r1, r0
 801e32c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801e32e:	ea4c 0c08 	orr.w	ip, ip, r8
 801e332:	f82a cb02 	strh.w	ip, [sl], #2
 801e336:	4402      	add	r2, r0
 801e338:	e7ac      	b.n	801e294 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e33a:	f04f 0800 	mov.w	r8, #0
 801e33e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801e342:	eb03 0008 	add.w	r0, r3, r8
 801e346:	2800      	cmp	r0, #0
 801e348:	dc41      	bgt.n	801e3ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e34a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e34e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e352:	9b01      	ldr	r3, [sp, #4]
 801e354:	2b00      	cmp	r3, #0
 801e356:	f340 8097 	ble.w	801e488 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e35a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e35e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e362:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e366:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e36a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e36e:	eef0 6a62 	vmov.f32	s13, s5
 801e372:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e376:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e37a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e37e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e382:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e386:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801e38a:	eef0 6a43 	vmov.f32	s13, s6
 801e38e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e392:	ee12 2a90 	vmov	r2, s5
 801e396:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e39a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e39c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e3a0:	fb92 f3f3 	sdiv	r3, r2, r3
 801e3a4:	ee13 2a10 	vmov	r2, s6
 801e3a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e3aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e3ac:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801e3b0:	fb92 f3f3 	sdiv	r3, r2, r3
 801e3b4:	9314      	str	r3, [sp, #80]	@ 0x50
 801e3b6:	9b01      	ldr	r3, [sp, #4]
 801e3b8:	9a05      	ldr	r2, [sp, #20]
 801e3ba:	3b01      	subs	r3, #1
 801e3bc:	9301      	str	r3, [sp, #4]
 801e3be:	eeb0 3a67 	vmov.f32	s6, s15
 801e3c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e3c4:	eef0 2a47 	vmov.f32	s5, s14
 801e3c8:	bf08      	it	eq
 801e3ca:	4613      	moveq	r3, r2
 801e3cc:	e72c      	b.n	801e228 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e3ce:	140f      	asrs	r7, r1, #16
 801e3d0:	d453      	bmi.n	801e47a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e3d2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e3d6:	42bd      	cmp	r5, r7
 801e3d8:	dd4f      	ble.n	801e47a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e3da:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e3de:	d44c      	bmi.n	801e47a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e3e0:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e3e4:	4560      	cmp	r0, ip
 801e3e6:	dd48      	ble.n	801e47a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e3e8:	9803      	ldr	r0, [sp, #12]
 801e3ea:	b22d      	sxth	r5, r5
 801e3ec:	fb0c 0505 	mla	r5, ip, r5, r0
 801e3f0:	5de8      	ldrb	r0, [r5, r7]
 801e3f2:	9d04      	ldr	r5, [sp, #16]
 801e3f4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e3f8:	f06f 0501 	mvn.w	r5, #1
 801e3fc:	fb05 fb08 	mul.w	fp, r5, r8
 801e400:	f834 500b 	ldrh.w	r5, [r4, fp]
 801e404:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e408:	122f      	asrs	r7, r5, #8
 801e40a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e40e:	fb17 f706 	smulbb	r7, r7, r6
 801e412:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e416:	00ed      	lsls	r5, r5, #3
 801e418:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801e41c:	b2ed      	uxtb	r5, r5
 801e41e:	fb19 f906 	smulbb	r9, r9, r6
 801e422:	fb15 f506 	smulbb	r5, r5, r6
 801e426:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e42a:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801e42e:	10c7      	asrs	r7, r0, #3
 801e430:	00c0      	lsls	r0, r0, #3
 801e432:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e436:	b2c0      	uxtb	r0, r0
 801e438:	fb07 970a 	mla	r7, r7, sl, r9
 801e43c:	fb00 500a 	mla	r0, r0, sl, r5
 801e440:	fa1f fc8c 	uxth.w	ip, ip
 801e444:	b2bf      	uxth	r7, r7
 801e446:	b280      	uxth	r0, r0
 801e448:	f10c 0501 	add.w	r5, ip, #1
 801e44c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e450:	f107 0901 	add.w	r9, r7, #1
 801e454:	1c45      	adds	r5, r0, #1
 801e456:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e45a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801e45e:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e462:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e466:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e46a:	ea45 0c0c 	orr.w	ip, r5, ip
 801e46e:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801e472:	ea4c 0c09 	orr.w	ip, ip, r9
 801e476:	f824 c00b 	strh.w	ip, [r4, fp]
 801e47a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e47c:	f108 38ff 	add.w	r8, r8, #4294967295
 801e480:	4401      	add	r1, r0
 801e482:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801e484:	4402      	add	r2, r0
 801e486:	e75c      	b.n	801e342 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e488:	b007      	add	sp, #28
 801e48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e48e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e48e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e492:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e496:	b085      	sub	sp, #20
 801e498:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801e49a:	4693      	mov	fp, r2
 801e49c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801e4a0:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801e4a4:	6870      	ldr	r0, [r6, #4]
 801e4a6:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801e4a8:	fb00 2404 	mla	r4, r0, r4, r2
 801e4ac:	6832      	ldr	r2, [r6, #0]
 801e4ae:	9100      	str	r1, [sp, #0]
 801e4b0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e4b4:	682a      	ldr	r2, [r5, #0]
 801e4b6:	9201      	str	r2, [sp, #4]
 801e4b8:	686a      	ldr	r2, [r5, #4]
 801e4ba:	3204      	adds	r2, #4
 801e4bc:	9202      	str	r2, [sp, #8]
 801e4be:	9a00      	ldr	r2, [sp, #0]
 801e4c0:	2a00      	cmp	r2, #0
 801e4c2:	dc03      	bgt.n	801e4cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e4c4:	f1bb 0f00 	cmp.w	fp, #0
 801e4c8:	f340 80a0 	ble.w	801e60c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e4cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e4ce:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e4d2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e4d6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e4d8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e4dc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e4e0:	2b00      	cmp	r3, #0
 801e4e2:	dd0c      	ble.n	801e4fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e4e4:	1406      	asrs	r6, r0, #16
 801e4e6:	d405      	bmi.n	801e4f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e4e8:	454e      	cmp	r6, r9
 801e4ea:	da03      	bge.n	801e4f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e4ec:	1416      	asrs	r6, r2, #16
 801e4ee:	d401      	bmi.n	801e4f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e4f0:	4546      	cmp	r6, r8
 801e4f2:	db05      	blt.n	801e500 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e4f4:	4470      	add	r0, lr
 801e4f6:	4462      	add	r2, ip
 801e4f8:	3b01      	subs	r3, #1
 801e4fa:	3402      	adds	r4, #2
 801e4fc:	e7f0      	b.n	801e4e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e4fe:	d00f      	beq.n	801e520 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e500:	1e5e      	subs	r6, r3, #1
 801e502:	fb0e 0706 	mla	r7, lr, r6, r0
 801e506:	143f      	asrs	r7, r7, #16
 801e508:	d541      	bpl.n	801e58e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801e50a:	4698      	mov	r8, r3
 801e50c:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801e510:	9603      	str	r6, [sp, #12]
 801e512:	f1b8 0f00 	cmp.w	r8, #0
 801e516:	dc59      	bgt.n	801e5cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e518:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e51c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e520:	9b00      	ldr	r3, [sp, #0]
 801e522:	2b00      	cmp	r3, #0
 801e524:	dd72      	ble.n	801e60c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e526:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e52a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e52e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e532:	eeb0 6a62 	vmov.f32	s12, s5
 801e536:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e53a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e53e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e542:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e546:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e54a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801e54e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e552:	eeb0 6a43 	vmov.f32	s12, s6
 801e556:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e55a:	ee12 2a90 	vmov	r2, s5
 801e55e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e562:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e564:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e568:	fb92 fef3 	sdiv	lr, r2, r3
 801e56c:	ee13 2a10 	vmov	r2, s6
 801e570:	fb92 fcf3 	sdiv	ip, r2, r3
 801e574:	9b00      	ldr	r3, [sp, #0]
 801e576:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801e57a:	3b01      	subs	r3, #1
 801e57c:	9300      	str	r3, [sp, #0]
 801e57e:	eeb0 3a67 	vmov.f32	s6, s15
 801e582:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e584:	eef0 2a47 	vmov.f32	s5, s14
 801e588:	bf08      	it	eq
 801e58a:	465b      	moveq	r3, fp
 801e58c:	e797      	b.n	801e4be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e58e:	454f      	cmp	r7, r9
 801e590:	dabb      	bge.n	801e50a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e592:	fb0c 2606 	mla	r6, ip, r6, r2
 801e596:	1436      	asrs	r6, r6, #16
 801e598:	d4b7      	bmi.n	801e50a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e59a:	4546      	cmp	r6, r8
 801e59c:	dab5      	bge.n	801e50a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e59e:	461e      	mov	r6, r3
 801e5a0:	46a0      	mov	r8, r4
 801e5a2:	2e00      	cmp	r6, #0
 801e5a4:	ddb8      	ble.n	801e518 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e5a6:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801e5aa:	9901      	ldr	r1, [sp, #4]
 801e5ac:	1417      	asrs	r7, r2, #16
 801e5ae:	fb0a 1707 	mla	r7, sl, r7, r1
 801e5b2:	ea4f 4920 	mov.w	r9, r0, asr #16
 801e5b6:	f817 7009 	ldrb.w	r7, [r7, r9]
 801e5ba:	9902      	ldr	r1, [sp, #8]
 801e5bc:	4470      	add	r0, lr
 801e5be:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801e5c2:	4462      	add	r2, ip
 801e5c4:	f828 7b02 	strh.w	r7, [r8], #2
 801e5c8:	3e01      	subs	r6, #1
 801e5ca:	e7ea      	b.n	801e5a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e5cc:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e5d0:	d417      	bmi.n	801e602 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e5d2:	68ae      	ldr	r6, [r5, #8]
 801e5d4:	454e      	cmp	r6, r9
 801e5d6:	dd14      	ble.n	801e602 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e5d8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e5dc:	d411      	bmi.n	801e602 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e5de:	68ef      	ldr	r7, [r5, #12]
 801e5e0:	4557      	cmp	r7, sl
 801e5e2:	dd0e      	ble.n	801e602 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e5e4:	f06f 0101 	mvn.w	r1, #1
 801e5e8:	9f01      	ldr	r7, [sp, #4]
 801e5ea:	b236      	sxth	r6, r6
 801e5ec:	fb0a 7606 	mla	r6, sl, r6, r7
 801e5f0:	9f02      	ldr	r7, [sp, #8]
 801e5f2:	f816 6009 	ldrb.w	r6, [r6, r9]
 801e5f6:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801e5fa:	fb01 f608 	mul.w	r6, r1, r8
 801e5fe:	9903      	ldr	r1, [sp, #12]
 801e600:	538f      	strh	r7, [r1, r6]
 801e602:	4470      	add	r0, lr
 801e604:	4462      	add	r2, ip
 801e606:	f108 38ff 	add.w	r8, r8, #4294967295
 801e60a:	e782      	b.n	801e512 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e60c:	b005      	add	sp, #20
 801e60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e612 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e612:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e616:	b087      	sub	sp, #28
 801e618:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e61a:	9102      	str	r1, [sp, #8]
 801e61c:	9205      	str	r2, [sp, #20]
 801e61e:	6861      	ldr	r1, [r4, #4]
 801e620:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801e624:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801e628:	9203      	str	r2, [sp, #12]
 801e62a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801e62e:	fb01 2000 	mla	r0, r1, r0, r2
 801e632:	6822      	ldr	r2, [r4, #0]
 801e634:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801e638:	9200      	str	r2, [sp, #0]
 801e63a:	f8dc 2000 	ldr.w	r2, [ip]
 801e63e:	9204      	str	r2, [sp, #16]
 801e640:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e644:	3204      	adds	r2, #4
 801e646:	9201      	str	r2, [sp, #4]
 801e648:	9a03      	ldr	r2, [sp, #12]
 801e64a:	43d5      	mvns	r5, r2
 801e64c:	b2ed      	uxtb	r5, r5
 801e64e:	9a02      	ldr	r2, [sp, #8]
 801e650:	2a00      	cmp	r2, #0
 801e652:	dc03      	bgt.n	801e65c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e654:	9a05      	ldr	r2, [sp, #20]
 801e656:	2a00      	cmp	r2, #0
 801e658:	f340 812c 	ble.w	801e8b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e65c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e65e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e662:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e666:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e668:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e66c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e670:	2b00      	cmp	r3, #0
 801e672:	dd10      	ble.n	801e696 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e674:	140c      	asrs	r4, r1, #16
 801e676:	d405      	bmi.n	801e684 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e678:	4574      	cmp	r4, lr
 801e67a:	da03      	bge.n	801e684 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e67c:	1414      	asrs	r4, r2, #16
 801e67e:	d401      	bmi.n	801e684 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e680:	42bc      	cmp	r4, r7
 801e682:	db09      	blt.n	801e698 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e684:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e686:	9800      	ldr	r0, [sp, #0]
 801e688:	4421      	add	r1, r4
 801e68a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e68c:	3002      	adds	r0, #2
 801e68e:	4422      	add	r2, r4
 801e690:	3b01      	subs	r3, #1
 801e692:	9000      	str	r0, [sp, #0]
 801e694:	e7ec      	b.n	801e670 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801e696:	d071      	beq.n	801e77c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801e698:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801e69a:	1e5c      	subs	r4, r3, #1
 801e69c:	fb06 1604 	mla	r6, r6, r4, r1
 801e6a0:	1436      	asrs	r6, r6, #16
 801e6a2:	d45d      	bmi.n	801e760 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e6a4:	4576      	cmp	r6, lr
 801e6a6:	da5b      	bge.n	801e760 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e6a8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801e6aa:	fb06 2404 	mla	r4, r6, r4, r2
 801e6ae:	1424      	asrs	r4, r4, #16
 801e6b0:	d456      	bmi.n	801e760 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e6b2:	42bc      	cmp	r4, r7
 801e6b4:	da54      	bge.n	801e760 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e6b6:	4698      	mov	r8, r3
 801e6b8:	f8dd 9000 	ldr.w	r9, [sp]
 801e6bc:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801e6c0:	f1b8 0f00 	cmp.w	r8, #0
 801e6c4:	dd54      	ble.n	801e770 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801e6c6:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801e6ca:	9804      	ldr	r0, [sp, #16]
 801e6cc:	1414      	asrs	r4, r2, #16
 801e6ce:	fb07 0404 	mla	r4, r7, r4, r0
 801e6d2:	140e      	asrs	r6, r1, #16
 801e6d4:	f814 e006 	ldrb.w	lr, [r4, r6]
 801e6d8:	9801      	ldr	r0, [sp, #4]
 801e6da:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e6de:	eb00 0b0e 	add.w	fp, r0, lr
 801e6e2:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e6e6:	f8b9 4000 	ldrh.w	r4, [r9]
 801e6ea:	fb16 f60a 	smulbb	r6, r6, sl
 801e6ee:	1227      	asrs	r7, r4, #8
 801e6f0:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e6f4:	fb07 6705 	mla	r7, r7, r5, r6
 801e6f8:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e6fc:	10e6      	asrs	r6, r4, #3
 801e6fe:	00e4      	lsls	r4, r4, #3
 801e700:	b2e4      	uxtb	r4, r4
 801e702:	fb1b fb0a 	smulbb	fp, fp, sl
 801e706:	fb14 f405 	smulbb	r4, r4, r5
 801e70a:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801e70e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e712:	fb06 b605 	mla	r6, r6, r5, fp
 801e716:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801e71a:	b2bf      	uxth	r7, r7
 801e71c:	b2b6      	uxth	r6, r6
 801e71e:	fa1f fe8e 	uxth.w	lr, lr
 801e722:	1c7c      	adds	r4, r7, #1
 801e724:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e728:	f106 0b01 	add.w	fp, r6, #1
 801e72c:	f10e 0401 	add.w	r4, lr, #1
 801e730:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e732:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801e736:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e73a:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801e73e:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e742:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e746:	4327      	orrs	r7, r4
 801e748:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801e74c:	4401      	add	r1, r0
 801e74e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801e750:	ea47 070b 	orr.w	r7, r7, fp
 801e754:	f829 7b02 	strh.w	r7, [r9], #2
 801e758:	4402      	add	r2, r0
 801e75a:	f108 38ff 	add.w	r8, r8, #4294967295
 801e75e:	e7af      	b.n	801e6c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801e760:	f04f 0e00 	mov.w	lr, #0
 801e764:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801e768:	eb03 040e 	add.w	r4, r3, lr
 801e76c:	2c00      	cmp	r4, #0
 801e76e:	dc43      	bgt.n	801e7f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e770:	9a00      	ldr	r2, [sp, #0]
 801e772:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e776:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e77a:	9300      	str	r3, [sp, #0]
 801e77c:	9b02      	ldr	r3, [sp, #8]
 801e77e:	2b00      	cmp	r3, #0
 801e780:	f340 8098 	ble.w	801e8b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e784:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e788:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e78c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e790:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e794:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e798:	eef0 6a62 	vmov.f32	s13, s5
 801e79c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e7a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e7a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e7a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e7ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e7b0:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801e7b4:	eef0 6a43 	vmov.f32	s13, s6
 801e7b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e7bc:	ee12 2a90 	vmov	r2, s5
 801e7c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e7c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e7c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e7ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801e7ce:	ee13 2a10 	vmov	r2, s6
 801e7d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e7d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e7d6:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801e7da:	fb92 f3f3 	sdiv	r3, r2, r3
 801e7de:	9314      	str	r3, [sp, #80]	@ 0x50
 801e7e0:	9b02      	ldr	r3, [sp, #8]
 801e7e2:	9a05      	ldr	r2, [sp, #20]
 801e7e4:	3b01      	subs	r3, #1
 801e7e6:	9302      	str	r3, [sp, #8]
 801e7e8:	eeb0 3a67 	vmov.f32	s6, s15
 801e7ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e7ee:	eef0 2a47 	vmov.f32	s5, s14
 801e7f2:	bf08      	it	eq
 801e7f4:	4613      	moveq	r3, r2
 801e7f6:	e72a      	b.n	801e64e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e7f8:	140f      	asrs	r7, r1, #16
 801e7fa:	d454      	bmi.n	801e8a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e7fc:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801e800:	42be      	cmp	r6, r7
 801e802:	dd50      	ble.n	801e8a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e804:	ea5f 4822 	movs.w	r8, r2, asr #16
 801e808:	d44d      	bmi.n	801e8a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e80a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801e80e:	4544      	cmp	r4, r8
 801e810:	dd49      	ble.n	801e8a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e812:	f06f 0001 	mvn.w	r0, #1
 801e816:	9c04      	ldr	r4, [sp, #16]
 801e818:	b236      	sxth	r6, r6
 801e81a:	fb08 4606 	mla	r6, r8, r6, r4
 801e81e:	f816 8007 	ldrb.w	r8, [r6, r7]
 801e822:	9c01      	ldr	r4, [sp, #4]
 801e824:	fb00 fa0e 	mul.w	sl, r0, lr
 801e828:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e82c:	eb04 0b08 	add.w	fp, r4, r8
 801e830:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e834:	9800      	ldr	r0, [sp, #0]
 801e836:	fb16 f609 	smulbb	r6, r6, r9
 801e83a:	f830 400a 	ldrh.w	r4, [r0, sl]
 801e83e:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e842:	1227      	asrs	r7, r4, #8
 801e844:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e848:	fb07 6705 	mla	r7, r7, r5, r6
 801e84c:	10e6      	asrs	r6, r4, #3
 801e84e:	00e4      	lsls	r4, r4, #3
 801e850:	b2e4      	uxtb	r4, r4
 801e852:	fb1b fb09 	smulbb	fp, fp, r9
 801e856:	9801      	ldr	r0, [sp, #4]
 801e858:	fb14 f405 	smulbb	r4, r4, r5
 801e85c:	f810 8008 	ldrb.w	r8, [r0, r8]
 801e860:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e864:	fb06 b605 	mla	r6, r6, r5, fp
 801e868:	fb08 4809 	mla	r8, r8, r9, r4
 801e86c:	b2bf      	uxth	r7, r7
 801e86e:	b2b6      	uxth	r6, r6
 801e870:	fa1f f888 	uxth.w	r8, r8
 801e874:	1c7c      	adds	r4, r7, #1
 801e876:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e87a:	f106 0b01 	add.w	fp, r6, #1
 801e87e:	f108 0401 	add.w	r4, r8, #1
 801e882:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801e886:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e88a:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801e88e:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e892:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e896:	4327      	orrs	r7, r4
 801e898:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801e89c:	9800      	ldr	r0, [sp, #0]
 801e89e:	ea47 070b 	orr.w	r7, r7, fp
 801e8a2:	f820 700a 	strh.w	r7, [r0, sl]
 801e8a6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e8a8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e8ac:	4401      	add	r1, r0
 801e8ae:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801e8b0:	4402      	add	r2, r0
 801e8b2:	e759      	b.n	801e768 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e8b4:	b007      	add	sp, #28
 801e8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e8bc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e8bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8c4:	b085      	sub	sp, #20
 801e8c6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801e8c8:	9203      	str	r2, [sp, #12]
 801e8ca:	6870      	ldr	r0, [r6, #4]
 801e8cc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801e8d0:	fb00 2404 	mla	r4, r0, r4, r2
 801e8d4:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801e8d6:	6832      	ldr	r2, [r6, #0]
 801e8d8:	686f      	ldr	r7, [r5, #4]
 801e8da:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e8de:	682a      	ldr	r2, [r5, #0]
 801e8e0:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 801e8e4:	9101      	str	r1, [sp, #4]
 801e8e6:	9202      	str	r2, [sp, #8]
 801e8e8:	3704      	adds	r7, #4
 801e8ea:	9a01      	ldr	r2, [sp, #4]
 801e8ec:	2a00      	cmp	r2, #0
 801e8ee:	dc03      	bgt.n	801e8f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e8f0:	9a03      	ldr	r2, [sp, #12]
 801e8f2:	2a00      	cmp	r2, #0
 801e8f4:	f340 80cc 	ble.w	801ea90 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e8f8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e8fa:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e8fe:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e902:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e904:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e908:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e90c:	2b00      	cmp	r3, #0
 801e90e:	dd0d      	ble.n	801e92c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e910:	1406      	asrs	r6, r0, #16
 801e912:	d405      	bmi.n	801e920 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e914:	454e      	cmp	r6, r9
 801e916:	da03      	bge.n	801e920 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e918:	1416      	asrs	r6, r2, #16
 801e91a:	d401      	bmi.n	801e920 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e91c:	4546      	cmp	r6, r8
 801e91e:	db06      	blt.n	801e92e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e920:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801e922:	4460      	add	r0, ip
 801e924:	4432      	add	r2, r6
 801e926:	3b01      	subs	r3, #1
 801e928:	3402      	adds	r4, #2
 801e92a:	e7ef      	b.n	801e90c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801e92c:	d00f      	beq.n	801e94e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e92e:	1e5e      	subs	r6, r3, #1
 801e930:	fb0c 0e06 	mla	lr, ip, r6, r0
 801e934:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801e938:	d543      	bpl.n	801e9c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801e93a:	4698      	mov	r8, r3
 801e93c:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801e940:	f1b8 0f00 	cmp.w	r8, #0
 801e944:	dc71      	bgt.n	801ea2a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801e946:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e94a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e94e:	9b01      	ldr	r3, [sp, #4]
 801e950:	2b00      	cmp	r3, #0
 801e952:	f340 809d 	ble.w	801ea90 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e956:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e95a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e95e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e962:	eeb0 6a62 	vmov.f32	s12, s5
 801e966:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e96a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e96e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e972:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e976:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e97a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801e97e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e982:	eeb0 6a43 	vmov.f32	s12, s6
 801e986:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e98a:	ee12 2a90 	vmov	r2, s5
 801e98e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e992:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e994:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e998:	fb92 fcf3 	sdiv	ip, r2, r3
 801e99c:	ee13 2a10 	vmov	r2, s6
 801e9a0:	fb92 f3f3 	sdiv	r3, r2, r3
 801e9a4:	9312      	str	r3, [sp, #72]	@ 0x48
 801e9a6:	9b01      	ldr	r3, [sp, #4]
 801e9a8:	9a03      	ldr	r2, [sp, #12]
 801e9aa:	3b01      	subs	r3, #1
 801e9ac:	9301      	str	r3, [sp, #4]
 801e9ae:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801e9b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e9b4:	eeb0 3a67 	vmov.f32	s6, s15
 801e9b8:	bf08      	it	eq
 801e9ba:	4613      	moveq	r3, r2
 801e9bc:	eef0 2a47 	vmov.f32	s5, s14
 801e9c0:	e793      	b.n	801e8ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e9c2:	45ce      	cmp	lr, r9
 801e9c4:	dab9      	bge.n	801e93a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e9c6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e9c8:	fb01 2606 	mla	r6, r1, r6, r2
 801e9cc:	1436      	asrs	r6, r6, #16
 801e9ce:	d4b4      	bmi.n	801e93a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e9d0:	4546      	cmp	r6, r8
 801e9d2:	dab2      	bge.n	801e93a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e9d4:	4698      	mov	r8, r3
 801e9d6:	46a2      	mov	sl, r4
 801e9d8:	f1b8 0f00 	cmp.w	r8, #0
 801e9dc:	ddb3      	ble.n	801e946 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e9de:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e9e2:	9902      	ldr	r1, [sp, #8]
 801e9e4:	1416      	asrs	r6, r2, #16
 801e9e6:	fb09 1606 	mla	r6, r9, r6, r1
 801e9ea:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801e9ee:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801e9f2:	4929      	ldr	r1, [pc, #164]	@ (801ea98 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801e9f4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e9f8:	eb07 0b0e 	add.w	fp, r7, lr
 801e9fc:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801ea00:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801ea04:	00f6      	lsls	r6, r6, #3
 801ea06:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801ea0a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801ea0e:	ea49 0606 	orr.w	r6, r9, r6
 801ea12:	f817 900e 	ldrb.w	r9, [r7, lr]
 801ea16:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ea18:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801ea1c:	f82a 6b02 	strh.w	r6, [sl], #2
 801ea20:	4460      	add	r0, ip
 801ea22:	440a      	add	r2, r1
 801ea24:	f108 38ff 	add.w	r8, r8, #4294967295
 801ea28:	e7d6      	b.n	801e9d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ea2a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ea2e:	d429      	bmi.n	801ea84 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ea30:	68ae      	ldr	r6, [r5, #8]
 801ea32:	454e      	cmp	r6, r9
 801ea34:	dd26      	ble.n	801ea84 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ea36:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801ea3a:	d423      	bmi.n	801ea84 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ea3c:	68e9      	ldr	r1, [r5, #12]
 801ea3e:	4559      	cmp	r1, fp
 801ea40:	dd20      	ble.n	801ea84 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ea42:	9902      	ldr	r1, [sp, #8]
 801ea44:	fa0f fe86 	sxth.w	lr, r6
 801ea48:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801ea4c:	f06f 0101 	mvn.w	r1, #1
 801ea50:	f81e e009 	ldrb.w	lr, [lr, r9]
 801ea54:	fb01 f908 	mul.w	r9, r1, r8
 801ea58:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ea5c:	eb07 060e 	add.w	r6, r7, lr
 801ea60:	f896 b002 	ldrb.w	fp, [r6, #2]
 801ea64:	7876      	ldrb	r6, [r6, #1]
 801ea66:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 801ea6a:	00f6      	lsls	r6, r6, #3
 801ea6c:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801ea70:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801ea74:	ea4b 0606 	orr.w	r6, fp, r6
 801ea78:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801ea7c:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801ea80:	f82a 6009 	strh.w	r6, [sl, r9]
 801ea84:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ea86:	4460      	add	r0, ip
 801ea88:	440a      	add	r2, r1
 801ea8a:	f108 38ff 	add.w	r8, r8, #4294967295
 801ea8e:	e757      	b.n	801e940 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ea90:	b005      	add	sp, #20
 801ea92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea96:	bf00      	nop
 801ea98:	fffff800 	.word	0xfffff800

0801ea9c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ea9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaa4:	b087      	sub	sp, #28
 801eaa6:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801eaa8:	468b      	mov	fp, r1
 801eaaa:	9204      	str	r2, [sp, #16]
 801eaac:	6841      	ldr	r1, [r0, #4]
 801eaae:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801eab2:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801eab6:	9205      	str	r2, [sp, #20]
 801eab8:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801eabc:	fb01 2404 	mla	r4, r1, r4, r2
 801eac0:	6802      	ldr	r2, [r0, #0]
 801eac2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801eac6:	f8dc 2000 	ldr.w	r2, [ip]
 801eaca:	9201      	str	r2, [sp, #4]
 801eacc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ead0:	3204      	adds	r2, #4
 801ead2:	9202      	str	r2, [sp, #8]
 801ead4:	f1bb 0f00 	cmp.w	fp, #0
 801ead8:	dc03      	bgt.n	801eae2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801eada:	9a04      	ldr	r2, [sp, #16]
 801eadc:	2a00      	cmp	r2, #0
 801eade:	f340 8138 	ble.w	801ed52 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801eae2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801eae4:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801eae8:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801eaec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801eaee:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801eaf2:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801eaf6:	2b00      	cmp	r3, #0
 801eaf8:	dd0e      	ble.n	801eb18 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801eafa:	1402      	asrs	r2, r0, #16
 801eafc:	d405      	bmi.n	801eb0a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801eafe:	42ba      	cmp	r2, r7
 801eb00:	da03      	bge.n	801eb0a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801eb02:	140a      	asrs	r2, r1, #16
 801eb04:	d401      	bmi.n	801eb0a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801eb06:	42b2      	cmp	r2, r6
 801eb08:	db07      	blt.n	801eb1a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801eb0a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801eb0c:	3b01      	subs	r3, #1
 801eb0e:	4410      	add	r0, r2
 801eb10:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801eb12:	3402      	adds	r4, #2
 801eb14:	4411      	add	r1, r2
 801eb16:	e7ee      	b.n	801eaf6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801eb18:	d019      	beq.n	801eb4e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801eb1a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801eb1c:	1e5a      	subs	r2, r3, #1
 801eb1e:	fb05 0502 	mla	r5, r5, r2, r0
 801eb22:	142d      	asrs	r5, r5, #16
 801eb24:	d409      	bmi.n	801eb3a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801eb26:	42bd      	cmp	r5, r7
 801eb28:	da07      	bge.n	801eb3a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801eb2a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801eb2c:	fb05 1202 	mla	r2, r5, r2, r1
 801eb30:	1412      	asrs	r2, r2, #16
 801eb32:	d402      	bmi.n	801eb3a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801eb34:	42b2      	cmp	r2, r6
 801eb36:	f2c0 80ac 	blt.w	801ec92 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801eb3a:	f04f 0e00 	mov.w	lr, #0
 801eb3e:	eb03 020e 	add.w	r2, r3, lr
 801eb42:	2a00      	cmp	r2, #0
 801eb44:	dc3e      	bgt.n	801ebc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801eb46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eb4a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801eb4e:	f1bb 0f00 	cmp.w	fp, #0
 801eb52:	f340 80fe 	ble.w	801ed52 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801eb56:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb5e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eb62:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eb66:	eeb0 6a62 	vmov.f32	s12, s5
 801eb6a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb6e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eb72:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eb76:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb7a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eb7e:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801eb82:	eeb0 6a43 	vmov.f32	s12, s6
 801eb86:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eb8a:	ee12 2a90 	vmov	r2, s5
 801eb8e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eb92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eb94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb98:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb9c:	ee13 2a10 	vmov	r2, s6
 801eba0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801eba2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eba4:	f1bb 0b01 	subs.w	fp, fp, #1
 801eba8:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebac:	9a04      	ldr	r2, [sp, #16]
 801ebae:	9314      	str	r3, [sp, #80]	@ 0x50
 801ebb0:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801ebb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ebb6:	eeb0 3a67 	vmov.f32	s6, s15
 801ebba:	bf08      	it	eq
 801ebbc:	4613      	moveq	r3, r2
 801ebbe:	eef0 2a47 	vmov.f32	s5, s14
 801ebc2:	e787      	b.n	801ead4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ebc4:	1406      	asrs	r6, r0, #16
 801ebc6:	d45d      	bmi.n	801ec84 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ebc8:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801ebcc:	42b5      	cmp	r5, r6
 801ebce:	dd59      	ble.n	801ec84 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ebd0:	140f      	asrs	r7, r1, #16
 801ebd2:	d457      	bmi.n	801ec84 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ebd4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ebd8:	42ba      	cmp	r2, r7
 801ebda:	dd53      	ble.n	801ec84 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ebdc:	9a01      	ldr	r2, [sp, #4]
 801ebde:	b22d      	sxth	r5, r5
 801ebe0:	fb07 2505 	mla	r5, r7, r5, r2
 801ebe4:	5daa      	ldrb	r2, [r5, r6]
 801ebe6:	9d02      	ldr	r5, [sp, #8]
 801ebe8:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ebec:	0e2e      	lsrs	r6, r5, #24
 801ebee:	d049      	beq.n	801ec84 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ebf0:	f06f 0201 	mvn.w	r2, #1
 801ebf4:	fb02 f20e 	mul.w	r2, r2, lr
 801ebf8:	f834 8002 	ldrh.w	r8, [r4, r2]
 801ebfc:	9203      	str	r2, [sp, #12]
 801ebfe:	9a05      	ldr	r2, [sp, #20]
 801ec00:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ec04:	4356      	muls	r6, r2
 801ec06:	1c72      	adds	r2, r6, #1
 801ec08:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ec0c:	1212      	asrs	r2, r2, #8
 801ec0e:	fa1f f982 	uxth.w	r9, r2
 801ec12:	43d2      	mvns	r2, r2
 801ec14:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ec18:	fb16 f609 	smulbb	r6, r6, r9
 801ec1c:	b2ed      	uxtb	r5, r5
 801ec1e:	ea4f 2728 	mov.w	r7, r8, asr #8
 801ec22:	fb15 f509 	smulbb	r5, r5, r9
 801ec26:	b2d2      	uxtb	r2, r2
 801ec28:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ec2c:	fb07 6702 	mla	r7, r7, r2, r6
 801ec30:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801ec34:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ec38:	fb1a fa09 	smulbb	sl, sl, r9
 801ec3c:	fa5f f888 	uxtb.w	r8, r8
 801ec40:	fb08 5502 	mla	r5, r8, r2, r5
 801ec44:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801ec48:	fb06 a602 	mla	r6, r6, r2, sl
 801ec4c:	b2bf      	uxth	r7, r7
 801ec4e:	b2ad      	uxth	r5, r5
 801ec50:	1c7a      	adds	r2, r7, #1
 801ec52:	f105 0a01 	add.w	sl, r5, #1
 801ec56:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ec5a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ec5e:	b2b6      	uxth	r6, r6
 801ec60:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ec64:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801ec68:	ea4a 0707 	orr.w	r7, sl, r7
 801ec6c:	f106 0a01 	add.w	sl, r6, #1
 801ec70:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ec74:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ec78:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801ec7c:	9a03      	ldr	r2, [sp, #12]
 801ec7e:	ea47 070a 	orr.w	r7, r7, sl
 801ec82:	52a7      	strh	r7, [r4, r2]
 801ec84:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ec86:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ec8a:	4410      	add	r0, r2
 801ec8c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ec8e:	4411      	add	r1, r2
 801ec90:	e755      	b.n	801eb3e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ec92:	f04f 0800 	mov.w	r8, #0
 801ec96:	eba3 0208 	sub.w	r2, r3, r8
 801ec9a:	2a00      	cmp	r2, #0
 801ec9c:	f77f af53 	ble.w	801eb46 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801eca0:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801eca4:	9f01      	ldr	r7, [sp, #4]
 801eca6:	140a      	asrs	r2, r1, #16
 801eca8:	fb06 7202 	mla	r2, r6, r2, r7
 801ecac:	1405      	asrs	r5, r0, #16
 801ecae:	5d52      	ldrb	r2, [r2, r5]
 801ecb0:	9d02      	ldr	r5, [sp, #8]
 801ecb2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ecb6:	0e2e      	lsrs	r6, r5, #24
 801ecb8:	d044      	beq.n	801ed44 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801ecba:	9a05      	ldr	r2, [sp, #20]
 801ecbc:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801ecc0:	4356      	muls	r6, r2
 801ecc2:	1c72      	adds	r2, r6, #1
 801ecc4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ecc8:	1212      	asrs	r2, r2, #8
 801ecca:	fa1f f982 	uxth.w	r9, r2
 801ecce:	43d2      	mvns	r2, r2
 801ecd0:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ecd4:	fb16 f609 	smulbb	r6, r6, r9
 801ecd8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ecdc:	b2ed      	uxtb	r5, r5
 801ecde:	ea4f 272e 	mov.w	r7, lr, asr #8
 801ece2:	fb15 f509 	smulbb	r5, r5, r9
 801ece6:	b2d2      	uxtb	r2, r2
 801ece8:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ecec:	fb07 6702 	mla	r7, r7, r2, r6
 801ecf0:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ecf4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ecf8:	fb1a fa09 	smulbb	sl, sl, r9
 801ecfc:	fa5f fe8e 	uxtb.w	lr, lr
 801ed00:	fb0e 5502 	mla	r5, lr, r2, r5
 801ed04:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801ed08:	fb06 a602 	mla	r6, r6, r2, sl
 801ed0c:	b2bf      	uxth	r7, r7
 801ed0e:	b2ad      	uxth	r5, r5
 801ed10:	1c7a      	adds	r2, r7, #1
 801ed12:	f105 0a01 	add.w	sl, r5, #1
 801ed16:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ed1a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ed1e:	b2b6      	uxth	r6, r6
 801ed20:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ed24:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801ed28:	ea4a 0707 	orr.w	r7, sl, r7
 801ed2c:	f106 0a01 	add.w	sl, r6, #1
 801ed30:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ed34:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ed38:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801ed3c:	ea47 070a 	orr.w	r7, r7, sl
 801ed40:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801ed44:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ed46:	f108 0801 	add.w	r8, r8, #1
 801ed4a:	4410      	add	r0, r2
 801ed4c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ed4e:	4411      	add	r1, r2
 801ed50:	e7a1      	b.n	801ec96 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ed52:	b007      	add	sp, #28
 801ed54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ed58 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ed58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ed5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed60:	b085      	sub	sp, #20
 801ed62:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801ed64:	468b      	mov	fp, r1
 801ed66:	6841      	ldr	r1, [r0, #4]
 801ed68:	9203      	str	r2, [sp, #12]
 801ed6a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801ed6e:	fb01 2404 	mla	r4, r1, r4, r2
 801ed72:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801ed76:	6802      	ldr	r2, [r0, #0]
 801ed78:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ed7c:	f8de 2000 	ldr.w	r2, [lr]
 801ed80:	9200      	str	r2, [sp, #0]
 801ed82:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ed86:	3204      	adds	r2, #4
 801ed88:	9201      	str	r2, [sp, #4]
 801ed8a:	f1bb 0f00 	cmp.w	fp, #0
 801ed8e:	dc03      	bgt.n	801ed98 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ed90:	9a03      	ldr	r2, [sp, #12]
 801ed92:	2a00      	cmp	r2, #0
 801ed94:	f340 8153 	ble.w	801f03e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ed98:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ed9a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ed9e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801eda2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801eda4:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801eda8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801edac:	2b00      	cmp	r3, #0
 801edae:	dd0e      	ble.n	801edce <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801edb0:	1408      	asrs	r0, r1, #16
 801edb2:	d405      	bmi.n	801edc0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801edb4:	42b8      	cmp	r0, r7
 801edb6:	da03      	bge.n	801edc0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801edb8:	1410      	asrs	r0, r2, #16
 801edba:	d401      	bmi.n	801edc0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801edbc:	42b0      	cmp	r0, r6
 801edbe:	db07      	blt.n	801edd0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801edc0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801edc2:	3b01      	subs	r3, #1
 801edc4:	4401      	add	r1, r0
 801edc6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801edc8:	3402      	adds	r4, #2
 801edca:	4402      	add	r2, r0
 801edcc:	e7ee      	b.n	801edac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801edce:	d017      	beq.n	801ee00 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801edd0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801edd2:	1e58      	subs	r0, r3, #1
 801edd4:	fb05 1500 	mla	r5, r5, r0, r1
 801edd8:	142d      	asrs	r5, r5, #16
 801edda:	d409      	bmi.n	801edf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801eddc:	42bd      	cmp	r5, r7
 801edde:	da07      	bge.n	801edf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ede0:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801ede2:	fb05 2000 	mla	r0, r5, r0, r2
 801ede6:	1400      	asrs	r0, r0, #16
 801ede8:	d402      	bmi.n	801edf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801edea:	42b0      	cmp	r0, r6
 801edec:	f2c0 80bc 	blt.w	801ef68 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801edf0:	2600      	movs	r6, #0
 801edf2:	1998      	adds	r0, r3, r6
 801edf4:	2800      	cmp	r0, #0
 801edf6:	dc3e      	bgt.n	801ee76 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801edf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801edfc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ee00:	f1bb 0f00 	cmp.w	fp, #0
 801ee04:	f340 811b 	ble.w	801f03e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ee08:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ee0c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ee10:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ee14:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ee18:	eeb0 6a62 	vmov.f32	s12, s5
 801ee1c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ee20:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ee24:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ee28:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ee2c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ee30:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801ee34:	eeb0 6a43 	vmov.f32	s12, s6
 801ee38:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ee3c:	ee12 2a90 	vmov	r2, s5
 801ee40:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ee44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee46:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ee4a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee4e:	ee13 2a10 	vmov	r2, s6
 801ee52:	9311      	str	r3, [sp, #68]	@ 0x44
 801ee54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee56:	f1bb 0b01 	subs.w	fp, fp, #1
 801ee5a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee5e:	9a03      	ldr	r2, [sp, #12]
 801ee60:	9312      	str	r3, [sp, #72]	@ 0x48
 801ee62:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801ee66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee68:	eeb0 3a67 	vmov.f32	s6, s15
 801ee6c:	bf08      	it	eq
 801ee6e:	4613      	moveq	r3, r2
 801ee70:	eef0 2a47 	vmov.f32	s5, s14
 801ee74:	e789      	b.n	801ed8a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ee76:	140f      	asrs	r7, r1, #16
 801ee78:	d426      	bmi.n	801eec8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ee7a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ee7e:	42bd      	cmp	r5, r7
 801ee80:	dd22      	ble.n	801eec8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ee82:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ee86:	d41f      	bmi.n	801eec8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ee88:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ee8c:	4560      	cmp	r0, ip
 801ee8e:	dd1b      	ble.n	801eec8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ee90:	9800      	ldr	r0, [sp, #0]
 801ee92:	b22d      	sxth	r5, r5
 801ee94:	fb0c 0505 	mla	r5, ip, r5, r0
 801ee98:	5de8      	ldrb	r0, [r5, r7]
 801ee9a:	9d01      	ldr	r5, [sp, #4]
 801ee9c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801eea0:	0e07      	lsrs	r7, r0, #24
 801eea2:	2fff      	cmp	r7, #255	@ 0xff
 801eea4:	d116      	bne.n	801eed4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801eea6:	f06f 0501 	mvn.w	r5, #1
 801eeaa:	fb05 f706 	mul.w	r7, r5, r6
 801eeae:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801eeb2:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801eeb6:	0945      	lsrs	r5, r0, #5
 801eeb8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801eebc:	ea4c 0505 	orr.w	r5, ip, r5
 801eec0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801eec4:	4305      	orrs	r5, r0
 801eec6:	53e5      	strh	r5, [r4, r7]
 801eec8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801eeca:	3e01      	subs	r6, #1
 801eecc:	4401      	add	r1, r0
 801eece:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801eed0:	4402      	add	r2, r0
 801eed2:	e78e      	b.n	801edf2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801eed4:	b2fd      	uxtb	r5, r7
 801eed6:	2f00      	cmp	r7, #0
 801eed8:	d0f6      	beq.n	801eec8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801eeda:	f06f 0701 	mvn.w	r7, #1
 801eede:	fa1f f985 	uxth.w	r9, r5
 801eee2:	43ed      	mvns	r5, r5
 801eee4:	4377      	muls	r7, r6
 801eee6:	f834 8007 	ldrh.w	r8, [r4, r7]
 801eeea:	9702      	str	r7, [sp, #8]
 801eeec:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801eef0:	fb17 f709 	smulbb	r7, r7, r9
 801eef4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801eef8:	b2c0      	uxtb	r0, r0
 801eefa:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801eefe:	fb10 f009 	smulbb	r0, r0, r9
 801ef02:	b2ed      	uxtb	r5, r5
 801ef04:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801ef08:	fb0c 7c05 	mla	ip, ip, r5, r7
 801ef0c:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801ef10:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ef14:	fb1a fa09 	smulbb	sl, sl, r9
 801ef18:	fa5f f888 	uxtb.w	r8, r8
 801ef1c:	fb08 0005 	mla	r0, r8, r5, r0
 801ef20:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801ef24:	fb07 a705 	mla	r7, r7, r5, sl
 801ef28:	b280      	uxth	r0, r0
 801ef2a:	fa1f fc8c 	uxth.w	ip, ip
 801ef2e:	f100 0a01 	add.w	sl, r0, #1
 801ef32:	f10c 0501 	add.w	r5, ip, #1
 801ef36:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801ef3a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ef3e:	b2bf      	uxth	r7, r7
 801ef40:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ef44:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801ef48:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ef4c:	f107 0a01 	add.w	sl, r7, #1
 801ef50:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ef54:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ef58:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801ef5c:	9802      	ldr	r0, [sp, #8]
 801ef5e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ef62:	f824 c000 	strh.w	ip, [r4, r0]
 801ef66:	e7af      	b.n	801eec8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ef68:	f04f 0800 	mov.w	r8, #0
 801ef6c:	eba3 0008 	sub.w	r0, r3, r8
 801ef70:	2800      	cmp	r0, #0
 801ef72:	f77f af41 	ble.w	801edf8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ef76:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801ef7a:	9f00      	ldr	r7, [sp, #0]
 801ef7c:	1410      	asrs	r0, r2, #16
 801ef7e:	fb06 7000 	mla	r0, r6, r0, r7
 801ef82:	140d      	asrs	r5, r1, #16
 801ef84:	5d40      	ldrb	r0, [r0, r5]
 801ef86:	9d01      	ldr	r5, [sp, #4]
 801ef88:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801ef8c:	0e2e      	lsrs	r6, r5, #24
 801ef8e:	2eff      	cmp	r6, #255	@ 0xff
 801ef90:	d112      	bne.n	801efb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801ef92:	482c      	ldr	r0, [pc, #176]	@ (801f044 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801ef94:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ef98:	0968      	lsrs	r0, r5, #5
 801ef9a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801ef9e:	4330      	orrs	r0, r6
 801efa0:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801efa4:	4328      	orrs	r0, r5
 801efa6:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801efaa:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801efac:	f108 0801 	add.w	r8, r8, #1
 801efb0:	4401      	add	r1, r0
 801efb2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801efb4:	4402      	add	r2, r0
 801efb6:	e7d9      	b.n	801ef6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801efb8:	b2f0      	uxtb	r0, r6
 801efba:	2e00      	cmp	r6, #0
 801efbc:	d0f5      	beq.n	801efaa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801efbe:	fa1f f980 	uxth.w	r9, r0
 801efc2:	43c0      	mvns	r0, r0
 801efc4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801efc8:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801efcc:	fb16 f609 	smulbb	r6, r6, r9
 801efd0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801efd4:	b2ed      	uxtb	r5, r5
 801efd6:	ea4f 272c 	mov.w	r7, ip, asr #8
 801efda:	fb15 f509 	smulbb	r5, r5, r9
 801efde:	b2c0      	uxtb	r0, r0
 801efe0:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801efe4:	fb07 6700 	mla	r7, r7, r0, r6
 801efe8:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801efec:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801eff0:	fb1a fa09 	smulbb	sl, sl, r9
 801eff4:	fa5f fc8c 	uxtb.w	ip, ip
 801eff8:	fb0c 5500 	mla	r5, ip, r0, r5
 801effc:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f000:	fb06 a600 	mla	r6, r6, r0, sl
 801f004:	b2bf      	uxth	r7, r7
 801f006:	b2ad      	uxth	r5, r5
 801f008:	1c78      	adds	r0, r7, #1
 801f00a:	f105 0a01 	add.w	sl, r5, #1
 801f00e:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801f012:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f016:	b2b6      	uxth	r6, r6
 801f018:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f01c:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801f020:	ea4a 0707 	orr.w	r7, sl, r7
 801f024:	f106 0a01 	add.w	sl, r6, #1
 801f028:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f02c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f030:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f034:	ea47 070a 	orr.w	r7, r7, sl
 801f038:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801f03c:	e7b5      	b.n	801efaa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801f03e:	b005      	add	sp, #20
 801f040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f044:	fffff800 	.word	0xfffff800

0801f048 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f048:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f050:	b087      	sub	sp, #28
 801f052:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f054:	468b      	mov	fp, r1
 801f056:	9204      	str	r2, [sp, #16]
 801f058:	6861      	ldr	r1, [r4, #4]
 801f05a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801f05e:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801f062:	9205      	str	r2, [sp, #20]
 801f064:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801f068:	fb01 2000 	mla	r0, r1, r0, r2
 801f06c:	6822      	ldr	r2, [r4, #0]
 801f06e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f072:	f8de 2000 	ldr.w	r2, [lr]
 801f076:	9201      	str	r2, [sp, #4]
 801f078:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f07c:	9202      	str	r2, [sp, #8]
 801f07e:	f1bb 0f00 	cmp.w	fp, #0
 801f082:	dc03      	bgt.n	801f08c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801f084:	9a04      	ldr	r2, [sp, #16]
 801f086:	2a00      	cmp	r2, #0
 801f088:	f340 8142 	ble.w	801f310 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801f08c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f08e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f092:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801f096:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f098:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801f09c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f0a0:	2b00      	cmp	r3, #0
 801f0a2:	dd0e      	ble.n	801f0c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f0a4:	140c      	asrs	r4, r1, #16
 801f0a6:	d405      	bmi.n	801f0b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f0a8:	42bc      	cmp	r4, r7
 801f0aa:	da03      	bge.n	801f0b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f0ac:	1414      	asrs	r4, r2, #16
 801f0ae:	d401      	bmi.n	801f0b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f0b0:	42b4      	cmp	r4, r6
 801f0b2:	db07      	blt.n	801f0c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f0b4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f0b6:	3b01      	subs	r3, #1
 801f0b8:	4421      	add	r1, r4
 801f0ba:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f0bc:	3002      	adds	r0, #2
 801f0be:	4422      	add	r2, r4
 801f0c0:	e7ee      	b.n	801f0a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f0c2:	d019      	beq.n	801f0f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f0c4:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801f0c6:	1e5c      	subs	r4, r3, #1
 801f0c8:	fb05 1504 	mla	r5, r5, r4, r1
 801f0cc:	142d      	asrs	r5, r5, #16
 801f0ce:	d409      	bmi.n	801f0e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f0d0:	42bd      	cmp	r5, r7
 801f0d2:	da07      	bge.n	801f0e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f0d4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f0d6:	fb05 2404 	mla	r4, r5, r4, r2
 801f0da:	1424      	asrs	r4, r4, #16
 801f0dc:	d402      	bmi.n	801f0e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f0de:	42b4      	cmp	r4, r6
 801f0e0:	f2c0 80b1 	blt.w	801f246 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801f0e4:	f04f 0800 	mov.w	r8, #0
 801f0e8:	eb03 0408 	add.w	r4, r3, r8
 801f0ec:	2c00      	cmp	r4, #0
 801f0ee:	dc3e      	bgt.n	801f16e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f0f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f0f4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f0f8:	f1bb 0f00 	cmp.w	fp, #0
 801f0fc:	f340 8108 	ble.w	801f310 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801f100:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f104:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f108:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f10c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f110:	eeb0 6a62 	vmov.f32	s12, s5
 801f114:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f118:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f11c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f120:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f124:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f128:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801f12c:	eeb0 6a43 	vmov.f32	s12, s6
 801f130:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f134:	ee12 2a90 	vmov	r2, s5
 801f138:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f13c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f13e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f142:	fb92 f3f3 	sdiv	r3, r2, r3
 801f146:	ee13 2a10 	vmov	r2, s6
 801f14a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f14c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f14e:	f1bb 0b01 	subs.w	fp, fp, #1
 801f152:	fb92 f3f3 	sdiv	r3, r2, r3
 801f156:	9a04      	ldr	r2, [sp, #16]
 801f158:	9314      	str	r3, [sp, #80]	@ 0x50
 801f15a:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801f15e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f160:	eeb0 3a67 	vmov.f32	s6, s15
 801f164:	bf08      	it	eq
 801f166:	4613      	moveq	r3, r2
 801f168:	eef0 2a47 	vmov.f32	s5, s14
 801f16c:	e787      	b.n	801f07e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f16e:	140e      	asrs	r6, r1, #16
 801f170:	d462      	bmi.n	801f238 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f172:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f176:	42b5      	cmp	r5, r6
 801f178:	dd5e      	ble.n	801f238 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f17a:	1417      	asrs	r7, r2, #16
 801f17c:	d45c      	bmi.n	801f238 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f17e:	f8de 400c 	ldr.w	r4, [lr, #12]
 801f182:	42bc      	cmp	r4, r7
 801f184:	dd58      	ble.n	801f238 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f186:	b22d      	sxth	r5, r5
 801f188:	fb07 6505 	mla	r5, r7, r5, r6
 801f18c:	9c02      	ldr	r4, [sp, #8]
 801f18e:	5d66      	ldrb	r6, [r4, r5]
 801f190:	2e00      	cmp	r6, #0
 801f192:	d051      	beq.n	801f238 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f194:	9c01      	ldr	r4, [sp, #4]
 801f196:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801f19a:	f06f 0401 	mvn.w	r4, #1
 801f19e:	fb04 f408 	mul.w	r4, r4, r8
 801f1a2:	5b05      	ldrh	r5, [r0, r4]
 801f1a4:	9403      	str	r4, [sp, #12]
 801f1a6:	9c05      	ldr	r4, [sp, #20]
 801f1a8:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f1ac:	4366      	muls	r6, r4
 801f1ae:	1c74      	adds	r4, r6, #1
 801f1b0:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f1b4:	1224      	asrs	r4, r4, #8
 801f1b6:	b2a7      	uxth	r7, r4
 801f1b8:	43e4      	mvns	r4, r4
 801f1ba:	122e      	asrs	r6, r5, #8
 801f1bc:	b2e4      	uxtb	r4, r4
 801f1be:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801f1c2:	fb16 f604 	smulbb	r6, r6, r4
 801f1c6:	00ed      	lsls	r5, r5, #3
 801f1c8:	b2ed      	uxtb	r5, r5
 801f1ca:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801f1ce:	fb15 f504 	smulbb	r5, r5, r4
 801f1d2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f1d6:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f1da:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801f1de:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801f1e2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f1e6:	fb1a fa04 	smulbb	sl, sl, r4
 801f1ea:	fa5f f989 	uxtb.w	r9, r9
 801f1ee:	fb09 5507 	mla	r5, r9, r7, r5
 801f1f2:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f1f6:	fb06 a607 	mla	r6, r6, r7, sl
 801f1fa:	fa1f fc8c 	uxth.w	ip, ip
 801f1fe:	b2ad      	uxth	r5, r5
 801f200:	f10c 0401 	add.w	r4, ip, #1
 801f204:	f105 0a01 	add.w	sl, r5, #1
 801f208:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f20c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f210:	b2b6      	uxth	r6, r6
 801f212:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f216:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801f21a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f21e:	f106 0a01 	add.w	sl, r6, #1
 801f222:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f226:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f22a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f22e:	9c03      	ldr	r4, [sp, #12]
 801f230:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f234:	f820 c004 	strh.w	ip, [r0, r4]
 801f238:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f23a:	f108 38ff 	add.w	r8, r8, #4294967295
 801f23e:	4421      	add	r1, r4
 801f240:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f242:	4422      	add	r2, r4
 801f244:	e750      	b.n	801f0e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f246:	f04f 0900 	mov.w	r9, #0
 801f24a:	eba3 0409 	sub.w	r4, r3, r9
 801f24e:	2c00      	cmp	r4, #0
 801f250:	f77f af4e 	ble.w	801f0f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f254:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801f258:	140d      	asrs	r5, r1, #16
 801f25a:	1414      	asrs	r4, r2, #16
 801f25c:	fb06 5404 	mla	r4, r6, r4, r5
 801f260:	9d02      	ldr	r5, [sp, #8]
 801f262:	5d2e      	ldrb	r6, [r5, r4]
 801f264:	2e00      	cmp	r6, #0
 801f266:	d04c      	beq.n	801f302 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f268:	9d01      	ldr	r5, [sp, #4]
 801f26a:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801f26e:	9c05      	ldr	r4, [sp, #20]
 801f270:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f274:	4366      	muls	r6, r4
 801f276:	1c74      	adds	r4, r6, #1
 801f278:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f27c:	1224      	asrs	r4, r4, #8
 801f27e:	b2a7      	uxth	r7, r4
 801f280:	43e4      	mvns	r4, r4
 801f282:	122e      	asrs	r6, r5, #8
 801f284:	b2e4      	uxtb	r4, r4
 801f286:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801f28a:	fb16 f604 	smulbb	r6, r6, r4
 801f28e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f292:	00ed      	lsls	r5, r5, #3
 801f294:	b2ed      	uxtb	r5, r5
 801f296:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801f29a:	fb15 f504 	smulbb	r5, r5, r4
 801f29e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f2a2:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f2a6:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801f2aa:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801f2ae:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f2b2:	fb1a fa04 	smulbb	sl, sl, r4
 801f2b6:	fa5f f888 	uxtb.w	r8, r8
 801f2ba:	fb08 5507 	mla	r5, r8, r7, r5
 801f2be:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f2c2:	fb06 a607 	mla	r6, r6, r7, sl
 801f2c6:	fa1f fc8c 	uxth.w	ip, ip
 801f2ca:	b2ad      	uxth	r5, r5
 801f2cc:	f10c 0401 	add.w	r4, ip, #1
 801f2d0:	f105 0a01 	add.w	sl, r5, #1
 801f2d4:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f2d8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f2dc:	b2b6      	uxth	r6, r6
 801f2de:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f2e2:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801f2e6:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f2ea:	f106 0a01 	add.w	sl, r6, #1
 801f2ee:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f2f2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f2f6:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f2fa:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f2fe:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f302:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f304:	f109 0901 	add.w	r9, r9, #1
 801f308:	4421      	add	r1, r4
 801f30a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f30c:	4422      	add	r2, r4
 801f30e:	e79c      	b.n	801f24a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f310:	b007      	add	sp, #28
 801f312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f316 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f31a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f31e:	b085      	sub	sp, #20
 801f320:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f322:	468b      	mov	fp, r1
 801f324:	6861      	ldr	r1, [r4, #4]
 801f326:	9203      	str	r2, [sp, #12]
 801f328:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 801f32c:	fb01 2000 	mla	r0, r1, r0, r2
 801f330:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801f334:	6822      	ldr	r2, [r4, #0]
 801f336:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f33a:	f8d8 2000 	ldr.w	r2, [r8]
 801f33e:	9200      	str	r2, [sp, #0]
 801f340:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f344:	9201      	str	r2, [sp, #4]
 801f346:	f1bb 0f00 	cmp.w	fp, #0
 801f34a:	dc03      	bgt.n	801f354 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f34c:	9a03      	ldr	r2, [sp, #12]
 801f34e:	2a00      	cmp	r2, #0
 801f350:	f340 8146 	ble.w	801f5e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f354:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f356:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f35a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801f35e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f360:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f364:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f368:	2b00      	cmp	r3, #0
 801f36a:	dd0e      	ble.n	801f38a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f36c:	140c      	asrs	r4, r1, #16
 801f36e:	d405      	bmi.n	801f37c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f370:	42bc      	cmp	r4, r7
 801f372:	da03      	bge.n	801f37c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f374:	1414      	asrs	r4, r2, #16
 801f376:	d401      	bmi.n	801f37c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f378:	42b4      	cmp	r4, r6
 801f37a:	db07      	blt.n	801f38c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f37c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f37e:	3b01      	subs	r3, #1
 801f380:	4421      	add	r1, r4
 801f382:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f384:	3002      	adds	r0, #2
 801f386:	4422      	add	r2, r4
 801f388:	e7ee      	b.n	801f368 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f38a:	d017      	beq.n	801f3bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f38c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801f38e:	1e5c      	subs	r4, r3, #1
 801f390:	fb05 1504 	mla	r5, r5, r4, r1
 801f394:	142d      	asrs	r5, r5, #16
 801f396:	d409      	bmi.n	801f3ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f398:	42bd      	cmp	r5, r7
 801f39a:	da07      	bge.n	801f3ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f39c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801f39e:	fb05 2404 	mla	r4, r5, r4, r2
 801f3a2:	1424      	asrs	r4, r4, #16
 801f3a4:	d402      	bmi.n	801f3ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f3a6:	42b4      	cmp	r4, r6
 801f3a8:	f2c0 80b3 	blt.w	801f512 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801f3ac:	2600      	movs	r6, #0
 801f3ae:	199c      	adds	r4, r3, r6
 801f3b0:	2c00      	cmp	r4, #0
 801f3b2:	dc3e      	bgt.n	801f432 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f3b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f3b8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f3bc:	f1bb 0f00 	cmp.w	fp, #0
 801f3c0:	f340 810e 	ble.w	801f5e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f3c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f3c8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f3cc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f3d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f3d4:	eeb0 6a62 	vmov.f32	s12, s5
 801f3d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f3dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f3e0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f3e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f3e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f3ec:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801f3f0:	eeb0 6a43 	vmov.f32	s12, s6
 801f3f4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f3f8:	ee12 2a90 	vmov	r2, s5
 801f3fc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f400:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f402:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f406:	fb92 f3f3 	sdiv	r3, r2, r3
 801f40a:	ee13 2a10 	vmov	r2, s6
 801f40e:	9311      	str	r3, [sp, #68]	@ 0x44
 801f410:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f412:	f1bb 0b01 	subs.w	fp, fp, #1
 801f416:	fb92 f3f3 	sdiv	r3, r2, r3
 801f41a:	9a03      	ldr	r2, [sp, #12]
 801f41c:	9312      	str	r3, [sp, #72]	@ 0x48
 801f41e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801f422:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f424:	eeb0 3a67 	vmov.f32	s6, s15
 801f428:	bf08      	it	eq
 801f42a:	4613      	moveq	r3, r2
 801f42c:	eef0 2a47 	vmov.f32	s5, s14
 801f430:	e789      	b.n	801f346 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f432:	140f      	asrs	r7, r1, #16
 801f434:	d418      	bmi.n	801f468 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f436:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801f43a:	42bd      	cmp	r5, r7
 801f43c:	dd14      	ble.n	801f468 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f43e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f442:	d411      	bmi.n	801f468 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f444:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801f448:	4564      	cmp	r4, ip
 801f44a:	dd0d      	ble.n	801f468 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f44c:	b22d      	sxth	r5, r5
 801f44e:	fb0c 7505 	mla	r5, ip, r5, r7
 801f452:	9c01      	ldr	r4, [sp, #4]
 801f454:	5d64      	ldrb	r4, [r4, r5]
 801f456:	2cff      	cmp	r4, #255	@ 0xff
 801f458:	d10c      	bne.n	801f474 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f45a:	9c00      	ldr	r4, [sp, #0]
 801f45c:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801f460:	f06f 0401 	mvn.w	r4, #1
 801f464:	4374      	muls	r4, r6
 801f466:	5305      	strh	r5, [r0, r4]
 801f468:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f46a:	3e01      	subs	r6, #1
 801f46c:	4421      	add	r1, r4
 801f46e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f470:	4422      	add	r2, r4
 801f472:	e79c      	b.n	801f3ae <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f474:	2c00      	cmp	r4, #0
 801f476:	d0f7      	beq.n	801f468 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f478:	9f00      	ldr	r7, [sp, #0]
 801f47a:	fa1f fc84 	uxth.w	ip, r4
 801f47e:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801f482:	f06f 0501 	mvn.w	r5, #1
 801f486:	43e4      	mvns	r4, r4
 801f488:	4375      	muls	r5, r6
 801f48a:	9502      	str	r5, [sp, #8]
 801f48c:	5b45      	ldrh	r5, [r0, r5]
 801f48e:	b2e4      	uxtb	r4, r4
 801f490:	122f      	asrs	r7, r5, #8
 801f492:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f496:	fb17 f704 	smulbb	r7, r7, r4
 801f49a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f49e:	00ed      	lsls	r5, r5, #3
 801f4a0:	b2ed      	uxtb	r5, r5
 801f4a2:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801f4a6:	fb15 f504 	smulbb	r5, r5, r4
 801f4aa:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801f4ae:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801f4b2:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801f4b6:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801f4ba:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f4be:	fb1a fa04 	smulbb	sl, sl, r4
 801f4c2:	fa5f f989 	uxtb.w	r9, r9
 801f4c6:	fb09 550c 	mla	r5, r9, ip, r5
 801f4ca:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801f4ce:	fb07 a70c 	mla	r7, r7, ip, sl
 801f4d2:	fa1f fe8e 	uxth.w	lr, lr
 801f4d6:	b2ad      	uxth	r5, r5
 801f4d8:	f10e 0401 	add.w	r4, lr, #1
 801f4dc:	f105 0a01 	add.w	sl, r5, #1
 801f4e0:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801f4e4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f4e8:	b2bf      	uxth	r7, r7
 801f4ea:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f4ee:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801f4f2:	ea4a 0e0e 	orr.w	lr, sl, lr
 801f4f6:	f107 0a01 	add.w	sl, r7, #1
 801f4fa:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f4fe:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f502:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f506:	9c02      	ldr	r4, [sp, #8]
 801f508:	ea4e 0e0a 	orr.w	lr, lr, sl
 801f50c:	f820 e004 	strh.w	lr, [r0, r4]
 801f510:	e7aa      	b.n	801f468 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f512:	f04f 0900 	mov.w	r9, #0
 801f516:	eba3 0409 	sub.w	r4, r3, r9
 801f51a:	2c00      	cmp	r4, #0
 801f51c:	f77f af4a 	ble.w	801f3b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f520:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801f524:	1414      	asrs	r4, r2, #16
 801f526:	140d      	asrs	r5, r1, #16
 801f528:	fb06 5504 	mla	r5, r6, r4, r5
 801f52c:	9c01      	ldr	r4, [sp, #4]
 801f52e:	5d64      	ldrb	r4, [r4, r5]
 801f530:	2cff      	cmp	r4, #255	@ 0xff
 801f532:	d10b      	bne.n	801f54c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801f534:	9c00      	ldr	r4, [sp, #0]
 801f536:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801f53a:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801f53e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f540:	f109 0901 	add.w	r9, r9, #1
 801f544:	4421      	add	r1, r4
 801f546:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f548:	4422      	add	r2, r4
 801f54a:	e7e4      	b.n	801f516 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f54c:	2c00      	cmp	r4, #0
 801f54e:	d0f6      	beq.n	801f53e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f550:	b2a7      	uxth	r7, r4
 801f552:	43e4      	mvns	r4, r4
 801f554:	9e00      	ldr	r6, [sp, #0]
 801f556:	b2e4      	uxtb	r4, r4
 801f558:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801f55c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f560:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f564:	122e      	asrs	r6, r5, #8
 801f566:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801f56a:	fb16 f604 	smulbb	r6, r6, r4
 801f56e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f572:	00ed      	lsls	r5, r5, #3
 801f574:	b2ed      	uxtb	r5, r5
 801f576:	fb15 f504 	smulbb	r5, r5, r4
 801f57a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f57e:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f582:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801f586:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f58a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f58e:	fb1a fa04 	smulbb	sl, sl, r4
 801f592:	fa5f fe8e 	uxtb.w	lr, lr
 801f596:	fb0e 5507 	mla	r5, lr, r7, r5
 801f59a:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f59e:	fb06 a607 	mla	r6, r6, r7, sl
 801f5a2:	fa1f fc8c 	uxth.w	ip, ip
 801f5a6:	b2ad      	uxth	r5, r5
 801f5a8:	f10c 0401 	add.w	r4, ip, #1
 801f5ac:	f105 0a01 	add.w	sl, r5, #1
 801f5b0:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f5b4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f5b8:	b2b6      	uxth	r6, r6
 801f5ba:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f5be:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801f5c2:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f5c6:	f106 0a01 	add.w	sl, r6, #1
 801f5ca:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f5ce:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f5d2:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f5d6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f5da:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f5de:	e7ae      	b.n	801f53e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f5e0:	b005      	add	sp, #20
 801f5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f5e6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f5e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5ea:	b085      	sub	sp, #20
 801f5ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f5ee:	9100      	str	r1, [sp, #0]
 801f5f0:	9203      	str	r2, [sp, #12]
 801f5f2:	6841      	ldr	r1, [r0, #4]
 801f5f4:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801f5f8:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801f5fc:	9201      	str	r2, [sp, #4]
 801f5fe:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801f602:	fb01 2404 	mla	r4, r1, r4, r2
 801f606:	6802      	ldr	r2, [r0, #0]
 801f608:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f60c:	f8de 2000 	ldr.w	r2, [lr]
 801f610:	9202      	str	r2, [sp, #8]
 801f612:	9a01      	ldr	r2, [sp, #4]
 801f614:	43d6      	mvns	r6, r2
 801f616:	b2f6      	uxtb	r6, r6
 801f618:	9a00      	ldr	r2, [sp, #0]
 801f61a:	2a00      	cmp	r2, #0
 801f61c:	dc03      	bgt.n	801f626 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f61e:	9a03      	ldr	r2, [sp, #12]
 801f620:	2a00      	cmp	r2, #0
 801f622:	f340 8124 	ble.w	801f86e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f626:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f628:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801f62c:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801f630:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f632:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801f636:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f63a:	2b00      	cmp	r3, #0
 801f63c:	dd0e      	ble.n	801f65c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f63e:	1408      	asrs	r0, r1, #16
 801f640:	d405      	bmi.n	801f64e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f642:	4560      	cmp	r0, ip
 801f644:	da03      	bge.n	801f64e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f646:	1410      	asrs	r0, r2, #16
 801f648:	d401      	bmi.n	801f64e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f64a:	42b8      	cmp	r0, r7
 801f64c:	db07      	blt.n	801f65e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f64e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801f650:	3b01      	subs	r3, #1
 801f652:	4401      	add	r1, r0
 801f654:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f656:	3402      	adds	r4, #2
 801f658:	4402      	add	r2, r0
 801f65a:	e7ee      	b.n	801f63a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f65c:	d06e      	beq.n	801f73c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f65e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801f660:	1e58      	subs	r0, r3, #1
 801f662:	fb05 1500 	mla	r5, r5, r0, r1
 801f666:	142d      	asrs	r5, r5, #16
 801f668:	d45c      	bmi.n	801f724 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f66a:	4565      	cmp	r5, ip
 801f66c:	da5a      	bge.n	801f724 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f66e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801f670:	fb05 2000 	mla	r0, r5, r0, r2
 801f674:	1400      	asrs	r0, r0, #16
 801f676:	d455      	bmi.n	801f724 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f678:	42b8      	cmp	r0, r7
 801f67a:	da53      	bge.n	801f724 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f67c:	4699      	mov	r9, r3
 801f67e:	46a2      	mov	sl, r4
 801f680:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801f684:	f1b9 0f00 	cmp.w	r9, #0
 801f688:	dd54      	ble.n	801f734 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f68a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f68e:	140d      	asrs	r5, r1, #16
 801f690:	1410      	asrs	r0, r2, #16
 801f692:	fb07 5000 	mla	r0, r7, r0, r5
 801f696:	9d02      	ldr	r5, [sp, #8]
 801f698:	f109 39ff 	add.w	r9, r9, #4294967295
 801f69c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f6a0:	f8ba 5000 	ldrh.w	r5, [sl]
 801f6a4:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f6a8:	122f      	asrs	r7, r5, #8
 801f6aa:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f6ae:	fb17 f706 	smulbb	r7, r7, r6
 801f6b2:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801f6b6:	00ed      	lsls	r5, r5, #3
 801f6b8:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801f6bc:	b2ed      	uxtb	r5, r5
 801f6be:	fb18 f806 	smulbb	r8, r8, r6
 801f6c2:	fb15 f506 	smulbb	r5, r5, r6
 801f6c6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f6ca:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801f6ce:	10c7      	asrs	r7, r0, #3
 801f6d0:	00c0      	lsls	r0, r0, #3
 801f6d2:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801f6d6:	b2c0      	uxtb	r0, r0
 801f6d8:	fb07 870b 	mla	r7, r7, fp, r8
 801f6dc:	fb00 500b 	mla	r0, r0, fp, r5
 801f6e0:	fa1f fc8c 	uxth.w	ip, ip
 801f6e4:	b280      	uxth	r0, r0
 801f6e6:	b2bf      	uxth	r7, r7
 801f6e8:	f10c 0501 	add.w	r5, ip, #1
 801f6ec:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f6f0:	f107 0801 	add.w	r8, r7, #1
 801f6f4:	1c45      	adds	r5, r0, #1
 801f6f6:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f6fa:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801f6fe:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801f700:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801f704:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f708:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f70c:	ea45 0c0c 	orr.w	ip, r5, ip
 801f710:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801f714:	4401      	add	r1, r0
 801f716:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f718:	ea4c 0c08 	orr.w	ip, ip, r8
 801f71c:	f82a cb02 	strh.w	ip, [sl], #2
 801f720:	4402      	add	r2, r0
 801f722:	e7af      	b.n	801f684 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f724:	f04f 0800 	mov.w	r8, #0
 801f728:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801f72c:	eb03 0008 	add.w	r0, r3, r8
 801f730:	2800      	cmp	r0, #0
 801f732:	dc41      	bgt.n	801f7b8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f734:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f738:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f73c:	9b00      	ldr	r3, [sp, #0]
 801f73e:	2b00      	cmp	r3, #0
 801f740:	f340 8095 	ble.w	801f86e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f744:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f748:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f74c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f750:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f754:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f758:	eef0 6a62 	vmov.f32	s13, s5
 801f75c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f760:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f764:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f768:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f76c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f770:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801f774:	eef0 6a43 	vmov.f32	s13, s6
 801f778:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f77c:	ee12 2a90 	vmov	r2, s5
 801f780:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f784:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f786:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f78a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f78e:	ee13 2a10 	vmov	r2, s6
 801f792:	9311      	str	r3, [sp, #68]	@ 0x44
 801f794:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f796:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801f79a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f79e:	9312      	str	r3, [sp, #72]	@ 0x48
 801f7a0:	9b00      	ldr	r3, [sp, #0]
 801f7a2:	9a03      	ldr	r2, [sp, #12]
 801f7a4:	3b01      	subs	r3, #1
 801f7a6:	9300      	str	r3, [sp, #0]
 801f7a8:	eeb0 3a67 	vmov.f32	s6, s15
 801f7ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f7ae:	eef0 2a47 	vmov.f32	s5, s14
 801f7b2:	bf08      	it	eq
 801f7b4:	4613      	moveq	r3, r2
 801f7b6:	e72f      	b.n	801f618 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f7b8:	140f      	asrs	r7, r1, #16
 801f7ba:	d451      	bmi.n	801f860 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f7bc:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f7c0:	42bd      	cmp	r5, r7
 801f7c2:	dd4d      	ble.n	801f860 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f7c4:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f7c8:	d44a      	bmi.n	801f860 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f7ca:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f7ce:	4560      	cmp	r0, ip
 801f7d0:	dd46      	ble.n	801f860 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f7d2:	b22d      	sxth	r5, r5
 801f7d4:	fb0c 7505 	mla	r5, ip, r5, r7
 801f7d8:	9802      	ldr	r0, [sp, #8]
 801f7da:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801f7de:	f06f 0501 	mvn.w	r5, #1
 801f7e2:	fb05 fb08 	mul.w	fp, r5, r8
 801f7e6:	f834 500b 	ldrh.w	r5, [r4, fp]
 801f7ea:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f7ee:	122f      	asrs	r7, r5, #8
 801f7f0:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f7f4:	fb17 f706 	smulbb	r7, r7, r6
 801f7f8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f7fc:	00ed      	lsls	r5, r5, #3
 801f7fe:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801f802:	b2ed      	uxtb	r5, r5
 801f804:	fb19 f906 	smulbb	r9, r9, r6
 801f808:	fb15 f506 	smulbb	r5, r5, r6
 801f80c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f810:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801f814:	10c7      	asrs	r7, r0, #3
 801f816:	00c0      	lsls	r0, r0, #3
 801f818:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801f81c:	b2c0      	uxtb	r0, r0
 801f81e:	fb07 970a 	mla	r7, r7, sl, r9
 801f822:	fb00 500a 	mla	r0, r0, sl, r5
 801f826:	fa1f fc8c 	uxth.w	ip, ip
 801f82a:	b2bf      	uxth	r7, r7
 801f82c:	b280      	uxth	r0, r0
 801f82e:	f10c 0501 	add.w	r5, ip, #1
 801f832:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f836:	f107 0901 	add.w	r9, r7, #1
 801f83a:	1c45      	adds	r5, r0, #1
 801f83c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f840:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801f844:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801f848:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f84c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f850:	ea45 0c0c 	orr.w	ip, r5, ip
 801f854:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801f858:	ea4c 0c09 	orr.w	ip, ip, r9
 801f85c:	f824 c00b 	strh.w	ip, [r4, fp]
 801f860:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801f862:	f108 38ff 	add.w	r8, r8, #4294967295
 801f866:	4401      	add	r1, r0
 801f868:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f86a:	4402      	add	r2, r0
 801f86c:	e75e      	b.n	801f72c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f86e:	b005      	add	sp, #20
 801f870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f874 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f874:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f87c:	b085      	sub	sp, #20
 801f87e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801f880:	4693      	mov	fp, r2
 801f882:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801f886:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801f88a:	6870      	ldr	r0, [r6, #4]
 801f88c:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801f88e:	fb00 2404 	mla	r4, r0, r4, r2
 801f892:	6832      	ldr	r2, [r6, #0]
 801f894:	9101      	str	r1, [sp, #4]
 801f896:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f89a:	682a      	ldr	r2, [r5, #0]
 801f89c:	9202      	str	r2, [sp, #8]
 801f89e:	9a01      	ldr	r2, [sp, #4]
 801f8a0:	2a00      	cmp	r2, #0
 801f8a2:	dc03      	bgt.n	801f8ac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f8a4:	f1bb 0f00 	cmp.w	fp, #0
 801f8a8:	f340 809a 	ble.w	801f9e0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f8ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f8ae:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f8b2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f8b6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f8b8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f8bc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f8c0:	2b00      	cmp	r3, #0
 801f8c2:	dd0c      	ble.n	801f8de <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f8c4:	1406      	asrs	r6, r0, #16
 801f8c6:	d405      	bmi.n	801f8d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f8c8:	454e      	cmp	r6, r9
 801f8ca:	da03      	bge.n	801f8d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f8cc:	1416      	asrs	r6, r2, #16
 801f8ce:	d401      	bmi.n	801f8d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f8d0:	4546      	cmp	r6, r8
 801f8d2:	db05      	blt.n	801f8e0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f8d4:	4470      	add	r0, lr
 801f8d6:	4462      	add	r2, ip
 801f8d8:	3b01      	subs	r3, #1
 801f8da:	3402      	adds	r4, #2
 801f8dc:	e7f0      	b.n	801f8c0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f8de:	d00f      	beq.n	801f900 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f8e0:	1e5e      	subs	r6, r3, #1
 801f8e2:	fb0e 0706 	mla	r7, lr, r6, r0
 801f8e6:	143f      	asrs	r7, r7, #16
 801f8e8:	d541      	bpl.n	801f96e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801f8ea:	4698      	mov	r8, r3
 801f8ec:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801f8f0:	9603      	str	r6, [sp, #12]
 801f8f2:	f1b8 0f00 	cmp.w	r8, #0
 801f8f6:	dc56      	bgt.n	801f9a6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801f8f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f8fc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f900:	9b01      	ldr	r3, [sp, #4]
 801f902:	2b00      	cmp	r3, #0
 801f904:	dd6c      	ble.n	801f9e0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f906:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f90a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f90e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f912:	eeb0 6a62 	vmov.f32	s12, s5
 801f916:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f91a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f91e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f922:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f926:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f92a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801f92e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f932:	eeb0 6a43 	vmov.f32	s12, s6
 801f936:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f93a:	ee12 2a90 	vmov	r2, s5
 801f93e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f942:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f944:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f948:	fb92 fef3 	sdiv	lr, r2, r3
 801f94c:	ee13 2a10 	vmov	r2, s6
 801f950:	fb92 fcf3 	sdiv	ip, r2, r3
 801f954:	9b01      	ldr	r3, [sp, #4]
 801f956:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801f95a:	3b01      	subs	r3, #1
 801f95c:	9301      	str	r3, [sp, #4]
 801f95e:	eeb0 3a67 	vmov.f32	s6, s15
 801f962:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f964:	eef0 2a47 	vmov.f32	s5, s14
 801f968:	bf08      	it	eq
 801f96a:	465b      	moveq	r3, fp
 801f96c:	e797      	b.n	801f89e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801f96e:	454f      	cmp	r7, r9
 801f970:	dabb      	bge.n	801f8ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f972:	fb0c 2606 	mla	r6, ip, r6, r2
 801f976:	1436      	asrs	r6, r6, #16
 801f978:	d4b7      	bmi.n	801f8ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f97a:	4546      	cmp	r6, r8
 801f97c:	dab5      	bge.n	801f8ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f97e:	461e      	mov	r6, r3
 801f980:	46a0      	mov	r8, r4
 801f982:	2e00      	cmp	r6, #0
 801f984:	ddb8      	ble.n	801f8f8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f986:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f98a:	1417      	asrs	r7, r2, #16
 801f98c:	ea4f 4920 	mov.w	r9, r0, asr #16
 801f990:	fb0a 9707 	mla	r7, sl, r7, r9
 801f994:	9902      	ldr	r1, [sp, #8]
 801f996:	4470      	add	r0, lr
 801f998:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801f99c:	4462      	add	r2, ip
 801f99e:	f828 7b02 	strh.w	r7, [r8], #2
 801f9a2:	3e01      	subs	r6, #1
 801f9a4:	e7ed      	b.n	801f982 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801f9a6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f9aa:	d414      	bmi.n	801f9d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f9ac:	68ae      	ldr	r6, [r5, #8]
 801f9ae:	454e      	cmp	r6, r9
 801f9b0:	dd11      	ble.n	801f9d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f9b2:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f9b6:	d40e      	bmi.n	801f9d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f9b8:	68ef      	ldr	r7, [r5, #12]
 801f9ba:	4557      	cmp	r7, sl
 801f9bc:	dd0b      	ble.n	801f9d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f9be:	f06f 0101 	mvn.w	r1, #1
 801f9c2:	b236      	sxth	r6, r6
 801f9c4:	fb0a 9606 	mla	r6, sl, r6, r9
 801f9c8:	9f02      	ldr	r7, [sp, #8]
 801f9ca:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801f9ce:	fb01 f608 	mul.w	r6, r1, r8
 801f9d2:	9903      	ldr	r1, [sp, #12]
 801f9d4:	538f      	strh	r7, [r1, r6]
 801f9d6:	4470      	add	r0, lr
 801f9d8:	4462      	add	r2, ip
 801f9da:	f108 38ff 	add.w	r8, r8, #4294967295
 801f9de:	e788      	b.n	801f8f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f9e0:	b005      	add	sp, #20
 801f9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f9e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f9e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f9ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9ee:	b087      	sub	sp, #28
 801f9f0:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f9f2:	468b      	mov	fp, r1
 801f9f4:	9203      	str	r2, [sp, #12]
 801f9f6:	6841      	ldr	r1, [r0, #4]
 801f9f8:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801f9fc:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801fa00:	9204      	str	r2, [sp, #16]
 801fa02:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801fa06:	fb01 2505 	mla	r5, r1, r5, r2
 801fa0a:	6802      	ldr	r2, [r0, #0]
 801fa0c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801fa10:	f8d9 2000 	ldr.w	r2, [r9]
 801fa14:	9201      	str	r2, [sp, #4]
 801fa16:	f1bb 0f00 	cmp.w	fp, #0
 801fa1a:	dc03      	bgt.n	801fa24 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801fa1c:	9a03      	ldr	r2, [sp, #12]
 801fa1e:	2a00      	cmp	r2, #0
 801fa20:	f340 8159 	ble.w	801fcd6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801fa24:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fa26:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801fa2a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801fa2e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fa30:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801fa34:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801fa38:	2b00      	cmp	r3, #0
 801fa3a:	dd0e      	ble.n	801fa5a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fa3c:	1402      	asrs	r2, r0, #16
 801fa3e:	d405      	bmi.n	801fa4c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fa40:	42ba      	cmp	r2, r7
 801fa42:	da03      	bge.n	801fa4c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fa44:	140a      	asrs	r2, r1, #16
 801fa46:	d401      	bmi.n	801fa4c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fa48:	42b2      	cmp	r2, r6
 801fa4a:	db07      	blt.n	801fa5c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fa4c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801fa4e:	3b01      	subs	r3, #1
 801fa50:	4410      	add	r0, r2
 801fa52:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fa54:	3502      	adds	r5, #2
 801fa56:	4411      	add	r1, r2
 801fa58:	e7ee      	b.n	801fa38 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801fa5a:	d017      	beq.n	801fa8c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801fa5c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fa5e:	1e5a      	subs	r2, r3, #1
 801fa60:	fb04 0402 	mla	r4, r4, r2, r0
 801fa64:	1424      	asrs	r4, r4, #16
 801fa66:	d409      	bmi.n	801fa7c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fa68:	42bc      	cmp	r4, r7
 801fa6a:	da07      	bge.n	801fa7c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fa6c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fa6e:	fb04 1202 	mla	r2, r4, r2, r1
 801fa72:	1412      	asrs	r2, r2, #16
 801fa74:	d402      	bmi.n	801fa7c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fa76:	42b2      	cmp	r2, r6
 801fa78:	f2c0 80bf 	blt.w	801fbfa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fa7c:	2700      	movs	r7, #0
 801fa7e:	19da      	adds	r2, r3, r7
 801fa80:	2a00      	cmp	r2, #0
 801fa82:	dc3e      	bgt.n	801fb02 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fa84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fa88:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801fa8c:	f1bb 0f00 	cmp.w	fp, #0
 801fa90:	f340 8121 	ble.w	801fcd6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801fa94:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fa98:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fa9c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801faa0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801faa4:	eeb0 6a62 	vmov.f32	s12, s5
 801faa8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801faac:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fab0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fab4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fab8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fabc:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801fac0:	eeb0 6a43 	vmov.f32	s12, s6
 801fac4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fac8:	ee12 2a90 	vmov	r2, s5
 801facc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fad0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fad2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fad6:	fb92 f3f3 	sdiv	r3, r2, r3
 801fada:	ee13 2a10 	vmov	r2, s6
 801fade:	9313      	str	r3, [sp, #76]	@ 0x4c
 801fae0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fae2:	f1bb 0b01 	subs.w	fp, fp, #1
 801fae6:	fb92 f3f3 	sdiv	r3, r2, r3
 801faea:	9a03      	ldr	r2, [sp, #12]
 801faec:	9314      	str	r3, [sp, #80]	@ 0x50
 801faee:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801faf2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801faf4:	eeb0 3a67 	vmov.f32	s6, s15
 801faf8:	bf08      	it	eq
 801fafa:	4613      	moveq	r3, r2
 801fafc:	eef0 2a47 	vmov.f32	s5, s14
 801fb00:	e789      	b.n	801fa16 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801fb02:	1406      	asrs	r6, r0, #16
 801fb04:	d42d      	bmi.n	801fb62 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fb06:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801fb0a:	42b4      	cmp	r4, r6
 801fb0c:	dd29      	ble.n	801fb62 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fb0e:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801fb12:	d426      	bmi.n	801fb62 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fb14:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801fb18:	4562      	cmp	r2, ip
 801fb1a:	dd22      	ble.n	801fb62 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fb1c:	b224      	sxth	r4, r4
 801fb1e:	fb0c 6404 	mla	r4, ip, r4, r6
 801fb22:	9a01      	ldr	r2, [sp, #4]
 801fb24:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801fb28:	0e22      	lsrs	r2, r4, #24
 801fb2a:	d01a      	beq.n	801fb62 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fb2c:	9e04      	ldr	r6, [sp, #16]
 801fb2e:	4372      	muls	r2, r6
 801fb30:	1c56      	adds	r6, r2, #1
 801fb32:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fb36:	1212      	asrs	r2, r2, #8
 801fb38:	0a26      	lsrs	r6, r4, #8
 801fb3a:	2aff      	cmp	r2, #255	@ 0xff
 801fb3c:	9605      	str	r6, [sp, #20]
 801fb3e:	d116      	bne.n	801fb6e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801fb40:	f06f 0201 	mvn.w	r2, #1
 801fb44:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801fb48:	fb02 fc07 	mul.w	ip, r2, r7
 801fb4c:	0962      	lsrs	r2, r4, #5
 801fb4e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801fb52:	f026 0607 	bic.w	r6, r6, #7
 801fb56:	4316      	orrs	r6, r2
 801fb58:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fb5c:	4326      	orrs	r6, r4
 801fb5e:	f825 600c 	strh.w	r6, [r5, ip]
 801fb62:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801fb64:	3f01      	subs	r7, #1
 801fb66:	4410      	add	r0, r2
 801fb68:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fb6a:	4411      	add	r1, r2
 801fb6c:	e787      	b.n	801fa7e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fb6e:	f06f 0601 	mvn.w	r6, #1
 801fb72:	fa1f fa82 	uxth.w	sl, r2
 801fb76:	43d2      	mvns	r2, r2
 801fb78:	437e      	muls	r6, r7
 801fb7a:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801fb7e:	f835 8006 	ldrh.w	r8, [r5, r6]
 801fb82:	fb1c fc0a 	smulbb	ip, ip, sl
 801fb86:	b2e4      	uxtb	r4, r4
 801fb88:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801fb8c:	fb14 f40a 	smulbb	r4, r4, sl
 801fb90:	b2d2      	uxtb	r2, r2
 801fb92:	9602      	str	r6, [sp, #8]
 801fb94:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801fb98:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801fb9c:	fb0e ce02 	mla	lr, lr, r2, ip
 801fba0:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801fba4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fba8:	fb16 f60a 	smulbb	r6, r6, sl
 801fbac:	fa5f f888 	uxtb.w	r8, r8
 801fbb0:	fb08 4402 	mla	r4, r8, r2, r4
 801fbb4:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801fbb8:	fb0c 6c02 	mla	ip, ip, r2, r6
 801fbbc:	fa1f fe8e 	uxth.w	lr, lr
 801fbc0:	b2a4      	uxth	r4, r4
 801fbc2:	f10e 0201 	add.w	r2, lr, #1
 801fbc6:	1c66      	adds	r6, r4, #1
 801fbc8:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801fbcc:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801fbd0:	fa1f fc8c 	uxth.w	ip, ip
 801fbd4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fbd8:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801fbdc:	ea46 0e0e 	orr.w	lr, r6, lr
 801fbe0:	f10c 0601 	add.w	r6, ip, #1
 801fbe4:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801fbe8:	0976      	lsrs	r6, r6, #5
 801fbea:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801fbee:	9a02      	ldr	r2, [sp, #8]
 801fbf0:	ea4e 0e06 	orr.w	lr, lr, r6
 801fbf4:	f825 e002 	strh.w	lr, [r5, r2]
 801fbf8:	e7b3      	b.n	801fb62 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fbfa:	f04f 0800 	mov.w	r8, #0
 801fbfe:	eba3 0208 	sub.w	r2, r3, r8
 801fc02:	2a00      	cmp	r2, #0
 801fc04:	f77f af3e 	ble.w	801fa84 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fc08:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801fc0c:	1404      	asrs	r4, r0, #16
 801fc0e:	140a      	asrs	r2, r1, #16
 801fc10:	fb06 4202 	mla	r2, r6, r2, r4
 801fc14:	9c01      	ldr	r4, [sp, #4]
 801fc16:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801fc1a:	0e22      	lsrs	r2, r4, #24
 801fc1c:	d016      	beq.n	801fc4c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801fc1e:	9e04      	ldr	r6, [sp, #16]
 801fc20:	4372      	muls	r2, r6
 801fc22:	1c56      	adds	r6, r2, #1
 801fc24:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fc28:	1212      	asrs	r2, r2, #8
 801fc2a:	2aff      	cmp	r2, #255	@ 0xff
 801fc2c:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801fc30:	d113      	bne.n	801fc5a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801fc32:	0962      	lsrs	r2, r4, #5
 801fc34:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801fc38:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801fc3c:	f026 0607 	bic.w	r6, r6, #7
 801fc40:	4316      	orrs	r6, r2
 801fc42:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fc46:	4326      	orrs	r6, r4
 801fc48:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801fc4c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801fc4e:	f108 0801 	add.w	r8, r8, #1
 801fc52:	4410      	add	r0, r2
 801fc54:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fc56:	4411      	add	r1, r2
 801fc58:	e7d1      	b.n	801fbfe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801fc5a:	fa1f fa82 	uxth.w	sl, r2
 801fc5e:	43d2      	mvns	r2, r2
 801fc60:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801fc64:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801fc68:	fb17 f70a 	smulbb	r7, r7, sl
 801fc6c:	b2e4      	uxtb	r4, r4
 801fc6e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fc72:	fb14 f40a 	smulbb	r4, r4, sl
 801fc76:	b2d2      	uxtb	r2, r2
 801fc78:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801fc7c:	fb0c 7c02 	mla	ip, ip, r2, r7
 801fc80:	b2f6      	uxtb	r6, r6
 801fc82:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801fc86:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fc8a:	fb16 f60a 	smulbb	r6, r6, sl
 801fc8e:	fa5f fe8e 	uxtb.w	lr, lr
 801fc92:	fb0e 4402 	mla	r4, lr, r2, r4
 801fc96:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801fc9a:	fb07 6702 	mla	r7, r7, r2, r6
 801fc9e:	fa1f fc8c 	uxth.w	ip, ip
 801fca2:	b2a4      	uxth	r4, r4
 801fca4:	f10c 0201 	add.w	r2, ip, #1
 801fca8:	1c66      	adds	r6, r4, #1
 801fcaa:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801fcae:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801fcb2:	b2bf      	uxth	r7, r7
 801fcb4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fcb8:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801fcbc:	ea46 0c0c 	orr.w	ip, r6, ip
 801fcc0:	1c7e      	adds	r6, r7, #1
 801fcc2:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801fcc6:	0976      	lsrs	r6, r6, #5
 801fcc8:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801fccc:	ea4c 0c06 	orr.w	ip, ip, r6
 801fcd0:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801fcd4:	e7ba      	b.n	801fc4c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801fcd6:	b007      	add	sp, #28
 801fcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fcdc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fcdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fce4:	b085      	sub	sp, #20
 801fce6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801fce8:	468b      	mov	fp, r1
 801fcea:	6841      	ldr	r1, [r0, #4]
 801fcec:	9203      	str	r2, [sp, #12]
 801fcee:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801fcf2:	fb01 2404 	mla	r4, r1, r4, r2
 801fcf6:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801fcfa:	6802      	ldr	r2, [r0, #0]
 801fcfc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fd00:	f8d8 2000 	ldr.w	r2, [r8]
 801fd04:	9201      	str	r2, [sp, #4]
 801fd06:	f1bb 0f00 	cmp.w	fp, #0
 801fd0a:	dc03      	bgt.n	801fd14 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fd0c:	9a03      	ldr	r2, [sp, #12]
 801fd0e:	2a00      	cmp	r2, #0
 801fd10:	f340 814f 	ble.w	801ffb2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801fd14:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fd16:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801fd1a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801fd1e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801fd20:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801fd24:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801fd28:	2b00      	cmp	r3, #0
 801fd2a:	dd0e      	ble.n	801fd4a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fd2c:	1408      	asrs	r0, r1, #16
 801fd2e:	d405      	bmi.n	801fd3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fd30:	42b8      	cmp	r0, r7
 801fd32:	da03      	bge.n	801fd3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fd34:	1410      	asrs	r0, r2, #16
 801fd36:	d401      	bmi.n	801fd3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fd38:	42b0      	cmp	r0, r6
 801fd3a:	db07      	blt.n	801fd4c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fd3c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801fd3e:	3b01      	subs	r3, #1
 801fd40:	4401      	add	r1, r0
 801fd42:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fd44:	3402      	adds	r4, #2
 801fd46:	4402      	add	r2, r0
 801fd48:	e7ee      	b.n	801fd28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801fd4a:	d017      	beq.n	801fd7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fd4c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801fd4e:	1e58      	subs	r0, r3, #1
 801fd50:	fb05 1500 	mla	r5, r5, r0, r1
 801fd54:	142d      	asrs	r5, r5, #16
 801fd56:	d409      	bmi.n	801fd6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fd58:	42bd      	cmp	r5, r7
 801fd5a:	da07      	bge.n	801fd6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fd5c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801fd5e:	fb05 2000 	mla	r0, r5, r0, r2
 801fd62:	1400      	asrs	r0, r0, #16
 801fd64:	d402      	bmi.n	801fd6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fd66:	42b0      	cmp	r0, r6
 801fd68:	f2c0 80ba 	blt.w	801fee0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801fd6c:	2600      	movs	r6, #0
 801fd6e:	1998      	adds	r0, r3, r6
 801fd70:	2800      	cmp	r0, #0
 801fd72:	dc3e      	bgt.n	801fdf2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fd74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fd78:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fd7c:	f1bb 0f00 	cmp.w	fp, #0
 801fd80:	f340 8117 	ble.w	801ffb2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801fd84:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fd88:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fd8c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fd90:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd94:	eeb0 6a62 	vmov.f32	s12, s5
 801fd98:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fd9c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fda0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fda4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fda8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fdac:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801fdb0:	eeb0 6a43 	vmov.f32	s12, s6
 801fdb4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fdb8:	ee12 2a90 	vmov	r2, s5
 801fdbc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fdc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fdc2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fdc6:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdca:	ee13 2a10 	vmov	r2, s6
 801fdce:	9311      	str	r3, [sp, #68]	@ 0x44
 801fdd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fdd2:	f1bb 0b01 	subs.w	fp, fp, #1
 801fdd6:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdda:	9a03      	ldr	r2, [sp, #12]
 801fddc:	9312      	str	r3, [sp, #72]	@ 0x48
 801fdde:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801fde2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fde4:	eeb0 3a67 	vmov.f32	s6, s15
 801fde8:	bf08      	it	eq
 801fdea:	4613      	moveq	r3, r2
 801fdec:	eef0 2a47 	vmov.f32	s5, s14
 801fdf0:	e789      	b.n	801fd06 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801fdf2:	140f      	asrs	r7, r1, #16
 801fdf4:	d424      	bmi.n	801fe40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fdf6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801fdfa:	42bd      	cmp	r5, r7
 801fdfc:	dd20      	ble.n	801fe40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fdfe:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fe02:	d41d      	bmi.n	801fe40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fe04:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801fe08:	4560      	cmp	r0, ip
 801fe0a:	dd19      	ble.n	801fe40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fe0c:	b22d      	sxth	r5, r5
 801fe0e:	fb0c 7505 	mla	r5, ip, r5, r7
 801fe12:	9801      	ldr	r0, [sp, #4]
 801fe14:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801fe18:	0e07      	lsrs	r7, r0, #24
 801fe1a:	2fff      	cmp	r7, #255	@ 0xff
 801fe1c:	d116      	bne.n	801fe4c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fe1e:	f06f 0501 	mvn.w	r5, #1
 801fe22:	fb05 f706 	mul.w	r7, r5, r6
 801fe26:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801fe2a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801fe2e:	0945      	lsrs	r5, r0, #5
 801fe30:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801fe34:	ea4c 0505 	orr.w	r5, ip, r5
 801fe38:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801fe3c:	4305      	orrs	r5, r0
 801fe3e:	53e5      	strh	r5, [r4, r7]
 801fe40:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801fe42:	3e01      	subs	r6, #1
 801fe44:	4401      	add	r1, r0
 801fe46:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fe48:	4402      	add	r2, r0
 801fe4a:	e790      	b.n	801fd6e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fe4c:	b2fd      	uxtb	r5, r7
 801fe4e:	2f00      	cmp	r7, #0
 801fe50:	d0f6      	beq.n	801fe40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fe52:	f06f 0701 	mvn.w	r7, #1
 801fe56:	fa1f f985 	uxth.w	r9, r5
 801fe5a:	43ed      	mvns	r5, r5
 801fe5c:	4377      	muls	r7, r6
 801fe5e:	f834 e007 	ldrh.w	lr, [r4, r7]
 801fe62:	9702      	str	r7, [sp, #8]
 801fe64:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801fe68:	fb17 f709 	smulbb	r7, r7, r9
 801fe6c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801fe70:	b2c0      	uxtb	r0, r0
 801fe72:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fe76:	fb10 f009 	smulbb	r0, r0, r9
 801fe7a:	b2ed      	uxtb	r5, r5
 801fe7c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801fe80:	fb0c 7c05 	mla	ip, ip, r5, r7
 801fe84:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801fe88:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fe8c:	fb1a fa09 	smulbb	sl, sl, r9
 801fe90:	fa5f fe8e 	uxtb.w	lr, lr
 801fe94:	fb0e 0005 	mla	r0, lr, r5, r0
 801fe98:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801fe9c:	fb07 a705 	mla	r7, r7, r5, sl
 801fea0:	b280      	uxth	r0, r0
 801fea2:	fa1f fc8c 	uxth.w	ip, ip
 801fea6:	f100 0a01 	add.w	sl, r0, #1
 801feaa:	f10c 0501 	add.w	r5, ip, #1
 801feae:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801feb2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801feb6:	b2bf      	uxth	r7, r7
 801feb8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801febc:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801fec0:	ea4a 0c0c 	orr.w	ip, sl, ip
 801fec4:	f107 0a01 	add.w	sl, r7, #1
 801fec8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801fecc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fed0:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801fed4:	9802      	ldr	r0, [sp, #8]
 801fed6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801feda:	f824 c000 	strh.w	ip, [r4, r0]
 801fede:	e7af      	b.n	801fe40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fee0:	f04f 0e00 	mov.w	lr, #0
 801fee4:	eba3 000e 	sub.w	r0, r3, lr
 801fee8:	2800      	cmp	r0, #0
 801feea:	f77f af43 	ble.w	801fd74 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801feee:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801fef2:	140d      	asrs	r5, r1, #16
 801fef4:	1410      	asrs	r0, r2, #16
 801fef6:	fb06 5000 	mla	r0, r6, r0, r5
 801fefa:	9d01      	ldr	r5, [sp, #4]
 801fefc:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801ff00:	0e2e      	lsrs	r6, r5, #24
 801ff02:	2eff      	cmp	r6, #255	@ 0xff
 801ff04:	d112      	bne.n	801ff2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801ff06:	482c      	ldr	r0, [pc, #176]	@ (801ffb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801ff08:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ff0c:	0968      	lsrs	r0, r5, #5
 801ff0e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801ff12:	4330      	orrs	r0, r6
 801ff14:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ff18:	4328      	orrs	r0, r5
 801ff1a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801ff1e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ff20:	f10e 0e01 	add.w	lr, lr, #1
 801ff24:	4401      	add	r1, r0
 801ff26:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ff28:	4402      	add	r2, r0
 801ff2a:	e7db      	b.n	801fee4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ff2c:	b2f0      	uxtb	r0, r6
 801ff2e:	2e00      	cmp	r6, #0
 801ff30:	d0f5      	beq.n	801ff1e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ff32:	fa1f f980 	uxth.w	r9, r0
 801ff36:	43c0      	mvns	r0, r0
 801ff38:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ff3c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801ff40:	fb16 f609 	smulbb	r6, r6, r9
 801ff44:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ff48:	b2ed      	uxtb	r5, r5
 801ff4a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ff4e:	fb15 f509 	smulbb	r5, r5, r9
 801ff52:	b2c0      	uxtb	r0, r0
 801ff54:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ff58:	fb07 6700 	mla	r7, r7, r0, r6
 801ff5c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ff60:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ff64:	fb1a fa09 	smulbb	sl, sl, r9
 801ff68:	fa5f fc8c 	uxtb.w	ip, ip
 801ff6c:	fb0c 5500 	mla	r5, ip, r0, r5
 801ff70:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801ff74:	fb06 a600 	mla	r6, r6, r0, sl
 801ff78:	b2bf      	uxth	r7, r7
 801ff7a:	b2ad      	uxth	r5, r5
 801ff7c:	1c78      	adds	r0, r7, #1
 801ff7e:	f105 0a01 	add.w	sl, r5, #1
 801ff82:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ff86:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ff8a:	b2b6      	uxth	r6, r6
 801ff8c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ff90:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801ff94:	ea4a 0707 	orr.w	r7, sl, r7
 801ff98:	f106 0a01 	add.w	sl, r6, #1
 801ff9c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ffa0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ffa4:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801ffa8:	ea47 070a 	orr.w	r7, r7, sl
 801ffac:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801ffb0:	e7b5      	b.n	801ff1e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ffb2:	b005      	add	sp, #20
 801ffb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffb8:	fffff800 	.word	0xfffff800

0801ffbc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ffbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ffc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffc4:	b087      	sub	sp, #28
 801ffc6:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801ffc8:	468b      	mov	fp, r1
 801ffca:	9203      	str	r2, [sp, #12]
 801ffcc:	6841      	ldr	r1, [r0, #4]
 801ffce:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801ffd2:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801ffd6:	9204      	str	r2, [sp, #16]
 801ffd8:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801ffdc:	fb01 2404 	mla	r4, r1, r4, r2
 801ffe0:	6802      	ldr	r2, [r0, #0]
 801ffe2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ffe6:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ffea:	3201      	adds	r2, #1
 801ffec:	f022 0201 	bic.w	r2, r2, #1
 801fff0:	9200      	str	r2, [sp, #0]
 801fff2:	f8d9 2000 	ldr.w	r2, [r9]
 801fff6:	9201      	str	r2, [sp, #4]
 801fff8:	f1bb 0f00 	cmp.w	fp, #0
 801fffc:	dc03      	bgt.n	8020006 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fffe:	9a03      	ldr	r2, [sp, #12]
 8020000:	2a00      	cmp	r2, #0
 8020002:	f340 816a 	ble.w	80202da <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8020006:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020008:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 802000c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8020010:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020012:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8020016:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 802001a:	2b00      	cmp	r3, #0
 802001c:	dd0e      	ble.n	802003c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802001e:	1402      	asrs	r2, r0, #16
 8020020:	d405      	bmi.n	802002e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020022:	42ba      	cmp	r2, r7
 8020024:	da03      	bge.n	802002e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020026:	140a      	asrs	r2, r1, #16
 8020028:	d401      	bmi.n	802002e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802002a:	42b2      	cmp	r2, r6
 802002c:	db07      	blt.n	802003e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802002e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020030:	3b01      	subs	r3, #1
 8020032:	4410      	add	r0, r2
 8020034:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020036:	3402      	adds	r4, #2
 8020038:	4411      	add	r1, r2
 802003a:	e7ee      	b.n	802001a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802003c:	d017      	beq.n	802006e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802003e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8020040:	1e5a      	subs	r2, r3, #1
 8020042:	fb05 0502 	mla	r5, r5, r2, r0
 8020046:	142d      	asrs	r5, r5, #16
 8020048:	d409      	bmi.n	802005e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802004a:	42bd      	cmp	r5, r7
 802004c:	da07      	bge.n	802005e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802004e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8020050:	fb05 1202 	mla	r2, r5, r2, r1
 8020054:	1412      	asrs	r2, r2, #16
 8020056:	d402      	bmi.n	802005e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020058:	42b2      	cmp	r2, r6
 802005a:	f2c0 80c8 	blt.w	80201ee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802005e:	2700      	movs	r7, #0
 8020060:	19da      	adds	r2, r3, r7
 8020062:	2a00      	cmp	r2, #0
 8020064:	dc3e      	bgt.n	80200e4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8020066:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802006a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802006e:	f1bb 0f00 	cmp.w	fp, #0
 8020072:	f340 8132 	ble.w	80202da <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8020076:	ee30 0a04 	vadd.f32	s0, s0, s8
 802007a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802007e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020082:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020086:	eeb0 6a62 	vmov.f32	s12, s5
 802008a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802008e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020092:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020096:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802009a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802009e:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 80200a2:	eeb0 6a43 	vmov.f32	s12, s6
 80200a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80200aa:	ee12 2a90 	vmov	r2, s5
 80200ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80200b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80200b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80200b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80200bc:	ee13 2a10 	vmov	r2, s6
 80200c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80200c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80200c4:	f1bb 0b01 	subs.w	fp, fp, #1
 80200c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80200cc:	9a03      	ldr	r2, [sp, #12]
 80200ce:	9314      	str	r3, [sp, #80]	@ 0x50
 80200d0:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 80200d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80200d6:	eeb0 3a67 	vmov.f32	s6, s15
 80200da:	bf08      	it	eq
 80200dc:	4613      	moveq	r3, r2
 80200de:	eef0 2a47 	vmov.f32	s5, s14
 80200e2:	e789      	b.n	801fff8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80200e4:	1405      	asrs	r5, r0, #16
 80200e6:	d436      	bmi.n	8020156 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80200e8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80200ec:	42aa      	cmp	r2, r5
 80200ee:	dd32      	ble.n	8020156 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80200f0:	140e      	asrs	r6, r1, #16
 80200f2:	d430      	bmi.n	8020156 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80200f4:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80200f8:	42b2      	cmp	r2, r6
 80200fa:	dd2c      	ble.n	8020156 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80200fc:	9a00      	ldr	r2, [sp, #0]
 80200fe:	fb06 5502 	mla	r5, r6, r2, r5
 8020102:	9e01      	ldr	r6, [sp, #4]
 8020104:	086a      	lsrs	r2, r5, #1
 8020106:	5cb2      	ldrb	r2, [r6, r2]
 8020108:	07ee      	lsls	r6, r5, #31
 802010a:	bf54      	ite	pl
 802010c:	f002 020f 	andpl.w	r2, r2, #15
 8020110:	1112      	asrmi	r2, r2, #4
 8020112:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020116:	b2d2      	uxtb	r2, r2
 8020118:	b1ea      	cbz	r2, 8020156 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802011a:	9d04      	ldr	r5, [sp, #16]
 802011c:	436a      	muls	r2, r5
 802011e:	1c55      	adds	r5, r2, #1
 8020120:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020124:	4d6e      	ldr	r5, [pc, #440]	@ (80202e0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8020126:	1212      	asrs	r2, r2, #8
 8020128:	682d      	ldr	r5, [r5, #0]
 802012a:	2aff      	cmp	r2, #255	@ 0xff
 802012c:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8020130:	9605      	str	r6, [sp, #20]
 8020132:	d116      	bne.n	8020162 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020134:	f06f 0201 	mvn.w	r2, #1
 8020138:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 802013c:	fb02 fc07 	mul.w	ip, r2, r7
 8020140:	096a      	lsrs	r2, r5, #5
 8020142:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020146:	f026 0607 	bic.w	r6, r6, #7
 802014a:	4316      	orrs	r6, r2
 802014c:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020150:	432e      	orrs	r6, r5
 8020152:	f824 600c 	strh.w	r6, [r4, ip]
 8020156:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020158:	3f01      	subs	r7, #1
 802015a:	4410      	add	r0, r2
 802015c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802015e:	4411      	add	r1, r2
 8020160:	e77e      	b.n	8020060 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8020162:	f06f 0601 	mvn.w	r6, #1
 8020166:	fa1f fa82 	uxth.w	sl, r2
 802016a:	43d2      	mvns	r2, r2
 802016c:	437e      	muls	r6, r7
 802016e:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8020172:	f834 8006 	ldrh.w	r8, [r4, r6]
 8020176:	fb1c fc0a 	smulbb	ip, ip, sl
 802017a:	b2ed      	uxtb	r5, r5
 802017c:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8020180:	fb15 f50a 	smulbb	r5, r5, sl
 8020184:	b2d2      	uxtb	r2, r2
 8020186:	9602      	str	r6, [sp, #8]
 8020188:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 802018c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8020190:	fb0e ce02 	mla	lr, lr, r2, ip
 8020194:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8020198:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 802019c:	fb16 f60a 	smulbb	r6, r6, sl
 80201a0:	fa5f f888 	uxtb.w	r8, r8
 80201a4:	fb08 5502 	mla	r5, r8, r2, r5
 80201a8:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 80201ac:	fb0c 6c02 	mla	ip, ip, r2, r6
 80201b0:	fa1f fe8e 	uxth.w	lr, lr
 80201b4:	b2ad      	uxth	r5, r5
 80201b6:	f10e 0201 	add.w	r2, lr, #1
 80201ba:	1c6e      	adds	r6, r5, #1
 80201bc:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80201c0:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 80201c4:	fa1f fc8c 	uxth.w	ip, ip
 80201c8:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80201cc:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 80201d0:	ea46 0e0e 	orr.w	lr, r6, lr
 80201d4:	f10c 0601 	add.w	r6, ip, #1
 80201d8:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80201dc:	0976      	lsrs	r6, r6, #5
 80201de:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80201e2:	9a02      	ldr	r2, [sp, #8]
 80201e4:	ea4e 0e06 	orr.w	lr, lr, r6
 80201e8:	f824 e002 	strh.w	lr, [r4, r2]
 80201ec:	e7b3      	b.n	8020156 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80201ee:	f04f 0800 	mov.w	r8, #0
 80201f2:	eba3 0208 	sub.w	r2, r3, r8
 80201f6:	2a00      	cmp	r2, #0
 80201f8:	f77f af35 	ble.w	8020066 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80201fc:	9e00      	ldr	r6, [sp, #0]
 80201fe:	1402      	asrs	r2, r0, #16
 8020200:	140d      	asrs	r5, r1, #16
 8020202:	fb06 2505 	mla	r5, r6, r5, r2
 8020206:	9e01      	ldr	r6, [sp, #4]
 8020208:	086a      	lsrs	r2, r5, #1
 802020a:	5cb2      	ldrb	r2, [r6, r2]
 802020c:	07ed      	lsls	r5, r5, #31
 802020e:	bf54      	ite	pl
 8020210:	f002 020f 	andpl.w	r2, r2, #15
 8020214:	1112      	asrmi	r2, r2, #4
 8020216:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802021a:	b2d2      	uxtb	r2, r2
 802021c:	b1c2      	cbz	r2, 8020250 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802021e:	9d04      	ldr	r5, [sp, #16]
 8020220:	436a      	muls	r2, r5
 8020222:	1c55      	adds	r5, r2, #1
 8020224:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020228:	4d2d      	ldr	r5, [pc, #180]	@ (80202e0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 802022a:	1212      	asrs	r2, r2, #8
 802022c:	682e      	ldr	r6, [r5, #0]
 802022e:	2aff      	cmp	r2, #255	@ 0xff
 8020230:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8020234:	d113      	bne.n	802025e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020236:	0972      	lsrs	r2, r6, #5
 8020238:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 802023c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020240:	f025 0507 	bic.w	r5, r5, #7
 8020244:	4315      	orrs	r5, r2
 8020246:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 802024a:	4335      	orrs	r5, r6
 802024c:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8020250:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020252:	f108 0801 	add.w	r8, r8, #1
 8020256:	4410      	add	r0, r2
 8020258:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802025a:	4411      	add	r1, r2
 802025c:	e7c9      	b.n	80201f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802025e:	fa1f fa82 	uxth.w	sl, r2
 8020262:	43d2      	mvns	r2, r2
 8020264:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8020268:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 802026c:	fb17 f70a 	smulbb	r7, r7, sl
 8020270:	b2f6      	uxtb	r6, r6
 8020272:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020276:	fb16 f60a 	smulbb	r6, r6, sl
 802027a:	b2d2      	uxtb	r2, r2
 802027c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8020280:	fb0c 7c02 	mla	ip, ip, r2, r7
 8020284:	b2ed      	uxtb	r5, r5
 8020286:	ea4f 07ee 	mov.w	r7, lr, asr #3
 802028a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802028e:	fb15 f50a 	smulbb	r5, r5, sl
 8020292:	fa5f fe8e 	uxtb.w	lr, lr
 8020296:	fb0e 6602 	mla	r6, lr, r2, r6
 802029a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802029e:	fb07 5702 	mla	r7, r7, r2, r5
 80202a2:	fa1f fc8c 	uxth.w	ip, ip
 80202a6:	b2b6      	uxth	r6, r6
 80202a8:	f10c 0201 	add.w	r2, ip, #1
 80202ac:	1c75      	adds	r5, r6, #1
 80202ae:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80202b2:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 80202b6:	b2bf      	uxth	r7, r7
 80202b8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80202bc:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80202c0:	ea45 0c0c 	orr.w	ip, r5, ip
 80202c4:	1c7d      	adds	r5, r7, #1
 80202c6:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 80202ca:	096d      	lsrs	r5, r5, #5
 80202cc:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80202d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80202d4:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 80202d8:	e7ba      	b.n	8020250 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80202da:	b007      	add	sp, #28
 80202dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202e0:	2005bd2c 	.word	0x2005bd2c

080202e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80202e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80202e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202ec:	b087      	sub	sp, #28
 80202ee:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80202f0:	9101      	str	r1, [sp, #4]
 80202f2:	6841      	ldr	r1, [r0, #4]
 80202f4:	9205      	str	r2, [sp, #20]
 80202f6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 80202fa:	fb01 2404 	mla	r4, r1, r4, r2
 80202fe:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 8020302:	6802      	ldr	r2, [r0, #0]
 8020304:	f8df 82f0 	ldr.w	r8, [pc, #752]	@ 80205f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8020308:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802030c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8020310:	3201      	adds	r2, #1
 8020312:	f022 0201 	bic.w	r2, r2, #1
 8020316:	9202      	str	r2, [sp, #8]
 8020318:	f8db 2000 	ldr.w	r2, [fp]
 802031c:	9203      	str	r2, [sp, #12]
 802031e:	9a01      	ldr	r2, [sp, #4]
 8020320:	2a00      	cmp	r2, #0
 8020322:	dc03      	bgt.n	802032c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020324:	9a05      	ldr	r2, [sp, #20]
 8020326:	2a00      	cmp	r2, #0
 8020328:	f340 8162 	ble.w	80205f0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802032c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802032e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8020332:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8020336:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020338:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 802033c:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8020340:	2b00      	cmp	r3, #0
 8020342:	dd0e      	ble.n	8020362 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020344:	1402      	asrs	r2, r0, #16
 8020346:	d405      	bmi.n	8020354 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020348:	42ba      	cmp	r2, r7
 802034a:	da03      	bge.n	8020354 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802034c:	140a      	asrs	r2, r1, #16
 802034e:	d401      	bmi.n	8020354 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020350:	42b2      	cmp	r2, r6
 8020352:	db07      	blt.n	8020364 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020354:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020356:	3b01      	subs	r3, #1
 8020358:	4410      	add	r0, r2
 802035a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802035c:	3402      	adds	r4, #2
 802035e:	4411      	add	r1, r2
 8020360:	e7ee      	b.n	8020340 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020362:	d017      	beq.n	8020394 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020364:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8020366:	1e5a      	subs	r2, r3, #1
 8020368:	fb05 0502 	mla	r5, r5, r2, r0
 802036c:	142d      	asrs	r5, r5, #16
 802036e:	d409      	bmi.n	8020384 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020370:	42bd      	cmp	r5, r7
 8020372:	da07      	bge.n	8020384 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020374:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8020376:	fb05 1202 	mla	r2, r5, r2, r1
 802037a:	1412      	asrs	r2, r2, #16
 802037c:	d402      	bmi.n	8020384 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802037e:	42b2      	cmp	r2, r6
 8020380:	f2c0 80c3 	blt.w	802050a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8020384:	2500      	movs	r5, #0
 8020386:	195a      	adds	r2, r3, r5
 8020388:	2a00      	cmp	r2, #0
 802038a:	dc3f      	bgt.n	802040c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802038c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020390:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020394:	9b01      	ldr	r3, [sp, #4]
 8020396:	2b00      	cmp	r3, #0
 8020398:	f340 812a 	ble.w	80205f0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802039c:	ee30 0a04 	vadd.f32	s0, s0, s8
 80203a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80203a4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80203a8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80203ac:	eeb0 6a62 	vmov.f32	s12, s5
 80203b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80203b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80203b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80203bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80203c0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80203c4:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 80203c8:	eeb0 6a43 	vmov.f32	s12, s6
 80203cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80203d0:	ee12 2a90 	vmov	r2, s5
 80203d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80203d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80203da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80203de:	fb92 f3f3 	sdiv	r3, r2, r3
 80203e2:	ee13 2a10 	vmov	r2, s6
 80203e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80203e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80203ea:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 80203ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80203f2:	9314      	str	r3, [sp, #80]	@ 0x50
 80203f4:	9b01      	ldr	r3, [sp, #4]
 80203f6:	9a05      	ldr	r2, [sp, #20]
 80203f8:	3b01      	subs	r3, #1
 80203fa:	9301      	str	r3, [sp, #4]
 80203fc:	eeb0 3a67 	vmov.f32	s6, s15
 8020400:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020402:	eef0 2a47 	vmov.f32	s5, s14
 8020406:	bf08      	it	eq
 8020408:	4613      	moveq	r3, r2
 802040a:	e788      	b.n	802031e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802040c:	1406      	asrs	r6, r0, #16
 802040e:	d42c      	bmi.n	802046a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020410:	f8db 2008 	ldr.w	r2, [fp, #8]
 8020414:	42b2      	cmp	r2, r6
 8020416:	dd28      	ble.n	802046a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020418:	140f      	asrs	r7, r1, #16
 802041a:	d426      	bmi.n	802046a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802041c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8020420:	42ba      	cmp	r2, r7
 8020422:	dd22      	ble.n	802046a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020424:	9a02      	ldr	r2, [sp, #8]
 8020426:	fb07 6602 	mla	r6, r7, r2, r6
 802042a:	9f03      	ldr	r7, [sp, #12]
 802042c:	0872      	lsrs	r2, r6, #1
 802042e:	5cba      	ldrb	r2, [r7, r2]
 8020430:	07f6      	lsls	r6, r6, #31
 8020432:	bf54      	ite	pl
 8020434:	f002 020f 	andpl.w	r2, r2, #15
 8020438:	1112      	asrmi	r2, r2, #4
 802043a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802043e:	b2d2      	uxtb	r2, r2
 8020440:	2aff      	cmp	r2, #255	@ 0xff
 8020442:	d118      	bne.n	8020476 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8020444:	f06f 0601 	mvn.w	r6, #1
 8020448:	f8d8 2000 	ldr.w	r2, [r8]
 802044c:	fb06 f705 	mul.w	r7, r6, r5
 8020450:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 8020454:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8020458:	0956      	lsrs	r6, r2, #5
 802045a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 802045e:	ea4c 0606 	orr.w	r6, ip, r6
 8020462:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020466:	4316      	orrs	r6, r2
 8020468:	53e6      	strh	r6, [r4, r7]
 802046a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802046c:	3d01      	subs	r5, #1
 802046e:	4410      	add	r0, r2
 8020470:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020472:	4411      	add	r1, r2
 8020474:	e787      	b.n	8020386 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020476:	2a00      	cmp	r2, #0
 8020478:	d0f7      	beq.n	802046a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802047a:	f06f 0601 	mvn.w	r6, #1
 802047e:	fa1f f982 	uxth.w	r9, r2
 8020482:	43d2      	mvns	r2, r2
 8020484:	436e      	muls	r6, r5
 8020486:	f8d8 c000 	ldr.w	ip, [r8]
 802048a:	f834 e006 	ldrh.w	lr, [r4, r6]
 802048e:	9604      	str	r6, [sp, #16]
 8020490:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8020494:	fb16 f609 	smulbb	r6, r6, r9
 8020498:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 802049c:	fa5f fc8c 	uxtb.w	ip, ip
 80204a0:	ea4f 272e 	mov.w	r7, lr, asr #8
 80204a4:	fb1c fc09 	smulbb	ip, ip, r9
 80204a8:	b2d2      	uxtb	r2, r2
 80204aa:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80204ae:	fb07 6702 	mla	r7, r7, r2, r6
 80204b2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80204b6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80204ba:	fb1a fa09 	smulbb	sl, sl, r9
 80204be:	fa5f fe8e 	uxtb.w	lr, lr
 80204c2:	fb0e cc02 	mla	ip, lr, r2, ip
 80204c6:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80204ca:	fb06 a602 	mla	r6, r6, r2, sl
 80204ce:	b2bf      	uxth	r7, r7
 80204d0:	fa1f fc8c 	uxth.w	ip, ip
 80204d4:	1c7a      	adds	r2, r7, #1
 80204d6:	f10c 0a01 	add.w	sl, ip, #1
 80204da:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80204de:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80204e2:	b2b6      	uxth	r6, r6
 80204e4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80204e8:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 80204ec:	ea4a 0707 	orr.w	r7, sl, r7
 80204f0:	f106 0a01 	add.w	sl, r6, #1
 80204f4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80204f8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80204fc:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8020500:	9a04      	ldr	r2, [sp, #16]
 8020502:	ea47 070a 	orr.w	r7, r7, sl
 8020506:	52a7      	strh	r7, [r4, r2]
 8020508:	e7af      	b.n	802046a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802050a:	f04f 0e00 	mov.w	lr, #0
 802050e:	eba3 020e 	sub.w	r2, r3, lr
 8020512:	2a00      	cmp	r2, #0
 8020514:	f77f af3a 	ble.w	802038c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020518:	9e02      	ldr	r6, [sp, #8]
 802051a:	1402      	asrs	r2, r0, #16
 802051c:	140d      	asrs	r5, r1, #16
 802051e:	fb06 2505 	mla	r5, r6, r5, r2
 8020522:	9e03      	ldr	r6, [sp, #12]
 8020524:	086a      	lsrs	r2, r5, #1
 8020526:	5cb2      	ldrb	r2, [r6, r2]
 8020528:	07ed      	lsls	r5, r5, #31
 802052a:	bf54      	ite	pl
 802052c:	f002 020f 	andpl.w	r2, r2, #15
 8020530:	1112      	asrmi	r2, r2, #4
 8020532:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020536:	b2d2      	uxtb	r2, r2
 8020538:	2aff      	cmp	r2, #255	@ 0xff
 802053a:	d115      	bne.n	8020568 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 802053c:	f8d8 5000 	ldr.w	r5, [r8]
 8020540:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 8020544:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8020548:	096a      	lsrs	r2, r5, #5
 802054a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802054e:	4332      	orrs	r2, r6
 8020550:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020554:	432a      	orrs	r2, r5
 8020556:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 802055a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802055c:	f10e 0e01 	add.w	lr, lr, #1
 8020560:	4410      	add	r0, r2
 8020562:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020564:	4411      	add	r1, r2
 8020566:	e7d2      	b.n	802050e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8020568:	2a00      	cmp	r2, #0
 802056a:	d0f6      	beq.n	802055a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 802056c:	fa1f f982 	uxth.w	r9, r2
 8020570:	43d2      	mvns	r2, r2
 8020572:	f8d8 7000 	ldr.w	r7, [r8]
 8020576:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 802057a:	f3c7 4507 	ubfx	r5, r7, #16, #8
 802057e:	fb15 f509 	smulbb	r5, r5, r9
 8020582:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8020586:	b2ff      	uxtb	r7, r7
 8020588:	ea4f 262c 	mov.w	r6, ip, asr #8
 802058c:	fb17 f709 	smulbb	r7, r7, r9
 8020590:	b2d2      	uxtb	r2, r2
 8020592:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8020596:	fb06 5602 	mla	r6, r6, r2, r5
 802059a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802059e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80205a2:	fb1a fa09 	smulbb	sl, sl, r9
 80205a6:	fa5f fc8c 	uxtb.w	ip, ip
 80205aa:	fb0c 7702 	mla	r7, ip, r2, r7
 80205ae:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80205b2:	fb05 a502 	mla	r5, r5, r2, sl
 80205b6:	b2b6      	uxth	r6, r6
 80205b8:	b2bf      	uxth	r7, r7
 80205ba:	1c72      	adds	r2, r6, #1
 80205bc:	f107 0a01 	add.w	sl, r7, #1
 80205c0:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80205c4:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80205c8:	b2ad      	uxth	r5, r5
 80205ca:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80205ce:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 80205d2:	ea4a 0606 	orr.w	r6, sl, r6
 80205d6:	f105 0a01 	add.w	sl, r5, #1
 80205da:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80205de:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80205e2:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80205e6:	ea46 060a 	orr.w	r6, r6, sl
 80205ea:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 80205ee:	e7b4      	b.n	802055a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80205f0:	b007      	add	sp, #28
 80205f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205f6:	bf00      	nop
 80205f8:	2005bd2c 	.word	0x2005bd2c

080205fc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID1Ev>:
 80205fc:	4770      	bx	lr

080205fe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 80205fe:	4770      	bx	lr

08020600 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 8020600:	4770      	bx	lr

08020602 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 8020602:	4770      	bx	lr

08020604 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8020604:	4770      	bx	lr

08020606 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8020606:	4770      	bx	lr

08020608 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8020608:	4770      	bx	lr

0802060a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 802060a:	4770      	bx	lr

0802060c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802060c:	4770      	bx	lr

0802060e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802060e:	4770      	bx	lr

08020610 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020610:	4770      	bx	lr

08020612 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020612:	4770      	bx	lr

08020614 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020614:	4770      	bx	lr

08020616 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020616:	4770      	bx	lr

08020618 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020618:	4770      	bx	lr

0802061a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802061a:	4770      	bx	lr

0802061c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 802061c:	4770      	bx	lr

0802061e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 802061e:	4770      	bx	lr

08020620 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020620:	4770      	bx	lr

08020622 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020622:	4770      	bx	lr

08020624 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020624:	4770      	bx	lr

08020626 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020626:	4770      	bx	lr

08020628 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020628:	4770      	bx	lr

0802062a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 802062a:	4770      	bx	lr

0802062c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 802062c:	4770      	bx	lr

0802062e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802062e:	4770      	bx	lr

08020630 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020630:	4770      	bx	lr

08020632 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8020632:	4770      	bx	lr

08020634 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020634:	4770      	bx	lr

08020636 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020636:	4770      	bx	lr

08020638 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020638:	4770      	bx	lr

0802063a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 802063a:	4770      	bx	lr

0802063c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 802063c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020640:	b088      	sub	sp, #32
 8020642:	ac08      	add	r4, sp, #32
 8020644:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8020648:	4606      	mov	r6, r0
 802064a:	4620      	mov	r0, r4
 802064c:	4688      	mov	r8, r1
 802064e:	4691      	mov	r9, r2
 8020650:	f7fd fc32 	bl	801deb8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020654:	6833      	ldr	r3, [r6, #0]
 8020656:	4605      	mov	r5, r0
 8020658:	4620      	mov	r0, r4
 802065a:	699f      	ldr	r7, [r3, #24]
 802065c:	f7fd fb3a 	bl	801dcd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020660:	4682      	mov	sl, r0
 8020662:	4620      	mov	r0, r4
 8020664:	f7fd fb6a 	bl	801dd3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020668:	9500      	str	r5, [sp, #0]
 802066a:	e9cd a001 	strd	sl, r0, [sp, #4]
 802066e:	464b      	mov	r3, r9
 8020670:	a806      	add	r0, sp, #24
 8020672:	4642      	mov	r2, r8
 8020674:	4631      	mov	r1, r6
 8020676:	47b8      	blx	r7
 8020678:	4628      	mov	r0, r5
 802067a:	b008      	add	sp, #32
 802067c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08020680 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8020680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020684:	2300      	movs	r3, #0
 8020686:	9300      	str	r3, [sp, #0]
 8020688:	4b3d      	ldr	r3, [pc, #244]	@ (8020780 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 802068a:	781b      	ldrb	r3, [r3, #0]
 802068c:	2b00      	cmp	r3, #0
 802068e:	d137      	bne.n	8020700 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8020690:	4a3c      	ldr	r2, [pc, #240]	@ (8020784 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8020692:	f9b2 2000 	ldrsh.w	r2, [r2]
 8020696:	f8ad 2004 	strh.w	r2, [sp, #4]
 802069a:	2b00      	cmp	r3, #0
 802069c:	d132      	bne.n	8020704 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 802069e:	4b3a      	ldr	r3, [pc, #232]	@ (8020788 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80206a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80206a4:	6808      	ldr	r0, [r1, #0]
 80206a6:	6849      	ldr	r1, [r1, #4]
 80206a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80206ac:	ac02      	add	r4, sp, #8
 80206ae:	ab02      	add	r3, sp, #8
 80206b0:	c303      	stmia	r3!, {r0, r1}
 80206b2:	4669      	mov	r1, sp
 80206b4:	4620      	mov	r0, r4
 80206b6:	f7f9 ff27 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80206ba:	4668      	mov	r0, sp
 80206bc:	f7f9 fefc 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80206c0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80206c4:	f8bd 2000 	ldrh.w	r2, [sp]
 80206c8:	4d30      	ldr	r5, [pc, #192]	@ (802078c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 80206ca:	4413      	add	r3, r2
 80206cc:	f8ad 3008 	strh.w	r3, [sp, #8]
 80206d0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80206d4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80206d8:	6828      	ldr	r0, [r5, #0]
 80206da:	4413      	add	r3, r2
 80206dc:	f8ad 300a 	strh.w	r3, [sp, #10]
 80206e0:	6803      	ldr	r3, [r0, #0]
 80206e2:	462f      	mov	r7, r5
 80206e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80206e6:	4798      	blx	r3
 80206e8:	f010 0f01 	tst.w	r0, #1
 80206ec:	d00c      	beq.n	8020708 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 80206ee:	e894 0006 	ldmia.w	r4, {r1, r2}
 80206f2:	6828      	ldr	r0, [r5, #0]
 80206f4:	6803      	ldr	r3, [r0, #0]
 80206f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80206f8:	4798      	blx	r3
 80206fa:	b004      	add	sp, #16
 80206fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020700:	4a21      	ldr	r2, [pc, #132]	@ (8020788 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8020702:	e7c6      	b.n	8020692 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8020704:	4b1f      	ldr	r3, [pc, #124]	@ (8020784 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8020706:	e7cb      	b.n	80206a0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8020708:	6838      	ldr	r0, [r7, #0]
 802070a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 802070e:	6803      	ldr	r3, [r0, #0]
 8020710:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8020714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020716:	4798      	blx	r3
 8020718:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 802071c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8020720:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8020724:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8020728:	fb16 3602 	smlabb	r6, r6, r2, r3
 802072c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8020730:	6838      	ldr	r0, [r7, #0]
 8020732:	6803      	ldr	r3, [r0, #0]
 8020734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020736:	4798      	blx	r3
 8020738:	4a12      	ldr	r2, [pc, #72]	@ (8020784 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 802073a:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 802073e:	4691      	mov	r9, r2
 8020740:	8813      	ldrh	r3, [r2, #0]
 8020742:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8020746:	435d      	muls	r5, r3
 8020748:	fb03 1404 	mla	r4, r3, r4, r1
 802074c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020750:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020754:	6838      	ldr	r0, [r7, #0]
 8020756:	42ac      	cmp	r4, r5
 8020758:	6803      	ldr	r3, [r0, #0]
 802075a:	d20e      	bcs.n	802077a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 802075c:	f8d3 a038 	ldr.w	sl, [r3, #56]	@ 0x38
 8020760:	4632      	mov	r2, r6
 8020762:	4643      	mov	r3, r8
 8020764:	4621      	mov	r1, r4
 8020766:	47d0      	blx	sl
 8020768:	f8b9 3000 	ldrh.w	r3, [r9]
 802076c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020770:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8020774:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020778:	e7ec      	b.n	8020754 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 802077a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802077c:	4798      	blx	r3
 802077e:	e7bc      	b.n	80206fa <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8020780:	2005bd14 	.word	0x2005bd14
 8020784:	2005bd16 	.word	0x2005bd16
 8020788:	2005bd18 	.word	0x2005bd18
 802078c:	2005bd1c 	.word	0x2005bd1c

08020790 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020794:	b08b      	sub	sp, #44	@ 0x2c
 8020796:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 802079a:	460f      	mov	r7, r1
 802079c:	4616      	mov	r6, r2
 802079e:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 80207a2:	f1bb 0f00 	cmp.w	fp, #0
 80207a6:	d04a      	beq.n	802083e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 80207a8:	6810      	ldr	r0, [r2, #0]
 80207aa:	6851      	ldr	r1, [r2, #4]
 80207ac:	ad06      	add	r5, sp, #24
 80207ae:	c503      	stmia	r5!, {r0, r1}
 80207b0:	6818      	ldr	r0, [r3, #0]
 80207b2:	6859      	ldr	r1, [r3, #4]
 80207b4:	ad08      	add	r5, sp, #32
 80207b6:	c503      	stmia	r5!, {r0, r1}
 80207b8:	a806      	add	r0, sp, #24
 80207ba:	f7f9 fe7d 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80207be:	4631      	mov	r1, r6
 80207c0:	a808      	add	r0, sp, #32
 80207c2:	f7f9 fea1 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80207c6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80207ca:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80207ce:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80207d2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 80207d6:	fb16 2103 	smlabb	r1, r6, r3, r2
 80207da:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80207de:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80207e2:	4f60      	ldr	r7, [pc, #384]	@ (8020964 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80207e4:	440a      	add	r2, r1
 80207e6:	f8ad 2020 	strh.w	r2, [sp, #32]
 80207ea:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80207ee:	6838      	ldr	r0, [r7, #0]
 80207f0:	4413      	add	r3, r2
 80207f2:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80207f6:	6803      	ldr	r3, [r0, #0]
 80207f8:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 80207fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80207fe:	4798      	blx	r3
 8020800:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8020804:	46b9      	mov	r9, r7
 8020806:	d11d      	bne.n	8020844 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8020808:	b9fc      	cbnz	r4, 802084a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 802080a:	f010 0f01 	tst.w	r0, #1
 802080e:	d01c      	beq.n	802084a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8020810:	2700      	movs	r7, #0
 8020812:	f8d9 0000 	ldr.w	r0, [r9]
 8020816:	b2ad      	uxth	r5, r5
 8020818:	6801      	ldr	r1, [r0, #0]
 802081a:	e9cd 4704 	strd	r4, r7, [sp, #16]
 802081e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8020822:	f8cd b00c 	str.w	fp, [sp, #12]
 8020826:	9402      	str	r4, [sp, #8]
 8020828:	fa1f f488 	uxth.w	r4, r8
 802082c:	9501      	str	r5, [sp, #4]
 802082e:	9400      	str	r4, [sp, #0]
 8020830:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
 8020832:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8020836:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802083a:	4631      	mov	r1, r6
 802083c:	47a0      	blx	r4
 802083e:	b00b      	add	sp, #44	@ 0x2c
 8020840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020844:	f010 0f04 	tst.w	r0, #4
 8020848:	e7e1      	b.n	802080e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 802084a:	f8d9 0000 	ldr.w	r0, [r9]
 802084e:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8020852:	6803      	ldr	r3, [r0, #0]
 8020854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020856:	4798      	blx	r3
 8020858:	4b43      	ldr	r3, [pc, #268]	@ (8020968 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 802085a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 802085e:	881a      	ldrh	r2, [r3, #0]
 8020860:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020864:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8020868:	fb02 1404 	mla	r4, r2, r4, r1
 802086c:	469a      	mov	sl, r3
 802086e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020872:	fb05 f502 	mul.w	r5, r5, r2
 8020876:	d059      	beq.n	802092c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8020878:	469e      	mov	lr, r3
 802087a:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 802087e:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020882:	fa1f f28b 	uxth.w	r2, fp
 8020886:	fa1f f989 	uxth.w	r9, r9
 802088a:	42ac      	cmp	r4, r5
 802088c:	d264      	bcs.n	8020958 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 802088e:	eb04 0a07 	add.w	sl, r4, r7
 8020892:	4554      	cmp	r4, sl
 8020894:	d23d      	bcs.n	8020912 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8020896:	8821      	ldrh	r1, [r4, #0]
 8020898:	f836 3b02 	ldrh.w	r3, [r6], #2
 802089c:	1208      	asrs	r0, r1, #8
 802089e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80208a2:	fb10 f009 	smulbb	r0, r0, r9
 80208a6:	ea4f 0be1 	mov.w	fp, r1, asr #3
 80208aa:	00c9      	lsls	r1, r1, #3
 80208ac:	b2c9      	uxtb	r1, r1
 80208ae:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80208b2:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 80208b6:	fb11 f109 	smulbb	r1, r1, r9
 80208ba:	fb1b fb09 	smulbb	fp, fp, r9
 80208be:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80208c2:	fb0c 0c02 	mla	ip, ip, r2, r0
 80208c6:	10d8      	asrs	r0, r3, #3
 80208c8:	00db      	lsls	r3, r3, #3
 80208ca:	b2db      	uxtb	r3, r3
 80208cc:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80208d0:	fb03 1302 	mla	r3, r3, r2, r1
 80208d4:	fb00 b002 	mla	r0, r0, r2, fp
 80208d8:	fa1f fc8c 	uxth.w	ip, ip
 80208dc:	f10c 0b01 	add.w	fp, ip, #1
 80208e0:	b29b      	uxth	r3, r3
 80208e2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80208e6:	b280      	uxth	r0, r0
 80208e8:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 80208ec:	f103 0c01 	add.w	ip, r3, #1
 80208f0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80208f4:	1c43      	adds	r3, r0, #1
 80208f6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80208fa:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80208fe:	0940      	lsrs	r0, r0, #5
 8020900:	ea4c 0c0b 	orr.w	ip, ip, fp
 8020904:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8020908:	ea4c 0c00 	orr.w	ip, ip, r0
 802090c:	f824 cb02 	strh.w	ip, [r4], #2
 8020910:	e7bf      	b.n	8020892 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8020912:	f8be 3000 	ldrh.w	r3, [lr]
 8020916:	eba3 0308 	sub.w	r3, r3, r8
 802091a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802091e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020922:	eba3 0308 	sub.w	r3, r3, r8
 8020926:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802092a:	e7ae      	b.n	802088a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 802092c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020930:	f8d9 0000 	ldr.w	r0, [r9]
 8020934:	42ac      	cmp	r4, r5
 8020936:	6803      	ldr	r3, [r0, #0]
 8020938:	d20e      	bcs.n	8020958 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 802093a:	f8d3 8038 	ldr.w	r8, [r3, #56]	@ 0x38
 802093e:	4632      	mov	r2, r6
 8020940:	463b      	mov	r3, r7
 8020942:	4621      	mov	r1, r4
 8020944:	47c0      	blx	r8
 8020946:	f8ba 3000 	ldrh.w	r3, [sl]
 802094a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802094e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020952:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020956:	e7eb      	b.n	8020930 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8020958:	4b02      	ldr	r3, [pc, #8]	@ (8020964 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 802095a:	6818      	ldr	r0, [r3, #0]
 802095c:	6803      	ldr	r3, [r0, #0]
 802095e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020960:	4798      	blx	r3
 8020962:	e76c      	b.n	802083e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8020964:	2005bd1c 	.word	0x2005bd1c
 8020968:	2005bd16 	.word	0x2005bd16

0802096c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 802096c:	b510      	push	{r4, lr}
 802096e:	4604      	mov	r4, r0
 8020970:	2104      	movs	r1, #4
 8020972:	f00c fa00 	bl	802cd76 <_ZdlPvj>
 8020976:	4620      	mov	r0, r4
 8020978:	bd10      	pop	{r4, pc}

0802097a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 802097a:	b510      	push	{r4, lr}
 802097c:	4604      	mov	r4, r0
 802097e:	2104      	movs	r1, #4
 8020980:	f00c f9f9 	bl	802cd76 <_ZdlPvj>
 8020984:	4620      	mov	r0, r4
 8020986:	bd10      	pop	{r4, pc}

08020988 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 8020988:	b510      	push	{r4, lr}
 802098a:	4604      	mov	r4, r0
 802098c:	f640 0144 	movw	r1, #2116	@ 0x844
 8020990:	f00c f9f1 	bl	802cd76 <_ZdlPvj>
 8020994:	4620      	mov	r0, r4
 8020996:	bd10      	pop	{r4, pc}

08020998 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID0Ev>:
 8020998:	b510      	push	{r4, lr}
 802099a:	4604      	mov	r4, r0
 802099c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80209a0:	f00c f9e9 	bl	802cd76 <_ZdlPvj>
 80209a4:	4620      	mov	r0, r4
 80209a6:	bd10      	pop	{r4, pc}

080209a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80209a8:	b510      	push	{r4, lr}
 80209aa:	4604      	mov	r4, r0
 80209ac:	2104      	movs	r1, #4
 80209ae:	f00c f9e2 	bl	802cd76 <_ZdlPvj>
 80209b2:	4620      	mov	r0, r4
 80209b4:	bd10      	pop	{r4, pc}

080209b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80209b6:	b510      	push	{r4, lr}
 80209b8:	4604      	mov	r4, r0
 80209ba:	2104      	movs	r1, #4
 80209bc:	f00c f9db 	bl	802cd76 <_ZdlPvj>
 80209c0:	4620      	mov	r0, r4
 80209c2:	bd10      	pop	{r4, pc}

080209c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80209c4:	b510      	push	{r4, lr}
 80209c6:	4604      	mov	r4, r0
 80209c8:	2104      	movs	r1, #4
 80209ca:	f00c f9d4 	bl	802cd76 <_ZdlPvj>
 80209ce:	4620      	mov	r0, r4
 80209d0:	bd10      	pop	{r4, pc}

080209d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80209d2:	b510      	push	{r4, lr}
 80209d4:	4604      	mov	r4, r0
 80209d6:	2104      	movs	r1, #4
 80209d8:	f00c f9cd 	bl	802cd76 <_ZdlPvj>
 80209dc:	4620      	mov	r0, r4
 80209de:	bd10      	pop	{r4, pc}

080209e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80209e0:	b510      	push	{r4, lr}
 80209e2:	4604      	mov	r4, r0
 80209e4:	2104      	movs	r1, #4
 80209e6:	f00c f9c6 	bl	802cd76 <_ZdlPvj>
 80209ea:	4620      	mov	r0, r4
 80209ec:	bd10      	pop	{r4, pc}

080209ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80209ee:	b510      	push	{r4, lr}
 80209f0:	4604      	mov	r4, r0
 80209f2:	2104      	movs	r1, #4
 80209f4:	f00c f9bf 	bl	802cd76 <_ZdlPvj>
 80209f8:	4620      	mov	r0, r4
 80209fa:	bd10      	pop	{r4, pc}

080209fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80209fc:	b510      	push	{r4, lr}
 80209fe:	4604      	mov	r4, r0
 8020a00:	2104      	movs	r1, #4
 8020a02:	f00c f9b8 	bl	802cd76 <_ZdlPvj>
 8020a06:	4620      	mov	r0, r4
 8020a08:	bd10      	pop	{r4, pc}

08020a0a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020a0a:	b510      	push	{r4, lr}
 8020a0c:	4604      	mov	r4, r0
 8020a0e:	2104      	movs	r1, #4
 8020a10:	f00c f9b1 	bl	802cd76 <_ZdlPvj>
 8020a14:	4620      	mov	r0, r4
 8020a16:	bd10      	pop	{r4, pc}

08020a18 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020a18:	b510      	push	{r4, lr}
 8020a1a:	4604      	mov	r4, r0
 8020a1c:	2104      	movs	r1, #4
 8020a1e:	f00c f9aa 	bl	802cd76 <_ZdlPvj>
 8020a22:	4620      	mov	r0, r4
 8020a24:	bd10      	pop	{r4, pc}

08020a26 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020a26:	b510      	push	{r4, lr}
 8020a28:	4604      	mov	r4, r0
 8020a2a:	2104      	movs	r1, #4
 8020a2c:	f00c f9a3 	bl	802cd76 <_ZdlPvj>
 8020a30:	4620      	mov	r0, r4
 8020a32:	bd10      	pop	{r4, pc}

08020a34 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020a34:	b510      	push	{r4, lr}
 8020a36:	4604      	mov	r4, r0
 8020a38:	2104      	movs	r1, #4
 8020a3a:	f00c f99c 	bl	802cd76 <_ZdlPvj>
 8020a3e:	4620      	mov	r0, r4
 8020a40:	bd10      	pop	{r4, pc}

08020a42 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020a42:	b510      	push	{r4, lr}
 8020a44:	4604      	mov	r4, r0
 8020a46:	2104      	movs	r1, #4
 8020a48:	f00c f995 	bl	802cd76 <_ZdlPvj>
 8020a4c:	4620      	mov	r0, r4
 8020a4e:	bd10      	pop	{r4, pc}

08020a50 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020a50:	b510      	push	{r4, lr}
 8020a52:	4604      	mov	r4, r0
 8020a54:	2104      	movs	r1, #4
 8020a56:	f00c f98e 	bl	802cd76 <_ZdlPvj>
 8020a5a:	4620      	mov	r0, r4
 8020a5c:	bd10      	pop	{r4, pc}

08020a5e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020a5e:	b510      	push	{r4, lr}
 8020a60:	4604      	mov	r4, r0
 8020a62:	2104      	movs	r1, #4
 8020a64:	f00c f987 	bl	802cd76 <_ZdlPvj>
 8020a68:	4620      	mov	r0, r4
 8020a6a:	bd10      	pop	{r4, pc}

08020a6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020a6c:	b510      	push	{r4, lr}
 8020a6e:	4604      	mov	r4, r0
 8020a70:	2104      	movs	r1, #4
 8020a72:	f00c f980 	bl	802cd76 <_ZdlPvj>
 8020a76:	4620      	mov	r0, r4
 8020a78:	bd10      	pop	{r4, pc}

08020a7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020a7a:	b510      	push	{r4, lr}
 8020a7c:	4604      	mov	r4, r0
 8020a7e:	2104      	movs	r1, #4
 8020a80:	f00c f979 	bl	802cd76 <_ZdlPvj>
 8020a84:	4620      	mov	r0, r4
 8020a86:	bd10      	pop	{r4, pc}

08020a88 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020a88:	b510      	push	{r4, lr}
 8020a8a:	4604      	mov	r4, r0
 8020a8c:	2104      	movs	r1, #4
 8020a8e:	f00c f972 	bl	802cd76 <_ZdlPvj>
 8020a92:	4620      	mov	r0, r4
 8020a94:	bd10      	pop	{r4, pc}

08020a96 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020a96:	b510      	push	{r4, lr}
 8020a98:	4604      	mov	r4, r0
 8020a9a:	2104      	movs	r1, #4
 8020a9c:	f00c f96b 	bl	802cd76 <_ZdlPvj>
 8020aa0:	4620      	mov	r0, r4
 8020aa2:	bd10      	pop	{r4, pc}

08020aa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020aa4:	b510      	push	{r4, lr}
 8020aa6:	4604      	mov	r4, r0
 8020aa8:	2104      	movs	r1, #4
 8020aaa:	f00c f964 	bl	802cd76 <_ZdlPvj>
 8020aae:	4620      	mov	r0, r4
 8020ab0:	bd10      	pop	{r4, pc}

08020ab2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020ab2:	b510      	push	{r4, lr}
 8020ab4:	4604      	mov	r4, r0
 8020ab6:	2104      	movs	r1, #4
 8020ab8:	f00c f95d 	bl	802cd76 <_ZdlPvj>
 8020abc:	4620      	mov	r0, r4
 8020abe:	bd10      	pop	{r4, pc}

08020ac0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020ac0:	b510      	push	{r4, lr}
 8020ac2:	4604      	mov	r4, r0
 8020ac4:	2104      	movs	r1, #4
 8020ac6:	f00c f956 	bl	802cd76 <_ZdlPvj>
 8020aca:	4620      	mov	r0, r4
 8020acc:	bd10      	pop	{r4, pc}

08020ace <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020ace:	b510      	push	{r4, lr}
 8020ad0:	4604      	mov	r4, r0
 8020ad2:	2104      	movs	r1, #4
 8020ad4:	f00c f94f 	bl	802cd76 <_ZdlPvj>
 8020ad8:	4620      	mov	r0, r4
 8020ada:	bd10      	pop	{r4, pc}

08020adc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020adc:	b510      	push	{r4, lr}
 8020ade:	4604      	mov	r4, r0
 8020ae0:	2104      	movs	r1, #4
 8020ae2:	f00c f948 	bl	802cd76 <_ZdlPvj>
 8020ae6:	4620      	mov	r0, r4
 8020ae8:	bd10      	pop	{r4, pc}

08020aea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020aea:	b510      	push	{r4, lr}
 8020aec:	4604      	mov	r4, r0
 8020aee:	2104      	movs	r1, #4
 8020af0:	f00c f941 	bl	802cd76 <_ZdlPvj>
 8020af4:	4620      	mov	r0, r4
 8020af6:	bd10      	pop	{r4, pc}

08020af8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8020af8:	b510      	push	{r4, lr}
 8020afa:	4604      	mov	r4, r0
 8020afc:	2104      	movs	r1, #4
 8020afe:	f00c f93a 	bl	802cd76 <_ZdlPvj>
 8020b02:	4620      	mov	r0, r4
 8020b04:	bd10      	pop	{r4, pc}

08020b06 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8020b06:	b510      	push	{r4, lr}
 8020b08:	4604      	mov	r4, r0
 8020b0a:	2104      	movs	r1, #4
 8020b0c:	f00c f933 	bl	802cd76 <_ZdlPvj>
 8020b10:	4620      	mov	r0, r4
 8020b12:	bd10      	pop	{r4, pc}

08020b14 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8020b14:	b510      	push	{r4, lr}
 8020b16:	4604      	mov	r4, r0
 8020b18:	2104      	movs	r1, #4
 8020b1a:	f00c f92c 	bl	802cd76 <_ZdlPvj>
 8020b1e:	4620      	mov	r0, r4
 8020b20:	bd10      	pop	{r4, pc}

08020b22 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8020b22:	b510      	push	{r4, lr}
 8020b24:	4604      	mov	r4, r0
 8020b26:	2104      	movs	r1, #4
 8020b28:	f00c f925 	bl	802cd76 <_ZdlPvj>
 8020b2c:	4620      	mov	r0, r4
 8020b2e:	bd10      	pop	{r4, pc}

08020b30 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 8020b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b34:	b08f      	sub	sp, #60	@ 0x3c
 8020b36:	4616      	mov	r6, r2
 8020b38:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 8020b3c:	4682      	mov	sl, r0
 8020b3e:	460d      	mov	r5, r1
 8020b40:	9205      	str	r2, [sp, #20]
 8020b42:	2a00      	cmp	r2, #0
 8020b44:	f000 82b7 	beq.w	80210b6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x586>
 8020b48:	6830      	ldr	r0, [r6, #0]
 8020b4a:	6871      	ldr	r1, [r6, #4]
 8020b4c:	ac0a      	add	r4, sp, #40	@ 0x28
 8020b4e:	c403      	stmia	r4!, {r0, r1}
 8020b50:	6818      	ldr	r0, [r3, #0]
 8020b52:	6859      	ldr	r1, [r3, #4]
 8020b54:	ac0c      	add	r4, sp, #48	@ 0x30
 8020b56:	c403      	stmia	r4!, {r0, r1}
 8020b58:	a80a      	add	r0, sp, #40	@ 0x28
 8020b5a:	f7f9 fcad 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b5e:	4631      	mov	r1, r6
 8020b60:	a80c      	add	r0, sp, #48	@ 0x30
 8020b62:	f7f9 fcd1 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020b66:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8020b6a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8020b6e:	bfdd      	ittte	le
 8020b70:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8020b74:	b293      	uxthle	r3, r2
 8020b76:	fb91 f3f3 	sdivle	r3, r1, r3
 8020b7a:	2301      	movgt	r3, #1
 8020b7c:	9300      	str	r3, [sp, #0]
 8020b7e:	f105 0308 	add.w	r3, r5, #8
 8020b82:	9900      	ldr	r1, [sp, #0]
 8020b84:	9306      	str	r3, [sp, #24]
 8020b86:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8020b8a:	440b      	add	r3, r1
 8020b8c:	3b01      	subs	r3, #1
 8020b8e:	fb93 f3f1 	sdiv	r3, r3, r1
 8020b92:	9906      	ldr	r1, [sp, #24]
 8020b94:	3b01      	subs	r3, #1
 8020b96:	b29b      	uxth	r3, r3
 8020b98:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8020b9c:	9307      	str	r3, [sp, #28]
 8020b9e:	9900      	ldr	r1, [sp, #0]
 8020ba0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8020ba4:	fb93 f0f1 	sdiv	r0, r3, r1
 8020ba8:	b284      	uxth	r4, r0
 8020baa:	9402      	str	r4, [sp, #8]
 8020bac:	9d02      	ldr	r5, [sp, #8]
 8020bae:	9c00      	ldr	r4, [sp, #0]
 8020bb0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8020bb4:	fb05 3414 	mls	r4, r5, r4, r3
 8020bb8:	fb14 f402 	smulbb	r4, r4, r2
 8020bbc:	440c      	add	r4, r1
 8020bbe:	b2a4      	uxth	r4, r4
 8020bc0:	2d00      	cmp	r5, #0
 8020bc2:	d06c      	beq.n	8020c9e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16e>
 8020bc4:	9806      	ldr	r0, [sp, #24]
 8020bc6:	1e6a      	subs	r2, r5, #1
 8020bc8:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 8020bcc:	9a07      	ldr	r2, [sp, #28]
 8020bce:	ba36      	rev	r6, r6
 8020bd0:	4416      	add	r6, r2
 8020bd2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8020bd6:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 8020bda:	4411      	add	r1, r2
 8020bdc:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8020be0:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8020be4:	4413      	add	r3, r2
 8020be6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8020bea:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8020bee:	f8df 9320 	ldr.w	r9, [pc, #800]	@ 8020f10 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>
 8020bf2:	9301      	str	r3, [sp, #4]
 8020bf4:	4bc4      	ldr	r3, [pc, #784]	@ (8020f08 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3d8>)
 8020bf6:	6818      	ldr	r0, [r3, #0]
 8020bf8:	6803      	ldr	r3, [r0, #0]
 8020bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020bfc:	4798      	blx	r3
 8020bfe:	4bc3      	ldr	r3, [pc, #780]	@ (8020f0c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3dc>)
 8020c00:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8020c04:	881b      	ldrh	r3, [r3, #0]
 8020c06:	f9bd 8032 	ldrsh.w	r8, [sp, #50]	@ 0x32
 8020c0a:	fb03 2808 	mla	r8, r3, r8, r2
 8020c0e:	436b      	muls	r3, r5
 8020c10:	eb00 0848 	add.w	r8, r0, r8, lsl #1
 8020c14:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8020c18:	9309      	str	r3, [sp, #36]	@ 0x24
 8020c1a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8020c1e:	2500      	movs	r5, #0
 8020c20:	fb94 f3f3 	sdiv	r3, r4, r3
 8020c24:	9304      	str	r3, [sp, #16]
 8020c26:	f10a 0304 	add.w	r3, sl, #4
 8020c2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8020c2e:	4629      	mov	r1, r5
 8020c30:	4618      	mov	r0, r3
 8020c32:	9308      	str	r3, [sp, #32]
 8020c34:	f00d faa0 	bl	802e178 <memset>
 8020c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020c3a:	4543      	cmp	r3, r8
 8020c3c:	f240 8236 	bls.w	80210ac <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x57c>
 8020c40:	2203      	movs	r2, #3
 8020c42:	2107      	movs	r1, #7
 8020c44:	200b      	movs	r0, #11
 8020c46:	2c00      	cmp	r4, #0
 8020c48:	f000 8131 	beq.w	8020eae <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x37e>
 8020c4c:	7833      	ldrb	r3, [r6, #0]
 8020c4e:	b2db      	uxtb	r3, r3
 8020c50:	2bfe      	cmp	r3, #254	@ 0xfe
 8020c52:	d126      	bne.n	8020ca2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x172>
 8020c54:	f896 e001 	ldrb.w	lr, [r6, #1]
 8020c58:	f896 c002 	ldrb.w	ip, [r6, #2]
 8020c5c:	fa5f fe8e 	uxtb.w	lr, lr
 8020c60:	f896 b003 	ldrb.w	fp, [r6, #3]
 8020c64:	fa5f fc8c 	uxtb.w	ip, ip
 8020c68:	f36e 0507 	bfi	r5, lr, #0, #8
 8020c6c:	f36c 250f 	bfi	r5, ip, #8, #8
 8020c70:	fa5f fb8b 	uxtb.w	fp, fp
 8020c74:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8020c78:	fb12 cc0b 	smlabb	ip, r2, fp, ip
 8020c7c:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 8020c80:	f36b 4517 	bfi	r5, fp, #16, #8
 8020c84:	0e2b      	lsrs	r3, r5, #24
 8020c86:	fb10 c303 	smlabb	r3, r0, r3, ip
 8020c8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020c8e:	3c01      	subs	r4, #1
 8020c90:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8020c94:	1d37      	adds	r7, r6, #4
 8020c96:	b2a4      	uxth	r4, r4
 8020c98:	605d      	str	r5, [r3, #4]
 8020c9a:	463e      	mov	r6, r7
 8020c9c:	e7d3      	b.n	8020c46 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x116>
 8020c9e:	9e07      	ldr	r6, [sp, #28]
 8020ca0:	e797      	b.n	8020bd2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa2>
 8020ca2:	2bff      	cmp	r3, #255	@ 0xff
 8020ca4:	d127      	bne.n	8020cf6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1c6>
 8020ca6:	f896 c001 	ldrb.w	ip, [r6, #1]
 8020caa:	78b3      	ldrb	r3, [r6, #2]
 8020cac:	fa5f fc8c 	uxtb.w	ip, ip
 8020cb0:	f896 e003 	ldrb.w	lr, [r6, #3]
 8020cb4:	b2db      	uxtb	r3, r3
 8020cb6:	f36c 0507 	bfi	r5, ip, #0, #8
 8020cba:	f363 250f 	bfi	r5, r3, #8, #8
 8020cbe:	fa5f fe8e 	uxtb.w	lr, lr
 8020cc2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8020cc6:	fb12 330e 	smlabb	r3, r2, lr, r3
 8020cca:	fb11 330c 	smlabb	r3, r1, ip, r3
 8020cce:	f896 b004 	ldrb.w	fp, [r6, #4]
 8020cd2:	f36e 4517 	bfi	r5, lr, #16, #8
 8020cd6:	fa5f fb8b 	uxtb.w	fp, fp
 8020cda:	f36b 651f 	bfi	r5, fp, #24, #8
 8020cde:	fb10 3b0b 	smlabb	fp, r0, fp, r3
 8020ce2:	f00b 0b3f 	and.w	fp, fp, #63	@ 0x3f
 8020ce6:	3c01      	subs	r4, #1
 8020ce8:	eb0a 0b8b 	add.w	fp, sl, fp, lsl #2
 8020cec:	1d77      	adds	r7, r6, #5
 8020cee:	b2a4      	uxth	r4, r4
 8020cf0:	f8cb 5004 	str.w	r5, [fp, #4]
 8020cf4:	e7d1      	b.n	8020c9a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 8020cf6:	ea5f 1ca3 	movs.w	ip, r3, asr #6
 8020cfa:	f106 0701 	add.w	r7, r6, #1
 8020cfe:	d107      	bne.n	8020d10 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e0>
 8020d00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020d04:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8020d08:	685d      	ldr	r5, [r3, #4]
 8020d0a:	3c01      	subs	r4, #1
 8020d0c:	b2a4      	uxth	r4, r4
 8020d0e:	e7c4      	b.n	8020c9a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 8020d10:	f1bc 0f01 	cmp.w	ip, #1
 8020d14:	d12c      	bne.n	8020d70 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x240>
 8020d16:	f003 0e03 	and.w	lr, r3, #3
 8020d1a:	f1ae 0e02 	sub.w	lr, lr, #2
 8020d1e:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 8020d22:	fa5f fe8e 	uxtb.w	lr, lr
 8020d26:	f003 0c0c 	and.w	ip, r3, #12
 8020d2a:	f36e 0507 	bfi	r5, lr, #0, #8
 8020d2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8020d32:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 8020d36:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 8020d3a:	f36c 250f 	bfi	r5, ip, #8, #8
 8020d3e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8020d42:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020d46:	3b02      	subs	r3, #2
 8020d48:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8020d4c:	b2db      	uxtb	r3, r3
 8020d4e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8020d52:	fb12 cc03 	smlabb	ip, r2, r3, ip
 8020d56:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 8020d5a:	f363 4517 	bfi	r5, r3, #16, #8
 8020d5e:	0e2e      	lsrs	r6, r5, #24
 8020d60:	fb10 c606 	smlabb	r6, r0, r6, ip
 8020d64:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 8020d68:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8020d6c:	6075      	str	r5, [r6, #4]
 8020d6e:	e7cc      	b.n	8020d0a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1da>
 8020d70:	f1bc 0f02 	cmp.w	ip, #2
 8020d74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020d78:	d12a      	bne.n	8020dd0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2a0>
 8020d7a:	1cb7      	adds	r7, r6, #2
 8020d7c:	7876      	ldrb	r6, [r6, #1]
 8020d7e:	3b20      	subs	r3, #32
 8020d80:	b2f6      	uxtb	r6, r6
 8020d82:	f006 0c0f 	and.w	ip, r6, #15
 8020d86:	f1ac 0c08 	sub.w	ip, ip, #8
 8020d8a:	449c      	add	ip, r3
 8020d8c:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8020d90:	fa5f fc8c 	uxtb.w	ip, ip
 8020d94:	f36c 0507 	bfi	r5, ip, #0, #8
 8020d98:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8020d9c:	eb0e 0e83 	add.w	lr, lr, r3, lsl #2
 8020da0:	fa5f fe8e 	uxtb.w	lr, lr
 8020da4:	1136      	asrs	r6, r6, #4
 8020da6:	f36e 250f 	bfi	r5, lr, #8, #8
 8020daa:	3e08      	subs	r6, #8
 8020dac:	4433      	add	r3, r6
 8020dae:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020db2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8020db6:	b2db      	uxtb	r3, r3
 8020db8:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8020dbc:	fb12 ee03 	smlabb	lr, r2, r3, lr
 8020dc0:	fb11 ee0c 	smlabb	lr, r1, ip, lr
 8020dc4:	f363 4517 	bfi	r5, r3, #16, #8
 8020dc8:	0e2e      	lsrs	r6, r5, #24
 8020dca:	fb10 e606 	smlabb	r6, r0, r6, lr
 8020dce:	e7c9      	b.n	8020d64 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x234>
 8020dd0:	1c5e      	adds	r6, r3, #1
 8020dd2:	42a6      	cmp	r6, r4
 8020dd4:	dd4e      	ble.n	8020e74 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x344>
 8020dd6:	1b36      	subs	r6, r6, r4
 8020dd8:	2e00      	cmp	r6, #0
 8020dda:	dc4e      	bgt.n	8020e7a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x34a>
 8020ddc:	2400      	movs	r4, #0
 8020dde:	f8dd b004 	ldr.w	fp, [sp, #4]
 8020de2:	f1bb 0f00 	cmp.w	fp, #0
 8020de6:	f340 8122 	ble.w	802102e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fe>
 8020dea:	1c7b      	adds	r3, r7, #1
 8020dec:	9303      	str	r3, [sp, #12]
 8020dee:	783b      	ldrb	r3, [r7, #0]
 8020df0:	b2db      	uxtb	r3, r3
 8020df2:	2bfe      	cmp	r3, #254	@ 0xfe
 8020df4:	d160      	bne.n	8020eb8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x388>
 8020df6:	1d3b      	adds	r3, r7, #4
 8020df8:	9303      	str	r3, [sp, #12]
 8020dfa:	2303      	movs	r3, #3
 8020dfc:	7879      	ldrb	r1, [r7, #1]
 8020dfe:	78ba      	ldrb	r2, [r7, #2]
 8020e00:	b2c9      	uxtb	r1, r1
 8020e02:	78f8      	ldrb	r0, [r7, #3]
 8020e04:	f361 0507 	bfi	r5, r1, #0, #8
 8020e08:	b2d2      	uxtb	r2, r2
 8020e0a:	f362 250f 	bfi	r5, r2, #8, #8
 8020e0e:	b2c0      	uxtb	r0, r0
 8020e10:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8020e14:	fb13 2200 	smlabb	r2, r3, r0, r2
 8020e18:	2307      	movs	r3, #7
 8020e1a:	fb13 2101 	smlabb	r1, r3, r1, r2
 8020e1e:	230b      	movs	r3, #11
 8020e20:	f360 4517 	bfi	r5, r0, #16, #8
 8020e24:	0e2e      	lsrs	r6, r5, #24
 8020e26:	fb13 1306 	smlabb	r3, r3, r6, r1
 8020e2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020e2e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8020e32:	605d      	str	r5, [r3, #4]
 8020e34:	2601      	movs	r6, #1
 8020e36:	4637      	mov	r7, r6
 8020e38:	0e2b      	lsrs	r3, r5, #24
 8020e3a:	ebab 0b07 	sub.w	fp, fp, r7
 8020e3e:	eba6 0607 	sub.w	r6, r6, r7
 8020e42:	f040 80d3 	bne.w	8020fec <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4bc>
 8020e46:	b18c      	cbz	r4, 8020e6c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x33c>
 8020e48:	4648      	mov	r0, r9
 8020e4a:	00a1      	lsls	r1, r4, #2
 8020e4c:	f7f2 fb92 	bl	8013574 <_ZN8touchgfx5paint9flushLineEPmi>
 8020e50:	9b05      	ldr	r3, [sp, #20]
 8020e52:	4622      	mov	r2, r4
 8020e54:	4649      	mov	r1, r9
 8020e56:	4640      	mov	r0, r8
 8020e58:	f7f2 fc36 	bl	80136c8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 8020e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8020f10 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>)
 8020e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8020f14 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e4>)
 8020e60:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8020e64:	4599      	cmp	r9, r3
 8020e66:	bf08      	it	eq
 8020e68:	4613      	moveq	r3, r2
 8020e6a:	4699      	mov	r9, r3
 8020e6c:	eb08 0847 	add.w	r8, r8, r7, lsl #1
 8020e70:	2400      	movs	r4, #0
 8020e72:	e0da      	b.n	802102a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fa>
 8020e74:	1ba6      	subs	r6, r4, r6
 8020e76:	b2b4      	uxth	r4, r6
 8020e78:	e70f      	b.n	8020c9a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 8020e7a:	9b01      	ldr	r3, [sp, #4]
 8020e7c:	9a01      	ldr	r2, [sp, #4]
 8020e7e:	42b3      	cmp	r3, r6
 8020e80:	bfa8      	it	ge
 8020e82:	4633      	movge	r3, r6
 8020e84:	0e2c      	lsrs	r4, r5, #24
 8020e86:	eba2 0b03 	sub.w	fp, r2, r3
 8020e8a:	eba6 0603 	sub.w	r6, r6, r3
 8020e8e:	d00b      	beq.n	8020ea8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x378>
 8020e90:	461a      	mov	r2, r3
 8020e92:	f1a9 0104 	sub.w	r1, r9, #4
 8020e96:	2a00      	cmp	r2, #0
 8020e98:	dc02      	bgt.n	8020ea0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x370>
 8020e9a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020e9e:	e7a0      	b.n	8020de2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 8020ea0:	f841 5f04 	str.w	r5, [r1, #4]!
 8020ea4:	3a01      	subs	r2, #1
 8020ea6:	e7f6      	b.n	8020e96 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x366>
 8020ea8:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 8020eac:	e799      	b.n	8020de2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 8020eae:	4637      	mov	r7, r6
 8020eb0:	f8dd b004 	ldr.w	fp, [sp, #4]
 8020eb4:	4626      	mov	r6, r4
 8020eb6:	e794      	b.n	8020de2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 8020eb8:	2bff      	cmp	r3, #255	@ 0xff
 8020eba:	d11d      	bne.n	8020ef8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3c8>
 8020ebc:	1d7b      	adds	r3, r7, #5
 8020ebe:	7878      	ldrb	r0, [r7, #1]
 8020ec0:	9303      	str	r3, [sp, #12]
 8020ec2:	78ba      	ldrb	r2, [r7, #2]
 8020ec4:	78fe      	ldrb	r6, [r7, #3]
 8020ec6:	793b      	ldrb	r3, [r7, #4]
 8020ec8:	b2c0      	uxtb	r0, r0
 8020eca:	b2d9      	uxtb	r1, r3
 8020ecc:	2303      	movs	r3, #3
 8020ece:	f360 0507 	bfi	r5, r0, #0, #8
 8020ed2:	b2d2      	uxtb	r2, r2
 8020ed4:	f362 250f 	bfi	r5, r2, #8, #8
 8020ed8:	b2f6      	uxtb	r6, r6
 8020eda:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8020ede:	fb13 2206 	smlabb	r2, r3, r6, r2
 8020ee2:	2307      	movs	r3, #7
 8020ee4:	fb13 2000 	smlabb	r0, r3, r0, r2
 8020ee8:	230b      	movs	r3, #11
 8020eea:	f366 4517 	bfi	r5, r6, #16, #8
 8020eee:	f361 651f 	bfi	r5, r1, #24, #8
 8020ef2:	fb13 0301 	smlabb	r3, r3, r1, r0
 8020ef6:	e798      	b.n	8020e2a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2fa>
 8020ef8:	119e      	asrs	r6, r3, #6
 8020efa:	d10d      	bne.n	8020f18 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 8020efc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020f00:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8020f04:	685d      	ldr	r5, [r3, #4]
 8020f06:	e795      	b.n	8020e34 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 8020f08:	2005bd1c 	.word	0x2005bd1c
 8020f0c:	2005bd16 	.word	0x2005bd16
 8020f10:	20045700 	.word	0x20045700
 8020f14:	20045800 	.word	0x20045800
 8020f18:	2e01      	cmp	r6, #1
 8020f1a:	ea4f 6115 	mov.w	r1, r5, lsr #24
 8020f1e:	d12b      	bne.n	8020f78 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x448>
 8020f20:	f003 0003 	and.w	r0, r3, #3
 8020f24:	3802      	subs	r0, #2
 8020f26:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8020f2a:	b2c0      	uxtb	r0, r0
 8020f2c:	f003 020c 	and.w	r2, r3, #12
 8020f30:	f360 0507 	bfi	r5, r0, #0, #8
 8020f34:	3a08      	subs	r2, #8
 8020f36:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8020f3a:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8020f3e:	f362 250f 	bfi	r5, r2, #8, #8
 8020f42:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8020f46:	1e9f      	subs	r7, r3, #2
 8020f48:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8020f4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8020f50:	2703      	movs	r7, #3
 8020f52:	b2db      	uxtb	r3, r3
 8020f54:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8020f58:	fb17 2203 	smlabb	r2, r7, r3, r2
 8020f5c:	2707      	movs	r7, #7
 8020f5e:	f363 4517 	bfi	r5, r3, #16, #8
 8020f62:	230b      	movs	r3, #11
 8020f64:	fb17 2000 	smlabb	r0, r7, r0, r2
 8020f68:	fb13 0101 	smlabb	r1, r3, r1, r0
 8020f6c:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8020f70:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8020f74:	604d      	str	r5, [r1, #4]
 8020f76:	e75e      	b.n	8020e36 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 8020f78:	2e02      	cmp	r6, #2
 8020f7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020f7e:	d12f      	bne.n	8020fe0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4b0>
 8020f80:	7878      	ldrb	r0, [r7, #1]
 8020f82:	1cba      	adds	r2, r7, #2
 8020f84:	b2c0      	uxtb	r0, r0
 8020f86:	9203      	str	r2, [sp, #12]
 8020f88:	f000 020f 	and.w	r2, r0, #15
 8020f8c:	3b20      	subs	r3, #32
 8020f8e:	3a08      	subs	r2, #8
 8020f90:	441a      	add	r2, r3
 8020f92:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8020f96:	b2d2      	uxtb	r2, r2
 8020f98:	f362 0507 	bfi	r5, r2, #0, #8
 8020f9c:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8020fa0:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8020fa4:	b2f6      	uxtb	r6, r6
 8020fa6:	1100      	asrs	r0, r0, #4
 8020fa8:	f366 250f 	bfi	r5, r6, #8, #8
 8020fac:	3808      	subs	r0, #8
 8020fae:	4403      	add	r3, r0
 8020fb0:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8020fb4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8020fb8:	2003      	movs	r0, #3
 8020fba:	b2db      	uxtb	r3, r3
 8020fbc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8020fc0:	fb10 6603 	smlabb	r6, r0, r3, r6
 8020fc4:	2007      	movs	r0, #7
 8020fc6:	f363 4517 	bfi	r5, r3, #16, #8
 8020fca:	230b      	movs	r3, #11
 8020fcc:	fb10 6202 	smlabb	r2, r0, r2, r6
 8020fd0:	fb13 2101 	smlabb	r1, r3, r1, r2
 8020fd4:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8020fd8:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8020fdc:	604d      	str	r5, [r1, #4]
 8020fde:	e729      	b.n	8020e34 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 8020fe0:	1c5e      	adds	r6, r3, #1
 8020fe2:	45b3      	cmp	fp, r6
 8020fe4:	465f      	mov	r7, fp
 8020fe6:	bfa8      	it	ge
 8020fe8:	4637      	movge	r7, r6
 8020fea:	e725      	b.n	8020e38 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x308>
 8020fec:	193b      	adds	r3, r7, r4
 8020fee:	2b40      	cmp	r3, #64	@ 0x40
 8020ff0:	dd13      	ble.n	802101a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ea>
 8020ff2:	4648      	mov	r0, r9
 8020ff4:	00a1      	lsls	r1, r4, #2
 8020ff6:	f7f2 fabd 	bl	8013574 <_ZN8touchgfx5paint9flushLineEPmi>
 8020ffa:	4622      	mov	r2, r4
 8020ffc:	4640      	mov	r0, r8
 8020ffe:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8021002:	2400      	movs	r4, #0
 8021004:	4649      	mov	r1, r9
 8021006:	9b05      	ldr	r3, [sp, #20]
 8021008:	f7f2 fb5e 	bl	80136c8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 802100c:	4b2b      	ldr	r3, [pc, #172]	@ (80210bc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>)
 802100e:	4599      	cmp	r9, r3
 8021010:	bf0c      	ite	eq
 8021012:	f8df 90b4 	ldreq.w	r9, [pc, #180]	@ 80210c8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x598>
 8021016:	f8df 90a4 	ldrne.w	r9, [pc, #164]	@ 80210bc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>
 802101a:	463b      	mov	r3, r7
 802101c:	eb09 0284 	add.w	r2, r9, r4, lsl #2
 8021020:	3b01      	subs	r3, #1
 8021022:	f842 5b04 	str.w	r5, [r2], #4
 8021026:	d1fb      	bne.n	8021020 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f0>
 8021028:	443c      	add	r4, r7
 802102a:	9f03      	ldr	r7, [sp, #12]
 802102c:	e6d9      	b.n	8020de2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 802102e:	b15c      	cbz	r4, 8021048 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x518>
 8021030:	00a1      	lsls	r1, r4, #2
 8021032:	4648      	mov	r0, r9
 8021034:	f7f2 fa9e 	bl	8013574 <_ZN8touchgfx5paint9flushLineEPmi>
 8021038:	4640      	mov	r0, r8
 802103a:	9b05      	ldr	r3, [sp, #20]
 802103c:	4622      	mov	r2, r4
 802103e:	4649      	mov	r1, r9
 8021040:	f7f2 fb42 	bl	80136c8 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 8021044:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8021048:	4b1d      	ldr	r3, [pc, #116]	@ (80210c0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x590>)
 802104a:	9a01      	ldr	r2, [sp, #4]
 802104c:	881b      	ldrh	r3, [r3, #0]
 802104e:	1a9b      	subs	r3, r3, r2
 8021050:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 8021054:	9b04      	ldr	r3, [sp, #16]
 8021056:	3301      	adds	r3, #1
 8021058:	9304      	str	r3, [sp, #16]
 802105a:	9a04      	ldr	r2, [sp, #16]
 802105c:	9b00      	ldr	r3, [sp, #0]
 802105e:	4293      	cmp	r3, r2
 8021060:	d11d      	bne.n	802109e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x56e>
 8021062:	2500      	movs	r5, #0
 8021064:	9b02      	ldr	r3, [sp, #8]
 8021066:	9a02      	ldr	r2, [sp, #8]
 8021068:	f103 0b01 	add.w	fp, r3, #1
 802106c:	9b06      	ldr	r3, [sp, #24]
 802106e:	f8bd 4030 	ldrh.w	r4, [sp, #48]	@ 0x30
 8021072:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8021076:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
 802107a:	9b07      	ldr	r3, [sp, #28]
 802107c:	ba3f      	rev	r7, r7
 802107e:	1ba4      	subs	r4, r4, r6
 8021080:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8021084:	4629      	mov	r1, r5
 8021086:	9808      	ldr	r0, [sp, #32]
 8021088:	441f      	add	r7, r3
 802108a:	b2a4      	uxth	r4, r4
 802108c:	f00d f874 	bl	802e178 <memset>
 8021090:	f8cd b008 	str.w	fp, [sp, #8]
 8021094:	9504      	str	r5, [sp, #16]
 8021096:	f7f2 fa55 	bl	8013544 <_ZN8touchgfx5paint8tearDownEv>
 802109a:	463e      	mov	r6, r7
 802109c:	e5cc      	b.n	8020c38 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x108>
 802109e:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80210a2:	9b01      	ldr	r3, [sp, #4]
 80210a4:	1ae4      	subs	r4, r4, r3
 80210a6:	1ba4      	subs	r4, r4, r6
 80210a8:	b2a4      	uxth	r4, r4
 80210aa:	e7f4      	b.n	8021096 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x566>
 80210ac:	4b05      	ldr	r3, [pc, #20]	@ (80210c4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x594>)
 80210ae:	6818      	ldr	r0, [r3, #0]
 80210b0:	6803      	ldr	r3, [r0, #0]
 80210b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80210b4:	4798      	blx	r3
 80210b6:	b00f      	add	sp, #60	@ 0x3c
 80210b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210bc:	20045700 	.word	0x20045700
 80210c0:	2005bd16 	.word	0x2005bd16
 80210c4:	2005bd1c 	.word	0x2005bd1c
 80210c8:	20045800 	.word	0x20045800

080210cc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 80210cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210d0:	b08f      	sub	sp, #60	@ 0x3c
 80210d2:	9205      	str	r2, [sp, #20]
 80210d4:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80210d8:	461c      	mov	r4, r3
 80210da:	9100      	str	r1, [sp, #0]
 80210dc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80210de:	9201      	str	r2, [sp, #4]
 80210e0:	2a00      	cmp	r2, #0
 80210e2:	f000 8116 	beq.w	8021312 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 80210e6:	6820      	ldr	r0, [r4, #0]
 80210e8:	6861      	ldr	r1, [r4, #4]
 80210ea:	aa0a      	add	r2, sp, #40	@ 0x28
 80210ec:	c203      	stmia	r2!, {r0, r1}
 80210ee:	6818      	ldr	r0, [r3, #0]
 80210f0:	6859      	ldr	r1, [r3, #4]
 80210f2:	aa0c      	add	r2, sp, #48	@ 0x30
 80210f4:	c203      	stmia	r2!, {r0, r1}
 80210f6:	a80a      	add	r0, sp, #40	@ 0x28
 80210f8:	f7f9 f9de 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80210fc:	4621      	mov	r1, r4
 80210fe:	a80c      	add	r0, sp, #48	@ 0x30
 8021100:	f7f9 fa02 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021104:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8021108:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 802110c:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8021110:	bfdd      	ittte	le
 8021112:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8021116:	b2b3      	uxthle	r3, r6
 8021118:	fb92 f3f3 	sdivle	r3, r2, r3
 802111c:	2301      	movgt	r3, #1
 802111e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8021122:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8021126:	fb92 f1f3 	sdiv	r1, r2, r3
 802112a:	fa1f fc81 	uxth.w	ip, r1
 802112e:	4661      	mov	r1, ip
 8021130:	fb0c 2413 	mls	r4, ip, r3, r2
 8021134:	fb14 f406 	smulbb	r4, r4, r6
 8021138:	441d      	add	r5, r3
 802113a:	3d01      	subs	r5, #1
 802113c:	4404      	add	r4, r0
 802113e:	fb95 f5f3 	sdiv	r5, r5, r3
 8021142:	b2a4      	uxth	r4, r4
 8021144:	b131      	cbz	r1, 8021154 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 8021146:	9b05      	ldr	r3, [sp, #20]
 8021148:	9900      	ldr	r1, [sp, #0]
 802114a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802114e:	ba1b      	rev	r3, r3
 8021150:	4419      	add	r1, r3
 8021152:	9100      	str	r1, [sp, #0]
 8021154:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8021158:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 802115c:	4418      	add	r0, r3
 802115e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8021162:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8021166:	441a      	add	r2, r3
 8021168:	4b6b      	ldr	r3, [pc, #428]	@ (8021318 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 802116a:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 802116e:	6818      	ldr	r0, [r3, #0]
 8021170:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8021174:	6803      	ldr	r3, [r0, #0]
 8021176:	b2ad      	uxth	r5, r5
 8021178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802117a:	4798      	blx	r3
 802117c:	4967      	ldr	r1, [pc, #412]	@ (802131c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 802117e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8021182:	880b      	ldrh	r3, [r1, #0]
 8021184:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8021188:	00ad      	lsls	r5, r5, #2
 802118a:	fb03 c202 	mla	r2, r3, r2, ip
 802118e:	4373      	muls	r3, r6
 8021190:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021194:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021198:	9306      	str	r3, [sp, #24]
 802119a:	1d2b      	adds	r3, r5, #4
 802119c:	9307      	str	r3, [sp, #28]
 802119e:	9b01      	ldr	r3, [sp, #4]
 80211a0:	2c00      	cmp	r4, #0
 80211a2:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 80211a6:	bf0c      	ite	eq
 80211a8:	46c6      	moveq	lr, r8
 80211aa:	f04f 0e00 	movne.w	lr, #0
 80211ae:	2300      	movs	r3, #0
 80211b0:	9109      	str	r1, [sp, #36]	@ 0x24
 80211b2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80211b6:	b292      	uxth	r2, r2
 80211b8:	fa1f fe8e 	uxth.w	lr, lr
 80211bc:	9302      	str	r3, [sp, #8]
 80211be:	9103      	str	r1, [sp, #12]
 80211c0:	9204      	str	r2, [sp, #16]
 80211c2:	9a06      	ldr	r2, [sp, #24]
 80211c4:	4282      	cmp	r2, r0
 80211c6:	f240 809f 	bls.w	8021308 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 80211ca:	b963      	cbnz	r3, 80211e6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 80211cc:	9b00      	ldr	r3, [sp, #0]
 80211ce:	781a      	ldrb	r2, [r3, #0]
 80211d0:	0993      	lsrs	r3, r2, #6
 80211d2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80211d6:	9202      	str	r2, [sp, #8]
 80211d8:	1e5a      	subs	r2, r3, #1
 80211da:	2a02      	cmp	r2, #2
 80211dc:	d815      	bhi.n	802120a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 80211de:	9a00      	ldr	r2, [sp, #0]
 80211e0:	b29b      	uxth	r3, r3
 80211e2:	3201      	adds	r2, #1
 80211e4:	9200      	str	r2, [sp, #0]
 80211e6:	b1b4      	cbz	r4, 8021216 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 80211e8:	429c      	cmp	r4, r3
 80211ea:	bf99      	ittee	ls
 80211ec:	1b1c      	subls	r4, r3, r4
 80211ee:	fa1f fa84 	uxthls.w	sl, r4
 80211f2:	4671      	movhi	r1, lr
 80211f4:	f04f 0a00 	movhi.w	sl, #0
 80211f8:	bf93      	iteet	ls
 80211fa:	2400      	movls	r4, #0
 80211fc:	1ae4      	subhi	r4, r4, r3
 80211fe:	b2a4      	uxthhi	r4, r4
 8021200:	fa1f f188 	uxthls.w	r1, r8
 8021204:	4653      	mov	r3, sl
 8021206:	468e      	mov	lr, r1
 8021208:	e7db      	b.n	80211c2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 802120a:	9a00      	ldr	r2, [sp, #0]
 802120c:	9b00      	ldr	r3, [sp, #0]
 802120e:	3202      	adds	r2, #2
 8021210:	785b      	ldrb	r3, [r3, #1]
 8021212:	9200      	str	r2, [sp, #0]
 8021214:	e7e7      	b.n	80211e6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 8021216:	2202      	movs	r2, #2
 8021218:	4615      	mov	r5, r2
 802121a:	4573      	cmp	r3, lr
 802121c:	bf2c      	ite	cs
 802121e:	46f1      	movcs	r9, lr
 8021220:	4699      	movcc	r9, r3
 8021222:	9907      	ldr	r1, [sp, #28]
 8021224:	9a02      	ldr	r2, [sp, #8]
 8021226:	bf28      	it	cs
 8021228:	eba3 0a0e 	subcs.w	sl, r3, lr
 802122c:	fb15 1202 	smlabb	r2, r5, r2, r1
 8021230:	9905      	ldr	r1, [sp, #20]
 8021232:	bf28      	it	cs
 8021234:	fa1f fa8a 	uxthcs.w	sl, sl
 8021238:	f831 c002 	ldrh.w	ip, [r1, r2]
 802123c:	9a01      	ldr	r2, [sp, #4]
 802123e:	bf37      	itett	cc
 8021240:	ebae 0103 	subcc.w	r1, lr, r3
 8021244:	4621      	movcs	r1, r4
 8021246:	b289      	uxthcc	r1, r1
 8021248:	46a2      	movcc	sl, r4
 802124a:	2aff      	cmp	r2, #255	@ 0xff
 802124c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021250:	d105      	bne.n	802125e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 8021252:	4481      	add	r9, r0
 8021254:	4581      	cmp	r9, r0
 8021256:	d045      	beq.n	80212e4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 8021258:	f820 cb02 	strh.w	ip, [r0], #2
 802125c:	e7fa      	b.n	8021254 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 802125e:	9d03      	ldr	r5, [sp, #12]
 8021260:	ea4f 222c 	mov.w	r2, ip, asr #8
 8021264:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8021268:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 802126c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021270:	436a      	muls	r2, r5
 8021272:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8021276:	fa5f fc8c 	uxtb.w	ip, ip
 802127a:	fb0b fb05 	mul.w	fp, fp, r5
 802127e:	fb0c fc05 	mul.w	ip, ip, r5
 8021282:	9208      	str	r2, [sp, #32]
 8021284:	4481      	add	r9, r0
 8021286:	4581      	cmp	r9, r0
 8021288:	d02c      	beq.n	80212e4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 802128a:	8802      	ldrh	r2, [r0, #0]
 802128c:	9d04      	ldr	r5, [sp, #16]
 802128e:	1216      	asrs	r6, r2, #8
 8021290:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8021294:	fb16 f605 	smulbb	r6, r6, r5
 8021298:	9d08      	ldr	r5, [sp, #32]
 802129a:	9f04      	ldr	r7, [sp, #16]
 802129c:	442e      	add	r6, r5
 802129e:	10d5      	asrs	r5, r2, #3
 80212a0:	00d2      	lsls	r2, r2, #3
 80212a2:	b2d2      	uxtb	r2, r2
 80212a4:	fb12 f207 	smulbb	r2, r2, r7
 80212a8:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80212ac:	fb15 f507 	smulbb	r5, r5, r7
 80212b0:	b2b6      	uxth	r6, r6
 80212b2:	4462      	add	r2, ip
 80212b4:	b292      	uxth	r2, r2
 80212b6:	1c77      	adds	r7, r6, #1
 80212b8:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80212bc:	1c57      	adds	r7, r2, #1
 80212be:	445d      	add	r5, fp
 80212c0:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 80212c4:	b2ad      	uxth	r5, r5
 80212c6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80212ca:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 80212ce:	4316      	orrs	r6, r2
 80212d0:	1c6a      	adds	r2, r5, #1
 80212d2:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 80212d6:	096d      	lsrs	r5, r5, #5
 80212d8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80212dc:	432e      	orrs	r6, r5
 80212de:	f820 6b02 	strh.w	r6, [r0], #2
 80212e2:	e7d0      	b.n	8021286 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 80212e4:	4573      	cmp	r3, lr
 80212e6:	d38d      	bcc.n	8021204 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 80212e8:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80212ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80212ee:	fa1f f188 	uxth.w	r1, r8
 80212f2:	1a64      	subs	r4, r4, r1
 80212f4:	881b      	ldrh	r3, [r3, #0]
 80212f6:	b2a4      	uxth	r4, r4
 80212f8:	2c00      	cmp	r4, #0
 80212fa:	eba3 0308 	sub.w	r3, r3, r8
 80212fe:	bf18      	it	ne
 8021300:	2100      	movne	r1, #0
 8021302:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021306:	e77d      	b.n	8021204 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 8021308:	4b03      	ldr	r3, [pc, #12]	@ (8021318 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 802130a:	6818      	ldr	r0, [r3, #0]
 802130c:	6803      	ldr	r3, [r0, #0]
 802130e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021310:	4798      	blx	r3
 8021312:	b00f      	add	sp, #60	@ 0x3c
 8021314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021318:	2005bd1c 	.word	0x2005bd1c
 802131c:	2005bd16 	.word	0x2005bd16

08021320 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8021320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021324:	b09f      	sub	sp, #124	@ 0x7c
 8021326:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 802132a:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 802132e:	461d      	mov	r5, r3
 8021330:	4604      	mov	r4, r0
 8021332:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021334:	9209      	str	r2, [sp, #36]	@ 0x24
 8021336:	2a00      	cmp	r2, #0
 8021338:	f000 81e9 	beq.w	802170e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ee>
 802133c:	6828      	ldr	r0, [r5, #0]
 802133e:	6869      	ldr	r1, [r5, #4]
 8021340:	aa1a      	add	r2, sp, #104	@ 0x68
 8021342:	c203      	stmia	r2!, {r0, r1}
 8021344:	6818      	ldr	r0, [r3, #0]
 8021346:	6859      	ldr	r1, [r3, #4]
 8021348:	aa1c      	add	r2, sp, #112	@ 0x70
 802134a:	c203      	stmia	r2!, {r0, r1}
 802134c:	a81a      	add	r0, sp, #104	@ 0x68
 802134e:	f7f9 f8b3 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021352:	4629      	mov	r1, r5
 8021354:	a81c      	add	r0, sp, #112	@ 0x70
 8021356:	f7f9 f8d7 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802135a:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 802135e:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	@ 0x6e
 8021362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021366:	bfdd      	ittte	le
 8021368:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 802136c:	b29a      	uxthle	r2, r3
 802136e:	fb91 f2f2 	sdivle	r2, r1, r2
 8021372:	2201      	movgt	r2, #1
 8021374:	9202      	str	r2, [sp, #8]
 8021376:	9802      	ldr	r0, [sp, #8]
 8021378:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 802137c:	9902      	ldr	r1, [sp, #8]
 802137e:	fb92 f0f0 	sdiv	r0, r2, r0
 8021382:	b280      	uxth	r0, r0
 8021384:	9010      	str	r0, [sp, #64]	@ 0x40
 8021386:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8021388:	9802      	ldr	r0, [sp, #8]
 802138a:	4488      	add	r8, r1
 802138c:	fb05 2510 	mls	r5, r5, r0, r2
 8021390:	fb15 f503 	smulbb	r5, r5, r3
 8021394:	f108 38ff 	add.w	r8, r8, #4294967295
 8021398:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 802139c:	fb98 f8f1 	sdiv	r8, r8, r1
 80213a0:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 80213a4:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	@ 0x76
 80213a8:	440d      	add	r5, r1
 80213aa:	4419      	add	r1, r3
 80213ac:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 80213b0:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 80213b4:	441a      	add	r2, r3
 80213b6:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 80213ba:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 80213be:	9304      	str	r3, [sp, #16]
 80213c0:	4b93      	ldr	r3, [pc, #588]	@ (8021610 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f0>)
 80213c2:	f108 0801 	add.w	r8, r8, #1
 80213c6:	6818      	ldr	r0, [r3, #0]
 80213c8:	fa1f f888 	uxth.w	r8, r8
 80213cc:	6803      	ldr	r3, [r0, #0]
 80213ce:	b2ad      	uxth	r5, r5
 80213d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80213d2:	4798      	blx	r3
 80213d4:	4b8f      	ldr	r3, [pc, #572]	@ (8021614 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f4>)
 80213d6:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 80213da:	881a      	ldrh	r2, [r3, #0]
 80213dc:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 80213e0:	4356      	muls	r6, r2
 80213e2:	fb02 7101 	mla	r1, r2, r1, r7
 80213e6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80213ea:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 80213ee:	920a      	str	r2, [sp, #40]	@ 0x28
 80213f0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80213f2:	2d00      	cmp	r5, #0
 80213f4:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 80213f8:	f108 0204 	add.w	r2, r8, #4
 80213fc:	9211      	str	r2, [sp, #68]	@ 0x44
 80213fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021400:	f04f 0100 	mov.w	r1, #0
 8021404:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8021408:	9215      	str	r2, [sp, #84]	@ 0x54
 802140a:	9a04      	ldr	r2, [sp, #16]
 802140c:	bf18      	it	ne
 802140e:	2200      	movne	r2, #0
 8021410:	9318      	str	r3, [sp, #96]	@ 0x60
 8021412:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8021416:	b292      	uxth	r2, r2
 8021418:	930f      	str	r3, [sp, #60]	@ 0x3c
 802141a:	4b7f      	ldr	r3, [pc, #508]	@ (8021618 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 802141c:	910d      	str	r1, [sp, #52]	@ 0x34
 802141e:	1b1b      	subs	r3, r3, r4
 8021420:	9319      	str	r3, [sp, #100]	@ 0x64
 8021422:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8021424:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021426:	fa11 f383 	uxtah	r3, r1, r3
 802142a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 802142c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8021430:	3304      	adds	r3, #4
 8021432:	9306      	str	r3, [sp, #24]
 8021434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021436:	4283      	cmp	r3, r0
 8021438:	f240 8164 	bls.w	8021704 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3e4>
 802143c:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 8021440:	f04f 0a01 	mov.w	sl, #1
 8021444:	fbb5 f3f3 	udiv	r3, r5, r3
 8021448:	9902      	ldr	r1, [sp, #8]
 802144a:	9e06      	ldr	r6, [sp, #24]
 802144c:	1acb      	subs	r3, r1, r3
 802144e:	b29b      	uxth	r3, r3
 8021450:	9316      	str	r3, [sp, #88]	@ 0x58
 8021452:	9b06      	ldr	r3, [sp, #24]
 8021454:	7836      	ldrb	r6, [r6, #0]
 8021456:	7859      	ldrb	r1, [r3, #1]
 8021458:	789b      	ldrb	r3, [r3, #2]
 802145a:	9612      	str	r6, [sp, #72]	@ 0x48
 802145c:	021b      	lsls	r3, r3, #8
 802145e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8021462:	9906      	ldr	r1, [sp, #24]
 8021464:	3601      	adds	r6, #1
 8021466:	78c9      	ldrb	r1, [r1, #3]
 8021468:	9605      	str	r6, [sp, #20]
 802146a:	430b      	orrs	r3, r1
 802146c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802146e:	46d3      	mov	fp, sl
 8021470:	4419      	add	r1, r3
 8021472:	1c4e      	adds	r6, r1, #1
 8021474:	9603      	str	r6, [sp, #12]
 8021476:	7849      	ldrb	r1, [r1, #1]
 8021478:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 802147a:	0209      	lsls	r1, r1, #8
 802147c:	5cf3      	ldrb	r3, [r6, r3]
 802147e:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 8021482:	4319      	orrs	r1, r3
 8021484:	b28b      	uxth	r3, r1
 8021486:	930c      	str	r3, [sp, #48]	@ 0x30
 8021488:	2300      	movs	r3, #0
 802148a:	4657      	mov	r7, sl
 802148c:	9307      	str	r3, [sp, #28]
 802148e:	469c      	mov	ip, r3
 8021490:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8021494:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8021498:	930e      	str	r3, [sp, #56]	@ 0x38
 802149a:	2d00      	cmp	r5, #0
 802149c:	d07e      	beq.n	802159c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 802149e:	42af      	cmp	r7, r5
 80214a0:	d26e      	bcs.n	8021580 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x260>
 80214a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80214a4:	1bed      	subs	r5, r5, r7
 80214a6:	4283      	cmp	r3, r0
 80214a8:	b2ad      	uxth	r5, r5
 80214aa:	9201      	str	r2, [sp, #4]
 80214ac:	d802      	bhi.n	80214b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 80214ae:	e073      	b.n	8021598 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x278>
 80214b0:	2b00      	cmp	r3, #0
 80214b2:	d15f      	bne.n	8021574 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x254>
 80214b4:	9b03      	ldr	r3, [sp, #12]
 80214b6:	f1cb 0207 	rsb	r2, fp, #7
 80214ba:	785b      	ldrb	r3, [r3, #1]
 80214bc:	4093      	lsls	r3, r2
 80214be:	005b      	lsls	r3, r3, #1
 80214c0:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 80214c4:	9b03      	ldr	r3, [sp, #12]
 80214c6:	781b      	ldrb	r3, [r3, #0]
 80214c8:	fa43 f30b 	asr.w	r3, r3, fp
 80214cc:	b2db      	uxtb	r3, r3
 80214ce:	4313      	orrs	r3, r2
 80214d0:	f10b 0201 	add.w	r2, fp, #1
 80214d4:	fa5f fb82 	uxtb.w	fp, r2
 80214d8:	9a03      	ldr	r2, [sp, #12]
 80214da:	f1bb 0f08 	cmp.w	fp, #8
 80214de:	bf15      	itete	ne
 80214e0:	3201      	addne	r2, #1
 80214e2:	3202      	addeq	r2, #2
 80214e4:	9203      	strne	r2, [sp, #12]
 80214e6:	9203      	streq	r2, [sp, #12]
 80214e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80214ea:	b29f      	uxth	r7, r3
 80214ec:	bf08      	it	eq
 80214ee:	f04f 0b00 	moveq.w	fp, #0
 80214f2:	42ba      	cmp	r2, r7
 80214f4:	d309      	bcc.n	802150a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ea>
 80214f6:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 80214fa:	2301      	movs	r3, #1
 80214fc:	9a05      	ldr	r2, [sp, #20]
 80214fe:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8021502:	d30e      	bcc.n	8021522 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x202>
 8021504:	469a      	mov	sl, r3
 8021506:	2600      	movs	r6, #0
 8021508:	e035      	b.n	8021576 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x256>
 802150a:	9b05      	ldr	r3, [sp, #20]
 802150c:	429f      	cmp	r7, r3
 802150e:	d318      	bcc.n	8021542 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x222>
 8021510:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8021514:	eb04 030a 	add.w	r3, r4, sl
 8021518:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 802151c:	f10a 0301 	add.w	r3, sl, #1
 8021520:	b29b      	uxth	r3, r3
 8021522:	9a05      	ldr	r2, [sp, #20]
 8021524:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8021528:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802152c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802152e:	7116      	strb	r6, [r2, #4]
 8021530:	f10a 0601 	add.w	r6, sl, #1
 8021534:	80d1      	strh	r1, [r2, #6]
 8021536:	7156      	strb	r6, [r2, #5]
 8021538:	9a05      	ldr	r2, [sp, #20]
 802153a:	3201      	adds	r2, #1
 802153c:	b292      	uxth	r2, r2
 802153e:	9205      	str	r2, [sp, #20]
 8021540:	e7e0      	b.n	8021504 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e4>
 8021542:	463a      	mov	r2, r7
 8021544:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8021548:	795b      	ldrb	r3, [r3, #5]
 802154a:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 802154e:	4426      	add	r6, r4
 8021550:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8021552:	eb01 0c06 	add.w	ip, r1, r6
 8021556:	f1bc 0f00 	cmp.w	ip, #0
 802155a:	dd07      	ble.n	802156c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>
 802155c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8021560:	f892 c004 	ldrb.w	ip, [r2, #4]
 8021564:	f806 cd01 	strb.w	ip, [r6, #-1]!
 8021568:	88d2      	ldrh	r2, [r2, #6]
 802156a:	e7f1      	b.n	8021550 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x230>
 802156c:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8021570:	b29b      	uxth	r3, r3
 8021572:	e7c3      	b.n	80214fc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1dc>
 8021574:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8021576:	970c      	str	r7, [sp, #48]	@ 0x30
 8021578:	9a01      	ldr	r2, [sp, #4]
 802157a:	46b4      	mov	ip, r6
 802157c:	461f      	mov	r7, r3
 802157e:	e78c      	b.n	802149a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17a>
 8021580:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021584:	1b7b      	subs	r3, r7, r5
 8021586:	eb0c 0605 	add.w	r6, ip, r5
 802158a:	b29b      	uxth	r3, r3
 802158c:	9201      	str	r2, [sp, #4]
 802158e:	b2b6      	uxth	r6, r6
 8021590:	2500      	movs	r5, #0
 8021592:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021594:	4282      	cmp	r2, r0
 8021596:	d88b      	bhi.n	80214b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 8021598:	9a01      	ldr	r2, [sp, #4]
 802159a:	e74b      	b.n	8021434 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x114>
 802159c:	4297      	cmp	r7, r2
 802159e:	d331      	bcc.n	8021604 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2e4>
 80215a0:	1abb      	subs	r3, r7, r2
 80215a2:	b29b      	uxth	r3, r3
 80215a4:	9208      	str	r2, [sp, #32]
 80215a6:	9501      	str	r5, [sp, #4]
 80215a8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80215aa:	29ff      	cmp	r1, #255	@ 0xff
 80215ac:	9908      	ldr	r1, [sp, #32]
 80215ae:	eb0c 0601 	add.w	r6, ip, r1
 80215b2:	d133      	bne.n	802161c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>
 80215b4:	f1a0 0e02 	sub.w	lr, r0, #2
 80215b8:	b2b6      	uxth	r6, r6
 80215ba:	45b4      	cmp	ip, r6
 80215bc:	f040 808a 	bne.w	80216d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3b4>
 80215c0:	9908      	ldr	r1, [sp, #32]
 80215c2:	4297      	cmp	r7, r2
 80215c4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80215c8:	d3e2      	bcc.n	8021590 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x270>
 80215ca:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80215cc:	9904      	ldr	r1, [sp, #16]
 80215ce:	8812      	ldrh	r2, [r2, #0]
 80215d0:	1a52      	subs	r2, r2, r1
 80215d2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80215d6:	9a07      	ldr	r2, [sp, #28]
 80215d8:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80215da:	3201      	adds	r2, #1
 80215dc:	428a      	cmp	r2, r1
 80215de:	9207      	str	r2, [sp, #28]
 80215e0:	f040 8085 	bne.w	80216ee <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ce>
 80215e4:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 80215e8:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 80215ec:	9b04      	ldr	r3, [sp, #16]
 80215ee:	1bed      	subs	r5, r5, r7
 80215f0:	b2ad      	uxth	r5, r5
 80215f2:	2d00      	cmp	r5, #0
 80215f4:	bf0c      	ite	eq
 80215f6:	461a      	moveq	r2, r3
 80215f8:	2200      	movne	r2, #0
 80215fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80215fc:	b292      	uxth	r2, r2
 80215fe:	3301      	adds	r3, #1
 8021600:	930d      	str	r3, [sp, #52]	@ 0x34
 8021602:	e70e      	b.n	8021422 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x102>
 8021604:	1bd1      	subs	r1, r2, r7
 8021606:	b28b      	uxth	r3, r1
 8021608:	9301      	str	r3, [sp, #4]
 802160a:	9708      	str	r7, [sp, #32]
 802160c:	462b      	mov	r3, r5
 802160e:	e7cb      	b.n	80215a8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x288>
 8021610:	2005bd1c 	.word	0x2005bd1c
 8021614:	2005bd16 	.word	0x2005bd16
 8021618:	fffff7fb 	.word	0xfffff7fb
 802161c:	b2b6      	uxth	r6, r6
 802161e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8021620:	45b4      	cmp	ip, r6
 8021622:	d0cd      	beq.n	80215c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a0>
 8021624:	f10c 0101 	add.w	r1, ip, #1
 8021628:	44a4      	add	ip, r4
 802162a:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 802162e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8021630:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021632:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 8021636:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021638:	ea4f 2825 	mov.w	r8, r5, asr #8
 802163c:	f8b1 c000 	ldrh.w	ip, [r1]
 8021640:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8021642:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 8021646:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 802164a:	fb1e fe01 	smulbb	lr, lr, r1
 802164e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8021650:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 8021654:	fb08 e801 	mla	r8, r8, r1, lr
 8021658:	ea4f 09ec 	mov.w	r9, ip, asr #3
 802165c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802165e:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8021662:	fb19 f901 	smulbb	r9, r9, r1
 8021666:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 802166a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802166c:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8021670:	fb0e 9e01 	mla	lr, lr, r1, r9
 8021674:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021678:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802167a:	fa5f fc8c 	uxtb.w	ip, ip
 802167e:	fb1c fc01 	smulbb	ip, ip, r1
 8021682:	00ed      	lsls	r5, r5, #3
 8021684:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8021686:	b2ed      	uxtb	r5, r5
 8021688:	fb05 c501 	mla	r5, r5, r1, ip
 802168c:	fa1f f888 	uxth.w	r8, r8
 8021690:	fa1f fe8e 	uxth.w	lr, lr
 8021694:	b2ad      	uxth	r5, r5
 8021696:	f108 0c01 	add.w	ip, r8, #1
 802169a:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 802169e:	f10e 0901 	add.w	r9, lr, #1
 80216a2:	f105 0c01 	add.w	ip, r5, #1
 80216a6:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 80216aa:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 80216ae:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80216b2:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 80216b6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80216ba:	ea4c 0808 	orr.w	r8, ip, r8
 80216be:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80216c0:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80216c4:	ea48 0809 	orr.w	r8, r8, r9
 80216c8:	f821 8b02 	strh.w	r8, [r1], #2
 80216cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80216ce:	f8bd c05c 	ldrh.w	ip, [sp, #92]	@ 0x5c
 80216d2:	e7a5      	b.n	8021620 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>
 80216d4:	f10c 0801 	add.w	r8, ip, #1
 80216d8:	44a4      	add	ip, r4
 80216da:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 80216de:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80216e0:	fa1f fc88 	uxth.w	ip, r8
 80216e4:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 80216e8:	f82e 5f02 	strh.w	r5, [lr, #2]!
 80216ec:	e765      	b.n	80215ba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29a>
 80216ee:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80216f2:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 80216f6:	1aad      	subs	r5, r5, r2
 80216f8:	b2ad      	uxth	r5, r5
 80216fa:	2d00      	cmp	r5, #0
 80216fc:	bf18      	it	ne
 80216fe:	2200      	movne	r2, #0
 8021700:	9201      	str	r2, [sp, #4]
 8021702:	e746      	b.n	8021592 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 8021704:	4b03      	ldr	r3, [pc, #12]	@ (8021714 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f4>)
 8021706:	6818      	ldr	r0, [r3, #0]
 8021708:	6803      	ldr	r3, [r0, #0]
 802170a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802170c:	4798      	blx	r3
 802170e:	b01f      	add	sp, #124	@ 0x7c
 8021710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021714:	2005bd1c 	.word	0x2005bd1c

08021718 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h>:
 8021718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802171c:	b093      	sub	sp, #76	@ 0x4c
 802171e:	4616      	mov	r6, r2
 8021720:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 8021724:	9003      	str	r0, [sp, #12]
 8021726:	460d      	mov	r5, r1
 8021728:	9201      	str	r2, [sp, #4]
 802172a:	2a00      	cmp	r2, #0
 802172c:	f000 8304 	beq.w	8021d38 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x620>
 8021730:	6830      	ldr	r0, [r6, #0]
 8021732:	6871      	ldr	r1, [r6, #4]
 8021734:	ac0e      	add	r4, sp, #56	@ 0x38
 8021736:	c403      	stmia	r4!, {r0, r1}
 8021738:	6818      	ldr	r0, [r3, #0]
 802173a:	6859      	ldr	r1, [r3, #4]
 802173c:	ac10      	add	r4, sp, #64	@ 0x40
 802173e:	c403      	stmia	r4!, {r0, r1}
 8021740:	a80e      	add	r0, sp, #56	@ 0x38
 8021742:	f7f8 feb9 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021746:	4631      	mov	r1, r6
 8021748:	a810      	add	r0, sp, #64	@ 0x40
 802174a:	f7f8 fedd 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802174e:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8021752:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8021756:	bfdd      	ittte	le
 8021758:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 802175c:	b293      	uxthle	r3, r2
 802175e:	fb91 f3f3 	sdivle	r3, r1, r3
 8021762:	2301      	movgt	r3, #1
 8021764:	9304      	str	r3, [sp, #16]
 8021766:	f105 0308 	add.w	r3, r5, #8
 802176a:	9904      	ldr	r1, [sp, #16]
 802176c:	9308      	str	r3, [sp, #32]
 802176e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 8021772:	440b      	add	r3, r1
 8021774:	3b01      	subs	r3, #1
 8021776:	fb93 f3f1 	sdiv	r3, r3, r1
 802177a:	9908      	ldr	r1, [sp, #32]
 802177c:	3b01      	subs	r3, #1
 802177e:	b29b      	uxth	r3, r3
 8021780:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8021784:	9309      	str	r3, [sp, #36]	@ 0x24
 8021786:	9904      	ldr	r1, [sp, #16]
 8021788:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 802178c:	fb93 f0f1 	sdiv	r0, r3, r1
 8021790:	b284      	uxth	r4, r0
 8021792:	9405      	str	r4, [sp, #20]
 8021794:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8021798:	fb05 3914 	mls	r9, r5, r4, r3
 802179c:	fb19 f902 	smulbb	r9, r9, r2
 80217a0:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80217a4:	4489      	add	r9, r1
 80217a6:	fa1f f989 	uxth.w	r9, r9
 80217aa:	2d00      	cmp	r5, #0
 80217ac:	d05d      	beq.n	802186a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x152>
 80217ae:	9808      	ldr	r0, [sp, #32]
 80217b0:	1e6a      	subs	r2, r5, #1
 80217b2:	f850 a022 	ldr.w	sl, [r0, r2, lsl #2]
 80217b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80217b8:	fa9a fa8a 	rev.w	sl, sl
 80217bc:	4492      	add	sl, r2
 80217be:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 80217c2:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 80217c6:	4411      	add	r1, r2
 80217c8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80217cc:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80217d0:	4413      	add	r3, r2
 80217d2:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 80217d6:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 80217da:	f04f 0600 	mov.w	r6, #0
 80217de:	9302      	str	r3, [sp, #8]
 80217e0:	4bca      	ldr	r3, [pc, #808]	@ (8021b0c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f4>)
 80217e2:	6818      	ldr	r0, [r3, #0]
 80217e4:	6803      	ldr	r3, [r0, #0]
 80217e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80217e8:	4798      	blx	r3
 80217ea:	4bc9      	ldr	r3, [pc, #804]	@ (8021b10 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f8>)
 80217ec:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 80217f0:	881b      	ldrh	r3, [r3, #0]
 80217f2:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 80217f6:	2100      	movs	r1, #0
 80217f8:	fb03 2404 	mla	r4, r3, r4, r2
 80217fc:	436b      	muls	r3, r5
 80217fe:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8021802:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8021806:	930d      	str	r3, [sp, #52]	@ 0x34
 8021808:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 802180c:	2280      	movs	r2, #128	@ 0x80
 802180e:	fb99 f3f3 	sdiv	r3, r9, r3
 8021812:	9306      	str	r3, [sp, #24]
 8021814:	9b01      	ldr	r3, [sp, #4]
 8021816:	43db      	mvns	r3, r3
 8021818:	b2db      	uxtb	r3, r3
 802181a:	930a      	str	r3, [sp, #40]	@ 0x28
 802181c:	9b03      	ldr	r3, [sp, #12]
 802181e:	3304      	adds	r3, #4
 8021820:	4618      	mov	r0, r3
 8021822:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021824:	f00c fca8 	bl	802e178 <memset>
 8021828:	4bba      	ldr	r3, [pc, #744]	@ (8021b14 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3fc>)
 802182a:	9300      	str	r3, [sp, #0]
 802182c:	2300      	movs	r3, #0
 802182e:	9307      	str	r3, [sp, #28]
 8021830:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021832:	42a3      	cmp	r3, r4
 8021834:	f240 827b 	bls.w	8021d2e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x616>
 8021838:	f04f 0e07 	mov.w	lr, #7
 802183c:	f1b9 0f00 	cmp.w	r9, #0
 8021840:	f000 8159 	beq.w	8021af6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3de>
 8021844:	f89a 5000 	ldrb.w	r5, [sl]
 8021848:	f10a 0701 	add.w	r7, sl, #1
 802184c:	b2ed      	uxtb	r5, r5
 802184e:	11aa      	asrs	r2, r5, #6
 8021850:	d10e      	bne.n	8021870 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x158>
 8021852:	9b03      	ldr	r3, [sp, #12]
 8021854:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 8021858:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 802185c:	88ae      	ldrh	r6, [r5, #4]
 802185e:	f109 39ff 	add.w	r9, r9, #4294967295
 8021862:	fa1f f989 	uxth.w	r9, r9
 8021866:	46ba      	mov	sl, r7
 8021868:	e7e8      	b.n	802183c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x124>
 802186a:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 802186e:	e7a6      	b.n	80217be <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0xa6>
 8021870:	2a01      	cmp	r2, #1
 8021872:	d129      	bne.n	80218c8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1b0>
 8021874:	2103      	movs	r1, #3
 8021876:	f3c6 0304 	ubfx	r3, r6, #0, #5
 802187a:	f005 0203 	and.w	r2, r5, #3
 802187e:	3b02      	subs	r3, #2
 8021880:	4413      	add	r3, r2
 8021882:	f003 031f 	and.w	r3, r3, #31
 8021886:	f3c5 0281 	ubfx	r2, r5, #2, #2
 802188a:	f363 0604 	bfi	r6, r3, #0, #5
 802188e:	3a02      	subs	r2, #2
 8021890:	eb02 1256 	add.w	r2, r2, r6, lsr #5
 8021894:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8021898:	f3c5 1501 	ubfx	r5, r5, #4, #2
 802189c:	f362 164a 	bfi	r6, r2, #5, #6
 80218a0:	3d02      	subs	r5, #2
 80218a2:	eb05 25d6 	add.w	r5, r5, r6, lsr #11
 80218a6:	f005 051f 	and.w	r5, r5, #31
 80218aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80218ae:	fb11 2205 	smlabb	r2, r1, r5, r2
 80218b2:	fb1e 2303 	smlabb	r3, lr, r3, r2
 80218b6:	9a03      	ldr	r2, [sp, #12]
 80218b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80218bc:	f365 26cf 	bfi	r6, r5, #11, #5
 80218c0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80218c4:	809e      	strh	r6, [r3, #4]
 80218c6:	e7ca      	b.n	802185e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x146>
 80218c8:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 80218cc:	2a02      	cmp	r2, #2
 80218ce:	b2ab      	uxth	r3, r5
 80218d0:	d136      	bne.n	8021940 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 80218d2:	2101      	movs	r1, #1
 80218d4:	fb12 1205 	smlabb	r2, r2, r5, r1
 80218d8:	4492      	add	sl, r2
 80218da:	463a      	mov	r2, r7
 80218dc:	4552      	cmp	r2, sl
 80218de:	d01c      	beq.n	802191a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x202>
 80218e0:	4694      	mov	ip, r2
 80218e2:	f04f 0b03 	mov.w	fp, #3
 80218e6:	f81c 1b02 	ldrb.w	r1, [ip], #2
 80218ea:	7852      	ldrb	r2, [r2, #1]
 80218ec:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80218f0:	f3c1 1045 	ubfx	r0, r1, #5, #6
 80218f4:	ea4f 28d1 	mov.w	r8, r1, lsr #11
 80218f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80218fc:	fb1b 0008 	smlabb	r0, fp, r8, r0
 8021900:	f001 021f 	and.w	r2, r1, #31
 8021904:	fb1e 0002 	smlabb	r0, lr, r2, r0
 8021908:	9a03      	ldr	r2, [sp, #12]
 802190a:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 802190e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8021912:	460e      	mov	r6, r1
 8021914:	8081      	strh	r1, [r0, #4]
 8021916:	4662      	mov	r2, ip
 8021918:	e7e0      	b.n	80218dc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1c4>
 802191a:	4599      	cmp	r9, r3
 802191c:	d20b      	bcs.n	8021936 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21e>
 802191e:	eba5 0509 	sub.w	r5, r5, r9
 8021922:	2d00      	cmp	r5, #0
 8021924:	eb07 0749 	add.w	r7, r7, r9, lsl #1
 8021928:	f300 8209 	bgt.w	8021d3e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x626>
 802192c:	2301      	movs	r3, #1
 802192e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8021932:	9307      	str	r3, [sp, #28]
 8021934:	e00c      	b.n	8021950 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8021936:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802193a:	eba9 0903 	sub.w	r9, r9, r3
 802193e:	e790      	b.n	8021862 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x14a>
 8021940:	4599      	cmp	r9, r3
 8021942:	d2fa      	bcs.n	802193a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x222>
 8021944:	eba5 0509 	sub.w	r5, r5, r9
 8021948:	2d00      	cmp	r5, #0
 802194a:	dc1d      	bgt.n	8021988 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x270>
 802194c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8021950:	f04f 0b00 	mov.w	fp, #0
 8021954:	f1b8 0f00 	cmp.w	r8, #0
 8021958:	f340 81a1 	ble.w	8021c9e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x586>
 802195c:	783b      	ldrb	r3, [r7, #0]
 802195e:	f107 0a01 	add.w	sl, r7, #1
 8021962:	b2db      	uxtb	r3, r3
 8021964:	119a      	asrs	r2, r3, #6
 8021966:	f040 80d7 	bne.w	8021b18 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x400>
 802196a:	9a03      	ldr	r2, [sp, #12]
 802196c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021970:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021974:	889e      	ldrh	r6, [r3, #4]
 8021976:	9b01      	ldr	r3, [sp, #4]
 8021978:	2bff      	cmp	r3, #255	@ 0xff
 802197a:	f040 81e9 	bne.w	8021d50 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x638>
 802197e:	8026      	strh	r6, [r4, #0]
 8021980:	f108 38ff 	add.w	r8, r8, #4294967295
 8021984:	3402      	adds	r4, #2
 8021986:	e0be      	b.n	8021b06 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8021988:	9b02      	ldr	r3, [sp, #8]
 802198a:	9a02      	ldr	r2, [sp, #8]
 802198c:	42ab      	cmp	r3, r5
 802198e:	bfa8      	it	ge
 8021990:	462b      	movge	r3, r5
 8021992:	eba2 0803 	sub.w	r8, r2, r3
 8021996:	9a07      	ldr	r2, [sp, #28]
 8021998:	1aed      	subs	r5, r5, r3
 802199a:	2a00      	cmp	r2, #0
 802199c:	d05a      	beq.n	8021a54 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x33c>
 802199e:	9a01      	ldr	r2, [sp, #4]
 80219a0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80219a4:	2aff      	cmp	r2, #255	@ 0xff
 80219a6:	d049      	beq.n	8021a3c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 80219a8:	f8bd e004 	ldrh.w	lr, [sp, #4]
 80219ac:	f8bd 9028 	ldrh.w	r9, [sp, #40]	@ 0x28
 80219b0:	42a3      	cmp	r3, r4
 80219b2:	f240 80a5 	bls.w	8021b00 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 80219b6:	46bc      	mov	ip, r7
 80219b8:	8820      	ldrh	r0, [r4, #0]
 80219ba:	f81c 2b02 	ldrb.w	r2, [ip], #2
 80219be:	7879      	ldrb	r1, [r7, #1]
 80219c0:	ea4f 2a20 	mov.w	sl, r0, asr #8
 80219c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80219c8:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 80219cc:	b212      	sxth	r2, r2
 80219ce:	fb1a fa09 	smulbb	sl, sl, r9
 80219d2:	b291      	uxth	r1, r2
 80219d4:	120f      	asrs	r7, r1, #8
 80219d6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80219da:	fb07 a70e 	mla	r7, r7, lr, sl
 80219de:	ea4f 0ae0 	mov.w	sl, r0, asr #3
 80219e2:	00c0      	lsls	r0, r0, #3
 80219e4:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80219e8:	b2c0      	uxtb	r0, r0
 80219ea:	fb1a fa09 	smulbb	sl, sl, r9
 80219ee:	fb10 f009 	smulbb	r0, r0, r9
 80219f2:	10c9      	asrs	r1, r1, #3
 80219f4:	00d2      	lsls	r2, r2, #3
 80219f6:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80219fa:	b2d2      	uxtb	r2, r2
 80219fc:	fb01 a10e 	mla	r1, r1, lr, sl
 8021a00:	fb02 020e 	mla	r2, r2, lr, r0
 8021a04:	b2bf      	uxth	r7, r7
 8021a06:	b289      	uxth	r1, r1
 8021a08:	b292      	uxth	r2, r2
 8021a0a:	1c78      	adds	r0, r7, #1
 8021a0c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8021a10:	f101 0a01 	add.w	sl, r1, #1
 8021a14:	1c50      	adds	r0, r2, #1
 8021a16:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021a1a:	eb0a 2a11 	add.w	sl, sl, r1, lsr #8
 8021a1e:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8021a22:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8021a26:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021a2a:	4307      	orrs	r7, r0
 8021a2c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8021a30:	ea47 070a 	orr.w	r7, r7, sl
 8021a34:	f824 7b02 	strh.w	r7, [r4], #2
 8021a38:	4667      	mov	r7, ip
 8021a3a:	e7b9      	b.n	80219b0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x298>
 8021a3c:	42a3      	cmp	r3, r4
 8021a3e:	d95f      	bls.n	8021b00 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 8021a40:	463a      	mov	r2, r7
 8021a42:	f812 1b02 	ldrb.w	r1, [r2], #2
 8021a46:	7878      	ldrb	r0, [r7, #1]
 8021a48:	4617      	mov	r7, r2
 8021a4a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8021a4e:	f824 1b02 	strh.w	r1, [r4], #2
 8021a52:	e7f3      	b.n	8021a3c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 8021a54:	9901      	ldr	r1, [sp, #4]
 8021a56:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8021a5a:	29ff      	cmp	r1, #255	@ 0xff
 8021a5c:	b2b2      	uxth	r2, r6
 8021a5e:	d044      	beq.n	8021aea <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 8021a60:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8021a64:	ea4f 2922 	mov.w	r9, r2, asr #8
 8021a68:	4608      	mov	r0, r1
 8021a6a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8021a6e:	f009 09f8 	and.w	r9, r9, #248	@ 0xf8
 8021a72:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8021a76:	fb09 f901 	mul.w	r9, r9, r1
 8021a7a:	fb0e fe01 	mul.w	lr, lr, r1
 8021a7e:	00d1      	lsls	r1, r2, #3
 8021a80:	b2c9      	uxtb	r1, r1
 8021a82:	4341      	muls	r1, r0
 8021a84:	f8bd a028 	ldrh.w	sl, [sp, #40]	@ 0x28
 8021a88:	429c      	cmp	r4, r3
 8021a8a:	f4bf af61 	bcs.w	8021950 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8021a8e:	8822      	ldrh	r2, [r4, #0]
 8021a90:	1210      	asrs	r0, r2, #8
 8021a92:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8021a96:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8021a9a:	00d2      	lsls	r2, r2, #3
 8021a9c:	fb00 900a 	mla	r0, r0, sl, r9
 8021aa0:	b2d2      	uxtb	r2, r2
 8021aa2:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8021aa6:	fb02 120a 	mla	r2, r2, sl, r1
 8021aaa:	fb0c ec0a 	mla	ip, ip, sl, lr
 8021aae:	b280      	uxth	r0, r0
 8021ab0:	b292      	uxth	r2, r2
 8021ab2:	f100 0b01 	add.w	fp, r0, #1
 8021ab6:	fa1f fc8c 	uxth.w	ip, ip
 8021aba:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8021abe:	1c50      	adds	r0, r2, #1
 8021ac0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021ac4:	f10c 0201 	add.w	r2, ip, #1
 8021ac8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021acc:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 8021ad0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8021ad4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021ad8:	ea40 0b0b 	orr.w	fp, r0, fp
 8021adc:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8021ae0:	ea4b 0b0c 	orr.w	fp, fp, ip
 8021ae4:	f824 bb02 	strh.w	fp, [r4], #2
 8021ae8:	e7ce      	b.n	8021a88 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x370>
 8021aea:	429c      	cmp	r4, r3
 8021aec:	f4bf af30 	bcs.w	8021950 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8021af0:	f824 2b02 	strh.w	r2, [r4], #2
 8021af4:	e7f9      	b.n	8021aea <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 8021af6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8021afa:	4657      	mov	r7, sl
 8021afc:	464d      	mov	r5, r9
 8021afe:	e727      	b.n	8021950 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8021b00:	2300      	movs	r3, #0
 8021b02:	e716      	b.n	8021932 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21a>
 8021b04:	44bb      	add	fp, r7
 8021b06:	4657      	mov	r7, sl
 8021b08:	e724      	b.n	8021954 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x23c>
 8021b0a:	bf00      	nop
 8021b0c:	2005bd1c 	.word	0x2005bd1c
 8021b10:	2005bd16 	.word	0x2005bd16
 8021b14:	20045700 	.word	0x20045700
 8021b18:	2a01      	cmp	r2, #1
 8021b1a:	d12a      	bne.n	8021b72 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x45a>
 8021b1c:	f3c6 0104 	ubfx	r1, r6, #0, #5
 8021b20:	f003 0203 	and.w	r2, r3, #3
 8021b24:	3902      	subs	r1, #2
 8021b26:	4411      	add	r1, r2
 8021b28:	f001 011f 	and.w	r1, r1, #31
 8021b2c:	f3c3 0081 	ubfx	r0, r3, #2, #2
 8021b30:	f361 0604 	bfi	r6, r1, #0, #5
 8021b34:	3802      	subs	r0, #2
 8021b36:	eb00 1056 	add.w	r0, r0, r6, lsr #5
 8021b3a:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8021b3e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8021b42:	f360 164a 	bfi	r6, r0, #5, #6
 8021b46:	3b02      	subs	r3, #2
 8021b48:	eb03 22d6 	add.w	r2, r3, r6, lsr #11
 8021b4c:	f002 031f 	and.w	r3, r2, #31
 8021b50:	2203      	movs	r2, #3
 8021b52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8021b56:	f363 26cf 	bfi	r6, r3, #11, #5
 8021b5a:	fb12 0303 	smlabb	r3, r2, r3, r0
 8021b5e:	2207      	movs	r2, #7
 8021b60:	fb12 3301 	smlabb	r3, r2, r1, r3
 8021b64:	9a03      	ldr	r2, [sp, #12]
 8021b66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021b6a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021b6e:	809e      	strh	r6, [r3, #4]
 8021b70:	e701      	b.n	8021976 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x25e>
 8021b72:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 8021b76:	45a8      	cmp	r8, r5
 8021b78:	4647      	mov	r7, r8
 8021b7a:	bfa8      	it	ge
 8021b7c:	462f      	movge	r7, r5
 8021b7e:	2a02      	cmp	r2, #2
 8021b80:	d154      	bne.n	8021c2c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x514>
 8021b82:	9b01      	ldr	r3, [sp, #4]
 8021b84:	2bff      	cmp	r3, #255	@ 0xff
 8021b86:	d01a      	beq.n	8021bbe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 8021b88:	eb0b 0307 	add.w	r3, fp, r7
 8021b8c:	2b40      	cmp	r3, #64	@ 0x40
 8021b8e:	dd16      	ble.n	8021bbe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 8021b90:	ea4f 094b 	mov.w	r9, fp, lsl #1
 8021b94:	4649      	mov	r1, r9
 8021b96:	9800      	ldr	r0, [sp, #0]
 8021b98:	f7f1 fcec 	bl	8013574 <_ZN8touchgfx5paint9flushLineEPmi>
 8021b9c:	465a      	mov	r2, fp
 8021b9e:	9b01      	ldr	r3, [sp, #4]
 8021ba0:	4620      	mov	r0, r4
 8021ba2:	9900      	ldr	r1, [sp, #0]
 8021ba4:	f7f1 fd44 	bl	8013630 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8021ba8:	9b00      	ldr	r3, [sp, #0]
 8021baa:	f04f 0b00 	mov.w	fp, #0
 8021bae:	461a      	mov	r2, r3
 8021bb0:	4b6b      	ldr	r3, [pc, #428]	@ (8021d60 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8021bb2:	444c      	add	r4, r9
 8021bb4:	429a      	cmp	r2, r3
 8021bb6:	bf0c      	ite	eq
 8021bb8:	4b6a      	ldreq	r3, [pc, #424]	@ (8021d64 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 8021bba:	4b69      	ldrne	r3, [pc, #420]	@ (8021d60 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8021bbc:	9300      	str	r3, [sp, #0]
 8021bbe:	4652      	mov	r2, sl
 8021bc0:	2100      	movs	r1, #0
 8021bc2:	42a9      	cmp	r1, r5
 8021bc4:	da2c      	bge.n	8021c20 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x508>
 8021bc6:	4694      	mov	ip, r2
 8021bc8:	f04f 0903 	mov.w	r9, #3
 8021bcc:	f81c 3b02 	ldrb.w	r3, [ip], #2
 8021bd0:	7852      	ldrb	r2, [r2, #1]
 8021bd2:	42b9      	cmp	r1, r7
 8021bd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8021bd8:	f3c3 1045 	ubfx	r0, r3, #5, #6
 8021bdc:	ea4f 2ed3 	mov.w	lr, r3, lsr #11
 8021be0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8021be4:	fb19 000e 	smlabb	r0, r9, lr, r0
 8021be8:	f04f 0e07 	mov.w	lr, #7
 8021bec:	f003 021f 	and.w	r2, r3, #31
 8021bf0:	fb1e 0002 	smlabb	r0, lr, r2, r0
 8021bf4:	9a03      	ldr	r2, [sp, #12]
 8021bf6:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8021bfa:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8021bfe:	461e      	mov	r6, r3
 8021c00:	8083      	strh	r3, [r0, #4]
 8021c02:	da0a      	bge.n	8021c1a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x502>
 8021c04:	9a01      	ldr	r2, [sp, #4]
 8021c06:	2aff      	cmp	r2, #255	@ 0xff
 8021c08:	bf15      	itete	ne
 8021c0a:	9a00      	ldrne	r2, [sp, #0]
 8021c0c:	8023      	strheq	r3, [r4, #0]
 8021c0e:	f822 301b 	strhne.w	r3, [r2, fp, lsl #1]
 8021c12:	3402      	addeq	r4, #2
 8021c14:	bf18      	it	ne
 8021c16:	f10b 0b01 	addne.w	fp, fp, #1
 8021c1a:	3101      	adds	r1, #1
 8021c1c:	4662      	mov	r2, ip
 8021c1e:	e7d0      	b.n	8021bc2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4aa>
 8021c20:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8021c24:	eba8 0807 	sub.w	r8, r8, r7
 8021c28:	1bed      	subs	r5, r5, r7
 8021c2a:	e76c      	b.n	8021b06 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8021c2c:	9b01      	ldr	r3, [sp, #4]
 8021c2e:	eba8 0807 	sub.w	r8, r8, r7
 8021c32:	2bff      	cmp	r3, #255	@ 0xff
 8021c34:	eba5 0507 	sub.w	r5, r5, r7
 8021c38:	fa1f f986 	uxth.w	r9, r6
 8021c3c:	d027      	beq.n	8021c8e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x576>
 8021c3e:	eb0b 0307 	add.w	r3, fp, r7
 8021c42:	2b40      	cmp	r3, #64	@ 0x40
 8021c44:	dd18      	ble.n	8021c78 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x560>
 8021c46:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8021c4a:	4619      	mov	r1, r3
 8021c4c:	9800      	ldr	r0, [sp, #0]
 8021c4e:	930c      	str	r3, [sp, #48]	@ 0x30
 8021c50:	f7f1 fc90 	bl	8013574 <_ZN8touchgfx5paint9flushLineEPmi>
 8021c54:	465a      	mov	r2, fp
 8021c56:	9b01      	ldr	r3, [sp, #4]
 8021c58:	4620      	mov	r0, r4
 8021c5a:	9900      	ldr	r1, [sp, #0]
 8021c5c:	f7f1 fce8 	bl	8013630 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8021c60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021c62:	f04f 0b00 	mov.w	fp, #0
 8021c66:	441c      	add	r4, r3
 8021c68:	9b00      	ldr	r3, [sp, #0]
 8021c6a:	461a      	mov	r2, r3
 8021c6c:	4b3c      	ldr	r3, [pc, #240]	@ (8021d60 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8021c6e:	429a      	cmp	r2, r3
 8021c70:	bf0c      	ite	eq
 8021c72:	4b3c      	ldreq	r3, [pc, #240]	@ (8021d64 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 8021c74:	4b3a      	ldrne	r3, [pc, #232]	@ (8021d60 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8021c76:	9300      	str	r3, [sp, #0]
 8021c78:	9b00      	ldr	r3, [sp, #0]
 8021c7a:	eb03 024b 	add.w	r2, r3, fp, lsl #1
 8021c7e:	463b      	mov	r3, r7
 8021c80:	2b00      	cmp	r3, #0
 8021c82:	f43f af3f 	beq.w	8021b04 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ec>
 8021c86:	f822 9b02 	strh.w	r9, [r2], #2
 8021c8a:	3b01      	subs	r3, #1
 8021c8c:	e7f8      	b.n	8021c80 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x568>
 8021c8e:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8021c92:	42a7      	cmp	r7, r4
 8021c94:	f67f af37 	bls.w	8021b06 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8021c98:	f824 9b02 	strh.w	r9, [r4], #2
 8021c9c:	e7f9      	b.n	8021c92 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x57a>
 8021c9e:	f1bb 0f00 	cmp.w	fp, #0
 8021ca2:	d00c      	beq.n	8021cbe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5a6>
 8021ca4:	ea4f 084b 	mov.w	r8, fp, lsl #1
 8021ca8:	4641      	mov	r1, r8
 8021caa:	9800      	ldr	r0, [sp, #0]
 8021cac:	f7f1 fc62 	bl	8013574 <_ZN8touchgfx5paint9flushLineEPmi>
 8021cb0:	4620      	mov	r0, r4
 8021cb2:	9b01      	ldr	r3, [sp, #4]
 8021cb4:	465a      	mov	r2, fp
 8021cb6:	9900      	ldr	r1, [sp, #0]
 8021cb8:	f7f1 fcba 	bl	8013630 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8021cbc:	4444      	add	r4, r8
 8021cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8021d68 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x650>)
 8021cc0:	9a02      	ldr	r2, [sp, #8]
 8021cc2:	881b      	ldrh	r3, [r3, #0]
 8021cc4:	1a9b      	subs	r3, r3, r2
 8021cc6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021cca:	9b06      	ldr	r3, [sp, #24]
 8021ccc:	3301      	adds	r3, #1
 8021cce:	9306      	str	r3, [sp, #24]
 8021cd0:	9a06      	ldr	r2, [sp, #24]
 8021cd2:	9b04      	ldr	r3, [sp, #16]
 8021cd4:	4293      	cmp	r3, r2
 8021cd6:	d120      	bne.n	8021d1a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x602>
 8021cd8:	9b05      	ldr	r3, [sp, #20]
 8021cda:	9a05      	ldr	r2, [sp, #20]
 8021cdc:	f103 0801 	add.w	r8, r3, #1
 8021ce0:	9b08      	ldr	r3, [sp, #32]
 8021ce2:	2100      	movs	r1, #0
 8021ce4:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8021ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021cea:	ba3f      	rev	r7, r7
 8021cec:	2280      	movs	r2, #128	@ 0x80
 8021cee:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8021cf0:	441f      	add	r7, r3
 8021cf2:	f8bd 9040 	ldrh.w	r9, [sp, #64]	@ 0x40
 8021cf6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8021cfa:	f00c fa3d 	bl	802e178 <memset>
 8021cfe:	2300      	movs	r3, #0
 8021d00:	f04f 0600 	mov.w	r6, #0
 8021d04:	eba9 0905 	sub.w	r9, r9, r5
 8021d08:	fa1f f989 	uxth.w	r9, r9
 8021d0c:	f8cd 8014 	str.w	r8, [sp, #20]
 8021d10:	9306      	str	r3, [sp, #24]
 8021d12:	f7f1 fc17 	bl	8013544 <_ZN8touchgfx5paint8tearDownEv>
 8021d16:	46ba      	mov	sl, r7
 8021d18:	e58a      	b.n	8021830 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x118>
 8021d1a:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 8021d1e:	9b02      	ldr	r3, [sp, #8]
 8021d20:	eba9 0903 	sub.w	r9, r9, r3
 8021d24:	eba9 0505 	sub.w	r5, r9, r5
 8021d28:	fa1f f985 	uxth.w	r9, r5
 8021d2c:	e7f1      	b.n	8021d12 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5fa>
 8021d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8021d6c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x654>)
 8021d30:	6818      	ldr	r0, [r3, #0]
 8021d32:	6803      	ldr	r3, [r0, #0]
 8021d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021d36:	4798      	blx	r3
 8021d38:	b013      	add	sp, #76	@ 0x4c
 8021d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d3e:	9b02      	ldr	r3, [sp, #8]
 8021d40:	9a02      	ldr	r2, [sp, #8]
 8021d42:	42ab      	cmp	r3, r5
 8021d44:	bfa8      	it	ge
 8021d46:	462b      	movge	r3, r5
 8021d48:	eba2 0803 	sub.w	r8, r2, r3
 8021d4c:	1aed      	subs	r5, r5, r3
 8021d4e:	e626      	b.n	802199e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x286>
 8021d50:	f108 38ff 	add.w	r8, r8, #4294967295
 8021d54:	fa1f f986 	uxth.w	r9, r6
 8021d58:	2500      	movs	r5, #0
 8021d5a:	2701      	movs	r7, #1
 8021d5c:	e76f      	b.n	8021c3e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x526>
 8021d5e:	bf00      	nop
 8021d60:	20045700 	.word	0x20045700
 8021d64:	20045800 	.word	0x20045800
 8021d68:	2005bd16 	.word	0x2005bd16
 8021d6c:	2005bd1c 	.word	0x2005bd1c

08021d70 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8021d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d74:	b08f      	sub	sp, #60	@ 0x3c
 8021d76:	9203      	str	r2, [sp, #12]
 8021d78:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8021d7c:	461c      	mov	r4, r3
 8021d7e:	460f      	mov	r7, r1
 8021d80:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021d82:	9202      	str	r2, [sp, #8]
 8021d84:	2a00      	cmp	r2, #0
 8021d86:	f000 812a 	beq.w	8021fde <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26e>
 8021d8a:	6820      	ldr	r0, [r4, #0]
 8021d8c:	6861      	ldr	r1, [r4, #4]
 8021d8e:	aa0a      	add	r2, sp, #40	@ 0x28
 8021d90:	c203      	stmia	r2!, {r0, r1}
 8021d92:	6818      	ldr	r0, [r3, #0]
 8021d94:	6859      	ldr	r1, [r3, #4]
 8021d96:	aa0c      	add	r2, sp, #48	@ 0x30
 8021d98:	c203      	stmia	r2!, {r0, r1}
 8021d9a:	a80a      	add	r0, sp, #40	@ 0x28
 8021d9c:	f7f8 fb8c 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021da0:	4621      	mov	r1, r4
 8021da2:	a80c      	add	r0, sp, #48	@ 0x30
 8021da4:	f7f8 fbb0 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021da8:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8021dac:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8021db0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8021db4:	bfdd      	ittte	le
 8021db6:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8021dba:	b2b3      	uxthle	r3, r6
 8021dbc:	fb92 f3f3 	sdivle	r3, r2, r3
 8021dc0:	2301      	movgt	r3, #1
 8021dc2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8021dc6:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8021dca:	fb92 f1f3 	sdiv	r1, r2, r3
 8021dce:	fa1f fc81 	uxth.w	ip, r1
 8021dd2:	4661      	mov	r1, ip
 8021dd4:	fb0c 2413 	mls	r4, ip, r3, r2
 8021dd8:	fb14 f406 	smulbb	r4, r4, r6
 8021ddc:	441d      	add	r5, r3
 8021dde:	3d01      	subs	r5, #1
 8021de0:	4404      	add	r4, r0
 8021de2:	fb95 f5f3 	sdiv	r5, r5, r3
 8021de6:	b2a4      	uxth	r4, r4
 8021de8:	b121      	cbz	r1, 8021df4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 8021dea:	9b03      	ldr	r3, [sp, #12]
 8021dec:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8021df0:	ba1b      	rev	r3, r3
 8021df2:	441f      	add	r7, r3
 8021df4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8021df8:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8021dfc:	4418      	add	r0, r3
 8021dfe:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8021e02:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8021e06:	441a      	add	r2, r3
 8021e08:	4b76      	ldr	r3, [pc, #472]	@ (8021fe4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 8021e0a:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8021e0e:	6818      	ldr	r0, [r3, #0]
 8021e10:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8021e14:	6803      	ldr	r3, [r0, #0]
 8021e16:	b2ad      	uxth	r5, r5
 8021e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021e1a:	4798      	blx	r3
 8021e1c:	4a72      	ldr	r2, [pc, #456]	@ (8021fe8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x278>)
 8021e1e:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8021e22:	8813      	ldrh	r3, [r2, #0]
 8021e24:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8021e28:	00ad      	lsls	r5, r5, #2
 8021e2a:	fb03 c101 	mla	r1, r3, r1, ip
 8021e2e:	4373      	muls	r3, r6
 8021e30:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8021e34:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021e38:	2c00      	cmp	r4, #0
 8021e3a:	9304      	str	r3, [sp, #16]
 8021e3c:	f105 0304 	add.w	r3, r5, #4
 8021e40:	9305      	str	r3, [sp, #20]
 8021e42:	bf0c      	ite	eq
 8021e44:	46c8      	moveq	r8, r9
 8021e46:	f04f 0800 	movne.w	r8, #0
 8021e4a:	2300      	movs	r3, #0
 8021e4c:	fa1f f888 	uxth.w	r8, r8
 8021e50:	9301      	str	r3, [sp, #4]
 8021e52:	9209      	str	r2, [sp, #36]	@ 0x24
 8021e54:	9a04      	ldr	r2, [sp, #16]
 8021e56:	4282      	cmp	r2, r0
 8021e58:	f240 80bc 	bls.w	8021fd4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x264>
 8021e5c:	b95b      	cbnz	r3, 8021e76 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x106>
 8021e5e:	783a      	ldrb	r2, [r7, #0]
 8021e60:	0993      	lsrs	r3, r2, #6
 8021e62:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8021e66:	9201      	str	r2, [sp, #4]
 8021e68:	1e5a      	subs	r2, r3, #1
 8021e6a:	2a02      	cmp	r2, #2
 8021e6c:	bf8d      	iteet	hi
 8021e6e:	787b      	ldrbhi	r3, [r7, #1]
 8021e70:	3701      	addls	r7, #1
 8021e72:	b29b      	uxthls	r3, r3
 8021e74:	3702      	addhi	r7, #2
 8021e76:	b184      	cbz	r4, 8021e9a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8021e78:	429c      	cmp	r4, r3
 8021e7a:	bf99      	ittee	ls
 8021e7c:	1b1c      	subls	r4, r3, r4
 8021e7e:	fa1f fa84 	uxthls.w	sl, r4
 8021e82:	46c4      	movhi	ip, r8
 8021e84:	f04f 0a00 	movhi.w	sl, #0
 8021e88:	bf93      	iteet	ls
 8021e8a:	2400      	movls	r4, #0
 8021e8c:	1ae4      	subhi	r4, r4, r3
 8021e8e:	b2a4      	uxthhi	r4, r4
 8021e90:	fa1f fc89 	uxthls.w	ip, r9
 8021e94:	4653      	mov	r3, sl
 8021e96:	46e0      	mov	r8, ip
 8021e98:	e7dc      	b.n	8021e54 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe4>
 8021e9a:	2204      	movs	r2, #4
 8021e9c:	4615      	mov	r5, r2
 8021e9e:	4543      	cmp	r3, r8
 8021ea0:	bf2c      	ite	cs
 8021ea2:	46c6      	movcs	lr, r8
 8021ea4:	469e      	movcc	lr, r3
 8021ea6:	9905      	ldr	r1, [sp, #20]
 8021ea8:	9a01      	ldr	r2, [sp, #4]
 8021eaa:	bf28      	it	cs
 8021eac:	eba3 0a08 	subcs.w	sl, r3, r8
 8021eb0:	fb15 1202 	smlabb	r2, r5, r2, r1
 8021eb4:	9903      	ldr	r1, [sp, #12]
 8021eb6:	bf38      	it	cc
 8021eb8:	eba8 0c03 	subcc.w	ip, r8, r3
 8021ebc:	588a      	ldr	r2, [r1, r2]
 8021ebe:	bf28      	it	cs
 8021ec0:	fa1f fa8a 	uxthcs.w	sl, sl
 8021ec4:	ea4f 6112 	mov.w	r1, r2, lsr #24
 8021ec8:	bf2e      	itee	cs
 8021eca:	46a4      	movcs	ip, r4
 8021ecc:	fa1f fc8c 	uxthcc.w	ip, ip
 8021ed0:	46a2      	movcc	sl, r4
 8021ed2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8021ed6:	2900      	cmp	r1, #0
 8021ed8:	d066      	beq.n	8021fa8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 8021eda:	29ff      	cmp	r1, #255	@ 0xff
 8021edc:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8021ee0:	d114      	bne.n	8021f0c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x19c>
 8021ee2:	9d02      	ldr	r5, [sp, #8]
 8021ee4:	2dff      	cmp	r5, #255	@ 0xff
 8021ee6:	d111      	bne.n	8021f0c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x19c>
 8021ee8:	0951      	lsrs	r1, r2, #5
 8021eea:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 8021eee:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8021ef2:	f026 0607 	bic.w	r6, r6, #7
 8021ef6:	430e      	orrs	r6, r1
 8021ef8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021efc:	4316      	orrs	r6, r2
 8021efe:	b2b6      	uxth	r6, r6
 8021f00:	4486      	add	lr, r0
 8021f02:	4586      	cmp	lr, r0
 8021f04:	d051      	beq.n	8021faa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8021f06:	f820 6b02 	strh.w	r6, [r0], #2
 8021f0a:	e7fa      	b.n	8021f02 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x192>
 8021f0c:	9d02      	ldr	r5, [sp, #8]
 8021f0e:	b2f6      	uxtb	r6, r6
 8021f10:	4369      	muls	r1, r5
 8021f12:	1c4d      	adds	r5, r1, #1
 8021f14:	eb05 2521 	add.w	r5, r5, r1, asr #8
 8021f18:	122d      	asrs	r5, r5, #8
 8021f1a:	ea6f 0b05 	mvn.w	fp, r5
 8021f1e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8021f22:	b2ad      	uxth	r5, r5
 8021f24:	b2d2      	uxtb	r2, r2
 8021f26:	fb11 f105 	smulbb	r1, r1, r5
 8021f2a:	fb16 f605 	smulbb	r6, r6, r5
 8021f2e:	fb12 f205 	smulbb	r2, r2, r5
 8021f32:	b289      	uxth	r1, r1
 8021f34:	b2b6      	uxth	r6, r6
 8021f36:	b292      	uxth	r2, r2
 8021f38:	9106      	str	r1, [sp, #24]
 8021f3a:	9607      	str	r6, [sp, #28]
 8021f3c:	9208      	str	r2, [sp, #32]
 8021f3e:	4486      	add	lr, r0
 8021f40:	fa5f fb8b 	uxtb.w	fp, fp
 8021f44:	4586      	cmp	lr, r0
 8021f46:	d030      	beq.n	8021faa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8021f48:	8802      	ldrh	r2, [r0, #0]
 8021f4a:	9906      	ldr	r1, [sp, #24]
 8021f4c:	1216      	asrs	r6, r2, #8
 8021f4e:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8021f52:	10d5      	asrs	r5, r2, #3
 8021f54:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021f58:	fb06 160b 	mla	r6, r6, fp, r1
 8021f5c:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8021f60:	9907      	ldr	r1, [sp, #28]
 8021f62:	00d2      	lsls	r2, r2, #3
 8021f64:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021f68:	fb05 150b 	mla	r5, r5, fp, r1
 8021f6c:	b2d2      	uxtb	r2, r2
 8021f6e:	9908      	ldr	r1, [sp, #32]
 8021f70:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021f74:	fb02 120b 	mla	r2, r2, fp, r1
 8021f78:	b2b6      	uxth	r6, r6
 8021f7a:	b292      	uxth	r2, r2
 8021f7c:	1c71      	adds	r1, r6, #1
 8021f7e:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8021f82:	1c51      	adds	r1, r2, #1
 8021f84:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021f88:	b2ad      	uxth	r5, r5
 8021f8a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021f8e:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8021f92:	4316      	orrs	r6, r2
 8021f94:	1c6a      	adds	r2, r5, #1
 8021f96:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8021f9a:	096d      	lsrs	r5, r5, #5
 8021f9c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8021fa0:	432e      	orrs	r6, r5
 8021fa2:	f820 6b02 	strh.w	r6, [r0], #2
 8021fa6:	e7cd      	b.n	8021f44 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d4>
 8021fa8:	4470      	add	r0, lr
 8021faa:	4543      	cmp	r3, r8
 8021fac:	f4ff af72 	bcc.w	8021e94 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8021fb0:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8021fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021fb6:	fa1f fc89 	uxth.w	ip, r9
 8021fba:	eba4 040c 	sub.w	r4, r4, ip
 8021fbe:	881b      	ldrh	r3, [r3, #0]
 8021fc0:	b2a4      	uxth	r4, r4
 8021fc2:	2c00      	cmp	r4, #0
 8021fc4:	eba3 0309 	sub.w	r3, r3, r9
 8021fc8:	bf18      	it	ne
 8021fca:	f04f 0c00 	movne.w	ip, #0
 8021fce:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021fd2:	e75f      	b.n	8021e94 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8021fd4:	4b03      	ldr	r3, [pc, #12]	@ (8021fe4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 8021fd6:	6818      	ldr	r0, [r3, #0]
 8021fd8:	6803      	ldr	r3, [r0, #0]
 8021fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021fdc:	4798      	blx	r3
 8021fde:	b00f      	add	sp, #60	@ 0x3c
 8021fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fe4:	2005bd1c 	.word	0x2005bd1c
 8021fe8:	2005bd16 	.word	0x2005bd16

08021fec <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8021fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ff0:	b093      	sub	sp, #76	@ 0x4c
 8021ff2:	9205      	str	r2, [sp, #20]
 8021ff4:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 8021ff8:	461c      	mov	r4, r3
 8021ffa:	9101      	str	r1, [sp, #4]
 8021ffc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021ffe:	9202      	str	r2, [sp, #8]
 8022000:	2a00      	cmp	r2, #0
 8022002:	f000 812d 	beq.w	8022260 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 8022006:	6820      	ldr	r0, [r4, #0]
 8022008:	6861      	ldr	r1, [r4, #4]
 802200a:	aa0e      	add	r2, sp, #56	@ 0x38
 802200c:	c203      	stmia	r2!, {r0, r1}
 802200e:	6818      	ldr	r0, [r3, #0]
 8022010:	6859      	ldr	r1, [r3, #4]
 8022012:	aa10      	add	r2, sp, #64	@ 0x40
 8022014:	c203      	stmia	r2!, {r0, r1}
 8022016:	a80e      	add	r0, sp, #56	@ 0x38
 8022018:	f7f8 fa4e 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802201c:	4621      	mov	r1, r4
 802201e:	a810      	add	r0, sp, #64	@ 0x40
 8022020:	f7f8 fa72 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022024:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8022028:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 802202c:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8022030:	bfdd      	ittte	le
 8022032:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8022036:	b2b3      	uxthle	r3, r6
 8022038:	fb92 f3f3 	sdivle	r3, r2, r3
 802203c:	2301      	movgt	r3, #1
 802203e:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8022042:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 8022046:	fb92 f1f3 	sdiv	r1, r2, r3
 802204a:	fa1f fc81 	uxth.w	ip, r1
 802204e:	4661      	mov	r1, ip
 8022050:	fb0c 2413 	mls	r4, ip, r3, r2
 8022054:	fb14 f406 	smulbb	r4, r4, r6
 8022058:	441d      	add	r5, r3
 802205a:	3d01      	subs	r5, #1
 802205c:	4404      	add	r4, r0
 802205e:	fb95 f5f3 	sdiv	r5, r5, r3
 8022062:	b2a4      	uxth	r4, r4
 8022064:	b131      	cbz	r1, 8022074 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 8022066:	9b05      	ldr	r3, [sp, #20]
 8022068:	9901      	ldr	r1, [sp, #4]
 802206a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802206e:	ba1b      	rev	r3, r3
 8022070:	4419      	add	r1, r3
 8022072:	9101      	str	r1, [sp, #4]
 8022074:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8022078:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 802207c:	4418      	add	r0, r3
 802207e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8022082:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8022086:	441a      	add	r2, r3
 8022088:	4b77      	ldr	r3, [pc, #476]	@ (8022268 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 802208a:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 802208e:	6818      	ldr	r0, [r3, #0]
 8022090:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 8022094:	6803      	ldr	r3, [r0, #0]
 8022096:	b2ad      	uxth	r5, r5
 8022098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802209a:	4798      	blx	r3
 802209c:	4973      	ldr	r1, [pc, #460]	@ (802226c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 802209e:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 80220a2:	880b      	ldrh	r3, [r1, #0]
 80220a4:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80220a8:	00ad      	lsls	r5, r5, #2
 80220aa:	fb03 c202 	mla	r2, r3, r2, ip
 80220ae:	4373      	muls	r3, r6
 80220b0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80220b4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80220b8:	9308      	str	r3, [sp, #32]
 80220ba:	1d2b      	adds	r3, r5, #4
 80220bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80220be:	9b02      	ldr	r3, [sp, #8]
 80220c0:	2c00      	cmp	r4, #0
 80220c2:	ea6f 0203 	mvn.w	r2, r3
 80220c6:	bf0c      	ite	eq
 80220c8:	46dc      	moveq	ip, fp
 80220ca:	f04f 0c00 	movne.w	ip, #0
 80220ce:	2300      	movs	r3, #0
 80220d0:	910d      	str	r1, [sp, #52]	@ 0x34
 80220d2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80220d6:	b2d2      	uxtb	r2, r2
 80220d8:	fa1f fc8c 	uxth.w	ip, ip
 80220dc:	9303      	str	r3, [sp, #12]
 80220de:	9106      	str	r1, [sp, #24]
 80220e0:	9207      	str	r2, [sp, #28]
 80220e2:	9a08      	ldr	r2, [sp, #32]
 80220e4:	4282      	cmp	r2, r0
 80220e6:	f240 80b6 	bls.w	8022256 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 80220ea:	b963      	cbnz	r3, 8022106 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 80220ec:	9b01      	ldr	r3, [sp, #4]
 80220ee:	781a      	ldrb	r2, [r3, #0]
 80220f0:	0993      	lsrs	r3, r2, #6
 80220f2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80220f6:	9203      	str	r2, [sp, #12]
 80220f8:	1e5a      	subs	r2, r3, #1
 80220fa:	2a02      	cmp	r2, #2
 80220fc:	d815      	bhi.n	802212a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13e>
 80220fe:	9a01      	ldr	r2, [sp, #4]
 8022100:	b29b      	uxth	r3, r3
 8022102:	3201      	adds	r2, #1
 8022104:	9201      	str	r2, [sp, #4]
 8022106:	b1b4      	cbz	r4, 8022136 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14a>
 8022108:	429c      	cmp	r4, r3
 802210a:	bf99      	ittee	ls
 802210c:	1b1c      	subls	r4, r3, r4
 802210e:	fa1f f884 	uxthls.w	r8, r4
 8022112:	4666      	movhi	r6, ip
 8022114:	f04f 0800 	movhi.w	r8, #0
 8022118:	bf93      	iteet	ls
 802211a:	2400      	movls	r4, #0
 802211c:	1ae4      	subhi	r4, r4, r3
 802211e:	b2a4      	uxthhi	r4, r4
 8022120:	fa1f f68b 	uxthls.w	r6, fp
 8022124:	4643      	mov	r3, r8
 8022126:	46b4      	mov	ip, r6
 8022128:	e7db      	b.n	80220e2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 802212a:	9a01      	ldr	r2, [sp, #4]
 802212c:	9b01      	ldr	r3, [sp, #4]
 802212e:	3202      	adds	r2, #2
 8022130:	785b      	ldrb	r3, [r3, #1]
 8022132:	9201      	str	r2, [sp, #4]
 8022134:	e7e7      	b.n	8022106 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8022136:	2203      	movs	r2, #3
 8022138:	4615      	mov	r5, r2
 802213a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802213c:	9a03      	ldr	r2, [sp, #12]
 802213e:	4563      	cmp	r3, ip
 8022140:	fb15 1202 	smlabb	r2, r5, r2, r1
 8022144:	9905      	ldr	r1, [sp, #20]
 8022146:	bf28      	it	cs
 8022148:	eba3 080c 	subcs.w	r8, r3, ip
 802214c:	eb01 0502 	add.w	r5, r1, r2
 8022150:	9902      	ldr	r1, [sp, #8]
 8022152:	bf31      	iteee	cc
 8022154:	ebac 0603 	subcc.w	r6, ip, r3
 8022158:	fa1f f888 	uxthcs.w	r8, r8
 802215c:	46e1      	movcs	r9, ip
 802215e:	4626      	movcs	r6, r4
 8022160:	bf3e      	ittt	cc
 8022162:	b2b6      	uxthcc	r6, r6
 8022164:	4699      	movcc	r9, r3
 8022166:	46a0      	movcc	r8, r4
 8022168:	29ff      	cmp	r1, #255	@ 0xff
 802216a:	d04a      	beq.n	8022202 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x216>
 802216c:	46ca      	mov	sl, r9
 802216e:	9f06      	ldr	r7, [sp, #24]
 8022170:	78a9      	ldrb	r1, [r5, #2]
 8022172:	9004      	str	r0, [sp, #16]
 8022174:	4379      	muls	r1, r7
 8022176:	910a      	str	r1, [sp, #40]	@ 0x28
 8022178:	7869      	ldrb	r1, [r5, #1]
 802217a:	4379      	muls	r1, r7
 802217c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802217e:	9905      	ldr	r1, [sp, #20]
 8022180:	5c8a      	ldrb	r2, [r1, r2]
 8022182:	437a      	muls	r2, r7
 8022184:	920c      	str	r2, [sp, #48]	@ 0x30
 8022186:	f1ba 0f00 	cmp.w	sl, #0
 802218a:	d03d      	beq.n	8022208 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 802218c:	9f07      	ldr	r7, [sp, #28]
 802218e:	9a04      	ldr	r2, [sp, #16]
 8022190:	46be      	mov	lr, r7
 8022192:	8812      	ldrh	r2, [r2, #0]
 8022194:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8022196:	1215      	asrs	r5, r2, #8
 8022198:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802219c:	10d1      	asrs	r1, r2, #3
 802219e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80221a2:	fb05 750e 	mla	r5, r5, lr, r7
 80221a6:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80221aa:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80221ac:	00d2      	lsls	r2, r2, #3
 80221ae:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80221b2:	fb01 710e 	mla	r1, r1, lr, r7
 80221b6:	b2d2      	uxtb	r2, r2
 80221b8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80221ba:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80221be:	fb02 720e 	mla	r2, r2, lr, r7
 80221c2:	b2ad      	uxth	r5, r5
 80221c4:	b292      	uxth	r2, r2
 80221c6:	f105 0e01 	add.w	lr, r5, #1
 80221ca:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80221ce:	f102 0e01 	add.w	lr, r2, #1
 80221d2:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80221d6:	b289      	uxth	r1, r1
 80221d8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80221dc:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80221e0:	4315      	orrs	r5, r2
 80221e2:	1c4a      	adds	r2, r1, #1
 80221e4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80221e8:	0949      	lsrs	r1, r1, #5
 80221ea:	9a04      	ldr	r2, [sp, #16]
 80221ec:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80221f0:	430d      	orrs	r5, r1
 80221f2:	f822 5b02 	strh.w	r5, [r2], #2
 80221f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80221fa:	9204      	str	r2, [sp, #16]
 80221fc:	fa1f fa8a 	uxth.w	sl, sl
 8022200:	e7c1      	b.n	8022186 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 8022202:	4649      	mov	r1, r9
 8022204:	4686      	mov	lr, r0
 8022206:	b999      	cbnz	r1, 8022230 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x244>
 8022208:	4563      	cmp	r3, ip
 802220a:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 802220e:	d389      	bcc.n	8022124 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 8022210:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 8022214:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022216:	fa1f f68b 	uxth.w	r6, fp
 802221a:	1ba4      	subs	r4, r4, r6
 802221c:	881b      	ldrh	r3, [r3, #0]
 802221e:	b2a4      	uxth	r4, r4
 8022220:	2c00      	cmp	r4, #0
 8022222:	eba3 030b 	sub.w	r3, r3, fp
 8022226:	bf18      	it	ne
 8022228:	2600      	movne	r6, #0
 802222a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802222e:	e779      	b.n	8022124 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 8022230:	78aa      	ldrb	r2, [r5, #2]
 8022232:	4f0f      	ldr	r7, [pc, #60]	@ (8022270 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 8022234:	3901      	subs	r1, #1
 8022236:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 802223a:	786a      	ldrb	r2, [r5, #1]
 802223c:	b289      	uxth	r1, r1
 802223e:	00d2      	lsls	r2, r2, #3
 8022240:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8022244:	ea4a 0202 	orr.w	r2, sl, r2
 8022248:	f895 a000 	ldrb.w	sl, [r5]
 802224c:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 8022250:	f82e 2b02 	strh.w	r2, [lr], #2
 8022254:	e7d7      	b.n	8022206 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21a>
 8022256:	4b04      	ldr	r3, [pc, #16]	@ (8022268 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 8022258:	6818      	ldr	r0, [r3, #0]
 802225a:	6803      	ldr	r3, [r0, #0]
 802225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802225e:	4798      	blx	r3
 8022260:	b013      	add	sp, #76	@ 0x4c
 8022262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022266:	bf00      	nop
 8022268:	2005bd1c 	.word	0x2005bd1c
 802226c:	2005bd16 	.word	0x2005bd16
 8022270:	fffff800 	.word	0xfffff800

08022274 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8022274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022278:	b09d      	sub	sp, #116	@ 0x74
 802227a:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
 802227e:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8022282:	461c      	mov	r4, r3
 8022284:	4683      	mov	fp, r0
 8022286:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022288:	920e      	str	r2, [sp, #56]	@ 0x38
 802228a:	2a00      	cmp	r2, #0
 802228c:	f000 81e1 	beq.w	8022652 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3de>
 8022290:	6820      	ldr	r0, [r4, #0]
 8022292:	6861      	ldr	r1, [r4, #4]
 8022294:	aa18      	add	r2, sp, #96	@ 0x60
 8022296:	c203      	stmia	r2!, {r0, r1}
 8022298:	6818      	ldr	r0, [r3, #0]
 802229a:	6859      	ldr	r1, [r3, #4]
 802229c:	aa1a      	add	r2, sp, #104	@ 0x68
 802229e:	c203      	stmia	r2!, {r0, r1}
 80222a0:	a818      	add	r0, sp, #96	@ 0x60
 80222a2:	f7f8 f909 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80222a6:	4621      	mov	r1, r4
 80222a8:	a81a      	add	r0, sp, #104	@ 0x68
 80222aa:	f7f8 f92d 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80222ae:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 80222b2:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 80222b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80222ba:	bfdd      	ittte	le
 80222bc:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80222c0:	b29a      	uxthle	r2, r3
 80222c2:	fb91 f2f2 	sdivle	r2, r1, r2
 80222c6:	2201      	movgt	r2, #1
 80222c8:	9202      	str	r2, [sp, #8]
 80222ca:	9802      	ldr	r0, [sp, #8]
 80222cc:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 80222d0:	9902      	ldr	r1, [sp, #8]
 80222d2:	fb92 f0f0 	sdiv	r0, r2, r0
 80222d6:	b280      	uxth	r0, r0
 80222d8:	900f      	str	r0, [sp, #60]	@ 0x3c
 80222da:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80222dc:	9802      	ldr	r0, [sp, #8]
 80222de:	440c      	add	r4, r1
 80222e0:	fb05 2510 	mls	r5, r5, r0, r2
 80222e4:	fb15 f503 	smulbb	r5, r5, r3
 80222e8:	3c01      	subs	r4, #1
 80222ea:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 80222ee:	fb94 f4f1 	sdiv	r4, r4, r1
 80222f2:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 80222f6:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 80222fa:	440d      	add	r5, r1
 80222fc:	4419      	add	r1, r3
 80222fe:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 8022302:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8022306:	441a      	add	r2, r3
 8022308:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 802230c:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8022310:	9306      	str	r3, [sp, #24]
 8022312:	4bb3      	ldr	r3, [pc, #716]	@ (80225e0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 8022314:	3401      	adds	r4, #1
 8022316:	6818      	ldr	r0, [r3, #0]
 8022318:	b2a4      	uxth	r4, r4
 802231a:	6803      	ldr	r3, [r0, #0]
 802231c:	00a4      	lsls	r4, r4, #2
 802231e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022320:	4798      	blx	r3
 8022322:	4bb0      	ldr	r3, [pc, #704]	@ (80225e4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 8022324:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8022328:	881a      	ldrh	r2, [r3, #0]
 802232a:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 802232e:	4356      	muls	r6, r2
 8022330:	fb02 7101 	mla	r1, r2, r1, r7
 8022334:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 8022338:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 802233c:	920a      	str	r2, [sp, #40]	@ 0x28
 802233e:	1d22      	adds	r2, r4, #4
 8022340:	b2ad      	uxth	r5, r5
 8022342:	9213      	str	r2, [sp, #76]	@ 0x4c
 8022344:	9a06      	ldr	r2, [sp, #24]
 8022346:	2d00      	cmp	r5, #0
 8022348:	bf0c      	ite	eq
 802234a:	4611      	moveq	r1, r2
 802234c:	2100      	movne	r1, #0
 802234e:	2200      	movs	r2, #0
 8022350:	9316      	str	r3, [sp, #88]	@ 0x58
 8022352:	4ba5      	ldr	r3, [pc, #660]	@ (80225e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 8022354:	b289      	uxth	r1, r1
 8022356:	eba3 030b 	sub.w	r3, r3, fp
 802235a:	920d      	str	r2, [sp, #52]	@ 0x34
 802235c:	9317      	str	r3, [sp, #92]	@ 0x5c
 802235e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8022360:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022362:	fa12 f383 	uxtah	r3, r2, r3
 8022366:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8022368:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802236c:	3304      	adds	r3, #4
 802236e:	9308      	str	r3, [sp, #32]
 8022370:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022372:	4543      	cmp	r3, r8
 8022374:	f240 8168 	bls.w	8022648 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d4>
 8022378:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 802237c:	9a02      	ldr	r2, [sp, #8]
 802237e:	fbb5 f3f3 	udiv	r3, r5, r3
 8022382:	1ad3      	subs	r3, r2, r3
 8022384:	b29b      	uxth	r3, r3
 8022386:	9314      	str	r3, [sp, #80]	@ 0x50
 8022388:	9b08      	ldr	r3, [sp, #32]
 802238a:	9808      	ldr	r0, [sp, #32]
 802238c:	785a      	ldrb	r2, [r3, #1]
 802238e:	789b      	ldrb	r3, [r3, #2]
 8022390:	7800      	ldrb	r0, [r0, #0]
 8022392:	021b      	lsls	r3, r3, #8
 8022394:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022398:	9a08      	ldr	r2, [sp, #32]
 802239a:	9010      	str	r0, [sp, #64]	@ 0x40
 802239c:	78d2      	ldrb	r2, [r2, #3]
 802239e:	3001      	adds	r0, #1
 80223a0:	4313      	orrs	r3, r2
 80223a2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80223a4:	9007      	str	r0, [sp, #28]
 80223a6:	441a      	add	r2, r3
 80223a8:	1c50      	adds	r0, r2, #1
 80223aa:	9005      	str	r0, [sp, #20]
 80223ac:	7852      	ldrb	r2, [r2, #1]
 80223ae:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80223b0:	0212      	lsls	r2, r2, #8
 80223b2:	5cc3      	ldrb	r3, [r0, r3]
 80223b4:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80223b8:	431a      	orrs	r2, r3
 80223ba:	b293      	uxth	r3, r2
 80223bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80223be:	2300      	movs	r3, #0
 80223c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80223c2:	2301      	movs	r3, #1
 80223c4:	9301      	str	r3, [sp, #4]
 80223c6:	9304      	str	r3, [sp, #16]
 80223c8:	2300      	movs	r3, #0
 80223ca:	f04f 0e01 	mov.w	lr, #1
 80223ce:	f88b 2804 	strb.w	r2, [fp, #2052]	@ 0x804
 80223d2:	9303      	str	r3, [sp, #12]
 80223d4:	2d00      	cmp	r5, #0
 80223d6:	d07c      	beq.n	80224d2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 80223d8:	45ae      	cmp	lr, r5
 80223da:	d26b      	bcs.n	80224b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 80223dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80223de:	eba5 050e 	sub.w	r5, r5, lr
 80223e2:	4543      	cmp	r3, r8
 80223e4:	b2ad      	uxth	r5, r5
 80223e6:	460c      	mov	r4, r1
 80223e8:	d802      	bhi.n	80223f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>
 80223ea:	e070      	b.n	80224ce <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 80223ec:	2b00      	cmp	r3, #0
 80223ee:	d15c      	bne.n	80224aa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 80223f0:	9b05      	ldr	r3, [sp, #20]
 80223f2:	9a04      	ldr	r2, [sp, #16]
 80223f4:	785b      	ldrb	r3, [r3, #1]
 80223f6:	f1c2 0207 	rsb	r2, r2, #7
 80223fa:	4093      	lsls	r3, r2
 80223fc:	005b      	lsls	r3, r3, #1
 80223fe:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8022402:	9b05      	ldr	r3, [sp, #20]
 8022404:	9904      	ldr	r1, [sp, #16]
 8022406:	781b      	ldrb	r3, [r3, #0]
 8022408:	410b      	asrs	r3, r1
 802240a:	3101      	adds	r1, #1
 802240c:	b2c9      	uxtb	r1, r1
 802240e:	2908      	cmp	r1, #8
 8022410:	9104      	str	r1, [sp, #16]
 8022412:	9905      	ldr	r1, [sp, #20]
 8022414:	b2db      	uxtb	r3, r3
 8022416:	bf03      	ittte	eq
 8022418:	3102      	addeq	r1, #2
 802241a:	9105      	streq	r1, [sp, #20]
 802241c:	2100      	moveq	r1, #0
 802241e:	3101      	addne	r1, #1
 8022420:	bf14      	ite	ne
 8022422:	9105      	strne	r1, [sp, #20]
 8022424:	9104      	streq	r1, [sp, #16]
 8022426:	4313      	orrs	r3, r2
 8022428:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802242a:	b29a      	uxth	r2, r3
 802242c:	4291      	cmp	r1, r2
 802242e:	d30a      	bcc.n	8022446 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8022430:	f88b 3804 	strb.w	r3, [fp, #2052]	@ 0x804
 8022434:	2301      	movs	r3, #1
 8022436:	9907      	ldr	r1, [sp, #28]
 8022438:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802243c:	d30f      	bcc.n	802245e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ea>
 802243e:	2100      	movs	r1, #0
 8022440:	9301      	str	r3, [sp, #4]
 8022442:	9103      	str	r1, [sp, #12]
 8022444:	e032      	b.n	80224ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 8022446:	9b07      	ldr	r3, [sp, #28]
 8022448:	429a      	cmp	r2, r3
 802244a:	d318      	bcc.n	802247e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 802244c:	9b01      	ldr	r3, [sp, #4]
 802244e:	f89b 1804 	ldrb.w	r1, [fp, #2052]	@ 0x804
 8022452:	445b      	add	r3, fp
 8022454:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8022458:	9b01      	ldr	r3, [sp, #4]
 802245a:	3301      	adds	r3, #1
 802245c:	b29b      	uxth	r3, r3
 802245e:	9907      	ldr	r1, [sp, #28]
 8022460:	f89b 0804 	ldrb.w	r0, [fp, #2052]	@ 0x804
 8022464:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 8022468:	7108      	strb	r0, [r1, #4]
 802246a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802246c:	80c8      	strh	r0, [r1, #6]
 802246e:	9801      	ldr	r0, [sp, #4]
 8022470:	3001      	adds	r0, #1
 8022472:	7148      	strb	r0, [r1, #5]
 8022474:	9907      	ldr	r1, [sp, #28]
 8022476:	3101      	adds	r1, #1
 8022478:	b289      	uxth	r1, r1
 802247a:	9107      	str	r1, [sp, #28]
 802247c:	e7df      	b.n	802243e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 802247e:	4611      	mov	r1, r2
 8022480:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 8022484:	795b      	ldrb	r3, [r3, #5]
 8022486:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 802248a:	4458      	add	r0, fp
 802248c:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 802248e:	4406      	add	r6, r0
 8022490:	2e00      	cmp	r6, #0
 8022492:	dd06      	ble.n	80224a2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x22e>
 8022494:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 8022498:	790e      	ldrb	r6, [r1, #4]
 802249a:	f800 6d01 	strb.w	r6, [r0, #-1]!
 802249e:	88c9      	ldrh	r1, [r1, #6]
 80224a0:	e7f4      	b.n	802248c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x218>
 80224a2:	f88b 1804 	strb.w	r1, [fp, #2052]	@ 0x804
 80224a6:	b29b      	uxth	r3, r3
 80224a8:	e7c5      	b.n	8022436 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c2>
 80224aa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80224ac:	4621      	mov	r1, r4
 80224ae:	920b      	str	r2, [sp, #44]	@ 0x2c
 80224b0:	469e      	mov	lr, r3
 80224b2:	e78f      	b.n	80223d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x160>
 80224b4:	9a03      	ldr	r2, [sp, #12]
 80224b6:	ebae 0305 	sub.w	r3, lr, r5
 80224ba:	442a      	add	r2, r5
 80224bc:	b292      	uxth	r2, r2
 80224be:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80224c2:	b29b      	uxth	r3, r3
 80224c4:	9203      	str	r2, [sp, #12]
 80224c6:	2500      	movs	r5, #0
 80224c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80224ca:	4542      	cmp	r2, r8
 80224cc:	d88e      	bhi.n	80223ec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>
 80224ce:	4621      	mov	r1, r4
 80224d0:	e74e      	b.n	8022370 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 80224d2:	458e      	cmp	lr, r1
 80224d4:	bf2c      	ite	cs
 80224d6:	462c      	movcs	r4, r5
 80224d8:	462b      	movcc	r3, r5
 80224da:	f04f 0900 	mov.w	r9, #0
 80224de:	bf29      	itett	cs
 80224e0:	ebae 0301 	subcs.w	r3, lr, r1
 80224e4:	eba1 040e 	subcc.w	r4, r1, lr
 80224e8:	b29b      	uxthcs	r3, r3
 80224ea:	910c      	strcs	r1, [sp, #48]	@ 0x30
 80224ec:	bf3c      	itt	cc
 80224ee:	b2a4      	uxthcc	r4, r4
 80224f0:	f8cd e030 	strcc.w	lr, [sp, #48]	@ 0x30
 80224f4:	9a03      	ldr	r2, [sp, #12]
 80224f6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80224f8:	444a      	add	r2, r9
 80224fa:	4548      	cmp	r0, r9
 80224fc:	b292      	uxth	r2, r2
 80224fe:	d075      	beq.n	80225ec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>
 8022500:	2004      	movs	r0, #4
 8022502:	4605      	mov	r5, r0
 8022504:	445a      	add	r2, fp
 8022506:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8022508:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 802250c:	fb15 0202 	smlabb	r2, r5, r2, r0
 8022510:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022512:	5880      	ldr	r0, [r0, r2]
 8022514:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 8022518:	d014      	beq.n	8022544 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d0>
 802251a:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802251e:	ea4f 2510 	mov.w	r5, r0, lsr #8
 8022522:	d112      	bne.n	802254a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8022524:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022526:	2aff      	cmp	r2, #255	@ 0xff
 8022528:	d10f      	bne.n	802254a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 802252a:	0942      	lsrs	r2, r0, #5
 802252c:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 8022530:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8022534:	f025 0507 	bic.w	r5, r5, #7
 8022538:	4315      	orrs	r5, r2
 802253a:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 802253e:	4305      	orrs	r5, r0
 8022540:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 8022544:	f109 0901 	add.w	r9, r9, #1
 8022548:	e7d4      	b.n	80224f4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x280>
 802254a:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 802254e:	b2ed      	uxtb	r5, r5
 8022550:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8022554:	f006 02fc 	and.w	r2, r6, #252	@ 0xfc
 8022558:	9215      	str	r2, [sp, #84]	@ 0x54
 802255a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802255c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8022560:	fb02 fa0a 	mul.w	sl, r2, sl
 8022564:	f10a 0201 	add.w	r2, sl, #1
 8022568:	eb02 222a 	add.w	r2, r2, sl, asr #8
 802256c:	1212      	asrs	r2, r2, #8
 802256e:	fa1f fa82 	uxth.w	sl, r2
 8022572:	43d2      	mvns	r2, r2
 8022574:	b2c0      	uxtb	r0, r0
 8022576:	fb16 f60a 	smulbb	r6, r6, sl
 802257a:	fb10 f00a 	smulbb	r0, r0, sl
 802257e:	ea4f 272c 	mov.w	r7, ip, asr #8
 8022582:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022586:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 802258a:	fa5f fc8c 	uxtb.w	ip, ip
 802258e:	b2d2      	uxtb	r2, r2
 8022590:	fb15 f50a 	smulbb	r5, r5, sl
 8022594:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8022598:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 802259c:	fb07 6702 	mla	r7, r7, r2, r6
 80225a0:	fb0c 0002 	mla	r0, ip, r2, r0
 80225a4:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80225a6:	b2bf      	uxth	r7, r7
 80225a8:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80225ac:	fb06 5602 	mla	r6, r6, r2, r5
 80225b0:	b280      	uxth	r0, r0
 80225b2:	1c7a      	adds	r2, r7, #1
 80225b4:	1c45      	adds	r5, r0, #1
 80225b6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80225ba:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80225be:	b2b6      	uxth	r6, r6
 80225c0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80225c4:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 80225c8:	432f      	orrs	r7, r5
 80225ca:	1c75      	adds	r5, r6, #1
 80225cc:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 80225d0:	096d      	lsrs	r5, r5, #5
 80225d2:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80225d6:	432f      	orrs	r7, r5
 80225d8:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 80225dc:	e7b2      	b.n	8022544 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d0>
 80225de:	bf00      	nop
 80225e0:	2005bd1c 	.word	0x2005bd1c
 80225e4:	2005bd16 	.word	0x2005bd16
 80225e8:	fffff7fb 	.word	0xfffff7fb
 80225ec:	9203      	str	r2, [sp, #12]
 80225ee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80225f0:	458e      	cmp	lr, r1
 80225f2:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 80225f6:	f4ff af66 	bcc.w	80224c6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x252>
 80225fa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80225fc:	9906      	ldr	r1, [sp, #24]
 80225fe:	8812      	ldrh	r2, [r2, #0]
 8022600:	1a52      	subs	r2, r2, r1
 8022602:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8022606:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022608:	9914      	ldr	r1, [sp, #80]	@ 0x50
 802260a:	3201      	adds	r2, #1
 802260c:	428a      	cmp	r2, r1
 802260e:	9209      	str	r2, [sp, #36]	@ 0x24
 8022610:	d110      	bne.n	8022634 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c0>
 8022612:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 8022616:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 802261a:	9b06      	ldr	r3, [sp, #24]
 802261c:	eba5 0509 	sub.w	r5, r5, r9
 8022620:	b2ad      	uxth	r5, r5
 8022622:	2d00      	cmp	r5, #0
 8022624:	bf0c      	ite	eq
 8022626:	4619      	moveq	r1, r3
 8022628:	2100      	movne	r1, #0
 802262a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802262c:	b289      	uxth	r1, r1
 802262e:	3301      	adds	r3, #1
 8022630:	930d      	str	r3, [sp, #52]	@ 0x34
 8022632:	e694      	b.n	802235e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8022634:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8022638:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 802263c:	1b2d      	subs	r5, r5, r4
 802263e:	b2ad      	uxth	r5, r5
 8022640:	2d00      	cmp	r5, #0
 8022642:	bf18      	it	ne
 8022644:	2400      	movne	r4, #0
 8022646:	e73f      	b.n	80224c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x254>
 8022648:	4b03      	ldr	r3, [pc, #12]	@ (8022658 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>)
 802264a:	6818      	ldr	r0, [r3, #0]
 802264c:	6803      	ldr	r3, [r0, #0]
 802264e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022650:	4798      	blx	r3
 8022652:	b01d      	add	sp, #116	@ 0x74
 8022654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022658:	2005bd1c 	.word	0x2005bd1c

0802265c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802265c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022660:	b09f      	sub	sp, #124	@ 0x7c
 8022662:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 8022666:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 802266a:	461d      	mov	r5, r3
 802266c:	4604      	mov	r4, r0
 802266e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022670:	920a      	str	r2, [sp, #40]	@ 0x28
 8022672:	2a00      	cmp	r2, #0
 8022674:	f000 81fc 	beq.w	8022a70 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x414>
 8022678:	6828      	ldr	r0, [r5, #0]
 802267a:	6869      	ldr	r1, [r5, #4]
 802267c:	aa1a      	add	r2, sp, #104	@ 0x68
 802267e:	c203      	stmia	r2!, {r0, r1}
 8022680:	6818      	ldr	r0, [r3, #0]
 8022682:	6859      	ldr	r1, [r3, #4]
 8022684:	aa1c      	add	r2, sp, #112	@ 0x70
 8022686:	c203      	stmia	r2!, {r0, r1}
 8022688:	a81a      	add	r0, sp, #104	@ 0x68
 802268a:	f7f7 ff15 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802268e:	4629      	mov	r1, r5
 8022690:	a81c      	add	r0, sp, #112	@ 0x70
 8022692:	f7f7 ff39 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022696:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 802269a:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 802269e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80226a2:	bfdd      	ittte	le
 80226a4:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80226a8:	b29a      	uxthle	r2, r3
 80226aa:	fb91 f2f2 	sdivle	r2, r1, r2
 80226ae:	2201      	movgt	r2, #1
 80226b0:	9201      	str	r2, [sp, #4]
 80226b2:	9801      	ldr	r0, [sp, #4]
 80226b4:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 80226b8:	9901      	ldr	r1, [sp, #4]
 80226ba:	fb92 f0f0 	sdiv	r0, r2, r0
 80226be:	b280      	uxth	r0, r0
 80226c0:	9010      	str	r0, [sp, #64]	@ 0x40
 80226c2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80226c4:	9801      	ldr	r0, [sp, #4]
 80226c6:	440e      	add	r6, r1
 80226c8:	fb05 2510 	mls	r5, r5, r0, r2
 80226cc:	fb15 f503 	smulbb	r5, r5, r3
 80226d0:	3e01      	subs	r6, #1
 80226d2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80226d6:	fb96 f6f1 	sdiv	r6, r6, r1
 80226da:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 80226de:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	@ 0x76
 80226e2:	440d      	add	r5, r1
 80226e4:	4419      	add	r1, r3
 80226e6:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 80226ea:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 80226ee:	441a      	add	r2, r3
 80226f0:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 80226f4:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 80226f8:	9304      	str	r3, [sp, #16]
 80226fa:	4b96      	ldr	r3, [pc, #600]	@ (8022954 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f8>)
 80226fc:	3601      	adds	r6, #1
 80226fe:	6818      	ldr	r0, [r3, #0]
 8022700:	b2b6      	uxth	r6, r6
 8022702:	6803      	ldr	r3, [r0, #0]
 8022704:	b2ad      	uxth	r5, r5
 8022706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022708:	4798      	blx	r3
 802270a:	4b93      	ldr	r3, [pc, #588]	@ (8022958 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 802270c:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 8022710:	881a      	ldrh	r2, [r3, #0]
 8022712:	f9bd c070 	ldrsh.w	ip, [sp, #112]	@ 0x70
 8022716:	4357      	muls	r7, r2
 8022718:	fb02 c101 	mla	r1, r2, r1, ip
 802271c:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 8022720:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 8022724:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022726:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8022728:	2d00      	cmp	r5, #0
 802272a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802272e:	f106 0204 	add.w	r2, r6, #4
 8022732:	9206      	str	r2, [sp, #24]
 8022734:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022736:	bf18      	it	ne
 8022738:	2100      	movne	r1, #0
 802273a:	ea6f 0202 	mvn.w	r2, r2
 802273e:	b2d2      	uxtb	r2, r2
 8022740:	9215      	str	r2, [sp, #84]	@ 0x54
 8022742:	9a04      	ldr	r2, [sp, #16]
 8022744:	9318      	str	r3, [sp, #96]	@ 0x60
 8022746:	bf08      	it	eq
 8022748:	4611      	moveq	r1, r2
 802274a:	2200      	movs	r2, #0
 802274c:	4b83      	ldr	r3, [pc, #524]	@ (802295c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 802274e:	b289      	uxth	r1, r1
 8022750:	1b1b      	subs	r3, r3, r4
 8022752:	920d      	str	r2, [sp, #52]	@ 0x34
 8022754:	9319      	str	r3, [sp, #100]	@ 0x64
 8022756:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022758:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802275a:	fa12 f383 	uxtah	r3, r2, r3
 802275e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8022760:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022764:	3304      	adds	r3, #4
 8022766:	9307      	str	r3, [sp, #28]
 8022768:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802276a:	455b      	cmp	r3, fp
 802276c:	f240 817b 	bls.w	8022a66 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40a>
 8022770:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 8022774:	f04f 0801 	mov.w	r8, #1
 8022778:	fbb5 f3f3 	udiv	r3, r5, r3
 802277c:	9a01      	ldr	r2, [sp, #4]
 802277e:	9807      	ldr	r0, [sp, #28]
 8022780:	1ad3      	subs	r3, r2, r3
 8022782:	b29b      	uxth	r3, r3
 8022784:	9316      	str	r3, [sp, #88]	@ 0x58
 8022786:	9b07      	ldr	r3, [sp, #28]
 8022788:	7800      	ldrb	r0, [r0, #0]
 802278a:	785a      	ldrb	r2, [r3, #1]
 802278c:	789b      	ldrb	r3, [r3, #2]
 802278e:	9011      	str	r0, [sp, #68]	@ 0x44
 8022790:	021b      	lsls	r3, r3, #8
 8022792:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022796:	9a07      	ldr	r2, [sp, #28]
 8022798:	3001      	adds	r0, #1
 802279a:	78d2      	ldrb	r2, [r2, #3]
 802279c:	9005      	str	r0, [sp, #20]
 802279e:	4313      	orrs	r3, r2
 80227a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80227a2:	46c4      	mov	ip, r8
 80227a4:	441a      	add	r2, r3
 80227a6:	1c50      	adds	r0, r2, #1
 80227a8:	9003      	str	r0, [sp, #12]
 80227aa:	7852      	ldrb	r2, [r2, #1]
 80227ac:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80227ae:	0212      	lsls	r2, r2, #8
 80227b0:	5cc3      	ldrb	r3, [r0, r3]
 80227b2:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80227b6:	431a      	orrs	r2, r3
 80227b8:	b293      	uxth	r3, r2
 80227ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80227bc:	2300      	movs	r3, #0
 80227be:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 80227c2:	9308      	str	r3, [sp, #32]
 80227c4:	461a      	mov	r2, r3
 80227c6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80227ca:	f8cd 8008 	str.w	r8, [sp, #8]
 80227ce:	930e      	str	r3, [sp, #56]	@ 0x38
 80227d0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80227d4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80227d6:	2d00      	cmp	r5, #0
 80227d8:	d07c      	beq.n	80228d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 80227da:	45ac      	cmp	ip, r5
 80227dc:	d26c      	bcs.n	80228b8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 80227de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80227e0:	eba5 050c 	sub.w	r5, r5, ip
 80227e4:	455b      	cmp	r3, fp
 80227e6:	b2ad      	uxth	r5, r5
 80227e8:	4608      	mov	r0, r1
 80227ea:	d802      	bhi.n	80227f2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 80227ec:	e070      	b.n	80228d0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 80227ee:	2b00      	cmp	r3, #0
 80227f0:	d15c      	bne.n	80228ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 80227f2:	9b03      	ldr	r3, [sp, #12]
 80227f4:	9a02      	ldr	r2, [sp, #8]
 80227f6:	785b      	ldrb	r3, [r3, #1]
 80227f8:	f1c2 0207 	rsb	r2, r2, #7
 80227fc:	4093      	lsls	r3, r2
 80227fe:	005b      	lsls	r3, r3, #1
 8022800:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8022804:	9b03      	ldr	r3, [sp, #12]
 8022806:	9902      	ldr	r1, [sp, #8]
 8022808:	781b      	ldrb	r3, [r3, #0]
 802280a:	410b      	asrs	r3, r1
 802280c:	3101      	adds	r1, #1
 802280e:	b2c9      	uxtb	r1, r1
 8022810:	2908      	cmp	r1, #8
 8022812:	9102      	str	r1, [sp, #8]
 8022814:	9903      	ldr	r1, [sp, #12]
 8022816:	b2db      	uxtb	r3, r3
 8022818:	bf03      	ittte	eq
 802281a:	3102      	addeq	r1, #2
 802281c:	9103      	streq	r1, [sp, #12]
 802281e:	2100      	moveq	r1, #0
 8022820:	3101      	addne	r1, #1
 8022822:	bf14      	ite	ne
 8022824:	9103      	strne	r1, [sp, #12]
 8022826:	9102      	streq	r1, [sp, #8]
 8022828:	4313      	orrs	r3, r2
 802282a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802282c:	b29a      	uxth	r2, r3
 802282e:	4291      	cmp	r1, r2
 8022830:	d30a      	bcc.n	8022848 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 8022832:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8022836:	2301      	movs	r3, #1
 8022838:	9905      	ldr	r1, [sp, #20]
 802283a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802283e:	d30f      	bcc.n	8022860 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x204>
 8022840:	2100      	movs	r1, #0
 8022842:	4698      	mov	r8, r3
 8022844:	9100      	str	r1, [sp, #0]
 8022846:	e032      	b.n	80228ae <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 8022848:	9b05      	ldr	r3, [sp, #20]
 802284a:	429a      	cmp	r2, r3
 802284c:	d318      	bcc.n	8022880 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x224>
 802284e:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 8022852:	eb04 0308 	add.w	r3, r4, r8
 8022856:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 802285a:	f108 0301 	add.w	r3, r8, #1
 802285e:	b29b      	uxth	r3, r3
 8022860:	9905      	ldr	r1, [sp, #20]
 8022862:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8022866:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 802286a:	710e      	strb	r6, [r1, #4]
 802286c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802286e:	80ce      	strh	r6, [r1, #6]
 8022870:	f108 0601 	add.w	r6, r8, #1
 8022874:	714e      	strb	r6, [r1, #5]
 8022876:	9905      	ldr	r1, [sp, #20]
 8022878:	3101      	adds	r1, #1
 802287a:	b289      	uxth	r1, r1
 802287c:	9105      	str	r1, [sp, #20]
 802287e:	e7df      	b.n	8022840 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 8022880:	4611      	mov	r1, r2
 8022882:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022886:	795b      	ldrb	r3, [r3, #5]
 8022888:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 802288c:	4426      	add	r6, r4
 802288e:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8022890:	4437      	add	r7, r6
 8022892:	2f00      	cmp	r7, #0
 8022894:	dd06      	ble.n	80228a4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 8022896:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 802289a:	790f      	ldrb	r7, [r1, #4]
 802289c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80228a0:	88c9      	ldrh	r1, [r1, #6]
 80228a2:	e7f4      	b.n	802288e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x232>
 80228a4:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 80228a8:	b29b      	uxth	r3, r3
 80228aa:	e7c5      	b.n	8022838 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1dc>
 80228ac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80228ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80228b0:	4601      	mov	r1, r0
 80228b2:	9a00      	ldr	r2, [sp, #0]
 80228b4:	469c      	mov	ip, r3
 80228b6:	e78e      	b.n	80227d6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 80228b8:	1957      	adds	r7, r2, r5
 80228ba:	ebac 0305 	sub.w	r3, ip, r5
 80228be:	b2ba      	uxth	r2, r7
 80228c0:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80228c4:	b29b      	uxth	r3, r3
 80228c6:	9200      	str	r2, [sp, #0]
 80228c8:	2500      	movs	r5, #0
 80228ca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80228cc:	455a      	cmp	r2, fp
 80228ce:	d88e      	bhi.n	80227ee <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 80228d0:	4601      	mov	r1, r0
 80228d2:	e749      	b.n	8022768 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x10c>
 80228d4:	458c      	cmp	ip, r1
 80228d6:	bf2c      	ite	cs
 80228d8:	4628      	movcs	r0, r5
 80228da:	462b      	movcc	r3, r5
 80228dc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80228de:	bf27      	ittee	cs
 80228e0:	ebac 0301 	subcs.w	r3, ip, r1
 80228e4:	9109      	strcs	r1, [sp, #36]	@ 0x24
 80228e6:	eba1 000c 	subcc.w	r0, r1, ip
 80228ea:	f8cd c024 	strcc.w	ip, [sp, #36]	@ 0x24
 80228ee:	bf2c      	ite	cs
 80228f0:	b29b      	uxthcs	r3, r3
 80228f2:	b280      	uxthcc	r0, r0
 80228f4:	2dff      	cmp	r5, #255	@ 0xff
 80228f6:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80228f8:	eb02 0705 	add.w	r7, r2, r5
 80228fc:	b2bd      	uxth	r5, r7
 80228fe:	9500      	str	r5, [sp, #0]
 8022900:	d12e      	bne.n	8022960 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>
 8022902:	465e      	mov	r6, fp
 8022904:	9d00      	ldr	r5, [sp, #0]
 8022906:	42aa      	cmp	r2, r5
 8022908:	f040 8083 	bne.w	8022a12 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3b6>
 802290c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802290e:	458c      	cmp	ip, r1
 8022910:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8022914:	d3d8      	bcc.n	80228c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 8022916:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8022918:	9904      	ldr	r1, [sp, #16]
 802291a:	8812      	ldrh	r2, [r2, #0]
 802291c:	1a52      	subs	r2, r2, r1
 802291e:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8022922:	9a08      	ldr	r2, [sp, #32]
 8022924:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8022926:	3201      	adds	r2, #1
 8022928:	428a      	cmp	r2, r1
 802292a:	9208      	str	r2, [sp, #32]
 802292c:	f040 8091 	bne.w	8022a52 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f6>
 8022930:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 8022934:	f8bd c068 	ldrh.w	ip, [sp, #104]	@ 0x68
 8022938:	9b04      	ldr	r3, [sp, #16]
 802293a:	eba5 050c 	sub.w	r5, r5, ip
 802293e:	b2ad      	uxth	r5, r5
 8022940:	2d00      	cmp	r5, #0
 8022942:	bf0c      	ite	eq
 8022944:	4619      	moveq	r1, r3
 8022946:	2100      	movne	r1, #0
 8022948:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802294a:	b289      	uxth	r1, r1
 802294c:	3301      	adds	r3, #1
 802294e:	930d      	str	r3, [sp, #52]	@ 0x34
 8022950:	e701      	b.n	8022756 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfa>
 8022952:	bf00      	nop
 8022954:	2005bd1c 	.word	0x2005bd1c
 8022958:	2005bd16 	.word	0x2005bd16
 802295c:	fffff7fb 	.word	0xfffff7fb
 8022960:	46d9      	mov	r9, fp
 8022962:	9d00      	ldr	r5, [sp, #0]
 8022964:	42aa      	cmp	r2, r5
 8022966:	d0d1      	beq.n	802290c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b0>
 8022968:	1c55      	adds	r5, r2, #1
 802296a:	4422      	add	r2, r4
 802296c:	f892 e804 	ldrb.w	lr, [r2, #2052]	@ 0x804
 8022970:	9a06      	ldr	r2, [sp, #24]
 8022972:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022976:	4472      	add	r2, lr
 8022978:	9212      	str	r2, [sp, #72]	@ 0x48
 802297a:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 802297c:	f8b9 2000 	ldrh.w	r2, [r9]
 8022980:	f897 a002 	ldrb.w	sl, [r7, #2]
 8022984:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8022986:	1216      	asrs	r6, r2, #8
 8022988:	fb1a fa07 	smulbb	sl, sl, r7
 802298c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8022990:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8022992:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022996:	fb06 a607 	mla	r6, r6, r7, sl
 802299a:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 802299c:	9517      	str	r5, [sp, #92]	@ 0x5c
 802299e:	f897 a001 	ldrb.w	sl, [r7, #1]
 80229a2:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80229a4:	10d5      	asrs	r5, r2, #3
 80229a6:	fb1a fa07 	smulbb	sl, sl, r7
 80229aa:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80229ae:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80229b0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80229b4:	fb05 a507 	mla	r5, r5, r7, sl
 80229b8:	9f06      	ldr	r7, [sp, #24]
 80229ba:	00d2      	lsls	r2, r2, #3
 80229bc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80229c0:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80229c2:	b2d2      	uxtb	r2, r2
 80229c4:	fb1e fe07 	smulbb	lr, lr, r7
 80229c8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80229ca:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80229ce:	fb02 e207 	mla	r2, r2, r7, lr
 80229d2:	b2b6      	uxth	r6, r6
 80229d4:	b292      	uxth	r2, r2
 80229d6:	b2ad      	uxth	r5, r5
 80229d8:	f106 0a01 	add.w	sl, r6, #1
 80229dc:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 80229e0:	f102 0e01 	add.w	lr, r2, #1
 80229e4:	f105 0a01 	add.w	sl, r5, #1
 80229e8:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 80229ec:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80229f0:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 80229f4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80229f8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80229fc:	ea4e 0606 	orr.w	r6, lr, r6
 8022a00:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8022a04:	ea46 060a 	orr.w	r6, r6, sl
 8022a08:	f829 6b02 	strh.w	r6, [r9], #2
 8022a0c:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8022a10:	e7a7      	b.n	8022962 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x306>
 8022a12:	f102 0e01 	add.w	lr, r2, #1
 8022a16:	4422      	add	r2, r4
 8022a18:	f892 5804 	ldrb.w	r5, [r2, #2052]	@ 0x804
 8022a1c:	9a06      	ldr	r2, [sp, #24]
 8022a1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022a22:	eb02 0a05 	add.w	sl, r2, r5
 8022a26:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8022a2a:	4a13      	ldr	r2, [pc, #76]	@ (8022a78 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x41c>)
 8022a2c:	9f06      	ldr	r7, [sp, #24]
 8022a2e:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 8022a32:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022a36:	00d2      	lsls	r2, r2, #3
 8022a38:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8022a3c:	ea49 0202 	orr.w	r2, r9, r2
 8022a40:	f817 9005 	ldrb.w	r9, [r7, r5]
 8022a44:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8022a48:	f826 2b02 	strh.w	r2, [r6], #2
 8022a4c:	fa1f f28e 	uxth.w	r2, lr
 8022a50:	e758      	b.n	8022904 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>
 8022a52:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8022a56:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8022a5a:	1a2d      	subs	r5, r5, r0
 8022a5c:	b2ad      	uxth	r5, r5
 8022a5e:	2d00      	cmp	r5, #0
 8022a60:	bf18      	it	ne
 8022a62:	2000      	movne	r0, #0
 8022a64:	e731      	b.n	80228ca <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26e>
 8022a66:	4b05      	ldr	r3, [pc, #20]	@ (8022a7c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 8022a68:	6818      	ldr	r0, [r3, #0]
 8022a6a:	6803      	ldr	r3, [r0, #0]
 8022a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022a6e:	4798      	blx	r3
 8022a70:	b01f      	add	sp, #124	@ 0x7c
 8022a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a76:	bf00      	nop
 8022a78:	fffff800 	.word	0xfffff800
 8022a7c:	2005bd1c 	.word	0x2005bd1c

08022a80 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8022a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a84:	469b      	mov	fp, r3
 8022a86:	4616      	mov	r6, r2
 8022a88:	b091      	sub	sp, #68	@ 0x44
 8022a8a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8022a8e:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 8022a92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022a96:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 8022a9a:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8022a9e:	4604      	mov	r4, r0
 8022aa0:	460d      	mov	r5, r1
 8022aa2:	4640      	mov	r0, r8
 8022aa4:	4659      	mov	r1, fp
 8022aa6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8022aaa:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8022aae:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 8022ab2:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 8022ab6:	f7f2 fa97 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 8022aba:	4631      	mov	r1, r6
 8022abc:	4640      	mov	r0, r8
 8022abe:	f7f2 fa93 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 8022ac2:	4b74      	ldr	r3, [pc, #464]	@ (8022c94 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8022ac4:	8818      	ldrh	r0, [r3, #0]
 8022ac6:	4b74      	ldr	r3, [pc, #464]	@ (8022c98 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8022ac8:	b202      	sxth	r2, r0
 8022aca:	8819      	ldrh	r1, [r3, #0]
 8022acc:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8022ad0:	b20e      	sxth	r6, r1
 8022ad2:	2b00      	cmp	r3, #0
 8022ad4:	da07      	bge.n	8022ae6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8022ad6:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8022ada:	4463      	add	r3, ip
 8022adc:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8022ae0:	2300      	movs	r3, #0
 8022ae2:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8022ae6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8022aea:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8022aee:	1ad2      	subs	r2, r2, r3
 8022af0:	4594      	cmp	ip, r2
 8022af2:	bfc4      	itt	gt
 8022af4:	1ac2      	subgt	r2, r0, r3
 8022af6:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 8022afa:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8022afe:	2a00      	cmp	r2, #0
 8022b00:	da07      	bge.n	8022b12 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8022b02:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 8022b06:	4462      	add	r2, ip
 8022b08:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8022b0c:	2200      	movs	r2, #0
 8022b0e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8022b12:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 8022b16:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8022b1a:	eba6 060a 	sub.w	r6, r6, sl
 8022b1e:	42b2      	cmp	r2, r6
 8022b20:	bfc4      	itt	gt
 8022b22:	eba1 020a 	subgt.w	r2, r1, sl
 8022b26:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 8022b2a:	4a5c      	ldr	r2, [pc, #368]	@ (8022c9c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8022b2c:	7812      	ldrb	r2, [r2, #0]
 8022b2e:	b9a2      	cbnz	r2, 8022b5a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8022b30:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8022b34:	4286      	cmp	r6, r0
 8022b36:	4640      	mov	r0, r8
 8022b38:	9303      	str	r3, [sp, #12]
 8022b3a:	bf14      	ite	ne
 8022b3c:	2600      	movne	r6, #0
 8022b3e:	2601      	moveq	r6, #1
 8022b40:	f7f2 fa95 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 8022b44:	9b03      	ldr	r3, [sp, #12]
 8022b46:	b160      	cbz	r0, 8022b62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8022b48:	2300      	movs	r3, #0
 8022b4a:	8023      	strh	r3, [r4, #0]
 8022b4c:	8063      	strh	r3, [r4, #2]
 8022b4e:	80a3      	strh	r3, [r4, #4]
 8022b50:	4620      	mov	r0, r4
 8022b52:	80e3      	strh	r3, [r4, #6]
 8022b54:	b011      	add	sp, #68	@ 0x44
 8022b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b5a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8022b5e:	428e      	cmp	r6, r1
 8022b60:	e7e9      	b.n	8022b36 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8022b62:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8022b66:	a90e      	add	r1, sp, #56	@ 0x38
 8022b68:	9205      	str	r2, [sp, #20]
 8022b6a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8022b6e:	900e      	str	r0, [sp, #56]	@ 0x38
 8022b70:	9206      	str	r2, [sp, #24]
 8022b72:	f8bb 2000 	ldrh.w	r2, [fp]
 8022b76:	a80c      	add	r0, sp, #48	@ 0x30
 8022b78:	1a9b      	subs	r3, r3, r2
 8022b7a:	b21b      	sxth	r3, r3
 8022b7c:	9303      	str	r3, [sp, #12]
 8022b7e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8022b82:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 8022b86:	ebaa 0a03 	sub.w	sl, sl, r3
 8022b8a:	fa0f f38a 	sxth.w	r3, sl
 8022b8e:	9304      	str	r3, [sp, #16]
 8022b90:	9b03      	ldr	r3, [sp, #12]
 8022b92:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 8022b96:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8022b9a:	9b04      	ldr	r3, [sp, #16]
 8022b9c:	f8df b104 	ldr.w	fp, [pc, #260]	@ 8022ca4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8022ba0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8022ba4:	9b05      	ldr	r3, [sp, #20]
 8022ba6:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8022baa:	9b06      	ldr	r3, [sp, #24]
 8022bac:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8022bb0:	f7f7 fcaa 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022bb4:	4640      	mov	r0, r8
 8022bb6:	f7f7 fc7f 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022bba:	a80e      	add	r0, sp, #56	@ 0x38
 8022bbc:	f7f7 fc7c 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022bc0:	4b37      	ldr	r3, [pc, #220]	@ (8022ca0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8022bc2:	4628      	mov	r0, r5
 8022bc4:	881b      	ldrh	r3, [r3, #0]
 8022bc6:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 8022bca:	9307      	str	r3, [sp, #28]
 8022bcc:	682b      	ldr	r3, [r5, #0]
 8022bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022bd0:	4798      	blx	r3
 8022bd2:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 8022bd6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8022bda:	4681      	mov	r9, r0
 8022bdc:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8022be0:	f8db 0000 	ldr.w	r0, [fp]
 8022be4:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8022be6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8022bea:	6803      	ldr	r3, [r0, #0]
 8022bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022bee:	4798      	blx	r3
 8022bf0:	4607      	mov	r7, r0
 8022bf2:	f8db 0000 	ldr.w	r0, [fp]
 8022bf6:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8022bfa:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8022bfe:	6803      	ldr	r3, [r0, #0]
 8022c00:	9109      	str	r1, [sp, #36]	@ 0x24
 8022c02:	9208      	str	r2, [sp, #32]
 8022c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022c06:	4798      	blx	r3
 8022c08:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8022c0c:	f010 0f01 	tst.w	r0, #1
 8022c10:	d012      	beq.n	8022c38 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8022c12:	f8db 0000 	ldr.w	r0, [fp]
 8022c16:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8022c1a:	6803      	ldr	r3, [r0, #0]
 8022c1c:	9200      	str	r2, [sp, #0]
 8022c1e:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 8022c20:	e898 0006 	ldmia.w	r8, {r1, r2}
 8022c24:	462b      	mov	r3, r5
 8022c26:	47b0      	blx	r6
 8022c28:	9b03      	ldr	r3, [sp, #12]
 8022c2a:	8023      	strh	r3, [r4, #0]
 8022c2c:	9b04      	ldr	r3, [sp, #16]
 8022c2e:	8063      	strh	r3, [r4, #2]
 8022c30:	9b05      	ldr	r3, [sp, #20]
 8022c32:	80a3      	strh	r3, [r4, #4]
 8022c34:	9b06      	ldr	r3, [sp, #24]
 8022c36:	e78b      	b.n	8022b50 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8022c38:	fb09 f202 	mul.w	r2, r9, r2
 8022c3c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8022c40:	440f      	add	r7, r1
 8022c42:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 8022c46:	b166      	cbz	r6, 8022c62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8022c48:	9a07      	ldr	r2, [sp, #28]
 8022c4a:	4592      	cmp	sl, r2
 8022c4c:	d109      	bne.n	8022c62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8022c4e:	f8db 0000 	ldr.w	r0, [fp]
 8022c52:	fb09 f303 	mul.w	r3, r9, r3
 8022c56:	6802      	ldr	r2, [r0, #0]
 8022c58:	4629      	mov	r1, r5
 8022c5a:	6b96      	ldr	r6, [r2, #56]	@ 0x38
 8022c5c:	463a      	mov	r2, r7
 8022c5e:	47b0      	blx	r6
 8022c60:	e7e2      	b.n	8022c28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8022c62:	fb0a f303 	mul.w	r3, sl, r3
 8022c66:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8022ca4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8022c6a:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8022c6e:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8022c72:	4545      	cmp	r5, r8
 8022c74:	d2d8      	bcs.n	8022c28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8022c76:	f8db 0000 	ldr.w	r0, [fp]
 8022c7a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8022c7e:	6802      	ldr	r2, [r0, #0]
 8022c80:	4629      	mov	r1, r5
 8022c82:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 8022c86:	005b      	lsls	r3, r3, #1
 8022c88:	463a      	mov	r2, r7
 8022c8a:	47d0      	blx	sl
 8022c8c:	444f      	add	r7, r9
 8022c8e:	4435      	add	r5, r6
 8022c90:	e7ef      	b.n	8022c72 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8022c92:	bf00      	nop
 8022c94:	2005bd10 	.word	0x2005bd10
 8022c98:	2005bd12 	.word	0x2005bd12
 8022c9c:	2005bd14 	.word	0x2005bd14
 8022ca0:	2005bd16 	.word	0x2005bd16
 8022ca4:	2005bd1c 	.word	0x2005bd1c

08022ca8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8022ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022caa:	4606      	mov	r6, r0
 8022cac:	b087      	sub	sp, #28
 8022cae:	460c      	mov	r4, r1
 8022cb0:	4617      	mov	r7, r2
 8022cb2:	461d      	mov	r5, r3
 8022cb4:	b333      	cbz	r3, 8022d04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022cb6:	4608      	mov	r0, r1
 8022cb8:	f7f2 f9d9 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 8022cbc:	bb10      	cbnz	r0, 8022d04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022cbe:	6820      	ldr	r0, [r4, #0]
 8022cc0:	6861      	ldr	r1, [r4, #4]
 8022cc2:	ab04      	add	r3, sp, #16
 8022cc4:	4c1b      	ldr	r4, [pc, #108]	@ (8022d34 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8022cc6:	c303      	stmia	r3!, {r0, r1}
 8022cc8:	a804      	add	r0, sp, #16
 8022cca:	f7f7 fbf5 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022cce:	6820      	ldr	r0, [r4, #0]
 8022cd0:	6803      	ldr	r3, [r0, #0]
 8022cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022cd4:	4798      	blx	r3
 8022cd6:	2dff      	cmp	r5, #255	@ 0xff
 8022cd8:	d016      	beq.n	8022d08 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8022cda:	f010 0f08 	tst.w	r0, #8
 8022cde:	6820      	ldr	r0, [r4, #0]
 8022ce0:	d015      	beq.n	8022d0e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8022ce2:	2400      	movs	r4, #0
 8022ce4:	6801      	ldr	r1, [r0, #0]
 8022ce6:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8022cea:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8022cee:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8022cf2:	9401      	str	r4, [sp, #4]
 8022cf4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8022cf8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022cfc:	9400      	str	r4, [sp, #0]
 8022cfe:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 8022d00:	4639      	mov	r1, r7
 8022d02:	47a0      	blx	r4
 8022d04:	b007      	add	sp, #28
 8022d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022d08:	f010 0f02 	tst.w	r0, #2
 8022d0c:	e7e7      	b.n	8022cde <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8022d0e:	6803      	ldr	r3, [r0, #0]
 8022d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022d12:	4798      	blx	r3
 8022d14:	4b08      	ldr	r3, [pc, #32]	@ (8022d38 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8022d16:	4601      	mov	r1, r0
 8022d18:	881a      	ldrh	r2, [r3, #0]
 8022d1a:	e9cd 7500 	strd	r7, r5, [sp]
 8022d1e:	6833      	ldr	r3, [r6, #0]
 8022d20:	4630      	mov	r0, r6
 8022d22:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8022d24:	ab04      	add	r3, sp, #16
 8022d26:	47a8      	blx	r5
 8022d28:	6820      	ldr	r0, [r4, #0]
 8022d2a:	6803      	ldr	r3, [r0, #0]
 8022d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022d2e:	4798      	blx	r3
 8022d30:	e7e8      	b.n	8022d04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022d32:	bf00      	nop
 8022d34:	2005bd1c 	.word	0x2005bd1c
 8022d38:	2005bd16 	.word	0x2005bd16

08022d3c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8022d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022d40:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8022d44:	4688      	mov	r8, r1
 8022d46:	4614      	mov	r4, r2
 8022d48:	461d      	mov	r5, r3
 8022d4a:	9e08      	ldr	r6, [sp, #32]
 8022d4c:	2f00      	cmp	r7, #0
 8022d4e:	f000 80a9 	beq.w	8022ea4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022d52:	4618      	mov	r0, r3
 8022d54:	f7f2 f98b 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 8022d58:	2800      	cmp	r0, #0
 8022d5a:	f040 80a3 	bne.w	8022ea4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022d5e:	f9b5 1000 	ldrsh.w	r1, [r5]
 8022d62:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8022d66:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8022d6a:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8022d6e:	fb04 1303 	mla	r3, r4, r3, r1
 8022d72:	4365      	muls	r5, r4
 8022d74:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8022d78:	2fff      	cmp	r7, #255	@ 0xff
 8022d7a:	eba4 0200 	sub.w	r2, r4, r0
 8022d7e:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8022d82:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8022d86:	d04a      	beq.n	8022e1e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8022d88:	b2bc      	uxth	r4, r7
 8022d8a:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 8022d8e:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8022d92:	fa5f f788 	uxtb.w	r7, r8
 8022d96:	b2f3      	uxtb	r3, r6
 8022d98:	fb0e fe04 	mul.w	lr, lr, r4
 8022d9c:	4367      	muls	r7, r4
 8022d9e:	4363      	muls	r3, r4
 8022da0:	0040      	lsls	r0, r0, #1
 8022da2:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8022da6:	fa1f fc8c 	uxth.w	ip, ip
 8022daa:	42a9      	cmp	r1, r5
 8022dac:	d27a      	bcs.n	8022ea4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022dae:	eb01 0900 	add.w	r9, r1, r0
 8022db2:	4549      	cmp	r1, r9
 8022db4:	d231      	bcs.n	8022e1a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 8022db6:	880a      	ldrh	r2, [r1, #0]
 8022db8:	1214      	asrs	r4, r2, #8
 8022dba:	10d6      	asrs	r6, r2, #3
 8022dbc:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8022dc0:	00d2      	lsls	r2, r2, #3
 8022dc2:	b2d2      	uxtb	r2, r2
 8022dc4:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8022dc8:	fb14 f40c 	smulbb	r4, r4, ip
 8022dcc:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022dd0:	fb12 f20c 	smulbb	r2, r2, ip
 8022dd4:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8022dd8:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8022ddc:	4474      	add	r4, lr
 8022dde:	fb16 f60c 	smulbb	r6, r6, ip
 8022de2:	b2a4      	uxth	r4, r4
 8022de4:	441a      	add	r2, r3
 8022de6:	b292      	uxth	r2, r2
 8022de8:	f104 0a01 	add.w	sl, r4, #1
 8022dec:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022df0:	f102 0a01 	add.w	sl, r2, #1
 8022df4:	443e      	add	r6, r7
 8022df6:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8022dfa:	b2b6      	uxth	r6, r6
 8022dfc:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8022e00:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022e04:	4322      	orrs	r2, r4
 8022e06:	1c74      	adds	r4, r6, #1
 8022e08:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8022e0c:	0976      	lsrs	r6, r6, #5
 8022e0e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8022e12:	4332      	orrs	r2, r6
 8022e14:	f821 2b02 	strh.w	r2, [r1], #2
 8022e18:	e7cb      	b.n	8022db2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8022e1a:	4441      	add	r1, r8
 8022e1c:	e7c5      	b.n	8022daa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8022e1e:	4f22      	ldr	r7, [pc, #136]	@ (8022ea8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8022e20:	0973      	lsrs	r3, r6, #5
 8022e22:	ea08 0707 	and.w	r7, r8, r7
 8022e26:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022e2a:	433b      	orrs	r3, r7
 8022e2c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8022e30:	4333      	orrs	r3, r6
 8022e32:	07e7      	lsls	r7, r4, #31
 8022e34:	b29b      	uxth	r3, r3
 8022e36:	d50b      	bpl.n	8022e50 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8022e38:	0040      	lsls	r0, r0, #1
 8022e3a:	0052      	lsls	r2, r2, #1
 8022e3c:	42a9      	cmp	r1, r5
 8022e3e:	d231      	bcs.n	8022ea4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022e40:	180c      	adds	r4, r1, r0
 8022e42:	42a1      	cmp	r1, r4
 8022e44:	d202      	bcs.n	8022e4c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 8022e46:	f821 3b02 	strh.w	r3, [r1], #2
 8022e4a:	e7fa      	b.n	8022e42 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 8022e4c:	4411      	add	r1, r2
 8022e4e:	e7f5      	b.n	8022e3c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8022e50:	078e      	lsls	r6, r1, #30
 8022e52:	d008      	beq.n	8022e66 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8022e54:	460a      	mov	r2, r1
 8022e56:	0066      	lsls	r6, r4, #1
 8022e58:	42aa      	cmp	r2, r5
 8022e5a:	d202      	bcs.n	8022e62 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 8022e5c:	8013      	strh	r3, [r2, #0]
 8022e5e:	4432      	add	r2, r6
 8022e60:	e7fa      	b.n	8022e58 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 8022e62:	3102      	adds	r1, #2
 8022e64:	3801      	subs	r0, #1
 8022e66:	07c2      	lsls	r2, r0, #31
 8022e68:	d50b      	bpl.n	8022e82 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8022e6a:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8022e6e:	3a01      	subs	r2, #1
 8022e70:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8022e74:	0066      	lsls	r6, r4, #1
 8022e76:	42aa      	cmp	r2, r5
 8022e78:	d202      	bcs.n	8022e80 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 8022e7a:	8013      	strh	r3, [r2, #0]
 8022e7c:	4432      	add	r2, r6
 8022e7e:	e7fa      	b.n	8022e76 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8022e80:	3801      	subs	r0, #1
 8022e82:	b178      	cbz	r0, 8022ea4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022e84:	1040      	asrs	r0, r0, #1
 8022e86:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8022e8a:	0080      	lsls	r0, r0, #2
 8022e8c:	0064      	lsls	r4, r4, #1
 8022e8e:	42a9      	cmp	r1, r5
 8022e90:	d208      	bcs.n	8022ea4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022e92:	460a      	mov	r2, r1
 8022e94:	180e      	adds	r6, r1, r0
 8022e96:	42b2      	cmp	r2, r6
 8022e98:	d202      	bcs.n	8022ea0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 8022e9a:	f842 3b04 	str.w	r3, [r2], #4
 8022e9e:	e7fa      	b.n	8022e96 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 8022ea0:	4421      	add	r1, r4
 8022ea2:	e7f4      	b.n	8022e8e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 8022ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022ea8:	00fff800 	.word	0x00fff800

08022eac <_ZN8touchgfx8LCD16bppC1Ev>:
 8022eac:	2200      	movs	r2, #0
 8022eae:	4912      	ldr	r1, [pc, #72]	@ (8022ef8 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 8022eb0:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8022eb4:	6001      	str	r1, [r0, #0]
 8022eb6:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8022eba:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8022ebe:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8022ec2:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8022ec6:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8022eca:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8022ece:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8022ed2:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8022ed6:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8022eda:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8022ede:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8022ee2:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8022ee6:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 8022eea:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 8022eee:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 8022ef2:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 8022ef6:	4770      	bx	lr
 8022ef8:	080313cc 	.word	0x080313cc

08022efc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8022efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f00:	460d      	mov	r5, r1
 8022f02:	4604      	mov	r4, r0
 8022f04:	4699      	mov	r9, r3
 8022f06:	b08d      	sub	sp, #52	@ 0x34
 8022f08:	6808      	ldr	r0, [r1, #0]
 8022f0a:	6849      	ldr	r1, [r1, #4]
 8022f0c:	ab08      	add	r3, sp, #32
 8022f0e:	c303      	stmia	r3!, {r0, r1}
 8022f10:	6810      	ldr	r0, [r2, #0]
 8022f12:	6851      	ldr	r1, [r2, #4]
 8022f14:	ab0a      	add	r3, sp, #40	@ 0x28
 8022f16:	c303      	stmia	r3!, {r0, r1}
 8022f18:	a808      	add	r0, sp, #32
 8022f1a:	f7f7 facd 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022f1e:	4629      	mov	r1, r5
 8022f20:	a80a      	add	r0, sp, #40	@ 0x28
 8022f22:	f7f7 faf1 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022f26:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8022f2a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8022f2e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8022f32:	4d63      	ldr	r5, [pc, #396]	@ (80230c0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8022f34:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022f38:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022f3c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8022f40:	6828      	ldr	r0, [r5, #0]
 8022f42:	440a      	add	r2, r1
 8022f44:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8022f48:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8022f4c:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 8022f50:	4413      	add	r3, r2
 8022f52:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8022f56:	6803      	ldr	r3, [r0, #0]
 8022f58:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8022f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022f5e:	4798      	blx	r3
 8022f60:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8022f64:	d119      	bne.n	8022f9a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8022f66:	f010 0f20 	tst.w	r0, #32
 8022f6a:	6828      	ldr	r0, [r5, #0]
 8022f6c:	d018      	beq.n	8022fa0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8022f6e:	2500      	movs	r5, #0
 8022f70:	6801      	ldr	r1, [r0, #0]
 8022f72:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8022f76:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8022f7a:	b2b6      	uxth	r6, r6
 8022f7c:	9502      	str	r5, [sp, #8]
 8022f7e:	fa1f f588 	uxth.w	r5, r8
 8022f82:	9601      	str	r6, [sp, #4]
 8022f84:	9500      	str	r5, [sp, #0]
 8022f86:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 8022f88:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8022f8c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8022f90:	4621      	mov	r1, r4
 8022f92:	47a8      	blx	r5
 8022f94:	b00d      	add	sp, #52	@ 0x34
 8022f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f9a:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8022f9e:	e7e4      	b.n	8022f6a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8022fa0:	6803      	ldr	r3, [r0, #0]
 8022fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022fa4:	4798      	blx	r3
 8022fa6:	4947      	ldr	r1, [pc, #284]	@ (80230c4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8022fa8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8022fac:	468a      	mov	sl, r1
 8022fae:	880b      	ldrh	r3, [r1, #0]
 8022fb0:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 8022fb4:	fb03 5202 	mla	r2, r3, r2, r5
 8022fb8:	4373      	muls	r3, r6
 8022fba:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022fbe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022fc2:	9307      	str	r3, [sp, #28]
 8022fc4:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022fc8:	9306      	str	r3, [sp, #24]
 8022fca:	9b07      	ldr	r3, [sp, #28]
 8022fcc:	4298      	cmp	r0, r3
 8022fce:	d270      	bcs.n	80230b2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8022fd0:	4621      	mov	r1, r4
 8022fd2:	9b06      	ldr	r3, [sp, #24]
 8022fd4:	eb00 0b03 	add.w	fp, r0, r3
 8022fd8:	4558      	cmp	r0, fp
 8022fda:	d25d      	bcs.n	8023098 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8022fdc:	f851 4b04 	ldr.w	r4, [r1], #4
 8022fe0:	0e23      	lsrs	r3, r4, #24
 8022fe2:	d014      	beq.n	802300e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8022fe4:	2bff      	cmp	r3, #255	@ 0xff
 8022fe6:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8022fea:	d112      	bne.n	8023012 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8022fec:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8022ff0:	d10f      	bne.n	8023012 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8022ff2:	0963      	lsrs	r3, r4, #5
 8022ff4:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8022ff8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022ffc:	f02c 0c07 	bic.w	ip, ip, #7
 8023000:	ea43 0c0c 	orr.w	ip, r3, ip
 8023004:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8023008:	ea4c 0404 	orr.w	r4, ip, r4
 802300c:	8004      	strh	r4, [r0, #0]
 802300e:	3002      	adds	r0, #2
 8023010:	e7e2      	b.n	8022fd8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8023012:	fb09 f303 	mul.w	r3, r9, r3
 8023016:	1c5a      	adds	r2, r3, #1
 8023018:	eb02 2223 	add.w	r2, r2, r3, asr #8
 802301c:	1212      	asrs	r2, r2, #8
 802301e:	b293      	uxth	r3, r2
 8023020:	43d2      	mvns	r2, r2
 8023022:	8807      	ldrh	r7, [r0, #0]
 8023024:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8023028:	fb1e fe03 	smulbb	lr, lr, r3
 802302c:	123e      	asrs	r6, r7, #8
 802302e:	fa5f fc8c 	uxtb.w	ip, ip
 8023032:	b2e4      	uxtb	r4, r4
 8023034:	fb1c fc03 	smulbb	ip, ip, r3
 8023038:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 802303c:	fb14 f403 	smulbb	r4, r4, r3
 8023040:	b2d2      	uxtb	r2, r2
 8023042:	10fd      	asrs	r5, r7, #3
 8023044:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8023048:	00ff      	lsls	r7, r7, #3
 802304a:	fb06 e602 	mla	r6, r6, r2, lr
 802304e:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8023052:	b2ff      	uxtb	r7, r7
 8023054:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8023058:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 802305c:	fb05 c502 	mla	r5, r5, r2, ip
 8023060:	fb07 4702 	mla	r7, r7, r2, r4
 8023064:	b2b6      	uxth	r6, r6
 8023066:	f106 0e01 	add.w	lr, r6, #1
 802306a:	b2ad      	uxth	r5, r5
 802306c:	b2bf      	uxth	r7, r7
 802306e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8023072:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 8023076:	f105 0c01 	add.w	ip, r5, #1
 802307a:	1c7e      	adds	r6, r7, #1
 802307c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8023080:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023084:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8023088:	096d      	lsrs	r5, r5, #5
 802308a:	ea46 060e 	orr.w	r6, r6, lr
 802308e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8023092:	432e      	orrs	r6, r5
 8023094:	8006      	strh	r6, [r0, #0]
 8023096:	e7ba      	b.n	802300e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8023098:	f8ba 3000 	ldrh.w	r3, [sl]
 802309c:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 80230a0:	eba3 0308 	sub.w	r3, r3, r8
 80230a4:	eba4 0408 	sub.w	r4, r4, r8
 80230a8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80230ac:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80230b0:	e78b      	b.n	8022fca <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 80230b2:	4b03      	ldr	r3, [pc, #12]	@ (80230c0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80230b4:	6818      	ldr	r0, [r3, #0]
 80230b6:	6803      	ldr	r3, [r0, #0]
 80230b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80230ba:	4798      	blx	r3
 80230bc:	e76a      	b.n	8022f94 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 80230be:	bf00      	nop
 80230c0:	2005bd1c 	.word	0x2005bd1c
 80230c4:	2005bd16 	.word	0x2005bd16

080230c8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 80230c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80230cc:	b085      	sub	sp, #20
 80230ce:	466d      	mov	r5, sp
 80230d0:	4616      	mov	r6, r2
 80230d2:	460c      	mov	r4, r1
 80230d4:	6810      	ldr	r0, [r2, #0]
 80230d6:	6851      	ldr	r1, [r2, #4]
 80230d8:	c503      	stmia	r5!, {r0, r1}
 80230da:	6818      	ldr	r0, [r3, #0]
 80230dc:	6859      	ldr	r1, [r3, #4]
 80230de:	c503      	stmia	r5!, {r0, r1}
 80230e0:	4668      	mov	r0, sp
 80230e2:	f7f7 f9e9 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80230e6:	4631      	mov	r1, r6
 80230e8:	a802      	add	r0, sp, #8
 80230ea:	f7f7 fa0d 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80230ee:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80230f2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80230f6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80230fa:	4d28      	ldr	r5, [pc, #160]	@ (802319c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 80230fc:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023100:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8023104:	f8bd 1000 	ldrh.w	r1, [sp]
 8023108:	6828      	ldr	r0, [r5, #0]
 802310a:	440a      	add	r2, r1
 802310c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8023110:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8023114:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8023118:	4413      	add	r3, r2
 802311a:	f8ad 300a 	strh.w	r3, [sp, #10]
 802311e:	6803      	ldr	r3, [r0, #0]
 8023120:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8023124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023126:	4798      	blx	r3
 8023128:	4e1d      	ldr	r6, [pc, #116]	@ (80231a0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 802312a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 802312e:	8833      	ldrh	r3, [r6, #0]
 8023130:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8023134:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 80231a4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8023138:	fb03 1202 	mla	r2, r3, r2, r1
 802313c:	fb08 f303 	mul.w	r3, r8, r3
 8023140:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8023144:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8023148:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 802314c:	4298      	cmp	r0, r3
 802314e:	d21d      	bcs.n	802318c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8023150:	eb00 080c 	add.w	r8, r0, ip
 8023154:	4540      	cmp	r0, r8
 8023156:	d20f      	bcs.n	8023178 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8023158:	f854 1b04 	ldr.w	r1, [r4], #4
 802315c:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8023160:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8023164:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8023168:	ea42 0209 	orr.w	r2, r2, r9
 802316c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8023170:	430a      	orrs	r2, r1
 8023172:	f820 2b02 	strh.w	r2, [r0], #2
 8023176:	e7ed      	b.n	8023154 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8023178:	8832      	ldrh	r2, [r6, #0]
 802317a:	1bd2      	subs	r2, r2, r7
 802317c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8023180:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8023184:	1bd2      	subs	r2, r2, r7
 8023186:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 802318a:	e7df      	b.n	802314c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 802318c:	6828      	ldr	r0, [r5, #0]
 802318e:	6803      	ldr	r3, [r0, #0]
 8023190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023192:	4798      	blx	r3
 8023194:	b005      	add	sp, #20
 8023196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802319a:	bf00      	nop
 802319c:	2005bd1c 	.word	0x2005bd1c
 80231a0:	2005bd16 	.word	0x2005bd16
 80231a4:	fffff800 	.word	0xfffff800

080231a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80231a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80231ac:	460e      	mov	r6, r1
 80231ae:	4604      	mov	r4, r0
 80231b0:	461d      	mov	r5, r3
 80231b2:	b08e      	sub	sp, #56	@ 0x38
 80231b4:	6808      	ldr	r0, [r1, #0]
 80231b6:	6849      	ldr	r1, [r1, #4]
 80231b8:	ab0a      	add	r3, sp, #40	@ 0x28
 80231ba:	c303      	stmia	r3!, {r0, r1}
 80231bc:	6810      	ldr	r0, [r2, #0]
 80231be:	6851      	ldr	r1, [r2, #4]
 80231c0:	ab0c      	add	r3, sp, #48	@ 0x30
 80231c2:	c303      	stmia	r3!, {r0, r1}
 80231c4:	a80a      	add	r0, sp, #40	@ 0x28
 80231c6:	f7f7 f977 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80231ca:	4631      	mov	r1, r6
 80231cc:	a80c      	add	r0, sp, #48	@ 0x30
 80231ce:	f7f7 f99b 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80231d2:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80231d6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80231da:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80231de:	f8df 81b0 	ldr.w	r8, [pc, #432]	@ 8023390 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 80231e2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80231e6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80231ea:	440c      	add	r4, r1
 80231ec:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 80231f0:	f8d8 0000 	ldr.w	r0, [r8]
 80231f4:	440a      	add	r2, r1
 80231f6:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80231fa:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 80231fe:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8023202:	4413      	add	r3, r2
 8023204:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8023208:	6803      	ldr	r3, [r0, #0]
 802320a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 802320e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8023210:	4798      	blx	r3
 8023212:	2dff      	cmp	r5, #255	@ 0xff
 8023214:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 8023394 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8023218:	d124      	bne.n	8023264 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 802321a:	f010 0f01 	tst.w	r0, #1
 802321e:	f8d8 0000 	ldr.w	r0, [r8]
 8023222:	d022      	beq.n	802326a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8023224:	2100      	movs	r1, #0
 8023226:	f04f 0e01 	mov.w	lr, #1
 802322a:	f8d0 c000 	ldr.w	ip, [r0]
 802322e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8023232:	f8cd e018 	str.w	lr, [sp, #24]
 8023236:	f8b9 e000 	ldrh.w	lr, [r9]
 802323a:	b2b6      	uxth	r6, r6
 802323c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8023240:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8023244:	b2bf      	uxth	r7, r7
 8023246:	9102      	str	r1, [sp, #8]
 8023248:	9503      	str	r5, [sp, #12]
 802324a:	9601      	str	r6, [sp, #4]
 802324c:	9700      	str	r7, [sp, #0]
 802324e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8023252:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8023256:	f8dc 5044 	ldr.w	r5, [ip, #68]	@ 0x44
 802325a:	4621      	mov	r1, r4
 802325c:	47a8      	blx	r5
 802325e:	b00e      	add	sp, #56	@ 0x38
 8023260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023264:	f010 0f04 	tst.w	r0, #4
 8023268:	e7d9      	b.n	802321e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 802326a:	6803      	ldr	r3, [r0, #0]
 802326c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802326e:	4798      	blx	r3
 8023270:	f8b9 3000 	ldrh.w	r3, [r9]
 8023274:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8023278:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 802327c:	435e      	muls	r6, r3
 802327e:	fb03 1202 	mla	r2, r3, r2, r1
 8023282:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8023286:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802328a:	ebac 0c07 	sub.w	ip, ip, r7
 802328e:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8023292:	2dff      	cmp	r5, #255	@ 0xff
 8023294:	eba3 0707 	sub.w	r7, r3, r7
 8023298:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 802329c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80232a0:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80232a4:	d049      	beq.n	802333a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80232a6:	43eb      	mvns	r3, r5
 80232a8:	fa1f f985 	uxth.w	r9, r5
 80232ac:	b2db      	uxtb	r3, r3
 80232ae:	42b0      	cmp	r0, r6
 80232b0:	d266      	bcs.n	8023380 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80232b2:	eb00 0a0e 	add.w	sl, r0, lr
 80232b6:	4550      	cmp	r0, sl
 80232b8:	4621      	mov	r1, r4
 80232ba:	f104 0403 	add.w	r4, r4, #3
 80232be:	d25b      	bcs.n	8023378 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80232c0:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80232c4:	8802      	ldrh	r2, [r0, #0]
 80232c6:	fb11 f109 	smulbb	r1, r1, r9
 80232ca:	ea4f 2822 	mov.w	r8, r2, asr #8
 80232ce:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 80232d2:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80232d6:	fb08 1803 	mla	r8, r8, r3, r1
 80232da:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80232de:	10d5      	asrs	r5, r2, #3
 80232e0:	fb11 f109 	smulbb	r1, r1, r9
 80232e4:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80232e8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80232ec:	fb05 1503 	mla	r5, r5, r3, r1
 80232f0:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80232f4:	00d2      	lsls	r2, r2, #3
 80232f6:	fb11 f109 	smulbb	r1, r1, r9
 80232fa:	b2d2      	uxtb	r2, r2
 80232fc:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8023300:	fb02 1203 	mla	r2, r2, r3, r1
 8023304:	fa1f f888 	uxth.w	r8, r8
 8023308:	b292      	uxth	r2, r2
 802330a:	f108 0101 	add.w	r1, r8, #1
 802330e:	b2ad      	uxth	r5, r5
 8023310:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8023314:	1c51      	adds	r1, r2, #1
 8023316:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802331a:	1c69      	adds	r1, r5, #1
 802331c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8023320:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8023324:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023328:	096d      	lsrs	r5, r5, #5
 802332a:	ea42 0208 	orr.w	r2, r2, r8
 802332e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8023332:	432a      	orrs	r2, r5
 8023334:	f820 2b02 	strh.w	r2, [r0], #2
 8023338:	e7bd      	b.n	80232b6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 802333a:	4a14      	ldr	r2, [pc, #80]	@ (802338c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 802333c:	42b0      	cmp	r0, r6
 802333e:	d21f      	bcs.n	8023380 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8023340:	eb00 050e 	add.w	r5, r0, lr
 8023344:	42a8      	cmp	r0, r5
 8023346:	4621      	mov	r1, r4
 8023348:	f104 0403 	add.w	r4, r4, #3
 802334c:	d210      	bcs.n	8023370 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 802334e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8023352:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8023356:	00db      	lsls	r3, r3, #3
 8023358:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 802335c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023360:	430b      	orrs	r3, r1
 8023362:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8023366:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 802336a:	f820 3b02 	strh.w	r3, [r0], #2
 802336e:	e7e9      	b.n	8023344 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8023370:	4438      	add	r0, r7
 8023372:	eb01 040c 	add.w	r4, r1, ip
 8023376:	e7e1      	b.n	802333c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8023378:	4438      	add	r0, r7
 802337a:	eb01 040c 	add.w	r4, r1, ip
 802337e:	e796      	b.n	80232ae <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8023380:	4b03      	ldr	r3, [pc, #12]	@ (8023390 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8023382:	6818      	ldr	r0, [r3, #0]
 8023384:	6803      	ldr	r3, [r0, #0]
 8023386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023388:	4798      	blx	r3
 802338a:	e768      	b.n	802325e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 802338c:	fffff800 	.word	0xfffff800
 8023390:	2005bd1c 	.word	0x2005bd1c
 8023394:	2005bd16 	.word	0x2005bd16

08023398 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8023398:	b4f0      	push	{r4, r5, r6, r7}
 802339a:	4616      	mov	r6, r2
 802339c:	2e01      	cmp	r6, #1
 802339e:	461c      	mov	r4, r3
 80233a0:	460d      	mov	r5, r1
 80233a2:	9a04      	ldr	r2, [sp, #16]
 80233a4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80233a8:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80233ac:	d012      	beq.n	80233d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80233ae:	d303      	bcc.n	80233b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 80233b0:	2e02      	cmp	r6, #2
 80233b2:	d00a      	beq.n	80233ca <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 80233b4:	bcf0      	pop	{r4, r5, r6, r7}
 80233b6:	4770      	bx	lr
 80233b8:	6805      	ldr	r5, [r0, #0]
 80233ba:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80233be:	68ed      	ldr	r5, [r5, #12]
 80233c0:	4613      	mov	r3, r2
 80233c2:	46ac      	mov	ip, r5
 80233c4:	4622      	mov	r2, r4
 80233c6:	bcf0      	pop	{r4, r5, r6, r7}
 80233c8:	4760      	bx	ip
 80233ca:	4621      	mov	r1, r4
 80233cc:	4628      	mov	r0, r5
 80233ce:	bcf0      	pop	{r4, r5, r6, r7}
 80233d0:	f7ff bd94 	b.w	8022efc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80233d4:	4621      	mov	r1, r4
 80233d6:	4628      	mov	r0, r5
 80233d8:	bcf0      	pop	{r4, r5, r6, r7}
 80233da:	f7ff bee5 	b.w	80231a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

080233e0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80233e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233e4:	4616      	mov	r6, r2
 80233e6:	4681      	mov	r9, r0
 80233e8:	b093      	sub	sp, #76	@ 0x4c
 80233ea:	6810      	ldr	r0, [r2, #0]
 80233ec:	4688      	mov	r8, r1
 80233ee:	6851      	ldr	r1, [r2, #4]
 80233f0:	ac0e      	add	r4, sp, #56	@ 0x38
 80233f2:	c403      	stmia	r4!, {r0, r1}
 80233f4:	6818      	ldr	r0, [r3, #0]
 80233f6:	6859      	ldr	r1, [r3, #4]
 80233f8:	ac10      	add	r4, sp, #64	@ 0x40
 80233fa:	c403      	stmia	r4!, {r0, r1}
 80233fc:	a80e      	add	r0, sp, #56	@ 0x38
 80233fe:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 8023402:	f7f7 f859 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023406:	4631      	mov	r1, r6
 8023408:	a810      	add	r0, sp, #64	@ 0x40
 802340a:	f7f7 f87d 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802340e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8023412:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8023416:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 802341a:	4e62      	ldr	r6, [pc, #392]	@ (80235a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 802341c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023420:	4489      	add	r9, r1
 8023422:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8023426:	6830      	ldr	r0, [r6, #0]
 8023428:	440a      	add	r2, r1
 802342a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 802342e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8023432:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8023436:	4413      	add	r3, r2
 8023438:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 802343c:	6803      	ldr	r3, [r0, #0]
 802343e:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8023442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8023444:	4798      	blx	r3
 8023446:	f010 0f80 	tst.w	r0, #128	@ 0x80
 802344a:	4f57      	ldr	r7, [pc, #348]	@ (80235a8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 802344c:	6830      	ldr	r0, [r6, #0]
 802344e:	d01d      	beq.n	802348c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8023450:	2200      	movs	r2, #0
 8023452:	6801      	ldr	r1, [r0, #0]
 8023454:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8023458:	220b      	movs	r2, #11
 802345a:	9207      	str	r2, [sp, #28]
 802345c:	883a      	ldrh	r2, [r7, #0]
 802345e:	b2a4      	uxth	r4, r4
 8023460:	9206      	str	r2, [sp, #24]
 8023462:	2201      	movs	r2, #1
 8023464:	e9cd a204 	strd	sl, r2, [sp, #16]
 8023468:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 802346c:	b2ad      	uxth	r5, r5
 802346e:	9203      	str	r2, [sp, #12]
 8023470:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8023474:	9502      	str	r5, [sp, #8]
 8023476:	9200      	str	r2, [sp, #0]
 8023478:	9401      	str	r4, [sp, #4]
 802347a:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 802347c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8023480:	4642      	mov	r2, r8
 8023482:	4649      	mov	r1, r9
 8023484:	47a0      	blx	r4
 8023486:	b013      	add	sp, #76	@ 0x4c
 8023488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802348c:	6803      	ldr	r3, [r0, #0]
 802348e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023490:	4798      	blx	r3
 8023492:	f04f 0e04 	mov.w	lr, #4
 8023496:	883b      	ldrh	r3, [r7, #0]
 8023498:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 802349c:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 80234a0:	435d      	muls	r5, r3
 80234a2:	fb03 1202 	mla	r2, r3, r2, r1
 80234a6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80234aa:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80234ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80234b0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80234b4:	1b12      	subs	r2, r2, r4
 80234b6:	920d      	str	r2, [sp, #52]	@ 0x34
 80234b8:	0062      	lsls	r2, r4, #1
 80234ba:	1b1c      	subs	r4, r3, r4
 80234bc:	0063      	lsls	r3, r4, #1
 80234be:	920a      	str	r2, [sp, #40]	@ 0x28
 80234c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80234c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80234c4:	4298      	cmp	r0, r3
 80234c6:	d266      	bcs.n	8023596 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 80234c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80234ca:	eb00 0b03 	add.w	fp, r0, r3
 80234ce:	4558      	cmp	r0, fp
 80234d0:	d25c      	bcs.n	802358c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80234d2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80234d6:	fb1e e303 	smlabb	r3, lr, r3, lr
 80234da:	f858 2003 	ldr.w	r2, [r8, r3]
 80234de:	0e11      	lsrs	r1, r2, #24
 80234e0:	d012      	beq.n	8023508 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80234e2:	29ff      	cmp	r1, #255	@ 0xff
 80234e4:	ea4f 2712 	mov.w	r7, r2, lsr #8
 80234e8:	d110      	bne.n	802350c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80234ea:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80234ee:	d10d      	bne.n	802350c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80234f0:	0953      	lsrs	r3, r2, #5
 80234f2:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 80234f6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80234fa:	f027 0707 	bic.w	r7, r7, #7
 80234fe:	431f      	orrs	r7, r3
 8023500:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023504:	433a      	orrs	r2, r7
 8023506:	8002      	strh	r2, [r0, #0]
 8023508:	3002      	adds	r0, #2
 802350a:	e7e0      	b.n	80234ce <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 802350c:	fb0a f101 	mul.w	r1, sl, r1
 8023510:	1c4b      	adds	r3, r1, #1
 8023512:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8023516:	121b      	asrs	r3, r3, #8
 8023518:	b299      	uxth	r1, r3
 802351a:	43db      	mvns	r3, r3
 802351c:	8806      	ldrh	r6, [r0, #0]
 802351e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8023522:	b2d2      	uxtb	r2, r2
 8023524:	fb1c fc01 	smulbb	ip, ip, r1
 8023528:	fb12 f201 	smulbb	r2, r2, r1
 802352c:	1235      	asrs	r5, r6, #8
 802352e:	10f4      	asrs	r4, r6, #3
 8023530:	00f6      	lsls	r6, r6, #3
 8023532:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8023536:	b2f6      	uxtb	r6, r6
 8023538:	b2ff      	uxtb	r7, r7
 802353a:	b2db      	uxtb	r3, r3
 802353c:	fb17 f701 	smulbb	r7, r7, r1
 8023540:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8023544:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8023548:	fb05 c503 	mla	r5, r5, r3, ip
 802354c:	fb06 2203 	mla	r2, r6, r3, r2
 8023550:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8023554:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8023558:	fb04 7403 	mla	r4, r4, r3, r7
 802355c:	b2ad      	uxth	r5, r5
 802355e:	b292      	uxth	r2, r2
 8023560:	f105 0c01 	add.w	ip, r5, #1
 8023564:	1c57      	adds	r7, r2, #1
 8023566:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802356a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802356e:	b2a4      	uxth	r4, r4
 8023570:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023574:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8023578:	433d      	orrs	r5, r7
 802357a:	1c67      	adds	r7, r4, #1
 802357c:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8023580:	0964      	lsrs	r4, r4, #5
 8023582:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8023586:	4325      	orrs	r5, r4
 8023588:	8005      	strh	r5, [r0, #0]
 802358a:	e7bd      	b.n	8023508 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 802358c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802358e:	4418      	add	r0, r3
 8023590:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023592:	4499      	add	r9, r3
 8023594:	e795      	b.n	80234c2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8023596:	4b03      	ldr	r3, [pc, #12]	@ (80235a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8023598:	6818      	ldr	r0, [r3, #0]
 802359a:	6803      	ldr	r3, [r0, #0]
 802359c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802359e:	4798      	blx	r3
 80235a0:	e771      	b.n	8023486 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80235a2:	bf00      	nop
 80235a4:	2005bd1c 	.word	0x2005bd1c
 80235a8:	2005bd16 	.word	0x2005bd16

080235ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80235ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235b0:	b087      	sub	sp, #28
 80235b2:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 80235b6:	4680      	mov	r8, r0
 80235b8:	460d      	mov	r5, r1
 80235ba:	4614      	mov	r4, r2
 80235bc:	2e00      	cmp	r6, #0
 80235be:	f000 80b9 	beq.w	8023734 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 80235c2:	6810      	ldr	r0, [r2, #0]
 80235c4:	6851      	ldr	r1, [r2, #4]
 80235c6:	af02      	add	r7, sp, #8
 80235c8:	c703      	stmia	r7!, {r0, r1}
 80235ca:	6818      	ldr	r0, [r3, #0]
 80235cc:	6859      	ldr	r1, [r3, #4]
 80235ce:	af04      	add	r7, sp, #16
 80235d0:	c703      	stmia	r7!, {r0, r1}
 80235d2:	a802      	add	r0, sp, #8
 80235d4:	f7f6 ff70 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80235d8:	4621      	mov	r1, r4
 80235da:	a804      	add	r0, sp, #16
 80235dc:	f7f6 ff94 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80235e0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80235e4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80235e8:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80235ec:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 80235f0:	fb14 2103 	smlabb	r1, r4, r3, r2
 80235f4:	eb08 0401 	add.w	r4, r8, r1
 80235f8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80235fc:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8023600:	440a      	add	r2, r1
 8023602:	f8ad 2010 	strh.w	r2, [sp, #16]
 8023606:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802360a:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 802360e:	4413      	add	r3, r2
 8023610:	f8ad 3012 	strh.w	r3, [sp, #18]
 8023614:	4b49      	ldr	r3, [pc, #292]	@ (802373c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8023616:	6818      	ldr	r0, [r3, #0]
 8023618:	6803      	ldr	r3, [r0, #0]
 802361a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802361c:	4798      	blx	r3
 802361e:	4b48      	ldr	r3, [pc, #288]	@ (8023740 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8023620:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8023624:	881a      	ldrh	r2, [r3, #0]
 8023626:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 802362a:	2eff      	cmp	r6, #255	@ 0xff
 802362c:	fb02 c101 	mla	r1, r2, r1, ip
 8023630:	fb02 f207 	mul.w	r2, r2, r7
 8023634:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8023638:	f105 0104 	add.w	r1, r5, #4
 802363c:	461d      	mov	r5, r3
 802363e:	d05a      	beq.n	80236f6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8023640:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 8023644:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8023648:	b2b6      	uxth	r6, r6
 802364a:	fa1f fe8e 	uxth.w	lr, lr
 802364e:	9301      	str	r3, [sp, #4]
 8023650:	4282      	cmp	r2, r0
 8023652:	d96a      	bls.n	802372a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8023654:	eb00 0b0a 	add.w	fp, r0, sl
 8023658:	4583      	cmp	fp, r0
 802365a:	d940      	bls.n	80236de <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 802365c:	8805      	ldrh	r5, [r0, #0]
 802365e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023662:	122f      	asrs	r7, r5, #8
 8023664:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8023668:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802366c:	fb17 f70e 	smulbb	r7, r7, lr
 8023670:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8023674:	00ed      	lsls	r5, r5, #3
 8023676:	b2ed      	uxtb	r5, r5
 8023678:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802367c:	fb15 f50e 	smulbb	r5, r5, lr
 8023680:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8023684:	fb0c 7c06 	mla	ip, ip, r6, r7
 8023688:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 802368c:	10df      	asrs	r7, r3, #3
 802368e:	00db      	lsls	r3, r3, #3
 8023690:	fb19 f90e 	smulbb	r9, r9, lr
 8023694:	b2db      	uxtb	r3, r3
 8023696:	fb03 5306 	mla	r3, r3, r6, r5
 802369a:	fa1f fc8c 	uxth.w	ip, ip
 802369e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80236a2:	fb07 9706 	mla	r7, r7, r6, r9
 80236a6:	f10c 0901 	add.w	r9, ip, #1
 80236aa:	b29b      	uxth	r3, r3
 80236ac:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80236b0:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 80236b4:	f103 0c01 	add.w	ip, r3, #1
 80236b8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80236bc:	b2bf      	uxth	r7, r7
 80236be:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80236c2:	ea4c 0c09 	orr.w	ip, ip, r9
 80236c6:	f107 0901 	add.w	r9, r7, #1
 80236ca:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80236ce:	097f      	lsrs	r7, r7, #5
 80236d0:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80236d4:	ea4c 0c07 	orr.w	ip, ip, r7
 80236d8:	f820 cb02 	strh.w	ip, [r0], #2
 80236dc:	e7bc      	b.n	8023658 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 80236de:	9b01      	ldr	r3, [sp, #4]
 80236e0:	881b      	ldrh	r3, [r3, #0]
 80236e2:	eba3 0308 	sub.w	r3, r3, r8
 80236e6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80236ea:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80236ee:	eba3 0308 	sub.w	r3, r3, r8
 80236f2:	441c      	add	r4, r3
 80236f4:	e7ac      	b.n	8023650 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 80236f6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80236fa:	4282      	cmp	r2, r0
 80236fc:	d915      	bls.n	802372a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80236fe:	eb00 060a 	add.w	r6, r0, sl
 8023702:	4286      	cmp	r6, r0
 8023704:	d906      	bls.n	8023714 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8023706:	f814 3b01 	ldrb.w	r3, [r4], #1
 802370a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802370e:	f820 3b02 	strh.w	r3, [r0], #2
 8023712:	e7f6      	b.n	8023702 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8023714:	882b      	ldrh	r3, [r5, #0]
 8023716:	eba3 0308 	sub.w	r3, r3, r8
 802371a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802371e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8023722:	eba3 0308 	sub.w	r3, r3, r8
 8023726:	441c      	add	r4, r3
 8023728:	e7e7      	b.n	80236fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 802372a:	4b04      	ldr	r3, [pc, #16]	@ (802373c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 802372c:	6818      	ldr	r0, [r3, #0]
 802372e:	6803      	ldr	r3, [r0, #0]
 8023730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023732:	4798      	blx	r3
 8023734:	b007      	add	sp, #28
 8023736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802373a:	bf00      	nop
 802373c:	2005bd1c 	.word	0x2005bd1c
 8023740:	2005bd16 	.word	0x2005bd16

08023744 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8023744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023748:	b091      	sub	sp, #68	@ 0x44
 802374a:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 802374e:	4680      	mov	r8, r0
 8023750:	460f      	mov	r7, r1
 8023752:	4614      	mov	r4, r2
 8023754:	2d00      	cmp	r5, #0
 8023756:	d051      	beq.n	80237fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8023758:	6810      	ldr	r0, [r2, #0]
 802375a:	6851      	ldr	r1, [r2, #4]
 802375c:	ae0c      	add	r6, sp, #48	@ 0x30
 802375e:	c603      	stmia	r6!, {r0, r1}
 8023760:	6818      	ldr	r0, [r3, #0]
 8023762:	6859      	ldr	r1, [r3, #4]
 8023764:	ae0e      	add	r6, sp, #56	@ 0x38
 8023766:	c603      	stmia	r6!, {r0, r1}
 8023768:	a80c      	add	r0, sp, #48	@ 0x30
 802376a:	f7f6 fea5 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802376e:	4621      	mov	r1, r4
 8023770:	a80e      	add	r0, sp, #56	@ 0x38
 8023772:	f7f6 fec9 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023776:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 802377a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 802377e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8023782:	f8df 91dc 	ldr.w	r9, [pc, #476]	@ 8023960 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8023786:	fb11 2103 	smlabb	r1, r1, r3, r2
 802378a:	eb08 0401 	add.w	r4, r8, r1
 802378e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8023792:	f8d9 0000 	ldr.w	r0, [r9]
 8023796:	440a      	add	r2, r1
 8023798:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 802379c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80237a0:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 80237a4:	4413      	add	r3, r2
 80237a6:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80237aa:	6803      	ldr	r3, [r0, #0]
 80237ac:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 80237b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80237b2:	4798      	blx	r3
 80237b4:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80237b8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8023964 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 80237bc:	f8d9 0000 	ldr.w	r0, [r9]
 80237c0:	d01f      	beq.n	8023802 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 80237c2:	2200      	movs	r2, #0
 80237c4:	6801      	ldr	r1, [r0, #0]
 80237c6:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80237ca:	220b      	movs	r2, #11
 80237cc:	9207      	str	r2, [sp, #28]
 80237ce:	f8b8 2000 	ldrh.w	r2, [r8]
 80237d2:	b2b6      	uxth	r6, r6
 80237d4:	9206      	str	r2, [sp, #24]
 80237d6:	2201      	movs	r2, #1
 80237d8:	e9cd 5204 	strd	r5, r2, [sp, #16]
 80237dc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80237e0:	9601      	str	r6, [sp, #4]
 80237e2:	9203      	str	r2, [sp, #12]
 80237e4:	fa1f f28a 	uxth.w	r2, sl
 80237e8:	9202      	str	r2, [sp, #8]
 80237ea:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80237ee:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80237f2:	9200      	str	r2, [sp, #0]
 80237f4:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 80237f6:	463a      	mov	r2, r7
 80237f8:	4621      	mov	r1, r4
 80237fa:	47a8      	blx	r5
 80237fc:	b011      	add	sp, #68	@ 0x44
 80237fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023802:	6803      	ldr	r3, [r0, #0]
 8023804:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8023808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802380a:	4798      	blx	r3
 802380c:	f8b8 2000 	ldrh.w	r2, [r8]
 8023810:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8023814:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8023818:	2dff      	cmp	r5, #255	@ 0xff
 802381a:	fb02 1303 	mla	r3, r2, r3, r1
 802381e:	fb0a fa02 	mul.w	sl, sl, r2
 8023822:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023826:	d062      	beq.n	80238ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8023828:	ea6f 0c05 	mvn.w	ip, r5
 802382c:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8023830:	930a      	str	r3, [sp, #40]	@ 0x28
 8023832:	b2ad      	uxth	r5, r5
 8023834:	fa5f fc8c 	uxtb.w	ip, ip
 8023838:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 802383c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802383e:	4298      	cmp	r0, r3
 8023840:	f080 8085 	bcs.w	802394e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8023844:	eb00 0b09 	add.w	fp, r0, r9
 8023848:	4558      	cmp	r0, fp
 802384a:	d246      	bcs.n	80238da <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 802384c:	2303      	movs	r3, #3
 802384e:	2204      	movs	r2, #4
 8023850:	f814 eb01 	ldrb.w	lr, [r4], #1
 8023854:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8023858:	eb07 0a0e 	add.w	sl, r7, lr
 802385c:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8023860:	8803      	ldrh	r3, [r0, #0]
 8023862:	fb18 f805 	smulbb	r8, r8, r5
 8023866:	1219      	asrs	r1, r3, #8
 8023868:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802386c:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8023870:	fb01 810c 	mla	r1, r1, ip, r8
 8023874:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023878:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802387c:	fb1e fe05 	smulbb	lr, lr, r5
 8023880:	fb18 f805 	smulbb	r8, r8, r5
 8023884:	10da      	asrs	r2, r3, #3
 8023886:	00db      	lsls	r3, r3, #3
 8023888:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802388c:	b2db      	uxtb	r3, r3
 802388e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8023892:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8023896:	fb02 820c 	mla	r2, r2, ip, r8
 802389a:	fb03 e30c 	mla	r3, r3, ip, lr
 802389e:	b289      	uxth	r1, r1
 80238a0:	b292      	uxth	r2, r2
 80238a2:	b29b      	uxth	r3, r3
 80238a4:	f101 0801 	add.w	r8, r1, #1
 80238a8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80238ac:	f103 0e01 	add.w	lr, r3, #1
 80238b0:	f102 0801 	add.w	r8, r2, #1
 80238b4:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80238b8:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80238bc:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80238c0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80238c4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80238c8:	ea4e 0101 	orr.w	r1, lr, r1
 80238cc:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80238d0:	ea41 0108 	orr.w	r1, r1, r8
 80238d4:	f820 1b02 	strh.w	r1, [r0], #2
 80238d8:	e7b6      	b.n	8023848 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 80238da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80238dc:	881b      	ldrh	r3, [r3, #0]
 80238de:	1b9b      	subs	r3, r3, r6
 80238e0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80238e4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80238e8:	1b9b      	subs	r3, r3, r6
 80238ea:	441c      	add	r4, r3
 80238ec:	e7a6      	b.n	802383c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 80238ee:	2203      	movs	r2, #3
 80238f0:	2504      	movs	r5, #4
 80238f2:	491a      	ldr	r1, [pc, #104]	@ (802395c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 80238f4:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 80238f8:	4550      	cmp	r0, sl
 80238fa:	d228      	bcs.n	802394e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 80238fc:	eb00 0c09 	add.w	ip, r0, r9
 8023900:	4560      	cmp	r0, ip
 8023902:	4623      	mov	r3, r4
 8023904:	d219      	bcs.n	802393a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8023906:	f893 e000 	ldrb.w	lr, [r3]
 802390a:	3401      	adds	r4, #1
 802390c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8023910:	eb07 0b0e 	add.w	fp, r7, lr
 8023914:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8023918:	f89b b001 	ldrb.w	fp, [fp, #1]
 802391c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023920:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8023924:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8023928:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 802392c:	ea43 030b 	orr.w	r3, r3, fp
 8023930:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8023934:	f820 3b02 	strh.w	r3, [r0], #2
 8023938:	e7e2      	b.n	8023900 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 802393a:	f8b8 3000 	ldrh.w	r3, [r8]
 802393e:	1b9b      	subs	r3, r3, r6
 8023940:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023944:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8023948:	1b9b      	subs	r3, r3, r6
 802394a:	441c      	add	r4, r3
 802394c:	e7d4      	b.n	80238f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 802394e:	4b04      	ldr	r3, [pc, #16]	@ (8023960 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8023950:	6818      	ldr	r0, [r3, #0]
 8023952:	6803      	ldr	r3, [r0, #0]
 8023954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023956:	4798      	blx	r3
 8023958:	e750      	b.n	80237fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 802395a:	bf00      	nop
 802395c:	fffff800 	.word	0xfffff800
 8023960:	2005bd1c 	.word	0x2005bd1c
 8023964:	2005bd16 	.word	0x2005bd16

08023968 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8023968:	b4f0      	push	{r4, r5, r6, r7}
 802396a:	460c      	mov	r4, r1
 802396c:	4611      	mov	r1, r2
 802396e:	780f      	ldrb	r7, [r1, #0]
 8023970:	461a      	mov	r2, r3
 8023972:	2f01      	cmp	r7, #1
 8023974:	9b04      	ldr	r3, [sp, #16]
 8023976:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802397a:	784e      	ldrb	r6, [r1, #1]
 802397c:	d038      	beq.n	80239f0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 802397e:	d31f      	bcc.n	80239c0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 8023980:	2f02      	cmp	r7, #2
 8023982:	d14d      	bne.n	8023a20 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8023984:	2e03      	cmp	r6, #3
 8023986:	d84b      	bhi.n	8023a20 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8023988:	e8df f006 	tbb	[pc, r6]
 802398c:	17140702 	.word	0x17140702
 8023990:	9504      	str	r5, [sp, #16]
 8023992:	4620      	mov	r0, r4
 8023994:	bcf0      	pop	{r4, r5, r6, r7}
 8023996:	f7ff be09 	b.w	80235ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 802399a:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 802399c:	2800      	cmp	r0, #0
 802399e:	d03f      	beq.n	8023a20 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80239a0:	6806      	ldr	r6, [r0, #0]
 80239a2:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80239a6:	68b5      	ldr	r5, [r6, #8]
 80239a8:	4613      	mov	r3, r2
 80239aa:	46ac      	mov	ip, r5
 80239ac:	460a      	mov	r2, r1
 80239ae:	4621      	mov	r1, r4
 80239b0:	bcf0      	pop	{r4, r5, r6, r7}
 80239b2:	4760      	bx	ip
 80239b4:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80239b8:	e7f0      	b.n	802399c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80239ba:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80239be:	e7ed      	b.n	802399c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80239c0:	2e03      	cmp	r6, #3
 80239c2:	d82d      	bhi.n	8023a20 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80239c4:	e8df f006 	tbb	[pc, r6]
 80239c8:	110e0702 	.word	0x110e0702
 80239cc:	9504      	str	r5, [sp, #16]
 80239ce:	4620      	mov	r0, r4
 80239d0:	bcf0      	pop	{r4, r5, r6, r7}
 80239d2:	f7ff bd05 	b.w	80233e0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80239d6:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80239d8:	b310      	cbz	r0, 8023a20 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80239da:	6806      	ldr	r6, [r0, #0]
 80239dc:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80239e0:	68f5      	ldr	r5, [r6, #12]
 80239e2:	e7e1      	b.n	80239a8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80239e4:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80239e8:	e7f6      	b.n	80239d8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 80239ea:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80239ee:	e7f3      	b.n	80239d8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 80239f0:	2e03      	cmp	r6, #3
 80239f2:	d815      	bhi.n	8023a20 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80239f4:	e8df f006 	tbb	[pc, r6]
 80239f8:	110e0702 	.word	0x110e0702
 80239fc:	9504      	str	r5, [sp, #16]
 80239fe:	4620      	mov	r0, r4
 8023a00:	bcf0      	pop	{r4, r5, r6, r7}
 8023a02:	f7ff be9f 	b.w	8023744 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8023a06:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8023a08:	b150      	cbz	r0, 8023a20 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8023a0a:	6806      	ldr	r6, [r0, #0]
 8023a0c:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8023a10:	6935      	ldr	r5, [r6, #16]
 8023a12:	e7c9      	b.n	80239a8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8023a14:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8023a18:	e7f6      	b.n	8023a08 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8023a1a:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8023a1e:	e7f3      	b.n	8023a08 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8023a20:	bcf0      	pop	{r4, r5, r6, r7}
 8023a22:	4770      	bx	lr

08023a24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8023a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a28:	4617      	mov	r7, r2
 8023a2a:	4604      	mov	r4, r0
 8023a2c:	460e      	mov	r6, r1
 8023a2e:	b087      	sub	sp, #28
 8023a30:	6810      	ldr	r0, [r2, #0]
 8023a32:	6851      	ldr	r1, [r2, #4]
 8023a34:	ad02      	add	r5, sp, #8
 8023a36:	c503      	stmia	r5!, {r0, r1}
 8023a38:	6818      	ldr	r0, [r3, #0]
 8023a3a:	6859      	ldr	r1, [r3, #4]
 8023a3c:	ad04      	add	r5, sp, #16
 8023a3e:	c503      	stmia	r5!, {r0, r1}
 8023a40:	a802      	add	r0, sp, #8
 8023a42:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 8023a46:	f7f6 fd37 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023a4a:	4639      	mov	r1, r7
 8023a4c:	a804      	add	r0, sp, #16
 8023a4e:	f7f6 fd5b 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023a52:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023a56:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023a5a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8023a5e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8023a62:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023a66:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8023a6a:	440e      	add	r6, r1
 8023a6c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8023a70:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8023a74:	440a      	add	r2, r1
 8023a76:	f8ad 2010 	strh.w	r2, [sp, #16]
 8023a7a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8023a7e:	f8df 91ec 	ldr.w	r9, [pc, #492]	@ 8023c6c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8023a82:	4413      	add	r3, r2
 8023a84:	f8ad 3012 	strh.w	r3, [sp, #18]
 8023a88:	4b77      	ldr	r3, [pc, #476]	@ (8023c68 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8023a8a:	6818      	ldr	r0, [r3, #0]
 8023a8c:	6803      	ldr	r3, [r0, #0]
 8023a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023a90:	4798      	blx	r3
 8023a92:	f8b9 b000 	ldrh.w	fp, [r9]
 8023a96:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023a9a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023a9e:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8023aa2:	fb0b 2303 	mla	r3, fp, r3, r2
 8023aa6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023aaa:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8023aae:	fb05 f50b 	mul.w	r5, r5, fp
 8023ab2:	9300      	str	r3, [sp, #0]
 8023ab4:	d069      	beq.n	8023b8a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8023ab6:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8023aba:	4558      	cmp	r0, fp
 8023abc:	f080 80cc 	bcs.w	8023c58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8023ac0:	4631      	mov	r1, r6
 8023ac2:	9b00      	ldr	r3, [sp, #0]
 8023ac4:	18c3      	adds	r3, r0, r3
 8023ac6:	9301      	str	r3, [sp, #4]
 8023ac8:	9b01      	ldr	r3, [sp, #4]
 8023aca:	4298      	cmp	r0, r3
 8023acc:	d24f      	bcs.n	8023b6e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8023ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023ad2:	2a00      	cmp	r2, #0
 8023ad4:	d048      	beq.n	8023b68 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8023ad6:	fb0a f202 	mul.w	r2, sl, r2
 8023ada:	1c53      	adds	r3, r2, #1
 8023adc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023ae0:	121b      	asrs	r3, r3, #8
 8023ae2:	d041      	beq.n	8023b68 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8023ae4:	b29e      	uxth	r6, r3
 8023ae6:	43db      	mvns	r3, r3
 8023ae8:	8802      	ldrh	r2, [r0, #0]
 8023aea:	b2db      	uxtb	r3, r3
 8023aec:	1215      	asrs	r5, r2, #8
 8023aee:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8023af2:	f8b4 c000 	ldrh.w	ip, [r4]
 8023af6:	fb15 f503 	smulbb	r5, r5, r3
 8023afa:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8023afe:	00d2      	lsls	r2, r2, #3
 8023b00:	b2d2      	uxtb	r2, r2
 8023b02:	ea4f 272c 	mov.w	r7, ip, asr #8
 8023b06:	fb12 f203 	smulbb	r2, r2, r3
 8023b0a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8023b0e:	fb07 5706 	mla	r7, r7, r6, r5
 8023b12:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8023b16:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8023b1a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023b1e:	fb1e fe03 	smulbb	lr, lr, r3
 8023b22:	fa5f fc8c 	uxtb.w	ip, ip
 8023b26:	fb0c 2c06 	mla	ip, ip, r6, r2
 8023b2a:	b2bf      	uxth	r7, r7
 8023b2c:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8023b30:	fb05 e506 	mla	r5, r5, r6, lr
 8023b34:	f107 0e01 	add.w	lr, r7, #1
 8023b38:	fa1f fc8c 	uxth.w	ip, ip
 8023b3c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8023b40:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 8023b44:	f10c 0701 	add.w	r7, ip, #1
 8023b48:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023b4c:	b2ad      	uxth	r5, r5
 8023b4e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023b52:	ea47 070e 	orr.w	r7, r7, lr
 8023b56:	f105 0e01 	add.w	lr, r5, #1
 8023b5a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8023b5e:	096d      	lsrs	r5, r5, #5
 8023b60:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8023b64:	432f      	orrs	r7, r5
 8023b66:	8007      	strh	r7, [r0, #0]
 8023b68:	3002      	adds	r0, #2
 8023b6a:	3402      	adds	r4, #2
 8023b6c:	e7ac      	b.n	8023ac8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8023b6e:	f8b9 3000 	ldrh.w	r3, [r9]
 8023b72:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8023b76:	eba3 0308 	sub.w	r3, r3, r8
 8023b7a:	eba6 0608 	sub.w	r6, r6, r8
 8023b7e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8023b82:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023b86:	440e      	add	r6, r1
 8023b88:	e797      	b.n	8023aba <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8023b8a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8023b8e:	42a8      	cmp	r0, r5
 8023b90:	d262      	bcs.n	8023c58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8023b92:	4631      	mov	r1, r6
 8023b94:	9b00      	ldr	r3, [sp, #0]
 8023b96:	eb00 0b03 	add.w	fp, r0, r3
 8023b9a:	4558      	cmp	r0, fp
 8023b9c:	d24e      	bcs.n	8023c3c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8023b9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023ba2:	b12b      	cbz	r3, 8023bb0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8023ba4:	2bff      	cmp	r3, #255	@ 0xff
 8023ba6:	f8b4 e000 	ldrh.w	lr, [r4]
 8023baa:	d104      	bne.n	8023bb6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8023bac:	f8a0 e000 	strh.w	lr, [r0]
 8023bb0:	3002      	adds	r0, #2
 8023bb2:	3402      	adds	r4, #2
 8023bb4:	e7f1      	b.n	8023b9a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8023bb6:	b29f      	uxth	r7, r3
 8023bb8:	43db      	mvns	r3, r3
 8023bba:	8802      	ldrh	r2, [r0, #0]
 8023bbc:	b2db      	uxtb	r3, r3
 8023bbe:	1216      	asrs	r6, r2, #8
 8023bc0:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8023bc4:	fb16 f603 	smulbb	r6, r6, r3
 8023bc8:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8023bcc:	00d2      	lsls	r2, r2, #3
 8023bce:	b2d2      	uxtb	r2, r2
 8023bd0:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8023bd4:	fb1a fa03 	smulbb	sl, sl, r3
 8023bd8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8023bdc:	fb12 f303 	smulbb	r3, r2, r3
 8023be0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8023be4:	fb0c 6c07 	mla	ip, ip, r7, r6
 8023be8:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8023bec:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023bf0:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8023bf4:	fa5f fe8e 	uxtb.w	lr, lr
 8023bf8:	fb06 a607 	mla	r6, r6, r7, sl
 8023bfc:	fb0e 3307 	mla	r3, lr, r7, r3
 8023c00:	fa1f fc8c 	uxth.w	ip, ip
 8023c04:	f10c 0201 	add.w	r2, ip, #1
 8023c08:	b2b6      	uxth	r6, r6
 8023c0a:	b29b      	uxth	r3, r3
 8023c0c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8023c10:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 8023c14:	f106 0a01 	add.w	sl, r6, #1
 8023c18:	f103 0c01 	add.w	ip, r3, #1
 8023c1c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8023c20:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8023c24:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023c28:	0976      	lsrs	r6, r6, #5
 8023c2a:	ea4c 0c02 	orr.w	ip, ip, r2
 8023c2e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8023c32:	ea4c 0c06 	orr.w	ip, ip, r6
 8023c36:	f8a0 c000 	strh.w	ip, [r0]
 8023c3a:	e7b9      	b.n	8023bb0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8023c3c:	f8b9 3000 	ldrh.w	r3, [r9]
 8023c40:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8023c44:	eba3 0308 	sub.w	r3, r3, r8
 8023c48:	eba6 0608 	sub.w	r6, r6, r8
 8023c4c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8023c50:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023c54:	440e      	add	r6, r1
 8023c56:	e79a      	b.n	8023b8e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8023c58:	4b03      	ldr	r3, [pc, #12]	@ (8023c68 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8023c5a:	6818      	ldr	r0, [r3, #0]
 8023c5c:	6803      	ldr	r3, [r0, #0]
 8023c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023c60:	4798      	blx	r3
 8023c62:	b007      	add	sp, #28
 8023c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c68:	2005bd1c 	.word	0x2005bd1c
 8023c6c:	2005bd16 	.word	0x2005bd16

08023c70 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8023c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c74:	b089      	sub	sp, #36	@ 0x24
 8023c76:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 8023c7a:	4607      	mov	r7, r0
 8023c7c:	4688      	mov	r8, r1
 8023c7e:	4692      	mov	sl, r2
 8023c80:	4699      	mov	r9, r3
 8023c82:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023c84:	2e00      	cmp	r6, #0
 8023c86:	d048      	beq.n	8023d1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023c88:	4608      	mov	r0, r1
 8023c8a:	f7fa f823 	bl	801dcd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023c8e:	4605      	mov	r5, r0
 8023c90:	4640      	mov	r0, r8
 8023c92:	f7fa f853 	bl	801dd3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023c96:	f8ad 000e 	strh.w	r0, [sp, #14]
 8023c9a:	4640      	mov	r0, r8
 8023c9c:	f8ad a008 	strh.w	sl, [sp, #8]
 8023ca0:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023ca4:	f8ad 900a 	strh.w	r9, [sp, #10]
 8023ca8:	f7fa f906 	bl	801deb8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023cac:	4605      	mov	r5, r0
 8023cae:	4640      	mov	r0, r8
 8023cb0:	f7fa f932 	bl	801df18 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8023cb4:	4682      	mov	sl, r0
 8023cb6:	4640      	mov	r0, r8
 8023cb8:	f7fa f982 	bl	801dfc0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023cbc:	2810      	cmp	r0, #16
 8023cbe:	d82c      	bhi.n	8023d1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023cc0:	e8df f010 	tbh	[pc, r0, lsl #1]
 8023cc4:	00ba00ca 	.word	0x00ba00ca
 8023cc8:	002b0011 	.word	0x002b0011
 8023ccc:	002b002b 	.word	0x002b002b
 8023cd0:	002b002b 	.word	0x002b002b
 8023cd4:	002b002b 	.word	0x002b002b
 8023cd8:	00c1002b 	.word	0x00c1002b
 8023cdc:	002b002b 	.word	0x002b002b
 8023ce0:	002b0180 	.word	0x002b0180
 8023ce4:	0173      	.short	0x0173
 8023ce6:	4bbc      	ldr	r3, [pc, #752]	@ (8023fd8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 8023ce8:	6818      	ldr	r0, [r3, #0]
 8023cea:	6803      	ldr	r3, [r0, #0]
 8023cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8023cee:	4798      	blx	r3
 8023cf0:	2eff      	cmp	r6, #255	@ 0xff
 8023cf2:	d101      	bne.n	8023cf8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8023cf4:	0683      	lsls	r3, r0, #26
 8023cf6:	d506      	bpl.n	8023d06 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 8023cf8:	4633      	mov	r3, r6
 8023cfa:	4622      	mov	r2, r4
 8023cfc:	a902      	add	r1, sp, #8
 8023cfe:	4628      	mov	r0, r5
 8023d00:	f7ff f8fc 	bl	8022efc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023d04:	e009      	b.n	8023d1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023d06:	4640      	mov	r0, r8
 8023d08:	f7fa f89e 	bl	801de48 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8023d0c:	b940      	cbnz	r0, 8023d20 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 8023d0e:	4623      	mov	r3, r4
 8023d10:	aa02      	add	r2, sp, #8
 8023d12:	4629      	mov	r1, r5
 8023d14:	4638      	mov	r0, r7
 8023d16:	f7ff f9d7 	bl	80230c8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8023d1a:	b009      	add	sp, #36	@ 0x24
 8023d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d20:	f10d 0918 	add.w	r9, sp, #24
 8023d24:	4641      	mov	r1, r8
 8023d26:	4648      	mov	r0, r9
 8023d28:	f10d 0810 	add.w	r8, sp, #16
 8023d2c:	f7fa f83a 	bl	801dda4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8023d30:	e899 0003 	ldmia.w	r9, {r0, r1}
 8023d34:	e888 0003 	stmia.w	r8, {r0, r1}
 8023d38:	4640      	mov	r0, r8
 8023d3a:	4621      	mov	r1, r4
 8023d3c:	f7f1 f954 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 8023d40:	4640      	mov	r0, r8
 8023d42:	f7f1 f994 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 8023d46:	2800      	cmp	r0, #0
 8023d48:	d1d6      	bne.n	8023cf8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8023d4a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023d4e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8023d52:	4293      	cmp	r3, r2
 8023d54:	dd12      	ble.n	8023d7c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 8023d56:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023d5a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023d5e:	1a9b      	subs	r3, r3, r2
 8023d60:	f8ad 0018 	strh.w	r0, [sp, #24]
 8023d64:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023d68:	f8ad 101c 	strh.w	r1, [sp, #28]
 8023d6c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023d70:	464a      	mov	r2, r9
 8023d72:	4633      	mov	r3, r6
 8023d74:	a902      	add	r1, sp, #8
 8023d76:	4628      	mov	r0, r5
 8023d78:	f7ff f8c0 	bl	8022efc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023d7c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8023d80:	f9b4 2000 	ldrsh.w	r2, [r4]
 8023d84:	4293      	cmp	r3, r2
 8023d86:	dd12      	ble.n	8023dae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 8023d88:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8023d8c:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023d90:	1a9b      	subs	r3, r3, r2
 8023d92:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023d96:	f8ad 001a 	strh.w	r0, [sp, #26]
 8023d9a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023d9e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8023da2:	23ff      	movs	r3, #255	@ 0xff
 8023da4:	464a      	mov	r2, r9
 8023da6:	a902      	add	r1, sp, #8
 8023da8:	4628      	mov	r0, r5
 8023daa:	f7ff f8a7 	bl	8022efc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023dae:	4643      	mov	r3, r8
 8023db0:	aa02      	add	r2, sp, #8
 8023db2:	4629      	mov	r1, r5
 8023db4:	4638      	mov	r0, r7
 8023db6:	f7ff f987 	bl	80230c8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8023dba:	88a2      	ldrh	r2, [r4, #4]
 8023dbc:	8823      	ldrh	r3, [r4, #0]
 8023dbe:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8023dc2:	4413      	add	r3, r2
 8023dc4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023dc8:	b29b      	uxth	r3, r3
 8023dca:	440a      	add	r2, r1
 8023dcc:	b292      	uxth	r2, r2
 8023dce:	b211      	sxth	r1, r2
 8023dd0:	b218      	sxth	r0, r3
 8023dd2:	4288      	cmp	r0, r1
 8023dd4:	dd12      	ble.n	8023dfc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 8023dd6:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8023dda:	1a9b      	subs	r3, r3, r2
 8023ddc:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8023de0:	f8ad 1018 	strh.w	r1, [sp, #24]
 8023de4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023de8:	f8ad 001e 	strh.w	r0, [sp, #30]
 8023dec:	23ff      	movs	r3, #255	@ 0xff
 8023dee:	464a      	mov	r2, r9
 8023df0:	a902      	add	r1, sp, #8
 8023df2:	4628      	mov	r0, r5
 8023df4:	f8ad 601a 	strh.w	r6, [sp, #26]
 8023df8:	f7ff f880 	bl	8022efc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023dfc:	88e2      	ldrh	r2, [r4, #6]
 8023dfe:	8863      	ldrh	r3, [r4, #2]
 8023e00:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8023e04:	4413      	add	r3, r2
 8023e06:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8023e0a:	b29b      	uxth	r3, r3
 8023e0c:	440a      	add	r2, r1
 8023e0e:	b292      	uxth	r2, r2
 8023e10:	b211      	sxth	r1, r2
 8023e12:	b218      	sxth	r0, r3
 8023e14:	4288      	cmp	r0, r1
 8023e16:	dd80      	ble.n	8023d1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023e18:	f9b4 6000 	ldrsh.w	r6, [r4]
 8023e1c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8023e20:	1a9b      	subs	r3, r3, r2
 8023e22:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023e26:	f8ad 6018 	strh.w	r6, [sp, #24]
 8023e2a:	f8ad 101a 	strh.w	r1, [sp, #26]
 8023e2e:	f8ad 001c 	strh.w	r0, [sp, #28]
 8023e32:	23ff      	movs	r3, #255	@ 0xff
 8023e34:	464a      	mov	r2, r9
 8023e36:	e761      	b.n	8023cfc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8023e38:	4633      	mov	r3, r6
 8023e3a:	4622      	mov	r2, r4
 8023e3c:	a902      	add	r1, sp, #8
 8023e3e:	4628      	mov	r0, r5
 8023e40:	f7ff f9b2 	bl	80231a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8023e44:	e769      	b.n	8023d1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023e46:	e9cd 4600 	strd	r4, r6, [sp]
 8023e4a:	ab02      	add	r3, sp, #8
 8023e4c:	4652      	mov	r2, sl
 8023e4e:	4629      	mov	r1, r5
 8023e50:	4638      	mov	r0, r7
 8023e52:	f7ff fd89 	bl	8023968 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8023e56:	e760      	b.n	8023d1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023e58:	4640      	mov	r0, r8
 8023e5a:	f7f9 fff5 	bl	801de48 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8023e5e:	b948      	cbnz	r0, 8023e74 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 8023e60:	683b      	ldr	r3, [r7, #0]
 8023e62:	e9cd 6000 	strd	r6, r0, [sp]
 8023e66:	aa02      	add	r2, sp, #8
 8023e68:	68de      	ldr	r6, [r3, #12]
 8023e6a:	4629      	mov	r1, r5
 8023e6c:	4623      	mov	r3, r4
 8023e6e:	4638      	mov	r0, r7
 8023e70:	47b0      	blx	r6
 8023e72:	e752      	b.n	8023d1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023e74:	f10d 0918 	add.w	r9, sp, #24
 8023e78:	4641      	mov	r1, r8
 8023e7a:	4648      	mov	r0, r9
 8023e7c:	f10d 0810 	add.w	r8, sp, #16
 8023e80:	f7f9 ff90 	bl	801dda4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8023e84:	e899 0003 	ldmia.w	r9, {r0, r1}
 8023e88:	e888 0003 	stmia.w	r8, {r0, r1}
 8023e8c:	4640      	mov	r0, r8
 8023e8e:	4621      	mov	r1, r4
 8023e90:	f7f1 f8aa 	bl	8014fe8 <_ZN8touchgfx4RectaNERKS0_>
 8023e94:	4640      	mov	r0, r8
 8023e96:	f7f1 f8ea 	bl	801506e <_ZNK8touchgfx4Rect7isEmptyEv>
 8023e9a:	b138      	cbz	r0, 8023eac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 8023e9c:	4623      	mov	r3, r4
 8023e9e:	9600      	str	r6, [sp, #0]
 8023ea0:	aa02      	add	r2, sp, #8
 8023ea2:	4651      	mov	r1, sl
 8023ea4:	4628      	mov	r0, r5
 8023ea6:	f7ff fdbd 	bl	8023a24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023eaa:	e736      	b.n	8023d1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023eac:	683b      	ldr	r3, [r7, #0]
 8023eae:	e9cd 6000 	strd	r6, r0, [sp]
 8023eb2:	aa02      	add	r2, sp, #8
 8023eb4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8023eb8:	4629      	mov	r1, r5
 8023eba:	4643      	mov	r3, r8
 8023ebc:	4638      	mov	r0, r7
 8023ebe:	47d8      	blx	fp
 8023ec0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023ec4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8023ec8:	4293      	cmp	r3, r2
 8023eca:	dd13      	ble.n	8023ef4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 8023ecc:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023ed0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023ed4:	1a9b      	subs	r3, r3, r2
 8023ed6:	f8ad 0018 	strh.w	r0, [sp, #24]
 8023eda:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023ede:	f8ad 101c 	strh.w	r1, [sp, #28]
 8023ee2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023ee6:	9600      	str	r6, [sp, #0]
 8023ee8:	464b      	mov	r3, r9
 8023eea:	aa02      	add	r2, sp, #8
 8023eec:	4651      	mov	r1, sl
 8023eee:	4628      	mov	r0, r5
 8023ef0:	f7ff fd98 	bl	8023a24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023ef4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8023ef8:	f9b4 2000 	ldrsh.w	r2, [r4]
 8023efc:	4293      	cmp	r3, r2
 8023efe:	dd13      	ble.n	8023f28 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 8023f00:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8023f04:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023f08:	1a9b      	subs	r3, r3, r2
 8023f0a:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023f0e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8023f12:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023f16:	f8ad 101e 	strh.w	r1, [sp, #30]
 8023f1a:	9600      	str	r6, [sp, #0]
 8023f1c:	464b      	mov	r3, r9
 8023f1e:	aa02      	add	r2, sp, #8
 8023f20:	4651      	mov	r1, sl
 8023f22:	4628      	mov	r0, r5
 8023f24:	f7ff fd7e 	bl	8023a24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023f28:	88a2      	ldrh	r2, [r4, #4]
 8023f2a:	8823      	ldrh	r3, [r4, #0]
 8023f2c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8023f30:	4413      	add	r3, r2
 8023f32:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023f36:	b29b      	uxth	r3, r3
 8023f38:	440a      	add	r2, r1
 8023f3a:	b292      	uxth	r2, r2
 8023f3c:	b211      	sxth	r1, r2
 8023f3e:	b218      	sxth	r0, r3
 8023f40:	4288      	cmp	r0, r1
 8023f42:	dd13      	ble.n	8023f6c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 8023f44:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8023f48:	1a9b      	subs	r3, r3, r2
 8023f4a:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8023f4e:	f8ad 1018 	strh.w	r1, [sp, #24]
 8023f52:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023f56:	f8ad 001e 	strh.w	r0, [sp, #30]
 8023f5a:	9600      	str	r6, [sp, #0]
 8023f5c:	464b      	mov	r3, r9
 8023f5e:	aa02      	add	r2, sp, #8
 8023f60:	4651      	mov	r1, sl
 8023f62:	4628      	mov	r0, r5
 8023f64:	f8ad 701a 	strh.w	r7, [sp, #26]
 8023f68:	f7ff fd5c 	bl	8023a24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023f6c:	88e2      	ldrh	r2, [r4, #6]
 8023f6e:	8863      	ldrh	r3, [r4, #2]
 8023f70:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8023f74:	4413      	add	r3, r2
 8023f76:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8023f7a:	b29b      	uxth	r3, r3
 8023f7c:	440a      	add	r2, r1
 8023f7e:	b292      	uxth	r2, r2
 8023f80:	b211      	sxth	r1, r2
 8023f82:	b218      	sxth	r0, r3
 8023f84:	4288      	cmp	r0, r1
 8023f86:	f77f aec8 	ble.w	8023d1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023f8a:	f9b4 7000 	ldrsh.w	r7, [r4]
 8023f8e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8023f92:	1a9b      	subs	r3, r3, r2
 8023f94:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023f98:	f8ad 7018 	strh.w	r7, [sp, #24]
 8023f9c:	f8ad 101a 	strh.w	r1, [sp, #26]
 8023fa0:	f8ad 001c 	strh.w	r0, [sp, #28]
 8023fa4:	9600      	str	r6, [sp, #0]
 8023fa6:	464b      	mov	r3, r9
 8023fa8:	e77a      	b.n	8023ea0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8023faa:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8023fae:	2800      	cmp	r0, #0
 8023fb0:	f43f aeb3 	beq.w	8023d1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023fb4:	6803      	ldr	r3, [r0, #0]
 8023fb6:	9600      	str	r6, [sp, #0]
 8023fb8:	68de      	ldr	r6, [r3, #12]
 8023fba:	4623      	mov	r3, r4
 8023fbc:	aa02      	add	r2, sp, #8
 8023fbe:	4629      	mov	r1, r5
 8023fc0:	47b0      	blx	r6
 8023fc2:	e6aa      	b.n	8023d1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023fc4:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8023fc8:	2800      	cmp	r0, #0
 8023fca:	f43f aea6 	beq.w	8023d1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023fce:	6803      	ldr	r3, [r0, #0]
 8023fd0:	9600      	str	r6, [sp, #0]
 8023fd2:	689e      	ldr	r6, [r3, #8]
 8023fd4:	e7f1      	b.n	8023fba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 8023fd6:	bf00      	nop
 8023fd8:	2005bd1c 	.word	0x2005bd1c

08023fdc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8023fdc:	b180      	cbz	r0, 8024000 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8023fde:	2903      	cmp	r1, #3
 8023fe0:	d81c      	bhi.n	802401c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8023fe2:	e8df f001 	tbb	[pc, r1]
 8023fe6:	1d02      	.short	0x1d02
 8023fe8:	1f08      	.short	0x1f08
 8023fea:	4b10      	ldr	r3, [pc, #64]	@ (802402c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023fec:	8818      	ldrh	r0, [r3, #0]
 8023fee:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023ff2:	4240      	negs	r0, r0
 8023ff4:	4770      	bx	lr
 8023ff6:	4b0d      	ldr	r3, [pc, #52]	@ (802402c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023ff8:	8818      	ldrh	r0, [r3, #0]
 8023ffa:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023ffe:	4770      	bx	lr
 8024000:	2903      	cmp	r1, #3
 8024002:	d80b      	bhi.n	802401c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8024004:	a301      	add	r3, pc, #4	@ (adr r3, 802400c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8024006:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 802400a:	bf00      	nop
 802400c:	08024021 	.word	0x08024021
 8024010:	08023ff7 	.word	0x08023ff7
 8024014:	08024025 	.word	0x08024025
 8024018:	08023feb 	.word	0x08023feb
 802401c:	2000      	movs	r0, #0
 802401e:	4770      	bx	lr
 8024020:	2001      	movs	r0, #1
 8024022:	4770      	bx	lr
 8024024:	f04f 30ff 	mov.w	r0, #4294967295
 8024028:	4770      	bx	lr
 802402a:	bf00      	nop
 802402c:	2005bd16 	.word	0x2005bd16

08024030 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8024030:	b180      	cbz	r0, 8024054 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8024032:	2903      	cmp	r1, #3
 8024034:	d81c      	bhi.n	8024070 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8024036:	e8df f001 	tbb	[pc, r1]
 802403a:	021d      	.short	0x021d
 802403c:	071f      	.short	0x071f
 802403e:	4b10      	ldr	r3, [pc, #64]	@ (8024080 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8024040:	8818      	ldrh	r0, [r3, #0]
 8024042:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8024046:	4770      	bx	lr
 8024048:	4b0d      	ldr	r3, [pc, #52]	@ (8024080 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 802404a:	8818      	ldrh	r0, [r3, #0]
 802404c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8024050:	4240      	negs	r0, r0
 8024052:	4770      	bx	lr
 8024054:	2903      	cmp	r1, #3
 8024056:	d80b      	bhi.n	8024070 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8024058:	a301      	add	r3, pc, #4	@ (adr r3, 8024060 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 802405a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 802405e:	bf00      	nop
 8024060:	0802403f 	.word	0x0802403f
 8024064:	08024079 	.word	0x08024079
 8024068:	08024049 	.word	0x08024049
 802406c:	08024075 	.word	0x08024075
 8024070:	2000      	movs	r0, #0
 8024072:	4770      	bx	lr
 8024074:	2001      	movs	r0, #1
 8024076:	4770      	bx	lr
 8024078:	f04f 30ff 	mov.w	r0, #4294967295
 802407c:	4770      	bx	lr
 802407e:	bf00      	nop
 8024080:	2005bd16 	.word	0x2005bd16

08024084 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8024084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024088:	b099      	sub	sp, #100	@ 0x64
 802408a:	910d      	str	r1, [sp, #52]	@ 0x34
 802408c:	a914      	add	r1, sp, #80	@ 0x50
 802408e:	e881 000c 	stmia.w	r1, {r2, r3}
 8024092:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 8024096:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 802409a:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 802409e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80240a0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80240a4:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 80240a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80240aa:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 80240ae:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 80240b2:	9308      	str	r3, [sp, #32]
 80240b4:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 80240b8:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 80240ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80240bc:	7b4b      	ldrb	r3, [r1, #13]
 80240be:	f8dd 90a8 	ldr.w	r9, [sp, #168]	@ 0xa8
 80240c2:	ea4f 1843 	mov.w	r8, r3, lsl #5
 80240c6:	f408 7080 	and.w	r0, r8, #256	@ 0x100
 80240ca:	f891 8006 	ldrb.w	r8, [r1, #6]
 80240ce:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 80240d2:	ea58 0800 	orrs.w	r8, r8, r0
 80240d6:	f000 81cc 	beq.w	8024472 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 80240da:	011b      	lsls	r3, r3, #4
 80240dc:	79c8      	ldrb	r0, [r1, #7]
 80240de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80240e2:	4303      	orrs	r3, r0
 80240e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80240e6:	f000 81c4 	beq.w	8024472 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 80240ea:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80240ee:	b29b      	uxth	r3, r3
 80240f0:	2d00      	cmp	r5, #0
 80240f2:	f000 812a 	beq.w	802434a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c6>
 80240f6:	1aed      	subs	r5, r5, r3
 80240f8:	b2ad      	uxth	r5, r5
 80240fa:	0429      	lsls	r1, r5, #16
 80240fc:	d502      	bpl.n	8024104 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 80240fe:	1b64      	subs	r4, r4, r5
 8024100:	2500      	movs	r5, #0
 8024102:	b224      	sxth	r4, r4
 8024104:	f9b2 0000 	ldrsh.w	r0, [r2]
 8024108:	8891      	ldrh	r1, [r2, #4]
 802410a:	4284      	cmp	r4, r0
 802410c:	b283      	uxth	r3, r0
 802410e:	bfbf      	itttt	lt
 8024110:	18ed      	addlt	r5, r5, r3
 8024112:	1b2c      	sublt	r4, r5, r4
 8024114:	b2a5      	uxthlt	r5, r4
 8024116:	4604      	movlt	r4, r0
 8024118:	440b      	add	r3, r1
 802411a:	b21b      	sxth	r3, r3
 802411c:	930a      	str	r3, [sp, #40]	@ 0x28
 802411e:	88d3      	ldrh	r3, [r2, #6]
 8024120:	8852      	ldrh	r2, [r2, #2]
 8024122:	4621      	mov	r1, r4
 8024124:	4413      	add	r3, r2
 8024126:	b21b      	sxth	r3, r3
 8024128:	930f      	str	r3, [sp, #60]	@ 0x3c
 802412a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802412c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802412e:	930e      	str	r3, [sp, #56]	@ 0x38
 8024130:	4bb2      	ldr	r3, [pc, #712]	@ (80243fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8024132:	a814      	add	r0, sp, #80	@ 0x50
 8024134:	f893 b000 	ldrb.w	fp, [r3]
 8024138:	4653      	mov	r3, sl
 802413a:	f7f6 f831 	bl	801a1a0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 802413e:	4621      	mov	r1, r4
 8024140:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8024144:	4653      	mov	r3, sl
 8024146:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024148:	a814      	add	r0, sp, #80	@ 0x50
 802414a:	f7f6 f846 	bl	801a1da <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 802414e:	a918      	add	r1, sp, #96	@ 0x60
 8024150:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8024154:	a817      	add	r0, sp, #92	@ 0x5c
 8024156:	f7f6 f96d 	bl	801a434 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802415a:	f1ba 0f00 	cmp.w	sl, #0
 802415e:	f040 80f7 	bne.w	8024350 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8024162:	f1bb 0f01 	cmp.w	fp, #1
 8024166:	f040 80fb 	bne.w	8024360 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 802416a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802416c:	2b00      	cmp	r3, #0
 802416e:	f040 81a8 	bne.w	80244c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x43e>
 8024172:	fa1f f288 	uxth.w	r2, r8
 8024176:	b905      	cbnz	r5, 802417a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf6>
 8024178:	b15e      	cbz	r6, 8024192 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 802417a:	4631      	mov	r1, r6
 802417c:	fb06 5302 	mla	r3, r6, r2, r5
 8024180:	9808      	ldr	r0, [sp, #32]
 8024182:	4343      	muls	r3, r0
 8024184:	f003 0607 	and.w	r6, r3, #7
 8024188:	eb07 07d3 	add.w	r7, r7, r3, lsr #3
 802418c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802418e:	1a5b      	subs	r3, r3, r1
 8024190:	930e      	str	r3, [sp, #56]	@ 0x38
 8024192:	f10b 31ff 	add.w	r1, fp, #4294967295
 8024196:	424b      	negs	r3, r1
 8024198:	414b      	adcs	r3, r1
 802419a:	4618      	mov	r0, r3
 802419c:	4651      	mov	r1, sl
 802419e:	930c      	str	r3, [sp, #48]	@ 0x30
 80241a0:	f7ff ff1c 	bl	8023fdc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80241a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80241a6:	4683      	mov	fp, r0
 80241a8:	4618      	mov	r0, r3
 80241aa:	f7ff ff41 	bl	8024030 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80241ae:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80241b0:	4603      	mov	r3, r0
 80241b2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80241b4:	eba1 0a00 	sub.w	sl, r1, r0
 80241b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80241ba:	458a      	cmp	sl, r1
 80241bc:	bfa8      	it	ge
 80241be:	468a      	movge	sl, r1
 80241c0:	f1ba 0f00 	cmp.w	sl, #0
 80241c4:	f340 8155 	ble.w	8024472 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 80241c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80241ca:	1b64      	subs	r4, r4, r5
 80241cc:	1b0c      	subs	r4, r1, r4
 80241ce:	4544      	cmp	r4, r8
 80241d0:	bfd4      	ite	le
 80241d2:	ebc5 0504 	rsble	r5, r5, r4
 80241d6:	ebc5 0508 	rsbgt	r5, r5, r8
 80241da:	2d00      	cmp	r5, #0
 80241dc:	f340 8149 	ble.w	8024472 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 80241e0:	9908      	ldr	r1, [sp, #32]
 80241e2:	1b52      	subs	r2, r2, r5
 80241e4:	434a      	muls	r2, r1
 80241e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80241e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80241ea:	2a00      	cmp	r2, #0
 80241ec:	f040 8175 	bne.w	80244da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x456>
 80241f0:	4a83      	ldr	r2, [pc, #524]	@ (8024400 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 80241f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80241f4:	6810      	ldr	r0, [r2, #0]
 80241f6:	6802      	ldr	r2, [r0, #0]
 80241f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80241fa:	4790      	blx	r2
 80241fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80241fe:	2201      	movs	r2, #1
 8024200:	9908      	ldr	r1, [sp, #32]
 8024202:	408a      	lsls	r2, r1
 8024204:	3a01      	subs	r2, #1
 8024206:	497f      	ldr	r1, [pc, #508]	@ (8024404 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8024208:	b2d2      	uxtb	r2, r2
 802420a:	880c      	ldrh	r4, [r1, #0]
 802420c:	920c      	str	r2, [sp, #48]	@ 0x30
 802420e:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	@ 0x5c
 8024212:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	@ 0x5e
 8024216:	fb04 1202 	mla	r2, r4, r2, r1
 802421a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802421e:	ea4f 2419 	mov.w	r4, r9, lsr #8
 8024222:	920a      	str	r2, [sp, #40]	@ 0x28
 8024224:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8024228:	9212      	str	r2, [sp, #72]	@ 0x48
 802422a:	b2e2      	uxtb	r2, r4
 802422c:	9211      	str	r2, [sp, #68]	@ 0x44
 802422e:	fa5f f289 	uxtb.w	r2, r9
 8024232:	9210      	str	r2, [sp, #64]	@ 0x40
 8024234:	4a74      	ldr	r2, [pc, #464]	@ (8024408 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8024236:	ea4f 1159 	mov.w	r1, r9, lsr #5
 802423a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802423e:	4022      	ands	r2, r4
 8024240:	430a      	orrs	r2, r1
 8024242:	ea4f 014b 	mov.w	r1, fp, lsl #1
 8024246:	fb05 3b1b 	mls	fp, r5, fp, r3
 802424a:	460b      	mov	r3, r1
 802424c:	f3c9 09c4 	ubfx	r9, r9, #3, #5
 8024250:	ea42 0209 	orr.w	r2, r2, r9
 8024254:	436b      	muls	r3, r5
 8024256:	b292      	uxth	r2, r2
 8024258:	920f      	str	r2, [sp, #60]	@ 0x3c
 802425a:	783a      	ldrb	r2, [r7, #0]
 802425c:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 8024260:	4132      	asrs	r2, r6
 8024262:	b2d2      	uxtb	r2, r2
 8024264:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024266:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024268:	f11a 3aff 	adds.w	sl, sl, #4294967295
 802426c:	f0c0 8149 	bcc.w	8024502 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x47e>
 8024270:	46a9      	mov	r9, r5
 8024272:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8024276:	f119 39ff 	adds.w	r9, r9, #4294967295
 802427a:	f0c0 8132 	bcc.w	80244e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45e>
 802427e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024280:	4013      	ands	r3, r2
 8024282:	d054      	beq.n	802432e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 8024284:	20ff      	movs	r0, #255	@ 0xff
 8024286:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8024288:	fb90 f1f1 	sdiv	r1, r0, r1
 802428c:	434b      	muls	r3, r1
 802428e:	2bfe      	cmp	r3, #254	@ 0xfe
 8024290:	dd03      	ble.n	802429a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x216>
 8024292:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024294:	4281      	cmp	r1, r0
 8024296:	f000 8122 	beq.w	80244de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45a>
 802429a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802429c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802429e:	fb11 f303 	smulbb	r3, r1, r3
 80242a2:	b29b      	uxth	r3, r3
 80242a4:	1c59      	adds	r1, r3, #1
 80242a6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80242aa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80242ae:	fa1f fe83 	uxth.w	lr, r3
 80242b2:	43db      	mvns	r3, r3
 80242b4:	f8b8 4000 	ldrh.w	r4, [r8]
 80242b8:	fb10 fb0e 	smulbb	fp, r0, lr
 80242bc:	1221      	asrs	r1, r4, #8
 80242be:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80242c0:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80242c4:	b2db      	uxtb	r3, r3
 80242c6:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80242ca:	fb01 b103 	mla	r1, r1, r3, fp
 80242ce:	fb10 fb0e 	smulbb	fp, r0, lr
 80242d2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80242d4:	ea4f 0ce4 	mov.w	ip, r4, asr #3
 80242d8:	fb10 fe0e 	smulbb	lr, r0, lr
 80242dc:	00e4      	lsls	r4, r4, #3
 80242de:	b2e4      	uxtb	r4, r4
 80242e0:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80242e4:	fb04 e403 	mla	r4, r4, r3, lr
 80242e8:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 80242ec:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 80242f0:	fb0c bc03 	mla	ip, ip, r3, fp
 80242f4:	b289      	uxth	r1, r1
 80242f6:	b2a4      	uxth	r4, r4
 80242f8:	1c4b      	adds	r3, r1, #1
 80242fa:	f104 0b01 	add.w	fp, r4, #1
 80242fe:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024302:	eb0b 2b14 	add.w	fp, fp, r4, lsr #8
 8024306:	fa1f fc8c 	uxth.w	ip, ip
 802430a:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802430e:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8024312:	ea4b 0101 	orr.w	r1, fp, r1
 8024316:	f10c 0b01 	add.w	fp, ip, #1
 802431a:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 802431e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8024322:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8024326:	ea41 010b 	orr.w	r1, r1, fp
 802432a:	f8a8 1000 	strh.w	r1, [r8]
 802432e:	9b08      	ldr	r3, [sp, #32]
 8024330:	441e      	add	r6, r3
 8024332:	b2b6      	uxth	r6, r6
 8024334:	2e07      	cmp	r6, #7
 8024336:	bf98      	it	ls
 8024338:	411a      	asrls	r2, r3
 802433a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802433c:	bf89      	itett	hi
 802433e:	787a      	ldrbhi	r2, [r7, #1]
 8024340:	b2d2      	uxtbls	r2, r2
 8024342:	3701      	addhi	r7, #1
 8024344:	2600      	movhi	r6, #0
 8024346:	4498      	add	r8, r3
 8024348:	e795      	b.n	8024276 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f2>
 802434a:	441c      	add	r4, r3
 802434c:	b224      	sxth	r4, r4
 802434e:	e6d9      	b.n	8024104 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 8024350:	f1ba 0f01 	cmp.w	sl, #1
 8024354:	f47f af09 	bne.w	802416a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 8024358:	f1bb 0f01 	cmp.w	fp, #1
 802435c:	f47f af05 	bne.w	802416a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 8024360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024362:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024364:	1a99      	subs	r1, r3, r2
 8024366:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024368:	1b9b      	subs	r3, r3, r6
 802436a:	4299      	cmp	r1, r3
 802436c:	bfa8      	it	ge
 802436e:	4619      	movge	r1, r3
 8024370:	2900      	cmp	r1, #0
 8024372:	9112      	str	r1, [sp, #72]	@ 0x48
 8024374:	dd7d      	ble.n	8024472 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8024376:	4a22      	ldr	r2, [pc, #136]	@ (8024400 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8024378:	6810      	ldr	r0, [r2, #0]
 802437a:	9211      	str	r2, [sp, #68]	@ 0x44
 802437c:	6803      	ldr	r3, [r0, #0]
 802437e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8024380:	4798      	blx	r3
 8024382:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8024386:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8024388:	d006      	beq.n	8024398 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x314>
 802438a:	9b08      	ldr	r3, [sp, #32]
 802438c:	2b04      	cmp	r3, #4
 802438e:	d133      	bne.n	80243f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 8024390:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024392:	3300      	adds	r3, #0
 8024394:	bf18      	it	ne
 8024396:	2301      	movne	r3, #1
 8024398:	0582      	lsls	r2, r0, #22
 802439a:	fa1f fc88 	uxth.w	ip, r8
 802439e:	f140 80b9 	bpl.w	8024514 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x490>
 80243a2:	9808      	ldr	r0, [sp, #32]
 80243a4:	2808      	cmp	r0, #8
 80243a6:	f040 80b5 	bne.w	8024514 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x490>
 80243aa:	2b00      	cmp	r3, #0
 80243ac:	d064      	beq.n	8024478 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>
 80243ae:	f10c 0c01 	add.w	ip, ip, #1
 80243b2:	f02c 0301 	bic.w	r3, ip, #1
 80243b6:	b29b      	uxth	r3, r3
 80243b8:	bb45      	cbnz	r5, 802440c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 80243ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80243bc:	eb08 0004 	add.w	r0, r8, r4
 80243c0:	4290      	cmp	r0, r2
 80243c2:	dc23      	bgt.n	802440c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 80243c4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80243c6:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 80243ca:	6810      	ldr	r0, [r2, #0]
 80243cc:	b289      	uxth	r1, r1
 80243ce:	6804      	ldr	r4, [r0, #0]
 80243d0:	9506      	str	r5, [sp, #24]
 80243d2:	f44f 7580 	mov.w	r5, #256	@ 0x100
 80243d6:	e9cd 3100 	strd	r3, r1, [sp]
 80243da:	9302      	str	r3, [sp, #8]
 80243dc:	4673      	mov	r3, lr
 80243de:	9505      	str	r5, [sp, #20]
 80243e0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80243e2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80243e6:	e9cd 9503 	strd	r9, r5, [sp, #12]
 80243ea:	fb06 710c 	mla	r1, r6, ip, r7
 80243ee:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 80243f2:	6da4      	ldr	r4, [r4, #88]	@ 0x58
 80243f4:	47a0      	blx	r4
 80243f6:	e03c      	b.n	8024472 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 80243f8:	2300      	movs	r3, #0
 80243fa:	e7cd      	b.n	8024398 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x314>
 80243fc:	2005bd14 	.word	0x2005bd14
 8024400:	2005bd1c 	.word	0x2005bd1c
 8024404:	2005bd16 	.word	0x2005bd16
 8024408:	00fff800 	.word	0x00fff800
 802440c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802440e:	eba4 0e05 	sub.w	lr, r4, r5
 8024412:	eba2 0e0e 	sub.w	lr, r2, lr
 8024416:	45c6      	cmp	lr, r8
 8024418:	bfd4      	ite	le
 802441a:	ebc5 0e0e 	rsble	lr, r5, lr
 802441e:	ebc5 0e08 	rsbgt	lr, r5, r8
 8024422:	f1be 0f00 	cmp.w	lr, #0
 8024426:	d024      	beq.n	8024472 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8024428:	07e8      	lsls	r0, r5, #31
 802442a:	f53f ae9e 	bmi.w	802416a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 802442e:	f01e 0001 	ands.w	r0, lr, #1
 8024432:	f47f ae9a 	bne.w	802416a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 8024436:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8024438:	086d      	lsrs	r5, r5, #1
 802443a:	6814      	ldr	r4, [r2, #0]
 802443c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8024440:	fb06 560c 	mla	r6, r6, ip, r5
 8024444:	6825      	ldr	r5, [r4, #0]
 8024446:	9006      	str	r0, [sp, #24]
 8024448:	f44f 7080 	mov.w	r0, #256	@ 0x100
 802444c:	9005      	str	r0, [sp, #20]
 802444e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024450:	9302      	str	r3, [sp, #8]
 8024452:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8024456:	b289      	uxth	r1, r1
 8024458:	fa1f f38e 	uxth.w	r3, lr
 802445c:	f8bd 805e 	ldrh.w	r8, [sp, #94]	@ 0x5e
 8024460:	9101      	str	r1, [sp, #4]
 8024462:	9300      	str	r3, [sp, #0]
 8024464:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8024468:	6dad      	ldr	r5, [r5, #88]	@ 0x58
 802446a:	4643      	mov	r3, r8
 802446c:	19b9      	adds	r1, r7, r6
 802446e:	4620      	mov	r0, r4
 8024470:	47a8      	blx	r5
 8024472:	b019      	add	sp, #100	@ 0x64
 8024474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024478:	4a28      	ldr	r2, [pc, #160]	@ (802451c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x498>)
 802447a:	1b64      	subs	r4, r4, r5
 802447c:	6810      	ldr	r0, [r2, #0]
 802447e:	fb06 5608 	mla	r6, r6, r8, r5
 8024482:	f8d0 a000 	ldr.w	sl, [r0]
 8024486:	9306      	str	r3, [sp, #24]
 8024488:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802448c:	9305      	str	r3, [sp, #20]
 802448e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024490:	b289      	uxth	r1, r1
 8024492:	e9cd 9303 	strd	r9, r3, [sp, #12]
 8024496:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024498:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 802449c:	1b1c      	subs	r4, r3, r4
 802449e:	4544      	cmp	r4, r8
 80244a0:	bfd4      	ite	le
 80244a2:	ebc5 0504 	rsble	r5, r5, r4
 80244a6:	ebc5 0508 	rsbgt	r5, r5, r8
 80244aa:	b2ad      	uxth	r5, r5
 80244ac:	9101      	str	r1, [sp, #4]
 80244ae:	f8cd c008 	str.w	ip, [sp, #8]
 80244b2:	9500      	str	r5, [sp, #0]
 80244b4:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 80244b8:	f8da 4058 	ldr.w	r4, [sl, #88]	@ 0x58
 80244bc:	4673      	mov	r3, lr
 80244be:	19b9      	adds	r1, r7, r6
 80244c0:	e798      	b.n	80243f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x370>
 80244c2:	2208      	movs	r2, #8
 80244c4:	9b08      	ldr	r3, [sp, #32]
 80244c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80244ca:	1e5a      	subs	r2, r3, #1
 80244cc:	4442      	add	r2, r8
 80244ce:	fb92 f2f3 	sdiv	r2, r2, r3
 80244d2:	fb12 f203 	smulbb	r2, r2, r3
 80244d6:	b292      	uxth	r2, r2
 80244d8:	e64d      	b.n	8024176 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 80244da:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80244dc:	e68f      	b.n	80241fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x17a>
 80244de:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80244e0:	e723      	b.n	802432a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a6>
 80244e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80244e4:	b143      	cbz	r3, 80244f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x474>
 80244e6:	441e      	add	r6, r3
 80244e8:	b2b6      	uxth	r6, r6
 80244ea:	eb07 07d6 	add.w	r7, r7, r6, lsr #3
 80244ee:	783a      	ldrb	r2, [r7, #0]
 80244f0:	f006 0607 	and.w	r6, r6, #7
 80244f4:	4132      	asrs	r2, r6
 80244f6:	b2d2      	uxtb	r2, r2
 80244f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80244fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80244fc:	4419      	add	r1, r3
 80244fe:	910a      	str	r1, [sp, #40]	@ 0x28
 8024500:	e6b2      	b.n	8024268 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 8024502:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024504:	2b00      	cmp	r3, #0
 8024506:	d1b4      	bne.n	8024472 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8024508:	4b04      	ldr	r3, [pc, #16]	@ (802451c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x498>)
 802450a:	6818      	ldr	r0, [r3, #0]
 802450c:	6803      	ldr	r3, [r0, #0]
 802450e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8024510:	4798      	blx	r3
 8024512:	e7ae      	b.n	8024472 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8024514:	2b00      	cmp	r3, #0
 8024516:	f47f af4a 	bne.w	80243ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x32a>
 802451a:	e626      	b.n	802416a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 802451c:	2005bd1c 	.word	0x2005bd1c

08024520 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8024520:	b538      	push	{r3, r4, r5, lr}
 8024522:	4605      	mov	r5, r0
 8024524:	4c13      	ldr	r4, [pc, #76]	@ (8024574 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x54>)
 8024526:	e8d4 3f8f 	ldab	r3, [r4]
 802452a:	07da      	lsls	r2, r3, #31
 802452c:	d40b      	bmi.n	8024546 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 802452e:	4620      	mov	r0, r4
 8024530:	f008 fc23 	bl	802cd7a <__cxa_guard_acquire>
 8024534:	b138      	cbz	r0, 8024546 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 8024536:	4620      	mov	r0, r4
 8024538:	f008 fc2b 	bl	802cd92 <__cxa_guard_release>
 802453c:	4a0e      	ldr	r2, [pc, #56]	@ (8024578 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 802453e:	490f      	ldr	r1, [pc, #60]	@ (802457c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8024540:	480f      	ldr	r0, [pc, #60]	@ (8024580 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8024542:	f008 fc13 	bl	802cd6c <__aeabi_atexit>
 8024546:	4c0f      	ldr	r4, [pc, #60]	@ (8024584 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8024548:	e8d4 3f8f 	ldab	r3, [r4]
 802454c:	07db      	lsls	r3, r3, #31
 802454e:	d40b      	bmi.n	8024568 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 8024550:	4620      	mov	r0, r4
 8024552:	f008 fc12 	bl	802cd7a <__cxa_guard_acquire>
 8024556:	b138      	cbz	r0, 8024568 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 8024558:	4620      	mov	r0, r4
 802455a:	f008 fc1a 	bl	802cd92 <__cxa_guard_release>
 802455e:	4a06      	ldr	r2, [pc, #24]	@ (8024578 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8024560:	4909      	ldr	r1, [pc, #36]	@ (8024588 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8024562:	480a      	ldr	r0, [pc, #40]	@ (802458c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8024564:	f008 fc02 	bl	802cd6c <__aeabi_atexit>
 8024568:	4b05      	ldr	r3, [pc, #20]	@ (8024580 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 802456a:	616b      	str	r3, [r5, #20]
 802456c:	4b07      	ldr	r3, [pc, #28]	@ (802458c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 802456e:	61ab      	str	r3, [r5, #24]
 8024570:	bd38      	pop	{r3, r4, r5, pc}
 8024572:	bf00      	nop
 8024574:	2005be00 	.word	0x2005be00
 8024578:	20000000 	.word	0x20000000
 802457c:	08020637 	.word	0x08020637
 8024580:	20000068 	.word	0x20000068
 8024584:	2005be04 	.word	0x2005be04
 8024588:	08020635 	.word	0x08020635
 802458c:	2000006c 	.word	0x2000006c

08024590 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8024590:	b538      	push	{r3, r4, r5, lr}
 8024592:	4605      	mov	r5, r0
 8024594:	4c13      	ldr	r4, [pc, #76]	@ (80245e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x54>)
 8024596:	e8d4 3f8f 	ldab	r3, [r4]
 802459a:	07da      	lsls	r2, r3, #31
 802459c:	d40b      	bmi.n	80245b6 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 802459e:	4620      	mov	r0, r4
 80245a0:	f008 fbeb 	bl	802cd7a <__cxa_guard_acquire>
 80245a4:	b138      	cbz	r0, 80245b6 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 80245a6:	4620      	mov	r0, r4
 80245a8:	f008 fbf3 	bl	802cd92 <__cxa_guard_release>
 80245ac:	4a0e      	ldr	r2, [pc, #56]	@ (80245e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 80245ae:	490f      	ldr	r1, [pc, #60]	@ (80245ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80245b0:	480f      	ldr	r0, [pc, #60]	@ (80245f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80245b2:	f008 fbdb 	bl	802cd6c <__aeabi_atexit>
 80245b6:	4c0f      	ldr	r4, [pc, #60]	@ (80245f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80245b8:	e8d4 3f8f 	ldab	r3, [r4]
 80245bc:	07db      	lsls	r3, r3, #31
 80245be:	d40b      	bmi.n	80245d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 80245c0:	4620      	mov	r0, r4
 80245c2:	f008 fbda 	bl	802cd7a <__cxa_guard_acquire>
 80245c6:	b138      	cbz	r0, 80245d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 80245c8:	4620      	mov	r0, r4
 80245ca:	f008 fbe2 	bl	802cd92 <__cxa_guard_release>
 80245ce:	4a06      	ldr	r2, [pc, #24]	@ (80245e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 80245d0:	4909      	ldr	r1, [pc, #36]	@ (80245f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 80245d2:	480a      	ldr	r0, [pc, #40]	@ (80245fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 80245d4:	f008 fbca 	bl	802cd6c <__aeabi_atexit>
 80245d8:	4b05      	ldr	r3, [pc, #20]	@ (80245f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80245da:	60eb      	str	r3, [r5, #12]
 80245dc:	4b07      	ldr	r3, [pc, #28]	@ (80245fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 80245de:	612b      	str	r3, [r5, #16]
 80245e0:	bd38      	pop	{r3, r4, r5, pc}
 80245e2:	bf00      	nop
 80245e4:	2005bdd8 	.word	0x2005bdd8
 80245e8:	20000000 	.word	0x20000000
 80245ec:	0802063b 	.word	0x0802063b
 80245f0:	20000040 	.word	0x20000040
 80245f4:	2005bddc 	.word	0x2005bddc
 80245f8:	08020639 	.word	0x08020639
 80245fc:	20000044 	.word	0x20000044

08024600 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8024600:	b510      	push	{r4, lr}
 8024602:	4604      	mov	r4, r0
 8024604:	f7ff ff8c 	bl	8024520 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8024608:	4620      	mov	r0, r4
 802460a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802460e:	f7ff bfbf 	b.w	8024590 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08024614 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8024614:	b538      	push	{r3, r4, r5, lr}
 8024616:	4605      	mov	r5, r0
 8024618:	4c13      	ldr	r4, [pc, #76]	@ (8024668 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x54>)
 802461a:	e8d4 3f8f 	ldab	r3, [r4]
 802461e:	07da      	lsls	r2, r3, #31
 8024620:	d40b      	bmi.n	802463a <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 8024622:	4620      	mov	r0, r4
 8024624:	f008 fba9 	bl	802cd7a <__cxa_guard_acquire>
 8024628:	b138      	cbz	r0, 802463a <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 802462a:	4620      	mov	r0, r4
 802462c:	f008 fbb1 	bl	802cd92 <__cxa_guard_release>
 8024630:	4a0e      	ldr	r2, [pc, #56]	@ (802466c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8024632:	490f      	ldr	r1, [pc, #60]	@ (8024670 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8024634:	480f      	ldr	r0, [pc, #60]	@ (8024674 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8024636:	f008 fb99 	bl	802cd6c <__aeabi_atexit>
 802463a:	4c0f      	ldr	r4, [pc, #60]	@ (8024678 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802463c:	e8d4 3f8f 	ldab	r3, [r4]
 8024640:	07db      	lsls	r3, r3, #31
 8024642:	d40b      	bmi.n	802465c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 8024644:	4620      	mov	r0, r4
 8024646:	f008 fb98 	bl	802cd7a <__cxa_guard_acquire>
 802464a:	b138      	cbz	r0, 802465c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 802464c:	4620      	mov	r0, r4
 802464e:	f008 fba0 	bl	802cd92 <__cxa_guard_release>
 8024652:	4a06      	ldr	r2, [pc, #24]	@ (802466c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8024654:	4909      	ldr	r1, [pc, #36]	@ (802467c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8024656:	480a      	ldr	r0, [pc, #40]	@ (8024680 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8024658:	f008 fb88 	bl	802cd6c <__aeabi_atexit>
 802465c:	4b05      	ldr	r3, [pc, #20]	@ (8024674 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802465e:	626b      	str	r3, [r5, #36]	@ 0x24
 8024660:	4b07      	ldr	r3, [pc, #28]	@ (8024680 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8024662:	62ab      	str	r3, [r5, #40]	@ 0x28
 8024664:	bd38      	pop	{r3, r4, r5, pc}
 8024666:	bf00      	nop
 8024668:	2005be08 	.word	0x2005be08
 802466c:	20000000 	.word	0x20000000
 8024670:	0802062f 	.word	0x0802062f
 8024674:	20000070 	.word	0x20000070
 8024678:	2005be0c 	.word	0x2005be0c
 802467c:	0802062d 	.word	0x0802062d
 8024680:	20000074 	.word	0x20000074

08024684 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8024684:	b538      	push	{r3, r4, r5, lr}
 8024686:	4605      	mov	r5, r0
 8024688:	4c13      	ldr	r4, [pc, #76]	@ (80246d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x54>)
 802468a:	e8d4 3f8f 	ldab	r3, [r4]
 802468e:	07da      	lsls	r2, r3, #31
 8024690:	d40b      	bmi.n	80246aa <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 8024692:	4620      	mov	r0, r4
 8024694:	f008 fb71 	bl	802cd7a <__cxa_guard_acquire>
 8024698:	b138      	cbz	r0, 80246aa <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 802469a:	4620      	mov	r0, r4
 802469c:	f008 fb79 	bl	802cd92 <__cxa_guard_release>
 80246a0:	4a0e      	ldr	r2, [pc, #56]	@ (80246dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80246a2:	490f      	ldr	r1, [pc, #60]	@ (80246e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80246a4:	480f      	ldr	r0, [pc, #60]	@ (80246e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80246a6:	f008 fb61 	bl	802cd6c <__aeabi_atexit>
 80246aa:	4c0f      	ldr	r4, [pc, #60]	@ (80246e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80246ac:	e8d4 3f8f 	ldab	r3, [r4]
 80246b0:	07db      	lsls	r3, r3, #31
 80246b2:	d40b      	bmi.n	80246cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 80246b4:	4620      	mov	r0, r4
 80246b6:	f008 fb60 	bl	802cd7a <__cxa_guard_acquire>
 80246ba:	b138      	cbz	r0, 80246cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 80246bc:	4620      	mov	r0, r4
 80246be:	f008 fb68 	bl	802cd92 <__cxa_guard_release>
 80246c2:	4a06      	ldr	r2, [pc, #24]	@ (80246dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80246c4:	4909      	ldr	r1, [pc, #36]	@ (80246ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80246c6:	480a      	ldr	r0, [pc, #40]	@ (80246f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80246c8:	f008 fb50 	bl	802cd6c <__aeabi_atexit>
 80246cc:	4b05      	ldr	r3, [pc, #20]	@ (80246e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80246ce:	61eb      	str	r3, [r5, #28]
 80246d0:	4b07      	ldr	r3, [pc, #28]	@ (80246f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80246d2:	622b      	str	r3, [r5, #32]
 80246d4:	bd38      	pop	{r3, r4, r5, pc}
 80246d6:	bf00      	nop
 80246d8:	2005bde0 	.word	0x2005bde0
 80246dc:	20000000 	.word	0x20000000
 80246e0:	08020633 	.word	0x08020633
 80246e4:	20000048 	.word	0x20000048
 80246e8:	2005bde4 	.word	0x2005bde4
 80246ec:	08020631 	.word	0x08020631
 80246f0:	2000004c 	.word	0x2000004c

080246f4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 80246f4:	b510      	push	{r4, lr}
 80246f6:	4604      	mov	r4, r0
 80246f8:	f7ff ff8c 	bl	8024614 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80246fc:	4620      	mov	r0, r4
 80246fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024702:	f7ff bfbf 	b.w	8024684 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08024708 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8024708:	b538      	push	{r3, r4, r5, lr}
 802470a:	4605      	mov	r5, r0
 802470c:	4c13      	ldr	r4, [pc, #76]	@ (802475c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x54>)
 802470e:	e8d4 3f8f 	ldab	r3, [r4]
 8024712:	07da      	lsls	r2, r3, #31
 8024714:	d40b      	bmi.n	802472e <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 8024716:	4620      	mov	r0, r4
 8024718:	f008 fb2f 	bl	802cd7a <__cxa_guard_acquire>
 802471c:	b138      	cbz	r0, 802472e <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 802471e:	4620      	mov	r0, r4
 8024720:	f008 fb37 	bl	802cd92 <__cxa_guard_release>
 8024724:	4a0e      	ldr	r2, [pc, #56]	@ (8024760 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8024726:	490f      	ldr	r1, [pc, #60]	@ (8024764 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8024728:	480f      	ldr	r0, [pc, #60]	@ (8024768 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802472a:	f008 fb1f 	bl	802cd6c <__aeabi_atexit>
 802472e:	4c0f      	ldr	r4, [pc, #60]	@ (802476c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8024730:	e8d4 3f8f 	ldab	r3, [r4]
 8024734:	07db      	lsls	r3, r3, #31
 8024736:	d40b      	bmi.n	8024750 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 8024738:	4620      	mov	r0, r4
 802473a:	f008 fb1e 	bl	802cd7a <__cxa_guard_acquire>
 802473e:	b138      	cbz	r0, 8024750 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 8024740:	4620      	mov	r0, r4
 8024742:	f008 fb26 	bl	802cd92 <__cxa_guard_release>
 8024746:	4a06      	ldr	r2, [pc, #24]	@ (8024760 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8024748:	4909      	ldr	r1, [pc, #36]	@ (8024770 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 802474a:	480a      	ldr	r0, [pc, #40]	@ (8024774 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 802474c:	f008 fb0e 	bl	802cd6c <__aeabi_atexit>
 8024750:	4b05      	ldr	r3, [pc, #20]	@ (8024768 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8024752:	636b      	str	r3, [r5, #52]	@ 0x34
 8024754:	4b07      	ldr	r3, [pc, #28]	@ (8024774 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8024756:	63ab      	str	r3, [r5, #56]	@ 0x38
 8024758:	bd38      	pop	{r3, r4, r5, pc}
 802475a:	bf00      	nop
 802475c:	2005be18 	.word	0x2005be18
 8024760:	20000000 	.word	0x20000000
 8024764:	08020627 	.word	0x08020627
 8024768:	20000080 	.word	0x20000080
 802476c:	2005be1c 	.word	0x2005be1c
 8024770:	08020625 	.word	0x08020625
 8024774:	20000084 	.word	0x20000084

08024778 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8024778:	b538      	push	{r3, r4, r5, lr}
 802477a:	4605      	mov	r5, r0
 802477c:	4c13      	ldr	r4, [pc, #76]	@ (80247cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x54>)
 802477e:	e8d4 3f8f 	ldab	r3, [r4]
 8024782:	07da      	lsls	r2, r3, #31
 8024784:	d40b      	bmi.n	802479e <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 8024786:	4620      	mov	r0, r4
 8024788:	f008 faf7 	bl	802cd7a <__cxa_guard_acquire>
 802478c:	b138      	cbz	r0, 802479e <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 802478e:	4620      	mov	r0, r4
 8024790:	f008 faff 	bl	802cd92 <__cxa_guard_release>
 8024794:	4a0e      	ldr	r2, [pc, #56]	@ (80247d0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8024796:	490f      	ldr	r1, [pc, #60]	@ (80247d4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8024798:	480f      	ldr	r0, [pc, #60]	@ (80247d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 802479a:	f008 fae7 	bl	802cd6c <__aeabi_atexit>
 802479e:	4c0f      	ldr	r4, [pc, #60]	@ (80247dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80247a0:	e8d4 3f8f 	ldab	r3, [r4]
 80247a4:	07db      	lsls	r3, r3, #31
 80247a6:	d40b      	bmi.n	80247c0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 80247a8:	4620      	mov	r0, r4
 80247aa:	f008 fae6 	bl	802cd7a <__cxa_guard_acquire>
 80247ae:	b138      	cbz	r0, 80247c0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 80247b0:	4620      	mov	r0, r4
 80247b2:	f008 faee 	bl	802cd92 <__cxa_guard_release>
 80247b6:	4a06      	ldr	r2, [pc, #24]	@ (80247d0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80247b8:	4909      	ldr	r1, [pc, #36]	@ (80247e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80247ba:	480a      	ldr	r0, [pc, #40]	@ (80247e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80247bc:	f008 fad6 	bl	802cd6c <__aeabi_atexit>
 80247c0:	4b05      	ldr	r3, [pc, #20]	@ (80247d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80247c2:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80247c4:	4b07      	ldr	r3, [pc, #28]	@ (80247e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80247c6:	632b      	str	r3, [r5, #48]	@ 0x30
 80247c8:	bd38      	pop	{r3, r4, r5, pc}
 80247ca:	bf00      	nop
 80247cc:	2005bde8 	.word	0x2005bde8
 80247d0:	20000000 	.word	0x20000000
 80247d4:	0802062b 	.word	0x0802062b
 80247d8:	20000050 	.word	0x20000050
 80247dc:	2005bdec 	.word	0x2005bdec
 80247e0:	08020629 	.word	0x08020629
 80247e4:	20000054 	.word	0x20000054

080247e8 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 80247e8:	b510      	push	{r4, lr}
 80247ea:	4604      	mov	r4, r0
 80247ec:	f7ff ff8c 	bl	8024708 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80247f0:	4620      	mov	r0, r4
 80247f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80247f6:	f7ff bfbf 	b.w	8024778 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080247fc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 80247fc:	b538      	push	{r3, r4, r5, lr}
 80247fe:	4605      	mov	r5, r0
 8024800:	4c13      	ldr	r4, [pc, #76]	@ (8024850 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x54>)
 8024802:	e8d4 3f8f 	ldab	r3, [r4]
 8024806:	07da      	lsls	r2, r3, #31
 8024808:	d40b      	bmi.n	8024822 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 802480a:	4620      	mov	r0, r4
 802480c:	f008 fab5 	bl	802cd7a <__cxa_guard_acquire>
 8024810:	b138      	cbz	r0, 8024822 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 8024812:	4620      	mov	r0, r4
 8024814:	f008 fabd 	bl	802cd92 <__cxa_guard_release>
 8024818:	4a0e      	ldr	r2, [pc, #56]	@ (8024854 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 802481a:	490f      	ldr	r1, [pc, #60]	@ (8024858 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 802481c:	480f      	ldr	r0, [pc, #60]	@ (802485c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 802481e:	f008 faa5 	bl	802cd6c <__aeabi_atexit>
 8024822:	4c0f      	ldr	r4, [pc, #60]	@ (8024860 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8024824:	e8d4 3f8f 	ldab	r3, [r4]
 8024828:	07db      	lsls	r3, r3, #31
 802482a:	d40b      	bmi.n	8024844 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 802482c:	4620      	mov	r0, r4
 802482e:	f008 faa4 	bl	802cd7a <__cxa_guard_acquire>
 8024832:	b138      	cbz	r0, 8024844 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 8024834:	4620      	mov	r0, r4
 8024836:	f008 faac 	bl	802cd92 <__cxa_guard_release>
 802483a:	4a06      	ldr	r2, [pc, #24]	@ (8024854 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 802483c:	4909      	ldr	r1, [pc, #36]	@ (8024864 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 802483e:	480a      	ldr	r0, [pc, #40]	@ (8024868 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8024840:	f008 fa94 	bl	802cd6c <__aeabi_atexit>
 8024844:	4b05      	ldr	r3, [pc, #20]	@ (802485c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8024846:	656b      	str	r3, [r5, #84]	@ 0x54
 8024848:	4b07      	ldr	r3, [pc, #28]	@ (8024868 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 802484a:	65ab      	str	r3, [r5, #88]	@ 0x58
 802484c:	bd38      	pop	{r3, r4, r5, pc}
 802484e:	bf00      	nop
 8024850:	2005be20 	.word	0x2005be20
 8024854:	20000000 	.word	0x20000000
 8024858:	08020617 	.word	0x08020617
 802485c:	20000088 	.word	0x20000088
 8024860:	2005be24 	.word	0x2005be24
 8024864:	08020615 	.word	0x08020615
 8024868:	2000008c 	.word	0x2000008c

0802486c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 802486c:	b538      	push	{r3, r4, r5, lr}
 802486e:	4605      	mov	r5, r0
 8024870:	4c13      	ldr	r4, [pc, #76]	@ (80248c0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x54>)
 8024872:	e8d4 3f8f 	ldab	r3, [r4]
 8024876:	07da      	lsls	r2, r3, #31
 8024878:	d40b      	bmi.n	8024892 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 802487a:	4620      	mov	r0, r4
 802487c:	f008 fa7d 	bl	802cd7a <__cxa_guard_acquire>
 8024880:	b138      	cbz	r0, 8024892 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 8024882:	4620      	mov	r0, r4
 8024884:	f008 fa85 	bl	802cd92 <__cxa_guard_release>
 8024888:	4a0e      	ldr	r2, [pc, #56]	@ (80248c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 802488a:	490f      	ldr	r1, [pc, #60]	@ (80248c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 802488c:	480f      	ldr	r0, [pc, #60]	@ (80248cc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 802488e:	f008 fa6d 	bl	802cd6c <__aeabi_atexit>
 8024892:	4c0f      	ldr	r4, [pc, #60]	@ (80248d0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8024894:	e8d4 3f8f 	ldab	r3, [r4]
 8024898:	07db      	lsls	r3, r3, #31
 802489a:	d40b      	bmi.n	80248b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 802489c:	4620      	mov	r0, r4
 802489e:	f008 fa6c 	bl	802cd7a <__cxa_guard_acquire>
 80248a2:	b138      	cbz	r0, 80248b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 80248a4:	4620      	mov	r0, r4
 80248a6:	f008 fa74 	bl	802cd92 <__cxa_guard_release>
 80248aa:	4a06      	ldr	r2, [pc, #24]	@ (80248c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80248ac:	4909      	ldr	r1, [pc, #36]	@ (80248d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80248ae:	480a      	ldr	r0, [pc, #40]	@ (80248d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80248b0:	f008 fa5c 	bl	802cd6c <__aeabi_atexit>
 80248b4:	4b05      	ldr	r3, [pc, #20]	@ (80248cc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80248b6:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80248b8:	4b07      	ldr	r3, [pc, #28]	@ (80248d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80248ba:	652b      	str	r3, [r5, #80]	@ 0x50
 80248bc:	bd38      	pop	{r3, r4, r5, pc}
 80248be:	bf00      	nop
 80248c0:	2005be28 	.word	0x2005be28
 80248c4:	20000000 	.word	0x20000000
 80248c8:	0802061b 	.word	0x0802061b
 80248cc:	20000090 	.word	0x20000090
 80248d0:	2005be2c 	.word	0x2005be2c
 80248d4:	08020619 	.word	0x08020619
 80248d8:	20000094 	.word	0x20000094

080248dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 80248dc:	b538      	push	{r3, r4, r5, lr}
 80248de:	4605      	mov	r5, r0
 80248e0:	4c13      	ldr	r4, [pc, #76]	@ (8024930 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x54>)
 80248e2:	e8d4 3f8f 	ldab	r3, [r4]
 80248e6:	07da      	lsls	r2, r3, #31
 80248e8:	d40b      	bmi.n	8024902 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 80248ea:	4620      	mov	r0, r4
 80248ec:	f008 fa45 	bl	802cd7a <__cxa_guard_acquire>
 80248f0:	b138      	cbz	r0, 8024902 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 80248f2:	4620      	mov	r0, r4
 80248f4:	f008 fa4d 	bl	802cd92 <__cxa_guard_release>
 80248f8:	4a0e      	ldr	r2, [pc, #56]	@ (8024934 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 80248fa:	490f      	ldr	r1, [pc, #60]	@ (8024938 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80248fc:	480f      	ldr	r0, [pc, #60]	@ (802493c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 80248fe:	f008 fa35 	bl	802cd6c <__aeabi_atexit>
 8024902:	4c0f      	ldr	r4, [pc, #60]	@ (8024940 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8024904:	e8d4 3f8f 	ldab	r3, [r4]
 8024908:	07db      	lsls	r3, r3, #31
 802490a:	d40b      	bmi.n	8024924 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 802490c:	4620      	mov	r0, r4
 802490e:	f008 fa34 	bl	802cd7a <__cxa_guard_acquire>
 8024912:	b138      	cbz	r0, 8024924 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 8024914:	4620      	mov	r0, r4
 8024916:	f008 fa3c 	bl	802cd92 <__cxa_guard_release>
 802491a:	4a06      	ldr	r2, [pc, #24]	@ (8024934 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 802491c:	4909      	ldr	r1, [pc, #36]	@ (8024944 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 802491e:	480a      	ldr	r0, [pc, #40]	@ (8024948 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8024920:	f008 fa24 	bl	802cd6c <__aeabi_atexit>
 8024924:	4b05      	ldr	r3, [pc, #20]	@ (802493c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8024926:	646b      	str	r3, [r5, #68]	@ 0x44
 8024928:	4b07      	ldr	r3, [pc, #28]	@ (8024948 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 802492a:	64ab      	str	r3, [r5, #72]	@ 0x48
 802492c:	bd38      	pop	{r3, r4, r5, pc}
 802492e:	bf00      	nop
 8024930:	2005bdf0 	.word	0x2005bdf0
 8024934:	20000000 	.word	0x20000000
 8024938:	0802061f 	.word	0x0802061f
 802493c:	20000058 	.word	0x20000058
 8024940:	2005bdf4 	.word	0x2005bdf4
 8024944:	0802061d 	.word	0x0802061d
 8024948:	2000005c 	.word	0x2000005c

0802494c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 802494c:	b538      	push	{r3, r4, r5, lr}
 802494e:	4605      	mov	r5, r0
 8024950:	4c13      	ldr	r4, [pc, #76]	@ (80249a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x54>)
 8024952:	e8d4 3f8f 	ldab	r3, [r4]
 8024956:	07da      	lsls	r2, r3, #31
 8024958:	d40b      	bmi.n	8024972 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 802495a:	4620      	mov	r0, r4
 802495c:	f008 fa0d 	bl	802cd7a <__cxa_guard_acquire>
 8024960:	b138      	cbz	r0, 8024972 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 8024962:	4620      	mov	r0, r4
 8024964:	f008 fa15 	bl	802cd92 <__cxa_guard_release>
 8024968:	4a0e      	ldr	r2, [pc, #56]	@ (80249a4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 802496a:	490f      	ldr	r1, [pc, #60]	@ (80249a8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 802496c:	480f      	ldr	r0, [pc, #60]	@ (80249ac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 802496e:	f008 f9fd 	bl	802cd6c <__aeabi_atexit>
 8024972:	4c0f      	ldr	r4, [pc, #60]	@ (80249b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8024974:	e8d4 3f8f 	ldab	r3, [r4]
 8024978:	07db      	lsls	r3, r3, #31
 802497a:	d40b      	bmi.n	8024994 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 802497c:	4620      	mov	r0, r4
 802497e:	f008 f9fc 	bl	802cd7a <__cxa_guard_acquire>
 8024982:	b138      	cbz	r0, 8024994 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 8024984:	4620      	mov	r0, r4
 8024986:	f008 fa04 	bl	802cd92 <__cxa_guard_release>
 802498a:	4a06      	ldr	r2, [pc, #24]	@ (80249a4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 802498c:	4909      	ldr	r1, [pc, #36]	@ (80249b4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 802498e:	480a      	ldr	r0, [pc, #40]	@ (80249b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8024990:	f008 f9ec 	bl	802cd6c <__aeabi_atexit>
 8024994:	4b05      	ldr	r3, [pc, #20]	@ (80249ac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8024996:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8024998:	4b07      	ldr	r3, [pc, #28]	@ (80249b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 802499a:	642b      	str	r3, [r5, #64]	@ 0x40
 802499c:	bd38      	pop	{r3, r4, r5, pc}
 802499e:	bf00      	nop
 80249a0:	2005be10 	.word	0x2005be10
 80249a4:	20000000 	.word	0x20000000
 80249a8:	08020623 	.word	0x08020623
 80249ac:	20000078 	.word	0x20000078
 80249b0:	2005be14 	.word	0x2005be14
 80249b4:	08020621 	.word	0x08020621
 80249b8:	2000007c 	.word	0x2000007c

080249bc <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 80249bc:	b510      	push	{r4, lr}
 80249be:	4604      	mov	r4, r0
 80249c0:	f7ff ff1c 	bl	80247fc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 80249c4:	4620      	mov	r0, r4
 80249c6:	f7ff ff89 	bl	80248dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 80249ca:	4620      	mov	r0, r4
 80249cc:	f7ff ff4e 	bl	802486c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 80249d0:	4620      	mov	r0, r4
 80249d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80249d6:	f7ff bfb9 	b.w	802494c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

080249dc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80249dc:	b538      	push	{r3, r4, r5, lr}
 80249de:	4605      	mov	r5, r0
 80249e0:	4c13      	ldr	r4, [pc, #76]	@ (8024a30 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x54>)
 80249e2:	e8d4 3f8f 	ldab	r3, [r4]
 80249e6:	07da      	lsls	r2, r3, #31
 80249e8:	d40b      	bmi.n	8024a02 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 80249ea:	4620      	mov	r0, r4
 80249ec:	f008 f9c5 	bl	802cd7a <__cxa_guard_acquire>
 80249f0:	b138      	cbz	r0, 8024a02 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 80249f2:	4620      	mov	r0, r4
 80249f4:	f008 f9cd 	bl	802cd92 <__cxa_guard_release>
 80249f8:	4a0e      	ldr	r2, [pc, #56]	@ (8024a34 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80249fa:	490f      	ldr	r1, [pc, #60]	@ (8024a38 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80249fc:	480f      	ldr	r0, [pc, #60]	@ (8024a3c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80249fe:	f008 f9b5 	bl	802cd6c <__aeabi_atexit>
 8024a02:	4c0f      	ldr	r4, [pc, #60]	@ (8024a40 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8024a04:	e8d4 3f8f 	ldab	r3, [r4]
 8024a08:	07db      	lsls	r3, r3, #31
 8024a0a:	d40b      	bmi.n	8024a24 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 8024a0c:	4620      	mov	r0, r4
 8024a0e:	f008 f9b4 	bl	802cd7a <__cxa_guard_acquire>
 8024a12:	b138      	cbz	r0, 8024a24 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 8024a14:	4620      	mov	r0, r4
 8024a16:	f008 f9bc 	bl	802cd92 <__cxa_guard_release>
 8024a1a:	4a06      	ldr	r2, [pc, #24]	@ (8024a34 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8024a1c:	4909      	ldr	r1, [pc, #36]	@ (8024a44 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8024a1e:	480a      	ldr	r0, [pc, #40]	@ (8024a48 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8024a20:	f008 f9a4 	bl	802cd6c <__aeabi_atexit>
 8024a24:	4b05      	ldr	r3, [pc, #20]	@ (8024a3c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8024a26:	666b      	str	r3, [r5, #100]	@ 0x64
 8024a28:	4b07      	ldr	r3, [pc, #28]	@ (8024a48 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8024a2a:	66ab      	str	r3, [r5, #104]	@ 0x68
 8024a2c:	bd38      	pop	{r3, r4, r5, pc}
 8024a2e:	bf00      	nop
 8024a30:	2005bdf8 	.word	0x2005bdf8
 8024a34:	20000000 	.word	0x20000000
 8024a38:	0802060f 	.word	0x0802060f
 8024a3c:	20000060 	.word	0x20000060
 8024a40:	2005bdfc 	.word	0x2005bdfc
 8024a44:	0802060d 	.word	0x0802060d
 8024a48:	20000064 	.word	0x20000064

08024a4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8024a4c:	b538      	push	{r3, r4, r5, lr}
 8024a4e:	4605      	mov	r5, r0
 8024a50:	4c13      	ldr	r4, [pc, #76]	@ (8024aa0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x54>)
 8024a52:	e8d4 3f8f 	ldab	r3, [r4]
 8024a56:	07da      	lsls	r2, r3, #31
 8024a58:	d40b      	bmi.n	8024a72 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 8024a5a:	4620      	mov	r0, r4
 8024a5c:	f008 f98d 	bl	802cd7a <__cxa_guard_acquire>
 8024a60:	b138      	cbz	r0, 8024a72 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 8024a62:	4620      	mov	r0, r4
 8024a64:	f008 f995 	bl	802cd92 <__cxa_guard_release>
 8024a68:	4a0e      	ldr	r2, [pc, #56]	@ (8024aa4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8024a6a:	490f      	ldr	r1, [pc, #60]	@ (8024aa8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8024a6c:	480f      	ldr	r0, [pc, #60]	@ (8024aac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8024a6e:	f008 f97d 	bl	802cd6c <__aeabi_atexit>
 8024a72:	4c0f      	ldr	r4, [pc, #60]	@ (8024ab0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8024a74:	e8d4 3f8f 	ldab	r3, [r4]
 8024a78:	07db      	lsls	r3, r3, #31
 8024a7a:	d40b      	bmi.n	8024a94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 8024a7c:	4620      	mov	r0, r4
 8024a7e:	f008 f97c 	bl	802cd7a <__cxa_guard_acquire>
 8024a82:	b138      	cbz	r0, 8024a94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 8024a84:	4620      	mov	r0, r4
 8024a86:	f008 f984 	bl	802cd92 <__cxa_guard_release>
 8024a8a:	4a06      	ldr	r2, [pc, #24]	@ (8024aa4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8024a8c:	4909      	ldr	r1, [pc, #36]	@ (8024ab4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8024a8e:	480a      	ldr	r0, [pc, #40]	@ (8024ab8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8024a90:	f008 f96c 	bl	802cd6c <__aeabi_atexit>
 8024a94:	4b05      	ldr	r3, [pc, #20]	@ (8024aac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8024a96:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8024a98:	4b07      	ldr	r3, [pc, #28]	@ (8024ab8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8024a9a:	662b      	str	r3, [r5, #96]	@ 0x60
 8024a9c:	bd38      	pop	{r3, r4, r5, pc}
 8024a9e:	bf00      	nop
 8024aa0:	2005bdd0 	.word	0x2005bdd0
 8024aa4:	20000000 	.word	0x20000000
 8024aa8:	08020613 	.word	0x08020613
 8024aac:	20000038 	.word	0x20000038
 8024ab0:	2005bdd4 	.word	0x2005bdd4
 8024ab4:	08020611 	.word	0x08020611
 8024ab8:	2000003c 	.word	0x2000003c

08024abc <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8024abc:	b510      	push	{r4, lr}
 8024abe:	4604      	mov	r4, r0
 8024ac0:	f7ff ff8c 	bl	80249dc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8024ac4:	4620      	mov	r0, r4
 8024ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024aca:	f7ff bfbf 	b.w	8024a4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08024ad0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8024ad0:	b538      	push	{r3, r4, r5, lr}
 8024ad2:	4605      	mov	r5, r0
 8024ad4:	4c13      	ldr	r4, [pc, #76]	@ (8024b24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x54>)
 8024ad6:	e8d4 3f8f 	ldab	r3, [r4]
 8024ada:	07da      	lsls	r2, r3, #31
 8024adc:	d40b      	bmi.n	8024af6 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 8024ade:	4620      	mov	r0, r4
 8024ae0:	f008 f94b 	bl	802cd7a <__cxa_guard_acquire>
 8024ae4:	b138      	cbz	r0, 8024af6 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 8024ae6:	4620      	mov	r0, r4
 8024ae8:	f008 f953 	bl	802cd92 <__cxa_guard_release>
 8024aec:	4a0e      	ldr	r2, [pc, #56]	@ (8024b28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8024aee:	490f      	ldr	r1, [pc, #60]	@ (8024b2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024af0:	480f      	ldr	r0, [pc, #60]	@ (8024b30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8024af2:	f008 f93b 	bl	802cd6c <__aeabi_atexit>
 8024af6:	4c0f      	ldr	r4, [pc, #60]	@ (8024b34 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8024af8:	e8d4 3f8f 	ldab	r3, [r4]
 8024afc:	07db      	lsls	r3, r3, #31
 8024afe:	d40b      	bmi.n	8024b18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 8024b00:	4620      	mov	r0, r4
 8024b02:	f008 f93a 	bl	802cd7a <__cxa_guard_acquire>
 8024b06:	b138      	cbz	r0, 8024b18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 8024b08:	4620      	mov	r0, r4
 8024b0a:	f008 f942 	bl	802cd92 <__cxa_guard_release>
 8024b0e:	4a06      	ldr	r2, [pc, #24]	@ (8024b28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8024b10:	4909      	ldr	r1, [pc, #36]	@ (8024b38 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8024b12:	480a      	ldr	r0, [pc, #40]	@ (8024b3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8024b14:	f008 f92a 	bl	802cd6c <__aeabi_atexit>
 8024b18:	4b05      	ldr	r3, [pc, #20]	@ (8024b30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8024b1a:	676b      	str	r3, [r5, #116]	@ 0x74
 8024b1c:	4b07      	ldr	r3, [pc, #28]	@ (8024b3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8024b1e:	67ab      	str	r3, [r5, #120]	@ 0x78
 8024b20:	bd38      	pop	{r3, r4, r5, pc}
 8024b22:	bf00      	nop
 8024b24:	2005bdc8 	.word	0x2005bdc8
 8024b28:	20000000 	.word	0x20000000
 8024b2c:	08020607 	.word	0x08020607
 8024b30:	20000030 	.word	0x20000030
 8024b34:	2005bdcc 	.word	0x2005bdcc
 8024b38:	08020605 	.word	0x08020605
 8024b3c:	20000034 	.word	0x20000034

08024b40 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8024b40:	b538      	push	{r3, r4, r5, lr}
 8024b42:	4605      	mov	r5, r0
 8024b44:	4c13      	ldr	r4, [pc, #76]	@ (8024b94 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x54>)
 8024b46:	e8d4 3f8f 	ldab	r3, [r4]
 8024b4a:	07da      	lsls	r2, r3, #31
 8024b4c:	d40b      	bmi.n	8024b66 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 8024b4e:	4620      	mov	r0, r4
 8024b50:	f008 f913 	bl	802cd7a <__cxa_guard_acquire>
 8024b54:	b138      	cbz	r0, 8024b66 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 8024b56:	4620      	mov	r0, r4
 8024b58:	f008 f91b 	bl	802cd92 <__cxa_guard_release>
 8024b5c:	4a0e      	ldr	r2, [pc, #56]	@ (8024b98 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8024b5e:	490f      	ldr	r1, [pc, #60]	@ (8024b9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024b60:	480f      	ldr	r0, [pc, #60]	@ (8024ba0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8024b62:	f008 f903 	bl	802cd6c <__aeabi_atexit>
 8024b66:	4c0f      	ldr	r4, [pc, #60]	@ (8024ba4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024b68:	e8d4 3f8f 	ldab	r3, [r4]
 8024b6c:	07db      	lsls	r3, r3, #31
 8024b6e:	d40b      	bmi.n	8024b88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 8024b70:	4620      	mov	r0, r4
 8024b72:	f008 f902 	bl	802cd7a <__cxa_guard_acquire>
 8024b76:	b138      	cbz	r0, 8024b88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 8024b78:	4620      	mov	r0, r4
 8024b7a:	f008 f90a 	bl	802cd92 <__cxa_guard_release>
 8024b7e:	4a06      	ldr	r2, [pc, #24]	@ (8024b98 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8024b80:	4909      	ldr	r1, [pc, #36]	@ (8024ba8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8024b82:	480a      	ldr	r0, [pc, #40]	@ (8024bac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8024b84:	f008 f8f2 	bl	802cd6c <__aeabi_atexit>
 8024b88:	4b05      	ldr	r3, [pc, #20]	@ (8024ba0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8024b8a:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8024b8c:	4b07      	ldr	r3, [pc, #28]	@ (8024bac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8024b8e:	672b      	str	r3, [r5, #112]	@ 0x70
 8024b90:	bd38      	pop	{r3, r4, r5, pc}
 8024b92:	bf00      	nop
 8024b94:	2005bdc0 	.word	0x2005bdc0
 8024b98:	20000000 	.word	0x20000000
 8024b9c:	0802060b 	.word	0x0802060b
 8024ba0:	20000028 	.word	0x20000028
 8024ba4:	2005bdc4 	.word	0x2005bdc4
 8024ba8:	08020609 	.word	0x08020609
 8024bac:	2000002c 	.word	0x2000002c

08024bb0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8024bb0:	b510      	push	{r4, lr}
 8024bb2:	4604      	mov	r4, r0
 8024bb4:	f7ff ff8c 	bl	8024ad0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8024bb8:	4620      	mov	r0, r4
 8024bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024bbe:	f7ff bfbf 	b.w	8024b40 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08024bc2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8024bc2:	b510      	push	{r4, lr}
 8024bc4:	4604      	mov	r4, r0
 8024bc6:	f7ff fff3 	bl	8024bb0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8024bca:	4620      	mov	r0, r4
 8024bcc:	f7ff ff76 	bl	8024abc <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8024bd0:	4620      	mov	r0, r4
 8024bd2:	f7ff fe09 	bl	80247e8 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8024bd6:	4620      	mov	r0, r4
 8024bd8:	f7ff fd12 	bl	8024600 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8024bdc:	4620      	mov	r0, r4
 8024bde:	f7ff fd89 	bl	80246f4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8024be2:	4620      	mov	r0, r4
 8024be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024be8:	f7ff bee8 	b.w	80249bc <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08024bec <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8024bec:	b538      	push	{r3, r4, r5, lr}
 8024bee:	4605      	mov	r5, r0
 8024bf0:	4c09      	ldr	r4, [pc, #36]	@ (8024c18 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x2c>)
 8024bf2:	e8d4 3f8f 	ldab	r3, [r4]
 8024bf6:	07db      	lsls	r3, r3, #31
 8024bf8:	d40b      	bmi.n	8024c12 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x26>
 8024bfa:	4620      	mov	r0, r4
 8024bfc:	f008 f8bd 	bl	802cd7a <__cxa_guard_acquire>
 8024c00:	b138      	cbz	r0, 8024c12 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x26>
 8024c02:	4620      	mov	r0, r4
 8024c04:	f008 f8c5 	bl	802cd92 <__cxa_guard_release>
 8024c08:	4a04      	ldr	r2, [pc, #16]	@ (8024c1c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8024c0a:	4905      	ldr	r1, [pc, #20]	@ (8024c20 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8024c0c:	4805      	ldr	r0, [pc, #20]	@ (8024c24 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8024c0e:	f008 f8ad 	bl	802cd6c <__aeabi_atexit>
 8024c12:	4b04      	ldr	r3, [pc, #16]	@ (8024c24 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8024c14:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8024c16:	bd38      	pop	{r3, r4, r5, pc}
 8024c18:	2005bdb4 	.word	0x2005bdb4
 8024c1c:	20000000 	.word	0x20000000
 8024c20:	08020603 	.word	0x08020603
 8024c24:	20000020 	.word	0x20000020

08024c28 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 8024c28:	b538      	push	{r3, r4, r5, lr}
 8024c2a:	4605      	mov	r5, r0
 8024c2c:	4c0a      	ldr	r4, [pc, #40]	@ (8024c58 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 8024c2e:	e8d4 3f8f 	ldab	r3, [r4]
 8024c32:	07db      	lsls	r3, r3, #31
 8024c34:	d40b      	bmi.n	8024c4e <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x26>
 8024c36:	4620      	mov	r0, r4
 8024c38:	f008 f89f 	bl	802cd7a <__cxa_guard_acquire>
 8024c3c:	b138      	cbz	r0, 8024c4e <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x26>
 8024c3e:	4620      	mov	r0, r4
 8024c40:	f008 f8a7 	bl	802cd92 <__cxa_guard_release>
 8024c44:	4a05      	ldr	r2, [pc, #20]	@ (8024c5c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 8024c46:	4906      	ldr	r1, [pc, #24]	@ (8024c60 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 8024c48:	4806      	ldr	r0, [pc, #24]	@ (8024c64 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8024c4a:	f008 f88f 	bl	802cd6c <__aeabi_atexit>
 8024c4e:	4b05      	ldr	r3, [pc, #20]	@ (8024c64 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8024c50:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 8024c54:	bd38      	pop	{r3, r4, r5, pc}
 8024c56:	bf00      	nop
 8024c58:	2005bdb8 	.word	0x2005bdb8
 8024c5c:	20000000 	.word	0x20000000
 8024c60:	08020601 	.word	0x08020601
 8024c64:	20000024 	.word	0x20000024

08024c68 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 8024c68:	b570      	push	{r4, r5, r6, lr}
 8024c6a:	4606      	mov	r6, r0
 8024c6c:	4d0b      	ldr	r5, [pc, #44]	@ (8024c9c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8024c6e:	e8d5 3f8f 	ldab	r3, [r5]
 8024c72:	f013 0f01 	tst.w	r3, #1
 8024c76:	4c0a      	ldr	r4, [pc, #40]	@ (8024ca0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8024c78:	d10d      	bne.n	8024c96 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x2e>
 8024c7a:	4628      	mov	r0, r5
 8024c7c:	f008 f87d 	bl	802cd7a <__cxa_guard_acquire>
 8024c80:	b148      	cbz	r0, 8024c96 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x2e>
 8024c82:	4b08      	ldr	r3, [pc, #32]	@ (8024ca4 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8024c84:	4628      	mov	r0, r5
 8024c86:	6023      	str	r3, [r4, #0]
 8024c88:	f008 f883 	bl	802cd92 <__cxa_guard_release>
 8024c8c:	4a06      	ldr	r2, [pc, #24]	@ (8024ca8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8024c8e:	4907      	ldr	r1, [pc, #28]	@ (8024cac <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8024c90:	4620      	mov	r0, r4
 8024c92:	f008 f86b 	bl	802cd6c <__aeabi_atexit>
 8024c96:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
 8024c9a:	bd70      	pop	{r4, r5, r6, pc}
 8024c9c:	2005bdbc 	.word	0x2005bdbc
 8024ca0:	2005bf34 	.word	0x2005bf34
 8024ca4:	08031168 	.word	0x08031168
 8024ca8:	20000000 	.word	0x20000000
 8024cac:	080205ff 	.word	0x080205ff

08024cb0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 8024cb0:	b510      	push	{r4, lr}
 8024cb2:	4604      	mov	r4, r0
 8024cb4:	f7ff ff9a 	bl	8024bec <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 8024cb8:	4620      	mov	r0, r4
 8024cba:	f7ff ffb5 	bl	8024c28 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 8024cbe:	4620      	mov	r0, r4
 8024cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024cc4:	f7ff bfd0 	b.w	8024c68 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

08024cc8 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>:
 8024cc8:	b570      	push	{r4, r5, r6, lr}
 8024cca:	4606      	mov	r6, r0
 8024ccc:	4d0b      	ldr	r5, [pc, #44]	@ (8024cfc <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x34>)
 8024cce:	e8d5 3f8f 	ldab	r3, [r5]
 8024cd2:	f013 0f01 	tst.w	r3, #1
 8024cd6:	4c0a      	ldr	r4, [pc, #40]	@ (8024d00 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x38>)
 8024cd8:	d10d      	bne.n	8024cf6 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x2e>
 8024cda:	4628      	mov	r0, r5
 8024cdc:	f008 f84d 	bl	802cd7a <__cxa_guard_acquire>
 8024ce0:	b148      	cbz	r0, 8024cf6 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x2e>
 8024ce2:	4b08      	ldr	r3, [pc, #32]	@ (8024d04 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x3c>)
 8024ce4:	4628      	mov	r0, r5
 8024ce6:	6023      	str	r3, [r4, #0]
 8024ce8:	f008 f853 	bl	802cd92 <__cxa_guard_release>
 8024cec:	4a06      	ldr	r2, [pc, #24]	@ (8024d08 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x40>)
 8024cee:	4907      	ldr	r1, [pc, #28]	@ (8024d0c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x44>)
 8024cf0:	4620      	mov	r0, r4
 8024cf2:	f008 f83b 	bl	802cd6c <__aeabi_atexit>
 8024cf6:	f8c6 4088 	str.w	r4, [r6, #136]	@ 0x88
 8024cfa:	bd70      	pop	{r4, r5, r6, pc}
 8024cfc:	2005bdb0 	.word	0x2005bdb0
 8024d00:	2005be30 	.word	0x2005be30
 8024d04:	08031184 	.word	0x08031184
 8024d08:	20000000 	.word	0x20000000
 8024d0c:	080205fd 	.word	0x080205fd

08024d10 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8024d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d14:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 8024d18:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
 8024d1c:	fb05 4c0e 	mla	ip, r5, lr, r4
 8024d20:	2d00      	cmp	r5, #0
 8024d22:	f9bd b028 	ldrsh.w	fp, [sp, #40]	@ 0x28
 8024d26:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 8024d2a:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 8024d2e:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 8024d32:	eb02 0a0c 	add.w	sl, r2, ip
 8024d36:	8808      	ldrh	r0, [r1, #0]
 8024d38:	f2c0 80b0 	blt.w	8024e9c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8024d3c:	45ab      	cmp	fp, r5
 8024d3e:	f340 80ad 	ble.w	8024e9c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8024d42:	2c00      	cmp	r4, #0
 8024d44:	f2c0 80a8 	blt.w	8024e98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8024d48:	45a6      	cmp	lr, r4
 8024d4a:	f340 80a5 	ble.w	8024e98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8024d4e:	f812 200c 	ldrb.w	r2, [r2, ip]
 8024d52:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8024d56:	1c62      	adds	r2, r4, #1
 8024d58:	f100 80a3 	bmi.w	8024ea2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8024d5c:	4596      	cmp	lr, r2
 8024d5e:	f340 80a0 	ble.w	8024ea2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8024d62:	f1b9 0f00 	cmp.w	r9, #0
 8024d66:	f000 809c 	beq.w	8024ea2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8024d6a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8024d6e:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8024d72:	3501      	adds	r5, #1
 8024d74:	f100 8099 	bmi.w	8024eaa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8024d78:	45ab      	cmp	fp, r5
 8024d7a:	f340 8096 	ble.w	8024eaa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8024d7e:	2f00      	cmp	r7, #0
 8024d80:	f000 8093 	beq.w	8024eaa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8024d84:	2c00      	cmp	r4, #0
 8024d86:	f2c0 808e 	blt.w	8024ea6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8024d8a:	45a6      	cmp	lr, r4
 8024d8c:	f340 808b 	ble.w	8024ea6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8024d90:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8024d94:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8024d98:	3401      	adds	r4, #1
 8024d9a:	f100 8089 	bmi.w	8024eb0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8024d9e:	45a6      	cmp	lr, r4
 8024da0:	f340 8086 	ble.w	8024eb0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8024da4:	f1b9 0f00 	cmp.w	r9, #0
 8024da8:	f000 8082 	beq.w	8024eb0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8024dac:	44d6      	add	lr, sl
 8024dae:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024db2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8024db6:	fb19 fe07 	smulbb	lr, r9, r7
 8024dba:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8024dbe:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8024dc2:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8024dc6:	ea44 0808 	orr.w	r8, r4, r8
 8024dca:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8024dce:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8024dd2:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8024dd6:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8024dda:	ea44 0c0c 	orr.w	ip, r4, ip
 8024dde:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8024de2:	fb04 f40c 	mul.w	r4, r4, ip
 8024de6:	f1c7 0210 	rsb	r2, r7, #16
 8024dea:	eba2 0209 	sub.w	r2, r2, r9
 8024dee:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8024df2:	fb02 4808 	mla	r8, r2, r8, r4
 8024df6:	b2b4      	uxth	r4, r6
 8024df8:	43f6      	mvns	r6, r6
 8024dfa:	041a      	lsls	r2, r3, #16
 8024dfc:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8024e00:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8024e04:	4313      	orrs	r3, r2
 8024e06:	fb0e 8303 	mla	r3, lr, r3, r8
 8024e0a:	042a      	lsls	r2, r5, #16
 8024e0c:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8024e10:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8024e14:	432a      	orrs	r2, r5
 8024e16:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8024e1a:	fb07 3202 	mla	r2, r7, r2, r3
 8024e1e:	0d53      	lsrs	r3, r2, #21
 8024e20:	0952      	lsrs	r2, r2, #5
 8024e22:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024e26:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8024e2a:	431a      	orrs	r2, r3
 8024e2c:	b293      	uxth	r3, r2
 8024e2e:	1202      	asrs	r2, r0, #8
 8024e30:	b2f6      	uxtb	r6, r6
 8024e32:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8024e36:	fb12 f206 	smulbb	r2, r2, r6
 8024e3a:	10c7      	asrs	r7, r0, #3
 8024e3c:	00c0      	lsls	r0, r0, #3
 8024e3e:	b2c0      	uxtb	r0, r0
 8024e40:	121d      	asrs	r5, r3, #8
 8024e42:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8024e46:	fb10 f006 	smulbb	r0, r0, r6
 8024e4a:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8024e4e:	fb17 f706 	smulbb	r7, r7, r6
 8024e52:	fb05 2504 	mla	r5, r5, r4, r2
 8024e56:	10da      	asrs	r2, r3, #3
 8024e58:	00db      	lsls	r3, r3, #3
 8024e5a:	b2db      	uxtb	r3, r3
 8024e5c:	fb03 0004 	mla	r0, r3, r4, r0
 8024e60:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8024e64:	fb02 7204 	mla	r2, r2, r4, r7
 8024e68:	b2ad      	uxth	r5, r5
 8024e6a:	b280      	uxth	r0, r0
 8024e6c:	1c6b      	adds	r3, r5, #1
 8024e6e:	b292      	uxth	r2, r2
 8024e70:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024e74:	1c43      	adds	r3, r0, #1
 8024e76:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024e7a:	1c50      	adds	r0, r2, #1
 8024e7c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8024e80:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8024e84:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024e88:	0952      	lsrs	r2, r2, #5
 8024e8a:	432b      	orrs	r3, r5
 8024e8c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8024e90:	4313      	orrs	r3, r2
 8024e92:	800b      	strh	r3, [r1, #0]
 8024e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e98:	4680      	mov	r8, r0
 8024e9a:	e75c      	b.n	8024d56 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8024e9c:	4684      	mov	ip, r0
 8024e9e:	4680      	mov	r8, r0
 8024ea0:	e767      	b.n	8024d72 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8024ea2:	4684      	mov	ip, r0
 8024ea4:	e765      	b.n	8024d72 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8024ea6:	4605      	mov	r5, r0
 8024ea8:	e776      	b.n	8024d98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8024eaa:	4603      	mov	r3, r0
 8024eac:	4605      	mov	r5, r0
 8024eae:	e782      	b.n	8024db6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8024eb0:	4603      	mov	r3, r0
 8024eb2:	e780      	b.n	8024db6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08024eb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024eb8:	b099      	sub	sp, #100	@ 0x64
 8024eba:	9215      	str	r2, [sp, #84]	@ 0x54
 8024ebc:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8024ebe:	9016      	str	r0, [sp, #88]	@ 0x58
 8024ec0:	9309      	str	r3, [sp, #36]	@ 0x24
 8024ec2:	6850      	ldr	r0, [r2, #4]
 8024ec4:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8024ec8:	910c      	str	r1, [sp, #48]	@ 0x30
 8024eca:	930d      	str	r3, [sp, #52]	@ 0x34
 8024ecc:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8024ed0:	fb00 1303 	mla	r3, r0, r3, r1
 8024ed4:	e9dd a523 	ldrd	sl, r5, [sp, #140]	@ 0x8c
 8024ed8:	6812      	ldr	r2, [r2, #0]
 8024eda:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8024ede:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024ee0:	681b      	ldr	r3, [r3, #0]
 8024ee2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024ee4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024ee6:	685e      	ldr	r6, [r3, #4]
 8024ee8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024eea:	3604      	adds	r6, #4
 8024eec:	43db      	mvns	r3, r3
 8024eee:	b2db      	uxtb	r3, r3
 8024ef0:	930a      	str	r3, [sp, #40]	@ 0x28
 8024ef2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024ef4:	2b00      	cmp	r3, #0
 8024ef6:	dc03      	bgt.n	8024f00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8024ef8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024efa:	2b00      	cmp	r3, #0
 8024efc:	f340 8225 	ble.w	802534a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8024f00:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024f02:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024f06:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024f0a:	1e48      	subs	r0, r1, #1
 8024f0c:	1e57      	subs	r7, r2, #1
 8024f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024f10:	2b00      	cmp	r3, #0
 8024f12:	f340 80e3 	ble.w	80250dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024f16:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8024f1a:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024f1e:	d406      	bmi.n	8024f2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024f20:	4584      	cmp	ip, r0
 8024f22:	da04      	bge.n	8024f2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024f24:	2b00      	cmp	r3, #0
 8024f26:	db02      	blt.n	8024f2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024f28:	42bb      	cmp	r3, r7
 8024f2a:	f2c0 80d8 	blt.w	80250de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8024f2e:	f11c 0c01 	adds.w	ip, ip, #1
 8024f32:	f100 80c9 	bmi.w	80250c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024f36:	4561      	cmp	r1, ip
 8024f38:	f2c0 80c6 	blt.w	80250c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024f3c:	3301      	adds	r3, #1
 8024f3e:	f100 80c3 	bmi.w	80250c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024f42:	429a      	cmp	r2, r3
 8024f44:	f2c0 80c0 	blt.w	80250c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024f48:	4647      	mov	r7, r8
 8024f4a:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8024f4e:	f1bb 0f00 	cmp.w	fp, #0
 8024f52:	f340 80e3 	ble.w	802511c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8024f56:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8024f58:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024f5a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8024f5e:	ea5f 422a 	movs.w	r2, sl, asr #16
 8024f62:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024f66:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8024f6a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024f6e:	689b      	ldr	r3, [r3, #8]
 8024f70:	f100 8121 	bmi.w	80251b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8024f74:	f103 39ff 	add.w	r9, r3, #4294967295
 8024f78:	454a      	cmp	r2, r9
 8024f7a:	f280 811c 	bge.w	80251b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8024f7e:	f1bc 0f00 	cmp.w	ip, #0
 8024f82:	f2c0 8118 	blt.w	80251b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8024f86:	f10e 39ff 	add.w	r9, lr, #4294967295
 8024f8a:	45cc      	cmp	ip, r9
 8024f8c:	f280 8113 	bge.w	80251b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8024f90:	b21b      	sxth	r3, r3
 8024f92:	fb0c 2203 	mla	r2, ip, r3, r2
 8024f96:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024f98:	eb04 0902 	add.w	r9, r4, r2
 8024f9c:	5ca2      	ldrb	r2, [r4, r2]
 8024f9e:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8024fa2:	2800      	cmp	r0, #0
 8024fa4:	f000 80fe 	beq.w	80251a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8024fa8:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024fac:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8024fb0:	9211      	str	r2, [sp, #68]	@ 0x44
 8024fb2:	b151      	cbz	r1, 8024fca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024fb4:	eb09 0203 	add.w	r2, r9, r3
 8024fb8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024fbc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024fc0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024fc2:	7853      	ldrb	r3, [r2, #1]
 8024fc4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024fc8:	9312      	str	r3, [sp, #72]	@ 0x48
 8024fca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024fcc:	fb10 f201 	smulbb	r2, r0, r1
 8024fd0:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024fd4:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8024fd8:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8024fdc:	ea4c 0c03 	orr.w	ip, ip, r3
 8024fe0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024fe2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024fe4:	041b      	lsls	r3, r3, #16
 8024fe6:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8024fea:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8024fee:	10d2      	asrs	r2, r2, #3
 8024ff0:	4323      	orrs	r3, r4
 8024ff2:	4353      	muls	r3, r2
 8024ff4:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8024ff8:	fb09 330c 	mla	r3, r9, ip, r3
 8024ffc:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8025000:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8025004:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8025008:	ea4c 0e0e 	orr.w	lr, ip, lr
 802500c:	f1c1 0c10 	rsb	ip, r1, #16
 8025010:	ebac 0c00 	sub.w	ip, ip, r0
 8025014:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8025018:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802501c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802501e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8025022:	0418      	lsls	r0, r3, #16
 8025024:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8025028:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802502c:	4318      	orrs	r0, r3
 802502e:	fb02 c200 	mla	r2, r2, r0, ip
 8025032:	8838      	ldrh	r0, [r7, #0]
 8025034:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025036:	0d53      	lsrs	r3, r2, #21
 8025038:	1201      	asrs	r1, r0, #8
 802503a:	0952      	lsrs	r2, r2, #5
 802503c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025040:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025044:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8025048:	431a      	orrs	r2, r3
 802504a:	fb11 f104 	smulbb	r1, r1, r4
 802504e:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8025052:	00c0      	lsls	r0, r0, #3
 8025054:	b292      	uxth	r2, r2
 8025056:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 802505a:	b2c0      	uxtb	r0, r0
 802505c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8025060:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8025064:	fb1e fe04 	smulbb	lr, lr, r4
 8025068:	fb10 f004 	smulbb	r0, r0, r4
 802506c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8025070:	fb0c 1c03 	mla	ip, ip, r3, r1
 8025074:	10d1      	asrs	r1, r2, #3
 8025076:	00d2      	lsls	r2, r2, #3
 8025078:	b2d2      	uxtb	r2, r2
 802507a:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802507e:	fb01 e103 	mla	r1, r1, r3, lr
 8025082:	fb02 0303 	mla	r3, r2, r3, r0
 8025086:	fa1f fc8c 	uxth.w	ip, ip
 802508a:	b29a      	uxth	r2, r3
 802508c:	f10c 0301 	add.w	r3, ip, #1
 8025090:	b289      	uxth	r1, r1
 8025092:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8025096:	1c53      	adds	r3, r2, #1
 8025098:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802509c:	1c4a      	adds	r2, r1, #1
 802509e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80250a2:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80250a6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80250aa:	0949      	lsrs	r1, r1, #5
 80250ac:	ea43 030c 	orr.w	r3, r3, ip
 80250b0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80250b4:	430b      	orrs	r3, r1
 80250b6:	803b      	strh	r3, [r7, #0]
 80250b8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80250ba:	3702      	adds	r7, #2
 80250bc:	449a      	add	sl, r3
 80250be:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80250c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80250c4:	441d      	add	r5, r3
 80250c6:	e742      	b.n	8024f4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80250c8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80250ca:	f108 0802 	add.w	r8, r8, #2
 80250ce:	449a      	add	sl, r3
 80250d0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80250d2:	441d      	add	r5, r3
 80250d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80250d6:	3b01      	subs	r3, #1
 80250d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80250da:	e718      	b.n	8024f0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80250dc:	d023      	beq.n	8025126 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80250de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80250e0:	9825      	ldr	r0, [sp, #148]	@ 0x94
 80250e2:	3b01      	subs	r3, #1
 80250e4:	fb00 a003 	mla	r0, r0, r3, sl
 80250e8:	1400      	asrs	r0, r0, #16
 80250ea:	f53f af2d 	bmi.w	8024f48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80250ee:	3901      	subs	r1, #1
 80250f0:	4288      	cmp	r0, r1
 80250f2:	f6bf af29 	bge.w	8024f48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80250f6:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80250f8:	fb01 5303 	mla	r3, r1, r3, r5
 80250fc:	141b      	asrs	r3, r3, #16
 80250fe:	f53f af23 	bmi.w	8024f48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025102:	3a01      	subs	r2, #1
 8025104:	4293      	cmp	r3, r2
 8025106:	f6bf af1f 	bge.w	8024f48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802510a:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 802510e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 8025112:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 8025116:	f1be 0f00 	cmp.w	lr, #0
 802511a:	dc6c      	bgt.n	80251f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802511c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802511e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025122:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8025126:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025128:	2b00      	cmp	r3, #0
 802512a:	f340 810e 	ble.w	802534a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 802512e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025132:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025136:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802513a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802513e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025142:	eef0 6a62 	vmov.f32	s13, s5
 8025146:	ee31 1a05 	vadd.f32	s2, s2, s10
 802514a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802514e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025152:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025156:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802515a:	ee16 aa90 	vmov	sl, s13
 802515e:	eef0 6a43 	vmov.f32	s13, s6
 8025162:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025166:	ee12 2a90 	vmov	r2, s5
 802516a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802516e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025170:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025174:	fb92 f3f3 	sdiv	r3, r2, r3
 8025178:	ee13 2a10 	vmov	r2, s6
 802517c:	9325      	str	r3, [sp, #148]	@ 0x94
 802517e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025180:	ee16 5a90 	vmov	r5, s13
 8025184:	fb92 f3f3 	sdiv	r3, r2, r3
 8025188:	9326      	str	r3, [sp, #152]	@ 0x98
 802518a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802518c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802518e:	3b01      	subs	r3, #1
 8025190:	930c      	str	r3, [sp, #48]	@ 0x30
 8025192:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025194:	bf08      	it	eq
 8025196:	4613      	moveq	r3, r2
 8025198:	eeb0 3a67 	vmov.f32	s6, s15
 802519c:	9309      	str	r3, [sp, #36]	@ 0x24
 802519e:	eef0 2a47 	vmov.f32	s5, s14
 80251a2:	e6a6      	b.n	8024ef2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80251a4:	2900      	cmp	r1, #0
 80251a6:	f43f af10 	beq.w	8024fca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80251aa:	f819 3003 	ldrb.w	r3, [r9, r3]
 80251ae:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80251b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80251b4:	e709      	b.n	8024fca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80251b6:	f112 0901 	adds.w	r9, r2, #1
 80251ba:	f53f af7d 	bmi.w	80250b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80251be:	454b      	cmp	r3, r9
 80251c0:	f6ff af7a 	blt.w	80250b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80251c4:	f11c 0901 	adds.w	r9, ip, #1
 80251c8:	f53f af76 	bmi.w	80250b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80251cc:	45ce      	cmp	lr, r9
 80251ce:	f6ff af73 	blt.w	80250b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80251d2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80251d4:	9202      	str	r2, [sp, #8]
 80251d6:	b21b      	sxth	r3, r3
 80251d8:	fa0f f28e 	sxth.w	r2, lr
 80251dc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80251e0:	e9cd c003 	strd	ip, r0, [sp, #12]
 80251e4:	9201      	str	r2, [sp, #4]
 80251e6:	9300      	str	r3, [sp, #0]
 80251e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80251ea:	4633      	mov	r3, r6
 80251ec:	4639      	mov	r1, r7
 80251ee:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80251f0:	f7ff fd8e 	bl	8024d10 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 80251f4:	e760      	b.n	80250b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80251f6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80251f8:	ea4f 422a 	mov.w	r2, sl, asr #16
 80251fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8025200:	1429      	asrs	r1, r5, #16
 8025202:	fb03 2101 	mla	r1, r3, r1, r2
 8025206:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025208:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802520a:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 802520e:	440a      	add	r2, r1
 8025210:	5c61      	ldrb	r1, [r4, r1]
 8025212:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025216:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 802521a:	f1bc 0f00 	cmp.w	ip, #0
 802521e:	f000 808c 	beq.w	802533a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8025222:	7857      	ldrb	r7, [r2, #1]
 8025224:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8025228:	9413      	str	r4, [sp, #76]	@ 0x4c
 802522a:	b140      	cbz	r0, 802523e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802522c:	18d7      	adds	r7, r2, r3
 802522e:	5cd3      	ldrb	r3, [r2, r3]
 8025230:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8025234:	9310      	str	r3, [sp, #64]	@ 0x40
 8025236:	787b      	ldrb	r3, [r7, #1]
 8025238:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802523c:	9314      	str	r3, [sp, #80]	@ 0x50
 802523e:	fb1c f200 	smulbb	r2, ip, r0
 8025242:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025244:	10d2      	asrs	r2, r2, #3
 8025246:	041f      	lsls	r7, r3, #16
 8025248:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 802524c:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8025250:	431f      	orrs	r7, r3
 8025252:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8025256:	9317      	str	r3, [sp, #92]	@ 0x5c
 8025258:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802525a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802525c:	041b      	lsls	r3, r3, #16
 802525e:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 8025262:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8025266:	ea43 030b 	orr.w	r3, r3, fp
 802526a:	4353      	muls	r3, r2
 802526c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802526e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8025272:	fb04 3707 	mla	r7, r4, r7, r3
 8025276:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802527a:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 802527e:	ea43 0b01 	orr.w	fp, r3, r1
 8025282:	f1c0 0110 	rsb	r1, r0, #16
 8025286:	eba1 0c0c 	sub.w	ip, r1, ip
 802528a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802528e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025290:	fb0c 770b 	mla	r7, ip, fp, r7
 8025294:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8025298:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 802529c:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80252a0:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80252a4:	ea4c 0c0b 	orr.w	ip, ip, fp
 80252a8:	fb02 770c 	mla	r7, r2, ip, r7
 80252ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80252ae:	0d79      	lsrs	r1, r7, #21
 80252b0:	8812      	ldrh	r2, [r2, #0]
 80252b2:	097f      	lsrs	r7, r7, #5
 80252b4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80252b8:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80252bc:	430f      	orrs	r7, r1
 80252be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80252c0:	1211      	asrs	r1, r2, #8
 80252c2:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80252c6:	b2bb      	uxth	r3, r7
 80252c8:	fb11 f104 	smulbb	r1, r1, r4
 80252cc:	10d7      	asrs	r7, r2, #3
 80252ce:	00d2      	lsls	r2, r2, #3
 80252d0:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80252d4:	b2d2      	uxtb	r2, r2
 80252d6:	1218      	asrs	r0, r3, #8
 80252d8:	fb17 f704 	smulbb	r7, r7, r4
 80252dc:	fb12 f204 	smulbb	r2, r2, r4
 80252e0:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80252e4:	fb00 1009 	mla	r0, r0, r9, r1
 80252e8:	10d9      	asrs	r1, r3, #3
 80252ea:	00db      	lsls	r3, r3, #3
 80252ec:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80252f0:	b2db      	uxtb	r3, r3
 80252f2:	fb01 7109 	mla	r1, r1, r9, r7
 80252f6:	fb03 2309 	mla	r3, r3, r9, r2
 80252fa:	b280      	uxth	r0, r0
 80252fc:	b29b      	uxth	r3, r3
 80252fe:	b289      	uxth	r1, r1
 8025300:	1c42      	adds	r2, r0, #1
 8025302:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025306:	1c4f      	adds	r7, r1, #1
 8025308:	1c5a      	adds	r2, r3, #1
 802530a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802530e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8025312:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8025316:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802531a:	0949      	lsrs	r1, r1, #5
 802531c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802531e:	4310      	orrs	r0, r2
 8025320:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025324:	4308      	orrs	r0, r1
 8025326:	f823 0b02 	strh.w	r0, [r3], #2
 802532a:	930e      	str	r3, [sp, #56]	@ 0x38
 802532c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802532e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8025332:	449a      	add	sl, r3
 8025334:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025336:	441d      	add	r5, r3
 8025338:	e6ed      	b.n	8025116 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 802533a:	2800      	cmp	r0, #0
 802533c:	f43f af7f 	beq.w	802523e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025340:	5cd3      	ldrb	r3, [r2, r3]
 8025342:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8025346:	9310      	str	r3, [sp, #64]	@ 0x40
 8025348:	e779      	b.n	802523e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802534a:	b019      	add	sp, #100	@ 0x64
 802534c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025350 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8025350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025354:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8025358:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
 802535c:	fb08 470e 	mla	r7, r8, lr, r4
 8025360:	f1b8 0f00 	cmp.w	r8, #0
 8025364:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 8025368:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 802536c:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8025370:	eb02 0907 	add.w	r9, r2, r7
 8025374:	8808      	ldrh	r0, [r1, #0]
 8025376:	db67      	blt.n	8025448 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8025378:	45c2      	cmp	sl, r8
 802537a:	dd65      	ble.n	8025448 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 802537c:	2c00      	cmp	r4, #0
 802537e:	db61      	blt.n	8025444 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8025380:	45a6      	cmp	lr, r4
 8025382:	dd5f      	ble.n	8025444 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8025384:	5dd2      	ldrb	r2, [r2, r7]
 8025386:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 802538a:	1c62      	adds	r2, r4, #1
 802538c:	d45f      	bmi.n	802544e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802538e:	4596      	cmp	lr, r2
 8025390:	dd5d      	ble.n	802544e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8025392:	2d00      	cmp	r5, #0
 8025394:	d05b      	beq.n	802544e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8025396:	f899 2001 	ldrb.w	r2, [r9, #1]
 802539a:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 802539e:	f118 0801 	adds.w	r8, r8, #1
 80253a2:	d458      	bmi.n	8025456 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 80253a4:	45c2      	cmp	sl, r8
 80253a6:	dd56      	ble.n	8025456 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 80253a8:	2e00      	cmp	r6, #0
 80253aa:	d054      	beq.n	8025456 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 80253ac:	2c00      	cmp	r4, #0
 80253ae:	db50      	blt.n	8025452 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 80253b0:	45a6      	cmp	lr, r4
 80253b2:	dd4e      	ble.n	8025452 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 80253b4:	f819 200e 	ldrb.w	r2, [r9, lr]
 80253b8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80253bc:	3401      	adds	r4, #1
 80253be:	d407      	bmi.n	80253d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80253c0:	45a6      	cmp	lr, r4
 80253c2:	dd05      	ble.n	80253d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80253c4:	b125      	cbz	r5, 80253d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80253c6:	44ce      	add	lr, r9
 80253c8:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80253cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80253d0:	fb15 f406 	smulbb	r4, r5, r6
 80253d4:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80253d8:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80253dc:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 80253e0:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80253e4:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 80253e8:	ea43 0c0c 	orr.w	ip, r3, ip
 80253ec:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80253f0:	f1c6 0310 	rsb	r3, r6, #16
 80253f4:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80253f8:	1b5b      	subs	r3, r3, r5
 80253fa:	ea4e 0707 	orr.w	r7, lr, r7
 80253fe:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8025402:	437d      	muls	r5, r7
 8025404:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8025408:	fb03 5c0c 	mla	ip, r3, ip, r5
 802540c:	0403      	lsls	r3, r0, #16
 802540e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8025412:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8025416:	4318      	orrs	r0, r3
 8025418:	fb04 c000 	mla	r0, r4, r0, ip
 802541c:	0413      	lsls	r3, r2, #16
 802541e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8025422:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025426:	4313      	orrs	r3, r2
 8025428:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 802542c:	fb06 0003 	mla	r0, r6, r3, r0
 8025430:	0d43      	lsrs	r3, r0, #21
 8025432:	0940      	lsrs	r0, r0, #5
 8025434:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025438:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802543c:	4318      	orrs	r0, r3
 802543e:	8008      	strh	r0, [r1, #0]
 8025440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025444:	4684      	mov	ip, r0
 8025446:	e7a0      	b.n	802538a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 8025448:	4607      	mov	r7, r0
 802544a:	4684      	mov	ip, r0
 802544c:	e7a7      	b.n	802539e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 802544e:	4607      	mov	r7, r0
 8025450:	e7a5      	b.n	802539e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8025452:	4602      	mov	r2, r0
 8025454:	e7b2      	b.n	80253bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 8025456:	4602      	mov	r2, r0
 8025458:	e7ba      	b.n	80253d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0802545a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802545a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802545e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025462:	b093      	sub	sp, #76	@ 0x4c
 8025464:	920f      	str	r2, [sp, #60]	@ 0x3c
 8025466:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8025468:	9010      	str	r0, [sp, #64]	@ 0x40
 802546a:	6850      	ldr	r0, [r2, #4]
 802546c:	9108      	str	r1, [sp, #32]
 802546e:	9306      	str	r3, [sp, #24]
 8025470:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8025474:	fb00 1303 	mla	r3, r0, r3, r1
 8025478:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 802547c:	6812      	ldr	r2, [r2, #0]
 802547e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8025482:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025484:	681b      	ldr	r3, [r3, #0]
 8025486:	9307      	str	r3, [sp, #28]
 8025488:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802548a:	685f      	ldr	r7, [r3, #4]
 802548c:	3704      	adds	r7, #4
 802548e:	9b08      	ldr	r3, [sp, #32]
 8025490:	2b00      	cmp	r3, #0
 8025492:	dc03      	bgt.n	802549c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8025494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025496:	2b00      	cmp	r3, #0
 8025498:	f340 81b2 	ble.w	8025800 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 802549c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802549e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80254a2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80254a6:	1e48      	subs	r0, r1, #1
 80254a8:	f102 3cff 	add.w	ip, r2, #4294967295
 80254ac:	9b06      	ldr	r3, [sp, #24]
 80254ae:	2b00      	cmp	r3, #0
 80254b0:	f340 80a9 	ble.w	8025606 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80254b4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80254b8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80254bc:	d406      	bmi.n	80254cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80254be:	4586      	cmp	lr, r0
 80254c0:	da04      	bge.n	80254cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80254c2:	2b00      	cmp	r3, #0
 80254c4:	db02      	blt.n	80254cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80254c6:	4563      	cmp	r3, ip
 80254c8:	f2c0 809e 	blt.w	8025608 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80254cc:	f11e 0e01 	adds.w	lr, lr, #1
 80254d0:	f100 808f 	bmi.w	80255f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80254d4:	4571      	cmp	r1, lr
 80254d6:	f2c0 808c 	blt.w	80255f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80254da:	3301      	adds	r3, #1
 80254dc:	f100 8089 	bmi.w	80255f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80254e0:	429a      	cmp	r2, r3
 80254e2:	f2c0 8086 	blt.w	80255f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80254e6:	46c8      	mov	r8, r9
 80254e8:	f8dd b018 	ldr.w	fp, [sp, #24]
 80254ec:	f1bb 0f00 	cmp.w	fp, #0
 80254f0:	f340 80a6 	ble.w	8025640 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80254f4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80254f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80254f8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80254fc:	1422      	asrs	r2, r4, #16
 80254fe:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8025502:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8025506:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802550a:	689b      	ldr	r3, [r3, #8]
 802550c:	f100 80e3 	bmi.w	80256d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8025510:	f103 3aff 	add.w	sl, r3, #4294967295
 8025514:	4552      	cmp	r2, sl
 8025516:	f280 80de 	bge.w	80256d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802551a:	f1bc 0f00 	cmp.w	ip, #0
 802551e:	f2c0 80da 	blt.w	80256d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8025522:	f10e 3aff 	add.w	sl, lr, #4294967295
 8025526:	45d4      	cmp	ip, sl
 8025528:	f280 80d5 	bge.w	80256d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802552c:	b21b      	sxth	r3, r3
 802552e:	fb0c 2203 	mla	r2, ip, r3, r2
 8025532:	9d07      	ldr	r5, [sp, #28]
 8025534:	eb05 0a02 	add.w	sl, r5, r2
 8025538:	5caa      	ldrb	r2, [r5, r2]
 802553a:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 802553e:	2800      	cmp	r0, #0
 8025540:	f000 80c0 	beq.w	80256c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8025544:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8025548:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 802554c:	920b      	str	r2, [sp, #44]	@ 0x2c
 802554e:	b151      	cbz	r1, 8025566 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8025550:	eb0a 0203 	add.w	r2, sl, r3
 8025554:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8025558:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802555c:	9309      	str	r3, [sp, #36]	@ 0x24
 802555e:	7853      	ldrb	r3, [r2, #1]
 8025560:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025564:	930c      	str	r3, [sp, #48]	@ 0x30
 8025566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025568:	fb10 f201 	smulbb	r2, r0, r1
 802556c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8025570:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8025574:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8025578:	ea4c 0c03 	orr.w	ip, ip, r3
 802557c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802557e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8025580:	041b      	lsls	r3, r3, #16
 8025582:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8025586:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 802558a:	10d2      	asrs	r2, r2, #3
 802558c:	432b      	orrs	r3, r5
 802558e:	4353      	muls	r3, r2
 8025590:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8025594:	fb0a 330c 	mla	r3, sl, ip, r3
 8025598:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802559c:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80255a0:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80255a4:	ea4c 0e0e 	orr.w	lr, ip, lr
 80255a8:	f1c1 0c10 	rsb	ip, r1, #16
 80255ac:	ebac 0c00 	sub.w	ip, ip, r0
 80255b0:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80255b4:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80255b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80255ba:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80255be:	0418      	lsls	r0, r3, #16
 80255c0:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80255c4:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80255c8:	4318      	orrs	r0, r3
 80255ca:	fb02 c200 	mla	r2, r2, r0, ip
 80255ce:	0d53      	lsrs	r3, r2, #21
 80255d0:	0952      	lsrs	r2, r2, #5
 80255d2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80255d6:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80255da:	431a      	orrs	r2, r3
 80255dc:	f8a8 2000 	strh.w	r2, [r8]
 80255e0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80255e2:	f108 0802 	add.w	r8, r8, #2
 80255e6:	441c      	add	r4, r3
 80255e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80255ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80255ee:	441e      	add	r6, r3
 80255f0:	e77c      	b.n	80254ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80255f2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80255f4:	f109 0902 	add.w	r9, r9, #2
 80255f8:	441c      	add	r4, r3
 80255fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80255fc:	441e      	add	r6, r3
 80255fe:	9b06      	ldr	r3, [sp, #24]
 8025600:	3b01      	subs	r3, #1
 8025602:	9306      	str	r3, [sp, #24]
 8025604:	e752      	b.n	80254ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8025606:	d020      	beq.n	802564a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8025608:	9b06      	ldr	r3, [sp, #24]
 802560a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802560c:	3b01      	subs	r3, #1
 802560e:	fb00 4003 	mla	r0, r0, r3, r4
 8025612:	1400      	asrs	r0, r0, #16
 8025614:	f53f af67 	bmi.w	80254e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025618:	3901      	subs	r1, #1
 802561a:	4288      	cmp	r0, r1
 802561c:	f6bf af63 	bge.w	80254e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025620:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8025622:	fb01 6303 	mla	r3, r1, r3, r6
 8025626:	141b      	asrs	r3, r3, #16
 8025628:	f53f af5d 	bmi.w	80254e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802562c:	3a01      	subs	r2, #1
 802562e:	4293      	cmp	r3, r2
 8025630:	f6bf af59 	bge.w	80254e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025634:	46ca      	mov	sl, r9
 8025636:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802563a:	f1b8 0f00 	cmp.w	r8, #0
 802563e:	dc67      	bgt.n	8025710 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8025640:	9b06      	ldr	r3, [sp, #24]
 8025642:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8025646:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802564a:	9b08      	ldr	r3, [sp, #32]
 802564c:	2b00      	cmp	r3, #0
 802564e:	f340 80d7 	ble.w	8025800 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8025652:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025656:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802565a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802565e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025662:	eeb0 6a62 	vmov.f32	s12, s5
 8025666:	ee31 1a05 	vadd.f32	s2, s2, s10
 802566a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802566e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025672:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8025676:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802567a:	ee16 4a10 	vmov	r4, s12
 802567e:	eeb0 6a43 	vmov.f32	s12, s6
 8025682:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025686:	ee12 2a90 	vmov	r2, s5
 802568a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802568e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025690:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8025694:	fb92 f3f3 	sdiv	r3, r2, r3
 8025698:	ee13 2a10 	vmov	r2, s6
 802569c:	931f      	str	r3, [sp, #124]	@ 0x7c
 802569e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80256a0:	ee16 6a10 	vmov	r6, s12
 80256a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80256a8:	9320      	str	r3, [sp, #128]	@ 0x80
 80256aa:	9b08      	ldr	r3, [sp, #32]
 80256ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80256ae:	3b01      	subs	r3, #1
 80256b0:	9308      	str	r3, [sp, #32]
 80256b2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80256b4:	bf08      	it	eq
 80256b6:	4613      	moveq	r3, r2
 80256b8:	eeb0 3a67 	vmov.f32	s6, s15
 80256bc:	9306      	str	r3, [sp, #24]
 80256be:	eef0 2a47 	vmov.f32	s5, s14
 80256c2:	e6e4      	b.n	802548e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80256c4:	2900      	cmp	r1, #0
 80256c6:	f43f af4e 	beq.w	8025566 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80256ca:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80256ce:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80256d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80256d4:	e747      	b.n	8025566 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80256d6:	f112 0a01 	adds.w	sl, r2, #1
 80256da:	d481      	bmi.n	80255e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80256dc:	4553      	cmp	r3, sl
 80256de:	f6ff af7f 	blt.w	80255e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80256e2:	f11c 0a01 	adds.w	sl, ip, #1
 80256e6:	f53f af7b 	bmi.w	80255e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80256ea:	45d6      	cmp	lr, sl
 80256ec:	f6ff af78 	blt.w	80255e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80256f0:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80256f4:	b21b      	sxth	r3, r3
 80256f6:	fa0f f28e 	sxth.w	r2, lr
 80256fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80256fe:	9201      	str	r2, [sp, #4]
 8025700:	9300      	str	r3, [sp, #0]
 8025702:	9a07      	ldr	r2, [sp, #28]
 8025704:	463b      	mov	r3, r7
 8025706:	4641      	mov	r1, r8
 8025708:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802570a:	f7ff fe21 	bl	8025350 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 802570e:	e767      	b.n	80255e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8025710:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025712:	1422      	asrs	r2, r4, #16
 8025714:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8025718:	1431      	asrs	r1, r6, #16
 802571a:	fb03 2101 	mla	r1, r3, r1, r2
 802571e:	9d07      	ldr	r5, [sp, #28]
 8025720:	9a07      	ldr	r2, [sp, #28]
 8025722:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8025726:	440a      	add	r2, r1
 8025728:	5c69      	ldrb	r1, [r5, r1]
 802572a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802572e:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8025732:	f1be 0f00 	cmp.w	lr, #0
 8025736:	d05c      	beq.n	80257f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8025738:	f892 c001 	ldrb.w	ip, [r2, #1]
 802573c:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8025740:	950d      	str	r5, [sp, #52]	@ 0x34
 8025742:	b150      	cbz	r0, 802575a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8025744:	eb02 0c03 	add.w	ip, r2, r3
 8025748:	5cd3      	ldrb	r3, [r2, r3]
 802574a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802574e:	930a      	str	r3, [sp, #40]	@ 0x28
 8025750:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8025754:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025758:	930e      	str	r3, [sp, #56]	@ 0x38
 802575a:	fb1e f200 	smulbb	r2, lr, r0
 802575e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025760:	10d2      	asrs	r2, r2, #3
 8025762:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8025766:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 802576a:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802576e:	ea4c 0c03 	orr.w	ip, ip, r3
 8025772:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8025776:	9311      	str	r3, [sp, #68]	@ 0x44
 8025778:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802577a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802577c:	041b      	lsls	r3, r3, #16
 802577e:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 8025782:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8025786:	ea43 030b 	orr.w	r3, r3, fp
 802578a:	4353      	muls	r3, r2
 802578c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802578e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8025792:	fb05 3c0c 	mla	ip, r5, ip, r3
 8025796:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802579a:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 802579e:	ea43 0b01 	orr.w	fp, r3, r1
 80257a2:	f1c0 0110 	rsb	r1, r0, #16
 80257a6:	eba1 0e0e 	sub.w	lr, r1, lr
 80257aa:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80257ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80257b0:	fb0e cc0b 	mla	ip, lr, fp, ip
 80257b4:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80257b8:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 80257bc:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80257c0:	ea4b 0e0e 	orr.w	lr, fp, lr
 80257c4:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80257c8:	fb02 cc0e 	mla	ip, r2, lr, ip
 80257cc:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80257d0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80257d4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80257d8:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80257dc:	ea43 0c0c 	orr.w	ip, r3, ip
 80257e0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80257e2:	f82a cb02 	strh.w	ip, [sl], #2
 80257e6:	441c      	add	r4, r3
 80257e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80257ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80257ee:	441e      	add	r6, r3
 80257f0:	e723      	b.n	802563a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80257f2:	2800      	cmp	r0, #0
 80257f4:	d0b1      	beq.n	802575a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80257f6:	5cd3      	ldrb	r3, [r2, r3]
 80257f8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80257fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80257fe:	e7ac      	b.n	802575a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8025800:	b013      	add	sp, #76	@ 0x4c
 8025802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025806 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8025806:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802580a:	880d      	ldrh	r5, [r1, #0]
 802580c:	b087      	sub	sp, #28
 802580e:	10ef      	asrs	r7, r5, #3
 8025810:	ea4f 2a25 	mov.w	sl, r5, asr #8
 8025814:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8025818:	00ed      	lsls	r5, r5, #3
 802581a:	9701      	str	r7, [sp, #4]
 802581c:	b2ed      	uxtb	r5, r5
 802581e:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	@ 0x40
 8025822:	9502      	str	r5, [sp, #8]
 8025824:	9d01      	ldr	r5, [sp, #4]
 8025826:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 802582a:	fb06 0709 	mla	r7, r6, r9, r0
 802582e:	9103      	str	r1, [sp, #12]
 8025830:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 8025834:	022d      	lsls	r5, r5, #8
 8025836:	9902      	ldr	r1, [sp, #8]
 8025838:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 802583c:	430d      	orrs	r5, r1
 802583e:	2e00      	cmp	r6, #0
 8025840:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8025844:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8025848:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 802584c:	f89d 8058 	ldrb.w	r8, [sp, #88]	@ 0x58
 8025850:	eb02 0c07 	add.w	ip, r2, r7
 8025854:	9505      	str	r5, [sp, #20]
 8025856:	f2c0 80b6 	blt.w	80259c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 802585a:	45b3      	cmp	fp, r6
 802585c:	f340 80b3 	ble.w	80259c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8025860:	2800      	cmp	r0, #0
 8025862:	f2c0 80ae 	blt.w	80259c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8025866:	4581      	cmp	r9, r0
 8025868:	f340 80ab 	ble.w	80259c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 802586c:	5dd7      	ldrb	r7, [r2, r7]
 802586e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025872:	441f      	add	r7, r3
 8025874:	1c42      	adds	r2, r0, #1
 8025876:	f100 80a9 	bmi.w	80259cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802587a:	4591      	cmp	r9, r2
 802587c:	f340 80a6 	ble.w	80259cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8025880:	2c00      	cmp	r4, #0
 8025882:	f000 80a3 	beq.w	80259cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8025886:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802588a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802588e:	441d      	add	r5, r3
 8025890:	3601      	adds	r6, #1
 8025892:	f100 809f 	bmi.w	80259d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8025896:	45b3      	cmp	fp, r6
 8025898:	f340 809c 	ble.w	80259d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 802589c:	f1be 0f00 	cmp.w	lr, #0
 80258a0:	f000 8098 	beq.w	80259d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80258a4:	2800      	cmp	r0, #0
 80258a6:	f2c0 8093 	blt.w	80259d0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 80258aa:	4581      	cmp	r9, r0
 80258ac:	f340 8090 	ble.w	80259d0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 80258b0:	f81c 6009 	ldrb.w	r6, [ip, r9]
 80258b4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80258b8:	441e      	add	r6, r3
 80258ba:	3001      	adds	r0, #1
 80258bc:	f100 808d 	bmi.w	80259da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80258c0:	4581      	cmp	r9, r0
 80258c2:	f340 808a 	ble.w	80259da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80258c6:	2c00      	cmp	r4, #0
 80258c8:	f000 8087 	beq.w	80259da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80258cc:	44e1      	add	r9, ip
 80258ce:	f899 2001 	ldrb.w	r2, [r9, #1]
 80258d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80258d6:	4413      	add	r3, r2
 80258d8:	b2a4      	uxth	r4, r4
 80258da:	fa1f fe8e 	uxth.w	lr, lr
 80258de:	fb04 fb0e 	mul.w	fp, r4, lr
 80258e2:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 80258e6:	fa1f f08e 	uxth.w	r0, lr
 80258ea:	fa1f fe88 	uxth.w	lr, r8
 80258ee:	ea6f 0808 	mvn.w	r8, r8
 80258f2:	0124      	lsls	r4, r4, #4
 80258f4:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 80258f8:	eba4 040b 	sub.w	r4, r4, fp
 80258fc:	b2a2      	uxth	r2, r4
 80258fe:	78ac      	ldrb	r4, [r5, #2]
 8025900:	f897 c002 	ldrb.w	ip, [r7, #2]
 8025904:	4354      	muls	r4, r2
 8025906:	eba9 0900 	sub.w	r9, r9, r0
 802590a:	fa1f f989 	uxth.w	r9, r9
 802590e:	fb09 440c 	mla	r4, r9, ip, r4
 8025912:	f896 c002 	ldrb.w	ip, [r6, #2]
 8025916:	fa5f f888 	uxtb.w	r8, r8
 802591a:	fb00 440c 	mla	r4, r0, ip, r4
 802591e:	f893 c002 	ldrb.w	ip, [r3, #2]
 8025922:	fb1a fa08 	smulbb	sl, sl, r8
 8025926:	fb0b 4c0c 	mla	ip, fp, ip, r4
 802592a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802592e:	fb0c ac0e 	mla	ip, ip, lr, sl
 8025932:	f895 a001 	ldrb.w	sl, [r5, #1]
 8025936:	782d      	ldrb	r5, [r5, #0]
 8025938:	fb02 fa0a 	mul.w	sl, r2, sl
 802593c:	436a      	muls	r2, r5
 802593e:	787c      	ldrb	r4, [r7, #1]
 8025940:	783f      	ldrb	r7, [r7, #0]
 8025942:	fb09 aa04 	mla	sl, r9, r4, sl
 8025946:	fb09 2207 	mla	r2, r9, r7, r2
 802594a:	7874      	ldrb	r4, [r6, #1]
 802594c:	7835      	ldrb	r5, [r6, #0]
 802594e:	fb00 aa04 	mla	sl, r0, r4, sl
 8025952:	fb00 2005 	mla	r0, r0, r5, r2
 8025956:	785c      	ldrb	r4, [r3, #1]
 8025958:	781b      	ldrb	r3, [r3, #0]
 802595a:	fb0b a404 	mla	r4, fp, r4, sl
 802595e:	9901      	ldr	r1, [sp, #4]
 8025960:	fb0b 0b03 	mla	fp, fp, r3, r0
 8025964:	9b02      	ldr	r3, [sp, #8]
 8025966:	fb11 fa08 	smulbb	sl, r1, r8
 802596a:	fb13 f808 	smulbb	r8, r3, r8
 802596e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8025972:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8025976:	fb04 a40e 	mla	r4, r4, lr, sl
 802597a:	fb0b 8e0e 	mla	lr, fp, lr, r8
 802597e:	fa1f fc8c 	uxth.w	ip, ip
 8025982:	f10c 0301 	add.w	r3, ip, #1
 8025986:	fa1f fe8e 	uxth.w	lr, lr
 802598a:	b2a4      	uxth	r4, r4
 802598c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8025990:	f40c 4378 	and.w	r3, ip, #63488	@ 0xf800
 8025994:	f104 0a01 	add.w	sl, r4, #1
 8025998:	f10e 0c01 	add.w	ip, lr, #1
 802599c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80259a0:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80259a4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80259a8:	0964      	lsrs	r4, r4, #5
 80259aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80259ae:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80259b2:	9b03      	ldr	r3, [sp, #12]
 80259b4:	ea4c 0c04 	orr.w	ip, ip, r4
 80259b8:	f8a3 c000 	strh.w	ip, [r3]
 80259bc:	b007      	add	sp, #28
 80259be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80259c2:	af05      	add	r7, sp, #20
 80259c4:	e756      	b.n	8025874 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 80259c6:	ad05      	add	r5, sp, #20
 80259c8:	462f      	mov	r7, r5
 80259ca:	e761      	b.n	8025890 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 80259cc:	ad05      	add	r5, sp, #20
 80259ce:	e75f      	b.n	8025890 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 80259d0:	ae05      	add	r6, sp, #20
 80259d2:	e772      	b.n	80258ba <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80259d4:	ab05      	add	r3, sp, #20
 80259d6:	461e      	mov	r6, r3
 80259d8:	e77e      	b.n	80258d8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 80259da:	ab05      	add	r3, sp, #20
 80259dc:	e77c      	b.n	80258d8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

080259de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80259de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259e2:	b095      	sub	sp, #84	@ 0x54
 80259e4:	9212      	str	r2, [sp, #72]	@ 0x48
 80259e6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80259e8:	9013      	str	r0, [sp, #76]	@ 0x4c
 80259ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80259ec:	6850      	ldr	r0, [r2, #4]
 80259ee:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 80259f2:	910e      	str	r1, [sp, #56]	@ 0x38
 80259f4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80259f6:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 80259fa:	fb00 1303 	mla	r3, r0, r3, r1
 80259fe:	6812      	ldr	r2, [r2, #0]
 8025a00:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025a04:	930a      	str	r3, [sp, #40]	@ 0x28
 8025a06:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025a08:	681b      	ldr	r3, [r3, #0]
 8025a0a:	930d      	str	r3, [sp, #52]	@ 0x34
 8025a0c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025a0e:	685c      	ldr	r4, [r3, #4]
 8025a10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025a12:	3404      	adds	r4, #4
 8025a14:	43db      	mvns	r3, r3
 8025a16:	b2db      	uxtb	r3, r3
 8025a18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025a1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025a1c:	2b00      	cmp	r3, #0
 8025a1e:	dc03      	bgt.n	8025a28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025a20:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8025a22:	2b00      	cmp	r3, #0
 8025a24:	f340 8255 	ble.w	8025ed2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8025a28:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025a2a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025a2e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025a32:	1e48      	subs	r0, r1, #1
 8025a34:	1e55      	subs	r5, r2, #1
 8025a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025a38:	2b00      	cmp	r3, #0
 8025a3a:	f340 80f9 	ble.w	8025c30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8025a3e:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8025a40:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025a42:	1436      	asrs	r6, r6, #16
 8025a44:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025a48:	d406      	bmi.n	8025a58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025a4a:	4286      	cmp	r6, r0
 8025a4c:	da04      	bge.n	8025a58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025a4e:	2b00      	cmp	r3, #0
 8025a50:	db02      	blt.n	8025a58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025a52:	42ab      	cmp	r3, r5
 8025a54:	f2c0 80ed 	blt.w	8025c32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8025a58:	3601      	adds	r6, #1
 8025a5a:	f100 80da 	bmi.w	8025c12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8025a5e:	42b1      	cmp	r1, r6
 8025a60:	f2c0 80d7 	blt.w	8025c12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8025a64:	3301      	adds	r3, #1
 8025a66:	f100 80d4 	bmi.w	8025c12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8025a6a:	429a      	cmp	r2, r3
 8025a6c:	f2c0 80d1 	blt.w	8025c12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8025a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025a72:	9311      	str	r3, [sp, #68]	@ 0x44
 8025a74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025a76:	930c      	str	r3, [sp, #48]	@ 0x30
 8025a78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025a7a:	2b00      	cmp	r3, #0
 8025a7c:	f340 80fa 	ble.w	8025c74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8025a80:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8025a82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025a84:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8025a86:	68c6      	ldr	r6, [r0, #12]
 8025a88:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8025a8a:	141d      	asrs	r5, r3, #16
 8025a8c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025a90:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025a92:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8025a94:	1400      	asrs	r0, r0, #16
 8025a96:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8025a9a:	6892      	ldr	r2, [r2, #8]
 8025a9c:	f100 813e 	bmi.w	8025d1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8025aa0:	1e57      	subs	r7, r2, #1
 8025aa2:	42b8      	cmp	r0, r7
 8025aa4:	f280 813a 	bge.w	8025d1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8025aa8:	2d00      	cmp	r5, #0
 8025aaa:	f2c0 8137 	blt.w	8025d1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8025aae:	1e77      	subs	r7, r6, #1
 8025ab0:	42bd      	cmp	r5, r7
 8025ab2:	f280 8133 	bge.w	8025d1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8025ab6:	b212      	sxth	r2, r2
 8025ab8:	fb05 0002 	mla	r0, r5, r2, r0
 8025abc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8025abe:	f815 a000 	ldrb.w	sl, [r5, r0]
 8025ac2:	182e      	adds	r6, r5, r0
 8025ac4:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8025ac8:	eb04 050a 	add.w	r5, r4, sl
 8025acc:	2b00      	cmp	r3, #0
 8025ace:	f000 8117 	beq.w	8025d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025ad2:	f896 c001 	ldrb.w	ip, [r6, #1]
 8025ad6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8025ada:	44a4      	add	ip, r4
 8025adc:	2900      	cmp	r1, #0
 8025ade:	f000 8117 	beq.w	8025d10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8025ae2:	18b0      	adds	r0, r6, r2
 8025ae4:	7840      	ldrb	r0, [r0, #1]
 8025ae6:	5cb2      	ldrb	r2, [r6, r2]
 8025ae8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025aec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025af0:	4422      	add	r2, r4
 8025af2:	4420      	add	r0, r4
 8025af4:	b29b      	uxth	r3, r3
 8025af6:	b289      	uxth	r1, r1
 8025af8:	fb03 f901 	mul.w	r9, r3, r1
 8025afc:	011b      	lsls	r3, r3, #4
 8025afe:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8025b02:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 8025b06:	eba3 0309 	sub.w	r3, r3, r9
 8025b0a:	b29b      	uxth	r3, r3
 8025b0c:	435f      	muls	r7, r3
 8025b0e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025b12:	b289      	uxth	r1, r1
 8025b14:	f895 b002 	ldrb.w	fp, [r5, #2]
 8025b18:	eba8 0801 	sub.w	r8, r8, r1
 8025b1c:	fa1f f888 	uxth.w	r8, r8
 8025b20:	fb08 770b 	mla	r7, r8, fp, r7
 8025b24:	f892 b002 	ldrb.w	fp, [r2, #2]
 8025b28:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8025b2a:	fb01 770b 	mla	r7, r1, fp, r7
 8025b2e:	f8b6 e000 	ldrh.w	lr, [r6]
 8025b32:	f890 b002 	ldrb.w	fp, [r0, #2]
 8025b36:	9310      	str	r3, [sp, #64]	@ 0x40
 8025b38:	fb09 770b 	mla	r7, r9, fp, r7
 8025b3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025b3e:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8025b42:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8025b46:	fb1b fb03 	smulbb	fp, fp, r3
 8025b4a:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 8025b4e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025b52:	fb07 b706 	mla	r7, r7, r6, fp
 8025b56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025b58:	f895 b001 	ldrb.w	fp, [r5, #1]
 8025b5c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8025b60:	f89c c000 	ldrb.w	ip, [ip]
 8025b64:	435d      	muls	r5, r3
 8025b66:	fb08 550b 	mla	r5, r8, fp, r5
 8025b6a:	f892 b001 	ldrb.w	fp, [r2, #1]
 8025b6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025b70:	fb01 550b 	mla	r5, r1, fp, r5
 8025b74:	f890 b001 	ldrb.w	fp, [r0, #1]
 8025b78:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8025b7c:	fb09 550b 	mla	r5, r9, fp, r5
 8025b80:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8025b84:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8025b88:	fb1b fb03 	smulbb	fp, fp, r3
 8025b8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025b8e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025b92:	fb03 f30c 	mul.w	r3, r3, ip
 8025b96:	fb08 330a 	mla	r3, r8, sl, r3
 8025b9a:	f892 c000 	ldrb.w	ip, [r2]
 8025b9e:	fa5f fe8e 	uxtb.w	lr, lr
 8025ba2:	fb01 330c 	mla	r3, r1, ip, r3
 8025ba6:	f890 c000 	ldrb.w	ip, [r0]
 8025baa:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8025bae:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025bb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025bb4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8025bb8:	fb1e fe03 	smulbb	lr, lr, r3
 8025bbc:	fb05 b506 	mla	r5, r5, r6, fp
 8025bc0:	fb0c e606 	mla	r6, ip, r6, lr
 8025bc4:	b2bf      	uxth	r7, r7
 8025bc6:	1c7b      	adds	r3, r7, #1
 8025bc8:	b2ad      	uxth	r5, r5
 8025bca:	b2b6      	uxth	r6, r6
 8025bcc:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8025bd0:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 8025bd4:	f105 0b01 	add.w	fp, r5, #1
 8025bd8:	1c77      	adds	r7, r6, #1
 8025bda:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8025bde:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8025be2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025be6:	096d      	lsrs	r5, r5, #5
 8025be8:	431f      	orrs	r7, r3
 8025bea:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8025bee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025bf0:	433d      	orrs	r5, r7
 8025bf2:	801d      	strh	r5, [r3, #0]
 8025bf4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025bf6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8025bf8:	3302      	adds	r3, #2
 8025bfa:	930c      	str	r3, [sp, #48]	@ 0x30
 8025bfc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025bfe:	4413      	add	r3, r2
 8025c00:	931f      	str	r3, [sp, #124]	@ 0x7c
 8025c02:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8025c04:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025c06:	4413      	add	r3, r2
 8025c08:	9320      	str	r3, [sp, #128]	@ 0x80
 8025c0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025c0c:	3b01      	subs	r3, #1
 8025c0e:	9311      	str	r3, [sp, #68]	@ 0x44
 8025c10:	e732      	b.n	8025a78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8025c12:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025c14:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8025c16:	4433      	add	r3, r6
 8025c18:	931f      	str	r3, [sp, #124]	@ 0x7c
 8025c1a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8025c1c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025c1e:	4433      	add	r3, r6
 8025c20:	9320      	str	r3, [sp, #128]	@ 0x80
 8025c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025c24:	3b01      	subs	r3, #1
 8025c26:	9309      	str	r3, [sp, #36]	@ 0x24
 8025c28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025c2a:	3302      	adds	r3, #2
 8025c2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8025c2e:	e702      	b.n	8025a36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8025c30:	d027      	beq.n	8025c82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8025c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025c34:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8025c36:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8025c38:	3b01      	subs	r3, #1
 8025c3a:	fb00 5003 	mla	r0, r0, r3, r5
 8025c3e:	1400      	asrs	r0, r0, #16
 8025c40:	f53f af16 	bmi.w	8025a70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025c44:	3901      	subs	r1, #1
 8025c46:	4288      	cmp	r0, r1
 8025c48:	f6bf af12 	bge.w	8025a70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025c4c:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8025c4e:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8025c50:	fb01 0303 	mla	r3, r1, r3, r0
 8025c54:	141b      	asrs	r3, r3, #16
 8025c56:	f53f af0b 	bmi.w	8025a70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025c5a:	3a01      	subs	r2, #1
 8025c5c:	4293      	cmp	r3, r2
 8025c5e:	f6bf af07 	bge.w	8025a70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025c64:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 8025c68:	9311      	str	r3, [sp, #68]	@ 0x44
 8025c6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025c6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8025c6e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025c70:	2b00      	cmp	r3, #0
 8025c72:	dc70      	bgt.n	8025d56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8025c74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025c76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025c78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025c7c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025c80:	930a      	str	r3, [sp, #40]	@ 0x28
 8025c82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025c84:	2b00      	cmp	r3, #0
 8025c86:	f340 8124 	ble.w	8025ed2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8025c8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025c8e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025c92:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025c96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025c9a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025c9e:	eef0 6a62 	vmov.f32	s13, s5
 8025ca2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025ca6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025caa:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025cae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025cb2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025cb6:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 8025cba:	eef0 6a43 	vmov.f32	s13, s6
 8025cbe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025cc2:	ee12 2a90 	vmov	r2, s5
 8025cc6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025cca:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025ccc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025cd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8025cd4:	ee13 2a10 	vmov	r2, s6
 8025cd8:	9321      	str	r3, [sp, #132]	@ 0x84
 8025cda:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025cdc:	edcd 6a20 	vstr	s13, [sp, #128]	@ 0x80
 8025ce0:	fb92 f3f3 	sdiv	r3, r2, r3
 8025ce4:	9322      	str	r3, [sp, #136]	@ 0x88
 8025ce6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025ce8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025cea:	3b01      	subs	r3, #1
 8025cec:	930e      	str	r3, [sp, #56]	@ 0x38
 8025cee:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025cf0:	bf08      	it	eq
 8025cf2:	4613      	moveq	r3, r2
 8025cf4:	eeb0 3a67 	vmov.f32	s6, s15
 8025cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8025cfa:	eef0 2a47 	vmov.f32	s5, s14
 8025cfe:	e68c      	b.n	8025a1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025d00:	b149      	cbz	r1, 8025d16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8025d02:	4628      	mov	r0, r5
 8025d04:	5cb2      	ldrb	r2, [r6, r2]
 8025d06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025d0a:	4422      	add	r2, r4
 8025d0c:	46ac      	mov	ip, r5
 8025d0e:	e6f1      	b.n	8025af4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8025d10:	4628      	mov	r0, r5
 8025d12:	462a      	mov	r2, r5
 8025d14:	e6ee      	b.n	8025af4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8025d16:	4628      	mov	r0, r5
 8025d18:	462a      	mov	r2, r5
 8025d1a:	e7f7      	b.n	8025d0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8025d1c:	1c47      	adds	r7, r0, #1
 8025d1e:	f53f af69 	bmi.w	8025bf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8025d22:	42ba      	cmp	r2, r7
 8025d24:	f6ff af66 	blt.w	8025bf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8025d28:	1c6f      	adds	r7, r5, #1
 8025d2a:	f53f af63 	bmi.w	8025bf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8025d2e:	42be      	cmp	r6, r7
 8025d30:	f6ff af60 	blt.w	8025bf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8025d34:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8025d36:	b236      	sxth	r6, r6
 8025d38:	b212      	sxth	r2, r2
 8025d3a:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8025d3e:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8025d42:	9002      	str	r0, [sp, #8]
 8025d44:	9200      	str	r2, [sp, #0]
 8025d46:	9601      	str	r6, [sp, #4]
 8025d48:	4623      	mov	r3, r4
 8025d4a:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 8025d4e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8025d50:	f7ff fd59 	bl	8025806 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8025d54:	e74e      	b.n	8025bf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8025d56:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8025d58:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8025d5a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025d5e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8025d60:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8025d62:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8025d66:	142d      	asrs	r5, r5, #16
 8025d68:	1400      	asrs	r0, r0, #16
 8025d6a:	fb02 5000 	mla	r0, r2, r0, r5
 8025d6e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8025d70:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025d72:	f815 9000 	ldrb.w	r9, [r5, r0]
 8025d76:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8025d7a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8025d7e:	182e      	adds	r6, r5, r0
 8025d80:	eb04 0509 	add.w	r5, r4, r9
 8025d84:	2b00      	cmp	r3, #0
 8025d86:	f000 8096 	beq.w	8025eb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025d8a:	7877      	ldrb	r7, [r6, #1]
 8025d8c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025d90:	4427      	add	r7, r4
 8025d92:	2900      	cmp	r1, #0
 8025d94:	f000 8097 	beq.w	8025ec6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8025d98:	18b0      	adds	r0, r6, r2
 8025d9a:	7840      	ldrb	r0, [r0, #1]
 8025d9c:	5cb2      	ldrb	r2, [r6, r2]
 8025d9e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025da2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025da6:	4422      	add	r2, r4
 8025da8:	4420      	add	r0, r4
 8025daa:	b29b      	uxth	r3, r3
 8025dac:	b289      	uxth	r1, r1
 8025dae:	fb03 f801 	mul.w	r8, r3, r1
 8025db2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8025db4:	011b      	lsls	r3, r3, #4
 8025db6:	f8b6 c000 	ldrh.w	ip, [r6]
 8025dba:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8025dbe:	78be      	ldrb	r6, [r7, #2]
 8025dc0:	eba3 0308 	sub.w	r3, r3, r8
 8025dc4:	b29b      	uxth	r3, r3
 8025dc6:	435e      	muls	r6, r3
 8025dc8:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8025dcc:	b289      	uxth	r1, r1
 8025dce:	f895 b002 	ldrb.w	fp, [r5, #2]
 8025dd2:	ebae 0e01 	sub.w	lr, lr, r1
 8025dd6:	fa1f fe8e 	uxth.w	lr, lr
 8025dda:	fb0e 660b 	mla	r6, lr, fp, r6
 8025dde:	f892 b002 	ldrb.w	fp, [r2, #2]
 8025de2:	9310      	str	r3, [sp, #64]	@ 0x40
 8025de4:	fb01 660b 	mla	r6, r1, fp, r6
 8025de8:	f890 b002 	ldrb.w	fp, [r0, #2]
 8025dec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025dee:	fb08 660b 	mla	r6, r8, fp, r6
 8025df2:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8025df6:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8025dfa:	fb1b fb03 	smulbb	fp, fp, r3
 8025dfe:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025e02:	fb06 b60a 	mla	r6, r6, sl, fp
 8025e06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025e08:	f895 b001 	ldrb.w	fp, [r5, #1]
 8025e0c:	787d      	ldrb	r5, [r7, #1]
 8025e0e:	783f      	ldrb	r7, [r7, #0]
 8025e10:	435d      	muls	r5, r3
 8025e12:	fb0e 550b 	mla	r5, lr, fp, r5
 8025e16:	f892 b001 	ldrb.w	fp, [r2, #1]
 8025e1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025e1c:	fb01 550b 	mla	r5, r1, fp, r5
 8025e20:	f890 b001 	ldrb.w	fp, [r0, #1]
 8025e24:	f814 9009 	ldrb.w	r9, [r4, r9]
 8025e28:	fb08 550b 	mla	r5, r8, fp, r5
 8025e2c:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8025e30:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8025e34:	fb1b fb03 	smulbb	fp, fp, r3
 8025e38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025e3a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025e3e:	437b      	muls	r3, r7
 8025e40:	fb0e 3309 	mla	r3, lr, r9, r3
 8025e44:	7817      	ldrb	r7, [r2, #0]
 8025e46:	fa5f fc8c 	uxtb.w	ip, ip
 8025e4a:	fb01 3307 	mla	r3, r1, r7, r3
 8025e4e:	7807      	ldrb	r7, [r0, #0]
 8025e50:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8025e54:	fb08 3707 	mla	r7, r8, r7, r3
 8025e58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025e5a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025e5e:	fb1c fc03 	smulbb	ip, ip, r3
 8025e62:	fb05 b50a 	mla	r5, r5, sl, fp
 8025e66:	fb07 c70a 	mla	r7, r7, sl, ip
 8025e6a:	b2b6      	uxth	r6, r6
 8025e6c:	b2ad      	uxth	r5, r5
 8025e6e:	b2bf      	uxth	r7, r7
 8025e70:	1c73      	adds	r3, r6, #1
 8025e72:	1c7a      	adds	r2, r7, #1
 8025e74:	f105 0b01 	add.w	fp, r5, #1
 8025e78:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8025e7c:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8025e80:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8025e84:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025e88:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8025e8c:	096d      	lsrs	r5, r5, #5
 8025e8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025e90:	4316      	orrs	r6, r2
 8025e92:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8025e96:	432e      	orrs	r6, r5
 8025e98:	f823 6b02 	strh.w	r6, [r3], #2
 8025e9c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8025e9e:	930c      	str	r3, [sp, #48]	@ 0x30
 8025ea0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025ea2:	4413      	add	r3, r2
 8025ea4:	931f      	str	r3, [sp, #124]	@ 0x7c
 8025ea6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8025ea8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025eaa:	4413      	add	r3, r2
 8025eac:	9320      	str	r3, [sp, #128]	@ 0x80
 8025eae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025eb0:	3b01      	subs	r3, #1
 8025eb2:	9311      	str	r3, [sp, #68]	@ 0x44
 8025eb4:	e6db      	b.n	8025c6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8025eb6:	b149      	cbz	r1, 8025ecc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8025eb8:	4628      	mov	r0, r5
 8025eba:	5cb2      	ldrb	r2, [r6, r2]
 8025ebc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025ec0:	4422      	add	r2, r4
 8025ec2:	462f      	mov	r7, r5
 8025ec4:	e771      	b.n	8025daa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025ec6:	4628      	mov	r0, r5
 8025ec8:	462a      	mov	r2, r5
 8025eca:	e76e      	b.n	8025daa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025ecc:	4628      	mov	r0, r5
 8025ece:	462a      	mov	r2, r5
 8025ed0:	e7f7      	b.n	8025ec2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8025ed2:	b015      	add	sp, #84	@ 0x54
 8025ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025ed8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8025ed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025edc:	880f      	ldrh	r7, [r1, #0]
 8025ede:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8025ee2:	023c      	lsls	r4, r7, #8
 8025ee4:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	@ 0x38
 8025ee8:	f404 0b78 	and.w	fp, r4, #16252928	@ 0xf80000
 8025eec:	fb05 ca0e 	mla	sl, r5, lr, ip
 8025ef0:	017c      	lsls	r4, r7, #5
 8025ef2:	f404 447c 	and.w	r4, r4, #64512	@ 0xfc00
 8025ef6:	00ff      	lsls	r7, r7, #3
 8025ef8:	ea4b 0404 	orr.w	r4, fp, r4
 8025efc:	b2ff      	uxtb	r7, r7
 8025efe:	4327      	orrs	r7, r4
 8025f00:	2d00      	cmp	r5, #0
 8025f02:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8025f06:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 8025f0a:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8025f0e:	eb02 080a 	add.w	r8, r2, sl
 8025f12:	9701      	str	r7, [sp, #4]
 8025f14:	db7e      	blt.n	8026014 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8025f16:	45a9      	cmp	r9, r5
 8025f18:	dd7c      	ble.n	8026014 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8025f1a:	f1bc 0f00 	cmp.w	ip, #0
 8025f1e:	db77      	blt.n	8026010 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8025f20:	45e6      	cmp	lr, ip
 8025f22:	dd75      	ble.n	8026010 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8025f24:	f812 700a 	ldrb.w	r7, [r2, sl]
 8025f28:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025f2c:	441f      	add	r7, r3
 8025f2e:	f11c 0201 	adds.w	r2, ip, #1
 8025f32:	d472      	bmi.n	802601a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8025f34:	4596      	cmp	lr, r2
 8025f36:	dd70      	ble.n	802601a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8025f38:	2800      	cmp	r0, #0
 8025f3a:	d06e      	beq.n	802601a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8025f3c:	f898 4001 	ldrb.w	r4, [r8, #1]
 8025f40:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025f44:	441c      	add	r4, r3
 8025f46:	3501      	adds	r5, #1
 8025f48:	d46b      	bmi.n	8026022 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8025f4a:	45a9      	cmp	r9, r5
 8025f4c:	dd69      	ble.n	8026022 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8025f4e:	2e00      	cmp	r6, #0
 8025f50:	d067      	beq.n	8026022 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8025f52:	f1bc 0f00 	cmp.w	ip, #0
 8025f56:	db62      	blt.n	802601e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8025f58:	45e6      	cmp	lr, ip
 8025f5a:	dd60      	ble.n	802601e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8025f5c:	f818 500e 	ldrb.w	r5, [r8, lr]
 8025f60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025f64:	441d      	add	r5, r3
 8025f66:	f11c 0201 	adds.w	r2, ip, #1
 8025f6a:	d45d      	bmi.n	8026028 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8025f6c:	4596      	cmp	lr, r2
 8025f6e:	dd5b      	ble.n	8026028 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8025f70:	2800      	cmp	r0, #0
 8025f72:	d059      	beq.n	8026028 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8025f74:	44c6      	add	lr, r8
 8025f76:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025f7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025f7e:	4413      	add	r3, r2
 8025f80:	b280      	uxth	r0, r0
 8025f82:	b2b2      	uxth	r2, r6
 8025f84:	fb00 f602 	mul.w	r6, r0, r2
 8025f88:	0100      	lsls	r0, r0, #4
 8025f8a:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8025f8e:	f5c0 7880 	rsb	r8, r0, #256	@ 0x100
 8025f92:	1b80      	subs	r0, r0, r6
 8025f94:	fa1f fc82 	uxth.w	ip, r2
 8025f98:	b282      	uxth	r2, r0
 8025f9a:	78a0      	ldrb	r0, [r4, #2]
 8025f9c:	f897 e002 	ldrb.w	lr, [r7, #2]
 8025fa0:	4350      	muls	r0, r2
 8025fa2:	eba8 080c 	sub.w	r8, r8, ip
 8025fa6:	fa1f f888 	uxth.w	r8, r8
 8025faa:	fb08 0e0e 	mla	lr, r8, lr, r0
 8025fae:	78a8      	ldrb	r0, [r5, #2]
 8025fb0:	f897 9000 	ldrb.w	r9, [r7]
 8025fb4:	fb0c e000 	mla	r0, ip, r0, lr
 8025fb8:	f893 e002 	ldrb.w	lr, [r3, #2]
 8025fbc:	787f      	ldrb	r7, [r7, #1]
 8025fbe:	fb06 0e0e 	mla	lr, r6, lr, r0
 8025fc2:	f40e 4078 	and.w	r0, lr, #63488	@ 0xf800
 8025fc6:	f894 e000 	ldrb.w	lr, [r4]
 8025fca:	fb02 fe0e 	mul.w	lr, r2, lr
 8025fce:	fb08 e909 	mla	r9, r8, r9, lr
 8025fd2:	f895 e000 	ldrb.w	lr, [r5]
 8025fd6:	fb0c 990e 	mla	r9, ip, lr, r9
 8025fda:	f893 e000 	ldrb.w	lr, [r3]
 8025fde:	785b      	ldrb	r3, [r3, #1]
 8025fe0:	fb06 9e0e 	mla	lr, r6, lr, r9
 8025fe4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8025fe8:	ea4e 0e00 	orr.w	lr, lr, r0
 8025fec:	7860      	ldrb	r0, [r4, #1]
 8025fee:	4350      	muls	r0, r2
 8025ff0:	fb08 0007 	mla	r0, r8, r7, r0
 8025ff4:	786a      	ldrb	r2, [r5, #1]
 8025ff6:	fb0c 0202 	mla	r2, ip, r2, r0
 8025ffa:	fb06 2303 	mla	r3, r6, r3, r2
 8025ffe:	095b      	lsrs	r3, r3, #5
 8026000:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026004:	ea4e 0303 	orr.w	r3, lr, r3
 8026008:	800b      	strh	r3, [r1, #0]
 802600a:	b003      	add	sp, #12
 802600c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026010:	af01      	add	r7, sp, #4
 8026012:	e78c      	b.n	8025f2e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8026014:	ac01      	add	r4, sp, #4
 8026016:	4627      	mov	r7, r4
 8026018:	e795      	b.n	8025f46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802601a:	ac01      	add	r4, sp, #4
 802601c:	e793      	b.n	8025f46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802601e:	ad01      	add	r5, sp, #4
 8026020:	e7a1      	b.n	8025f66 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8026022:	ab01      	add	r3, sp, #4
 8026024:	461d      	mov	r5, r3
 8026026:	e7ab      	b.n	8025f80 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8026028:	ab01      	add	r3, sp, #4
 802602a:	e7a9      	b.n	8025f80 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0802602c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802602c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026030:	b08f      	sub	sp, #60	@ 0x3c
 8026032:	920c      	str	r2, [sp, #48]	@ 0x30
 8026034:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8026036:	900d      	str	r0, [sp, #52]	@ 0x34
 8026038:	6850      	ldr	r0, [r2, #4]
 802603a:	910a      	str	r1, [sp, #40]	@ 0x28
 802603c:	9306      	str	r3, [sp, #24]
 802603e:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 8026042:	fb00 1303 	mla	r3, r0, r3, r1
 8026046:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 802604a:	6812      	ldr	r2, [r2, #0]
 802604c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026050:	9307      	str	r3, [sp, #28]
 8026052:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026054:	681b      	ldr	r3, [r3, #0]
 8026056:	9308      	str	r3, [sp, #32]
 8026058:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802605a:	685c      	ldr	r4, [r3, #4]
 802605c:	3404      	adds	r4, #4
 802605e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026060:	2b00      	cmp	r3, #0
 8026062:	dc03      	bgt.n	802606c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8026064:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026066:	2b00      	cmp	r3, #0
 8026068:	f340 81d6 	ble.w	8026418 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 802606c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802606e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026072:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026076:	1e48      	subs	r0, r1, #1
 8026078:	1e56      	subs	r6, r2, #1
 802607a:	9b06      	ldr	r3, [sp, #24]
 802607c:	2b00      	cmp	r3, #0
 802607e:	f340 80b7 	ble.w	80261f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8026082:	ea5f 472b 	movs.w	r7, fp, asr #16
 8026086:	ea4f 4325 	mov.w	r3, r5, asr #16
 802608a:	d406      	bmi.n	802609a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802608c:	4287      	cmp	r7, r0
 802608e:	da04      	bge.n	802609a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026090:	2b00      	cmp	r3, #0
 8026092:	db02      	blt.n	802609a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026094:	42b3      	cmp	r3, r6
 8026096:	f2c0 80ac 	blt.w	80261f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802609a:	3701      	adds	r7, #1
 802609c:	f100 809d 	bmi.w	80261da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80260a0:	42b9      	cmp	r1, r7
 80260a2:	f2c0 809a 	blt.w	80261da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80260a6:	3301      	adds	r3, #1
 80260a8:	f100 8097 	bmi.w	80261da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80260ac:	429a      	cmp	r2, r3
 80260ae:	f2c0 8094 	blt.w	80261da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80260b2:	9b06      	ldr	r3, [sp, #24]
 80260b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80260b6:	9b07      	ldr	r3, [sp, #28]
 80260b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80260ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80260bc:	2b00      	cmp	r3, #0
 80260be:	f340 80b5 	ble.w	802622c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80260c2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80260c4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80260c6:	68c7      	ldr	r7, [r0, #12]
 80260c8:	ea5f 402b 	movs.w	r0, fp, asr #16
 80260cc:	ea4f 4625 	mov.w	r6, r5, asr #16
 80260d0:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80260d4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80260d8:	6892      	ldr	r2, [r2, #8]
 80260da:	f100 80fb 	bmi.w	80262d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80260de:	f102 3cff 	add.w	ip, r2, #4294967295
 80260e2:	4560      	cmp	r0, ip
 80260e4:	f280 80f6 	bge.w	80262d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80260e8:	2e00      	cmp	r6, #0
 80260ea:	f2c0 80f3 	blt.w	80262d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80260ee:	f107 3cff 	add.w	ip, r7, #4294967295
 80260f2:	4566      	cmp	r6, ip
 80260f4:	f280 80ee 	bge.w	80262d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80260f8:	b212      	sxth	r2, r2
 80260fa:	fb06 0002 	mla	r0, r6, r2, r0
 80260fe:	9e08      	ldr	r6, [sp, #32]
 8026100:	1837      	adds	r7, r6, r0
 8026102:	5c30      	ldrb	r0, [r6, r0]
 8026104:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8026108:	eb04 0c08 	add.w	ip, r4, r8
 802610c:	2b00      	cmp	r3, #0
 802610e:	f000 80d3 	beq.w	80262b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8026112:	787e      	ldrb	r6, [r7, #1]
 8026114:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8026118:	4426      	add	r6, r4
 802611a:	2900      	cmp	r1, #0
 802611c:	f000 80d4 	beq.w	80262c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8026120:	18b8      	adds	r0, r7, r2
 8026122:	7840      	ldrb	r0, [r0, #1]
 8026124:	5cba      	ldrb	r2, [r7, r2]
 8026126:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802612a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802612e:	4422      	add	r2, r4
 8026130:	4420      	add	r0, r4
 8026132:	b29b      	uxth	r3, r3
 8026134:	b289      	uxth	r1, r1
 8026136:	fb03 f901 	mul.w	r9, r3, r1
 802613a:	011b      	lsls	r3, r3, #4
 802613c:	78b7      	ldrb	r7, [r6, #2]
 802613e:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8026142:	eba3 0309 	sub.w	r3, r3, r9
 8026146:	b29b      	uxth	r3, r3
 8026148:	435f      	muls	r7, r3
 802614a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802614e:	b289      	uxth	r1, r1
 8026150:	f89c a002 	ldrb.w	sl, [ip, #2]
 8026154:	ebae 0e01 	sub.w	lr, lr, r1
 8026158:	fa1f fe8e 	uxth.w	lr, lr
 802615c:	fb0e 770a 	mla	r7, lr, sl, r7
 8026160:	f892 a002 	ldrb.w	sl, [r2, #2]
 8026164:	f89c c001 	ldrb.w	ip, [ip, #1]
 8026168:	fb01 770a 	mla	r7, r1, sl, r7
 802616c:	f890 a002 	ldrb.w	sl, [r0, #2]
 8026170:	fb09 7a0a 	mla	sl, r9, sl, r7
 8026174:	f814 7008 	ldrb.w	r7, [r4, r8]
 8026178:	f896 8000 	ldrb.w	r8, [r6]
 802617c:	7876      	ldrb	r6, [r6, #1]
 802617e:	fb03 f808 	mul.w	r8, r3, r8
 8026182:	fb0e 8807 	mla	r8, lr, r7, r8
 8026186:	7817      	ldrb	r7, [r2, #0]
 8026188:	4373      	muls	r3, r6
 802618a:	fb01 8807 	mla	r8, r1, r7, r8
 802618e:	7807      	ldrb	r7, [r0, #0]
 8026190:	fb0e 330c 	mla	r3, lr, ip, r3
 8026194:	fb09 8707 	mla	r7, r9, r7, r8
 8026198:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 802619c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80261a0:	ea47 070a 	orr.w	r7, r7, sl
 80261a4:	f892 a001 	ldrb.w	sl, [r2, #1]
 80261a8:	fb01 310a 	mla	r1, r1, sl, r3
 80261ac:	f890 a001 	ldrb.w	sl, [r0, #1]
 80261b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80261b2:	fb09 1a0a 	mla	sl, r9, sl, r1
 80261b6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80261ba:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80261be:	ea47 070a 	orr.w	r7, r7, sl
 80261c2:	801f      	strh	r7, [r3, #0]
 80261c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80261c6:	3302      	adds	r3, #2
 80261c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80261ca:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80261cc:	449b      	add	fp, r3
 80261ce:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80261d0:	441d      	add	r5, r3
 80261d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80261d4:	3b01      	subs	r3, #1
 80261d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80261d8:	e76f      	b.n	80260ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80261da:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80261dc:	449b      	add	fp, r3
 80261de:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80261e0:	441d      	add	r5, r3
 80261e2:	9b06      	ldr	r3, [sp, #24]
 80261e4:	3b01      	subs	r3, #1
 80261e6:	9306      	str	r3, [sp, #24]
 80261e8:	9b07      	ldr	r3, [sp, #28]
 80261ea:	3302      	adds	r3, #2
 80261ec:	9307      	str	r3, [sp, #28]
 80261ee:	e744      	b.n	802607a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80261f0:	d023      	beq.n	802623a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80261f2:	9b06      	ldr	r3, [sp, #24]
 80261f4:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80261f6:	3b01      	subs	r3, #1
 80261f8:	fb00 b003 	mla	r0, r0, r3, fp
 80261fc:	1400      	asrs	r0, r0, #16
 80261fe:	f53f af58 	bmi.w	80260b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8026202:	3901      	subs	r1, #1
 8026204:	4288      	cmp	r0, r1
 8026206:	f6bf af54 	bge.w	80260b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802620a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 802620c:	fb01 5303 	mla	r3, r1, r3, r5
 8026210:	141b      	asrs	r3, r3, #16
 8026212:	f53f af4e 	bmi.w	80260b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8026216:	3a01      	subs	r2, #1
 8026218:	4293      	cmp	r3, r2
 802621a:	f6bf af4a 	bge.w	80260b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802621e:	9b06      	ldr	r3, [sp, #24]
 8026220:	9309      	str	r3, [sp, #36]	@ 0x24
 8026222:	9b07      	ldr	r3, [sp, #28]
 8026224:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026228:	2b00      	cmp	r3, #0
 802622a:	dc70      	bgt.n	802630e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 802622c:	9b06      	ldr	r3, [sp, #24]
 802622e:	9a07      	ldr	r2, [sp, #28]
 8026230:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026234:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026238:	9307      	str	r3, [sp, #28]
 802623a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802623c:	2b00      	cmp	r3, #0
 802623e:	f340 80eb 	ble.w	8026418 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8026242:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026246:	ee30 0a04 	vadd.f32	s0, s0, s8
 802624a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802624e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026252:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026256:	eef0 6a62 	vmov.f32	s13, s5
 802625a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802625e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026262:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026266:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802626a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802626e:	ee16 ba90 	vmov	fp, s13
 8026272:	eef0 6a43 	vmov.f32	s13, s6
 8026276:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802627a:	ee12 2a90 	vmov	r2, s5
 802627e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026282:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026284:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026288:	fb92 f3f3 	sdiv	r3, r2, r3
 802628c:	ee13 2a10 	vmov	r2, s6
 8026290:	931b      	str	r3, [sp, #108]	@ 0x6c
 8026292:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026294:	ee16 5a90 	vmov	r5, s13
 8026298:	fb92 f3f3 	sdiv	r3, r2, r3
 802629c:	931c      	str	r3, [sp, #112]	@ 0x70
 802629e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80262a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80262a2:	3b01      	subs	r3, #1
 80262a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80262a6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80262a8:	bf08      	it	eq
 80262aa:	4613      	moveq	r3, r2
 80262ac:	eeb0 3a67 	vmov.f32	s6, s15
 80262b0:	9306      	str	r3, [sp, #24]
 80262b2:	eef0 2a47 	vmov.f32	s5, s14
 80262b6:	e6d2      	b.n	802605e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80262b8:	b149      	cbz	r1, 80262ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80262ba:	4660      	mov	r0, ip
 80262bc:	5cba      	ldrb	r2, [r7, r2]
 80262be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80262c2:	4422      	add	r2, r4
 80262c4:	4666      	mov	r6, ip
 80262c6:	e734      	b.n	8026132 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 80262c8:	4660      	mov	r0, ip
 80262ca:	4662      	mov	r2, ip
 80262cc:	e731      	b.n	8026132 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 80262ce:	4660      	mov	r0, ip
 80262d0:	4662      	mov	r2, ip
 80262d2:	e7f7      	b.n	80262c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 80262d4:	f110 0c01 	adds.w	ip, r0, #1
 80262d8:	f53f af74 	bmi.w	80261c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80262dc:	4562      	cmp	r2, ip
 80262de:	f6ff af71 	blt.w	80261c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80262e2:	f116 0c01 	adds.w	ip, r6, #1
 80262e6:	f53f af6d 	bmi.w	80261c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80262ea:	4567      	cmp	r7, ip
 80262ec:	f6ff af6a 	blt.w	80261c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80262f0:	b23f      	sxth	r7, r7
 80262f2:	b212      	sxth	r2, r2
 80262f4:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80262f8:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80262fc:	9200      	str	r2, [sp, #0]
 80262fe:	9701      	str	r7, [sp, #4]
 8026300:	4623      	mov	r3, r4
 8026302:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8026306:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8026308:	f7ff fde6 	bl	8025ed8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 802630c:	e75a      	b.n	80261c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802630e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8026310:	ea4f 462b 	mov.w	r6, fp, asr #16
 8026314:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8026318:	1428      	asrs	r0, r5, #16
 802631a:	fb02 6000 	mla	r0, r2, r0, r6
 802631e:	9e08      	ldr	r6, [sp, #32]
 8026320:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8026324:	f816 8000 	ldrb.w	r8, [r6, r0]
 8026328:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802632c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8026330:	1837      	adds	r7, r6, r0
 8026332:	eb04 0c08 	add.w	ip, r4, r8
 8026336:	2b00      	cmp	r3, #0
 8026338:	d060      	beq.n	80263fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 802633a:	787e      	ldrb	r6, [r7, #1]
 802633c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8026340:	4426      	add	r6, r4
 8026342:	2900      	cmp	r1, #0
 8026344:	d062      	beq.n	802640c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 8026346:	18b8      	adds	r0, r7, r2
 8026348:	7840      	ldrb	r0, [r0, #1]
 802634a:	5cba      	ldrb	r2, [r7, r2]
 802634c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026350:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026354:	4422      	add	r2, r4
 8026356:	4420      	add	r0, r4
 8026358:	b29b      	uxth	r3, r3
 802635a:	b289      	uxth	r1, r1
 802635c:	fb03 f901 	mul.w	r9, r3, r1
 8026360:	011b      	lsls	r3, r3, #4
 8026362:	78b7      	ldrb	r7, [r6, #2]
 8026364:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8026368:	eba3 0309 	sub.w	r3, r3, r9
 802636c:	b29b      	uxth	r3, r3
 802636e:	435f      	muls	r7, r3
 8026370:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026374:	b289      	uxth	r1, r1
 8026376:	f89c a002 	ldrb.w	sl, [ip, #2]
 802637a:	ebae 0e01 	sub.w	lr, lr, r1
 802637e:	fa1f fe8e 	uxth.w	lr, lr
 8026382:	fb0e 770a 	mla	r7, lr, sl, r7
 8026386:	f892 a002 	ldrb.w	sl, [r2, #2]
 802638a:	f89c c001 	ldrb.w	ip, [ip, #1]
 802638e:	fb01 770a 	mla	r7, r1, sl, r7
 8026392:	f890 a002 	ldrb.w	sl, [r0, #2]
 8026396:	fb09 7a0a 	mla	sl, r9, sl, r7
 802639a:	f814 7008 	ldrb.w	r7, [r4, r8]
 802639e:	f896 8000 	ldrb.w	r8, [r6]
 80263a2:	7876      	ldrb	r6, [r6, #1]
 80263a4:	fb03 f808 	mul.w	r8, r3, r8
 80263a8:	fb0e 8807 	mla	r8, lr, r7, r8
 80263ac:	7817      	ldrb	r7, [r2, #0]
 80263ae:	4373      	muls	r3, r6
 80263b0:	fb01 8807 	mla	r8, r1, r7, r8
 80263b4:	7807      	ldrb	r7, [r0, #0]
 80263b6:	fb0e 330c 	mla	r3, lr, ip, r3
 80263ba:	fb09 8707 	mla	r7, r9, r7, r8
 80263be:	7856      	ldrb	r6, [r2, #1]
 80263c0:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 80263c4:	fb01 3306 	mla	r3, r1, r6, r3
 80263c8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80263cc:	ea47 070a 	orr.w	r7, r7, sl
 80263d0:	f890 a001 	ldrb.w	sl, [r0, #1]
 80263d4:	fb09 3a0a 	mla	sl, r9, sl, r3
 80263d8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80263dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80263de:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80263e2:	ea47 070a 	orr.w	r7, r7, sl
 80263e6:	f823 7b02 	strh.w	r7, [r3], #2
 80263ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80263ec:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80263ee:	449b      	add	fp, r3
 80263f0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80263f2:	441d      	add	r5, r3
 80263f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80263f6:	3b01      	subs	r3, #1
 80263f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80263fa:	e714      	b.n	8026226 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80263fc:	b149      	cbz	r1, 8026412 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80263fe:	4660      	mov	r0, ip
 8026400:	5cba      	ldrb	r2, [r7, r2]
 8026402:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026406:	4422      	add	r2, r4
 8026408:	4666      	mov	r6, ip
 802640a:	e7a5      	b.n	8026358 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802640c:	4660      	mov	r0, ip
 802640e:	4662      	mov	r2, ip
 8026410:	e7a2      	b.n	8026358 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8026412:	4660      	mov	r0, ip
 8026414:	4662      	mov	r2, ip
 8026416:	e7f7      	b.n	8026408 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 8026418:	b00f      	add	sp, #60	@ 0x3c
 802641a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802641e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 802641e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026422:	b085      	sub	sp, #20
 8026424:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 8026428:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	@ 0x40
 802642c:	9102      	str	r1, [sp, #8]
 802642e:	fb04 710c 	mla	r1, r4, ip, r7
 8026432:	2c00      	cmp	r4, #0
 8026434:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8026438:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 802643c:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8026440:	eb02 0e01 	add.w	lr, r2, r1
 8026444:	f2c0 8122 	blt.w	802668c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8026448:	45a0      	cmp	r8, r4
 802644a:	f340 811f 	ble.w	802668c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 802644e:	2f00      	cmp	r7, #0
 8026450:	f2c0 811a 	blt.w	8026688 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8026454:	45bc      	cmp	ip, r7
 8026456:	f340 8117 	ble.w	8026688 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 802645a:	5c52      	ldrb	r2, [r2, r1]
 802645c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8026460:	1c7a      	adds	r2, r7, #1
 8026462:	f100 8116 	bmi.w	8026692 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8026466:	4594      	cmp	ip, r2
 8026468:	f340 8113 	ble.w	8026692 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 802646c:	2e00      	cmp	r6, #0
 802646e:	f000 8112 	beq.w	8026696 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8026472:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8026476:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802647a:	3401      	adds	r4, #1
 802647c:	f100 810f 	bmi.w	802669e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8026480:	45a0      	cmp	r8, r4
 8026482:	f340 810c 	ble.w	802669e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8026486:	2800      	cmp	r0, #0
 8026488:	f000 810c 	beq.w	80266a4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 802648c:	2f00      	cmp	r7, #0
 802648e:	f2c0 8104 	blt.w	802669a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8026492:	45bc      	cmp	ip, r7
 8026494:	f340 8101 	ble.w	802669a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8026498:	f81e 200c 	ldrb.w	r2, [lr, ip]
 802649c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80264a0:	3701      	adds	r7, #1
 80264a2:	f100 8102 	bmi.w	80266aa <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80264a6:	45bc      	cmp	ip, r7
 80264a8:	f340 80ff 	ble.w	80266aa <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80264ac:	2e00      	cmp	r6, #0
 80264ae:	f000 80fe 	beq.w	80266ae <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 80264b2:	44f4      	add	ip, lr
 80264b4:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80264b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80264bc:	b2b6      	uxth	r6, r6
 80264be:	b280      	uxth	r0, r0
 80264c0:	fb00 fe06 	mul.w	lr, r0, r6
 80264c4:	0136      	lsls	r6, r6, #4
 80264c6:	eba6 070e 	sub.w	r7, r6, lr
 80264ca:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80264ce:	b2bf      	uxth	r7, r7
 80264d0:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 80264d4:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80264d8:	fb0a f607 	mul.w	r6, sl, r7
 80264dc:	b280      	uxth	r0, r0
 80264de:	1a1b      	subs	r3, r3, r0
 80264e0:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80264e4:	b29b      	uxth	r3, r3
 80264e6:	fb0b 6603 	mla	r6, fp, r3, r6
 80264ea:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80264ee:	fb00 6609 	mla	r6, r0, r9, r6
 80264f2:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80264f6:	fb0e 6608 	mla	r6, lr, r8, r6
 80264fa:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80264fe:	9600      	str	r6, [sp, #0]
 8026500:	2e00      	cmp	r6, #0
 8026502:	f000 80be 	beq.w	8026682 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 8026506:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802650a:	fb0b fc0c 	mul.w	ip, fp, ip
 802650e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8026512:	fb0b f505 	mul.w	r5, fp, r5
 8026516:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802651a:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802651e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026522:	44dc      	add	ip, fp
 8026524:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026528:	9501      	str	r5, [sp, #4]
 802652a:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 802652e:	9503      	str	r5, [sp, #12]
 8026530:	9d01      	ldr	r5, [sp, #4]
 8026532:	9e02      	ldr	r6, [sp, #8]
 8026534:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8026538:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802653c:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 8026540:	fb0a fc0c 	mul.w	ip, sl, ip
 8026544:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8026548:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802654c:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026550:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026554:	4465      	add	r5, ip
 8026556:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802655a:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802655e:	fb09 fc0c 	mul.w	ip, r9, ip
 8026562:	fb09 f904 	mul.w	r9, r9, r4
 8026566:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 802656a:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802656e:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8026572:	fb08 f404 	mul.w	r4, r8, r4
 8026576:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802657a:	fb08 f802 	mul.w	r8, r8, r2
 802657e:	0a2d      	lsrs	r5, r5, #8
 8026580:	0a22      	lsrs	r2, r4, #8
 8026582:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026586:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802658a:	437d      	muls	r5, r7
 802658c:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8026590:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8026594:	4414      	add	r4, r2
 8026596:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802659a:	fb0a fa01 	mul.w	sl, sl, r1
 802659e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80265a2:	9a03      	ldr	r2, [sp, #12]
 80265a4:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 80265a8:	fb02 5503 	mla	r5, r2, r3, r5
 80265ac:	0a24      	lsrs	r4, r4, #8
 80265ae:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80265b2:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80265b6:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80265ba:	fb04 540e 	mla	r4, r4, lr, r5
 80265be:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80265c2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80265c6:	4461      	add	r1, ip
 80265c8:	0a09      	lsrs	r1, r1, #8
 80265ca:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80265ce:	fb01 4100 	mla	r1, r1, r0, r4
 80265d2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80265d6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80265da:	fb07 f70a 	mul.w	r7, r7, sl
 80265de:	0a09      	lsrs	r1, r1, #8
 80265e0:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 80265e4:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 80265e8:	fb03 7101 	mla	r1, r3, r1, r7
 80265ec:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80265f0:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80265f4:	fb0e 1e08 	mla	lr, lr, r8, r1
 80265f8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80265fc:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8026600:	fb00 e101 	mla	r1, r0, r1, lr
 8026604:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8026608:	9a00      	ldr	r2, [sp, #0]
 802660a:	b287      	uxth	r7, r0
 802660c:	437a      	muls	r2, r7
 802660e:	1c53      	adds	r3, r2, #1
 8026610:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026614:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8026618:	0a09      	lsrs	r1, r1, #8
 802661a:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802661e:	4321      	orrs	r1, r4
 8026620:	0c0a      	lsrs	r2, r1, #16
 8026622:	8836      	ldrh	r6, [r6, #0]
 8026624:	fb12 f207 	smulbb	r2, r2, r7
 8026628:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802662c:	b2c8      	uxtb	r0, r1
 802662e:	1235      	asrs	r5, r6, #8
 8026630:	fb14 f407 	smulbb	r4, r4, r7
 8026634:	fb10 f007 	smulbb	r0, r0, r7
 8026638:	b2db      	uxtb	r3, r3
 802663a:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802663e:	fb05 2503 	mla	r5, r5, r3, r2
 8026642:	10f2      	asrs	r2, r6, #3
 8026644:	00f6      	lsls	r6, r6, #3
 8026646:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802664a:	b2f6      	uxtb	r6, r6
 802664c:	fb02 4203 	mla	r2, r2, r3, r4
 8026650:	fb06 0303 	mla	r3, r6, r3, r0
 8026654:	b2ad      	uxth	r5, r5
 8026656:	b299      	uxth	r1, r3
 8026658:	b294      	uxth	r4, r2
 802665a:	1c6b      	adds	r3, r5, #1
 802665c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026660:	1c62      	adds	r2, r4, #1
 8026662:	1c4b      	adds	r3, r1, #1
 8026664:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026668:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802666c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8026670:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026674:	0952      	lsrs	r2, r2, #5
 8026676:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802667a:	432b      	orrs	r3, r5
 802667c:	4313      	orrs	r3, r2
 802667e:	9a02      	ldr	r2, [sp, #8]
 8026680:	8013      	strh	r3, [r2, #0]
 8026682:	b005      	add	sp, #20
 8026684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026688:	2500      	movs	r5, #0
 802668a:	e6e9      	b.n	8026460 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 802668c:	2100      	movs	r1, #0
 802668e:	460d      	mov	r5, r1
 8026690:	e6f3      	b.n	802647a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8026692:	2100      	movs	r1, #0
 8026694:	e6f1      	b.n	802647a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8026696:	4631      	mov	r1, r6
 8026698:	e6ef      	b.n	802647a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802669a:	2400      	movs	r4, #0
 802669c:	e700      	b.n	80264a0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 802669e:	2200      	movs	r2, #0
 80266a0:	4614      	mov	r4, r2
 80266a2:	e70b      	b.n	80264bc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80266a4:	4602      	mov	r2, r0
 80266a6:	4604      	mov	r4, r0
 80266a8:	e708      	b.n	80264bc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80266aa:	2200      	movs	r2, #0
 80266ac:	e706      	b.n	80264bc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80266ae:	4632      	mov	r2, r6
 80266b0:	e704      	b.n	80264bc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

080266b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80266b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266b6:	b09f      	sub	sp, #124	@ 0x7c
 80266b8:	921b      	str	r2, [sp, #108]	@ 0x6c
 80266ba:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80266bc:	901d      	str	r0, [sp, #116]	@ 0x74
 80266be:	9309      	str	r3, [sp, #36]	@ 0x24
 80266c0:	6850      	ldr	r0, [r2, #4]
 80266c2:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 80266c6:	9119      	str	r1, [sp, #100]	@ 0x64
 80266c8:	931c      	str	r3, [sp, #112]	@ 0x70
 80266ca:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 80266ce:	fb00 1303 	mla	r3, r0, r3, r1
 80266d2:	6812      	ldr	r2, [r2, #0]
 80266d4:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 80266d6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80266da:	930c      	str	r3, [sp, #48]	@ 0x30
 80266dc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80266de:	681b      	ldr	r3, [r3, #0]
 80266e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80266e2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80266e4:	685e      	ldr	r6, [r3, #4]
 80266e6:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80266ea:	3604      	adds	r6, #4
 80266ec:	930d      	str	r3, [sp, #52]	@ 0x34
 80266ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80266f0:	2b00      	cmp	r3, #0
 80266f2:	dc03      	bgt.n	80266fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80266f4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80266f6:	2b00      	cmp	r3, #0
 80266f8:	f340 8387 	ble.w	8026e0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 80266fc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80266fe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026702:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026706:	1e48      	subs	r0, r1, #1
 8026708:	1e57      	subs	r7, r2, #1
 802670a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802670c:	2b00      	cmp	r3, #0
 802670e:	f340 8194 	ble.w	8026a3a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8026712:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8026714:	142b      	asrs	r3, r5, #16
 8026716:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802671a:	d406      	bmi.n	802672a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802671c:	4584      	cmp	ip, r0
 802671e:	da04      	bge.n	802672a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026720:	2b00      	cmp	r3, #0
 8026722:	db02      	blt.n	802672a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026724:	42bb      	cmp	r3, r7
 8026726:	f2c0 8189 	blt.w	8026a3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802672a:	f11c 0c01 	adds.w	ip, ip, #1
 802672e:	f100 8177 	bmi.w	8026a20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8026732:	4561      	cmp	r1, ip
 8026734:	f2c0 8174 	blt.w	8026a20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8026738:	3301      	adds	r3, #1
 802673a:	f100 8171 	bmi.w	8026a20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802673e:	429a      	cmp	r2, r3
 8026740:	f2c0 816e 	blt.w	8026a20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8026744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026746:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8026748:	931a      	str	r3, [sp, #104]	@ 0x68
 802674a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802674c:	2b00      	cmp	r3, #0
 802674e:	f340 8193 	ble.w	8026a78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8026752:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026754:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8026758:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802675c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802675e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026762:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8026766:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026768:	141b      	asrs	r3, r3, #16
 802676a:	f100 81d6 	bmi.w	8026b1a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802676e:	f100 38ff 	add.w	r8, r0, #4294967295
 8026772:	4543      	cmp	r3, r8
 8026774:	f280 81d1 	bge.w	8026b1a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8026778:	f1bc 0f00 	cmp.w	ip, #0
 802677c:	f2c0 81cd 	blt.w	8026b1a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8026780:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026784:	45c4      	cmp	ip, r8
 8026786:	f280 81c8 	bge.w	8026b1a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802678a:	b200      	sxth	r0, r0
 802678c:	fb0c 3300 	mla	r3, ip, r0, r3
 8026790:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026792:	eb04 0803 	add.w	r8, r4, r3
 8026796:	5ce3      	ldrb	r3, [r4, r3]
 8026798:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802679c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80267a0:	2a00      	cmp	r2, #0
 80267a2:	f000 81af 	beq.w	8026b04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80267a6:	f898 c001 	ldrb.w	ip, [r8, #1]
 80267aa:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80267ae:	940e      	str	r4, [sp, #56]	@ 0x38
 80267b0:	0e24      	lsrs	r4, r4, #24
 80267b2:	9415      	str	r4, [sp, #84]	@ 0x54
 80267b4:	b179      	cbz	r1, 80267d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80267b6:	eb08 0c00 	add.w	ip, r8, r0
 80267ba:	f818 0000 	ldrb.w	r0, [r8, r0]
 80267be:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80267c2:	900a      	str	r0, [sp, #40]	@ 0x28
 80267c4:	0e00      	lsrs	r0, r0, #24
 80267c6:	9013      	str	r0, [sp, #76]	@ 0x4c
 80267c8:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80267cc:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80267d0:	900f      	str	r0, [sp, #60]	@ 0x3c
 80267d2:	0e00      	lsrs	r0, r0, #24
 80267d4:	9016      	str	r0, [sp, #88]	@ 0x58
 80267d6:	b292      	uxth	r2, r2
 80267d8:	b289      	uxth	r1, r1
 80267da:	fb02 f901 	mul.w	r9, r2, r1
 80267de:	0112      	lsls	r2, r2, #4
 80267e0:	eba2 0809 	sub.w	r8, r2, r9
 80267e4:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80267e6:	fa1f f888 	uxth.w	r8, r8
 80267ea:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80267ee:	fb08 f000 	mul.w	r0, r8, r0
 80267f2:	b289      	uxth	r1, r1
 80267f4:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80267f8:	1a52      	subs	r2, r2, r1
 80267fa:	b292      	uxth	r2, r2
 80267fc:	fb02 000e 	mla	r0, r2, lr, r0
 8026800:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026802:	fb01 0004 	mla	r0, r1, r4, r0
 8026806:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8026808:	fb09 0004 	mla	r0, r9, r4, r0
 802680c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026810:	2800      	cmp	r0, #0
 8026812:	f000 80fa 	beq.w	8026a0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026816:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802681a:	d01b      	beq.n	8026854 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802681c:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8026820:	fb0e fa0a 	mul.w	sl, lr, sl
 8026824:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026828:	fb0e fe03 	mul.w	lr, lr, r3
 802682c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026830:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026834:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026838:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802683c:	4453      	add	r3, sl
 802683e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026842:	0a1b      	lsrs	r3, r3, #8
 8026844:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026848:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802684c:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026850:	ea43 030c 	orr.w	r3, r3, ip
 8026854:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026856:	2cff      	cmp	r4, #255	@ 0xff
 8026858:	d021      	beq.n	802689e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802685a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802685c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026860:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026862:	fb04 fb0b 	mul.w	fp, r4, fp
 8026866:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026868:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802686c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026870:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026872:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026876:	fb04 fa0a 	mul.w	sl, r4, sl
 802687a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802687e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026882:	44de      	add	lr, fp
 8026884:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026888:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802688c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026890:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026894:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026898:	ea4e 040a 	orr.w	r4, lr, sl
 802689c:	940e      	str	r4, [sp, #56]	@ 0x38
 802689e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80268a0:	2cff      	cmp	r4, #255	@ 0xff
 80268a2:	d021      	beq.n	80268e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80268a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80268a6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80268aa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80268ac:	fb04 fb0b 	mul.w	fp, r4, fp
 80268b0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80268b2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80268b6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80268ba:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80268bc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80268c0:	fb04 fa0a 	mul.w	sl, r4, sl
 80268c4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80268c8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80268cc:	44de      	add	lr, fp
 80268ce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80268d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80268d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80268da:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80268de:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80268e2:	ea4e 040a 	orr.w	r4, lr, sl
 80268e6:	940a      	str	r4, [sp, #40]	@ 0x28
 80268e8:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80268ea:	2cff      	cmp	r4, #255	@ 0xff
 80268ec:	d021      	beq.n	8026932 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 80268ee:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80268f0:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80268f4:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80268f6:	fb04 fb0b 	mul.w	fp, r4, fp
 80268fa:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80268fc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026900:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026904:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8026906:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802690a:	fb04 fa0a 	mul.w	sl, r4, sl
 802690e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026912:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026916:	44de      	add	lr, fp
 8026918:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802691c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026920:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026924:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026928:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802692c:	ea4e 040a 	orr.w	r4, lr, sl
 8026930:	940f      	str	r4, [sp, #60]	@ 0x3c
 8026932:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026934:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8026938:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802693c:	fb08 fc0c 	mul.w	ip, r8, ip
 8026940:	fb02 cc0e 	mla	ip, r2, lr, ip
 8026944:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026946:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802694a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802694e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026952:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026954:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026958:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802695a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802695e:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8026962:	fb08 f80e 	mul.w	r8, r8, lr
 8026966:	fb02 8303 	mla	r3, r2, r3, r8
 802696a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802696c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026970:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8026974:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026976:	fb01 330a 	mla	r3, r1, sl, r3
 802697a:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 802697e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026980:	fb09 3901 	mla	r9, r9, r1, r3
 8026984:	4342      	muls	r2, r0
 8026986:	1c50      	adds	r0, r2, #1
 8026988:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802698c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8026990:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026994:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026998:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802699c:	ea4c 0c09 	orr.w	ip, ip, r9
 80269a0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80269a2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80269a6:	883b      	ldrh	r3, [r7, #0]
 80269a8:	fb12 f204 	smulbb	r2, r2, r4
 80269ac:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80269b0:	fa5f fc8c 	uxtb.w	ip, ip
 80269b4:	1219      	asrs	r1, r3, #8
 80269b6:	fb1c fc04 	smulbb	ip, ip, r4
 80269ba:	b2c0      	uxtb	r0, r0
 80269bc:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80269c0:	fb01 2100 	mla	r1, r1, r0, r2
 80269c4:	10da      	asrs	r2, r3, #3
 80269c6:	00db      	lsls	r3, r3, #3
 80269c8:	fb1e fe04 	smulbb	lr, lr, r4
 80269cc:	b2db      	uxtb	r3, r3
 80269ce:	fb03 c300 	mla	r3, r3, r0, ip
 80269d2:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80269d6:	b289      	uxth	r1, r1
 80269d8:	fb02 e200 	mla	r2, r2, r0, lr
 80269dc:	fa1f fc83 	uxth.w	ip, r3
 80269e0:	1c4b      	adds	r3, r1, #1
 80269e2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80269e6:	f10c 0301 	add.w	r3, ip, #1
 80269ea:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80269ee:	b292      	uxth	r2, r2
 80269f0:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80269f4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80269f8:	430b      	orrs	r3, r1
 80269fa:	1c51      	adds	r1, r2, #1
 80269fc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026a00:	0952      	lsrs	r2, r2, #5
 8026a02:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026a06:	4313      	orrs	r3, r2
 8026a08:	803b      	strh	r3, [r7, #0]
 8026a0a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8026a0c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8026a0e:	3702      	adds	r7, #2
 8026a10:	441a      	add	r2, r3
 8026a12:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026a14:	9229      	str	r2, [sp, #164]	@ 0xa4
 8026a16:	441d      	add	r5, r3
 8026a18:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8026a1a:	3b01      	subs	r3, #1
 8026a1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8026a1e:	e694      	b.n	802674a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8026a20:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8026a22:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8026a24:	441c      	add	r4, r3
 8026a26:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026a28:	9429      	str	r4, [sp, #164]	@ 0xa4
 8026a2a:	441d      	add	r5, r3
 8026a2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026a2e:	3b01      	subs	r3, #1
 8026a30:	9309      	str	r3, [sp, #36]	@ 0x24
 8026a32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026a34:	3302      	adds	r3, #2
 8026a36:	930c      	str	r3, [sp, #48]	@ 0x30
 8026a38:	e667      	b.n	802670a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8026a3a:	d024      	beq.n	8026a86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8026a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026a3e:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8026a40:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8026a42:	3b01      	subs	r3, #1
 8026a44:	fb00 4003 	mla	r0, r0, r3, r4
 8026a48:	1400      	asrs	r0, r0, #16
 8026a4a:	f53f ae7b 	bmi.w	8026744 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026a4e:	3901      	subs	r1, #1
 8026a50:	4288      	cmp	r0, r1
 8026a52:	f6bf ae77 	bge.w	8026744 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026a56:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8026a58:	fb01 5303 	mla	r3, r1, r3, r5
 8026a5c:	141b      	asrs	r3, r3, #16
 8026a5e:	f53f ae71 	bmi.w	8026744 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026a62:	3a01      	subs	r2, #1
 8026a64:	4293      	cmp	r3, r2
 8026a66:	f6bf ae6d 	bge.w	8026744 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026a6a:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8026a6e:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8026a72:	f1bb 0f00 	cmp.w	fp, #0
 8026a76:	dc70      	bgt.n	8026b5a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8026a78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026a7a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026a7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026a80:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026a84:	930c      	str	r3, [sp, #48]	@ 0x30
 8026a86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8026a88:	2b00      	cmp	r3, #0
 8026a8a:	f340 81be 	ble.w	8026e0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8026a8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026a92:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026a96:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026a9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026a9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026aa2:	eef0 6a62 	vmov.f32	s13, s5
 8026aa6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026aaa:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026aae:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026ab2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026ab6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026aba:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 8026abe:	eef0 6a43 	vmov.f32	s13, s6
 8026ac2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026ac6:	ee12 2a90 	vmov	r2, s5
 8026aca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026ace:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026ad0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026ad4:	fb92 f3f3 	sdiv	r3, r2, r3
 8026ad8:	ee13 2a10 	vmov	r2, s6
 8026adc:	932b      	str	r3, [sp, #172]	@ 0xac
 8026ade:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026ae0:	ee16 5a90 	vmov	r5, s13
 8026ae4:	fb92 f3f3 	sdiv	r3, r2, r3
 8026ae8:	932c      	str	r3, [sp, #176]	@ 0xb0
 8026aea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8026aec:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8026aee:	3b01      	subs	r3, #1
 8026af0:	9319      	str	r3, [sp, #100]	@ 0x64
 8026af2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026af4:	bf08      	it	eq
 8026af6:	4613      	moveq	r3, r2
 8026af8:	eeb0 3a67 	vmov.f32	s6, s15
 8026afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8026afe:	eef0 2a47 	vmov.f32	s5, s14
 8026b02:	e5f4      	b.n	80266ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8026b04:	2900      	cmp	r1, #0
 8026b06:	f43f ae66 	beq.w	80267d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8026b0a:	f818 0000 	ldrb.w	r0, [r8, r0]
 8026b0e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8026b12:	900a      	str	r0, [sp, #40]	@ 0x28
 8026b14:	0e00      	lsrs	r0, r0, #24
 8026b16:	9013      	str	r0, [sp, #76]	@ 0x4c
 8026b18:	e65d      	b.n	80267d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8026b1a:	f113 0801 	adds.w	r8, r3, #1
 8026b1e:	f53f af74 	bmi.w	8026a0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026b22:	4540      	cmp	r0, r8
 8026b24:	f6ff af71 	blt.w	8026a0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026b28:	f11c 0801 	adds.w	r8, ip, #1
 8026b2c:	f53f af6d 	bmi.w	8026a0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026b30:	45c6      	cmp	lr, r8
 8026b32:	f6ff af6a 	blt.w	8026a0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026b36:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8026b38:	9302      	str	r3, [sp, #8]
 8026b3a:	b200      	sxth	r0, r0
 8026b3c:	fa0f f38e 	sxth.w	r3, lr
 8026b40:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8026b44:	e9cd c203 	strd	ip, r2, [sp, #12]
 8026b48:	9301      	str	r3, [sp, #4]
 8026b4a:	9000      	str	r0, [sp, #0]
 8026b4c:	4633      	mov	r3, r6
 8026b4e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026b50:	4639      	mov	r1, r7
 8026b52:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8026b54:	f7ff fc63 	bl	802641e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8026b58:	e757      	b.n	8026a0a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026b5a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026b5c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8026b5e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026b62:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026b64:	1427      	asrs	r7, r4, #16
 8026b66:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026b6a:	142b      	asrs	r3, r5, #16
 8026b6c:	fb01 7303 	mla	r3, r1, r3, r7
 8026b70:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026b72:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026b76:	18e7      	adds	r7, r4, r3
 8026b78:	5ce3      	ldrb	r3, [r4, r3]
 8026b7a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026b7e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026b82:	2a00      	cmp	r2, #0
 8026b84:	f000 8137 	beq.w	8026df6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8026b88:	f897 e001 	ldrb.w	lr, [r7, #1]
 8026b8c:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8026b90:	9410      	str	r4, [sp, #64]	@ 0x40
 8026b92:	0e24      	lsrs	r4, r4, #24
 8026b94:	9417      	str	r4, [sp, #92]	@ 0x5c
 8026b96:	b170      	cbz	r0, 8026bb6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8026b98:	eb07 0e01 	add.w	lr, r7, r1
 8026b9c:	5c79      	ldrb	r1, [r7, r1]
 8026b9e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026ba2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026ba4:	0e09      	lsrs	r1, r1, #24
 8026ba6:	9114      	str	r1, [sp, #80]	@ 0x50
 8026ba8:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8026bac:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026bb0:	9111      	str	r1, [sp, #68]	@ 0x44
 8026bb2:	0e09      	lsrs	r1, r1, #24
 8026bb4:	9118      	str	r1, [sp, #96]	@ 0x60
 8026bb6:	b292      	uxth	r2, r2
 8026bb8:	b280      	uxth	r0, r0
 8026bba:	fb02 f800 	mul.w	r8, r2, r0
 8026bbe:	0112      	lsls	r2, r2, #4
 8026bc0:	eba2 0e08 	sub.w	lr, r2, r8
 8026bc4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8026bc6:	fa1f fe8e 	uxth.w	lr, lr
 8026bca:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026bce:	fb0e f101 	mul.w	r1, lr, r1
 8026bd2:	b280      	uxth	r0, r0
 8026bd4:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8026bd8:	1a12      	subs	r2, r2, r0
 8026bda:	b292      	uxth	r2, r2
 8026bdc:	fb02 110c 	mla	r1, r2, ip, r1
 8026be0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026be2:	fb00 1104 	mla	r1, r0, r4, r1
 8026be6:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8026be8:	fb08 1104 	mla	r1, r8, r4, r1
 8026bec:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026bf0:	2900      	cmp	r1, #0
 8026bf2:	f000 80f5 	beq.w	8026de0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8026bf6:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8026bfa:	d019      	beq.n	8026c30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8026bfc:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8026c00:	fb0c fa0a 	mul.w	sl, ip, sl
 8026c04:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026c08:	fb0c fc03 	mul.w	ip, ip, r3
 8026c0c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026c10:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026c14:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026c18:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8026c1c:	4453      	add	r3, sl
 8026c1e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026c22:	0a1b      	lsrs	r3, r3, #8
 8026c24:	0a3f      	lsrs	r7, r7, #8
 8026c26:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026c2a:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8026c2e:	433b      	orrs	r3, r7
 8026c30:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8026c32:	2cff      	cmp	r4, #255	@ 0xff
 8026c34:	d020      	beq.n	8026c78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8026c36:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026c38:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026c3c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8026c3e:	4367      	muls	r7, r4
 8026c40:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026c42:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026c46:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026c4a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8026c4c:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026c50:	fb04 fa0a 	mul.w	sl, r4, sl
 8026c54:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026c58:	44bc      	add	ip, r7
 8026c5a:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026c5e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026c62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026c66:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c6a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026c6e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026c72:	ea4c 040a 	orr.w	r4, ip, sl
 8026c76:	9410      	str	r4, [sp, #64]	@ 0x40
 8026c78:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026c7a:	2cff      	cmp	r4, #255	@ 0xff
 8026c7c:	d020      	beq.n	8026cc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8026c7e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026c80:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026c84:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026c86:	4367      	muls	r7, r4
 8026c88:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026c8a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026c8e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026c92:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026c94:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026c98:	fb04 fa0a 	mul.w	sl, r4, sl
 8026c9c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026ca0:	44bc      	add	ip, r7
 8026ca2:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026ca6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026caa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026cae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026cb2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026cb6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026cba:	ea4c 040a 	orr.w	r4, ip, sl
 8026cbe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026cc0:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8026cc2:	2cff      	cmp	r4, #255	@ 0xff
 8026cc4:	d020      	beq.n	8026d08 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8026cc6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026cc8:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026ccc:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8026cce:	4367      	muls	r7, r4
 8026cd0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026cd2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026cd6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026cda:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8026cdc:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026ce0:	fb04 fa0a 	mul.w	sl, r4, sl
 8026ce4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026ce8:	44bc      	add	ip, r7
 8026cea:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026cee:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026cf2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026cf6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026cfa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026cfe:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026d02:	ea4c 040a 	orr.w	r4, ip, sl
 8026d06:	9411      	str	r4, [sp, #68]	@ 0x44
 8026d08:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026d0a:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8026d0e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026d12:	fb0e f707 	mul.w	r7, lr, r7
 8026d16:	fb02 770c 	mla	r7, r2, ip, r7
 8026d1a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026d1c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026d20:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026d24:	fb00 770c 	mla	r7, r0, ip, r7
 8026d28:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026d2a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026d2e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026d30:	fb08 770c 	mla	r7, r8, ip, r7
 8026d34:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8026d38:	fb0e fe0c 	mul.w	lr, lr, ip
 8026d3c:	fb02 e303 	mla	r3, r2, r3, lr
 8026d40:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8026d42:	0a3f      	lsrs	r7, r7, #8
 8026d44:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8026d48:	fb00 330a 	mla	r3, r0, sl, r3
 8026d4c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026d4e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8026d52:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8026d56:	fb08 3c0c 	mla	ip, r8, ip, r3
 8026d5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026d5c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026d60:	434b      	muls	r3, r1
 8026d62:	1c59      	adds	r1, r3, #1
 8026d64:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026d68:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026d6c:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026d70:	ea47 070c 	orr.w	r7, r7, ip
 8026d74:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026d76:	0c3b      	lsrs	r3, r7, #16
 8026d78:	f8b9 0000 	ldrh.w	r0, [r9]
 8026d7c:	fb13 f304 	smulbb	r3, r3, r4
 8026d80:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8026d84:	b2ff      	uxtb	r7, r7
 8026d86:	1202      	asrs	r2, r0, #8
 8026d88:	fb17 f704 	smulbb	r7, r7, r4
 8026d8c:	b2c9      	uxtb	r1, r1
 8026d8e:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8026d92:	fb02 3201 	mla	r2, r2, r1, r3
 8026d96:	10c3      	asrs	r3, r0, #3
 8026d98:	00c0      	lsls	r0, r0, #3
 8026d9a:	fb1c fc04 	smulbb	ip, ip, r4
 8026d9e:	b2c0      	uxtb	r0, r0
 8026da0:	fb00 7001 	mla	r0, r0, r1, r7
 8026da4:	b292      	uxth	r2, r2
 8026da6:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8026daa:	fb03 c301 	mla	r3, r3, r1, ip
 8026dae:	f102 0c01 	add.w	ip, r2, #1
 8026db2:	b280      	uxth	r0, r0
 8026db4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026db8:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 8026dbc:	1c42      	adds	r2, r0, #1
 8026dbe:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026dc2:	b29b      	uxth	r3, r3
 8026dc4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8026dc8:	ea42 020c 	orr.w	r2, r2, ip
 8026dcc:	f103 0c01 	add.w	ip, r3, #1
 8026dd0:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8026dd4:	095b      	lsrs	r3, r3, #5
 8026dd6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026dda:	431a      	orrs	r2, r3
 8026ddc:	f8a9 2000 	strh.w	r2, [r9]
 8026de0:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8026de2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8026de4:	f109 0902 	add.w	r9, r9, #2
 8026de8:	441a      	add	r2, r3
 8026dea:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026dec:	9229      	str	r2, [sp, #164]	@ 0xa4
 8026dee:	441d      	add	r5, r3
 8026df0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026df4:	e63d      	b.n	8026a72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8026df6:	2800      	cmp	r0, #0
 8026df8:	f43f aedd 	beq.w	8026bb6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8026dfc:	5c79      	ldrb	r1, [r7, r1]
 8026dfe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026e02:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026e04:	0e09      	lsrs	r1, r1, #24
 8026e06:	9114      	str	r1, [sp, #80]	@ 0x50
 8026e08:	e6d5      	b.n	8026bb6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8026e0a:	b01f      	add	sp, #124	@ 0x7c
 8026e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026e10 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8026e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e14:	b089      	sub	sp, #36	@ 0x24
 8026e16:	9101      	str	r1, [sp, #4]
 8026e18:	9801      	ldr	r0, [sp, #4]
 8026e1a:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 8026e1e:	8800      	ldrh	r0, [r0, #0]
 8026e20:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	@ 0x50
 8026e24:	1206      	asrs	r6, r0, #8
 8026e26:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8026e2a:	9602      	str	r6, [sp, #8]
 8026e2c:	10c6      	asrs	r6, r0, #3
 8026e2e:	00c0      	lsls	r0, r0, #3
 8026e30:	b2c0      	uxtb	r0, r0
 8026e32:	9004      	str	r0, [sp, #16]
 8026e34:	fb07 100c 	mla	r0, r7, ip, r1
 8026e38:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8026e3c:	2f00      	cmp	r7, #0
 8026e3e:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
 8026e42:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8026e46:	f89d 405c 	ldrb.w	r4, [sp, #92]	@ 0x5c
 8026e4a:	9603      	str	r6, [sp, #12]
 8026e4c:	eb02 0e00 	add.w	lr, r2, r0
 8026e50:	f2c0 810a 	blt.w	8027068 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8026e54:	45b8      	cmp	r8, r7
 8026e56:	f340 8107 	ble.w	8027068 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8026e5a:	2900      	cmp	r1, #0
 8026e5c:	f2c0 8102 	blt.w	8027064 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8026e60:	458c      	cmp	ip, r1
 8026e62:	f340 80ff 	ble.w	8027064 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8026e66:	5c12      	ldrb	r2, [r2, r0]
 8026e68:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8026e6c:	1c4a      	adds	r2, r1, #1
 8026e6e:	f100 80fe 	bmi.w	802706e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8026e72:	4594      	cmp	ip, r2
 8026e74:	f340 80fb 	ble.w	802706e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8026e78:	2d00      	cmp	r5, #0
 8026e7a:	f000 80fa 	beq.w	8027072 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8026e7e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8026e82:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8026e86:	3701      	adds	r7, #1
 8026e88:	f100 80f7 	bmi.w	802707a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8026e8c:	45b8      	cmp	r8, r7
 8026e8e:	f340 80f4 	ble.w	802707a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8026e92:	2c00      	cmp	r4, #0
 8026e94:	f000 80f4 	beq.w	8027080 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8026e98:	2900      	cmp	r1, #0
 8026e9a:	eb0e 020c 	add.w	r2, lr, ip
 8026e9e:	f2c0 80ea 	blt.w	8027076 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8026ea2:	458c      	cmp	ip, r1
 8026ea4:	f340 80e7 	ble.w	8027076 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8026ea8:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8026eac:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8026eb0:	3101      	adds	r1, #1
 8026eb2:	f100 80e8 	bmi.w	8027086 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8026eb6:	458c      	cmp	ip, r1
 8026eb8:	f340 80e5 	ble.w	8027086 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8026ebc:	2d00      	cmp	r5, #0
 8026ebe:	f000 80e4 	beq.w	802708a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8026ec2:	7852      	ldrb	r2, [r2, #1]
 8026ec4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026ec8:	0e0b      	lsrs	r3, r1, #24
 8026eca:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8026ece:	9300      	str	r3, [sp, #0]
 8026ed0:	b2a4      	uxth	r4, r4
 8026ed2:	b2ab      	uxth	r3, r5
 8026ed4:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8026ed8:	fb03 f904 	mul.w	r9, r3, r4
 8026edc:	fb0a f505 	mul.w	r5, sl, r5
 8026ee0:	011b      	lsls	r3, r3, #4
 8026ee2:	eba3 0e09 	sub.w	lr, r3, r9
 8026ee6:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 8026eea:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 8026eee:	0a28      	lsrs	r0, r5, #8
 8026ef0:	fb0a f303 	mul.w	r3, sl, r3
 8026ef4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026ef8:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8026efc:	4405      	add	r5, r0
 8026efe:	0a2d      	lsrs	r5, r5, #8
 8026f00:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 8026f04:	9005      	str	r0, [sp, #20]
 8026f06:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 8026f0a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026f0e:	0a1b      	lsrs	r3, r3, #8
 8026f10:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8026f14:	9306      	str	r3, [sp, #24]
 8026f16:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 8026f1a:	fb0b f303 	mul.w	r3, fp, r3
 8026f1e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8026f22:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8026f26:	fb0b f606 	mul.w	r6, fp, r6
 8026f2a:	f007 1cff 	and.w	ip, r7, #16711935	@ 0xff00ff
 8026f2e:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8026f32:	fb08 f707 	mul.w	r7, r8, r7
 8026f36:	0a1d      	lsrs	r5, r3, #8
 8026f38:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026f3c:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8026f40:	441d      	add	r5, r3
 8026f42:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 8026f46:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8026f4a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8026f4e:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8026f52:	fb08 fc0c 	mul.w	ip, r8, ip
 8026f56:	0a1b      	lsrs	r3, r3, #8
 8026f58:	9307      	str	r3, [sp, #28]
 8026f5a:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 8026f5e:	0e0b      	lsrs	r3, r1, #24
 8026f60:	0a2d      	lsrs	r5, r5, #8
 8026f62:	fa1f fe8e 	uxth.w	lr, lr
 8026f66:	435f      	muls	r7, r3
 8026f68:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026f6c:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8026f70:	fb05 f50e 	mul.w	r5, r5, lr
 8026f74:	b2a4      	uxth	r4, r4
 8026f76:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8026f7a:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8026f7e:	4359      	muls	r1, r3
 8026f80:	1b12      	subs	r2, r2, r4
 8026f82:	9b05      	ldr	r3, [sp, #20]
 8026f84:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026f88:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026f8c:	b292      	uxth	r2, r2
 8026f8e:	4460      	add	r0, ip
 8026f90:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026f94:	fb03 5502 	mla	r5, r3, r2, r5
 8026f98:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026f9c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026fa0:	44bc      	add	ip, r7
 8026fa2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026fa6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026faa:	0a36      	lsrs	r6, r6, #8
 8026fac:	fb0c 5509 	mla	r5, ip, r9, r5
 8026fb0:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8026fb4:	fb0e f606 	mul.w	r6, lr, r6
 8026fb8:	9b06      	ldr	r3, [sp, #24]
 8026fba:	0a00      	lsrs	r0, r0, #8
 8026fbc:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026fc0:	fb00 5504 	mla	r5, r0, r4, r5
 8026fc4:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 8026fc8:	fb02 6000 	mla	r0, r2, r0, r6
 8026fcc:	f501 7780 	add.w	r7, r1, #256	@ 0x100
 8026fd0:	fb0e fe0b 	mul.w	lr, lr, fp
 8026fd4:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8026fd8:	0a09      	lsrs	r1, r1, #8
 8026fda:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8026fde:	fb09 0001 	mla	r0, r9, r1, r0
 8026fe2:	fb02 e20a 	mla	r2, r2, sl, lr
 8026fe6:	9b07      	ldr	r3, [sp, #28]
 8026fe8:	0a2d      	lsrs	r5, r5, #8
 8026fea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026fee:	fb04 0003 	mla	r0, r4, r3, r0
 8026ff2:	fb04 2408 	mla	r4, r4, r8, r2
 8026ff6:	9b00      	ldr	r3, [sp, #0]
 8026ff8:	9a04      	ldr	r2, [sp, #16]
 8026ffa:	fb09 4903 	mla	r9, r9, r3, r4
 8026ffe:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8027002:	9b02      	ldr	r3, [sp, #8]
 8027004:	fa5f f989 	uxtb.w	r9, r9
 8027008:	fb03 f109 	mul.w	r1, r3, r9
 802700c:	9b03      	ldr	r3, [sp, #12]
 802700e:	0a00      	lsrs	r0, r0, #8
 8027010:	fb03 f309 	mul.w	r3, r3, r9
 8027014:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8027018:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802701c:	4305      	orrs	r5, r0
 802701e:	fb02 f909 	mul.w	r9, r2, r9
 8027022:	1c58      	adds	r0, r3, #1
 8027024:	1c4a      	adds	r2, r1, #1
 8027026:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802702a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802702e:	0a2b      	lsrs	r3, r5, #8
 8027030:	0c2a      	lsrs	r2, r5, #16
 8027032:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027036:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 802703a:	00db      	lsls	r3, r3, #3
 802703c:	0212      	lsls	r2, r2, #8
 802703e:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8027042:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027046:	4313      	orrs	r3, r2
 8027048:	f109 0201 	add.w	r2, r9, #1
 802704c:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8027050:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8027054:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8027058:	431d      	orrs	r5, r3
 802705a:	9b01      	ldr	r3, [sp, #4]
 802705c:	801d      	strh	r5, [r3, #0]
 802705e:	b009      	add	sp, #36	@ 0x24
 8027060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027064:	2000      	movs	r0, #0
 8027066:	e701      	b.n	8026e6c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8027068:	2600      	movs	r6, #0
 802706a:	4630      	mov	r0, r6
 802706c:	e70b      	b.n	8026e86 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 802706e:	2600      	movs	r6, #0
 8027070:	e709      	b.n	8026e86 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8027072:	462e      	mov	r6, r5
 8027074:	e707      	b.n	8026e86 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8027076:	2700      	movs	r7, #0
 8027078:	e71a      	b.n	8026eb0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 802707a:	2100      	movs	r1, #0
 802707c:	460f      	mov	r7, r1
 802707e:	e723      	b.n	8026ec8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8027080:	4621      	mov	r1, r4
 8027082:	4627      	mov	r7, r4
 8027084:	e720      	b.n	8026ec8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8027086:	2100      	movs	r1, #0
 8027088:	e71e      	b.n	8026ec8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802708a:	4629      	mov	r1, r5
 802708c:	e71c      	b.n	8026ec8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
	...

08027090 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027094:	b09b      	sub	sp, #108	@ 0x6c
 8027096:	9218      	str	r2, [sp, #96]	@ 0x60
 8027098:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802709a:	9019      	str	r0, [sp, #100]	@ 0x64
 802709c:	6850      	ldr	r0, [r2, #4]
 802709e:	9116      	str	r1, [sp, #88]	@ 0x58
 80270a0:	9307      	str	r3, [sp, #28]
 80270a2:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80270a6:	fb00 1303 	mla	r3, r0, r3, r1
 80270aa:	6812      	ldr	r2, [r2, #0]
 80270ac:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 80270ae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80270b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80270b4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80270b6:	681b      	ldr	r3, [r3, #0]
 80270b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80270ba:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80270bc:	685e      	ldr	r6, [r3, #4]
 80270be:	3604      	adds	r6, #4
 80270c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80270c2:	2b00      	cmp	r3, #0
 80270c4:	dc03      	bgt.n	80270ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80270c6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80270c8:	2b00      	cmp	r3, #0
 80270ca:	f340 8373 	ble.w	80277b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80270ce:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80270d0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80270d4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80270d8:	1e48      	subs	r0, r1, #1
 80270da:	1e57      	subs	r7, r2, #1
 80270dc:	9b07      	ldr	r3, [sp, #28]
 80270de:	2b00      	cmp	r3, #0
 80270e0:	f340 818f 	ble.w	8027402 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80270e4:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80270e6:	142b      	asrs	r3, r5, #16
 80270e8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80270ec:	d406      	bmi.n	80270fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80270ee:	4584      	cmp	ip, r0
 80270f0:	da04      	bge.n	80270fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80270f2:	2b00      	cmp	r3, #0
 80270f4:	db02      	blt.n	80270fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80270f6:	42bb      	cmp	r3, r7
 80270f8:	f2c0 8184 	blt.w	8027404 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80270fc:	f11c 0c01 	adds.w	ip, ip, #1
 8027100:	f100 8172 	bmi.w	80273e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8027104:	4561      	cmp	r1, ip
 8027106:	f2c0 816f 	blt.w	80273e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802710a:	3301      	adds	r3, #1
 802710c:	f100 816c 	bmi.w	80273e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8027110:	429a      	cmp	r2, r3
 8027112:	f2c0 8169 	blt.w	80273e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8027116:	9b07      	ldr	r3, [sp, #28]
 8027118:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802711a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802711c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802711e:	2b00      	cmp	r3, #0
 8027120:	f340 818e 	ble.w	8027440 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8027124:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027126:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802712a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802712e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027130:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8027134:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8027138:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802713a:	141b      	asrs	r3, r3, #16
 802713c:	f100 81d1 	bmi.w	80274e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8027140:	f101 38ff 	add.w	r8, r1, #4294967295
 8027144:	4543      	cmp	r3, r8
 8027146:	f280 81cc 	bge.w	80274e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802714a:	f1bc 0f00 	cmp.w	ip, #0
 802714e:	f2c0 81c8 	blt.w	80274e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8027152:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027156:	45c4      	cmp	ip, r8
 8027158:	f280 81c3 	bge.w	80274e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802715c:	b209      	sxth	r1, r1
 802715e:	fb0c 3301 	mla	r3, ip, r1, r3
 8027162:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8027164:	eb04 0803 	add.w	r8, r4, r3
 8027168:	5ce3      	ldrb	r3, [r4, r3]
 802716a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802716e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8027172:	2a00      	cmp	r2, #0
 8027174:	f000 81aa 	beq.w	80274cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8027178:	f898 c001 	ldrb.w	ip, [r8, #1]
 802717c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8027180:	940b      	str	r4, [sp, #44]	@ 0x2c
 8027182:	0e24      	lsrs	r4, r4, #24
 8027184:	9412      	str	r4, [sp, #72]	@ 0x48
 8027186:	b178      	cbz	r0, 80271a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8027188:	eb08 0c01 	add.w	ip, r8, r1
 802718c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8027190:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027194:	9108      	str	r1, [sp, #32]
 8027196:	0e09      	lsrs	r1, r1, #24
 8027198:	9110      	str	r1, [sp, #64]	@ 0x40
 802719a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802719e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80271a2:	910c      	str	r1, [sp, #48]	@ 0x30
 80271a4:	0e09      	lsrs	r1, r1, #24
 80271a6:	9113      	str	r1, [sp, #76]	@ 0x4c
 80271a8:	b292      	uxth	r2, r2
 80271aa:	b280      	uxth	r0, r0
 80271ac:	fb02 f900 	mul.w	r9, r2, r0
 80271b0:	0112      	lsls	r2, r2, #4
 80271b2:	eba2 0809 	sub.w	r8, r2, r9
 80271b6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80271b8:	fa1f f888 	uxth.w	r8, r8
 80271bc:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80271c0:	fb08 f101 	mul.w	r1, r8, r1
 80271c4:	b280      	uxth	r0, r0
 80271c6:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80271ca:	1a12      	subs	r2, r2, r0
 80271cc:	b292      	uxth	r2, r2
 80271ce:	fb02 110e 	mla	r1, r2, lr, r1
 80271d2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80271d4:	fb00 1104 	mla	r1, r0, r4, r1
 80271d8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80271da:	fb09 1104 	mla	r1, r9, r4, r1
 80271de:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80271e2:	2900      	cmp	r1, #0
 80271e4:	f000 80f5 	beq.w	80273d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80271e8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80271ec:	d01b      	beq.n	8027226 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80271ee:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80271f2:	fb0e fa0a 	mul.w	sl, lr, sl
 80271f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80271fa:	fb0e fe03 	mul.w	lr, lr, r3
 80271fe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027202:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8027206:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802720a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802720e:	4453      	add	r3, sl
 8027210:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027214:	0a1b      	lsrs	r3, r3, #8
 8027216:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802721a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802721e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8027222:	ea43 030c 	orr.w	r3, r3, ip
 8027226:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027228:	2cff      	cmp	r4, #255	@ 0xff
 802722a:	d021      	beq.n	8027270 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 802722c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802722e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8027232:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027234:	fb04 fb0b 	mul.w	fp, r4, fp
 8027238:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802723a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802723e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8027242:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027244:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027248:	fb04 fa0a 	mul.w	sl, r4, sl
 802724c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027250:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027254:	44de      	add	lr, fp
 8027256:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802725a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802725e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027262:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027266:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802726a:	ea4e 040a 	orr.w	r4, lr, sl
 802726e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8027270:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8027272:	2cff      	cmp	r4, #255	@ 0xff
 8027274:	d021      	beq.n	80272ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8027276:	9c08      	ldr	r4, [sp, #32]
 8027278:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802727c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802727e:	fb04 fb0b 	mul.w	fp, r4, fp
 8027282:	9c08      	ldr	r4, [sp, #32]
 8027284:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027288:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802728c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802728e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027292:	fb04 fa0a 	mul.w	sl, r4, sl
 8027296:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802729a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802729e:	44de      	add	lr, fp
 80272a0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80272a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80272a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80272ac:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80272b0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80272b4:	ea4e 040a 	orr.w	r4, lr, sl
 80272b8:	9408      	str	r4, [sp, #32]
 80272ba:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80272bc:	2cff      	cmp	r4, #255	@ 0xff
 80272be:	d021      	beq.n	8027304 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 80272c0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80272c2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80272c6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80272c8:	fb04 fb0b 	mul.w	fp, r4, fp
 80272cc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80272ce:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80272d2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80272d6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80272d8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80272dc:	fb04 fa0a 	mul.w	sl, r4, sl
 80272e0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80272e4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80272e8:	44de      	add	lr, fp
 80272ea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80272ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80272f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80272f6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80272fa:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80272fe:	ea4e 040a 	orr.w	r4, lr, sl
 8027302:	940c      	str	r4, [sp, #48]	@ 0x30
 8027304:	43c9      	mvns	r1, r1
 8027306:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8027308:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802730c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027310:	fb08 fc0c 	mul.w	ip, r8, ip
 8027314:	fb02 cc0e 	mla	ip, r2, lr, ip
 8027318:	9c08      	ldr	r4, [sp, #32]
 802731a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802731e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8027322:	fb00 cc0e 	mla	ip, r0, lr, ip
 8027326:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027328:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802732c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802732e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027332:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8027336:	fb08 f80e 	mul.w	r8, r8, lr
 802733a:	fb02 8303 	mla	r3, r2, r3, r8
 802733e:	9a08      	ldr	r2, [sp, #32]
 8027340:	f8b7 8000 	ldrh.w	r8, [r7]
 8027344:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8027348:	fb00 330a 	mla	r3, r0, sl, r3
 802734c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802734e:	fa5f fe81 	uxtb.w	lr, r1
 8027352:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8027356:	fb09 3900 	mla	r9, r9, r0, r3
 802735a:	ea4f 2228 	mov.w	r2, r8, asr #8
 802735e:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8027362:	fb02 f20e 	mul.w	r2, r2, lr
 8027366:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802736a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802736e:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8027372:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027376:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802737a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802737e:	ea4c 0c09 	orr.w	ip, ip, r9
 8027382:	fb00 f00e 	mul.w	r0, r0, lr
 8027386:	1c53      	adds	r3, r2, #1
 8027388:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802738c:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8027390:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027394:	4a62      	ldr	r2, [pc, #392]	@ (8027520 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8027396:	b2db      	uxtb	r3, r3
 8027398:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 802739c:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 80273a0:	b2c9      	uxtb	r1, r1
 80273a2:	1c43      	adds	r3, r0, #1
 80273a4:	fb01 f10e 	mul.w	r1, r1, lr
 80273a8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80273ac:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80273b0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80273b4:	00db      	lsls	r3, r3, #3
 80273b6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80273ba:	4313      	orrs	r3, r2
 80273bc:	1c4a      	adds	r2, r1, #1
 80273be:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80273c2:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80273c6:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80273ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80273ce:	f8a7 c000 	strh.w	ip, [r7]
 80273d2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80273d4:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80273d6:	3702      	adds	r7, #2
 80273d8:	441a      	add	r2, r3
 80273da:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80273dc:	9225      	str	r2, [sp, #148]	@ 0x94
 80273de:	441d      	add	r5, r3
 80273e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80273e2:	3b01      	subs	r3, #1
 80273e4:	9317      	str	r3, [sp, #92]	@ 0x5c
 80273e6:	e699      	b.n	802711c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80273e8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80273ea:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80273ec:	441c      	add	r4, r3
 80273ee:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80273f0:	9425      	str	r4, [sp, #148]	@ 0x94
 80273f2:	441d      	add	r5, r3
 80273f4:	9b07      	ldr	r3, [sp, #28]
 80273f6:	3b01      	subs	r3, #1
 80273f8:	9307      	str	r3, [sp, #28]
 80273fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80273fc:	3302      	adds	r3, #2
 80273fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8027400:	e66c      	b.n	80270dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8027402:	d024      	beq.n	802744e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8027404:	9b07      	ldr	r3, [sp, #28]
 8027406:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8027408:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802740a:	3b01      	subs	r3, #1
 802740c:	fb00 4003 	mla	r0, r0, r3, r4
 8027410:	1400      	asrs	r0, r0, #16
 8027412:	f53f ae80 	bmi.w	8027116 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8027416:	3901      	subs	r1, #1
 8027418:	4288      	cmp	r0, r1
 802741a:	f6bf ae7c 	bge.w	8027116 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802741e:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8027420:	fb01 5303 	mla	r3, r1, r3, r5
 8027424:	141b      	asrs	r3, r3, #16
 8027426:	f53f ae76 	bmi.w	8027116 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802742a:	3a01      	subs	r2, #1
 802742c:	4293      	cmp	r3, r2
 802742e:	f6bf ae72 	bge.w	8027116 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8027432:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027436:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 802743a:	f1bb 0f00 	cmp.w	fp, #0
 802743e:	dc71      	bgt.n	8027524 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8027440:	9b07      	ldr	r3, [sp, #28]
 8027442:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027446:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027448:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802744c:	930a      	str	r3, [sp, #40]	@ 0x28
 802744e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027450:	2b00      	cmp	r3, #0
 8027452:	f340 81af 	ble.w	80277b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8027456:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802745a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802745e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027462:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027466:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802746a:	eef0 6a62 	vmov.f32	s13, s5
 802746e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027472:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027476:	ee61 7a27 	vmul.f32	s15, s2, s15
 802747a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802747e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027482:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 8027486:	eef0 6a43 	vmov.f32	s13, s6
 802748a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802748e:	ee12 2a90 	vmov	r2, s5
 8027492:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027496:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027498:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802749c:	fb92 f3f3 	sdiv	r3, r2, r3
 80274a0:	ee13 2a10 	vmov	r2, s6
 80274a4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80274a6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80274a8:	ee16 5a90 	vmov	r5, s13
 80274ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80274b0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80274b2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80274b4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80274b6:	3b01      	subs	r3, #1
 80274b8:	9316      	str	r3, [sp, #88]	@ 0x58
 80274ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80274bc:	bf08      	it	eq
 80274be:	4613      	moveq	r3, r2
 80274c0:	eeb0 3a67 	vmov.f32	s6, s15
 80274c4:	9307      	str	r3, [sp, #28]
 80274c6:	eef0 2a47 	vmov.f32	s5, s14
 80274ca:	e5f9      	b.n	80270c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80274cc:	2800      	cmp	r0, #0
 80274ce:	f43f ae6b 	beq.w	80271a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80274d2:	f818 1001 	ldrb.w	r1, [r8, r1]
 80274d6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80274da:	9108      	str	r1, [sp, #32]
 80274dc:	0e09      	lsrs	r1, r1, #24
 80274de:	9110      	str	r1, [sp, #64]	@ 0x40
 80274e0:	e662      	b.n	80271a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80274e2:	f113 0801 	adds.w	r8, r3, #1
 80274e6:	f53f af74 	bmi.w	80273d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80274ea:	4541      	cmp	r1, r8
 80274ec:	f6ff af71 	blt.w	80273d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80274f0:	f11c 0801 	adds.w	r8, ip, #1
 80274f4:	f53f af6d 	bmi.w	80273d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80274f8:	45c6      	cmp	lr, r8
 80274fa:	f6ff af6a 	blt.w	80273d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80274fe:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8027502:	b209      	sxth	r1, r1
 8027504:	fa0f f38e 	sxth.w	r3, lr
 8027508:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802750c:	9301      	str	r3, [sp, #4]
 802750e:	9100      	str	r1, [sp, #0]
 8027510:	4633      	mov	r3, r6
 8027512:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027514:	4639      	mov	r1, r7
 8027516:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8027518:	f7ff fc7a 	bl	8026e10 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 802751c:	e759      	b.n	80273d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802751e:	bf00      	nop
 8027520:	fffff800 	.word	0xfffff800
 8027524:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027526:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8027528:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802752c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802752e:	1427      	asrs	r7, r4, #16
 8027530:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027534:	142b      	asrs	r3, r5, #16
 8027536:	fb01 7303 	mla	r3, r1, r3, r7
 802753a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802753c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8027540:	18e7      	adds	r7, r4, r3
 8027542:	5ce3      	ldrb	r3, [r4, r3]
 8027544:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8027548:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802754c:	2a00      	cmp	r2, #0
 802754e:	f000 8127 	beq.w	80277a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8027552:	f897 e001 	ldrb.w	lr, [r7, #1]
 8027556:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802755a:	940d      	str	r4, [sp, #52]	@ 0x34
 802755c:	0e24      	lsrs	r4, r4, #24
 802755e:	9414      	str	r4, [sp, #80]	@ 0x50
 8027560:	b170      	cbz	r0, 8027580 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8027562:	eb07 0e01 	add.w	lr, r7, r1
 8027566:	5c79      	ldrb	r1, [r7, r1]
 8027568:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802756c:	9109      	str	r1, [sp, #36]	@ 0x24
 802756e:	0e09      	lsrs	r1, r1, #24
 8027570:	9111      	str	r1, [sp, #68]	@ 0x44
 8027572:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8027576:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802757a:	910e      	str	r1, [sp, #56]	@ 0x38
 802757c:	0e09      	lsrs	r1, r1, #24
 802757e:	9115      	str	r1, [sp, #84]	@ 0x54
 8027580:	b292      	uxth	r2, r2
 8027582:	b280      	uxth	r0, r0
 8027584:	fb02 f800 	mul.w	r8, r2, r0
 8027588:	0112      	lsls	r2, r2, #4
 802758a:	eba2 0e08 	sub.w	lr, r2, r8
 802758e:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8027592:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027594:	fa1f fe8e 	uxth.w	lr, lr
 8027598:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802759c:	fb0e f202 	mul.w	r2, lr, r2
 80275a0:	b280      	uxth	r0, r0
 80275a2:	1a09      	subs	r1, r1, r0
 80275a4:	b289      	uxth	r1, r1
 80275a6:	fb01 220c 	mla	r2, r1, ip, r2
 80275aa:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80275ac:	fb00 2204 	mla	r2, r0, r4, r2
 80275b0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80275b2:	fb08 2204 	mla	r2, r8, r4, r2
 80275b6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80275ba:	2a00      	cmp	r2, #0
 80275bc:	f000 80e5 	beq.w	802778a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80275c0:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80275c4:	d019      	beq.n	80275fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 80275c6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80275ca:	fb0c fa0a 	mul.w	sl, ip, sl
 80275ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80275d2:	fb0c fc03 	mul.w	ip, ip, r3
 80275d6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80275da:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80275de:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80275e2:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80275e6:	4453      	add	r3, sl
 80275e8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80275ec:	0a1b      	lsrs	r3, r3, #8
 80275ee:	0a3f      	lsrs	r7, r7, #8
 80275f0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80275f4:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80275f8:	433b      	orrs	r3, r7
 80275fa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80275fc:	2cff      	cmp	r4, #255	@ 0xff
 80275fe:	d020      	beq.n	8027642 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8027600:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027602:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8027606:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8027608:	4367      	muls	r7, r4
 802760a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802760c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027610:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8027614:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8027616:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802761a:	fb04 fa0a 	mul.w	sl, r4, sl
 802761e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027622:	44bc      	add	ip, r7
 8027624:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027628:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802762c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027630:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027634:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027638:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802763c:	ea4c 040a 	orr.w	r4, ip, sl
 8027640:	940d      	str	r4, [sp, #52]	@ 0x34
 8027642:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8027644:	2cff      	cmp	r4, #255	@ 0xff
 8027646:	d020      	beq.n	802768a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8027648:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802764a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802764e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8027650:	4367      	muls	r7, r4
 8027652:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8027654:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027658:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802765c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802765e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027662:	fb04 fa0a 	mul.w	sl, r4, sl
 8027666:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802766a:	44bc      	add	ip, r7
 802766c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027670:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027674:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027678:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802767c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027680:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027684:	ea4c 040a 	orr.w	r4, ip, sl
 8027688:	9409      	str	r4, [sp, #36]	@ 0x24
 802768a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802768c:	2cff      	cmp	r4, #255	@ 0xff
 802768e:	d020      	beq.n	80276d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8027690:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027692:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8027696:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8027698:	4367      	muls	r7, r4
 802769a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802769c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80276a0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80276a4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80276a6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80276aa:	fb04 fa0a 	mul.w	sl, r4, sl
 80276ae:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80276b2:	44bc      	add	ip, r7
 80276b4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80276b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80276bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80276c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80276c4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80276c8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80276cc:	ea4c 040a 	orr.w	r4, ip, sl
 80276d0:	940e      	str	r4, [sp, #56]	@ 0x38
 80276d2:	43d2      	mvns	r2, r2
 80276d4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80276d6:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80276da:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80276de:	fb0e f707 	mul.w	r7, lr, r7
 80276e2:	fb01 770c 	mla	r7, r1, ip, r7
 80276e6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80276e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80276ec:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80276f0:	fb00 770c 	mla	r7, r0, ip, r7
 80276f4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80276f6:	b2d2      	uxtb	r2, r2
 80276f8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80276fc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80276fe:	fb08 770c 	mla	r7, r8, ip, r7
 8027702:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8027706:	fb0e fe0c 	mul.w	lr, lr, ip
 802770a:	fb01 e303 	mla	r3, r1, r3, lr
 802770e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8027710:	0a3f      	lsrs	r7, r7, #8
 8027712:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8027716:	fb00 330a 	mla	r3, r0, sl, r3
 802771a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802771c:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8027720:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8027724:	fb08 3c0c 	mla	ip, r8, ip, r3
 8027728:	f8b9 3000 	ldrh.w	r3, [r9]
 802772c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027730:	1218      	asrs	r0, r3, #8
 8027732:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8027736:	4350      	muls	r0, r2
 8027738:	10d9      	asrs	r1, r3, #3
 802773a:	00db      	lsls	r3, r3, #3
 802773c:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8027740:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8027744:	b2db      	uxtb	r3, r3
 8027746:	ea47 070c 	orr.w	r7, r7, ip
 802774a:	4351      	muls	r1, r2
 802774c:	4353      	muls	r3, r2
 802774e:	1c42      	adds	r2, r0, #1
 8027750:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027754:	0c3a      	lsrs	r2, r7, #16
 8027756:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802775a:	4a18      	ldr	r2, [pc, #96]	@ (80277bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 802775c:	b2c0      	uxtb	r0, r0
 802775e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8027762:	1c4a      	adds	r2, r1, #1
 8027764:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027768:	0a3a      	lsrs	r2, r7, #8
 802776a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802776e:	00c9      	lsls	r1, r1, #3
 8027770:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027774:	4301      	orrs	r1, r0
 8027776:	1c58      	adds	r0, r3, #1
 8027778:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802777c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8027780:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8027784:	4308      	orrs	r0, r1
 8027786:	f8a9 0000 	strh.w	r0, [r9]
 802778a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802778c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802778e:	f109 0902 	add.w	r9, r9, #2
 8027792:	441a      	add	r2, r3
 8027794:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027796:	9225      	str	r2, [sp, #148]	@ 0x94
 8027798:	441d      	add	r5, r3
 802779a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802779e:	e64c      	b.n	802743a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80277a0:	2800      	cmp	r0, #0
 80277a2:	f43f aeed 	beq.w	8027580 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80277a6:	5c79      	ldrb	r1, [r7, r1]
 80277a8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80277ac:	9109      	str	r1, [sp, #36]	@ 0x24
 80277ae:	0e09      	lsrs	r1, r1, #24
 80277b0:	9111      	str	r1, [sp, #68]	@ 0x44
 80277b2:	e6e5      	b.n	8027580 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80277b4:	b01b      	add	sp, #108	@ 0x6c
 80277b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80277ba:	bf00      	nop
 80277bc:	fffff800 	.word	0xfffff800

080277c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80277c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80277c4:	b085      	sub	sp, #20
 80277c6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 80277ca:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80277ce:	fb00 7406 	mla	r4, r0, r6, r7
 80277d2:	2800      	cmp	r0, #0
 80277d4:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 80277d8:	9103      	str	r1, [sp, #12]
 80277da:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 80277de:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 80277e2:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 80277e6:	9501      	str	r5, [sp, #4]
 80277e8:	eb03 0904 	add.w	r9, r3, r4
 80277ec:	f2c0 8150 	blt.w	8027a90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80277f0:	4583      	cmp	fp, r0
 80277f2:	f340 814d 	ble.w	8027a90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80277f6:	2f00      	cmp	r7, #0
 80277f8:	f2c0 8146 	blt.w	8027a88 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80277fc:	42be      	cmp	r6, r7
 80277fe:	f340 8143 	ble.w	8027a88 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8027802:	f813 c004 	ldrb.w	ip, [r3, r4]
 8027806:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 802780a:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 802780e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8027812:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 8027816:	4355      	muls	r5, r2
 8027818:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802781c:	fb0c f203 	mul.w	r2, ip, r3
 8027820:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8027824:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 8027828:	441d      	add	r5, r3
 802782a:	f102 0320 	add.w	r3, r2, #32
 802782e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027832:	0a1b      	lsrs	r3, r3, #8
 8027834:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8027838:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802783c:	431c      	orrs	r4, r3
 802783e:	1c7b      	adds	r3, r7, #1
 8027840:	f100 812b 	bmi.w	8027a9a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8027844:	429e      	cmp	r6, r3
 8027846:	f340 8128 	ble.w	8027a9a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 802784a:	2900      	cmp	r1, #0
 802784c:	f000 8128 	beq.w	8027aa0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8027850:	9a01      	ldr	r2, [sp, #4]
 8027852:	f899 3001 	ldrb.w	r3, [r9, #1]
 8027856:	8855      	ldrh	r5, [r2, #2]
 8027858:	ea4f 08e3 	mov.w	r8, r3, asr #3
 802785c:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 8027860:	fb08 f802 	mul.w	r8, r8, r2
 8027864:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8027868:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802786c:	435d      	muls	r5, r3
 802786e:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8027872:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027876:	44d0      	add	r8, sl
 8027878:	f105 0a20 	add.w	sl, r5, #32
 802787c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8027880:	0a2d      	lsrs	r5, r5, #8
 8027882:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8027886:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802788a:	432a      	orrs	r2, r5
 802788c:	3001      	adds	r0, #1
 802788e:	f100 810d 	bmi.w	8027aac <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8027892:	4583      	cmp	fp, r0
 8027894:	f340 810a 	ble.w	8027aac <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8027898:	f1be 0f00 	cmp.w	lr, #0
 802789c:	f000 810b 	beq.w	8027ab6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 80278a0:	2f00      	cmp	r7, #0
 80278a2:	f2c0 8100 	blt.w	8027aa6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80278a6:	42be      	cmp	r6, r7
 80278a8:	f340 80fd 	ble.w	8027aa6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80278ac:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 80278b0:	9801      	ldr	r0, [sp, #4]
 80278b2:	f819 5006 	ldrb.w	r5, [r9, r6]
 80278b6:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80278ba:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80278be:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 80278c2:	fb0a fa00 	mul.w	sl, sl, r0
 80278c6:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80278ca:	fb05 f808 	mul.w	r8, r5, r8
 80278ce:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80278d2:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 80278d6:	4482      	add	sl, r0
 80278d8:	f108 0020 	add.w	r0, r8, #32
 80278dc:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80278e0:	0a00      	lsrs	r0, r0, #8
 80278e2:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80278e6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80278ea:	ea4b 0b00 	orr.w	fp, fp, r0
 80278ee:	3701      	adds	r7, #1
 80278f0:	f100 80e6 	bmi.w	8027ac0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80278f4:	42be      	cmp	r6, r7
 80278f6:	f340 80e3 	ble.w	8027ac0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80278fa:	2900      	cmp	r1, #0
 80278fc:	f000 80e3 	beq.w	8027ac6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8027900:	9801      	ldr	r0, [sp, #4]
 8027902:	3601      	adds	r6, #1
 8027904:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8027908:	f819 7006 	ldrb.w	r7, [r9, r6]
 802790c:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 8027910:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027914:	fb07 f800 	mul.w	r8, r7, r0
 8027918:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 802791c:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8027920:	fb09 f906 	mul.w	r9, r9, r6
 8027924:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8027928:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 802792c:	44d1      	add	r9, sl
 802792e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8027932:	f108 0020 	add.w	r0, r8, #32
 8027936:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802793a:	0a00      	lsrs	r0, r0, #8
 802793c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027940:	4330      	orrs	r0, r6
 8027942:	b28e      	uxth	r6, r1
 8027944:	fa1f f98e 	uxth.w	r9, lr
 8027948:	fb06 f809 	mul.w	r8, r6, r9
 802794c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8027950:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8027954:	0136      	lsls	r6, r6, #4
 8027956:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802795a:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 802795e:	9601      	str	r6, [sp, #4]
 8027960:	ea4a 0404 	orr.w	r4, sl, r4
 8027964:	fa1f f689 	uxth.w	r6, r9
 8027968:	9602      	str	r6, [sp, #8]
 802796a:	4626      	mov	r6, r4
 802796c:	fb11 f90e 	smulbb	r9, r1, lr
 8027970:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027974:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8027978:	f1ce 0410 	rsb	r4, lr, #16
 802797c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027980:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027984:	1a64      	subs	r4, r4, r1
 8027986:	ea4a 0202 	orr.w	r2, sl, r2
 802798a:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 802798e:	434a      	muls	r2, r1
 8027990:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8027994:	fb04 2406 	mla	r4, r4, r6, r2
 8027998:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802799c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80279a0:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80279a4:	ea4a 0000 	orr.w	r0, sl, r0
 80279a8:	fb09 4200 	mla	r2, r9, r0, r4
 80279ac:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80279b0:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 80279b4:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80279b8:	ea44 0b0b 	orr.w	fp, r4, fp
 80279bc:	9c01      	ldr	r4, [sp, #4]
 80279be:	9e02      	ldr	r6, [sp, #8]
 80279c0:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 80279c4:	1ba4      	subs	r4, r4, r6
 80279c6:	9e01      	ldr	r6, [sp, #4]
 80279c8:	b2a4      	uxth	r4, r4
 80279ca:	eba6 0608 	sub.w	r6, r6, r8
 80279ce:	b2b6      	uxth	r6, r6
 80279d0:	4373      	muls	r3, r6
 80279d2:	fb0c 3304 	mla	r3, ip, r4, r3
 80279d6:	9c02      	ldr	r4, [sp, #8]
 80279d8:	9903      	ldr	r1, [sp, #12]
 80279da:	fb04 3505 	mla	r5, r4, r5, r3
 80279de:	fb08 5707 	mla	r7, r8, r7, r5
 80279e2:	8808      	ldrh	r0, [r1, #0]
 80279e4:	f89d 1050 	ldrb.w	r1, [sp, #80]	@ 0x50
 80279e8:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80279ec:	b289      	uxth	r1, r1
 80279ee:	434f      	muls	r7, r1
 80279f0:	1c7b      	adds	r3, r7, #1
 80279f2:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80279f6:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80279fa:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80279fe:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8027a02:	1203      	asrs	r3, r0, #8
 8027a04:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027a08:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027a0c:	b2ff      	uxtb	r7, r7
 8027a0e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027a12:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8027a16:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8027a1a:	fb13 f307 	smulbb	r3, r3, r7
 8027a1e:	ea42 0e0e 	orr.w	lr, r2, lr
 8027a22:	fa1f f28e 	uxth.w	r2, lr
 8027a26:	1215      	asrs	r5, r2, #8
 8027a28:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8027a2c:	fb05 3501 	mla	r5, r5, r1, r3
 8027a30:	10c3      	asrs	r3, r0, #3
 8027a32:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8027a36:	fb13 f307 	smulbb	r3, r3, r7
 8027a3a:	10d4      	asrs	r4, r2, #3
 8027a3c:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8027a40:	fb04 3401 	mla	r4, r4, r1, r3
 8027a44:	00c3      	lsls	r3, r0, #3
 8027a46:	b2db      	uxtb	r3, r3
 8027a48:	fb13 f307 	smulbb	r3, r3, r7
 8027a4c:	00d2      	lsls	r2, r2, #3
 8027a4e:	b2d2      	uxtb	r2, r2
 8027a50:	fb02 3101 	mla	r1, r2, r1, r3
 8027a54:	b2ad      	uxth	r5, r5
 8027a56:	b289      	uxth	r1, r1
 8027a58:	b2a4      	uxth	r4, r4
 8027a5a:	1c6b      	adds	r3, r5, #1
 8027a5c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027a60:	1c62      	adds	r2, r4, #1
 8027a62:	1c4b      	adds	r3, r1, #1
 8027a64:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8027a68:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8027a6c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8027a70:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027a74:	0964      	lsrs	r4, r4, #5
 8027a76:	432b      	orrs	r3, r5
 8027a78:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8027a7c:	9a03      	ldr	r2, [sp, #12]
 8027a7e:	4323      	orrs	r3, r4
 8027a80:	8013      	strh	r3, [r2, #0]
 8027a82:	b005      	add	sp, #20
 8027a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027a88:	f04f 0c00 	mov.w	ip, #0
 8027a8c:	4664      	mov	r4, ip
 8027a8e:	e6d6      	b.n	802783e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8027a90:	2300      	movs	r3, #0
 8027a92:	469c      	mov	ip, r3
 8027a94:	461a      	mov	r2, r3
 8027a96:	461c      	mov	r4, r3
 8027a98:	e6f8      	b.n	802788c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8027a9a:	2300      	movs	r3, #0
 8027a9c:	461a      	mov	r2, r3
 8027a9e:	e6f5      	b.n	802788c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8027aa0:	460b      	mov	r3, r1
 8027aa2:	460a      	mov	r2, r1
 8027aa4:	e6f2      	b.n	802788c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8027aa6:	2500      	movs	r5, #0
 8027aa8:	46ab      	mov	fp, r5
 8027aaa:	e720      	b.n	80278ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8027aac:	2700      	movs	r7, #0
 8027aae:	463d      	mov	r5, r7
 8027ab0:	4638      	mov	r0, r7
 8027ab2:	46bb      	mov	fp, r7
 8027ab4:	e745      	b.n	8027942 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8027ab6:	4677      	mov	r7, lr
 8027ab8:	4675      	mov	r5, lr
 8027aba:	4670      	mov	r0, lr
 8027abc:	46f3      	mov	fp, lr
 8027abe:	e740      	b.n	8027942 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8027ac0:	2700      	movs	r7, #0
 8027ac2:	4638      	mov	r0, r7
 8027ac4:	e73d      	b.n	8027942 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8027ac6:	460f      	mov	r7, r1
 8027ac8:	4608      	mov	r0, r1
 8027aca:	e73a      	b.n	8027942 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08027acc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ad0:	b097      	sub	sp, #92	@ 0x5c
 8027ad2:	9214      	str	r2, [sp, #80]	@ 0x50
 8027ad4:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8027ad6:	9015      	str	r0, [sp, #84]	@ 0x54
 8027ad8:	9308      	str	r3, [sp, #32]
 8027ada:	6850      	ldr	r0, [r2, #4]
 8027adc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8027ae0:	9111      	str	r1, [sp, #68]	@ 0x44
 8027ae2:	9312      	str	r3, [sp, #72]	@ 0x48
 8027ae4:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8027ae8:	fb00 1303 	mla	r3, r0, r3, r1
 8027aec:	6812      	ldr	r2, [r2, #0]
 8027aee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027af2:	9309      	str	r3, [sp, #36]	@ 0x24
 8027af4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027af6:	681b      	ldr	r3, [r3, #0]
 8027af8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027afa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027afc:	685b      	ldr	r3, [r3, #4]
 8027afe:	930c      	str	r3, [sp, #48]	@ 0x30
 8027b00:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8027b04:	930a      	str	r3, [sp, #40]	@ 0x28
 8027b06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027b08:	2b00      	cmp	r3, #0
 8027b0a:	dc03      	bgt.n	8027b14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027b0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8027b0e:	2b00      	cmp	r3, #0
 8027b10:	f340 83cb 	ble.w	80282aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8027b14:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027b16:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027b1a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027b1e:	1e48      	subs	r0, r1, #1
 8027b20:	1e55      	subs	r5, r2, #1
 8027b22:	9b08      	ldr	r3, [sp, #32]
 8027b24:	2b00      	cmp	r3, #0
 8027b26:	f340 81a3 	ble.w	8027e70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8027b2a:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8027b2c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027b2e:	1436      	asrs	r6, r6, #16
 8027b30:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027b34:	d406      	bmi.n	8027b44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027b36:	4286      	cmp	r6, r0
 8027b38:	da04      	bge.n	8027b44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027b3a:	2b00      	cmp	r3, #0
 8027b3c:	db02      	blt.n	8027b44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027b3e:	42ab      	cmp	r3, r5
 8027b40:	f2c0 8197 	blt.w	8027e72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8027b44:	3601      	adds	r6, #1
 8027b46:	f100 8184 	bmi.w	8027e52 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027b4a:	42b1      	cmp	r1, r6
 8027b4c:	f2c0 8181 	blt.w	8027e52 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027b50:	3301      	adds	r3, #1
 8027b52:	f100 817e 	bmi.w	8027e52 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027b56:	429a      	cmp	r2, r3
 8027b58:	f2c0 817b 	blt.w	8027e52 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027b5c:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8027b60:	9b08      	ldr	r3, [sp, #32]
 8027b62:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8027b64:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027b66:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027b68:	2b00      	cmp	r3, #0
 8027b6a:	f340 81a4 	ble.w	8027eb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8027b6e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027b70:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8027b72:	1418      	asrs	r0, r3, #16
 8027b74:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027b76:	142d      	asrs	r5, r5, #16
 8027b78:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027b7c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027b7e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8027b82:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027b84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8027b88:	f100 81f8 	bmi.w	8027f7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8027b8c:	f102 3eff 	add.w	lr, r2, #4294967295
 8027b90:	4575      	cmp	r5, lr
 8027b92:	f280 81f3 	bge.w	8027f7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8027b96:	2800      	cmp	r0, #0
 8027b98:	f2c0 81f0 	blt.w	8027f7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8027b9c:	f103 3eff 	add.w	lr, r3, #4294967295
 8027ba0:	4570      	cmp	r0, lr
 8027ba2:	f280 81eb 	bge.w	8027f7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8027ba6:	b212      	sxth	r2, r2
 8027ba8:	fb00 5002 	mla	r0, r0, r2, r5
 8027bac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027bae:	fa1f fe81 	uxth.w	lr, r1
 8027bb2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8027bb6:	eb03 0a00 	add.w	sl, r3, r0
 8027bba:	f813 9000 	ldrb.w	r9, [r3, r0]
 8027bbe:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 8027bc2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027bc6:	b29b      	uxth	r3, r3
 8027bc8:	f1bc 0f00 	cmp.w	ip, #0
 8027bcc:	f000 81b9 	beq.w	8027f42 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027bd0:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8027bd4:	eb0a 0b02 	add.w	fp, sl, r2
 8027bd8:	fa1f fa8c 	uxth.w	sl, ip
 8027bdc:	fb0a fe0e 	mul.w	lr, sl, lr
 8027be0:	eba5 050e 	sub.w	r5, r5, lr
 8027be4:	b2ad      	uxth	r5, r5
 8027be6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8027bea:	fb08 f505 	mul.w	r5, r8, r5
 8027bee:	fa1f fa8a 	uxth.w	sl, sl
 8027bf2:	eba3 030a 	sub.w	r3, r3, sl
 8027bf6:	b29b      	uxth	r3, r3
 8027bf8:	940d      	str	r4, [sp, #52]	@ 0x34
 8027bfa:	fb09 5303 	mla	r3, r9, r3, r5
 8027bfe:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027c02:	940e      	str	r4, [sp, #56]	@ 0x38
 8027c04:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027c06:	fb0a 3304 	mla	r3, sl, r4, r3
 8027c0a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027c0c:	fb0e 3304 	mla	r3, lr, r4, r3
 8027c10:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027c14:	2b00      	cmp	r3, #0
 8027c16:	f000 810f 	beq.w	8027e38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027c1a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8027c1c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8027c20:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8027c24:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8027c28:	f000 8190 	beq.w	8027f4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027c2c:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8027c30:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027c34:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027c38:	fb09 f000 	mul.w	r0, r9, r0
 8027c3c:	fb0a fe0e 	mul.w	lr, sl, lr
 8027c40:	f100 0b20 	add.w	fp, r0, #32
 8027c44:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8027c48:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8027c4c:	44ce      	add	lr, r9
 8027c4e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8027c52:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027c56:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027c5a:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8027c5e:	ea4e 0909 	orr.w	r9, lr, r9
 8027c62:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8027c66:	8868      	ldrh	r0, [r5, #2]
 8027c68:	d019      	beq.n	8027c9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8027c6a:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8027c6e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027c72:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027c76:	fb08 f800 	mul.w	r8, r8, r0
 8027c7a:	fb0a fe0e 	mul.w	lr, sl, lr
 8027c7e:	f108 0b20 	add.w	fp, r8, #32
 8027c82:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8027c86:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8027c8a:	4486      	add	lr, r0
 8027c8c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8027c90:	0a00      	lsrs	r0, r0, #8
 8027c92:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027c96:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027c9a:	ea4e 0000 	orr.w	r0, lr, r0
 8027c9e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8027ca2:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8027ca6:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8027caa:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027cae:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027cb2:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027cb6:	ea4e 0909 	orr.w	r9, lr, r9
 8027cba:	ea4a 0000 	orr.w	r0, sl, r0
 8027cbe:	f1bc 0f00 	cmp.w	ip, #0
 8027cc2:	f000 8145 	beq.w	8027f50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8027cc6:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8027cca:	3a01      	subs	r2, #1
 8027ccc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027cce:	0052      	lsls	r2, r2, #1
 8027cd0:	3202      	adds	r2, #2
 8027cd2:	2cff      	cmp	r4, #255	@ 0xff
 8027cd4:	eb05 0e02 	add.w	lr, r5, r2
 8027cd8:	5aaa      	ldrh	r2, [r5, r2]
 8027cda:	d018      	beq.n	8027d0e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8027cdc:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8027ce0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027ce4:	fb04 fa02 	mul.w	sl, r4, r2
 8027ce8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027cec:	fb08 f805 	mul.w	r8, r8, r5
 8027cf0:	f10a 0520 	add.w	r5, sl, #32
 8027cf4:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8027cf8:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8027cfc:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027d00:	4442      	add	r2, r8
 8027d02:	0a2d      	lsrs	r5, r5, #8
 8027d04:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8027d08:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8027d0c:	432a      	orrs	r2, r5
 8027d0e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027d10:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8027d14:	2cff      	cmp	r4, #255	@ 0xff
 8027d16:	d01a      	beq.n	8027d4e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8027d18:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8027d1c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8027d20:	fb04 fa05 	mul.w	sl, r4, r5
 8027d24:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027d28:	fb08 f80e 	mul.w	r8, r8, lr
 8027d2c:	f10a 0e20 	add.w	lr, sl, #32
 8027d30:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8027d34:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8027d38:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027d3c:	4445      	add	r5, r8
 8027d3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027d42:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8027d46:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8027d4a:	ea45 050e 	orr.w	r5, r5, lr
 8027d4e:	fb1c fe01 	smulbb	lr, ip, r1
 8027d52:	f1cc 0810 	rsb	r8, ip, #16
 8027d56:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8027d5a:	eba8 0801 	sub.w	r8, r8, r1
 8027d5e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8027d62:	4341      	muls	r1, r0
 8027d64:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8027d68:	fb09 1108 	mla	r1, r9, r8, r1
 8027d6c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027d70:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027d74:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027d78:	ea4a 0202 	orr.w	r2, sl, r2
 8027d7c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8027d80:	fb0c 1102 	mla	r1, ip, r2, r1
 8027d84:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8027d88:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027d8c:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8027d90:	ea4b 0505 	orr.w	r5, fp, r5
 8027d94:	fb0e 1e05 	mla	lr, lr, r5, r1
 8027d98:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027d9c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027da0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027da4:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8027da8:	ea42 0e0e 	orr.w	lr, r2, lr
 8027dac:	fa1f f28e 	uxth.w	r2, lr
 8027db0:	2bff      	cmp	r3, #255	@ 0xff
 8027db2:	d103      	bne.n	8027dbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8027db4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8027db6:	29ff      	cmp	r1, #255	@ 0xff
 8027db8:	f000 80de 	beq.w	8027f78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8027dbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8027dbe:	8838      	ldrh	r0, [r7, #0]
 8027dc0:	434b      	muls	r3, r1
 8027dc2:	f103 0c01 	add.w	ip, r3, #1
 8027dc6:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8027dca:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8027dce:	fa5f fc83 	uxtb.w	ip, r3
 8027dd2:	1203      	asrs	r3, r0, #8
 8027dd4:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8027dd8:	fb13 f30c 	smulbb	r3, r3, ip
 8027ddc:	1215      	asrs	r5, r2, #8
 8027dde:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8027de2:	fb05 3501 	mla	r5, r5, r1, r3
 8027de6:	10c3      	asrs	r3, r0, #3
 8027de8:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8027dec:	fb13 f30c 	smulbb	r3, r3, ip
 8027df0:	10d1      	asrs	r1, r2, #3
 8027df2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027df4:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8027df8:	fb01 3104 	mla	r1, r1, r4, r3
 8027dfc:	00c3      	lsls	r3, r0, #3
 8027dfe:	b2db      	uxtb	r3, r3
 8027e00:	fb13 f30c 	smulbb	r3, r3, ip
 8027e04:	00d2      	lsls	r2, r2, #3
 8027e06:	b2d2      	uxtb	r2, r2
 8027e08:	fb02 3304 	mla	r3, r2, r4, r3
 8027e0c:	b2ad      	uxth	r5, r5
 8027e0e:	b29a      	uxth	r2, r3
 8027e10:	1c6b      	adds	r3, r5, #1
 8027e12:	b289      	uxth	r1, r1
 8027e14:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027e18:	1c53      	adds	r3, r2, #1
 8027e1a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027e1e:	1c4a      	adds	r2, r1, #1
 8027e20:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027e24:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8027e28:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027e2c:	0949      	lsrs	r1, r1, #5
 8027e2e:	432b      	orrs	r3, r5
 8027e30:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027e34:	430b      	orrs	r3, r1
 8027e36:	803b      	strh	r3, [r7, #0]
 8027e38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027e3a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8027e3c:	3702      	adds	r7, #2
 8027e3e:	4413      	add	r3, r2
 8027e40:	9321      	str	r3, [sp, #132]	@ 0x84
 8027e42:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8027e44:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027e46:	441a      	add	r2, r3
 8027e48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027e4a:	9222      	str	r2, [sp, #136]	@ 0x88
 8027e4c:	3b01      	subs	r3, #1
 8027e4e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027e50:	e689      	b.n	8027b66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027e52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027e54:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8027e56:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8027e58:	4433      	add	r3, r6
 8027e5a:	9321      	str	r3, [sp, #132]	@ 0x84
 8027e5c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027e5e:	441c      	add	r4, r3
 8027e60:	9b08      	ldr	r3, [sp, #32]
 8027e62:	9422      	str	r4, [sp, #136]	@ 0x88
 8027e64:	3b01      	subs	r3, #1
 8027e66:	9308      	str	r3, [sp, #32]
 8027e68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027e6a:	3302      	adds	r3, #2
 8027e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8027e6e:	e658      	b.n	8027b22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8027e70:	d028      	beq.n	8027ec4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8027e72:	9b08      	ldr	r3, [sp, #32]
 8027e74:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8027e76:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8027e78:	3b01      	subs	r3, #1
 8027e7a:	fb00 5003 	mla	r0, r0, r3, r5
 8027e7e:	1400      	asrs	r0, r0, #16
 8027e80:	f53f ae6c 	bmi.w	8027b5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027e84:	3901      	subs	r1, #1
 8027e86:	4288      	cmp	r0, r1
 8027e88:	f6bf ae68 	bge.w	8027b5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027e8c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8027e8e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8027e90:	fb01 0303 	mla	r3, r1, r3, r0
 8027e94:	141b      	asrs	r3, r3, #16
 8027e96:	f53f ae61 	bmi.w	8027b5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027e9a:	3a01      	subs	r2, #1
 8027e9c:	4293      	cmp	r3, r2
 8027e9e:	f6bf ae5d 	bge.w	8027b5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027ea2:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8027ea6:	9b08      	ldr	r3, [sp, #32]
 8027ea8:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8027eac:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027eae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027eb0:	2b00      	cmp	r3, #0
 8027eb2:	f300 8082 	bgt.w	8027fba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8027eb6:	9b08      	ldr	r3, [sp, #32]
 8027eb8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027ebe:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027ec2:	9309      	str	r3, [sp, #36]	@ 0x24
 8027ec4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027ec6:	2b00      	cmp	r3, #0
 8027ec8:	f340 81ef 	ble.w	80282aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8027ecc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027ed0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027ed4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027ed8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027edc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027ee0:	eef0 6a62 	vmov.f32	s13, s5
 8027ee4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027ee8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027eec:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027ef0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ef4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027ef8:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 8027efc:	eef0 6a43 	vmov.f32	s13, s6
 8027f00:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027f04:	ee12 2a90 	vmov	r2, s5
 8027f08:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027f0c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027f0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027f12:	fb92 f3f3 	sdiv	r3, r2, r3
 8027f16:	ee13 2a10 	vmov	r2, s6
 8027f1a:	9323      	str	r3, [sp, #140]	@ 0x8c
 8027f1c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027f1e:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 8027f22:	fb92 f3f3 	sdiv	r3, r2, r3
 8027f26:	9324      	str	r3, [sp, #144]	@ 0x90
 8027f28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027f2a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027f2c:	3b01      	subs	r3, #1
 8027f2e:	9311      	str	r3, [sp, #68]	@ 0x44
 8027f30:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027f32:	bf08      	it	eq
 8027f34:	4613      	moveq	r3, r2
 8027f36:	eeb0 3a67 	vmov.f32	s6, s15
 8027f3a:	9308      	str	r3, [sp, #32]
 8027f3c:	eef0 2a47 	vmov.f32	s5, s14
 8027f40:	e5e1      	b.n	8027b06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027f42:	fb08 f505 	mul.w	r5, r8, r5
 8027f46:	fb09 5303 	mla	r3, r9, r3, r5
 8027f4a:	e661      	b.n	8027c10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8027f4c:	4681      	mov	r9, r0
 8027f4e:	e688      	b.n	8027c62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8027f50:	f1c1 0210 	rsb	r2, r1, #16
 8027f54:	4341      	muls	r1, r0
 8027f56:	fb09 1902 	mla	r9, r9, r2, r1
 8027f5a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027f5e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8027f62:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8027f66:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027f6a:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027f6e:	ea42 0909 	orr.w	r9, r2, r9
 8027f72:	fa1f f289 	uxth.w	r2, r9
 8027f76:	e71b      	b.n	8027db0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8027f78:	803a      	strh	r2, [r7, #0]
 8027f7a:	e75d      	b.n	8027e38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027f7c:	f115 0e01 	adds.w	lr, r5, #1
 8027f80:	f53f af5a 	bmi.w	8027e38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027f84:	4572      	cmp	r2, lr
 8027f86:	f6ff af57 	blt.w	8027e38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027f8a:	f110 0e01 	adds.w	lr, r0, #1
 8027f8e:	f53f af53 	bmi.w	8027e38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027f92:	4573      	cmp	r3, lr
 8027f94:	f6ff af50 	blt.w	8027e38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027f98:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027f9a:	b21b      	sxth	r3, r3
 8027f9c:	b212      	sxth	r2, r2
 8027f9e:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8027fa2:	9301      	str	r3, [sp, #4]
 8027fa4:	9200      	str	r2, [sp, #0]
 8027fa6:	e9cd c405 	strd	ip, r4, [sp, #20]
 8027faa:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8027fae:	9502      	str	r5, [sp, #8]
 8027fb0:	4639      	mov	r1, r7
 8027fb2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8027fb4:	f7ff fc04 	bl	80277c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8027fb8:	e73e      	b.n	8027e38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027fba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027fbc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027fc0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027fc2:	fa1f fc82 	uxth.w	ip, r2
 8027fc6:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027fca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027fcc:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8027fd0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027fd4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027fd6:	141f      	asrs	r7, r3, #16
 8027fd8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027fda:	141b      	asrs	r3, r3, #16
 8027fdc:	fb01 3707 	mla	r7, r1, r7, r3
 8027fe0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027fe2:	eb03 0a07 	add.w	sl, r3, r7
 8027fe6:	f813 9007 	ldrb.w	r9, [r3, r7]
 8027fea:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8027fee:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027ff2:	b29b      	uxth	r3, r3
 8027ff4:	2d00      	cmp	r5, #0
 8027ff6:	f000 813d 	beq.w	8028274 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8027ffa:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8027ffe:	eb0a 0b01 	add.w	fp, sl, r1
 8028002:	fa1f fa85 	uxth.w	sl, r5
 8028006:	fb0a fc0c 	mul.w	ip, sl, ip
 802800a:	eba0 000c 	sub.w	r0, r0, ip
 802800e:	b280      	uxth	r0, r0
 8028010:	fb08 f000 	mul.w	r0, r8, r0
 8028014:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8028018:	fa1f fa8a 	uxth.w	sl, sl
 802801c:	eba3 030a 	sub.w	r3, r3, sl
 8028020:	b29b      	uxth	r3, r3
 8028022:	fb09 0303 	mla	r3, r9, r3, r0
 8028026:	940f      	str	r4, [sp, #60]	@ 0x3c
 8028028:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802802a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802802e:	fb0a 3300 	mla	r3, sl, r0, r3
 8028032:	fb0c 3304 	mla	r3, ip, r4, r3
 8028036:	9410      	str	r4, [sp, #64]	@ 0x40
 8028038:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802803c:	2b00      	cmp	r3, #0
 802803e:	f000 810b 	beq.w	8028258 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8028042:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8028044:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8028046:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802804a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802804e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8028052:	f000 8114 	beq.w	802827e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 8028056:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 802805a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802805e:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8028062:	fb09 f707 	mul.w	r7, r9, r7
 8028066:	fb0a fc0c 	mul.w	ip, sl, ip
 802806a:	f107 0b20 	add.w	fp, r7, #32
 802806e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8028072:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8028076:	44cc      	add	ip, r9
 8028078:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 802807c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028080:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8028084:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8028088:	ea4c 0909 	orr.w	r9, ip, r9
 802808c:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8028090:	8847      	ldrh	r7, [r0, #2]
 8028092:	d019      	beq.n	80280c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 8028094:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8028098:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802809c:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80280a0:	fb08 f807 	mul.w	r8, r8, r7
 80280a4:	fb0a fc0c 	mul.w	ip, sl, ip
 80280a8:	f108 0b20 	add.w	fp, r8, #32
 80280ac:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80280b0:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 80280b4:	44bc      	add	ip, r7
 80280b6:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80280ba:	0a3f      	lsrs	r7, r7, #8
 80280bc:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80280c0:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80280c4:	ea4c 0707 	orr.w	r7, ip, r7
 80280c8:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80280cc:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80280d0:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80280d4:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80280d8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80280dc:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80280e0:	ea4c 0909 	orr.w	r9, ip, r9
 80280e4:	ea4a 0707 	orr.w	r7, sl, r7
 80280e8:	2d00      	cmp	r5, #0
 80280ea:	f000 80ca 	beq.w	8028282 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 80280ee:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80280f2:	3901      	subs	r1, #1
 80280f4:	0049      	lsls	r1, r1, #1
 80280f6:	3102      	adds	r1, #2
 80280f8:	eb00 0c01 	add.w	ip, r0, r1
 80280fc:	5a41      	ldrh	r1, [r0, r1]
 80280fe:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8028100:	28ff      	cmp	r0, #255	@ 0xff
 8028102:	d019      	beq.n	8028138 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8028104:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8028106:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 802810a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802810e:	fb04 fa01 	mul.w	sl, r4, r1
 8028112:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028116:	fb08 f800 	mul.w	r8, r8, r0
 802811a:	f10a 0020 	add.w	r0, sl, #32
 802811e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8028122:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8028126:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802812a:	4441      	add	r1, r8
 802812c:	0a00      	lsrs	r0, r0, #8
 802812e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8028132:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028136:	4301      	orrs	r1, r0
 8028138:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802813a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802813e:	2cff      	cmp	r4, #255	@ 0xff
 8028140:	d01a      	beq.n	8028178 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 8028142:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8028146:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802814a:	fb04 fa00 	mul.w	sl, r4, r0
 802814e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028152:	fb08 f80c 	mul.w	r8, r8, ip
 8028156:	f10a 0c20 	add.w	ip, sl, #32
 802815a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802815e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8028162:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8028166:	4440      	add	r0, r8
 8028168:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802816c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8028170:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8028174:	ea40 000c 	orr.w	r0, r0, ip
 8028178:	fb15 fc02 	smulbb	ip, r5, r2
 802817c:	f1c5 0810 	rsb	r8, r5, #16
 8028180:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8028184:	eba8 0802 	sub.w	r8, r8, r2
 8028188:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802818c:	437a      	muls	r2, r7
 802818e:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8028192:	fb09 2208 	mla	r2, r9, r8, r2
 8028196:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802819a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802819e:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80281a2:	ea4a 0101 	orr.w	r1, sl, r1
 80281a6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80281aa:	fb05 2201 	mla	r2, r5, r1, r2
 80281ae:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80281b2:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80281b6:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80281ba:	ea4b 0000 	orr.w	r0, fp, r0
 80281be:	fb0c 2200 	mla	r2, ip, r0, r2
 80281c2:	0d57      	lsrs	r7, r2, #21
 80281c4:	0952      	lsrs	r2, r2, #5
 80281c6:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80281ca:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80281ce:	433a      	orrs	r2, r7
 80281d0:	2bff      	cmp	r3, #255	@ 0xff
 80281d2:	b292      	uxth	r2, r2
 80281d4:	d102      	bne.n	80281dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80281d6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80281d8:	29ff      	cmp	r1, #255	@ 0xff
 80281da:	d063      	beq.n	80282a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 80281dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80281de:	f8be 1000 	ldrh.w	r1, [lr]
 80281e2:	4343      	muls	r3, r0
 80281e4:	1c58      	adds	r0, r3, #1
 80281e6:	eb00 2323 	add.w	r3, r0, r3, asr #8
 80281ea:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80281ee:	1208      	asrs	r0, r1, #8
 80281f0:	b2db      	uxtb	r3, r3
 80281f2:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80281f6:	fb10 f003 	smulbb	r0, r0, r3
 80281fa:	10cf      	asrs	r7, r1, #3
 80281fc:	00c9      	lsls	r1, r1, #3
 80281fe:	b2c9      	uxtb	r1, r1
 8028200:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8028202:	1215      	asrs	r5, r2, #8
 8028204:	fb11 f103 	smulbb	r1, r1, r3
 8028208:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802820c:	fb05 0504 	mla	r5, r5, r4, r0
 8028210:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8028214:	10d0      	asrs	r0, r2, #3
 8028216:	00d2      	lsls	r2, r2, #3
 8028218:	fb17 f703 	smulbb	r7, r7, r3
 802821c:	b2d2      	uxtb	r2, r2
 802821e:	fb02 1204 	mla	r2, r2, r4, r1
 8028222:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8028226:	fb00 7004 	mla	r0, r0, r4, r7
 802822a:	b2ad      	uxth	r5, r5
 802822c:	b292      	uxth	r2, r2
 802822e:	1c6b      	adds	r3, r5, #1
 8028230:	1c57      	adds	r7, r2, #1
 8028232:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8028236:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802823a:	b280      	uxth	r0, r0
 802823c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8028240:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8028244:	433d      	orrs	r5, r7
 8028246:	1c47      	adds	r7, r0, #1
 8028248:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 802824c:	097f      	lsrs	r7, r7, #5
 802824e:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8028252:	433d      	orrs	r5, r7
 8028254:	f8ae 5000 	strh.w	r5, [lr]
 8028258:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802825a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802825c:	f10e 0e02 	add.w	lr, lr, #2
 8028260:	4413      	add	r3, r2
 8028262:	9321      	str	r3, [sp, #132]	@ 0x84
 8028264:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8028266:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028268:	441a      	add	r2, r3
 802826a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802826c:	9222      	str	r2, [sp, #136]	@ 0x88
 802826e:	3b01      	subs	r3, #1
 8028270:	9313      	str	r3, [sp, #76]	@ 0x4c
 8028272:	e61c      	b.n	8027eae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8028274:	fb08 f000 	mul.w	r0, r8, r0
 8028278:	fb09 0303 	mla	r3, r9, r3, r0
 802827c:	e6dc      	b.n	8028038 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 802827e:	46b9      	mov	r9, r7
 8028280:	e704      	b.n	802808c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 8028282:	f1c2 0110 	rsb	r1, r2, #16
 8028286:	437a      	muls	r2, r7
 8028288:	fb09 2901 	mla	r9, r9, r1, r2
 802828c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8028290:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8028294:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8028298:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802829c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80282a0:	4302      	orrs	r2, r0
 80282a2:	e795      	b.n	80281d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 80282a4:	f8ae 2000 	strh.w	r2, [lr]
 80282a8:	e7d6      	b.n	8028258 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 80282aa:	b017      	add	sp, #92	@ 0x5c
 80282ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080282b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80282b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80282b4:	b085      	sub	sp, #20
 80282b6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 80282ba:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80282be:	fb00 7406 	mla	r4, r0, r6, r7
 80282c2:	2800      	cmp	r0, #0
 80282c4:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 80282c8:	9103      	str	r1, [sp, #12]
 80282ca:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 80282ce:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 80282d2:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 80282d6:	9501      	str	r5, [sp, #4]
 80282d8:	eb02 0904 	add.w	r9, r2, r4
 80282dc:	f2c0 8141 	blt.w	8028562 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80282e0:	4583      	cmp	fp, r0
 80282e2:	f340 813e 	ble.w	8028562 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80282e6:	2f00      	cmp	r7, #0
 80282e8:	f2c0 8137 	blt.w	802855a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80282ec:	42be      	cmp	r6, r7
 80282ee:	f340 8134 	ble.w	802855a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80282f2:	f812 c004 	ldrb.w	ip, [r2, r4]
 80282f6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80282fa:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 80282fe:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8028302:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 8028306:	4355      	muls	r5, r2
 8028308:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802830c:	fb0c f203 	mul.w	r2, ip, r3
 8028310:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8028314:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 8028318:	441d      	add	r5, r3
 802831a:	f102 0320 	add.w	r3, r2, #32
 802831e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028322:	0a1b      	lsrs	r3, r3, #8
 8028324:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8028328:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802832c:	431c      	orrs	r4, r3
 802832e:	1c7b      	adds	r3, r7, #1
 8028330:	f100 811c 	bmi.w	802856c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8028334:	429e      	cmp	r6, r3
 8028336:	f340 8119 	ble.w	802856c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 802833a:	2900      	cmp	r1, #0
 802833c:	f000 8119 	beq.w	8028572 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8028340:	9a01      	ldr	r2, [sp, #4]
 8028342:	f899 3001 	ldrb.w	r3, [r9, #1]
 8028346:	8855      	ldrh	r5, [r2, #2]
 8028348:	ea4f 08e3 	mov.w	r8, r3, asr #3
 802834c:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 8028350:	fb08 f802 	mul.w	r8, r8, r2
 8028354:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8028358:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802835c:	435d      	muls	r5, r3
 802835e:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8028362:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8028366:	44d0      	add	r8, sl
 8028368:	f105 0a20 	add.w	sl, r5, #32
 802836c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8028370:	0a2d      	lsrs	r5, r5, #8
 8028372:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8028376:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802837a:	432a      	orrs	r2, r5
 802837c:	3001      	adds	r0, #1
 802837e:	f100 80fe 	bmi.w	802857e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8028382:	4583      	cmp	fp, r0
 8028384:	f340 80fb 	ble.w	802857e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8028388:	f1be 0f00 	cmp.w	lr, #0
 802838c:	f000 80fc 	beq.w	8028588 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8028390:	2f00      	cmp	r7, #0
 8028392:	f2c0 80f1 	blt.w	8028578 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8028396:	42be      	cmp	r6, r7
 8028398:	f340 80ee 	ble.w	8028578 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 802839c:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 80283a0:	9801      	ldr	r0, [sp, #4]
 80283a2:	f819 5006 	ldrb.w	r5, [r9, r6]
 80283a6:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80283aa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80283ae:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 80283b2:	fb0a fa00 	mul.w	sl, sl, r0
 80283b6:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80283ba:	fb05 f808 	mul.w	r8, r5, r8
 80283be:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80283c2:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 80283c6:	4482      	add	sl, r0
 80283c8:	f108 0020 	add.w	r0, r8, #32
 80283cc:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80283d0:	0a00      	lsrs	r0, r0, #8
 80283d2:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80283d6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80283da:	ea4b 0b00 	orr.w	fp, fp, r0
 80283de:	3701      	adds	r7, #1
 80283e0:	f100 80d7 	bmi.w	8028592 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80283e4:	42be      	cmp	r6, r7
 80283e6:	f340 80d4 	ble.w	8028592 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80283ea:	2900      	cmp	r1, #0
 80283ec:	f000 80d4 	beq.w	8028598 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 80283f0:	9801      	ldr	r0, [sp, #4]
 80283f2:	3601      	adds	r6, #1
 80283f4:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80283f8:	f819 7006 	ldrb.w	r7, [r9, r6]
 80283fc:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 8028400:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028404:	fb07 f800 	mul.w	r8, r7, r0
 8028408:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 802840c:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8028410:	fb09 f906 	mul.w	r9, r9, r6
 8028414:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8028418:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 802841c:	44d1      	add	r9, sl
 802841e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8028422:	f108 0020 	add.w	r0, r8, #32
 8028426:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802842a:	0a00      	lsrs	r0, r0, #8
 802842c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028430:	4330      	orrs	r0, r6
 8028432:	b28e      	uxth	r6, r1
 8028434:	fa1f f98e 	uxth.w	r9, lr
 8028438:	fb06 f809 	mul.w	r8, r6, r9
 802843c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8028440:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8028444:	0136      	lsls	r6, r6, #4
 8028446:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802844a:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 802844e:	9601      	str	r6, [sp, #4]
 8028450:	ea4a 0404 	orr.w	r4, sl, r4
 8028454:	fa1f f689 	uxth.w	r6, r9
 8028458:	9602      	str	r6, [sp, #8]
 802845a:	4626      	mov	r6, r4
 802845c:	fb11 f90e 	smulbb	r9, r1, lr
 8028460:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8028464:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8028468:	f1ce 0410 	rsb	r4, lr, #16
 802846c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8028470:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028474:	1a64      	subs	r4, r4, r1
 8028476:	ea4a 0202 	orr.w	r2, sl, r2
 802847a:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 802847e:	434a      	muls	r2, r1
 8028480:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8028484:	fb04 2406 	mla	r4, r4, r6, r2
 8028488:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802848c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8028490:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028494:	ea4a 0000 	orr.w	r0, sl, r0
 8028498:	fb09 4200 	mla	r2, r9, r0, r4
 802849c:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80284a0:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 80284a4:	9801      	ldr	r0, [sp, #4]
 80284a6:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80284aa:	ea44 0b0b 	orr.w	fp, r4, fp
 80284ae:	9c02      	ldr	r4, [sp, #8]
 80284b0:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 80284b4:	1b00      	subs	r0, r0, r4
 80284b6:	9c01      	ldr	r4, [sp, #4]
 80284b8:	b280      	uxth	r0, r0
 80284ba:	eba4 0608 	sub.w	r6, r4, r8
 80284be:	b2b6      	uxth	r6, r6
 80284c0:	4373      	muls	r3, r6
 80284c2:	fb0c 3300 	mla	r3, ip, r0, r3
 80284c6:	9802      	ldr	r0, [sp, #8]
 80284c8:	9903      	ldr	r1, [sp, #12]
 80284ca:	fb00 3505 	mla	r5, r0, r5, r3
 80284ce:	fb08 5707 	mla	r7, r8, r7, r5
 80284d2:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80284d6:	8809      	ldrh	r1, [r1, #0]
 80284d8:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80284dc:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80284e0:	120b      	asrs	r3, r1, #8
 80284e2:	b2ff      	uxtb	r7, r7
 80284e4:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80284e8:	437b      	muls	r3, r7
 80284ea:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80284ee:	10c8      	asrs	r0, r1, #3
 80284f0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80284f4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80284f8:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80284fc:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8028500:	00c9      	lsls	r1, r1, #3
 8028502:	4378      	muls	r0, r7
 8028504:	ea42 0e0e 	orr.w	lr, r2, lr
 8028508:	b2c9      	uxtb	r1, r1
 802850a:	fa1f f28e 	uxth.w	r2, lr
 802850e:	434f      	muls	r7, r1
 8028510:	1c59      	adds	r1, r3, #1
 8028512:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8028516:	1213      	asrs	r3, r2, #8
 8028518:	f023 0307 	bic.w	r3, r3, #7
 802851c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8028520:	1c41      	adds	r1, r0, #1
 8028522:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8028526:	10d1      	asrs	r1, r2, #3
 8028528:	f021 0103 	bic.w	r1, r1, #3
 802852c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8028530:	021b      	lsls	r3, r3, #8
 8028532:	00c9      	lsls	r1, r1, #3
 8028534:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8028538:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 802853c:	430b      	orrs	r3, r1
 802853e:	1c79      	adds	r1, r7, #1
 8028540:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8028544:	00d2      	lsls	r2, r2, #3
 8028546:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 802854a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802854e:	431a      	orrs	r2, r3
 8028550:	9b03      	ldr	r3, [sp, #12]
 8028552:	801a      	strh	r2, [r3, #0]
 8028554:	b005      	add	sp, #20
 8028556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802855a:	f04f 0c00 	mov.w	ip, #0
 802855e:	4664      	mov	r4, ip
 8028560:	e6e5      	b.n	802832e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8028562:	2300      	movs	r3, #0
 8028564:	469c      	mov	ip, r3
 8028566:	461a      	mov	r2, r3
 8028568:	461c      	mov	r4, r3
 802856a:	e707      	b.n	802837c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802856c:	2300      	movs	r3, #0
 802856e:	461a      	mov	r2, r3
 8028570:	e704      	b.n	802837c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8028572:	460b      	mov	r3, r1
 8028574:	460a      	mov	r2, r1
 8028576:	e701      	b.n	802837c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8028578:	2500      	movs	r5, #0
 802857a:	46ab      	mov	fp, r5
 802857c:	e72f      	b.n	80283de <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 802857e:	2700      	movs	r7, #0
 8028580:	463d      	mov	r5, r7
 8028582:	4638      	mov	r0, r7
 8028584:	46bb      	mov	fp, r7
 8028586:	e754      	b.n	8028432 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8028588:	4677      	mov	r7, lr
 802858a:	4675      	mov	r5, lr
 802858c:	4670      	mov	r0, lr
 802858e:	46f3      	mov	fp, lr
 8028590:	e74f      	b.n	8028432 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8028592:	2700      	movs	r7, #0
 8028594:	4638      	mov	r0, r7
 8028596:	e74c      	b.n	8028432 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8028598:	460f      	mov	r7, r1
 802859a:	4608      	mov	r0, r1
 802859c:	e749      	b.n	8028432 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

080285a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80285a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80285a4:	b093      	sub	sp, #76	@ 0x4c
 80285a6:	9210      	str	r2, [sp, #64]	@ 0x40
 80285a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80285aa:	9011      	str	r0, [sp, #68]	@ 0x44
 80285ac:	6850      	ldr	r0, [r2, #4]
 80285ae:	910e      	str	r1, [sp, #56]	@ 0x38
 80285b0:	9306      	str	r3, [sp, #24]
 80285b2:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80285b6:	fb00 1303 	mla	r3, r0, r3, r1
 80285ba:	6812      	ldr	r2, [r2, #0]
 80285bc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80285c0:	9307      	str	r3, [sp, #28]
 80285c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80285c4:	681b      	ldr	r3, [r3, #0]
 80285c6:	9308      	str	r3, [sp, #32]
 80285c8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80285ca:	685b      	ldr	r3, [r3, #4]
 80285cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80285ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80285d0:	2b00      	cmp	r3, #0
 80285d2:	dc03      	bgt.n	80285dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80285d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80285d6:	2b00      	cmp	r3, #0
 80285d8:	f340 83b4 	ble.w	8028d44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 80285dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80285de:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80285e2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80285e6:	1e48      	subs	r0, r1, #1
 80285e8:	1e55      	subs	r5, r2, #1
 80285ea:	9b06      	ldr	r3, [sp, #24]
 80285ec:	2b00      	cmp	r3, #0
 80285ee:	f340 8163 	ble.w	80288b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80285f2:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 80285f4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80285f6:	1436      	asrs	r6, r6, #16
 80285f8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80285fc:	d406      	bmi.n	802860c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80285fe:	4286      	cmp	r6, r0
 8028600:	da04      	bge.n	802860c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028602:	2b00      	cmp	r3, #0
 8028604:	db02      	blt.n	802860c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028606:	42ab      	cmp	r3, r5
 8028608:	f2c0 8157 	blt.w	80288ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802860c:	3601      	adds	r6, #1
 802860e:	f100 8144 	bmi.w	802889a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8028612:	42b1      	cmp	r1, r6
 8028614:	f2c0 8141 	blt.w	802889a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8028618:	3301      	adds	r3, #1
 802861a:	f100 813e 	bmi.w	802889a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802861e:	429a      	cmp	r2, r3
 8028620:	f2c0 813b 	blt.w	802889a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8028624:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8028628:	9b06      	ldr	r3, [sp, #24]
 802862a:	9f07      	ldr	r7, [sp, #28]
 802862c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802862e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028630:	2b00      	cmp	r3, #0
 8028632:	f340 8164 	ble.w	80288fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8028636:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8028638:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802863a:	1418      	asrs	r0, r3, #16
 802863c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802863e:	142d      	asrs	r5, r5, #16
 8028640:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8028644:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8028646:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802864a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802864c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8028650:	f100 81ee 	bmi.w	8028a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8028654:	f102 3eff 	add.w	lr, r2, #4294967295
 8028658:	4575      	cmp	r5, lr
 802865a:	f280 81e9 	bge.w	8028a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802865e:	2800      	cmp	r0, #0
 8028660:	f2c0 81e6 	blt.w	8028a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8028664:	f103 3eff 	add.w	lr, r3, #4294967295
 8028668:	4570      	cmp	r0, lr
 802866a:	f280 81e1 	bge.w	8028a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802866e:	b212      	sxth	r2, r2
 8028670:	fb00 5002 	mla	r0, r0, r2, r5
 8028674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028676:	fa1f fe81 	uxth.w	lr, r1
 802867a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802867e:	eb03 0a00 	add.w	sl, r3, r0
 8028682:	f813 9000 	ldrb.w	r9, [r3, r0]
 8028686:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 802868a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802868e:	b29b      	uxth	r3, r3
 8028690:	f1bc 0f00 	cmp.w	ip, #0
 8028694:	f000 8179 	beq.w	802898a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8028698:	f81a 4002 	ldrb.w	r4, [sl, r2]
 802869c:	eb0a 0b02 	add.w	fp, sl, r2
 80286a0:	fa1f fa8c 	uxth.w	sl, ip
 80286a4:	fb0a fe0e 	mul.w	lr, sl, lr
 80286a8:	eba5 050e 	sub.w	r5, r5, lr
 80286ac:	b2ad      	uxth	r5, r5
 80286ae:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80286b2:	fb08 f505 	mul.w	r5, r8, r5
 80286b6:	fa1f fa8a 	uxth.w	sl, sl
 80286ba:	eba3 030a 	sub.w	r3, r3, sl
 80286be:	b29b      	uxth	r3, r3
 80286c0:	940a      	str	r4, [sp, #40]	@ 0x28
 80286c2:	fb09 5303 	mla	r3, r9, r3, r5
 80286c6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80286ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 80286cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80286ce:	fb0a 3304 	mla	r3, sl, r4, r3
 80286d2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80286d4:	fb0e 3304 	mla	r3, lr, r4, r3
 80286d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80286dc:	2b00      	cmp	r3, #0
 80286de:	f000 80cf 	beq.w	8028880 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80286e2:	9c08      	ldr	r4, [sp, #32]
 80286e4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80286e8:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80286ec:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80286f0:	f000 8150 	beq.w	8028994 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80286f4:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 80286f8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80286fc:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028700:	fb09 f000 	mul.w	r0, r9, r0
 8028704:	fb0a fe0e 	mul.w	lr, sl, lr
 8028708:	f100 0b20 	add.w	fp, r0, #32
 802870c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8028710:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8028714:	44ce      	add	lr, r9
 8028716:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802871a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802871e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8028722:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8028726:	ea4e 0909 	orr.w	r9, lr, r9
 802872a:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802872e:	8868      	ldrh	r0, [r5, #2]
 8028730:	d019      	beq.n	8028766 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8028732:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8028736:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802873a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802873e:	fb08 f800 	mul.w	r8, r8, r0
 8028742:	fb0a fe0e 	mul.w	lr, sl, lr
 8028746:	f108 0b20 	add.w	fp, r8, #32
 802874a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802874e:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8028752:	4486      	add	lr, r0
 8028754:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8028758:	0a00      	lsrs	r0, r0, #8
 802875a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802875e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028762:	ea4e 0000 	orr.w	r0, lr, r0
 8028766:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802876a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802876e:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8028772:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8028776:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802877a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802877e:	ea4e 0909 	orr.w	r9, lr, r9
 8028782:	ea4a 0000 	orr.w	r0, sl, r0
 8028786:	f1bc 0f00 	cmp.w	ip, #0
 802878a:	f000 8105 	beq.w	8028998 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802878e:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8028792:	3a01      	subs	r2, #1
 8028794:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8028796:	0052      	lsls	r2, r2, #1
 8028798:	3202      	adds	r2, #2
 802879a:	2cff      	cmp	r4, #255	@ 0xff
 802879c:	eb05 0e02 	add.w	lr, r5, r2
 80287a0:	5aaa      	ldrh	r2, [r5, r2]
 80287a2:	d018      	beq.n	80287d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80287a4:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 80287a8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80287ac:	fb04 fa02 	mul.w	sl, r4, r2
 80287b0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80287b4:	fb08 f805 	mul.w	r8, r8, r5
 80287b8:	f10a 0520 	add.w	r5, sl, #32
 80287bc:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80287c0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80287c4:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80287c8:	4442      	add	r2, r8
 80287ca:	0a2d      	lsrs	r5, r5, #8
 80287cc:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80287d0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80287d4:	432a      	orrs	r2, r5
 80287d6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80287d8:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80287dc:	2cff      	cmp	r4, #255	@ 0xff
 80287de:	d01a      	beq.n	8028816 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80287e0:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 80287e4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80287e8:	fb04 fa05 	mul.w	sl, r4, r5
 80287ec:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80287f0:	fb08 f80e 	mul.w	r8, r8, lr
 80287f4:	f10a 0e20 	add.w	lr, sl, #32
 80287f8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80287fc:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8028800:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8028804:	4445      	add	r5, r8
 8028806:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802880a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802880e:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8028812:	ea45 050e 	orr.w	r5, r5, lr
 8028816:	fb1c fe01 	smulbb	lr, ip, r1
 802881a:	f1cc 0810 	rsb	r8, ip, #16
 802881e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8028822:	eba8 0801 	sub.w	r8, r8, r1
 8028826:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802882a:	4341      	muls	r1, r0
 802882c:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8028830:	fb09 1108 	mla	r1, r9, r8, r1
 8028834:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8028838:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802883c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028840:	ea4a 0202 	orr.w	r2, sl, r2
 8028844:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8028848:	fb0c 1102 	mla	r1, ip, r2, r1
 802884c:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8028850:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028854:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8028858:	ea4b 0505 	orr.w	r5, fp, r5
 802885c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8028860:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8028864:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8028868:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802886c:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8028870:	ea42 0e0e 	orr.w	lr, r2, lr
 8028874:	fa1f f28e 	uxth.w	r2, lr
 8028878:	2bff      	cmp	r3, #255	@ 0xff
 802887a:	f040 80a1 	bne.w	80289c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 802887e:	803a      	strh	r2, [r7, #0]
 8028880:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028882:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8028884:	3702      	adds	r7, #2
 8028886:	4413      	add	r3, r2
 8028888:	931d      	str	r3, [sp, #116]	@ 0x74
 802888a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802888c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802888e:	441a      	add	r2, r3
 8028890:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028892:	921e      	str	r2, [sp, #120]	@ 0x78
 8028894:	3b01      	subs	r3, #1
 8028896:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028898:	e6c9      	b.n	802862e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802889a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802889c:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 802889e:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 80288a0:	4433      	add	r3, r6
 80288a2:	931d      	str	r3, [sp, #116]	@ 0x74
 80288a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80288a6:	441c      	add	r4, r3
 80288a8:	9b06      	ldr	r3, [sp, #24]
 80288aa:	941e      	str	r4, [sp, #120]	@ 0x78
 80288ac:	3b01      	subs	r3, #1
 80288ae:	9306      	str	r3, [sp, #24]
 80288b0:	9b07      	ldr	r3, [sp, #28]
 80288b2:	3302      	adds	r3, #2
 80288b4:	9307      	str	r3, [sp, #28]
 80288b6:	e698      	b.n	80285ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80288b8:	d028      	beq.n	802890c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80288ba:	9b06      	ldr	r3, [sp, #24]
 80288bc:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80288be:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80288c0:	3b01      	subs	r3, #1
 80288c2:	fb00 5003 	mla	r0, r0, r3, r5
 80288c6:	1400      	asrs	r0, r0, #16
 80288c8:	f53f aeac 	bmi.w	8028624 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80288cc:	3901      	subs	r1, #1
 80288ce:	4288      	cmp	r0, r1
 80288d0:	f6bf aea8 	bge.w	8028624 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80288d4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80288d6:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80288d8:	fb01 0303 	mla	r3, r1, r3, r0
 80288dc:	141b      	asrs	r3, r3, #16
 80288de:	f53f aea1 	bmi.w	8028624 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80288e2:	3a01      	subs	r2, #1
 80288e4:	4293      	cmp	r3, r2
 80288e6:	f6bf ae9d 	bge.w	8028624 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80288ea:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 80288ee:	9b06      	ldr	r3, [sp, #24]
 80288f0:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80288f4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80288f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80288f8:	2b00      	cmp	r3, #0
 80288fa:	f300 80b6 	bgt.w	8028a6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 80288fe:	9b06      	ldr	r3, [sp, #24]
 8028900:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8028904:	9b07      	ldr	r3, [sp, #28]
 8028906:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802890a:	9307      	str	r3, [sp, #28]
 802890c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802890e:	2b00      	cmp	r3, #0
 8028910:	f340 8218 	ble.w	8028d44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8028914:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028918:	ee30 0a04 	vadd.f32	s0, s0, s8
 802891c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028920:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028924:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028928:	eef0 6a62 	vmov.f32	s13, s5
 802892c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028930:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028934:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028938:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802893c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028940:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8028944:	eef0 6a43 	vmov.f32	s13, s6
 8028948:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802894c:	ee12 2a90 	vmov	r2, s5
 8028950:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028954:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028956:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802895a:	fb92 f3f3 	sdiv	r3, r2, r3
 802895e:	ee13 2a10 	vmov	r2, s6
 8028962:	931f      	str	r3, [sp, #124]	@ 0x7c
 8028964:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028966:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 802896a:	fb92 f3f3 	sdiv	r3, r2, r3
 802896e:	9320      	str	r3, [sp, #128]	@ 0x80
 8028970:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028972:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8028974:	3b01      	subs	r3, #1
 8028976:	930e      	str	r3, [sp, #56]	@ 0x38
 8028978:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802897a:	bf08      	it	eq
 802897c:	4613      	moveq	r3, r2
 802897e:	eeb0 3a67 	vmov.f32	s6, s15
 8028982:	9306      	str	r3, [sp, #24]
 8028984:	eef0 2a47 	vmov.f32	s5, s14
 8028988:	e621      	b.n	80285ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802898a:	fb08 f505 	mul.w	r5, r8, r5
 802898e:	fb09 5303 	mla	r3, r9, r3, r5
 8028992:	e6a1      	b.n	80286d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8028994:	4681      	mov	r9, r0
 8028996:	e6c8      	b.n	802872a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8028998:	f1c1 0210 	rsb	r2, r1, #16
 802899c:	4341      	muls	r1, r0
 802899e:	fb09 1902 	mla	r9, r9, r2, r1
 80289a2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80289a6:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80289aa:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80289ae:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80289b2:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80289b6:	ea42 0909 	orr.w	r9, r2, r9
 80289ba:	fa1f f289 	uxth.w	r2, r9
 80289be:	e75b      	b.n	8028878 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80289c0:	43db      	mvns	r3, r3
 80289c2:	f8b7 c000 	ldrh.w	ip, [r7]
 80289c6:	fa5f fe83 	uxtb.w	lr, r3
 80289ca:	ea4f 202c 	mov.w	r0, ip, asr #8
 80289ce:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80289d2:	fb00 f00e 	mul.w	r0, r0, lr
 80289d6:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80289da:	1c41      	adds	r1, r0, #1
 80289dc:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80289e0:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80289e4:	fb05 f50e 	mul.w	r5, r5, lr
 80289e8:	1211      	asrs	r1, r2, #8
 80289ea:	f021 0107 	bic.w	r1, r1, #7
 80289ee:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80289f2:	48d6      	ldr	r0, [pc, #856]	@ (8028d4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 80289f4:	b2c9      	uxtb	r1, r1
 80289f6:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 80289fa:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80289fe:	1c69      	adds	r1, r5, #1
 8028a00:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8028a04:	b2db      	uxtb	r3, r3
 8028a06:	10d1      	asrs	r1, r2, #3
 8028a08:	fb03 f30e 	mul.w	r3, r3, lr
 8028a0c:	f021 0103 	bic.w	r1, r1, #3
 8028a10:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8028a14:	00c9      	lsls	r1, r1, #3
 8028a16:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8028a1a:	4301      	orrs	r1, r0
 8028a1c:	1c58      	adds	r0, r3, #1
 8028a1e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8028a22:	00d2      	lsls	r2, r2, #3
 8028a24:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028a28:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028a2c:	430a      	orrs	r2, r1
 8028a2e:	e726      	b.n	802887e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 8028a30:	f115 0e01 	adds.w	lr, r5, #1
 8028a34:	f53f af24 	bmi.w	8028880 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8028a38:	4572      	cmp	r2, lr
 8028a3a:	f6ff af21 	blt.w	8028880 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8028a3e:	f110 0e01 	adds.w	lr, r0, #1
 8028a42:	f53f af1d 	bmi.w	8028880 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8028a46:	4573      	cmp	r3, lr
 8028a48:	f6ff af1a 	blt.w	8028880 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8028a4c:	b21b      	sxth	r3, r3
 8028a4e:	b212      	sxth	r2, r2
 8028a50:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8028a54:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8028a58:	9301      	str	r3, [sp, #4]
 8028a5a:	9200      	str	r2, [sp, #0]
 8028a5c:	4639      	mov	r1, r7
 8028a5e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8028a62:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8028a64:	f7ff fc24 	bl	80282b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8028a68:	e70a      	b.n	8028880 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8028a6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028a6c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8028a70:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8028a72:	fa1f fc82 	uxth.w	ip, r2
 8028a76:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8028a7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028a7c:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8028a80:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028a84:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8028a86:	141f      	asrs	r7, r3, #16
 8028a88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028a8a:	141b      	asrs	r3, r3, #16
 8028a8c:	fb01 3707 	mla	r7, r1, r7, r3
 8028a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028a92:	eb03 0a07 	add.w	sl, r3, r7
 8028a96:	f813 9007 	ldrb.w	r9, [r3, r7]
 8028a9a:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8028a9e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8028aa2:	b29b      	uxth	r3, r3
 8028aa4:	2d00      	cmp	r5, #0
 8028aa6:	f000 80fe 	beq.w	8028ca6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8028aaa:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8028aae:	eb0a 0b01 	add.w	fp, sl, r1
 8028ab2:	fa1f fa85 	uxth.w	sl, r5
 8028ab6:	fb0a fc0c 	mul.w	ip, sl, ip
 8028aba:	eba0 000c 	sub.w	r0, r0, ip
 8028abe:	b280      	uxth	r0, r0
 8028ac0:	fb08 f000 	mul.w	r0, r8, r0
 8028ac4:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8028ac8:	fa1f fa8a 	uxth.w	sl, sl
 8028acc:	eba3 030a 	sub.w	r3, r3, sl
 8028ad0:	b29b      	uxth	r3, r3
 8028ad2:	fb09 0303 	mla	r3, r9, r3, r0
 8028ad6:	940c      	str	r4, [sp, #48]	@ 0x30
 8028ad8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8028ada:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8028ade:	fb0a 3300 	mla	r3, sl, r0, r3
 8028ae2:	fb0c 3304 	mla	r3, ip, r4, r3
 8028ae6:	940d      	str	r4, [sp, #52]	@ 0x34
 8028ae8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028aec:	2b00      	cmp	r3, #0
 8028aee:	f000 80cc 	beq.w	8028c8a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8028af2:	9808      	ldr	r0, [sp, #32]
 8028af4:	9c08      	ldr	r4, [sp, #32]
 8028af6:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8028afa:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8028afe:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8028b02:	f000 80d5 	beq.w	8028cb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8028b06:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8028b0a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8028b0e:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8028b12:	fb09 f707 	mul.w	r7, r9, r7
 8028b16:	fb0a fc0c 	mul.w	ip, sl, ip
 8028b1a:	f107 0b20 	add.w	fp, r7, #32
 8028b1e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8028b22:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8028b26:	44cc      	add	ip, r9
 8028b28:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8028b2c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028b30:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8028b34:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8028b38:	ea4c 0909 	orr.w	r9, ip, r9
 8028b3c:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8028b40:	8847      	ldrh	r7, [r0, #2]
 8028b42:	d019      	beq.n	8028b78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 8028b44:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8028b48:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8028b4c:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8028b50:	fb08 f807 	mul.w	r8, r8, r7
 8028b54:	fb0a fc0c 	mul.w	ip, sl, ip
 8028b58:	f108 0b20 	add.w	fp, r8, #32
 8028b5c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8028b60:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8028b64:	44bc      	add	ip, r7
 8028b66:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8028b6a:	0a3f      	lsrs	r7, r7, #8
 8028b6c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8028b70:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8028b74:	ea4c 0707 	orr.w	r7, ip, r7
 8028b78:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8028b7c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8028b80:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8028b84:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8028b88:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8028b8c:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8028b90:	ea4c 0909 	orr.w	r9, ip, r9
 8028b94:	ea4a 0707 	orr.w	r7, sl, r7
 8028b98:	2d00      	cmp	r5, #0
 8028b9a:	f000 808b 	beq.w	8028cb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8028b9e:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8028ba2:	3901      	subs	r1, #1
 8028ba4:	0049      	lsls	r1, r1, #1
 8028ba6:	3102      	adds	r1, #2
 8028ba8:	eb00 0c01 	add.w	ip, r0, r1
 8028bac:	5a41      	ldrh	r1, [r0, r1]
 8028bae:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8028bb0:	28ff      	cmp	r0, #255	@ 0xff
 8028bb2:	d019      	beq.n	8028be8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 8028bb4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8028bb6:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8028bba:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8028bbe:	fb04 fa01 	mul.w	sl, r4, r1
 8028bc2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028bc6:	fb08 f800 	mul.w	r8, r8, r0
 8028bca:	f10a 0020 	add.w	r0, sl, #32
 8028bce:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8028bd2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8028bd6:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8028bda:	4441      	add	r1, r8
 8028bdc:	0a00      	lsrs	r0, r0, #8
 8028bde:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8028be2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028be6:	4301      	orrs	r1, r0
 8028be8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8028bea:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8028bee:	2cff      	cmp	r4, #255	@ 0xff
 8028bf0:	d01a      	beq.n	8028c28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 8028bf2:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8028bf6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028bfa:	fb04 fa00 	mul.w	sl, r4, r0
 8028bfe:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028c02:	fb08 f80c 	mul.w	r8, r8, ip
 8028c06:	f10a 0c20 	add.w	ip, sl, #32
 8028c0a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8028c0e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8028c12:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8028c16:	4440      	add	r0, r8
 8028c18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028c1c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8028c20:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8028c24:	ea40 000c 	orr.w	r0, r0, ip
 8028c28:	fb15 fc02 	smulbb	ip, r5, r2
 8028c2c:	f1c5 0810 	rsb	r8, r5, #16
 8028c30:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8028c34:	eba8 0802 	sub.w	r8, r8, r2
 8028c38:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8028c3c:	437a      	muls	r2, r7
 8028c3e:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8028c42:	fb09 2208 	mla	r2, r9, r8, r2
 8028c46:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8028c4a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8028c4e:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8028c52:	ea4a 0101 	orr.w	r1, sl, r1
 8028c56:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8028c5a:	fb05 2201 	mla	r2, r5, r1, r2
 8028c5e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8028c62:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028c66:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028c6a:	ea4b 0000 	orr.w	r0, fp, r0
 8028c6e:	fb0c 2200 	mla	r2, ip, r0, r2
 8028c72:	0d57      	lsrs	r7, r2, #21
 8028c74:	0952      	lsrs	r2, r2, #5
 8028c76:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8028c7a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028c7e:	433a      	orrs	r2, r7
 8028c80:	2bff      	cmp	r3, #255	@ 0xff
 8028c82:	b292      	uxth	r2, r2
 8028c84:	d127      	bne.n	8028cd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8028c86:	f8ae 2000 	strh.w	r2, [lr]
 8028c8a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028c8c:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8028c8e:	f10e 0e02 	add.w	lr, lr, #2
 8028c92:	4413      	add	r3, r2
 8028c94:	931d      	str	r3, [sp, #116]	@ 0x74
 8028c96:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8028c98:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028c9a:	441a      	add	r2, r3
 8028c9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028c9e:	921e      	str	r2, [sp, #120]	@ 0x78
 8028ca0:	3b01      	subs	r3, #1
 8028ca2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028ca4:	e627      	b.n	80288f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028ca6:	fb08 f000 	mul.w	r0, r8, r0
 8028caa:	fb09 0303 	mla	r3, r9, r3, r0
 8028cae:	e71b      	b.n	8028ae8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8028cb0:	46b9      	mov	r9, r7
 8028cb2:	e743      	b.n	8028b3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 8028cb4:	f1c2 0110 	rsb	r1, r2, #16
 8028cb8:	437a      	muls	r2, r7
 8028cba:	fb09 2901 	mla	r9, r9, r1, r2
 8028cbe:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8028cc2:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8028cc6:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8028cca:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028cce:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028cd2:	4302      	orrs	r2, r0
 8028cd4:	e7d4      	b.n	8028c80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8028cd6:	43db      	mvns	r3, r3
 8028cd8:	f8be 7000 	ldrh.w	r7, [lr]
 8028cdc:	fa5f fc83 	uxtb.w	ip, r3
 8028ce0:	1238      	asrs	r0, r7, #8
 8028ce2:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8028ce6:	fb00 f00c 	mul.w	r0, r0, ip
 8028cea:	10fd      	asrs	r5, r7, #3
 8028cec:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8028cf0:	fb05 f10c 	mul.w	r1, r5, ip
 8028cf4:	1c45      	adds	r5, r0, #1
 8028cf6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028cfa:	1215      	asrs	r5, r2, #8
 8028cfc:	f025 0507 	bic.w	r5, r5, #7
 8028d00:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028d04:	00fb      	lsls	r3, r7, #3
 8028d06:	1c4d      	adds	r5, r1, #1
 8028d08:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8028d0c:	b2db      	uxtb	r3, r3
 8028d0e:	10d1      	asrs	r1, r2, #3
 8028d10:	fb03 f30c 	mul.w	r3, r3, ip
 8028d14:	f021 0103 	bic.w	r1, r1, #3
 8028d18:	4c0c      	ldr	r4, [pc, #48]	@ (8028d4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8028d1a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8028d1e:	b2c0      	uxtb	r0, r0
 8028d20:	00c9      	lsls	r1, r1, #3
 8028d22:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8028d26:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8028d2a:	4308      	orrs	r0, r1
 8028d2c:	1c59      	adds	r1, r3, #1
 8028d2e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028d32:	00d2      	lsls	r2, r2, #3
 8028d34:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028d38:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8028d3c:	4318      	orrs	r0, r3
 8028d3e:	f8ae 0000 	strh.w	r0, [lr]
 8028d42:	e7a2      	b.n	8028c8a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8028d44:	b013      	add	sp, #76	@ 0x4c
 8028d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028d4a:	bf00      	nop
 8028d4c:	fffff800 	.word	0xfffff800

08028d50 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8028d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028d54:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	@ 0x24
 8028d58:	fb05 4c03 	mla	ip, r5, r3, r4
 8028d5c:	2d00      	cmp	r5, #0
 8028d5e:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8028d62:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8028d66:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8028d6a:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8028d6e:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8028d72:	8808      	ldrh	r0, [r1, #0]
 8028d74:	f2c0 80a7 	blt.w	8028ec6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8028d78:	45aa      	cmp	sl, r5
 8028d7a:	f340 80a4 	ble.w	8028ec6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8028d7e:	2c00      	cmp	r4, #0
 8028d80:	f2c0 809f 	blt.w	8028ec2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8028d84:	42a3      	cmp	r3, r4
 8028d86:	f340 809c 	ble.w	8028ec2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8028d8a:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8028d8e:	1c62      	adds	r2, r4, #1
 8028d90:	f100 809c 	bmi.w	8028ecc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8028d94:	4293      	cmp	r3, r2
 8028d96:	f340 8099 	ble.w	8028ecc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8028d9a:	f1b9 0f00 	cmp.w	r9, #0
 8028d9e:	f000 8095 	beq.w	8028ecc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8028da2:	f8be c002 	ldrh.w	ip, [lr, #2]
 8028da6:	3501      	adds	r5, #1
 8028da8:	f100 8094 	bmi.w	8028ed4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8028dac:	45aa      	cmp	sl, r5
 8028dae:	f340 8091 	ble.w	8028ed4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8028db2:	2f00      	cmp	r7, #0
 8028db4:	f000 808e 	beq.w	8028ed4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8028db8:	2c00      	cmp	r4, #0
 8028dba:	f2c0 8089 	blt.w	8028ed0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8028dbe:	42a3      	cmp	r3, r4
 8028dc0:	f340 8086 	ble.w	8028ed0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8028dc4:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8028dc8:	3401      	adds	r4, #1
 8028dca:	f100 8086 	bmi.w	8028eda <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8028dce:	42a3      	cmp	r3, r4
 8028dd0:	f340 8083 	ble.w	8028eda <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8028dd4:	f1b9 0f00 	cmp.w	r9, #0
 8028dd8:	d07f      	beq.n	8028eda <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8028dda:	3301      	adds	r3, #1
 8028ddc:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8028de0:	fb19 fe07 	smulbb	lr, r9, r7
 8028de4:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8028de8:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8028dec:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8028df0:	ea44 0808 	orr.w	r8, r4, r8
 8028df4:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8028df8:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8028dfc:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8028e00:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8028e04:	ea44 0c0c 	orr.w	ip, r4, ip
 8028e08:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8028e0c:	fb04 f40c 	mul.w	r4, r4, ip
 8028e10:	f1c7 0210 	rsb	r2, r7, #16
 8028e14:	eba2 0209 	sub.w	r2, r2, r9
 8028e18:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8028e1c:	fb02 4808 	mla	r8, r2, r8, r4
 8028e20:	b2b4      	uxth	r4, r6
 8028e22:	43f6      	mvns	r6, r6
 8028e24:	041a      	lsls	r2, r3, #16
 8028e26:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8028e2a:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8028e2e:	4313      	orrs	r3, r2
 8028e30:	fb0e 8303 	mla	r3, lr, r3, r8
 8028e34:	042a      	lsls	r2, r5, #16
 8028e36:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8028e3a:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8028e3e:	432a      	orrs	r2, r5
 8028e40:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8028e44:	fb07 3202 	mla	r2, r7, r2, r3
 8028e48:	0d53      	lsrs	r3, r2, #21
 8028e4a:	0952      	lsrs	r2, r2, #5
 8028e4c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028e50:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028e54:	431a      	orrs	r2, r3
 8028e56:	b293      	uxth	r3, r2
 8028e58:	1202      	asrs	r2, r0, #8
 8028e5a:	b2f6      	uxtb	r6, r6
 8028e5c:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8028e60:	fb12 f206 	smulbb	r2, r2, r6
 8028e64:	10c7      	asrs	r7, r0, #3
 8028e66:	00c0      	lsls	r0, r0, #3
 8028e68:	b2c0      	uxtb	r0, r0
 8028e6a:	121d      	asrs	r5, r3, #8
 8028e6c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8028e70:	fb10 f006 	smulbb	r0, r0, r6
 8028e74:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8028e78:	fb17 f706 	smulbb	r7, r7, r6
 8028e7c:	fb05 2504 	mla	r5, r5, r4, r2
 8028e80:	10da      	asrs	r2, r3, #3
 8028e82:	00db      	lsls	r3, r3, #3
 8028e84:	b2db      	uxtb	r3, r3
 8028e86:	fb03 0004 	mla	r0, r3, r4, r0
 8028e8a:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8028e8e:	fb02 7204 	mla	r2, r2, r4, r7
 8028e92:	b2ad      	uxth	r5, r5
 8028e94:	b280      	uxth	r0, r0
 8028e96:	1c6b      	adds	r3, r5, #1
 8028e98:	b292      	uxth	r2, r2
 8028e9a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8028e9e:	1c43      	adds	r3, r0, #1
 8028ea0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8028ea4:	1c50      	adds	r0, r2, #1
 8028ea6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8028eaa:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8028eae:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028eb2:	0952      	lsrs	r2, r2, #5
 8028eb4:	432b      	orrs	r3, r5
 8028eb6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028eba:	4313      	orrs	r3, r2
 8028ebc:	800b      	strh	r3, [r1, #0]
 8028ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028ec2:	4680      	mov	r8, r0
 8028ec4:	e763      	b.n	8028d8e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8028ec6:	4684      	mov	ip, r0
 8028ec8:	4680      	mov	r8, r0
 8028eca:	e76c      	b.n	8028da6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8028ecc:	4684      	mov	ip, r0
 8028ece:	e76a      	b.n	8028da6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8028ed0:	4605      	mov	r5, r0
 8028ed2:	e779      	b.n	8028dc8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8028ed4:	4603      	mov	r3, r0
 8028ed6:	4605      	mov	r5, r0
 8028ed8:	e782      	b.n	8028de0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8028eda:	4603      	mov	r3, r0
 8028edc:	e780      	b.n	8028de0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08028ede <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028ede:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028ee2:	b093      	sub	sp, #76	@ 0x4c
 8028ee4:	461d      	mov	r5, r3
 8028ee6:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8028eea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8028eec:	910a      	str	r1, [sp, #40]	@ 0x28
 8028eee:	9210      	str	r2, [sp, #64]	@ 0x40
 8028ef0:	6859      	ldr	r1, [r3, #4]
 8028ef2:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8028ef6:	681b      	ldr	r3, [r3, #0]
 8028ef8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8028efa:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	@ 0x88
 8028efe:	fb01 2707 	mla	r7, r1, r7, r2
 8028f02:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8028f06:	9307      	str	r3, [sp, #28]
 8028f08:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028f0a:	9011      	str	r0, [sp, #68]	@ 0x44
 8028f0c:	681b      	ldr	r3, [r3, #0]
 8028f0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8028f10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028f12:	43db      	mvns	r3, r3
 8028f14:	b2db      	uxtb	r3, r3
 8028f16:	9308      	str	r3, [sp, #32]
 8028f18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028f1a:	2b00      	cmp	r3, #0
 8028f1c:	dc03      	bgt.n	8028f26 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8028f1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028f20:	2b00      	cmp	r3, #0
 8028f22:	f340 8203 	ble.w	802932c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8028f26:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028f28:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028f2c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028f30:	1e48      	subs	r0, r1, #1
 8028f32:	f102 3cff 	add.w	ip, r2, #4294967295
 8028f36:	2d00      	cmp	r5, #0
 8028f38:	f340 80da 	ble.w	80290f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028f3c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028f40:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028f44:	d406      	bmi.n	8028f54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8028f46:	4586      	cmp	lr, r0
 8028f48:	da04      	bge.n	8028f54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8028f4a:	2b00      	cmp	r3, #0
 8028f4c:	db02      	blt.n	8028f54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8028f4e:	4563      	cmp	r3, ip
 8028f50:	f2c0 80cf 	blt.w	80290f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8028f54:	f11e 0e01 	adds.w	lr, lr, #1
 8028f58:	f100 80c1 	bmi.w	80290de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8028f5c:	4571      	cmp	r1, lr
 8028f5e:	f2c0 80be 	blt.w	80290de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8028f62:	3301      	adds	r3, #1
 8028f64:	f100 80bb 	bmi.w	80290de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8028f68:	429a      	cmp	r2, r3
 8028f6a:	f2c0 80b8 	blt.w	80290de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8028f6e:	46a9      	mov	r9, r5
 8028f70:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8028f74:	f1b9 0f00 	cmp.w	r9, #0
 8028f78:	f340 80d8 	ble.w	802912c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8028f7c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028f7e:	1421      	asrs	r1, r4, #16
 8028f80:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028f84:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028f88:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028f8c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8028f90:	f100 8111 	bmi.w	80291b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028f94:	f10e 3aff 	add.w	sl, lr, #4294967295
 8028f98:	4551      	cmp	r1, sl
 8028f9a:	f280 810c 	bge.w	80291b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028f9e:	2800      	cmp	r0, #0
 8028fa0:	f2c0 8109 	blt.w	80291b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028fa4:	f103 3aff 	add.w	sl, r3, #4294967295
 8028fa8:	4550      	cmp	r0, sl
 8028faa:	f280 8104 	bge.w	80291b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028fae:	fa0f f38e 	sxth.w	r3, lr
 8028fb2:	fb00 1103 	mla	r1, r0, r3, r1
 8028fb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8028fb8:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8028fbc:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8028fc0:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8028fc4:	f1bc 0f00 	cmp.w	ip, #0
 8028fc8:	d007      	beq.n	8028fda <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8028fca:	005b      	lsls	r3, r3, #1
 8028fcc:	eb0a 0003 	add.w	r0, sl, r3
 8028fd0:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8028fd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8028fd6:	8843      	ldrh	r3, [r0, #2]
 8028fd8:	930d      	str	r3, [sp, #52]	@ 0x34
 8028fda:	fb12 f30c 	smulbb	r3, r2, ip
 8028fde:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8028fe2:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8028fe6:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8028fea:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8028fee:	10db      	asrs	r3, r3, #3
 8028ff0:	ea40 000e 	orr.w	r0, r0, lr
 8028ff4:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8028ff8:	f1cc 0e10 	rsb	lr, ip, #16
 8028ffc:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8029000:	ebae 0e02 	sub.w	lr, lr, r2
 8029004:	ea4a 0101 	orr.w	r1, sl, r1
 8029008:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802900c:	4351      	muls	r1, r2
 802900e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8029012:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8029014:	fb0e 1e00 	mla	lr, lr, r0, r1
 8029018:	0410      	lsls	r0, r2, #16
 802901a:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802901e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8029022:	4310      	orrs	r0, r2
 8029024:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029026:	fb03 e000 	mla	r0, r3, r0, lr
 802902a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802902c:	0412      	lsls	r2, r2, #16
 802902e:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8029032:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8029036:	ea42 020e 	orr.w	r2, r2, lr
 802903a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802903e:	fb03 0302 	mla	r3, r3, r2, r0
 8029042:	f8b8 0000 	ldrh.w	r0, [r8]
 8029046:	9f08      	ldr	r7, [sp, #32]
 8029048:	0d5a      	lsrs	r2, r3, #21
 802904a:	1201      	asrs	r1, r0, #8
 802904c:	095b      	lsrs	r3, r3, #5
 802904e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029052:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8029056:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802905a:	4313      	orrs	r3, r2
 802905c:	fb11 f107 	smulbb	r1, r1, r7
 8029060:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8029064:	00c0      	lsls	r0, r0, #3
 8029066:	b29b      	uxth	r3, r3
 8029068:	b2c0      	uxtb	r0, r0
 802906a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 802906e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8029072:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8029076:	fb10 f007 	smulbb	r0, r0, r7
 802907a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802907e:	fb1e fe07 	smulbb	lr, lr, r7
 8029082:	fb0c 1c02 	mla	ip, ip, r2, r1
 8029086:	10d9      	asrs	r1, r3, #3
 8029088:	00db      	lsls	r3, r3, #3
 802908a:	b2db      	uxtb	r3, r3
 802908c:	fb03 0302 	mla	r3, r3, r2, r0
 8029090:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8029094:	fb01 e102 	mla	r1, r1, r2, lr
 8029098:	fa1f fc8c 	uxth.w	ip, ip
 802909c:	b29a      	uxth	r2, r3
 802909e:	f10c 0301 	add.w	r3, ip, #1
 80290a2:	b289      	uxth	r1, r1
 80290a4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80290a8:	1c53      	adds	r3, r2, #1
 80290aa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80290ae:	1c4a      	adds	r2, r1, #1
 80290b0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80290b4:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80290b8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80290bc:	0949      	lsrs	r1, r1, #5
 80290be:	ea43 030c 	orr.w	r3, r3, ip
 80290c2:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80290c6:	430b      	orrs	r3, r1
 80290c8:	f8a8 3000 	strh.w	r3, [r8]
 80290cc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80290ce:	f108 0802 	add.w	r8, r8, #2
 80290d2:	441c      	add	r4, r3
 80290d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80290d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80290da:	441e      	add	r6, r3
 80290dc:	e74a      	b.n	8028f74 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80290de:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80290e0:	3d01      	subs	r5, #1
 80290e2:	441c      	add	r4, r3
 80290e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80290e6:	441e      	add	r6, r3
 80290e8:	9b07      	ldr	r3, [sp, #28]
 80290ea:	3302      	adds	r3, #2
 80290ec:	9307      	str	r3, [sp, #28]
 80290ee:	e722      	b.n	8028f36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80290f0:	d022      	beq.n	8029138 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80290f2:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80290f4:	1e6b      	subs	r3, r5, #1
 80290f6:	fb00 4003 	mla	r0, r0, r3, r4
 80290fa:	1400      	asrs	r0, r0, #16
 80290fc:	f53f af37 	bmi.w	8028f6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8029100:	3901      	subs	r1, #1
 8029102:	4288      	cmp	r0, r1
 8029104:	f6bf af33 	bge.w	8028f6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8029108:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802910a:	fb01 6303 	mla	r3, r1, r3, r6
 802910e:	141b      	asrs	r3, r3, #16
 8029110:	f53f af2d 	bmi.w	8028f6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8029114:	3a01      	subs	r2, #1
 8029116:	4293      	cmp	r3, r2
 8029118:	f6bf af29 	bge.w	8028f6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802911c:	46a8      	mov	r8, r5
 802911e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8029122:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 8029126:	f1b8 0f00 	cmp.w	r8, #0
 802912a:	dc5e      	bgt.n	80291ea <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802912c:	9b07      	ldr	r3, [sp, #28]
 802912e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8029132:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8029136:	9307      	str	r3, [sp, #28]
 8029138:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802913a:	2b00      	cmp	r3, #0
 802913c:	f340 80f6 	ble.w	802932c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8029140:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029144:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029148:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802914c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029150:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029154:	eef0 6a62 	vmov.f32	s13, s5
 8029158:	ee31 1a05 	vadd.f32	s2, s2, s10
 802915c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029160:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029164:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029168:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802916c:	ee16 4a90 	vmov	r4, s13
 8029170:	eef0 6a43 	vmov.f32	s13, s6
 8029174:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029178:	ee12 2a90 	vmov	r2, s5
 802917c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029180:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029182:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029186:	fb92 f3f3 	sdiv	r3, r2, r3
 802918a:	ee13 2a10 	vmov	r2, s6
 802918e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8029190:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029192:	ee16 6a90 	vmov	r6, s13
 8029196:	fb92 f3f3 	sdiv	r3, r2, r3
 802919a:	9320      	str	r3, [sp, #128]	@ 0x80
 802919c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802919e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80291a0:	3b01      	subs	r3, #1
 80291a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80291a4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80291a6:	bf0c      	ite	eq
 80291a8:	4615      	moveq	r5, r2
 80291aa:	461d      	movne	r5, r3
 80291ac:	eeb0 3a67 	vmov.f32	s6, s15
 80291b0:	eef0 2a47 	vmov.f32	s5, s14
 80291b4:	e6b0      	b.n	8028f18 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80291b6:	f111 0a01 	adds.w	sl, r1, #1
 80291ba:	d487      	bmi.n	80290cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80291bc:	45d6      	cmp	lr, sl
 80291be:	db85      	blt.n	80290cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80291c0:	f110 0a01 	adds.w	sl, r0, #1
 80291c4:	d482      	bmi.n	80290cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80291c6:	4553      	cmp	r3, sl
 80291c8:	db80      	blt.n	80290cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80291ca:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80291cc:	b21b      	sxth	r3, r3
 80291ce:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80291d2:	9101      	str	r1, [sp, #4]
 80291d4:	9300      	str	r3, [sp, #0]
 80291d6:	e9cd c704 	strd	ip, r7, [sp, #16]
 80291da:	fa0f f38e 	sxth.w	r3, lr
 80291de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80291e0:	4641      	mov	r1, r8
 80291e2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80291e4:	f7ff fdb4 	bl	8028d50 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80291e8:	e770      	b.n	80290cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80291ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80291ec:	1430      	asrs	r0, r6, #16
 80291ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80291f2:	1423      	asrs	r3, r4, #16
 80291f4:	fb01 3000 	mla	r0, r1, r0, r3
 80291f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80291fa:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80291fc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8029200:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8029204:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8029208:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802920c:	8858      	ldrh	r0, [r3, #2]
 802920e:	f1be 0f00 	cmp.w	lr, #0
 8029212:	d00b      	beq.n	802922c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8029214:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8029218:	3901      	subs	r1, #1
 802921a:	0049      	lsls	r1, r1, #1
 802921c:	3102      	adds	r1, #2
 802921e:	eb03 0b01 	add.w	fp, r3, r1
 8029222:	5a5b      	ldrh	r3, [r3, r1]
 8029224:	930e      	str	r3, [sp, #56]	@ 0x38
 8029226:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802922a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802922c:	fb12 f30e 	smulbb	r3, r2, lr
 8029230:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8029234:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8029238:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 802923c:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 8029240:	10db      	asrs	r3, r3, #3
 8029242:	ea41 010c 	orr.w	r1, r1, ip
 8029246:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802924a:	f1ce 0c10 	rsb	ip, lr, #16
 802924e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8029252:	ebac 0c02 	sub.w	ip, ip, r2
 8029256:	ea4b 0000 	orr.w	r0, fp, r0
 802925a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802925e:	4350      	muls	r0, r2
 8029260:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8029264:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029266:	fb0c 0c01 	mla	ip, ip, r1, r0
 802926a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802926e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8029272:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 8029276:	ea4b 0101 	orr.w	r1, fp, r1
 802927a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802927c:	fb03 c101 	mla	r1, r3, r1, ip
 8029280:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8029282:	0412      	lsls	r2, r2, #16
 8029284:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8029288:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 802928c:	4302      	orrs	r2, r0
 802928e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8029292:	fb03 1202 	mla	r2, r3, r2, r1
 8029296:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 802929a:	0952      	lsrs	r2, r2, #5
 802929c:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 80292a0:	f8b9 2000 	ldrh.w	r2, [r9]
 80292a4:	9f08      	ldr	r7, [sp, #32]
 80292a6:	1211      	asrs	r1, r2, #8
 80292a8:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 80292ac:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80292b0:	fb11 f107 	smulbb	r1, r1, r7
 80292b4:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80292b8:	ea4b 0303 	orr.w	r3, fp, r3
 80292bc:	00d2      	lsls	r2, r2, #3
 80292be:	b29b      	uxth	r3, r3
 80292c0:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 80292c4:	b2d2      	uxtb	r2, r2
 80292c6:	1218      	asrs	r0, r3, #8
 80292c8:	fb1c fc07 	smulbb	ip, ip, r7
 80292cc:	fb12 f207 	smulbb	r2, r2, r7
 80292d0:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80292d4:	fb00 100a 	mla	r0, r0, sl, r1
 80292d8:	10d9      	asrs	r1, r3, #3
 80292da:	00db      	lsls	r3, r3, #3
 80292dc:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80292e0:	b2db      	uxtb	r3, r3
 80292e2:	fb01 c10a 	mla	r1, r1, sl, ip
 80292e6:	fb03 230a 	mla	r3, r3, sl, r2
 80292ea:	b280      	uxth	r0, r0
 80292ec:	b29b      	uxth	r3, r3
 80292ee:	b289      	uxth	r1, r1
 80292f0:	1c42      	adds	r2, r0, #1
 80292f2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80292f6:	f101 0c01 	add.w	ip, r1, #1
 80292fa:	1c5a      	adds	r2, r3, #1
 80292fc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8029300:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8029304:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8029306:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802930a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802930e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029312:	4310      	orrs	r0, r2
 8029314:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8029318:	441c      	add	r4, r3
 802931a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802931c:	ea40 000c 	orr.w	r0, r0, ip
 8029320:	f829 0b02 	strh.w	r0, [r9], #2
 8029324:	441e      	add	r6, r3
 8029326:	f108 38ff 	add.w	r8, r8, #4294967295
 802932a:	e6fc      	b.n	8029126 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 802932c:	b013      	add	sp, #76	@ 0x4c
 802932e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029332 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8029332:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029336:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 802933a:	fb0e 4703 	mla	r7, lr, r3, r4
 802933e:	f1be 0f00 	cmp.w	lr, #0
 8029342:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8029346:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 802934a:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 802934e:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8029352:	8808      	ldrh	r0, [r1, #0]
 8029354:	db60      	blt.n	8029418 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8029356:	45f1      	cmp	r9, lr
 8029358:	dd5e      	ble.n	8029418 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802935a:	2c00      	cmp	r4, #0
 802935c:	db5a      	blt.n	8029414 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802935e:	42a3      	cmp	r3, r4
 8029360:	dd58      	ble.n	8029414 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8029362:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8029366:	1c62      	adds	r2, r4, #1
 8029368:	d459      	bmi.n	802941e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802936a:	4293      	cmp	r3, r2
 802936c:	dd57      	ble.n	802941e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802936e:	2d00      	cmp	r5, #0
 8029370:	d055      	beq.n	802941e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8029372:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8029376:	f11e 0e01 	adds.w	lr, lr, #1
 802937a:	d454      	bmi.n	8029426 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802937c:	45f1      	cmp	r9, lr
 802937e:	dd52      	ble.n	8029426 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8029380:	2e00      	cmp	r6, #0
 8029382:	d050      	beq.n	8029426 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8029384:	2c00      	cmp	r4, #0
 8029386:	db4c      	blt.n	8029422 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8029388:	42a3      	cmp	r3, r4
 802938a:	dd4a      	ble.n	8029422 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 802938c:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8029390:	3401      	adds	r4, #1
 8029392:	d405      	bmi.n	80293a0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8029394:	42a3      	cmp	r3, r4
 8029396:	dd03      	ble.n	80293a0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8029398:	b115      	cbz	r5, 80293a0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802939a:	3301      	adds	r3, #1
 802939c:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 80293a0:	fb15 f406 	smulbb	r4, r5, r6
 80293a4:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80293a8:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80293ac:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 80293b0:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80293b4:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 80293b8:	ea43 0c0c 	orr.w	ip, r3, ip
 80293bc:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80293c0:	f1c6 0310 	rsb	r3, r6, #16
 80293c4:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80293c8:	1b5b      	subs	r3, r3, r5
 80293ca:	ea4e 0707 	orr.w	r7, lr, r7
 80293ce:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 80293d2:	437d      	muls	r5, r7
 80293d4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80293d8:	fb03 5c0c 	mla	ip, r3, ip, r5
 80293dc:	0403      	lsls	r3, r0, #16
 80293de:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80293e2:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80293e6:	4318      	orrs	r0, r3
 80293e8:	fb04 c000 	mla	r0, r4, r0, ip
 80293ec:	0413      	lsls	r3, r2, #16
 80293ee:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80293f2:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80293f6:	4313      	orrs	r3, r2
 80293f8:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 80293fc:	fb06 0003 	mla	r0, r6, r3, r0
 8029400:	0d43      	lsrs	r3, r0, #21
 8029402:	0940      	lsrs	r0, r0, #5
 8029404:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8029408:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802940c:	4318      	orrs	r0, r3
 802940e:	8008      	strh	r0, [r1, #0]
 8029410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029414:	4684      	mov	ip, r0
 8029416:	e7a6      	b.n	8029366 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8029418:	4607      	mov	r7, r0
 802941a:	4684      	mov	ip, r0
 802941c:	e7ab      	b.n	8029376 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802941e:	4607      	mov	r7, r0
 8029420:	e7a9      	b.n	8029376 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8029422:	4602      	mov	r2, r0
 8029424:	e7b4      	b.n	8029390 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8029426:	4602      	mov	r2, r0
 8029428:	e7ba      	b.n	80293a0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0802942a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802942a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802942e:	b08f      	sub	sp, #60	@ 0x3c
 8029430:	461d      	mov	r5, r3
 8029432:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 8029436:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8029438:	9107      	str	r1, [sp, #28]
 802943a:	6859      	ldr	r1, [r3, #4]
 802943c:	920c      	str	r2, [sp, #48]	@ 0x30
 802943e:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 8029442:	fb01 2707 	mla	r7, r1, r7, r2
 8029446:	681b      	ldr	r3, [r3, #0]
 8029448:	900d      	str	r0, [sp, #52]	@ 0x34
 802944a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802944e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029450:	f8d3 8000 	ldr.w	r8, [r3]
 8029454:	9b07      	ldr	r3, [sp, #28]
 8029456:	2b00      	cmp	r3, #0
 8029458:	dc03      	bgt.n	8029462 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802945a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802945c:	2b00      	cmp	r3, #0
 802945e:	f340 8181 	ble.w	8029764 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8029462:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029464:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029468:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802946c:	1e48      	subs	r0, r1, #1
 802946e:	f102 3cff 	add.w	ip, r2, #4294967295
 8029472:	2d00      	cmp	r5, #0
 8029474:	f340 809b 	ble.w	80295ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8029478:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802947c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029480:	d406      	bmi.n	8029490 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8029482:	4586      	cmp	lr, r0
 8029484:	da04      	bge.n	8029490 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8029486:	2b00      	cmp	r3, #0
 8029488:	db02      	blt.n	8029490 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802948a:	4563      	cmp	r3, ip
 802948c:	f2c0 8090 	blt.w	80295b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8029490:	f11e 0e01 	adds.w	lr, lr, #1
 8029494:	f100 8084 	bmi.w	80295a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8029498:	4571      	cmp	r1, lr
 802949a:	f2c0 8081 	blt.w	80295a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802949e:	3301      	adds	r3, #1
 80294a0:	d47e      	bmi.n	80295a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80294a2:	429a      	cmp	r2, r3
 80294a4:	db7c      	blt.n	80295a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80294a6:	46aa      	mov	sl, r5
 80294a8:	46b9      	mov	r9, r7
 80294aa:	f1ba 0f00 	cmp.w	sl, #0
 80294ae:	f340 8099 	ble.w	80295e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80294b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80294b4:	1421      	asrs	r1, r4, #16
 80294b6:	ea4f 4026 	mov.w	r0, r6, asr #16
 80294ba:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80294be:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80294c2:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80294c6:	f100 80d0 	bmi.w	802966a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80294ca:	f10e 3bff 	add.w	fp, lr, #4294967295
 80294ce:	4559      	cmp	r1, fp
 80294d0:	f280 80cb 	bge.w	802966a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80294d4:	2800      	cmp	r0, #0
 80294d6:	f2c0 80c8 	blt.w	802966a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80294da:	f103 3bff 	add.w	fp, r3, #4294967295
 80294de:	4558      	cmp	r0, fp
 80294e0:	f280 80c3 	bge.w	802966a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80294e4:	fa0f fe8e 	sxth.w	lr, lr
 80294e8:	fb00 110e 	mla	r1, r0, lr, r1
 80294ec:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80294f0:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80294f4:	8841      	ldrh	r1, [r0, #2]
 80294f6:	f1bc 0f00 	cmp.w	ip, #0
 80294fa:	d00b      	beq.n	8029514 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 80294fc:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 8029500:	3b01      	subs	r3, #1
 8029502:	005b      	lsls	r3, r3, #1
 8029504:	3302      	adds	r3, #2
 8029506:	eb00 0e03 	add.w	lr, r0, r3
 802950a:	5ac3      	ldrh	r3, [r0, r3]
 802950c:	9308      	str	r3, [sp, #32]
 802950e:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8029512:	9309      	str	r3, [sp, #36]	@ 0x24
 8029514:	fb12 f30c 	smulbb	r3, r2, ip
 8029518:	ea4f 400b 	mov.w	r0, fp, lsl #16
 802951c:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8029520:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8029524:	ea40 000b 	orr.w	r0, r0, fp
 8029528:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802952c:	10db      	asrs	r3, r3, #3
 802952e:	f1cc 0e10 	rsb	lr, ip, #16
 8029532:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8029536:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802953a:	ebae 0e02 	sub.w	lr, lr, r2
 802953e:	ea4b 0101 	orr.w	r1, fp, r1
 8029542:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8029546:	4351      	muls	r1, r2
 8029548:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802954c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802954e:	fb0e 1e00 	mla	lr, lr, r0, r1
 8029552:	0410      	lsls	r0, r2, #16
 8029554:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8029558:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802955c:	4310      	orrs	r0, r2
 802955e:	9a08      	ldr	r2, [sp, #32]
 8029560:	fb03 e000 	mla	r0, r3, r0, lr
 8029564:	9908      	ldr	r1, [sp, #32]
 8029566:	0412      	lsls	r2, r2, #16
 8029568:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 802956c:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8029570:	ea42 020e 	orr.w	r2, r2, lr
 8029574:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8029578:	fb03 0302 	mla	r3, r3, r2, r0
 802957c:	0d5a      	lsrs	r2, r3, #21
 802957e:	095b      	lsrs	r3, r3, #5
 8029580:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029584:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8029588:	4313      	orrs	r3, r2
 802958a:	f8a9 3000 	strh.w	r3, [r9]
 802958e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8029590:	f109 0902 	add.w	r9, r9, #2
 8029594:	441c      	add	r4, r3
 8029596:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029598:	f10a 3aff 	add.w	sl, sl, #4294967295
 802959c:	441e      	add	r6, r3
 802959e:	e784      	b.n	80294aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80295a0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80295a2:	3d01      	subs	r5, #1
 80295a4:	441c      	add	r4, r3
 80295a6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80295a8:	3702      	adds	r7, #2
 80295aa:	441e      	add	r6, r3
 80295ac:	e761      	b.n	8029472 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80295ae:	d01d      	beq.n	80295ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80295b0:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80295b2:	1e6b      	subs	r3, r5, #1
 80295b4:	fb00 4003 	mla	r0, r0, r3, r4
 80295b8:	1400      	asrs	r0, r0, #16
 80295ba:	f53f af74 	bmi.w	80294a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80295be:	3901      	subs	r1, #1
 80295c0:	4288      	cmp	r0, r1
 80295c2:	f6bf af70 	bge.w	80294a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80295c6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80295c8:	fb01 6303 	mla	r3, r1, r3, r6
 80295cc:	141b      	asrs	r3, r3, #16
 80295ce:	f53f af6a 	bmi.w	80294a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80295d2:	3a01      	subs	r2, #1
 80295d4:	4293      	cmp	r3, r2
 80295d6:	f6bf af66 	bge.w	80294a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80295da:	46a9      	mov	r9, r5
 80295dc:	46ba      	mov	sl, r7
 80295de:	f1b9 0f00 	cmp.w	r9, #0
 80295e2:	dc5a      	bgt.n	802969a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 80295e4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80295e8:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80295ec:	9b07      	ldr	r3, [sp, #28]
 80295ee:	2b00      	cmp	r3, #0
 80295f0:	f340 80b8 	ble.w	8029764 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80295f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80295f8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80295fc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029600:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029604:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029608:	eef0 6a62 	vmov.f32	s13, s5
 802960c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029610:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029614:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029618:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802961c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029620:	ee16 4a90 	vmov	r4, s13
 8029624:	eef0 6a43 	vmov.f32	s13, s6
 8029628:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802962c:	ee12 2a90 	vmov	r2, s5
 8029630:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029634:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029636:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802963a:	fb92 f3f3 	sdiv	r3, r2, r3
 802963e:	ee13 2a10 	vmov	r2, s6
 8029642:	931b      	str	r3, [sp, #108]	@ 0x6c
 8029644:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029646:	ee16 6a90 	vmov	r6, s13
 802964a:	fb92 f3f3 	sdiv	r3, r2, r3
 802964e:	931c      	str	r3, [sp, #112]	@ 0x70
 8029650:	9b07      	ldr	r3, [sp, #28]
 8029652:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029654:	3b01      	subs	r3, #1
 8029656:	9307      	str	r3, [sp, #28]
 8029658:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802965a:	bf0c      	ite	eq
 802965c:	4615      	moveq	r5, r2
 802965e:	461d      	movne	r5, r3
 8029660:	eeb0 3a67 	vmov.f32	s6, s15
 8029664:	eef0 2a47 	vmov.f32	s5, s14
 8029668:	e6f4      	b.n	8029454 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 802966a:	f111 0b01 	adds.w	fp, r1, #1
 802966e:	d48e      	bmi.n	802958e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8029670:	45de      	cmp	lr, fp
 8029672:	db8c      	blt.n	802958e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8029674:	f110 0b01 	adds.w	fp, r0, #1
 8029678:	d489      	bmi.n	802958e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802967a:	455b      	cmp	r3, fp
 802967c:	db87      	blt.n	802958e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802967e:	b21b      	sxth	r3, r3
 8029680:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8029684:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8029688:	9300      	str	r3, [sp, #0]
 802968a:	4642      	mov	r2, r8
 802968c:	fa0f f38e 	sxth.w	r3, lr
 8029690:	4649      	mov	r1, r9
 8029692:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8029694:	f7ff fe4d 	bl	8029332 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8029698:	e779      	b.n	802958e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802969a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802969c:	1420      	asrs	r0, r4, #16
 802969e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80296a2:	1431      	asrs	r1, r6, #16
 80296a4:	fb03 0101 	mla	r1, r3, r1, r0
 80296a8:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80296ac:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80296b0:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80296b4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80296b8:	8841      	ldrh	r1, [r0, #2]
 80296ba:	f1be 0f00 	cmp.w	lr, #0
 80296be:	d00b      	beq.n	80296d8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 80296c0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80296c4:	3b01      	subs	r3, #1
 80296c6:	005b      	lsls	r3, r3, #1
 80296c8:	3302      	adds	r3, #2
 80296ca:	eb00 0b03 	add.w	fp, r0, r3
 80296ce:	5ac3      	ldrh	r3, [r0, r3]
 80296d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80296d2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80296d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80296d8:	fb12 f30e 	smulbb	r3, r2, lr
 80296dc:	ea4f 400c 	mov.w	r0, ip, lsl #16
 80296e0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80296e4:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80296e8:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80296ec:	10db      	asrs	r3, r3, #3
 80296ee:	ea40 000c 	orr.w	r0, r0, ip
 80296f2:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80296f6:	f1ce 0c10 	rsb	ip, lr, #16
 80296fa:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80296fe:	ebac 0c02 	sub.w	ip, ip, r2
 8029702:	ea4b 0101 	orr.w	r1, fp, r1
 8029706:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802970a:	4351      	muls	r1, r2
 802970c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8029710:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029712:	fb0c 1c00 	mla	ip, ip, r0, r1
 8029716:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802971a:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802971e:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 8029722:	ea4b 0000 	orr.w	r0, fp, r0
 8029726:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029728:	fb03 c000 	mla	r0, r3, r0, ip
 802972c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802972e:	0412      	lsls	r2, r2, #16
 8029730:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8029734:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 8029738:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802973c:	ea42 0b0b 	orr.w	fp, r2, fp
 8029740:	fb03 000b 	mla	r0, r3, fp, r0
 8029744:	0d43      	lsrs	r3, r0, #21
 8029746:	0940      	lsrs	r0, r0, #5
 8029748:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802974c:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8029750:	4318      	orrs	r0, r3
 8029752:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8029754:	f82a 0b02 	strh.w	r0, [sl], #2
 8029758:	441c      	add	r4, r3
 802975a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802975c:	f109 39ff 	add.w	r9, r9, #4294967295
 8029760:	441e      	add	r6, r3
 8029762:	e73c      	b.n	80295de <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8029764:	b00f      	add	sp, #60	@ 0x3c
 8029766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802976a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 802976a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802976e:	b085      	sub	sp, #20
 8029770:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 8029774:	9102      	str	r1, [sp, #8]
 8029776:	fb04 7103 	mla	r1, r4, r3, r7
 802977a:	2c00      	cmp	r4, #0
 802977c:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 8029780:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8029784:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8029788:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802978c:	f2c0 811b 	blt.w	80299c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8029790:	45a6      	cmp	lr, r4
 8029792:	f340 8118 	ble.w	80299c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8029796:	2f00      	cmp	r7, #0
 8029798:	f2c0 8113 	blt.w	80299c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802979c:	42bb      	cmp	r3, r7
 802979e:	f340 8110 	ble.w	80299c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80297a2:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80297a6:	1c7a      	adds	r2, r7, #1
 80297a8:	f100 8110 	bmi.w	80299cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80297ac:	4293      	cmp	r3, r2
 80297ae:	f340 810d 	ble.w	80299cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80297b2:	2e00      	cmp	r6, #0
 80297b4:	f000 810c 	beq.w	80299d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 80297b8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80297bc:	3401      	adds	r4, #1
 80297be:	f100 810b 	bmi.w	80299d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80297c2:	45a6      	cmp	lr, r4
 80297c4:	f340 8108 	ble.w	80299d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80297c8:	2800      	cmp	r0, #0
 80297ca:	f000 8108 	beq.w	80299de <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 80297ce:	2f00      	cmp	r7, #0
 80297d0:	f2c0 8100 	blt.w	80299d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80297d4:	42bb      	cmp	r3, r7
 80297d6:	f340 80fd 	ble.w	80299d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80297da:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80297de:	3701      	adds	r7, #1
 80297e0:	f100 8100 	bmi.w	80299e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80297e4:	42bb      	cmp	r3, r7
 80297e6:	f340 80fd 	ble.w	80299e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80297ea:	2e00      	cmp	r6, #0
 80297ec:	f000 80fc 	beq.w	80299e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 80297f0:	3301      	adds	r3, #1
 80297f2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80297f6:	b2b6      	uxth	r6, r6
 80297f8:	b280      	uxth	r0, r0
 80297fa:	fb00 fe06 	mul.w	lr, r0, r6
 80297fe:	0136      	lsls	r6, r6, #4
 8029800:	eba6 070e 	sub.w	r7, r6, lr
 8029804:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8029808:	b2bf      	uxth	r7, r7
 802980a:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 802980e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8029812:	fb0a f607 	mul.w	r6, sl, r7
 8029816:	b280      	uxth	r0, r0
 8029818:	1a1b      	subs	r3, r3, r0
 802981a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802981e:	b29b      	uxth	r3, r3
 8029820:	fb0b 6603 	mla	r6, fp, r3, r6
 8029824:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8029828:	fb00 6609 	mla	r6, r0, r9, r6
 802982c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8029830:	fb0e 6608 	mla	r6, lr, r8, r6
 8029834:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8029838:	9600      	str	r6, [sp, #0]
 802983a:	2e00      	cmp	r6, #0
 802983c:	f000 80be 	beq.w	80299bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8029840:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029844:	fb0b fc0c 	mul.w	ip, fp, ip
 8029848:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802984c:	fb0b f505 	mul.w	r5, fp, r5
 8029850:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8029854:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8029858:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802985c:	44dc      	add	ip, fp
 802985e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029862:	9501      	str	r5, [sp, #4]
 8029864:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8029868:	9503      	str	r5, [sp, #12]
 802986a:	9d01      	ldr	r5, [sp, #4]
 802986c:	9e02      	ldr	r6, [sp, #8]
 802986e:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8029872:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8029876:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 802987a:	fb0a fc0c 	mul.w	ip, sl, ip
 802987e:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8029882:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8029886:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802988a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802988e:	4465      	add	r5, ip
 8029890:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8029894:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8029898:	fb09 fc0c 	mul.w	ip, r9, ip
 802989c:	fb09 f904 	mul.w	r9, r9, r4
 80298a0:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 80298a4:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80298a8:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 80298ac:	fb08 f404 	mul.w	r4, r8, r4
 80298b0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80298b4:	fb08 f802 	mul.w	r8, r8, r2
 80298b8:	0a2d      	lsrs	r5, r5, #8
 80298ba:	0a22      	lsrs	r2, r4, #8
 80298bc:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80298c0:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80298c4:	437d      	muls	r5, r7
 80298c6:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80298ca:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80298ce:	4414      	add	r4, r2
 80298d0:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 80298d4:	fb0a fa01 	mul.w	sl, sl, r1
 80298d8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80298dc:	9a03      	ldr	r2, [sp, #12]
 80298de:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 80298e2:	fb02 5503 	mla	r5, r2, r3, r5
 80298e6:	0a24      	lsrs	r4, r4, #8
 80298e8:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80298ec:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80298f0:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80298f4:	fb04 540e 	mla	r4, r4, lr, r5
 80298f8:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80298fc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8029900:	4461      	add	r1, ip
 8029902:	0a09      	lsrs	r1, r1, #8
 8029904:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8029908:	fb01 4100 	mla	r1, r1, r0, r4
 802990c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029910:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029914:	fb07 f70a 	mul.w	r7, r7, sl
 8029918:	0a09      	lsrs	r1, r1, #8
 802991a:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 802991e:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8029922:	fb03 7101 	mla	r1, r3, r1, r7
 8029926:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802992a:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802992e:	fb0e 1e08 	mla	lr, lr, r8, r1
 8029932:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029936:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 802993a:	fb00 e101 	mla	r1, r0, r1, lr
 802993e:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8029942:	9a00      	ldr	r2, [sp, #0]
 8029944:	b287      	uxth	r7, r0
 8029946:	437a      	muls	r2, r7
 8029948:	1c53      	adds	r3, r2, #1
 802994a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802994e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8029952:	0a09      	lsrs	r1, r1, #8
 8029954:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8029958:	4321      	orrs	r1, r4
 802995a:	0c0a      	lsrs	r2, r1, #16
 802995c:	8836      	ldrh	r6, [r6, #0]
 802995e:	fb12 f207 	smulbb	r2, r2, r7
 8029962:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8029966:	b2c8      	uxtb	r0, r1
 8029968:	1235      	asrs	r5, r6, #8
 802996a:	fb14 f407 	smulbb	r4, r4, r7
 802996e:	fb10 f007 	smulbb	r0, r0, r7
 8029972:	b2db      	uxtb	r3, r3
 8029974:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8029978:	fb05 2503 	mla	r5, r5, r3, r2
 802997c:	10f2      	asrs	r2, r6, #3
 802997e:	00f6      	lsls	r6, r6, #3
 8029980:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8029984:	b2f6      	uxtb	r6, r6
 8029986:	fb02 4203 	mla	r2, r2, r3, r4
 802998a:	fb06 0303 	mla	r3, r6, r3, r0
 802998e:	b2ad      	uxth	r5, r5
 8029990:	b299      	uxth	r1, r3
 8029992:	b294      	uxth	r4, r2
 8029994:	1c6b      	adds	r3, r5, #1
 8029996:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802999a:	1c62      	adds	r2, r4, #1
 802999c:	1c4b      	adds	r3, r1, #1
 802999e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80299a2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80299a6:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80299aa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80299ae:	0952      	lsrs	r2, r2, #5
 80299b0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80299b4:	432b      	orrs	r3, r5
 80299b6:	4313      	orrs	r3, r2
 80299b8:	9a02      	ldr	r2, [sp, #8]
 80299ba:	8013      	strh	r3, [r2, #0]
 80299bc:	b005      	add	sp, #20
 80299be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80299c2:	2500      	movs	r5, #0
 80299c4:	e6ef      	b.n	80297a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 80299c6:	2100      	movs	r1, #0
 80299c8:	460d      	mov	r5, r1
 80299ca:	e6f7      	b.n	80297bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80299cc:	2100      	movs	r1, #0
 80299ce:	e6f5      	b.n	80297bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80299d0:	4631      	mov	r1, r6
 80299d2:	e6f3      	b.n	80297bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80299d4:	2400      	movs	r4, #0
 80299d6:	e702      	b.n	80297de <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 80299d8:	2200      	movs	r2, #0
 80299da:	4614      	mov	r4, r2
 80299dc:	e70b      	b.n	80297f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80299de:	4602      	mov	r2, r0
 80299e0:	4604      	mov	r4, r0
 80299e2:	e708      	b.n	80297f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80299e4:	2200      	movs	r2, #0
 80299e6:	e706      	b.n	80297f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80299e8:	4632      	mov	r2, r6
 80299ea:	e704      	b.n	80297f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

080299ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80299ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80299f0:	b09d      	sub	sp, #116	@ 0x74
 80299f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80299f4:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 80299f6:	901b      	str	r0, [sp, #108]	@ 0x6c
 80299f8:	9307      	str	r3, [sp, #28]
 80299fa:	6850      	ldr	r0, [r2, #4]
 80299fc:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8029a00:	9117      	str	r1, [sp, #92]	@ 0x5c
 8029a02:	931a      	str	r3, [sp, #104]	@ 0x68
 8029a04:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8029a08:	fb00 1303 	mla	r3, r0, r3, r1
 8029a0c:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 8029a10:	6812      	ldr	r2, [r2, #0]
 8029a12:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8029a16:	930a      	str	r3, [sp, #40]	@ 0x28
 8029a18:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8029a1a:	681b      	ldr	r3, [r3, #0]
 8029a1c:	9310      	str	r3, [sp, #64]	@ 0x40
 8029a1e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8029a22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8029a24:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8029a26:	2b00      	cmp	r3, #0
 8029a28:	dc03      	bgt.n	8029a32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8029a2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8029a2c:	2b00      	cmp	r3, #0
 8029a2e:	f340 8375 	ble.w	802a11c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8029a32:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8029a34:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029a38:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029a3c:	1e48      	subs	r0, r1, #1
 8029a3e:	1e57      	subs	r7, r2, #1
 8029a40:	9b07      	ldr	r3, [sp, #28]
 8029a42:	2b00      	cmp	r3, #0
 8029a44:	f340 818e 	ble.w	8029d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8029a48:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8029a4c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029a50:	d406      	bmi.n	8029a60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8029a52:	4584      	cmp	ip, r0
 8029a54:	da04      	bge.n	8029a60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8029a56:	2b00      	cmp	r3, #0
 8029a58:	db02      	blt.n	8029a60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8029a5a:	42bb      	cmp	r3, r7
 8029a5c:	f2c0 8183 	blt.w	8029d66 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8029a60:	f11c 0c01 	adds.w	ip, ip, #1
 8029a64:	f100 8173 	bmi.w	8029d4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8029a68:	4561      	cmp	r1, ip
 8029a6a:	f2c0 8170 	blt.w	8029d4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8029a6e:	3301      	adds	r3, #1
 8029a70:	f100 816d 	bmi.w	8029d4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8029a74:	429a      	cmp	r2, r3
 8029a76:	f2c0 816a 	blt.w	8029d4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8029a7a:	9b07      	ldr	r3, [sp, #28]
 8029a7c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8029a7e:	9318      	str	r3, [sp, #96]	@ 0x60
 8029a80:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029a82:	2b00      	cmp	r3, #0
 8029a84:	f340 818c 	ble.w	8029da0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8029a88:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8029a8a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8029a8c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8029a90:	1422      	asrs	r2, r4, #16
 8029a92:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8029a96:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8029a9a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029a9e:	689b      	ldr	r3, [r3, #8]
 8029aa0:	f100 81cd 	bmi.w	8029e3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029aa4:	f103 38ff 	add.w	r8, r3, #4294967295
 8029aa8:	4542      	cmp	r2, r8
 8029aaa:	f280 81c8 	bge.w	8029e3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029aae:	f1bc 0f00 	cmp.w	ip, #0
 8029ab2:	f2c0 81c4 	blt.w	8029e3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029ab6:	f10e 38ff 	add.w	r8, lr, #4294967295
 8029aba:	45c4      	cmp	ip, r8
 8029abc:	f280 81bf 	bge.w	8029e3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029ac0:	b21b      	sxth	r3, r3
 8029ac2:	fb0c 2203 	mla	r2, ip, r3, r2
 8029ac6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8029ac8:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8029acc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8029ad0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8029ad4:	2800      	cmp	r0, #0
 8029ad6:	f000 81a9 	beq.w	8029e2c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8029ada:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8029ade:	950c      	str	r5, [sp, #48]	@ 0x30
 8029ae0:	0e2d      	lsrs	r5, r5, #24
 8029ae2:	9513      	str	r5, [sp, #76]	@ 0x4c
 8029ae4:	b181      	cbz	r1, 8029b08 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8029ae6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8029aea:	3b01      	subs	r3, #1
 8029aec:	009b      	lsls	r3, r3, #2
 8029aee:	3304      	adds	r3, #4
 8029af0:	eb08 0c03 	add.w	ip, r8, r3
 8029af4:	f858 3003 	ldr.w	r3, [r8, r3]
 8029af8:	9308      	str	r3, [sp, #32]
 8029afa:	0e1b      	lsrs	r3, r3, #24
 8029afc:	9311      	str	r3, [sp, #68]	@ 0x44
 8029afe:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8029b02:	930d      	str	r3, [sp, #52]	@ 0x34
 8029b04:	0e1b      	lsrs	r3, r3, #24
 8029b06:	9314      	str	r3, [sp, #80]	@ 0x50
 8029b08:	b280      	uxth	r0, r0
 8029b0a:	b289      	uxth	r1, r1
 8029b0c:	fb00 f901 	mul.w	r9, r0, r1
 8029b10:	0100      	lsls	r0, r0, #4
 8029b12:	eba0 0809 	sub.w	r8, r0, r9
 8029b16:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8029b1a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8029b1c:	fa1f f888 	uxth.w	r8, r8
 8029b20:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8029b24:	fb08 f000 	mul.w	r0, r8, r0
 8029b28:	b289      	uxth	r1, r1
 8029b2a:	1a5b      	subs	r3, r3, r1
 8029b2c:	b29b      	uxth	r3, r3
 8029b2e:	fb03 000e 	mla	r0, r3, lr, r0
 8029b32:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029b34:	fb01 0005 	mla	r0, r1, r5, r0
 8029b38:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8029b3a:	fb09 0005 	mla	r0, r9, r5, r0
 8029b3e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8029b42:	2800      	cmp	r0, #0
 8029b44:	f000 80fa 	beq.w	8029d3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029b48:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8029b4c:	d01b      	beq.n	8029b86 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8029b4e:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8029b52:	fb0e fa0a 	mul.w	sl, lr, sl
 8029b56:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8029b5a:	fb0e fe02 	mul.w	lr, lr, r2
 8029b5e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8029b62:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8029b66:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8029b6a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8029b6e:	4452      	add	r2, sl
 8029b70:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8029b74:	0a12      	lsrs	r2, r2, #8
 8029b76:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029b7a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8029b7e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8029b82:	ea42 020c 	orr.w	r2, r2, ip
 8029b86:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8029b88:	2dff      	cmp	r5, #255	@ 0xff
 8029b8a:	d021      	beq.n	8029bd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8029b8c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8029b8e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8029b92:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8029b94:	fb05 fb0b 	mul.w	fp, r5, fp
 8029b98:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8029b9a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029b9e:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029ba2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8029ba4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029ba8:	fb05 fa0a 	mul.w	sl, r5, sl
 8029bac:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8029bb0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8029bb4:	44de      	add	lr, fp
 8029bb6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029bba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029bbe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029bc2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029bc6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029bca:	ea4e 050a 	orr.w	r5, lr, sl
 8029bce:	950c      	str	r5, [sp, #48]	@ 0x30
 8029bd0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029bd2:	2dff      	cmp	r5, #255	@ 0xff
 8029bd4:	d021      	beq.n	8029c1a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029bd6:	9d08      	ldr	r5, [sp, #32]
 8029bd8:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8029bdc:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029bde:	fb05 fb0b 	mul.w	fp, r5, fp
 8029be2:	9d08      	ldr	r5, [sp, #32]
 8029be4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029be8:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029bec:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029bee:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029bf2:	fb05 fa0a 	mul.w	sl, r5, sl
 8029bf6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8029bfa:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8029bfe:	44de      	add	lr, fp
 8029c00:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029c04:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029c08:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029c0c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029c10:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029c14:	ea4e 050a 	orr.w	r5, lr, sl
 8029c18:	9508      	str	r5, [sp, #32]
 8029c1a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8029c1c:	2dff      	cmp	r5, #255	@ 0xff
 8029c1e:	d021      	beq.n	8029c64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8029c20:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029c22:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8029c26:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8029c28:	fb05 fb0b 	mul.w	fp, r5, fp
 8029c2c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029c2e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029c32:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029c36:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8029c38:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029c3c:	fb05 fa0a 	mul.w	sl, r5, sl
 8029c40:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8029c44:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8029c48:	44de      	add	lr, fp
 8029c4a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029c4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029c52:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029c56:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029c5a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029c5e:	ea4e 050a 	orr.w	r5, lr, sl
 8029c62:	950d      	str	r5, [sp, #52]	@ 0x34
 8029c64:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8029c66:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8029c6a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029c6e:	fb08 fc0c 	mul.w	ip, r8, ip
 8029c72:	fb03 cc0e 	mla	ip, r3, lr, ip
 8029c76:	9d08      	ldr	r5, [sp, #32]
 8029c78:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8029c7c:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8029c80:	fb01 cc0e 	mla	ip, r1, lr, ip
 8029c84:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029c86:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8029c8a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8029c8c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8029c90:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8029c94:	fb08 f80e 	mul.w	r8, r8, lr
 8029c98:	fb03 8202 	mla	r2, r3, r2, r8
 8029c9c:	9b08      	ldr	r3, [sp, #32]
 8029c9e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029ca2:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8029ca6:	fb01 220a 	mla	r2, r1, sl, r2
 8029caa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029cac:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029cb0:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8029cb4:	fb09 2901 	mla	r9, r9, r1, r2
 8029cb8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029cba:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029cbe:	4342      	muls	r2, r0
 8029cc0:	1c50      	adds	r0, r2, #1
 8029cc2:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8029cc6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8029cca:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8029cce:	ea4c 0c09 	orr.w	ip, ip, r9
 8029cd2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8029cd4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8029cd8:	883b      	ldrh	r3, [r7, #0]
 8029cda:	fb12 f205 	smulbb	r2, r2, r5
 8029cde:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8029ce2:	fa5f fc8c 	uxtb.w	ip, ip
 8029ce6:	1219      	asrs	r1, r3, #8
 8029ce8:	fb1c fc05 	smulbb	ip, ip, r5
 8029cec:	b2c0      	uxtb	r0, r0
 8029cee:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8029cf2:	fb01 2100 	mla	r1, r1, r0, r2
 8029cf6:	10da      	asrs	r2, r3, #3
 8029cf8:	00db      	lsls	r3, r3, #3
 8029cfa:	fb1e fe05 	smulbb	lr, lr, r5
 8029cfe:	b2db      	uxtb	r3, r3
 8029d00:	fb03 c300 	mla	r3, r3, r0, ip
 8029d04:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8029d08:	b289      	uxth	r1, r1
 8029d0a:	fb02 e200 	mla	r2, r2, r0, lr
 8029d0e:	fa1f fc83 	uxth.w	ip, r3
 8029d12:	1c4b      	adds	r3, r1, #1
 8029d14:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029d18:	f10c 0301 	add.w	r3, ip, #1
 8029d1c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8029d20:	b292      	uxth	r2, r2
 8029d22:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8029d26:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029d2a:	430b      	orrs	r3, r1
 8029d2c:	1c51      	adds	r1, r2, #1
 8029d2e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029d32:	0952      	lsrs	r2, r2, #5
 8029d34:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029d38:	4313      	orrs	r3, r2
 8029d3a:	803b      	strh	r3, [r7, #0]
 8029d3c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8029d3e:	3702      	adds	r7, #2
 8029d40:	441c      	add	r4, r3
 8029d42:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8029d44:	441e      	add	r6, r3
 8029d46:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029d48:	3b01      	subs	r3, #1
 8029d4a:	9318      	str	r3, [sp, #96]	@ 0x60
 8029d4c:	e698      	b.n	8029a80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8029d4e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8029d50:	441c      	add	r4, r3
 8029d52:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8029d54:	441e      	add	r6, r3
 8029d56:	9b07      	ldr	r3, [sp, #28]
 8029d58:	3b01      	subs	r3, #1
 8029d5a:	9307      	str	r3, [sp, #28]
 8029d5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029d5e:	3302      	adds	r3, #2
 8029d60:	930a      	str	r3, [sp, #40]	@ 0x28
 8029d62:	e66d      	b.n	8029a40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8029d64:	d023      	beq.n	8029dae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8029d66:	9b07      	ldr	r3, [sp, #28]
 8029d68:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8029d6a:	3b01      	subs	r3, #1
 8029d6c:	fb00 4003 	mla	r0, r0, r3, r4
 8029d70:	1400      	asrs	r0, r0, #16
 8029d72:	f53f ae82 	bmi.w	8029a7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8029d76:	3901      	subs	r1, #1
 8029d78:	4288      	cmp	r0, r1
 8029d7a:	f6bf ae7e 	bge.w	8029a7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8029d7e:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8029d80:	fb01 6303 	mla	r3, r1, r3, r6
 8029d84:	141b      	asrs	r3, r3, #16
 8029d86:	f53f ae78 	bmi.w	8029a7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8029d8a:	3a01      	subs	r2, #1
 8029d8c:	4293      	cmp	r3, r2
 8029d8e:	f6bf ae74 	bge.w	8029a7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8029d92:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8029d96:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8029d9a:	f1bb 0f00 	cmp.w	fp, #0
 8029d9e:	dc6c      	bgt.n	8029e7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8029da0:	9b07      	ldr	r3, [sp, #28]
 8029da2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029da6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029da8:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8029dac:	930a      	str	r3, [sp, #40]	@ 0x28
 8029dae:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8029db0:	2b00      	cmp	r3, #0
 8029db2:	f340 81b3 	ble.w	802a11c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8029db6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029dba:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029dbe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029dc2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029dc6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029dca:	eef0 6a62 	vmov.f32	s13, s5
 8029dce:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029dd2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029dd6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029dda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029dde:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029de2:	ee16 4a90 	vmov	r4, s13
 8029de6:	eef0 6a43 	vmov.f32	s13, s6
 8029dea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029dee:	ee12 2a90 	vmov	r2, s5
 8029df2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029df6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8029df8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029dfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8029e00:	ee13 2a10 	vmov	r2, s6
 8029e04:	9329      	str	r3, [sp, #164]	@ 0xa4
 8029e06:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8029e08:	ee16 6a90 	vmov	r6, s13
 8029e0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8029e10:	932a      	str	r3, [sp, #168]	@ 0xa8
 8029e12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8029e14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8029e16:	3b01      	subs	r3, #1
 8029e18:	9317      	str	r3, [sp, #92]	@ 0x5c
 8029e1a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8029e1c:	bf08      	it	eq
 8029e1e:	4613      	moveq	r3, r2
 8029e20:	eeb0 3a67 	vmov.f32	s6, s15
 8029e24:	9307      	str	r3, [sp, #28]
 8029e26:	eef0 2a47 	vmov.f32	s5, s14
 8029e2a:	e5fb      	b.n	8029a24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8029e2c:	2900      	cmp	r1, #0
 8029e2e:	f43f ae6b 	beq.w	8029b08 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8029e32:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8029e36:	9308      	str	r3, [sp, #32]
 8029e38:	0e1b      	lsrs	r3, r3, #24
 8029e3a:	9311      	str	r3, [sp, #68]	@ 0x44
 8029e3c:	e664      	b.n	8029b08 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8029e3e:	f112 0801 	adds.w	r8, r2, #1
 8029e42:	f53f af7b 	bmi.w	8029d3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029e46:	4543      	cmp	r3, r8
 8029e48:	f6ff af78 	blt.w	8029d3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029e4c:	f11c 0801 	adds.w	r8, ip, #1
 8029e50:	f53f af74 	bmi.w	8029d3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029e54:	45c6      	cmp	lr, r8
 8029e56:	f6ff af71 	blt.w	8029d3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029e5a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8029e5c:	9201      	str	r2, [sp, #4]
 8029e5e:	fa0f f28e 	sxth.w	r2, lr
 8029e62:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8029e66:	e9cd c002 	strd	ip, r0, [sp, #8]
 8029e6a:	9200      	str	r2, [sp, #0]
 8029e6c:	b21b      	sxth	r3, r3
 8029e6e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8029e70:	4639      	mov	r1, r7
 8029e72:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8029e74:	f7ff fc79 	bl	802976a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8029e78:	e760      	b.n	8029d3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029e7a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8029e7c:	1427      	asrs	r7, r4, #16
 8029e7e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029e82:	1433      	asrs	r3, r6, #16
 8029e84:	fb01 7303 	mla	r3, r1, r3, r7
 8029e88:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8029e8a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029e8e:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8029e92:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8029e96:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029e9a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029e9e:	2a00      	cmp	r2, #0
 8029ea0:	f000 8133 	beq.w	802a10a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8029ea4:	687d      	ldr	r5, [r7, #4]
 8029ea6:	950e      	str	r5, [sp, #56]	@ 0x38
 8029ea8:	0e2d      	lsrs	r5, r5, #24
 8029eaa:	9515      	str	r5, [sp, #84]	@ 0x54
 8029eac:	b178      	cbz	r0, 8029ece <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8029eae:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8029eb2:	3901      	subs	r1, #1
 8029eb4:	0089      	lsls	r1, r1, #2
 8029eb6:	3104      	adds	r1, #4
 8029eb8:	eb07 0e01 	add.w	lr, r7, r1
 8029ebc:	5879      	ldr	r1, [r7, r1]
 8029ebe:	9109      	str	r1, [sp, #36]	@ 0x24
 8029ec0:	0e09      	lsrs	r1, r1, #24
 8029ec2:	9112      	str	r1, [sp, #72]	@ 0x48
 8029ec4:	f8de 1004 	ldr.w	r1, [lr, #4]
 8029ec8:	910f      	str	r1, [sp, #60]	@ 0x3c
 8029eca:	0e09      	lsrs	r1, r1, #24
 8029ecc:	9116      	str	r1, [sp, #88]	@ 0x58
 8029ece:	b292      	uxth	r2, r2
 8029ed0:	b280      	uxth	r0, r0
 8029ed2:	fb02 f800 	mul.w	r8, r2, r0
 8029ed6:	0112      	lsls	r2, r2, #4
 8029ed8:	eba2 0e08 	sub.w	lr, r2, r8
 8029edc:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8029ede:	fa1f fe8e 	uxth.w	lr, lr
 8029ee2:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8029ee6:	fb0e f101 	mul.w	r1, lr, r1
 8029eea:	b280      	uxth	r0, r0
 8029eec:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8029ef0:	1a12      	subs	r2, r2, r0
 8029ef2:	b292      	uxth	r2, r2
 8029ef4:	fb02 110c 	mla	r1, r2, ip, r1
 8029ef8:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029efa:	fb00 1105 	mla	r1, r0, r5, r1
 8029efe:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8029f00:	fb08 1105 	mla	r1, r8, r5, r1
 8029f04:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8029f08:	2900      	cmp	r1, #0
 8029f0a:	f000 80f5 	beq.w	802a0f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8029f0e:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8029f12:	d019      	beq.n	8029f48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8029f14:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8029f18:	fb0c fa0a 	mul.w	sl, ip, sl
 8029f1c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029f20:	fb0c fc03 	mul.w	ip, ip, r3
 8029f24:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029f28:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8029f2c:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8029f30:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8029f34:	4453      	add	r3, sl
 8029f36:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029f3a:	0a1b      	lsrs	r3, r3, #8
 8029f3c:	0a3f      	lsrs	r7, r7, #8
 8029f3e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8029f42:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8029f46:	433b      	orrs	r3, r7
 8029f48:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8029f4a:	2dff      	cmp	r5, #255	@ 0xff
 8029f4c:	d020      	beq.n	8029f90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8029f4e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029f50:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029f54:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8029f56:	436f      	muls	r7, r5
 8029f58:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029f5a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029f5e:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029f62:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8029f64:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029f68:	fb05 fa0a 	mul.w	sl, r5, sl
 8029f6c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029f70:	44bc      	add	ip, r7
 8029f72:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029f76:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029f7a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029f7e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029f82:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029f86:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029f8a:	ea4c 050a 	orr.w	r5, ip, sl
 8029f8e:	950e      	str	r5, [sp, #56]	@ 0x38
 8029f90:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029f92:	2dff      	cmp	r5, #255	@ 0xff
 8029f94:	d020      	beq.n	8029fd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8029f96:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8029f98:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029f9c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029f9e:	436f      	muls	r7, r5
 8029fa0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8029fa2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029fa6:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029faa:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029fac:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029fb0:	fb05 fa0a 	mul.w	sl, r5, sl
 8029fb4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029fb8:	44bc      	add	ip, r7
 8029fba:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029fbe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029fc2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029fc6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029fca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029fce:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029fd2:	ea4c 050a 	orr.w	r5, ip, sl
 8029fd6:	9509      	str	r5, [sp, #36]	@ 0x24
 8029fd8:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8029fda:	2dff      	cmp	r5, #255	@ 0xff
 8029fdc:	d020      	beq.n	802a020 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8029fde:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8029fe0:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029fe4:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8029fe6:	436f      	muls	r7, r5
 8029fe8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8029fea:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029fee:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029ff2:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8029ff4:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029ff8:	fb05 fa0a 	mul.w	sl, r5, sl
 8029ffc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a000:	44bc      	add	ip, r7
 802a002:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802a006:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a00a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a00e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a012:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a016:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a01a:	ea4c 050a 	orr.w	r5, ip, sl
 802a01e:	950f      	str	r5, [sp, #60]	@ 0x3c
 802a020:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802a022:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 802a026:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802a02a:	fb0e f707 	mul.w	r7, lr, r7
 802a02e:	fb02 770c 	mla	r7, r2, ip, r7
 802a032:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802a034:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802a038:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802a03c:	fb00 770c 	mla	r7, r0, ip, r7
 802a040:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802a042:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802a046:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802a048:	fb08 770c 	mla	r7, r8, ip, r7
 802a04c:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 802a050:	fb0e fe0c 	mul.w	lr, lr, ip
 802a054:	fb02 e303 	mla	r3, r2, r3, lr
 802a058:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a05a:	0a3f      	lsrs	r7, r7, #8
 802a05c:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802a060:	fb00 330a 	mla	r3, r0, sl, r3
 802a064:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a066:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802a06a:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 802a06e:	fb08 3c0c 	mla	ip, r8, ip, r3
 802a072:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a074:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a078:	4359      	muls	r1, r3
 802a07a:	1c4b      	adds	r3, r1, #1
 802a07c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802a080:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802a084:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802a088:	ea47 070c 	orr.w	r7, r7, ip
 802a08c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802a08e:	0c3b      	lsrs	r3, r7, #16
 802a090:	f8b9 0000 	ldrh.w	r0, [r9]
 802a094:	fb13 f305 	smulbb	r3, r3, r5
 802a098:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802a09c:	b2ff      	uxtb	r7, r7
 802a09e:	1202      	asrs	r2, r0, #8
 802a0a0:	fb17 f705 	smulbb	r7, r7, r5
 802a0a4:	b2c9      	uxtb	r1, r1
 802a0a6:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 802a0aa:	fb02 3201 	mla	r2, r2, r1, r3
 802a0ae:	10c3      	asrs	r3, r0, #3
 802a0b0:	00c0      	lsls	r0, r0, #3
 802a0b2:	fb1c fc05 	smulbb	ip, ip, r5
 802a0b6:	b2c0      	uxtb	r0, r0
 802a0b8:	fb00 7001 	mla	r0, r0, r1, r7
 802a0bc:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802a0c0:	fb03 c301 	mla	r3, r3, r1, ip
 802a0c4:	b292      	uxth	r2, r2
 802a0c6:	b280      	uxth	r0, r0
 802a0c8:	1c51      	adds	r1, r2, #1
 802a0ca:	f100 0c01 	add.w	ip, r0, #1
 802a0ce:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802a0d2:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802a0d6:	b29b      	uxth	r3, r3
 802a0d8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802a0dc:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 802a0e0:	ea4c 0202 	orr.w	r2, ip, r2
 802a0e4:	f103 0c01 	add.w	ip, r3, #1
 802a0e8:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802a0ec:	095b      	lsrs	r3, r3, #5
 802a0ee:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802a0f2:	431a      	orrs	r2, r3
 802a0f4:	f8a9 2000 	strh.w	r2, [r9]
 802a0f8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802a0fa:	f109 0902 	add.w	r9, r9, #2
 802a0fe:	441c      	add	r4, r3
 802a100:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802a102:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a106:	441e      	add	r6, r3
 802a108:	e647      	b.n	8029d9a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802a10a:	2800      	cmp	r0, #0
 802a10c:	f43f aedf 	beq.w	8029ece <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802a110:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 802a114:	9109      	str	r1, [sp, #36]	@ 0x24
 802a116:	0e09      	lsrs	r1, r1, #24
 802a118:	9112      	str	r1, [sp, #72]	@ 0x48
 802a11a:	e6d8      	b.n	8029ece <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802a11c:	b01d      	add	sp, #116	@ 0x74
 802a11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a122 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 802a122:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a126:	b085      	sub	sp, #20
 802a128:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 802a12c:	9102      	str	r1, [sp, #8]
 802a12e:	fb04 7103 	mla	r1, r4, r3, r7
 802a132:	2c00      	cmp	r4, #0
 802a134:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 802a138:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 802a13c:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 802a140:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802a144:	f2c0 810c 	blt.w	802a360 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802a148:	45a6      	cmp	lr, r4
 802a14a:	f340 8109 	ble.w	802a360 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802a14e:	2f00      	cmp	r7, #0
 802a150:	f2c0 8104 	blt.w	802a35c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802a154:	42bb      	cmp	r3, r7
 802a156:	f340 8101 	ble.w	802a35c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802a15a:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802a15e:	1c7a      	adds	r2, r7, #1
 802a160:	f100 8101 	bmi.w	802a366 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802a164:	4293      	cmp	r3, r2
 802a166:	f340 80fe 	ble.w	802a366 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802a16a:	2e00      	cmp	r6, #0
 802a16c:	f000 80fd 	beq.w	802a36a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 802a170:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802a174:	3401      	adds	r4, #1
 802a176:	f100 80fc 	bmi.w	802a372 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802a17a:	45a6      	cmp	lr, r4
 802a17c:	f340 80f9 	ble.w	802a372 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802a180:	2800      	cmp	r0, #0
 802a182:	f000 80f9 	beq.w	802a378 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 802a186:	2f00      	cmp	r7, #0
 802a188:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 802a18c:	f2c0 80ef 	blt.w	802a36e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 802a190:	42bb      	cmp	r3, r7
 802a192:	f340 80ec 	ble.w	802a36e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 802a196:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802a19a:	3701      	adds	r7, #1
 802a19c:	f100 80ef 	bmi.w	802a37e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 802a1a0:	42bb      	cmp	r3, r7
 802a1a2:	f340 80ec 	ble.w	802a37e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 802a1a6:	2e00      	cmp	r6, #0
 802a1a8:	f000 80eb 	beq.w	802a382 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 802a1ac:	6852      	ldr	r2, [r2, #4]
 802a1ae:	b2b6      	uxth	r6, r6
 802a1b0:	b280      	uxth	r0, r0
 802a1b2:	fb00 fe06 	mul.w	lr, r0, r6
 802a1b6:	0136      	lsls	r6, r6, #4
 802a1b8:	eba6 070e 	sub.w	r7, r6, lr
 802a1bc:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802a1c0:	b2bf      	uxth	r7, r7
 802a1c2:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 802a1c6:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802a1ca:	fb07 f60a 	mul.w	r6, r7, sl
 802a1ce:	b280      	uxth	r0, r0
 802a1d0:	1a1b      	subs	r3, r3, r0
 802a1d2:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802a1d6:	b29b      	uxth	r3, r3
 802a1d8:	fb0b 6603 	mla	r6, fp, r3, r6
 802a1dc:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802a1e0:	fb00 6609 	mla	r6, r0, r9, r6
 802a1e4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802a1e8:	fb0e 6608 	mla	r6, lr, r8, r6
 802a1ec:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802a1f0:	9600      	str	r6, [sp, #0]
 802a1f2:	2e00      	cmp	r6, #0
 802a1f4:	f000 80af 	beq.w	802a356 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 802a1f8:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802a1fc:	fb0b fc0c 	mul.w	ip, fp, ip
 802a200:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802a204:	fb0b f505 	mul.w	r5, fp, r5
 802a208:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802a20c:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802a210:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802a214:	44dc      	add	ip, fp
 802a216:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a21a:	9501      	str	r5, [sp, #4]
 802a21c:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 802a220:	9503      	str	r5, [sp, #12]
 802a222:	9d01      	ldr	r5, [sp, #4]
 802a224:	9e02      	ldr	r6, [sp, #8]
 802a226:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 802a22a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802a22e:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 802a232:	fb0a fc0c 	mul.w	ip, sl, ip
 802a236:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802a23a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802a23e:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802a242:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802a246:	4465      	add	r5, ip
 802a248:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802a24c:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802a250:	fb09 fc0c 	mul.w	ip, r9, ip
 802a254:	fb09 f904 	mul.w	r9, r9, r4
 802a258:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 802a25c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802a260:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 802a264:	fb08 f404 	mul.w	r4, r8, r4
 802a268:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802a26c:	fb08 f802 	mul.w	r8, r8, r2
 802a270:	0a2d      	lsrs	r5, r5, #8
 802a272:	0a22      	lsrs	r2, r4, #8
 802a274:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802a278:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802a27c:	437d      	muls	r5, r7
 802a27e:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 802a282:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802a286:	4414      	add	r4, r2
 802a288:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802a28c:	fb0a fa01 	mul.w	sl, sl, r1
 802a290:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802a294:	9a03      	ldr	r2, [sp, #12]
 802a296:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 802a29a:	fb02 5503 	mla	r5, r2, r3, r5
 802a29e:	0a24      	lsrs	r4, r4, #8
 802a2a0:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802a2a4:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802a2a8:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802a2ac:	fb04 540e 	mla	r4, r4, lr, r5
 802a2b0:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802a2b4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802a2b8:	4461      	add	r1, ip
 802a2ba:	0a09      	lsrs	r1, r1, #8
 802a2bc:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802a2c0:	fb01 4100 	mla	r1, r1, r0, r4
 802a2c4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a2c8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a2cc:	fb07 f70a 	mul.w	r7, r7, sl
 802a2d0:	0a09      	lsrs	r1, r1, #8
 802a2d2:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 802a2d6:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 802a2da:	fb03 7101 	mla	r1, r3, r1, r7
 802a2de:	9b00      	ldr	r3, [sp, #0]
 802a2e0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802a2e4:	43da      	mvns	r2, r3
 802a2e6:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802a2ea:	fb0e 1e08 	mla	lr, lr, r8, r1
 802a2ee:	8836      	ldrh	r6, [r6, #0]
 802a2f0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a2f4:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 802a2f8:	fb00 e101 	mla	r1, r0, r1, lr
 802a2fc:	1233      	asrs	r3, r6, #8
 802a2fe:	b2d2      	uxtb	r2, r2
 802a300:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802a304:	4353      	muls	r3, r2
 802a306:	10f0      	asrs	r0, r6, #3
 802a308:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802a30c:	4350      	muls	r0, r2
 802a30e:	0a09      	lsrs	r1, r1, #8
 802a310:	00f6      	lsls	r6, r6, #3
 802a312:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802a316:	b2f6      	uxtb	r6, r6
 802a318:	4321      	orrs	r1, r4
 802a31a:	4356      	muls	r6, r2
 802a31c:	1c5a      	adds	r2, r3, #1
 802a31e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802a322:	0c0b      	lsrs	r3, r1, #16
 802a324:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a328:	1c42      	adds	r2, r0, #1
 802a32a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a32e:	0a0a      	lsrs	r2, r1, #8
 802a330:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802a334:	021b      	lsls	r3, r3, #8
 802a336:	00d2      	lsls	r2, r2, #3
 802a338:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802a33c:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 802a340:	4313      	orrs	r3, r2
 802a342:	1c72      	adds	r2, r6, #1
 802a344:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 802a348:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 802a34c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802a350:	4319      	orrs	r1, r3
 802a352:	9b02      	ldr	r3, [sp, #8]
 802a354:	8019      	strh	r1, [r3, #0]
 802a356:	b005      	add	sp, #20
 802a358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a35c:	2500      	movs	r5, #0
 802a35e:	e6fe      	b.n	802a15e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 802a360:	2100      	movs	r1, #0
 802a362:	460d      	mov	r5, r1
 802a364:	e706      	b.n	802a174 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802a366:	2100      	movs	r1, #0
 802a368:	e704      	b.n	802a174 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802a36a:	4631      	mov	r1, r6
 802a36c:	e702      	b.n	802a174 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802a36e:	2400      	movs	r4, #0
 802a370:	e713      	b.n	802a19a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 802a372:	2200      	movs	r2, #0
 802a374:	4614      	mov	r4, r2
 802a376:	e71a      	b.n	802a1ae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802a378:	4602      	mov	r2, r0
 802a37a:	4604      	mov	r4, r0
 802a37c:	e717      	b.n	802a1ae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802a37e:	2200      	movs	r2, #0
 802a380:	e715      	b.n	802a1ae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802a382:	4632      	mov	r2, r6
 802a384:	e713      	b.n	802a1ae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

0802a388 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a38c:	b09b      	sub	sp, #108	@ 0x6c
 802a38e:	9218      	str	r2, [sp, #96]	@ 0x60
 802a390:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802a392:	9019      	str	r0, [sp, #100]	@ 0x64
 802a394:	6850      	ldr	r0, [r2, #4]
 802a396:	9116      	str	r1, [sp, #88]	@ 0x58
 802a398:	9307      	str	r3, [sp, #28]
 802a39a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 802a39e:	fb00 1303 	mla	r3, r0, r3, r1
 802a3a2:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 802a3a6:	6812      	ldr	r2, [r2, #0]
 802a3a8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802a3ac:	930a      	str	r3, [sp, #40]	@ 0x28
 802a3ae:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a3b0:	681b      	ldr	r3, [r3, #0]
 802a3b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a3b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a3b6:	2b00      	cmp	r3, #0
 802a3b8:	dc03      	bgt.n	802a3c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802a3ba:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802a3bc:	2b00      	cmp	r3, #0
 802a3be:	f340 8387 	ble.w	802aad0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802a3c2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a3c4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a3c8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a3cc:	1e48      	subs	r0, r1, #1
 802a3ce:	1e57      	subs	r7, r2, #1
 802a3d0:	9b07      	ldr	r3, [sp, #28]
 802a3d2:	2b00      	cmp	r3, #0
 802a3d4:	f340 8166 	ble.w	802a6a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802a3d8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802a3dc:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a3e0:	d406      	bmi.n	802a3f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802a3e2:	4584      	cmp	ip, r0
 802a3e4:	da04      	bge.n	802a3f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802a3e6:	2b00      	cmp	r3, #0
 802a3e8:	db02      	blt.n	802a3f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802a3ea:	42bb      	cmp	r3, r7
 802a3ec:	f2c0 815b 	blt.w	802a6a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802a3f0:	f11c 0c01 	adds.w	ip, ip, #1
 802a3f4:	f100 814b 	bmi.w	802a68e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802a3f8:	4561      	cmp	r1, ip
 802a3fa:	f2c0 8148 	blt.w	802a68e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802a3fe:	3301      	adds	r3, #1
 802a400:	f100 8145 	bmi.w	802a68e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802a404:	429a      	cmp	r2, r3
 802a406:	f2c0 8142 	blt.w	802a68e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802a40a:	9b07      	ldr	r3, [sp, #28]
 802a40c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802a40e:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a410:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802a412:	2b00      	cmp	r3, #0
 802a414:	f340 8165 	ble.w	802a6e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802a418:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 802a41a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a41c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802a420:	1422      	asrs	r2, r4, #16
 802a422:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802a426:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802a42a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a42e:	689b      	ldr	r3, [r3, #8]
 802a430:	f100 81d5 	bmi.w	802a7de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802a434:	f103 38ff 	add.w	r8, r3, #4294967295
 802a438:	4542      	cmp	r2, r8
 802a43a:	f280 81d0 	bge.w	802a7de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802a43e:	f1bc 0f00 	cmp.w	ip, #0
 802a442:	f2c0 81cc 	blt.w	802a7de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802a446:	f10e 38ff 	add.w	r8, lr, #4294967295
 802a44a:	45c4      	cmp	ip, r8
 802a44c:	f280 81c7 	bge.w	802a7de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802a450:	b21b      	sxth	r3, r3
 802a452:	fb0c 2203 	mla	r2, ip, r3, r2
 802a456:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802a458:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802a45c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802a460:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802a464:	2900      	cmp	r1, #0
 802a466:	f000 8182 	beq.w	802a76e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802a46a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802a46e:	950b      	str	r5, [sp, #44]	@ 0x2c
 802a470:	0e2d      	lsrs	r5, r5, #24
 802a472:	9512      	str	r5, [sp, #72]	@ 0x48
 802a474:	b180      	cbz	r0, 802a498 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802a476:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802a47a:	3b01      	subs	r3, #1
 802a47c:	009b      	lsls	r3, r3, #2
 802a47e:	3304      	adds	r3, #4
 802a480:	eb08 0c03 	add.w	ip, r8, r3
 802a484:	f858 3003 	ldr.w	r3, [r8, r3]
 802a488:	9308      	str	r3, [sp, #32]
 802a48a:	0e1b      	lsrs	r3, r3, #24
 802a48c:	9310      	str	r3, [sp, #64]	@ 0x40
 802a48e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802a492:	930c      	str	r3, [sp, #48]	@ 0x30
 802a494:	0e1b      	lsrs	r3, r3, #24
 802a496:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a498:	b289      	uxth	r1, r1
 802a49a:	b280      	uxth	r0, r0
 802a49c:	fb01 f900 	mul.w	r9, r1, r0
 802a4a0:	0109      	lsls	r1, r1, #4
 802a4a2:	eba1 0809 	sub.w	r8, r1, r9
 802a4a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802a4a8:	fa1f f888 	uxth.w	r8, r8
 802a4ac:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802a4b0:	fb08 f303 	mul.w	r3, r8, r3
 802a4b4:	b280      	uxth	r0, r0
 802a4b6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 802a4ba:	1a09      	subs	r1, r1, r0
 802a4bc:	b289      	uxth	r1, r1
 802a4be:	fb01 330e 	mla	r3, r1, lr, r3
 802a4c2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802a4c4:	fb00 3305 	mla	r3, r0, r5, r3
 802a4c8:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802a4ca:	fb09 3305 	mla	r3, r9, r5, r3
 802a4ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a4d2:	2b00      	cmp	r3, #0
 802a4d4:	f000 80d2 	beq.w	802a67c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802a4d8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802a4dc:	d01b      	beq.n	802a516 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802a4de:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 802a4e2:	fb0e fa0a 	mul.w	sl, lr, sl
 802a4e6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802a4ea:	fb0e fe02 	mul.w	lr, lr, r2
 802a4ee:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802a4f2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802a4f6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802a4fa:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802a4fe:	4452      	add	r2, sl
 802a500:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802a504:	0a12      	lsrs	r2, r2, #8
 802a506:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a50a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802a50e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802a512:	ea42 020c 	orr.w	r2, r2, ip
 802a516:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802a518:	2dff      	cmp	r5, #255	@ 0xff
 802a51a:	d021      	beq.n	802a560 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802a51c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802a51e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802a522:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802a524:	fb05 fb0b 	mul.w	fp, r5, fp
 802a528:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802a52a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a52e:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802a532:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802a534:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a538:	fb05 fa0a 	mul.w	sl, r5, sl
 802a53c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802a540:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802a544:	44de      	add	lr, fp
 802a546:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a54a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a54e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a552:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a556:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a55a:	ea4e 050a 	orr.w	r5, lr, sl
 802a55e:	950b      	str	r5, [sp, #44]	@ 0x2c
 802a560:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802a562:	2dff      	cmp	r5, #255	@ 0xff
 802a564:	d021      	beq.n	802a5aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802a566:	9d08      	ldr	r5, [sp, #32]
 802a568:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802a56c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802a56e:	fb05 fb0b 	mul.w	fp, r5, fp
 802a572:	9d08      	ldr	r5, [sp, #32]
 802a574:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802a578:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802a57a:	fb05 fa0e 	mul.w	sl, r5, lr
 802a57e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a582:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a586:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802a58a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802a58e:	44de      	add	lr, fp
 802a590:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a594:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a598:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a59c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a5a0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a5a4:	ea4e 050a 	orr.w	r5, lr, sl
 802a5a8:	9508      	str	r5, [sp, #32]
 802a5aa:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802a5ac:	2dff      	cmp	r5, #255	@ 0xff
 802a5ae:	d021      	beq.n	802a5f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802a5b0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802a5b2:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802a5b6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802a5b8:	fb05 fb0b 	mul.w	fp, r5, fp
 802a5bc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802a5be:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a5c2:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802a5c6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802a5c8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a5cc:	fb05 fa0a 	mul.w	sl, r5, sl
 802a5d0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802a5d4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802a5d8:	44de      	add	lr, fp
 802a5da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a5de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a5e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a5e6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a5ea:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a5ee:	ea4e 050a 	orr.w	r5, lr, sl
 802a5f2:	950c      	str	r5, [sp, #48]	@ 0x30
 802a5f4:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802a5f6:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 802a5fa:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802a5fe:	fb08 fc0c 	mul.w	ip, r8, ip
 802a602:	fb01 cc0e 	mla	ip, r1, lr, ip
 802a606:	9d08      	ldr	r5, [sp, #32]
 802a608:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802a60c:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802a610:	fb00 cc0e 	mla	ip, r0, lr, ip
 802a614:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802a616:	2bff      	cmp	r3, #255	@ 0xff
 802a618:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802a61c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802a61e:	fb09 cc0e 	mla	ip, r9, lr, ip
 802a622:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802a626:	fb08 f80e 	mul.w	r8, r8, lr
 802a62a:	fb01 8202 	mla	r2, r1, r2, r8
 802a62e:	9908      	ldr	r1, [sp, #32]
 802a630:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a634:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802a638:	fb00 220a 	mla	r2, r0, sl, r2
 802a63c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802a63e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a642:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 802a646:	fb09 2900 	mla	r9, r9, r0, r2
 802a64a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a64e:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802a652:	ea4c 0c09 	orr.w	ip, ip, r9
 802a656:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802a65a:	f040 8091 	bne.w	802a780 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802a65e:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802a662:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 802a666:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802a66a:	f022 0207 	bic.w	r2, r2, #7
 802a66e:	431a      	orrs	r2, r3
 802a670:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802a674:	ea4c 0c02 	orr.w	ip, ip, r2
 802a678:	f8a7 c000 	strh.w	ip, [r7]
 802a67c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a67e:	3702      	adds	r7, #2
 802a680:	441c      	add	r4, r3
 802a682:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a684:	441e      	add	r6, r3
 802a686:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802a688:	3b01      	subs	r3, #1
 802a68a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a68c:	e6c0      	b.n	802a410 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802a68e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a690:	441c      	add	r4, r3
 802a692:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a694:	441e      	add	r6, r3
 802a696:	9b07      	ldr	r3, [sp, #28]
 802a698:	3b01      	subs	r3, #1
 802a69a:	9307      	str	r3, [sp, #28]
 802a69c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a69e:	3302      	adds	r3, #2
 802a6a0:	930a      	str	r3, [sp, #40]	@ 0x28
 802a6a2:	e695      	b.n	802a3d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802a6a4:	d024      	beq.n	802a6f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802a6a6:	9b07      	ldr	r3, [sp, #28]
 802a6a8:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802a6aa:	3b01      	subs	r3, #1
 802a6ac:	fb00 4003 	mla	r0, r0, r3, r4
 802a6b0:	1400      	asrs	r0, r0, #16
 802a6b2:	f53f aeaa 	bmi.w	802a40a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a6b6:	3901      	subs	r1, #1
 802a6b8:	4288      	cmp	r0, r1
 802a6ba:	f6bf aea6 	bge.w	802a40a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a6be:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802a6c0:	fb01 6303 	mla	r3, r1, r3, r6
 802a6c4:	141b      	asrs	r3, r3, #16
 802a6c6:	f53f aea0 	bmi.w	802a40a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a6ca:	3a01      	subs	r2, #1
 802a6cc:	4293      	cmp	r3, r2
 802a6ce:	f6bf ae9c 	bge.w	802a40a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a6d2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802a6d6:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 802a6da:	f1bb 0f00 	cmp.w	fp, #0
 802a6de:	f300 809a 	bgt.w	802a816 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802a6e2:	9b07      	ldr	r3, [sp, #28]
 802a6e4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802a6e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a6ea:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802a6ee:	930a      	str	r3, [sp, #40]	@ 0x28
 802a6f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a6f2:	2b00      	cmp	r3, #0
 802a6f4:	f340 81ec 	ble.w	802aad0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802a6f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a6fc:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a700:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a704:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a708:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a70c:	eef0 6a62 	vmov.f32	s13, s5
 802a710:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a714:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a718:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a71c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a720:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a724:	ee16 4a90 	vmov	r4, s13
 802a728:	eef0 6a43 	vmov.f32	s13, s6
 802a72c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a730:	ee12 2a90 	vmov	r2, s5
 802a734:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a738:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a73a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a73e:	fb92 f3f3 	sdiv	r3, r2, r3
 802a742:	ee13 2a10 	vmov	r2, s6
 802a746:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a748:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a74a:	ee16 6a90 	vmov	r6, s13
 802a74e:	fb92 f3f3 	sdiv	r3, r2, r3
 802a752:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a754:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a756:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802a758:	3b01      	subs	r3, #1
 802a75a:	9316      	str	r3, [sp, #88]	@ 0x58
 802a75c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a75e:	bf08      	it	eq
 802a760:	4613      	moveq	r3, r2
 802a762:	eeb0 3a67 	vmov.f32	s6, s15
 802a766:	9307      	str	r3, [sp, #28]
 802a768:	eef0 2a47 	vmov.f32	s5, s14
 802a76c:	e622      	b.n	802a3b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802a76e:	2800      	cmp	r0, #0
 802a770:	f43f ae92 	beq.w	802a498 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802a774:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802a778:	9308      	str	r3, [sp, #32]
 802a77a:	0e1b      	lsrs	r3, r3, #24
 802a77c:	9310      	str	r3, [sp, #64]	@ 0x40
 802a77e:	e68b      	b.n	802a498 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802a780:	43db      	mvns	r3, r3
 802a782:	8839      	ldrh	r1, [r7, #0]
 802a784:	fa5f f883 	uxtb.w	r8, r3
 802a788:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802a78c:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 802a790:	fb0e fe08 	mul.w	lr, lr, r8
 802a794:	10c8      	asrs	r0, r1, #3
 802a796:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802a79a:	fb00 f008 	mul.w	r0, r0, r8
 802a79e:	00cb      	lsls	r3, r1, #3
 802a7a0:	f10e 0101 	add.w	r1, lr, #1
 802a7a4:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 802a7a8:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802a7ac:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 802a7b0:	b2db      	uxtb	r3, r3
 802a7b2:	f100 0e01 	add.w	lr, r0, #1
 802a7b6:	fb03 f308 	mul.w	r3, r3, r8
 802a7ba:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802a7be:	4dc6      	ldr	r5, [pc, #792]	@ (802aad8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802a7c0:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802a7c4:	b2c9      	uxtb	r1, r1
 802a7c6:	00d2      	lsls	r2, r2, #3
 802a7c8:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802a7cc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802a7d0:	430a      	orrs	r2, r1
 802a7d2:	1c59      	adds	r1, r3, #1
 802a7d4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802a7d8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802a7dc:	e748      	b.n	802a670 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802a7de:	f112 0801 	adds.w	r8, r2, #1
 802a7e2:	f53f af4b 	bmi.w	802a67c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802a7e6:	4543      	cmp	r3, r8
 802a7e8:	f6ff af48 	blt.w	802a67c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802a7ec:	f11c 0801 	adds.w	r8, ip, #1
 802a7f0:	f53f af44 	bmi.w	802a67c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802a7f4:	45c6      	cmp	lr, r8
 802a7f6:	f6ff af41 	blt.w	802a67c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802a7fa:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802a7fe:	fa0f f28e 	sxth.w	r2, lr
 802a802:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802a806:	9200      	str	r2, [sp, #0]
 802a808:	b21b      	sxth	r3, r3
 802a80a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a80c:	4639      	mov	r1, r7
 802a80e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802a810:	f7ff fc87 	bl	802a122 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 802a814:	e732      	b.n	802a67c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802a816:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a818:	1421      	asrs	r1, r4, #16
 802a81a:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802a81e:	1433      	asrs	r3, r6, #16
 802a820:	fb07 1303 	mla	r3, r7, r3, r1
 802a824:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802a826:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802a828:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802a82c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802a830:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802a834:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a838:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802a83c:	2a00      	cmp	r2, #0
 802a83e:	f000 8108 	beq.w	802aa52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 802a842:	684d      	ldr	r5, [r1, #4]
 802a844:	950d      	str	r5, [sp, #52]	@ 0x34
 802a846:	0e2d      	lsrs	r5, r5, #24
 802a848:	9514      	str	r5, [sp, #80]	@ 0x50
 802a84a:	b178      	cbz	r0, 802a86c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802a84c:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 802a850:	3f01      	subs	r7, #1
 802a852:	00bf      	lsls	r7, r7, #2
 802a854:	3704      	adds	r7, #4
 802a856:	eb01 0e07 	add.w	lr, r1, r7
 802a85a:	59c9      	ldr	r1, [r1, r7]
 802a85c:	9109      	str	r1, [sp, #36]	@ 0x24
 802a85e:	0e09      	lsrs	r1, r1, #24
 802a860:	9111      	str	r1, [sp, #68]	@ 0x44
 802a862:	f8de 1004 	ldr.w	r1, [lr, #4]
 802a866:	910e      	str	r1, [sp, #56]	@ 0x38
 802a868:	0e09      	lsrs	r1, r1, #24
 802a86a:	9115      	str	r1, [sp, #84]	@ 0x54
 802a86c:	b292      	uxth	r2, r2
 802a86e:	b280      	uxth	r0, r0
 802a870:	fb02 f900 	mul.w	r9, r2, r0
 802a874:	0112      	lsls	r2, r2, #4
 802a876:	eba2 0e09 	sub.w	lr, r2, r9
 802a87a:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 802a87e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802a880:	fa1f fe8e 	uxth.w	lr, lr
 802a884:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802a888:	fb0e f202 	mul.w	r2, lr, r2
 802a88c:	b280      	uxth	r0, r0
 802a88e:	1a09      	subs	r1, r1, r0
 802a890:	b289      	uxth	r1, r1
 802a892:	fb01 220c 	mla	r2, r1, ip, r2
 802a896:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802a898:	fb00 2205 	mla	r2, r0, r5, r2
 802a89c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802a89e:	fb09 2205 	mla	r2, r9, r5, r2
 802a8a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802a8a6:	2a00      	cmp	r2, #0
 802a8a8:	f000 80ca 	beq.w	802aa40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802a8ac:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802a8b0:	d019      	beq.n	802a8e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 802a8b2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802a8b6:	fb0c fa0a 	mul.w	sl, ip, sl
 802a8ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802a8be:	fb0c fc03 	mul.w	ip, ip, r3
 802a8c2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802a8c6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802a8ca:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802a8ce:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802a8d2:	4453      	add	r3, sl
 802a8d4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802a8d8:	0a1b      	lsrs	r3, r3, #8
 802a8da:	0a3f      	lsrs	r7, r7, #8
 802a8dc:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802a8e0:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802a8e4:	433b      	orrs	r3, r7
 802a8e6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802a8e8:	2dff      	cmp	r5, #255	@ 0xff
 802a8ea:	d020      	beq.n	802a92e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 802a8ec:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802a8ee:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802a8f2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802a8f4:	436f      	muls	r7, r5
 802a8f6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802a8f8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a8fc:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802a900:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802a902:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802a906:	fb05 fa0a 	mul.w	sl, r5, sl
 802a90a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a90e:	44bc      	add	ip, r7
 802a910:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802a914:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a918:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a91c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a920:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a924:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a928:	ea4c 050a 	orr.w	r5, ip, sl
 802a92c:	950d      	str	r5, [sp, #52]	@ 0x34
 802a92e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802a930:	2dff      	cmp	r5, #255	@ 0xff
 802a932:	d020      	beq.n	802a976 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 802a934:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802a936:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802a93a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802a93c:	436f      	muls	r7, r5
 802a93e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802a940:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 802a944:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802a946:	fb05 fa0c 	mul.w	sl, r5, ip
 802a94a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a94e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a952:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802a956:	44bc      	add	ip, r7
 802a958:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802a95c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a960:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a964:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a968:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a96c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a970:	ea4c 050a 	orr.w	r5, ip, sl
 802a974:	9509      	str	r5, [sp, #36]	@ 0x24
 802a976:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802a978:	2dff      	cmp	r5, #255	@ 0xff
 802a97a:	d020      	beq.n	802a9be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 802a97c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802a97e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802a982:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802a984:	436f      	muls	r7, r5
 802a986:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802a988:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a98c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802a990:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802a992:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802a996:	fb05 fa0a 	mul.w	sl, r5, sl
 802a99a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a99e:	44bc      	add	ip, r7
 802a9a0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802a9a4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a9a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a9ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a9b0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a9b4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a9b8:	ea4c 050a 	orr.w	r5, ip, sl
 802a9bc:	950e      	str	r5, [sp, #56]	@ 0x38
 802a9be:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802a9c0:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 802a9c4:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802a9c8:	fb0e f707 	mul.w	r7, lr, r7
 802a9cc:	fb01 770c 	mla	r7, r1, ip, r7
 802a9d0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802a9d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802a9d6:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802a9da:	fb00 770c 	mla	r7, r0, ip, r7
 802a9de:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802a9e0:	2aff      	cmp	r2, #255	@ 0xff
 802a9e2:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802a9e6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802a9e8:	fb09 770c 	mla	r7, r9, ip, r7
 802a9ec:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 802a9f0:	fb0e fe0c 	mul.w	lr, lr, ip
 802a9f4:	fb01 e303 	mla	r3, r1, r3, lr
 802a9f8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802a9fa:	ea4f 2717 	mov.w	r7, r7, lsr #8
 802a9fe:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802aa02:	fb00 330a 	mla	r3, r0, sl, r3
 802aa06:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802aa08:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802aa0c:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 802aa10:	fb09 3c0c 	mla	ip, r9, ip, r3
 802aa14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802aa18:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802aa1c:	ea47 070c 	orr.w	r7, r7, ip
 802aa20:	ea4f 2317 	mov.w	r3, r7, lsr #8
 802aa24:	d11e      	bne.n	802aa64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802aa26:	097a      	lsrs	r2, r7, #5
 802aa28:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 802aa2c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802aa30:	f023 0307 	bic.w	r3, r3, #7
 802aa34:	4313      	orrs	r3, r2
 802aa36:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802aa3a:	431f      	orrs	r7, r3
 802aa3c:	f8a8 7000 	strh.w	r7, [r8]
 802aa40:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802aa42:	f108 0802 	add.w	r8, r8, #2
 802aa46:	441c      	add	r4, r3
 802aa48:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802aa4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802aa4e:	441e      	add	r6, r3
 802aa50:	e643      	b.n	802a6da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 802aa52:	2800      	cmp	r0, #0
 802aa54:	f43f af0a 	beq.w	802a86c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802aa58:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802aa5c:	9109      	str	r1, [sp, #36]	@ 0x24
 802aa5e:	0e09      	lsrs	r1, r1, #24
 802aa60:	9111      	str	r1, [sp, #68]	@ 0x44
 802aa62:	e703      	b.n	802a86c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802aa64:	43d2      	mvns	r2, r2
 802aa66:	f8b8 1000 	ldrh.w	r1, [r8]
 802aa6a:	fa5f fe82 	uxtb.w	lr, r2
 802aa6e:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802aa72:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802aa76:	fb0c fc0e 	mul.w	ip, ip, lr
 802aa7a:	10c8      	asrs	r0, r1, #3
 802aa7c:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802aa80:	fb00 f00e 	mul.w	r0, r0, lr
 802aa84:	00ca      	lsls	r2, r1, #3
 802aa86:	f10c 0101 	add.w	r1, ip, #1
 802aa8a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802aa8e:	b2d2      	uxtb	r2, r2
 802aa90:	0c39      	lsrs	r1, r7, #16
 802aa92:	fb02 f20e 	mul.w	r2, r2, lr
 802aa96:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802aa9a:	490f      	ldr	r1, [pc, #60]	@ (802aad8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802aa9c:	fa5f fc8c 	uxtb.w	ip, ip
 802aaa0:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802aaa4:	1c41      	adds	r1, r0, #1
 802aaa6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802aaaa:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802aaae:	1c51      	adds	r1, r2, #1
 802aab0:	00c0      	lsls	r0, r0, #3
 802aab2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802aab6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802aaba:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802aabe:	ea4c 0c00 	orr.w	ip, ip, r0
 802aac2:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802aac6:	ea47 0c0c 	orr.w	ip, r7, ip
 802aaca:	f8a8 c000 	strh.w	ip, [r8]
 802aace:	e7b7      	b.n	802aa40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802aad0:	b01b      	add	sp, #108	@ 0x6c
 802aad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aad6:	bf00      	nop
 802aad8:	fffff800 	.word	0xfffff800

0802aadc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802aadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802aae0:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 802aae4:	2d00      	cmp	r5, #0
 802aae6:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802aaea:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802aaee:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 802aaf2:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 802aaf6:	fb05 0e03 	mla	lr, r5, r3, r0
 802aafa:	f2c0 808c 	blt.w	802ac16 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802aafe:	45a9      	cmp	r9, r5
 802ab00:	f340 8089 	ble.w	802ac16 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802ab04:	2800      	cmp	r0, #0
 802ab06:	f2c0 8084 	blt.w	802ac12 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802ab0a:	4580      	cmp	r8, r0
 802ab0c:	f340 8081 	ble.w	802ac12 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802ab10:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802ab14:	5d16      	ldrb	r6, [r2, r4]
 802ab16:	f01e 0f01 	tst.w	lr, #1
 802ab1a:	bf0c      	ite	eq
 802ab1c:	f006 060f 	andeq.w	r6, r6, #15
 802ab20:	1136      	asrne	r6, r6, #4
 802ab22:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802ab26:	b2f6      	uxtb	r6, r6
 802ab28:	1c44      	adds	r4, r0, #1
 802ab2a:	d477      	bmi.n	802ac1c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802ab2c:	45a0      	cmp	r8, r4
 802ab2e:	dd75      	ble.n	802ac1c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802ab30:	2f00      	cmp	r7, #0
 802ab32:	d075      	beq.n	802ac20 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 802ab34:	f10e 0a01 	add.w	sl, lr, #1
 802ab38:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802ab3c:	5d14      	ldrb	r4, [r2, r4]
 802ab3e:	f01a 0f01 	tst.w	sl, #1
 802ab42:	bf0c      	ite	eq
 802ab44:	f004 040f 	andeq.w	r4, r4, #15
 802ab48:	1124      	asrne	r4, r4, #4
 802ab4a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802ab4e:	b2e4      	uxtb	r4, r4
 802ab50:	3501      	adds	r5, #1
 802ab52:	d469      	bmi.n	802ac28 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802ab54:	45a9      	cmp	r9, r5
 802ab56:	dd67      	ble.n	802ac28 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802ab58:	f1bc 0f00 	cmp.w	ip, #0
 802ab5c:	d067      	beq.n	802ac2e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 802ab5e:	2800      	cmp	r0, #0
 802ab60:	db60      	blt.n	802ac24 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802ab62:	4580      	cmp	r8, r0
 802ab64:	dd5e      	ble.n	802ac24 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802ab66:	eb03 090e 	add.w	r9, r3, lr
 802ab6a:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802ab6e:	5d55      	ldrb	r5, [r2, r5]
 802ab70:	f019 0f01 	tst.w	r9, #1
 802ab74:	bf0c      	ite	eq
 802ab76:	f005 050f 	andeq.w	r5, r5, #15
 802ab7a:	112d      	asrne	r5, r5, #4
 802ab7c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802ab80:	b2ed      	uxtb	r5, r5
 802ab82:	3001      	adds	r0, #1
 802ab84:	d456      	bmi.n	802ac34 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802ab86:	4580      	cmp	r8, r0
 802ab88:	dd54      	ble.n	802ac34 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802ab8a:	2f00      	cmp	r7, #0
 802ab8c:	d054      	beq.n	802ac38 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802ab8e:	3301      	adds	r3, #1
 802ab90:	449e      	add	lr, r3
 802ab92:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802ab96:	5cd0      	ldrb	r0, [r2, r3]
 802ab98:	f01e 0f01 	tst.w	lr, #1
 802ab9c:	bf0c      	ite	eq
 802ab9e:	f000 000f 	andeq.w	r0, r0, #15
 802aba2:	1100      	asrne	r0, r0, #4
 802aba4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802aba8:	b2c3      	uxtb	r3, r0
 802abaa:	b2ba      	uxth	r2, r7
 802abac:	fa1f fc8c 	uxth.w	ip, ip
 802abb0:	fb02 f00c 	mul.w	r0, r2, ip
 802abb4:	0112      	lsls	r2, r2, #4
 802abb6:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802abba:	1a12      	subs	r2, r2, r0
 802abbc:	b292      	uxth	r2, r2
 802abbe:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802abc2:	4362      	muls	r2, r4
 802abc4:	fa1f fc8c 	uxth.w	ip, ip
 802abc8:	eba7 070c 	sub.w	r7, r7, ip
 802abcc:	b2bf      	uxth	r7, r7
 802abce:	fb06 2207 	mla	r2, r6, r7, r2
 802abd2:	fb0c 2505 	mla	r5, ip, r5, r2
 802abd6:	fb00 5303 	mla	r3, r0, r3, r5
 802abda:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802abde:	b1b3      	cbz	r3, 802ac0e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802abe0:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 802abe4:	435a      	muls	r2, r3
 802abe6:	1c53      	adds	r3, r2, #1
 802abe8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802abec:	4a2d      	ldr	r2, [pc, #180]	@ (802aca4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802abee:	121b      	asrs	r3, r3, #8
 802abf0:	6812      	ldr	r2, [r2, #0]
 802abf2:	2bff      	cmp	r3, #255	@ 0xff
 802abf4:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802abf8:	d120      	bne.n	802ac3c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 802abfa:	4b2b      	ldr	r3, [pc, #172]	@ (802aca8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802abfc:	0950      	lsrs	r0, r2, #5
 802abfe:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802ac02:	4033      	ands	r3, r6
 802ac04:	4318      	orrs	r0, r3
 802ac06:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802ac0a:	4302      	orrs	r2, r0
 802ac0c:	800a      	strh	r2, [r1, #0]
 802ac0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ac12:	2600      	movs	r6, #0
 802ac14:	e788      	b.n	802ab28 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 802ac16:	2400      	movs	r4, #0
 802ac18:	4626      	mov	r6, r4
 802ac1a:	e799      	b.n	802ab50 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802ac1c:	2400      	movs	r4, #0
 802ac1e:	e797      	b.n	802ab50 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802ac20:	463c      	mov	r4, r7
 802ac22:	e795      	b.n	802ab50 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802ac24:	2500      	movs	r5, #0
 802ac26:	e7ac      	b.n	802ab82 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 802ac28:	2300      	movs	r3, #0
 802ac2a:	461d      	mov	r5, r3
 802ac2c:	e7bd      	b.n	802abaa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802ac2e:	4663      	mov	r3, ip
 802ac30:	4665      	mov	r5, ip
 802ac32:	e7ba      	b.n	802abaa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802ac34:	2300      	movs	r3, #0
 802ac36:	e7b8      	b.n	802abaa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802ac38:	463b      	mov	r3, r7
 802ac3a:	e7b6      	b.n	802abaa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802ac3c:	b29f      	uxth	r7, r3
 802ac3e:	43db      	mvns	r3, r3
 802ac40:	f3c2 4007 	ubfx	r0, r2, #16, #8
 802ac44:	880d      	ldrh	r5, [r1, #0]
 802ac46:	fb10 f007 	smulbb	r0, r0, r7
 802ac4a:	b2f6      	uxtb	r6, r6
 802ac4c:	b2d2      	uxtb	r2, r2
 802ac4e:	122c      	asrs	r4, r5, #8
 802ac50:	fb12 f207 	smulbb	r2, r2, r7
 802ac54:	fb16 f607 	smulbb	r6, r6, r7
 802ac58:	b2db      	uxtb	r3, r3
 802ac5a:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802ac5e:	fb04 0403 	mla	r4, r4, r3, r0
 802ac62:	10e8      	asrs	r0, r5, #3
 802ac64:	00ed      	lsls	r5, r5, #3
 802ac66:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802ac6a:	b2ed      	uxtb	r5, r5
 802ac6c:	fb00 6603 	mla	r6, r0, r3, r6
 802ac70:	fb05 2303 	mla	r3, r5, r3, r2
 802ac74:	b2a4      	uxth	r4, r4
 802ac76:	b29a      	uxth	r2, r3
 802ac78:	1c63      	adds	r3, r4, #1
 802ac7a:	b2b0      	uxth	r0, r6
 802ac7c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802ac80:	1c53      	adds	r3, r2, #1
 802ac82:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802ac86:	1c42      	adds	r2, r0, #1
 802ac88:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802ac8c:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802ac90:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802ac94:	0940      	lsrs	r0, r0, #5
 802ac96:	4323      	orrs	r3, r4
 802ac98:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802ac9c:	4303      	orrs	r3, r0
 802ac9e:	800b      	strh	r3, [r1, #0]
 802aca0:	e7b5      	b.n	802ac0e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802aca2:	bf00      	nop
 802aca4:	2005bd2c 	.word	0x2005bd2c
 802aca8:	00fff800 	.word	0x00fff800

0802acac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802acac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802acb0:	b097      	sub	sp, #92	@ 0x5c
 802acb2:	9214      	str	r2, [sp, #80]	@ 0x50
 802acb4:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802acb6:	9015      	str	r0, [sp, #84]	@ 0x54
 802acb8:	9309      	str	r3, [sp, #36]	@ 0x24
 802acba:	6850      	ldr	r0, [r2, #4]
 802acbc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 802acc0:	910d      	str	r1, [sp, #52]	@ 0x34
 802acc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 802acc4:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 802acc8:	fb00 1303 	mla	r3, r0, r3, r1
 802accc:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 802acd0:	6812      	ldr	r2, [r2, #0]
 802acd2:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802acd6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802acd8:	689b      	ldr	r3, [r3, #8]
 802acda:	3301      	adds	r3, #1
 802acdc:	f023 0301 	bic.w	r3, r3, #1
 802ace0:	930a      	str	r3, [sp, #40]	@ 0x28
 802ace2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ace4:	681f      	ldr	r7, [r3, #0]
 802ace6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ace8:	2b00      	cmp	r3, #0
 802acea:	dc03      	bgt.n	802acf4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802acec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802acee:	2b00      	cmp	r3, #0
 802acf0:	f340 8287 	ble.w	802b202 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 802acf4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802acf6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802acfa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802acfe:	1e48      	subs	r0, r1, #1
 802ad00:	f102 3cff 	add.w	ip, r2, #4294967295
 802ad04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ad06:	2b00      	cmp	r3, #0
 802ad08:	f340 80c3 	ble.w	802ae92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802ad0c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802ad10:	ea4f 4326 	mov.w	r3, r6, asr #16
 802ad14:	d406      	bmi.n	802ad24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802ad16:	4586      	cmp	lr, r0
 802ad18:	da04      	bge.n	802ad24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802ad1a:	2b00      	cmp	r3, #0
 802ad1c:	db02      	blt.n	802ad24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802ad1e:	4563      	cmp	r3, ip
 802ad20:	f2c0 80b8 	blt.w	802ae94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802ad24:	f11e 0e01 	adds.w	lr, lr, #1
 802ad28:	f100 80a9 	bmi.w	802ae7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802ad2c:	4571      	cmp	r1, lr
 802ad2e:	f2c0 80a6 	blt.w	802ae7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802ad32:	3301      	adds	r3, #1
 802ad34:	f100 80a3 	bmi.w	802ae7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802ad38:	429a      	cmp	r2, r3
 802ad3a:	f2c0 80a0 	blt.w	802ae7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802ad3e:	46c8      	mov	r8, r9
 802ad40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ad42:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 802ad46:	930e      	str	r3, [sp, #56]	@ 0x38
 802ad48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802ad4a:	2b00      	cmp	r3, #0
 802ad4c:	f340 80c2 	ble.w	802aed4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802ad50:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ad52:	1430      	asrs	r0, r6, #16
 802ad54:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802ad58:	1423      	asrs	r3, r4, #16
 802ad5a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802ad5e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802ad62:	f100 814d 	bmi.w	802b000 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802ad66:	f10c 3bff 	add.w	fp, ip, #4294967295
 802ad6a:	455b      	cmp	r3, fp
 802ad6c:	f280 8148 	bge.w	802b000 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802ad70:	2800      	cmp	r0, #0
 802ad72:	f2c0 8145 	blt.w	802b000 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802ad76:	f10e 3bff 	add.w	fp, lr, #4294967295
 802ad7a:	4558      	cmp	r0, fp
 802ad7c:	f280 8140 	bge.w	802b000 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802ad80:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802ad82:	fb00 3305 	mla	r3, r0, r5, r3
 802ad86:	0858      	lsrs	r0, r3, #1
 802ad88:	f817 c000 	ldrb.w	ip, [r7, r0]
 802ad8c:	07dd      	lsls	r5, r3, #31
 802ad8e:	bf54      	ite	pl
 802ad90:	f00c 0c0f 	andpl.w	ip, ip, #15
 802ad94:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802ad98:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802ad9c:	fa5f fc8c 	uxtb.w	ip, ip
 802ada0:	2a00      	cmp	r2, #0
 802ada2:	f000 80db 	beq.w	802af5c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802ada6:	1c58      	adds	r0, r3, #1
 802ada8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802adac:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802adb0:	07c0      	lsls	r0, r0, #31
 802adb2:	bf54      	ite	pl
 802adb4:	f00e 0e0f 	andpl.w	lr, lr, #15
 802adb8:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802adbc:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802adc0:	fa5f f08e 	uxtb.w	r0, lr
 802adc4:	9010      	str	r0, [sp, #64]	@ 0x40
 802adc6:	b1c9      	cbz	r1, 802adfc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 802adc8:	4453      	add	r3, sl
 802adca:	0858      	lsrs	r0, r3, #1
 802adcc:	5c38      	ldrb	r0, [r7, r0]
 802adce:	07dd      	lsls	r5, r3, #31
 802add0:	bf54      	ite	pl
 802add2:	f000 000f 	andpl.w	r0, r0, #15
 802add6:	1100      	asrmi	r0, r0, #4
 802add8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802addc:	3301      	adds	r3, #1
 802adde:	b2c0      	uxtb	r0, r0
 802ade0:	900b      	str	r0, [sp, #44]	@ 0x2c
 802ade2:	0858      	lsrs	r0, r3, #1
 802ade4:	f817 e000 	ldrb.w	lr, [r7, r0]
 802ade8:	07dd      	lsls	r5, r3, #31
 802adea:	bf54      	ite	pl
 802adec:	f00e 030f 	andpl.w	r3, lr, #15
 802adf0:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802adf4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802adf8:	b2db      	uxtb	r3, r3
 802adfa:	9311      	str	r3, [sp, #68]	@ 0x44
 802adfc:	b292      	uxth	r2, r2
 802adfe:	b289      	uxth	r1, r1
 802ae00:	fb02 f301 	mul.w	r3, r2, r1
 802ae04:	0112      	lsls	r2, r2, #4
 802ae06:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802ae0a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802ae0c:	1ad2      	subs	r2, r2, r3
 802ae0e:	b292      	uxth	r2, r2
 802ae10:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802ae14:	436a      	muls	r2, r5
 802ae16:	b289      	uxth	r1, r1
 802ae18:	1a40      	subs	r0, r0, r1
 802ae1a:	b280      	uxth	r0, r0
 802ae1c:	fb0c 2c00 	mla	ip, ip, r0, r2
 802ae20:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802ae22:	fb01 c102 	mla	r1, r1, r2, ip
 802ae26:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802ae28:	fb03 1302 	mla	r3, r3, r2, r1
 802ae2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802ae30:	b1db      	cbz	r3, 802ae6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802ae32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802ae34:	4353      	muls	r3, r2
 802ae36:	1c5a      	adds	r2, r3, #1
 802ae38:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802ae3c:	4ac6      	ldr	r2, [pc, #792]	@ (802b158 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802ae3e:	121b      	asrs	r3, r3, #8
 802ae40:	6812      	ldr	r2, [r2, #0]
 802ae42:	2bff      	cmp	r3, #255	@ 0xff
 802ae44:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802ae48:	f040 8099 	bne.w	802af7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 802ae4c:	0953      	lsrs	r3, r2, #5
 802ae4e:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 802ae52:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802ae56:	f02c 0c07 	bic.w	ip, ip, #7
 802ae5a:	ea43 0c0c 	orr.w	ip, r3, ip
 802ae5e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802ae62:	ea4c 0202 	orr.w	r2, ip, r2
 802ae66:	f8a8 2000 	strh.w	r2, [r8]
 802ae6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802ae6c:	f108 0802 	add.w	r8, r8, #2
 802ae70:	441c      	add	r4, r3
 802ae72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802ae74:	441e      	add	r6, r3
 802ae76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802ae78:	3b01      	subs	r3, #1
 802ae7a:	930e      	str	r3, [sp, #56]	@ 0x38
 802ae7c:	e764      	b.n	802ad48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802ae7e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802ae80:	f109 0902 	add.w	r9, r9, #2
 802ae84:	441c      	add	r4, r3
 802ae86:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802ae88:	441e      	add	r6, r3
 802ae8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ae8c:	3b01      	subs	r3, #1
 802ae8e:	9309      	str	r3, [sp, #36]	@ 0x24
 802ae90:	e738      	b.n	802ad04 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802ae92:	d024      	beq.n	802aede <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802ae94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ae96:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 802ae98:	3b01      	subs	r3, #1
 802ae9a:	fb00 4003 	mla	r0, r0, r3, r4
 802ae9e:	1400      	asrs	r0, r0, #16
 802aea0:	f53f af4d 	bmi.w	802ad3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802aea4:	3901      	subs	r1, #1
 802aea6:	4288      	cmp	r0, r1
 802aea8:	f6bf af49 	bge.w	802ad3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802aeac:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802aeae:	fb01 6303 	mla	r3, r1, r3, r6
 802aeb2:	141b      	asrs	r3, r3, #16
 802aeb4:	f53f af43 	bmi.w	802ad3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802aeb8:	3a01      	subs	r2, #1
 802aeba:	4293      	cmp	r3, r2
 802aebc:	f6bf af3f 	bge.w	802ad3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802aec0:	46c8      	mov	r8, r9
 802aec2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 802aec6:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 802aeca:	930e      	str	r3, [sp, #56]	@ 0x38
 802aecc:	f1bb 0f00 	cmp.w	fp, #0
 802aed0:	f300 80b7 	bgt.w	802b042 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 802aed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802aed6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802aeda:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802aede:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802aee0:	2b00      	cmp	r3, #0
 802aee2:	f340 818e 	ble.w	802b202 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 802aee6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802aeea:	ee30 0a04 	vadd.f32	s0, s0, s8
 802aeee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802aef2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802aef6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802aefa:	eef0 6a62 	vmov.f32	s13, s5
 802aefe:	ee31 1a05 	vadd.f32	s2, s2, s10
 802af02:	ee77 2a62 	vsub.f32	s5, s14, s5
 802af06:	ee61 7a27 	vmul.f32	s15, s2, s15
 802af0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802af0e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802af12:	ee16 4a90 	vmov	r4, s13
 802af16:	eef0 6a43 	vmov.f32	s13, s6
 802af1a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802af1e:	ee12 2a90 	vmov	r2, s5
 802af22:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802af26:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802af28:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802af2c:	fb92 f3f3 	sdiv	r3, r2, r3
 802af30:	ee13 2a10 	vmov	r2, s6
 802af34:	9323      	str	r3, [sp, #140]	@ 0x8c
 802af36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802af38:	ee16 6a90 	vmov	r6, s13
 802af3c:	fb92 f3f3 	sdiv	r3, r2, r3
 802af40:	9324      	str	r3, [sp, #144]	@ 0x90
 802af42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802af44:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802af46:	3b01      	subs	r3, #1
 802af48:	930d      	str	r3, [sp, #52]	@ 0x34
 802af4a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802af4c:	bf08      	it	eq
 802af4e:	4613      	moveq	r3, r2
 802af50:	eeb0 3a67 	vmov.f32	s6, s15
 802af54:	9309      	str	r3, [sp, #36]	@ 0x24
 802af56:	eef0 2a47 	vmov.f32	s5, s14
 802af5a:	e6c4      	b.n	802ace6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802af5c:	2900      	cmp	r1, #0
 802af5e:	f43f af4d 	beq.w	802adfc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 802af62:	eb0a 0003 	add.w	r0, sl, r3
 802af66:	0843      	lsrs	r3, r0, #1
 802af68:	5cfb      	ldrb	r3, [r7, r3]
 802af6a:	07c0      	lsls	r0, r0, #31
 802af6c:	bf54      	ite	pl
 802af6e:	f003 030f 	andpl.w	r3, r3, #15
 802af72:	111b      	asrmi	r3, r3, #4
 802af74:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802af78:	b2db      	uxtb	r3, r3
 802af7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802af7c:	e73e      	b.n	802adfc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 802af7e:	fa1f fb83 	uxth.w	fp, r3
 802af82:	43db      	mvns	r3, r3
 802af84:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802af88:	f8b8 e000 	ldrh.w	lr, [r8]
 802af8c:	fb11 f10b 	smulbb	r1, r1, fp
 802af90:	fa5f fc8c 	uxtb.w	ip, ip
 802af94:	b2d2      	uxtb	r2, r2
 802af96:	ea4f 202e 	mov.w	r0, lr, asr #8
 802af9a:	fb1c fc0b 	smulbb	ip, ip, fp
 802af9e:	fb12 fb0b 	smulbb	fp, r2, fp
 802afa2:	b2db      	uxtb	r3, r3
 802afa4:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802afa8:	fb00 1003 	mla	r0, r0, r3, r1
 802afac:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802afb0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802afb4:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802afb8:	fa5f fe8e 	uxtb.w	lr, lr
 802afbc:	fb01 cc03 	mla	ip, r1, r3, ip
 802afc0:	fb0e bb03 	mla	fp, lr, r3, fp
 802afc4:	b280      	uxth	r0, r0
 802afc6:	1c43      	adds	r3, r0, #1
 802afc8:	fa1f fc8c 	uxth.w	ip, ip
 802afcc:	fa1f fb8b 	uxth.w	fp, fp
 802afd0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802afd4:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 802afd8:	f10c 0101 	add.w	r1, ip, #1
 802afdc:	f10b 0001 	add.w	r0, fp, #1
 802afe0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802afe4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802afe8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802afec:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802aff0:	4318      	orrs	r0, r3
 802aff2:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802aff6:	ea40 000c 	orr.w	r0, r0, ip
 802affa:	f8a8 0000 	strh.w	r0, [r8]
 802affe:	e734      	b.n	802ae6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802b000:	f113 0b01 	adds.w	fp, r3, #1
 802b004:	f53f af31 	bmi.w	802ae6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802b008:	45dc      	cmp	ip, fp
 802b00a:	f6ff af2e 	blt.w	802ae6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802b00e:	f110 0b01 	adds.w	fp, r0, #1
 802b012:	f53f af2a 	bmi.w	802ae6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802b016:	45de      	cmp	lr, fp
 802b018:	f6ff af27 	blt.w	802ae6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802b01c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802b01e:	9302      	str	r3, [sp, #8]
 802b020:	fa0f f38e 	sxth.w	r3, lr
 802b024:	9301      	str	r3, [sp, #4]
 802b026:	fa0f f38c 	sxth.w	r3, ip
 802b02a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802b02e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802b032:	9300      	str	r3, [sp, #0]
 802b034:	463a      	mov	r2, r7
 802b036:	4653      	mov	r3, sl
 802b038:	4641      	mov	r1, r8
 802b03a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802b03c:	f7ff fd4e 	bl	802aadc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802b040:	e713      	b.n	802ae6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802b042:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802b044:	1422      	asrs	r2, r4, #16
 802b046:	1433      	asrs	r3, r6, #16
 802b048:	fb05 2303 	mla	r3, r5, r3, r2
 802b04c:	085a      	lsrs	r2, r3, #1
 802b04e:	5cba      	ldrb	r2, [r7, r2]
 802b050:	07dd      	lsls	r5, r3, #31
 802b052:	bf54      	ite	pl
 802b054:	f002 020f 	andpl.w	r2, r2, #15
 802b058:	1112      	asrmi	r2, r2, #4
 802b05a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802b05e:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802b062:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802b066:	b2d2      	uxtb	r2, r2
 802b068:	2900      	cmp	r1, #0
 802b06a:	d077      	beq.n	802b15c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802b06c:	f103 0e01 	add.w	lr, r3, #1
 802b070:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802b074:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802b078:	f01e 0f01 	tst.w	lr, #1
 802b07c:	bf0c      	ite	eq
 802b07e:	f00c 0c0f 	andeq.w	ip, ip, #15
 802b082:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802b086:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b08a:	fa5f f58c 	uxtb.w	r5, ip
 802b08e:	9512      	str	r5, [sp, #72]	@ 0x48
 802b090:	b300      	cbz	r0, 802b0d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802b092:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802b094:	442b      	add	r3, r5
 802b096:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802b09a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802b09e:	07dd      	lsls	r5, r3, #31
 802b0a0:	bf54      	ite	pl
 802b0a2:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b0a6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b0aa:	3301      	adds	r3, #1
 802b0ac:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b0b0:	fa5f f58c 	uxtb.w	r5, ip
 802b0b4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802b0b8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802b0bc:	950c      	str	r5, [sp, #48]	@ 0x30
 802b0be:	07dd      	lsls	r5, r3, #31
 802b0c0:	bf54      	ite	pl
 802b0c2:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b0c6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b0ca:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b0ce:	fa5f f38c 	uxtb.w	r3, ip
 802b0d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 802b0d4:	b289      	uxth	r1, r1
 802b0d6:	b280      	uxth	r0, r0
 802b0d8:	fb01 f300 	mul.w	r3, r1, r0
 802b0dc:	0109      	lsls	r1, r1, #4
 802b0de:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 802b0e2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802b0e4:	1ac9      	subs	r1, r1, r3
 802b0e6:	b289      	uxth	r1, r1
 802b0e8:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802b0ec:	4369      	muls	r1, r5
 802b0ee:	b280      	uxth	r0, r0
 802b0f0:	ebac 0c00 	sub.w	ip, ip, r0
 802b0f4:	fa1f fc8c 	uxth.w	ip, ip
 802b0f8:	fb02 120c 	mla	r2, r2, ip, r1
 802b0fc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802b0fe:	fb00 2001 	mla	r0, r0, r1, r2
 802b102:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802b104:	fb03 0302 	mla	r3, r3, r2, r0
 802b108:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b10c:	b1d3      	cbz	r3, 802b144 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 802b10e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802b110:	4353      	muls	r3, r2
 802b112:	1c5a      	adds	r2, r3, #1
 802b114:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802b118:	4a0f      	ldr	r2, [pc, #60]	@ (802b158 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802b11a:	121b      	asrs	r3, r3, #8
 802b11c:	6812      	ldr	r2, [r2, #0]
 802b11e:	2bff      	cmp	r3, #255	@ 0xff
 802b120:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802b124:	d12e      	bne.n	802b184 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802b126:	0953      	lsrs	r3, r2, #5
 802b128:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 802b12c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802b130:	f02c 0c07 	bic.w	ip, ip, #7
 802b134:	ea43 0c0c 	orr.w	ip, r3, ip
 802b138:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b13c:	ea4c 0202 	orr.w	r2, ip, r2
 802b140:	f8a8 2000 	strh.w	r2, [r8]
 802b144:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802b146:	f108 0802 	add.w	r8, r8, #2
 802b14a:	441c      	add	r4, r3
 802b14c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b14e:	f10b 3bff 	add.w	fp, fp, #4294967295
 802b152:	441e      	add	r6, r3
 802b154:	e6ba      	b.n	802aecc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802b156:	bf00      	nop
 802b158:	2005bd2c 	.word	0x2005bd2c
 802b15c:	2800      	cmp	r0, #0
 802b15e:	d0b9      	beq.n	802b0d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802b160:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802b162:	442b      	add	r3, r5
 802b164:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802b168:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802b16c:	07db      	lsls	r3, r3, #31
 802b16e:	bf54      	ite	pl
 802b170:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b174:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b178:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b17c:	fa5f f38c 	uxtb.w	r3, ip
 802b180:	930c      	str	r3, [sp, #48]	@ 0x30
 802b182:	e7a7      	b.n	802b0d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802b184:	fa1f fa83 	uxth.w	sl, r3
 802b188:	43db      	mvns	r3, r3
 802b18a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802b18e:	f8b8 e000 	ldrh.w	lr, [r8]
 802b192:	fb11 f10a 	smulbb	r1, r1, sl
 802b196:	b2d2      	uxtb	r2, r2
 802b198:	ea4f 202e 	mov.w	r0, lr, asr #8
 802b19c:	fb12 f20a 	smulbb	r2, r2, sl
 802b1a0:	b2db      	uxtb	r3, r3
 802b1a2:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802b1a6:	fb00 1003 	mla	r0, r0, r3, r1
 802b1aa:	fa5f fc8c 	uxtb.w	ip, ip
 802b1ae:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802b1b2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802b1b6:	fb1c fc0a 	smulbb	ip, ip, sl
 802b1ba:	fa5f fe8e 	uxtb.w	lr, lr
 802b1be:	fb0e 2203 	mla	r2, lr, r3, r2
 802b1c2:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802b1c6:	fb01 cc03 	mla	ip, r1, r3, ip
 802b1ca:	b280      	uxth	r0, r0
 802b1cc:	b292      	uxth	r2, r2
 802b1ce:	1c43      	adds	r3, r0, #1
 802b1d0:	1c51      	adds	r1, r2, #1
 802b1d2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802b1d6:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802b1da:	fa1f fc8c 	uxth.w	ip, ip
 802b1de:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802b1e2:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802b1e6:	4308      	orrs	r0, r1
 802b1e8:	f10c 0101 	add.w	r1, ip, #1
 802b1ec:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802b1f0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802b1f4:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802b1f8:	ea40 000c 	orr.w	r0, r0, ip
 802b1fc:	f8a8 0000 	strh.w	r0, [r8]
 802b200:	e7a0      	b.n	802b144 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 802b202:	b017      	add	sp, #92	@ 0x5c
 802b204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802b208 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802b208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b20c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 802b210:	2d00      	cmp	r5, #0
 802b212:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802b216:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802b21a:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 802b21e:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 802b222:	fb05 0e03 	mla	lr, r5, r3, r0
 802b226:	f2c0 80b0 	blt.w	802b38a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802b22a:	45a9      	cmp	r9, r5
 802b22c:	f340 80ad 	ble.w	802b38a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802b230:	2800      	cmp	r0, #0
 802b232:	f2c0 80a8 	blt.w	802b386 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802b236:	4580      	cmp	r8, r0
 802b238:	f340 80a5 	ble.w	802b386 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802b23c:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802b240:	5d16      	ldrb	r6, [r2, r4]
 802b242:	f01e 0f01 	tst.w	lr, #1
 802b246:	bf0c      	ite	eq
 802b248:	f006 060f 	andeq.w	r6, r6, #15
 802b24c:	1136      	asrne	r6, r6, #4
 802b24e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802b252:	b2f6      	uxtb	r6, r6
 802b254:	1c44      	adds	r4, r0, #1
 802b256:	f100 809b 	bmi.w	802b390 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802b25a:	45a0      	cmp	r8, r4
 802b25c:	f340 8098 	ble.w	802b390 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802b260:	2f00      	cmp	r7, #0
 802b262:	f000 8097 	beq.w	802b394 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802b266:	f10e 0a01 	add.w	sl, lr, #1
 802b26a:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802b26e:	5d14      	ldrb	r4, [r2, r4]
 802b270:	f01a 0f01 	tst.w	sl, #1
 802b274:	bf0c      	ite	eq
 802b276:	f004 040f 	andeq.w	r4, r4, #15
 802b27a:	1124      	asrne	r4, r4, #4
 802b27c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802b280:	b2e4      	uxtb	r4, r4
 802b282:	3501      	adds	r5, #1
 802b284:	f100 808a 	bmi.w	802b39c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802b288:	45a9      	cmp	r9, r5
 802b28a:	f340 8087 	ble.w	802b39c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802b28e:	f1bc 0f00 	cmp.w	ip, #0
 802b292:	f000 8086 	beq.w	802b3a2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802b296:	2800      	cmp	r0, #0
 802b298:	db7e      	blt.n	802b398 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802b29a:	4580      	cmp	r8, r0
 802b29c:	dd7c      	ble.n	802b398 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802b29e:	eb03 090e 	add.w	r9, r3, lr
 802b2a2:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802b2a6:	5d55      	ldrb	r5, [r2, r5]
 802b2a8:	f019 0f01 	tst.w	r9, #1
 802b2ac:	bf0c      	ite	eq
 802b2ae:	f005 050f 	andeq.w	r5, r5, #15
 802b2b2:	112d      	asrne	r5, r5, #4
 802b2b4:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802b2b8:	b2ed      	uxtb	r5, r5
 802b2ba:	3001      	adds	r0, #1
 802b2bc:	d474      	bmi.n	802b3a8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802b2be:	4580      	cmp	r8, r0
 802b2c0:	dd72      	ble.n	802b3a8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802b2c2:	2f00      	cmp	r7, #0
 802b2c4:	d072      	beq.n	802b3ac <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802b2c6:	3301      	adds	r3, #1
 802b2c8:	449e      	add	lr, r3
 802b2ca:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802b2ce:	5cd0      	ldrb	r0, [r2, r3]
 802b2d0:	f01e 0f01 	tst.w	lr, #1
 802b2d4:	bf0c      	ite	eq
 802b2d6:	f000 000f 	andeq.w	r0, r0, #15
 802b2da:	1100      	asrne	r0, r0, #4
 802b2dc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b2e0:	b2c3      	uxtb	r3, r0
 802b2e2:	b2ba      	uxth	r2, r7
 802b2e4:	fa1f fc8c 	uxth.w	ip, ip
 802b2e8:	fb02 f00c 	mul.w	r0, r2, ip
 802b2ec:	0112      	lsls	r2, r2, #4
 802b2ee:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802b2f2:	1a12      	subs	r2, r2, r0
 802b2f4:	b292      	uxth	r2, r2
 802b2f6:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802b2fa:	4362      	muls	r2, r4
 802b2fc:	fa1f fc8c 	uxth.w	ip, ip
 802b300:	eba7 070c 	sub.w	r7, r7, ip
 802b304:	b2bf      	uxth	r7, r7
 802b306:	fb06 2207 	mla	r2, r6, r7, r2
 802b30a:	fb0c 2505 	mla	r5, ip, r5, r2
 802b30e:	fb00 5303 	mla	r3, r0, r3, r5
 802b312:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b316:	b3a3      	cbz	r3, 802b382 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 802b318:	4a25      	ldr	r2, [pc, #148]	@ (802b3b0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 802b31a:	880e      	ldrh	r6, [r1, #0]
 802b31c:	6815      	ldr	r5, [r2, #0]
 802b31e:	b29a      	uxth	r2, r3
 802b320:	43db      	mvns	r3, r3
 802b322:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802b326:	fb10 f002 	smulbb	r0, r0, r2
 802b32a:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802b32e:	b2ed      	uxtb	r5, r5
 802b330:	1234      	asrs	r4, r6, #8
 802b332:	fb17 f702 	smulbb	r7, r7, r2
 802b336:	fb15 f202 	smulbb	r2, r5, r2
 802b33a:	b2db      	uxtb	r3, r3
 802b33c:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802b340:	fb04 0403 	mla	r4, r4, r3, r0
 802b344:	10f0      	asrs	r0, r6, #3
 802b346:	00f6      	lsls	r6, r6, #3
 802b348:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802b34c:	b2f6      	uxtb	r6, r6
 802b34e:	fb00 7003 	mla	r0, r0, r3, r7
 802b352:	fb06 2303 	mla	r3, r6, r3, r2
 802b356:	b2a4      	uxth	r4, r4
 802b358:	b29a      	uxth	r2, r3
 802b35a:	1c63      	adds	r3, r4, #1
 802b35c:	b280      	uxth	r0, r0
 802b35e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802b362:	1c53      	adds	r3, r2, #1
 802b364:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802b368:	1c42      	adds	r2, r0, #1
 802b36a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802b36e:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802b372:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802b376:	0940      	lsrs	r0, r0, #5
 802b378:	4323      	orrs	r3, r4
 802b37a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802b37e:	4303      	orrs	r3, r0
 802b380:	800b      	strh	r3, [r1, #0]
 802b382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b386:	2600      	movs	r6, #0
 802b388:	e764      	b.n	802b254 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802b38a:	2400      	movs	r4, #0
 802b38c:	4626      	mov	r6, r4
 802b38e:	e778      	b.n	802b282 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802b390:	2400      	movs	r4, #0
 802b392:	e776      	b.n	802b282 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802b394:	463c      	mov	r4, r7
 802b396:	e774      	b.n	802b282 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802b398:	2500      	movs	r5, #0
 802b39a:	e78e      	b.n	802b2ba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 802b39c:	2300      	movs	r3, #0
 802b39e:	461d      	mov	r5, r3
 802b3a0:	e79f      	b.n	802b2e2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802b3a2:	4663      	mov	r3, ip
 802b3a4:	4665      	mov	r5, ip
 802b3a6:	e79c      	b.n	802b2e2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802b3a8:	2300      	movs	r3, #0
 802b3aa:	e79a      	b.n	802b2e2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802b3ac:	463b      	mov	r3, r7
 802b3ae:	e798      	b.n	802b2e2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802b3b0:	2005bd2c 	.word	0x2005bd2c

0802b3b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802b3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b3b8:	b093      	sub	sp, #76	@ 0x4c
 802b3ba:	920c      	str	r2, [sp, #48]	@ 0x30
 802b3bc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802b3be:	9011      	str	r0, [sp, #68]	@ 0x44
 802b3c0:	6850      	ldr	r0, [r2, #4]
 802b3c2:	9107      	str	r1, [sp, #28]
 802b3c4:	461d      	mov	r5, r3
 802b3c6:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802b3ca:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 802b3ce:	fb00 1303 	mla	r3, r0, r3, r1
 802b3d2:	6812      	ldr	r2, [r2, #0]
 802b3d4:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802b3d8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b3da:	689b      	ldr	r3, [r3, #8]
 802b3dc:	3301      	adds	r3, #1
 802b3de:	f023 0301 	bic.w	r3, r3, #1
 802b3e2:	9306      	str	r3, [sp, #24]
 802b3e4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b3e6:	681f      	ldr	r7, [r3, #0]
 802b3e8:	9b07      	ldr	r3, [sp, #28]
 802b3ea:	2b00      	cmp	r3, #0
 802b3ec:	dc03      	bgt.n	802b3f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802b3ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802b3f0:	2b00      	cmp	r3, #0
 802b3f2:	f340 8265 	ble.w	802b8c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 802b3f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b3f8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802b3fc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802b400:	1e48      	subs	r0, r1, #1
 802b402:	f102 3cff 	add.w	ip, r2, #4294967295
 802b406:	2d00      	cmp	r5, #0
 802b408:	f340 80b7 	ble.w	802b57a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802b40c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802b410:	ea4f 4326 	mov.w	r3, r6, asr #16
 802b414:	d406      	bmi.n	802b424 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802b416:	4586      	cmp	lr, r0
 802b418:	da04      	bge.n	802b424 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802b41a:	2b00      	cmp	r3, #0
 802b41c:	db02      	blt.n	802b424 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802b41e:	4563      	cmp	r3, ip
 802b420:	f2c0 80ac 	blt.w	802b57c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b424:	f11e 0e01 	adds.w	lr, lr, #1
 802b428:	f100 809f 	bmi.w	802b56a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802b42c:	4571      	cmp	r1, lr
 802b42e:	f2c0 809c 	blt.w	802b56a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802b432:	3301      	adds	r3, #1
 802b434:	f100 8099 	bmi.w	802b56a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802b438:	429a      	cmp	r2, r3
 802b43a:	f2c0 8096 	blt.w	802b56a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802b43e:	46c8      	mov	r8, r9
 802b440:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802b444:	9509      	str	r5, [sp, #36]	@ 0x24
 802b446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b448:	2b00      	cmp	r3, #0
 802b44a:	f340 80b5 	ble.w	802b5b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802b44e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802b452:	9308      	str	r3, [sp, #32]
 802b454:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b456:	1430      	asrs	r0, r6, #16
 802b458:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802b45c:	1423      	asrs	r3, r4, #16
 802b45e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802b462:	f100 813e 	bmi.w	802b6e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802b466:	f10c 3bff 	add.w	fp, ip, #4294967295
 802b46a:	455b      	cmp	r3, fp
 802b46c:	f280 8139 	bge.w	802b6e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802b470:	2800      	cmp	r0, #0
 802b472:	f2c0 8136 	blt.w	802b6e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802b476:	f10e 3bff 	add.w	fp, lr, #4294967295
 802b47a:	4558      	cmp	r0, fp
 802b47c:	f280 8131 	bge.w	802b6e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802b480:	9a06      	ldr	r2, [sp, #24]
 802b482:	fb00 3302 	mla	r3, r0, r2, r3
 802b486:	0858      	lsrs	r0, r3, #1
 802b488:	f817 c000 	ldrb.w	ip, [r7, r0]
 802b48c:	07da      	lsls	r2, r3, #31
 802b48e:	bf54      	ite	pl
 802b490:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b494:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b498:	9a08      	ldr	r2, [sp, #32]
 802b49a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b49e:	fa5f fc8c 	uxtb.w	ip, ip
 802b4a2:	2a00      	cmp	r2, #0
 802b4a4:	f000 80cb 	beq.w	802b63e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802b4a8:	1c58      	adds	r0, r3, #1
 802b4aa:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802b4ae:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802b4b2:	07c0      	lsls	r0, r0, #31
 802b4b4:	bf54      	ite	pl
 802b4b6:	f00e 0e0f 	andpl.w	lr, lr, #15
 802b4ba:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802b4be:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802b4c2:	fa5f fe8e 	uxtb.w	lr, lr
 802b4c6:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 802b4ca:	b1b9      	cbz	r1, 802b4fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802b4cc:	4453      	add	r3, sl
 802b4ce:	0858      	lsrs	r0, r3, #1
 802b4d0:	5c38      	ldrb	r0, [r7, r0]
 802b4d2:	07da      	lsls	r2, r3, #31
 802b4d4:	bf54      	ite	pl
 802b4d6:	f000 000f 	andpl.w	r0, r0, #15
 802b4da:	1100      	asrmi	r0, r0, #4
 802b4dc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b4e0:	b2c0      	uxtb	r0, r0
 802b4e2:	900a      	str	r0, [sp, #40]	@ 0x28
 802b4e4:	1c58      	adds	r0, r3, #1
 802b4e6:	0843      	lsrs	r3, r0, #1
 802b4e8:	5cfb      	ldrb	r3, [r7, r3]
 802b4ea:	07c2      	lsls	r2, r0, #31
 802b4ec:	bf54      	ite	pl
 802b4ee:	f003 030f 	andpl.w	r3, r3, #15
 802b4f2:	111b      	asrmi	r3, r3, #4
 802b4f4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b4f8:	b2db      	uxtb	r3, r3
 802b4fa:	930e      	str	r3, [sp, #56]	@ 0x38
 802b4fc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802b500:	b289      	uxth	r1, r1
 802b502:	fb02 f301 	mul.w	r3, r2, r1
 802b506:	0112      	lsls	r2, r2, #4
 802b508:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802b50c:	b289      	uxth	r1, r1
 802b50e:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802b512:	1a40      	subs	r0, r0, r1
 802b514:	fa1f fe80 	uxth.w	lr, r0
 802b518:	1ad2      	subs	r2, r2, r3
 802b51a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802b51c:	b292      	uxth	r2, r2
 802b51e:	4342      	muls	r2, r0
 802b520:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802b524:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802b526:	fb01 c102 	mla	r1, r1, r2, ip
 802b52a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802b52c:	fb03 1302 	mla	r3, r3, r2, r1
 802b530:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b534:	2bff      	cmp	r3, #255	@ 0xff
 802b536:	f040 8093 	bne.w	802b660 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 802b53a:	4bbe      	ldr	r3, [pc, #760]	@ (802b834 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802b53c:	681a      	ldr	r2, [r3, #0]
 802b53e:	4bbe      	ldr	r3, [pc, #760]	@ (802b838 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802b540:	0951      	lsrs	r1, r2, #5
 802b542:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802b546:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802b54a:	430b      	orrs	r3, r1
 802b54c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b550:	4313      	orrs	r3, r2
 802b552:	f8a8 3000 	strh.w	r3, [r8]
 802b556:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802b558:	f108 0802 	add.w	r8, r8, #2
 802b55c:	441c      	add	r4, r3
 802b55e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b560:	441e      	add	r6, r3
 802b562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b564:	3b01      	subs	r3, #1
 802b566:	9309      	str	r3, [sp, #36]	@ 0x24
 802b568:	e76d      	b.n	802b446 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b56a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802b56c:	3d01      	subs	r5, #1
 802b56e:	441c      	add	r4, r3
 802b570:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b572:	f109 0902 	add.w	r9, r9, #2
 802b576:	441e      	add	r6, r3
 802b578:	e745      	b.n	802b406 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802b57a:	d021      	beq.n	802b5c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802b57c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802b57e:	1e6b      	subs	r3, r5, #1
 802b580:	fb00 4003 	mla	r0, r0, r3, r4
 802b584:	1400      	asrs	r0, r0, #16
 802b586:	f53f af5a 	bmi.w	802b43e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802b58a:	3901      	subs	r1, #1
 802b58c:	4288      	cmp	r0, r1
 802b58e:	f6bf af56 	bge.w	802b43e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802b592:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802b594:	fb01 6303 	mla	r3, r1, r3, r6
 802b598:	141b      	asrs	r3, r3, #16
 802b59a:	f53f af50 	bmi.w	802b43e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802b59e:	3a01      	subs	r2, #1
 802b5a0:	4293      	cmp	r3, r2
 802b5a2:	f6bf af4c 	bge.w	802b43e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802b5a6:	46a8      	mov	r8, r5
 802b5a8:	46ce      	mov	lr, r9
 802b5aa:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802b5ae:	9308      	str	r3, [sp, #32]
 802b5b0:	f1b8 0f00 	cmp.w	r8, #0
 802b5b4:	f300 80b5 	bgt.w	802b722 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802b5b8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802b5bc:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802b5c0:	9b07      	ldr	r3, [sp, #28]
 802b5c2:	2b00      	cmp	r3, #0
 802b5c4:	f340 817c 	ble.w	802b8c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 802b5c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802b5cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 802b5d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802b5d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802b5d8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802b5dc:	eef0 6a62 	vmov.f32	s13, s5
 802b5e0:	ee31 1a05 	vadd.f32	s2, s2, s10
 802b5e4:	ee77 2a62 	vsub.f32	s5, s14, s5
 802b5e8:	ee61 7a27 	vmul.f32	s15, s2, s15
 802b5ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b5f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802b5f4:	ee16 4a90 	vmov	r4, s13
 802b5f8:	eef0 6a43 	vmov.f32	s13, s6
 802b5fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802b600:	ee12 2a90 	vmov	r2, s5
 802b604:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802b608:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802b60a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b60e:	fb92 f3f3 	sdiv	r3, r2, r3
 802b612:	ee13 2a10 	vmov	r2, s6
 802b616:	931f      	str	r3, [sp, #124]	@ 0x7c
 802b618:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802b61a:	ee16 6a90 	vmov	r6, s13
 802b61e:	fb92 f3f3 	sdiv	r3, r2, r3
 802b622:	9320      	str	r3, [sp, #128]	@ 0x80
 802b624:	9b07      	ldr	r3, [sp, #28]
 802b626:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802b628:	3b01      	subs	r3, #1
 802b62a:	9307      	str	r3, [sp, #28]
 802b62c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802b62e:	bf0c      	ite	eq
 802b630:	4615      	moveq	r5, r2
 802b632:	461d      	movne	r5, r3
 802b634:	eeb0 3a67 	vmov.f32	s6, s15
 802b638:	eef0 2a47 	vmov.f32	s5, s14
 802b63c:	e6d4      	b.n	802b3e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802b63e:	2900      	cmp	r1, #0
 802b640:	f43f af5c 	beq.w	802b4fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802b644:	eb0a 0003 	add.w	r0, sl, r3
 802b648:	0843      	lsrs	r3, r0, #1
 802b64a:	5cfb      	ldrb	r3, [r7, r3]
 802b64c:	07c0      	lsls	r0, r0, #31
 802b64e:	bf54      	ite	pl
 802b650:	f003 030f 	andpl.w	r3, r3, #15
 802b654:	111b      	asrmi	r3, r3, #4
 802b656:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b65a:	b2db      	uxtb	r3, r3
 802b65c:	930a      	str	r3, [sp, #40]	@ 0x28
 802b65e:	e74d      	b.n	802b4fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802b660:	2b00      	cmp	r3, #0
 802b662:	f43f af78 	beq.w	802b556 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802b666:	fa1f fe83 	uxth.w	lr, r3
 802b66a:	43db      	mvns	r3, r3
 802b66c:	4a71      	ldr	r2, [pc, #452]	@ (802b834 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802b66e:	f8b8 c000 	ldrh.w	ip, [r8]
 802b672:	6810      	ldr	r0, [r2, #0]
 802b674:	ea4f 212c 	mov.w	r1, ip, asr #8
 802b678:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802b67c:	fb12 f20e 	smulbb	r2, r2, lr
 802b680:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802b684:	b2c0      	uxtb	r0, r0
 802b686:	fb1b fb0e 	smulbb	fp, fp, lr
 802b68a:	fb10 fe0e 	smulbb	lr, r0, lr
 802b68e:	b2db      	uxtb	r3, r3
 802b690:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802b694:	fb01 2103 	mla	r1, r1, r3, r2
 802b698:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802b69c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802b6a0:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802b6a4:	fa5f fc8c 	uxtb.w	ip, ip
 802b6a8:	fb02 b203 	mla	r2, r2, r3, fp
 802b6ac:	fb0c e303 	mla	r3, ip, r3, lr
 802b6b0:	b289      	uxth	r1, r1
 802b6b2:	1c48      	adds	r0, r1, #1
 802b6b4:	b292      	uxth	r2, r2
 802b6b6:	b29b      	uxth	r3, r3
 802b6b8:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802b6bc:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 802b6c0:	f102 0b01 	add.w	fp, r2, #1
 802b6c4:	1c59      	adds	r1, r3, #1
 802b6c6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802b6ca:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802b6ce:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802b6d2:	0952      	lsrs	r2, r2, #5
 802b6d4:	4301      	orrs	r1, r0
 802b6d6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802b6da:	4311      	orrs	r1, r2
 802b6dc:	f8a8 1000 	strh.w	r1, [r8]
 802b6e0:	e739      	b.n	802b556 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802b6e2:	f113 0b01 	adds.w	fp, r3, #1
 802b6e6:	f53f af36 	bmi.w	802b556 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802b6ea:	45dc      	cmp	ip, fp
 802b6ec:	f6ff af33 	blt.w	802b556 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802b6f0:	f110 0b01 	adds.w	fp, r0, #1
 802b6f4:	f53f af2f 	bmi.w	802b556 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802b6f8:	45de      	cmp	lr, fp
 802b6fa:	f6ff af2c 	blt.w	802b556 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802b6fe:	9a08      	ldr	r2, [sp, #32]
 802b700:	9302      	str	r3, [sp, #8]
 802b702:	fa0f f38e 	sxth.w	r3, lr
 802b706:	9301      	str	r3, [sp, #4]
 802b708:	fa0f f38c 	sxth.w	r3, ip
 802b70c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802b710:	9105      	str	r1, [sp, #20]
 802b712:	9300      	str	r3, [sp, #0]
 802b714:	463a      	mov	r2, r7
 802b716:	4653      	mov	r3, sl
 802b718:	4641      	mov	r1, r8
 802b71a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802b71c:	f7ff fd74 	bl	802b208 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802b720:	e719      	b.n	802b556 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802b722:	9906      	ldr	r1, [sp, #24]
 802b724:	1422      	asrs	r2, r4, #16
 802b726:	1433      	asrs	r3, r6, #16
 802b728:	fb01 2303 	mla	r3, r1, r3, r2
 802b72c:	085a      	lsrs	r2, r3, #1
 802b72e:	5cba      	ldrb	r2, [r7, r2]
 802b730:	07d9      	lsls	r1, r3, #31
 802b732:	bf54      	ite	pl
 802b734:	f002 020f 	andpl.w	r2, r2, #15
 802b738:	1112      	asrmi	r2, r2, #4
 802b73a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802b73e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802b742:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802b746:	b2d2      	uxtb	r2, r2
 802b748:	2800      	cmp	r0, #0
 802b74a:	d062      	beq.n	802b812 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802b74c:	f103 0a01 	add.w	sl, r3, #1
 802b750:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802b754:	5c79      	ldrb	r1, [r7, r1]
 802b756:	f01a 0f01 	tst.w	sl, #1
 802b75a:	bf0c      	ite	eq
 802b75c:	f001 010f 	andeq.w	r1, r1, #15
 802b760:	1109      	asrne	r1, r1, #4
 802b762:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b766:	b2c9      	uxtb	r1, r1
 802b768:	910f      	str	r1, [sp, #60]	@ 0x3c
 802b76a:	f1bc 0f00 	cmp.w	ip, #0
 802b76e:	d019      	beq.n	802b7a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802b770:	9908      	ldr	r1, [sp, #32]
 802b772:	440b      	add	r3, r1
 802b774:	0859      	lsrs	r1, r3, #1
 802b776:	5c79      	ldrb	r1, [r7, r1]
 802b778:	f013 0f01 	tst.w	r3, #1
 802b77c:	bf0c      	ite	eq
 802b77e:	f001 010f 	andeq.w	r1, r1, #15
 802b782:	1109      	asrne	r1, r1, #4
 802b784:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b788:	b2c9      	uxtb	r1, r1
 802b78a:	3301      	adds	r3, #1
 802b78c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802b78e:	0859      	lsrs	r1, r3, #1
 802b790:	5c79      	ldrb	r1, [r7, r1]
 802b792:	07db      	lsls	r3, r3, #31
 802b794:	bf54      	ite	pl
 802b796:	f001 010f 	andpl.w	r1, r1, #15
 802b79a:	1109      	asrmi	r1, r1, #4
 802b79c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b7a0:	b2c9      	uxtb	r1, r1
 802b7a2:	9110      	str	r1, [sp, #64]	@ 0x40
 802b7a4:	b280      	uxth	r0, r0
 802b7a6:	fa1f fc8c 	uxth.w	ip, ip
 802b7aa:	fb00 f30c 	mul.w	r3, r0, ip
 802b7ae:	0100      	lsls	r0, r0, #4
 802b7b0:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802b7b4:	fa1f fc8c 	uxth.w	ip, ip
 802b7b8:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 802b7bc:	eba1 010c 	sub.w	r1, r1, ip
 802b7c0:	fa1f fa81 	uxth.w	sl, r1
 802b7c4:	1ac0      	subs	r0, r0, r3
 802b7c6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802b7c8:	b280      	uxth	r0, r0
 802b7ca:	4348      	muls	r0, r1
 802b7cc:	fb02 020a 	mla	r2, r2, sl, r0
 802b7d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802b7d2:	fb0c 2c01 	mla	ip, ip, r1, r2
 802b7d6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802b7d8:	fb03 c302 	mla	r3, r3, r2, ip
 802b7dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b7e0:	2bff      	cmp	r3, #255	@ 0xff
 802b7e2:	d12b      	bne.n	802b83c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802b7e4:	4b13      	ldr	r3, [pc, #76]	@ (802b834 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802b7e6:	681a      	ldr	r2, [r3, #0]
 802b7e8:	4b13      	ldr	r3, [pc, #76]	@ (802b838 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802b7ea:	0951      	lsrs	r1, r2, #5
 802b7ec:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802b7f0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802b7f4:	430b      	orrs	r3, r1
 802b7f6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b7fa:	4313      	orrs	r3, r2
 802b7fc:	f8ae 3000 	strh.w	r3, [lr]
 802b800:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802b802:	f10e 0e02 	add.w	lr, lr, #2
 802b806:	441c      	add	r4, r3
 802b808:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b80a:	f108 38ff 	add.w	r8, r8, #4294967295
 802b80e:	441e      	add	r6, r3
 802b810:	e6ce      	b.n	802b5b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802b812:	f1bc 0f00 	cmp.w	ip, #0
 802b816:	d0c5      	beq.n	802b7a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802b818:	9908      	ldr	r1, [sp, #32]
 802b81a:	440b      	add	r3, r1
 802b81c:	0859      	lsrs	r1, r3, #1
 802b81e:	5c79      	ldrb	r1, [r7, r1]
 802b820:	07db      	lsls	r3, r3, #31
 802b822:	bf54      	ite	pl
 802b824:	f001 010f 	andpl.w	r1, r1, #15
 802b828:	1109      	asrmi	r1, r1, #4
 802b82a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b82e:	b2c9      	uxtb	r1, r1
 802b830:	910b      	str	r1, [sp, #44]	@ 0x2c
 802b832:	e7b7      	b.n	802b7a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802b834:	2005bd2c 	.word	0x2005bd2c
 802b838:	fffff800 	.word	0xfffff800
 802b83c:	2b00      	cmp	r3, #0
 802b83e:	d0df      	beq.n	802b800 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802b840:	fa1f fa83 	uxth.w	sl, r3
 802b844:	43db      	mvns	r3, r3
 802b846:	4a20      	ldr	r2, [pc, #128]	@ (802b8c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>)
 802b848:	f8be c000 	ldrh.w	ip, [lr]
 802b84c:	6810      	ldr	r0, [r2, #0]
 802b84e:	ea4f 212c 	mov.w	r1, ip, asr #8
 802b852:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802b856:	fb12 f20a 	smulbb	r2, r2, sl
 802b85a:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802b85e:	b2c0      	uxtb	r0, r0
 802b860:	fb10 f00a 	smulbb	r0, r0, sl
 802b864:	b2db      	uxtb	r3, r3
 802b866:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802b86a:	fb01 2103 	mla	r1, r1, r3, r2
 802b86e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802b872:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802b876:	fb1b fb0a 	smulbb	fp, fp, sl
 802b87a:	fa5f fc8c 	uxtb.w	ip, ip
 802b87e:	fb0c 0003 	mla	r0, ip, r3, r0
 802b882:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802b886:	fb02 b203 	mla	r2, r2, r3, fp
 802b88a:	b289      	uxth	r1, r1
 802b88c:	b280      	uxth	r0, r0
 802b88e:	1c4b      	adds	r3, r1, #1
 802b890:	f100 0b01 	add.w	fp, r0, #1
 802b894:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802b898:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802b89c:	b292      	uxth	r2, r2
 802b89e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802b8a2:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802b8a6:	ea4b 0101 	orr.w	r1, fp, r1
 802b8aa:	f102 0b01 	add.w	fp, r2, #1
 802b8ae:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802b8b2:	0952      	lsrs	r2, r2, #5
 802b8b4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802b8b8:	4311      	orrs	r1, r2
 802b8ba:	f8ae 1000 	strh.w	r1, [lr]
 802b8be:	e79f      	b.n	802b800 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802b8c0:	b013      	add	sp, #76	@ 0x4c
 802b8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b8c6:	bf00      	nop
 802b8c8:	2005bd2c 	.word	0x2005bd2c

0802b8cc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 802b8cc:	b570      	push	{r4, r5, r6, lr}
 802b8ce:	1208      	asrs	r0, r1, #8
 802b8d0:	b29e      	uxth	r6, r3
 802b8d2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 802b8d6:	1213      	asrs	r3, r2, #8
 802b8d8:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802b8dc:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802b8e0:	fb13 f305 	smulbb	r3, r3, r5
 802b8e4:	fb10 f006 	smulbb	r0, r0, r6
 802b8e8:	10cc      	asrs	r4, r1, #3
 802b8ea:	4418      	add	r0, r3
 802b8ec:	10d3      	asrs	r3, r2, #3
 802b8ee:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802b8f2:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802b8f6:	fb13 f305 	smulbb	r3, r3, r5
 802b8fa:	fb14 f406 	smulbb	r4, r4, r6
 802b8fe:	00c9      	lsls	r1, r1, #3
 802b900:	00d2      	lsls	r2, r2, #3
 802b902:	441c      	add	r4, r3
 802b904:	b2d2      	uxtb	r2, r2
 802b906:	b2cb      	uxtb	r3, r1
 802b908:	fb12 f205 	smulbb	r2, r2, r5
 802b90c:	fb13 f306 	smulbb	r3, r3, r6
 802b910:	b280      	uxth	r0, r0
 802b912:	4413      	add	r3, r2
 802b914:	1c42      	adds	r2, r0, #1
 802b916:	b29b      	uxth	r3, r3
 802b918:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802b91c:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 802b920:	1c58      	adds	r0, r3, #1
 802b922:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802b926:	b2a4      	uxth	r4, r4
 802b928:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802b92c:	4310      	orrs	r0, r2
 802b92e:	1c62      	adds	r2, r4, #1
 802b930:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802b934:	0964      	lsrs	r4, r4, #5
 802b936:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802b93a:	4320      	orrs	r0, r4
 802b93c:	bd70      	pop	{r4, r5, r6, pc}
	...

0802b940 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 802b940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b944:	b08f      	sub	sp, #60	@ 0x3c
 802b946:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 802b94a:	461c      	mov	r4, r3
 802b94c:	9004      	str	r0, [sp, #16]
 802b94e:	460d      	mov	r5, r1
 802b950:	4616      	mov	r6, r2
 802b952:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802b954:	2f00      	cmp	r7, #0
 802b956:	f000 80f5 	beq.w	802bb44 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x204>
 802b95a:	f04f 0802 	mov.w	r8, #2
 802b95e:	6820      	ldr	r0, [r4, #0]
 802b960:	6861      	ldr	r1, [r4, #4]
 802b962:	aa0a      	add	r2, sp, #40	@ 0x28
 802b964:	c203      	stmia	r2!, {r0, r1}
 802b966:	6818      	ldr	r0, [r3, #0]
 802b968:	6859      	ldr	r1, [r3, #4]
 802b96a:	aa0c      	add	r2, sp, #48	@ 0x30
 802b96c:	c203      	stmia	r2!, {r0, r1}
 802b96e:	a80a      	add	r0, sp, #40	@ 0x28
 802b970:	f7ee fda2 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802b974:	4621      	mov	r1, r4
 802b976:	a80c      	add	r0, sp, #48	@ 0x30
 802b978:	f7ee fdc6 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802b97c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802b980:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 802b984:	f002 0301 	and.w	r3, r2, #1
 802b988:	9306      	str	r3, [sp, #24]
 802b98a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802b98e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 802b992:	f003 0101 	and.w	r1, r3, #1
 802b996:	9105      	str	r1, [sp, #20]
 802b998:	9805      	ldr	r0, [sp, #20]
 802b99a:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802b99e:	4403      	add	r3, r0
 802b9a0:	fb01 2303 	mla	r3, r1, r3, r2
 802b9a4:	fb93 f3f8 	sdiv	r3, r3, r8
 802b9a8:	441d      	add	r5, r3
 802b9aa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802b9ae:	3604      	adds	r6, #4
 802b9b0:	441a      	add	r2, r3
 802b9b2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802b9b6:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802b9ba:	4419      	add	r1, r3
 802b9bc:	4b63      	ldr	r3, [pc, #396]	@ (802bb4c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802b9be:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802b9c2:	6818      	ldr	r0, [r3, #0]
 802b9c4:	6803      	ldr	r3, [r0, #0]
 802b9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802b9c8:	4798      	blx	r3
 802b9ca:	4a61      	ldr	r2, [pc, #388]	@ (802bb50 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 802b9cc:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802b9d0:	8813      	ldrh	r3, [r2, #0]
 802b9d2:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 802b9d6:	2fff      	cmp	r7, #255	@ 0xff
 802b9d8:	fb03 a404 	mla	r4, r3, r4, sl
 802b9dc:	4611      	mov	r1, r2
 802b9de:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802b9e2:	fb03 fb0b 	mul.w	fp, r3, fp
 802b9e6:	d06b      	beq.n	802bac0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 802b9e8:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 802b9ec:	9303      	str	r3, [sp, #12]
 802b9ee:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 802b9f2:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802b9f6:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802b9fa:	9b07      	ldr	r3, [sp, #28]
 802b9fc:	42a3      	cmp	r3, r4
 802b9fe:	f240 809c 	bls.w	802bb3a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fa>
 802ba02:	9b06      	ldr	r3, [sp, #24]
 802ba04:	2b00      	cmp	r3, #0
 802ba06:	d039      	beq.n	802ba7c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 802ba08:	782b      	ldrb	r3, [r5, #0]
 802ba0a:	8822      	ldrh	r2, [r4, #0]
 802ba0c:	f003 030f 	and.w	r3, r3, #15
 802ba10:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802ba14:	9b03      	ldr	r3, [sp, #12]
 802ba16:	9804      	ldr	r0, [sp, #16]
 802ba18:	9300      	str	r3, [sp, #0]
 802ba1a:	463b      	mov	r3, r7
 802ba1c:	f7ff ff56 	bl	802b8cc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802ba20:	f105 0801 	add.w	r8, r5, #1
 802ba24:	f824 0b02 	strh.w	r0, [r4], #2
 802ba28:	f109 3bff 	add.w	fp, r9, #4294967295
 802ba2c:	f1bb 0f01 	cmp.w	fp, #1
 802ba30:	46a2      	mov	sl, r4
 802ba32:	f104 0404 	add.w	r4, r4, #4
 802ba36:	dd24      	ble.n	802ba82 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 802ba38:	f898 3000 	ldrb.w	r3, [r8]
 802ba3c:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802ba40:	091b      	lsrs	r3, r3, #4
 802ba42:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802ba46:	9b03      	ldr	r3, [sp, #12]
 802ba48:	9804      	ldr	r0, [sp, #16]
 802ba4a:	9300      	str	r3, [sp, #0]
 802ba4c:	463b      	mov	r3, r7
 802ba4e:	f7ff ff3d 	bl	802b8cc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802ba52:	f824 0c04 	strh.w	r0, [r4, #-4]
 802ba56:	f818 3b01 	ldrb.w	r3, [r8], #1
 802ba5a:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802ba5e:	f003 030f 	and.w	r3, r3, #15
 802ba62:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802ba66:	9b03      	ldr	r3, [sp, #12]
 802ba68:	9804      	ldr	r0, [sp, #16]
 802ba6a:	9300      	str	r3, [sp, #0]
 802ba6c:	463b      	mov	r3, r7
 802ba6e:	f7ff ff2d 	bl	802b8cc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802ba72:	f1ab 0b02 	sub.w	fp, fp, #2
 802ba76:	f824 0c02 	strh.w	r0, [r4, #-2]
 802ba7a:	e7d7      	b.n	802ba2c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 802ba7c:	46a8      	mov	r8, r5
 802ba7e:	46cb      	mov	fp, r9
 802ba80:	e7d4      	b.n	802ba2c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 802ba82:	d10e      	bne.n	802baa2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 802ba84:	f898 3000 	ldrb.w	r3, [r8]
 802ba88:	f8ba 2000 	ldrh.w	r2, [sl]
 802ba8c:	091b      	lsrs	r3, r3, #4
 802ba8e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802ba92:	9b03      	ldr	r3, [sp, #12]
 802ba94:	9804      	ldr	r0, [sp, #16]
 802ba96:	9300      	str	r3, [sp, #0]
 802ba98:	463b      	mov	r3, r7
 802ba9a:	f7ff ff17 	bl	802b8cc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802ba9e:	f82a 0b02 	strh.w	r0, [sl], #2
 802baa2:	9b08      	ldr	r3, [sp, #32]
 802baa4:	9a05      	ldr	r2, [sp, #20]
 802baa6:	881c      	ldrh	r4, [r3, #0]
 802baa8:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802baac:	eba4 0409 	sub.w	r4, r4, r9
 802bab0:	4413      	add	r3, r2
 802bab2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802bab4:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 802bab8:	fb93 f3f2 	sdiv	r3, r3, r2
 802babc:	441d      	add	r5, r3
 802babe:	e79c      	b.n	802b9fa <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 802bac0:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 802bac4:	45a3      	cmp	fp, r4
 802bac6:	d938      	bls.n	802bb3a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fa>
 802bac8:	9b06      	ldr	r3, [sp, #24]
 802baca:	b1f3      	cbz	r3, 802bb0a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ca>
 802bacc:	782b      	ldrb	r3, [r5, #0]
 802bace:	1c6a      	adds	r2, r5, #1
 802bad0:	f003 030f 	and.w	r3, r3, #15
 802bad4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802bad8:	f109 30ff 	add.w	r0, r9, #4294967295
 802badc:	8023      	strh	r3, [r4, #0]
 802bade:	3402      	adds	r4, #2
 802bae0:	2801      	cmp	r0, #1
 802bae2:	4623      	mov	r3, r4
 802bae4:	f104 0404 	add.w	r4, r4, #4
 802bae8:	dd12      	ble.n	802bb10 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d0>
 802baea:	7813      	ldrb	r3, [r2, #0]
 802baec:	3802      	subs	r0, #2
 802baee:	091b      	lsrs	r3, r3, #4
 802baf0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802baf4:	f824 3c04 	strh.w	r3, [r4, #-4]
 802baf8:	f812 3b01 	ldrb.w	r3, [r2], #1
 802bafc:	f003 030f 	and.w	r3, r3, #15
 802bb00:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802bb04:	f824 3c02 	strh.w	r3, [r4, #-2]
 802bb08:	e7ea      	b.n	802bae0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a0>
 802bb0a:	462a      	mov	r2, r5
 802bb0c:	4648      	mov	r0, r9
 802bb0e:	e7e7      	b.n	802bae0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a0>
 802bb10:	d106      	bne.n	802bb20 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 802bb12:	7812      	ldrb	r2, [r2, #0]
 802bb14:	3302      	adds	r3, #2
 802bb16:	0912      	lsrs	r2, r2, #4
 802bb18:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 802bb1c:	f823 2c02 	strh.w	r2, [r3, #-2]
 802bb20:	880c      	ldrh	r4, [r1, #0]
 802bb22:	9a05      	ldr	r2, [sp, #20]
 802bb24:	eba4 0409 	sub.w	r4, r4, r9
 802bb28:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 802bb2c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802bb30:	4413      	add	r3, r2
 802bb32:	fb93 f3f8 	sdiv	r3, r3, r8
 802bb36:	441d      	add	r5, r3
 802bb38:	e7c4      	b.n	802bac4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 802bb3a:	4b04      	ldr	r3, [pc, #16]	@ (802bb4c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802bb3c:	6818      	ldr	r0, [r3, #0]
 802bb3e:	6803      	ldr	r3, [r0, #0]
 802bb40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802bb42:	4798      	blx	r3
 802bb44:	b00f      	add	sp, #60	@ 0x3c
 802bb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bb4a:	bf00      	nop
 802bb4c:	2005bd1c 	.word	0x2005bd1c
 802bb50:	2005bd16 	.word	0x2005bd16

0802bb54 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 802bb54:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bb56:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802bb5a:	0a0f      	lsrs	r7, r1, #8
 802bb5c:	2dff      	cmp	r5, #255	@ 0xff
 802bb5e:	d10c      	bne.n	802bb7a <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 802bb60:	2bff      	cmp	r3, #255	@ 0xff
 802bb62:	d10a      	bne.n	802bb7a <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 802bb64:	4b25      	ldr	r3, [pc, #148]	@ (802bbfc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 802bb66:	0948      	lsrs	r0, r1, #5
 802bb68:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802bb6c:	403b      	ands	r3, r7
 802bb6e:	4318      	orrs	r0, r3
 802bb70:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802bb74:	4308      	orrs	r0, r1
 802bb76:	b280      	uxth	r0, r0
 802bb78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bb7a:	fb15 f503 	smulbb	r5, r5, r3
 802bb7e:	b2ab      	uxth	r3, r5
 802bb80:	1c5d      	adds	r5, r3, #1
 802bb82:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 802bb86:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802bb8a:	fa1f fc85 	uxth.w	ip, r5
 802bb8e:	43ed      	mvns	r5, r5
 802bb90:	1214      	asrs	r4, r2, #8
 802bb92:	10d6      	asrs	r6, r2, #3
 802bb94:	00d0      	lsls	r0, r2, #3
 802bb96:	f3c1 4207 	ubfx	r2, r1, #16, #8
 802bb9a:	fb12 f20c 	smulbb	r2, r2, ip
 802bb9e:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802bba2:	b2eb      	uxtb	r3, r5
 802bba4:	b2c0      	uxtb	r0, r0
 802bba6:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802bbaa:	fb04 2403 	mla	r4, r4, r3, r2
 802bbae:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 802bbb2:	b2c8      	uxtb	r0, r1
 802bbb4:	b2fd      	uxtb	r5, r7
 802bbb6:	fb10 f00c 	smulbb	r0, r0, ip
 802bbba:	fb15 f50c 	smulbb	r5, r5, ip
 802bbbe:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 802bbc2:	fb02 0003 	mla	r0, r2, r3, r0
 802bbc6:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 802bbca:	fb06 5503 	mla	r5, r6, r3, r5
 802bbce:	b2a4      	uxth	r4, r4
 802bbd0:	b283      	uxth	r3, r0
 802bbd2:	1c60      	adds	r0, r4, #1
 802bbd4:	b2ad      	uxth	r5, r5
 802bbd6:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802bbda:	1c58      	adds	r0, r3, #1
 802bbdc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802bbe0:	1c6b      	adds	r3, r5, #1
 802bbe2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802bbe6:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802bbea:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802bbee:	096d      	lsrs	r5, r5, #5
 802bbf0:	4320      	orrs	r0, r4
 802bbf2:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802bbf6:	4328      	orrs	r0, r5
 802bbf8:	e7be      	b.n	802bb78 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 802bbfa:	bf00      	nop
 802bbfc:	00fff800 	.word	0x00fff800

0802bc00 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 802bc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bc04:	461c      	mov	r4, r3
 802bc06:	f04f 0a02 	mov.w	sl, #2
 802bc0a:	b08d      	sub	sp, #52	@ 0x34
 802bc0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802bc0e:	460d      	mov	r5, r1
 802bc10:	4680      	mov	r8, r0
 802bc12:	6861      	ldr	r1, [r4, #4]
 802bc14:	6820      	ldr	r0, [r4, #0]
 802bc16:	4616      	mov	r6, r2
 802bc18:	aa08      	add	r2, sp, #32
 802bc1a:	c203      	stmia	r2!, {r0, r1}
 802bc1c:	6818      	ldr	r0, [r3, #0]
 802bc1e:	6859      	ldr	r1, [r3, #4]
 802bc20:	aa0a      	add	r2, sp, #40	@ 0x28
 802bc22:	c203      	stmia	r2!, {r0, r1}
 802bc24:	a808      	add	r0, sp, #32
 802bc26:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 802bc2a:	f7ee fc45 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802bc2e:	4621      	mov	r1, r4
 802bc30:	a80a      	add	r0, sp, #40	@ 0x28
 802bc32:	f7ee fc69 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802bc36:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 802bc3a:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 802bc3e:	f002 0301 	and.w	r3, r2, #1
 802bc42:	9303      	str	r3, [sp, #12]
 802bc44:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802bc48:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 802bc4c:	f003 0101 	and.w	r1, r3, #1
 802bc50:	9102      	str	r1, [sp, #8]
 802bc52:	9802      	ldr	r0, [sp, #8]
 802bc54:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 802bc58:	4403      	add	r3, r0
 802bc5a:	fb01 2303 	mla	r3, r1, r3, r2
 802bc5e:	fb93 f3fa 	sdiv	r3, r3, sl
 802bc62:	441d      	add	r5, r3
 802bc64:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802bc68:	3604      	adds	r6, #4
 802bc6a:	441a      	add	r2, r3
 802bc6c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 802bc70:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 802bc74:	4a3e      	ldr	r2, [pc, #248]	@ (802bd70 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 802bc76:	4419      	add	r1, r3
 802bc78:	6810      	ldr	r0, [r2, #0]
 802bc7a:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 802bc7e:	6803      	ldr	r3, [r0, #0]
 802bc80:	9205      	str	r2, [sp, #20]
 802bc82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802bc84:	4798      	blx	r3
 802bc86:	4b3b      	ldr	r3, [pc, #236]	@ (802bd74 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 802bc88:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 802bc8c:	8819      	ldrh	r1, [r3, #0]
 802bc8e:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 802bc92:	434f      	muls	r7, r1
 802bc94:	fb01 c404 	mla	r4, r1, r4, ip
 802bc98:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 802bc9c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802bca0:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 802bca4:	9204      	str	r2, [sp, #16]
 802bca6:	9b04      	ldr	r3, [sp, #16]
 802bca8:	429c      	cmp	r4, r3
 802bcaa:	d258      	bcs.n	802bd5e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 802bcac:	9b03      	ldr	r3, [sp, #12]
 802bcae:	2b00      	cmp	r3, #0
 802bcb0:	d034      	beq.n	802bd1c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 802bcb2:	782b      	ldrb	r3, [r5, #0]
 802bcb4:	1c6f      	adds	r7, r5, #1
 802bcb6:	f003 030f 	and.w	r3, r3, #15
 802bcba:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802bcbe:	0e0b      	lsrs	r3, r1, #24
 802bcc0:	d006      	beq.n	802bcd0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 802bcc2:	8822      	ldrh	r2, [r4, #0]
 802bcc4:	4640      	mov	r0, r8
 802bcc6:	9300      	str	r3, [sp, #0]
 802bcc8:	464b      	mov	r3, r9
 802bcca:	f7ff ff43 	bl	802bb54 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802bcce:	8020      	strh	r0, [r4, #0]
 802bcd0:	3402      	adds	r4, #2
 802bcd2:	f10b 3aff 	add.w	sl, fp, #4294967295
 802bcd6:	f1ba 0f01 	cmp.w	sl, #1
 802bcda:	dd22      	ble.n	802bd22 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 802bcdc:	783b      	ldrb	r3, [r7, #0]
 802bcde:	091b      	lsrs	r3, r3, #4
 802bce0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802bce4:	0e0b      	lsrs	r3, r1, #24
 802bce6:	d006      	beq.n	802bcf6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 802bce8:	8822      	ldrh	r2, [r4, #0]
 802bcea:	4640      	mov	r0, r8
 802bcec:	9300      	str	r3, [sp, #0]
 802bcee:	464b      	mov	r3, r9
 802bcf0:	f7ff ff30 	bl	802bb54 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802bcf4:	8020      	strh	r0, [r4, #0]
 802bcf6:	f817 3b01 	ldrb.w	r3, [r7], #1
 802bcfa:	f003 030f 	and.w	r3, r3, #15
 802bcfe:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802bd02:	0e0b      	lsrs	r3, r1, #24
 802bd04:	d006      	beq.n	802bd14 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 802bd06:	8862      	ldrh	r2, [r4, #2]
 802bd08:	4640      	mov	r0, r8
 802bd0a:	9300      	str	r3, [sp, #0]
 802bd0c:	464b      	mov	r3, r9
 802bd0e:	f7ff ff21 	bl	802bb54 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802bd12:	8060      	strh	r0, [r4, #2]
 802bd14:	3404      	adds	r4, #4
 802bd16:	f1aa 0a02 	sub.w	sl, sl, #2
 802bd1a:	e7dc      	b.n	802bcd6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802bd1c:	462f      	mov	r7, r5
 802bd1e:	46da      	mov	sl, fp
 802bd20:	e7d9      	b.n	802bcd6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802bd22:	d10d      	bne.n	802bd40 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 802bd24:	783b      	ldrb	r3, [r7, #0]
 802bd26:	091b      	lsrs	r3, r3, #4
 802bd28:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802bd2c:	0e0b      	lsrs	r3, r1, #24
 802bd2e:	d006      	beq.n	802bd3e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 802bd30:	8822      	ldrh	r2, [r4, #0]
 802bd32:	4640      	mov	r0, r8
 802bd34:	9300      	str	r3, [sp, #0]
 802bd36:	464b      	mov	r3, r9
 802bd38:	f7ff ff0c 	bl	802bb54 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802bd3c:	8020      	strh	r0, [r4, #0]
 802bd3e:	3402      	adds	r4, #2
 802bd40:	9b06      	ldr	r3, [sp, #24]
 802bd42:	9a02      	ldr	r2, [sp, #8]
 802bd44:	881b      	ldrh	r3, [r3, #0]
 802bd46:	eba3 030b 	sub.w	r3, r3, fp
 802bd4a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802bd4e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802bd52:	4413      	add	r3, r2
 802bd54:	9a07      	ldr	r2, [sp, #28]
 802bd56:	fb93 f3f2 	sdiv	r3, r3, r2
 802bd5a:	441d      	add	r5, r3
 802bd5c:	e7a3      	b.n	802bca6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 802bd5e:	9b05      	ldr	r3, [sp, #20]
 802bd60:	6818      	ldr	r0, [r3, #0]
 802bd62:	6803      	ldr	r3, [r0, #0]
 802bd64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802bd66:	4798      	blx	r3
 802bd68:	b00d      	add	sp, #52	@ 0x34
 802bd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bd6e:	bf00      	nop
 802bd70:	2005bd1c 	.word	0x2005bd1c
 802bd74:	2005bd16 	.word	0x2005bd16

0802bd78 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 802bd78:	b570      	push	{r4, r5, r6, lr}
 802bd7a:	788d      	ldrb	r5, [r1, #2]
 802bd7c:	1214      	asrs	r4, r2, #8
 802bd7e:	fb15 f503 	smulbb	r5, r5, r3
 802bd82:	f89d 6010 	ldrb.w	r6, [sp, #16]
 802bd86:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802bd8a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802bd8e:	fb04 5506 	mla	r5, r4, r6, r5
 802bd92:	784c      	ldrb	r4, [r1, #1]
 802bd94:	7809      	ldrb	r1, [r1, #0]
 802bd96:	fb14 f403 	smulbb	r4, r4, r3
 802bd9a:	fb11 f303 	smulbb	r3, r1, r3
 802bd9e:	10d0      	asrs	r0, r2, #3
 802bda0:	00d2      	lsls	r2, r2, #3
 802bda2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802bda6:	b2d2      	uxtb	r2, r2
 802bda8:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 802bdac:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802bdb0:	fb00 4406 	mla	r4, r0, r6, r4
 802bdb4:	fb02 3306 	mla	r3, r2, r6, r3
 802bdb8:	b2ad      	uxth	r5, r5
 802bdba:	b29b      	uxth	r3, r3
 802bdbc:	b2a4      	uxth	r4, r4
 802bdbe:	1c68      	adds	r0, r5, #1
 802bdc0:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 802bdc4:	1c62      	adds	r2, r4, #1
 802bdc6:	1c58      	adds	r0, r3, #1
 802bdc8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802bdcc:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802bdd0:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802bdd4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802bdd8:	0964      	lsrs	r4, r4, #5
 802bdda:	4328      	orrs	r0, r5
 802bddc:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802bde0:	4320      	orrs	r0, r4
 802bde2:	bd70      	pop	{r4, r5, r6, pc}

0802bde4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802bde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bde8:	b08f      	sub	sp, #60	@ 0x3c
 802bdea:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 802bdee:	461c      	mov	r4, r3
 802bdf0:	4682      	mov	sl, r0
 802bdf2:	460e      	mov	r6, r1
 802bdf4:	4615      	mov	r5, r2
 802bdf6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802bdf8:	2f00      	cmp	r7, #0
 802bdfa:	f000 8141 	beq.w	802c080 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 802bdfe:	f04f 0802 	mov.w	r8, #2
 802be02:	6820      	ldr	r0, [r4, #0]
 802be04:	6861      	ldr	r1, [r4, #4]
 802be06:	aa0a      	add	r2, sp, #40	@ 0x28
 802be08:	c203      	stmia	r2!, {r0, r1}
 802be0a:	6818      	ldr	r0, [r3, #0]
 802be0c:	6859      	ldr	r1, [r3, #4]
 802be0e:	aa0c      	add	r2, sp, #48	@ 0x30
 802be10:	c203      	stmia	r2!, {r0, r1}
 802be12:	a80a      	add	r0, sp, #40	@ 0x28
 802be14:	f7ee fb50 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802be18:	4621      	mov	r1, r4
 802be1a:	a80c      	add	r0, sp, #48	@ 0x30
 802be1c:	f7ee fb74 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802be20:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802be24:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 802be28:	f002 0301 	and.w	r3, r2, #1
 802be2c:	9306      	str	r3, [sp, #24]
 802be2e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802be32:	3504      	adds	r5, #4
 802be34:	f003 0101 	and.w	r1, r3, #1
 802be38:	9105      	str	r1, [sp, #20]
 802be3a:	9805      	ldr	r0, [sp, #20]
 802be3c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802be40:	4403      	add	r3, r0
 802be42:	fb01 2303 	mla	r3, r1, r3, r2
 802be46:	fb93 f3f8 	sdiv	r3, r3, r8
 802be4a:	441e      	add	r6, r3
 802be4c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802be50:	441a      	add	r2, r3
 802be52:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802be56:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802be5a:	4419      	add	r1, r3
 802be5c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 802be60:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802be64:	9303      	str	r3, [sp, #12]
 802be66:	4b88      	ldr	r3, [pc, #544]	@ (802c088 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802be68:	6818      	ldr	r0, [r3, #0]
 802be6a:	6803      	ldr	r3, [r0, #0]
 802be6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802be6e:	4798      	blx	r3
 802be70:	4a86      	ldr	r2, [pc, #536]	@ (802c08c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 802be72:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802be76:	8813      	ldrh	r3, [r2, #0]
 802be78:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 802be7c:	2fff      	cmp	r7, #255	@ 0xff
 802be7e:	fb03 9404 	mla	r4, r3, r4, r9
 802be82:	4694      	mov	ip, r2
 802be84:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802be88:	fb03 f30b 	mul.w	r3, r3, fp
 802be8c:	d071      	beq.n	802bf72 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 802be8e:	43f9      	mvns	r1, r7
 802be90:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802be94:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802be98:	b2c9      	uxtb	r1, r1
 802be9a:	9104      	str	r1, [sp, #16]
 802be9c:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802bea0:	9b07      	ldr	r3, [sp, #28]
 802bea2:	42a3      	cmp	r3, r4
 802bea4:	f240 80e7 	bls.w	802c076 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802bea8:	9b06      	ldr	r3, [sp, #24]
 802beaa:	2b00      	cmp	r3, #0
 802beac:	d03d      	beq.n	802bf2a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 802beae:	7831      	ldrb	r1, [r6, #0]
 802beb0:	9b04      	ldr	r3, [sp, #16]
 802beb2:	f001 010f 	and.w	r1, r1, #15
 802beb6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802beba:	8822      	ldrh	r2, [r4, #0]
 802bebc:	4429      	add	r1, r5
 802bebe:	9300      	str	r3, [sp, #0]
 802bec0:	4650      	mov	r0, sl
 802bec2:	463b      	mov	r3, r7
 802bec4:	f7ff ff58 	bl	802bd78 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802bec8:	9b03      	ldr	r3, [sp, #12]
 802beca:	f106 0801 	add.w	r8, r6, #1
 802bece:	f824 0b02 	strh.w	r0, [r4], #2
 802bed2:	f103 3bff 	add.w	fp, r3, #4294967295
 802bed6:	f1bb 0f01 	cmp.w	fp, #1
 802beda:	46a1      	mov	r9, r4
 802bedc:	f104 0404 	add.w	r4, r4, #4
 802bee0:	dd27      	ble.n	802bf32 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 802bee2:	f898 1000 	ldrb.w	r1, [r8]
 802bee6:	9b04      	ldr	r3, [sp, #16]
 802bee8:	0909      	lsrs	r1, r1, #4
 802beea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802beee:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802bef2:	4429      	add	r1, r5
 802bef4:	9300      	str	r3, [sp, #0]
 802bef6:	4650      	mov	r0, sl
 802bef8:	463b      	mov	r3, r7
 802befa:	f7ff ff3d 	bl	802bd78 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802befe:	f824 0c04 	strh.w	r0, [r4, #-4]
 802bf02:	f818 1b01 	ldrb.w	r1, [r8], #1
 802bf06:	9b04      	ldr	r3, [sp, #16]
 802bf08:	f001 010f 	and.w	r1, r1, #15
 802bf0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802bf10:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802bf14:	4429      	add	r1, r5
 802bf16:	9300      	str	r3, [sp, #0]
 802bf18:	4650      	mov	r0, sl
 802bf1a:	463b      	mov	r3, r7
 802bf1c:	f7ff ff2c 	bl	802bd78 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802bf20:	f1ab 0b02 	sub.w	fp, fp, #2
 802bf24:	f824 0c02 	strh.w	r0, [r4, #-2]
 802bf28:	e7d5      	b.n	802bed6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802bf2a:	46b0      	mov	r8, r6
 802bf2c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802bf30:	e7d1      	b.n	802bed6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802bf32:	d10f      	bne.n	802bf54 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 802bf34:	f898 1000 	ldrb.w	r1, [r8]
 802bf38:	9b04      	ldr	r3, [sp, #16]
 802bf3a:	0909      	lsrs	r1, r1, #4
 802bf3c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802bf40:	f8b9 2000 	ldrh.w	r2, [r9]
 802bf44:	4429      	add	r1, r5
 802bf46:	9300      	str	r3, [sp, #0]
 802bf48:	4650      	mov	r0, sl
 802bf4a:	463b      	mov	r3, r7
 802bf4c:	f7ff ff14 	bl	802bd78 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802bf50:	f829 0b02 	strh.w	r0, [r9], #2
 802bf54:	9b08      	ldr	r3, [sp, #32]
 802bf56:	9a05      	ldr	r2, [sp, #20]
 802bf58:	881c      	ldrh	r4, [r3, #0]
 802bf5a:	9b03      	ldr	r3, [sp, #12]
 802bf5c:	1ae4      	subs	r4, r4, r3
 802bf5e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802bf62:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802bf66:	4413      	add	r3, r2
 802bf68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802bf6a:	fb93 f3f2 	sdiv	r3, r3, r2
 802bf6e:	441e      	add	r6, r3
 802bf70:	e796      	b.n	802bea0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 802bf72:	4f47      	ldr	r7, [pc, #284]	@ (802c090 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 802bf74:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802bf78:	42a3      	cmp	r3, r4
 802bf7a:	d97c      	bls.n	802c076 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802bf7c:	9a06      	ldr	r2, [sp, #24]
 802bf7e:	2a00      	cmp	r2, #0
 802bf80:	d054      	beq.n	802c02c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 802bf82:	7830      	ldrb	r0, [r6, #0]
 802bf84:	1c71      	adds	r1, r6, #1
 802bf86:	f000 000f 	and.w	r0, r0, #15
 802bf8a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802bf8e:	eb05 0e00 	add.w	lr, r5, r0
 802bf92:	f89e 2002 	ldrb.w	r2, [lr, #2]
 802bf96:	f89e e001 	ldrb.w	lr, [lr, #1]
 802bf9a:	5c28      	ldrb	r0, [r5, r0]
 802bf9c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802bfa0:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 802bfa4:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802bfa8:	ea42 020e 	orr.w	r2, r2, lr
 802bfac:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 802bfb0:	f824 2b02 	strh.w	r2, [r4], #2
 802bfb4:	9a03      	ldr	r2, [sp, #12]
 802bfb6:	f102 3eff 	add.w	lr, r2, #4294967295
 802bfba:	f1be 0f01 	cmp.w	lr, #1
 802bfbe:	4620      	mov	r0, r4
 802bfc0:	f104 0404 	add.w	r4, r4, #4
 802bfc4:	dd36      	ble.n	802c034 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 802bfc6:	7808      	ldrb	r0, [r1, #0]
 802bfc8:	f1ae 0e02 	sub.w	lr, lr, #2
 802bfcc:	0900      	lsrs	r0, r0, #4
 802bfce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802bfd2:	eb05 0a00 	add.w	sl, r5, r0
 802bfd6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802bfda:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802bfde:	00d2      	lsls	r2, r2, #3
 802bfe0:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802bfe4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802bfe8:	ea49 0202 	orr.w	r2, r9, r2
 802bfec:	f815 9000 	ldrb.w	r9, [r5, r0]
 802bff0:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802bff4:	f824 2c04 	strh.w	r2, [r4, #-4]
 802bff8:	f811 0b01 	ldrb.w	r0, [r1], #1
 802bffc:	f000 000f 	and.w	r0, r0, #15
 802c000:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802c004:	eb05 0a00 	add.w	sl, r5, r0
 802c008:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802c00c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802c010:	00d2      	lsls	r2, r2, #3
 802c012:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802c016:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802c01a:	ea49 0202 	orr.w	r2, r9, r2
 802c01e:	f815 9000 	ldrb.w	r9, [r5, r0]
 802c022:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802c026:	f824 2c02 	strh.w	r2, [r4, #-2]
 802c02a:	e7c6      	b.n	802bfba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802c02c:	4631      	mov	r1, r6
 802c02e:	f8dd e00c 	ldr.w	lr, [sp, #12]
 802c032:	e7c2      	b.n	802bfba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802c034:	d111      	bne.n	802c05a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 802c036:	7809      	ldrb	r1, [r1, #0]
 802c038:	0909      	lsrs	r1, r1, #4
 802c03a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802c03e:	186c      	adds	r4, r5, r1
 802c040:	78a2      	ldrb	r2, [r4, #2]
 802c042:	7864      	ldrb	r4, [r4, #1]
 802c044:	5c69      	ldrb	r1, [r5, r1]
 802c046:	00e4      	lsls	r4, r4, #3
 802c048:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802c04c:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802c050:	4322      	orrs	r2, r4
 802c052:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 802c056:	f820 2b02 	strh.w	r2, [r0], #2
 802c05a:	9a03      	ldr	r2, [sp, #12]
 802c05c:	f8bc 4000 	ldrh.w	r4, [ip]
 802c060:	9905      	ldr	r1, [sp, #20]
 802c062:	1aa4      	subs	r4, r4, r2
 802c064:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 802c068:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802c06c:	440a      	add	r2, r1
 802c06e:	fb92 f2f8 	sdiv	r2, r2, r8
 802c072:	4416      	add	r6, r2
 802c074:	e780      	b.n	802bf78 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 802c076:	4b04      	ldr	r3, [pc, #16]	@ (802c088 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802c078:	6818      	ldr	r0, [r3, #0]
 802c07a:	6803      	ldr	r3, [r0, #0]
 802c07c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802c07e:	4798      	blx	r3
 802c080:	b00f      	add	sp, #60	@ 0x3c
 802c082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c086:	bf00      	nop
 802c088:	2005bd1c 	.word	0x2005bd1c
 802c08c:	2005bd16 	.word	0x2005bd16
 802c090:	fffff800 	.word	0xfffff800

0802c094 <CRC_Lock>:
 802c094:	b530      	push	{r4, r5, lr}
 802c096:	4a2d      	ldr	r2, [pc, #180]	@ (802c14c <CRC_Lock+0xb8>)
 802c098:	f24c 2540 	movw	r5, #49728	@ 0xc240
 802c09c:	6813      	ldr	r3, [r2, #0]
 802c09e:	f023 0301 	bic.w	r3, r3, #1
 802c0a2:	6013      	str	r3, [r2, #0]
 802c0a4:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 802c0a8:	4b29      	ldr	r3, [pc, #164]	@ (802c150 <CRC_Lock+0xbc>)
 802c0aa:	681c      	ldr	r4, [r3, #0]
 802c0ac:	4014      	ands	r4, r2
 802c0ae:	42ac      	cmp	r4, r5
 802c0b0:	d005      	beq.n	802c0be <CRC_Lock+0x2a>
 802c0b2:	f24c 2570 	movw	r5, #49776	@ 0xc270
 802c0b6:	681c      	ldr	r4, [r3, #0]
 802c0b8:	4014      	ands	r4, r2
 802c0ba:	42ac      	cmp	r4, r5
 802c0bc:	d125      	bne.n	802c10a <CRC_Lock+0x76>
 802c0be:	4b25      	ldr	r3, [pc, #148]	@ (802c154 <CRC_Lock+0xc0>)
 802c0c0:	681b      	ldr	r3, [r3, #0]
 802c0c2:	2b00      	cmp	r3, #0
 802c0c4:	d139      	bne.n	802c13a <CRC_Lock+0xa6>
 802c0c6:	4b24      	ldr	r3, [pc, #144]	@ (802c158 <CRC_Lock+0xc4>)
 802c0c8:	681a      	ldr	r2, [r3, #0]
 802c0ca:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802c0ce:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 802c0d2:	d00d      	beq.n	802c0f0 <CRC_Lock+0x5c>
 802c0d4:	f240 4483 	movw	r4, #1155	@ 0x483
 802c0d8:	681a      	ldr	r2, [r3, #0]
 802c0da:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802c0de:	42a2      	cmp	r2, r4
 802c0e0:	d006      	beq.n	802c0f0 <CRC_Lock+0x5c>
 802c0e2:	f240 4285 	movw	r2, #1157	@ 0x485
 802c0e6:	681b      	ldr	r3, [r3, #0]
 802c0e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802c0ec:	4293      	cmp	r3, r2
 802c0ee:	d124      	bne.n	802c13a <CRC_Lock+0xa6>
 802c0f0:	2201      	movs	r2, #1
 802c0f2:	4b1a      	ldr	r3, [pc, #104]	@ (802c15c <CRC_Lock+0xc8>)
 802c0f4:	601a      	str	r2, [r3, #0]
 802c0f6:	681a      	ldr	r2, [r3, #0]
 802c0f8:	2a00      	cmp	r2, #0
 802c0fa:	d1fc      	bne.n	802c0f6 <CRC_Lock+0x62>
 802c0fc:	4b18      	ldr	r3, [pc, #96]	@ (802c160 <CRC_Lock+0xcc>)
 802c0fe:	6018      	str	r0, [r3, #0]
 802c100:	6818      	ldr	r0, [r3, #0]
 802c102:	1a43      	subs	r3, r0, r1
 802c104:	4258      	negs	r0, r3
 802c106:	4158      	adcs	r0, r3
 802c108:	e00e      	b.n	802c128 <CRC_Lock+0x94>
 802c10a:	681b      	ldr	r3, [r3, #0]
 802c10c:	4013      	ands	r3, r2
 802c10e:	f24d 2220 	movw	r2, #53792	@ 0xd220
 802c112:	4293      	cmp	r3, r2
 802c114:	d111      	bne.n	802c13a <CRC_Lock+0xa6>
 802c116:	f240 4286 	movw	r2, #1158	@ 0x486
 802c11a:	4b12      	ldr	r3, [pc, #72]	@ (802c164 <CRC_Lock+0xd0>)
 802c11c:	681b      	ldr	r3, [r3, #0]
 802c11e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802c122:	4293      	cmp	r3, r2
 802c124:	d001      	beq.n	802c12a <CRC_Lock+0x96>
 802c126:	2000      	movs	r0, #0
 802c128:	bd30      	pop	{r4, r5, pc}
 802c12a:	2201      	movs	r2, #1
 802c12c:	4b0e      	ldr	r3, [pc, #56]	@ (802c168 <CRC_Lock+0xd4>)
 802c12e:	601a      	str	r2, [r3, #0]
 802c130:	681a      	ldr	r2, [r3, #0]
 802c132:	2a00      	cmp	r2, #0
 802c134:	d1fc      	bne.n	802c130 <CRC_Lock+0x9c>
 802c136:	4b0d      	ldr	r3, [pc, #52]	@ (802c16c <CRC_Lock+0xd8>)
 802c138:	e7e1      	b.n	802c0fe <CRC_Lock+0x6a>
 802c13a:	2201      	movs	r2, #1
 802c13c:	4b0c      	ldr	r3, [pc, #48]	@ (802c170 <CRC_Lock+0xdc>)
 802c13e:	601a      	str	r2, [r3, #0]
 802c140:	681a      	ldr	r2, [r3, #0]
 802c142:	2a00      	cmp	r2, #0
 802c144:	d1fc      	bne.n	802c140 <CRC_Lock+0xac>
 802c146:	4b0b      	ldr	r3, [pc, #44]	@ (802c174 <CRC_Lock+0xe0>)
 802c148:	e7d9      	b.n	802c0fe <CRC_Lock+0x6a>
 802c14a:	bf00      	nop
 802c14c:	e0002000 	.word	0xe0002000
 802c150:	e000ed00 	.word	0xe000ed00
 802c154:	e0042000 	.word	0xe0042000
 802c158:	5c001000 	.word	0x5c001000
 802c15c:	58024c08 	.word	0x58024c08
 802c160:	58024c00 	.word	0x58024c00
 802c164:	46008ff0 	.word	0x46008ff0
 802c168:	46024c08 	.word	0x46024c08
 802c16c:	46024c00 	.word	0x46024c00
 802c170:	40023008 	.word	0x40023008
 802c174:	40023000 	.word	0x40023000

0802c178 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802c178:	6101      	str	r1, [r0, #16]
 802c17a:	4770      	bx	lr

0802c17c <_ZN8touchgfx8Gestures4tickEv>:
 802c17c:	7b83      	ldrb	r3, [r0, #14]
 802c17e:	b14b      	cbz	r3, 802c194 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802c180:	8903      	ldrh	r3, [r0, #8]
 802c182:	3301      	adds	r3, #1
 802c184:	b29b      	uxth	r3, r3
 802c186:	2b07      	cmp	r3, #7
 802c188:	8103      	strh	r3, [r0, #8]
 802c18a:	bf81      	itttt	hi
 802c18c:	2300      	movhi	r3, #0
 802c18e:	8143      	strhhi	r3, [r0, #10]
 802c190:	8183      	strhhi	r3, [r0, #12]
 802c192:	7383      	strbhi	r3, [r0, #14]
 802c194:	4770      	bx	lr
	...

0802c198 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802c198:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802c19c:	4698      	mov	r8, r3
 802c19e:	4604      	mov	r4, r0
 802c1a0:	8883      	ldrh	r3, [r0, #4]
 802c1a2:	460e      	mov	r6, r1
 802c1a4:	88c1      	ldrh	r1, [r0, #6]
 802c1a6:	2000      	movs	r0, #0
 802c1a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 802c1ac:	eba8 0303 	sub.w	r3, r8, r3
 802c1b0:	b21b      	sxth	r3, r3
 802c1b2:	4617      	mov	r7, r2
 802c1b4:	4a17      	ldr	r2, [pc, #92]	@ (802c214 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802c1b6:	2b00      	cmp	r3, #0
 802c1b8:	bfb8      	it	lt
 802c1ba:	425b      	neglt	r3, r3
 802c1bc:	9200      	str	r2, [sp, #0]
 802c1be:	8aa2      	ldrh	r2, [r4, #20]
 802c1c0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 802c1c4:	b21b      	sxth	r3, r3
 802c1c6:	4293      	cmp	r3, r2
 802c1c8:	f88d 0004 	strb.w	r0, [sp, #4]
 802c1cc:	f8ad 1008 	strh.w	r1, [sp, #8]
 802c1d0:	f8ad 800a 	strh.w	r8, [sp, #10]
 802c1d4:	f8ad 500c 	strh.w	r5, [sp, #12]
 802c1d8:	dc07      	bgt.n	802c1ea <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802c1da:	1a69      	subs	r1, r5, r1
 802c1dc:	b209      	sxth	r1, r1
 802c1de:	2900      	cmp	r1, #0
 802c1e0:	bfb8      	it	lt
 802c1e2:	4249      	neglt	r1, r1
 802c1e4:	b209      	sxth	r1, r1
 802c1e6:	428a      	cmp	r2, r1
 802c1e8:	da10      	bge.n	802c20c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802c1ea:	6920      	ldr	r0, [r4, #16]
 802c1ec:	4669      	mov	r1, sp
 802c1ee:	6803      	ldr	r3, [r0, #0]
 802c1f0:	eba8 0606 	sub.w	r6, r8, r6
 802c1f4:	685b      	ldr	r3, [r3, #4]
 802c1f6:	4798      	blx	r3
 802c1f8:	2300      	movs	r3, #0
 802c1fa:	2001      	movs	r0, #1
 802c1fc:	1bef      	subs	r7, r5, r7
 802c1fe:	8123      	strh	r3, [r4, #8]
 802c200:	8166      	strh	r6, [r4, #10]
 802c202:	81a7      	strh	r7, [r4, #12]
 802c204:	f8a4 8004 	strh.w	r8, [r4, #4]
 802c208:	80e5      	strh	r5, [r4, #6]
 802c20a:	73a0      	strb	r0, [r4, #14]
 802c20c:	b004      	add	sp, #16
 802c20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c212:	bf00      	nop
 802c214:	080310d4 	.word	0x080310d4

0802c218 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802c218:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c21a:	461e      	mov	r6, r3
 802c21c:	1e4b      	subs	r3, r1, #1
 802c21e:	2b01      	cmp	r3, #1
 802c220:	b085      	sub	sp, #20
 802c222:	4604      	mov	r4, r0
 802c224:	460d      	mov	r5, r1
 802c226:	4617      	mov	r7, r2
 802c228:	d84b      	bhi.n	802c2c2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802c22a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802c22e:	1cd3      	adds	r3, r2, #3
 802c230:	b29b      	uxth	r3, r3
 802c232:	2b06      	cmp	r3, #6
 802c234:	d916      	bls.n	802c264 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802c236:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 802c2d8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802c23a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802c23e:	f8cd c004 	str.w	ip, [sp, #4]
 802c242:	f04f 0c00 	mov.w	ip, #0
 802c246:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802c24a:	6900      	ldr	r0, [r0, #16]
 802c24c:	f8ad 100c 	strh.w	r1, [sp, #12]
 802c250:	f88d c008 	strb.w	ip, [sp, #8]
 802c254:	f8ad 200a 	strh.w	r2, [sp, #10]
 802c258:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c25c:	6803      	ldr	r3, [r0, #0]
 802c25e:	a901      	add	r1, sp, #4
 802c260:	689b      	ldr	r3, [r3, #8]
 802c262:	4798      	blx	r3
 802c264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c268:	1cd3      	adds	r3, r2, #3
 802c26a:	b29b      	uxth	r3, r3
 802c26c:	2b06      	cmp	r3, #6
 802c26e:	d916      	bls.n	802c29e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802c270:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802c2d8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802c274:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802c278:	f8cd c004 	str.w	ip, [sp, #4]
 802c27c:	f04f 0c01 	mov.w	ip, #1
 802c280:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802c284:	6920      	ldr	r0, [r4, #16]
 802c286:	f8ad 100c 	strh.w	r1, [sp, #12]
 802c28a:	f88d c008 	strb.w	ip, [sp, #8]
 802c28e:	f8ad 200a 	strh.w	r2, [sp, #10]
 802c292:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c296:	6803      	ldr	r3, [r0, #0]
 802c298:	a901      	add	r1, sp, #4
 802c29a:	689b      	ldr	r3, [r3, #8]
 802c29c:	4798      	blx	r3
 802c29e:	4b0d      	ldr	r3, [pc, #52]	@ (802c2d4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802c2a0:	6920      	ldr	r0, [r4, #16]
 802c2a2:	9301      	str	r3, [sp, #4]
 802c2a4:	2300      	movs	r3, #0
 802c2a6:	f88d 5008 	strb.w	r5, [sp, #8]
 802c2aa:	f8ad 700a 	strh.w	r7, [sp, #10]
 802c2ae:	f8ad 600c 	strh.w	r6, [sp, #12]
 802c2b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c2b6:	6803      	ldr	r3, [r0, #0]
 802c2b8:	a901      	add	r1, sp, #4
 802c2ba:	681b      	ldr	r3, [r3, #0]
 802c2bc:	4798      	blx	r3
 802c2be:	b005      	add	sp, #20
 802c2c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c2c2:	2900      	cmp	r1, #0
 802c2c4:	d1eb      	bne.n	802c29e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802c2c6:	80a2      	strh	r2, [r4, #4]
 802c2c8:	80c6      	strh	r6, [r0, #6]
 802c2ca:	60a1      	str	r1, [r4, #8]
 802c2cc:	81a1      	strh	r1, [r4, #12]
 802c2ce:	73a1      	strb	r1, [r4, #14]
 802c2d0:	e7e5      	b.n	802c29e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802c2d2:	bf00      	nop
 802c2d4:	080310c0 	.word	0x080310c0
 802c2d8:	080310e8 	.word	0x080310e8

0802c2dc <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 802c2dc:	10c9      	asrs	r1, r1, #3
 802c2de:	2900      	cmp	r1, #0
 802c2e0:	bfb8      	it	lt
 802c2e2:	4249      	neglt	r1, r1
 802c2e4:	2801      	cmp	r0, #1
 802c2e6:	d108      	bne.n	802c2fa <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802c2e8:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802c2ec:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 802c2f0:	4601      	mov	r1, r0
 802c2f2:	dd02      	ble.n	802c2fa <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802c2f4:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 802c2f8:	4770      	bx	lr
 802c2fa:	29ff      	cmp	r1, #255	@ 0xff
 802c2fc:	bfa8      	it	ge
 802c2fe:	21ff      	movge	r1, #255	@ 0xff
 802c300:	4608      	mov	r0, r1
 802c302:	4770      	bx	lr

0802c304 <_ZN8touchgfx10Rasterizer6lineToEii>:
 802c304:	b410      	push	{r4}
 802c306:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802c30a:	429c      	cmp	r4, r3
 802c30c:	d803      	bhi.n	802c316 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802c30e:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c312:	f7ed b883 	b.w	801941c <_ZN8touchgfx7Outline6lineToEii>
 802c316:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c31a:	4770      	bx	lr

0802c31c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 802c31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c320:	b08b      	sub	sp, #44	@ 0x2c
 802c322:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802c326:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 802c32a:	4606      	mov	r6, r0
 802c32c:	9308      	str	r3, [sp, #32]
 802c32e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 802c332:	468a      	mov	sl, r1
 802c334:	9309      	str	r3, [sp, #36]	@ 0x24
 802c336:	f7ed f9dd 	bl	80196f4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802c33a:	68b5      	ldr	r5, [r6, #8]
 802c33c:	4604      	mov	r4, r0
 802c33e:	2d00      	cmp	r5, #0
 802c340:	d044      	beq.n	802c3cc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802c342:	6873      	ldr	r3, [r6, #4]
 802c344:	42ab      	cmp	r3, r5
 802c346:	d33d      	bcc.n	802c3c4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802c348:	f04f 0800 	mov.w	r8, #0
 802c34c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802c350:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 802c354:	eb02 0b03 	add.w	fp, r2, r3
 802c358:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802c35c:	fb02 1203 	mla	r2, r2, r3, r1
 802c360:	9205      	str	r2, [sp, #20]
 802c362:	1e6a      	subs	r2, r5, #1
 802c364:	9204      	str	r2, [sp, #16]
 802c366:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802c36a:	f9b4 7000 	ldrsh.w	r7, [r4]
 802c36e:	454b      	cmp	r3, r9
 802c370:	463a      	mov	r2, r7
 802c372:	d008      	beq.n	802c386 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802c374:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 802c378:	eb03 0b09 	add.w	fp, r3, r9
 802c37c:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 802c380:	fb03 1309 	mla	r3, r3, r9, r1
 802c384:	9305      	str	r3, [sp, #20]
 802c386:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802c38a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802c38e:	4498      	add	r8, r3
 802c390:	9b04      	ldr	r3, [sp, #16]
 802c392:	3b01      	subs	r3, #1
 802c394:	9304      	str	r3, [sp, #16]
 802c396:	9b04      	ldr	r3, [sp, #16]
 802c398:	3301      	adds	r3, #1
 802c39a:	d015      	beq.n	802c3c8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802c39c:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 802c3a0:	42bb      	cmp	r3, r7
 802c3a2:	d117      	bne.n	802c3d4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802c3a4:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802c3a8:	9b04      	ldr	r3, [sp, #16]
 802c3aa:	4548      	cmp	r0, r9
 802c3ac:	f103 33ff 	add.w	r3, r3, #4294967295
 802c3b0:	d17d      	bne.n	802c4ae <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802c3b2:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802c3b6:	4401      	add	r1, r0
 802c3b8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802c3bc:	4480      	add	r8, r0
 802c3be:	e7e9      	b.n	802c394 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 802c3c0:	461f      	mov	r7, r3
 802c3c2:	e042      	b.n	802c44a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 802c3c4:	2000      	movs	r0, #0
 802c3c6:	e002      	b.n	802c3ce <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 802c3c8:	2900      	cmp	r1, #0
 802c3ca:	d16d      	bne.n	802c4a8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802c3cc:	2001      	movs	r0, #1
 802c3ce:	b00b      	add	sp, #44	@ 0x2c
 802c3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c3d4:	b379      	cbz	r1, 802c436 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802c3d6:	2f00      	cmp	r7, #0
 802c3d8:	db29      	blt.n	802c42e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802c3da:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802c3de:	42bb      	cmp	r3, r7
 802c3e0:	dd25      	ble.n	802c42e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802c3e2:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802c3e6:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802c3ea:	f7ff ff77 	bl	802c2dc <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802c3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c3f0:	fb10 f003 	smulbb	r0, r0, r3
 802c3f4:	b280      	uxth	r0, r0
 802c3f6:	1c41      	adds	r1, r0, #1
 802c3f8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802c3fc:	1209      	asrs	r1, r1, #8
 802c3fe:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802c402:	d014      	beq.n	802c42e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802c404:	b2c9      	uxtb	r1, r1
 802c406:	9102      	str	r1, [sp, #8]
 802c408:	2101      	movs	r1, #1
 802c40a:	9808      	ldr	r0, [sp, #32]
 802c40c:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802c40e:	b2ba      	uxth	r2, r7
 802c410:	4413      	add	r3, r2
 802c412:	9101      	str	r1, [sp, #4]
 802c414:	4402      	add	r2, r0
 802c416:	fa0f f18b 	sxth.w	r1, fp
 802c41a:	f8da 0000 	ldr.w	r0, [sl]
 802c41e:	9100      	str	r1, [sp, #0]
 802c420:	6941      	ldr	r1, [r0, #20]
 802c422:	b21b      	sxth	r3, r3
 802c424:	460d      	mov	r5, r1
 802c426:	b212      	sxth	r2, r2
 802c428:	9905      	ldr	r1, [sp, #20]
 802c42a:	4650      	mov	r0, sl
 802c42c:	47a8      	blx	r5
 802c42e:	9b04      	ldr	r3, [sp, #16]
 802c430:	1c7a      	adds	r2, r7, #1
 802c432:	3301      	adds	r3, #1
 802c434:	d0ca      	beq.n	802c3cc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802c436:	f9b4 7000 	ldrsh.w	r7, [r4]
 802c43a:	1abb      	subs	r3, r7, r2
 802c43c:	2b00      	cmp	r3, #0
 802c43e:	dd31      	ble.n	802c4a4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802c440:	2a00      	cmp	r2, #0
 802c442:	dabd      	bge.n	802c3c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802c444:	2f00      	cmp	r7, #0
 802c446:	dd2d      	ble.n	802c4a4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802c448:	2200      	movs	r2, #0
 802c44a:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802c44e:	19d1      	adds	r1, r2, r7
 802c450:	4299      	cmp	r1, r3
 802c452:	db02      	blt.n	802c45a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 802c454:	1a9f      	subs	r7, r3, r2
 802c456:	2f00      	cmp	r7, #0
 802c458:	dd24      	ble.n	802c4a4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802c45a:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802c45e:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802c462:	f7ff ff3b 	bl	802c2dc <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802c466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c468:	fb10 f003 	smulbb	r0, r0, r3
 802c46c:	b280      	uxth	r0, r0
 802c46e:	1c41      	adds	r1, r0, #1
 802c470:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802c474:	1209      	asrs	r1, r1, #8
 802c476:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802c47a:	d013      	beq.n	802c4a4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802c47c:	9808      	ldr	r0, [sp, #32]
 802c47e:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802c480:	b292      	uxth	r2, r2
 802c482:	b2c9      	uxtb	r1, r1
 802c484:	4413      	add	r3, r2
 802c486:	9102      	str	r1, [sp, #8]
 802c488:	4402      	add	r2, r0
 802c48a:	b23f      	sxth	r7, r7
 802c48c:	f8da 0000 	ldr.w	r0, [sl]
 802c490:	fa0f f18b 	sxth.w	r1, fp
 802c494:	9100      	str	r1, [sp, #0]
 802c496:	9701      	str	r7, [sp, #4]
 802c498:	6947      	ldr	r7, [r0, #20]
 802c49a:	b21b      	sxth	r3, r3
 802c49c:	b212      	sxth	r2, r2
 802c49e:	9905      	ldr	r1, [sp, #20]
 802c4a0:	4650      	mov	r0, sl
 802c4a2:	47b8      	blx	r7
 802c4a4:	464b      	mov	r3, r9
 802c4a6:	e75e      	b.n	802c366 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802c4a8:	2f00      	cmp	r7, #0
 802c4aa:	da96      	bge.n	802c3da <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802c4ac:	e78e      	b.n	802c3cc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802c4ae:	2900      	cmp	r1, #0
 802c4b0:	d0f8      	beq.n	802c4a4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802c4b2:	e790      	b.n	802c3d6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0802c4b4 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 802c4b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802c4b8:	2500      	movs	r5, #0
 802c4ba:	461e      	mov	r6, r3
 802c4bc:	4b35      	ldr	r3, [pc, #212]	@ (802c594 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 802c4be:	4604      	mov	r4, r0
 802c4c0:	e9c0 3100 	strd	r3, r1, [r0]
 802c4c4:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 802c4c8:	f100 0814 	add.w	r8, r0, #20
 802c4cc:	8103      	strh	r3, [r0, #8]
 802c4ce:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802c4d2:	8185      	strh	r5, [r0, #12]
 802c4d4:	7283      	strb	r3, [r0, #10]
 802c4d6:	81c5      	strh	r5, [r0, #14]
 802c4d8:	8205      	strh	r5, [r0, #16]
 802c4da:	8245      	strh	r5, [r0, #18]
 802c4dc:	4640      	mov	r0, r8
 802c4de:	4617      	mov	r7, r2
 802c4e0:	f7ec fad4 	bl	8018a8c <_ZN8touchgfx7OutlineC1Ev>
 802c4e4:	466b      	mov	r3, sp
 802c4e6:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 802c4ea:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 802c4ee:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 802c4f2:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 802c4f6:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 802c4fa:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 802c4fe:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 802c502:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 802c506:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 802c50a:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 802c50e:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 802c512:	6830      	ldr	r0, [r6, #0]
 802c514:	6871      	ldr	r1, [r6, #4]
 802c516:	8872      	ldrh	r2, [r6, #2]
 802c518:	c303      	stmia	r3!, {r0, r1}
 802c51a:	887b      	ldrh	r3, [r7, #2]
 802c51c:	8835      	ldrh	r5, [r6, #0]
 802c51e:	4413      	add	r3, r2
 802c520:	883a      	ldrh	r2, [r7, #0]
 802c522:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 802c526:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802c52a:	442a      	add	r2, r5
 802c52c:	81a2      	strh	r2, [r4, #12]
 802c52e:	81e3      	strh	r3, [r4, #14]
 802c530:	8220      	strh	r0, [r4, #16]
 802c532:	8261      	strh	r1, [r4, #18]
 802c534:	4668      	mov	r0, sp
 802c536:	4639      	mov	r1, r7
 802c538:	f7ed ffe6 	bl	801a508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802c53c:	f104 000c 	add.w	r0, r4, #12
 802c540:	f7ed ffba 	bl	801a4b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802c544:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802c548:	f8bd 2000 	ldrh.w	r2, [sp]
 802c54c:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 802c550:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 802c554:	4640      	mov	r0, r8
 802c556:	f7ec fa7d 	bl	8018a54 <_ZN8touchgfx7Outline5resetEv>
 802c55a:	4620      	mov	r0, r4
 802c55c:	f9bd 3000 	ldrsh.w	r3, [sp]
 802c560:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 802c564:	015b      	lsls	r3, r3, #5
 802c566:	64e3      	str	r3, [r4, #76]	@ 0x4c
 802c568:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802c56c:	015b      	lsls	r3, r3, #5
 802c56e:	6523      	str	r3, [r4, #80]	@ 0x50
 802c570:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802c574:	015b      	lsls	r3, r3, #5
 802c576:	6563      	str	r3, [r4, #84]	@ 0x54
 802c578:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802c57c:	015b      	lsls	r3, r3, #5
 802c57e:	65a3      	str	r3, [r4, #88]	@ 0x58
 802c580:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 802c584:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 802c588:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 802c58c:	b002      	add	sp, #8
 802c58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c592:	bf00      	nop
 802c594:	08031424 	.word	0x08031424

0802c598 <_ZN8touchgfx6Canvas5closeEv>:
 802c598:	b538      	push	{r3, r4, r5, lr}
 802c59a:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802c59e:	4604      	mov	r4, r0
 802c5a0:	b193      	cbz	r3, 802c5c8 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802c5a2:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 802c5a6:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 802c5aa:	4213      	tst	r3, r2
 802c5ac:	d10c      	bne.n	802c5c8 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802c5ae:	f100 0514 	add.w	r5, r0, #20
 802c5b2:	b123      	cbz	r3, 802c5be <_ZN8touchgfx6Canvas5closeEv+0x26>
 802c5b4:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 802c5b8:	4628      	mov	r0, r5
 802c5ba:	f7ff fea3 	bl	802c304 <_ZN8touchgfx10Rasterizer6lineToEii>
 802c5be:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 802c5c2:	4628      	mov	r0, r5
 802c5c4:	f7ff fe9e 	bl	802c304 <_ZN8touchgfx10Rasterizer6lineToEii>
 802c5c8:	2300      	movs	r3, #0
 802c5ca:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802c5ce:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 802c5d2:	4298      	cmp	r0, r3
 802c5d4:	bf34      	ite	cc
 802c5d6:	2000      	movcc	r0, #0
 802c5d8:	2001      	movcs	r0, #1
 802c5da:	bd38      	pop	{r3, r4, r5, pc}

0802c5dc <_ZN8touchgfx6Canvas6renderEh>:
 802c5dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802c5e0:	7a85      	ldrb	r5, [r0, #10]
 802c5e2:	4604      	mov	r4, r0
 802c5e4:	4369      	muls	r1, r5
 802c5e6:	1c4d      	adds	r5, r1, #1
 802c5e8:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802c5ec:	122d      	asrs	r5, r5, #8
 802c5ee:	f000 8098 	beq.w	802c722 <_ZN8touchgfx6Canvas6renderEh+0x146>
 802c5f2:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 802c5f6:	2b00      	cmp	r3, #0
 802c5f8:	f000 8093 	beq.w	802c722 <_ZN8touchgfx6Canvas6renderEh+0x146>
 802c5fc:	f7ff ffcc 	bl	802c598 <_ZN8touchgfx6Canvas5closeEv>
 802c600:	4607      	mov	r7, r0
 802c602:	2800      	cmp	r0, #0
 802c604:	d045      	beq.n	802c692 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802c606:	6860      	ldr	r0, [r4, #4]
 802c608:	4e47      	ldr	r6, [pc, #284]	@ (802c728 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802c60a:	6803      	ldr	r3, [r0, #0]
 802c60c:	6837      	ldr	r7, [r6, #0]
 802c60e:	689b      	ldr	r3, [r3, #8]
 802c610:	4798      	blx	r3
 802c612:	4601      	mov	r1, r0
 802c614:	4638      	mov	r0, r7
 802c616:	f7ea f8e3 	bl	80167e0 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802c61a:	4607      	mov	r7, r0
 802c61c:	f7e3 fae4 	bl	800fbe8 <_ZN8touchgfx3HAL3lcdEv>
 802c620:	6803      	ldr	r3, [r0, #0]
 802c622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802c624:	4798      	blx	r3
 802c626:	4680      	mov	r8, r0
 802c628:	f7e3 fade 	bl	800fbe8 <_ZN8touchgfx3HAL3lcdEv>
 802c62c:	6803      	ldr	r3, [r0, #0]
 802c62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802c630:	4798      	blx	r3
 802c632:	280b      	cmp	r0, #11
 802c634:	d85a      	bhi.n	802c6ec <_ZN8touchgfx6Canvas6renderEh+0x110>
 802c636:	e8df f000 	tbb	[pc, r0]
 802c63a:	5b50      	.short	0x5b50
 802c63c:	3059066b 	.word	0x3059066b
 802c640:	64646440 	.word	0x64646440
 802c644:	6464      	.short	0x6464
 802c646:	2208      	movs	r2, #8
 802c648:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802c64c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802c650:	fb91 f2f2 	sdiv	r2, r1, r2
 802c654:	fb08 2303 	mla	r3, r8, r3, r2
 802c658:	441f      	add	r7, r3
 802c65a:	424b      	negs	r3, r1
 802c65c:	f003 0307 	and.w	r3, r3, #7
 802c660:	f001 0107 	and.w	r1, r1, #7
 802c664:	bf58      	it	pl
 802c666:	4259      	negpl	r1, r3
 802c668:	b2c9      	uxtb	r1, r1
 802c66a:	b2ed      	uxtb	r5, r5
 802c66c:	463a      	mov	r2, r7
 802c66e:	e9cd 1500 	strd	r1, r5, [sp]
 802c672:	fa0f f388 	sxth.w	r3, r8
 802c676:	6861      	ldr	r1, [r4, #4]
 802c678:	f104 0014 	add.w	r0, r4, #20
 802c67c:	f7ff fe4e 	bl	802c31c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802c680:	4607      	mov	r7, r0
 802c682:	6860      	ldr	r0, [r4, #4]
 802c684:	6803      	ldr	r3, [r0, #0]
 802c686:	691b      	ldr	r3, [r3, #16]
 802c688:	4798      	blx	r3
 802c68a:	6830      	ldr	r0, [r6, #0]
 802c68c:	6803      	ldr	r3, [r0, #0]
 802c68e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802c690:	4798      	blx	r3
 802c692:	4638      	mov	r0, r7
 802c694:	b002      	add	sp, #8
 802c696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c69a:	2204      	movs	r2, #4
 802c69c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802c6a0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802c6a4:	fb91 f2f2 	sdiv	r2, r1, r2
 802c6a8:	fb08 2303 	mla	r3, r8, r3, r2
 802c6ac:	441f      	add	r7, r3
 802c6ae:	424b      	negs	r3, r1
 802c6b0:	f003 0303 	and.w	r3, r3, #3
 802c6b4:	f001 0103 	and.w	r1, r1, #3
 802c6b8:	e7d4      	b.n	802c664 <_ZN8touchgfx6Canvas6renderEh+0x88>
 802c6ba:	2202      	movs	r2, #2
 802c6bc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802c6c0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802c6c4:	fb91 f2f2 	sdiv	r2, r1, r2
 802c6c8:	fb08 2303 	mla	r3, r8, r3, r2
 802c6cc:	2900      	cmp	r1, #0
 802c6ce:	f001 0101 	and.w	r1, r1, #1
 802c6d2:	441f      	add	r7, r3
 802c6d4:	bfb8      	it	lt
 802c6d6:	4249      	neglt	r1, r1
 802c6d8:	e7c6      	b.n	802c668 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802c6da:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802c6de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c6e2:	fb08 f303 	mul.w	r3, r8, r3
 802c6e6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802c6ea:	441f      	add	r7, r3
 802c6ec:	2100      	movs	r1, #0
 802c6ee:	e7bc      	b.n	802c66a <_ZN8touchgfx6Canvas6renderEh+0x8e>
 802c6f0:	2103      	movs	r1, #3
 802c6f2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802c6f6:	fb08 f203 	mul.w	r2, r8, r3
 802c6fa:	89a3      	ldrh	r3, [r4, #12]
 802c6fc:	fb13 2301 	smlabb	r3, r3, r1, r2
 802c700:	e7f3      	b.n	802c6ea <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802c702:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802c706:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c70a:	fb08 2303 	mla	r3, r8, r3, r2
 802c70e:	e7ec      	b.n	802c6ea <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802c710:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802c714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c718:	fb08 f303 	mul.w	r3, r8, r3
 802c71c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802c720:	e7e3      	b.n	802c6ea <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802c722:	2701      	movs	r7, #1
 802c724:	e7b5      	b.n	802c692 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802c726:	bf00      	nop
 802c728:	2005bd1c 	.word	0x2005bd1c

0802c72c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802c72c:	b510      	push	{r4, lr}
 802c72e:	4b06      	ldr	r3, [pc, #24]	@ (802c748 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 802c730:	781b      	ldrb	r3, [r3, #0]
 802c732:	2b01      	cmp	r3, #1
 802c734:	d107      	bne.n	802c746 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 802c736:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 802c73a:	680b      	ldr	r3, [r1, #0]
 802c73c:	6814      	ldr	r4, [r2, #0]
 802c73e:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802c742:	6013      	str	r3, [r2, #0]
 802c744:	600c      	str	r4, [r1, #0]
 802c746:	bd10      	pop	{r4, pc}
 802c748:	2005bd14 	.word	0x2005bd14

0802c74c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802c74c:	b513      	push	{r0, r1, r4, lr}
 802c74e:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802c752:	4604      	mov	r4, r0
 802c754:	e9cd 2100 	strd	r2, r1, [sp]
 802c758:	b9a3      	cbnz	r3, 802c784 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802c75a:	466a      	mov	r2, sp
 802c75c:	a901      	add	r1, sp, #4
 802c75e:	4620      	mov	r0, r4
 802c760:	f7ff ffe4 	bl	802c72c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802c764:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802c766:	9901      	ldr	r1, [sp, #4]
 802c768:	9a00      	ldr	r2, [sp, #0]
 802c76a:	1ac9      	subs	r1, r1, r3
 802c76c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802c76e:	9101      	str	r1, [sp, #4]
 802c770:	1ad2      	subs	r2, r2, r3
 802c772:	2a00      	cmp	r2, #0
 802c774:	9200      	str	r2, [sp, #0]
 802c776:	da0b      	bge.n	802c790 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802c778:	2301      	movs	r3, #1
 802c77a:	2900      	cmp	r1, #0
 802c77c:	da0e      	bge.n	802c79c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802c77e:	f043 0304 	orr.w	r3, r3, #4
 802c782:	e013      	b.n	802c7ac <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 802c784:	f7ff ff08 	bl	802c598 <_ZN8touchgfx6Canvas5closeEv>
 802c788:	2800      	cmp	r0, #0
 802c78a:	d1e6      	bne.n	802c75a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 802c78c:	b002      	add	sp, #8
 802c78e:	bd10      	pop	{r4, pc}
 802c790:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802c792:	429a      	cmp	r2, r3
 802c794:	bfac      	ite	ge
 802c796:	2302      	movge	r3, #2
 802c798:	2300      	movlt	r3, #0
 802c79a:	e7ee      	b.n	802c77a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802c79c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 802c79e:	4281      	cmp	r1, r0
 802c7a0:	bfac      	ite	ge
 802c7a2:	2008      	movge	r0, #8
 802c7a4:	2000      	movlt	r0, #0
 802c7a6:	4318      	orrs	r0, r3
 802c7a8:	b2c3      	uxtb	r3, r0
 802c7aa:	b158      	cbz	r0, 802c7c4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802c7ac:	2200      	movs	r2, #0
 802c7ae:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 802c7b2:	9901      	ldr	r1, [sp, #4]
 802c7b4:	9a00      	ldr	r2, [sp, #0]
 802c7b6:	66e1      	str	r1, [r4, #108]	@ 0x6c
 802c7b8:	6722      	str	r2, [r4, #112]	@ 0x70
 802c7ba:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 802c7be:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 802c7c2:	e7e3      	b.n	802c78c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802c7c4:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802c7c8:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802c7cc:	4298      	cmp	r0, r3
 802c7ce:	d803      	bhi.n	802c7d8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802c7d0:	f104 0014 	add.w	r0, r4, #20
 802c7d4:	f7ec fe3c 	bl	8019450 <_ZN8touchgfx7Outline6moveToEii>
 802c7d8:	2301      	movs	r3, #1
 802c7da:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802c7de:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802c7e2:	2300      	movs	r3, #0
 802c7e4:	e7e5      	b.n	802c7b2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802c7e6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802c7e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802c7e8:	4604      	mov	r4, r0
 802c7ea:	ab02      	add	r3, sp, #8
 802c7ec:	f843 2d08 	str.w	r2, [r3, #-8]!
 802c7f0:	461a      	mov	r2, r3
 802c7f2:	9101      	str	r1, [sp, #4]
 802c7f4:	a901      	add	r1, sp, #4
 802c7f6:	f7ff ff99 	bl	802c72c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802c7fa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802c7fc:	9901      	ldr	r1, [sp, #4]
 802c7fe:	9a00      	ldr	r2, [sp, #0]
 802c800:	1ac9      	subs	r1, r1, r3
 802c802:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802c804:	9101      	str	r1, [sp, #4]
 802c806:	1ad2      	subs	r2, r2, r3
 802c808:	2a00      	cmp	r2, #0
 802c80a:	9200      	str	r2, [sp, #0]
 802c80c:	db1c      	blt.n	802c848 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802c80e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802c810:	429a      	cmp	r2, r3
 802c812:	bfac      	ite	ge
 802c814:	2002      	movge	r0, #2
 802c816:	2000      	movlt	r0, #0
 802c818:	2900      	cmp	r1, #0
 802c81a:	db17      	blt.n	802c84c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802c81c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802c81e:	4299      	cmp	r1, r3
 802c820:	bfac      	ite	ge
 802c822:	2308      	movge	r3, #8
 802c824:	2300      	movlt	r3, #0
 802c826:	4303      	orrs	r3, r0
 802c828:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 802c82c:	b2dd      	uxtb	r5, r3
 802c82e:	b978      	cbnz	r0, 802c850 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802c830:	f104 0014 	add.w	r0, r4, #20
 802c834:	f7ff fd66 	bl	802c304 <_ZN8touchgfx10Rasterizer6lineToEii>
 802c838:	9b01      	ldr	r3, [sp, #4]
 802c83a:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 802c83e:	6623      	str	r3, [r4, #96]	@ 0x60
 802c840:	9b00      	ldr	r3, [sp, #0]
 802c842:	6663      	str	r3, [r4, #100]	@ 0x64
 802c844:	b002      	add	sp, #8
 802c846:	bd70      	pop	{r4, r5, r6, pc}
 802c848:	2001      	movs	r0, #1
 802c84a:	e7e5      	b.n	802c818 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802c84c:	2304      	movs	r3, #4
 802c84e:	e7ea      	b.n	802c826 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802c850:	b113      	cbz	r3, 802c858 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802c852:	ea10 0305 	ands.w	r3, r0, r5
 802c856:	d11c      	bne.n	802c892 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 802c858:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 802c85c:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 802c860:	f104 0614 	add.w	r6, r4, #20
 802c864:	b98b      	cbnz	r3, 802c88a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802c866:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802c86a:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802c86e:	4298      	cmp	r0, r3
 802c870:	d802      	bhi.n	802c878 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802c872:	4630      	mov	r0, r6
 802c874:	f7ec fdec 	bl	8019450 <_ZN8touchgfx7Outline6moveToEii>
 802c878:	2301      	movs	r3, #1
 802c87a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802c87e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802c882:	e9dd 2100 	ldrd	r2, r1, [sp]
 802c886:	4630      	mov	r0, r6
 802c888:	e7d4      	b.n	802c834 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802c88a:	4630      	mov	r0, r6
 802c88c:	f7ff fd3a 	bl	802c304 <_ZN8touchgfx10Rasterizer6lineToEii>
 802c890:	e7f7      	b.n	802c882 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802c892:	461d      	mov	r5, r3
 802c894:	e7d0      	b.n	802c838 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802c898 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 802c898:	b538      	push	{r3, r4, r5, lr}
 802c89a:	ed2d 8b10 	vpush	{d8-d15}
 802c89e:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 802c8a2:	4605      	mov	r5, r0
 802c8a4:	eeb0 ca40 	vmov.f32	s24, s0
 802c8a8:	eef0 ca60 	vmov.f32	s25, s1
 802c8ac:	eeb0 da41 	vmov.f32	s26, s2
 802c8b0:	eef0 da61 	vmov.f32	s27, s3
 802c8b4:	eeb0 ea42 	vmov.f32	s28, s4
 802c8b8:	eef0 ea62 	vmov.f32	s29, s5
 802c8bc:	460c      	mov	r4, r1
 802c8be:	eef0 aa6b 	vmov.f32	s21, s23
 802c8c2:	ed9f ba52 	vldr	s22, [pc, #328]	@ 802ca0c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 802c8c6:	2c08      	cmp	r4, #8
 802c8c8:	d86e      	bhi.n	802c9a8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 802c8ca:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 802c8ce:	ee7d 7aee 	vsub.f32	s15, s27, s29
 802c8d2:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 802c8d6:	ee3e 7aec 	vsub.f32	s14, s29, s25
 802c8da:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 802c8de:	eee6 7a07 	vfma.f32	s15, s12, s14
 802c8e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802c8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c8ea:	ee3c fa0d 	vadd.f32	s30, s24, s26
 802c8ee:	bf48      	it	mi
 802c8f0:	eef1 7a67 	vnegmi.f32	s15, s15
 802c8f4:	ee7c faad 	vadd.f32	s31, s25, s27
 802c8f8:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 802c8fc:	ee3d aaae 	vadd.f32	s20, s27, s29
 802c900:	ee2f fa2b 	vmul.f32	s30, s30, s23
 802c904:	ee6f faab 	vmul.f32	s31, s31, s23
 802c908:	ee69 9aab 	vmul.f32	s19, s19, s23
 802c90c:	ee2a aa2b 	vmul.f32	s20, s20, s23
 802c910:	eef4 7acb 	vcmpe.f32	s15, s22
 802c914:	ee7f 8a29 	vadd.f32	s17, s30, s19
 802c918:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 802c91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c920:	ee68 8aab 	vmul.f32	s17, s17, s23
 802c924:	ee29 9a2b 	vmul.f32	s18, s18, s23
 802c928:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 802c92c:	dd3f      	ble.n	802c9ae <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 802c92e:	ee27 7a07 	vmul.f32	s14, s14, s14
 802c932:	eea6 7aa6 	vfma.f32	s14, s13, s13
 802c936:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802c93a:	ee27 7a06 	vmul.f32	s14, s14, s12
 802c93e:	eef4 7ac7 	vcmpe.f32	s15, s14
 802c942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c946:	d847      	bhi.n	802c9d8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802c948:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 802c94c:	ee3e 0aed 	vsub.f32	s0, s29, s27
 802c950:	f000 fa37 	bl	802cdc2 <atan2f>
 802c954:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 802c958:	eeb0 8a40 	vmov.f32	s16, s0
 802c95c:	ee3d 0aec 	vsub.f32	s0, s27, s25
 802c960:	f000 fa2f 	bl	802cdc2 <atan2f>
 802c964:	ee38 0a40 	vsub.f32	s0, s16, s0
 802c968:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802c96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c970:	eddf 7a27 	vldr	s15, [pc, #156]	@ 802ca10 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 802c974:	bf48      	it	mi
 802c976:	eeb1 0a40 	vnegmi.f32	s0, s0
 802c97a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802c97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c982:	bfa4      	itt	ge
 802c984:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 802ca14 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 802c988:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 802c98c:	eddf 7a22 	vldr	s15, [pc, #136]	@ 802ca18 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 802c990:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802c994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c998:	d51e      	bpl.n	802c9d8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802c99a:	eef0 0a49 	vmov.f32	s1, s18
 802c99e:	eeb0 0a68 	vmov.f32	s0, s17
 802c9a2:	4628      	mov	r0, r5
 802c9a4:	f7eb f90a 	bl	8017bbc <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802c9a8:	ecbd 8b10 	vpop	{d8-d15}
 802c9ac:	bd38      	pop	{r3, r4, r5, pc}
 802c9ae:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 802c9b2:	eeb0 7a68 	vmov.f32	s14, s17
 802c9b6:	eef0 6a49 	vmov.f32	s13, s18
 802c9ba:	eea7 7aea 	vfms.f32	s14, s15, s21
 802c9be:	ee7c 7aae 	vadd.f32	s15, s25, s29
 802c9c2:	eee7 6aea 	vfms.f32	s13, s15, s21
 802c9c6:	ee66 7aa6 	vmul.f32	s15, s13, s13
 802c9ca:	eee7 7a07 	vfma.f32	s15, s14, s14
 802c9ce:	eef4 7ac6 	vcmpe.f32	s15, s12
 802c9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c9d6:	d9e0      	bls.n	802c99a <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 802c9d8:	3401      	adds	r4, #1
 802c9da:	eef0 0a6c 	vmov.f32	s1, s25
 802c9de:	eeb0 0a4c 	vmov.f32	s0, s24
 802c9e2:	4621      	mov	r1, r4
 802c9e4:	eef0 2a49 	vmov.f32	s5, s18
 802c9e8:	eeb0 2a68 	vmov.f32	s4, s17
 802c9ec:	eef0 1a6f 	vmov.f32	s3, s31
 802c9f0:	eeb0 1a4f 	vmov.f32	s2, s30
 802c9f4:	4628      	mov	r0, r5
 802c9f6:	f7ff ff4f 	bl	802c898 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 802c9fa:	eef0 da4a 	vmov.f32	s27, s20
 802c9fe:	eeb0 da69 	vmov.f32	s26, s19
 802ca02:	eef0 ca49 	vmov.f32	s25, s18
 802ca06:	eeb0 ca68 	vmov.f32	s24, s17
 802ca0a:	e75c      	b.n	802c8c6 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 802ca0c:	2edbe6ff 	.word	0x2edbe6ff
 802ca10:	40490fdb 	.word	0x40490fdb
 802ca14:	40c90fdb 	.word	0x40c90fdb
 802ca18:	3dcccccd 	.word	0x3dcccccd

0802ca1c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 802ca1c:	b530      	push	{r4, r5, lr}
 802ca1e:	ed2d 8b10 	vpush	{d8-d15}
 802ca22:	4604      	mov	r4, r0
 802ca24:	eef0 8a40 	vmov.f32	s17, s0
 802ca28:	eef0 9a60 	vmov.f32	s19, s1
 802ca2c:	eef0 fa41 	vmov.f32	s31, s2
 802ca30:	eeb0 fa61 	vmov.f32	s30, s3
 802ca34:	eef0 ba42 	vmov.f32	s23, s4
 802ca38:	eeb0 ca62 	vmov.f32	s24, s5
 802ca3c:	eef0 aa43 	vmov.f32	s21, s6
 802ca40:	eeb0 ba63 	vmov.f32	s22, s7
 802ca44:	460d      	mov	r5, r1
 802ca46:	b085      	sub	sp, #20
 802ca48:	2d08      	cmp	r5, #8
 802ca4a:	f200 8113 	bhi.w	802cc74 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 802ca4e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802ca52:	ee38 daaf 	vadd.f32	s26, s17, s31
 802ca56:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 802ca5a:	ee7f 6aab 	vadd.f32	s13, s31, s23
 802ca5e:	ee26 6a27 	vmul.f32	s12, s12, s15
 802ca62:	ee2d da27 	vmul.f32	s26, s26, s15
 802ca66:	ed8d 6a01 	vstr	s12, [sp, #4]
 802ca6a:	ee7c ca0b 	vadd.f32	s25, s24, s22
 802ca6e:	eeb0 ea4d 	vmov.f32	s28, s26
 802ca72:	eea6 6aa7 	vfma.f32	s12, s13, s15
 802ca76:	eea6 eaa7 	vfma.f32	s28, s13, s15
 802ca7a:	ee79 da8f 	vadd.f32	s27, s19, s30
 802ca7e:	ee66 6a27 	vmul.f32	s13, s12, s15
 802ca82:	ee6c caa7 	vmul.f32	s25, s25, s15
 802ca86:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 802ca8a:	edcd 6a03 	vstr	s13, [sp, #12]
 802ca8e:	ee6d daa7 	vmul.f32	s27, s27, s15
 802ca92:	eef0 6a6c 	vmov.f32	s13, s25
 802ca96:	eef0 ea6d 	vmov.f32	s29, s27
 802ca9a:	eee7 6a27 	vfma.f32	s13, s14, s15
 802ca9e:	eee7 ea27 	vfma.f32	s29, s14, s15
 802caa2:	ee26 7aa7 	vmul.f32	s14, s13, s15
 802caa6:	ee2e ea27 	vmul.f32	s28, s28, s15
 802caaa:	ed8d 7a02 	vstr	s14, [sp, #8]
 802caae:	ed9d 7a03 	vldr	s14, [sp, #12]
 802cab2:	ee6e eaa7 	vmul.f32	s29, s29, s15
 802cab6:	ee3e 9a07 	vadd.f32	s18, s28, s14
 802caba:	ed9d 7a02 	vldr	s14, [sp, #8]
 802cabe:	ee3e aa87 	vadd.f32	s20, s29, s14
 802cac2:	ee29 9a27 	vmul.f32	s18, s18, s15
 802cac6:	ee2a aa27 	vmul.f32	s20, s20, s15
 802caca:	eef0 6a67 	vmov.f32	s13, s15
 802cace:	2d00      	cmp	r5, #0
 802cad0:	f000 810b 	beq.w	802ccea <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802cad4:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 802cad8:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 802cadc:	ee7b 7a69 	vsub.f32	s15, s22, s19
 802cae0:	ee3f 6aea 	vsub.f32	s12, s31, s21
 802cae4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 802cae8:	eea6 7a27 	vfma.f32	s14, s12, s15
 802caec:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 802caf0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802caf4:	ee3b 5aea 	vsub.f32	s10, s23, s21
 802caf8:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 802cafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cb00:	eea5 6a27 	vfma.f32	s12, s10, s15
 802cb04:	bf48      	it	mi
 802cb06:	eeb1 7a47 	vnegmi.f32	s14, s14
 802cb0a:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 802cb0e:	eddf 4a88 	vldr	s9, [pc, #544]	@ 802cd30 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 802cb12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cb16:	eeb4 7ae4 	vcmpe.f32	s14, s9
 802cb1a:	bf48      	it	mi
 802cb1c:	eeb1 6a46 	vnegmi.f32	s12, s12
 802cb20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cb24:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 802cb28:	f340 80a8 	ble.w	802cc7c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 802cb2c:	eeb4 6ae4 	vcmpe.f32	s12, s9
 802cb30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cb34:	dd5a      	ble.n	802cbec <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 802cb36:	ee65 5aa5 	vmul.f32	s11, s11, s11
 802cb3a:	ee37 7a06 	vadd.f32	s14, s14, s12
 802cb3e:	eee7 5aa7 	vfma.f32	s11, s15, s15
 802cb42:	ee27 7a07 	vmul.f32	s14, s14, s14
 802cb46:	ee65 7a85 	vmul.f32	s15, s11, s10
 802cb4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802cb4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cb52:	f200 80ca 	bhi.w	802ccea <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802cb56:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802cb5a:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802cb5e:	f000 f930 	bl	802cdc2 <atan2f>
 802cb62:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802cb66:	eeb0 8a40 	vmov.f32	s16, s0
 802cb6a:	ee3f 0a69 	vsub.f32	s0, s30, s19
 802cb6e:	f000 f928 	bl	802cdc2 <atan2f>
 802cb72:	ee38 fa40 	vsub.f32	s30, s16, s0
 802cb76:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 802cb7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cb7e:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802cb82:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 802cb86:	bf48      	it	mi
 802cb88:	eeb1 fa4f 	vnegmi.f32	s30, s30
 802cb8c:	f000 f919 	bl	802cdc2 <atan2f>
 802cb90:	ee30 0a48 	vsub.f32	s0, s0, s16
 802cb94:	eddf 7a67 	vldr	s15, [pc, #412]	@ 802cd34 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802cb98:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802cb9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cba0:	eeb4 fae7 	vcmpe.f32	s30, s15
 802cba4:	bf48      	it	mi
 802cba6:	eeb1 0a40 	vnegmi.f32	s0, s0
 802cbaa:	eddf 7a62 	vldr	s15, [pc, #392]	@ 802cd34 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802cbae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cbb2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802cbb6:	bfa4      	itt	ge
 802cbb8:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 802cd38 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802cbbc:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 802cbc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cbc4:	bfa4      	itt	ge
 802cbc6:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 802cd38 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802cbca:	ee37 0a40 	vsubge.f32	s0, s14, s0
 802cbce:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 802cd3c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802cbd2:	ee3f 0a00 	vadd.f32	s0, s30, s0
 802cbd6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802cbda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cbde:	f140 8084 	bpl.w	802ccea <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802cbe2:	eef0 0a4a 	vmov.f32	s1, s20
 802cbe6:	eeb0 0a49 	vmov.f32	s0, s18
 802cbea:	e040      	b.n	802cc6e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 802cbec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802cbf0:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802cbf4:	ee27 7a07 	vmul.f32	s14, s14, s14
 802cbf8:	ee67 7a85 	vmul.f32	s15, s15, s10
 802cbfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802cc00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cc04:	d871      	bhi.n	802ccea <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802cc06:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802cc0a:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802cc0e:	f000 f8d8 	bl	802cdc2 <atan2f>
 802cc12:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802cc16:	eeb0 8a40 	vmov.f32	s16, s0
 802cc1a:	ee3f 0a69 	vsub.f32	s0, s30, s19
 802cc1e:	f000 f8d0 	bl	802cdc2 <atan2f>
 802cc22:	ee38 0a40 	vsub.f32	s0, s16, s0
 802cc26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802cc2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cc2e:	eddf 7a41 	vldr	s15, [pc, #260]	@ 802cd34 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802cc32:	bf48      	it	mi
 802cc34:	eeb1 0a40 	vnegmi.f32	s0, s0
 802cc38:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802cc3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cc40:	bfa4      	itt	ge
 802cc42:	eddf 7a3d 	vldrge	s15, [pc, #244]	@ 802cd38 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802cc46:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 802cc4a:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 802cd3c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802cc4e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802cc52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cc56:	d548      	bpl.n	802ccea <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802cc58:	eef0 0a4f 	vmov.f32	s1, s30
 802cc5c:	eeb0 0a6f 	vmov.f32	s0, s31
 802cc60:	4620      	mov	r0, r4
 802cc62:	f7ea ffab 	bl	8017bbc <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802cc66:	eef0 0a4c 	vmov.f32	s1, s24
 802cc6a:	eeb0 0a6b 	vmov.f32	s0, s23
 802cc6e:	4620      	mov	r0, r4
 802cc70:	f7ea ffa4 	bl	8017bbc <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802cc74:	b005      	add	sp, #20
 802cc76:	ecbd 8b10 	vpop	{d8-d15}
 802cc7a:	bd30      	pop	{r4, r5, pc}
 802cc7c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 802cd30 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 802cc80:	eeb4 6ac7 	vcmpe.f32	s12, s14
 802cc84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cc88:	dd19      	ble.n	802ccbe <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 802cc8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802cc8e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802cc92:	ee26 7a06 	vmul.f32	s14, s12, s12
 802cc96:	ee67 7a85 	vmul.f32	s15, s15, s10
 802cc9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802cc9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cca2:	d822      	bhi.n	802ccea <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802cca4:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802cca8:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 802ccac:	f000 f889 	bl	802cdc2 <atan2f>
 802ccb0:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802ccb4:	eeb0 8a40 	vmov.f32	s16, s0
 802ccb8:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802ccbc:	e7af      	b.n	802cc1e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 802ccbe:	ee78 7aaa 	vadd.f32	s15, s17, s21
 802ccc2:	eeb0 7a49 	vmov.f32	s14, s18
 802ccc6:	eeb0 6a4a 	vmov.f32	s12, s20
 802ccca:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802ccce:	ee79 7a8b 	vadd.f32	s15, s19, s22
 802ccd2:	eea7 6ae6 	vfms.f32	s12, s15, s13
 802ccd6:	ee66 7a06 	vmul.f32	s15, s12, s12
 802ccda:	eee7 7a07 	vfma.f32	s15, s14, s14
 802ccde:	eef4 7ac5 	vcmpe.f32	s15, s10
 802cce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cce6:	f67f af7c 	bls.w	802cbe2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 802ccea:	3501      	adds	r5, #1
 802ccec:	eef0 0a69 	vmov.f32	s1, s19
 802ccf0:	eeb0 0a68 	vmov.f32	s0, s17
 802ccf4:	4629      	mov	r1, r5
 802ccf6:	eef0 3a4a 	vmov.f32	s7, s20
 802ccfa:	eeb0 3a49 	vmov.f32	s6, s18
 802ccfe:	eef0 2a6e 	vmov.f32	s5, s29
 802cd02:	eeb0 2a4e 	vmov.f32	s4, s28
 802cd06:	eef0 1a6d 	vmov.f32	s3, s27
 802cd0a:	eeb0 1a4d 	vmov.f32	s2, s26
 802cd0e:	4620      	mov	r0, r4
 802cd10:	f7ff fe84 	bl	802ca1c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 802cd14:	eeb0 ca6c 	vmov.f32	s24, s25
 802cd18:	eddd ba01 	vldr	s23, [sp, #4]
 802cd1c:	ed9d fa02 	vldr	s30, [sp, #8]
 802cd20:	eddd fa03 	vldr	s31, [sp, #12]
 802cd24:	eef0 9a4a 	vmov.f32	s19, s20
 802cd28:	eef0 8a49 	vmov.f32	s17, s18
 802cd2c:	e68c      	b.n	802ca48 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 802cd2e:	bf00      	nop
 802cd30:	2edbe6ff 	.word	0x2edbe6ff
 802cd34:	40490fdb 	.word	0x40490fdb
 802cd38:	40c90fdb 	.word	0x40c90fdb
 802cd3c:	3dcccccd 	.word	0x3dcccccd

0802cd40 <_ZN8touchgfx6CanvasD1Ev>:
 802cd40:	b510      	push	{r4, lr}
 802cd42:	4604      	mov	r4, r0
 802cd44:	4b03      	ldr	r3, [pc, #12]	@ (802cd54 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802cd46:	f840 3b14 	str.w	r3, [r0], #20
 802cd4a:	f7eb fe7b 	bl	8018a44 <_ZN8touchgfx7OutlineD1Ev>
 802cd4e:	4620      	mov	r0, r4
 802cd50:	bd10      	pop	{r4, pc}
 802cd52:	bf00      	nop
 802cd54:	08031424 	.word	0x08031424

0802cd58 <_ZN8touchgfx6CanvasD0Ev>:
 802cd58:	b510      	push	{r4, lr}
 802cd5a:	4604      	mov	r4, r0
 802cd5c:	f7ff fff0 	bl	802cd40 <_ZN8touchgfx6CanvasD1Ev>
 802cd60:	4620      	mov	r0, r4
 802cd62:	2174      	movs	r1, #116	@ 0x74
 802cd64:	f000 f807 	bl	802cd76 <_ZdlPvj>
 802cd68:	4620      	mov	r0, r4
 802cd6a:	bd10      	pop	{r4, pc}

0802cd6c <__aeabi_atexit>:
 802cd6c:	460b      	mov	r3, r1
 802cd6e:	4601      	mov	r1, r0
 802cd70:	4618      	mov	r0, r3
 802cd72:	f000 bfd7 	b.w	802dd24 <__cxa_atexit>

0802cd76 <_ZdlPvj>:
 802cd76:	f000 b812 	b.w	802cd9e <_ZdlPv>

0802cd7a <__cxa_guard_acquire>:
 802cd7a:	6802      	ldr	r2, [r0, #0]
 802cd7c:	4603      	mov	r3, r0
 802cd7e:	07d2      	lsls	r2, r2, #31
 802cd80:	d405      	bmi.n	802cd8e <__cxa_guard_acquire+0x14>
 802cd82:	7842      	ldrb	r2, [r0, #1]
 802cd84:	b102      	cbz	r2, 802cd88 <__cxa_guard_acquire+0xe>
 802cd86:	deff      	udf	#255	@ 0xff
 802cd88:	2001      	movs	r0, #1
 802cd8a:	7058      	strb	r0, [r3, #1]
 802cd8c:	4770      	bx	lr
 802cd8e:	2000      	movs	r0, #0
 802cd90:	4770      	bx	lr

0802cd92 <__cxa_guard_release>:
 802cd92:	2301      	movs	r3, #1
 802cd94:	6003      	str	r3, [r0, #0]
 802cd96:	4770      	bx	lr

0802cd98 <__cxa_pure_virtual>:
 802cd98:	b508      	push	{r3, lr}
 802cd9a:	f000 f80d 	bl	802cdb8 <_ZSt9terminatev>

0802cd9e <_ZdlPv>:
 802cd9e:	f000 bf0b 	b.w	802dbb8 <free>

0802cda2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802cda2:	b508      	push	{r3, lr}
 802cda4:	4780      	blx	r0
 802cda6:	f000 fed4 	bl	802db52 <abort>
	...

0802cdac <_ZSt13get_terminatev>:
 802cdac:	4b01      	ldr	r3, [pc, #4]	@ (802cdb4 <_ZSt13get_terminatev+0x8>)
 802cdae:	e8d3 0faf 	lda	r0, [r3]
 802cdb2:	4770      	bx	lr
 802cdb4:	20000098 	.word	0x20000098

0802cdb8 <_ZSt9terminatev>:
 802cdb8:	b508      	push	{r3, lr}
 802cdba:	f7ff fff7 	bl	802cdac <_ZSt13get_terminatev>
 802cdbe:	f7ff fff0 	bl	802cda2 <_ZN10__cxxabiv111__terminateEPFvvE>

0802cdc2 <atan2f>:
 802cdc2:	f000 b94d 	b.w	802d060 <__ieee754_atan2f>
	...

0802cdc8 <sqrtf>:
 802cdc8:	b508      	push	{r3, lr}
 802cdca:	ed2d 8b02 	vpush	{d8}
 802cdce:	eeb0 8a40 	vmov.f32	s16, s0
 802cdd2:	f000 f8a1 	bl	802cf18 <__ieee754_sqrtf>
 802cdd6:	eeb4 8a48 	vcmp.f32	s16, s16
 802cdda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cdde:	d60c      	bvs.n	802cdfa <sqrtf+0x32>
 802cde0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 802ce00 <sqrtf+0x38>
 802cde4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802cde8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cdec:	d505      	bpl.n	802cdfa <sqrtf+0x32>
 802cdee:	f001 fa65 	bl	802e2bc <__errno>
 802cdf2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802cdf6:	2321      	movs	r3, #33	@ 0x21
 802cdf8:	6003      	str	r3, [r0, #0]
 802cdfa:	ecbd 8b02 	vpop	{d8}
 802cdfe:	bd08      	pop	{r3, pc}
 802ce00:	00000000 	.word	0x00000000

0802ce04 <cosf>:
 802ce04:	ee10 3a10 	vmov	r3, s0
 802ce08:	b507      	push	{r0, r1, r2, lr}
 802ce0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802ce0e:	4a1d      	ldr	r2, [pc, #116]	@ (802ce84 <cosf+0x80>)
 802ce10:	4293      	cmp	r3, r2
 802ce12:	d806      	bhi.n	802ce22 <cosf+0x1e>
 802ce14:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 802ce88 <cosf+0x84>
 802ce18:	b003      	add	sp, #12
 802ce1a:	f85d eb04 	ldr.w	lr, [sp], #4
 802ce1e:	f000 b87f 	b.w	802cf20 <__kernel_cosf>
 802ce22:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802ce26:	d304      	bcc.n	802ce32 <cosf+0x2e>
 802ce28:	ee30 0a40 	vsub.f32	s0, s0, s0
 802ce2c:	b003      	add	sp, #12
 802ce2e:	f85d fb04 	ldr.w	pc, [sp], #4
 802ce32:	4668      	mov	r0, sp
 802ce34:	f000 f9b2 	bl	802d19c <__ieee754_rem_pio2f>
 802ce38:	f000 0003 	and.w	r0, r0, #3
 802ce3c:	2801      	cmp	r0, #1
 802ce3e:	d009      	beq.n	802ce54 <cosf+0x50>
 802ce40:	2802      	cmp	r0, #2
 802ce42:	d010      	beq.n	802ce66 <cosf+0x62>
 802ce44:	b9b0      	cbnz	r0, 802ce74 <cosf+0x70>
 802ce46:	eddd 0a01 	vldr	s1, [sp, #4]
 802ce4a:	ed9d 0a00 	vldr	s0, [sp]
 802ce4e:	f000 f867 	bl	802cf20 <__kernel_cosf>
 802ce52:	e7eb      	b.n	802ce2c <cosf+0x28>
 802ce54:	eddd 0a01 	vldr	s1, [sp, #4]
 802ce58:	ed9d 0a00 	vldr	s0, [sp]
 802ce5c:	f000 f8b8 	bl	802cfd0 <__kernel_sinf>
 802ce60:	eeb1 0a40 	vneg.f32	s0, s0
 802ce64:	e7e2      	b.n	802ce2c <cosf+0x28>
 802ce66:	eddd 0a01 	vldr	s1, [sp, #4]
 802ce6a:	ed9d 0a00 	vldr	s0, [sp]
 802ce6e:	f000 f857 	bl	802cf20 <__kernel_cosf>
 802ce72:	e7f5      	b.n	802ce60 <cosf+0x5c>
 802ce74:	2001      	movs	r0, #1
 802ce76:	eddd 0a01 	vldr	s1, [sp, #4]
 802ce7a:	ed9d 0a00 	vldr	s0, [sp]
 802ce7e:	f000 f8a7 	bl	802cfd0 <__kernel_sinf>
 802ce82:	e7d3      	b.n	802ce2c <cosf+0x28>
 802ce84:	3f490fd8 	.word	0x3f490fd8
 802ce88:	00000000 	.word	0x00000000

0802ce8c <sinf>:
 802ce8c:	ee10 3a10 	vmov	r3, s0
 802ce90:	b507      	push	{r0, r1, r2, lr}
 802ce92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802ce96:	4a1e      	ldr	r2, [pc, #120]	@ (802cf10 <sinf+0x84>)
 802ce98:	4293      	cmp	r3, r2
 802ce9a:	d807      	bhi.n	802ceac <sinf+0x20>
 802ce9c:	2000      	movs	r0, #0
 802ce9e:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 802cf14 <sinf+0x88>
 802cea2:	b003      	add	sp, #12
 802cea4:	f85d eb04 	ldr.w	lr, [sp], #4
 802cea8:	f000 b892 	b.w	802cfd0 <__kernel_sinf>
 802ceac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802ceb0:	d304      	bcc.n	802cebc <sinf+0x30>
 802ceb2:	ee30 0a40 	vsub.f32	s0, s0, s0
 802ceb6:	b003      	add	sp, #12
 802ceb8:	f85d fb04 	ldr.w	pc, [sp], #4
 802cebc:	4668      	mov	r0, sp
 802cebe:	f000 f96d 	bl	802d19c <__ieee754_rem_pio2f>
 802cec2:	f000 0003 	and.w	r0, r0, #3
 802cec6:	2801      	cmp	r0, #1
 802cec8:	d00a      	beq.n	802cee0 <sinf+0x54>
 802ceca:	2802      	cmp	r0, #2
 802cecc:	d00f      	beq.n	802ceee <sinf+0x62>
 802cece:	b9c0      	cbnz	r0, 802cf02 <sinf+0x76>
 802ced0:	2001      	movs	r0, #1
 802ced2:	eddd 0a01 	vldr	s1, [sp, #4]
 802ced6:	ed9d 0a00 	vldr	s0, [sp]
 802ceda:	f000 f879 	bl	802cfd0 <__kernel_sinf>
 802cede:	e7ea      	b.n	802ceb6 <sinf+0x2a>
 802cee0:	eddd 0a01 	vldr	s1, [sp, #4]
 802cee4:	ed9d 0a00 	vldr	s0, [sp]
 802cee8:	f000 f81a 	bl	802cf20 <__kernel_cosf>
 802ceec:	e7e3      	b.n	802ceb6 <sinf+0x2a>
 802ceee:	2001      	movs	r0, #1
 802cef0:	eddd 0a01 	vldr	s1, [sp, #4]
 802cef4:	ed9d 0a00 	vldr	s0, [sp]
 802cef8:	f000 f86a 	bl	802cfd0 <__kernel_sinf>
 802cefc:	eeb1 0a40 	vneg.f32	s0, s0
 802cf00:	e7d9      	b.n	802ceb6 <sinf+0x2a>
 802cf02:	eddd 0a01 	vldr	s1, [sp, #4]
 802cf06:	ed9d 0a00 	vldr	s0, [sp]
 802cf0a:	f000 f809 	bl	802cf20 <__kernel_cosf>
 802cf0e:	e7f5      	b.n	802cefc <sinf+0x70>
 802cf10:	3f490fd8 	.word	0x3f490fd8
 802cf14:	00000000 	.word	0x00000000

0802cf18 <__ieee754_sqrtf>:
 802cf18:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802cf1c:	4770      	bx	lr
	...

0802cf20 <__kernel_cosf>:
 802cf20:	ee10 3a10 	vmov	r3, s0
 802cf24:	eef0 6a40 	vmov.f32	s13, s0
 802cf28:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802cf2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802cf30:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802cf34:	d204      	bcs.n	802cf40 <__kernel_cosf+0x20>
 802cf36:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 802cf3a:	ee17 2a90 	vmov	r2, s15
 802cf3e:	b342      	cbz	r2, 802cf92 <__kernel_cosf+0x72>
 802cf40:	ee26 7aa6 	vmul.f32	s14, s13, s13
 802cf44:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 802cfb0 <__kernel_cosf+0x90>
 802cf48:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 802cfb4 <__kernel_cosf+0x94>
 802cf4c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 802cf50:	4a19      	ldr	r2, [pc, #100]	@ (802cfb8 <__kernel_cosf+0x98>)
 802cf52:	eea7 6a27 	vfma.f32	s12, s14, s15
 802cf56:	eddf 7a19 	vldr	s15, [pc, #100]	@ 802cfbc <__kernel_cosf+0x9c>
 802cf5a:	4293      	cmp	r3, r2
 802cf5c:	eee6 7a07 	vfma.f32	s15, s12, s14
 802cf60:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 802cfc0 <__kernel_cosf+0xa0>
 802cf64:	eea7 6a87 	vfma.f32	s12, s15, s14
 802cf68:	eddf 7a16 	vldr	s15, [pc, #88]	@ 802cfc4 <__kernel_cosf+0xa4>
 802cf6c:	eee6 7a07 	vfma.f32	s15, s12, s14
 802cf70:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 802cfc8 <__kernel_cosf+0xa8>
 802cf74:	eea7 6a87 	vfma.f32	s12, s15, s14
 802cf78:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802cf7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 802cf80:	ee26 6a07 	vmul.f32	s12, s12, s14
 802cf84:	eee7 0a06 	vfma.f32	s1, s14, s12
 802cf88:	d804      	bhi.n	802cf94 <__kernel_cosf+0x74>
 802cf8a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802cf8e:	ee30 0a67 	vsub.f32	s0, s0, s15
 802cf92:	4770      	bx	lr
 802cf94:	4a0d      	ldr	r2, [pc, #52]	@ (802cfcc <__kernel_cosf+0xac>)
 802cf96:	4293      	cmp	r3, r2
 802cf98:	bf96      	itet	ls
 802cf9a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 802cf9e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 802cfa2:	ee07 3a10 	vmovls	s14, r3
 802cfa6:	ee30 0a47 	vsub.f32	s0, s0, s14
 802cfaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802cfae:	e7ec      	b.n	802cf8a <__kernel_cosf+0x6a>
 802cfb0:	ad47d74e 	.word	0xad47d74e
 802cfb4:	310f74f6 	.word	0x310f74f6
 802cfb8:	3e999999 	.word	0x3e999999
 802cfbc:	b493f27c 	.word	0xb493f27c
 802cfc0:	37d00d01 	.word	0x37d00d01
 802cfc4:	bab60b61 	.word	0xbab60b61
 802cfc8:	3d2aaaab 	.word	0x3d2aaaab
 802cfcc:	3f480000 	.word	0x3f480000

0802cfd0 <__kernel_sinf>:
 802cfd0:	ee10 3a10 	vmov	r3, s0
 802cfd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802cfd8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802cfdc:	d204      	bcs.n	802cfe8 <__kernel_sinf+0x18>
 802cfde:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802cfe2:	ee17 3a90 	vmov	r3, s15
 802cfe6:	b35b      	cbz	r3, 802d040 <__kernel_sinf+0x70>
 802cfe8:	ee20 7a00 	vmul.f32	s14, s0, s0
 802cfec:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802d044 <__kernel_sinf+0x74>
 802cff0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 802d048 <__kernel_sinf+0x78>
 802cff4:	eea7 6a27 	vfma.f32	s12, s14, s15
 802cff8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 802d04c <__kernel_sinf+0x7c>
 802cffc:	ee60 6a07 	vmul.f32	s13, s0, s14
 802d000:	eee6 7a07 	vfma.f32	s15, s12, s14
 802d004:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 802d050 <__kernel_sinf+0x80>
 802d008:	eea7 6a87 	vfma.f32	s12, s15, s14
 802d00c:	eddf 7a11 	vldr	s15, [pc, #68]	@ 802d054 <__kernel_sinf+0x84>
 802d010:	eee6 7a07 	vfma.f32	s15, s12, s14
 802d014:	b930      	cbnz	r0, 802d024 <__kernel_sinf+0x54>
 802d016:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 802d058 <__kernel_sinf+0x88>
 802d01a:	eea7 6a27 	vfma.f32	s12, s14, s15
 802d01e:	eea6 0a26 	vfma.f32	s0, s12, s13
 802d022:	4770      	bx	lr
 802d024:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802d028:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 802d02c:	eee0 7a86 	vfma.f32	s15, s1, s12
 802d030:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802d034:	eddf 7a09 	vldr	s15, [pc, #36]	@ 802d05c <__kernel_sinf+0x8c>
 802d038:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802d03c:	ee30 0a60 	vsub.f32	s0, s0, s1
 802d040:	4770      	bx	lr
 802d042:	bf00      	nop
 802d044:	2f2ec9d3 	.word	0x2f2ec9d3
 802d048:	b2d72f34 	.word	0xb2d72f34
 802d04c:	3638ef1b 	.word	0x3638ef1b
 802d050:	b9500d01 	.word	0xb9500d01
 802d054:	3c088889 	.word	0x3c088889
 802d058:	be2aaaab 	.word	0xbe2aaaab
 802d05c:	3e2aaaab 	.word	0x3e2aaaab

0802d060 <__ieee754_atan2f>:
 802d060:	ee10 2a90 	vmov	r2, s1
 802d064:	eef0 7a40 	vmov.f32	s15, s0
 802d068:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 802d06c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802d070:	b510      	push	{r4, lr}
 802d072:	d806      	bhi.n	802d082 <__ieee754_atan2f+0x22>
 802d074:	ee10 0a10 	vmov	r0, s0
 802d078:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 802d07c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802d080:	d904      	bls.n	802d08c <__ieee754_atan2f+0x2c>
 802d082:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802d086:	eeb0 0a67 	vmov.f32	s0, s15
 802d08a:	bd10      	pop	{r4, pc}
 802d08c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 802d090:	d103      	bne.n	802d09a <__ieee754_atan2f+0x3a>
 802d092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d096:	f000 b9af 	b.w	802d3f8 <atanf>
 802d09a:	1794      	asrs	r4, r2, #30
 802d09c:	f004 0402 	and.w	r4, r4, #2
 802d0a0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 802d0a4:	b93b      	cbnz	r3, 802d0b6 <__ieee754_atan2f+0x56>
 802d0a6:	2c02      	cmp	r4, #2
 802d0a8:	d05c      	beq.n	802d164 <__ieee754_atan2f+0x104>
 802d0aa:	2c03      	cmp	r4, #3
 802d0ac:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802d178 <__ieee754_atan2f+0x118>
 802d0b0:	fe47 7a00 	vseleq.f32	s15, s14, s0
 802d0b4:	e7e7      	b.n	802d086 <__ieee754_atan2f+0x26>
 802d0b6:	b939      	cbnz	r1, 802d0c8 <__ieee754_atan2f+0x68>
 802d0b8:	2800      	cmp	r0, #0
 802d0ba:	eddf 7a30 	vldr	s15, [pc, #192]	@ 802d17c <__ieee754_atan2f+0x11c>
 802d0be:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802d180 <__ieee754_atan2f+0x120>
 802d0c2:	fe67 7a27 	vselge.f32	s15, s14, s15
 802d0c6:	e7de      	b.n	802d086 <__ieee754_atan2f+0x26>
 802d0c8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802d0cc:	d110      	bne.n	802d0f0 <__ieee754_atan2f+0x90>
 802d0ce:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802d0d2:	f104 34ff 	add.w	r4, r4, #4294967295
 802d0d6:	d107      	bne.n	802d0e8 <__ieee754_atan2f+0x88>
 802d0d8:	2c02      	cmp	r4, #2
 802d0da:	d846      	bhi.n	802d16a <__ieee754_atan2f+0x10a>
 802d0dc:	4b29      	ldr	r3, [pc, #164]	@ (802d184 <__ieee754_atan2f+0x124>)
 802d0de:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802d0e2:	edd3 7a00 	vldr	s15, [r3]
 802d0e6:	e7ce      	b.n	802d086 <__ieee754_atan2f+0x26>
 802d0e8:	2c02      	cmp	r4, #2
 802d0ea:	d841      	bhi.n	802d170 <__ieee754_atan2f+0x110>
 802d0ec:	4b26      	ldr	r3, [pc, #152]	@ (802d188 <__ieee754_atan2f+0x128>)
 802d0ee:	e7f6      	b.n	802d0de <__ieee754_atan2f+0x7e>
 802d0f0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802d0f4:	d0e0      	beq.n	802d0b8 <__ieee754_atan2f+0x58>
 802d0f6:	1a5b      	subs	r3, r3, r1
 802d0f8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 802d0fc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 802d100:	da1a      	bge.n	802d138 <__ieee754_atan2f+0xd8>
 802d102:	2a00      	cmp	r2, #0
 802d104:	da01      	bge.n	802d10a <__ieee754_atan2f+0xaa>
 802d106:	313c      	adds	r1, #60	@ 0x3c
 802d108:	db19      	blt.n	802d13e <__ieee754_atan2f+0xde>
 802d10a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802d10e:	f000 fa47 	bl	802d5a0 <fabsf>
 802d112:	f000 f971 	bl	802d3f8 <atanf>
 802d116:	eef0 7a40 	vmov.f32	s15, s0
 802d11a:	2c01      	cmp	r4, #1
 802d11c:	d012      	beq.n	802d144 <__ieee754_atan2f+0xe4>
 802d11e:	2c02      	cmp	r4, #2
 802d120:	d017      	beq.n	802d152 <__ieee754_atan2f+0xf2>
 802d122:	2c00      	cmp	r4, #0
 802d124:	d0af      	beq.n	802d086 <__ieee754_atan2f+0x26>
 802d126:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 802d18c <__ieee754_atan2f+0x12c>
 802d12a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802d12e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 802d190 <__ieee754_atan2f+0x130>
 802d132:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d136:	e7a6      	b.n	802d086 <__ieee754_atan2f+0x26>
 802d138:	eddf 7a11 	vldr	s15, [pc, #68]	@ 802d180 <__ieee754_atan2f+0x120>
 802d13c:	e7ed      	b.n	802d11a <__ieee754_atan2f+0xba>
 802d13e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802d194 <__ieee754_atan2f+0x134>
 802d142:	e7ea      	b.n	802d11a <__ieee754_atan2f+0xba>
 802d144:	ee17 3a90 	vmov	r3, s15
 802d148:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802d14c:	ee07 3a90 	vmov	s15, r3
 802d150:	e799      	b.n	802d086 <__ieee754_atan2f+0x26>
 802d152:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 802d18c <__ieee754_atan2f+0x12c>
 802d156:	ee77 7a87 	vadd.f32	s15, s15, s14
 802d15a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 802d190 <__ieee754_atan2f+0x130>
 802d15e:	ee77 7a67 	vsub.f32	s15, s14, s15
 802d162:	e790      	b.n	802d086 <__ieee754_atan2f+0x26>
 802d164:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 802d190 <__ieee754_atan2f+0x130>
 802d168:	e78d      	b.n	802d086 <__ieee754_atan2f+0x26>
 802d16a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 802d198 <__ieee754_atan2f+0x138>
 802d16e:	e78a      	b.n	802d086 <__ieee754_atan2f+0x26>
 802d170:	eddf 7a08 	vldr	s15, [pc, #32]	@ 802d194 <__ieee754_atan2f+0x134>
 802d174:	e787      	b.n	802d086 <__ieee754_atan2f+0x26>
 802d176:	bf00      	nop
 802d178:	c0490fdb 	.word	0xc0490fdb
 802d17c:	bfc90fdb 	.word	0xbfc90fdb
 802d180:	3fc90fdb 	.word	0x3fc90fdb
 802d184:	0803143c 	.word	0x0803143c
 802d188:	08031430 	.word	0x08031430
 802d18c:	33bbbd2e 	.word	0x33bbbd2e
 802d190:	40490fdb 	.word	0x40490fdb
 802d194:	00000000 	.word	0x00000000
 802d198:	3f490fdb 	.word	0x3f490fdb

0802d19c <__ieee754_rem_pio2f>:
 802d19c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d19e:	ee10 6a10 	vmov	r6, s0
 802d1a2:	4b87      	ldr	r3, [pc, #540]	@ (802d3c0 <__ieee754_rem_pio2f+0x224>)
 802d1a4:	b087      	sub	sp, #28
 802d1a6:	4604      	mov	r4, r0
 802d1a8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 802d1ac:	429d      	cmp	r5, r3
 802d1ae:	d805      	bhi.n	802d1bc <__ieee754_rem_pio2f+0x20>
 802d1b0:	2300      	movs	r3, #0
 802d1b2:	ed80 0a00 	vstr	s0, [r0]
 802d1b6:	6043      	str	r3, [r0, #4]
 802d1b8:	2000      	movs	r0, #0
 802d1ba:	e022      	b.n	802d202 <__ieee754_rem_pio2f+0x66>
 802d1bc:	4b81      	ldr	r3, [pc, #516]	@ (802d3c4 <__ieee754_rem_pio2f+0x228>)
 802d1be:	429d      	cmp	r5, r3
 802d1c0:	d83a      	bhi.n	802d238 <__ieee754_rem_pio2f+0x9c>
 802d1c2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802d1c6:	2e00      	cmp	r6, #0
 802d1c8:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 802d3c8 <__ieee754_rem_pio2f+0x22c>
 802d1cc:	f023 030f 	bic.w	r3, r3, #15
 802d1d0:	4a7e      	ldr	r2, [pc, #504]	@ (802d3cc <__ieee754_rem_pio2f+0x230>)
 802d1d2:	dd18      	ble.n	802d206 <__ieee754_rem_pio2f+0x6a>
 802d1d4:	4293      	cmp	r3, r2
 802d1d6:	ee70 7a47 	vsub.f32	s15, s0, s14
 802d1da:	bf09      	itett	eq
 802d1dc:	ed9f 7a7c 	vldreq	s14, [pc, #496]	@ 802d3d0 <__ieee754_rem_pio2f+0x234>
 802d1e0:	eddf 6a7c 	vldrne	s13, [pc, #496]	@ 802d3d4 <__ieee754_rem_pio2f+0x238>
 802d1e4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 802d1e8:	eddf 6a7b 	vldreq	s13, [pc, #492]	@ 802d3d8 <__ieee754_rem_pio2f+0x23c>
 802d1ec:	ee37 7ae6 	vsub.f32	s14, s15, s13
 802d1f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d1f4:	ed80 7a00 	vstr	s14, [r0]
 802d1f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802d1fc:	edc0 7a01 	vstr	s15, [r0, #4]
 802d200:	2001      	movs	r0, #1
 802d202:	b007      	add	sp, #28
 802d204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d206:	4293      	cmp	r3, r2
 802d208:	ee70 7a07 	vadd.f32	s15, s0, s14
 802d20c:	bf09      	itett	eq
 802d20e:	ed9f 7a70 	vldreq	s14, [pc, #448]	@ 802d3d0 <__ieee754_rem_pio2f+0x234>
 802d212:	eddf 6a70 	vldrne	s13, [pc, #448]	@ 802d3d4 <__ieee754_rem_pio2f+0x238>
 802d216:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 802d21a:	eddf 6a6f 	vldreq	s13, [pc, #444]	@ 802d3d8 <__ieee754_rem_pio2f+0x23c>
 802d21e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802d222:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d226:	ed80 7a00 	vstr	s14, [r0]
 802d22a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d22e:	edc0 7a01 	vstr	s15, [r0, #4]
 802d232:	f04f 30ff 	mov.w	r0, #4294967295
 802d236:	e7e4      	b.n	802d202 <__ieee754_rem_pio2f+0x66>
 802d238:	4b68      	ldr	r3, [pc, #416]	@ (802d3dc <__ieee754_rem_pio2f+0x240>)
 802d23a:	429d      	cmp	r5, r3
 802d23c:	d872      	bhi.n	802d324 <__ieee754_rem_pio2f+0x188>
 802d23e:	f000 f9af 	bl	802d5a0 <fabsf>
 802d242:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802d246:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 802d3e0 <__ieee754_rem_pio2f+0x244>
 802d24a:	eee0 7a07 	vfma.f32	s15, s0, s14
 802d24e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802d256:	ee17 0a90 	vmov	r0, s15
 802d25a:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 802d3c8 <__ieee754_rem_pio2f+0x22c>
 802d25e:	281f      	cmp	r0, #31
 802d260:	eea7 0a67 	vfms.f32	s0, s14, s15
 802d264:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 802d3d4 <__ieee754_rem_pio2f+0x238>
 802d268:	eeb1 6a47 	vneg.f32	s12, s14
 802d26c:	ee67 7a27 	vmul.f32	s15, s14, s15
 802d270:	ee70 6a67 	vsub.f32	s13, s0, s15
 802d274:	ee16 1a90 	vmov	r1, s13
 802d278:	dc09      	bgt.n	802d28e <__ieee754_rem_pio2f+0xf2>
 802d27a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802d27e:	1e47      	subs	r7, r0, #1
 802d280:	4a58      	ldr	r2, [pc, #352]	@ (802d3e4 <__ieee754_rem_pio2f+0x248>)
 802d282:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 802d286:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 802d28a:	4293      	cmp	r3, r2
 802d28c:	d106      	bne.n	802d29c <__ieee754_rem_pio2f+0x100>
 802d28e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 802d292:	15eb      	asrs	r3, r5, #23
 802d294:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 802d298:	2a08      	cmp	r2, #8
 802d29a:	dc14      	bgt.n	802d2c6 <__ieee754_rem_pio2f+0x12a>
 802d29c:	6021      	str	r1, [r4, #0]
 802d29e:	ed94 7a00 	vldr	s14, [r4]
 802d2a2:	2e00      	cmp	r6, #0
 802d2a4:	ee30 0a47 	vsub.f32	s0, s0, s14
 802d2a8:	ee30 0a67 	vsub.f32	s0, s0, s15
 802d2ac:	ed84 0a01 	vstr	s0, [r4, #4]
 802d2b0:	daa7      	bge.n	802d202 <__ieee754_rem_pio2f+0x66>
 802d2b2:	eeb1 7a47 	vneg.f32	s14, s14
 802d2b6:	eeb1 0a40 	vneg.f32	s0, s0
 802d2ba:	ed84 7a00 	vstr	s14, [r4]
 802d2be:	ed84 0a01 	vstr	s0, [r4, #4]
 802d2c2:	4240      	negs	r0, r0
 802d2c4:	e79d      	b.n	802d202 <__ieee754_rem_pio2f+0x66>
 802d2c6:	eef0 6a40 	vmov.f32	s13, s0
 802d2ca:	eddf 5a41 	vldr	s11, [pc, #260]	@ 802d3d0 <__ieee754_rem_pio2f+0x234>
 802d2ce:	eee6 6a25 	vfma.f32	s13, s12, s11
 802d2d2:	ee70 7a66 	vsub.f32	s15, s0, s13
 802d2d6:	eee6 7a25 	vfma.f32	s15, s12, s11
 802d2da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 802d3d8 <__ieee754_rem_pio2f+0x23c>
 802d2de:	eed7 7a25 	vfnms.f32	s15, s14, s11
 802d2e2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 802d2e6:	ee15 2a90 	vmov	r2, s11
 802d2ea:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802d2ee:	1a5b      	subs	r3, r3, r1
 802d2f0:	2b19      	cmp	r3, #25
 802d2f2:	dc04      	bgt.n	802d2fe <__ieee754_rem_pio2f+0x162>
 802d2f4:	eeb0 0a66 	vmov.f32	s0, s13
 802d2f8:	edc4 5a00 	vstr	s11, [r4]
 802d2fc:	e7cf      	b.n	802d29e <__ieee754_rem_pio2f+0x102>
 802d2fe:	eeb0 0a66 	vmov.f32	s0, s13
 802d302:	eddf 5a39 	vldr	s11, [pc, #228]	@ 802d3e8 <__ieee754_rem_pio2f+0x24c>
 802d306:	eea6 0a25 	vfma.f32	s0, s12, s11
 802d30a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802d30e:	eddf 6a37 	vldr	s13, [pc, #220]	@ 802d3ec <__ieee754_rem_pio2f+0x250>
 802d312:	eee6 7a25 	vfma.f32	s15, s12, s11
 802d316:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802d31a:	ee30 7a67 	vsub.f32	s14, s0, s15
 802d31e:	ed84 7a00 	vstr	s14, [r4]
 802d322:	e7bc      	b.n	802d29e <__ieee754_rem_pio2f+0x102>
 802d324:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 802d328:	d306      	bcc.n	802d338 <__ieee754_rem_pio2f+0x19c>
 802d32a:	ee70 7a40 	vsub.f32	s15, s0, s0
 802d32e:	edc0 7a01 	vstr	s15, [r0, #4]
 802d332:	edc0 7a00 	vstr	s15, [r0]
 802d336:	e73f      	b.n	802d1b8 <__ieee754_rem_pio2f+0x1c>
 802d338:	15ea      	asrs	r2, r5, #23
 802d33a:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 802d3f0 <__ieee754_rem_pio2f+0x254>
 802d33e:	3a86      	subs	r2, #134	@ 0x86
 802d340:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802d344:	ee07 3a90 	vmov	s15, r3
 802d348:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802d34c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802d350:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d354:	ed8d 7a03 	vstr	s14, [sp, #12]
 802d358:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802d35c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802d360:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802d364:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d368:	ed8d 7a04 	vstr	s14, [sp, #16]
 802d36c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802d370:	eef5 7a40 	vcmp.f32	s15, #0.0
 802d374:	edcd 7a05 	vstr	s15, [sp, #20]
 802d378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d37c:	d11e      	bne.n	802d3bc <__ieee754_rem_pio2f+0x220>
 802d37e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802d382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d386:	bf0c      	ite	eq
 802d388:	2301      	moveq	r3, #1
 802d38a:	2302      	movne	r3, #2
 802d38c:	4919      	ldr	r1, [pc, #100]	@ (802d3f4 <__ieee754_rem_pio2f+0x258>)
 802d38e:	a803      	add	r0, sp, #12
 802d390:	9101      	str	r1, [sp, #4]
 802d392:	2102      	movs	r1, #2
 802d394:	9100      	str	r1, [sp, #0]
 802d396:	4621      	mov	r1, r4
 802d398:	f000 f96e 	bl	802d678 <__kernel_rem_pio2f>
 802d39c:	2e00      	cmp	r6, #0
 802d39e:	f6bf af30 	bge.w	802d202 <__ieee754_rem_pio2f+0x66>
 802d3a2:	edd4 7a00 	vldr	s15, [r4]
 802d3a6:	eef1 7a67 	vneg.f32	s15, s15
 802d3aa:	edc4 7a00 	vstr	s15, [r4]
 802d3ae:	edd4 7a01 	vldr	s15, [r4, #4]
 802d3b2:	eef1 7a67 	vneg.f32	s15, s15
 802d3b6:	edc4 7a01 	vstr	s15, [r4, #4]
 802d3ba:	e782      	b.n	802d2c2 <__ieee754_rem_pio2f+0x126>
 802d3bc:	2303      	movs	r3, #3
 802d3be:	e7e5      	b.n	802d38c <__ieee754_rem_pio2f+0x1f0>
 802d3c0:	3f490fd8 	.word	0x3f490fd8
 802d3c4:	4016cbe3 	.word	0x4016cbe3
 802d3c8:	3fc90f80 	.word	0x3fc90f80
 802d3cc:	3fc90fd0 	.word	0x3fc90fd0
 802d3d0:	37354400 	.word	0x37354400
 802d3d4:	37354443 	.word	0x37354443
 802d3d8:	2e85a308 	.word	0x2e85a308
 802d3dc:	43490f80 	.word	0x43490f80
 802d3e0:	3f22f984 	.word	0x3f22f984
 802d3e4:	08031448 	.word	0x08031448
 802d3e8:	2e85a300 	.word	0x2e85a300
 802d3ec:	248d3132 	.word	0x248d3132
 802d3f0:	43800000 	.word	0x43800000
 802d3f4:	080314c8 	.word	0x080314c8

0802d3f8 <atanf>:
 802d3f8:	b538      	push	{r3, r4, r5, lr}
 802d3fa:	ee10 5a10 	vmov	r5, s0
 802d3fe:	eef0 7a40 	vmov.f32	s15, s0
 802d402:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 802d406:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 802d40a:	d30f      	bcc.n	802d42c <atanf+0x34>
 802d40c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 802d410:	d904      	bls.n	802d41c <atanf+0x24>
 802d412:	ee70 7a00 	vadd.f32	s15, s0, s0
 802d416:	eeb0 0a67 	vmov.f32	s0, s15
 802d41a:	bd38      	pop	{r3, r4, r5, pc}
 802d41c:	2d00      	cmp	r5, #0
 802d41e:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 802d554 <atanf+0x15c>
 802d422:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 802d558 <atanf+0x160>
 802d426:	fe77 7a27 	vselgt.f32	s15, s14, s15
 802d42a:	e7f4      	b.n	802d416 <atanf+0x1e>
 802d42c:	4b4b      	ldr	r3, [pc, #300]	@ (802d55c <atanf+0x164>)
 802d42e:	429c      	cmp	r4, r3
 802d430:	d810      	bhi.n	802d454 <atanf+0x5c>
 802d432:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 802d436:	d20a      	bcs.n	802d44e <atanf+0x56>
 802d438:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 802d560 <atanf+0x168>
 802d43c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802d440:	ee30 7a07 	vadd.f32	s14, s0, s14
 802d444:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802d448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d44c:	dce3      	bgt.n	802d416 <atanf+0x1e>
 802d44e:	f04f 33ff 	mov.w	r3, #4294967295
 802d452:	e013      	b.n	802d47c <atanf+0x84>
 802d454:	f000 f8a4 	bl	802d5a0 <fabsf>
 802d458:	4b42      	ldr	r3, [pc, #264]	@ (802d564 <atanf+0x16c>)
 802d45a:	429c      	cmp	r4, r3
 802d45c:	d84f      	bhi.n	802d4fe <atanf+0x106>
 802d45e:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 802d462:	429c      	cmp	r4, r3
 802d464:	d841      	bhi.n	802d4ea <atanf+0xf2>
 802d466:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 802d46a:	2300      	movs	r3, #0
 802d46c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802d470:	eea0 7a27 	vfma.f32	s14, s0, s15
 802d474:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d478:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802d47c:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 802d568 <atanf+0x170>
 802d480:	1c5a      	adds	r2, r3, #1
 802d482:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 802d56c <atanf+0x174>
 802d486:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 802d570 <atanf+0x178>
 802d48a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802d48e:	ee66 6a06 	vmul.f32	s13, s12, s12
 802d492:	eee6 5a87 	vfma.f32	s11, s13, s14
 802d496:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 802d574 <atanf+0x17c>
 802d49a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802d49e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 802d578 <atanf+0x180>
 802d4a2:	eee7 5a26 	vfma.f32	s11, s14, s13
 802d4a6:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 802d57c <atanf+0x184>
 802d4aa:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802d4ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 802d580 <atanf+0x188>
 802d4b2:	eee7 5a26 	vfma.f32	s11, s14, s13
 802d4b6:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 802d584 <atanf+0x18c>
 802d4ba:	eea6 5a87 	vfma.f32	s10, s13, s14
 802d4be:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802d588 <atanf+0x190>
 802d4c2:	eea5 7a26 	vfma.f32	s14, s10, s13
 802d4c6:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 802d58c <atanf+0x194>
 802d4ca:	eea7 5a26 	vfma.f32	s10, s14, s13
 802d4ce:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802d590 <atanf+0x198>
 802d4d2:	eea5 7a26 	vfma.f32	s14, s10, s13
 802d4d6:	ee27 7a26 	vmul.f32	s14, s14, s13
 802d4da:	eea5 7a86 	vfma.f32	s14, s11, s12
 802d4de:	ee27 7a87 	vmul.f32	s14, s15, s14
 802d4e2:	d121      	bne.n	802d528 <atanf+0x130>
 802d4e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d4e8:	e795      	b.n	802d416 <atanf+0x1e>
 802d4ea:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802d4ee:	2301      	movs	r3, #1
 802d4f0:	ee30 7a67 	vsub.f32	s14, s0, s15
 802d4f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d4f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802d4fc:	e7be      	b.n	802d47c <atanf+0x84>
 802d4fe:	4b25      	ldr	r3, [pc, #148]	@ (802d594 <atanf+0x19c>)
 802d500:	429c      	cmp	r4, r3
 802d502:	d80b      	bhi.n	802d51c <atanf+0x124>
 802d504:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802d508:	2302      	movs	r3, #2
 802d50a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802d50e:	ee70 6a67 	vsub.f32	s13, s0, s15
 802d512:	eea0 7a27 	vfma.f32	s14, s0, s15
 802d516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802d51a:	e7af      	b.n	802d47c <atanf+0x84>
 802d51c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802d520:	2303      	movs	r3, #3
 802d522:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802d526:	e7a9      	b.n	802d47c <atanf+0x84>
 802d528:	4a1b      	ldr	r2, [pc, #108]	@ (802d598 <atanf+0x1a0>)
 802d52a:	2d00      	cmp	r5, #0
 802d52c:	491b      	ldr	r1, [pc, #108]	@ (802d59c <atanf+0x1a4>)
 802d52e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802d532:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802d536:	edd3 6a00 	vldr	s13, [r3]
 802d53a:	ee37 7a66 	vsub.f32	s14, s14, s13
 802d53e:	ee37 7a67 	vsub.f32	s14, s14, s15
 802d542:	edd2 7a00 	vldr	s15, [r2]
 802d546:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d54a:	bfb8      	it	lt
 802d54c:	eef1 7a67 	vneglt.f32	s15, s15
 802d550:	e761      	b.n	802d416 <atanf+0x1e>
 802d552:	bf00      	nop
 802d554:	bfc90fdb 	.word	0xbfc90fdb
 802d558:	3fc90fdb 	.word	0x3fc90fdb
 802d55c:	3edfffff 	.word	0x3edfffff
 802d560:	7149f2ca 	.word	0x7149f2ca
 802d564:	3f97ffff 	.word	0x3f97ffff
 802d568:	3c8569d7 	.word	0x3c8569d7
 802d56c:	3d4bda59 	.word	0x3d4bda59
 802d570:	bd6ef16b 	.word	0xbd6ef16b
 802d574:	3d886b35 	.word	0x3d886b35
 802d578:	3dba2e6e 	.word	0x3dba2e6e
 802d57c:	3e124925 	.word	0x3e124925
 802d580:	3eaaaaab 	.word	0x3eaaaaab
 802d584:	bd15a221 	.word	0xbd15a221
 802d588:	bd9d8795 	.word	0xbd9d8795
 802d58c:	bde38e38 	.word	0xbde38e38
 802d590:	be4ccccd 	.word	0xbe4ccccd
 802d594:	401bffff 	.word	0x401bffff
 802d598:	080317f0 	.word	0x080317f0
 802d59c:	080317e0 	.word	0x080317e0

0802d5a0 <fabsf>:
 802d5a0:	ee10 3a10 	vmov	r3, s0
 802d5a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802d5a8:	ee00 3a10 	vmov	s0, r3
 802d5ac:	4770      	bx	lr
	...

0802d5b0 <scalbnf>:
 802d5b0:	ee10 3a10 	vmov	r3, s0
 802d5b4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 802d5b8:	d02a      	beq.n	802d610 <scalbnf+0x60>
 802d5ba:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 802d5be:	d302      	bcc.n	802d5c6 <scalbnf+0x16>
 802d5c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 802d5c4:	4770      	bx	lr
 802d5c6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 802d5ca:	d122      	bne.n	802d612 <scalbnf+0x62>
 802d5cc:	4b23      	ldr	r3, [pc, #140]	@ (802d65c <scalbnf+0xac>)
 802d5ce:	eddf 7a24 	vldr	s15, [pc, #144]	@ 802d660 <scalbnf+0xb0>
 802d5d2:	4298      	cmp	r0, r3
 802d5d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 802d5d8:	db16      	blt.n	802d608 <scalbnf+0x58>
 802d5da:	ee10 3a10 	vmov	r3, s0
 802d5de:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802d5e2:	3a19      	subs	r2, #25
 802d5e4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 802d5e8:	4288      	cmp	r0, r1
 802d5ea:	dd14      	ble.n	802d616 <scalbnf+0x66>
 802d5ec:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 802d664 <scalbnf+0xb4>
 802d5f0:	ee10 3a10 	vmov	r3, s0
 802d5f4:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 802d668 <scalbnf+0xb8>
 802d5f8:	eeb0 7a67 	vmov.f32	s14, s15
 802d5fc:	2b00      	cmp	r3, #0
 802d5fe:	fe67 7aa6 	vselge.f32	s15, s15, s13
 802d602:	ee27 0a87 	vmul.f32	s0, s15, s14
 802d606:	4770      	bx	lr
 802d608:	eddf 7a18 	vldr	s15, [pc, #96]	@ 802d66c <scalbnf+0xbc>
 802d60c:	ee27 0a80 	vmul.f32	s0, s15, s0
 802d610:	4770      	bx	lr
 802d612:	0dd2      	lsrs	r2, r2, #23
 802d614:	e7e6      	b.n	802d5e4 <scalbnf+0x34>
 802d616:	4410      	add	r0, r2
 802d618:	28fe      	cmp	r0, #254	@ 0xfe
 802d61a:	dce7      	bgt.n	802d5ec <scalbnf+0x3c>
 802d61c:	2800      	cmp	r0, #0
 802d61e:	dd06      	ble.n	802d62e <scalbnf+0x7e>
 802d620:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802d624:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802d628:	ee00 3a10 	vmov	s0, r3
 802d62c:	4770      	bx	lr
 802d62e:	f110 0f16 	cmn.w	r0, #22
 802d632:	da09      	bge.n	802d648 <scalbnf+0x98>
 802d634:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 802d66c <scalbnf+0xbc>
 802d638:	ee10 3a10 	vmov	r3, s0
 802d63c:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 802d670 <scalbnf+0xc0>
 802d640:	eeb0 7a67 	vmov.f32	s14, s15
 802d644:	2b00      	cmp	r3, #0
 802d646:	e7da      	b.n	802d5fe <scalbnf+0x4e>
 802d648:	3019      	adds	r0, #25
 802d64a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802d64e:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 802d674 <scalbnf+0xc4>
 802d652:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802d656:	ee07 3a90 	vmov	s15, r3
 802d65a:	e7d7      	b.n	802d60c <scalbnf+0x5c>
 802d65c:	ffff3cb0 	.word	0xffff3cb0
 802d660:	4c000000 	.word	0x4c000000
 802d664:	7149f2ca 	.word	0x7149f2ca
 802d668:	f149f2ca 	.word	0xf149f2ca
 802d66c:	0da24260 	.word	0x0da24260
 802d670:	8da24260 	.word	0x8da24260
 802d674:	33000000 	.word	0x33000000

0802d678 <__kernel_rem_pio2f>:
 802d678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d67c:	4690      	mov	r8, r2
 802d67e:	4ab9      	ldr	r2, [pc, #740]	@ (802d964 <__kernel_rem_pio2f+0x2ec>)
 802d680:	460f      	mov	r7, r1
 802d682:	f103 3bff 	add.w	fp, r3, #4294967295
 802d686:	f118 0f04 	cmn.w	r8, #4
 802d68a:	ed2d 8b04 	vpush	{d8-d9}
 802d68e:	b0d9      	sub	sp, #356	@ 0x164
 802d690:	9001      	str	r0, [sp, #4]
 802d692:	9866      	ldr	r0, [sp, #408]	@ 0x198
 802d694:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 802d698:	db26      	blt.n	802d6e8 <__kernel_rem_pio2f+0x70>
 802d69a:	f1b8 0203 	subs.w	r2, r8, #3
 802d69e:	bf48      	it	mi
 802d6a0:	f108 0204 	addmi.w	r2, r8, #4
 802d6a4:	10d2      	asrs	r2, r2, #3
 802d6a6:	1c55      	adds	r5, r2, #1
 802d6a8:	eba2 060b 	sub.w	r6, r2, fp
 802d6ac:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 802d6ae:	eb0a 0c0b 	add.w	ip, sl, fp
 802d6b2:	00e8      	lsls	r0, r5, #3
 802d6b4:	ac1c      	add	r4, sp, #112	@ 0x70
 802d6b6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 802d6ba:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 802d974 <__kernel_rem_pio2f+0x2fc>
 802d6be:	9002      	str	r0, [sp, #8]
 802d6c0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 802d6c4:	2000      	movs	r0, #0
 802d6c6:	4560      	cmp	r0, ip
 802d6c8:	dd10      	ble.n	802d6ec <__kernel_rem_pio2f+0x74>
 802d6ca:	a91c      	add	r1, sp, #112	@ 0x70
 802d6cc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 802d6d0:	2600      	movs	r6, #0
 802d6d2:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 802d6d6:	4556      	cmp	r6, sl
 802d6d8:	dc26      	bgt.n	802d728 <__kernel_rem_pio2f+0xb0>
 802d6da:	f8dd e004 	ldr.w	lr, [sp, #4]
 802d6de:	4684      	mov	ip, r0
 802d6e0:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 802d974 <__kernel_rem_pio2f+0x2fc>
 802d6e4:	2400      	movs	r4, #0
 802d6e6:	e018      	b.n	802d71a <__kernel_rem_pio2f+0xa2>
 802d6e8:	2200      	movs	r2, #0
 802d6ea:	e7dc      	b.n	802d6a6 <__kernel_rem_pio2f+0x2e>
 802d6ec:	42c6      	cmn	r6, r0
 802d6ee:	bf54      	ite	pl
 802d6f0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 802d6f4:	eef0 7a47 	vmovmi.f32	s15, s14
 802d6f8:	f100 0001 	add.w	r0, r0, #1
 802d6fc:	bf5c      	itt	pl
 802d6fe:	ee07 1a90 	vmovpl	s15, r1
 802d702:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802d706:	ece4 7a01 	vstmia	r4!, {s15}
 802d70a:	e7dc      	b.n	802d6c6 <__kernel_rem_pio2f+0x4e>
 802d70c:	ecfe 6a01 	vldmia	lr!, {s13}
 802d710:	3401      	adds	r4, #1
 802d712:	ed3c 7a01 	vldmdb	ip!, {s14}
 802d716:	eee6 7a87 	vfma.f32	s15, s13, s14
 802d71a:	455c      	cmp	r4, fp
 802d71c:	ddf6      	ble.n	802d70c <__kernel_rem_pio2f+0x94>
 802d71e:	3601      	adds	r6, #1
 802d720:	3004      	adds	r0, #4
 802d722:	ece9 7a01 	vstmia	r9!, {s15}
 802d726:	e7d6      	b.n	802d6d6 <__kernel_rem_pio2f+0x5e>
 802d728:	a908      	add	r1, sp, #32
 802d72a:	4654      	mov	r4, sl
 802d72c:	eddf 8a90 	vldr	s17, [pc, #576]	@ 802d970 <__kernel_rem_pio2f+0x2f8>
 802d730:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802d734:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 802d96c <__kernel_rem_pio2f+0x2f4>
 802d738:	9104      	str	r1, [sp, #16]
 802d73a:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 802d73c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 802d740:	9203      	str	r2, [sp, #12]
 802d742:	00a2      	lsls	r2, r4, #2
 802d744:	a944      	add	r1, sp, #272	@ 0x110
 802d746:	4626      	mov	r6, r4
 802d748:	9205      	str	r2, [sp, #20]
 802d74a:	aa58      	add	r2, sp, #352	@ 0x160
 802d74c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 802d750:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 802d754:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 802d758:	aa08      	add	r2, sp, #32
 802d75a:	4694      	mov	ip, r2
 802d75c:	2e00      	cmp	r6, #0
 802d75e:	dc4c      	bgt.n	802d7fa <__kernel_rem_pio2f+0x182>
 802d760:	4628      	mov	r0, r5
 802d762:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802d766:	f7ff ff23 	bl	802d5b0 <scalbnf>
 802d76a:	eeb0 8a40 	vmov.f32	s16, s0
 802d76e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 802d772:	ee28 0a00 	vmul.f32	s0, s16, s0
 802d776:	f000 f9e9 	bl	802db4c <floorf>
 802d77a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 802d77e:	2d00      	cmp	r5, #0
 802d780:	eea0 8a67 	vfms.f32	s16, s0, s15
 802d784:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802d788:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802d78c:	ee17 9a90 	vmov	r9, s15
 802d790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d794:	ee38 8a67 	vsub.f32	s16, s16, s15
 802d798:	dd41      	ble.n	802d81e <__kernel_rem_pio2f+0x1a6>
 802d79a:	f104 3cff 	add.w	ip, r4, #4294967295
 802d79e:	a908      	add	r1, sp, #32
 802d7a0:	f1c5 0e08 	rsb	lr, r5, #8
 802d7a4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 802d7a8:	fa46 f00e 	asr.w	r0, r6, lr
 802d7ac:	4481      	add	r9, r0
 802d7ae:	fa00 f00e 	lsl.w	r0, r0, lr
 802d7b2:	1a36      	subs	r6, r6, r0
 802d7b4:	f1c5 0007 	rsb	r0, r5, #7
 802d7b8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 802d7bc:	4106      	asrs	r6, r0
 802d7be:	2e00      	cmp	r6, #0
 802d7c0:	dd3c      	ble.n	802d83c <__kernel_rem_pio2f+0x1c4>
 802d7c2:	f04f 0e00 	mov.w	lr, #0
 802d7c6:	f109 0901 	add.w	r9, r9, #1
 802d7ca:	4670      	mov	r0, lr
 802d7cc:	4574      	cmp	r4, lr
 802d7ce:	dc68      	bgt.n	802d8a2 <__kernel_rem_pio2f+0x22a>
 802d7d0:	2d00      	cmp	r5, #0
 802d7d2:	dd03      	ble.n	802d7dc <__kernel_rem_pio2f+0x164>
 802d7d4:	2d01      	cmp	r5, #1
 802d7d6:	d074      	beq.n	802d8c2 <__kernel_rem_pio2f+0x24a>
 802d7d8:	2d02      	cmp	r5, #2
 802d7da:	d07d      	beq.n	802d8d8 <__kernel_rem_pio2f+0x260>
 802d7dc:	2e02      	cmp	r6, #2
 802d7de:	d12d      	bne.n	802d83c <__kernel_rem_pio2f+0x1c4>
 802d7e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802d7e4:	ee30 8a48 	vsub.f32	s16, s0, s16
 802d7e8:	b340      	cbz	r0, 802d83c <__kernel_rem_pio2f+0x1c4>
 802d7ea:	4628      	mov	r0, r5
 802d7ec:	9306      	str	r3, [sp, #24]
 802d7ee:	f7ff fedf 	bl	802d5b0 <scalbnf>
 802d7f2:	9b06      	ldr	r3, [sp, #24]
 802d7f4:	ee38 8a40 	vsub.f32	s16, s16, s0
 802d7f8:	e020      	b.n	802d83c <__kernel_rem_pio2f+0x1c4>
 802d7fa:	ee60 7a28 	vmul.f32	s15, s0, s17
 802d7fe:	3e01      	subs	r6, #1
 802d800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d808:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802d80c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802d810:	ecac 0a01 	vstmia	ip!, {s0}
 802d814:	ed30 0a01 	vldmdb	r0!, {s0}
 802d818:	ee37 0a80 	vadd.f32	s0, s15, s0
 802d81c:	e79e      	b.n	802d75c <__kernel_rem_pio2f+0xe4>
 802d81e:	d105      	bne.n	802d82c <__kernel_rem_pio2f+0x1b4>
 802d820:	1e60      	subs	r0, r4, #1
 802d822:	a908      	add	r1, sp, #32
 802d824:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 802d828:	11f6      	asrs	r6, r6, #7
 802d82a:	e7c8      	b.n	802d7be <__kernel_rem_pio2f+0x146>
 802d82c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802d830:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802d834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d838:	da31      	bge.n	802d89e <__kernel_rem_pio2f+0x226>
 802d83a:	2600      	movs	r6, #0
 802d83c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802d840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d844:	f040 8098 	bne.w	802d978 <__kernel_rem_pio2f+0x300>
 802d848:	1e60      	subs	r0, r4, #1
 802d84a:	2200      	movs	r2, #0
 802d84c:	4550      	cmp	r0, sl
 802d84e:	da4b      	bge.n	802d8e8 <__kernel_rem_pio2f+0x270>
 802d850:	2a00      	cmp	r2, #0
 802d852:	d065      	beq.n	802d920 <__kernel_rem_pio2f+0x2a8>
 802d854:	3c01      	subs	r4, #1
 802d856:	ab08      	add	r3, sp, #32
 802d858:	3d08      	subs	r5, #8
 802d85a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802d85e:	2b00      	cmp	r3, #0
 802d860:	d0f8      	beq.n	802d854 <__kernel_rem_pio2f+0x1dc>
 802d862:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802d866:	4628      	mov	r0, r5
 802d868:	f7ff fea2 	bl	802d5b0 <scalbnf>
 802d86c:	1c63      	adds	r3, r4, #1
 802d86e:	aa44      	add	r2, sp, #272	@ 0x110
 802d870:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 802d970 <__kernel_rem_pio2f+0x2f8>
 802d874:	0099      	lsls	r1, r3, #2
 802d876:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802d87a:	4623      	mov	r3, r4
 802d87c:	2b00      	cmp	r3, #0
 802d87e:	f280 80a9 	bge.w	802d9d4 <__kernel_rem_pio2f+0x35c>
 802d882:	4623      	mov	r3, r4
 802d884:	2b00      	cmp	r3, #0
 802d886:	f2c0 80c7 	blt.w	802da18 <__kernel_rem_pio2f+0x3a0>
 802d88a:	aa44      	add	r2, sp, #272	@ 0x110
 802d88c:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 802d968 <__kernel_rem_pio2f+0x2f0>
 802d890:	eddf 7a38 	vldr	s15, [pc, #224]	@ 802d974 <__kernel_rem_pio2f+0x2fc>
 802d894:	2000      	movs	r0, #0
 802d896:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802d89a:	1ae2      	subs	r2, r4, r3
 802d89c:	e0b1      	b.n	802da02 <__kernel_rem_pio2f+0x38a>
 802d89e:	2602      	movs	r6, #2
 802d8a0:	e78f      	b.n	802d7c2 <__kernel_rem_pio2f+0x14a>
 802d8a2:	f852 1b04 	ldr.w	r1, [r2], #4
 802d8a6:	b948      	cbnz	r0, 802d8bc <__kernel_rem_pio2f+0x244>
 802d8a8:	b121      	cbz	r1, 802d8b4 <__kernel_rem_pio2f+0x23c>
 802d8aa:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 802d8ae:	f842 1c04 	str.w	r1, [r2, #-4]
 802d8b2:	2101      	movs	r1, #1
 802d8b4:	f10e 0e01 	add.w	lr, lr, #1
 802d8b8:	4608      	mov	r0, r1
 802d8ba:	e787      	b.n	802d7cc <__kernel_rem_pio2f+0x154>
 802d8bc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 802d8c0:	e7f5      	b.n	802d8ae <__kernel_rem_pio2f+0x236>
 802d8c2:	f104 3cff 	add.w	ip, r4, #4294967295
 802d8c6:	aa08      	add	r2, sp, #32
 802d8c8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802d8cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 802d8d0:	a908      	add	r1, sp, #32
 802d8d2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 802d8d6:	e781      	b.n	802d7dc <__kernel_rem_pio2f+0x164>
 802d8d8:	f104 3cff 	add.w	ip, r4, #4294967295
 802d8dc:	aa08      	add	r2, sp, #32
 802d8de:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802d8e2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 802d8e6:	e7f3      	b.n	802d8d0 <__kernel_rem_pio2f+0x258>
 802d8e8:	a908      	add	r1, sp, #32
 802d8ea:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802d8ee:	3801      	subs	r0, #1
 802d8f0:	430a      	orrs	r2, r1
 802d8f2:	e7ab      	b.n	802d84c <__kernel_rem_pio2f+0x1d4>
 802d8f4:	3201      	adds	r2, #1
 802d8f6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 802d8fa:	2e00      	cmp	r6, #0
 802d8fc:	d0fa      	beq.n	802d8f4 <__kernel_rem_pio2f+0x27c>
 802d8fe:	9905      	ldr	r1, [sp, #20]
 802d900:	18e6      	adds	r6, r4, r3
 802d902:	f104 0c01 	add.w	ip, r4, #1
 802d906:	4422      	add	r2, r4
 802d908:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 802d90c:	eb0d 0001 	add.w	r0, sp, r1
 802d910:	a91c      	add	r1, sp, #112	@ 0x70
 802d912:	384c      	subs	r0, #76	@ 0x4c
 802d914:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 802d918:	4562      	cmp	r2, ip
 802d91a:	da04      	bge.n	802d926 <__kernel_rem_pio2f+0x2ae>
 802d91c:	4614      	mov	r4, r2
 802d91e:	e710      	b.n	802d742 <__kernel_rem_pio2f+0xca>
 802d920:	9804      	ldr	r0, [sp, #16]
 802d922:	2201      	movs	r2, #1
 802d924:	e7e7      	b.n	802d8f6 <__kernel_rem_pio2f+0x27e>
 802d926:	9903      	ldr	r1, [sp, #12]
 802d928:	2400      	movs	r4, #0
 802d92a:	f8dd e004 	ldr.w	lr, [sp, #4]
 802d92e:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 802d932:	ee07 1a90 	vmov	s15, r1
 802d936:	9105      	str	r1, [sp, #20]
 802d938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d93c:	ece6 7a01 	vstmia	r6!, {s15}
 802d940:	46b1      	mov	r9, r6
 802d942:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 802d974 <__kernel_rem_pio2f+0x2fc>
 802d946:	455c      	cmp	r4, fp
 802d948:	dd04      	ble.n	802d954 <__kernel_rem_pio2f+0x2dc>
 802d94a:	f10c 0c01 	add.w	ip, ip, #1
 802d94e:	ece0 7a01 	vstmia	r0!, {s15}
 802d952:	e7e1      	b.n	802d918 <__kernel_rem_pio2f+0x2a0>
 802d954:	ecfe 6a01 	vldmia	lr!, {s13}
 802d958:	3401      	adds	r4, #1
 802d95a:	ed39 7a01 	vldmdb	r9!, {s14}
 802d95e:	eee6 7a87 	vfma.f32	s15, s13, s14
 802d962:	e7f0      	b.n	802d946 <__kernel_rem_pio2f+0x2ce>
 802d964:	0803182c 	.word	0x0803182c
 802d968:	08031800 	.word	0x08031800
 802d96c:	43800000 	.word	0x43800000
 802d970:	3b800000 	.word	0x3b800000
 802d974:	00000000 	.word	0x00000000
 802d978:	9b02      	ldr	r3, [sp, #8]
 802d97a:	eeb0 0a48 	vmov.f32	s0, s16
 802d97e:	eba3 0008 	sub.w	r0, r3, r8
 802d982:	f7ff fe15 	bl	802d5b0 <scalbnf>
 802d986:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 802d96c <__kernel_rem_pio2f+0x2f4>
 802d98a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802d98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d992:	db19      	blt.n	802d9c8 <__kernel_rem_pio2f+0x350>
 802d994:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 802d970 <__kernel_rem_pio2f+0x2f8>
 802d998:	aa08      	add	r2, sp, #32
 802d99a:	3508      	adds	r5, #8
 802d99c:	ee60 7a27 	vmul.f32	s15, s0, s15
 802d9a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d9a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d9a8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802d9ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d9b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802d9b4:	ee10 3a10 	vmov	r3, s0
 802d9b8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802d9bc:	3401      	adds	r4, #1
 802d9be:	ee17 3a90 	vmov	r3, s15
 802d9c2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802d9c6:	e74c      	b.n	802d862 <__kernel_rem_pio2f+0x1ea>
 802d9c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802d9cc:	aa08      	add	r2, sp, #32
 802d9ce:	ee10 3a10 	vmov	r3, s0
 802d9d2:	e7f6      	b.n	802d9c2 <__kernel_rem_pio2f+0x34a>
 802d9d4:	a808      	add	r0, sp, #32
 802d9d6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 802d9da:	3b01      	subs	r3, #1
 802d9dc:	ee07 0a90 	vmov	s15, r0
 802d9e0:	9001      	str	r0, [sp, #4]
 802d9e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d9e6:	ee67 7a80 	vmul.f32	s15, s15, s0
 802d9ea:	ee20 0a07 	vmul.f32	s0, s0, s14
 802d9ee:	ed62 7a01 	vstmdb	r2!, {s15}
 802d9f2:	e743      	b.n	802d87c <__kernel_rem_pio2f+0x204>
 802d9f4:	ecfc 6a01 	vldmia	ip!, {s13}
 802d9f8:	3001      	adds	r0, #1
 802d9fa:	ecb5 7a01 	vldmia	r5!, {s14}
 802d9fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 802da02:	4550      	cmp	r0, sl
 802da04:	dc01      	bgt.n	802da0a <__kernel_rem_pio2f+0x392>
 802da06:	4290      	cmp	r0, r2
 802da08:	ddf4      	ble.n	802d9f4 <__kernel_rem_pio2f+0x37c>
 802da0a:	a858      	add	r0, sp, #352	@ 0x160
 802da0c:	3b01      	subs	r3, #1
 802da0e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 802da12:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 802da16:	e735      	b.n	802d884 <__kernel_rem_pio2f+0x20c>
 802da18:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 802da1a:	2b02      	cmp	r3, #2
 802da1c:	dc09      	bgt.n	802da32 <__kernel_rem_pio2f+0x3ba>
 802da1e:	2b00      	cmp	r3, #0
 802da20:	dc27      	bgt.n	802da72 <__kernel_rem_pio2f+0x3fa>
 802da22:	d040      	beq.n	802daa6 <__kernel_rem_pio2f+0x42e>
 802da24:	f009 0007 	and.w	r0, r9, #7
 802da28:	b059      	add	sp, #356	@ 0x164
 802da2a:	ecbd 8b04 	vpop	{d8-d9}
 802da2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802da32:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 802da34:	2b03      	cmp	r3, #3
 802da36:	d1f5      	bne.n	802da24 <__kernel_rem_pio2f+0x3ac>
 802da38:	aa30      	add	r2, sp, #192	@ 0xc0
 802da3a:	1f0b      	subs	r3, r1, #4
 802da3c:	4620      	mov	r0, r4
 802da3e:	4413      	add	r3, r2
 802da40:	461a      	mov	r2, r3
 802da42:	2800      	cmp	r0, #0
 802da44:	dc50      	bgt.n	802dae8 <__kernel_rem_pio2f+0x470>
 802da46:	4622      	mov	r2, r4
 802da48:	2a01      	cmp	r2, #1
 802da4a:	dc5d      	bgt.n	802db08 <__kernel_rem_pio2f+0x490>
 802da4c:	ab30      	add	r3, sp, #192	@ 0xc0
 802da4e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 802d974 <__kernel_rem_pio2f+0x2fc>
 802da52:	440b      	add	r3, r1
 802da54:	2c01      	cmp	r4, #1
 802da56:	dc67      	bgt.n	802db28 <__kernel_rem_pio2f+0x4b0>
 802da58:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 802da5c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 802da60:	2e00      	cmp	r6, #0
 802da62:	d167      	bne.n	802db34 <__kernel_rem_pio2f+0x4bc>
 802da64:	edc7 6a00 	vstr	s13, [r7]
 802da68:	ed87 7a01 	vstr	s14, [r7, #4]
 802da6c:	edc7 7a02 	vstr	s15, [r7, #8]
 802da70:	e7d8      	b.n	802da24 <__kernel_rem_pio2f+0x3ac>
 802da72:	ab30      	add	r3, sp, #192	@ 0xc0
 802da74:	4622      	mov	r2, r4
 802da76:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 802d974 <__kernel_rem_pio2f+0x2fc>
 802da7a:	440b      	add	r3, r1
 802da7c:	2a00      	cmp	r2, #0
 802da7e:	da24      	bge.n	802daca <__kernel_rem_pio2f+0x452>
 802da80:	b34e      	cbz	r6, 802dad6 <__kernel_rem_pio2f+0x45e>
 802da82:	eef1 7a47 	vneg.f32	s15, s14
 802da86:	edc7 7a00 	vstr	s15, [r7]
 802da8a:	aa31      	add	r2, sp, #196	@ 0xc4
 802da8c:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 802da90:	2301      	movs	r3, #1
 802da92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802da96:	429c      	cmp	r4, r3
 802da98:	da20      	bge.n	802dadc <__kernel_rem_pio2f+0x464>
 802da9a:	b10e      	cbz	r6, 802daa0 <__kernel_rem_pio2f+0x428>
 802da9c:	eef1 7a67 	vneg.f32	s15, s15
 802daa0:	edc7 7a01 	vstr	s15, [r7, #4]
 802daa4:	e7be      	b.n	802da24 <__kernel_rem_pio2f+0x3ac>
 802daa6:	ab30      	add	r3, sp, #192	@ 0xc0
 802daa8:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 802d974 <__kernel_rem_pio2f+0x2fc>
 802daac:	440b      	add	r3, r1
 802daae:	2c00      	cmp	r4, #0
 802dab0:	da05      	bge.n	802dabe <__kernel_rem_pio2f+0x446>
 802dab2:	b10e      	cbz	r6, 802dab8 <__kernel_rem_pio2f+0x440>
 802dab4:	eef1 7a67 	vneg.f32	s15, s15
 802dab8:	edc7 7a00 	vstr	s15, [r7]
 802dabc:	e7b2      	b.n	802da24 <__kernel_rem_pio2f+0x3ac>
 802dabe:	ed33 7a01 	vldmdb	r3!, {s14}
 802dac2:	3c01      	subs	r4, #1
 802dac4:	ee77 7a87 	vadd.f32	s15, s15, s14
 802dac8:	e7f1      	b.n	802daae <__kernel_rem_pio2f+0x436>
 802daca:	ed73 7a01 	vldmdb	r3!, {s15}
 802dace:	3a01      	subs	r2, #1
 802dad0:	ee37 7a27 	vadd.f32	s14, s14, s15
 802dad4:	e7d2      	b.n	802da7c <__kernel_rem_pio2f+0x404>
 802dad6:	eef0 7a47 	vmov.f32	s15, s14
 802dada:	e7d4      	b.n	802da86 <__kernel_rem_pio2f+0x40e>
 802dadc:	ecb2 7a01 	vldmia	r2!, {s14}
 802dae0:	3301      	adds	r3, #1
 802dae2:	ee77 7a87 	vadd.f32	s15, s15, s14
 802dae6:	e7d6      	b.n	802da96 <__kernel_rem_pio2f+0x41e>
 802dae8:	ed72 7a01 	vldmdb	r2!, {s15}
 802daec:	3801      	subs	r0, #1
 802daee:	edd2 6a01 	vldr	s13, [r2, #4]
 802daf2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802daf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802dafa:	ed82 7a00 	vstr	s14, [r2]
 802dafe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802db02:	edc2 7a01 	vstr	s15, [r2, #4]
 802db06:	e79c      	b.n	802da42 <__kernel_rem_pio2f+0x3ca>
 802db08:	ed73 7a01 	vldmdb	r3!, {s15}
 802db0c:	3a01      	subs	r2, #1
 802db0e:	edd3 6a01 	vldr	s13, [r3, #4]
 802db12:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802db16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802db1a:	ed83 7a00 	vstr	s14, [r3]
 802db1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802db22:	edc3 7a01 	vstr	s15, [r3, #4]
 802db26:	e78f      	b.n	802da48 <__kernel_rem_pio2f+0x3d0>
 802db28:	ed33 7a01 	vldmdb	r3!, {s14}
 802db2c:	3c01      	subs	r4, #1
 802db2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 802db32:	e78f      	b.n	802da54 <__kernel_rem_pio2f+0x3dc>
 802db34:	eef1 6a66 	vneg.f32	s13, s13
 802db38:	eeb1 7a47 	vneg.f32	s14, s14
 802db3c:	eef1 7a67 	vneg.f32	s15, s15
 802db40:	edc7 6a00 	vstr	s13, [r7]
 802db44:	ed87 7a01 	vstr	s14, [r7, #4]
 802db48:	e790      	b.n	802da6c <__kernel_rem_pio2f+0x3f4>
 802db4a:	bf00      	nop

0802db4c <floorf>:
 802db4c:	febb 0a40 	vrintm.f32	s0, s0
 802db50:	4770      	bx	lr

0802db52 <abort>:
 802db52:	2006      	movs	r0, #6
 802db54:	b508      	push	{r3, lr}
 802db56:	f000 fb3f 	bl	802e1d8 <raise>
 802db5a:	2001      	movs	r0, #1
 802db5c:	f7d3 ff30 	bl	80019c0 <_exit>

0802db60 <__assert_func>:
 802db60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802db62:	4614      	mov	r4, r2
 802db64:	461a      	mov	r2, r3
 802db66:	4b09      	ldr	r3, [pc, #36]	@ (802db8c <__assert_func+0x2c>)
 802db68:	4605      	mov	r5, r0
 802db6a:	681b      	ldr	r3, [r3, #0]
 802db6c:	68d8      	ldr	r0, [r3, #12]
 802db6e:	b14c      	cbz	r4, 802db84 <__assert_func+0x24>
 802db70:	4b07      	ldr	r3, [pc, #28]	@ (802db90 <__assert_func+0x30>)
 802db72:	9100      	str	r1, [sp, #0]
 802db74:	4907      	ldr	r1, [pc, #28]	@ (802db94 <__assert_func+0x34>)
 802db76:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802db7a:	462b      	mov	r3, r5
 802db7c:	f000 f984 	bl	802de88 <fiprintf>
 802db80:	f7ff ffe7 	bl	802db52 <abort>
 802db84:	4b04      	ldr	r3, [pc, #16]	@ (802db98 <__assert_func+0x38>)
 802db86:	461c      	mov	r4, r3
 802db88:	e7f3      	b.n	802db72 <__assert_func+0x12>
 802db8a:	bf00      	nop
 802db8c:	200000a8 	.word	0x200000a8
 802db90:	08031838 	.word	0x08031838
 802db94:	08031845 	.word	0x08031845
 802db98:	08031873 	.word	0x08031873

0802db9c <atexit>:
 802db9c:	2300      	movs	r3, #0
 802db9e:	4601      	mov	r1, r0
 802dba0:	461a      	mov	r2, r3
 802dba2:	4618      	mov	r0, r3
 802dba4:	f000 bbc4 	b.w	802e330 <__register_exitproc>

0802dba8 <malloc>:
 802dba8:	4b02      	ldr	r3, [pc, #8]	@ (802dbb4 <malloc+0xc>)
 802dbaa:	4601      	mov	r1, r0
 802dbac:	6818      	ldr	r0, [r3, #0]
 802dbae:	f000 b82d 	b.w	802dc0c <_malloc_r>
 802dbb2:	bf00      	nop
 802dbb4:	200000a8 	.word	0x200000a8

0802dbb8 <free>:
 802dbb8:	4b02      	ldr	r3, [pc, #8]	@ (802dbc4 <free+0xc>)
 802dbba:	4601      	mov	r1, r0
 802dbbc:	6818      	ldr	r0, [r3, #0]
 802dbbe:	f000 bc15 	b.w	802e3ec <_free_r>
 802dbc2:	bf00      	nop
 802dbc4:	200000a8 	.word	0x200000a8

0802dbc8 <sbrk_aligned>:
 802dbc8:	b570      	push	{r4, r5, r6, lr}
 802dbca:	4e0f      	ldr	r6, [pc, #60]	@ (802dc08 <sbrk_aligned+0x40>)
 802dbcc:	460c      	mov	r4, r1
 802dbce:	4605      	mov	r5, r0
 802dbd0:	6831      	ldr	r1, [r6, #0]
 802dbd2:	b911      	cbnz	r1, 802dbda <sbrk_aligned+0x12>
 802dbd4:	f000 fb50 	bl	802e278 <_sbrk_r>
 802dbd8:	6030      	str	r0, [r6, #0]
 802dbda:	4621      	mov	r1, r4
 802dbdc:	4628      	mov	r0, r5
 802dbde:	f000 fb4b 	bl	802e278 <_sbrk_r>
 802dbe2:	1c43      	adds	r3, r0, #1
 802dbe4:	d103      	bne.n	802dbee <sbrk_aligned+0x26>
 802dbe6:	f04f 34ff 	mov.w	r4, #4294967295
 802dbea:	4620      	mov	r0, r4
 802dbec:	bd70      	pop	{r4, r5, r6, pc}
 802dbee:	1cc4      	adds	r4, r0, #3
 802dbf0:	f024 0403 	bic.w	r4, r4, #3
 802dbf4:	42a0      	cmp	r0, r4
 802dbf6:	d0f8      	beq.n	802dbea <sbrk_aligned+0x22>
 802dbf8:	1a21      	subs	r1, r4, r0
 802dbfa:	4628      	mov	r0, r5
 802dbfc:	f000 fb3c 	bl	802e278 <_sbrk_r>
 802dc00:	3001      	adds	r0, #1
 802dc02:	d1f2      	bne.n	802dbea <sbrk_aligned+0x22>
 802dc04:	e7ef      	b.n	802dbe6 <sbrk_aligned+0x1e>
 802dc06:	bf00      	nop
 802dc08:	2005c778 	.word	0x2005c778

0802dc0c <_malloc_r>:
 802dc0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802dc10:	1ccd      	adds	r5, r1, #3
 802dc12:	4606      	mov	r6, r0
 802dc14:	f025 0503 	bic.w	r5, r5, #3
 802dc18:	3508      	adds	r5, #8
 802dc1a:	2d0c      	cmp	r5, #12
 802dc1c:	bf38      	it	cc
 802dc1e:	250c      	movcc	r5, #12
 802dc20:	2d00      	cmp	r5, #0
 802dc22:	db01      	blt.n	802dc28 <_malloc_r+0x1c>
 802dc24:	42a9      	cmp	r1, r5
 802dc26:	d904      	bls.n	802dc32 <_malloc_r+0x26>
 802dc28:	230c      	movs	r3, #12
 802dc2a:	6033      	str	r3, [r6, #0]
 802dc2c:	2000      	movs	r0, #0
 802dc2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802dc32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802dd08 <_malloc_r+0xfc>
 802dc36:	f000 f869 	bl	802dd0c <__malloc_lock>
 802dc3a:	f8d8 3000 	ldr.w	r3, [r8]
 802dc3e:	461c      	mov	r4, r3
 802dc40:	bb44      	cbnz	r4, 802dc94 <_malloc_r+0x88>
 802dc42:	4629      	mov	r1, r5
 802dc44:	4630      	mov	r0, r6
 802dc46:	f7ff ffbf 	bl	802dbc8 <sbrk_aligned>
 802dc4a:	1c43      	adds	r3, r0, #1
 802dc4c:	4604      	mov	r4, r0
 802dc4e:	d158      	bne.n	802dd02 <_malloc_r+0xf6>
 802dc50:	f8d8 4000 	ldr.w	r4, [r8]
 802dc54:	4627      	mov	r7, r4
 802dc56:	2f00      	cmp	r7, #0
 802dc58:	d143      	bne.n	802dce2 <_malloc_r+0xd6>
 802dc5a:	2c00      	cmp	r4, #0
 802dc5c:	d04b      	beq.n	802dcf6 <_malloc_r+0xea>
 802dc5e:	6823      	ldr	r3, [r4, #0]
 802dc60:	4639      	mov	r1, r7
 802dc62:	4630      	mov	r0, r6
 802dc64:	eb04 0903 	add.w	r9, r4, r3
 802dc68:	f000 fb06 	bl	802e278 <_sbrk_r>
 802dc6c:	4581      	cmp	r9, r0
 802dc6e:	d142      	bne.n	802dcf6 <_malloc_r+0xea>
 802dc70:	6821      	ldr	r1, [r4, #0]
 802dc72:	4630      	mov	r0, r6
 802dc74:	1a6d      	subs	r5, r5, r1
 802dc76:	4629      	mov	r1, r5
 802dc78:	f7ff ffa6 	bl	802dbc8 <sbrk_aligned>
 802dc7c:	3001      	adds	r0, #1
 802dc7e:	d03a      	beq.n	802dcf6 <_malloc_r+0xea>
 802dc80:	6823      	ldr	r3, [r4, #0]
 802dc82:	442b      	add	r3, r5
 802dc84:	6023      	str	r3, [r4, #0]
 802dc86:	f8d8 3000 	ldr.w	r3, [r8]
 802dc8a:	685a      	ldr	r2, [r3, #4]
 802dc8c:	bb62      	cbnz	r2, 802dce8 <_malloc_r+0xdc>
 802dc8e:	f8c8 7000 	str.w	r7, [r8]
 802dc92:	e00f      	b.n	802dcb4 <_malloc_r+0xa8>
 802dc94:	6822      	ldr	r2, [r4, #0]
 802dc96:	1b52      	subs	r2, r2, r5
 802dc98:	d420      	bmi.n	802dcdc <_malloc_r+0xd0>
 802dc9a:	2a0b      	cmp	r2, #11
 802dc9c:	d917      	bls.n	802dcce <_malloc_r+0xc2>
 802dc9e:	1961      	adds	r1, r4, r5
 802dca0:	42a3      	cmp	r3, r4
 802dca2:	6025      	str	r5, [r4, #0]
 802dca4:	bf18      	it	ne
 802dca6:	6059      	strne	r1, [r3, #4]
 802dca8:	6863      	ldr	r3, [r4, #4]
 802dcaa:	bf08      	it	eq
 802dcac:	f8c8 1000 	streq.w	r1, [r8]
 802dcb0:	5162      	str	r2, [r4, r5]
 802dcb2:	604b      	str	r3, [r1, #4]
 802dcb4:	4630      	mov	r0, r6
 802dcb6:	f000 f82f 	bl	802dd18 <__malloc_unlock>
 802dcba:	f104 000b 	add.w	r0, r4, #11
 802dcbe:	1d23      	adds	r3, r4, #4
 802dcc0:	f020 0007 	bic.w	r0, r0, #7
 802dcc4:	1ac2      	subs	r2, r0, r3
 802dcc6:	bf1c      	itt	ne
 802dcc8:	1a1b      	subne	r3, r3, r0
 802dcca:	50a3      	strne	r3, [r4, r2]
 802dccc:	e7af      	b.n	802dc2e <_malloc_r+0x22>
 802dcce:	6862      	ldr	r2, [r4, #4]
 802dcd0:	42a3      	cmp	r3, r4
 802dcd2:	bf0c      	ite	eq
 802dcd4:	f8c8 2000 	streq.w	r2, [r8]
 802dcd8:	605a      	strne	r2, [r3, #4]
 802dcda:	e7eb      	b.n	802dcb4 <_malloc_r+0xa8>
 802dcdc:	4623      	mov	r3, r4
 802dcde:	6864      	ldr	r4, [r4, #4]
 802dce0:	e7ae      	b.n	802dc40 <_malloc_r+0x34>
 802dce2:	463c      	mov	r4, r7
 802dce4:	687f      	ldr	r7, [r7, #4]
 802dce6:	e7b6      	b.n	802dc56 <_malloc_r+0x4a>
 802dce8:	461a      	mov	r2, r3
 802dcea:	685b      	ldr	r3, [r3, #4]
 802dcec:	42a3      	cmp	r3, r4
 802dcee:	d1fb      	bne.n	802dce8 <_malloc_r+0xdc>
 802dcf0:	2300      	movs	r3, #0
 802dcf2:	6053      	str	r3, [r2, #4]
 802dcf4:	e7de      	b.n	802dcb4 <_malloc_r+0xa8>
 802dcf6:	230c      	movs	r3, #12
 802dcf8:	4630      	mov	r0, r6
 802dcfa:	6033      	str	r3, [r6, #0]
 802dcfc:	f000 f80c 	bl	802dd18 <__malloc_unlock>
 802dd00:	e794      	b.n	802dc2c <_malloc_r+0x20>
 802dd02:	6005      	str	r5, [r0, #0]
 802dd04:	e7d6      	b.n	802dcb4 <_malloc_r+0xa8>
 802dd06:	bf00      	nop
 802dd08:	2005c77c 	.word	0x2005c77c

0802dd0c <__malloc_lock>:
 802dd0c:	4801      	ldr	r0, [pc, #4]	@ (802dd14 <__malloc_lock+0x8>)
 802dd0e:	f000 bb00 	b.w	802e312 <__retarget_lock_acquire_recursive>
 802dd12:	bf00      	nop
 802dd14:	2005c8c0 	.word	0x2005c8c0

0802dd18 <__malloc_unlock>:
 802dd18:	4801      	ldr	r0, [pc, #4]	@ (802dd20 <__malloc_unlock+0x8>)
 802dd1a:	f000 bafb 	b.w	802e314 <__retarget_lock_release_recursive>
 802dd1e:	bf00      	nop
 802dd20:	2005c8c0 	.word	0x2005c8c0

0802dd24 <__cxa_atexit>:
 802dd24:	b510      	push	{r4, lr}
 802dd26:	4604      	mov	r4, r0
 802dd28:	4804      	ldr	r0, [pc, #16]	@ (802dd3c <__cxa_atexit+0x18>)
 802dd2a:	4613      	mov	r3, r2
 802dd2c:	b120      	cbz	r0, 802dd38 <__cxa_atexit+0x14>
 802dd2e:	460a      	mov	r2, r1
 802dd30:	2002      	movs	r0, #2
 802dd32:	4621      	mov	r1, r4
 802dd34:	f000 fafc 	bl	802e330 <__register_exitproc>
 802dd38:	bd10      	pop	{r4, pc}
 802dd3a:	bf00      	nop
 802dd3c:	0802e331 	.word	0x0802e331

0802dd40 <std>:
 802dd40:	2300      	movs	r3, #0
 802dd42:	b510      	push	{r4, lr}
 802dd44:	4604      	mov	r4, r0
 802dd46:	6083      	str	r3, [r0, #8]
 802dd48:	8181      	strh	r1, [r0, #12]
 802dd4a:	4619      	mov	r1, r3
 802dd4c:	6643      	str	r3, [r0, #100]	@ 0x64
 802dd4e:	81c2      	strh	r2, [r0, #14]
 802dd50:	2208      	movs	r2, #8
 802dd52:	6183      	str	r3, [r0, #24]
 802dd54:	e9c0 3300 	strd	r3, r3, [r0]
 802dd58:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802dd5c:	305c      	adds	r0, #92	@ 0x5c
 802dd5e:	f000 fa0b 	bl	802e178 <memset>
 802dd62:	4b0d      	ldr	r3, [pc, #52]	@ (802dd98 <std+0x58>)
 802dd64:	6224      	str	r4, [r4, #32]
 802dd66:	6263      	str	r3, [r4, #36]	@ 0x24
 802dd68:	4b0c      	ldr	r3, [pc, #48]	@ (802dd9c <std+0x5c>)
 802dd6a:	62a3      	str	r3, [r4, #40]	@ 0x28
 802dd6c:	4b0c      	ldr	r3, [pc, #48]	@ (802dda0 <std+0x60>)
 802dd6e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802dd70:	4b0c      	ldr	r3, [pc, #48]	@ (802dda4 <std+0x64>)
 802dd72:	6323      	str	r3, [r4, #48]	@ 0x30
 802dd74:	4b0c      	ldr	r3, [pc, #48]	@ (802dda8 <std+0x68>)
 802dd76:	429c      	cmp	r4, r3
 802dd78:	d006      	beq.n	802dd88 <std+0x48>
 802dd7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802dd7e:	4294      	cmp	r4, r2
 802dd80:	d002      	beq.n	802dd88 <std+0x48>
 802dd82:	33d0      	adds	r3, #208	@ 0xd0
 802dd84:	429c      	cmp	r4, r3
 802dd86:	d105      	bne.n	802dd94 <std+0x54>
 802dd88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802dd8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802dd90:	f000 babe 	b.w	802e310 <__retarget_lock_init_recursive>
 802dd94:	bd10      	pop	{r4, pc}
 802dd96:	bf00      	nop
 802dd98:	0802dfc9 	.word	0x0802dfc9
 802dd9c:	0802dfeb 	.word	0x0802dfeb
 802dda0:	0802e023 	.word	0x0802e023
 802dda4:	0802e047 	.word	0x0802e047
 802dda8:	2005c780 	.word	0x2005c780

0802ddac <stdio_exit_handler>:
 802ddac:	4a02      	ldr	r2, [pc, #8]	@ (802ddb8 <stdio_exit_handler+0xc>)
 802ddae:	4903      	ldr	r1, [pc, #12]	@ (802ddbc <stdio_exit_handler+0x10>)
 802ddb0:	4803      	ldr	r0, [pc, #12]	@ (802ddc0 <stdio_exit_handler+0x14>)
 802ddb2:	f000 b87b 	b.w	802deac <_fwalk_sglue>
 802ddb6:	bf00      	nop
 802ddb8:	2000009c 	.word	0x2000009c
 802ddbc:	0802eb2d 	.word	0x0802eb2d
 802ddc0:	200000ac 	.word	0x200000ac

0802ddc4 <cleanup_stdio>:
 802ddc4:	6841      	ldr	r1, [r0, #4]
 802ddc6:	4b0c      	ldr	r3, [pc, #48]	@ (802ddf8 <cleanup_stdio+0x34>)
 802ddc8:	4299      	cmp	r1, r3
 802ddca:	b510      	push	{r4, lr}
 802ddcc:	4604      	mov	r4, r0
 802ddce:	d001      	beq.n	802ddd4 <cleanup_stdio+0x10>
 802ddd0:	f000 feac 	bl	802eb2c <_fflush_r>
 802ddd4:	68a1      	ldr	r1, [r4, #8]
 802ddd6:	4b09      	ldr	r3, [pc, #36]	@ (802ddfc <cleanup_stdio+0x38>)
 802ddd8:	4299      	cmp	r1, r3
 802ddda:	d002      	beq.n	802dde2 <cleanup_stdio+0x1e>
 802dddc:	4620      	mov	r0, r4
 802ddde:	f000 fea5 	bl	802eb2c <_fflush_r>
 802dde2:	68e1      	ldr	r1, [r4, #12]
 802dde4:	4b06      	ldr	r3, [pc, #24]	@ (802de00 <cleanup_stdio+0x3c>)
 802dde6:	4299      	cmp	r1, r3
 802dde8:	d004      	beq.n	802ddf4 <cleanup_stdio+0x30>
 802ddea:	4620      	mov	r0, r4
 802ddec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ddf0:	f000 be9c 	b.w	802eb2c <_fflush_r>
 802ddf4:	bd10      	pop	{r4, pc}
 802ddf6:	bf00      	nop
 802ddf8:	2005c780 	.word	0x2005c780
 802ddfc:	2005c7e8 	.word	0x2005c7e8
 802de00:	2005c850 	.word	0x2005c850

0802de04 <global_stdio_init.part.0>:
 802de04:	b510      	push	{r4, lr}
 802de06:	4b0b      	ldr	r3, [pc, #44]	@ (802de34 <global_stdio_init.part.0+0x30>)
 802de08:	2104      	movs	r1, #4
 802de0a:	4c0b      	ldr	r4, [pc, #44]	@ (802de38 <global_stdio_init.part.0+0x34>)
 802de0c:	4a0b      	ldr	r2, [pc, #44]	@ (802de3c <global_stdio_init.part.0+0x38>)
 802de0e:	4620      	mov	r0, r4
 802de10:	601a      	str	r2, [r3, #0]
 802de12:	2200      	movs	r2, #0
 802de14:	f7ff ff94 	bl	802dd40 <std>
 802de18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802de1c:	2201      	movs	r2, #1
 802de1e:	2109      	movs	r1, #9
 802de20:	f7ff ff8e 	bl	802dd40 <std>
 802de24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802de28:	2202      	movs	r2, #2
 802de2a:	2112      	movs	r1, #18
 802de2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802de30:	f7ff bf86 	b.w	802dd40 <std>
 802de34:	2005c8b8 	.word	0x2005c8b8
 802de38:	2005c780 	.word	0x2005c780
 802de3c:	0802ddad 	.word	0x0802ddad

0802de40 <__sfp_lock_acquire>:
 802de40:	4801      	ldr	r0, [pc, #4]	@ (802de48 <__sfp_lock_acquire+0x8>)
 802de42:	f000 ba66 	b.w	802e312 <__retarget_lock_acquire_recursive>
 802de46:	bf00      	nop
 802de48:	2005c8c2 	.word	0x2005c8c2

0802de4c <__sfp_lock_release>:
 802de4c:	4801      	ldr	r0, [pc, #4]	@ (802de54 <__sfp_lock_release+0x8>)
 802de4e:	f000 ba61 	b.w	802e314 <__retarget_lock_release_recursive>
 802de52:	bf00      	nop
 802de54:	2005c8c2 	.word	0x2005c8c2

0802de58 <__sinit>:
 802de58:	b510      	push	{r4, lr}
 802de5a:	4604      	mov	r4, r0
 802de5c:	f7ff fff0 	bl	802de40 <__sfp_lock_acquire>
 802de60:	6a23      	ldr	r3, [r4, #32]
 802de62:	b11b      	cbz	r3, 802de6c <__sinit+0x14>
 802de64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802de68:	f7ff bff0 	b.w	802de4c <__sfp_lock_release>
 802de6c:	4b04      	ldr	r3, [pc, #16]	@ (802de80 <__sinit+0x28>)
 802de6e:	6223      	str	r3, [r4, #32]
 802de70:	4b04      	ldr	r3, [pc, #16]	@ (802de84 <__sinit+0x2c>)
 802de72:	681b      	ldr	r3, [r3, #0]
 802de74:	2b00      	cmp	r3, #0
 802de76:	d1f5      	bne.n	802de64 <__sinit+0xc>
 802de78:	f7ff ffc4 	bl	802de04 <global_stdio_init.part.0>
 802de7c:	e7f2      	b.n	802de64 <__sinit+0xc>
 802de7e:	bf00      	nop
 802de80:	0802ddc5 	.word	0x0802ddc5
 802de84:	2005c8b8 	.word	0x2005c8b8

0802de88 <fiprintf>:
 802de88:	b40e      	push	{r1, r2, r3}
 802de8a:	b503      	push	{r0, r1, lr}
 802de8c:	ab03      	add	r3, sp, #12
 802de8e:	4601      	mov	r1, r0
 802de90:	4805      	ldr	r0, [pc, #20]	@ (802dea8 <fiprintf+0x20>)
 802de92:	f853 2b04 	ldr.w	r2, [r3], #4
 802de96:	6800      	ldr	r0, [r0, #0]
 802de98:	9301      	str	r3, [sp, #4]
 802de9a:	f000 fb1b 	bl	802e4d4 <_vfiprintf_r>
 802de9e:	b002      	add	sp, #8
 802dea0:	f85d eb04 	ldr.w	lr, [sp], #4
 802dea4:	b003      	add	sp, #12
 802dea6:	4770      	bx	lr
 802dea8:	200000a8 	.word	0x200000a8

0802deac <_fwalk_sglue>:
 802deac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802deb0:	4607      	mov	r7, r0
 802deb2:	4688      	mov	r8, r1
 802deb4:	4614      	mov	r4, r2
 802deb6:	2600      	movs	r6, #0
 802deb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802debc:	f1b9 0901 	subs.w	r9, r9, #1
 802dec0:	d505      	bpl.n	802dece <_fwalk_sglue+0x22>
 802dec2:	6824      	ldr	r4, [r4, #0]
 802dec4:	2c00      	cmp	r4, #0
 802dec6:	d1f7      	bne.n	802deb8 <_fwalk_sglue+0xc>
 802dec8:	4630      	mov	r0, r6
 802deca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802dece:	89ab      	ldrh	r3, [r5, #12]
 802ded0:	2b01      	cmp	r3, #1
 802ded2:	d907      	bls.n	802dee4 <_fwalk_sglue+0x38>
 802ded4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802ded8:	3301      	adds	r3, #1
 802deda:	d003      	beq.n	802dee4 <_fwalk_sglue+0x38>
 802dedc:	4629      	mov	r1, r5
 802dede:	4638      	mov	r0, r7
 802dee0:	47c0      	blx	r8
 802dee2:	4306      	orrs	r6, r0
 802dee4:	3568      	adds	r5, #104	@ 0x68
 802dee6:	e7e9      	b.n	802debc <_fwalk_sglue+0x10>

0802dee8 <iprintf>:
 802dee8:	b40f      	push	{r0, r1, r2, r3}
 802deea:	b507      	push	{r0, r1, r2, lr}
 802deec:	4906      	ldr	r1, [pc, #24]	@ (802df08 <iprintf+0x20>)
 802deee:	ab04      	add	r3, sp, #16
 802def0:	6808      	ldr	r0, [r1, #0]
 802def2:	f853 2b04 	ldr.w	r2, [r3], #4
 802def6:	6881      	ldr	r1, [r0, #8]
 802def8:	9301      	str	r3, [sp, #4]
 802defa:	f000 faeb 	bl	802e4d4 <_vfiprintf_r>
 802defe:	b003      	add	sp, #12
 802df00:	f85d eb04 	ldr.w	lr, [sp], #4
 802df04:	b004      	add	sp, #16
 802df06:	4770      	bx	lr
 802df08:	200000a8 	.word	0x200000a8

0802df0c <_puts_r>:
 802df0c:	6a03      	ldr	r3, [r0, #32]
 802df0e:	b570      	push	{r4, r5, r6, lr}
 802df10:	4605      	mov	r5, r0
 802df12:	460e      	mov	r6, r1
 802df14:	6884      	ldr	r4, [r0, #8]
 802df16:	b90b      	cbnz	r3, 802df1c <_puts_r+0x10>
 802df18:	f7ff ff9e 	bl	802de58 <__sinit>
 802df1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802df1e:	07db      	lsls	r3, r3, #31
 802df20:	d405      	bmi.n	802df2e <_puts_r+0x22>
 802df22:	89a3      	ldrh	r3, [r4, #12]
 802df24:	0598      	lsls	r0, r3, #22
 802df26:	d402      	bmi.n	802df2e <_puts_r+0x22>
 802df28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802df2a:	f000 f9f2 	bl	802e312 <__retarget_lock_acquire_recursive>
 802df2e:	89a3      	ldrh	r3, [r4, #12]
 802df30:	0719      	lsls	r1, r3, #28
 802df32:	d502      	bpl.n	802df3a <_puts_r+0x2e>
 802df34:	6923      	ldr	r3, [r4, #16]
 802df36:	2b00      	cmp	r3, #0
 802df38:	d135      	bne.n	802dfa6 <_puts_r+0x9a>
 802df3a:	4621      	mov	r1, r4
 802df3c:	4628      	mov	r0, r5
 802df3e:	f000 f8c5 	bl	802e0cc <__swsetup_r>
 802df42:	b380      	cbz	r0, 802dfa6 <_puts_r+0x9a>
 802df44:	f04f 35ff 	mov.w	r5, #4294967295
 802df48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802df4a:	07da      	lsls	r2, r3, #31
 802df4c:	d405      	bmi.n	802df5a <_puts_r+0x4e>
 802df4e:	89a3      	ldrh	r3, [r4, #12]
 802df50:	059b      	lsls	r3, r3, #22
 802df52:	d402      	bmi.n	802df5a <_puts_r+0x4e>
 802df54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802df56:	f000 f9dd 	bl	802e314 <__retarget_lock_release_recursive>
 802df5a:	4628      	mov	r0, r5
 802df5c:	bd70      	pop	{r4, r5, r6, pc}
 802df5e:	2b00      	cmp	r3, #0
 802df60:	da04      	bge.n	802df6c <_puts_r+0x60>
 802df62:	69a2      	ldr	r2, [r4, #24]
 802df64:	429a      	cmp	r2, r3
 802df66:	dc17      	bgt.n	802df98 <_puts_r+0x8c>
 802df68:	290a      	cmp	r1, #10
 802df6a:	d015      	beq.n	802df98 <_puts_r+0x8c>
 802df6c:	6823      	ldr	r3, [r4, #0]
 802df6e:	1c5a      	adds	r2, r3, #1
 802df70:	6022      	str	r2, [r4, #0]
 802df72:	7019      	strb	r1, [r3, #0]
 802df74:	68a3      	ldr	r3, [r4, #8]
 802df76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802df7a:	3b01      	subs	r3, #1
 802df7c:	60a3      	str	r3, [r4, #8]
 802df7e:	2900      	cmp	r1, #0
 802df80:	d1ed      	bne.n	802df5e <_puts_r+0x52>
 802df82:	2b00      	cmp	r3, #0
 802df84:	da11      	bge.n	802dfaa <_puts_r+0x9e>
 802df86:	4622      	mov	r2, r4
 802df88:	210a      	movs	r1, #10
 802df8a:	4628      	mov	r0, r5
 802df8c:	f000 f85f 	bl	802e04e <__swbuf_r>
 802df90:	3001      	adds	r0, #1
 802df92:	d0d7      	beq.n	802df44 <_puts_r+0x38>
 802df94:	250a      	movs	r5, #10
 802df96:	e7d7      	b.n	802df48 <_puts_r+0x3c>
 802df98:	4622      	mov	r2, r4
 802df9a:	4628      	mov	r0, r5
 802df9c:	f000 f857 	bl	802e04e <__swbuf_r>
 802dfa0:	3001      	adds	r0, #1
 802dfa2:	d1e7      	bne.n	802df74 <_puts_r+0x68>
 802dfa4:	e7ce      	b.n	802df44 <_puts_r+0x38>
 802dfa6:	3e01      	subs	r6, #1
 802dfa8:	e7e4      	b.n	802df74 <_puts_r+0x68>
 802dfaa:	6823      	ldr	r3, [r4, #0]
 802dfac:	1c5a      	adds	r2, r3, #1
 802dfae:	6022      	str	r2, [r4, #0]
 802dfb0:	220a      	movs	r2, #10
 802dfb2:	701a      	strb	r2, [r3, #0]
 802dfb4:	e7ee      	b.n	802df94 <_puts_r+0x88>
	...

0802dfb8 <puts>:
 802dfb8:	4b02      	ldr	r3, [pc, #8]	@ (802dfc4 <puts+0xc>)
 802dfba:	4601      	mov	r1, r0
 802dfbc:	6818      	ldr	r0, [r3, #0]
 802dfbe:	f7ff bfa5 	b.w	802df0c <_puts_r>
 802dfc2:	bf00      	nop
 802dfc4:	200000a8 	.word	0x200000a8

0802dfc8 <__sread>:
 802dfc8:	b510      	push	{r4, lr}
 802dfca:	460c      	mov	r4, r1
 802dfcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802dfd0:	f000 f92c 	bl	802e22c <_read_r>
 802dfd4:	2800      	cmp	r0, #0
 802dfd6:	bfab      	itete	ge
 802dfd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802dfda:	89a3      	ldrhlt	r3, [r4, #12]
 802dfdc:	181b      	addge	r3, r3, r0
 802dfde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802dfe2:	bfac      	ite	ge
 802dfe4:	6563      	strge	r3, [r4, #84]	@ 0x54
 802dfe6:	81a3      	strhlt	r3, [r4, #12]
 802dfe8:	bd10      	pop	{r4, pc}

0802dfea <__swrite>:
 802dfea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802dfee:	461f      	mov	r7, r3
 802dff0:	898b      	ldrh	r3, [r1, #12]
 802dff2:	4605      	mov	r5, r0
 802dff4:	460c      	mov	r4, r1
 802dff6:	05db      	lsls	r3, r3, #23
 802dff8:	4616      	mov	r6, r2
 802dffa:	d505      	bpl.n	802e008 <__swrite+0x1e>
 802dffc:	2302      	movs	r3, #2
 802dffe:	2200      	movs	r2, #0
 802e000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e004:	f000 f900 	bl	802e208 <_lseek_r>
 802e008:	89a3      	ldrh	r3, [r4, #12]
 802e00a:	4632      	mov	r2, r6
 802e00c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802e010:	4628      	mov	r0, r5
 802e012:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802e016:	81a3      	strh	r3, [r4, #12]
 802e018:	463b      	mov	r3, r7
 802e01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802e01e:	f000 b93b 	b.w	802e298 <_write_r>

0802e022 <__sseek>:
 802e022:	b510      	push	{r4, lr}
 802e024:	460c      	mov	r4, r1
 802e026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e02a:	f000 f8ed 	bl	802e208 <_lseek_r>
 802e02e:	1c43      	adds	r3, r0, #1
 802e030:	89a3      	ldrh	r3, [r4, #12]
 802e032:	bf15      	itete	ne
 802e034:	6560      	strne	r0, [r4, #84]	@ 0x54
 802e036:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802e03a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802e03e:	81a3      	strheq	r3, [r4, #12]
 802e040:	bf18      	it	ne
 802e042:	81a3      	strhne	r3, [r4, #12]
 802e044:	bd10      	pop	{r4, pc}

0802e046 <__sclose>:
 802e046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e04a:	f000 b8cd 	b.w	802e1e8 <_close_r>

0802e04e <__swbuf_r>:
 802e04e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e050:	460e      	mov	r6, r1
 802e052:	4614      	mov	r4, r2
 802e054:	4605      	mov	r5, r0
 802e056:	b118      	cbz	r0, 802e060 <__swbuf_r+0x12>
 802e058:	6a03      	ldr	r3, [r0, #32]
 802e05a:	b90b      	cbnz	r3, 802e060 <__swbuf_r+0x12>
 802e05c:	f7ff fefc 	bl	802de58 <__sinit>
 802e060:	69a3      	ldr	r3, [r4, #24]
 802e062:	60a3      	str	r3, [r4, #8]
 802e064:	89a3      	ldrh	r3, [r4, #12]
 802e066:	071a      	lsls	r2, r3, #28
 802e068:	d501      	bpl.n	802e06e <__swbuf_r+0x20>
 802e06a:	6923      	ldr	r3, [r4, #16]
 802e06c:	b943      	cbnz	r3, 802e080 <__swbuf_r+0x32>
 802e06e:	4621      	mov	r1, r4
 802e070:	4628      	mov	r0, r5
 802e072:	f000 f82b 	bl	802e0cc <__swsetup_r>
 802e076:	b118      	cbz	r0, 802e080 <__swbuf_r+0x32>
 802e078:	f04f 37ff 	mov.w	r7, #4294967295
 802e07c:	4638      	mov	r0, r7
 802e07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e080:	6823      	ldr	r3, [r4, #0]
 802e082:	b2f6      	uxtb	r6, r6
 802e084:	6922      	ldr	r2, [r4, #16]
 802e086:	4637      	mov	r7, r6
 802e088:	1a98      	subs	r0, r3, r2
 802e08a:	6963      	ldr	r3, [r4, #20]
 802e08c:	4283      	cmp	r3, r0
 802e08e:	dc05      	bgt.n	802e09c <__swbuf_r+0x4e>
 802e090:	4621      	mov	r1, r4
 802e092:	4628      	mov	r0, r5
 802e094:	f000 fd4a 	bl	802eb2c <_fflush_r>
 802e098:	2800      	cmp	r0, #0
 802e09a:	d1ed      	bne.n	802e078 <__swbuf_r+0x2a>
 802e09c:	68a3      	ldr	r3, [r4, #8]
 802e09e:	3b01      	subs	r3, #1
 802e0a0:	60a3      	str	r3, [r4, #8]
 802e0a2:	6823      	ldr	r3, [r4, #0]
 802e0a4:	1c5a      	adds	r2, r3, #1
 802e0a6:	6022      	str	r2, [r4, #0]
 802e0a8:	701e      	strb	r6, [r3, #0]
 802e0aa:	1c43      	adds	r3, r0, #1
 802e0ac:	6962      	ldr	r2, [r4, #20]
 802e0ae:	429a      	cmp	r2, r3
 802e0b0:	d004      	beq.n	802e0bc <__swbuf_r+0x6e>
 802e0b2:	89a3      	ldrh	r3, [r4, #12]
 802e0b4:	07db      	lsls	r3, r3, #31
 802e0b6:	d5e1      	bpl.n	802e07c <__swbuf_r+0x2e>
 802e0b8:	2e0a      	cmp	r6, #10
 802e0ba:	d1df      	bne.n	802e07c <__swbuf_r+0x2e>
 802e0bc:	4621      	mov	r1, r4
 802e0be:	4628      	mov	r0, r5
 802e0c0:	f000 fd34 	bl	802eb2c <_fflush_r>
 802e0c4:	2800      	cmp	r0, #0
 802e0c6:	d0d9      	beq.n	802e07c <__swbuf_r+0x2e>
 802e0c8:	e7d6      	b.n	802e078 <__swbuf_r+0x2a>
	...

0802e0cc <__swsetup_r>:
 802e0cc:	b538      	push	{r3, r4, r5, lr}
 802e0ce:	4b29      	ldr	r3, [pc, #164]	@ (802e174 <__swsetup_r+0xa8>)
 802e0d0:	4605      	mov	r5, r0
 802e0d2:	460c      	mov	r4, r1
 802e0d4:	6818      	ldr	r0, [r3, #0]
 802e0d6:	b118      	cbz	r0, 802e0e0 <__swsetup_r+0x14>
 802e0d8:	6a03      	ldr	r3, [r0, #32]
 802e0da:	b90b      	cbnz	r3, 802e0e0 <__swsetup_r+0x14>
 802e0dc:	f7ff febc 	bl	802de58 <__sinit>
 802e0e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e0e4:	0719      	lsls	r1, r3, #28
 802e0e6:	d422      	bmi.n	802e12e <__swsetup_r+0x62>
 802e0e8:	06da      	lsls	r2, r3, #27
 802e0ea:	d407      	bmi.n	802e0fc <__swsetup_r+0x30>
 802e0ec:	2209      	movs	r2, #9
 802e0ee:	602a      	str	r2, [r5, #0]
 802e0f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802e0f4:	f04f 30ff 	mov.w	r0, #4294967295
 802e0f8:	81a3      	strh	r3, [r4, #12]
 802e0fa:	e033      	b.n	802e164 <__swsetup_r+0x98>
 802e0fc:	0758      	lsls	r0, r3, #29
 802e0fe:	d512      	bpl.n	802e126 <__swsetup_r+0x5a>
 802e100:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802e102:	b141      	cbz	r1, 802e116 <__swsetup_r+0x4a>
 802e104:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802e108:	4299      	cmp	r1, r3
 802e10a:	d002      	beq.n	802e112 <__swsetup_r+0x46>
 802e10c:	4628      	mov	r0, r5
 802e10e:	f000 f96d 	bl	802e3ec <_free_r>
 802e112:	2300      	movs	r3, #0
 802e114:	6363      	str	r3, [r4, #52]	@ 0x34
 802e116:	89a3      	ldrh	r3, [r4, #12]
 802e118:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802e11c:	81a3      	strh	r3, [r4, #12]
 802e11e:	2300      	movs	r3, #0
 802e120:	6063      	str	r3, [r4, #4]
 802e122:	6923      	ldr	r3, [r4, #16]
 802e124:	6023      	str	r3, [r4, #0]
 802e126:	89a3      	ldrh	r3, [r4, #12]
 802e128:	f043 0308 	orr.w	r3, r3, #8
 802e12c:	81a3      	strh	r3, [r4, #12]
 802e12e:	6923      	ldr	r3, [r4, #16]
 802e130:	b94b      	cbnz	r3, 802e146 <__swsetup_r+0x7a>
 802e132:	89a3      	ldrh	r3, [r4, #12]
 802e134:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802e138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802e13c:	d003      	beq.n	802e146 <__swsetup_r+0x7a>
 802e13e:	4621      	mov	r1, r4
 802e140:	4628      	mov	r0, r5
 802e142:	f000 fd40 	bl	802ebc6 <__smakebuf_r>
 802e146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e14a:	f013 0201 	ands.w	r2, r3, #1
 802e14e:	d00a      	beq.n	802e166 <__swsetup_r+0x9a>
 802e150:	2200      	movs	r2, #0
 802e152:	60a2      	str	r2, [r4, #8]
 802e154:	6962      	ldr	r2, [r4, #20]
 802e156:	4252      	negs	r2, r2
 802e158:	61a2      	str	r2, [r4, #24]
 802e15a:	6922      	ldr	r2, [r4, #16]
 802e15c:	b942      	cbnz	r2, 802e170 <__swsetup_r+0xa4>
 802e15e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802e162:	d1c5      	bne.n	802e0f0 <__swsetup_r+0x24>
 802e164:	bd38      	pop	{r3, r4, r5, pc}
 802e166:	0799      	lsls	r1, r3, #30
 802e168:	bf58      	it	pl
 802e16a:	6962      	ldrpl	r2, [r4, #20]
 802e16c:	60a2      	str	r2, [r4, #8]
 802e16e:	e7f4      	b.n	802e15a <__swsetup_r+0x8e>
 802e170:	2000      	movs	r0, #0
 802e172:	e7f7      	b.n	802e164 <__swsetup_r+0x98>
 802e174:	200000a8 	.word	0x200000a8

0802e178 <memset>:
 802e178:	4402      	add	r2, r0
 802e17a:	4603      	mov	r3, r0
 802e17c:	4293      	cmp	r3, r2
 802e17e:	d100      	bne.n	802e182 <memset+0xa>
 802e180:	4770      	bx	lr
 802e182:	f803 1b01 	strb.w	r1, [r3], #1
 802e186:	e7f9      	b.n	802e17c <memset+0x4>

0802e188 <_raise_r>:
 802e188:	291f      	cmp	r1, #31
 802e18a:	b538      	push	{r3, r4, r5, lr}
 802e18c:	4605      	mov	r5, r0
 802e18e:	460c      	mov	r4, r1
 802e190:	d904      	bls.n	802e19c <_raise_r+0x14>
 802e192:	2316      	movs	r3, #22
 802e194:	6003      	str	r3, [r0, #0]
 802e196:	f04f 30ff 	mov.w	r0, #4294967295
 802e19a:	bd38      	pop	{r3, r4, r5, pc}
 802e19c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802e19e:	b112      	cbz	r2, 802e1a6 <_raise_r+0x1e>
 802e1a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802e1a4:	b94b      	cbnz	r3, 802e1ba <_raise_r+0x32>
 802e1a6:	4628      	mov	r0, r5
 802e1a8:	f000 f864 	bl	802e274 <_getpid_r>
 802e1ac:	4622      	mov	r2, r4
 802e1ae:	4601      	mov	r1, r0
 802e1b0:	4628      	mov	r0, r5
 802e1b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e1b6:	f000 b84b 	b.w	802e250 <_kill_r>
 802e1ba:	2b01      	cmp	r3, #1
 802e1bc:	d00a      	beq.n	802e1d4 <_raise_r+0x4c>
 802e1be:	1c59      	adds	r1, r3, #1
 802e1c0:	d103      	bne.n	802e1ca <_raise_r+0x42>
 802e1c2:	2316      	movs	r3, #22
 802e1c4:	6003      	str	r3, [r0, #0]
 802e1c6:	2001      	movs	r0, #1
 802e1c8:	e7e7      	b.n	802e19a <_raise_r+0x12>
 802e1ca:	2100      	movs	r1, #0
 802e1cc:	4620      	mov	r0, r4
 802e1ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802e1d2:	4798      	blx	r3
 802e1d4:	2000      	movs	r0, #0
 802e1d6:	e7e0      	b.n	802e19a <_raise_r+0x12>

0802e1d8 <raise>:
 802e1d8:	4b02      	ldr	r3, [pc, #8]	@ (802e1e4 <raise+0xc>)
 802e1da:	4601      	mov	r1, r0
 802e1dc:	6818      	ldr	r0, [r3, #0]
 802e1de:	f7ff bfd3 	b.w	802e188 <_raise_r>
 802e1e2:	bf00      	nop
 802e1e4:	200000a8 	.word	0x200000a8

0802e1e8 <_close_r>:
 802e1e8:	b538      	push	{r3, r4, r5, lr}
 802e1ea:	2300      	movs	r3, #0
 802e1ec:	4d05      	ldr	r5, [pc, #20]	@ (802e204 <_close_r+0x1c>)
 802e1ee:	4604      	mov	r4, r0
 802e1f0:	4608      	mov	r0, r1
 802e1f2:	602b      	str	r3, [r5, #0]
 802e1f4:	f7d3 fc28 	bl	8001a48 <_close>
 802e1f8:	1c43      	adds	r3, r0, #1
 802e1fa:	d102      	bne.n	802e202 <_close_r+0x1a>
 802e1fc:	682b      	ldr	r3, [r5, #0]
 802e1fe:	b103      	cbz	r3, 802e202 <_close_r+0x1a>
 802e200:	6023      	str	r3, [r4, #0]
 802e202:	bd38      	pop	{r3, r4, r5, pc}
 802e204:	2005c8bc 	.word	0x2005c8bc

0802e208 <_lseek_r>:
 802e208:	b538      	push	{r3, r4, r5, lr}
 802e20a:	4604      	mov	r4, r0
 802e20c:	4d06      	ldr	r5, [pc, #24]	@ (802e228 <_lseek_r+0x20>)
 802e20e:	4608      	mov	r0, r1
 802e210:	4611      	mov	r1, r2
 802e212:	2200      	movs	r2, #0
 802e214:	602a      	str	r2, [r5, #0]
 802e216:	461a      	mov	r2, r3
 802e218:	f7d3 fc3d 	bl	8001a96 <_lseek>
 802e21c:	1c43      	adds	r3, r0, #1
 802e21e:	d102      	bne.n	802e226 <_lseek_r+0x1e>
 802e220:	682b      	ldr	r3, [r5, #0]
 802e222:	b103      	cbz	r3, 802e226 <_lseek_r+0x1e>
 802e224:	6023      	str	r3, [r4, #0]
 802e226:	bd38      	pop	{r3, r4, r5, pc}
 802e228:	2005c8bc 	.word	0x2005c8bc

0802e22c <_read_r>:
 802e22c:	b538      	push	{r3, r4, r5, lr}
 802e22e:	4604      	mov	r4, r0
 802e230:	4d06      	ldr	r5, [pc, #24]	@ (802e24c <_read_r+0x20>)
 802e232:	4608      	mov	r0, r1
 802e234:	4611      	mov	r1, r2
 802e236:	2200      	movs	r2, #0
 802e238:	602a      	str	r2, [r5, #0]
 802e23a:	461a      	mov	r2, r3
 802e23c:	f7d3 fbcb 	bl	80019d6 <_read>
 802e240:	1c43      	adds	r3, r0, #1
 802e242:	d102      	bne.n	802e24a <_read_r+0x1e>
 802e244:	682b      	ldr	r3, [r5, #0]
 802e246:	b103      	cbz	r3, 802e24a <_read_r+0x1e>
 802e248:	6023      	str	r3, [r4, #0]
 802e24a:	bd38      	pop	{r3, r4, r5, pc}
 802e24c:	2005c8bc 	.word	0x2005c8bc

0802e250 <_kill_r>:
 802e250:	b538      	push	{r3, r4, r5, lr}
 802e252:	2300      	movs	r3, #0
 802e254:	4d06      	ldr	r5, [pc, #24]	@ (802e270 <_kill_r+0x20>)
 802e256:	4604      	mov	r4, r0
 802e258:	4608      	mov	r0, r1
 802e25a:	4611      	mov	r1, r2
 802e25c:	602b      	str	r3, [r5, #0]
 802e25e:	f7d3 fb9f 	bl	80019a0 <_kill>
 802e262:	1c43      	adds	r3, r0, #1
 802e264:	d102      	bne.n	802e26c <_kill_r+0x1c>
 802e266:	682b      	ldr	r3, [r5, #0]
 802e268:	b103      	cbz	r3, 802e26c <_kill_r+0x1c>
 802e26a:	6023      	str	r3, [r4, #0]
 802e26c:	bd38      	pop	{r3, r4, r5, pc}
 802e26e:	bf00      	nop
 802e270:	2005c8bc 	.word	0x2005c8bc

0802e274 <_getpid_r>:
 802e274:	f7d3 bb8c 	b.w	8001990 <_getpid>

0802e278 <_sbrk_r>:
 802e278:	b538      	push	{r3, r4, r5, lr}
 802e27a:	2300      	movs	r3, #0
 802e27c:	4d05      	ldr	r5, [pc, #20]	@ (802e294 <_sbrk_r+0x1c>)
 802e27e:	4604      	mov	r4, r0
 802e280:	4608      	mov	r0, r1
 802e282:	602b      	str	r3, [r5, #0]
 802e284:	f7d3 fc14 	bl	8001ab0 <_sbrk>
 802e288:	1c43      	adds	r3, r0, #1
 802e28a:	d102      	bne.n	802e292 <_sbrk_r+0x1a>
 802e28c:	682b      	ldr	r3, [r5, #0]
 802e28e:	b103      	cbz	r3, 802e292 <_sbrk_r+0x1a>
 802e290:	6023      	str	r3, [r4, #0]
 802e292:	bd38      	pop	{r3, r4, r5, pc}
 802e294:	2005c8bc 	.word	0x2005c8bc

0802e298 <_write_r>:
 802e298:	b538      	push	{r3, r4, r5, lr}
 802e29a:	4604      	mov	r4, r0
 802e29c:	4d06      	ldr	r5, [pc, #24]	@ (802e2b8 <_write_r+0x20>)
 802e29e:	4608      	mov	r0, r1
 802e2a0:	4611      	mov	r1, r2
 802e2a2:	2200      	movs	r2, #0
 802e2a4:	602a      	str	r2, [r5, #0]
 802e2a6:	461a      	mov	r2, r3
 802e2a8:	f7d3 fbb2 	bl	8001a10 <_write>
 802e2ac:	1c43      	adds	r3, r0, #1
 802e2ae:	d102      	bne.n	802e2b6 <_write_r+0x1e>
 802e2b0:	682b      	ldr	r3, [r5, #0]
 802e2b2:	b103      	cbz	r3, 802e2b6 <_write_r+0x1e>
 802e2b4:	6023      	str	r3, [r4, #0]
 802e2b6:	bd38      	pop	{r3, r4, r5, pc}
 802e2b8:	2005c8bc 	.word	0x2005c8bc

0802e2bc <__errno>:
 802e2bc:	4b01      	ldr	r3, [pc, #4]	@ (802e2c4 <__errno+0x8>)
 802e2be:	6818      	ldr	r0, [r3, #0]
 802e2c0:	4770      	bx	lr
 802e2c2:	bf00      	nop
 802e2c4:	200000a8 	.word	0x200000a8

0802e2c8 <__libc_init_array>:
 802e2c8:	b570      	push	{r4, r5, r6, lr}
 802e2ca:	4d0d      	ldr	r5, [pc, #52]	@ (802e300 <__libc_init_array+0x38>)
 802e2cc:	2600      	movs	r6, #0
 802e2ce:	4c0d      	ldr	r4, [pc, #52]	@ (802e304 <__libc_init_array+0x3c>)
 802e2d0:	1b64      	subs	r4, r4, r5
 802e2d2:	10a4      	asrs	r4, r4, #2
 802e2d4:	42a6      	cmp	r6, r4
 802e2d6:	d109      	bne.n	802e2ec <__libc_init_array+0x24>
 802e2d8:	4d0b      	ldr	r5, [pc, #44]	@ (802e308 <__libc_init_array+0x40>)
 802e2da:	2600      	movs	r6, #0
 802e2dc:	4c0b      	ldr	r4, [pc, #44]	@ (802e30c <__libc_init_array+0x44>)
 802e2de:	f000 fcdf 	bl	802eca0 <_init>
 802e2e2:	1b64      	subs	r4, r4, r5
 802e2e4:	10a4      	asrs	r4, r4, #2
 802e2e6:	42a6      	cmp	r6, r4
 802e2e8:	d105      	bne.n	802e2f6 <__libc_init_array+0x2e>
 802e2ea:	bd70      	pop	{r4, r5, r6, pc}
 802e2ec:	f855 3b04 	ldr.w	r3, [r5], #4
 802e2f0:	3601      	adds	r6, #1
 802e2f2:	4798      	blx	r3
 802e2f4:	e7ee      	b.n	802e2d4 <__libc_init_array+0xc>
 802e2f6:	f855 3b04 	ldr.w	r3, [r5], #4
 802e2fa:	3601      	adds	r6, #1
 802e2fc:	4798      	blx	r3
 802e2fe:	e7f2      	b.n	802e2e6 <__libc_init_array+0x1e>
 802e300:	0807a44c 	.word	0x0807a44c
 802e304:	0807a44c 	.word	0x0807a44c
 802e308:	0807a44c 	.word	0x0807a44c
 802e30c:	0807a460 	.word	0x0807a460

0802e310 <__retarget_lock_init_recursive>:
 802e310:	4770      	bx	lr

0802e312 <__retarget_lock_acquire_recursive>:
 802e312:	4770      	bx	lr

0802e314 <__retarget_lock_release_recursive>:
 802e314:	4770      	bx	lr

0802e316 <memcpy>:
 802e316:	440a      	add	r2, r1
 802e318:	1e43      	subs	r3, r0, #1
 802e31a:	4291      	cmp	r1, r2
 802e31c:	d100      	bne.n	802e320 <memcpy+0xa>
 802e31e:	4770      	bx	lr
 802e320:	b510      	push	{r4, lr}
 802e322:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e326:	4291      	cmp	r1, r2
 802e328:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e32c:	d1f9      	bne.n	802e322 <memcpy+0xc>
 802e32e:	bd10      	pop	{r4, pc}

0802e330 <__register_exitproc>:
 802e330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e334:	4d28      	ldr	r5, [pc, #160]	@ (802e3d8 <__register_exitproc+0xa8>)
 802e336:	4607      	mov	r7, r0
 802e338:	4691      	mov	r9, r2
 802e33a:	460e      	mov	r6, r1
 802e33c:	6828      	ldr	r0, [r5, #0]
 802e33e:	4698      	mov	r8, r3
 802e340:	f7ff ffe7 	bl	802e312 <__retarget_lock_acquire_recursive>
 802e344:	4a25      	ldr	r2, [pc, #148]	@ (802e3dc <__register_exitproc+0xac>)
 802e346:	6814      	ldr	r4, [r2, #0]
 802e348:	b93c      	cbnz	r4, 802e35a <__register_exitproc+0x2a>
 802e34a:	4b25      	ldr	r3, [pc, #148]	@ (802e3e0 <__register_exitproc+0xb0>)
 802e34c:	6013      	str	r3, [r2, #0]
 802e34e:	4a25      	ldr	r2, [pc, #148]	@ (802e3e4 <__register_exitproc+0xb4>)
 802e350:	b112      	cbz	r2, 802e358 <__register_exitproc+0x28>
 802e352:	6812      	ldr	r2, [r2, #0]
 802e354:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802e358:	4c21      	ldr	r4, [pc, #132]	@ (802e3e0 <__register_exitproc+0xb0>)
 802e35a:	6863      	ldr	r3, [r4, #4]
 802e35c:	2b1f      	cmp	r3, #31
 802e35e:	dd06      	ble.n	802e36e <__register_exitproc+0x3e>
 802e360:	6828      	ldr	r0, [r5, #0]
 802e362:	f7ff ffd7 	bl	802e314 <__retarget_lock_release_recursive>
 802e366:	f04f 30ff 	mov.w	r0, #4294967295
 802e36a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e36e:	b33f      	cbz	r7, 802e3c0 <__register_exitproc+0x90>
 802e370:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802e374:	b968      	cbnz	r0, 802e392 <__register_exitproc+0x62>
 802e376:	4b1c      	ldr	r3, [pc, #112]	@ (802e3e8 <__register_exitproc+0xb8>)
 802e378:	2b00      	cmp	r3, #0
 802e37a:	d0f1      	beq.n	802e360 <__register_exitproc+0x30>
 802e37c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802e380:	f7ff fc12 	bl	802dba8 <malloc>
 802e384:	2800      	cmp	r0, #0
 802e386:	d0eb      	beq.n	802e360 <__register_exitproc+0x30>
 802e388:	2300      	movs	r3, #0
 802e38a:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802e38e:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802e392:	6863      	ldr	r3, [r4, #4]
 802e394:	2201      	movs	r2, #1
 802e396:	2f02      	cmp	r7, #2
 802e398:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802e39c:	fa02 f203 	lsl.w	r2, r2, r3
 802e3a0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802e3a4:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802e3a8:	ea43 0302 	orr.w	r3, r3, r2
 802e3ac:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802e3b0:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802e3b4:	bf02      	ittt	eq
 802e3b6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802e3ba:	4313      	orreq	r3, r2
 802e3bc:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802e3c0:	6863      	ldr	r3, [r4, #4]
 802e3c2:	6828      	ldr	r0, [r5, #0]
 802e3c4:	1c5a      	adds	r2, r3, #1
 802e3c6:	3302      	adds	r3, #2
 802e3c8:	6062      	str	r2, [r4, #4]
 802e3ca:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802e3ce:	f7ff ffa1 	bl	802e314 <__retarget_lock_release_recursive>
 802e3d2:	2000      	movs	r0, #0
 802e3d4:	e7c9      	b.n	802e36a <__register_exitproc+0x3a>
 802e3d6:	bf00      	nop
 802e3d8:	200000f8 	.word	0x200000f8
 802e3dc:	2005c950 	.word	0x2005c950
 802e3e0:	2005c8c4 	.word	0x2005c8c4
 802e3e4:	080318a8 	.word	0x080318a8
 802e3e8:	0802dba9 	.word	0x0802dba9

0802e3ec <_free_r>:
 802e3ec:	b538      	push	{r3, r4, r5, lr}
 802e3ee:	4605      	mov	r5, r0
 802e3f0:	2900      	cmp	r1, #0
 802e3f2:	d041      	beq.n	802e478 <_free_r+0x8c>
 802e3f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e3f8:	1f0c      	subs	r4, r1, #4
 802e3fa:	2b00      	cmp	r3, #0
 802e3fc:	bfb8      	it	lt
 802e3fe:	18e4      	addlt	r4, r4, r3
 802e400:	f7ff fc84 	bl	802dd0c <__malloc_lock>
 802e404:	4a1d      	ldr	r2, [pc, #116]	@ (802e47c <_free_r+0x90>)
 802e406:	6813      	ldr	r3, [r2, #0]
 802e408:	b933      	cbnz	r3, 802e418 <_free_r+0x2c>
 802e40a:	6063      	str	r3, [r4, #4]
 802e40c:	6014      	str	r4, [r2, #0]
 802e40e:	4628      	mov	r0, r5
 802e410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e414:	f7ff bc80 	b.w	802dd18 <__malloc_unlock>
 802e418:	42a3      	cmp	r3, r4
 802e41a:	d908      	bls.n	802e42e <_free_r+0x42>
 802e41c:	6820      	ldr	r0, [r4, #0]
 802e41e:	1821      	adds	r1, r4, r0
 802e420:	428b      	cmp	r3, r1
 802e422:	bf01      	itttt	eq
 802e424:	6819      	ldreq	r1, [r3, #0]
 802e426:	685b      	ldreq	r3, [r3, #4]
 802e428:	1809      	addeq	r1, r1, r0
 802e42a:	6021      	streq	r1, [r4, #0]
 802e42c:	e7ed      	b.n	802e40a <_free_r+0x1e>
 802e42e:	461a      	mov	r2, r3
 802e430:	685b      	ldr	r3, [r3, #4]
 802e432:	b10b      	cbz	r3, 802e438 <_free_r+0x4c>
 802e434:	42a3      	cmp	r3, r4
 802e436:	d9fa      	bls.n	802e42e <_free_r+0x42>
 802e438:	6811      	ldr	r1, [r2, #0]
 802e43a:	1850      	adds	r0, r2, r1
 802e43c:	42a0      	cmp	r0, r4
 802e43e:	d10b      	bne.n	802e458 <_free_r+0x6c>
 802e440:	6820      	ldr	r0, [r4, #0]
 802e442:	4401      	add	r1, r0
 802e444:	1850      	adds	r0, r2, r1
 802e446:	6011      	str	r1, [r2, #0]
 802e448:	4283      	cmp	r3, r0
 802e44a:	d1e0      	bne.n	802e40e <_free_r+0x22>
 802e44c:	6818      	ldr	r0, [r3, #0]
 802e44e:	685b      	ldr	r3, [r3, #4]
 802e450:	4408      	add	r0, r1
 802e452:	6053      	str	r3, [r2, #4]
 802e454:	6010      	str	r0, [r2, #0]
 802e456:	e7da      	b.n	802e40e <_free_r+0x22>
 802e458:	d902      	bls.n	802e460 <_free_r+0x74>
 802e45a:	230c      	movs	r3, #12
 802e45c:	602b      	str	r3, [r5, #0]
 802e45e:	e7d6      	b.n	802e40e <_free_r+0x22>
 802e460:	6820      	ldr	r0, [r4, #0]
 802e462:	1821      	adds	r1, r4, r0
 802e464:	428b      	cmp	r3, r1
 802e466:	bf02      	ittt	eq
 802e468:	6819      	ldreq	r1, [r3, #0]
 802e46a:	685b      	ldreq	r3, [r3, #4]
 802e46c:	1809      	addeq	r1, r1, r0
 802e46e:	6063      	str	r3, [r4, #4]
 802e470:	bf08      	it	eq
 802e472:	6021      	streq	r1, [r4, #0]
 802e474:	6054      	str	r4, [r2, #4]
 802e476:	e7ca      	b.n	802e40e <_free_r+0x22>
 802e478:	bd38      	pop	{r3, r4, r5, pc}
 802e47a:	bf00      	nop
 802e47c:	2005c77c 	.word	0x2005c77c

0802e480 <__sfputc_r>:
 802e480:	6893      	ldr	r3, [r2, #8]
 802e482:	3b01      	subs	r3, #1
 802e484:	2b00      	cmp	r3, #0
 802e486:	b410      	push	{r4}
 802e488:	6093      	str	r3, [r2, #8]
 802e48a:	da08      	bge.n	802e49e <__sfputc_r+0x1e>
 802e48c:	6994      	ldr	r4, [r2, #24]
 802e48e:	42a3      	cmp	r3, r4
 802e490:	db01      	blt.n	802e496 <__sfputc_r+0x16>
 802e492:	290a      	cmp	r1, #10
 802e494:	d103      	bne.n	802e49e <__sfputc_r+0x1e>
 802e496:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e49a:	f7ff bdd8 	b.w	802e04e <__swbuf_r>
 802e49e:	6813      	ldr	r3, [r2, #0]
 802e4a0:	1c58      	adds	r0, r3, #1
 802e4a2:	6010      	str	r0, [r2, #0]
 802e4a4:	4608      	mov	r0, r1
 802e4a6:	7019      	strb	r1, [r3, #0]
 802e4a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e4ac:	4770      	bx	lr

0802e4ae <__sfputs_r>:
 802e4ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e4b0:	4606      	mov	r6, r0
 802e4b2:	460f      	mov	r7, r1
 802e4b4:	4614      	mov	r4, r2
 802e4b6:	18d5      	adds	r5, r2, r3
 802e4b8:	42ac      	cmp	r4, r5
 802e4ba:	d101      	bne.n	802e4c0 <__sfputs_r+0x12>
 802e4bc:	2000      	movs	r0, #0
 802e4be:	e007      	b.n	802e4d0 <__sfputs_r+0x22>
 802e4c0:	463a      	mov	r2, r7
 802e4c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e4c6:	4630      	mov	r0, r6
 802e4c8:	f7ff ffda 	bl	802e480 <__sfputc_r>
 802e4cc:	1c43      	adds	r3, r0, #1
 802e4ce:	d1f3      	bne.n	802e4b8 <__sfputs_r+0xa>
 802e4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802e4d4 <_vfiprintf_r>:
 802e4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e4d8:	460d      	mov	r5, r1
 802e4da:	b09d      	sub	sp, #116	@ 0x74
 802e4dc:	4614      	mov	r4, r2
 802e4de:	4698      	mov	r8, r3
 802e4e0:	4606      	mov	r6, r0
 802e4e2:	b118      	cbz	r0, 802e4ec <_vfiprintf_r+0x18>
 802e4e4:	6a03      	ldr	r3, [r0, #32]
 802e4e6:	b90b      	cbnz	r3, 802e4ec <_vfiprintf_r+0x18>
 802e4e8:	f7ff fcb6 	bl	802de58 <__sinit>
 802e4ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802e4ee:	07d9      	lsls	r1, r3, #31
 802e4f0:	d405      	bmi.n	802e4fe <_vfiprintf_r+0x2a>
 802e4f2:	89ab      	ldrh	r3, [r5, #12]
 802e4f4:	059a      	lsls	r2, r3, #22
 802e4f6:	d402      	bmi.n	802e4fe <_vfiprintf_r+0x2a>
 802e4f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802e4fa:	f7ff ff0a 	bl	802e312 <__retarget_lock_acquire_recursive>
 802e4fe:	89ab      	ldrh	r3, [r5, #12]
 802e500:	071b      	lsls	r3, r3, #28
 802e502:	d501      	bpl.n	802e508 <_vfiprintf_r+0x34>
 802e504:	692b      	ldr	r3, [r5, #16]
 802e506:	b99b      	cbnz	r3, 802e530 <_vfiprintf_r+0x5c>
 802e508:	4629      	mov	r1, r5
 802e50a:	4630      	mov	r0, r6
 802e50c:	f7ff fdde 	bl	802e0cc <__swsetup_r>
 802e510:	b170      	cbz	r0, 802e530 <_vfiprintf_r+0x5c>
 802e512:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802e514:	07dc      	lsls	r4, r3, #31
 802e516:	d504      	bpl.n	802e522 <_vfiprintf_r+0x4e>
 802e518:	f04f 30ff 	mov.w	r0, #4294967295
 802e51c:	b01d      	add	sp, #116	@ 0x74
 802e51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e522:	89ab      	ldrh	r3, [r5, #12]
 802e524:	0598      	lsls	r0, r3, #22
 802e526:	d4f7      	bmi.n	802e518 <_vfiprintf_r+0x44>
 802e528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802e52a:	f7ff fef3 	bl	802e314 <__retarget_lock_release_recursive>
 802e52e:	e7f3      	b.n	802e518 <_vfiprintf_r+0x44>
 802e530:	2300      	movs	r3, #0
 802e532:	f8cd 800c 	str.w	r8, [sp, #12]
 802e536:	f04f 0901 	mov.w	r9, #1
 802e53a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 802e6f0 <_vfiprintf_r+0x21c>
 802e53e:	9309      	str	r3, [sp, #36]	@ 0x24
 802e540:	2320      	movs	r3, #32
 802e542:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802e546:	2330      	movs	r3, #48	@ 0x30
 802e548:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802e54c:	4623      	mov	r3, r4
 802e54e:	469a      	mov	sl, r3
 802e550:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e554:	b10a      	cbz	r2, 802e55a <_vfiprintf_r+0x86>
 802e556:	2a25      	cmp	r2, #37	@ 0x25
 802e558:	d1f9      	bne.n	802e54e <_vfiprintf_r+0x7a>
 802e55a:	ebba 0b04 	subs.w	fp, sl, r4
 802e55e:	d00b      	beq.n	802e578 <_vfiprintf_r+0xa4>
 802e560:	465b      	mov	r3, fp
 802e562:	4622      	mov	r2, r4
 802e564:	4629      	mov	r1, r5
 802e566:	4630      	mov	r0, r6
 802e568:	f7ff ffa1 	bl	802e4ae <__sfputs_r>
 802e56c:	3001      	adds	r0, #1
 802e56e:	f000 80a7 	beq.w	802e6c0 <_vfiprintf_r+0x1ec>
 802e572:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802e574:	445a      	add	r2, fp
 802e576:	9209      	str	r2, [sp, #36]	@ 0x24
 802e578:	f89a 3000 	ldrb.w	r3, [sl]
 802e57c:	2b00      	cmp	r3, #0
 802e57e:	f000 809f 	beq.w	802e6c0 <_vfiprintf_r+0x1ec>
 802e582:	2300      	movs	r3, #0
 802e584:	f04f 32ff 	mov.w	r2, #4294967295
 802e588:	f10a 0a01 	add.w	sl, sl, #1
 802e58c:	9304      	str	r3, [sp, #16]
 802e58e:	9307      	str	r3, [sp, #28]
 802e590:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802e594:	931a      	str	r3, [sp, #104]	@ 0x68
 802e596:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802e59a:	4654      	mov	r4, sl
 802e59c:	2205      	movs	r2, #5
 802e59e:	4854      	ldr	r0, [pc, #336]	@ (802e6f0 <_vfiprintf_r+0x21c>)
 802e5a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e5a4:	f000 fb6e 	bl	802ec84 <memchr>
 802e5a8:	9a04      	ldr	r2, [sp, #16]
 802e5aa:	b9d8      	cbnz	r0, 802e5e4 <_vfiprintf_r+0x110>
 802e5ac:	06d1      	lsls	r1, r2, #27
 802e5ae:	bf44      	itt	mi
 802e5b0:	2320      	movmi	r3, #32
 802e5b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802e5b6:	0713      	lsls	r3, r2, #28
 802e5b8:	bf44      	itt	mi
 802e5ba:	232b      	movmi	r3, #43	@ 0x2b
 802e5bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802e5c0:	f89a 3000 	ldrb.w	r3, [sl]
 802e5c4:	2b2a      	cmp	r3, #42	@ 0x2a
 802e5c6:	d015      	beq.n	802e5f4 <_vfiprintf_r+0x120>
 802e5c8:	9a07      	ldr	r2, [sp, #28]
 802e5ca:	4654      	mov	r4, sl
 802e5cc:	2000      	movs	r0, #0
 802e5ce:	f04f 0c0a 	mov.w	ip, #10
 802e5d2:	4621      	mov	r1, r4
 802e5d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 802e5d8:	3b30      	subs	r3, #48	@ 0x30
 802e5da:	2b09      	cmp	r3, #9
 802e5dc:	d94b      	bls.n	802e676 <_vfiprintf_r+0x1a2>
 802e5de:	b1b0      	cbz	r0, 802e60e <_vfiprintf_r+0x13a>
 802e5e0:	9207      	str	r2, [sp, #28]
 802e5e2:	e014      	b.n	802e60e <_vfiprintf_r+0x13a>
 802e5e4:	eba0 0308 	sub.w	r3, r0, r8
 802e5e8:	46a2      	mov	sl, r4
 802e5ea:	fa09 f303 	lsl.w	r3, r9, r3
 802e5ee:	4313      	orrs	r3, r2
 802e5f0:	9304      	str	r3, [sp, #16]
 802e5f2:	e7d2      	b.n	802e59a <_vfiprintf_r+0xc6>
 802e5f4:	9b03      	ldr	r3, [sp, #12]
 802e5f6:	1d19      	adds	r1, r3, #4
 802e5f8:	681b      	ldr	r3, [r3, #0]
 802e5fa:	2b00      	cmp	r3, #0
 802e5fc:	9103      	str	r1, [sp, #12]
 802e5fe:	bfbb      	ittet	lt
 802e600:	425b      	neglt	r3, r3
 802e602:	f042 0202 	orrlt.w	r2, r2, #2
 802e606:	9307      	strge	r3, [sp, #28]
 802e608:	9307      	strlt	r3, [sp, #28]
 802e60a:	bfb8      	it	lt
 802e60c:	9204      	strlt	r2, [sp, #16]
 802e60e:	7823      	ldrb	r3, [r4, #0]
 802e610:	2b2e      	cmp	r3, #46	@ 0x2e
 802e612:	d10a      	bne.n	802e62a <_vfiprintf_r+0x156>
 802e614:	7863      	ldrb	r3, [r4, #1]
 802e616:	2b2a      	cmp	r3, #42	@ 0x2a
 802e618:	d132      	bne.n	802e680 <_vfiprintf_r+0x1ac>
 802e61a:	9b03      	ldr	r3, [sp, #12]
 802e61c:	3402      	adds	r4, #2
 802e61e:	1d1a      	adds	r2, r3, #4
 802e620:	681b      	ldr	r3, [r3, #0]
 802e622:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802e626:	9203      	str	r2, [sp, #12]
 802e628:	9305      	str	r3, [sp, #20]
 802e62a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802e700 <_vfiprintf_r+0x22c>
 802e62e:	2203      	movs	r2, #3
 802e630:	7821      	ldrb	r1, [r4, #0]
 802e632:	4650      	mov	r0, sl
 802e634:	f000 fb26 	bl	802ec84 <memchr>
 802e638:	b138      	cbz	r0, 802e64a <_vfiprintf_r+0x176>
 802e63a:	eba0 000a 	sub.w	r0, r0, sl
 802e63e:	2240      	movs	r2, #64	@ 0x40
 802e640:	9b04      	ldr	r3, [sp, #16]
 802e642:	3401      	adds	r4, #1
 802e644:	4082      	lsls	r2, r0
 802e646:	4313      	orrs	r3, r2
 802e648:	9304      	str	r3, [sp, #16]
 802e64a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e64e:	2206      	movs	r2, #6
 802e650:	4828      	ldr	r0, [pc, #160]	@ (802e6f4 <_vfiprintf_r+0x220>)
 802e652:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802e656:	f000 fb15 	bl	802ec84 <memchr>
 802e65a:	2800      	cmp	r0, #0
 802e65c:	d03f      	beq.n	802e6de <_vfiprintf_r+0x20a>
 802e65e:	4b26      	ldr	r3, [pc, #152]	@ (802e6f8 <_vfiprintf_r+0x224>)
 802e660:	bb1b      	cbnz	r3, 802e6aa <_vfiprintf_r+0x1d6>
 802e662:	9b03      	ldr	r3, [sp, #12]
 802e664:	3307      	adds	r3, #7
 802e666:	f023 0307 	bic.w	r3, r3, #7
 802e66a:	3308      	adds	r3, #8
 802e66c:	9303      	str	r3, [sp, #12]
 802e66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e670:	443b      	add	r3, r7
 802e672:	9309      	str	r3, [sp, #36]	@ 0x24
 802e674:	e76a      	b.n	802e54c <_vfiprintf_r+0x78>
 802e676:	fb0c 3202 	mla	r2, ip, r2, r3
 802e67a:	460c      	mov	r4, r1
 802e67c:	2001      	movs	r0, #1
 802e67e:	e7a8      	b.n	802e5d2 <_vfiprintf_r+0xfe>
 802e680:	2300      	movs	r3, #0
 802e682:	3401      	adds	r4, #1
 802e684:	f04f 0c0a 	mov.w	ip, #10
 802e688:	4619      	mov	r1, r3
 802e68a:	9305      	str	r3, [sp, #20]
 802e68c:	4620      	mov	r0, r4
 802e68e:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e692:	3a30      	subs	r2, #48	@ 0x30
 802e694:	2a09      	cmp	r2, #9
 802e696:	d903      	bls.n	802e6a0 <_vfiprintf_r+0x1cc>
 802e698:	2b00      	cmp	r3, #0
 802e69a:	d0c6      	beq.n	802e62a <_vfiprintf_r+0x156>
 802e69c:	9105      	str	r1, [sp, #20]
 802e69e:	e7c4      	b.n	802e62a <_vfiprintf_r+0x156>
 802e6a0:	fb0c 2101 	mla	r1, ip, r1, r2
 802e6a4:	4604      	mov	r4, r0
 802e6a6:	2301      	movs	r3, #1
 802e6a8:	e7f0      	b.n	802e68c <_vfiprintf_r+0x1b8>
 802e6aa:	ab03      	add	r3, sp, #12
 802e6ac:	462a      	mov	r2, r5
 802e6ae:	a904      	add	r1, sp, #16
 802e6b0:	4630      	mov	r0, r6
 802e6b2:	9300      	str	r3, [sp, #0]
 802e6b4:	4b11      	ldr	r3, [pc, #68]	@ (802e6fc <_vfiprintf_r+0x228>)
 802e6b6:	f3af 8000 	nop.w
 802e6ba:	4607      	mov	r7, r0
 802e6bc:	1c78      	adds	r0, r7, #1
 802e6be:	d1d6      	bne.n	802e66e <_vfiprintf_r+0x19a>
 802e6c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802e6c2:	07d9      	lsls	r1, r3, #31
 802e6c4:	d405      	bmi.n	802e6d2 <_vfiprintf_r+0x1fe>
 802e6c6:	89ab      	ldrh	r3, [r5, #12]
 802e6c8:	059a      	lsls	r2, r3, #22
 802e6ca:	d402      	bmi.n	802e6d2 <_vfiprintf_r+0x1fe>
 802e6cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802e6ce:	f7ff fe21 	bl	802e314 <__retarget_lock_release_recursive>
 802e6d2:	89ab      	ldrh	r3, [r5, #12]
 802e6d4:	065b      	lsls	r3, r3, #25
 802e6d6:	f53f af1f 	bmi.w	802e518 <_vfiprintf_r+0x44>
 802e6da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802e6dc:	e71e      	b.n	802e51c <_vfiprintf_r+0x48>
 802e6de:	ab03      	add	r3, sp, #12
 802e6e0:	462a      	mov	r2, r5
 802e6e2:	a904      	add	r1, sp, #16
 802e6e4:	4630      	mov	r0, r6
 802e6e6:	9300      	str	r3, [sp, #0]
 802e6e8:	4b04      	ldr	r3, [pc, #16]	@ (802e6fc <_vfiprintf_r+0x228>)
 802e6ea:	f000 f87d 	bl	802e7e8 <_printf_i>
 802e6ee:	e7e4      	b.n	802e6ba <_vfiprintf_r+0x1e6>
 802e6f0:	08031874 	.word	0x08031874
 802e6f4:	0803187e 	.word	0x0803187e
 802e6f8:	00000000 	.word	0x00000000
 802e6fc:	0802e4af 	.word	0x0802e4af
 802e700:	0803187a 	.word	0x0803187a

0802e704 <_printf_common>:
 802e704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e708:	4616      	mov	r6, r2
 802e70a:	4698      	mov	r8, r3
 802e70c:	688a      	ldr	r2, [r1, #8]
 802e70e:	4607      	mov	r7, r0
 802e710:	690b      	ldr	r3, [r1, #16]
 802e712:	460c      	mov	r4, r1
 802e714:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802e718:	4293      	cmp	r3, r2
 802e71a:	bfb8      	it	lt
 802e71c:	4613      	movlt	r3, r2
 802e71e:	6033      	str	r3, [r6, #0]
 802e720:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802e724:	b10a      	cbz	r2, 802e72a <_printf_common+0x26>
 802e726:	3301      	adds	r3, #1
 802e728:	6033      	str	r3, [r6, #0]
 802e72a:	6823      	ldr	r3, [r4, #0]
 802e72c:	0699      	lsls	r1, r3, #26
 802e72e:	bf42      	ittt	mi
 802e730:	6833      	ldrmi	r3, [r6, #0]
 802e732:	3302      	addmi	r3, #2
 802e734:	6033      	strmi	r3, [r6, #0]
 802e736:	6825      	ldr	r5, [r4, #0]
 802e738:	f015 0506 	ands.w	r5, r5, #6
 802e73c:	d106      	bne.n	802e74c <_printf_common+0x48>
 802e73e:	f104 0a19 	add.w	sl, r4, #25
 802e742:	68e3      	ldr	r3, [r4, #12]
 802e744:	6832      	ldr	r2, [r6, #0]
 802e746:	1a9b      	subs	r3, r3, r2
 802e748:	42ab      	cmp	r3, r5
 802e74a:	dc2b      	bgt.n	802e7a4 <_printf_common+0xa0>
 802e74c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802e750:	6822      	ldr	r2, [r4, #0]
 802e752:	3b00      	subs	r3, #0
 802e754:	bf18      	it	ne
 802e756:	2301      	movne	r3, #1
 802e758:	0692      	lsls	r2, r2, #26
 802e75a:	d430      	bmi.n	802e7be <_printf_common+0xba>
 802e75c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802e760:	4641      	mov	r1, r8
 802e762:	4638      	mov	r0, r7
 802e764:	47c8      	blx	r9
 802e766:	3001      	adds	r0, #1
 802e768:	d023      	beq.n	802e7b2 <_printf_common+0xae>
 802e76a:	6823      	ldr	r3, [r4, #0]
 802e76c:	341a      	adds	r4, #26
 802e76e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 802e772:	f003 0306 	and.w	r3, r3, #6
 802e776:	2b04      	cmp	r3, #4
 802e778:	bf0a      	itet	eq
 802e77a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 802e77e:	2500      	movne	r5, #0
 802e780:	6833      	ldreq	r3, [r6, #0]
 802e782:	f04f 0600 	mov.w	r6, #0
 802e786:	bf08      	it	eq
 802e788:	1aed      	subeq	r5, r5, r3
 802e78a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802e78e:	bf08      	it	eq
 802e790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802e794:	4293      	cmp	r3, r2
 802e796:	bfc4      	itt	gt
 802e798:	1a9b      	subgt	r3, r3, r2
 802e79a:	18ed      	addgt	r5, r5, r3
 802e79c:	42b5      	cmp	r5, r6
 802e79e:	d11a      	bne.n	802e7d6 <_printf_common+0xd2>
 802e7a0:	2000      	movs	r0, #0
 802e7a2:	e008      	b.n	802e7b6 <_printf_common+0xb2>
 802e7a4:	2301      	movs	r3, #1
 802e7a6:	4652      	mov	r2, sl
 802e7a8:	4641      	mov	r1, r8
 802e7aa:	4638      	mov	r0, r7
 802e7ac:	47c8      	blx	r9
 802e7ae:	3001      	adds	r0, #1
 802e7b0:	d103      	bne.n	802e7ba <_printf_common+0xb6>
 802e7b2:	f04f 30ff 	mov.w	r0, #4294967295
 802e7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e7ba:	3501      	adds	r5, #1
 802e7bc:	e7c1      	b.n	802e742 <_printf_common+0x3e>
 802e7be:	18e1      	adds	r1, r4, r3
 802e7c0:	1c5a      	adds	r2, r3, #1
 802e7c2:	2030      	movs	r0, #48	@ 0x30
 802e7c4:	3302      	adds	r3, #2
 802e7c6:	4422      	add	r2, r4
 802e7c8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802e7cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802e7d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802e7d4:	e7c2      	b.n	802e75c <_printf_common+0x58>
 802e7d6:	2301      	movs	r3, #1
 802e7d8:	4622      	mov	r2, r4
 802e7da:	4641      	mov	r1, r8
 802e7dc:	4638      	mov	r0, r7
 802e7de:	47c8      	blx	r9
 802e7e0:	3001      	adds	r0, #1
 802e7e2:	d0e6      	beq.n	802e7b2 <_printf_common+0xae>
 802e7e4:	3601      	adds	r6, #1
 802e7e6:	e7d9      	b.n	802e79c <_printf_common+0x98>

0802e7e8 <_printf_i>:
 802e7e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802e7ec:	7e0f      	ldrb	r7, [r1, #24]
 802e7ee:	4691      	mov	r9, r2
 802e7f0:	4680      	mov	r8, r0
 802e7f2:	460c      	mov	r4, r1
 802e7f4:	2f78      	cmp	r7, #120	@ 0x78
 802e7f6:	469a      	mov	sl, r3
 802e7f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802e7fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802e7fe:	d807      	bhi.n	802e810 <_printf_i+0x28>
 802e800:	2f62      	cmp	r7, #98	@ 0x62
 802e802:	d80a      	bhi.n	802e81a <_printf_i+0x32>
 802e804:	2f00      	cmp	r7, #0
 802e806:	f000 80d1 	beq.w	802e9ac <_printf_i+0x1c4>
 802e80a:	2f58      	cmp	r7, #88	@ 0x58
 802e80c:	f000 80b8 	beq.w	802e980 <_printf_i+0x198>
 802e810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802e814:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802e818:	e03a      	b.n	802e890 <_printf_i+0xa8>
 802e81a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802e81e:	2b15      	cmp	r3, #21
 802e820:	d8f6      	bhi.n	802e810 <_printf_i+0x28>
 802e822:	a101      	add	r1, pc, #4	@ (adr r1, 802e828 <_printf_i+0x40>)
 802e824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802e828:	0802e881 	.word	0x0802e881
 802e82c:	0802e895 	.word	0x0802e895
 802e830:	0802e811 	.word	0x0802e811
 802e834:	0802e811 	.word	0x0802e811
 802e838:	0802e811 	.word	0x0802e811
 802e83c:	0802e811 	.word	0x0802e811
 802e840:	0802e895 	.word	0x0802e895
 802e844:	0802e811 	.word	0x0802e811
 802e848:	0802e811 	.word	0x0802e811
 802e84c:	0802e811 	.word	0x0802e811
 802e850:	0802e811 	.word	0x0802e811
 802e854:	0802e993 	.word	0x0802e993
 802e858:	0802e8bf 	.word	0x0802e8bf
 802e85c:	0802e94d 	.word	0x0802e94d
 802e860:	0802e811 	.word	0x0802e811
 802e864:	0802e811 	.word	0x0802e811
 802e868:	0802e9b5 	.word	0x0802e9b5
 802e86c:	0802e811 	.word	0x0802e811
 802e870:	0802e8bf 	.word	0x0802e8bf
 802e874:	0802e811 	.word	0x0802e811
 802e878:	0802e811 	.word	0x0802e811
 802e87c:	0802e955 	.word	0x0802e955
 802e880:	6833      	ldr	r3, [r6, #0]
 802e882:	1d1a      	adds	r2, r3, #4
 802e884:	681b      	ldr	r3, [r3, #0]
 802e886:	6032      	str	r2, [r6, #0]
 802e888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802e88c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802e890:	2301      	movs	r3, #1
 802e892:	e09c      	b.n	802e9ce <_printf_i+0x1e6>
 802e894:	6833      	ldr	r3, [r6, #0]
 802e896:	6820      	ldr	r0, [r4, #0]
 802e898:	1d19      	adds	r1, r3, #4
 802e89a:	6031      	str	r1, [r6, #0]
 802e89c:	0606      	lsls	r6, r0, #24
 802e89e:	d501      	bpl.n	802e8a4 <_printf_i+0xbc>
 802e8a0:	681d      	ldr	r5, [r3, #0]
 802e8a2:	e003      	b.n	802e8ac <_printf_i+0xc4>
 802e8a4:	0645      	lsls	r5, r0, #25
 802e8a6:	d5fb      	bpl.n	802e8a0 <_printf_i+0xb8>
 802e8a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 802e8ac:	2d00      	cmp	r5, #0
 802e8ae:	da03      	bge.n	802e8b8 <_printf_i+0xd0>
 802e8b0:	232d      	movs	r3, #45	@ 0x2d
 802e8b2:	426d      	negs	r5, r5
 802e8b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802e8b8:	4858      	ldr	r0, [pc, #352]	@ (802ea1c <_printf_i+0x234>)
 802e8ba:	230a      	movs	r3, #10
 802e8bc:	e011      	b.n	802e8e2 <_printf_i+0xfa>
 802e8be:	6821      	ldr	r1, [r4, #0]
 802e8c0:	6833      	ldr	r3, [r6, #0]
 802e8c2:	0608      	lsls	r0, r1, #24
 802e8c4:	f853 5b04 	ldr.w	r5, [r3], #4
 802e8c8:	d402      	bmi.n	802e8d0 <_printf_i+0xe8>
 802e8ca:	0649      	lsls	r1, r1, #25
 802e8cc:	bf48      	it	mi
 802e8ce:	b2ad      	uxthmi	r5, r5
 802e8d0:	2f6f      	cmp	r7, #111	@ 0x6f
 802e8d2:	6033      	str	r3, [r6, #0]
 802e8d4:	4851      	ldr	r0, [pc, #324]	@ (802ea1c <_printf_i+0x234>)
 802e8d6:	bf14      	ite	ne
 802e8d8:	230a      	movne	r3, #10
 802e8da:	2308      	moveq	r3, #8
 802e8dc:	2100      	movs	r1, #0
 802e8de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802e8e2:	6866      	ldr	r6, [r4, #4]
 802e8e4:	2e00      	cmp	r6, #0
 802e8e6:	60a6      	str	r6, [r4, #8]
 802e8e8:	db05      	blt.n	802e8f6 <_printf_i+0x10e>
 802e8ea:	6821      	ldr	r1, [r4, #0]
 802e8ec:	432e      	orrs	r6, r5
 802e8ee:	f021 0104 	bic.w	r1, r1, #4
 802e8f2:	6021      	str	r1, [r4, #0]
 802e8f4:	d04b      	beq.n	802e98e <_printf_i+0x1a6>
 802e8f6:	4616      	mov	r6, r2
 802e8f8:	fbb5 f1f3 	udiv	r1, r5, r3
 802e8fc:	fb03 5711 	mls	r7, r3, r1, r5
 802e900:	5dc7      	ldrb	r7, [r0, r7]
 802e902:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802e906:	462f      	mov	r7, r5
 802e908:	460d      	mov	r5, r1
 802e90a:	42bb      	cmp	r3, r7
 802e90c:	d9f4      	bls.n	802e8f8 <_printf_i+0x110>
 802e90e:	2b08      	cmp	r3, #8
 802e910:	d10b      	bne.n	802e92a <_printf_i+0x142>
 802e912:	6823      	ldr	r3, [r4, #0]
 802e914:	07df      	lsls	r7, r3, #31
 802e916:	d508      	bpl.n	802e92a <_printf_i+0x142>
 802e918:	6923      	ldr	r3, [r4, #16]
 802e91a:	6861      	ldr	r1, [r4, #4]
 802e91c:	4299      	cmp	r1, r3
 802e91e:	bfde      	ittt	le
 802e920:	2330      	movle	r3, #48	@ 0x30
 802e922:	f806 3c01 	strble.w	r3, [r6, #-1]
 802e926:	f106 36ff 	addle.w	r6, r6, #4294967295
 802e92a:	1b92      	subs	r2, r2, r6
 802e92c:	6122      	str	r2, [r4, #16]
 802e92e:	464b      	mov	r3, r9
 802e930:	aa03      	add	r2, sp, #12
 802e932:	4621      	mov	r1, r4
 802e934:	4640      	mov	r0, r8
 802e936:	f8cd a000 	str.w	sl, [sp]
 802e93a:	f7ff fee3 	bl	802e704 <_printf_common>
 802e93e:	3001      	adds	r0, #1
 802e940:	d14a      	bne.n	802e9d8 <_printf_i+0x1f0>
 802e942:	f04f 30ff 	mov.w	r0, #4294967295
 802e946:	b004      	add	sp, #16
 802e948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e94c:	6823      	ldr	r3, [r4, #0]
 802e94e:	f043 0320 	orr.w	r3, r3, #32
 802e952:	6023      	str	r3, [r4, #0]
 802e954:	2778      	movs	r7, #120	@ 0x78
 802e956:	4832      	ldr	r0, [pc, #200]	@ (802ea20 <_printf_i+0x238>)
 802e958:	6823      	ldr	r3, [r4, #0]
 802e95a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802e95e:	061f      	lsls	r7, r3, #24
 802e960:	6831      	ldr	r1, [r6, #0]
 802e962:	f851 5b04 	ldr.w	r5, [r1], #4
 802e966:	d402      	bmi.n	802e96e <_printf_i+0x186>
 802e968:	065f      	lsls	r7, r3, #25
 802e96a:	bf48      	it	mi
 802e96c:	b2ad      	uxthmi	r5, r5
 802e96e:	6031      	str	r1, [r6, #0]
 802e970:	07d9      	lsls	r1, r3, #31
 802e972:	bf44      	itt	mi
 802e974:	f043 0320 	orrmi.w	r3, r3, #32
 802e978:	6023      	strmi	r3, [r4, #0]
 802e97a:	b11d      	cbz	r5, 802e984 <_printf_i+0x19c>
 802e97c:	2310      	movs	r3, #16
 802e97e:	e7ad      	b.n	802e8dc <_printf_i+0xf4>
 802e980:	4826      	ldr	r0, [pc, #152]	@ (802ea1c <_printf_i+0x234>)
 802e982:	e7e9      	b.n	802e958 <_printf_i+0x170>
 802e984:	6823      	ldr	r3, [r4, #0]
 802e986:	f023 0320 	bic.w	r3, r3, #32
 802e98a:	6023      	str	r3, [r4, #0]
 802e98c:	e7f6      	b.n	802e97c <_printf_i+0x194>
 802e98e:	4616      	mov	r6, r2
 802e990:	e7bd      	b.n	802e90e <_printf_i+0x126>
 802e992:	6833      	ldr	r3, [r6, #0]
 802e994:	6825      	ldr	r5, [r4, #0]
 802e996:	1d18      	adds	r0, r3, #4
 802e998:	6961      	ldr	r1, [r4, #20]
 802e99a:	6030      	str	r0, [r6, #0]
 802e99c:	062e      	lsls	r6, r5, #24
 802e99e:	681b      	ldr	r3, [r3, #0]
 802e9a0:	d501      	bpl.n	802e9a6 <_printf_i+0x1be>
 802e9a2:	6019      	str	r1, [r3, #0]
 802e9a4:	e002      	b.n	802e9ac <_printf_i+0x1c4>
 802e9a6:	0668      	lsls	r0, r5, #25
 802e9a8:	d5fb      	bpl.n	802e9a2 <_printf_i+0x1ba>
 802e9aa:	8019      	strh	r1, [r3, #0]
 802e9ac:	2300      	movs	r3, #0
 802e9ae:	4616      	mov	r6, r2
 802e9b0:	6123      	str	r3, [r4, #16]
 802e9b2:	e7bc      	b.n	802e92e <_printf_i+0x146>
 802e9b4:	6833      	ldr	r3, [r6, #0]
 802e9b6:	2100      	movs	r1, #0
 802e9b8:	1d1a      	adds	r2, r3, #4
 802e9ba:	6032      	str	r2, [r6, #0]
 802e9bc:	681e      	ldr	r6, [r3, #0]
 802e9be:	6862      	ldr	r2, [r4, #4]
 802e9c0:	4630      	mov	r0, r6
 802e9c2:	f000 f95f 	bl	802ec84 <memchr>
 802e9c6:	b108      	cbz	r0, 802e9cc <_printf_i+0x1e4>
 802e9c8:	1b80      	subs	r0, r0, r6
 802e9ca:	6060      	str	r0, [r4, #4]
 802e9cc:	6863      	ldr	r3, [r4, #4]
 802e9ce:	6123      	str	r3, [r4, #16]
 802e9d0:	2300      	movs	r3, #0
 802e9d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802e9d6:	e7aa      	b.n	802e92e <_printf_i+0x146>
 802e9d8:	6923      	ldr	r3, [r4, #16]
 802e9da:	4632      	mov	r2, r6
 802e9dc:	4649      	mov	r1, r9
 802e9de:	4640      	mov	r0, r8
 802e9e0:	47d0      	blx	sl
 802e9e2:	3001      	adds	r0, #1
 802e9e4:	d0ad      	beq.n	802e942 <_printf_i+0x15a>
 802e9e6:	6823      	ldr	r3, [r4, #0]
 802e9e8:	079b      	lsls	r3, r3, #30
 802e9ea:	d413      	bmi.n	802ea14 <_printf_i+0x22c>
 802e9ec:	68e0      	ldr	r0, [r4, #12]
 802e9ee:	9b03      	ldr	r3, [sp, #12]
 802e9f0:	4298      	cmp	r0, r3
 802e9f2:	bfb8      	it	lt
 802e9f4:	4618      	movlt	r0, r3
 802e9f6:	e7a6      	b.n	802e946 <_printf_i+0x15e>
 802e9f8:	2301      	movs	r3, #1
 802e9fa:	4632      	mov	r2, r6
 802e9fc:	4649      	mov	r1, r9
 802e9fe:	4640      	mov	r0, r8
 802ea00:	47d0      	blx	sl
 802ea02:	3001      	adds	r0, #1
 802ea04:	d09d      	beq.n	802e942 <_printf_i+0x15a>
 802ea06:	3501      	adds	r5, #1
 802ea08:	68e3      	ldr	r3, [r4, #12]
 802ea0a:	9903      	ldr	r1, [sp, #12]
 802ea0c:	1a5b      	subs	r3, r3, r1
 802ea0e:	42ab      	cmp	r3, r5
 802ea10:	dcf2      	bgt.n	802e9f8 <_printf_i+0x210>
 802ea12:	e7eb      	b.n	802e9ec <_printf_i+0x204>
 802ea14:	2500      	movs	r5, #0
 802ea16:	f104 0619 	add.w	r6, r4, #25
 802ea1a:	e7f5      	b.n	802ea08 <_printf_i+0x220>
 802ea1c:	08031885 	.word	0x08031885
 802ea20:	08031896 	.word	0x08031896

0802ea24 <__sflush_r>:
 802ea24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802ea28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ea2c:	0716      	lsls	r6, r2, #28
 802ea2e:	4605      	mov	r5, r0
 802ea30:	460c      	mov	r4, r1
 802ea32:	d454      	bmi.n	802eade <__sflush_r+0xba>
 802ea34:	684b      	ldr	r3, [r1, #4]
 802ea36:	2b00      	cmp	r3, #0
 802ea38:	dc02      	bgt.n	802ea40 <__sflush_r+0x1c>
 802ea3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802ea3c:	2b00      	cmp	r3, #0
 802ea3e:	dd48      	ble.n	802ead2 <__sflush_r+0xae>
 802ea40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802ea42:	2e00      	cmp	r6, #0
 802ea44:	d045      	beq.n	802ead2 <__sflush_r+0xae>
 802ea46:	2300      	movs	r3, #0
 802ea48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802ea4c:	682f      	ldr	r7, [r5, #0]
 802ea4e:	6a21      	ldr	r1, [r4, #32]
 802ea50:	602b      	str	r3, [r5, #0]
 802ea52:	d030      	beq.n	802eab6 <__sflush_r+0x92>
 802ea54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802ea56:	89a3      	ldrh	r3, [r4, #12]
 802ea58:	0759      	lsls	r1, r3, #29
 802ea5a:	d505      	bpl.n	802ea68 <__sflush_r+0x44>
 802ea5c:	6863      	ldr	r3, [r4, #4]
 802ea5e:	1ad2      	subs	r2, r2, r3
 802ea60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802ea62:	b10b      	cbz	r3, 802ea68 <__sflush_r+0x44>
 802ea64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802ea66:	1ad2      	subs	r2, r2, r3
 802ea68:	2300      	movs	r3, #0
 802ea6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802ea6c:	6a21      	ldr	r1, [r4, #32]
 802ea6e:	4628      	mov	r0, r5
 802ea70:	47b0      	blx	r6
 802ea72:	1c43      	adds	r3, r0, #1
 802ea74:	89a3      	ldrh	r3, [r4, #12]
 802ea76:	d106      	bne.n	802ea86 <__sflush_r+0x62>
 802ea78:	6829      	ldr	r1, [r5, #0]
 802ea7a:	291d      	cmp	r1, #29
 802ea7c:	d82b      	bhi.n	802ead6 <__sflush_r+0xb2>
 802ea7e:	4a2a      	ldr	r2, [pc, #168]	@ (802eb28 <__sflush_r+0x104>)
 802ea80:	40ca      	lsrs	r2, r1
 802ea82:	07d6      	lsls	r6, r2, #31
 802ea84:	d527      	bpl.n	802ead6 <__sflush_r+0xb2>
 802ea86:	2200      	movs	r2, #0
 802ea88:	04d9      	lsls	r1, r3, #19
 802ea8a:	6062      	str	r2, [r4, #4]
 802ea8c:	6922      	ldr	r2, [r4, #16]
 802ea8e:	6022      	str	r2, [r4, #0]
 802ea90:	d504      	bpl.n	802ea9c <__sflush_r+0x78>
 802ea92:	1c42      	adds	r2, r0, #1
 802ea94:	d101      	bne.n	802ea9a <__sflush_r+0x76>
 802ea96:	682b      	ldr	r3, [r5, #0]
 802ea98:	b903      	cbnz	r3, 802ea9c <__sflush_r+0x78>
 802ea9a:	6560      	str	r0, [r4, #84]	@ 0x54
 802ea9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802ea9e:	602f      	str	r7, [r5, #0]
 802eaa0:	b1b9      	cbz	r1, 802ead2 <__sflush_r+0xae>
 802eaa2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802eaa6:	4299      	cmp	r1, r3
 802eaa8:	d002      	beq.n	802eab0 <__sflush_r+0x8c>
 802eaaa:	4628      	mov	r0, r5
 802eaac:	f7ff fc9e 	bl	802e3ec <_free_r>
 802eab0:	2300      	movs	r3, #0
 802eab2:	6363      	str	r3, [r4, #52]	@ 0x34
 802eab4:	e00d      	b.n	802ead2 <__sflush_r+0xae>
 802eab6:	2301      	movs	r3, #1
 802eab8:	4628      	mov	r0, r5
 802eaba:	47b0      	blx	r6
 802eabc:	4602      	mov	r2, r0
 802eabe:	1c50      	adds	r0, r2, #1
 802eac0:	d1c9      	bne.n	802ea56 <__sflush_r+0x32>
 802eac2:	682b      	ldr	r3, [r5, #0]
 802eac4:	2b00      	cmp	r3, #0
 802eac6:	d0c6      	beq.n	802ea56 <__sflush_r+0x32>
 802eac8:	2b1d      	cmp	r3, #29
 802eaca:	d001      	beq.n	802ead0 <__sflush_r+0xac>
 802eacc:	2b16      	cmp	r3, #22
 802eace:	d11d      	bne.n	802eb0c <__sflush_r+0xe8>
 802ead0:	602f      	str	r7, [r5, #0]
 802ead2:	2000      	movs	r0, #0
 802ead4:	e021      	b.n	802eb1a <__sflush_r+0xf6>
 802ead6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802eada:	b21b      	sxth	r3, r3
 802eadc:	e01a      	b.n	802eb14 <__sflush_r+0xf0>
 802eade:	690f      	ldr	r7, [r1, #16]
 802eae0:	2f00      	cmp	r7, #0
 802eae2:	d0f6      	beq.n	802ead2 <__sflush_r+0xae>
 802eae4:	0793      	lsls	r3, r2, #30
 802eae6:	680e      	ldr	r6, [r1, #0]
 802eae8:	600f      	str	r7, [r1, #0]
 802eaea:	bf0c      	ite	eq
 802eaec:	694b      	ldreq	r3, [r1, #20]
 802eaee:	2300      	movne	r3, #0
 802eaf0:	eba6 0807 	sub.w	r8, r6, r7
 802eaf4:	608b      	str	r3, [r1, #8]
 802eaf6:	f1b8 0f00 	cmp.w	r8, #0
 802eafa:	ddea      	ble.n	802ead2 <__sflush_r+0xae>
 802eafc:	4643      	mov	r3, r8
 802eafe:	463a      	mov	r2, r7
 802eb00:	6a21      	ldr	r1, [r4, #32]
 802eb02:	4628      	mov	r0, r5
 802eb04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802eb06:	47b0      	blx	r6
 802eb08:	2800      	cmp	r0, #0
 802eb0a:	dc08      	bgt.n	802eb1e <__sflush_r+0xfa>
 802eb0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802eb10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802eb14:	f04f 30ff 	mov.w	r0, #4294967295
 802eb18:	81a3      	strh	r3, [r4, #12]
 802eb1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802eb1e:	4407      	add	r7, r0
 802eb20:	eba8 0800 	sub.w	r8, r8, r0
 802eb24:	e7e7      	b.n	802eaf6 <__sflush_r+0xd2>
 802eb26:	bf00      	nop
 802eb28:	20400001 	.word	0x20400001

0802eb2c <_fflush_r>:
 802eb2c:	b538      	push	{r3, r4, r5, lr}
 802eb2e:	690b      	ldr	r3, [r1, #16]
 802eb30:	4605      	mov	r5, r0
 802eb32:	460c      	mov	r4, r1
 802eb34:	b913      	cbnz	r3, 802eb3c <_fflush_r+0x10>
 802eb36:	2500      	movs	r5, #0
 802eb38:	4628      	mov	r0, r5
 802eb3a:	bd38      	pop	{r3, r4, r5, pc}
 802eb3c:	b118      	cbz	r0, 802eb46 <_fflush_r+0x1a>
 802eb3e:	6a03      	ldr	r3, [r0, #32]
 802eb40:	b90b      	cbnz	r3, 802eb46 <_fflush_r+0x1a>
 802eb42:	f7ff f989 	bl	802de58 <__sinit>
 802eb46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802eb4a:	2b00      	cmp	r3, #0
 802eb4c:	d0f3      	beq.n	802eb36 <_fflush_r+0xa>
 802eb4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802eb50:	07d0      	lsls	r0, r2, #31
 802eb52:	d404      	bmi.n	802eb5e <_fflush_r+0x32>
 802eb54:	0599      	lsls	r1, r3, #22
 802eb56:	d402      	bmi.n	802eb5e <_fflush_r+0x32>
 802eb58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802eb5a:	f7ff fbda 	bl	802e312 <__retarget_lock_acquire_recursive>
 802eb5e:	4628      	mov	r0, r5
 802eb60:	4621      	mov	r1, r4
 802eb62:	f7ff ff5f 	bl	802ea24 <__sflush_r>
 802eb66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802eb68:	4605      	mov	r5, r0
 802eb6a:	07da      	lsls	r2, r3, #31
 802eb6c:	d4e4      	bmi.n	802eb38 <_fflush_r+0xc>
 802eb6e:	89a3      	ldrh	r3, [r4, #12]
 802eb70:	059b      	lsls	r3, r3, #22
 802eb72:	d4e1      	bmi.n	802eb38 <_fflush_r+0xc>
 802eb74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802eb76:	f7ff fbcd 	bl	802e314 <__retarget_lock_release_recursive>
 802eb7a:	e7dd      	b.n	802eb38 <_fflush_r+0xc>

0802eb7c <__swhatbuf_r>:
 802eb7c:	b570      	push	{r4, r5, r6, lr}
 802eb7e:	460c      	mov	r4, r1
 802eb80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802eb84:	b096      	sub	sp, #88	@ 0x58
 802eb86:	4615      	mov	r5, r2
 802eb88:	2900      	cmp	r1, #0
 802eb8a:	461e      	mov	r6, r3
 802eb8c:	da0c      	bge.n	802eba8 <__swhatbuf_r+0x2c>
 802eb8e:	89a3      	ldrh	r3, [r4, #12]
 802eb90:	2100      	movs	r1, #0
 802eb92:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802eb96:	bf14      	ite	ne
 802eb98:	2340      	movne	r3, #64	@ 0x40
 802eb9a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802eb9e:	2000      	movs	r0, #0
 802eba0:	6031      	str	r1, [r6, #0]
 802eba2:	602b      	str	r3, [r5, #0]
 802eba4:	b016      	add	sp, #88	@ 0x58
 802eba6:	bd70      	pop	{r4, r5, r6, pc}
 802eba8:	466a      	mov	r2, sp
 802ebaa:	f000 f849 	bl	802ec40 <_fstat_r>
 802ebae:	2800      	cmp	r0, #0
 802ebb0:	dbed      	blt.n	802eb8e <__swhatbuf_r+0x12>
 802ebb2:	9901      	ldr	r1, [sp, #4]
 802ebb4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802ebb8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802ebbc:	4259      	negs	r1, r3
 802ebbe:	4159      	adcs	r1, r3
 802ebc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802ebc4:	e7eb      	b.n	802eb9e <__swhatbuf_r+0x22>

0802ebc6 <__smakebuf_r>:
 802ebc6:	898b      	ldrh	r3, [r1, #12]
 802ebc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802ebca:	079d      	lsls	r5, r3, #30
 802ebcc:	4606      	mov	r6, r0
 802ebce:	460c      	mov	r4, r1
 802ebd0:	d507      	bpl.n	802ebe2 <__smakebuf_r+0x1c>
 802ebd2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802ebd6:	6023      	str	r3, [r4, #0]
 802ebd8:	6123      	str	r3, [r4, #16]
 802ebda:	2301      	movs	r3, #1
 802ebdc:	6163      	str	r3, [r4, #20]
 802ebde:	b003      	add	sp, #12
 802ebe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ebe2:	ab01      	add	r3, sp, #4
 802ebe4:	466a      	mov	r2, sp
 802ebe6:	f7ff ffc9 	bl	802eb7c <__swhatbuf_r>
 802ebea:	9f00      	ldr	r7, [sp, #0]
 802ebec:	4605      	mov	r5, r0
 802ebee:	4630      	mov	r0, r6
 802ebf0:	4639      	mov	r1, r7
 802ebf2:	f7ff f80b 	bl	802dc0c <_malloc_r>
 802ebf6:	b948      	cbnz	r0, 802ec0c <__smakebuf_r+0x46>
 802ebf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ebfc:	059a      	lsls	r2, r3, #22
 802ebfe:	d4ee      	bmi.n	802ebde <__smakebuf_r+0x18>
 802ec00:	f023 0303 	bic.w	r3, r3, #3
 802ec04:	f043 0302 	orr.w	r3, r3, #2
 802ec08:	81a3      	strh	r3, [r4, #12]
 802ec0a:	e7e2      	b.n	802ebd2 <__smakebuf_r+0xc>
 802ec0c:	89a3      	ldrh	r3, [r4, #12]
 802ec0e:	6020      	str	r0, [r4, #0]
 802ec10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802ec14:	81a3      	strh	r3, [r4, #12]
 802ec16:	9b01      	ldr	r3, [sp, #4]
 802ec18:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802ec1c:	b15b      	cbz	r3, 802ec36 <__smakebuf_r+0x70>
 802ec1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ec22:	4630      	mov	r0, r6
 802ec24:	f000 f81e 	bl	802ec64 <_isatty_r>
 802ec28:	b128      	cbz	r0, 802ec36 <__smakebuf_r+0x70>
 802ec2a:	89a3      	ldrh	r3, [r4, #12]
 802ec2c:	f023 0303 	bic.w	r3, r3, #3
 802ec30:	f043 0301 	orr.w	r3, r3, #1
 802ec34:	81a3      	strh	r3, [r4, #12]
 802ec36:	89a3      	ldrh	r3, [r4, #12]
 802ec38:	431d      	orrs	r5, r3
 802ec3a:	81a5      	strh	r5, [r4, #12]
 802ec3c:	e7cf      	b.n	802ebde <__smakebuf_r+0x18>
	...

0802ec40 <_fstat_r>:
 802ec40:	b538      	push	{r3, r4, r5, lr}
 802ec42:	2300      	movs	r3, #0
 802ec44:	4d06      	ldr	r5, [pc, #24]	@ (802ec60 <_fstat_r+0x20>)
 802ec46:	4604      	mov	r4, r0
 802ec48:	4608      	mov	r0, r1
 802ec4a:	4611      	mov	r1, r2
 802ec4c:	602b      	str	r3, [r5, #0]
 802ec4e:	f7d2 ff07 	bl	8001a60 <_fstat>
 802ec52:	1c43      	adds	r3, r0, #1
 802ec54:	d102      	bne.n	802ec5c <_fstat_r+0x1c>
 802ec56:	682b      	ldr	r3, [r5, #0]
 802ec58:	b103      	cbz	r3, 802ec5c <_fstat_r+0x1c>
 802ec5a:	6023      	str	r3, [r4, #0]
 802ec5c:	bd38      	pop	{r3, r4, r5, pc}
 802ec5e:	bf00      	nop
 802ec60:	2005c8bc 	.word	0x2005c8bc

0802ec64 <_isatty_r>:
 802ec64:	b538      	push	{r3, r4, r5, lr}
 802ec66:	2300      	movs	r3, #0
 802ec68:	4d05      	ldr	r5, [pc, #20]	@ (802ec80 <_isatty_r+0x1c>)
 802ec6a:	4604      	mov	r4, r0
 802ec6c:	4608      	mov	r0, r1
 802ec6e:	602b      	str	r3, [r5, #0]
 802ec70:	f7d2 ff06 	bl	8001a80 <_isatty>
 802ec74:	1c43      	adds	r3, r0, #1
 802ec76:	d102      	bne.n	802ec7e <_isatty_r+0x1a>
 802ec78:	682b      	ldr	r3, [r5, #0]
 802ec7a:	b103      	cbz	r3, 802ec7e <_isatty_r+0x1a>
 802ec7c:	6023      	str	r3, [r4, #0]
 802ec7e:	bd38      	pop	{r3, r4, r5, pc}
 802ec80:	2005c8bc 	.word	0x2005c8bc

0802ec84 <memchr>:
 802ec84:	b2c9      	uxtb	r1, r1
 802ec86:	4603      	mov	r3, r0
 802ec88:	4402      	add	r2, r0
 802ec8a:	b510      	push	{r4, lr}
 802ec8c:	4293      	cmp	r3, r2
 802ec8e:	4618      	mov	r0, r3
 802ec90:	d101      	bne.n	802ec96 <memchr+0x12>
 802ec92:	2000      	movs	r0, #0
 802ec94:	e003      	b.n	802ec9e <memchr+0x1a>
 802ec96:	7804      	ldrb	r4, [r0, #0]
 802ec98:	3301      	adds	r3, #1
 802ec9a:	428c      	cmp	r4, r1
 802ec9c:	d1f6      	bne.n	802ec8c <memchr+0x8>
 802ec9e:	bd10      	pop	{r4, pc}

0802eca0 <_init>:
 802eca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802eca2:	bf00      	nop
 802eca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802eca6:	bc08      	pop	{r3}
 802eca8:	469e      	mov	lr, r3
 802ecaa:	4770      	bx	lr

0802ecac <_fini>:
 802ecac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ecae:	bf00      	nop
 802ecb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ecb2:	bc08      	pop	{r3}
 802ecb4:	469e      	mov	lr, r3
 802ecb6:	4770      	bx	lr
