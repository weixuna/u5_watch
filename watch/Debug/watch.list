
watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002c8d0  08000240  08000240  00001240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024cc  0802cb10  0802cb10  0002db10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  0802efdc  0802efdc  0002ffdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  0802f184  0802f184  00030184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00016900  0802f19c  0802f19c  0003019c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000010  08045a9c  08045a9c  00046a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM          00000008  08045aac  08045aac  00046aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .init_array   00000014  08045ab4  08045ab4  00046ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .fini_array   00000008  08045ac8  08045ac8  00046ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data         000000fc  20000000  08045ad0  00047000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 TouchGFX_Framebuffer 00045600  200000fc  08045bcc  000470fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 TouchGFX_ScratchbufferA 00000100  20045700  0808b1cc  0008c700  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferB 00000100  20045800  0808b2cc  0008c800  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00016d68  20045900  0808b3cc  0008c900  2**2
                  ALLOC
 15 ._user_heap_stack 00000a00  2005c668  0808b3cc  0008d668  2**0
                  ALLOC
 16 .ARM.attributes 00000036  00000000  00000000  0008c900  2**0
                  CONTENTS, READONLY
 17 .debug_info   000977f3  00000000  00000000  0008c936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00011924  00000000  00000000  00124129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003cf0  00000000  00000000  00135a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002dd2  00000000  00000000  00139740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00042d67  00000000  00000000  0013c512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004d972  00000000  00000000  0017f279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00179658  00000000  00000000  001ccbeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000c2  00000000  00000000  00346243  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00010be4  00000000  00000000  00346308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000047  00000000  00000000  00356eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c05      	ldr	r4, [pc, #20]	@ (8000258 <__do_global_dtors_aux+0x18>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b933      	cbnz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <__do_global_dtors_aux+0x1c>)
 800024a:	b113      	cbz	r3, 8000252 <__do_global_dtors_aux+0x12>
 800024c:	4804      	ldr	r0, [pc, #16]	@ (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	f3af 8000 	nop.w
 8000252:	2301      	movs	r3, #1
 8000254:	7023      	strb	r3, [r4, #0]
 8000256:	bd10      	pop	{r4, pc}
 8000258:	20045900 	.word	0x20045900
 800025c:	00000000 	.word	0x00000000
 8000260:	0802caf8 	.word	0x0802caf8

08000264 <frame_dummy>:
 8000264:	b508      	push	{r3, lr}
 8000266:	4b03      	ldr	r3, [pc, #12]	@ (8000274 <frame_dummy+0x10>)
 8000268:	b11b      	cbz	r3, 8000272 <frame_dummy+0xe>
 800026a:	4903      	ldr	r1, [pc, #12]	@ (8000278 <frame_dummy+0x14>)
 800026c:	4803      	ldr	r0, [pc, #12]	@ (800027c <frame_dummy+0x18>)
 800026e:	f3af 8000 	nop.w
 8000272:	bd08      	pop	{r3, pc}
 8000274:	00000000 	.word	0x00000000
 8000278:	20045904 	.word	0x20045904
 800027c:	0802caf8 	.word	0x0802caf8

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9fb 	b.w	8000698 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b9b0 	b.w	8000698 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000354:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000356:	4688      	mov	r8, r1
 8000358:	4604      	mov	r4, r0
 800035a:	468e      	mov	lr, r1
 800035c:	2b00      	cmp	r3, #0
 800035e:	d14a      	bne.n	80003f6 <__udivmoddi4+0xa6>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d95f      	bls.n	8000426 <__udivmoddi4+0xd6>
 8000366:	fab2 f682 	clz	r6, r2
 800036a:	b14e      	cbz	r6, 8000380 <__udivmoddi4+0x30>
 800036c:	f1c6 0320 	rsb	r3, r6, #32
 8000370:	fa01 fe06 	lsl.w	lr, r1, r6
 8000374:	40b7      	lsls	r7, r6
 8000376:	40b4      	lsls	r4, r6
 8000378:	fa20 f303 	lsr.w	r3, r0, r3
 800037c:	ea43 0e0e 	orr.w	lr, r3, lr
 8000380:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000384:	fa1f fc87 	uxth.w	ip, r7
 8000388:	0c23      	lsrs	r3, r4, #16
 800038a:	fbbe f1f8 	udiv	r1, lr, r8
 800038e:	fb08 ee11 	mls	lr, r8, r1, lr
 8000392:	fb01 f20c 	mul.w	r2, r1, ip
 8000396:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800039a:	429a      	cmp	r2, r3
 800039c:	d907      	bls.n	80003ae <__udivmoddi4+0x5e>
 800039e:	18fb      	adds	r3, r7, r3
 80003a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x5c>
 80003a6:	429a      	cmp	r2, r3
 80003a8:	f200 8154 	bhi.w	8000654 <__udivmoddi4+0x304>
 80003ac:	4601      	mov	r1, r0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	b2a2      	uxth	r2, r4
 80003b2:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b6:	fb08 3310 	mls	r3, r8, r0, r3
 80003ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80003be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80003c2:	4594      	cmp	ip, r2
 80003c4:	d90b      	bls.n	80003de <__udivmoddi4+0x8e>
 80003c6:	18ba      	adds	r2, r7, r2
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	bf2c      	ite	cs
 80003ce:	2401      	movcs	r4, #1
 80003d0:	2400      	movcc	r4, #0
 80003d2:	4594      	cmp	ip, r2
 80003d4:	d902      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003d6:	2c00      	cmp	r4, #0
 80003d8:	f000 813f 	beq.w	800065a <__udivmoddi4+0x30a>
 80003dc:	4618      	mov	r0, r3
 80003de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003e2:	eba2 020c 	sub.w	r2, r2, ip
 80003e6:	2100      	movs	r1, #0
 80003e8:	b11d      	cbz	r5, 80003f2 <__udivmoddi4+0xa2>
 80003ea:	40f2      	lsrs	r2, r6
 80003ec:	2300      	movs	r3, #0
 80003ee:	e9c5 2300 	strd	r2, r3, [r5]
 80003f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d905      	bls.n	8000406 <__udivmoddi4+0xb6>
 80003fa:	b10d      	cbz	r5, 8000400 <__udivmoddi4+0xb0>
 80003fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	4608      	mov	r0, r1
 8000404:	e7f5      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000406:	fab3 f183 	clz	r1, r3
 800040a:	2900      	cmp	r1, #0
 800040c:	d14e      	bne.n	80004ac <__udivmoddi4+0x15c>
 800040e:	4543      	cmp	r3, r8
 8000410:	f0c0 8112 	bcc.w	8000638 <__udivmoddi4+0x2e8>
 8000414:	4282      	cmp	r2, r0
 8000416:	f240 810f 	bls.w	8000638 <__udivmoddi4+0x2e8>
 800041a:	4608      	mov	r0, r1
 800041c:	2d00      	cmp	r5, #0
 800041e:	d0e8      	beq.n	80003f2 <__udivmoddi4+0xa2>
 8000420:	e9c5 4e00 	strd	r4, lr, [r5]
 8000424:	e7e5      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000426:	2a00      	cmp	r2, #0
 8000428:	f000 80ac 	beq.w	8000584 <__udivmoddi4+0x234>
 800042c:	fab2 f682 	clz	r6, r2
 8000430:	2e00      	cmp	r6, #0
 8000432:	f040 80bb 	bne.w	80005ac <__udivmoddi4+0x25c>
 8000436:	1a8b      	subs	r3, r1, r2
 8000438:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800043c:	b2bc      	uxth	r4, r7
 800043e:	2101      	movs	r1, #1
 8000440:	0c02      	lsrs	r2, r0, #16
 8000442:	b280      	uxth	r0, r0
 8000444:	fbb3 fcfe 	udiv	ip, r3, lr
 8000448:	fb0e 331c 	mls	r3, lr, ip, r3
 800044c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000450:	fb04 f20c 	mul.w	r2, r4, ip
 8000454:	429a      	cmp	r2, r3
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x126>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f10c 38ff 	add.w	r8, ip, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0901 	movcs.w	r9, #1
 8000464:	f04f 0900 	movcc.w	r9, #0
 8000468:	429a      	cmp	r2, r3
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x124>
 800046c:	f1b9 0f00 	cmp.w	r9, #0
 8000470:	f000 80ec 	beq.w	800064c <__udivmoddi4+0x2fc>
 8000474:	46c4      	mov	ip, r8
 8000476:	1a9b      	subs	r3, r3, r2
 8000478:	fbb3 f8fe 	udiv	r8, r3, lr
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	fb04 f408 	mul.w	r4, r4, r8
 8000484:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000488:	4294      	cmp	r4, r2
 800048a:	d90b      	bls.n	80004a4 <__udivmoddi4+0x154>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f108 33ff 	add.w	r3, r8, #4294967295
 8000492:	bf2c      	ite	cs
 8000494:	2001      	movcs	r0, #1
 8000496:	2000      	movcc	r0, #0
 8000498:	4294      	cmp	r4, r2
 800049a:	d902      	bls.n	80004a2 <__udivmoddi4+0x152>
 800049c:	2800      	cmp	r0, #0
 800049e:	f000 80d1 	beq.w	8000644 <__udivmoddi4+0x2f4>
 80004a2:	4698      	mov	r8, r3
 80004a4:	1b12      	subs	r2, r2, r4
 80004a6:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80004aa:	e79d      	b.n	80003e8 <__udivmoddi4+0x98>
 80004ac:	f1c1 0620 	rsb	r6, r1, #32
 80004b0:	408b      	lsls	r3, r1
 80004b2:	fa08 f401 	lsl.w	r4, r8, r1
 80004b6:	fa00 f901 	lsl.w	r9, r0, r1
 80004ba:	fa22 f706 	lsr.w	r7, r2, r6
 80004be:	fa28 f806 	lsr.w	r8, r8, r6
 80004c2:	408a      	lsls	r2, r1
 80004c4:	431f      	orrs	r7, r3
 80004c6:	fa20 f306 	lsr.w	r3, r0, r6
 80004ca:	0c38      	lsrs	r0, r7, #16
 80004cc:	4323      	orrs	r3, r4
 80004ce:	fa1f fc87 	uxth.w	ip, r7
 80004d2:	0c1c      	lsrs	r4, r3, #16
 80004d4:	fbb8 fef0 	udiv	lr, r8, r0
 80004d8:	fb00 881e 	mls	r8, r0, lr, r8
 80004dc:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80004e0:	fb0e f80c 	mul.w	r8, lr, ip
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	d90e      	bls.n	8000506 <__udivmoddi4+0x1b6>
 80004e8:	193c      	adds	r4, r7, r4
 80004ea:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004ee:	bf2c      	ite	cs
 80004f0:	f04f 0b01 	movcs.w	fp, #1
 80004f4:	f04f 0b00 	movcc.w	fp, #0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d903      	bls.n	8000504 <__udivmoddi4+0x1b4>
 80004fc:	f1bb 0f00 	cmp.w	fp, #0
 8000500:	f000 80b8 	beq.w	8000674 <__udivmoddi4+0x324>
 8000504:	46d6      	mov	lr, sl
 8000506:	eba4 0408 	sub.w	r4, r4, r8
 800050a:	fa1f f883 	uxth.w	r8, r3
 800050e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000512:	fb00 4413 	mls	r4, r0, r3, r4
 8000516:	fb03 fc0c 	mul.w	ip, r3, ip
 800051a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800051e:	45a4      	cmp	ip, r4
 8000520:	d90e      	bls.n	8000540 <__udivmoddi4+0x1f0>
 8000522:	193c      	adds	r4, r7, r4
 8000524:	f103 30ff 	add.w	r0, r3, #4294967295
 8000528:	bf2c      	ite	cs
 800052a:	f04f 0801 	movcs.w	r8, #1
 800052e:	f04f 0800 	movcc.w	r8, #0
 8000532:	45a4      	cmp	ip, r4
 8000534:	d903      	bls.n	800053e <__udivmoddi4+0x1ee>
 8000536:	f1b8 0f00 	cmp.w	r8, #0
 800053a:	f000 809f 	beq.w	800067c <__udivmoddi4+0x32c>
 800053e:	4603      	mov	r3, r0
 8000540:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000544:	eba4 040c 	sub.w	r4, r4, ip
 8000548:	fba0 ec02 	umull	lr, ip, r0, r2
 800054c:	4564      	cmp	r4, ip
 800054e:	4673      	mov	r3, lr
 8000550:	46e0      	mov	r8, ip
 8000552:	d302      	bcc.n	800055a <__udivmoddi4+0x20a>
 8000554:	d107      	bne.n	8000566 <__udivmoddi4+0x216>
 8000556:	45f1      	cmp	r9, lr
 8000558:	d205      	bcs.n	8000566 <__udivmoddi4+0x216>
 800055a:	ebbe 0302 	subs.w	r3, lr, r2
 800055e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000562:	3801      	subs	r0, #1
 8000564:	46e0      	mov	r8, ip
 8000566:	b15d      	cbz	r5, 8000580 <__udivmoddi4+0x230>
 8000568:	ebb9 0203 	subs.w	r2, r9, r3
 800056c:	eb64 0408 	sbc.w	r4, r4, r8
 8000570:	fa04 f606 	lsl.w	r6, r4, r6
 8000574:	fa22 f301 	lsr.w	r3, r2, r1
 8000578:	40cc      	lsrs	r4, r1
 800057a:	431e      	orrs	r6, r3
 800057c:	e9c5 6400 	strd	r6, r4, [r5]
 8000580:	2100      	movs	r1, #0
 8000582:	e736      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000584:	fbb1 fcf2 	udiv	ip, r1, r2
 8000588:	0c01      	lsrs	r1, r0, #16
 800058a:	4614      	mov	r4, r2
 800058c:	b280      	uxth	r0, r0
 800058e:	4696      	mov	lr, r2
 8000590:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000594:	2620      	movs	r6, #32
 8000596:	4690      	mov	r8, r2
 8000598:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 800059c:	4610      	mov	r0, r2
 800059e:	fbb1 f1f2 	udiv	r1, r1, r2
 80005a2:	eba3 0308 	sub.w	r3, r3, r8
 80005a6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005aa:	e74b      	b.n	8000444 <__udivmoddi4+0xf4>
 80005ac:	40b7      	lsls	r7, r6
 80005ae:	f1c6 0320 	rsb	r3, r6, #32
 80005b2:	fa01 f206 	lsl.w	r2, r1, r6
 80005b6:	fa21 f803 	lsr.w	r8, r1, r3
 80005ba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005be:	fa20 f303 	lsr.w	r3, r0, r3
 80005c2:	b2bc      	uxth	r4, r7
 80005c4:	40b0      	lsls	r0, r6
 80005c6:	4313      	orrs	r3, r2
 80005c8:	0c02      	lsrs	r2, r0, #16
 80005ca:	0c19      	lsrs	r1, r3, #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	fbb8 f9fe 	udiv	r9, r8, lr
 80005d2:	fb0e 8819 	mls	r8, lr, r9, r8
 80005d6:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80005da:	fb09 f804 	mul.w	r8, r9, r4
 80005de:	4588      	cmp	r8, r1
 80005e0:	d951      	bls.n	8000686 <__udivmoddi4+0x336>
 80005e2:	1879      	adds	r1, r7, r1
 80005e4:	f109 3cff 	add.w	ip, r9, #4294967295
 80005e8:	bf2c      	ite	cs
 80005ea:	f04f 0a01 	movcs.w	sl, #1
 80005ee:	f04f 0a00 	movcc.w	sl, #0
 80005f2:	4588      	cmp	r8, r1
 80005f4:	d902      	bls.n	80005fc <__udivmoddi4+0x2ac>
 80005f6:	f1ba 0f00 	cmp.w	sl, #0
 80005fa:	d031      	beq.n	8000660 <__udivmoddi4+0x310>
 80005fc:	eba1 0108 	sub.w	r1, r1, r8
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	fb0e 1119 	mls	r1, lr, r9, r1
 800060c:	b29b      	uxth	r3, r3
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	4543      	cmp	r3, r8
 8000614:	d235      	bcs.n	8000682 <__udivmoddi4+0x332>
 8000616:	18fb      	adds	r3, r7, r3
 8000618:	f109 31ff 	add.w	r1, r9, #4294967295
 800061c:	bf2c      	ite	cs
 800061e:	f04f 0a01 	movcs.w	sl, #1
 8000622:	f04f 0a00 	movcc.w	sl, #0
 8000626:	4543      	cmp	r3, r8
 8000628:	d2bb      	bcs.n	80005a2 <__udivmoddi4+0x252>
 800062a:	f1ba 0f00 	cmp.w	sl, #0
 800062e:	d1b8      	bne.n	80005a2 <__udivmoddi4+0x252>
 8000630:	f1a9 0102 	sub.w	r1, r9, #2
 8000634:	443b      	add	r3, r7
 8000636:	e7b4      	b.n	80005a2 <__udivmoddi4+0x252>
 8000638:	1a84      	subs	r4, r0, r2
 800063a:	eb68 0203 	sbc.w	r2, r8, r3
 800063e:	2001      	movs	r0, #1
 8000640:	4696      	mov	lr, r2
 8000642:	e6eb      	b.n	800041c <__udivmoddi4+0xcc>
 8000644:	443a      	add	r2, r7
 8000646:	f1a8 0802 	sub.w	r8, r8, #2
 800064a:	e72b      	b.n	80004a4 <__udivmoddi4+0x154>
 800064c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000650:	443b      	add	r3, r7
 8000652:	e710      	b.n	8000476 <__udivmoddi4+0x126>
 8000654:	3902      	subs	r1, #2
 8000656:	443b      	add	r3, r7
 8000658:	e6a9      	b.n	80003ae <__udivmoddi4+0x5e>
 800065a:	443a      	add	r2, r7
 800065c:	3802      	subs	r0, #2
 800065e:	e6be      	b.n	80003de <__udivmoddi4+0x8e>
 8000660:	eba7 0808 	sub.w	r8, r7, r8
 8000664:	f1a9 0c02 	sub.w	ip, r9, #2
 8000668:	4441      	add	r1, r8
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	e7c9      	b.n	8000608 <__udivmoddi4+0x2b8>
 8000674:	f1ae 0e02 	sub.w	lr, lr, #2
 8000678:	443c      	add	r4, r7
 800067a:	e744      	b.n	8000506 <__udivmoddi4+0x1b6>
 800067c:	3b02      	subs	r3, #2
 800067e:	443c      	add	r4, r7
 8000680:	e75e      	b.n	8000540 <__udivmoddi4+0x1f0>
 8000682:	4649      	mov	r1, r9
 8000684:	e78d      	b.n	80005a2 <__udivmoddi4+0x252>
 8000686:	eba1 0108 	sub.w	r1, r1, r8
 800068a:	46cc      	mov	ip, r9
 800068c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000690:	fb09 f804 	mul.w	r8, r9, r4
 8000694:	e7b8      	b.n	8000608 <__udivmoddi4+0x2b8>
 8000696:	bf00      	nop

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <CST816D_ReadReg>:
// 外部声明
extern I2C_HandleTypeDef hi2c3;

// 读取CST816D寄存器
HAL_StatusTypeDef CST816D_ReadReg(uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af04      	add	r7, sp, #16
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4613      	mov	r3, r2
 80006aa:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&hi2c3, (CST816D_ADDR << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100);
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	2364      	movs	r3, #100	@ 0x64
 80006b2:	9302      	str	r3, [sp, #8]
 80006b4:	88bb      	ldrh	r3, [r7, #4]
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2301      	movs	r3, #1
 80006be:	212a      	movs	r1, #42	@ 0x2a
 80006c0:	4803      	ldr	r0, [pc, #12]	@ (80006d0 <CST816D_ReadReg+0x34>)
 80006c2:	f003 ff05 	bl	80044d0 <HAL_I2C_Mem_Read>
 80006c6:	4603      	mov	r3, r0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20045aa8 	.word	0x20045aa8

080006d4 <CST816D_WriteReg>:

// 写入CST816D寄存器
HAL_StatusTypeDef CST816D_WriteReg(uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af04      	add	r7, sp, #16
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Write(&hi2c3, (CST816D_ADDR << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100);
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	2364      	movs	r3, #100	@ 0x64
 80006ea:	9302      	str	r3, [sp, #8]
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2301      	movs	r3, #1
 80006f6:	212a      	movs	r1, #42	@ 0x2a
 80006f8:	4803      	ldr	r0, [pc, #12]	@ (8000708 <CST816D_WriteReg+0x34>)
 80006fa:	f003 fdd5 	bl	80042a8 <HAL_I2C_Mem_Write>
 80006fe:	4603      	mov	r3, r0
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20045aa8 	.word	0x20045aa8

0800070c <CST816D_Init>:

// 复位并初始化CST816D
uint8_t CST816D_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
    uint8_t temp_data;

    // 硬件复位CST816D
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // RST引脚拉低
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000718:	4821      	ldr	r0, [pc, #132]	@ (80007a0 <CST816D_Init+0x94>)
 800071a:	f003 fd11 	bl	8004140 <HAL_GPIO_WritePin>
    HAL_Delay(20);                                         // 延时20ms（增加复位时间）
 800071e:	2014      	movs	r0, #20
 8000720:	f001 fbe8 	bl	8001ef4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);   // RST引脚拉高
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800072a:	481d      	ldr	r0, [pc, #116]	@ (80007a0 <CST816D_Init+0x94>)
 800072c:	f003 fd08 	bl	8004140 <HAL_GPIO_WritePin>
    HAL_Delay(100);                                        // 延时100ms等待芯片稳定启动
 8000730:	2064      	movs	r0, #100	@ 0x64
 8000732:	f001 fbdf 	bl	8001ef4 <HAL_Delay>

    // 关闭自动休眠，确保持续工作
    temp_data = 0x01; // 禁用自动休眠
 8000736:	2301      	movs	r3, #1
 8000738:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_DIS_AUTO_SLEEP, &temp_data, 1);
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	2201      	movs	r2, #1
 800073e:	4619      	mov	r1, r3
 8000740:	20fe      	movs	r0, #254	@ 0xfe
 8000742:	f7ff ffc7 	bl	80006d4 <CST816D_WriteReg>

    // 重新设置扫描周期 - 适合双击检测的更快扫描
    temp_data = 0; // 扫描周期设为最小值(0)，最高速
 8000746:	2300      	movs	r3, #0
 8000748:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_NOR_SCAN, &temp_data, 1);
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	2201      	movs	r2, #1
 800074e:	4619      	mov	r1, r3
 8000750:	20ee      	movs	r0, #238	@ 0xee
 8000752:	f7ff ffbf 	bl	80006d4 <CST816D_WriteReg>

    // 设置中断脉冲宽度
    temp_data = 5; // 更小的脉冲宽度，提高响应速度
 8000756:	2305      	movs	r3, #5
 8000758:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_IRQ_PULSE, &temp_data, 1);
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	2201      	movs	r2, #1
 800075e:	4619      	mov	r1, r3
 8000760:	20ed      	movs	r0, #237	@ 0xed
 8000762:	f7ff ffb7 	bl	80006d4 <CST816D_WriteReg>

    // 配置中断控制 - 启用触摸和所有变化检测
    temp_data = EnTouch | EnChange | EnMotion;
 8000766:	2370      	movs	r3, #112	@ 0x70
 8000768:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_IRQ_CTL, &temp_data, 1);
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	2201      	movs	r2, #1
 800076e:	4619      	mov	r1, r3
 8000770:	20fa      	movs	r0, #250	@ 0xfa
 8000772:	f7ff ffaf 	bl	80006d4 <CST816D_WriteReg>
    // 设置长按时间(500ms)
//    temp_data = 10;
//    CST816D_WriteReg(CST816D_REG_LONG_PRESS, &temp_data, 1);

    // 设置动作识别掩码 - 确保双击能被检测
    temp_data = 0x07; // 启用滑动和双击 (0x01+0x02+0x03)
 8000776:	2307      	movs	r3, #7
 8000778:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_MOTION_MASK, &temp_data, 1);
 800077a:	1dfb      	adds	r3, r7, #7
 800077c:	2201      	movs	r2, #1
 800077e:	4619      	mov	r1, r3
 8000780:	20ec      	movs	r0, #236	@ 0xec
 8000782:	f7ff ffa7 	bl	80006d4 <CST816D_WriteReg>

    // 配置动作角度 - 更宽松的滑动手势检测
    temp_data = 60;
 8000786:	233c      	movs	r3, #60	@ 0x3c
 8000788:	71fb      	strb	r3, [r7, #7]
    CST816D_WriteReg(CST816D_REG_MOTION_ANGLE, &temp_data, 1);
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	2201      	movs	r2, #1
 800078e:	4619      	mov	r1, r3
 8000790:	20ef      	movs	r0, #239	@ 0xef
 8000792:	f7ff ff9f 	bl	80006d4 <CST816D_WriteReg>

    return 1; // 初始化成功
 8000796:	2301      	movs	r3, #1
}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	42020400 	.word	0x42020400

080007a4 <CST816D_GetTouchData>:

// 获取触摸点数据 - 优化速度版本
HAL_StatusTypeDef CST816D_GetTouchData(CST816D_TouchData *touch_data)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
    uint8_t data[7] = {0};
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	f8c3 2003 	str.w	r2, [r3, #3]

    // 设置初始值
    touch_data->gesture = GESTURE_NONE;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
    touch_data->finger_num = 0;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2200      	movs	r2, #0
 80007c2:	705a      	strb	r2, [r3, #1]
    touch_data->x = 0;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2200      	movs	r2, #0
 80007c8:	805a      	strh	r2, [r3, #2]
    touch_data->y = 0;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2200      	movs	r2, #0
 80007ce:	809a      	strh	r2, [r3, #4]

    // 直接读取所需数据，减少一个字节的传输
    if (CST816D_ReadReg(CST816D_REG_GESTURE, data, 7) != HAL_OK)
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	2207      	movs	r2, #7
 80007d6:	4619      	mov	r1, r3
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff ff5f 	bl	800069c <CST816D_ReadReg>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <CST816D_GetTouchData+0x44>
    {
        return HAL_ERROR;
 80007e4:	2301      	movs	r3, #1
 80007e6:	e022      	b.n	800082e <CST816D_GetTouchData+0x8a>
    }

    // 解析数据 - 简化处理逻辑
    touch_data->gesture = data[0];
 80007e8:	7a3a      	ldrb	r2, [r7, #8]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	701a      	strb	r2, [r3, #0]
    touch_data->finger_num = data[1];
 80007ee:	7a7a      	ldrb	r2, [r7, #9]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	705a      	strb	r2, [r3, #1]

    // X坐标位于寄存器2-3
    touch_data->x = ((uint16_t)(data[2] & 0x0F) << 8) | data[3];
 80007f4:	7abb      	ldrb	r3, [r7, #10]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	021b      	lsls	r3, r3, #8
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000800:	b21a      	sxth	r2, r3
 8000802:	7afb      	ldrb	r3, [r7, #11]
 8000804:	b21b      	sxth	r3, r3
 8000806:	4313      	orrs	r3, r2
 8000808:	b21b      	sxth	r3, r3
 800080a:	b29a      	uxth	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	805a      	strh	r2, [r3, #2]
    // Y坐标位于寄存器4-5
    touch_data->y = ((uint16_t)(data[4] & 0x0F) << 8) | data[5];
 8000810:	7b3b      	ldrb	r3, [r7, #12]
 8000812:	b21b      	sxth	r3, r3
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	b21b      	sxth	r3, r3
 8000818:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800081c:	b21a      	sxth	r2, r3
 800081e:	7b7b      	ldrb	r3, [r7, #13]
 8000820:	b21b      	sxth	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b21b      	sxth	r3, r3
 8000826:	b29a      	uxth	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	809a      	strh	r2, [r3, #4]

    return HAL_OK;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <CST816D_IsTouched>:

// 检测触摸(通过INT引脚) - 优化速度版本
uint8_t CST816D_IsTouched(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
    // 直接返回INT引脚状态，移除2ms延时
    return (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET);
 800083c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000840:	4805      	ldr	r0, [pc, #20]	@ (8000858 <CST816D_IsTouched+0x20>)
 8000842:	f003 fc65 	bl	8004110 <HAL_GPIO_ReadPin>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	bf0c      	ite	eq
 800084c:	2301      	moveq	r3, #1
 800084e:	2300      	movne	r3, #0
 8000850:	b2db      	uxtb	r3, r3
}
 8000852:	4618      	mov	r0, r3
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	42020400 	.word	0x42020400

0800085c <CST816D_SetMotionMask>:
    return CST816D_WriteReg(CST816D_REG_IRQ_PULSE, &width, 1);
}

// 设置动作识别掩码 (使能/禁用特定手势)
HAL_StatusTypeDef CST816D_SetMotionMask(uint8_t mask)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
    return CST816D_WriteReg(CST816D_REG_MOTION_MASK, &mask, 1);
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	2201      	movs	r2, #1
 800086a:	4619      	mov	r1, r3
 800086c:	20ec      	movs	r0, #236	@ 0xec
 800086e:	f7ff ff31 	bl	80006d4 <CST816D_WriteReg>
 8000872:	4603      	mov	r3, r0
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <CST816D_SetIrqCtl>:
    return CST816D_SetMotionMask(motion_mask);
}

// 设置中断控制寄存器
HAL_StatusTypeDef CST816D_SetIrqCtl(uint8_t irq_ctl)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
    return CST816D_WriteReg(CST816D_REG_IRQ_CTL, &irq_ctl, 1);
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	2201      	movs	r2, #1
 800088a:	4619      	mov	r1, r3
 800088c:	20fa      	movs	r0, #250	@ 0xfa
 800088e:	f7ff ff21 	bl	80006d4 <CST816D_WriteReg>
 8000892:	4603      	mov	r3, r0
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <GPDMA_Callback>:

/**
 * @brief Register DMA callbacks
 */
void GPDMA_Callback(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&handle_GPDMA1_Channel13, HAL_DMA_XFER_CPLT_CB_ID, DMA_TxCpltCallback);
 80008a0:	4a05      	ldr	r2, [pc, #20]	@ (80008b8 <GPDMA_Callback+0x1c>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4805      	ldr	r0, [pc, #20]	@ (80008bc <GPDMA_Callback+0x20>)
 80008a6:	f001 ffd9 	bl	800285c <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&handle_GPDMA1_Channel13, HAL_DMA_XFER_ERROR_CB_ID, DMA_TxErrorCallback);
 80008aa:	4a05      	ldr	r2, [pc, #20]	@ (80008c0 <GPDMA_Callback+0x24>)
 80008ac:	2102      	movs	r1, #2
 80008ae:	4803      	ldr	r0, [pc, #12]	@ (80008bc <GPDMA_Callback+0x20>)
 80008b0:	f001 ffd4 	bl	800285c <HAL_DMA_RegisterCallback>
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	080008c5 	.word	0x080008c5
 80008bc:	20045a30 	.word	0x20045a30
 80008c0:	080008f5 	.word	0x080008f5

080008c4 <DMA_TxCpltCallback>:
/**
 * @brief DMA transfer complete callback
 * @param hdma: DMA handle
 */
static void DMA_TxCpltCallback(DMA_HandleTypeDef *hdma)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
    if (hdma == &handle_GPDMA1_Channel13)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a07      	ldr	r2, [pc, #28]	@ (80008ec <DMA_TxCpltCallback+0x28>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d105      	bne.n	80008e0 <DMA_TxCpltCallback+0x1c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008d4:	f3bf 8f4f 	dsb	sy
}
 80008d8:	bf00      	nop
    {
        __DSB(); // 添加内存屏障
        displayRefreshing = false;
 80008da:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <DMA_TxCpltCallback+0x2c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
    }
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	20045a30 	.word	0x20045a30
 80008f0:	2004591c 	.word	0x2004591c

080008f4 <DMA_TxErrorCallback>:
/**
 * @brief DMA transfer error callback
 * @param hdma: DMA handle
 */
static void DMA_TxErrorCallback(DMA_HandleTypeDef *hdma)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
    displayRefreshing = false;
 80008fc:	4b04      	ldr	r3, [pc, #16]	@ (8000910 <DMA_TxErrorCallback+0x1c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	2004591c 	.word	0x2004591c

08000914 <GPDMA_Queue_Config>:

/**
 * @brief Configure DMA Linked-list Queue
 */
static HAL_StatusTypeDef GPDMA_Queue_Config(DMA_QListTypeDef *Queue, uint8_t node_cnt, uint8_t *src, uint8_t *dst, uint32_t data_size)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b0a0      	sub	sp, #128	@ 0x80
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	607a      	str	r2, [r7, #4]
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	460b      	mov	r3, r1
 8000922:	72fb      	strb	r3, [r7, #11]
    static DMA_NodeTypeDef Nodes[(((WIDTH * HEIGHT * 2) / ((64 * 1024) - 2)) + 1)];
    HAL_StatusTypeDef ret = HAL_OK;
 8000924:	2300      	movs	r3, #0
 8000926:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    /* DMA node configuration declaration */
    DMA_NodeConfTypeDef pNodeConfig;
    uint8_t i;

    /* Set node configuration ################################################*/
    pNodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 800092a:	2322      	movs	r3, #34	@ 0x22
 800092c:	613b      	str	r3, [r7, #16]
    pNodeConfig.Init.Mode = DMA_NORMAL;
 800092e:	2300      	movs	r3, #0
 8000930:	647b      	str	r3, [r7, #68]	@ 0x44
    pNodeConfig.Init.Request = DMA_REQUEST_SW;
 8000932:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000936:	617b      	str	r3, [r7, #20]
    pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
    pNodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800093c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000940:	61fb      	str	r3, [r7, #28]
    pNodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8000942:	2308      	movs	r3, #8
 8000944:	623b      	str	r3, [r7, #32]
    pNodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
    pNodeConfig.Init.SrcDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
    pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pNodeConfig.Init.SrcBurstLength = 1;
 8000952:	2301      	movs	r3, #1
 8000954:	637b      	str	r3, [r7, #52]	@ 0x34
    pNodeConfig.Init.DestBurstLength = 1;
 8000956:	2301      	movs	r3, #1
 8000958:	63bb      	str	r3, [r7, #56]	@ 0x38
    pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0 | DMA_DEST_ALLOCATED_PORT0;
 800095a:	2300      	movs	r3, #0
 800095c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pNodeConfig.Init.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 800095e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000962:	643b      	str	r3, [r7, #64]	@ 0x40
    pNodeConfig.RepeatBlockConfig.RepeatCount = 1;
 8000964:	2301      	movs	r3, #1
 8000966:	65fb      	str	r3, [r7, #92]	@ 0x5c
    pNodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	663b      	str	r3, [r7, #96]	@ 0x60
    pNodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	667b      	str	r3, [r7, #100]	@ 0x64
    pNodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	66bb      	str	r3, [r7, #104]	@ 0x68
    pNodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	66fb      	str	r3, [r7, #108]	@ 0x6c
    pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8000978:	2300      	movs	r3, #0
 800097a:	657b      	str	r3, [r7, #84]	@ 0x54
    pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800097c:	2300      	movs	r3, #0
 800097e:	64bb      	str	r3, [r7, #72]	@ 0x48
    pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8000980:	2300      	movs	r3, #0
 8000982:	64fb      	str	r3, [r7, #76]	@ 0x4c
    pNodeConfig.SrcAddress = (uint32_t)src;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	673b      	str	r3, [r7, #112]	@ 0x70
    pNodeConfig.DstAddress = (uint32_t)dst;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (node_cnt > 1)
 800098c:	7afb      	ldrb	r3, [r7, #11]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d903      	bls.n	800099a <GPDMA_Queue_Config+0x86>
    {
        pNodeConfig.DataSize = ((64 * 1024) - 2);
 8000992:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8000996:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000998:	e002      	b.n	80009a0 <GPDMA_Queue_Config+0x8c>
    }
    else
    {
        pNodeConfig.DataSize = data_size;
 800099a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800099e:	67bb      	str	r3, [r7, #120]	@ 0x78
    }

    for (i = 0; ((ret == HAL_OK) && (i < node_cnt)); i++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80009a6:	e08a      	b.n	8000abe <GPDMA_Queue_Config+0x1aa>
    {
        if (i == 0)
 80009a8:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d13a      	bne.n	8000a26 <GPDMA_Queue_Config+0x112>
        {
            /* Reset The Queue */
            ret = HAL_DMAEx_List_ResetQ(Queue);
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	f002 fcbe 	bl	8003332 <HAL_DMAEx_List_ResetQ>
 80009b6:	4603      	mov	r3, r0
 80009b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 80009bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d002      	beq.n	80009ca <GPDMA_Queue_Config+0xb6>
            {
                return ret;
 80009c4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80009c8:	e085      	b.n	8000ad6 <GPDMA_Queue_Config+0x1c2>
            }
            /* Build Node first Node */
            ret = HAL_DMAEx_List_BuildNode(&pNodeConfig, &Nodes[i]);
 80009ca:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80009ce:	4613      	mov	r3, r2
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	4413      	add	r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	4a42      	ldr	r2, [pc, #264]	@ (8000ae0 <GPDMA_Queue_Config+0x1cc>)
 80009d8:	441a      	add	r2, r3
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 fbaf 	bl	8003144 <HAL_DMAEx_List_BuildNode>
 80009e6:	4603      	mov	r3, r0
 80009e8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 80009ec:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d002      	beq.n	80009fa <GPDMA_Queue_Config+0xe6>
            {
                return ret;
 80009f4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80009f8:	e06d      	b.n	8000ad6 <GPDMA_Queue_Config+0x1c2>
            }
            /* Insert Node to Queue */
            ret = HAL_DMAEx_List_InsertNode_Head(Queue, &Nodes[i]);
 80009fa:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80009fe:	4613      	mov	r3, r2
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	4a36      	ldr	r2, [pc, #216]	@ (8000ae0 <GPDMA_Queue_Config+0x1cc>)
 8000a08:	4413      	add	r3, r2
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f002 fbaf 	bl	8003170 <HAL_DMAEx_List_InsertNode_Head>
 8000a12:	4603      	mov	r3, r0
 8000a14:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 8000a18:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d044      	beq.n	8000aaa <GPDMA_Queue_Config+0x196>
            {
                return ret;
 8000a20:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a24:	e057      	b.n	8000ad6 <GPDMA_Queue_Config+0x1c2>
            }
        }
        else
        {
            /* Adjust size of last node */
            if ((node_cnt > 1) && (i == (node_cnt - 1)))
 8000a26:	7afb      	ldrb	r3, [r7, #11]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d910      	bls.n	8000a4e <GPDMA_Queue_Config+0x13a>
 8000a2c:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000a30:	7afb      	ldrb	r3, [r7, #11]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d10a      	bne.n	8000a4e <GPDMA_Queue_Config+0x13a>
            {
                pNodeConfig.DataSize = (data_size - (i * ((64 * 1024) - 2)));
 8000a38:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	03db      	lsls	r3, r3, #15
 8000a40:	1a9b      	subs	r3, r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	461a      	mov	r2, r3
 8000a46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a4a:	1a9b      	subs	r3, r3, r2
 8000a4c:	67bb      	str	r3, [r7, #120]	@ 0x78
            }
            /* Build Node Node */
            ret = HAL_DMAEx_List_BuildNode(&pNodeConfig, &Nodes[i]);
 8000a4e:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000a52:	4613      	mov	r3, r2
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	4413      	add	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4a21      	ldr	r2, [pc, #132]	@ (8000ae0 <GPDMA_Queue_Config+0x1cc>)
 8000a5c:	441a      	add	r2, r3
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	4611      	mov	r1, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f002 fb6d 	bl	8003144 <HAL_DMAEx_List_BuildNode>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 8000a70:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d002      	beq.n	8000a7e <GPDMA_Queue_Config+0x16a>
            {
                return ret;
 8000a78:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a7c:	e02b      	b.n	8000ad6 <GPDMA_Queue_Config+0x1c2>
            }
            /* Insert Node to Queue */
            ret = HAL_DMAEx_List_InsertNode_Tail(Queue, &Nodes[i]);
 8000a7e:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000a82:	4613      	mov	r3, r2
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	4413      	add	r3, r2
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	4a15      	ldr	r2, [pc, #84]	@ (8000ae0 <GPDMA_Queue_Config+0x1cc>)
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4619      	mov	r1, r3
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	f002 fbd6 	bl	8003242 <HAL_DMAEx_List_InsertNode_Tail>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            if (ret != HAL_OK)
 8000a9c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d002      	beq.n	8000aaa <GPDMA_Queue_Config+0x196>
            {
                return ret;
 8000aa4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000aa8:	e015      	b.n	8000ad6 <GPDMA_Queue_Config+0x1c2>
            }
        }
        pNodeConfig.SrcAddress += ((64 * 1024) - 2);
 8000aaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000aac:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000ab0:	33fe      	adds	r3, #254	@ 0xfe
 8000ab2:	673b      	str	r3, [r7, #112]	@ 0x70
    for (i = 0; ((ret == HAL_OK) && (i < node_cnt)); i++)
 8000ab4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000ab8:	3301      	adds	r3, #1
 8000aba:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8000abe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d105      	bne.n	8000ad2 <GPDMA_Queue_Config+0x1be>
 8000ac6:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000aca:	7afb      	ldrb	r3, [r7, #11]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f4ff af6b 	bcc.w	80009a8 <GPDMA_Queue_Config+0x94>
    }

    return ret;
 8000ad2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3780      	adds	r7, #128	@ 0x80
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20045920 	.word	0x20045920

08000ae4 <ICNA3306_SendDataDMA>:

/**
 * @brief Send data to ICNA3306 using DMA
 */
static HAL_StatusTypeDef ICNA3306_SendDataDMA(uint8_t *pData, uint32_t Length)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af02      	add	r7, sp, #8
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
    static DMA_QListTypeDef Queue;
    uint32_t len = Length;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	60fb      	str	r3, [r7, #12]
    uint8_t node_cnt = (len / ((64 * 1024) - 2));
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	085b      	lsrs	r3, r3, #1
 8000af6:	4a3b      	ldr	r2, [pc, #236]	@ (8000be4 <ICNA3306_SendDataDMA+0x100>)
 8000af8:	fba2 2303 	umull	r2, r3, r2, r3
 8000afc:	0b9b      	lsrs	r3, r3, #14
 8000afe:	72fb      	strb	r3, [r7, #11]
    if (len % ((64 * 1024) - 2))
 8000b00:	68f9      	ldr	r1, [r7, #12]
 8000b02:	084b      	lsrs	r3, r1, #1
 8000b04:	4a37      	ldr	r2, [pc, #220]	@ (8000be4 <ICNA3306_SendDataDMA+0x100>)
 8000b06:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0a:	0b9a      	lsrs	r2, r3, #14
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	03db      	lsls	r3, r3, #15
 8000b10:	1a9b      	subs	r3, r3, r2
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	1aca      	subs	r2, r1, r3
 8000b16:	2a00      	cmp	r2, #0
 8000b18:	d002      	beq.n	8000b20 <ICNA3306_SendDataDMA+0x3c>
    {
        node_cnt++;
 8000b1a:	7afb      	ldrb	r3, [r7, #11]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	72fb      	strb	r3, [r7, #11]
    }

    if ((handle_GPDMA1_Channel13.Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8000b20:	4b31      	ldr	r3, [pc, #196]	@ (8000be8 <ICNA3306_SendDataDMA+0x104>)
 8000b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d02a      	beq.n	8000b82 <ICNA3306_SendDataDMA+0x9e>
    {
        /* Link created queue to DMA channel */
        if (GPDMA_Queue_Config(&Queue, node_cnt, pData, (uint8_t *)&(hospi1.Instance->DR), len) != HAL_OK)
 8000b2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000bec <ICNA3306_SendDataDMA+0x108>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8000b34:	7af9      	ldrb	r1, [r7, #11]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	482c      	ldr	r0, [pc, #176]	@ (8000bf0 <ICNA3306_SendDataDMA+0x10c>)
 8000b40:	f7ff fee8 	bl	8000914 <GPDMA_Queue_Config>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d004      	beq.n	8000b54 <ICNA3306_SendDataDMA+0x70>
        {
            displayRefreshing = false;
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf4 <ICNA3306_SendDataDMA+0x110>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	e042      	b.n	8000bda <ICNA3306_SendDataDMA+0xf6>
        }

        /* Link created queue to DMA channel */
        if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel13, &Queue) != HAL_OK)
 8000b54:	4926      	ldr	r1, [pc, #152]	@ (8000bf0 <ICNA3306_SendDataDMA+0x10c>)
 8000b56:	4824      	ldr	r0, [pc, #144]	@ (8000be8 <ICNA3306_SendDataDMA+0x104>)
 8000b58:	f002 fc36 	bl	80033c8 <HAL_DMAEx_List_LinkQ>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d004      	beq.n	8000b6c <ICNA3306_SendDataDMA+0x88>
        {
            displayRefreshing = false;
 8000b62:	4b24      	ldr	r3, [pc, #144]	@ (8000bf4 <ICNA3306_SendDataDMA+0x110>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e036      	b.n	8000bda <ICNA3306_SendDataDMA+0xf6>
        }

        /* Enable All the DMA interrupts */
        if (HAL_DMAEx_List_Start_IT(&handle_GPDMA1_Channel13) != HAL_OK)
 8000b6c:	481e      	ldr	r0, [pc, #120]	@ (8000be8 <ICNA3306_SendDataDMA+0x104>)
 8000b6e:	f002 fa55 	bl	800301c <HAL_DMAEx_List_Start_IT>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d02f      	beq.n	8000bd8 <ICNA3306_SendDataDMA+0xf4>
        {
            displayRefreshing = false;
 8000b78:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf4 <ICNA3306_SendDataDMA+0x110>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e02b      	b.n	8000bda <ICNA3306_SendDataDMA+0xf6>
        }
    }
    else
    {
        if (node_cnt > 1)
 8000b82:	7afb      	ldrb	r3, [r7, #11]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d904      	bls.n	8000b92 <ICNA3306_SendDataDMA+0xae>
        {
            displayRefreshing = false;
 8000b88:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <ICNA3306_SendDataDMA+0x110>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e023      	b.n	8000bda <ICNA3306_SendDataDMA+0xf6>
        }

        switch (handle_GPDMA1_Channel13.Init.DestDataWidth)
 8000b92:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <ICNA3306_SendDataDMA+0x104>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d006      	beq.n	8000ba8 <ICNA3306_SendDataDMA+0xc4>
 8000b9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000b9e:	d106      	bne.n	8000bae <ICNA3306_SendDataDMA+0xca>
        {
        case DMA_DEST_DATAWIDTH_WORD:
            len = (Length / 4);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	089b      	lsrs	r3, r3, #2
 8000ba4:	60fb      	str	r3, [r7, #12]
            break;
 8000ba6:	e006      	b.n	8000bb6 <ICNA3306_SendDataDMA+0xd2>
        case DMA_DEST_DATAWIDTH_BYTE:
            len = Length;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	60fb      	str	r3, [r7, #12]
            break;
 8000bac:	e003      	b.n	8000bb6 <ICNA3306_SendDataDMA+0xd2>
        default:
        case DMA_DEST_DATAWIDTH_HALFWORD:
            len = (Length / 2);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	085b      	lsrs	r3, r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
            break;
 8000bb4:	bf00      	nop
        }

        if (HAL_DMA_Start_IT(&handle_GPDMA1_Channel13, (uint32_t)pData, (uint32_t)&(hospi1.Instance->DR), len) != HAL_OK)
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <ICNA3306_SendDataDMA+0x108>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3350      	adds	r3, #80	@ 0x50
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4809      	ldr	r0, [pc, #36]	@ (8000be8 <ICNA3306_SendDataDMA+0x104>)
 8000bc4:	f001 fbe4 	bl	8002390 <HAL_DMA_Start_IT>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d004      	beq.n	8000bd8 <ICNA3306_SendDataDMA+0xf4>
        {
            displayRefreshing = false;
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <ICNA3306_SendDataDMA+0x110>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
            return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e000      	b.n	8000bda <ICNA3306_SendDataDMA+0xf6>
        }
    }

    return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	80010003 	.word	0x80010003
 8000be8:	20045a30 	.word	0x20045a30
 8000bec:	20045afc 	.word	0x20045afc
 8000bf0:	2004598c 	.word	0x2004598c
 8000bf4:	2004591c 	.word	0x2004591c

08000bf8 <ICNA3306_WriteCmdParam>:

HAL_StatusTypeDef ICNA3306_WriteCmdParam(uint8_t cmd, size_t len, const uint8_t *params)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b098      	sub	sp, #96	@ 0x60
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
 8000c04:	73fb      	strb	r3, [r7, #15]
    OSPI_RegularCmdTypeDef sCommand = {0};
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	2250      	movs	r2, #80	@ 0x50
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f02b f9de 	bl	802bfd0 <memset>

    sCommand.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000c14:	2300      	movs	r3, #0
 8000c16:	613b      	str	r3, [r7, #16]
    sCommand.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = 0x02;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61bb      	str	r3, [r7, #24]
    sCommand.Address = ((uint32_t)cmd) << 8;
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	62bb      	str	r3, [r7, #40]	@ 0x28

    sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8000c2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8000c30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c34:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    sCommand.DQSMode = HAL_OSPI_DQS_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.DummyCycles = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.DataMode = len > 0 ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_NONE;
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d002      	beq.n	8000c52 <ICNA3306_WriteCmdParam+0x5a>
 8000c4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c50:	e000      	b.n	8000c54 <ICNA3306_WriteCmdParam+0x5c>
 8000c52:	2300      	movs	r3, #0
 8000c54:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.NbData = len;
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c62:	4619      	mov	r1, r3
 8000c64:	480d      	ldr	r0, [pc, #52]	@ (8000c9c <ICNA3306_WriteCmdParam+0xa4>)
 8000c66:	f004 fab5 	bl	80051d4 <HAL_OSPI_Command>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <ICNA3306_WriteCmdParam+0x7c>
    {
        return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e00e      	b.n	8000c92 <ICNA3306_WriteCmdParam+0x9a>
    }

    if (len > 0)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d00a      	beq.n	8000c90 <ICNA3306_WriteCmdParam+0x98>
    {
        if (HAL_OSPI_Transmit(&hospi1, (uint8_t *)params, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	4806      	ldr	r0, [pc, #24]	@ (8000c9c <ICNA3306_WriteCmdParam+0xa4>)
 8000c82:	f004 fb34 	bl	80052ee <HAL_OSPI_Transmit>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <ICNA3306_WriteCmdParam+0x98>
        {
            return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e000      	b.n	8000c92 <ICNA3306_WriteCmdParam+0x9a>
        }
    }

    return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3760      	adds	r7, #96	@ 0x60
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20045afc 	.word	0x20045afc

08000ca0 <ICNA3306_WriteCmdData>:

HAL_StatusTypeDef ICNA3306_WriteCmdData(uint8_t cmd, size_t len, const uint8_t *data)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b09a      	sub	sp, #104	@ 0x68
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status;
    OSPI_RegularCmdTypeDef sCommand = {0};
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	2250      	movs	r2, #80	@ 0x50
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f02b f98a 	bl	802bfd0 <memset>
    // 添加状态调试信息
    printf("OSPI State: %d\r\n", hospi1.State);
 8000cbc:	4b48      	ldr	r3, [pc, #288]	@ (8000de0 <ICNA3306_WriteCmdData+0x140>)
 8000cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4848      	ldr	r0, [pc, #288]	@ (8000de4 <ICNA3306_WriteCmdData+0x144>)
 8000cc4:	f02b f83c 	bl	802bd40 <iprintf>
    printf("MemoryType: %d\r\n", hospi1.Init.MemoryType);
 8000cc8:	4b45      	ldr	r3, [pc, #276]	@ (8000de0 <ICNA3306_WriteCmdData+0x140>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4846      	ldr	r0, [pc, #280]	@ (8000de8 <ICNA3306_WriteCmdData+0x148>)
 8000cd0:	f02b f836 	bl	802bd40 <iprintf>
    printf("OperationType: %d\r\n", sCommand.OperationType);
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4844      	ldr	r0, [pc, #272]	@ (8000dec <ICNA3306_WriteCmdData+0x14c>)
 8000cda:	f02b f831 	bl	802bd40 <iprintf>
    if (len == 0 || data == NULL)
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d002      	beq.n	8000cea <ICNA3306_WriteCmdData+0x4a>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <ICNA3306_WriteCmdData+0x4e>
        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e073      	b.n	8000dd6 <ICNA3306_WriteCmdData+0x136>

    HAL_OSPI_Abort(&hospi1);  // 先调用
 8000cee:	483c      	ldr	r0, [pc, #240]	@ (8000de0 <ICNA3306_WriteCmdData+0x140>)
 8000cf0:	f004 fbc0 	bl	8005474 <HAL_OSPI_Abort>

    sCommand.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
    sCommand.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	61fb      	str	r3, [r7, #28]
    sCommand.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
    sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.Instruction = 0x32;
 8000d04:	2332      	movs	r3, #50	@ 0x32
 8000d06:	61bb      	str	r3, [r7, #24]

    sCommand.Address = (cmd << 8);
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8000d0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8000d14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d18:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.AddressDtrMode = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.DataMode = HAL_OSPI_DATA_4_LINES;
 8000d22:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000d26:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.DataDtrMode = HAL_OSPI_DATA_DTR_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	653b      	str	r3, [r7, #80]	@ 0x50
    sCommand.DummyCycles = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	657b      	str	r3, [r7, #84]	@ 0x54
    sCommand.DQSMode = HAL_OSPI_DQS_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	65bb      	str	r3, [r7, #88]	@ 0x58
    sCommand.NbData = len;
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	64fb      	str	r3, [r7, #76]	@ 0x4c

    sCommand.SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d44:	4619      	mov	r1, r3
 8000d46:	4826      	ldr	r0, [pc, #152]	@ (8000de0 <ICNA3306_WriteCmdData+0x140>)
 8000d48:	f004 fa44 	bl	80051d4 <HAL_OSPI_Command>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d004      	beq.n	8000d5c <ICNA3306_WriteCmdData+0xbc>
    {
        printf("OSPI Command Failed!\r\n");
 8000d52:	4827      	ldr	r0, [pc, #156]	@ (8000df0 <ICNA3306_WriteCmdData+0x150>)
 8000d54:	f02b f85c 	bl	802be10 <puts>
        return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e03c      	b.n	8000dd6 <ICNA3306_WriteCmdData+0x136>
    }
    printf("Transfer length: %d\r\n", len);
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	4825      	ldr	r0, [pc, #148]	@ (8000df4 <ICNA3306_WriteCmdData+0x154>)
 8000d60:	f02a ffee 	bl	802bd40 <iprintf>
    if (len > 1024)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d6a:	d933      	bls.n	8000dd4 <ICNA3306_WriteCmdData+0x134>
    {
        HAL_OSPI_Abort(&hospi1);
 8000d6c:	481c      	ldr	r0, [pc, #112]	@ (8000de0 <ICNA3306_WriteCmdData+0x140>)
 8000d6e:	f004 fb81 	bl	8005474 <HAL_OSPI_Abort>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d72:	f3bf 8f4f 	dsb	sy
}
 8000d76:	bf00      	nop
        __DSB();

        displayRefreshing = true;
 8000d78:	4b1f      	ldr	r3, [pc, #124]	@ (8000df8 <ICNA3306_WriteCmdData+0x158>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
        status = ICNA3306_SendDataDMA((uint8_t *)data, len);
 8000d7e:	68b9      	ldr	r1, [r7, #8]
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff feaf 	bl	8000ae4 <ICNA3306_SendDataDMA>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        if (status != HAL_OK)
 8000d8c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d005      	beq.n	8000da0 <ICNA3306_WriteCmdData+0x100>
        {
            displayRefreshing = false;
 8000d94:	4b18      	ldr	r3, [pc, #96]	@ (8000df8 <ICNA3306_WriteCmdData+0x158>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
            return status;
 8000d9a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d9e:	e01a      	b.n	8000dd6 <ICNA3306_WriteCmdData+0x136>
        }
        uint32_t timeout = HAL_GetTick() + 1000;
 8000da0:	f001 f89c 	bl	8001edc <HAL_GetTick>
 8000da4:	4603      	mov	r3, r0
 8000da6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000daa:	663b      	str	r3, [r7, #96]	@ 0x60
        while (displayRefreshing)
 8000dac:	e00d      	b.n	8000dca <ICNA3306_WriteCmdData+0x12a>
        {
            if (HAL_GetTick() >= timeout)
 8000dae:	f001 f895 	bl	8001edc <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d807      	bhi.n	8000dca <ICNA3306_WriteCmdData+0x12a>
            {
                HAL_DMA_Abort_IT(&handle_GPDMA1_Channel13);
 8000dba:	4810      	ldr	r0, [pc, #64]	@ (8000dfc <ICNA3306_WriteCmdData+0x15c>)
 8000dbc:	f001 fbc4 	bl	8002548 <HAL_DMA_Abort_IT>
                displayRefreshing = false;
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000df8 <ICNA3306_WriteCmdData+0x158>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
                return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e005      	b.n	8000dd6 <ICNA3306_WriteCmdData+0x136>
        while (displayRefreshing)
 8000dca:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <ICNA3306_WriteCmdData+0x158>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1ec      	bne.n	8000dae <ICNA3306_WriteCmdData+0x10e>
            }
        }
    }

    return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3768      	adds	r7, #104	@ 0x68
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20045afc 	.word	0x20045afc
 8000de4:	0802cb10 	.word	0x0802cb10
 8000de8:	0802cb24 	.word	0x0802cb24
 8000dec:	0802cb38 	.word	0x0802cb38
 8000df0:	0802cb4c 	.word	0x0802cb4c
 8000df4:	0802cb64 	.word	0x0802cb64
 8000df8:	2004591c 	.word	0x2004591c
 8000dfc:	20045a30 	.word	0x20045a30

08000e00 <ICNA3306_DrawBuffer>:

void ICNA3306_DrawBuffer(int16_t x_start, int16_t y_start, int16_t width, int16_t height, const uint8_t *buf, size_t len)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b087      	sub	sp, #28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4604      	mov	r4, r0
 8000e08:	4608      	mov	r0, r1
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4623      	mov	r3, r4
 8000e10:	80fb      	strh	r3, [r7, #6]
 8000e12:	4603      	mov	r3, r0
 8000e14:	80bb      	strh	r3, [r7, #4]
 8000e16:	460b      	mov	r3, r1
 8000e18:	807b      	strh	r3, [r7, #2]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	803b      	strh	r3, [r7, #0]
//    printf("Draw Buffer:\r\n");
//    printf("Size: %dx%d pixels\r\n", width, height);
//    printf("Data length: %d bytes\r\n", len);
    uint8_t params[5] = {0};
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	711a      	strb	r2, [r3, #4]
    int16_t x_end = x_start + width - 1;
 8000e28:	88fa      	ldrh	r2, [r7, #6]
 8000e2a:	887b      	ldrh	r3, [r7, #2]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	3b01      	subs	r3, #1
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	82fb      	strh	r3, [r7, #22]
    int16_t y_end = y_start + height - 1;
 8000e36:	88ba      	ldrh	r2, [r7, #4]
 8000e38:	883b      	ldrh	r3, [r7, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	82bb      	strh	r3, [r7, #20]

    // （0x2A）
    params[0] = x_start >> 8;
 8000e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e48:	121b      	asrs	r3, r3, #8
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	733b      	strb	r3, [r7, #12]
    params[1] = x_start & 0xFF;
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	737b      	strb	r3, [r7, #13]
    params[2] = x_end >> 8;
 8000e56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e5a:	121b      	asrs	r3, r3, #8
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	73bb      	strb	r3, [r7, #14]
    params[3] = x_end & 0xFF;
 8000e62:	8afb      	ldrh	r3, [r7, #22]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	73fb      	strb	r3, [r7, #15]
    ICNA3306_WriteCmdParam(CMD_COL_SET, 4, params);
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	2104      	movs	r1, #4
 8000e70:	202a      	movs	r0, #42	@ 0x2a
 8000e72:	f7ff fec1 	bl	8000bf8 <ICNA3306_WriteCmdParam>

    // （0x2B）
    params[0] = y_start >> 8;
 8000e76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e7a:	121b      	asrs	r3, r3, #8
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	733b      	strb	r3, [r7, #12]
    params[1] = y_start & 0xFF;
 8000e82:	88bb      	ldrh	r3, [r7, #4]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	737b      	strb	r3, [r7, #13]
    params[2] = y_end >> 8;
 8000e88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e8c:	121b      	asrs	r3, r3, #8
 8000e8e:	b21b      	sxth	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	73bb      	strb	r3, [r7, #14]
    params[3] = y_end & 0xFF;
 8000e94:	8abb      	ldrh	r3, [r7, #20]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	73fb      	strb	r3, [r7, #15]
    ICNA3306_WriteCmdParam(CMD_ROW_SET, 4, params);
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	2104      	movs	r1, #4
 8000ea2:	202b      	movs	r0, #43	@ 0x2b
 8000ea4:	f7ff fea8 	bl	8000bf8 <ICNA3306_WriteCmdParam>

    // （0x2C）
    ICNA3306_WriteCmdData(CMD_START_WRITE, len, buf);
 8000ea8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000eaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000eac:	202c      	movs	r0, #44	@ 0x2c
 8000eae:	f7ff fef7 	bl	8000ca0 <ICNA3306_WriteCmdData>
}
 8000eb2:	bf00      	nop
 8000eb4:	371c      	adds	r7, #28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd90      	pop	{r4, r7, pc}
	...

08000ebc <ICNA3306_Init>:

void ICNA3306_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
    uint8_t parameter[14];
    memset(parameter, 0, sizeof(parameter));
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	220e      	movs	r2, #14
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f02b f881 	bl	802bfd0 <memset>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2104      	movs	r1, #4
 8000ed2:	4838      	ldr	r0, [pc, #224]	@ (8000fb4 <ICNA3306_Init+0xf8>)
 8000ed4:	f003 f934 	bl	8004140 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000ed8:	2064      	movs	r0, #100	@ 0x64
 8000eda:	f001 f80b 	bl	8001ef4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	4834      	ldr	r0, [pc, #208]	@ (8000fb4 <ICNA3306_Init+0xf8>)
 8000ee4:	f003 f92c 	bl	8004140 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000ee8:	2064      	movs	r0, #100	@ 0x64
 8000eea:	f001 f803 	bl	8001ef4 <HAL_Delay>

    GPDMA_Callback();
 8000eee:	f7ff fcd5 	bl	800089c <GPDMA_Callback>

    printf("OSPI DR Addr @ %p\r\n", &(hospi1.Instance->DR));
 8000ef2:	4b31      	ldr	r3, [pc, #196]	@ (8000fb8 <ICNA3306_Init+0xfc>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	3350      	adds	r3, #80	@ 0x50
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4830      	ldr	r0, [pc, #192]	@ (8000fbc <ICNA3306_Init+0x100>)
 8000efc:	f02a ff20 	bl	802bd40 <iprintf>
    printf("GPDMA1_Channel13 Instance @ 0x%08lX\r\n", (uint32_t)handle_GPDMA1_Channel13.Instance);
 8000f00:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc0 <ICNA3306_Init+0x104>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	482f      	ldr	r0, [pc, #188]	@ (8000fc4 <ICNA3306_Init+0x108>)
 8000f08:	f02a ff1a 	bl	802bd40 <iprintf>

    ICNA3306_WriteCmdParam(CMD_RST, 0, NULL);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2001      	movs	r0, #1
 8000f12:	f7ff fe71 	bl	8000bf8 <ICNA3306_WriteCmdParam>
    HAL_Delay(150);
 8000f16:	2096      	movs	r0, #150	@ 0x96
 8000f18:	f000 ffec 	bl	8001ef4 <HAL_Delay>

    ICNA3306_WriteCmdParam(CMD_SLEEP_OUT, 0, NULL);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2011      	movs	r0, #17
 8000f22:	f7ff fe69 	bl	8000bf8 <ICNA3306_WriteCmdParam>
    HAL_Delay(120);
 8000f26:	2078      	movs	r0, #120	@ 0x78
 8000f28:	f000 ffe4 	bl	8001ef4 <HAL_Delay>

    parameter[0] = 0x00;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0xFE, 1, parameter);
 8000f30:	463b      	mov	r3, r7
 8000f32:	461a      	mov	r2, r3
 8000f34:	2101      	movs	r1, #1
 8000f36:	20fe      	movs	r0, #254	@ 0xfe
 8000f38:	f7ff fe5e 	bl	8000bf8 <ICNA3306_WriteCmdParam>

    parameter[0] = 0x80;
 8000f3c:	2380      	movs	r3, #128	@ 0x80
 8000f3e:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0xC4, 1, parameter);
 8000f40:	463b      	mov	r3, r7
 8000f42:	461a      	mov	r2, r3
 8000f44:	2101      	movs	r1, #1
 8000f46:	20c4      	movs	r0, #196	@ 0xc4
 8000f48:	f7ff fe56 	bl	8000bf8 <ICNA3306_WriteCmdParam>

    //  TearEffect
    parameter[0] = 0x00;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x35, 1, parameter);
 8000f50:	463b      	mov	r3, r7
 8000f52:	461a      	mov	r2, r3
 8000f54:	2101      	movs	r1, #1
 8000f56:	2035      	movs	r0, #53	@ 0x35
 8000f58:	f7ff fe4e 	bl	8000bf8 <ICNA3306_WriteCmdParam>

    parameter[0] = 0x55;
 8000f5c:	2355      	movs	r3, #85	@ 0x55
 8000f5e:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x3A, 1, parameter);
 8000f60:	463b      	mov	r3, r7
 8000f62:	461a      	mov	r2, r3
 8000f64:	2101      	movs	r1, #1
 8000f66:	203a      	movs	r0, #58	@ 0x3a
 8000f68:	f7ff fe46 	bl	8000bf8 <ICNA3306_WriteCmdParam>

    // (Memory Data Access Control)
    // parameter[0] = 0x00; // RGB
    // ICNA3306_WriteCmdParam(0x36, 1, parameter);

    parameter[0] = 0x20;
 8000f6c:	2320      	movs	r3, #32
 8000f6e:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x53, 1, parameter);
 8000f70:	463b      	mov	r3, r7
 8000f72:	461a      	mov	r2, r3
 8000f74:	2101      	movs	r1, #1
 8000f76:	2053      	movs	r0, #83	@ 0x53
 8000f78:	f7ff fe3e 	bl	8000bf8 <ICNA3306_WriteCmdParam>

    parameter[0] = 0xFF;
 8000f7c:	23ff      	movs	r3, #255	@ 0xff
 8000f7e:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x51, 1, parameter);
 8000f80:	463b      	mov	r3, r7
 8000f82:	461a      	mov	r2, r3
 8000f84:	2101      	movs	r1, #1
 8000f86:	2051      	movs	r0, #81	@ 0x51
 8000f88:	f7ff fe36 	bl	8000bf8 <ICNA3306_WriteCmdParam>

    parameter[0] = 0xFF;
 8000f8c:	23ff      	movs	r3, #255	@ 0xff
 8000f8e:	703b      	strb	r3, [r7, #0]
    ICNA3306_WriteCmdParam(0x63, 1, parameter);
 8000f90:	463b      	mov	r3, r7
 8000f92:	461a      	mov	r2, r3
 8000f94:	2101      	movs	r1, #1
 8000f96:	2063      	movs	r0, #99	@ 0x63
 8000f98:	f7ff fe2e 	bl	8000bf8 <ICNA3306_WriteCmdParam>

    ICNA3306_WriteCmdParam(CMD_DISPLAY_ON, 0, NULL);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2029      	movs	r0, #41	@ 0x29
 8000fa2:	f7ff fe29 	bl	8000bf8 <ICNA3306_WriteCmdParam>
    HAL_Delay(120);
 8000fa6:	2078      	movs	r0, #120	@ 0x78
 8000fa8:	f000 ffa4 	bl	8001ef4 <HAL_Delay>
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	42020400 	.word	0x42020400
 8000fb8:	20045afc 	.word	0x20045afc
 8000fbc:	0802cb7c 	.word	0x0802cb7c
 8000fc0:	20045a30 	.word	0x20045a30
 8000fc4:	0802cb90 	.word	0x0802cb90

08000fc8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fcc:	4a08      	ldr	r2, [pc, #32]	@ (8000ff0 <MX_FREERTOS_Init+0x28>)
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4808      	ldr	r0, [pc, #32]	@ (8000ff4 <MX_FREERTOS_Init+0x2c>)
 8000fd2:	f00a fdcd 	bl	800bb70 <osThreadNew>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a07      	ldr	r2, [pc, #28]	@ (8000ff8 <MX_FREERTOS_Init+0x30>)
 8000fda:	6013      	str	r3, [r2, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_GUI, NULL, &GUI_Task_attributes);
 8000fdc:	4a07      	ldr	r2, [pc, #28]	@ (8000ffc <MX_FREERTOS_Init+0x34>)
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4807      	ldr	r0, [pc, #28]	@ (8001000 <MX_FREERTOS_Init+0x38>)
 8000fe2:	f00a fdc5 	bl	800bb70 <osThreadNew>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a06      	ldr	r2, [pc, #24]	@ (8001004 <MX_FREERTOS_Init+0x3c>)
 8000fea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	0802d7f4 	.word	0x0802d7f4
 8000ff4:	08001009 	.word	0x08001009
 8000ff8:	200459a4 	.word	0x200459a4
 8000ffc:	0802d818 	.word	0x0802d818
 8001000:	08001019 	.word	0x08001019
 8001004:	200459a8 	.word	0x200459a8

08001008 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
    //I2C_Scan(&hi2c3);
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001010:	2001      	movs	r0, #1
 8001012:	f00a fe3f 	bl	800bc94 <osDelay>
 8001016:	e7fb      	b.n	8001010 <StartDefaultTask+0x8>

08001018 <TouchGFX_GUI>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void TouchGFX_GUI(void *argument)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN defaultTask */
    MX_TouchGFX_Process();
 8001020:	f00e f8ff 	bl	800f222 <MX_TouchGFX_Process>

    /* Infinite loop */
    for(;;)
    {
        osDelay(1);
 8001024:	2001      	movs	r0, #1
 8001026:	f00a fe35 	bl	800bc94 <osDelay>
 800102a:	e7fb      	b.n	8001024 <TouchGFX_GUI+0xc>

0800102c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001030:	4b0d      	ldr	r3, [pc, #52]	@ (8001068 <MX_CRC_Init+0x3c>)
 8001032:	4a0e      	ldr	r2, [pc, #56]	@ (800106c <MX_CRC_Init+0x40>)
 8001034:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001036:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <MX_CRC_Init+0x3c>)
 8001038:	2200      	movs	r2, #0
 800103a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800103c:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <MX_CRC_Init+0x3c>)
 800103e:	2200      	movs	r2, #0
 8001040:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <MX_CRC_Init+0x3c>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001048:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <MX_CRC_Init+0x3c>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <MX_CRC_Init+0x3c>)
 8001050:	2201      	movs	r2, #1
 8001052:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	@ (8001068 <MX_CRC_Init+0x3c>)
 8001056:	f001 f8a9 	bl	80021ac <HAL_CRC_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001060:	f000 faae 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200459ac 	.word	0x200459ac
 800106c:	40023000 	.word	0x40023000

08001070 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0b      	ldr	r2, [pc, #44]	@ (80010ac <HAL_CRC_MspInit+0x3c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d10e      	bne.n	80010a0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001082:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <HAL_CRC_MspInit+0x40>)
 8001084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001088:	4a09      	ldr	r2, [pc, #36]	@ (80010b0 <HAL_CRC_MspInit+0x40>)
 800108a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800108e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001092:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <HAL_CRC_MspInit+0x40>)
 8001094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001098:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	40023000 	.word	0x40023000
 80010b0:	46020c00 	.word	0x46020c00

080010b4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <MX_DMA2D_Init+0x74>)
 80010ba:	4a1c      	ldr	r2, [pc, #112]	@ (800112c <MX_DMA2D_Init+0x78>)
 80010bc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80010be:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <MX_DMA2D_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80010c4:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <MX_DMA2D_Init+0x74>)
 80010c6:	2202      	movs	r2, #2
 80010c8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80010ca:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <MX_DMA2D_Init+0x74>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 80010d0:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <MX_DMA2D_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 80010d6:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <MX_DMA2D_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <MX_DMA2D_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80010e2:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <MX_DMA2D_Init+0x74>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <MX_DMA2D_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <MX_DMA2D_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <MX_DMA2D_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <MX_DMA2D_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	655a      	str	r2, [r3, #84]	@ 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001100:	4809      	ldr	r0, [pc, #36]	@ (8001128 <MX_DMA2D_Init+0x74>)
 8001102:	f001 fc50 	bl	80029a6 <HAL_DMA2D_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 800110c:	f000 fa58 	bl	80015c0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001110:	2101      	movs	r1, #1
 8001112:	4805      	ldr	r0, [pc, #20]	@ (8001128 <MX_DMA2D_Init+0x74>)
 8001114:	f001 fdb8 	bl	8002c88 <HAL_DMA2D_ConfigLayer>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 800111e:	f000 fa4f 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200459d0 	.word	0x200459d0
 800112c:	4002b000 	.word	0x4002b000

08001130 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0e      	ldr	r2, [pc, #56]	@ (8001178 <HAL_DMA2D_MspInit+0x48>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d116      	bne.n	8001170 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <HAL_DMA2D_MspInit+0x4c>)
 8001144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001148:	4a0c      	ldr	r2, [pc, #48]	@ (800117c <HAL_DMA2D_MspInit+0x4c>)
 800114a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800114e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001152:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <HAL_DMA2D_MspInit+0x4c>)
 8001154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001158:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2105      	movs	r1, #5
 8001164:	2076      	movs	r0, #118	@ 0x76
 8001166:	f000 ffa1 	bl	80020ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800116a:	2076      	movs	r0, #118	@ 0x76
 800116c:	f000 ffb8 	bl	80020e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	4002b000 	.word	0x4002b000
 800117c:	46020c00 	.word	0x46020c00

08001180 <MX_GPDMA1_Init>:

DMA_HandleTypeDef handle_GPDMA1_Channel13;

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001186:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <MX_GPDMA1_Init+0x84>)
 8001188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800118c:	4a1d      	ldr	r2, [pc, #116]	@ (8001204 <MX_GPDMA1_Init+0x84>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001196:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <MX_GPDMA1_Init+0x84>)
 8001198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel13_IRQn, 5, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2105      	movs	r1, #5
 80011a8:	2055      	movs	r0, #85	@ 0x55
 80011aa:	f000 ff7f 	bl	80020ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel13_IRQn);
 80011ae:	2055      	movs	r0, #85	@ 0x55
 80011b0:	f000 ff96 	bl	80020e0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel13.Instance = GPDMA1_Channel13;
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <MX_GPDMA1_Init+0x88>)
 80011b6:	4a15      	ldr	r2, [pc, #84]	@ (800120c <MX_GPDMA1_Init+0x8c>)
 80011b8:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel13.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <MX_GPDMA1_Init+0x88>)
 80011bc:	2200      	movs	r2, #0
 80011be:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel13.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80011c0:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <MX_GPDMA1_Init+0x88>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel13.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80011c6:	4b10      	ldr	r3, [pc, #64]	@ (8001208 <MX_GPDMA1_Init+0x88>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel13.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 80011cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <MX_GPDMA1_Init+0x88>)
 80011ce:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 80011d2:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel13.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_NORMAL;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <MX_GPDMA1_Init+0x88>)
 80011d6:	2280      	movs	r2, #128	@ 0x80
 80011d8:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel13) != HAL_OK)
 80011da:	480b      	ldr	r0, [pc, #44]	@ (8001208 <MX_GPDMA1_Init+0x88>)
 80011dc:	f001 fdf2 	bl	8002dc4 <HAL_DMAEx_List_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_GPDMA1_Init+0x6a>
  {
    Error_Handler();
 80011e6:	f000 f9eb 	bl	80015c0 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel13, DMA_CHANNEL_NPRIV) != HAL_OK)
 80011ea:	2110      	movs	r1, #16
 80011ec:	4806      	ldr	r0, [pc, #24]	@ (8001208 <MX_GPDMA1_Init+0x88>)
 80011ee:	f001 fb79 	bl	80028e4 <HAL_DMA_ConfigChannelAttributes>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_GPDMA1_Init+0x7c>
  {
    Error_Handler();
 80011f8:	f000 f9e2 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	46020c00 	.word	0x46020c00
 8001208:	20045a30 	.word	0x20045a30
 800120c:	400206d0 	.word	0x400206d0

08001210 <MX_GPIO_Init>:
     PC15-OSC32_OUT (PC15)   ------> RCC_OSC32_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	4b34      	ldr	r3, [pc, #208]	@ (80012f8 <MX_GPIO_Init+0xe8>)
 8001228:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800122c:	4a32      	ldr	r2, [pc, #200]	@ (80012f8 <MX_GPIO_Init+0xe8>)
 800122e:	f043 0304 	orr.w	r3, r3, #4
 8001232:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001236:	4b30      	ldr	r3, [pc, #192]	@ (80012f8 <MX_GPIO_Init+0xe8>)
 8001238:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	4b2c      	ldr	r3, [pc, #176]	@ (80012f8 <MX_GPIO_Init+0xe8>)
 8001246:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800124a:	4a2b      	ldr	r2, [pc, #172]	@ (80012f8 <MX_GPIO_Init+0xe8>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001254:	4b28      	ldr	r3, [pc, #160]	@ (80012f8 <MX_GPIO_Init+0xe8>)
 8001256:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	4b25      	ldr	r3, [pc, #148]	@ (80012f8 <MX_GPIO_Init+0xe8>)
 8001264:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001268:	4a23      	ldr	r2, [pc, #140]	@ (80012f8 <MX_GPIO_Init+0xe8>)
 800126a:	f043 0302 	orr.w	r3, r3, #2
 800126e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001272:	4b21      	ldr	r3, [pc, #132]	@ (80012f8 <MX_GPIO_Init+0xe8>)
 8001274:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin : PA2 */
    GPIO_InitStruct.Pin = GPIO_PIN_2; // TE
 8001280:	2304      	movs	r3, #4
 8001282:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001284:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <MX_GPIO_Init+0xec>)
 8001286:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	4619      	mov	r1, r3
 8001292:	481b      	ldr	r0, [pc, #108]	@ (8001300 <MX_GPIO_Init+0xf0>)
 8001294:	f002 fd64 	bl	8003d60 <HAL_GPIO_Init>

    /*Configure GPIO pin : PC5 */
    GPIO_InitStruct.Pin = GPIO_PIN_5;           // CTP_RST
 8001298:	2320      	movs	r3, #32
 800129a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	4815      	ldr	r0, [pc, #84]	@ (8001304 <MX_GPIO_Init+0xf4>)
 80012b0:	f002 fd56 	bl	8003d60 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB2  */
    GPIO_InitStruct.Pin = GPIO_PIN_2; // LCD_RST
 80012b4:	2304      	movs	r3, #4
 80012b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012bc:	2301      	movs	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	480f      	ldr	r0, [pc, #60]	@ (8001308 <MX_GPIO_Init+0xf8>)
 80012cc:	f002 fd48 	bl	8003d60 <HAL_GPIO_Init>

    /*Configure GPIO pin :  PB10 */
    GPIO_InitStruct.Pin = GPIO_PIN_10; // CTP_INT
 80012d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d6:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <MX_GPIO_Init+0xfc>)
 80012d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012da:	2301      	movs	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	4619      	mov	r1, r3
 80012e8:	4807      	ldr	r0, [pc, #28]	@ (8001308 <MX_GPIO_Init+0xf8>)
 80012ea:	f002 fd39 	bl	8003d60 <HAL_GPIO_Init>
}
 80012ee:	bf00      	nop
 80012f0:	3720      	adds	r7, #32
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	46020c00 	.word	0x46020c00
 80012fc:	10110000 	.word	0x10110000
 8001300:	42020000 	.word	0x42020000
 8001304:	42020800 	.word	0x42020800
 8001308:	42020400 	.word	0x42020400
 800130c:	10210000 	.word	0x10210000

08001310 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001314:	4b1b      	ldr	r3, [pc, #108]	@ (8001384 <MX_I2C3_Init+0x74>)
 8001316:	4a1c      	ldr	r2, [pc, #112]	@ (8001388 <MX_I2C3_Init+0x78>)
 8001318:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x30909DEC;
 800131a:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <MX_I2C3_Init+0x74>)
 800131c:	4a1b      	ldr	r2, [pc, #108]	@ (800138c <MX_I2C3_Init+0x7c>)
 800131e:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8001320:	4b18      	ldr	r3, [pc, #96]	@ (8001384 <MX_I2C3_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001326:	4b17      	ldr	r3, [pc, #92]	@ (8001384 <MX_I2C3_Init+0x74>)
 8001328:	2201      	movs	r2, #1
 800132a:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800132c:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <MX_I2C3_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8001332:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <MX_I2C3_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001338:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <MX_I2C3_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800133e:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <MX_I2C3_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001344:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <MX_I2C3_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800134a:	480e      	ldr	r0, [pc, #56]	@ (8001384 <MX_I2C3_Init+0x74>)
 800134c:	f002 ff10 	bl	8004170 <HAL_I2C_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001356:	f000 f933 	bl	80015c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800135a:	2100      	movs	r1, #0
 800135c:	4809      	ldr	r0, [pc, #36]	@ (8001384 <MX_I2C3_Init+0x74>)
 800135e:	f003 fc93 	bl	8004c88 <HAL_I2CEx_ConfigAnalogFilter>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001368:	f000 f92a 	bl	80015c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800136c:	2100      	movs	r1, #0
 800136e:	4805      	ldr	r0, [pc, #20]	@ (8001384 <MX_I2C3_Init+0x74>)
 8001370:	f003 fcd5 	bl	8004d1e <HAL_I2CEx_ConfigDigitalFilter>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800137a:	f000 f921 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20045aa8 	.word	0x20045aa8
 8001388:	46002800 	.word	0x46002800
 800138c:	30909dec 	.word	0x30909dec

08001390 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b0ba      	sub	sp, #232	@ 0xe8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	22c0      	movs	r2, #192	@ 0xc0
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f02a fe0d 	bl	802bfd0 <memset>
  if(i2cHandle->Instance==I2C3)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a26      	ldr	r2, [pc, #152]	@ (8001454 <HAL_I2C_MspInit+0xc4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d145      	bne.n	800144c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80013c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	4618      	mov	r0, r3
 80013d8:	f006 fc2e 	bl	8007c38 <HAL_RCCEx_PeriphCLKConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80013e2:	f000 f8ed 	bl	80015c0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <HAL_I2C_MspInit+0xc8>)
 80013e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001458 <HAL_I2C_MspInit+0xc8>)
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013f6:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <HAL_I2C_MspInit+0xc8>)
 80013f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001404:	2303      	movs	r3, #3
 8001406:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140a:	2312      	movs	r3, #18
 800140c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800141c:	2304      	movs	r3, #4
 800141e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001426:	4619      	mov	r1, r3
 8001428:	480c      	ldr	r0, [pc, #48]	@ (800145c <HAL_I2C_MspInit+0xcc>)
 800142a:	f002 fc99 	bl	8003d60 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800142e:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <HAL_I2C_MspInit+0xc8>)
 8001430:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001434:	4a08      	ldr	r2, [pc, #32]	@ (8001458 <HAL_I2C_MspInit+0xc8>)
 8001436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800143a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_I2C_MspInit+0xc8>)
 8001440:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800144c:	bf00      	nop
 800144e:	37e8      	adds	r7, #232	@ 0xe8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	46002800 	.word	0x46002800
 8001458:	46020c00 	.word	0x46020c00
 800145c:	42020800 	.word	0x42020800

08001460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001464:	f000 fcf6 	bl	8001e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001468:	f000 f822 	bl	80014b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800146c:	f7ff fed0 	bl	8001210 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001470:	f7ff fe86 	bl	8001180 <MX_GPDMA1_Init>
  //MX_DCACHE1_Init();
  MX_DMA2D_Init();
 8001474:	f7ff fe1e 	bl	80010b4 <MX_DMA2D_Init>
  //MX_ICACHE_Init();
  MX_TIM6_Init();
 8001478:	f000 fbb0 	bl	8001bdc <MX_TIM6_Init>
  MX_USART1_UART_Init();
 800147c:	f000 fc0c 	bl	8001c98 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8001480:	f7ff fdd4 	bl	800102c <MX_CRC_Init>
  MX_I2C3_Init();
 8001484:	f7ff ff44 	bl	8001310 <MX_I2C3_Init>
  MX_OCTOSPI1_Init();
 8001488:	f000 f8a0 	bl	80015cc <MX_OCTOSPI1_Init>
  MX_TouchGFX_Init();
 800148c:	f00d fec1 	bl	800f212 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8001490:	f00d feb8 	bl	800f204 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim6);
 8001494:	4805      	ldr	r0, [pc, #20]	@ (80014ac <main+0x4c>)
 8001496:	f009 f8bf 	bl	800a618 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800149a:	f00a fb19 	bl	800bad0 <osKernelInitialize>

  /* Call init function for freertos objects (in app_freertos.c) */
  MX_FREERTOS_Init();
 800149e:	f7ff fd93 	bl	8000fc8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80014a2:	f00a fb3b 	bl	800bb1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 80014a6:	bf00      	nop
 80014a8:	e7fd      	b.n	80014a6 <main+0x46>
 80014aa:	bf00      	nop
 80014ac:	20045ba8 	.word	0x20045ba8

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b09e      	sub	sp, #120	@ 0x78
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0318 	add.w	r3, r7, #24
 80014ba:	2260      	movs	r2, #96	@ 0x60
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f02a fd86 	bl	802bfd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	463b      	mov	r3, r7
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]
 80014d2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014d4:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80014d8:	f005 f83e 	bl	8006558 <HAL_PWREx_ControlVoltageScaling>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80014e2:	f000 f86d 	bl	80015c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014e6:	2310      	movs	r3, #16
 80014e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014ea:	2301      	movs	r3, #1
 80014ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80014ee:	2310      	movs	r3, #16
 80014f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f6:	2302      	movs	r3, #2
 80014f8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014fa:	2301      	movs	r3, #1
 80014fc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80014fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001502:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001504:	2303      	movs	r3, #3
 8001506:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001508:	230a      	movs	r3, #10
 800150a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800150c:	2302      	movs	r3, #2
 800150e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001510:	2302      	movs	r3, #2
 8001512:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001514:	2301      	movs	r3, #1
 8001516:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001518:	230c      	movs	r3, #12
 800151a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001520:	f107 0318 	add.w	r3, r7, #24
 8001524:	4618      	mov	r0, r3
 8001526:	f005 f8a3 	bl	8006670 <HAL_RCC_OscConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001530:	f000 f846 	bl	80015c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001534:	231f      	movs	r3, #31
 8001536:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001538:	2303      	movs	r3, #3
 800153a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800154c:	463b      	mov	r3, r7
 800154e:	2104      	movs	r1, #4
 8001550:	4618      	mov	r0, r3
 8001552:	f005 ff69 	bl	8007428 <HAL_RCC_ClockConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800155c:	f000 f830 	bl	80015c0 <Error_Handler>
  }
}
 8001560:	bf00      	nop
 8001562:	3778      	adds	r7, #120	@ 0x78
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0x200);
 8001570:	1d39      	adds	r1, r7, #4
 8001572:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001576:	2201      	movs	r2, #1
 8001578:	4803      	ldr	r0, [pc, #12]	@ (8001588 <__io_putchar+0x20>)
 800157a:	f009 fcbd 	bl	800aef8 <HAL_UART_Transmit>
    return ch;
 800157e:	687b      	ldr	r3, [r7, #4]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20045bf4 	.word	0x20045bf4

0800158c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a07      	ldr	r2, [pc, #28]	@ (80015b8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800159e:	f000 fc89 	bl	8001eb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
    if (htim->Instance == TIM6)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a05      	ldr	r2, [pc, #20]	@ (80015bc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d101      	bne.n	80015b0 <HAL_TIM_PeriodElapsedCallback+0x24>
    {
        touchgfx_tim_vsync();
 80015ac:	f010 faab 	bl	8011b06 <touchgfx_tim_vsync>
    }
  /* USER CODE END Callback 1 */
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40001400 	.word	0x40001400
 80015bc:	40001000 	.word	0x40001000

080015c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c4:	b672      	cpsid	i
}
 80015c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <Error_Handler+0x8>

080015cc <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80015d2:	f107 0308 	add.w	r3, r7, #8
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]
 80015e2:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 80015e4:	463b      	mov	r3, r7
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 80015ec:	4b2e      	ldr	r3, [pc, #184]	@ (80016a8 <MX_OCTOSPI1_Init+0xdc>)
 80015ee:	4a2f      	ldr	r2, [pc, #188]	@ (80016ac <MX_OCTOSPI1_Init+0xe0>)
 80015f0:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 8;
 80015f2:	4b2d      	ldr	r3, [pc, #180]	@ (80016a8 <MX_OCTOSPI1_Init+0xdc>)
 80015f4:	2208      	movs	r2, #8
 80015f6:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80015f8:	4b2b      	ldr	r3, [pc, #172]	@ (80016a8 <MX_OCTOSPI1_Init+0xdc>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80015fe:	4b2a      	ldr	r3, [pc, #168]	@ (80016a8 <MX_OCTOSPI1_Init+0xdc>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 22;
 8001604:	4b28      	ldr	r3, [pc, #160]	@ (80016a8 <MX_OCTOSPI1_Init+0xdc>)
 8001606:	2216      	movs	r2, #22
 8001608:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800160a:	4b27      	ldr	r3, [pc, #156]	@ (80016a8 <MX_OCTOSPI1_Init+0xdc>)
 800160c:	2201      	movs	r2, #1
 800160e:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001610:	4b25      	ldr	r3, [pc, #148]	@ (80016a8 <MX_OCTOSPI1_Init+0xdc>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001616:	4b24      	ldr	r3, [pc, #144]	@ (80016a8 <MX_OCTOSPI1_Init+0xdc>)
 8001618:	2200      	movs	r2, #0
 800161a:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800161c:	4b22      	ldr	r3, [pc, #136]	@ (80016a8 <MX_OCTOSPI1_Init+0xdc>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 5;
 8001622:	4b21      	ldr	r3, [pc, #132]	@ (80016a8 <MX_OCTOSPI1_Init+0xdc>)
 8001624:	2205      	movs	r2, #5
 8001626:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001628:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <MX_OCTOSPI1_Init+0xdc>)
 800162a:	2200      	movs	r2, #0
 800162c:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800162e:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <MX_OCTOSPI1_Init+0xdc>)
 8001630:	2200      	movs	r2, #0
 8001632:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001634:	4b1c      	ldr	r3, [pc, #112]	@ (80016a8 <MX_OCTOSPI1_Init+0xdc>)
 8001636:	2200      	movs	r2, #0
 8001638:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800163a:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <MX_OCTOSPI1_Init+0xdc>)
 800163c:	2208      	movs	r2, #8
 800163e:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8001640:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <MX_OCTOSPI1_Init+0xdc>)
 8001642:	2200      	movs	r2, #0
 8001644:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8001646:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <MX_OCTOSPI1_Init+0xdc>)
 8001648:	2200      	movs	r2, #0
 800164a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800164c:	4816      	ldr	r0, [pc, #88]	@ (80016a8 <MX_OCTOSPI1_Init+0xdc>)
 800164e:	f003 fbc3 	bl	8004dd8 <HAL_OSPI_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_OCTOSPI1_Init+0x90>
  {
    Error_Handler();
 8001658:	f7ff ffb2 	bl	80015c0 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 800165c:	2301      	movs	r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.NCSPort = 1;
 8001660:	2301      	movs	r3, #1
 8001662:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001664:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001668:	617b      	str	r3, [r7, #20]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001672:	4619      	mov	r1, r3
 8001674:	480c      	ldr	r0, [pc, #48]	@ (80016a8 <MX_OCTOSPI1_Init+0xdc>)
 8001676:	f003 ff81 	bl	800557c <HAL_OSPIM_Config>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_OCTOSPI1_Init+0xb8>
  {
    Error_Handler();
 8001680:	f7ff ff9e 	bl	80015c0 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <MX_OCTOSPI1_Init+0xdc>)
 8001692:	f004 ff19 	bl	80064c8 <HAL_OSPI_DLYB_SetConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_OCTOSPI1_Init+0xd4>
  {
    Error_Handler();
 800169c:	f7ff ff90 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20045afc 	.word	0x20045afc
 80016ac:	420d1400 	.word	0x420d1400

080016b0 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b0bc      	sub	sp, #240	@ 0xf0
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c8:	f107 0318 	add.w	r3, r7, #24
 80016cc:	22c0      	movs	r2, #192	@ 0xc0
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f02a fc7d 	bl	802bfd0 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a4f      	ldr	r2, [pc, #316]	@ (8001818 <HAL_OSPI_MspInit+0x168>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	f040 8096 	bne.w	800180e <HAL_OSPI_MspInit+0x15e>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80016e2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016e6:	f04f 0300 	mov.w	r3, #0
 80016ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f4:	f107 0318 	add.w	r3, r7, #24
 80016f8:	4618      	mov	r0, r3
 80016fa:	f006 fa9d 	bl	8007c38 <HAL_RCCEx_PeriphCLKConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <HAL_OSPI_MspInit+0x58>
    {
      Error_Handler();
 8001704:	f7ff ff5c 	bl	80015c0 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001708:	4b44      	ldr	r3, [pc, #272]	@ (800181c <HAL_OSPI_MspInit+0x16c>)
 800170a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800170e:	4a43      	ldr	r2, [pc, #268]	@ (800181c <HAL_OSPI_MspInit+0x16c>)
 8001710:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001714:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001718:	4b40      	ldr	r3, [pc, #256]	@ (800181c <HAL_OSPI_MspInit+0x16c>)
 800171a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800171e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001726:	4b3d      	ldr	r3, [pc, #244]	@ (800181c <HAL_OSPI_MspInit+0x16c>)
 8001728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800172c:	4a3b      	ldr	r2, [pc, #236]	@ (800181c <HAL_OSPI_MspInit+0x16c>)
 800172e:	f043 0310 	orr.w	r3, r3, #16
 8001732:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001736:	4b39      	ldr	r3, [pc, #228]	@ (800181c <HAL_OSPI_MspInit+0x16c>)
 8001738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173c:	f003 0310 	and.w	r3, r3, #16
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b35      	ldr	r3, [pc, #212]	@ (800181c <HAL_OSPI_MspInit+0x16c>)
 8001746:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800174a:	4a34      	ldr	r2, [pc, #208]	@ (800181c <HAL_OSPI_MspInit+0x16c>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001754:	4b31      	ldr	r3, [pc, #196]	@ (800181c <HAL_OSPI_MspInit+0x16c>)
 8001756:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	4b2e      	ldr	r3, [pc, #184]	@ (800181c <HAL_OSPI_MspInit+0x16c>)
 8001764:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001768:	4a2c      	ldr	r2, [pc, #176]	@ (800181c <HAL_OSPI_MspInit+0x16c>)
 800176a:	f043 0302 	orr.w	r3, r3, #2
 800176e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001772:	4b2a      	ldr	r3, [pc, #168]	@ (800181c <HAL_OSPI_MspInit+0x16c>)
 8001774:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> OCTOSPIM_P1_IO3
    PA7     ------> OCTOSPIM_P1_IO2
    PB0     ------> OCTOSPIM_P1_IO1
    PB1     ------> OCTOSPIM_P1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 8001780:	23c8      	movs	r3, #200	@ 0xc8
 8001782:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001798:	230a      	movs	r3, #10
 800179a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017a2:	4619      	mov	r1, r3
 80017a4:	481e      	ldr	r0, [pc, #120]	@ (8001820 <HAL_OSPI_MspInit+0x170>)
 80017a6:	f002 fadb 	bl	8003d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017aa:	2310      	movs	r3, #16
 80017ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80017c2:	2303      	movs	r3, #3
 80017c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017cc:	4619      	mov	r1, r3
 80017ce:	4814      	ldr	r0, [pc, #80]	@ (8001820 <HAL_OSPI_MspInit+0x170>)
 80017d0:	f002 fac6 	bl	8003d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017d4:	2303      	movs	r3, #3
 80017d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80017ec:	230a      	movs	r3, #10
 80017ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017f6:	4619      	mov	r1, r3
 80017f8:	480a      	ldr	r0, [pc, #40]	@ (8001824 <HAL_OSPI_MspInit+0x174>)
 80017fa:	f002 fab1 	bl	8003d60 <HAL_GPIO_Init>

    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2105      	movs	r1, #5
 8001802:	204c      	movs	r0, #76	@ 0x4c
 8001804:	f000 fc52 	bl	80020ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8001808:	204c      	movs	r0, #76	@ 0x4c
 800180a:	f000 fc69 	bl	80020e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 800180e:	bf00      	nop
 8001810:	37f0      	adds	r7, #240	@ 0xf0
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	420d1400 	.word	0x420d1400
 800181c:	46020c00 	.word	0x46020c00
 8001820:	42020000 	.word	0x42020000
 8001824:	42020400 	.word	0x42020400

08001828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <HAL_MspInit+0x38>)
 8001830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001834:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <HAL_MspInit+0x38>)
 8001836:	f043 0304 	orr.w	r3, r3, #4
 800183a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800183e:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <HAL_MspInit+0x38>)
 8001840:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	210f      	movs	r1, #15
 8001850:	f06f 0001 	mvn.w	r0, #1
 8001854:	f000 fc2a 	bl	80020ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	46020c00 	.word	0x46020c00

08001864 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08e      	sub	sp, #56	@ 0x38
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001874:	4b2e      	ldr	r3, [pc, #184]	@ (8001930 <HAL_InitTick+0xcc>)
 8001876:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800187a:	4a2d      	ldr	r2, [pc, #180]	@ (8001930 <HAL_InitTick+0xcc>)
 800187c:	f043 0320 	orr.w	r3, r3, #32
 8001880:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001884:	4b2a      	ldr	r3, [pc, #168]	@ (8001930 <HAL_InitTick+0xcc>)
 8001886:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800188a:	f003 0320 	and.w	r3, r3, #32
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001892:	f107 0210 	add.w	r2, r7, #16
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f006 f90d 	bl	8007abc <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018a2:	f006 f8cf 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 80018a6:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018aa:	4a22      	ldr	r2, [pc, #136]	@ (8001934 <HAL_InitTick+0xd0>)
 80018ac:	fba2 2303 	umull	r2, r3, r2, r3
 80018b0:	0c9b      	lsrs	r3, r3, #18
 80018b2:	3b01      	subs	r3, #1
 80018b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80018b6:	4b20      	ldr	r3, [pc, #128]	@ (8001938 <HAL_InitTick+0xd4>)
 80018b8:	4a20      	ldr	r2, [pc, #128]	@ (800193c <HAL_InitTick+0xd8>)
 80018ba:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80018bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001938 <HAL_InitTick+0xd4>)
 80018be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018c2:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80018c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001938 <HAL_InitTick+0xd4>)
 80018c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c8:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80018ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <HAL_InitTick+0xd4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d0:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <HAL_InitTick+0xd4>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 80018d6:	4818      	ldr	r0, [pc, #96]	@ (8001938 <HAL_InitTick+0xd4>)
 80018d8:	f008 fe46 	bl	800a568 <HAL_TIM_Base_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 80018e2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d118      	bne.n	800191c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80018ea:	4813      	ldr	r0, [pc, #76]	@ (8001938 <HAL_InitTick+0xd4>)
 80018ec:	f008 fe94 	bl	800a618 <HAL_TIM_Base_Start_IT>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80018f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10e      	bne.n	800191c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b0f      	cmp	r3, #15
 8001902:	d808      	bhi.n	8001916 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM7 global Interrupt */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001904:	2200      	movs	r2, #0
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	2032      	movs	r0, #50	@ 0x32
 800190a:	f000 fbcf 	bl	80020ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800190e:	4a0c      	ldr	r2, [pc, #48]	@ (8001940 <HAL_InitTick+0xdc>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	e002      	b.n	800191c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800191c:	2032      	movs	r0, #50	@ 0x32
 800191e:	f000 fbdf 	bl	80020e0 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001922:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001926:	4618      	mov	r0, r3
 8001928:	3738      	adds	r7, #56	@ 0x38
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	46020c00 	.word	0x46020c00
 8001934:	431bde83 	.word	0x431bde83
 8001938:	20045b58 	.word	0x20045b58
 800193c:	40001400 	.word	0x40001400
 8001940:	20000008 	.word	0x20000008

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <NMI_Handler+0x4>

0800194c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <HardFault_Handler+0x4>

08001954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <MemManage_Handler+0x4>

0800195c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <BusFault_Handler+0x4>

08001964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <UsageFault_Handler+0x4>

0800196c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001980:	4802      	ldr	r0, [pc, #8]	@ (800198c <TIM6_IRQHandler+0x10>)
 8001982:	f008 fee9 	bl	800a758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20045ba8 	.word	0x20045ba8

08001990 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001994:	4802      	ldr	r0, [pc, #8]	@ (80019a0 <TIM7_IRQHandler+0x10>)
 8001996:	f008 fedf 	bl	800a758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20045b58 	.word	0x20045b58

080019a4 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 80019a8:	4802      	ldr	r0, [pc, #8]	@ (80019b4 <OCTOSPI1_IRQHandler+0x10>)
 80019aa:	f003 fad1 	bl	8004f50 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20045afc 	.word	0x20045afc

080019b8 <GPDMA1_Channel13_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 13 global interrupt.
  */
void GPDMA1_Channel13_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 0 */

  /* USER CODE END GPDMA1_Channel13_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel13);
 80019bc:	4802      	ldr	r0, [pc, #8]	@ (80019c8 <GPDMA1_Channel13_IRQHandler+0x10>)
 80019be:	f000 fdec 	bl	800259a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 1 */

  /* USER CODE END GPDMA1_Channel13_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20045a30 	.word	0x20045a30

080019cc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80019d0:	4802      	ldr	r0, [pc, #8]	@ (80019dc <DMA2D_IRQHandler+0x10>)
 80019d2:	f001 f849 	bl	8002a68 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200459d0 	.word	0x200459d0

080019e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return 1;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_kill>:

int _kill(int pid, int sig)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019fa:	f02a fb8b 	bl	802c114 <__errno>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2216      	movs	r2, #22
 8001a02:	601a      	str	r2, [r3, #0]
  return -1;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_exit>:

void _exit (int status)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ffe7 	bl	80019f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a22:	bf00      	nop
 8001a24:	e7fd      	b.n	8001a22 <_exit+0x12>

08001a26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	e00a      	b.n	8001a4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a38:	f3af 8000 	nop.w
 8001a3c:	4601      	mov	r1, r0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	60ba      	str	r2, [r7, #8]
 8001a44:	b2ca      	uxtb	r2, r1
 8001a46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	dbf0      	blt.n	8001a38 <_read+0x12>
  }

  return len;
 8001a56:	687b      	ldr	r3, [r7, #4]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	e009      	b.n	8001a86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	60ba      	str	r2, [r7, #8]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fd74 	bl	8001568 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	3301      	adds	r3, #1
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	dbf1      	blt.n	8001a72 <_write+0x12>
  }
  return len;
 8001a8e:	687b      	ldr	r3, [r7, #4]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_close>:

int _close(int file)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ac0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_isatty>:

int _isatty(int file)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ad8:	2301      	movs	r3, #1
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b085      	sub	sp, #20
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b08:	4a14      	ldr	r2, [pc, #80]	@ (8001b5c <_sbrk+0x5c>)
 8001b0a:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <_sbrk+0x60>)
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b14:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <_sbrk+0x64>)
 8001b1e:	4a12      	ldr	r2, [pc, #72]	@ (8001b68 <_sbrk+0x68>)
 8001b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d207      	bcs.n	8001b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b30:	f02a faf0 	bl	802c114 <__errno>
 8001b34:	4603      	mov	r3, r0
 8001b36:	220c      	movs	r2, #12
 8001b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3e:	e009      	b.n	8001b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b40:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b46:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <_sbrk+0x64>)
 8001b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b52:	68fb      	ldr	r3, [r7, #12]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200c0000 	.word	0x200c0000
 8001b60:	00000800 	.word	0x00000800
 8001b64:	20045ba4 	.word	0x20045ba4
 8001b68:	2005c668 	.word	0x2005c668

08001b6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b70:	4b18      	ldr	r3, [pc, #96]	@ (8001bd4 <SystemInit+0x68>)
 8001b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b76:	4a17      	ldr	r2, [pc, #92]	@ (8001bd4 <SystemInit+0x68>)
 8001b78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001b80:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <SystemInit+0x6c>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001b86:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <SystemInit+0x6c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001b8c:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <SystemInit+0x6c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001b92:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <SystemInit+0x6c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001b98:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <SystemInit+0x6c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd8 <SystemInit+0x6c>)
 8001b9e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001ba2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001ba6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <SystemInit+0x6c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001bae:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd8 <SystemInit+0x6c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a09      	ldr	r2, [pc, #36]	@ (8001bd8 <SystemInit+0x6c>)
 8001bb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bb8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001bba:	4b07      	ldr	r3, [pc, #28]	@ (8001bd8 <SystemInit+0x6c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bc0:	4b04      	ldr	r3, [pc, #16]	@ (8001bd4 <SystemInit+0x68>)
 8001bc2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001bc6:	609a      	str	r2, [r3, #8]
  #endif
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000ed00 	.word	0xe000ed00
 8001bd8:	46020c00 	.word	0x46020c00

08001bdc <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bec:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <MX_TIM6_Init+0x64>)
 8001bee:	4a15      	ldr	r2, [pc, #84]	@ (8001c44 <MX_TIM6_Init+0x68>)
 8001bf0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001bf2:	4b13      	ldr	r3, [pc, #76]	@ (8001c40 <MX_TIM6_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <MX_TIM6_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001bfe:	4b10      	ldr	r3, [pc, #64]	@ (8001c40 <MX_TIM6_Init+0x64>)
 8001c00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c04:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <MX_TIM6_Init+0x64>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c0c:	480c      	ldr	r0, [pc, #48]	@ (8001c40 <MX_TIM6_Init+0x64>)
 8001c0e:	f008 fcab 	bl	800a568 <HAL_TIM_Base_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c18:	f7ff fcd2 	bl	80015c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	4619      	mov	r1, r3
 8001c28:	4805      	ldr	r0, [pc, #20]	@ (8001c40 <MX_TIM6_Init+0x64>)
 8001c2a:	f009 f80d 	bl	800ac48 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c34:	f7ff fcc4 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20045ba8 	.word	0x20045ba8
 8001c44:	40001000 	.word	0x40001000

08001c48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0e      	ldr	r2, [pc, #56]	@ (8001c90 <HAL_TIM_Base_MspInit+0x48>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d116      	bne.n	8001c88 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <HAL_TIM_Base_MspInit+0x4c>)
 8001c5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c60:	4a0c      	ldr	r2, [pc, #48]	@ (8001c94 <HAL_TIM_Base_MspInit+0x4c>)
 8001c62:	f043 0310 	orr.w	r3, r3, #16
 8001c66:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <HAL_TIM_Base_MspInit+0x4c>)
 8001c6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2105      	movs	r1, #5
 8001c7c:	2031      	movs	r0, #49	@ 0x31
 8001c7e:	f000 fa15 	bl	80020ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001c82:	2031      	movs	r0, #49	@ 0x31
 8001c84:	f000 fa2c 	bl	80020e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40001000 	.word	0x40001000
 8001c94:	46020c00 	.word	0x46020c00

08001c98 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c9c:	4b22      	ldr	r3, [pc, #136]	@ (8001d28 <MX_USART1_UART_Init+0x90>)
 8001c9e:	4a23      	ldr	r2, [pc, #140]	@ (8001d2c <MX_USART1_UART_Init+0x94>)
 8001ca0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ca2:	4b21      	ldr	r3, [pc, #132]	@ (8001d28 <MX_USART1_UART_Init+0x90>)
 8001ca4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ca8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001caa:	4b1f      	ldr	r3, [pc, #124]	@ (8001d28 <MX_USART1_UART_Init+0x90>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d28 <MX_USART1_UART_Init+0x90>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d28 <MX_USART1_UART_Init+0x90>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d28 <MX_USART1_UART_Init+0x90>)
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc2:	4b19      	ldr	r3, [pc, #100]	@ (8001d28 <MX_USART1_UART_Init+0x90>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc8:	4b17      	ldr	r3, [pc, #92]	@ (8001d28 <MX_USART1_UART_Init+0x90>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cce:	4b16      	ldr	r3, [pc, #88]	@ (8001d28 <MX_USART1_UART_Init+0x90>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cd4:	4b14      	ldr	r3, [pc, #80]	@ (8001d28 <MX_USART1_UART_Init+0x90>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cda:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <MX_USART1_UART_Init+0x90>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ce0:	4811      	ldr	r0, [pc, #68]	@ (8001d28 <MX_USART1_UART_Init+0x90>)
 8001ce2:	f009 f8b9 	bl	800ae58 <HAL_UART_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001cec:	f7ff fc68 	bl	80015c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	480d      	ldr	r0, [pc, #52]	@ (8001d28 <MX_USART1_UART_Init+0x90>)
 8001cf4:	f009 fd98 	bl	800b828 <HAL_UARTEx_SetTxFifoThreshold>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001cfe:	f7ff fc5f 	bl	80015c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d02:	2100      	movs	r1, #0
 8001d04:	4808      	ldr	r0, [pc, #32]	@ (8001d28 <MX_USART1_UART_Init+0x90>)
 8001d06:	f009 fdcd 	bl	800b8a4 <HAL_UARTEx_SetRxFifoThreshold>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d10:	f7ff fc56 	bl	80015c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d14:	4804      	ldr	r0, [pc, #16]	@ (8001d28 <MX_USART1_UART_Init+0x90>)
 8001d16:	f009 fd4e 	bl	800b7b6 <HAL_UARTEx_DisableFifoMode>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d20:	f7ff fc4e 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20045bf4 	.word	0x20045bf4
 8001d2c:	40013800 	.word	0x40013800

08001d30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b0ba      	sub	sp, #232	@ 0xe8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d48:	f107 0310 	add.w	r3, r7, #16
 8001d4c:	22c0      	movs	r2, #192	@ 0xc0
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f02a f93d 	bl	802bfd0 <memset>
  if(uartHandle->Instance==USART1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a26      	ldr	r2, [pc, #152]	@ (8001df4 <HAL_UART_MspInit+0xc4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d145      	bne.n	8001dec <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d60:	f04f 0201 	mov.w	r2, #1
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	4618      	mov	r0, r3
 8001d76:	f005 ff5f 	bl	8007c38 <HAL_RCCEx_PeriphCLKConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001d80:	f7ff fc1e 	bl	80015c0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d84:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <HAL_UART_MspInit+0xc8>)
 8001d86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8001df8 <HAL_UART_MspInit+0xc8>)
 8001d8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d90:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001d94:	4b18      	ldr	r3, [pc, #96]	@ (8001df8 <HAL_UART_MspInit+0xc8>)
 8001d96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	4b15      	ldr	r3, [pc, #84]	@ (8001df8 <HAL_UART_MspInit+0xc8>)
 8001da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001da8:	4a13      	ldr	r2, [pc, #76]	@ (8001df8 <HAL_UART_MspInit+0xc8>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001db2:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <HAL_UART_MspInit+0xc8>)
 8001db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dc0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001dc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dda:	2307      	movs	r3, #7
 8001ddc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001de4:	4619      	mov	r1, r3
 8001de6:	4805      	ldr	r0, [pc, #20]	@ (8001dfc <HAL_UART_MspInit+0xcc>)
 8001de8:	f001 ffba 	bl	8003d60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001dec:	bf00      	nop
 8001dee:	37e8      	adds	r7, #232	@ 0xe8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40013800 	.word	0x40013800
 8001df8:	46020c00 	.word	0x46020c00
 8001dfc:	42020000 	.word	0x42020000

08001e00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001e00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e38 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e04:	f7ff feb2 	bl	8001b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e08:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e0a:	e003      	b.n	8001e14 <LoopCopyDataInit>

08001e0c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e0e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e10:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e12:	3104      	adds	r1, #4

08001e14 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e14:	480a      	ldr	r0, [pc, #40]	@ (8001e40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e16:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e18:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e1a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e1c:	d3f6      	bcc.n	8001e0c <CopyDataInit>
	ldr	r2, =_sbss
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e20:	e002      	b.n	8001e28 <LoopFillZerobss>

08001e22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e22:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e24:	f842 3b04 	str.w	r3, [r2], #4

08001e28 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e28:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <LoopForever+0x16>)
	cmp	r2, r3
 8001e2a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e2c:	d3f9      	bcc.n	8001e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e2e:	f02a f977 	bl	802c120 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e32:	f7ff fb15 	bl	8001460 <main>

08001e36 <LoopForever>:

LoopForever:
    b LoopForever
 8001e36:	e7fe      	b.n	8001e36 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001e38:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001e3c:	08045ad0 	.word	0x08045ad0
	ldr	r0, =_sdata
 8001e40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e44:	200000fc 	.word	0x200000fc
	ldr	r2, =_sbss
 8001e48:	20045900 	.word	0x20045900
	ldr	r3, = _ebss
 8001e4c:	2005c668 	.word	0x2005c668

08001e50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e50:	e7fe      	b.n	8001e50 <ADC1_IRQHandler>
	...

08001e54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e58:	4b12      	ldr	r3, [pc, #72]	@ (8001ea4 <HAL_Init+0x50>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a11      	ldr	r2, [pc, #68]	@ (8001ea4 <HAL_Init+0x50>)
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e64:	2003      	movs	r0, #3
 8001e66:	f000 f916 	bl	8002096 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001e6a:	f005 fccf 	bl	800780c <HAL_RCC_GetSysClockFreq>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <HAL_Init+0x54>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	490c      	ldr	r1, [pc, #48]	@ (8001eac <HAL_Init+0x58>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e80:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb0 <HAL_Init+0x5c>)
 8001e82:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e84:	2004      	movs	r0, #4
 8001e86:	f000 f939 	bl	80020fc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f7ff fcea 	bl	8001864 <HAL_InitTick>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e002      	b.n	8001ea0 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9a:	f7ff fcc5 	bl	8001828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40022000 	.word	0x40022000
 8001ea8:	46020c00 	.word	0x46020c00
 8001eac:	0802d83c 	.word	0x0802d83c
 8001eb0:	20000004 	.word	0x20000004

08001eb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_IncTick+0x20>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <HAL_IncTick+0x24>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4a04      	ldr	r2, [pc, #16]	@ (8001ed8 <HAL_IncTick+0x24>)
 8001ec6:	6013      	str	r3, [r2, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	2000000c 	.word	0x2000000c
 8001ed8:	20045c88 	.word	0x20045c88

08001edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	@ (8001ef0 <HAL_GetTick+0x14>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20045c88 	.word	0x20045c88

08001ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001efc:	f7ff ffee 	bl	8001edc <HAL_GetTick>
 8001f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0c:	d005      	beq.n	8001f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <HAL_Delay+0x44>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4413      	add	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f1a:	bf00      	nop
 8001f1c:	f7ff ffde 	bl	8001edc <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d8f7      	bhi.n	8001f1c <HAL_Delay+0x28>
  {
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	2000000c 	.word	0x2000000c

08001f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6e:	4a04      	ldr	r2, [pc, #16]	@ (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60d3      	str	r3, [r2, #12]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f88:	4b04      	ldr	r3, [pc, #16]	@ (8001f9c <__NVIC_GetPriorityGrouping+0x18>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 0307 	and.w	r3, r3, #7
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0b      	blt.n	8001fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	4907      	ldr	r1, [pc, #28]	@ (8001fd8 <__NVIC_EnableIRQ+0x38>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000e100 	.word	0xe000e100

08001fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db0a      	blt.n	8002006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	490c      	ldr	r1, [pc, #48]	@ (8002028 <__NVIC_SetPriority+0x4c>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002004:	e00a      	b.n	800201c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4908      	ldr	r1, [pc, #32]	@ (800202c <__NVIC_SetPriority+0x50>)
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	3b04      	subs	r3, #4
 8002014:	0112      	lsls	r2, r2, #4
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	440b      	add	r3, r1
 800201a:	761a      	strb	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	@ 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f1c3 0307 	rsb	r3, r3, #7
 800204a:	2b04      	cmp	r3, #4
 800204c:	bf28      	it	cs
 800204e:	2304      	movcs	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	2b06      	cmp	r3, #6
 8002058:	d902      	bls.n	8002060 <NVIC_EncodePriority+0x30>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3b03      	subs	r3, #3
 800205e:	e000      	b.n	8002062 <NVIC_EncodePriority+0x32>
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	f04f 32ff 	mov.w	r2, #4294967295
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	401a      	ands	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002078:	f04f 31ff 	mov.w	r1, #4294967295
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43d9      	mvns	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	4313      	orrs	r3, r2
         );
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	@ 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ff4c 	bl	8001f3c <__NVIC_SetPriorityGrouping>
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020ba:	f7ff ff63 	bl	8001f84 <__NVIC_GetPriorityGrouping>
 80020be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68b9      	ldr	r1, [r7, #8]
 80020c4:	6978      	ldr	r0, [r7, #20]
 80020c6:	f7ff ffb3 	bl	8002030 <NVIC_EncodePriority>
 80020ca:	4602      	mov	r2, r0
 80020cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff82 	bl	8001fdc <__NVIC_SetPriority>
}
 80020d8:	bf00      	nop
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff56 	bl	8001fa0 <__NVIC_EnableIRQ>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b04      	cmp	r3, #4
 8002108:	d844      	bhi.n	8002194 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800210a:	a201      	add	r2, pc, #4	@ (adr r2, 8002110 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800210c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002110:	08002133 	.word	0x08002133
 8002114:	08002151 	.word	0x08002151
 8002118:	08002173 	.word	0x08002173
 800211c:	08002195 	.word	0x08002195
 8002120:	08002125 	.word	0x08002125
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002124:	4b1f      	ldr	r3, [pc, #124]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a1e      	ldr	r2, [pc, #120]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800212a:	f043 0304 	orr.w	r3, r3, #4
 800212e:	6013      	str	r3, [r2, #0]
      break;
 8002130:	e031      	b.n	8002196 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002132:	4b1c      	ldr	r3, [pc, #112]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a1b      	ldr	r2, [pc, #108]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002138:	f023 0304 	bic.w	r3, r3, #4
 800213c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800213e:	4b1a      	ldr	r3, [pc, #104]	@ (80021a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002144:	4a18      	ldr	r2, [pc, #96]	@ (80021a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002146:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800214a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800214e:	e022      	b.n	8002196 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002150:	4b14      	ldr	r3, [pc, #80]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a13      	ldr	r2, [pc, #76]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002156:	f023 0304 	bic.w	r3, r3, #4
 800215a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800215c:	4b12      	ldr	r3, [pc, #72]	@ (80021a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800215e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002162:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002166:	4a10      	ldr	r2, [pc, #64]	@ (80021a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002168:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800216c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002170:	e011      	b.n	8002196 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002172:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a0b      	ldr	r2, [pc, #44]	@ (80021a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002178:	f023 0304 	bic.w	r3, r3, #4
 800217c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800217e:	4b0a      	ldr	r3, [pc, #40]	@ (80021a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002184:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002188:	4a07      	ldr	r2, [pc, #28]	@ (80021a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800218a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800218e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002192:	e000      	b.n	8002196 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002194:	bf00      	nop
  }
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000e010 	.word	0xe000e010
 80021a8:	46020c00 	.word	0x46020c00

080021ac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e054      	b.n	8002268 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	7f5b      	ldrb	r3, [r3, #29]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d105      	bne.n	80021d4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7fe ff4e 	bl	8001070 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	791b      	ldrb	r3, [r3, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10c      	bne.n	80021fc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a22      	ldr	r2, [pc, #136]	@ (8002270 <HAL_CRC_Init+0xc4>)
 80021e8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0218 	bic.w	r2, r2, #24
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	e00c      	b.n	8002216 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6899      	ldr	r1, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	461a      	mov	r2, r3
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f834 	bl	8002274 <HAL_CRCEx_Polynomial_Set>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e028      	b.n	8002268 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	795b      	ldrb	r3, [r3, #5]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d105      	bne.n	800222a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f04f 32ff 	mov.w	r2, #4294967295
 8002226:	611a      	str	r2, [r3, #16]
 8002228:	e004      	b.n	8002234 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6912      	ldr	r2, [r2, #16]
 8002232:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699a      	ldr	r2, [r3, #24]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	04c11db7 	.word	0x04c11db7

08002274 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002284:	231f      	movs	r3, #31
 8002286:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d102      	bne.n	8002298 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	75fb      	strb	r3, [r7, #23]
 8002296:	e063      	b.n	8002360 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002298:	bf00      	nop
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1e5a      	subs	r2, r3, #1
 800229e:	613a      	str	r2, [r7, #16]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d009      	beq.n	80022b8 <HAL_CRCEx_Polynomial_Set+0x44>
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b18      	cmp	r3, #24
 80022bc:	d846      	bhi.n	800234c <HAL_CRCEx_Polynomial_Set+0xd8>
 80022be:	a201      	add	r2, pc, #4	@ (adr r2, 80022c4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80022c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c4:	08002353 	.word	0x08002353
 80022c8:	0800234d 	.word	0x0800234d
 80022cc:	0800234d 	.word	0x0800234d
 80022d0:	0800234d 	.word	0x0800234d
 80022d4:	0800234d 	.word	0x0800234d
 80022d8:	0800234d 	.word	0x0800234d
 80022dc:	0800234d 	.word	0x0800234d
 80022e0:	0800234d 	.word	0x0800234d
 80022e4:	08002341 	.word	0x08002341
 80022e8:	0800234d 	.word	0x0800234d
 80022ec:	0800234d 	.word	0x0800234d
 80022f0:	0800234d 	.word	0x0800234d
 80022f4:	0800234d 	.word	0x0800234d
 80022f8:	0800234d 	.word	0x0800234d
 80022fc:	0800234d 	.word	0x0800234d
 8002300:	0800234d 	.word	0x0800234d
 8002304:	08002335 	.word	0x08002335
 8002308:	0800234d 	.word	0x0800234d
 800230c:	0800234d 	.word	0x0800234d
 8002310:	0800234d 	.word	0x0800234d
 8002314:	0800234d 	.word	0x0800234d
 8002318:	0800234d 	.word	0x0800234d
 800231c:	0800234d 	.word	0x0800234d
 8002320:	0800234d 	.word	0x0800234d
 8002324:	08002329 	.word	0x08002329
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	2b06      	cmp	r3, #6
 800232c:	d913      	bls.n	8002356 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002332:	e010      	b.n	8002356 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	2b07      	cmp	r3, #7
 8002338:	d90f      	bls.n	800235a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800233e:	e00c      	b.n	800235a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	2b0f      	cmp	r3, #15
 8002344:	d90b      	bls.n	800235e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800234a:	e008      	b.n	800235e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	75fb      	strb	r3, [r7, #23]
        break;
 8002350:	e006      	b.n	8002360 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002352:	bf00      	nop
 8002354:	e004      	b.n	8002360 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002356:	bf00      	nop
 8002358:	e002      	b.n	8002360 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800235a:	bf00      	nop
 800235c:	e000      	b.n	8002360 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800235e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002360:	7dfb      	ldrb	r3, [r7, #23]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10d      	bne.n	8002382 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f023 0118 	bic.w	r1, r3, #24
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	430a      	orrs	r2, r1
 8002380:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002382:	7dfb      	ldrb	r3, [r7, #23]
}
 8002384:	4618      	mov	r0, r3
 8002386:	371c      	adds	r7, #28
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e04f      	b.n	8002448 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_DMA_Start_IT+0x26>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e048      	b.n	8002448 <HAL_DMA_Start_IT+0xb8>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d136      	bne.n	8002438 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2202      	movs	r2, #2
 80023ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 fabc 	bl	800295c <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80023f2:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800240a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002422:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	e007      	b.n	8002448 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2240      	movs	r2, #64	@ 0x40
 800243c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002458:	f7ff fd40 	bl	8001edc <HAL_GetTick>
 800245c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e06b      	b.n	8002540 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d008      	beq.n	8002486 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2220      	movs	r2, #32
 8002478:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e05c      	b.n	8002540 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0204 	orr.w	r2, r2, #4
 8002494:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2205      	movs	r2, #5
 800249a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800249e:	e020      	b.n	80024e2 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80024a0:	f7ff fd1c 	bl	8001edc <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b05      	cmp	r3, #5
 80024ac:	d919      	bls.n	80024e2 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b2:	f043 0210 	orr.w	r2, r3, #16
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2203      	movs	r2, #3
 80024be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024d2:	2201      	movs	r2, #1
 80024d4:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e02e      	b.n	8002540 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0d7      	beq.n	80024a0 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0202 	orr.w	r2, r2, #2
 80024fe:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2204      	movs	r2, #4
 8002504:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002510:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800251e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800252a:	2201      	movs	r2, #1
 800252c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2200      	movs	r2, #0
 8002534:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e019      	b.n	800258e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d004      	beq.n	8002570 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2220      	movs	r2, #32
 800256a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e00e      	b.n	800258e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2204      	movs	r2, #4
 8002574:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002586:	f043 0304 	orr.w	r3, r3, #4
 800258a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b086      	sub	sp, #24
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80025aa:	f023 030f 	bic.w	r3, r3, #15
 80025ae:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b8:	3b50      	subs	r3, #80	@ 0x50
 80025ba:	09db      	lsrs	r3, r3, #7
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	2201      	movs	r2, #1
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4013      	ands	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 813b 	beq.w	8002850 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d011      	beq.n	800260c <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025fe:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002604:	f043 0201 	orr.w	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002616:	2b00      	cmp	r3, #0
 8002618:	d011      	beq.n	800263e <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002630:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002636:	f043 0202 	orr.w	r2, r3, #2
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d011      	beq.n	8002670 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002662:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002668:	f043 0204 	orr.w	r2, r3, #4
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d011      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002694:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269a:	f043 0208 	orr.w	r2, r3, #8
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00c      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026c6:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d04c      	beq.n	8002780 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d045      	beq.n	8002780 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026fc:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b04      	cmp	r3, #4
 8002708:	d12e      	bne.n	8002768 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002718:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0202 	orr.w	r2, r2, #2
 8002728:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800273a:	2b00      	cmp	r3, #0
 800273c:	d007      	beq.n	800274e <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002742:	2201      	movs	r2, #1
 8002744:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2200      	movs	r2, #0
 800274c:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800275a:	2b00      	cmp	r3, #0
 800275c:	d07a      	beq.n	8002854 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	4798      	blx	r3
        }

        return;
 8002766:	e075      	b.n	8002854 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2205      	movs	r2, #5
 800276c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d039      	beq.n	8002802 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d032      	beq.n	8002802 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d012      	beq.n	80027ce <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d116      	bne.n	80027e0 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d111      	bne.n	80027e0 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c8:	2201      	movs	r2, #1
 80027ca:	731a      	strb	r2, [r3, #12]
 80027cc:	e008      	b.n	80027e0 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d103      	bne.n	80027e0 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80027e8:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002806:	2b00      	cmp	r3, #0
 8002808:	d025      	beq.n	8002856 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0202 	orr.w	r2, r2, #2
 8002818:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002832:	2201      	movs	r2, #1
 8002834:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	4798      	blx	r3
 800284e:	e002      	b.n	8002856 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002850:	bf00      	nop
 8002852:	e000      	b.n	8002856 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002854:	bf00      	nop
    }
  }
}
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_DMA_RegisterCallback>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *const hdma,
                                           HAL_DMA_CallbackIDTypeDef CallbackID,
                                           void (*const pCallback)(DMA_HandleTypeDef *const _hdma))
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	460b      	mov	r3, r1
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e02f      	b.n	80028d8 <HAL_DMA_RegisterCallback+0x7c>
  }

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d126      	bne.n	80028d2 <HAL_DMA_RegisterCallback+0x76>
  {
    /* Check callback ID */
    switch (CallbackID)
 8002884:	7afb      	ldrb	r3, [r7, #11]
 8002886:	2b04      	cmp	r3, #4
 8002888:	d820      	bhi.n	80028cc <HAL_DMA_RegisterCallback+0x70>
 800288a:	a201      	add	r2, pc, #4	@ (adr r2, 8002890 <HAL_DMA_RegisterCallback+0x34>)
 800288c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002890:	080028a5 	.word	0x080028a5
 8002894:	080028ad 	.word	0x080028ad
 8002898:	080028b5 	.word	0x080028b5
 800289c:	080028bd 	.word	0x080028bd
 80028a0:	080028c5 	.word	0x080028c5
    {
      case HAL_DMA_XFER_CPLT_CB_ID:
      {
        /* Register transfer complete callback */
        hdma->XferCpltCallback = pCallback;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80028aa:	e014      	b.n	80028d6 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_HALFCPLT_CB_ID:
      {
        /* Register half transfer callback */
        hdma->XferHalfCpltCallback = pCallback;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80028b2:	e010      	b.n	80028d6 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_ERROR_CB_ID:
      {
        /* Register transfer error callback */
        hdma->XferErrorCallback = pCallback;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80028ba:	e00c      	b.n	80028d6 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_ABORT_CB_ID:
      {
        /* Register abort callback */
        hdma->XferAbortCallback = pCallback;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80028c2:	e008      	b.n	80028d6 <HAL_DMA_RegisterCallback+0x7a>
      }

      case HAL_DMA_XFER_SUSPEND_CB_ID:
      {
        /* Register suspend callback */
        hdma->XferSuspendCallback = pCallback;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80028ca:	e004      	b.n	80028d6 <HAL_DMA_RegisterCallback+0x7a>
      }

      default:
      {
        /* Update error status */
        status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	75fb      	strb	r3, [r7, #23]
        break;
 80028d0:	e001      	b.n	80028d6 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    /* Update error status */
    status =  HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80028d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e02b      	b.n	8002950 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002900:	f023 030f 	bic.w	r3, r3, #15
 8002904:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290e:	3b50      	subs	r3, #80	@ 0x50
 8002910:	09db      	lsrs	r3, r3, #7
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	2201      	movs	r2, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b00      	cmp	r3, #0
 8002926:	d012      	beq.n	800294e <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	f003 0311 	and.w	r3, r3, #17
 800292e:	2b11      	cmp	r3, #17
 8002930:	d106      	bne.n	8002940 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	431a      	orrs	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	e006      	b.n	800294e <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	43db      	mvns	r3, r3
 8002948:	401a      	ands	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002970:	0c1b      	lsrs	r3, r3, #16
 8002972:	041b      	lsls	r3, r3, #16
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	b291      	uxth	r1, r2
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	6812      	ldr	r2, [r2, #0]
 800297c:	430b      	orrs	r3, r1
 800297e:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002988:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e053      	b.n	8002a60 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d106      	bne.n	80029d2 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7fe fbaf 	bl	8001130 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80029e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6851      	ldr	r1, [r2, #4]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	69d2      	ldr	r2, [r2, #28]
 80029f0:	4311      	orrs	r1, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	430b      	orrs	r3, r1
 80029f8:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a00:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6891      	ldr	r1, [r2, #8]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6992      	ldr	r2, [r2, #24]
 8002a10:	4311      	orrs	r1, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	430b      	orrs	r3, r1
 8002a18:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	041b      	lsls	r3, r3, #16
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	68d1      	ldr	r1, [r2, #12]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a36:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	051a      	lsls	r2, r3, #20
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	055b      	lsls	r3, r3, #21
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d026      	beq.n	8002ad8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d021      	beq.n	8002ad8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002aa2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa8:	f043 0201 	orr.w	r2, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2204      	movs	r2, #4
 8002abc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d026      	beq.n	8002b30 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d021      	beq.n	8002b30 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002afa:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2220      	movs	r2, #32
 8002b02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b08:	f043 0202 	orr.w	r2, r3, #2
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2204      	movs	r2, #4
 8002b14:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d026      	beq.n	8002b88 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d021      	beq.n	8002b88 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b52:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2208      	movs	r2, #8
 8002b5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b60:	f043 0204 	orr.w	r2, r3, #4
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d013      	beq.n	8002bba <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00e      	beq.n	8002bba <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002baa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f853 	bl	8002c60 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d024      	beq.n	8002c0e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d01f      	beq.n	8002c0e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002bdc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2202      	movs	r2, #2
 8002be4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      if (hdma2d->XferCpltCallback != NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01f      	beq.n	8002c58 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d01a      	beq.n	8002c58 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c30:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2210      	movs	r2, #16
 8002c38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f80e 	bl	8002c74 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_DMA2D_ConfigLayer+0x20>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e084      	b.n	8002db2 <HAL_DMA2D_ConfigLayer+0x12a>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	3328      	adds	r3, #40	@ 0x28
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	041b      	lsls	r3, r3, #16
 8002cd4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002cdc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002ce8:	4b35      	ldr	r3, [pc, #212]	@ (8002dc0 <HAL_DMA2D_ConfigLayer+0x138>)
 8002cea:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b0a      	cmp	r3, #10
 8002cf2:	d003      	beq.n	8002cfc <HAL_DMA2D_ConfigLayer+0x74>
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b09      	cmp	r3, #9
 8002cfa:	d107      	bne.n	8002d0c <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	e005      	b.n	8002d18 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d120      	bne.n	8002d60 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	ea02 0103 	and.w	r1, r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b0a      	cmp	r3, #10
 8002d46:	d003      	beq.n	8002d50 <HAL_DMA2D_ConfigLayer+0xc8>
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b09      	cmp	r3, #9
 8002d4e:	d127      	bne.n	8002da0 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002d5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d5e:	e01f      	b.n	8002da0 <HAL_DMA2D_ConfigLayer+0x118>
      regMask  |= DMA2D_FGPFCCR_CSS;
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69da      	ldr	r2, [r3, #28]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	ea02 0103 	and.w	r1, r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b0a      	cmp	r3, #10
 8002d88:	d003      	beq.n	8002d92 <HAL_DMA2D_ConfigLayer+0x10a>
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b09      	cmp	r3, #9
 8002d90:	d106      	bne.n	8002da0 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002d9e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	ff33000f 	.word	0xff33000f

08002dc4 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002dcc:	f7ff f886 	bl	8001edc <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0db      	b.n	8002f94 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a6e      	ldr	r2, [pc, #440]	@ (8002f9c <HAL_DMAEx_List_Init+0x1d8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	f000 809f 	beq.w	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a6c      	ldr	r2, [pc, #432]	@ (8002fa0 <HAL_DMAEx_List_Init+0x1dc>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	f000 8099 	beq.w	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a6a      	ldr	r2, [pc, #424]	@ (8002fa4 <HAL_DMAEx_List_Init+0x1e0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	f000 8093 	beq.w	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a68      	ldr	r2, [pc, #416]	@ (8002fa8 <HAL_DMAEx_List_Init+0x1e4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	f000 808d 	beq.w	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a66      	ldr	r2, [pc, #408]	@ (8002fac <HAL_DMAEx_List_Init+0x1e8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	f000 8087 	beq.w	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a64      	ldr	r2, [pc, #400]	@ (8002fb0 <HAL_DMAEx_List_Init+0x1ec>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	f000 8081 	beq.w	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a62      	ldr	r2, [pc, #392]	@ (8002fb4 <HAL_DMAEx_List_Init+0x1f0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d07b      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a61      	ldr	r2, [pc, #388]	@ (8002fb8 <HAL_DMAEx_List_Init+0x1f4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d076      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a5f      	ldr	r2, [pc, #380]	@ (8002fbc <HAL_DMAEx_List_Init+0x1f8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d071      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a5e      	ldr	r2, [pc, #376]	@ (8002fc0 <HAL_DMAEx_List_Init+0x1fc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d06c      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a5c      	ldr	r2, [pc, #368]	@ (8002fc4 <HAL_DMAEx_List_Init+0x200>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d067      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a5b      	ldr	r2, [pc, #364]	@ (8002fc8 <HAL_DMAEx_List_Init+0x204>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d062      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a59      	ldr	r2, [pc, #356]	@ (8002fcc <HAL_DMAEx_List_Init+0x208>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d05d      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a58      	ldr	r2, [pc, #352]	@ (8002fd0 <HAL_DMAEx_List_Init+0x20c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d058      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a56      	ldr	r2, [pc, #344]	@ (8002fd4 <HAL_DMAEx_List_Init+0x210>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d053      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a55      	ldr	r2, [pc, #340]	@ (8002fd8 <HAL_DMAEx_List_Init+0x214>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d04e      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a53      	ldr	r2, [pc, #332]	@ (8002fdc <HAL_DMAEx_List_Init+0x218>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d049      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a52      	ldr	r2, [pc, #328]	@ (8002fe0 <HAL_DMAEx_List_Init+0x21c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d044      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a50      	ldr	r2, [pc, #320]	@ (8002fe4 <HAL_DMAEx_List_Init+0x220>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d03f      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a4f      	ldr	r2, [pc, #316]	@ (8002fe8 <HAL_DMAEx_List_Init+0x224>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d03a      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a4d      	ldr	r2, [pc, #308]	@ (8002fec <HAL_DMAEx_List_Init+0x228>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d035      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a4c      	ldr	r2, [pc, #304]	@ (8002ff0 <HAL_DMAEx_List_Init+0x22c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d030      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a4a      	ldr	r2, [pc, #296]	@ (8002ff4 <HAL_DMAEx_List_Init+0x230>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d02b      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a49      	ldr	r2, [pc, #292]	@ (8002ff8 <HAL_DMAEx_List_Init+0x234>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d026      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a47      	ldr	r2, [pc, #284]	@ (8002ffc <HAL_DMAEx_List_Init+0x238>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d021      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a46      	ldr	r2, [pc, #280]	@ (8003000 <HAL_DMAEx_List_Init+0x23c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d01c      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a44      	ldr	r2, [pc, #272]	@ (8003004 <HAL_DMAEx_List_Init+0x240>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d017      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a43      	ldr	r2, [pc, #268]	@ (8003008 <HAL_DMAEx_List_Init+0x244>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d012      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a41      	ldr	r2, [pc, #260]	@ (800300c <HAL_DMAEx_List_Init+0x248>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00d      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a40      	ldr	r2, [pc, #256]	@ (8003010 <HAL_DMAEx_List_Init+0x24c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d008      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a3e      	ldr	r2, [pc, #248]	@ (8003014 <HAL_DMAEx_List_Init+0x250>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d003      	beq.n	8002f26 <HAL_DMAEx_List_Init+0x162>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a3d      	ldr	r2, [pc, #244]	@ (8003018 <HAL_DMAEx_List_Init+0x254>)
 8002f24:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695a      	ldr	r2, [r3, #20]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 0206 	orr.w	r2, r2, #6
 8002f44:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002f46:	e00f      	b.n	8002f68 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002f48:	f7fe ffc8 	bl	8001edc <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b05      	cmp	r3, #5
 8002f54:	d908      	bls.n	8002f68 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2210      	movs	r2, #16
 8002f5a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2203      	movs	r2, #3
 8002f60:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e015      	b.n	8002f94 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1e8      	bne.n	8002f48 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fabc 	bl	80034f4 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40020050 	.word	0x40020050
 8002fa0:	50020050 	.word	0x50020050
 8002fa4:	400200d0 	.word	0x400200d0
 8002fa8:	500200d0 	.word	0x500200d0
 8002fac:	40020150 	.word	0x40020150
 8002fb0:	50020150 	.word	0x50020150
 8002fb4:	400201d0 	.word	0x400201d0
 8002fb8:	500201d0 	.word	0x500201d0
 8002fbc:	40020250 	.word	0x40020250
 8002fc0:	50020250 	.word	0x50020250
 8002fc4:	400202d0 	.word	0x400202d0
 8002fc8:	500202d0 	.word	0x500202d0
 8002fcc:	40020350 	.word	0x40020350
 8002fd0:	50020350 	.word	0x50020350
 8002fd4:	400203d0 	.word	0x400203d0
 8002fd8:	500203d0 	.word	0x500203d0
 8002fdc:	40020450 	.word	0x40020450
 8002fe0:	50020450 	.word	0x50020450
 8002fe4:	400204d0 	.word	0x400204d0
 8002fe8:	500204d0 	.word	0x500204d0
 8002fec:	40020550 	.word	0x40020550
 8002ff0:	50020550 	.word	0x50020550
 8002ff4:	400205d0 	.word	0x400205d0
 8002ff8:	500205d0 	.word	0x500205d0
 8002ffc:	40020650 	.word	0x40020650
 8003000:	50020650 	.word	0x50020650
 8003004:	400206d0 	.word	0x400206d0
 8003008:	500206d0 	.word	0x500206d0
 800300c:	40020750 	.word	0x40020750
 8003010:	50020750 	.word	0x50020750
 8003014:	400207d0 	.word	0x400207d0
 8003018:	500207d0 	.word	0x500207d0

0800301c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_DMAEx_List_Start_IT+0x16>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e082      	b.n	800313c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800303c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003048:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800304a:	7dfb      	ldrb	r3, [r7, #23]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d005      	beq.n	800305c <HAL_DMAEx_List_Start_IT+0x40>
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d16a      	bne.n	800312c <HAL_DMAEx_List_Start_IT+0x110>
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d067      	beq.n	800312c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d157      	bne.n	8003118 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_DMAEx_List_Start_IT+0x5a>
 8003072:	2302      	movs	r3, #2
 8003074:	e062      	b.n	800313c <HAL_DMAEx_List_Start_IT+0x120>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2202      	movs	r2, #2
 8003082:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800308a:	2202      	movs	r2, #2
 800308c:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003098:	2200      	movs	r2, #0
 800309a:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80030aa:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d007      	beq.n	80030c4 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695a      	ldr	r2, [r3, #20]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030c2:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d007      	beq.n	80030dc <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695a      	ldr	r2, [r3, #20]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030da:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f107 010c 	add.w	r1, r7, #12
 80030e6:	2200      	movs	r2, #0
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fd1f 	bl	8003b2c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4619      	mov	r1, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	0c0b      	lsrs	r3, r1, #16
 80030fc:	041b      	lsls	r3, r3, #16
 80030fe:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800310c:	4013      	ands	r3, r2
 800310e:	68f9      	ldr	r1, [r7, #12]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	430b      	orrs	r3, r1
 8003116:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695a      	ldr	r2, [r3, #20]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	e007      	b.n	800313c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2240      	movs	r2, #64	@ 0x40
 8003130:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_DMAEx_List_BuildNode+0x16>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e004      	b.n	8003168 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800315e:	6839      	ldr	r1, [r7, #0]
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fb1f 	bl	80037a4 <DMA_List_BuildNode>

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_DMAEx_List_InsertNode_Head>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Head(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <HAL_DMAEx_List_InsertNode_Head+0x16>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_DMAEx_List_InsertNode_Head+0x1a>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e057      	b.n	800323a <HAL_DMAEx_List_InsertNode_Head+0xca>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d104      	bne.n	800319c <HAL_DMAEx_List_InsertNode_Head+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2204      	movs	r2, #4
 8003196:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e04e      	b.n	800323a <HAL_DMAEx_List_InsertNode_Head+0xca>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2200      	movs	r2, #0
 80031a2:	6839      	ldr	r1, [r7, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 fc55 	bl	8003a54 <DMA_List_CheckNodesBaseAddresses>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d004      	beq.n	80031ba <HAL_DMAEx_List_InsertNode_Head+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2205      	movs	r2, #5
 80031b4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e03f      	b.n	800323a <HAL_DMAEx_List_InsertNode_Head+0xca>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2200      	movs	r2, #0
 80031c0:	6839      	ldr	r1, [r7, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fc76 	bl	8003ab4 <DMA_List_CheckNodesTypes>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d004      	beq.n	80031d8 <HAL_DMAEx_List_InsertNode_Head+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2204      	movs	r2, #4
 80031d2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e030      	b.n	800323a <HAL_DMAEx_List_InsertNode_Head+0xca>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	611a      	str	r2, [r3, #16]

  /* Empty queue */
  if (pQList->Head == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d103      	bne.n	80031f4 <HAL_DMAEx_List_InsertNode_Head+0x84>
  {
    pQList->Head = pNewNode;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e016      	b.n	8003222 <HAL_DMAEx_List_InsertNode_Head+0xb2>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80031f4:	f107 0208 	add.w	r2, r7, #8
 80031f8:	f107 030c 	add.w	r3, r7, #12
 80031fc:	4619      	mov	r1, r3
 80031fe:	6838      	ldr	r0, [r7, #0]
 8003200:	f000 fc94 	bl	8003b2c <DMA_List_GetCLLRNodeInfo>

    pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800320e:	4013      	ands	r3, r2
 8003210:	68f9      	ldr	r1, [r7, #12]
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	4319      	orrs	r1, r3
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pQList->Head                         = pNewNode;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	601a      	str	r2, [r3, #0]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b08a      	sub	sp, #40	@ 0x28
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HAL_DMAEx_List_InsertNode_Tail+0x16>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e066      	b.n	800332a <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d104      	bne.n	800326e <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2204      	movs	r2, #4
 8003268:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e05d      	b.n	800332a <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2200      	movs	r2, #0
 8003274:	6839      	ldr	r1, [r7, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fbec 	bl	8003a54 <DMA_List_CheckNodesBaseAddresses>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d004      	beq.n	800328c <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2205      	movs	r2, #5
 8003286:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e04e      	b.n	800332a <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2200      	movs	r2, #0
 8003292:	6839      	ldr	r1, [r7, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fc0d 	bl	8003ab4 <DMA_List_CheckNodesTypes>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d004      	beq.n	80032aa <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2204      	movs	r2, #4
 80032a4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e03f      	b.n	800332a <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d103      	bne.n	80032ba <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	e02b      	b.n	8003312 <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80032ba:	f107 0220 	add.w	r2, r7, #32
 80032be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032c2:	4619      	mov	r1, r3
 80032c4:	6838      	ldr	r0, [r7, #0]
 80032c6:	f000 fc31 	bl	8003b2c <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80032ce:	f107 030c 	add.w	r3, r7, #12
 80032d2:	461a      	mov	r2, r3
 80032d4:	2100      	movs	r1, #0
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fc58 	bl	8003b8c <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00b      	beq.n	80032fc <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	461a      	mov	r2, r3
 80032ea:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80032ee:	4013      	ands	r3, r2
 80032f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032f2:	6a3a      	ldr	r2, [r7, #32]
 80032f4:	4319      	orrs	r1, r3
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003302:	4013      	ands	r3, r2
 8003304:	6a79      	ldr	r1, [r7, #36]	@ 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4610      	mov	r0, r2
 800330a:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800330c:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 800330e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3728      	adds	r7, #40	@ 0x28
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_DMAEx_List_ResetQ>:
  * @brief  Reset the linked-list queue and unlink queue nodes.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_ResetQ(DMA_QListTypeDef *const pQList)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b088      	sub	sp, #32
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_DMAEx_List_ResetQ+0x12>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e03c      	b.n	80033be <HAL_DMAEx_List_ResetQ+0x8c>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	7b1b      	ldrb	r3, [r3, #12]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d104      	bne.n	8003358 <HAL_DMAEx_List_ResetQ+0x26>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e032      	b.n	80033be <HAL_DMAEx_List_ResetQ+0x8c>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d104      	bne.n	800336a <HAL_DMAEx_List_ResetQ+0x38>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2204      	movs	r2, #4
 8003364:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e029      	b.n	80033be <HAL_DMAEx_List_ResetQ+0x8c>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2202      	movs	r2, #2
 800336e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	611a      	str	r2, [r3, #16]

  /* Check the queue */
  if (pQList->Head != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00f      	beq.n	800339e <HAL_DMAEx_List_ResetQ+0x6c>
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pQList->Head, NULL, &cllr_offset);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f107 021c 	add.w	r2, r7, #28
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f000 fbcf 	bl	8003b2c <DMA_List_GetCLLRNodeInfo>

    /* Reset selected queue nodes */
    node_info.cllr_offset = cllr_offset;
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	60bb      	str	r3, [r7, #8]
    DMA_List_ResetQueueNodes(pQList, &node_info);
 8003392:	f107 0308 	add.w	r3, r7, #8
 8003396:	4619      	mov	r1, r3
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fc96 	bl	8003cca <DMA_List_ResetQueueNodes>
  }

  /* Reset head node address */
  pQList->Head = NULL;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]

  /* Reset node number */
  pQList->NodeNumber = 0U;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	609a      	str	r2, [r3, #8]

  /* Reset first circular node */
  pQList->FirstCircularNode = NULL;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_RESET;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3720      	adds	r7, #32
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_DMAEx_List_LinkQ+0x16>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e072      	b.n	80034c8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80033e8:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d002      	beq.n	80033fc <HAL_DMAEx_List_LinkQ+0x34>
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	2b05      	cmp	r3, #5
 80033fa:	d108      	bne.n	800340e <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2240      	movs	r2, #64	@ 0x40
 8003400:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e05c      	b.n	80034c8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	7b1b      	ldrb	r3, [r3, #12]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d104      	bne.n	8003422 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2201      	movs	r2, #1
 800341c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e052      	b.n	80034c8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a2b      	ldr	r2, [pc, #172]	@ (80034d4 <HAL_DMAEx_List_LinkQ+0x10c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d022      	beq.n	8003472 <HAL_DMAEx_List_LinkQ+0xaa>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a29      	ldr	r2, [pc, #164]	@ (80034d8 <HAL_DMAEx_List_LinkQ+0x110>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d01d      	beq.n	8003472 <HAL_DMAEx_List_LinkQ+0xaa>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a28      	ldr	r2, [pc, #160]	@ (80034dc <HAL_DMAEx_List_LinkQ+0x114>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d018      	beq.n	8003472 <HAL_DMAEx_List_LinkQ+0xaa>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a26      	ldr	r2, [pc, #152]	@ (80034e0 <HAL_DMAEx_List_LinkQ+0x118>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <HAL_DMAEx_List_LinkQ+0xaa>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a25      	ldr	r2, [pc, #148]	@ (80034e4 <HAL_DMAEx_List_LinkQ+0x11c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d00e      	beq.n	8003472 <HAL_DMAEx_List_LinkQ+0xaa>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a23      	ldr	r2, [pc, #140]	@ (80034e8 <HAL_DMAEx_List_LinkQ+0x120>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d009      	beq.n	8003472 <HAL_DMAEx_List_LinkQ+0xaa>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a22      	ldr	r2, [pc, #136]	@ (80034ec <HAL_DMAEx_List_LinkQ+0x124>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d004      	beq.n	8003472 <HAL_DMAEx_List_LinkQ+0xaa>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a20      	ldr	r2, [pc, #128]	@ (80034f0 <HAL_DMAEx_List_LinkQ+0x128>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d101      	bne.n	8003476 <HAL_DMAEx_List_LinkQ+0xae>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <HAL_DMAEx_List_LinkQ+0xb0>
 8003476:	2300      	movs	r3, #0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10b      	bne.n	8003494 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003486:	2b00      	cmp	r3, #0
 8003488:	d004      	beq.n	8003494 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2203      	movs	r2, #3
 800348e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e019      	b.n	80034c8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003498:	2b81      	cmp	r3, #129	@ 0x81
 800349a:	d108      	bne.n	80034ae <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10d      	bne.n	80034c0 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2204      	movs	r2, #4
 80034a8:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e00c      	b.n	80034c8 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d004      	beq.n	80034c0 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2204      	movs	r2, #4
 80034ba:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e003      	b.n	80034c8 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	40020650 	.word	0x40020650
 80034d8:	50020650 	.word	0x50020650
 80034dc:	400206d0 	.word	0x400206d0
 80034e0:	500206d0 	.word	0x500206d0
 80034e4:	40020750 	.word	0x40020750
 80034e8:	50020750 	.word	0x50020750
 80034ec:	400207d0 	.word	0x400207d0
 80034f0:	500207d0 	.word	0x500207d0

080034f4 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003504:	4313      	orrs	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a85      	ldr	r2, [pc, #532]	@ (8003724 <DMA_List_Init+0x230>)
 800350e:	4293      	cmp	r3, r2
 8003510:	f000 80a0 	beq.w	8003654 <DMA_List_Init+0x160>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a83      	ldr	r2, [pc, #524]	@ (8003728 <DMA_List_Init+0x234>)
 800351a:	4293      	cmp	r3, r2
 800351c:	f000 809a 	beq.w	8003654 <DMA_List_Init+0x160>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a81      	ldr	r2, [pc, #516]	@ (800372c <DMA_List_Init+0x238>)
 8003526:	4293      	cmp	r3, r2
 8003528:	f000 8094 	beq.w	8003654 <DMA_List_Init+0x160>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a7f      	ldr	r2, [pc, #508]	@ (8003730 <DMA_List_Init+0x23c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	f000 808e 	beq.w	8003654 <DMA_List_Init+0x160>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a7d      	ldr	r2, [pc, #500]	@ (8003734 <DMA_List_Init+0x240>)
 800353e:	4293      	cmp	r3, r2
 8003540:	f000 8088 	beq.w	8003654 <DMA_List_Init+0x160>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a7b      	ldr	r2, [pc, #492]	@ (8003738 <DMA_List_Init+0x244>)
 800354a:	4293      	cmp	r3, r2
 800354c:	f000 8082 	beq.w	8003654 <DMA_List_Init+0x160>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a79      	ldr	r2, [pc, #484]	@ (800373c <DMA_List_Init+0x248>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d07c      	beq.n	8003654 <DMA_List_Init+0x160>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a78      	ldr	r2, [pc, #480]	@ (8003740 <DMA_List_Init+0x24c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d077      	beq.n	8003654 <DMA_List_Init+0x160>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a76      	ldr	r2, [pc, #472]	@ (8003744 <DMA_List_Init+0x250>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d072      	beq.n	8003654 <DMA_List_Init+0x160>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a75      	ldr	r2, [pc, #468]	@ (8003748 <DMA_List_Init+0x254>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d06d      	beq.n	8003654 <DMA_List_Init+0x160>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a73      	ldr	r2, [pc, #460]	@ (800374c <DMA_List_Init+0x258>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d068      	beq.n	8003654 <DMA_List_Init+0x160>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a72      	ldr	r2, [pc, #456]	@ (8003750 <DMA_List_Init+0x25c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d063      	beq.n	8003654 <DMA_List_Init+0x160>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a70      	ldr	r2, [pc, #448]	@ (8003754 <DMA_List_Init+0x260>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d05e      	beq.n	8003654 <DMA_List_Init+0x160>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a6f      	ldr	r2, [pc, #444]	@ (8003758 <DMA_List_Init+0x264>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d059      	beq.n	8003654 <DMA_List_Init+0x160>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a6d      	ldr	r2, [pc, #436]	@ (800375c <DMA_List_Init+0x268>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d054      	beq.n	8003654 <DMA_List_Init+0x160>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a6c      	ldr	r2, [pc, #432]	@ (8003760 <DMA_List_Init+0x26c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d04f      	beq.n	8003654 <DMA_List_Init+0x160>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a6a      	ldr	r2, [pc, #424]	@ (8003764 <DMA_List_Init+0x270>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d04a      	beq.n	8003654 <DMA_List_Init+0x160>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a69      	ldr	r2, [pc, #420]	@ (8003768 <DMA_List_Init+0x274>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d045      	beq.n	8003654 <DMA_List_Init+0x160>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a67      	ldr	r2, [pc, #412]	@ (800376c <DMA_List_Init+0x278>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d040      	beq.n	8003654 <DMA_List_Init+0x160>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a66      	ldr	r2, [pc, #408]	@ (8003770 <DMA_List_Init+0x27c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d03b      	beq.n	8003654 <DMA_List_Init+0x160>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a64      	ldr	r2, [pc, #400]	@ (8003774 <DMA_List_Init+0x280>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d036      	beq.n	8003654 <DMA_List_Init+0x160>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a63      	ldr	r2, [pc, #396]	@ (8003778 <DMA_List_Init+0x284>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d031      	beq.n	8003654 <DMA_List_Init+0x160>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a61      	ldr	r2, [pc, #388]	@ (800377c <DMA_List_Init+0x288>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d02c      	beq.n	8003654 <DMA_List_Init+0x160>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a60      	ldr	r2, [pc, #384]	@ (8003780 <DMA_List_Init+0x28c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d027      	beq.n	8003654 <DMA_List_Init+0x160>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a5e      	ldr	r2, [pc, #376]	@ (8003784 <DMA_List_Init+0x290>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d022      	beq.n	8003654 <DMA_List_Init+0x160>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a5d      	ldr	r2, [pc, #372]	@ (8003788 <DMA_List_Init+0x294>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d01d      	beq.n	8003654 <DMA_List_Init+0x160>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a5b      	ldr	r2, [pc, #364]	@ (800378c <DMA_List_Init+0x298>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d018      	beq.n	8003654 <DMA_List_Init+0x160>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a5a      	ldr	r2, [pc, #360]	@ (8003790 <DMA_List_Init+0x29c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d013      	beq.n	8003654 <DMA_List_Init+0x160>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a58      	ldr	r2, [pc, #352]	@ (8003794 <DMA_List_Init+0x2a0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00e      	beq.n	8003654 <DMA_List_Init+0x160>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a57      	ldr	r2, [pc, #348]	@ (8003798 <DMA_List_Init+0x2a4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d009      	beq.n	8003654 <DMA_List_Init+0x160>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a55      	ldr	r2, [pc, #340]	@ (800379c <DMA_List_Init+0x2a8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d004      	beq.n	8003654 <DMA_List_Init+0x160>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a54      	ldr	r2, [pc, #336]	@ (80037a0 <DMA_List_Init+0x2ac>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d101      	bne.n	8003658 <DMA_List_Init+0x164>
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <DMA_List_Init+0x166>
 8003658:	2300      	movs	r3, #0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d004      	beq.n	8003668 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	430a      	orrs	r2, r1
 800367a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2200      	movs	r2, #0
 8003682:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800368c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2200      	movs	r2, #0
 8003694:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2200      	movs	r2, #0
 800369c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a36      	ldr	r2, [pc, #216]	@ (8003784 <DMA_List_Init+0x290>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d022      	beq.n	80036f6 <DMA_List_Init+0x202>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a34      	ldr	r2, [pc, #208]	@ (8003788 <DMA_List_Init+0x294>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01d      	beq.n	80036f6 <DMA_List_Init+0x202>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a33      	ldr	r2, [pc, #204]	@ (800378c <DMA_List_Init+0x298>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d018      	beq.n	80036f6 <DMA_List_Init+0x202>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a31      	ldr	r2, [pc, #196]	@ (8003790 <DMA_List_Init+0x29c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <DMA_List_Init+0x202>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a30      	ldr	r2, [pc, #192]	@ (8003794 <DMA_List_Init+0x2a0>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00e      	beq.n	80036f6 <DMA_List_Init+0x202>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a2e      	ldr	r2, [pc, #184]	@ (8003798 <DMA_List_Init+0x2a4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d009      	beq.n	80036f6 <DMA_List_Init+0x202>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a2d      	ldr	r2, [pc, #180]	@ (800379c <DMA_List_Init+0x2a8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d004      	beq.n	80036f6 <DMA_List_Init+0x202>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a2b      	ldr	r2, [pc, #172]	@ (80037a0 <DMA_List_Init+0x2ac>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d101      	bne.n	80036fa <DMA_List_Init+0x206>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <DMA_List_Init+0x208>
 80036fa:	2300      	movs	r3, #0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d007      	beq.n	8003710 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2200      	movs	r2, #0
 8003706:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2200      	movs	r2, #0
 800370e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2200      	movs	r2, #0
 8003716:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40020050 	.word	0x40020050
 8003728:	50020050 	.word	0x50020050
 800372c:	400200d0 	.word	0x400200d0
 8003730:	500200d0 	.word	0x500200d0
 8003734:	40020150 	.word	0x40020150
 8003738:	50020150 	.word	0x50020150
 800373c:	400201d0 	.word	0x400201d0
 8003740:	500201d0 	.word	0x500201d0
 8003744:	40020250 	.word	0x40020250
 8003748:	50020250 	.word	0x50020250
 800374c:	400202d0 	.word	0x400202d0
 8003750:	500202d0 	.word	0x500202d0
 8003754:	40020350 	.word	0x40020350
 8003758:	50020350 	.word	0x50020350
 800375c:	400203d0 	.word	0x400203d0
 8003760:	500203d0 	.word	0x500203d0
 8003764:	40020450 	.word	0x40020450
 8003768:	50020450 	.word	0x50020450
 800376c:	400204d0 	.word	0x400204d0
 8003770:	500204d0 	.word	0x500204d0
 8003774:	40020550 	.word	0x40020550
 8003778:	50020550 	.word	0x50020550
 800377c:	400205d0 	.word	0x400205d0
 8003780:	500205d0 	.word	0x500205d0
 8003784:	40020650 	.word	0x40020650
 8003788:	50020650 	.word	0x50020650
 800378c:	400206d0 	.word	0x400206d0
 8003790:	500206d0 	.word	0x500206d0
 8003794:	40020750 	.word	0x40020750
 8003798:	50020750 	.word	0x50020750
 800379c:	400207d0 	.word	0x400207d0
 80037a0:	500207d0 	.word	0x500207d0

080037a4 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80037b6:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 80037bc:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80037c2:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 80037c8:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d017      	beq.n	800380a <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e6:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ec:	3b01      	subs	r3, #1
 80037ee:	051b      	lsls	r3, r3, #20
 80037f0:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80037f4:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fa:	3b01      	subs	r3, #1
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003802:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003804:	431a      	orrs	r2, r3
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6859      	ldr	r1, [r3, #4]
 8003812:	f240 237f 	movw	r3, #639	@ 0x27f
 8003816:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003818:	431a      	orrs	r2, r3
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003826:	d10c      	bne.n	8003842 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d011      	beq.n	8003858 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	e00a      	b.n	8003858 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800384a:	d105      	bne.n	8003858 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00f      	beq.n	8003880 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386c:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003872:	041b      	lsls	r3, r3, #16
 8003874:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003878:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800387a:	431a      	orrs	r2, r3
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003884:	b29a      	uxth	r2, r3
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d04e      	beq.n	8003934 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800389e:	3b01      	subs	r3, #1
 80038a0:	0419      	lsls	r1, r3, #16
 80038a2:	4b6a      	ldr	r3, [pc, #424]	@ (8003a4c <DMA_List_BuildNode+0x2a8>)
 80038a4:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80038a6:	431a      	orrs	r2, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	da06      	bge.n	80038c2 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	e005      	b.n	80038ce <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	da06      	bge.n	80038e4 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	609a      	str	r2, [r3, #8]
 80038e2:	e005      	b.n	80038f0 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	da06      	bge.n	8003906 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	e005      	b.n	8003912 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003916:	2b00      	cmp	r3, #0
 8003918:	da06      	bge.n	8003928 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	609a      	str	r2, [r3, #8]
 8003926:	e005      	b.n	8003934 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d05d      	beq.n	8003a0c <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003954:	2b00      	cmp	r3, #0
 8003956:	da09      	bge.n	800396c <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800395c:	425b      	negs	r3, r3
 800395e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	615a      	str	r2, [r3, #20]
 800396a:	e005      	b.n	8003978 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003970:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800397c:	2b00      	cmp	r3, #0
 800397e:	da0d      	bge.n	800399c <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003984:	425b      	negs	r3, r3
 8003986:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	695a      	ldr	r2, [r3, #20]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	0419      	lsls	r1, r3, #16
 8003990:	4b2f      	ldr	r3, [pc, #188]	@ (8003a50 <DMA_List_BuildNode+0x2ac>)
 8003992:	400b      	ands	r3, r1
 8003994:	431a      	orrs	r2, r3
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	615a      	str	r2, [r3, #20]
 800399a:	e009      	b.n	80039b0 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a4:	0419      	lsls	r1, r3, #16
 80039a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a50 <DMA_List_BuildNode+0x2ac>)
 80039a8:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80039aa:	431a      	orrs	r2, r3
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	da08      	bge.n	80039ca <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039bc:	425b      	negs	r3, r3
 80039be:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	619a      	str	r2, [r3, #24]
 80039c8:	e004      	b.n	80039d4 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ce:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	da0b      	bge.n	80039f4 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e0:	425b      	negs	r3, r3
 80039e2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80039ec:	431a      	orrs	r2, r3
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	619a      	str	r2, [r3, #24]
 80039f2:	e007      	b.n	8003a04 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fc:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80039fe:	431a      	orrs	r2, r3
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2200      	movs	r2, #0
 8003a08:	61da      	str	r2, [r3, #28]
 8003a0a:	e002      	b.n	8003a12 <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d006      	beq.n	8003a34 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8003a32:	e005      	b.n	8003a40 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	621a      	str	r2, [r3, #32]
}
 8003a40:	bf00      	nop
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	07ff0000 	.word	0x07ff0000
 8003a50:	1fff0000 	.word	0x1fff0000

08003a54 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	0c1b      	lsrs	r3, r3, #16
 8003a6c:	041b      	lsls	r3, r3, #16
 8003a6e:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	e00a      	b.n	8003a96 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	e004      	b.n	8003a96 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	0c1b      	lsrs	r3, r3, #16
 8003a9a:	041b      	lsls	r3, r3, #16
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d001      	beq.n	8003aa6 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	371c      	adds	r7, #28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d004      	beq.n	8003ad4 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	e00e      	b.n	8003af2 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d004      	beq.n	8003ae4 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	e006      	b.n	8003af2 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d007      	beq.n	8003b08 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d001      	beq.n	8003b08 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8003b04:	2302      	movs	r3, #2
 8003b06:	e00b      	b.n	8003b20 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d007      	beq.n	8003b1e <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d001      	beq.n	8003b1e <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e000      	b.n	8003b20 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	371c      	adds	r7, #28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00c      	beq.n	8003b5e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b84 <DMA_List_GetCLLRNodeInfo+0x58>)
 8003b4e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00f      	beq.n	8003b76 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2207      	movs	r2, #7
 8003b5a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8003b5c:	e00b      	b.n	8003b76 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4a08      	ldr	r2, [pc, #32]	@ (8003b88 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8003b68:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2205      	movs	r2, #5
 8003b74:	601a      	str	r2, [r3, #0]
}
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	fe010000 	.word	0xfe010000
 8003b88:	f8010000 	.word	0xf8010000

08003b8c <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b089      	sub	sp, #36	@ 0x24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d142      	bne.n	8003c36 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8003bb0:	e01d      	b.n	8003bee <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d107      	bne.n	8003bc8 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
 8003bc6:	e00f      	b.n	8003be8 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	0c1b      	lsrs	r3, r3, #16
 8003bd2:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8003be0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	3301      	adds	r3, #1
 8003bec:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d3dc      	bcc.n	8003bb2 <DMA_List_FindNode+0x26>
 8003bf8:	e029      	b.n	8003c4e <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d107      	bne.n	8003c10 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
 8003c0e:	e00f      	b.n	8003c30 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	0c1b      	lsrs	r3, r3, #16
 8003c1a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4413      	add	r3, r2
 8003c20:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8003c28:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	3301      	adds	r3, #1
 8003c34:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d206      	bcs.n	8003c4e <DMA_List_FindNode+0xc2>
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003c46:	4013      	ands	r3, r2
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d1d5      	bne.n	8003bfa <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d001      	beq.n	8003c66 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e02b      	b.n	8003cbe <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	0c1b      	lsrs	r3, r3, #16
 8003c72:	041b      	lsls	r3, r3, #16
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	0c1b      	lsrs	r3, r3, #16
 8003c82:	041b      	lsls	r3, r3, #16
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	461a      	mov	r2, r3
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00f      	beq.n	8003cbc <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8003cac:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	0c1b      	lsrs	r3, r3, #16
 8003cb4:	041b      	lsls	r3, r3, #16
 8003cb6:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3724      	adds	r7, #36	@ 0x24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <DMA_List_ResetQueueNodes>:
  * @param  NodeInfo : Pointer to a DMA_NodeInQInfoTypeDef structure that contains node linked to queue information.
  * @retval None.
  */
static void DMA_List_ResetQueueNodes(DMA_QListTypeDef const *const pQList,
                                     DMA_NodeInQInfoTypeDef const *const NodeInfo)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b087      	sub	sp, #28
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
  uint32_t node_idx = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
  uint32_t currentnode_address  = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	613b      	str	r3, [r7, #16]
  uint32_t previousnode_address;
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60bb      	str	r3, [r7, #8]

  /* Check that previous node is linked to the selected queue */
  while (node_idx < pQList->NodeNumber)
 8003ce2:	e031      	b.n	8003d48 <DMA_List_ResetQueueNodes+0x7e>
  {
    /* Get head node address */
    if (node_idx == 0U)
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d110      	bne.n	8003d0c <DMA_List_ResetQueueNodes+0x42>
    {
      previousnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]
      currentnode_address  = (pQList->Head->LinkRegisters[cllr_offset] & DMA_CLLR_LA);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d02:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003d06:	4013      	ands	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	e00f      	b.n	8003d2c <DMA_List_ResetQueueNodes+0x62>
    }
    /* Calculate nodes addresses */
    else
    {
      previousnode_address = currentnode_address;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	60fb      	str	r3, [r7, #12]
      currentnode_address =
        ((DMA_NodeTypeDef *)(currentnode_address +
                             ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	0c1b      	lsrs	r3, r3, #16
 8003d16:	041b      	lsls	r3, r3, #16
        ((DMA_NodeTypeDef *)(currentnode_address +
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	461a      	mov	r2, r3
                             ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
      currentnode_address =
 8003d24:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003d28:	4013      	ands	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
    }

    /* Reset node */
    ((DMA_NodeTypeDef *)(previousnode_address +
                         ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] = 0U;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	0c1b      	lsrs	r3, r3, #16
 8003d32:	041b      	lsls	r3, r3, #16
    ((DMA_NodeTypeDef *)(previousnode_address +
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4413      	add	r3, r2
 8003d38:	4619      	mov	r1, r3
                         ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] = 0U;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* Increment node index */
    node_idx++;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	3301      	adds	r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
  while (node_idx < pQList->NodeNumber)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d3c8      	bcc.n	8003ce4 <DMA_List_ResetQueueNodes+0x1a>
  }
}
 8003d52:	bf00      	nop
 8003d54:	bf00      	nop
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b089      	sub	sp, #36	@ 0x24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003d72:	e1ba      	b.n	80040ea <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	2101      	movs	r1, #1
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d80:	4013      	ands	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 81aa 	beq.w	80040e4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a55      	ldr	r2, [pc, #340]	@ (8003ee8 <HAL_GPIO_Init+0x188>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d15d      	bne.n	8003e54 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003d9e:	2201      	movs	r2, #1
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	43db      	mvns	r3, r3
 8003da8:	69fa      	ldr	r2, [r7, #28]
 8003daa:	4013      	ands	r3, r2
 8003dac:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f003 0201 	and.w	r2, r3, #1
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69fa      	ldr	r2, [r7, #28]
 8003dc6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003dc8:	4a48      	ldr	r2, [pc, #288]	@ (8003eec <HAL_GPIO_Init+0x18c>)
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003dd0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003dd2:	4a46      	ldr	r2, [pc, #280]	@ (8003eec <HAL_GPIO_Init+0x18c>)
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	4413      	add	r3, r2
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	08da      	lsrs	r2, r3, #3
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	3208      	adds	r2, #8
 8003de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dea:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	220f      	movs	r2, #15
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	220b      	movs	r2, #11
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	08da      	lsrs	r2, r3, #3
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	3208      	adds	r2, #8
 8003e1e:	69f9      	ldr	r1, [r7, #28]
 8003e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	2203      	movs	r2, #3
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	2202      	movs	r2, #2
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	69fa      	ldr	r2, [r7, #28]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	e067      	b.n	8003f24 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d003      	beq.n	8003e64 <HAL_GPIO_Init+0x104>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b12      	cmp	r3, #18
 8003e62:	d145      	bne.n	8003ef0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	08da      	lsrs	r2, r3, #3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3208      	adds	r2, #8
 8003e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e70:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	220f      	movs	r2, #15
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	43db      	mvns	r3, r3
 8003e82:	69fa      	ldr	r2, [r7, #28]
 8003e84:	4013      	ands	r3, r2
 8003e86:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	f003 020f 	and.w	r2, r3, #15
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	08da      	lsrs	r2, r3, #3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3208      	adds	r2, #8
 8003eaa:	69f9      	ldr	r1, [r7, #28]
 8003eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	2203      	movs	r2, #3
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	69fa      	ldr	r2, [r7, #28]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 0203 	and.w	r2, r3, #3
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	69fa      	ldr	r2, [r7, #28]
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	e01e      	b.n	8003f24 <HAL_GPIO_Init+0x1c4>
 8003ee6:	bf00      	nop
 8003ee8:	46020000 	.word	0x46020000
 8003eec:	0802d894 	.word	0x0802d894
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	2203      	movs	r2, #3
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	4013      	ands	r3, r2
 8003f06:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 0203 	and.w	r2, r3, #3
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d00b      	beq.n	8003f44 <HAL_GPIO_Init+0x1e4>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d007      	beq.n	8003f44 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f38:	2b11      	cmp	r3, #17
 8003f3a:	d003      	beq.n	8003f44 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b12      	cmp	r3, #18
 8003f42:	d130      	bne.n	8003fa6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	2203      	movs	r2, #3
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	69fa      	ldr	r2, [r7, #28]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	43db      	mvns	r3, r3
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	4013      	ands	r3, r2
 8003f88:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	091b      	lsrs	r3, r3, #4
 8003f90:	f003 0201 	and.w	r2, r3, #1
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d017      	beq.n	8003fde <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	2203      	movs	r2, #3
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d07c      	beq.n	80040e4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003fea:	4a47      	ldr	r2, [pc, #284]	@ (8004108 <HAL_GPIO_Init+0x3a8>)
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	089b      	lsrs	r3, r3, #2
 8003ff0:	3318      	adds	r3, #24
 8003ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	220f      	movs	r2, #15
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43db      	mvns	r3, r3
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	4013      	ands	r3, r2
 800400c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	0a9a      	lsrs	r2, r3, #10
 8004012:	4b3e      	ldr	r3, [pc, #248]	@ (800410c <HAL_GPIO_Init+0x3ac>)
 8004014:	4013      	ands	r3, r2
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	f002 0203 	and.w	r2, r2, #3
 800401c:	00d2      	lsls	r2, r2, #3
 800401e:	4093      	lsls	r3, r2
 8004020:	69fa      	ldr	r2, [r7, #28]
 8004022:	4313      	orrs	r3, r2
 8004024:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004026:	4938      	ldr	r1, [pc, #224]	@ (8004108 <HAL_GPIO_Init+0x3a8>)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	089b      	lsrs	r3, r3, #2
 800402c:	3318      	adds	r3, #24
 800402e:	69fa      	ldr	r2, [r7, #28]
 8004030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004034:	4b34      	ldr	r3, [pc, #208]	@ (8004108 <HAL_GPIO_Init+0x3a8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	43db      	mvns	r3, r3
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	4013      	ands	r3, r2
 8004042:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004058:	4a2b      	ldr	r2, [pc, #172]	@ (8004108 <HAL_GPIO_Init+0x3a8>)
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800405e:	4b2a      	ldr	r3, [pc, #168]	@ (8004108 <HAL_GPIO_Init+0x3a8>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	43db      	mvns	r3, r3
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	4013      	ands	r3, r2
 800406c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004082:	4a21      	ldr	r2, [pc, #132]	@ (8004108 <HAL_GPIO_Init+0x3a8>)
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004088:	4b1f      	ldr	r3, [pc, #124]	@ (8004108 <HAL_GPIO_Init+0x3a8>)
 800408a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800408e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	43db      	mvns	r3, r3
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	4013      	ands	r3, r2
 8004098:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80040ae:	4a16      	ldr	r2, [pc, #88]	@ (8004108 <HAL_GPIO_Init+0x3a8>)
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80040b6:	4b14      	ldr	r3, [pc, #80]	@ (8004108 <HAL_GPIO_Init+0x3a8>)
 80040b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	4013      	ands	r3, r2
 80040c6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80040dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004108 <HAL_GPIO_Init+0x3a8>)
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	3301      	adds	r3, #1
 80040e8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f47f ae3d 	bne.w	8003d74 <HAL_GPIO_Init+0x14>
  }
}
 80040fa:	bf00      	nop
 80040fc:	bf00      	nop
 80040fe:	3724      	adds	r7, #36	@ 0x24
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	46022000 	.word	0x46022000
 800410c:	002f7f7f 	.word	0x002f7f7f

08004110 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	887b      	ldrh	r3, [r7, #2]
 8004122:	4013      	ands	r3, r2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004128:	2301      	movs	r3, #1
 800412a:	73fb      	strb	r3, [r7, #15]
 800412c:	e001      	b.n	8004132 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800412e:	2300      	movs	r3, #0
 8004130:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8004132:	7bfb      	ldrb	r3, [r7, #15]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	807b      	strh	r3, [r7, #2]
 800414c:	4613      	mov	r3, r2
 800414e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004150:	787b      	ldrb	r3, [r7, #1]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004156:	887a      	ldrh	r2, [r7, #2]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800415c:	e002      	b.n	8004164 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800415e:	887a      	ldrh	r2, [r7, #2]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e08d      	b.n	800429e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fd f8fa 	bl	8001390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2224      	movs	r2, #36	@ 0x24
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0201 	bic.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d107      	bne.n	80041ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041e6:	609a      	str	r2, [r3, #8]
 80041e8:	e006      	b.n	80041f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80041f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d108      	bne.n	8004212 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800420e:	605a      	str	r2, [r3, #4]
 8004210:	e007      	b.n	8004222 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004220:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6812      	ldr	r2, [r2, #0]
 800422c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004230:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004234:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004244:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69d9      	ldr	r1, [r3, #28]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1a      	ldr	r2, [r3, #32]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	4608      	mov	r0, r1
 80042b2:	4611      	mov	r1, r2
 80042b4:	461a      	mov	r2, r3
 80042b6:	4603      	mov	r3, r0
 80042b8:	817b      	strh	r3, [r7, #10]
 80042ba:	460b      	mov	r3, r1
 80042bc:	813b      	strh	r3, [r7, #8]
 80042be:	4613      	mov	r3, r2
 80042c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b20      	cmp	r3, #32
 80042cc:	f040 80f9 	bne.w	80044c2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_I2C_Mem_Write+0x34>
 80042d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d105      	bne.n	80042e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042e2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0ed      	b.n	80044c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_I2C_Mem_Write+0x4e>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e0e6      	b.n	80044c4 <HAL_I2C_Mem_Write+0x21c>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042fe:	f7fd fded 	bl	8001edc <HAL_GetTick>
 8004302:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	2319      	movs	r3, #25
 800430a:	2201      	movs	r2, #1
 800430c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 fac3 	bl	800489c <I2C_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0d1      	b.n	80044c4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2221      	movs	r2, #33	@ 0x21
 8004324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2240      	movs	r2, #64	@ 0x40
 800432c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a3a      	ldr	r2, [r7, #32]
 800433a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004340:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004348:	88f8      	ldrh	r0, [r7, #6]
 800434a:	893a      	ldrh	r2, [r7, #8]
 800434c:	8979      	ldrh	r1, [r7, #10]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	9301      	str	r3, [sp, #4]
 8004352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	4603      	mov	r3, r0
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f9d3 	bl	8004704 <I2C_RequestMemoryWrite>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e0a9      	b.n	80044c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	2bff      	cmp	r3, #255	@ 0xff
 8004378:	d90e      	bls.n	8004398 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	22ff      	movs	r2, #255	@ 0xff
 800437e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004384:	b2da      	uxtb	r2, r3
 8004386:	8979      	ldrh	r1, [r7, #10]
 8004388:	2300      	movs	r3, #0
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fc47 	bl	8004c24 <I2C_TransferConfig>
 8004396:	e00f      	b.n	80043b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	8979      	ldrh	r1, [r7, #10]
 80043aa:	2300      	movs	r3, #0
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 fc36 	bl	8004c24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 fac6 	bl	800494e <I2C_WaitOnTXISFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e07b      	b.n	80044c4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d0:	781a      	ldrb	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d034      	beq.n	8004470 <HAL_I2C_Mem_Write+0x1c8>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440a:	2b00      	cmp	r3, #0
 800440c:	d130      	bne.n	8004470 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004414:	2200      	movs	r2, #0
 8004416:	2180      	movs	r1, #128	@ 0x80
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 fa3f 	bl	800489c <I2C_WaitOnFlagUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e04d      	b.n	80044c4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442c:	b29b      	uxth	r3, r3
 800442e:	2bff      	cmp	r3, #255	@ 0xff
 8004430:	d90e      	bls.n	8004450 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	22ff      	movs	r2, #255	@ 0xff
 8004436:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443c:	b2da      	uxtb	r2, r3
 800443e:	8979      	ldrh	r1, [r7, #10]
 8004440:	2300      	movs	r3, #0
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 fbeb 	bl	8004c24 <I2C_TransferConfig>
 800444e:	e00f      	b.n	8004470 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800445e:	b2da      	uxtb	r2, r3
 8004460:	8979      	ldrh	r1, [r7, #10]
 8004462:	2300      	movs	r3, #0
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fbda 	bl	8004c24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d19e      	bne.n	80043b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 faac 	bl	80049dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e01a      	b.n	80044c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2220      	movs	r2, #32
 8004494:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6859      	ldr	r1, [r3, #4]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	4b0a      	ldr	r3, [pc, #40]	@ (80044cc <HAL_I2C_Mem_Write+0x224>)
 80044a2:	400b      	ands	r3, r1
 80044a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80044be:	2300      	movs	r3, #0
 80044c0:	e000      	b.n	80044c4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80044c2:	2302      	movs	r3, #2
  }
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	fe00e800 	.word	0xfe00e800

080044d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af02      	add	r7, sp, #8
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	4608      	mov	r0, r1
 80044da:	4611      	mov	r1, r2
 80044dc:	461a      	mov	r2, r3
 80044de:	4603      	mov	r3, r0
 80044e0:	817b      	strh	r3, [r7, #10]
 80044e2:	460b      	mov	r3, r1
 80044e4:	813b      	strh	r3, [r7, #8]
 80044e6:	4613      	mov	r3, r2
 80044e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	f040 80fd 	bne.w	80046f2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <HAL_I2C_Mem_Read+0x34>
 80044fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004500:	2b00      	cmp	r3, #0
 8004502:	d105      	bne.n	8004510 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800450a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e0f1      	b.n	80046f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <HAL_I2C_Mem_Read+0x4e>
 800451a:	2302      	movs	r3, #2
 800451c:	e0ea      	b.n	80046f4 <HAL_I2C_Mem_Read+0x224>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004526:	f7fd fcd9 	bl	8001edc <HAL_GetTick>
 800452a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	2319      	movs	r3, #25
 8004532:	2201      	movs	r2, #1
 8004534:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f9af 	bl	800489c <I2C_WaitOnFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e0d5      	b.n	80046f4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2222      	movs	r2, #34	@ 0x22
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2240      	movs	r2, #64	@ 0x40
 8004554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a3a      	ldr	r2, [r7, #32]
 8004562:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004568:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004570:	88f8      	ldrh	r0, [r7, #6]
 8004572:	893a      	ldrh	r2, [r7, #8]
 8004574:	8979      	ldrh	r1, [r7, #10]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	9301      	str	r3, [sp, #4]
 800457a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	4603      	mov	r3, r0
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 f913 	bl	80047ac <I2C_RequestMemoryRead>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e0ad      	b.n	80046f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	2bff      	cmp	r3, #255	@ 0xff
 80045a0:	d90e      	bls.n	80045c0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	22ff      	movs	r2, #255	@ 0xff
 80045a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	8979      	ldrh	r1, [r7, #10]
 80045b0:	4b52      	ldr	r3, [pc, #328]	@ (80046fc <HAL_I2C_Mem_Read+0x22c>)
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fb33 	bl	8004c24 <I2C_TransferConfig>
 80045be:	e00f      	b.n	80045e0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	8979      	ldrh	r1, [r7, #10]
 80045d2:	4b4a      	ldr	r3, [pc, #296]	@ (80046fc <HAL_I2C_Mem_Read+0x22c>)
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fb22 	bl	8004c24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e6:	2200      	movs	r2, #0
 80045e8:	2104      	movs	r1, #4
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 f956 	bl	800489c <I2C_WaitOnFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e07c      	b.n	80046f4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d034      	beq.n	80046a0 <HAL_I2C_Mem_Read+0x1d0>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800463a:	2b00      	cmp	r3, #0
 800463c:	d130      	bne.n	80046a0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004644:	2200      	movs	r2, #0
 8004646:	2180      	movs	r1, #128	@ 0x80
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f927 	bl	800489c <I2C_WaitOnFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e04d      	b.n	80046f4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	2bff      	cmp	r3, #255	@ 0xff
 8004660:	d90e      	bls.n	8004680 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	22ff      	movs	r2, #255	@ 0xff
 8004666:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800466c:	b2da      	uxtb	r2, r3
 800466e:	8979      	ldrh	r1, [r7, #10]
 8004670:	2300      	movs	r3, #0
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 fad3 	bl	8004c24 <I2C_TransferConfig>
 800467e:	e00f      	b.n	80046a0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468e:	b2da      	uxtb	r2, r3
 8004690:	8979      	ldrh	r1, [r7, #10]
 8004692:	2300      	movs	r3, #0
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 fac2 	bl	8004c24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d19a      	bne.n	80045e0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f994 	bl	80049dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e01a      	b.n	80046f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2220      	movs	r2, #32
 80046c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6859      	ldr	r1, [r3, #4]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004700 <HAL_I2C_Mem_Read+0x230>)
 80046d2:	400b      	ands	r3, r1
 80046d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	e000      	b.n	80046f4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80046f2:	2302      	movs	r3, #2
  }
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	80002400 	.word	0x80002400
 8004700:	fe00e800 	.word	0xfe00e800

08004704 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af02      	add	r7, sp, #8
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	4608      	mov	r0, r1
 800470e:	4611      	mov	r1, r2
 8004710:	461a      	mov	r2, r3
 8004712:	4603      	mov	r3, r0
 8004714:	817b      	strh	r3, [r7, #10]
 8004716:	460b      	mov	r3, r1
 8004718:	813b      	strh	r3, [r7, #8]
 800471a:	4613      	mov	r3, r2
 800471c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800471e:	88fb      	ldrh	r3, [r7, #6]
 8004720:	b2da      	uxtb	r2, r3
 8004722:	8979      	ldrh	r1, [r7, #10]
 8004724:	4b20      	ldr	r3, [pc, #128]	@ (80047a8 <I2C_RequestMemoryWrite+0xa4>)
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 fa79 	bl	8004c24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	69b9      	ldr	r1, [r7, #24]
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 f909 	bl	800494e <I2C_WaitOnTXISFlagUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e02c      	b.n	80047a0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d105      	bne.n	8004758 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800474c:	893b      	ldrh	r3, [r7, #8]
 800474e:	b2da      	uxtb	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	629a      	str	r2, [r3, #40]	@ 0x28
 8004756:	e015      	b.n	8004784 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004758:	893b      	ldrh	r3, [r7, #8]
 800475a:	0a1b      	lsrs	r3, r3, #8
 800475c:	b29b      	uxth	r3, r3
 800475e:	b2da      	uxtb	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	69b9      	ldr	r1, [r7, #24]
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f8ef 	bl	800494e <I2C_WaitOnTXISFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e012      	b.n	80047a0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800477a:	893b      	ldrh	r3, [r7, #8]
 800477c:	b2da      	uxtb	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	2200      	movs	r2, #0
 800478c:	2180      	movs	r1, #128	@ 0x80
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 f884 	bl	800489c <I2C_WaitOnFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	80002000 	.word	0x80002000

080047ac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	4608      	mov	r0, r1
 80047b6:	4611      	mov	r1, r2
 80047b8:	461a      	mov	r2, r3
 80047ba:	4603      	mov	r3, r0
 80047bc:	817b      	strh	r3, [r7, #10]
 80047be:	460b      	mov	r3, r1
 80047c0:	813b      	strh	r3, [r7, #8]
 80047c2:	4613      	mov	r3, r2
 80047c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80047c6:	88fb      	ldrh	r3, [r7, #6]
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	8979      	ldrh	r1, [r7, #10]
 80047cc:	4b20      	ldr	r3, [pc, #128]	@ (8004850 <I2C_RequestMemoryRead+0xa4>)
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	2300      	movs	r3, #0
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 fa26 	bl	8004c24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	69b9      	ldr	r1, [r7, #24]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f8b6 	bl	800494e <I2C_WaitOnTXISFlagUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e02c      	b.n	8004846 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047ec:	88fb      	ldrh	r3, [r7, #6]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d105      	bne.n	80047fe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047f2:	893b      	ldrh	r3, [r7, #8]
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80047fc:	e015      	b.n	800482a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047fe:	893b      	ldrh	r3, [r7, #8]
 8004800:	0a1b      	lsrs	r3, r3, #8
 8004802:	b29b      	uxth	r3, r3
 8004804:	b2da      	uxtb	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	69b9      	ldr	r1, [r7, #24]
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 f89c 	bl	800494e <I2C_WaitOnTXISFlagUntilTimeout>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e012      	b.n	8004846 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004820:	893b      	ldrh	r3, [r7, #8]
 8004822:	b2da      	uxtb	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2200      	movs	r2, #0
 8004832:	2140      	movs	r1, #64	@ 0x40
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f831 	bl	800489c <I2C_WaitOnFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	80002000 	.word	0x80002000

08004854 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b02      	cmp	r3, #2
 8004868:	d103      	bne.n	8004872 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2200      	movs	r2, #0
 8004870:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b01      	cmp	r3, #1
 800487e:	d007      	beq.n	8004890 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	619a      	str	r2, [r3, #24]
  }
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	4613      	mov	r3, r2
 80048aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048ac:	e03b      	b.n	8004926 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	6839      	ldr	r1, [r7, #0]
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 f8d6 	bl	8004a64 <I2C_IsErrorOccurred>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e041      	b.n	8004946 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c8:	d02d      	beq.n	8004926 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ca:	f7fd fb07 	bl	8001edc <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d302      	bcc.n	80048e0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d122      	bne.n	8004926 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699a      	ldr	r2, [r3, #24]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	4013      	ands	r3, r2
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	bf0c      	ite	eq
 80048f0:	2301      	moveq	r3, #1
 80048f2:	2300      	movne	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d113      	bne.n	8004926 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004902:	f043 0220 	orr.w	r2, r3, #32
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e00f      	b.n	8004946 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699a      	ldr	r2, [r3, #24]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	4013      	ands	r3, r2
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	429a      	cmp	r2, r3
 8004934:	bf0c      	ite	eq
 8004936:	2301      	moveq	r3, #1
 8004938:	2300      	movne	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	429a      	cmp	r2, r3
 8004942:	d0b4      	beq.n	80048ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800495a:	e033      	b.n	80049c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	68b9      	ldr	r1, [r7, #8]
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f87f 	bl	8004a64 <I2C_IsErrorOccurred>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e031      	b.n	80049d4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004976:	d025      	beq.n	80049c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004978:	f7fd fab0 	bl	8001edc <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	429a      	cmp	r2, r3
 8004986:	d302      	bcc.n	800498e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d11a      	bne.n	80049c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b02      	cmp	r3, #2
 800499a:	d013      	beq.n	80049c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a0:	f043 0220 	orr.w	r2, r3, #32
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e007      	b.n	80049d4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d1c4      	bne.n	800495c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049e8:	e02f      	b.n	8004a4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f838 	bl	8004a64 <I2C_IsErrorOccurred>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e02d      	b.n	8004a5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049fe:	f7fd fa6d 	bl	8001edc <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d302      	bcc.n	8004a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d11a      	bne.n	8004a4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d013      	beq.n	8004a4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a26:	f043 0220 	orr.w	r2, r3, #32
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e007      	b.n	8004a5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d1c8      	bne.n	80049ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08a      	sub	sp, #40	@ 0x28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	f003 0310 	and.w	r3, r3, #16
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d068      	beq.n	8004b62 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2210      	movs	r2, #16
 8004a96:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a98:	e049      	b.n	8004b2e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d045      	beq.n	8004b2e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004aa2:	f7fd fa1b 	bl	8001edc <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d302      	bcc.n	8004ab8 <I2C_IsErrorOccurred+0x54>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d13a      	bne.n	8004b2e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ac2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004aca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ad6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ada:	d121      	bne.n	8004b20 <I2C_IsErrorOccurred+0xbc>
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ae2:	d01d      	beq.n	8004b20 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004ae4:	7cfb      	ldrb	r3, [r7, #19]
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	d01a      	beq.n	8004b20 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004af8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004afa:	f7fd f9ef 	bl	8001edc <HAL_GetTick>
 8004afe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b00:	e00e      	b.n	8004b20 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004b02:	f7fd f9eb 	bl	8001edc <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b19      	cmp	r3, #25
 8004b0e:	d907      	bls.n	8004b20 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	f043 0320 	orr.w	r3, r3, #32
 8004b16:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004b1e:	e006      	b.n	8004b2e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d1e9      	bne.n	8004b02 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d003      	beq.n	8004b44 <I2C_IsErrorOccurred+0xe0>
 8004b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0aa      	beq.n	8004a9a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004b44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d103      	bne.n	8004b54 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2220      	movs	r2, #32
 8004b52:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	f043 0304 	orr.w	r3, r3, #4
 8004b5a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00b      	beq.n	8004b8c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	f043 0301 	orr.w	r3, r3, #1
 8004b7a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00b      	beq.n	8004bae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	f043 0308 	orr.w	r3, r3, #8
 8004b9c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ba6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00b      	beq.n	8004bd0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	f043 0302 	orr.w	r3, r3, #2
 8004bbe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01c      	beq.n	8004c12 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f7ff fe3b 	bl	8004854 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6859      	ldr	r1, [r3, #4]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	4b0d      	ldr	r3, [pc, #52]	@ (8004c20 <I2C_IsErrorOccurred+0x1bc>)
 8004bea:	400b      	ands	r3, r1
 8004bec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004c12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3728      	adds	r7, #40	@ 0x28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	fe00e800 	.word	0xfe00e800

08004c24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	607b      	str	r3, [r7, #4]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	817b      	strh	r3, [r7, #10]
 8004c32:	4613      	mov	r3, r2
 8004c34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c36:	897b      	ldrh	r3, [r7, #10]
 8004c38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c3c:	7a7b      	ldrb	r3, [r7, #9]
 8004c3e:	041b      	lsls	r3, r3, #16
 8004c40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c44:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c52:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	0d5b      	lsrs	r3, r3, #21
 8004c5e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004c62:	4b08      	ldr	r3, [pc, #32]	@ (8004c84 <I2C_TransferConfig+0x60>)
 8004c64:	430b      	orrs	r3, r1
 8004c66:	43db      	mvns	r3, r3
 8004c68:	ea02 0103 	and.w	r1, r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004c76:	bf00      	nop
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	03ff63ff 	.word	0x03ff63ff

08004c88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	d138      	bne.n	8004d10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e032      	b.n	8004d12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2224      	movs	r2, #36	@ 0x24
 8004cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0201 	bic.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004cda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6819      	ldr	r1, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	e000      	b.n	8004d12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d10:	2302      	movs	r3, #2
  }
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b085      	sub	sp, #20
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	d139      	bne.n	8004da8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d101      	bne.n	8004d42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	e033      	b.n	8004daa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2224      	movs	r2, #36	@ 0x24
 8004d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0201 	bic.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004d70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	021b      	lsls	r3, r3, #8
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	e000      	b.n	8004daa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004da8:	2302      	movs	r3, #2
  }
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f043 0201 	orr.w	r2, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	601a      	str	r2, [r3, #0]
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004de4:	f7fd f87a 	bl	8001edc <HAL_GetTick>
 8004de8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d102      	bne.n	8004df6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	73fb      	strb	r3, [r7, #15]
 8004df4:	e0a5      	b.n	8004f42 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f040 809e 	bne.w	8004f42 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7fc fc52 	bl	80016b0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004e0c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fba4 	bl	800555e <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	4b4b      	ldr	r3, [pc, #300]	@ (8004f4c <HAL_OSPI_Init+0x174>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	68d1      	ldr	r1, [r2, #12]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6912      	ldr	r2, [r2, #16]
 8004e28:	3a01      	subs	r2, #1
 8004e2a:	0412      	lsls	r2, r2, #16
 8004e2c:	4311      	orrs	r1, r2
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6952      	ldr	r2, [r2, #20]
 8004e32:	3a01      	subs	r2, #1
 8004e34:	0212      	lsls	r2, r2, #8
 8004e36:	4311      	orrs	r1, r2
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e3c:	4311      	orrs	r1, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	69d2      	ldr	r2, [r2, #28]
 8004e42:	4311      	orrs	r1, r2
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6812      	ldr	r2, [r2, #0]
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1a      	ldr	r2, [r3, #32]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e66:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e7c:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	021a      	lsls	r2, r3, #8
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	2120      	movs	r1, #32
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f001 f89b 	bl	8005fe0 <OSPI_WaitFlagStateUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004eae:	7bfb      	ldrb	r3, [r7, #15]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d146      	bne.n	8004f42 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec2:	1e5a      	subs	r2, r3, #1
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004eea:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0201 	orr.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d107      	bne.n	8004f2a <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 0202 	orr.w	r2, r2, #2
 8004f28:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f32:	d103      	bne.n	8004f3c <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	651a      	str	r2, [r3, #80]	@ 0x50
 8004f3a:	e002      	b.n	8004f42 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	f8e0c0f4 	.word	0xf8e0c0f4

08004f50 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3350      	adds	r3, #80	@ 0x50
 8004f5e:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f74:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d03a      	beq.n	8004ff6 <HAL_OSPI_IRQHandler+0xa6>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d035      	beq.n	8004ff6 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b18      	cmp	r3, #24
 8004f8e:	d10f      	bne.n	8004fb0 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f94:	781a      	ldrb	r2, [r3, #0]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	641a      	str	r2, [r3, #64]	@ 0x40
      hospi->XferCount--;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa8:	1e5a      	subs	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	649a      	str	r2, [r3, #72]	@ 0x48
 8004fae:	e012      	b.n	8004fd6 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b28      	cmp	r3, #40	@ 0x28
 8004fb4:	d10f      	bne.n	8004fd6 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	7812      	ldrb	r2, [r2, #0]
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	641a      	str	r2, [r3, #64]	@ 0x40
      hospi->XferCount--;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd0:	1e5a      	subs	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	649a      	str	r2, [r3, #72]	@ 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d107      	bne.n	8004fee <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004fec:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fa04 	bl	80053fc <HAL_OSPI_FifoThresholdCallback>
 8004ff4:	e0e7      	b.n	80051c6 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d067      	beq.n	80050d0 <HAL_OSPI_IRQHandler+0x180>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d062      	beq.n	80050d0 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b28      	cmp	r3, #40	@ 0x28
 800500e:	d131      	bne.n	8005074 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005014:	2b00      	cmp	r3, #0
 8005016:	d015      	beq.n	8005044 <HAL_OSPI_IRQHandler+0xf4>
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 800501e:	2b00      	cmp	r3, #0
 8005020:	d010      	beq.n	8005044 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	7812      	ldrb	r2, [r2, #0]
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800503c:	1e5a      	subs	r2, r3, #1
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	649a      	str	r2, [r3, #72]	@ 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8005042:	e0bd      	b.n	80051c0 <HAL_OSPI_IRQHandler+0x270>
      }
      else if (hospi->XferCount == 0U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005048:	2b00      	cmp	r3, #0
 800504a:	f040 80b9 	bne.w	80051c0 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2202      	movs	r2, #2
 8005054:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8005064:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2202      	movs	r2, #2
 800506a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f9d9 	bl	8005424 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8005072:	e0a5      	b.n	80051c0 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2202      	movs	r2, #2
 800507a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 800508a:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	651a      	str	r2, [r3, #80]	@ 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2b18      	cmp	r3, #24
 8005096:	d103      	bne.n	80050a0 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f9cd 	bl	8005438 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800509e:	e08f      	b.n	80051c0 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d103      	bne.n	80050ae <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f9b2 	bl	8005410 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80050ac:	e088      	b.n	80051c0 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050b4:	f040 8084 	bne.w	80051c0 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d103      	bne.n	80050c8 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f991 	bl	80053e8 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80050c6:	e07b      	b.n	80051c0 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f983 	bl	80053d4 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80050ce:	e077      	b.n	80051c0 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d01e      	beq.n	8005118 <HAL_OSPI_IRQHandler+0x1c8>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d019      	beq.n	8005118 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2208      	movs	r2, #8
 80050ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 8005108:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2202      	movs	r2, #2
 800510e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f99b 	bl	800544c <HAL_OSPI_StatusMatchCallback>
 8005116:	e056      	b.n	80051c6 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d03c      	beq.n	800519c <HAL_OSPI_IRQHandler+0x24c>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d037      	beq.n	800519c <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2201      	movs	r2, #1
 8005132:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8005142:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01a      	beq.n	800518e <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0204 	bic.w	r2, r2, #4
 8005166:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800516c:	4a18      	ldr	r2, [pc, #96]	@ (80051d0 <HAL_OSPI_IRQHandler+0x280>)
 800516e:	66da      	str	r2, [r3, #108]	@ 0x6c
      if (HAL_DMA_Abort_IT(hospi->hdma) != HAL_OK)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005174:	4618      	mov	r0, r3
 8005176:	f7fd f9e7 	bl	8002548 <HAL_DMA_Abort_IT>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d021      	beq.n	80051c4 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f924 	bl	80053d4 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800518c:	e01a      	b.n	80051c4 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2202      	movs	r2, #2
 8005192:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f91d 	bl	80053d4 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800519a:	e013      	b.n	80051c4 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00f      	beq.n	80051c6 <HAL_OSPI_IRQHandler+0x276>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2210      	movs	r2, #16
 80051b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f951 	bl	8005460 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80051be:	e002      	b.n	80051c6 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80051c0:	bf00      	nop
 80051c2:	e000      	b.n	80051c6 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80051c4:	bf00      	nop
}
 80051c6:	bf00      	nop
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	08005f69 	.word	0x08005f69

080051d4 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	@ 0x28
 80051d8:	af02      	add	r7, sp, #8
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80051e0:	f7fc fe7c 	bl	8001edc <HAL_GetTick>
 80051e4:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ea:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051f0:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d104      	bne.n	8005202 <HAL_OSPI_Command+0x2e>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005200:	d115      	bne.n	800522e <HAL_OSPI_Command+0x5a>
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2b14      	cmp	r3, #20
 8005206:	d107      	bne.n	8005218 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b02      	cmp	r3, #2
 800520e:	d00e      	beq.n	800522e <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b03      	cmp	r3, #3
 8005216:	d00a      	beq.n	800522e <HAL_OSPI_Command+0x5a>
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	2b24      	cmp	r3, #36	@ 0x24
 800521c:	d15b      	bne.n	80052d6 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d003      	beq.n	800522e <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800522a:	2b03      	cmp	r3, #3
 800522c:	d153      	bne.n	80052d6 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	2200      	movs	r2, #0
 8005236:	2120      	movs	r1, #32
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 fed1 	bl	8005fe0 <OSPI_WaitFlagStateUntilTimeout>
 800523e:	4603      	mov	r3, r0
 8005240:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8005242:	7ffb      	ldrb	r3, [r7, #31]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d14c      	bne.n	80052e2 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 ff05 	bl	8006060 <OSPI_ConfigCmd>
 8005256:	4603      	mov	r3, r0
 8005258:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800525a:	7ffb      	ldrb	r3, [r7, #31]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d140      	bne.n	80052e2 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10e      	bne.n	8005286 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	2201      	movs	r2, #1
 8005270:	2102      	movs	r1, #2
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 feb4 	bl	8005fe0 <OSPI_WaitFlagStateUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2202      	movs	r2, #2
 8005282:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8005284:	e02d      	b.n	80052e2 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d103      	bne.n	8005296 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2204      	movs	r2, #4
 8005292:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8005294:	e025      	b.n	80052e2 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d10b      	bne.n	80052b6 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052a2:	2b24      	cmp	r3, #36	@ 0x24
 80052a4:	d103      	bne.n	80052ae <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2204      	movs	r2, #4
 80052aa:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80052ac:	e019      	b.n	80052e2 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2214      	movs	r2, #20
 80052b2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80052b4:	e015      	b.n	80052e2 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d111      	bne.n	80052e2 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052c2:	2b14      	cmp	r3, #20
 80052c4:	d103      	bne.n	80052ce <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2204      	movs	r2, #4
 80052ca:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80052cc:	e009      	b.n	80052e2 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2224      	movs	r2, #36	@ 0x24
 80052d2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80052d4:	e005      	b.n	80052e2 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2210      	movs	r2, #16
 80052de:	655a      	str	r2, [r3, #84]	@ 0x54
 80052e0:	e000      	b.n	80052e4 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 80052e2:	bf00      	nop
  }

  /* Return function status */
  return status;
 80052e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3720      	adds	r7, #32
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b08a      	sub	sp, #40	@ 0x28
 80052f2:	af02      	add	r7, sp, #8
 80052f4:	60f8      	str	r0, [r7, #12]
 80052f6:	60b9      	str	r1, [r7, #8]
 80052f8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80052fa:	f7fc fdef 	bl	8001edc <HAL_GetTick>
 80052fe:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3350      	adds	r3, #80	@ 0x50
 8005306:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d105      	bne.n	800531a <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2208      	movs	r2, #8
 8005316:	655a      	str	r2, [r3, #84]	@ 0x54
 8005318:	e057      	b.n	80053ca <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800531e:	2b04      	cmp	r3, #4
 8005320:	d14e      	bne.n	80053c0 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800534a:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	2201      	movs	r2, #1
 8005354:	2104      	movs	r1, #4
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 fe42 	bl	8005fe0 <OSPI_WaitFlagStateUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8005360:	7ffb      	ldrb	r3, [r7, #31]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d113      	bne.n	800538e <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536a:	781a      	ldrb	r2, [r3, #0]
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800537e:	1e5a      	subs	r2, r3, #1
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1df      	bne.n	800534c <HAL_OSPI_Transmit+0x5e>
 800538c:	e000      	b.n	8005390 <HAL_OSPI_Transmit+0xa2>
          break;
 800538e:	bf00      	nop

      if (status == HAL_OK)
 8005390:	7ffb      	ldrb	r3, [r7, #31]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d119      	bne.n	80053ca <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	2201      	movs	r2, #1
 800539e:	2102      	movs	r1, #2
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 fe1d 	bl	8005fe0 <OSPI_WaitFlagStateUntilTimeout>
 80053a6:	4603      	mov	r3, r0
 80053a8:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80053aa:	7ffb      	ldrb	r3, [r7, #31]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10c      	bne.n	80053ca <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2202      	movs	r2, #2
 80053b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2202      	movs	r2, #2
 80053bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80053be:	e004      	b.n	80053ca <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2210      	movs	r2, #16
 80053c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 80053ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3720      	adds	r7, #32
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b088      	sub	sp, #32
 8005478:	af02      	add	r7, sp, #8
 800547a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8005480:	f7fc fd2c 	bl	8001edc <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800548a:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d104      	bne.n	80054a0 <HAL_OSPI_Abort+0x2c>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d052      	beq.n	8005546 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d014      	beq.n	80054d8 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0204 	bic.w	r2, r2, #4
 80054bc:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fc ffc4 	bl	8002450 <HAL_DMA_Abort>
 80054c8:	4603      	mov	r3, r0
 80054ca:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 80054cc:	7dfb      	ldrb	r3, [r7, #23]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2204      	movs	r2, #4
 80054d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d02b      	beq.n	800553e <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f042 0202 	orr.w	r2, r2, #2
 80054f4:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	2201      	movs	r2, #1
 8005500:	2102      	movs	r1, #2
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fd6c 	bl	8005fe0 <OSPI_WaitFlagStateUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800550c:	7dfb      	ldrb	r3, [r7, #23]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d11f      	bne.n	8005552 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2202      	movs	r2, #2
 8005518:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	2200      	movs	r2, #0
 8005524:	2120      	movs	r1, #32
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fd5a 	bl	8005fe0 <OSPI_WaitFlagStateUntilTimeout>
 800552c:	4603      	mov	r3, r0
 800552e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005530:	7dfb      	ldrb	r3, [r7, #23]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10d      	bne.n	8005552 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2202      	movs	r2, #2
 800553a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800553c:	e009      	b.n	8005552 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2202      	movs	r2, #2
 8005542:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005544:	e005      	b.n	8005552 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2210      	movs	r2, #16
 800554e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005550:	e000      	b.n	8005554 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005552:	bf00      	nop
  }

  /* Return function status */
  return status;
 8005554:	7dfb      	ldrb	r3, [r7, #23]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b094      	sub	sp, #80	@ 0x50
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a9d      	ldr	r2, [pc, #628]	@ (8005810 <HAL_OSPIM_Config+0x294>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d105      	bne.n	80055aa <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 80055a2:	2301      	movs	r3, #1
 80055a4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80055a8:	e004      	b.n	80055b4 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80055aa:	2301      	movs	r3, #1
 80055ac:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80055ba:	e01d      	b.n	80055f8 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80055bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80055c0:	3301      	adds	r3, #1
 80055c2:	b2d8      	uxtb	r0, r3
 80055c4:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80055c8:	f107 0114 	add.w	r1, r7, #20
 80055cc:	4613      	mov	r3, r2
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	4413      	add	r3, r2
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	440b      	add	r3, r1
 80055d6:	4619      	mov	r1, r3
 80055d8:	f000 febc 	bl	8006354 <OSPIM_GetConfig>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d005      	beq.n	80055ee <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2208      	movs	r2, #8
 80055ec:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80055ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80055f2:	3301      	adds	r3, #1
 80055f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80055f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d9dd      	bls.n	80055bc <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8005600:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005604:	2b00      	cmp	r3, #0
 8005606:	f040 84a2 	bne.w	8005f4e <HAL_OSPIM_Config+0x9d2>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800560a:	4b81      	ldr	r3, [pc, #516]	@ (8005810 <HAL_OSPIM_Config+0x294>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00b      	beq.n	800562e <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005616:	4b7e      	ldr	r3, [pc, #504]	@ (8005810 <HAL_OSPIM_Config+0x294>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a7d      	ldr	r2, [pc, #500]	@ (8005810 <HAL_OSPIM_Config+0x294>)
 800561c:	f023 0301 	bic.w	r3, r3, #1
 8005620:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8005622:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005626:	f043 0301 	orr.w	r3, r3, #1
 800562a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800562e:	4b79      	ldr	r3, [pc, #484]	@ (8005814 <HAL_OSPIM_Config+0x298>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00b      	beq.n	8005652 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800563a:	4b76      	ldr	r3, [pc, #472]	@ (8005814 <HAL_OSPIM_Config+0x298>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a75      	ldr	r2, [pc, #468]	@ (8005814 <HAL_OSPIM_Config+0x298>)
 8005640:	f023 0301 	bic.w	r3, r3, #1
 8005644:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8005646:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800564a:	f043 0302 	orr.w	r3, r3, #2
 800564e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005652:	4971      	ldr	r1, [pc, #452]	@ (8005818 <HAL_OSPIM_Config+0x29c>)
 8005654:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005656:	4613      	mov	r3, r2
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	4413      	add	r3, r2
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	3350      	adds	r3, #80	@ 0x50
 8005660:	443b      	add	r3, r7
 8005662:	3b34      	subs	r3, #52	@ 0x34
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3b01      	subs	r3, #1
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	440b      	add	r3, r1
 800566c:	6859      	ldr	r1, [r3, #4]
 800566e:	486a      	ldr	r0, [pc, #424]	@ (8005818 <HAL_OSPIM_Config+0x29c>)
 8005670:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005672:	4613      	mov	r3, r2
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	4413      	add	r3, r2
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	3350      	adds	r3, #80	@ 0x50
 800567c:	443b      	add	r3, r7
 800567e:	3b34      	subs	r3, #52	@ 0x34
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3b01      	subs	r3, #1
 8005684:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4403      	add	r3, r0
 800568c:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800568e:	4b62      	ldr	r3, [pc, #392]	@ (8005818 <HAL_OSPIM_Config+0x29c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 80c0 	beq.w	800581c <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800569c:	4b5e      	ldr	r3, [pc, #376]	@ (8005818 <HAL_OSPIM_Config+0x29c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a5d      	ldr	r2, [pc, #372]	@ (8005818 <HAL_OSPIM_Config+0x29c>)
 80056a2:	f023 0301 	bic.w	r3, r3, #1
 80056a6:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80056a8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	f040 8162 	bne.w	8005976 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 80056b2:	4959      	ldr	r1, [pc, #356]	@ (8005818 <HAL_OSPIM_Config+0x29c>)
 80056b4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80056b8:	4613      	mov	r3, r2
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	4413      	add	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	3350      	adds	r3, #80	@ 0x50
 80056c2:	443b      	add	r3, r7
 80056c4:	3b3c      	subs	r3, #60	@ 0x3c
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	440b      	add	r3, r1
 80056ce:	6859      	ldr	r1, [r3, #4]
 80056d0:	4851      	ldr	r0, [pc, #324]	@ (8005818 <HAL_OSPIM_Config+0x29c>)
 80056d2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80056d6:	4613      	mov	r3, r2
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	4413      	add	r3, r2
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	3350      	adds	r3, #80	@ 0x50
 80056e0:	443b      	add	r3, r7
 80056e2:	3b3c      	subs	r3, #60	@ 0x3c
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	f041 0202 	orr.w	r2, r1, #2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4403      	add	r3, r0
 80056f0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80056f2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80056f6:	4613      	mov	r3, r2
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	4413      	add	r3, r2
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	3350      	adds	r3, #80	@ 0x50
 8005700:	443b      	add	r3, r7
 8005702:	3b38      	subs	r3, #56	@ 0x38
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d01f      	beq.n	800574a <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800570a:	4943      	ldr	r1, [pc, #268]	@ (8005818 <HAL_OSPIM_Config+0x29c>)
 800570c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005710:	4613      	mov	r3, r2
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	4413      	add	r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	3350      	adds	r3, #80	@ 0x50
 800571a:	443b      	add	r3, r7
 800571c:	3b38      	subs	r3, #56	@ 0x38
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3b01      	subs	r3, #1
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	440b      	add	r3, r1
 8005726:	6859      	ldr	r1, [r3, #4]
 8005728:	483b      	ldr	r0, [pc, #236]	@ (8005818 <HAL_OSPIM_Config+0x29c>)
 800572a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800572e:	4613      	mov	r3, r2
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	4413      	add	r3, r2
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	3350      	adds	r3, #80	@ 0x50
 8005738:	443b      	add	r3, r7
 800573a:	3b38      	subs	r3, #56	@ 0x38
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3b01      	subs	r3, #1
 8005740:	f041 0220 	orr.w	r2, r1, #32
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4403      	add	r3, r0
 8005748:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800574a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800574e:	4613      	mov	r3, r2
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	4413      	add	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	3350      	adds	r3, #80	@ 0x50
 8005758:	443b      	add	r3, r7
 800575a:	3b30      	subs	r3, #48	@ 0x30
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d023      	beq.n	80057aa <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8005762:	492d      	ldr	r1, [pc, #180]	@ (8005818 <HAL_OSPIM_Config+0x29c>)
 8005764:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005768:	4613      	mov	r3, r2
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	4413      	add	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	3350      	adds	r3, #80	@ 0x50
 8005772:	443b      	add	r3, r7
 8005774:	3b30      	subs	r3, #48	@ 0x30
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3b01      	subs	r3, #1
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	6859      	ldr	r1, [r3, #4]
 8005784:	4824      	ldr	r0, [pc, #144]	@ (8005818 <HAL_OSPIM_Config+0x29c>)
 8005786:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800578a:	4613      	mov	r3, r2
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	4413      	add	r3, r2
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	3350      	adds	r3, #80	@ 0x50
 8005794:	443b      	add	r3, r7
 8005796:	3b30      	subs	r3, #48	@ 0x30
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3b01      	subs	r3, #1
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4403      	add	r3, r0
 80057a8:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80057aa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80057ae:	4613      	mov	r3, r2
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	4413      	add	r3, r2
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	3350      	adds	r3, #80	@ 0x50
 80057b8:	443b      	add	r3, r7
 80057ba:	3b2c      	subs	r3, #44	@ 0x2c
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 80d9 	beq.w	8005976 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80057c4:	4914      	ldr	r1, [pc, #80]	@ (8005818 <HAL_OSPIM_Config+0x29c>)
 80057c6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80057ca:	4613      	mov	r3, r2
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	4413      	add	r3, r2
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	3350      	adds	r3, #80	@ 0x50
 80057d4:	443b      	add	r3, r7
 80057d6:	3b2c      	subs	r3, #44	@ 0x2c
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3b01      	subs	r3, #1
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	6859      	ldr	r1, [r3, #4]
 80057e6:	480c      	ldr	r0, [pc, #48]	@ (8005818 <HAL_OSPIM_Config+0x29c>)
 80057e8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80057ec:	4613      	mov	r3, r2
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	4413      	add	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	3350      	adds	r3, #80	@ 0x50
 80057f6:	443b      	add	r3, r7
 80057f8:	3b2c      	subs	r3, #44	@ 0x2c
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4403      	add	r3, r0
 800580a:	605a      	str	r2, [r3, #4]
 800580c:	e0b3      	b.n	8005976 <HAL_OSPIM_Config+0x3fa>
 800580e:	bf00      	nop
 8005810:	420d1400 	.word	0x420d1400
 8005814:	420d2400 	.word	0x420d2400
 8005818:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 800581c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800581e:	4613      	mov	r3, r2
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	4413      	add	r3, r2
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	3350      	adds	r3, #80	@ 0x50
 8005828:	443b      	add	r3, r7
 800582a:	3b3c      	subs	r3, #60	@ 0x3c
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 80a1 	beq.w	8005976 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005834:	4995      	ldr	r1, [pc, #596]	@ (8005a8c <HAL_OSPIM_Config+0x510>)
 8005836:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005838:	4613      	mov	r3, r2
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	4413      	add	r3, r2
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	3350      	adds	r3, #80	@ 0x50
 8005842:	443b      	add	r3, r7
 8005844:	3b3c      	subs	r3, #60	@ 0x3c
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3b01      	subs	r3, #1
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	6859      	ldr	r1, [r3, #4]
 8005850:	488e      	ldr	r0, [pc, #568]	@ (8005a8c <HAL_OSPIM_Config+0x510>)
 8005852:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005854:	4613      	mov	r3, r2
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	4413      	add	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	3350      	adds	r3, #80	@ 0x50
 800585e:	443b      	add	r3, r7
 8005860:	3b3c      	subs	r3, #60	@ 0x3c
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3b01      	subs	r3, #1
 8005866:	f021 0201 	bic.w	r2, r1, #1
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4403      	add	r3, r0
 800586e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8005870:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005872:	4613      	mov	r3, r2
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	4413      	add	r3, r2
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	3350      	adds	r3, #80	@ 0x50
 800587c:	443b      	add	r3, r7
 800587e:	3b38      	subs	r3, #56	@ 0x38
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d01d      	beq.n	80058c2 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005886:	4981      	ldr	r1, [pc, #516]	@ (8005a8c <HAL_OSPIM_Config+0x510>)
 8005888:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800588a:	4613      	mov	r3, r2
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	4413      	add	r3, r2
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	3350      	adds	r3, #80	@ 0x50
 8005894:	443b      	add	r3, r7
 8005896:	3b38      	subs	r3, #56	@ 0x38
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3b01      	subs	r3, #1
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	440b      	add	r3, r1
 80058a0:	6859      	ldr	r1, [r3, #4]
 80058a2:	487a      	ldr	r0, [pc, #488]	@ (8005a8c <HAL_OSPIM_Config+0x510>)
 80058a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058a6:	4613      	mov	r3, r2
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	4413      	add	r3, r2
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	3350      	adds	r3, #80	@ 0x50
 80058b0:	443b      	add	r3, r7
 80058b2:	3b38      	subs	r3, #56	@ 0x38
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	f021 0210 	bic.w	r2, r1, #16
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4403      	add	r3, r0
 80058c0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80058c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058c4:	4613      	mov	r3, r2
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	4413      	add	r3, r2
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	3350      	adds	r3, #80	@ 0x50
 80058ce:	443b      	add	r3, r7
 80058d0:	3b30      	subs	r3, #48	@ 0x30
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d021      	beq.n	800591c <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80058d8:	496c      	ldr	r1, [pc, #432]	@ (8005a8c <HAL_OSPIM_Config+0x510>)
 80058da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058dc:	4613      	mov	r3, r2
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	4413      	add	r3, r2
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	3350      	adds	r3, #80	@ 0x50
 80058e6:	443b      	add	r3, r7
 80058e8:	3b30      	subs	r3, #48	@ 0x30
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	440b      	add	r3, r1
 80058f6:	6859      	ldr	r1, [r3, #4]
 80058f8:	4864      	ldr	r0, [pc, #400]	@ (8005a8c <HAL_OSPIM_Config+0x510>)
 80058fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058fc:	4613      	mov	r3, r2
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	4413      	add	r3, r2
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	3350      	adds	r3, #80	@ 0x50
 8005906:	443b      	add	r3, r7
 8005908:	3b30      	subs	r3, #48	@ 0x30
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3b01      	subs	r3, #1
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4403      	add	r3, r0
 800591a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800591c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800591e:	4613      	mov	r3, r2
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	4413      	add	r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	3350      	adds	r3, #80	@ 0x50
 8005928:	443b      	add	r3, r7
 800592a:	3b2c      	subs	r3, #44	@ 0x2c
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d021      	beq.n	8005976 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8005932:	4956      	ldr	r1, [pc, #344]	@ (8005a8c <HAL_OSPIM_Config+0x510>)
 8005934:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005936:	4613      	mov	r3, r2
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	4413      	add	r3, r2
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	3350      	adds	r3, #80	@ 0x50
 8005940:	443b      	add	r3, r7
 8005942:	3b2c      	subs	r3, #44	@ 0x2c
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3b01      	subs	r3, #1
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	440b      	add	r3, r1
 8005950:	6859      	ldr	r1, [r3, #4]
 8005952:	484e      	ldr	r0, [pc, #312]	@ (8005a8c <HAL_OSPIM_Config+0x510>)
 8005954:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005956:	4613      	mov	r3, r2
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	4413      	add	r3, r2
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	3350      	adds	r3, #80	@ 0x50
 8005960:	443b      	add	r3, r7
 8005962:	3b2c      	subs	r3, #44	@ 0x2c
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3b01      	subs	r3, #1
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4403      	add	r3, r0
 8005974:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	6819      	ldr	r1, [r3, #0]
 800597a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800597e:	4613      	mov	r3, r2
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	4413      	add	r3, r2
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	3350      	adds	r3, #80	@ 0x50
 8005988:	443b      	add	r3, r7
 800598a:	3b3c      	subs	r3, #60	@ 0x3c
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4299      	cmp	r1, r3
 8005990:	d03c      	beq.n	8005a0c <HAL_OSPIM_Config+0x490>
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	6899      	ldr	r1, [r3, #8]
 8005996:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800599a:	4613      	mov	r3, r2
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	4413      	add	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	3350      	adds	r3, #80	@ 0x50
 80059a4:	443b      	add	r3, r7
 80059a6:	3b34      	subs	r3, #52	@ 0x34
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4299      	cmp	r1, r3
 80059ac:	d02e      	beq.n	8005a0c <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	6859      	ldr	r1, [r3, #4]
 80059b2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80059b6:	4613      	mov	r3, r2
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	4413      	add	r3, r2
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	3350      	adds	r3, #80	@ 0x50
 80059c0:	443b      	add	r3, r7
 80059c2:	3b38      	subs	r3, #56	@ 0x38
 80059c4:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 80059c6:	4299      	cmp	r1, r3
 80059c8:	d103      	bne.n	80059d2 <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d11c      	bne.n	8005a0c <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	68d9      	ldr	r1, [r3, #12]
 80059d6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80059da:	4613      	mov	r3, r2
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	4413      	add	r3, r2
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	3350      	adds	r3, #80	@ 0x50
 80059e4:	443b      	add	r3, r7
 80059e6:	3b30      	subs	r3, #48	@ 0x30
 80059e8:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80059ea:	4299      	cmp	r1, r3
 80059ec:	d00e      	beq.n	8005a0c <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	6919      	ldr	r1, [r3, #16]
 80059f2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80059f6:	4613      	mov	r3, r2
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	4413      	add	r3, r2
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	3350      	adds	r3, #80	@ 0x50
 8005a00:	443b      	add	r3, r7
 8005a02:	3b2c      	subs	r3, #44	@ 0x2c
 8005a04:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005a06:	4299      	cmp	r1, r3
 8005a08:	f040 810e 	bne.w	8005c28 <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	6819      	ldr	r1, [r3, #0]
 8005a10:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005a14:	4613      	mov	r3, r2
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	4413      	add	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	3350      	adds	r3, #80	@ 0x50
 8005a1e:	443b      	add	r3, r7
 8005a20:	3b3c      	subs	r3, #60	@ 0x3c
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4299      	cmp	r1, r3
 8005a26:	d133      	bne.n	8005a90 <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	6859      	ldr	r1, [r3, #4]
 8005a2c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005a30:	4613      	mov	r3, r2
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	4413      	add	r3, r2
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	3350      	adds	r3, #80	@ 0x50
 8005a3a:	443b      	add	r3, r7
 8005a3c:	3b38      	subs	r3, #56	@ 0x38
 8005a3e:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8005a40:	4299      	cmp	r1, r3
 8005a42:	d125      	bne.n	8005a90 <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	68d9      	ldr	r1, [r3, #12]
 8005a48:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	4413      	add	r3, r2
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	3350      	adds	r3, #80	@ 0x50
 8005a56:	443b      	add	r3, r7
 8005a58:	3b30      	subs	r3, #48	@ 0x30
 8005a5a:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8005a5c:	4299      	cmp	r1, r3
 8005a5e:	d117      	bne.n	8005a90 <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	6919      	ldr	r1, [r3, #16]
 8005a64:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005a68:	4613      	mov	r3, r2
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	4413      	add	r3, r2
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	3350      	adds	r3, #80	@ 0x50
 8005a72:	443b      	add	r3, r7
 8005a74:	3b2c      	subs	r3, #44	@ 0x2c
 8005a76:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8005a78:	4299      	cmp	r1, r3
 8005a7a:	d109      	bne.n	8005a90 <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8005a7c:	4b03      	ldr	r3, [pc, #12]	@ (8005a8c <HAL_OSPIM_Config+0x510>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a02      	ldr	r2, [pc, #8]	@ (8005a8c <HAL_OSPIM_Config+0x510>)
 8005a82:	f043 0301 	orr.w	r3, r3, #1
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	e0ce      	b.n	8005c28 <HAL_OSPIM_Config+0x6ac>
 8005a8a:	bf00      	nop
 8005a8c:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005a90:	49a4      	ldr	r1, [pc, #656]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005a92:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005a96:	4613      	mov	r3, r2
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	4413      	add	r3, r2
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	3350      	adds	r3, #80	@ 0x50
 8005aa0:	443b      	add	r3, r7
 8005aa2:	3b3c      	subs	r3, #60	@ 0x3c
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	440b      	add	r3, r1
 8005aac:	6859      	ldr	r1, [r3, #4]
 8005aae:	489d      	ldr	r0, [pc, #628]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005ab0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	4413      	add	r3, r2
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	3350      	adds	r3, #80	@ 0x50
 8005abe:	443b      	add	r3, r7
 8005ac0:	3b3c      	subs	r3, #60	@ 0x3c
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	f021 0201 	bic.w	r2, r1, #1
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4403      	add	r3, r0
 8005ace:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005ad0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	4413      	add	r3, r2
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	3350      	adds	r3, #80	@ 0x50
 8005ade:	443b      	add	r3, r7
 8005ae0:	3b38      	subs	r3, #56	@ 0x38
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01f      	beq.n	8005b28 <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005ae8:	498e      	ldr	r1, [pc, #568]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005aea:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005aee:	4613      	mov	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	4413      	add	r3, r2
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	3350      	adds	r3, #80	@ 0x50
 8005af8:	443b      	add	r3, r7
 8005afa:	3b38      	subs	r3, #56	@ 0x38
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	440b      	add	r3, r1
 8005b04:	6859      	ldr	r1, [r3, #4]
 8005b06:	4887      	ldr	r0, [pc, #540]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005b08:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	4413      	add	r3, r2
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	3350      	adds	r3, #80	@ 0x50
 8005b16:	443b      	add	r3, r7
 8005b18:	3b38      	subs	r3, #56	@ 0x38
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	f021 0210 	bic.w	r2, r1, #16
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4403      	add	r3, r0
 8005b26:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005b28:	497e      	ldr	r1, [pc, #504]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005b2a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b2e:	4613      	mov	r3, r2
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	4413      	add	r3, r2
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	3350      	adds	r3, #80	@ 0x50
 8005b38:	443b      	add	r3, r7
 8005b3a:	3b34      	subs	r3, #52	@ 0x34
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	440b      	add	r3, r1
 8005b44:	6859      	ldr	r1, [r3, #4]
 8005b46:	4877      	ldr	r0, [pc, #476]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005b48:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	4413      	add	r3, r2
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	3350      	adds	r3, #80	@ 0x50
 8005b56:	443b      	add	r3, r7
 8005b58:	3b34      	subs	r3, #52	@ 0x34
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4403      	add	r3, r0
 8005b66:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005b68:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	4413      	add	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	3350      	adds	r3, #80	@ 0x50
 8005b76:	443b      	add	r3, r7
 8005b78:	3b30      	subs	r3, #48	@ 0x30
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d023      	beq.n	8005bc8 <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005b80:	4968      	ldr	r1, [pc, #416]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005b82:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005b86:	4613      	mov	r3, r2
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	4413      	add	r3, r2
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	3350      	adds	r3, #80	@ 0x50
 8005b90:	443b      	add	r3, r7
 8005b92:	3b30      	subs	r3, #48	@ 0x30
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	440b      	add	r3, r1
 8005ba0:	6859      	ldr	r1, [r3, #4]
 8005ba2:	4860      	ldr	r0, [pc, #384]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005ba4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005ba8:	4613      	mov	r3, r2
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	4413      	add	r3, r2
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	3350      	adds	r3, #80	@ 0x50
 8005bb2:	443b      	add	r3, r7
 8005bb4:	3b30      	subs	r3, #48	@ 0x30
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4403      	add	r3, r0
 8005bc6:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005bc8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005bcc:	4613      	mov	r3, r2
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	4413      	add	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	3350      	adds	r3, #80	@ 0x50
 8005bd6:	443b      	add	r3, r7
 8005bd8:	3b2c      	subs	r3, #44	@ 0x2c
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d023      	beq.n	8005c28 <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005be0:	4950      	ldr	r1, [pc, #320]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005be2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005be6:	4613      	mov	r3, r2
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	4413      	add	r3, r2
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	3350      	adds	r3, #80	@ 0x50
 8005bf0:	443b      	add	r3, r7
 8005bf2:	3b2c      	subs	r3, #44	@ 0x2c
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	440b      	add	r3, r1
 8005c00:	6859      	ldr	r1, [r3, #4]
 8005c02:	4848      	ldr	r0, [pc, #288]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005c04:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005c08:	4613      	mov	r3, r2
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	4413      	add	r3, r2
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	3350      	adds	r3, #80	@ 0x50
 8005c12:	443b      	add	r3, r7
 8005c14:	3b2c      	subs	r3, #44	@ 0x2c
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4403      	add	r3, r0
 8005c26:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8005c28:	4a3e      	ldr	r2, [pc, #248]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c3c:	025b      	lsls	r3, r3, #9
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	4938      	ldr	r1, [pc, #224]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	440b      	add	r3, r1
 8005c50:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d018      	beq.n	8005c8c <HAL_OSPIM_Config+0x710>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c62:	d813      	bhi.n	8005c8c <HAL_OSPIM_Config+0x710>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	1e5a      	subs	r2, r3, #1
 8005c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	0c1b      	lsrs	r3, r3, #16
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d90a      	bls.n	8005c8c <HAL_OSPIM_Config+0x710>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8005c76:	4b2b      	ldr	r3, [pc, #172]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	041b      	lsls	r3, r3, #16
 8005c86:	4927      	ldr	r1, [pc, #156]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8005c8c:	4b25      	ldr	r3, [pc, #148]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 809a 	beq.w	8005dce <HAL_OSPIM_Config+0x852>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8005c9a:	4a22      	ldr	r2, [pc, #136]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f023 0203 	bic.w	r2, r3, #3
 8005cac:	491d      	ldr	r1, [pc, #116]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	f042 0201 	orr.w	r2, r2, #1
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	440b      	add	r3, r1
 8005cbc:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d011      	beq.n	8005cea <HAL_OSPIM_Config+0x76e>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8005cc6:	4a17      	ldr	r2, [pc, #92]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005cd8:	4912      	ldr	r1, [pc, #72]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	f042 0210 	orr.w	r2, r2, #16
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	440b      	add	r3, r1
 8005ce8:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d018      	beq.n	8005d28 <HAL_OSPIM_Config+0x7ac>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005cf6:	4a0b      	ldr	r2, [pc, #44]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005d0c:	4905      	ldr	r1, [pc, #20]	@ (8005d24 <HAL_OSPIM_Config+0x7a8>)
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	440b      	add	r3, r1
 8005d20:	605a      	str	r2, [r3, #4]
 8005d22:	e01b      	b.n	8005d5c <HAL_OSPIM_Config+0x7e0>
 8005d24:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d015      	beq.n	8005d5c <HAL_OSPIM_Config+0x7e0>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005d30:	4a8a      	ldr	r2, [pc, #552]	@ (8005f5c <HAL_OSPIM_Config+0x9e0>)
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005d46:	4985      	ldr	r1, [pc, #532]	@ (8005f5c <HAL_OSPIM_Config+0x9e0>)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	440b      	add	r3, r1
 8005d5a:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d016      	beq.n	8005d96 <HAL_OSPIM_Config+0x81a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005d68:	4a7c      	ldr	r2, [pc, #496]	@ (8005f5c <HAL_OSPIM_Config+0x9e0>)
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005d7e:	4977      	ldr	r1, [pc, #476]	@ (8005f5c <HAL_OSPIM_Config+0x9e0>)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	440b      	add	r3, r1
 8005d92:	605a      	str	r2, [r3, #4]
 8005d94:	e0c3      	b.n	8005f1e <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 80bf 	beq.w	8005f1e <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005da0:	4a6e      	ldr	r2, [pc, #440]	@ (8005f5c <HAL_OSPIM_Config+0x9e0>)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005db6:	4969      	ldr	r1, [pc, #420]	@ (8005f5c <HAL_OSPIM_Config+0x9e0>)
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	440b      	add	r3, r1
 8005dca:	605a      	str	r2, [r3, #4]
 8005dcc:	e0a7      	b.n	8005f1e <HAL_OSPIM_Config+0x9a2>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8005dce:	4a63      	ldr	r2, [pc, #396]	@ (8005f5c <HAL_OSPIM_Config+0x9e0>)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f023 0203 	bic.w	r2, r3, #3
 8005de0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	431a      	orrs	r2, r3
 8005de6:	495d      	ldr	r1, [pc, #372]	@ (8005f5c <HAL_OSPIM_Config+0x9e0>)
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3b01      	subs	r3, #1
 8005dee:	f042 0201 	orr.w	r2, r2, #1
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	440b      	add	r3, r1
 8005df6:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d014      	beq.n	8005e2a <HAL_OSPIM_Config+0x8ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8005e00:	4a56      	ldr	r2, [pc, #344]	@ (8005f5c <HAL_OSPIM_Config+0x9e0>)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005e12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e14:	015b      	lsls	r3, r3, #5
 8005e16:	431a      	orrs	r2, r3
 8005e18:	4950      	ldr	r1, [pc, #320]	@ (8005f5c <HAL_OSPIM_Config+0x9e0>)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	f042 0210 	orr.w	r2, r2, #16
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	440b      	add	r3, r1
 8005e28:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d019      	beq.n	8005e6a <HAL_OSPIM_Config+0x8ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005e36:	4a49      	ldr	r2, [pc, #292]	@ (8005f5c <HAL_OSPIM_Config+0x9e0>)
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005e4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e4e:	049b      	lsls	r3, r3, #18
 8005e50:	431a      	orrs	r2, r3
 8005e52:	4942      	ldr	r1, [pc, #264]	@ (8005f5c <HAL_OSPIM_Config+0x9e0>)
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	440b      	add	r3, r1
 8005e66:	605a      	str	r2, [r3, #4]
 8005e68:	e01c      	b.n	8005ea4 <HAL_OSPIM_Config+0x928>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d018      	beq.n	8005ea4 <HAL_OSPIM_Config+0x928>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005e72:	4a3a      	ldr	r2, [pc, #232]	@ (8005f5c <HAL_OSPIM_Config+0x9e0>)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005e88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e8a:	069b      	lsls	r3, r3, #26
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	4933      	ldr	r1, [pc, #204]	@ (8005f5c <HAL_OSPIM_Config+0x9e0>)
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d019      	beq.n	8005ee4 <HAL_OSPIM_Config+0x968>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8005f5c <HAL_OSPIM_Config+0x9e0>)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ec8:	049b      	lsls	r3, r3, #18
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	4923      	ldr	r1, [pc, #140]	@ (8005f5c <HAL_OSPIM_Config+0x9e0>)
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	440b      	add	r3, r1
 8005ee0:	605a      	str	r2, [r3, #4]
 8005ee2:	e01c      	b.n	8005f1e <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d018      	beq.n	8005f1e <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005eec:	4a1b      	ldr	r2, [pc, #108]	@ (8005f5c <HAL_OSPIM_Config+0x9e0>)
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f04:	069b      	lsls	r3, r3, #26
 8005f06:	431a      	orrs	r2, r3
 8005f08:	4914      	ldr	r1, [pc, #80]	@ (8005f5c <HAL_OSPIM_Config+0x9e0>)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	440b      	add	r3, r1
 8005f1c:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8005f1e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d005      	beq.n	8005f36 <HAL_OSPIM_Config+0x9ba>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f60 <HAL_OSPIM_Config+0x9e4>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a0c      	ldr	r2, [pc, #48]	@ (8005f60 <HAL_OSPIM_Config+0x9e4>)
 8005f30:	f043 0301 	orr.w	r3, r3, #1
 8005f34:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8005f36:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d005      	beq.n	8005f4e <HAL_OSPIM_Config+0x9d2>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005f42:	4b08      	ldr	r3, [pc, #32]	@ (8005f64 <HAL_OSPIM_Config+0x9e8>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a07      	ldr	r2, [pc, #28]	@ (8005f64 <HAL_OSPIM_Config+0x9e8>)
 8005f48:	f043 0301 	orr.w	r3, r3, #1
 8005f4c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8005f4e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3750      	adds	r7, #80	@ 0x50
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	420c4000 	.word	0x420c4000
 8005f60:	420d1400 	.word	0x420d1400
 8005f64:	420d2400 	.word	0x420d2400

08005f68 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hdma->Parent);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f74:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f84:	d122      	bne.n	8005fcc <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d014      	beq.n	8005fbe <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2202      	movs	r2, #2
 8005f9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005faa:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 0202 	orr.w	r2, r2, #2
 8005fba:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 8005fbc:	e00c      	b.n	8005fd8 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f7ff fa0f 	bl	80053e8 <HAL_OSPI_AbortCpltCallback>
}
 8005fca:	e005      	b.n	8005fd8 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	651a      	str	r2, [r3, #80]	@ 0x50
    HAL_OSPI_ErrorCallback(hospi);
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f7ff f9fe 	bl	80053d4 <HAL_OSPI_ErrorCallback>
}
 8005fd8:	bf00      	nop
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	603b      	str	r3, [r7, #0]
 8005fec:	4613      	mov	r3, r2
 8005fee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005ff0:	e022      	b.n	8006038 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff8:	d01e      	beq.n	8006038 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ffa:	f7fb ff6f 	bl	8001edc <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	429a      	cmp	r2, r3
 8006008:	d302      	bcc.n	8006010 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d113      	bne.n	8006038 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6a1a      	ldr	r2, [r3, #32]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	401a      	ands	r2, r3
 800601a:	79fb      	ldrb	r3, [r7, #7]
 800601c:	429a      	cmp	r2, r3
 800601e:	d00b      	beq.n	8006038 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006026:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800602c:	f043 0201 	orr.w	r2, r3, #1
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e00e      	b.n	8006056 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6a1a      	ldr	r2, [r3, #32]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	4013      	ands	r3, r2
 8006042:	2b00      	cmp	r3, #0
 8006044:	bf14      	ite	ne
 8006046:	2301      	movne	r3, #1
 8006048:	2300      	moveq	r3, #0
 800604a:	b2db      	uxtb	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	79fb      	ldrb	r3, [r7, #7]
 8006050:	429a      	cmp	r2, r3
 8006052:	d1ce      	bne.n	8005ff2 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8006060:	b480      	push	{r7}
 8006062:	b089      	sub	sp, #36	@ 0x24
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800607c:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10a      	bne.n	800609c <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_MSEL, cmd->FlashId);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d114      	bne.n	80060ce <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80060ac:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80060b6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80060c0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	e02c      	b.n	8006128 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b03      	cmp	r3, #3
 80060d4:	d114      	bne.n	8006100 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80060de:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80060e8:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80060f2:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	e013      	b.n	8006128 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006108:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8006112:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800611c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8006126:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006130:	431a      	orrs	r2, r3
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613a:	2b00      	cmp	r3, #0
 800613c:	d012      	beq.n	8006164 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006156:	4319      	orrs	r1, r3
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800615c:	430b      	orrs	r3, r1
 800615e:	431a      	orrs	r2, r3
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f023 021f 	bic.w	r2, r3, #31
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006170:	431a      	orrs	r2, r3
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800617a:	2b00      	cmp	r3, #0
 800617c:	d009      	beq.n	8006192 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d105      	bne.n	8006192 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3a01      	subs	r2, #1
 8006190:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 8099 	beq.w	80062ce <OSPI_ConfigCmd+0x26e>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d055      	beq.n	8006250 <OSPI_ConfigCmd+0x1f0>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d01e      	beq.n	80061ea <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4b67      	ldr	r3, [pc, #412]	@ (8006350 <OSPI_ConfigCmd+0x2f0>)
 80061b2:	4013      	ands	r3, r2
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	68d1      	ldr	r1, [r2, #12]
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	6952      	ldr	r2, [r2, #20]
 80061bc:	4311      	orrs	r1, r2
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	6912      	ldr	r2, [r2, #16]
 80061c2:	4311      	orrs	r1, r2
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	69d2      	ldr	r2, [r2, #28]
 80061c8:	4311      	orrs	r1, r2
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061ce:	4311      	orrs	r1, r2
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	6a12      	ldr	r2, [r2, #32]
 80061d4:	4311      	orrs	r1, r2
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80061da:	4311      	orrs	r1, r2
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80061e0:	430a      	orrs	r2, r1
 80061e2:	431a      	orrs	r2, r3
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	601a      	str	r2, [r3, #0]
 80061e8:	e028      	b.n	800623c <OSPI_ConfigCmd+0x1dc>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80061f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	68d1      	ldr	r1, [r2, #12]
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	6952      	ldr	r2, [r2, #20]
 80061fe:	4311      	orrs	r1, r2
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	6912      	ldr	r2, [r2, #16]
 8006204:	4311      	orrs	r1, r2
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	69d2      	ldr	r2, [r2, #28]
 800620a:	4311      	orrs	r1, r2
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006210:	4311      	orrs	r1, r2
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	6a12      	ldr	r2, [r2, #32]
 8006216:	430a      	orrs	r2, r1
 8006218:	431a      	orrs	r2, r3
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006222:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006226:	d109      	bne.n	800623c <OSPI_ConfigCmd+0x1dc>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800622c:	2b08      	cmp	r3, #8
 800622e:	d105      	bne.n	800623c <OSPI_ConfigCmd+0x1dc>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	6992      	ldr	r2, [r2, #24]
 800624c:	649a      	str	r2, [r3, #72]	@ 0x48
 800624e:	e078      	b.n	8006342 <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006254:	2b00      	cmp	r3, #0
 8006256:	d017      	beq.n	8006288 <OSPI_ConfigCmd+0x228>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8006260:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	68d1      	ldr	r1, [r2, #12]
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	6952      	ldr	r2, [r2, #20]
 800626c:	4311      	orrs	r1, r2
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	6912      	ldr	r2, [r2, #16]
 8006272:	4311      	orrs	r1, r2
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006278:	4311      	orrs	r1, r2
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800627e:	430a      	orrs	r2, r1
 8006280:	431a      	orrs	r2, r3
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	e01d      	b.n	80062c4 <OSPI_ConfigCmd+0x264>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	68d9      	ldr	r1, [r3, #12]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	4319      	orrs	r1, r3
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	430b      	orrs	r3, r1
 80062a0:	431a      	orrs	r2, r3
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062ae:	d109      	bne.n	80062c4 <OSPI_ConfigCmd+0x264>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d105      	bne.n	80062c4 <OSPI_ConfigCmd+0x264>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	e039      	b.n	8006342 <OSPI_ConfigCmd+0x2e2>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d030      	beq.n	8006338 <OSPI_ConfigCmd+0x2d8>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d017      	beq.n	800630e <OSPI_ConfigCmd+0x2ae>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80062e6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	69d1      	ldr	r1, [r2, #28]
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062f2:	4311      	orrs	r1, r2
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	6a12      	ldr	r2, [r2, #32]
 80062f8:	4311      	orrs	r1, r2
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80062fe:	4311      	orrs	r1, r2
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006304:	430a      	orrs	r2, r1
 8006306:	431a      	orrs	r2, r3
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	e00e      	b.n	800632c <OSPI_ConfigCmd+0x2cc>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	69d9      	ldr	r1, [r3, #28]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631e:	4319      	orrs	r1, r3
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	430b      	orrs	r3, r1
 8006326:	431a      	orrs	r2, r3
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	6992      	ldr	r2, [r2, #24]
 8006334:	649a      	str	r2, [r3, #72]	@ 0x48
 8006336:	e004      	b.n	8006342 <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2208      	movs	r2, #8
 8006340:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8006342:	7ffb      	ldrb	r3, [r7, #31]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3724      	adds	r7, #36	@ 0x24
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	f0ffc0c0 	.word	0xf0ffc0c0

08006354 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	6039      	str	r1, [r7, #0]
 800635e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8006368:	79fb      	ldrb	r3, [r7, #7]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d005      	beq.n	800637a <OSPIM_GetConfig+0x26>
 800636e:	79fb      	ldrb	r3, [r7, #7]
 8006370:	2b02      	cmp	r3, #2
 8006372:	d802      	bhi.n	800637a <OSPIM_GetConfig+0x26>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d102      	bne.n	8006380 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	75fb      	strb	r3, [r7, #23]
 800637e:	e098      	b.n	80064b2 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2200      	movs	r2, #0
 800638a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2200      	movs	r2, #0
 8006390:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2200      	movs	r2, #0
 8006396:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2200      	movs	r2, #0
 800639c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800639e:	79fb      	ldrb	r3, [r7, #7]
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d10b      	bne.n	80063bc <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80063a4:	4b46      	ldr	r3, [pc, #280]	@ (80064c0 <OSPIM_GetConfig+0x16c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d102      	bne.n	80063b6 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80063b0:	4b44      	ldr	r3, [pc, #272]	@ (80064c4 <OSPIM_GetConfig+0x170>)
 80063b2:	613b      	str	r3, [r7, #16]
 80063b4:	e002      	b.n	80063bc <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80063b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80063ba:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80063bc:	2300      	movs	r3, #0
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	e074      	b.n	80064ac <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80063c2:	4a3f      	ldr	r2, [pc, #252]	@ (80064c0 <OSPIM_GetConfig+0x16c>)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00a      	beq.n	80063ee <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	4053      	eors	r3, r2
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d103      	bne.n	80063ee <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00a      	beq.n	800640e <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	4053      	eors	r3, r2
 80063fe:	f003 0320 	and.w	r3, r3, #32
 8006402:	2b00      	cmp	r3, #0
 8006404:	d103      	bne.n	800640e <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	4053      	eors	r3, r2
 800641e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006422:	2b00      	cmp	r3, #0
 8006424:	d103      	bne.n	800642e <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d018      	beq.n	800646a <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	4053      	eors	r3, r2
 800643e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d111      	bne.n	800646a <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d106      	bne.n	800645e <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	3301      	adds	r3, #1
 8006454:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	60da      	str	r2, [r3, #12]
 800645c:	e005      	b.n	800646a <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3301      	adds	r3, #1
 8006462:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d018      	beq.n	80064a6 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	4053      	eors	r3, r2
 800647a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d111      	bne.n	80064a6 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d106      	bne.n	800649a <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	3301      	adds	r3, #1
 8006490:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	611a      	str	r2, [r3, #16]
 8006498:	e005      	b.n	80064a6 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3301      	adds	r3, #1
 800649e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3301      	adds	r3, #1
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d987      	bls.n	80063c2 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80064b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	371c      	adds	r7, #28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	420c4000 	.word	0x420c4000
 80064c4:	04040222 	.word	0x04040222

080064c8 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f042 0202 	orr.w	r2, r2, #2
 80064e4:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2208      	movs	r2, #8
 80064ea:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a15      	ldr	r2, [pc, #84]	@ (8006548 <HAL_OSPI_DLYB_SetConfig+0x80>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d109      	bne.n	800650a <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 80064f6:	4815      	ldr	r0, [pc, #84]	@ (800654c <HAL_OSPI_DLYB_SetConfig+0x84>)
 80064f8:	f7fe fc5d 	bl	8004db6 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	4813      	ldr	r0, [pc, #76]	@ (800654c <HAL_OSPI_DLYB_SetConfig+0x84>)
 8006500:	f005 fa5c 	bl	800b9bc <LL_DLYB_SetDelay>
    status = HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	73fb      	strb	r3, [r7, #15]
 8006508:	e00d      	b.n	8006526 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a10      	ldr	r2, [pc, #64]	@ (8006550 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d108      	bne.n	8006526 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8006514:	480f      	ldr	r0, [pc, #60]	@ (8006554 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8006516:	f7fe fc4e 	bl	8004db6 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	480d      	ldr	r0, [pc, #52]	@ (8006554 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 800651e:	f005 fa4d 	bl	800b9bc <LL_DLYB_SetDelay>
    status = HAL_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7fe ffa4 	bl	8005474 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689a      	ldr	r2, [r3, #8]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0202 	bic.w	r2, r2, #2
 800653a:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 800653c:	7bfb      	ldrb	r3, [r7, #15]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	420d1400 	.word	0x420d1400
 800654c:	420cf000 	.word	0x420cf000
 8006550:	420d2400 	.word	0x420d2400
 8006554:	420cf400 	.word	0x420cf400

08006558 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8006560:	4b39      	ldr	r3, [pc, #228]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006564:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006568:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	429a      	cmp	r2, r3
 8006570:	d10b      	bne.n	800658a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006578:	d905      	bls.n	8006586 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800657a:	4b33      	ldr	r3, [pc, #204]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	4a32      	ldr	r2, [pc, #200]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006580:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006584:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	e057      	b.n	800663a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006590:	d90a      	bls.n	80065a8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8006592:	4b2d      	ldr	r3, [pc, #180]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4313      	orrs	r3, r2
 800659e:	4a2a      	ldr	r2, [pc, #168]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80065a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065a4:	60d3      	str	r3, [r2, #12]
 80065a6:	e007      	b.n	80065b8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80065a8:	4b27      	ldr	r3, [pc, #156]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80065b0:	4925      	ldr	r1, [pc, #148]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80065b8:	4b24      	ldr	r3, [pc, #144]	@ (800664c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a24      	ldr	r2, [pc, #144]	@ (8006650 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80065be:	fba2 2303 	umull	r2, r3, r2, r3
 80065c2:	099b      	lsrs	r3, r3, #6
 80065c4:	2232      	movs	r2, #50	@ 0x32
 80065c6:	fb02 f303 	mul.w	r3, r2, r3
 80065ca:	4a21      	ldr	r2, [pc, #132]	@ (8006650 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80065cc:	fba2 2303 	umull	r2, r3, r2, r3
 80065d0:	099b      	lsrs	r3, r3, #6
 80065d2:	3301      	adds	r3, #1
 80065d4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80065d6:	e002      	b.n	80065de <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	3b01      	subs	r3, #1
 80065dc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80065de:	4b1a      	ldr	r3, [pc, #104]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d102      	bne.n	80065f0 <HAL_PWREx_ControlVoltageScaling+0x98>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1f3      	bne.n	80065d8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d01b      	beq.n	800662e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80065f6:	4b15      	ldr	r3, [pc, #84]	@ (800664c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a15      	ldr	r2, [pc, #84]	@ (8006650 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80065fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006600:	099b      	lsrs	r3, r3, #6
 8006602:	2232      	movs	r2, #50	@ 0x32
 8006604:	fb02 f303 	mul.w	r3, r2, r3
 8006608:	4a11      	ldr	r2, [pc, #68]	@ (8006650 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800660a:	fba2 2303 	umull	r2, r3, r2, r3
 800660e:	099b      	lsrs	r3, r3, #6
 8006610:	3301      	adds	r3, #1
 8006612:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006614:	e002      	b.n	800661c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	3b01      	subs	r3, #1
 800661a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800661c:	4b0a      	ldr	r3, [pc, #40]	@ (8006648 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800661e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006620:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d102      	bne.n	800662e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1f3      	bne.n	8006616 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e000      	b.n	800663a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	46020800 	.word	0x46020800
 800664c:	20000004 	.word	0x20000004
 8006650:	10624dd3 	.word	0x10624dd3

08006654 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006654:	b480      	push	{r7}
 8006656:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8006658:	4b04      	ldr	r3, [pc, #16]	@ (800666c <HAL_PWREx_GetVoltageRange+0x18>)
 800665a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800665c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8006660:	4618      	mov	r0, r3
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	46020800 	.word	0x46020800

08006670 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08e      	sub	sp, #56	@ 0x38
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006678:	2300      	movs	r3, #0
 800667a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d102      	bne.n	800668a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	f000 bec8 	b.w	800741a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800668a:	4b99      	ldr	r3, [pc, #612]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	f003 030c 	and.w	r3, r3, #12
 8006692:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006694:	4b96      	ldr	r3, [pc, #600]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 8006696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006698:	f003 0303 	and.w	r3, r3, #3
 800669c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0310 	and.w	r3, r3, #16
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 816c 	beq.w	8006984 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80066ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d007      	beq.n	80066c2 <HAL_RCC_OscConfig+0x52>
 80066b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b4:	2b0c      	cmp	r3, #12
 80066b6:	f040 80de 	bne.w	8006876 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80066ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066bc:	2b01      	cmp	r3, #1
 80066be:	f040 80da 	bne.w	8006876 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	69db      	ldr	r3, [r3, #28]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d102      	bne.n	80066d0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	f000 bea5 	b.w	800741a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066d4:	4b86      	ldr	r3, [pc, #536]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d004      	beq.n	80066ea <HAL_RCC_OscConfig+0x7a>
 80066e0:	4b83      	ldr	r3, [pc, #524]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80066e8:	e005      	b.n	80066f6 <HAL_RCC_OscConfig+0x86>
 80066ea:	4b81      	ldr	r3, [pc, #516]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 80066ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80066f0:	041b      	lsls	r3, r3, #16
 80066f2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d255      	bcs.n	80067a6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80066fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10a      	bne.n	8006716 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006704:	4618      	mov	r0, r3
 8006706:	f001 fa11 	bl	8007b2c <RCC_SetFlashLatencyFromMSIRange>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	f000 be82 	b.w	800741a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006716:	4b76      	ldr	r3, [pc, #472]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	4a75      	ldr	r2, [pc, #468]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 800671c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006720:	6093      	str	r3, [r2, #8]
 8006722:	4b73      	ldr	r3, [pc, #460]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672e:	4970      	ldr	r1, [pc, #448]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 8006730:	4313      	orrs	r3, r2
 8006732:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006738:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800673c:	d309      	bcc.n	8006752 <HAL_RCC_OscConfig+0xe2>
 800673e:	4b6c      	ldr	r3, [pc, #432]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f023 021f 	bic.w	r2, r3, #31
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	4969      	ldr	r1, [pc, #420]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 800674c:	4313      	orrs	r3, r2
 800674e:	60cb      	str	r3, [r1, #12]
 8006750:	e07e      	b.n	8006850 <HAL_RCC_OscConfig+0x1e0>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006756:	2b00      	cmp	r3, #0
 8006758:	da0a      	bge.n	8006770 <HAL_RCC_OscConfig+0x100>
 800675a:	4b65      	ldr	r3, [pc, #404]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	015b      	lsls	r3, r3, #5
 8006768:	4961      	ldr	r1, [pc, #388]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 800676a:	4313      	orrs	r3, r2
 800676c:	60cb      	str	r3, [r1, #12]
 800676e:	e06f      	b.n	8006850 <HAL_RCC_OscConfig+0x1e0>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006778:	d30a      	bcc.n	8006790 <HAL_RCC_OscConfig+0x120>
 800677a:	4b5d      	ldr	r3, [pc, #372]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	029b      	lsls	r3, r3, #10
 8006788:	4959      	ldr	r1, [pc, #356]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 800678a:	4313      	orrs	r3, r2
 800678c:	60cb      	str	r3, [r1, #12]
 800678e:	e05f      	b.n	8006850 <HAL_RCC_OscConfig+0x1e0>
 8006790:	4b57      	ldr	r3, [pc, #348]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	03db      	lsls	r3, r3, #15
 800679e:	4954      	ldr	r1, [pc, #336]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60cb      	str	r3, [r1, #12]
 80067a4:	e054      	b.n	8006850 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80067a6:	4b52      	ldr	r3, [pc, #328]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	4a51      	ldr	r2, [pc, #324]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 80067ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80067b0:	6093      	str	r3, [r2, #8]
 80067b2:	4b4f      	ldr	r3, [pc, #316]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067be:	494c      	ldr	r1, [pc, #304]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80067cc:	d309      	bcc.n	80067e2 <HAL_RCC_OscConfig+0x172>
 80067ce:	4b48      	ldr	r3, [pc, #288]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	f023 021f 	bic.w	r2, r3, #31
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	4945      	ldr	r1, [pc, #276]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	60cb      	str	r3, [r1, #12]
 80067e0:	e028      	b.n	8006834 <HAL_RCC_OscConfig+0x1c4>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	da0a      	bge.n	8006800 <HAL_RCC_OscConfig+0x190>
 80067ea:	4b41      	ldr	r3, [pc, #260]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	015b      	lsls	r3, r3, #5
 80067f8:	493d      	ldr	r1, [pc, #244]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60cb      	str	r3, [r1, #12]
 80067fe:	e019      	b.n	8006834 <HAL_RCC_OscConfig+0x1c4>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006808:	d30a      	bcc.n	8006820 <HAL_RCC_OscConfig+0x1b0>
 800680a:	4b39      	ldr	r3, [pc, #228]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	029b      	lsls	r3, r3, #10
 8006818:	4935      	ldr	r1, [pc, #212]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 800681a:	4313      	orrs	r3, r2
 800681c:	60cb      	str	r3, [r1, #12]
 800681e:	e009      	b.n	8006834 <HAL_RCC_OscConfig+0x1c4>
 8006820:	4b33      	ldr	r3, [pc, #204]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	03db      	lsls	r3, r3, #15
 800682e:	4930      	ldr	r1, [pc, #192]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 8006830:	4313      	orrs	r3, r2
 8006832:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10a      	bne.n	8006850 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683e:	4618      	mov	r0, r3
 8006840:	f001 f974 	bl	8007b2c <RCC_SetFlashLatencyFromMSIRange>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	f000 bde5 	b.w	800741a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8006850:	f001 f8de 	bl	8007a10 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006854:	4b27      	ldr	r3, [pc, #156]	@ (80068f4 <HAL_RCC_OscConfig+0x284>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4618      	mov	r0, r3
 800685a:	f7fb f803 	bl	8001864 <HAL_InitTick>
 800685e:	4603      	mov	r3, r0
 8006860:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8006864:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 808a 	beq.w	8006982 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800686e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006872:	f000 bdd2 	b.w	800741a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d066      	beq.n	800694c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800687e:	4b1c      	ldr	r3, [pc, #112]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a1b      	ldr	r2, [pc, #108]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 8006884:	f043 0301 	orr.w	r3, r3, #1
 8006888:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800688a:	f7fb fb27 	bl	8001edc <HAL_GetTick>
 800688e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006890:	e009      	b.n	80068a6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006892:	f7fb fb23 	bl	8001edc <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	2b02      	cmp	r3, #2
 800689e:	d902      	bls.n	80068a6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	f000 bdba 	b.w	800741a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80068a6:	4b12      	ldr	r3, [pc, #72]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0304 	and.w	r3, r3, #4
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0ef      	beq.n	8006892 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80068b2:	4b0f      	ldr	r3, [pc, #60]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	4a0e      	ldr	r2, [pc, #56]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 80068b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80068bc:	6093      	str	r3, [r2, #8]
 80068be:	4b0c      	ldr	r3, [pc, #48]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ca:	4909      	ldr	r1, [pc, #36]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80068d8:	d30e      	bcc.n	80068f8 <HAL_RCC_OscConfig+0x288>
 80068da:	4b05      	ldr	r3, [pc, #20]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	f023 021f 	bic.w	r2, r3, #31
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	4902      	ldr	r1, [pc, #8]	@ (80068f0 <HAL_RCC_OscConfig+0x280>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	60cb      	str	r3, [r1, #12]
 80068ec:	e04a      	b.n	8006984 <HAL_RCC_OscConfig+0x314>
 80068ee:	bf00      	nop
 80068f0:	46020c00 	.word	0x46020c00
 80068f4:	20000008 	.word	0x20000008
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	da0a      	bge.n	8006916 <HAL_RCC_OscConfig+0x2a6>
 8006900:	4b98      	ldr	r3, [pc, #608]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	015b      	lsls	r3, r3, #5
 800690e:	4995      	ldr	r1, [pc, #596]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006910:	4313      	orrs	r3, r2
 8006912:	60cb      	str	r3, [r1, #12]
 8006914:	e036      	b.n	8006984 <HAL_RCC_OscConfig+0x314>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800691e:	d30a      	bcc.n	8006936 <HAL_RCC_OscConfig+0x2c6>
 8006920:	4b90      	ldr	r3, [pc, #576]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	029b      	lsls	r3, r3, #10
 800692e:	498d      	ldr	r1, [pc, #564]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006930:	4313      	orrs	r3, r2
 8006932:	60cb      	str	r3, [r1, #12]
 8006934:	e026      	b.n	8006984 <HAL_RCC_OscConfig+0x314>
 8006936:	4b8b      	ldr	r3, [pc, #556]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	03db      	lsls	r3, r3, #15
 8006944:	4987      	ldr	r1, [pc, #540]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006946:	4313      	orrs	r3, r2
 8006948:	60cb      	str	r3, [r1, #12]
 800694a:	e01b      	b.n	8006984 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800694c:	4b85      	ldr	r3, [pc, #532]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a84      	ldr	r2, [pc, #528]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006952:	f023 0301 	bic.w	r3, r3, #1
 8006956:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006958:	f7fb fac0 	bl	8001edc <HAL_GetTick>
 800695c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800695e:	e009      	b.n	8006974 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006960:	f7fb fabc 	bl	8001edc <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d902      	bls.n	8006974 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	f000 bd53 	b.w	800741a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006974:	4b7b      	ldr	r3, [pc, #492]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0304 	and.w	r3, r3, #4
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1ef      	bne.n	8006960 <HAL_RCC_OscConfig+0x2f0>
 8006980:	e000      	b.n	8006984 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006982:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 808b 	beq.w	8006aa8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006994:	2b08      	cmp	r3, #8
 8006996:	d005      	beq.n	80069a4 <HAL_RCC_OscConfig+0x334>
 8006998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699a:	2b0c      	cmp	r3, #12
 800699c:	d109      	bne.n	80069b2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800699e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	d106      	bne.n	80069b2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d17d      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	f000 bd34 	b.w	800741a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069ba:	d106      	bne.n	80069ca <HAL_RCC_OscConfig+0x35a>
 80069bc:	4b69      	ldr	r3, [pc, #420]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a68      	ldr	r2, [pc, #416]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 80069c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	e041      	b.n	8006a4e <HAL_RCC_OscConfig+0x3de>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069d2:	d112      	bne.n	80069fa <HAL_RCC_OscConfig+0x38a>
 80069d4:	4b63      	ldr	r3, [pc, #396]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a62      	ldr	r2, [pc, #392]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 80069da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069de:	6013      	str	r3, [r2, #0]
 80069e0:	4b60      	ldr	r3, [pc, #384]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a5f      	ldr	r2, [pc, #380]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 80069e6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	4b5d      	ldr	r3, [pc, #372]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a5c      	ldr	r2, [pc, #368]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 80069f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	e029      	b.n	8006a4e <HAL_RCC_OscConfig+0x3de>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006a02:	d112      	bne.n	8006a2a <HAL_RCC_OscConfig+0x3ba>
 8006a04:	4b57      	ldr	r3, [pc, #348]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a56      	ldr	r2, [pc, #344]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006a0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	4b54      	ldr	r3, [pc, #336]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a53      	ldr	r2, [pc, #332]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006a16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	4b51      	ldr	r3, [pc, #324]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a50      	ldr	r2, [pc, #320]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006a22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a26:	6013      	str	r3, [r2, #0]
 8006a28:	e011      	b.n	8006a4e <HAL_RCC_OscConfig+0x3de>
 8006a2a:	4b4e      	ldr	r3, [pc, #312]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a4d      	ldr	r2, [pc, #308]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006a30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	4b4b      	ldr	r3, [pc, #300]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a4a      	ldr	r2, [pc, #296]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006a3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a40:	6013      	str	r3, [r2, #0]
 8006a42:	4b48      	ldr	r3, [pc, #288]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a47      	ldr	r2, [pc, #284]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006a48:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006a4c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d014      	beq.n	8006a80 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8006a56:	f7fb fa41 	bl	8001edc <HAL_GetTick>
 8006a5a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a5c:	e009      	b.n	8006a72 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a5e:	f7fb fa3d 	bl	8001edc <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	2b64      	cmp	r3, #100	@ 0x64
 8006a6a:	d902      	bls.n	8006a72 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	f000 bcd4 	b.w	800741a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a72:	4b3c      	ldr	r3, [pc, #240]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0ef      	beq.n	8006a5e <HAL_RCC_OscConfig+0x3ee>
 8006a7e:	e013      	b.n	8006aa8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8006a80:	f7fb fa2c 	bl	8001edc <HAL_GetTick>
 8006a84:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a86:	e009      	b.n	8006a9c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a88:	f7fb fa28 	bl	8001edc <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b64      	cmp	r3, #100	@ 0x64
 8006a94:	d902      	bls.n	8006a9c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	f000 bcbf 	b.w	800741a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a9c:	4b31      	ldr	r3, [pc, #196]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1ef      	bne.n	8006a88 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d05f      	beq.n	8006b74 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	d005      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x456>
 8006aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abc:	2b0c      	cmp	r3, #12
 8006abe:	d114      	bne.n	8006aea <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d111      	bne.n	8006aea <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d102      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	f000 bca3 	b.w	800741a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006ad4:	4b23      	ldr	r3, [pc, #140]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	041b      	lsls	r3, r3, #16
 8006ae2:	4920      	ldr	r1, [pc, #128]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006ae8:	e044      	b.n	8006b74 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d024      	beq.n	8006b3c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8006af2:	4b1c      	ldr	r3, [pc, #112]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a1b      	ldr	r2, [pc, #108]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006afc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006afe:	f7fb f9ed 	bl	8001edc <HAL_GetTick>
 8006b02:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b04:	e009      	b.n	8006b1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b06:	f7fb f9e9 	bl	8001edc <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d902      	bls.n	8006b1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	f000 bc80 	b.w	800741a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b1a:	4b12      	ldr	r3, [pc, #72]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0ef      	beq.n	8006b06 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006b26:	4b0f      	ldr	r3, [pc, #60]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	041b      	lsls	r3, r3, #16
 8006b34:	490b      	ldr	r1, [pc, #44]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	610b      	str	r3, [r1, #16]
 8006b3a:	e01b      	b.n	8006b74 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8006b3c:	4b09      	ldr	r3, [pc, #36]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a08      	ldr	r2, [pc, #32]	@ (8006b64 <HAL_RCC_OscConfig+0x4f4>)
 8006b42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b46:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006b48:	f7fb f9c8 	bl	8001edc <HAL_GetTick>
 8006b4c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b4e:	e00b      	b.n	8006b68 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b50:	f7fb f9c4 	bl	8001edc <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d904      	bls.n	8006b68 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	f000 bc5b 	b.w	800741a <HAL_RCC_OscConfig+0xdaa>
 8006b64:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b68:	4baf      	ldr	r3, [pc, #700]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1ed      	bne.n	8006b50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0308 	and.w	r3, r3, #8
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 80c8 	beq.w	8006d12 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8006b82:	2300      	movs	r3, #0
 8006b84:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b88:	4ba7      	ldr	r3, [pc, #668]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b8e:	f003 0304 	and.w	r3, r3, #4
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d111      	bne.n	8006bba <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b96:	4ba4      	ldr	r3, [pc, #656]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b9c:	4aa2      	ldr	r2, [pc, #648]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006b9e:	f043 0304 	orr.w	r3, r3, #4
 8006ba2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006ba6:	4ba0      	ldr	r3, [pc, #640]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	617b      	str	r3, [r7, #20]
 8006bb2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006bba:	4b9c      	ldr	r3, [pc, #624]	@ (8006e2c <HAL_RCC_OscConfig+0x7bc>)
 8006bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d119      	bne.n	8006bfa <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006bc6:	4b99      	ldr	r3, [pc, #612]	@ (8006e2c <HAL_RCC_OscConfig+0x7bc>)
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bca:	4a98      	ldr	r2, [pc, #608]	@ (8006e2c <HAL_RCC_OscConfig+0x7bc>)
 8006bcc:	f043 0301 	orr.w	r3, r3, #1
 8006bd0:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bd2:	f7fb f983 	bl	8001edc <HAL_GetTick>
 8006bd6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006bd8:	e009      	b.n	8006bee <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bda:	f7fb f97f 	bl	8001edc <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d902      	bls.n	8006bee <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	f000 bc16 	b.w	800741a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006bee:	4b8f      	ldr	r3, [pc, #572]	@ (8006e2c <HAL_RCC_OscConfig+0x7bc>)
 8006bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0ef      	beq.n	8006bda <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d05f      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8006c02:	4b89      	ldr	r3, [pc, #548]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c08:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	699a      	ldr	r2, [r3, #24]
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d037      	beq.n	8006c88 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d006      	beq.n	8006c30 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e3f4      	b.n	800741a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006c30:	6a3b      	ldr	r3, [r7, #32]
 8006c32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d01b      	beq.n	8006c72 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8006c3a:	4b7b      	ldr	r3, [pc, #492]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006c3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c40:	4a79      	ldr	r2, [pc, #484]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006c42:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006c46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8006c4a:	f7fb f947 	bl	8001edc <HAL_GetTick>
 8006c4e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006c50:	e008      	b.n	8006c64 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c52:	f7fb f943 	bl	8001edc <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b05      	cmp	r3, #5
 8006c5e:	d901      	bls.n	8006c64 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e3da      	b.n	800741a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006c64:	4b70      	ldr	r3, [pc, #448]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006c66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1ef      	bne.n	8006c52 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006c72:	4b6d      	ldr	r3, [pc, #436]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c78:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	4969      	ldr	r1, [pc, #420]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006c88:	4b67      	ldr	r3, [pc, #412]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c8e:	4a66      	ldr	r2, [pc, #408]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006c90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006c94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006c98:	f7fb f920 	bl	8001edc <HAL_GetTick>
 8006c9c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ca0:	f7fb f91c 	bl	8001edc <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b05      	cmp	r3, #5
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e3b3      	b.n	800741a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006cb2:	4b5d      	ldr	r3, [pc, #372]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d0ef      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x630>
 8006cc0:	e01b      	b.n	8006cfa <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006cc2:	4b59      	ldr	r3, [pc, #356]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cc8:	4a57      	ldr	r2, [pc, #348]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006cca:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006cce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006cd2:	f7fb f903 	bl	8001edc <HAL_GetTick>
 8006cd6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006cd8:	e008      	b.n	8006cec <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cda:	f7fb f8ff 	bl	8001edc <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b05      	cmp	r3, #5
 8006ce6:	d901      	bls.n	8006cec <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e396      	b.n	800741a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006cec:	4b4e      	ldr	r3, [pc, #312]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006cee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cf2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1ef      	bne.n	8006cda <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006cfa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d107      	bne.n	8006d12 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d02:	4b49      	ldr	r3, [pc, #292]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d08:	4a47      	ldr	r2, [pc, #284]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006d0a:	f023 0304 	bic.w	r3, r3, #4
 8006d0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0304 	and.w	r3, r3, #4
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 8111 	beq.w	8006f42 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8006d20:	2300      	movs	r3, #0
 8006d22:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d26:	4b40      	ldr	r3, [pc, #256]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d111      	bne.n	8006d58 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d34:	4b3c      	ldr	r3, [pc, #240]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d3a:	4a3b      	ldr	r2, [pc, #236]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006d3c:	f043 0304 	orr.w	r3, r3, #4
 8006d40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006d44:	4b38      	ldr	r3, [pc, #224]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d4a:	f003 0304 	and.w	r3, r3, #4
 8006d4e:	613b      	str	r3, [r7, #16]
 8006d50:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006d52:	2301      	movs	r3, #1
 8006d54:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006d58:	4b34      	ldr	r3, [pc, #208]	@ (8006e2c <HAL_RCC_OscConfig+0x7bc>)
 8006d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d118      	bne.n	8006d96 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006d64:	4b31      	ldr	r3, [pc, #196]	@ (8006e2c <HAL_RCC_OscConfig+0x7bc>)
 8006d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d68:	4a30      	ldr	r2, [pc, #192]	@ (8006e2c <HAL_RCC_OscConfig+0x7bc>)
 8006d6a:	f043 0301 	orr.w	r3, r3, #1
 8006d6e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d70:	f7fb f8b4 	bl	8001edc <HAL_GetTick>
 8006d74:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006d76:	e008      	b.n	8006d8a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d78:	f7fb f8b0 	bl	8001edc <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d901      	bls.n	8006d8a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e347      	b.n	800741a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006d8a:	4b28      	ldr	r3, [pc, #160]	@ (8006e2c <HAL_RCC_OscConfig+0x7bc>)
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0f0      	beq.n	8006d78 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d01f      	beq.n	8006de2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f003 0304 	and.w	r3, r3, #4
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d010      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006dae:	4b1e      	ldr	r3, [pc, #120]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006db4:	4a1c      	ldr	r2, [pc, #112]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006db6:	f043 0304 	orr.w	r3, r3, #4
 8006dba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dc4:	4a18      	ldr	r2, [pc, #96]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006dc6:	f043 0301 	orr.w	r3, r3, #1
 8006dca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006dce:	e018      	b.n	8006e02 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006dd0:	4b15      	ldr	r3, [pc, #84]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006dd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dd6:	4a14      	ldr	r2, [pc, #80]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006dd8:	f043 0301 	orr.w	r3, r3, #1
 8006ddc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006de0:	e00f      	b.n	8006e02 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006de2:	4b11      	ldr	r3, [pc, #68]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006de8:	4a0f      	ldr	r2, [pc, #60]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006dea:	f023 0301 	bic.w	r3, r3, #1
 8006dee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006df2:	4b0d      	ldr	r3, [pc, #52]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006df4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006df8:	4a0b      	ldr	r2, [pc, #44]	@ (8006e28 <HAL_RCC_OscConfig+0x7b8>)
 8006dfa:	f023 0304 	bic.w	r3, r3, #4
 8006dfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d057      	beq.n	8006eba <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8006e0a:	f7fb f867 	bl	8001edc <HAL_GetTick>
 8006e0e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e10:	e00e      	b.n	8006e30 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e12:	f7fb f863 	bl	8001edc <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d905      	bls.n	8006e30 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e2f8      	b.n	800741a <HAL_RCC_OscConfig+0xdaa>
 8006e28:	46020c00 	.word	0x46020c00
 8006e2c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e30:	4b9c      	ldr	r3, [pc, #624]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006e32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0e9      	beq.n	8006e12 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d01b      	beq.n	8006e82 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006e4a:	4b96      	ldr	r3, [pc, #600]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e50:	4a94      	ldr	r2, [pc, #592]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006e5a:	e00a      	b.n	8006e72 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e5c:	f7fb f83e 	bl	8001edc <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d901      	bls.n	8006e72 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e2d3      	b.n	800741a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006e72:	4b8c      	ldr	r3, [pc, #560]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006e74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d0ed      	beq.n	8006e5c <HAL_RCC_OscConfig+0x7ec>
 8006e80:	e053      	b.n	8006f2a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006e82:	4b88      	ldr	r3, [pc, #544]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006e84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e88:	4a86      	ldr	r2, [pc, #536]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006e8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006e92:	e00a      	b.n	8006eaa <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e94:	f7fb f822 	bl	8001edc <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e2b7      	b.n	800741a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006eaa:	4b7e      	ldr	r3, [pc, #504]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006eb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1ed      	bne.n	8006e94 <HAL_RCC_OscConfig+0x824>
 8006eb8:	e037      	b.n	8006f2a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006eba:	f7fb f80f 	bl	8001edc <HAL_GetTick>
 8006ebe:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ec0:	e00a      	b.n	8006ed8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ec2:	f7fb f80b 	bl	8001edc <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e2a0      	b.n	800741a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ed8:	4b72      	ldr	r3, [pc, #456]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006eda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1ed      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006ee6:	4b6f      	ldr	r3, [pc, #444]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d01a      	beq.n	8006f2a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006ef4:	4b6b      	ldr	r3, [pc, #428]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006ef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006efa:	4a6a      	ldr	r2, [pc, #424]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006efc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006f04:	e00a      	b.n	8006f1c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f06:	f7fa ffe9 	bl	8001edc <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d901      	bls.n	8006f1c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e27e      	b.n	800741a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006f1c:	4b61      	ldr	r3, [pc, #388]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006f1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1ed      	bne.n	8006f06 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f2a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d107      	bne.n	8006f42 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f32:	4b5c      	ldr	r3, [pc, #368]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f38:	4a5a      	ldr	r2, [pc, #360]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006f3a:	f023 0304 	bic.w	r3, r3, #4
 8006f3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0320 	and.w	r3, r3, #32
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d036      	beq.n	8006fbc <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d019      	beq.n	8006f8a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006f56:	4b53      	ldr	r3, [pc, #332]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a52      	ldr	r2, [pc, #328]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006f5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006f60:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006f62:	f7fa ffbb 	bl	8001edc <HAL_GetTick>
 8006f66:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006f68:	e008      	b.n	8006f7c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f6a:	f7fa ffb7 	bl	8001edc <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d901      	bls.n	8006f7c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e24e      	b.n	800741a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006f7c:	4b49      	ldr	r3, [pc, #292]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0f0      	beq.n	8006f6a <HAL_RCC_OscConfig+0x8fa>
 8006f88:	e018      	b.n	8006fbc <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8006f8a:	4b46      	ldr	r3, [pc, #280]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a45      	ldr	r2, [pc, #276]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006f90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f94:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006f96:	f7fa ffa1 	bl	8001edc <HAL_GetTick>
 8006f9a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006f9c:	e008      	b.n	8006fb0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f9e:	f7fa ff9d 	bl	8001edc <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d901      	bls.n	8006fb0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e234      	b.n	800741a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006fb0:	4b3c      	ldr	r3, [pc, #240]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1f0      	bne.n	8006f9e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d036      	beq.n	8007036 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d019      	beq.n	8007004 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006fd0:	4b34      	ldr	r3, [pc, #208]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a33      	ldr	r2, [pc, #204]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006fd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006fda:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006fdc:	f7fa ff7e 	bl	8001edc <HAL_GetTick>
 8006fe0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006fe2:	e008      	b.n	8006ff6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006fe4:	f7fa ff7a 	bl	8001edc <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e211      	b.n	800741a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006ff6:	4b2b      	ldr	r3, [pc, #172]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d0f0      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x974>
 8007002:	e018      	b.n	8007036 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8007004:	4b27      	ldr	r3, [pc, #156]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a26      	ldr	r2, [pc, #152]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 800700a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800700e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007010:	f7fa ff64 	bl	8001edc <HAL_GetTick>
 8007014:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007016:	e008      	b.n	800702a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007018:	f7fa ff60 	bl	8001edc <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b02      	cmp	r3, #2
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e1f7      	b.n	800741a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800702a:	4b1e      	ldr	r3, [pc, #120]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1f0      	bne.n	8007018 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	d07f      	beq.n	8007142 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007046:	2b00      	cmp	r3, #0
 8007048:	d062      	beq.n	8007110 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800704a:	4b16      	ldr	r3, [pc, #88]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	4a15      	ldr	r2, [pc, #84]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8007050:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007054:	6093      	str	r3, [r2, #8]
 8007056:	4b13      	ldr	r3, [pc, #76]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007062:	4910      	ldr	r1, [pc, #64]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8007064:	4313      	orrs	r3, r2
 8007066:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800706c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007070:	d309      	bcc.n	8007086 <HAL_RCC_OscConfig+0xa16>
 8007072:	4b0c      	ldr	r3, [pc, #48]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f023 021f 	bic.w	r2, r3, #31
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	4909      	ldr	r1, [pc, #36]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8007080:	4313      	orrs	r3, r2
 8007082:	60cb      	str	r3, [r1, #12]
 8007084:	e02a      	b.n	80070dc <HAL_RCC_OscConfig+0xa6c>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708a:	2b00      	cmp	r3, #0
 800708c:	da0c      	bge.n	80070a8 <HAL_RCC_OscConfig+0xa38>
 800708e:	4b05      	ldr	r3, [pc, #20]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	015b      	lsls	r3, r3, #5
 800709c:	4901      	ldr	r1, [pc, #4]	@ (80070a4 <HAL_RCC_OscConfig+0xa34>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	60cb      	str	r3, [r1, #12]
 80070a2:	e01b      	b.n	80070dc <HAL_RCC_OscConfig+0xa6c>
 80070a4:	46020c00 	.word	0x46020c00
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070b0:	d30a      	bcc.n	80070c8 <HAL_RCC_OscConfig+0xa58>
 80070b2:	4ba1      	ldr	r3, [pc, #644]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	029b      	lsls	r3, r3, #10
 80070c0:	499d      	ldr	r1, [pc, #628]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	60cb      	str	r3, [r1, #12]
 80070c6:	e009      	b.n	80070dc <HAL_RCC_OscConfig+0xa6c>
 80070c8:	4b9b      	ldr	r3, [pc, #620]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	03db      	lsls	r3, r3, #15
 80070d6:	4998      	ldr	r1, [pc, #608]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80070dc:	4b96      	ldr	r3, [pc, #600]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a95      	ldr	r2, [pc, #596]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 80070e2:	f043 0310 	orr.w	r3, r3, #16
 80070e6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80070e8:	f7fa fef8 	bl	8001edc <HAL_GetTick>
 80070ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80070ee:	e008      	b.n	8007102 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80070f0:	f7fa fef4 	bl	8001edc <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d901      	bls.n	8007102 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e18b      	b.n	800741a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007102:	4b8d      	ldr	r3, [pc, #564]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0320 	and.w	r3, r3, #32
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0f0      	beq.n	80070f0 <HAL_RCC_OscConfig+0xa80>
 800710e:	e018      	b.n	8007142 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8007110:	4b89      	ldr	r3, [pc, #548]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a88      	ldr	r2, [pc, #544]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 8007116:	f023 0310 	bic.w	r3, r3, #16
 800711a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800711c:	f7fa fede 	bl	8001edc <HAL_GetTick>
 8007120:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8007122:	e008      	b.n	8007136 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007124:	f7fa feda 	bl	8001edc <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b02      	cmp	r3, #2
 8007130:	d901      	bls.n	8007136 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e171      	b.n	800741a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8007136:	4b80      	ldr	r3, [pc, #512]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0320 	and.w	r3, r3, #32
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1f0      	bne.n	8007124 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007146:	2b00      	cmp	r3, #0
 8007148:	f000 8166 	beq.w	8007418 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800714c:	2300      	movs	r3, #0
 800714e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007152:	4b79      	ldr	r3, [pc, #484]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	f003 030c 	and.w	r3, r3, #12
 800715a:	2b0c      	cmp	r3, #12
 800715c:	f000 80f2 	beq.w	8007344 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007164:	2b02      	cmp	r3, #2
 8007166:	f040 80c5 	bne.w	80072f4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800716a:	4b73      	ldr	r3, [pc, #460]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a72      	ldr	r2, [pc, #456]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 8007170:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007174:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007176:	f7fa feb1 	bl	8001edc <HAL_GetTick>
 800717a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800717c:	e008      	b.n	8007190 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800717e:	f7fa fead 	bl	8001edc <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	2b02      	cmp	r3, #2
 800718a:	d901      	bls.n	8007190 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e144      	b.n	800741a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007190:	4b69      	ldr	r3, [pc, #420]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1f0      	bne.n	800717e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800719c:	4b66      	ldr	r3, [pc, #408]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 800719e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071a2:	f003 0304 	and.w	r3, r3, #4
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d111      	bne.n	80071ce <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80071aa:	4b63      	ldr	r3, [pc, #396]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 80071ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071b0:	4a61      	ldr	r2, [pc, #388]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 80071b2:	f043 0304 	orr.w	r3, r3, #4
 80071b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80071ba:	4b5f      	ldr	r3, [pc, #380]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 80071bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80071c8:	2301      	movs	r3, #1
 80071ca:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80071ce:	4b5b      	ldr	r3, [pc, #364]	@ (800733c <HAL_RCC_OscConfig+0xccc>)
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80071d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071da:	d102      	bne.n	80071e2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80071dc:	2301      	movs	r3, #1
 80071de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80071e2:	4b56      	ldr	r3, [pc, #344]	@ (800733c <HAL_RCC_OscConfig+0xccc>)
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	4a55      	ldr	r2, [pc, #340]	@ (800733c <HAL_RCC_OscConfig+0xccc>)
 80071e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071ec:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80071ee:	4b52      	ldr	r3, [pc, #328]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 80071f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071f6:	f023 0303 	bic.w	r3, r3, #3
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007202:	3a01      	subs	r2, #1
 8007204:	0212      	lsls	r2, r2, #8
 8007206:	4311      	orrs	r1, r2
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800720c:	430a      	orrs	r2, r1
 800720e:	494a      	ldr	r1, [pc, #296]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 8007210:	4313      	orrs	r3, r2
 8007212:	628b      	str	r3, [r1, #40]	@ 0x28
 8007214:	4b48      	ldr	r3, [pc, #288]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 8007216:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007218:	4b49      	ldr	r3, [pc, #292]	@ (8007340 <HAL_RCC_OscConfig+0xcd0>)
 800721a:	4013      	ands	r3, r2
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007220:	3a01      	subs	r2, #1
 8007222:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800722a:	3a01      	subs	r2, #1
 800722c:	0252      	lsls	r2, r2, #9
 800722e:	b292      	uxth	r2, r2
 8007230:	4311      	orrs	r1, r2
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007236:	3a01      	subs	r2, #1
 8007238:	0412      	lsls	r2, r2, #16
 800723a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800723e:	4311      	orrs	r1, r2
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007244:	3a01      	subs	r2, #1
 8007246:	0612      	lsls	r2, r2, #24
 8007248:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800724c:	430a      	orrs	r2, r1
 800724e:	493a      	ldr	r1, [pc, #232]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 8007250:	4313      	orrs	r3, r2
 8007252:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007254:	4b38      	ldr	r3, [pc, #224]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 8007256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007258:	4a37      	ldr	r2, [pc, #220]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 800725a:	f023 0310 	bic.w	r3, r3, #16
 800725e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007264:	4a34      	ldr	r2, [pc, #208]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 8007266:	00db      	lsls	r3, r3, #3
 8007268:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800726a:	4b33      	ldr	r3, [pc, #204]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 800726c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800726e:	4a32      	ldr	r2, [pc, #200]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 8007270:	f043 0310 	orr.w	r3, r3, #16
 8007274:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8007276:	4b30      	ldr	r3, [pc, #192]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 8007278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727a:	f023 020c 	bic.w	r2, r3, #12
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007282:	492d      	ldr	r1, [pc, #180]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 8007284:	4313      	orrs	r3, r2
 8007286:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8007288:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800728c:	2b01      	cmp	r3, #1
 800728e:	d105      	bne.n	800729c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007290:	4b2a      	ldr	r3, [pc, #168]	@ (800733c <HAL_RCC_OscConfig+0xccc>)
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	4a29      	ldr	r2, [pc, #164]	@ (800733c <HAL_RCC_OscConfig+0xccc>)
 8007296:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800729a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800729c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d107      	bne.n	80072b4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80072a4:	4b24      	ldr	r3, [pc, #144]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 80072a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072aa:	4a23      	ldr	r2, [pc, #140]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 80072ac:	f023 0304 	bic.w	r3, r3, #4
 80072b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80072b4:	4b20      	ldr	r3, [pc, #128]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a1f      	ldr	r2, [pc, #124]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 80072ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80072be:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80072c0:	f7fa fe0c 	bl	8001edc <HAL_GetTick>
 80072c4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80072c6:	e008      	b.n	80072da <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072c8:	f7fa fe08 	bl	8001edc <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d901      	bls.n	80072da <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e09f      	b.n	800741a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80072da:	4b17      	ldr	r3, [pc, #92]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d0f0      	beq.n	80072c8 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80072e6:	4b14      	ldr	r3, [pc, #80]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 80072e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ea:	4a13      	ldr	r2, [pc, #76]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 80072ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80072f0:	6293      	str	r3, [r2, #40]	@ 0x28
 80072f2:	e091      	b.n	8007418 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80072f4:	4b10      	ldr	r3, [pc, #64]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a0f      	ldr	r2, [pc, #60]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 80072fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072fe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007300:	f7fa fdec 	bl	8001edc <HAL_GetTick>
 8007304:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007306:	e008      	b.n	800731a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007308:	f7fa fde8 	bl	8001edc <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	2b02      	cmp	r3, #2
 8007314:	d901      	bls.n	800731a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e07f      	b.n	800741a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800731a:	4b07      	ldr	r3, [pc, #28]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1f0      	bne.n	8007308 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007326:	4b04      	ldr	r3, [pc, #16]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 8007328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732a:	4a03      	ldr	r2, [pc, #12]	@ (8007338 <HAL_RCC_OscConfig+0xcc8>)
 800732c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8007330:	f023 0303 	bic.w	r3, r3, #3
 8007334:	6293      	str	r3, [r2, #40]	@ 0x28
 8007336:	e06f      	b.n	8007418 <HAL_RCC_OscConfig+0xda8>
 8007338:	46020c00 	.word	0x46020c00
 800733c:	46020800 	.word	0x46020800
 8007340:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007344:	4b37      	ldr	r3, [pc, #220]	@ (8007424 <HAL_RCC_OscConfig+0xdb4>)
 8007346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007348:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800734a:	4b36      	ldr	r3, [pc, #216]	@ (8007424 <HAL_RCC_OscConfig+0xdb4>)
 800734c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800734e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007354:	2b01      	cmp	r3, #1
 8007356:	d039      	beq.n	80073cc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	f003 0203 	and.w	r2, r3, #3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007362:	429a      	cmp	r2, r3
 8007364:	d132      	bne.n	80073cc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	0a1b      	lsrs	r3, r3, #8
 800736a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007372:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007374:	429a      	cmp	r2, r3
 8007376:	d129      	bne.n	80073cc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007382:	429a      	cmp	r2, r3
 8007384:	d122      	bne.n	80073cc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007390:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007392:	429a      	cmp	r2, r3
 8007394:	d11a      	bne.n	80073cc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	0a5b      	lsrs	r3, r3, #9
 800739a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073a2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d111      	bne.n	80073cc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	0c1b      	lsrs	r3, r3, #16
 80073ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073b4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d108      	bne.n	80073cc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	0e1b      	lsrs	r3, r3, #24
 80073be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d001      	beq.n	80073d0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e024      	b.n	800741a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80073d0:	4b14      	ldr	r3, [pc, #80]	@ (8007424 <HAL_RCC_OscConfig+0xdb4>)
 80073d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d4:	08db      	lsrs	r3, r3, #3
 80073d6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80073de:	429a      	cmp	r2, r3
 80073e0:	d01a      	beq.n	8007418 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80073e2:	4b10      	ldr	r3, [pc, #64]	@ (8007424 <HAL_RCC_OscConfig+0xdb4>)
 80073e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e6:	4a0f      	ldr	r2, [pc, #60]	@ (8007424 <HAL_RCC_OscConfig+0xdb4>)
 80073e8:	f023 0310 	bic.w	r3, r3, #16
 80073ec:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ee:	f7fa fd75 	bl	8001edc <HAL_GetTick>
 80073f2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80073f4:	bf00      	nop
 80073f6:	f7fa fd71 	bl	8001edc <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fe:	4293      	cmp	r3, r2
 8007400:	d0f9      	beq.n	80073f6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007406:	4a07      	ldr	r2, [pc, #28]	@ (8007424 <HAL_RCC_OscConfig+0xdb4>)
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800740c:	4b05      	ldr	r3, [pc, #20]	@ (8007424 <HAL_RCC_OscConfig+0xdb4>)
 800740e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007410:	4a04      	ldr	r2, [pc, #16]	@ (8007424 <HAL_RCC_OscConfig+0xdb4>)
 8007412:	f043 0310 	orr.w	r3, r3, #16
 8007416:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3738      	adds	r7, #56	@ 0x38
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	46020c00 	.word	0x46020c00

08007428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e1d9      	b.n	80077f0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800743c:	4b9b      	ldr	r3, [pc, #620]	@ (80076ac <HAL_RCC_ClockConfig+0x284>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 030f 	and.w	r3, r3, #15
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	429a      	cmp	r2, r3
 8007448:	d910      	bls.n	800746c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800744a:	4b98      	ldr	r3, [pc, #608]	@ (80076ac <HAL_RCC_ClockConfig+0x284>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f023 020f 	bic.w	r2, r3, #15
 8007452:	4996      	ldr	r1, [pc, #600]	@ (80076ac <HAL_RCC_ClockConfig+0x284>)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	4313      	orrs	r3, r2
 8007458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800745a:	4b94      	ldr	r3, [pc, #592]	@ (80076ac <HAL_RCC_ClockConfig+0x284>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 030f 	and.w	r3, r3, #15
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	429a      	cmp	r2, r3
 8007466:	d001      	beq.n	800746c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e1c1      	b.n	80077f0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0310 	and.w	r3, r3, #16
 8007474:	2b00      	cmp	r3, #0
 8007476:	d010      	beq.n	800749a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	695a      	ldr	r2, [r3, #20]
 800747c:	4b8c      	ldr	r3, [pc, #560]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 800747e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007480:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007484:	429a      	cmp	r2, r3
 8007486:	d908      	bls.n	800749a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8007488:	4b89      	ldr	r3, [pc, #548]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 800748a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	4986      	ldr	r1, [pc, #536]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 8007496:	4313      	orrs	r3, r2
 8007498:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0308 	and.w	r3, r3, #8
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d012      	beq.n	80074cc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691a      	ldr	r2, [r3, #16]
 80074aa:	4b81      	ldr	r3, [pc, #516]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	091b      	lsrs	r3, r3, #4
 80074b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d909      	bls.n	80074cc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80074b8:	4b7d      	ldr	r3, [pc, #500]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	011b      	lsls	r3, r3, #4
 80074c6:	497a      	ldr	r1, [pc, #488]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d010      	beq.n	80074fa <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68da      	ldr	r2, [r3, #12]
 80074dc:	4b74      	ldr	r3, [pc, #464]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d908      	bls.n	80074fa <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80074e8:	4b71      	ldr	r3, [pc, #452]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	496e      	ldr	r1, [pc, #440]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d010      	beq.n	8007528 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689a      	ldr	r2, [r3, #8]
 800750a:	4b69      	ldr	r3, [pc, #420]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	f003 030f 	and.w	r3, r3, #15
 8007512:	429a      	cmp	r2, r3
 8007514:	d908      	bls.n	8007528 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007516:	4b66      	ldr	r3, [pc, #408]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	f023 020f 	bic.w	r2, r3, #15
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	4963      	ldr	r1, [pc, #396]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 8007524:	4313      	orrs	r3, r2
 8007526:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 80d2 	beq.w	80076da <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8007536:	2300      	movs	r3, #0
 8007538:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	2b03      	cmp	r3, #3
 8007540:	d143      	bne.n	80075ca <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007542:	4b5b      	ldr	r3, [pc, #364]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 8007544:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d110      	bne.n	8007572 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007550:	4b57      	ldr	r3, [pc, #348]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 8007552:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007556:	4a56      	ldr	r2, [pc, #344]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 8007558:	f043 0304 	orr.w	r3, r3, #4
 800755c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007560:	4b53      	ldr	r3, [pc, #332]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 8007562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007566:	f003 0304 	and.w	r3, r3, #4
 800756a:	60bb      	str	r3, [r7, #8]
 800756c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800756e:	2301      	movs	r3, #1
 8007570:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8007572:	f7fa fcb3 	bl	8001edc <HAL_GetTick>
 8007576:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007578:	4b4e      	ldr	r3, [pc, #312]	@ (80076b4 <HAL_RCC_ClockConfig+0x28c>)
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00f      	beq.n	80075a4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007584:	e008      	b.n	8007598 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8007586:	f7fa fca9 	bl	8001edc <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	2b02      	cmp	r3, #2
 8007592:	d901      	bls.n	8007598 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e12b      	b.n	80077f0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007598:	4b46      	ldr	r3, [pc, #280]	@ (80076b4 <HAL_RCC_ClockConfig+0x28c>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d0f0      	beq.n	8007586 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d107      	bne.n	80075ba <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80075aa:	4b41      	ldr	r3, [pc, #260]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 80075ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075b0:	4a3f      	ldr	r2, [pc, #252]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 80075b2:	f023 0304 	bic.w	r3, r3, #4
 80075b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80075ba:	4b3d      	ldr	r3, [pc, #244]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d121      	bne.n	800760a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e112      	b.n	80077f0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d107      	bne.n	80075e2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075d2:	4b37      	ldr	r3, [pc, #220]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d115      	bne.n	800760a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e106      	b.n	80077f0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d107      	bne.n	80075fa <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80075ea:	4b31      	ldr	r3, [pc, #196]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0304 	and.w	r3, r3, #4
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d109      	bne.n	800760a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e0fa      	b.n	80077f0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075fa:	4b2d      	ldr	r3, [pc, #180]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e0f2      	b.n	80077f0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800760a:	4b29      	ldr	r3, [pc, #164]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	f023 0203 	bic.w	r2, r3, #3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	4926      	ldr	r1, [pc, #152]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 8007618:	4313      	orrs	r3, r2
 800761a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800761c:	f7fa fc5e 	bl	8001edc <HAL_GetTick>
 8007620:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	2b03      	cmp	r3, #3
 8007628:	d112      	bne.n	8007650 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800762a:	e00a      	b.n	8007642 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800762c:	f7fa fc56 	bl	8001edc <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800763a:	4293      	cmp	r3, r2
 800763c:	d901      	bls.n	8007642 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e0d6      	b.n	80077f0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007642:	4b1b      	ldr	r3, [pc, #108]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	f003 030c 	and.w	r3, r3, #12
 800764a:	2b0c      	cmp	r3, #12
 800764c:	d1ee      	bne.n	800762c <HAL_RCC_ClockConfig+0x204>
 800764e:	e044      	b.n	80076da <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	2b02      	cmp	r3, #2
 8007656:	d112      	bne.n	800767e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007658:	e00a      	b.n	8007670 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800765a:	f7fa fc3f 	bl	8001edc <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007668:	4293      	cmp	r3, r2
 800766a:	d901      	bls.n	8007670 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e0bf      	b.n	80077f0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007670:	4b0f      	ldr	r3, [pc, #60]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	f003 030c 	and.w	r3, r3, #12
 8007678:	2b08      	cmp	r3, #8
 800767a:	d1ee      	bne.n	800765a <HAL_RCC_ClockConfig+0x232>
 800767c:	e02d      	b.n	80076da <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d123      	bne.n	80076ce <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007686:	e00a      	b.n	800769e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007688:	f7fa fc28 	bl	8001edc <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007696:	4293      	cmp	r3, r2
 8007698:	d901      	bls.n	800769e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e0a8      	b.n	80077f0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800769e:	4b04      	ldr	r3, [pc, #16]	@ (80076b0 <HAL_RCC_ClockConfig+0x288>)
 80076a0:	69db      	ldr	r3, [r3, #28]
 80076a2:	f003 030c 	and.w	r3, r3, #12
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1ee      	bne.n	8007688 <HAL_RCC_ClockConfig+0x260>
 80076aa:	e016      	b.n	80076da <HAL_RCC_ClockConfig+0x2b2>
 80076ac:	40022000 	.word	0x40022000
 80076b0:	46020c00 	.word	0x46020c00
 80076b4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076b8:	f7fa fc10 	bl	8001edc <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d901      	bls.n	80076ce <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e090      	b.n	80077f0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80076ce:	4b4a      	ldr	r3, [pc, #296]	@ (80077f8 <HAL_RCC_ClockConfig+0x3d0>)
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	f003 030c 	and.w	r3, r3, #12
 80076d6:	2b04      	cmp	r3, #4
 80076d8:	d1ee      	bne.n	80076b8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0302 	and.w	r3, r3, #2
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d010      	beq.n	8007708 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	689a      	ldr	r2, [r3, #8]
 80076ea:	4b43      	ldr	r3, [pc, #268]	@ (80077f8 <HAL_RCC_ClockConfig+0x3d0>)
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	f003 030f 	and.w	r3, r3, #15
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d208      	bcs.n	8007708 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80076f6:	4b40      	ldr	r3, [pc, #256]	@ (80077f8 <HAL_RCC_ClockConfig+0x3d0>)
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	f023 020f 	bic.w	r2, r3, #15
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	493d      	ldr	r1, [pc, #244]	@ (80077f8 <HAL_RCC_ClockConfig+0x3d0>)
 8007704:	4313      	orrs	r3, r2
 8007706:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007708:	4b3c      	ldr	r3, [pc, #240]	@ (80077fc <HAL_RCC_ClockConfig+0x3d4>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 030f 	and.w	r3, r3, #15
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	429a      	cmp	r2, r3
 8007714:	d210      	bcs.n	8007738 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007716:	4b39      	ldr	r3, [pc, #228]	@ (80077fc <HAL_RCC_ClockConfig+0x3d4>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f023 020f 	bic.w	r2, r3, #15
 800771e:	4937      	ldr	r1, [pc, #220]	@ (80077fc <HAL_RCC_ClockConfig+0x3d4>)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	4313      	orrs	r3, r2
 8007724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007726:	4b35      	ldr	r3, [pc, #212]	@ (80077fc <HAL_RCC_ClockConfig+0x3d4>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 030f 	and.w	r3, r3, #15
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	429a      	cmp	r2, r3
 8007732:	d001      	beq.n	8007738 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e05b      	b.n	80077f0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0304 	and.w	r3, r3, #4
 8007740:	2b00      	cmp	r3, #0
 8007742:	d010      	beq.n	8007766 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68da      	ldr	r2, [r3, #12]
 8007748:	4b2b      	ldr	r3, [pc, #172]	@ (80077f8 <HAL_RCC_ClockConfig+0x3d0>)
 800774a:	6a1b      	ldr	r3, [r3, #32]
 800774c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007750:	429a      	cmp	r2, r3
 8007752:	d208      	bcs.n	8007766 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007754:	4b28      	ldr	r3, [pc, #160]	@ (80077f8 <HAL_RCC_ClockConfig+0x3d0>)
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	4925      	ldr	r1, [pc, #148]	@ (80077f8 <HAL_RCC_ClockConfig+0x3d0>)
 8007762:	4313      	orrs	r3, r2
 8007764:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0308 	and.w	r3, r3, #8
 800776e:	2b00      	cmp	r3, #0
 8007770:	d012      	beq.n	8007798 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691a      	ldr	r2, [r3, #16]
 8007776:	4b20      	ldr	r3, [pc, #128]	@ (80077f8 <HAL_RCC_ClockConfig+0x3d0>)
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	091b      	lsrs	r3, r3, #4
 800777c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007780:	429a      	cmp	r2, r3
 8007782:	d209      	bcs.n	8007798 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007784:	4b1c      	ldr	r3, [pc, #112]	@ (80077f8 <HAL_RCC_ClockConfig+0x3d0>)
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	011b      	lsls	r3, r3, #4
 8007792:	4919      	ldr	r1, [pc, #100]	@ (80077f8 <HAL_RCC_ClockConfig+0x3d0>)
 8007794:	4313      	orrs	r3, r2
 8007796:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0310 	and.w	r3, r3, #16
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d010      	beq.n	80077c6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	695a      	ldr	r2, [r3, #20]
 80077a8:	4b13      	ldr	r3, [pc, #76]	@ (80077f8 <HAL_RCC_ClockConfig+0x3d0>)
 80077aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d208      	bcs.n	80077c6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80077b4:	4b10      	ldr	r3, [pc, #64]	@ (80077f8 <HAL_RCC_ClockConfig+0x3d0>)
 80077b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	490d      	ldr	r1, [pc, #52]	@ (80077f8 <HAL_RCC_ClockConfig+0x3d0>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80077c6:	f000 f821 	bl	800780c <HAL_RCC_GetSysClockFreq>
 80077ca:	4602      	mov	r2, r0
 80077cc:	4b0a      	ldr	r3, [pc, #40]	@ (80077f8 <HAL_RCC_ClockConfig+0x3d0>)
 80077ce:	6a1b      	ldr	r3, [r3, #32]
 80077d0:	f003 030f 	and.w	r3, r3, #15
 80077d4:	490a      	ldr	r1, [pc, #40]	@ (8007800 <HAL_RCC_ClockConfig+0x3d8>)
 80077d6:	5ccb      	ldrb	r3, [r1, r3]
 80077d8:	fa22 f303 	lsr.w	r3, r2, r3
 80077dc:	4a09      	ldr	r2, [pc, #36]	@ (8007804 <HAL_RCC_ClockConfig+0x3dc>)
 80077de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80077e0:	4b09      	ldr	r3, [pc, #36]	@ (8007808 <HAL_RCC_ClockConfig+0x3e0>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fa f83d 	bl	8001864 <HAL_InitTick>
 80077ea:	4603      	mov	r3, r0
 80077ec:	73fb      	strb	r3, [r7, #15]

  return status;
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3718      	adds	r7, #24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	46020c00 	.word	0x46020c00
 80077fc:	40022000 	.word	0x40022000
 8007800:	0802d83c 	.word	0x0802d83c
 8007804:	20000004 	.word	0x20000004
 8007808:	20000008 	.word	0x20000008

0800780c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800780c:	b480      	push	{r7}
 800780e:	b08b      	sub	sp, #44	@ 0x2c
 8007810:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800781a:	4b78      	ldr	r3, [pc, #480]	@ (80079fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	f003 030c 	and.w	r3, r3, #12
 8007822:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007824:	4b75      	ldr	r3, [pc, #468]	@ (80079fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007828:	f003 0303 	and.w	r3, r3, #3
 800782c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <HAL_RCC_GetSysClockFreq+0x34>
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	2b0c      	cmp	r3, #12
 8007838:	d121      	bne.n	800787e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d11e      	bne.n	800787e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8007840:	4b6e      	ldr	r3, [pc, #440]	@ (80079fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d107      	bne.n	800785c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800784c:	4b6b      	ldr	r3, [pc, #428]	@ (80079fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800784e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007852:	0b1b      	lsrs	r3, r3, #12
 8007854:	f003 030f 	and.w	r3, r3, #15
 8007858:	627b      	str	r3, [r7, #36]	@ 0x24
 800785a:	e005      	b.n	8007868 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800785c:	4b67      	ldr	r3, [pc, #412]	@ (80079fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	0f1b      	lsrs	r3, r3, #28
 8007862:	f003 030f 	and.w	r3, r3, #15
 8007866:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007868:	4a65      	ldr	r2, [pc, #404]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800786a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007870:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d110      	bne.n	800789a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800787c:	e00d      	b.n	800789a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800787e:	4b5f      	ldr	r3, [pc, #380]	@ (80079fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	f003 030c 	and.w	r3, r3, #12
 8007886:	2b04      	cmp	r3, #4
 8007888:	d102      	bne.n	8007890 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800788a:	4b5e      	ldr	r3, [pc, #376]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800788c:	623b      	str	r3, [r7, #32]
 800788e:	e004      	b.n	800789a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	2b08      	cmp	r3, #8
 8007894:	d101      	bne.n	800789a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007896:	4b5b      	ldr	r3, [pc, #364]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007898:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	2b0c      	cmp	r3, #12
 800789e:	f040 80a5 	bne.w	80079ec <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80078a2:	4b56      	ldr	r3, [pc, #344]	@ (80079fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80078a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80078ac:	4b53      	ldr	r3, [pc, #332]	@ (80079fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80078ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b0:	0a1b      	lsrs	r3, r3, #8
 80078b2:	f003 030f 	and.w	r3, r3, #15
 80078b6:	3301      	adds	r3, #1
 80078b8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80078ba:	4b50      	ldr	r3, [pc, #320]	@ (80079fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80078bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078be:	091b      	lsrs	r3, r3, #4
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80078c6:	4b4d      	ldr	r3, [pc, #308]	@ (80079fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80078c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ca:	08db      	lsrs	r3, r3, #3
 80078cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	fb02 f303 	mul.w	r3, r2, r3
 80078d6:	ee07 3a90 	vmov	s15, r3
 80078da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078de:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d003      	beq.n	80078f0 <HAL_RCC_GetSysClockFreq+0xe4>
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	d022      	beq.n	8007934 <HAL_RCC_GetSysClockFreq+0x128>
 80078ee:	e043      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fa:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8007a08 <HAL_RCC_GetSysClockFreq+0x1fc>
 80078fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007902:	4b3e      	ldr	r3, [pc, #248]	@ (80079fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007912:	ed97 6a01 	vldr	s12, [r7, #4]
 8007916:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8007a0c <HAL_RCC_GetSysClockFreq+0x200>
 800791a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800791e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007926:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800792a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800792e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007932:	e046      	b.n	80079c2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	ee07 3a90 	vmov	s15, r3
 800793a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8007a08 <HAL_RCC_GetSysClockFreq+0x1fc>
 8007942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007946:	4b2d      	ldr	r3, [pc, #180]	@ (80079fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800794a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800794e:	ee07 3a90 	vmov	s15, r3
 8007952:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007956:	ed97 6a01 	vldr	s12, [r7, #4]
 800795a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8007a0c <HAL_RCC_GetSysClockFreq+0x200>
 800795e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007962:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800796a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800796e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007976:	e024      	b.n	80079c2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797a:	ee07 3a90 	vmov	s15, r3
 800797e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	ee07 3a90 	vmov	s15, r3
 8007988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800798c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007990:	4b1a      	ldr	r3, [pc, #104]	@ (80079fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007998:	ee07 3a90 	vmov	s15, r3
 800799c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80079a0:	ed97 6a01 	vldr	s12, [r7, #4]
 80079a4:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8007a0c <HAL_RCC_GetSysClockFreq+0x200>
 80079a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80079ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80079b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80079b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079c0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80079c2:	4b0e      	ldr	r3, [pc, #56]	@ (80079fc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80079c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079c6:	0e1b      	lsrs	r3, r3, #24
 80079c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079cc:	3301      	adds	r3, #1
 80079ce:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	ee07 3a90 	vmov	s15, r3
 80079d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80079da:	edd7 6a07 	vldr	s13, [r7, #28]
 80079de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079e6:	ee17 3a90 	vmov	r3, s15
 80079ea:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80079ec:	6a3b      	ldr	r3, [r7, #32]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	372c      	adds	r7, #44	@ 0x2c
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	46020c00 	.word	0x46020c00
 8007a00:	0802d854 	.word	0x0802d854
 8007a04:	00f42400 	.word	0x00f42400
 8007a08:	4b742400 	.word	0x4b742400
 8007a0c:	46000000 	.word	0x46000000

08007a10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007a14:	f7ff fefa 	bl	800780c <HAL_RCC_GetSysClockFreq>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	4b07      	ldr	r3, [pc, #28]	@ (8007a38 <HAL_RCC_GetHCLKFreq+0x28>)
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	f003 030f 	and.w	r3, r3, #15
 8007a22:	4906      	ldr	r1, [pc, #24]	@ (8007a3c <HAL_RCC_GetHCLKFreq+0x2c>)
 8007a24:	5ccb      	ldrb	r3, [r1, r3]
 8007a26:	fa22 f303 	lsr.w	r3, r2, r3
 8007a2a:	4a05      	ldr	r2, [pc, #20]	@ (8007a40 <HAL_RCC_GetHCLKFreq+0x30>)
 8007a2c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007a2e:	4b04      	ldr	r3, [pc, #16]	@ (8007a40 <HAL_RCC_GetHCLKFreq+0x30>)
 8007a30:	681b      	ldr	r3, [r3, #0]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	46020c00 	.word	0x46020c00
 8007a3c:	0802d83c 	.word	0x0802d83c
 8007a40:	20000004 	.word	0x20000004

08007a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8007a48:	f7ff ffe2 	bl	8007a10 <HAL_RCC_GetHCLKFreq>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	4b05      	ldr	r3, [pc, #20]	@ (8007a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	091b      	lsrs	r3, r3, #4
 8007a54:	f003 0307 	and.w	r3, r3, #7
 8007a58:	4903      	ldr	r1, [pc, #12]	@ (8007a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a5a:	5ccb      	ldrb	r3, [r1, r3]
 8007a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	46020c00 	.word	0x46020c00
 8007a68:	0802d84c 	.word	0x0802d84c

08007a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007a70:	f7ff ffce 	bl	8007a10 <HAL_RCC_GetHCLKFreq>
 8007a74:	4602      	mov	r2, r0
 8007a76:	4b05      	ldr	r3, [pc, #20]	@ (8007a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	0a1b      	lsrs	r3, r3, #8
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	4903      	ldr	r1, [pc, #12]	@ (8007a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a82:	5ccb      	ldrb	r3, [r1, r3]
 8007a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	46020c00 	.word	0x46020c00
 8007a90:	0802d84c 	.word	0x0802d84c

08007a94 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8007a98:	f7ff ffba 	bl	8007a10 <HAL_RCC_GetHCLKFreq>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	4b05      	ldr	r3, [pc, #20]	@ (8007ab4 <HAL_RCC_GetPCLK3Freq+0x20>)
 8007aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa2:	091b      	lsrs	r3, r3, #4
 8007aa4:	f003 0307 	and.w	r3, r3, #7
 8007aa8:	4903      	ldr	r1, [pc, #12]	@ (8007ab8 <HAL_RCC_GetPCLK3Freq+0x24>)
 8007aaa:	5ccb      	ldrb	r3, [r1, r3]
 8007aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	46020c00 	.word	0x46020c00
 8007ab8:	0802d84c 	.word	0x0802d84c

08007abc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	221f      	movs	r2, #31
 8007aca:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8007acc:	4b15      	ldr	r3, [pc, #84]	@ (8007b24 <HAL_RCC_GetClockConfig+0x68>)
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	f003 0203 	and.w	r2, r3, #3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8007ad8:	4b12      	ldr	r3, [pc, #72]	@ (8007b24 <HAL_RCC_GetClockConfig+0x68>)
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	f003 020f 	and.w	r2, r3, #15
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8007ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8007b24 <HAL_RCC_GetClockConfig+0x68>)
 8007ae6:	6a1b      	ldr	r3, [r3, #32]
 8007ae8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8007af0:	4b0c      	ldr	r3, [pc, #48]	@ (8007b24 <HAL_RCC_GetClockConfig+0x68>)
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	091b      	lsrs	r3, r3, #4
 8007af6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8007afe:	4b09      	ldr	r3, [pc, #36]	@ (8007b24 <HAL_RCC_GetClockConfig+0x68>)
 8007b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b02:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b0a:	4b07      	ldr	r3, [pc, #28]	@ (8007b28 <HAL_RCC_GetClockConfig+0x6c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 020f 	and.w	r2, r3, #15
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	601a      	str	r2, [r3, #0]
}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	46020c00 	.word	0x46020c00
 8007b28:	40022000 	.word	0x40022000

08007b2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007b34:	4b3e      	ldr	r3, [pc, #248]	@ (8007c30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b3a:	f003 0304 	and.w	r3, r3, #4
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007b42:	f7fe fd87 	bl	8006654 <HAL_PWREx_GetVoltageRange>
 8007b46:	6178      	str	r0, [r7, #20]
 8007b48:	e019      	b.n	8007b7e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b4a:	4b39      	ldr	r3, [pc, #228]	@ (8007c30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b50:	4a37      	ldr	r2, [pc, #220]	@ (8007c30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007b52:	f043 0304 	orr.w	r3, r3, #4
 8007b56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007b5a:	4b35      	ldr	r3, [pc, #212]	@ (8007c30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007b68:	f7fe fd74 	bl	8006654 <HAL_PWREx_GetVoltageRange>
 8007b6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007b6e:	4b30      	ldr	r3, [pc, #192]	@ (8007c30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b74:	4a2e      	ldr	r2, [pc, #184]	@ (8007c30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007b76:	f023 0304 	bic.w	r3, r3, #4
 8007b7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b84:	d003      	beq.n	8007b8e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b8c:	d109      	bne.n	8007ba2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b94:	d202      	bcs.n	8007b9c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007b96:	2301      	movs	r3, #1
 8007b98:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007b9a:	e033      	b.n	8007c04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007ba0:	e030      	b.n	8007c04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ba8:	d208      	bcs.n	8007bbc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bb0:	d102      	bne.n	8007bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	613b      	str	r3, [r7, #16]
 8007bb6:	e025      	b.n	8007c04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e035      	b.n	8007c28 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bc2:	d90f      	bls.n	8007be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d109      	bne.n	8007bde <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007bd0:	d902      	bls.n	8007bd8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	613b      	str	r3, [r7, #16]
 8007bd6:	e015      	b.n	8007c04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007bd8:	2301      	movs	r3, #1
 8007bda:	613b      	str	r3, [r7, #16]
 8007bdc:	e012      	b.n	8007c04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007bde:	2300      	movs	r3, #0
 8007be0:	613b      	str	r3, [r7, #16]
 8007be2:	e00f      	b.n	8007c04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bea:	d109      	bne.n	8007c00 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bf2:	d102      	bne.n	8007bfa <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	613b      	str	r3, [r7, #16]
 8007bf8:	e004      	b.n	8007c04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	e001      	b.n	8007c04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007c00:	2301      	movs	r3, #1
 8007c02:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007c04:	4b0b      	ldr	r3, [pc, #44]	@ (8007c34 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f023 020f 	bic.w	r2, r3, #15
 8007c0c:	4909      	ldr	r1, [pc, #36]	@ (8007c34 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007c14:	4b07      	ldr	r3, [pc, #28]	@ (8007c34 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 030f 	and.w	r3, r3, #15
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d001      	beq.n	8007c26 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e000      	b.n	8007c28 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	46020c00 	.word	0x46020c00
 8007c34:	40022000 	.word	0x40022000

08007c38 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c3c:	b0b8      	sub	sp, #224	@ 0xe0
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c44:	2300      	movs	r3, #0
 8007c46:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c58:	f002 0401 	and.w	r4, r2, #1
 8007c5c:	2500      	movs	r5, #0
 8007c5e:	ea54 0305 	orrs.w	r3, r4, r5
 8007c62:	d00b      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007c64:	4bca      	ldr	r3, [pc, #808]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c6a:	f023 0103 	bic.w	r1, r3, #3
 8007c6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c74:	4ac6      	ldr	r2, [pc, #792]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007c76:	430b      	orrs	r3, r1
 8007c78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c84:	f002 0802 	and.w	r8, r2, #2
 8007c88:	f04f 0900 	mov.w	r9, #0
 8007c8c:	ea58 0309 	orrs.w	r3, r8, r9
 8007c90:	d00b      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8007c92:	4bbf      	ldr	r3, [pc, #764]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c98:	f023 010c 	bic.w	r1, r3, #12
 8007c9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ca2:	4abb      	ldr	r2, [pc, #748]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007ca4:	430b      	orrs	r3, r1
 8007ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007caa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	f002 0a04 	and.w	sl, r2, #4
 8007cb6:	f04f 0b00 	mov.w	fp, #0
 8007cba:	ea5a 030b 	orrs.w	r3, sl, fp
 8007cbe:	d00b      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007cc0:	4bb3      	ldr	r3, [pc, #716]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cc6:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007cca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cd0:	4aaf      	ldr	r2, [pc, #700]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007cd2:	430b      	orrs	r3, r1
 8007cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007cd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce0:	f002 0308 	and.w	r3, r2, #8
 8007ce4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007cee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	d00b      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007cf8:	4ba5      	ldr	r3, [pc, #660]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cfe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007d02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d08:	4aa1      	ldr	r2, [pc, #644]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d0a:	430b      	orrs	r3, r1
 8007d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	f002 0310 	and.w	r3, r2, #16
 8007d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d20:	2300      	movs	r3, #0
 8007d22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d26:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	d00b      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007d30:	4b97      	ldr	r3, [pc, #604]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007d3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d40:	4a93      	ldr	r2, [pc, #588]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d42:	430b      	orrs	r3, r1
 8007d44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	f002 0320 	and.w	r3, r2, #32
 8007d54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d5e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4313      	orrs	r3, r2
 8007d66:	d00b      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007d68:	4b89      	ldr	r3, [pc, #548]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d6e:	f023 0107 	bic.w	r1, r3, #7
 8007d72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d78:	4a85      	ldr	r2, [pc, #532]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007d7a:	430b      	orrs	r3, r1
 8007d7c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d90:	2300      	movs	r3, #0
 8007d92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d96:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	d00b      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007da0:	4b7b      	ldr	r3, [pc, #492]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007da6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007daa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007dae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007db0:	4a77      	ldr	r2, [pc, #476]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007db2:	430b      	orrs	r3, r1
 8007db4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007db8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007dc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007dc8:	2300      	movs	r3, #0
 8007dca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007dce:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	d00b      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007dd8:	4b6d      	ldr	r3, [pc, #436]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007dde:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007de2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007de8:	4a69      	ldr	r2, [pc, #420]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007dea:	430b      	orrs	r3, r1
 8007dec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007df0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007dfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e00:	2300      	movs	r3, #0
 8007e02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e06:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	d00b      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007e10:	4b5f      	ldr	r3, [pc, #380]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007e1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e20:	4a5b      	ldr	r2, [pc, #364]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e22:	430b      	orrs	r3, r1
 8007e24:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e30:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007e34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e3e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007e42:	460b      	mov	r3, r1
 8007e44:	4313      	orrs	r3, r2
 8007e46:	d00b      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007e48:	4b51      	ldr	r3, [pc, #324]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e4e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8007e52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e58:	4a4d      	ldr	r2, [pc, #308]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e5a:	430b      	orrs	r3, r1
 8007e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007e60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e68:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007e6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e70:	2300      	movs	r3, #0
 8007e72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e76:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	d00b      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007e80:	4b43      	ldr	r3, [pc, #268]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e86:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007e8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e90:	4a3f      	ldr	r2, [pc, #252]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007e92:	430b      	orrs	r3, r1
 8007e94:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007e98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007ea4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007eae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	d00b      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007eb8:	4b35      	ldr	r3, [pc, #212]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ebe:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007ec2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ec6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ec8:	4a31      	ldr	r2, [pc, #196]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007eca:	430b      	orrs	r3, r1
 8007ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8007ed0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007edc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ede:	2300      	movs	r3, #0
 8007ee0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ee2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	d00c      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007eec:	4b28      	ldr	r3, [pc, #160]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007eee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ef2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ef6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007efe:	4a24      	ldr	r2, [pc, #144]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007f00:	430b      	orrs	r3, r1
 8007f02:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007f06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007f12:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f14:	2300      	movs	r3, #0
 8007f16:	677b      	str	r3, [r7, #116]	@ 0x74
 8007f18:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	d04f      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007f22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f2a:	2b80      	cmp	r3, #128	@ 0x80
 8007f2c:	d02d      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x352>
 8007f2e:	2b80      	cmp	r3, #128	@ 0x80
 8007f30:	d827      	bhi.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007f32:	2b60      	cmp	r3, #96	@ 0x60
 8007f34:	d02e      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007f36:	2b60      	cmp	r3, #96	@ 0x60
 8007f38:	d823      	bhi.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007f3a:	2b40      	cmp	r3, #64	@ 0x40
 8007f3c:	d006      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8007f3e:	2b40      	cmp	r3, #64	@ 0x40
 8007f40:	d81f      	bhi.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d009      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x322>
 8007f46:	2b20      	cmp	r3, #32
 8007f48:	d011      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007f4a:	e01a      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007f4c:	4b10      	ldr	r3, [pc, #64]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f50:	4a0f      	ldr	r2, [pc, #60]	@ (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007f52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f56:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f58:	e01d      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f5e:	3308      	adds	r3, #8
 8007f60:	4618      	mov	r0, r3
 8007f62:	f002 f9d1 	bl	800a308 <RCCEx_PLL2_Config>
 8007f66:	4603      	mov	r3, r0
 8007f68:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f6c:	e013      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007f6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f72:	332c      	adds	r3, #44	@ 0x2c
 8007f74:	4618      	mov	r0, r3
 8007f76:	f002 fa5f 	bl	800a438 <RCCEx_PLL3_Config>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f80:	e009      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007f88:	e005      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8007f8a:	bf00      	nop
 8007f8c:	e003      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8007f8e:	bf00      	nop
 8007f90:	46020c00 	.word	0x46020c00
        break;
 8007f94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f96:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10d      	bne.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007f9e:	4bb6      	ldr	r3, [pc, #728]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007fa0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007fa4:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8007fa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fb0:	4ab1      	ldr	r2, [pc, #708]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007fb2:	430b      	orrs	r3, r1
 8007fb4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007fb8:	e003      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fba:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007fbe:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007fc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fca:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007fce:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007fd4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	d053      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007fde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fea:	d033      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ff0:	d82c      	bhi.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007ff2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ff6:	d02f      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007ff8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ffc:	d826      	bhi.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007ffe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008002:	d008      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008008:	d820      	bhi.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00a      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800800e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008012:	d011      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8008014:	e01a      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008016:	4b98      	ldr	r3, [pc, #608]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801a:	4a97      	ldr	r2, [pc, #604]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800801c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008020:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008022:	e01a      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008024:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008028:	3308      	adds	r3, #8
 800802a:	4618      	mov	r0, r3
 800802c:	f002 f96c 	bl	800a308 <RCCEx_PLL2_Config>
 8008030:	4603      	mov	r3, r0
 8008032:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008036:	e010      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008038:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800803c:	332c      	adds	r3, #44	@ 0x2c
 800803e:	4618      	mov	r0, r3
 8008040:	f002 f9fa 	bl	800a438 <RCCEx_PLL3_Config>
 8008044:	4603      	mov	r3, r0
 8008046:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800804a:	e006      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008052:	e002      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8008054:	bf00      	nop
 8008056:	e000      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8008058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800805a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10d      	bne.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8008062:	4b85      	ldr	r3, [pc, #532]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008064:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008068:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800806c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008070:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008074:	4a80      	ldr	r2, [pc, #512]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008076:	430b      	orrs	r3, r1
 8008078:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800807c:	e003      	b.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800807e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008082:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8008086:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008092:	663b      	str	r3, [r7, #96]	@ 0x60
 8008094:	2300      	movs	r3, #0
 8008096:	667b      	str	r3, [r7, #100]	@ 0x64
 8008098:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800809c:	460b      	mov	r3, r1
 800809e:	4313      	orrs	r3, r2
 80080a0:	d046      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80080a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80080aa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80080ae:	d028      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80080b0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80080b4:	d821      	bhi.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80080b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080ba:	d022      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80080bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080c0:	d81b      	bhi.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80080c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80080c6:	d01c      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80080c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80080cc:	d815      	bhi.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80080ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080d2:	d008      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80080d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080d8:	d80f      	bhi.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d011      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80080de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080e2:	d00e      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80080e4:	e009      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80080e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080ea:	3308      	adds	r3, #8
 80080ec:	4618      	mov	r0, r3
 80080ee:	f002 f90b 	bl	800a308 <RCCEx_PLL2_Config>
 80080f2:	4603      	mov	r3, r0
 80080f4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80080f8:	e004      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008100:	e000      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8008102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008104:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10d      	bne.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800810c:	4b5a      	ldr	r3, [pc, #360]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800810e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008112:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008116:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800811a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800811e:	4a56      	ldr	r2, [pc, #344]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008120:	430b      	orrs	r3, r1
 8008122:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008126:	e003      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008128:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800812c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8008130:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008138:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800813c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800813e:	2300      	movs	r3, #0
 8008140:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008142:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008146:	460b      	mov	r3, r1
 8008148:	4313      	orrs	r3, r2
 800814a:	d03f      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800814c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008154:	2b04      	cmp	r3, #4
 8008156:	d81e      	bhi.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8008158:	a201      	add	r2, pc, #4	@ (adr r2, 8008160 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 800815a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815e:	bf00      	nop
 8008160:	0800819f 	.word	0x0800819f
 8008164:	08008175 	.word	0x08008175
 8008168:	08008183 	.word	0x08008183
 800816c:	0800819f 	.word	0x0800819f
 8008170:	0800819f 	.word	0x0800819f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008174:	4b40      	ldr	r3, [pc, #256]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008178:	4a3f      	ldr	r2, [pc, #252]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800817a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800817e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008180:	e00e      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008182:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008186:	332c      	adds	r3, #44	@ 0x2c
 8008188:	4618      	mov	r0, r3
 800818a:	f002 f955 	bl	800a438 <RCCEx_PLL3_Config>
 800818e:	4603      	mov	r3, r0
 8008190:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008194:	e004      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800819c:	e000      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 800819e:	bf00      	nop
    }
    if (ret == HAL_OK)
 80081a0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10d      	bne.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80081a8:	4b33      	ldr	r3, [pc, #204]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80081aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80081ae:	f023 0107 	bic.w	r1, r3, #7
 80081b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081ba:	4a2f      	ldr	r2, [pc, #188]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80081bc:	430b      	orrs	r3, r1
 80081be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80081c2:	e003      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80081c8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80081cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80081d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80081da:	2300      	movs	r3, #0
 80081dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80081de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80081e2:	460b      	mov	r3, r1
 80081e4:	4313      	orrs	r3, r2
 80081e6:	d04d      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80081e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081f4:	d028      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x610>
 80081f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081fa:	d821      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80081fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008200:	d024      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8008202:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008206:	d81b      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008208:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800820c:	d00e      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800820e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008212:	d815      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008214:	2b00      	cmp	r3, #0
 8008216:	d01b      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8008218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800821c:	d110      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800821e:	4b16      	ldr	r3, [pc, #88]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008222:	4a15      	ldr	r2, [pc, #84]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008228:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800822a:	e012      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800822c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008230:	332c      	adds	r3, #44	@ 0x2c
 8008232:	4618      	mov	r0, r3
 8008234:	f002 f900 	bl	800a438 <RCCEx_PLL3_Config>
 8008238:	4603      	mov	r3, r0
 800823a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800823e:	e008      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008246:	e004      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8008248:	bf00      	nop
 800824a:	e002      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800824c:	bf00      	nop
 800824e:	e000      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8008250:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008252:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008256:	2b00      	cmp	r3, #0
 8008258:	d110      	bne.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800825a:	4b07      	ldr	r3, [pc, #28]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800825c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008260:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008264:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008268:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800826c:	4a02      	ldr	r2, [pc, #8]	@ (8008278 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800826e:	430b      	orrs	r3, r1
 8008270:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008274:	e006      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008276:	bf00      	nop
 8008278:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800827c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008280:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008284:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008290:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008292:	2300      	movs	r3, #0
 8008294:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008296:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800829a:	460b      	mov	r3, r1
 800829c:	4313      	orrs	r3, r2
 800829e:	f000 80b5 	beq.w	800840c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082a2:	2300      	movs	r3, #0
 80082a4:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082a8:	4b9d      	ldr	r3, [pc, #628]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80082aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082ae:	f003 0304 	and.w	r3, r3, #4
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d113      	bne.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082b6:	4b9a      	ldr	r3, [pc, #616]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80082b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082bc:	4a98      	ldr	r2, [pc, #608]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80082be:	f043 0304 	orr.w	r3, r3, #4
 80082c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80082c6:	4b96      	ldr	r3, [pc, #600]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80082c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082cc:	f003 0304 	and.w	r3, r3, #4
 80082d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80082d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 80082d8:	2301      	movs	r3, #1
 80082da:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80082de:	4b91      	ldr	r3, [pc, #580]	@ (8008524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80082e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e2:	4a90      	ldr	r2, [pc, #576]	@ (8008524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80082e4:	f043 0301 	orr.w	r3, r3, #1
 80082e8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082ea:	f7f9 fdf7 	bl	8001edc <HAL_GetTick>
 80082ee:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80082f2:	e00b      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082f4:	f7f9 fdf2 	bl	8001edc <HAL_GetTick>
 80082f8:	4602      	mov	r2, r0
 80082fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	2b02      	cmp	r3, #2
 8008302:	d903      	bls.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800830a:	e005      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800830c:	4b85      	ldr	r3, [pc, #532]	@ (8008524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800830e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b00      	cmp	r3, #0
 8008316:	d0ed      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8008318:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800831c:	2b00      	cmp	r3, #0
 800831e:	d165      	bne.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008320:	4b7f      	ldr	r3, [pc, #508]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800832a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800832e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008332:	2b00      	cmp	r3, #0
 8008334:	d023      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x746>
 8008336:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800833a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800833e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008342:	4293      	cmp	r3, r2
 8008344:	d01b      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008346:	4b76      	ldr	r3, [pc, #472]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800834c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008350:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008354:	4b72      	ldr	r3, [pc, #456]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008356:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800835a:	4a71      	ldr	r2, [pc, #452]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800835c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008360:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008364:	4b6e      	ldr	r3, [pc, #440]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008366:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800836a:	4a6d      	ldr	r2, [pc, #436]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800836c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008370:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008374:	4a6a      	ldr	r2, [pc, #424]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800837a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800837e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	2b00      	cmp	r3, #0
 8008388:	d019      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800838a:	f7f9 fda7 	bl	8001edc <HAL_GetTick>
 800838e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008392:	e00d      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008394:	f7f9 fda2 	bl	8001edc <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800839e:	1ad2      	subs	r2, r2, r3
 80083a0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d903      	bls.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 80083a8:	2303      	movs	r3, #3
 80083aa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 80083ae:	e006      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083b0:	4b5b      	ldr	r3, [pc, #364]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80083b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083b6:	f003 0302 	and.w	r3, r3, #2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d0ea      	beq.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80083be:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10d      	bne.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80083c6:	4b56      	ldr	r3, [pc, #344]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80083c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80083d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80083d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80083d8:	4a51      	ldr	r2, [pc, #324]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80083da:	430b      	orrs	r3, r1
 80083dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80083e0:	e008      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083e2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80083e6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 80083ea:	e003      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ec:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80083f0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80083f4:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d107      	bne.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083fc:	4b48      	ldr	r3, [pc, #288]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80083fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008402:	4a47      	ldr	r2, [pc, #284]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008404:	f023 0304 	bic.w	r3, r3, #4
 8008408:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800840c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008414:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008418:	643b      	str	r3, [r7, #64]	@ 0x40
 800841a:	2300      	movs	r3, #0
 800841c:	647b      	str	r3, [r7, #68]	@ 0x44
 800841e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008422:	460b      	mov	r3, r1
 8008424:	4313      	orrs	r3, r2
 8008426:	d042      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8008428:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800842c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008430:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008434:	d022      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x844>
 8008436:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800843a:	d81b      	bhi.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800843c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008440:	d011      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8008442:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008446:	d815      	bhi.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8008448:	2b00      	cmp	r3, #0
 800844a:	d019      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800844c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008450:	d110      	bne.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008452:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008456:	3308      	adds	r3, #8
 8008458:	4618      	mov	r0, r3
 800845a:	f001 ff55 	bl	800a308 <RCCEx_PLL2_Config>
 800845e:	4603      	mov	r3, r0
 8008460:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008464:	e00d      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008466:	4b2e      	ldr	r3, [pc, #184]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800846a:	4a2d      	ldr	r2, [pc, #180]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800846c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008470:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008472:	e006      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800847a:	e002      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 800847c:	bf00      	nop
 800847e:	e000      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8008480:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008482:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10d      	bne.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800848a:	4b25      	ldr	r3, [pc, #148]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800848c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008490:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8008494:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008498:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800849c:	4a20      	ldr	r2, [pc, #128]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800849e:	430b      	orrs	r3, r1
 80084a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80084a4:	e003      	b.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80084aa:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80084ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80084ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80084bc:	2300      	movs	r3, #0
 80084be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084c0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80084c4:	460b      	mov	r3, r1
 80084c6:	4313      	orrs	r3, r2
 80084c8:	d032      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80084ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80084d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084d6:	d00b      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80084d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084dc:	d804      	bhi.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d008      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80084e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084e6:	d007      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80084ee:	e004      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80084f0:	bf00      	nop
 80084f2:	e002      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80084f4:	bf00      	nop
 80084f6:	e000      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80084f8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80084fa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d112      	bne.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008502:	4b07      	ldr	r3, [pc, #28]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008504:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008508:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800850c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008510:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008514:	4a02      	ldr	r2, [pc, #8]	@ (8008520 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008516:	430b      	orrs	r3, r1
 8008518:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800851c:	e008      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800851e:	bf00      	nop
 8008520:	46020c00 	.word	0x46020c00
 8008524:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008528:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800852c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8008530:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008538:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800853c:	633b      	str	r3, [r7, #48]	@ 0x30
 800853e:	2300      	movs	r3, #0
 8008540:	637b      	str	r3, [r7, #52]	@ 0x34
 8008542:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008546:	460b      	mov	r3, r1
 8008548:	4313      	orrs	r3, r2
 800854a:	d019      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800854c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008550:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008554:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008558:	d105      	bne.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800855a:	4b88      	ldr	r3, [pc, #544]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800855c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800855e:	4a87      	ldr	r2, [pc, #540]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008564:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8008566:	4b85      	ldr	r3, [pc, #532]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008568:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800856c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008570:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008574:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008578:	4a80      	ldr	r2, [pc, #512]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800857a:	430b      	orrs	r3, r1
 800857c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8008580:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008588:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800858c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800858e:	2300      	movs	r3, #0
 8008590:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008592:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008596:	460b      	mov	r3, r1
 8008598:	4313      	orrs	r3, r2
 800859a:	d00c      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800859c:	4b77      	ldr	r3, [pc, #476]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800859e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80085a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80085a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80085ae:	4973      	ldr	r1, [pc, #460]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80085b0:	4313      	orrs	r3, r2
 80085b2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80085b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80085c2:	623b      	str	r3, [r7, #32]
 80085c4:	2300      	movs	r3, #0
 80085c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80085c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80085cc:	460b      	mov	r3, r1
 80085ce:	4313      	orrs	r3, r2
 80085d0:	d00c      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80085d2:	4b6a      	ldr	r3, [pc, #424]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80085d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80085d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80085dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085e4:	4965      	ldr	r1, [pc, #404]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80085e6:	4313      	orrs	r3, r2
 80085e8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80085ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80085f8:	61bb      	str	r3, [r7, #24]
 80085fa:	2300      	movs	r3, #0
 80085fc:	61fb      	str	r3, [r7, #28]
 80085fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008602:	460b      	mov	r3, r1
 8008604:	4313      	orrs	r3, r2
 8008606:	d00c      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008608:	4b5c      	ldr	r3, [pc, #368]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800860a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800860e:	f023 0218 	bic.w	r2, r3, #24
 8008612:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008616:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800861a:	4958      	ldr	r1, [pc, #352]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800861c:	4313      	orrs	r3, r2
 800861e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008622:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800862e:	613b      	str	r3, [r7, #16]
 8008630:	2300      	movs	r3, #0
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008638:	460b      	mov	r3, r1
 800863a:	4313      	orrs	r3, r2
 800863c:	d032      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800863e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008642:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008646:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800864a:	d105      	bne.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800864c:	4b4b      	ldr	r3, [pc, #300]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800864e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008650:	4a4a      	ldr	r2, [pc, #296]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008652:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008656:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8008658:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800865c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008660:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008664:	d108      	bne.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008666:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800866a:	3308      	adds	r3, #8
 800866c:	4618      	mov	r0, r3
 800866e:	f001 fe4b 	bl	800a308 <RCCEx_PLL2_Config>
 8008672:	4603      	mov	r3, r0
 8008674:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8008678:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10d      	bne.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008680:	4b3e      	ldr	r3, [pc, #248]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008682:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008686:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800868a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800868e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008692:	493a      	ldr	r1, [pc, #232]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008694:	4313      	orrs	r3, r2
 8008696:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800869a:	e003      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800869c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80086a0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80086a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80086b0:	60bb      	str	r3, [r7, #8]
 80086b2:	2300      	movs	r3, #0
 80086b4:	60fb      	str	r3, [r7, #12]
 80086b6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80086ba:	460b      	mov	r3, r1
 80086bc:	4313      	orrs	r3, r2
 80086be:	d03a      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80086c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086cc:	d00e      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80086ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086d2:	d815      	bhi.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d017      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80086d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086dc:	d110      	bne.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086de:	4b27      	ldr	r3, [pc, #156]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80086e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e2:	4a26      	ldr	r2, [pc, #152]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80086e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086e8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80086ea:	e00e      	b.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80086ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086f0:	3308      	adds	r3, #8
 80086f2:	4618      	mov	r0, r3
 80086f4:	f001 fe08 	bl	800a308 <RCCEx_PLL2_Config>
 80086f8:	4603      	mov	r3, r0
 80086fa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80086fe:	e004      	b.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008706:	e000      	b.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8008708:	bf00      	nop
    }
    if (ret == HAL_OK)
 800870a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10d      	bne.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8008712:	4b1a      	ldr	r3, [pc, #104]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008718:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800871c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008720:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008724:	4915      	ldr	r1, [pc, #84]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008726:	4313      	orrs	r3, r2
 8008728:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800872c:	e003      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800872e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008732:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8008736:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800873a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873e:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008742:	603b      	str	r3, [r7, #0]
 8008744:	2300      	movs	r3, #0
 8008746:	607b      	str	r3, [r7, #4]
 8008748:	e9d7 1200 	ldrd	r1, r2, [r7]
 800874c:	460b      	mov	r3, r1
 800874e:	4313      	orrs	r3, r2
 8008750:	d00c      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8008752:	4b0a      	ldr	r3, [pc, #40]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008754:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008758:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800875c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008760:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008764:	4905      	ldr	r1, [pc, #20]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008766:	4313      	orrs	r3, r2
 8008768:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800876c:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8008770:	4618      	mov	r0, r3
 8008772:	37e0      	adds	r7, #224	@ 0xe0
 8008774:	46bd      	mov	sp, r7
 8008776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800877a:	bf00      	nop
 800877c:	46020c00 	.word	0x46020c00

08008780 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008780:	b480      	push	{r7}
 8008782:	b089      	sub	sp, #36	@ 0x24
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008788:	4ba6      	ldr	r3, [pc, #664]	@ (8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800878a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800878c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008790:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008792:	4ba4      	ldr	r3, [pc, #656]	@ (8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008796:	f003 0303 	and.w	r3, r3, #3
 800879a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800879c:	4ba1      	ldr	r3, [pc, #644]	@ (8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800879e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a0:	0a1b      	lsrs	r3, r3, #8
 80087a2:	f003 030f 	and.w	r3, r3, #15
 80087a6:	3301      	adds	r3, #1
 80087a8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80087aa:	4b9e      	ldr	r3, [pc, #632]	@ (8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80087ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ae:	091b      	lsrs	r3, r3, #4
 80087b0:	f003 0301 	and.w	r3, r3, #1
 80087b4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80087b6:	4b9b      	ldr	r3, [pc, #620]	@ (8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80087b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ba:	08db      	lsrs	r3, r3, #3
 80087bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	fb02 f303 	mul.w	r3, r2, r3
 80087c6:	ee07 3a90 	vmov	s15, r3
 80087ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ce:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2b03      	cmp	r3, #3
 80087d6:	d062      	beq.n	800889e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2b03      	cmp	r3, #3
 80087dc:	f200 8081 	bhi.w	80088e2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d024      	beq.n	8008830 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d17a      	bne.n	80088e2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	ee07 3a90 	vmov	s15, r3
 80087f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80087fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087fe:	4b89      	ldr	r3, [pc, #548]	@ (8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008806:	ee07 3a90 	vmov	s15, r3
 800880a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800880e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008812:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008a2c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008816:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800881a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800881e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008822:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800882a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800882e:	e08f      	b.n	8008950 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008830:	4b7c      	ldr	r3, [pc, #496]	@ (8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d005      	beq.n	8008848 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800883c:	4b79      	ldr	r3, [pc, #484]	@ (8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	0f1b      	lsrs	r3, r3, #28
 8008842:	f003 030f 	and.w	r3, r3, #15
 8008846:	e006      	b.n	8008856 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8008848:	4b76      	ldr	r3, [pc, #472]	@ (8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800884a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800884e:	041b      	lsls	r3, r3, #16
 8008850:	0f1b      	lsrs	r3, r3, #28
 8008852:	f003 030f 	and.w	r3, r3, #15
 8008856:	4a76      	ldr	r2, [pc, #472]	@ (8008a30 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800885c:	ee07 3a90 	vmov	s15, r3
 8008860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	ee07 3a90 	vmov	s15, r3
 800886a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800886e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	ee07 3a90 	vmov	s15, r3
 8008878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008880:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008a2c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008884:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008888:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800888c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008890:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008898:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800889c:	e058      	b.n	8008950 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	ee07 3a90 	vmov	s15, r3
 80088a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80088ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088b0:	4b5c      	ldr	r3, [pc, #368]	@ (8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80088b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b8:	ee07 3a90 	vmov	s15, r3
 80088bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80088c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80088c4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008a2c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80088c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80088cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80088d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80088d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088e0:	e036      	b.n	8008950 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80088e2:	4b50      	ldr	r3, [pc, #320]	@ (8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d005      	beq.n	80088fa <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80088ee:	4b4d      	ldr	r3, [pc, #308]	@ (8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	0f1b      	lsrs	r3, r3, #28
 80088f4:	f003 030f 	and.w	r3, r3, #15
 80088f8:	e006      	b.n	8008908 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80088fa:	4b4a      	ldr	r3, [pc, #296]	@ (8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80088fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008900:	041b      	lsls	r3, r3, #16
 8008902:	0f1b      	lsrs	r3, r3, #28
 8008904:	f003 030f 	and.w	r3, r3, #15
 8008908:	4a49      	ldr	r2, [pc, #292]	@ (8008a30 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800890a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800890e:	ee07 3a90 	vmov	s15, r3
 8008912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	ee07 3a90 	vmov	s15, r3
 800891c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008920:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	ee07 3a90 	vmov	s15, r3
 800892a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800892e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008932:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008a2c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800893a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800893e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008942:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800894a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800894e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008950:	4b34      	ldr	r3, [pc, #208]	@ (8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d017      	beq.n	800898c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800895c:	4b31      	ldr	r3, [pc, #196]	@ (8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800895e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008960:	0a5b      	lsrs	r3, r3, #9
 8008962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008966:	ee07 3a90 	vmov	s15, r3
 800896a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800896e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008972:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008976:	edd7 6a07 	vldr	s13, [r7, #28]
 800897a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800897e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008982:	ee17 2a90 	vmov	r2, s15
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	601a      	str	r2, [r3, #0]
 800898a:	e002      	b.n	8008992 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008992:	4b24      	ldr	r3, [pc, #144]	@ (8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d017      	beq.n	80089ce <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800899e:	4b21      	ldr	r3, [pc, #132]	@ (8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80089a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089a2:	0c1b      	lsrs	r3, r3, #16
 80089a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089a8:	ee07 3a90 	vmov	s15, r3
 80089ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80089b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089b4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80089b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80089bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089c4:	ee17 2a90 	vmov	r2, s15
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	605a      	str	r2, [r3, #4]
 80089cc:	e002      	b.n	80089d4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80089d4:	4b13      	ldr	r3, [pc, #76]	@ (8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80089d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d017      	beq.n	8008a10 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80089e0:	4b10      	ldr	r3, [pc, #64]	@ (8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80089e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089e4:	0e1b      	lsrs	r3, r3, #24
 80089e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089ea:	ee07 3a90 	vmov	s15, r3
 80089ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80089f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089f6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80089fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80089fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a06:	ee17 2a90 	vmov	r2, s15
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008a0e:	e002      	b.n	8008a16 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	609a      	str	r2, [r3, #8]
}
 8008a16:	bf00      	nop
 8008a18:	3724      	adds	r7, #36	@ 0x24
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	46020c00 	.word	0x46020c00
 8008a28:	4b742400 	.word	0x4b742400
 8008a2c:	46000000 	.word	0x46000000
 8008a30:	0802d854 	.word	0x0802d854

08008a34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b089      	sub	sp, #36	@ 0x24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008a3c:	4ba6      	ldr	r3, [pc, #664]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a44:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008a46:	4ba4      	ldr	r3, [pc, #656]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a4a:	f003 0303 	and.w	r3, r3, #3
 8008a4e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8008a50:	4ba1      	ldr	r3, [pc, #644]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a54:	0a1b      	lsrs	r3, r3, #8
 8008a56:	f003 030f 	and.w	r3, r3, #15
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8008a5e:	4b9e      	ldr	r3, [pc, #632]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a62:	091b      	lsrs	r3, r3, #4
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008a6a:	4b9b      	ldr	r3, [pc, #620]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a6e:	08db      	lsrs	r3, r3, #3
 8008a70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	fb02 f303 	mul.w	r3, r2, r3
 8008a7a:	ee07 3a90 	vmov	s15, r3
 8008a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a82:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d062      	beq.n	8008b52 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	f200 8081 	bhi.w	8008b96 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d024      	beq.n	8008ae4 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d17a      	bne.n	8008b96 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	ee07 3a90 	vmov	s15, r3
 8008aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aaa:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008cdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ab2:	4b89      	ldr	r3, [pc, #548]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ac2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ac6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ade:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ae2:	e08f      	b.n	8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008ae4:	4b7c      	ldr	r3, [pc, #496]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d005      	beq.n	8008afc <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008af0:	4b79      	ldr	r3, [pc, #484]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	0f1b      	lsrs	r3, r3, #28
 8008af6:	f003 030f 	and.w	r3, r3, #15
 8008afa:	e006      	b.n	8008b0a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8008afc:	4b76      	ldr	r3, [pc, #472]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008afe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008b02:	041b      	lsls	r3, r3, #16
 8008b04:	0f1b      	lsrs	r3, r3, #28
 8008b06:	f003 030f 	and.w	r3, r3, #15
 8008b0a:	4a76      	ldr	r2, [pc, #472]	@ (8008ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b10:	ee07 3a90 	vmov	s15, r3
 8008b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	ee07 3a90 	vmov	s15, r3
 8008b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	ee07 3a90 	vmov	s15, r3
 8008b2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b30:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b34:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008b38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b44:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b50:	e058      	b.n	8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	ee07 3a90 	vmov	s15, r3
 8008b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b5c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008cdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008b60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b64:	4b5c      	ldr	r3, [pc, #368]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b6c:	ee07 3a90 	vmov	s15, r3
 8008b70:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b74:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b78:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008b7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008b80:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b88:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b94:	e036      	b.n	8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008b96:	4b50      	ldr	r3, [pc, #320]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d005      	beq.n	8008bae <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8008ba2:	4b4d      	ldr	r3, [pc, #308]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	0f1b      	lsrs	r3, r3, #28
 8008ba8:	f003 030f 	and.w	r3, r3, #15
 8008bac:	e006      	b.n	8008bbc <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8008bae:	4b4a      	ldr	r3, [pc, #296]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008bb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008bb4:	041b      	lsls	r3, r3, #16
 8008bb6:	0f1b      	lsrs	r3, r3, #28
 8008bb8:	f003 030f 	and.w	r3, r3, #15
 8008bbc:	4a49      	ldr	r2, [pc, #292]	@ (8008ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bc2:	ee07 3a90 	vmov	s15, r3
 8008bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	ee07 3a90 	vmov	s15, r3
 8008bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	ee07 3a90 	vmov	s15, r3
 8008bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008be6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c02:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008c04:	4b34      	ldr	r3, [pc, #208]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d017      	beq.n	8008c40 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008c10:	4b31      	ldr	r3, [pc, #196]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c14:	0a5b      	lsrs	r3, r3, #9
 8008c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c1a:	ee07 3a90 	vmov	s15, r3
 8008c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8008c22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c26:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c36:	ee17 2a90 	vmov	r2, s15
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	601a      	str	r2, [r3, #0]
 8008c3e:	e002      	b.n	8008c46 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008c46:	4b24      	ldr	r3, [pc, #144]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d017      	beq.n	8008c82 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008c52:	4b21      	ldr	r3, [pc, #132]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c56:	0c1b      	lsrs	r3, r3, #16
 8008c58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c5c:	ee07 3a90 	vmov	s15, r3
 8008c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008c64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c68:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008c6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c78:	ee17 2a90 	vmov	r2, s15
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	605a      	str	r2, [r3, #4]
 8008c80:	e002      	b.n	8008c88 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008c88:	4b13      	ldr	r3, [pc, #76]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d017      	beq.n	8008cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008c94:	4b10      	ldr	r3, [pc, #64]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c98:	0e1b      	lsrs	r3, r3, #24
 8008c9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c9e:	ee07 3a90 	vmov	s15, r3
 8008ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8008ca6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008caa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cba:	ee17 2a90 	vmov	r2, s15
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008cc2:	e002      	b.n	8008cca <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	609a      	str	r2, [r3, #8]
}
 8008cca:	bf00      	nop
 8008ccc:	3724      	adds	r7, #36	@ 0x24
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	46020c00 	.word	0x46020c00
 8008cdc:	4b742400 	.word	0x4b742400
 8008ce0:	46000000 	.word	0x46000000
 8008ce4:	0802d854 	.word	0x0802d854

08008ce8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b089      	sub	sp, #36	@ 0x24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008cf0:	4ba6      	ldr	r3, [pc, #664]	@ (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008cfa:	4ba4      	ldr	r3, [pc, #656]	@ (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cfe:	f003 0303 	and.w	r3, r3, #3
 8008d02:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8008d04:	4ba1      	ldr	r3, [pc, #644]	@ (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d08:	0a1b      	lsrs	r3, r3, #8
 8008d0a:	f003 030f 	and.w	r3, r3, #15
 8008d0e:	3301      	adds	r3, #1
 8008d10:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008d12:	4b9e      	ldr	r3, [pc, #632]	@ (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d16:	091b      	lsrs	r3, r3, #4
 8008d18:	f003 0301 	and.w	r3, r3, #1
 8008d1c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008d1e:	4b9b      	ldr	r3, [pc, #620]	@ (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d22:	08db      	lsrs	r3, r3, #3
 8008d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	fb02 f303 	mul.w	r3, r2, r3
 8008d2e:	ee07 3a90 	vmov	s15, r3
 8008d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d36:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	2b03      	cmp	r3, #3
 8008d3e:	d062      	beq.n	8008e06 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	2b03      	cmp	r3, #3
 8008d44:	f200 8081 	bhi.w	8008e4a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d024      	beq.n	8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d17a      	bne.n	8008e4a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	ee07 3a90 	vmov	s15, r3
 8008d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d66:	4b89      	ldr	r3, [pc, #548]	@ (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6e:	ee07 3a90 	vmov	s15, r3
 8008d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d76:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d7a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008f94 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d92:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8008d96:	e08f      	b.n	8008eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008d98:	4b7c      	ldr	r3, [pc, #496]	@ (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d005      	beq.n	8008db0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8008da4:	4b79      	ldr	r3, [pc, #484]	@ (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	0f1b      	lsrs	r3, r3, #28
 8008daa:	f003 030f 	and.w	r3, r3, #15
 8008dae:	e006      	b.n	8008dbe <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8008db0:	4b76      	ldr	r3, [pc, #472]	@ (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008db2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008db6:	041b      	lsls	r3, r3, #16
 8008db8:	0f1b      	lsrs	r3, r3, #28
 8008dba:	f003 030f 	and.w	r3, r3, #15
 8008dbe:	4a76      	ldr	r2, [pc, #472]	@ (8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dc4:	ee07 3a90 	vmov	s15, r3
 8008dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	ee07 3a90 	vmov	s15, r3
 8008dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	ee07 3a90 	vmov	s15, r3
 8008de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008de4:	ed97 6a02 	vldr	s12, [r7, #8]
 8008de8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008f94 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008dec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008df0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008df4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008df8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e04:	e058      	b.n	8008eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	ee07 3a90 	vmov	s15, r3
 8008e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e10:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008e14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e18:	4b5c      	ldr	r3, [pc, #368]	@ (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e20:	ee07 3a90 	vmov	s15, r3
 8008e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e28:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e2c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008f94 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008e30:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008e34:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e48:	e036      	b.n	8008eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008e4a:	4b50      	ldr	r3, [pc, #320]	@ (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d005      	beq.n	8008e62 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8008e56:	4b4d      	ldr	r3, [pc, #308]	@ (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	0f1b      	lsrs	r3, r3, #28
 8008e5c:	f003 030f 	and.w	r3, r3, #15
 8008e60:	e006      	b.n	8008e70 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8008e62:	4b4a      	ldr	r3, [pc, #296]	@ (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008e64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008e68:	041b      	lsls	r3, r3, #16
 8008e6a:	0f1b      	lsrs	r3, r3, #28
 8008e6c:	f003 030f 	and.w	r3, r3, #15
 8008e70:	4a49      	ldr	r2, [pc, #292]	@ (8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e76:	ee07 3a90 	vmov	s15, r3
 8008e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	ee07 3a90 	vmov	s15, r3
 8008e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	ee07 3a90 	vmov	s15, r3
 8008e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e9a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008f94 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008eb6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008eb8:	4b34      	ldr	r3, [pc, #208]	@ (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d017      	beq.n	8008ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008ec4:	4b31      	ldr	r3, [pc, #196]	@ (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ec8:	0a5b      	lsrs	r3, r3, #9
 8008eca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8008ed6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008eda:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008ede:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eea:	ee17 2a90 	vmov	r2, s15
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	601a      	str	r2, [r3, #0]
 8008ef2:	e002      	b.n	8008efa <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008efa:	4b24      	ldr	r3, [pc, #144]	@ (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d017      	beq.n	8008f36 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008f06:	4b21      	ldr	r3, [pc, #132]	@ (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f0a:	0c1b      	lsrs	r3, r3, #16
 8008f0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f10:	ee07 3a90 	vmov	s15, r3
 8008f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008f18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f1c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f2c:	ee17 2a90 	vmov	r2, s15
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	605a      	str	r2, [r3, #4]
 8008f34:	e002      	b.n	8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008f3c:	4b13      	ldr	r3, [pc, #76]	@ (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d017      	beq.n	8008f78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008f48:	4b10      	ldr	r3, [pc, #64]	@ (8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f4c:	0e1b      	lsrs	r3, r3, #24
 8008f4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f52:	ee07 3a90 	vmov	s15, r3
 8008f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8008f5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f5e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008f62:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f6e:	ee17 2a90 	vmov	r2, s15
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008f76:	e002      	b.n	8008f7e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	609a      	str	r2, [r3, #8]
}
 8008f7e:	bf00      	nop
 8008f80:	3724      	adds	r7, #36	@ 0x24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	46020c00 	.word	0x46020c00
 8008f90:	4b742400 	.word	0x4b742400
 8008f94:	46000000 	.word	0x46000000
 8008f98:	0802d854 	.word	0x0802d854

08008f9c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b08e      	sub	sp, #56	@ 0x38
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008fa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008faa:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8008fae:	430b      	orrs	r3, r1
 8008fb0:	d145      	bne.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008fb2:	4baa      	ldr	r3, [pc, #680]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fbc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008fbe:	4ba7      	ldr	r3, [pc, #668]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008fc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fc4:	f003 0302 	and.w	r3, r3, #2
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d108      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fd2:	d104      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008fd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fda:	f001 b987 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008fde:	4b9f      	ldr	r3, [pc, #636]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fe4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fe8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fec:	d114      	bne.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ff4:	d110      	bne.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008ff6:	4b99      	ldr	r3, [pc, #612]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008ff8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ffc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009000:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009004:	d103      	bne.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8009006:	23fa      	movs	r3, #250	@ 0xfa
 8009008:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800900a:	f001 b96f 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800900e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009012:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009014:	f001 b96a 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8009018:	4b90      	ldr	r3, [pc, #576]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009020:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009024:	d107      	bne.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009028:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800902c:	d103      	bne.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800902e:	4b8c      	ldr	r3, [pc, #560]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8009030:	637b      	str	r3, [r7, #52]	@ 0x34
 8009032:	f001 b95b 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8009036:	2300      	movs	r3, #0
 8009038:	637b      	str	r3, [r7, #52]	@ 0x34
 800903a:	f001 b957 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800903e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009042:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009046:	430b      	orrs	r3, r1
 8009048:	d151      	bne.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800904a:	4b84      	ldr	r3, [pc, #528]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800904c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009050:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8009054:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009058:	2b80      	cmp	r3, #128	@ 0x80
 800905a:	d035      	beq.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800905c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905e:	2b80      	cmp	r3, #128	@ 0x80
 8009060:	d841      	bhi.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009064:	2b60      	cmp	r3, #96	@ 0x60
 8009066:	d02a      	beq.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8009068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906a:	2b60      	cmp	r3, #96	@ 0x60
 800906c:	d83b      	bhi.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800906e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009070:	2b40      	cmp	r3, #64	@ 0x40
 8009072:	d009      	beq.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009076:	2b40      	cmp	r3, #64	@ 0x40
 8009078:	d835      	bhi.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800907a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00c      	beq.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8009080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009082:	2b20      	cmp	r3, #32
 8009084:	d012      	beq.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009086:	e02e      	b.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009088:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800908c:	4618      	mov	r0, r3
 800908e:	f7ff fb77 	bl	8008780 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009094:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009096:	f001 b929 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800909a:	f107 0318 	add.w	r3, r7, #24
 800909e:	4618      	mov	r0, r3
 80090a0:	f7ff fcc8 	bl	8008a34 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090a8:	f001 b920 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090ac:	f107 030c 	add.w	r3, r7, #12
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7ff fe19 	bl	8008ce8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090ba:	f001 b917 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80090be:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80090c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090c4:	f001 b912 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090c8:	4b64      	ldr	r3, [pc, #400]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090d4:	d103      	bne.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80090d6:	4b63      	ldr	r3, [pc, #396]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80090d8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80090da:	f001 b907 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80090de:	2300      	movs	r3, #0
 80090e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090e2:	f001 b903 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 80090e6:	2300      	movs	r3, #0
 80090e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090ea:	f001 b8ff 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80090ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090f2:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80090f6:	430b      	orrs	r3, r1
 80090f8:	d158      	bne.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80090fa:	4b58      	ldr	r3, [pc, #352]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80090fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009100:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009104:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009108:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800910c:	d03b      	beq.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800910e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009114:	d846      	bhi.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009118:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800911c:	d02e      	beq.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800911e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009120:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009124:	d83e      	bhi.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800912c:	d00b      	beq.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800912e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009134:	d836      	bhi.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00d      	beq.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800913c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009142:	d012      	beq.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8009144:	e02e      	b.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800914a:	4618      	mov	r0, r3
 800914c:	f7ff fb18 	bl	8008780 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009152:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009154:	f001 b8ca 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009158:	f107 0318 	add.w	r3, r7, #24
 800915c:	4618      	mov	r0, r3
 800915e:	f7ff fc69 	bl	8008a34 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009166:	f001 b8c1 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800916a:	f107 030c 	add.w	r3, r7, #12
 800916e:	4618      	mov	r0, r3
 8009170:	f7ff fdba 	bl	8008ce8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009178:	f001 b8b8 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800917c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009180:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009182:	f001 b8b3 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009186:	4b35      	ldr	r3, [pc, #212]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800918e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009192:	d103      	bne.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8009194:	4b33      	ldr	r3, [pc, #204]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8009196:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009198:	f001 b8a8 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800919c:	2300      	movs	r3, #0
 800919e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091a0:	f001 b8a4 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80091a4:	2300      	movs	r3, #0
 80091a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091a8:	f001 b8a0 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80091ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091b0:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80091b4:	430b      	orrs	r3, r1
 80091b6:	d16e      	bne.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80091b8:	4b28      	ldr	r3, [pc, #160]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80091ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091be:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80091c2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80091c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80091ca:	d034      	beq.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 80091cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ce:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80091d2:	d85c      	bhi.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80091d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091da:	d00b      	beq.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80091dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091e2:	d854      	bhi.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80091e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d016      	beq.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80091ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80091f0:	d009      	beq.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80091f2:	e04c      	b.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7ff fac1 	bl	8008780 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80091fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009200:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009202:	f001 b873 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009206:	f107 0318 	add.w	r3, r7, #24
 800920a:	4618      	mov	r0, r3
 800920c:	f7ff fc12 	bl	8008a34 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009214:	f001 b86a 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009218:	4b10      	ldr	r3, [pc, #64]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009220:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009224:	d103      	bne.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8009226:	4b10      	ldr	r3, [pc, #64]	@ (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009228:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800922a:	f001 b85f 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800922e:	2300      	movs	r3, #0
 8009230:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009232:	f001 b85b 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009236:	4b09      	ldr	r3, [pc, #36]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 0320 	and.w	r3, r3, #32
 800923e:	2b20      	cmp	r3, #32
 8009240:	d121      	bne.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009242:	4b06      	ldr	r3, [pc, #24]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00e      	beq.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800924e:	4b03      	ldr	r3, [pc, #12]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	0e1b      	lsrs	r3, r3, #24
 8009254:	f003 030f 	and.w	r3, r3, #15
 8009258:	e00f      	b.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800925a:	bf00      	nop
 800925c:	46020c00 	.word	0x46020c00
 8009260:	0007a120 	.word	0x0007a120
 8009264:	00f42400 	.word	0x00f42400
 8009268:	02dc6c00 	.word	0x02dc6c00
 800926c:	4ba7      	ldr	r3, [pc, #668]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800926e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009272:	041b      	lsls	r3, r3, #16
 8009274:	0e1b      	lsrs	r3, r3, #24
 8009276:	f003 030f 	and.w	r3, r3, #15
 800927a:	4aa5      	ldr	r2, [pc, #660]	@ (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800927c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009280:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009282:	f001 b833 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009286:	2300      	movs	r3, #0
 8009288:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800928a:	f001 b82f 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800928e:	2300      	movs	r3, #0
 8009290:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009292:	f001 b82b 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009296:	e9d7 2300 	ldrd	r2, r3, [r7]
 800929a:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800929e:	430b      	orrs	r3, r1
 80092a0:	d17f      	bne.n	80093a2 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80092a2:	4b9a      	ldr	r3, [pc, #616]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80092a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80092a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092ac:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80092ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d165      	bne.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80092b4:	4b95      	ldr	r3, [pc, #596]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80092b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80092ba:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80092be:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80092c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80092c6:	d034      	beq.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80092c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ca:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80092ce:	d853      	bhi.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80092d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092d6:	d00b      	beq.n	80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80092d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092de:	d84b      	bhi.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80092e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d016      	beq.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80092e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80092ec:	d009      	beq.n	8009302 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80092ee:	e043      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7ff fa43 	bl	8008780 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80092fe:	f000 bff5 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009302:	f107 0318 	add.w	r3, r7, #24
 8009306:	4618      	mov	r0, r3
 8009308:	f7ff fb94 	bl	8008a34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009310:	f000 bfec 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009314:	4b7d      	ldr	r3, [pc, #500]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800931c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009320:	d103      	bne.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8009322:	4b7c      	ldr	r3, [pc, #496]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8009324:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009326:	f000 bfe1 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800932a:	2300      	movs	r3, #0
 800932c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800932e:	f000 bfdd 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009332:	4b76      	ldr	r3, [pc, #472]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b20      	cmp	r3, #32
 800933c:	d118      	bne.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800933e:	4b73      	ldr	r3, [pc, #460]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009346:	2b00      	cmp	r3, #0
 8009348:	d005      	beq.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800934a:	4b70      	ldr	r3, [pc, #448]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	0e1b      	lsrs	r3, r3, #24
 8009350:	f003 030f 	and.w	r3, r3, #15
 8009354:	e006      	b.n	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8009356:	4b6d      	ldr	r3, [pc, #436]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800935c:	041b      	lsls	r3, r3, #16
 800935e:	0e1b      	lsrs	r3, r3, #24
 8009360:	f003 030f 	and.w	r3, r3, #15
 8009364:	4a6a      	ldr	r2, [pc, #424]	@ (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8009366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800936a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800936c:	f000 bfbe 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8009370:	2300      	movs	r3, #0
 8009372:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009374:	f000 bfba 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8009378:	2300      	movs	r3, #0
 800937a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800937c:	f000 bfb6 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8009380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009382:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009386:	d108      	bne.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009388:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff f9f7 	bl	8008780 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8009392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009394:	637b      	str	r3, [r7, #52]	@ 0x34
 8009396:	f000 bfa9 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 800939a:	2300      	movs	r3, #0
 800939c:	637b      	str	r3, [r7, #52]	@ 0x34
 800939e:	f000 bfa5 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80093a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093a6:	1e51      	subs	r1, r2, #1
 80093a8:	430b      	orrs	r3, r1
 80093aa:	d136      	bne.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80093ac:	4b57      	ldr	r3, [pc, #348]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80093ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093b2:	f003 0303 	and.w	r3, r3, #3
 80093b6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80093b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d104      	bne.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80093be:	f7fe fb55 	bl	8007a6c <HAL_RCC_GetPCLK2Freq>
 80093c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80093c4:	f000 bf92 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80093c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d104      	bne.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80093ce:	f7fe fa1d 	bl	800780c <HAL_RCC_GetSysClockFreq>
 80093d2:	6378      	str	r0, [r7, #52]	@ 0x34
 80093d4:	f000 bf8a 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80093d8:	4b4c      	ldr	r3, [pc, #304]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093e4:	d106      	bne.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 80093e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d103      	bne.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 80093ec:	4b4a      	ldr	r3, [pc, #296]	@ (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80093ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80093f0:	f000 bf7c 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80093f4:	4b45      	ldr	r3, [pc, #276]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80093f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093fa:	f003 0302 	and.w	r3, r3, #2
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d107      	bne.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8009402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009404:	2b03      	cmp	r3, #3
 8009406:	d104      	bne.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8009408:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800940c:	637b      	str	r3, [r7, #52]	@ 0x34
 800940e:	f000 bf6d 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8009412:	2300      	movs	r3, #0
 8009414:	637b      	str	r3, [r7, #52]	@ 0x34
 8009416:	f000 bf69 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800941a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800941e:	1e91      	subs	r1, r2, #2
 8009420:	430b      	orrs	r3, r1
 8009422:	d136      	bne.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009424:	4b39      	ldr	r3, [pc, #228]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800942a:	f003 030c 	and.w	r3, r3, #12
 800942e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009432:	2b00      	cmp	r3, #0
 8009434:	d104      	bne.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009436:	f7fe fb05 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 800943a:	6378      	str	r0, [r7, #52]	@ 0x34
 800943c:	f000 bf56 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8009440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009442:	2b04      	cmp	r3, #4
 8009444:	d104      	bne.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009446:	f7fe f9e1 	bl	800780c <HAL_RCC_GetSysClockFreq>
 800944a:	6378      	str	r0, [r7, #52]	@ 0x34
 800944c:	f000 bf4e 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009450:	4b2e      	ldr	r3, [pc, #184]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800945c:	d106      	bne.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800945e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009460:	2b08      	cmp	r3, #8
 8009462:	d103      	bne.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8009464:	4b2c      	ldr	r3, [pc, #176]	@ (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8009466:	637b      	str	r3, [r7, #52]	@ 0x34
 8009468:	f000 bf40 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800946c:	4b27      	ldr	r3, [pc, #156]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800946e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009472:	f003 0302 	and.w	r3, r3, #2
 8009476:	2b02      	cmp	r3, #2
 8009478:	d107      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800947a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947c:	2b0c      	cmp	r3, #12
 800947e:	d104      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8009480:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009484:	637b      	str	r3, [r7, #52]	@ 0x34
 8009486:	f000 bf31 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800948a:	2300      	movs	r3, #0
 800948c:	637b      	str	r3, [r7, #52]	@ 0x34
 800948e:	f000 bf2d 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8009492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009496:	1f11      	subs	r1, r2, #4
 8009498:	430b      	orrs	r3, r1
 800949a:	d13f      	bne.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800949c:	4b1b      	ldr	r3, [pc, #108]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800949e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094a2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80094a6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80094a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d104      	bne.n	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80094ae:	f7fe fac9 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 80094b2:	6378      	str	r0, [r7, #52]	@ 0x34
 80094b4:	f000 bf1a 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80094b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ba:	2b10      	cmp	r3, #16
 80094bc:	d104      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80094be:	f7fe f9a5 	bl	800780c <HAL_RCC_GetSysClockFreq>
 80094c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80094c4:	f000 bf12 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80094c8:	4b10      	ldr	r3, [pc, #64]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094d4:	d106      	bne.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80094d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d8:	2b20      	cmp	r3, #32
 80094da:	d103      	bne.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 80094dc:	4b0e      	ldr	r3, [pc, #56]	@ (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80094de:	637b      	str	r3, [r7, #52]	@ 0x34
 80094e0:	f000 bf04 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80094e4:	4b09      	ldr	r3, [pc, #36]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80094e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d107      	bne.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80094f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f4:	2b30      	cmp	r3, #48	@ 0x30
 80094f6:	d104      	bne.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 80094f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80094fe:	f000 bef5 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8009502:	2300      	movs	r3, #0
 8009504:	637b      	str	r3, [r7, #52]	@ 0x34
 8009506:	f000 bef1 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800950a:	bf00      	nop
 800950c:	46020c00 	.word	0x46020c00
 8009510:	0802d854 	.word	0x0802d854
 8009514:	02dc6c00 	.word	0x02dc6c00
 8009518:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800951c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009520:	f1a2 0108 	sub.w	r1, r2, #8
 8009524:	430b      	orrs	r3, r1
 8009526:	d136      	bne.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009528:	4ba4      	ldr	r3, [pc, #656]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800952a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800952e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009532:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009536:	2b00      	cmp	r3, #0
 8009538:	d104      	bne.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800953a:	f7fe fa83 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 800953e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009540:	f000 bed4 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8009544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009546:	2b40      	cmp	r3, #64	@ 0x40
 8009548:	d104      	bne.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800954a:	f7fe f95f 	bl	800780c <HAL_RCC_GetSysClockFreq>
 800954e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009550:	f000 becc 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009554:	4b99      	ldr	r3, [pc, #612]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800955c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009560:	d106      	bne.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8009562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009564:	2b80      	cmp	r3, #128	@ 0x80
 8009566:	d103      	bne.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8009568:	4b95      	ldr	r3, [pc, #596]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800956a:	637b      	str	r3, [r7, #52]	@ 0x34
 800956c:	f000 bebe 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009570:	4b92      	ldr	r3, [pc, #584]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009572:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	2b02      	cmp	r3, #2
 800957c:	d107      	bne.n	800958e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 800957e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009580:	2bc0      	cmp	r3, #192	@ 0xc0
 8009582:	d104      	bne.n	800958e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8009584:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009588:	637b      	str	r3, [r7, #52]	@ 0x34
 800958a:	f000 beaf 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800958e:	2300      	movs	r3, #0
 8009590:	637b      	str	r3, [r7, #52]	@ 0x34
 8009592:	f000 beab 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8009596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800959a:	f1a2 0110 	sub.w	r1, r2, #16
 800959e:	430b      	orrs	r3, r1
 80095a0:	d139      	bne.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80095a2:	4b86      	ldr	r3, [pc, #536]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80095a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095ac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80095ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d104      	bne.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80095b4:	f7fe fa46 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 80095b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80095ba:	f000 be97 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80095be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095c4:	d104      	bne.n	80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80095c6:	f7fe f921 	bl	800780c <HAL_RCC_GetSysClockFreq>
 80095ca:	6378      	str	r0, [r7, #52]	@ 0x34
 80095cc:	f000 be8e 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80095d0:	4b7a      	ldr	r3, [pc, #488]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095dc:	d107      	bne.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 80095de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095e4:	d103      	bne.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 80095e6:	4b76      	ldr	r3, [pc, #472]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80095e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80095ea:	f000 be7f 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80095ee:	4b73      	ldr	r3, [pc, #460]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80095f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095f4:	f003 0302 	and.w	r3, r3, #2
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d108      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 80095fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009602:	d104      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8009604:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009608:	637b      	str	r3, [r7, #52]	@ 0x34
 800960a:	f000 be6f 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800960e:	2300      	movs	r3, #0
 8009610:	637b      	str	r3, [r7, #52]	@ 0x34
 8009612:	f000 be6b 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8009616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800961a:	f1a2 0120 	sub.w	r1, r2, #32
 800961e:	430b      	orrs	r3, r1
 8009620:	d158      	bne.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009622:	4b66      	ldr	r3, [pc, #408]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009624:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009628:	f003 0307 	and.w	r3, r3, #7
 800962c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800962e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009630:	2b00      	cmp	r3, #0
 8009632:	d104      	bne.n	800963e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8009634:	f7fe fa2e 	bl	8007a94 <HAL_RCC_GetPCLK3Freq>
 8009638:	6378      	str	r0, [r7, #52]	@ 0x34
 800963a:	f000 be57 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800963e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009640:	2b01      	cmp	r3, #1
 8009642:	d104      	bne.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009644:	f7fe f8e2 	bl	800780c <HAL_RCC_GetSysClockFreq>
 8009648:	6378      	str	r0, [r7, #52]	@ 0x34
 800964a:	f000 be4f 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800964e:	4b5b      	ldr	r3, [pc, #364]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800965a:	d106      	bne.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 800965c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965e:	2b02      	cmp	r3, #2
 8009660:	d103      	bne.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8009662:	4b57      	ldr	r3, [pc, #348]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8009664:	637b      	str	r3, [r7, #52]	@ 0x34
 8009666:	f000 be41 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800966a:	4b54      	ldr	r3, [pc, #336]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800966c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009670:	f003 0302 	and.w	r3, r3, #2
 8009674:	2b02      	cmp	r3, #2
 8009676:	d107      	bne.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8009678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967a:	2b03      	cmp	r3, #3
 800967c:	d104      	bne.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 800967e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009682:	637b      	str	r3, [r7, #52]	@ 0x34
 8009684:	f000 be32 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8009688:	4b4c      	ldr	r3, [pc, #304]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 0320 	and.w	r3, r3, #32
 8009690:	2b20      	cmp	r3, #32
 8009692:	d11b      	bne.n	80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8009694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009696:	2b04      	cmp	r3, #4
 8009698:	d118      	bne.n	80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800969a:	4b48      	ldr	r3, [pc, #288]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d005      	beq.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80096a6:	4b45      	ldr	r3, [pc, #276]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	0e1b      	lsrs	r3, r3, #24
 80096ac:	f003 030f 	and.w	r3, r3, #15
 80096b0:	e006      	b.n	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80096b2:	4b42      	ldr	r3, [pc, #264]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80096b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80096b8:	041b      	lsls	r3, r3, #16
 80096ba:	0e1b      	lsrs	r3, r3, #24
 80096bc:	f003 030f 	and.w	r3, r3, #15
 80096c0:	4a40      	ldr	r2, [pc, #256]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80096c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80096c8:	f000 be10 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80096cc:	2300      	movs	r3, #0
 80096ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80096d0:	f000 be0c 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80096d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096d8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80096dc:	430b      	orrs	r3, r1
 80096de:	d173      	bne.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80096e0:	4b36      	ldr	r3, [pc, #216]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80096e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80096e6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80096ea:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80096ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096f2:	d104      	bne.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80096f4:	f7fe f88a 	bl	800780c <HAL_RCC_GetSysClockFreq>
 80096f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80096fa:	f000 bdf7 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80096fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009700:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009704:	d108      	bne.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009706:	f107 0318 	add.w	r3, r7, #24
 800970a:	4618      	mov	r0, r3
 800970c:	f7ff f992 	bl	8008a34 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8009710:	6a3b      	ldr	r3, [r7, #32]
 8009712:	637b      	str	r3, [r7, #52]	@ 0x34
 8009714:	f000 bdea 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971a:	2b00      	cmp	r3, #0
 800971c:	d104      	bne.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800971e:	f7fe f977 	bl	8007a10 <HAL_RCC_GetHCLKFreq>
 8009722:	6378      	str	r0, [r7, #52]	@ 0x34
 8009724:	f000 bde2 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8009728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800972a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800972e:	d122      	bne.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009730:	4b22      	ldr	r3, [pc, #136]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0320 	and.w	r3, r3, #32
 8009738:	2b20      	cmp	r3, #32
 800973a:	d118      	bne.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800973c:	4b1f      	ldr	r3, [pc, #124]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009744:	2b00      	cmp	r3, #0
 8009746:	d005      	beq.n	8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8009748:	4b1c      	ldr	r3, [pc, #112]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	0e1b      	lsrs	r3, r3, #24
 800974e:	f003 030f 	and.w	r3, r3, #15
 8009752:	e006      	b.n	8009762 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8009754:	4b19      	ldr	r3, [pc, #100]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009756:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800975a:	041b      	lsls	r3, r3, #16
 800975c:	0e1b      	lsrs	r3, r3, #24
 800975e:	f003 030f 	and.w	r3, r3, #15
 8009762:	4a18      	ldr	r2, [pc, #96]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8009764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009768:	637b      	str	r3, [r7, #52]	@ 0x34
 800976a:	f000 bdbf 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800976e:	2300      	movs	r3, #0
 8009770:	637b      	str	r3, [r7, #52]	@ 0x34
 8009772:	f000 bdbb 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009776:	4b11      	ldr	r3, [pc, #68]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800977e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009782:	d107      	bne.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8009784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009786:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800978a:	d103      	bne.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 800978c:	4b0c      	ldr	r3, [pc, #48]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800978e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009790:	f000 bdac 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009794:	4b09      	ldr	r3, [pc, #36]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800979c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097a0:	d107      	bne.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80097a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097a8:	d103      	bne.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 80097aa:	4b05      	ldr	r3, [pc, #20]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80097ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80097ae:	f000 bd9d 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80097b2:	2300      	movs	r3, #0
 80097b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80097b6:	f000 bd99 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80097ba:	bf00      	nop
 80097bc:	46020c00 	.word	0x46020c00
 80097c0:	00f42400 	.word	0x00f42400
 80097c4:	0802d854 	.word	0x0802d854
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80097c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097cc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80097d0:	430b      	orrs	r3, r1
 80097d2:	d158      	bne.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80097d4:	4bad      	ldr	r3, [pc, #692]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80097d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80097da:	f003 0307 	and.w	r3, r3, #7
 80097de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80097e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e2:	2b04      	cmp	r3, #4
 80097e4:	d84b      	bhi.n	800987e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80097e6:	a201      	add	r2, pc, #4	@ (adr r2, 80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80097e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ec:	08009825 	.word	0x08009825
 80097f0:	08009801 	.word	0x08009801
 80097f4:	08009813 	.word	0x08009813
 80097f8:	0800982f 	.word	0x0800982f
 80097fc:	08009839 	.word	0x08009839
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009800:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009804:	4618      	mov	r0, r3
 8009806:	f7fe ffbb 	bl	8008780 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800980a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800980c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800980e:	f000 bd6d 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009812:	f107 030c 	add.w	r3, r7, #12
 8009816:	4618      	mov	r0, r3
 8009818:	f7ff fa66 	bl	8008ce8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009820:	f000 bd64 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8009824:	f7fe f8f4 	bl	8007a10 <HAL_RCC_GetHCLKFreq>
 8009828:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800982a:	f000 bd5f 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800982e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009832:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009834:	f000 bd5a 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009838:	4b94      	ldr	r3, [pc, #592]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f003 0320 	and.w	r3, r3, #32
 8009840:	2b20      	cmp	r3, #32
 8009842:	d118      	bne.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009844:	4b91      	ldr	r3, [pc, #580]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d005      	beq.n	800985c <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8009850:	4b8e      	ldr	r3, [pc, #568]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	0e1b      	lsrs	r3, r3, #24
 8009856:	f003 030f 	and.w	r3, r3, #15
 800985a:	e006      	b.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 800985c:	4b8b      	ldr	r3, [pc, #556]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800985e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009862:	041b      	lsls	r3, r3, #16
 8009864:	0e1b      	lsrs	r3, r3, #24
 8009866:	f003 030f 	and.w	r3, r3, #15
 800986a:	4a89      	ldr	r2, [pc, #548]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800986c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009870:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009872:	f000 bd3b 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009876:	2300      	movs	r3, #0
 8009878:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800987a:	f000 bd37 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800987e:	2300      	movs	r3, #0
 8009880:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009882:	f000 bd33 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8009886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800988a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800988e:	430b      	orrs	r3, r1
 8009890:	d167      	bne.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8009892:	4b7e      	ldr	r3, [pc, #504]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009894:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009898:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800989c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800989e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80098a4:	d036      	beq.n	8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80098a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80098ac:	d855      	bhi.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80098ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80098b4:	d029      	beq.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80098b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80098bc:	d84d      	bhi.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80098be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098c4:	d013      	beq.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 80098c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098cc:	d845      	bhi.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80098ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d015      	beq.n	8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80098d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098da:	d13e      	bne.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7fe ff4d 	bl	8008780 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80098e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098ea:	f000 bcff 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098ee:	f107 030c 	add.w	r3, r7, #12
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7ff f9f8 	bl	8008ce8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098fc:	f000 bcf6 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8009900:	f7fe f886 	bl	8007a10 <HAL_RCC_GetHCLKFreq>
 8009904:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009906:	f000 bcf1 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800990a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800990e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009910:	f000 bcec 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009914:	4b5d      	ldr	r3, [pc, #372]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f003 0320 	and.w	r3, r3, #32
 800991c:	2b20      	cmp	r3, #32
 800991e:	d118      	bne.n	8009952 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009920:	4b5a      	ldr	r3, [pc, #360]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009928:	2b00      	cmp	r3, #0
 800992a:	d005      	beq.n	8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 800992c:	4b57      	ldr	r3, [pc, #348]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	0e1b      	lsrs	r3, r3, #24
 8009932:	f003 030f 	and.w	r3, r3, #15
 8009936:	e006      	b.n	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8009938:	4b54      	ldr	r3, [pc, #336]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800993a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800993e:	041b      	lsls	r3, r3, #16
 8009940:	0e1b      	lsrs	r3, r3, #24
 8009942:	f003 030f 	and.w	r3, r3, #15
 8009946:	4a52      	ldr	r2, [pc, #328]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800994c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800994e:	f000 bccd 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009952:	2300      	movs	r3, #0
 8009954:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009956:	f000 bcc9 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800995a:	2300      	movs	r3, #0
 800995c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800995e:	f000 bcc5 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8009962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009966:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800996a:	430b      	orrs	r3, r1
 800996c:	d14c      	bne.n	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800996e:	4b47      	ldr	r3, [pc, #284]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009974:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009978:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800997a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997c:	2b00      	cmp	r3, #0
 800997e:	d104      	bne.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009980:	f7fe f860 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 8009984:	6378      	str	r0, [r7, #52]	@ 0x34
 8009986:	f000 bcb1 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800998a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009990:	d104      	bne.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009992:	f7fd ff3b 	bl	800780c <HAL_RCC_GetSysClockFreq>
 8009996:	6378      	str	r0, [r7, #52]	@ 0x34
 8009998:	f000 bca8 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800999c:	4b3b      	ldr	r3, [pc, #236]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099a8:	d107      	bne.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80099aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099b0:	d103      	bne.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 80099b2:	4b38      	ldr	r3, [pc, #224]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80099b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80099b6:	f000 bc99 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80099ba:	4b34      	ldr	r3, [pc, #208]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 0320 	and.w	r3, r3, #32
 80099c2:	2b20      	cmp	r3, #32
 80099c4:	d11c      	bne.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80099c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099cc:	d118      	bne.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80099ce:	4b2f      	ldr	r3, [pc, #188]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d005      	beq.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80099da:	4b2c      	ldr	r3, [pc, #176]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	0e1b      	lsrs	r3, r3, #24
 80099e0:	f003 030f 	and.w	r3, r3, #15
 80099e4:	e006      	b.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 80099e6:	4b29      	ldr	r3, [pc, #164]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80099e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80099ec:	041b      	lsls	r3, r3, #16
 80099ee:	0e1b      	lsrs	r3, r3, #24
 80099f0:	f003 030f 	and.w	r3, r3, #15
 80099f4:	4a26      	ldr	r2, [pc, #152]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80099f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80099fc:	f000 bc76 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8009a00:	2300      	movs	r3, #0
 8009a02:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a04:	f000 bc72 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8009a08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a0c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8009a10:	430b      	orrs	r3, r1
 8009a12:	d152      	bne.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009a14:	4b1d      	ldr	r3, [pc, #116]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a1a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009a1e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d104      	bne.n	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009a26:	f7fe f80d 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 8009a2a:	6378      	str	r0, [r7, #52]	@ 0x34
 8009a2c:	f000 bc5e 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8009a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a36:	d104      	bne.n	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009a38:	f7fd fee8 	bl	800780c <HAL_RCC_GetSysClockFreq>
 8009a3c:	6378      	str	r0, [r7, #52]	@ 0x34
 8009a3e:	f000 bc55 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009a42:	4b12      	ldr	r3, [pc, #72]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a4e:	d107      	bne.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8009a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a56:	d103      	bne.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8009a58:	4b0e      	ldr	r3, [pc, #56]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a5c:	f000 bc46 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8009a60:	4b0a      	ldr	r3, [pc, #40]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 0320 	and.w	r3, r3, #32
 8009a68:	2b20      	cmp	r3, #32
 8009a6a:	d122      	bne.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8009a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009a72:	d11e      	bne.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009a74:	4b05      	ldr	r3, [pc, #20]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00b      	beq.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8009a80:	4b02      	ldr	r3, [pc, #8]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	0e1b      	lsrs	r3, r3, #24
 8009a86:	f003 030f 	and.w	r3, r3, #15
 8009a8a:	e00c      	b.n	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8009a8c:	46020c00 	.word	0x46020c00
 8009a90:	0802d854 	.word	0x0802d854
 8009a94:	00f42400 	.word	0x00f42400
 8009a98:	4ba1      	ldr	r3, [pc, #644]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009a9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009a9e:	041b      	lsls	r3, r3, #16
 8009aa0:	0e1b      	lsrs	r3, r3, #24
 8009aa2:	f003 030f 	and.w	r3, r3, #15
 8009aa6:	4a9f      	ldr	r2, [pc, #636]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aae:	f000 bc1d 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ab6:	f000 bc19 	b.w	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8009aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009abe:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009ac2:	430b      	orrs	r3, r1
 8009ac4:	d151      	bne.n	8009b6a <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009ac6:	4b96      	ldr	r3, [pc, #600]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009ac8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009acc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009ad0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad4:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ad6:	d024      	beq.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8009ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ada:	2bc0      	cmp	r3, #192	@ 0xc0
 8009adc:	d842      	bhi.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8009ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae0:	2b80      	cmp	r3, #128	@ 0x80
 8009ae2:	d00d      	beq.n	8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae6:	2b80      	cmp	r3, #128	@ 0x80
 8009ae8:	d83c      	bhi.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8009aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d003      	beq.n	8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8009af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af2:	2b40      	cmp	r3, #64	@ 0x40
 8009af4:	d011      	beq.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8009af6:	e035      	b.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009af8:	f7fd ffcc 	bl	8007a94 <HAL_RCC_GetPCLK3Freq>
 8009afc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009afe:	e3f5      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b00:	4b87      	ldr	r3, [pc, #540]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b0c:	d102      	bne.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8009b0e:	4b86      	ldr	r3, [pc, #536]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009b10:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009b12:	e3eb      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009b14:	2300      	movs	r3, #0
 8009b16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b18:	e3e8      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8009b1a:	f7fd fe77 	bl	800780c <HAL_RCC_GetSysClockFreq>
 8009b1e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009b20:	e3e4      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009b22:	4b7f      	ldr	r3, [pc, #508]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f003 0320 	and.w	r3, r3, #32
 8009b2a:	2b20      	cmp	r3, #32
 8009b2c:	d117      	bne.n	8009b5e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009b2e:	4b7c      	ldr	r3, [pc, #496]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d005      	beq.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8009b3a:	4b79      	ldr	r3, [pc, #484]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	0e1b      	lsrs	r3, r3, #24
 8009b40:	f003 030f 	and.w	r3, r3, #15
 8009b44:	e006      	b.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8009b46:	4b76      	ldr	r3, [pc, #472]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b4c:	041b      	lsls	r3, r3, #16
 8009b4e:	0e1b      	lsrs	r3, r3, #24
 8009b50:	f003 030f 	and.w	r3, r3, #15
 8009b54:	4a73      	ldr	r2, [pc, #460]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b5a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009b5c:	e3c6      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b62:	e3c3      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8009b64:	2300      	movs	r3, #0
 8009b66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b68:	e3c0      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8009b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b6e:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8009b72:	430b      	orrs	r3, r1
 8009b74:	d147      	bne.n	8009c06 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009b76:	4b6a      	ldr	r3, [pc, #424]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009b80:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8009b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d103      	bne.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009b88:	f7fd ff5c 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 8009b8c:	6378      	str	r0, [r7, #52]	@ 0x34
 8009b8e:	e3ad      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8009b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b96:	d103      	bne.n	8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009b98:	f7fd fe38 	bl	800780c <HAL_RCC_GetSysClockFreq>
 8009b9c:	6378      	str	r0, [r7, #52]	@ 0x34
 8009b9e:	e3a5      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009ba0:	4b5f      	ldr	r3, [pc, #380]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bac:	d106      	bne.n	8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8009bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bb4:	d102      	bne.n	8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8009bb6:	4b5c      	ldr	r3, [pc, #368]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bba:	e397      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8009bbc:	4b58      	ldr	r3, [pc, #352]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f003 0320 	and.w	r3, r3, #32
 8009bc4:	2b20      	cmp	r3, #32
 8009bc6:	d11b      	bne.n	8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8009bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009bce:	d117      	bne.n	8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009bd0:	4b53      	ldr	r3, [pc, #332]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d005      	beq.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8009bdc:	4b50      	ldr	r3, [pc, #320]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	0e1b      	lsrs	r3, r3, #24
 8009be2:	f003 030f 	and.w	r3, r3, #15
 8009be6:	e006      	b.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8009be8:	4b4d      	ldr	r3, [pc, #308]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009bea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009bee:	041b      	lsls	r3, r3, #16
 8009bf0:	0e1b      	lsrs	r3, r3, #24
 8009bf2:	f003 030f 	and.w	r3, r3, #15
 8009bf6:	4a4b      	ldr	r2, [pc, #300]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bfe:	e375      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8009c00:	2300      	movs	r3, #0
 8009c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c04:	e372      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8009c06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c0a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009c0e:	430b      	orrs	r3, r1
 8009c10:	d164      	bne.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8009c12:	4b43      	ldr	r3, [pc, #268]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c1c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8009c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d120      	bne.n	8009c66 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009c24:	4b3e      	ldr	r3, [pc, #248]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 0320 	and.w	r3, r3, #32
 8009c2c:	2b20      	cmp	r3, #32
 8009c2e:	d117      	bne.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009c30:	4b3b      	ldr	r3, [pc, #236]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d005      	beq.n	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8009c3c:	4b38      	ldr	r3, [pc, #224]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	0e1b      	lsrs	r3, r3, #24
 8009c42:	f003 030f 	and.w	r3, r3, #15
 8009c46:	e006      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8009c48:	4b35      	ldr	r3, [pc, #212]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c4e:	041b      	lsls	r3, r3, #16
 8009c50:	0e1b      	lsrs	r3, r3, #24
 8009c52:	f003 030f 	and.w	r3, r3, #15
 8009c56:	4a33      	ldr	r2, [pc, #204]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c5e:	e345      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8009c60:	2300      	movs	r3, #0
 8009c62:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c64:	e342      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8009c66:	4b2e      	ldr	r3, [pc, #184]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c74:	d112      	bne.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8009c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c7c:	d10e      	bne.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009c7e:	4b28      	ldr	r3, [pc, #160]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c8c:	d102      	bne.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8009c8e:	23fa      	movs	r3, #250	@ 0xfa
 8009c90:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009c92:	e32b      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009c94:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009c98:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009c9a:	e327      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009c9c:	4b20      	ldr	r3, [pc, #128]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ca8:	d106      	bne.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8009caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cb0:	d102      	bne.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8009cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cb6:	e319      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009cb8:	4b19      	ldr	r3, [pc, #100]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009cba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009cbe:	f003 0302 	and.w	r3, r3, #2
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d107      	bne.n	8009cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8009cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ccc:	d103      	bne.n	8009cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8009cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cd4:	e30a      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cda:	e307      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009cdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ce0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009ce4:	430b      	orrs	r3, r1
 8009ce6:	d16b      	bne.n	8009dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009cea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009cee:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009cf2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8009cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d127      	bne.n	8009d4a <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009cfa:	4b09      	ldr	r3, [pc, #36]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f003 0320 	and.w	r3, r3, #32
 8009d02:	2b20      	cmp	r3, #32
 8009d04:	d11e      	bne.n	8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009d06:	4b06      	ldr	r3, [pc, #24]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00c      	beq.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8009d12:	4b03      	ldr	r3, [pc, #12]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	0e1b      	lsrs	r3, r3, #24
 8009d18:	f003 030f 	and.w	r3, r3, #15
 8009d1c:	e00d      	b.n	8009d3a <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8009d1e:	bf00      	nop
 8009d20:	46020c00 	.word	0x46020c00
 8009d24:	0802d854 	.word	0x0802d854
 8009d28:	00f42400 	.word	0x00f42400
 8009d2c:	4b94      	ldr	r3, [pc, #592]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009d2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009d32:	041b      	lsls	r3, r3, #16
 8009d34:	0e1b      	lsrs	r3, r3, #24
 8009d36:	f003 030f 	and.w	r3, r3, #15
 8009d3a:	4a92      	ldr	r2, [pc, #584]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8009d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d42:	e2d3      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8009d44:	2300      	movs	r3, #0
 8009d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d48:	e2d0      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009d4a:	4b8d      	ldr	r3, [pc, #564]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d58:	d112      	bne.n	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d60:	d10e      	bne.n	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d62:	4b87      	ldr	r3, [pc, #540]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009d64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d70:	d102      	bne.n	8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8009d72:	23fa      	movs	r3, #250	@ 0xfa
 8009d74:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d76:	e2b9      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009d78:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009d7c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d7e:	e2b5      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009d80:	4b7f      	ldr	r3, [pc, #508]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d8c:	d106      	bne.n	8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d94:	d102      	bne.n	8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8009d96:	4b7c      	ldr	r3, [pc, #496]	@ (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d9a:	e2a7      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009d9c:	4b78      	ldr	r3, [pc, #480]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009da2:	f003 0302 	and.w	r3, r3, #2
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d107      	bne.n	8009dba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8009daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009db0:	d103      	bne.n	8009dba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8009db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009db8:	e298      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dbe:	e295      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dc4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009dc8:	430b      	orrs	r3, r1
 8009dca:	d147      	bne.n	8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009dcc:	4b6c      	ldr	r3, [pc, #432]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009dd2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009dd6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d103      	bne.n	8009de6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009dde:	f7fd fe31 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 8009de2:	6378      	str	r0, [r7, #52]	@ 0x34
 8009de4:	e282      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009de6:	4b66      	ldr	r3, [pc, #408]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009de8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009dec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009df0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009df4:	d112      	bne.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8009df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009dfc:	d10e      	bne.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009dfe:	4b60      	ldr	r3, [pc, #384]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e0c:	d102      	bne.n	8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8009e0e:	23fa      	movs	r3, #250	@ 0xfa
 8009e10:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e12:	e26b      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009e14:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009e18:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e1a:	e267      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009e1c:	4b58      	ldr	r3, [pc, #352]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e28:	d106      	bne.n	8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009e30:	d102      	bne.n	8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8009e32:	4b55      	ldr	r3, [pc, #340]	@ (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e36:	e259      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009e38:	4b51      	ldr	r3, [pc, #324]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009e3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e3e:	f003 0302 	and.w	r3, r3, #2
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	d107      	bne.n	8009e56 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8009e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e48:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009e4c:	d103      	bne.n	8009e56 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8009e4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e52:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e54:	e24a      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8009e56:	2300      	movs	r3, #0
 8009e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e5a:	e247      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e60:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8009e64:	430b      	orrs	r3, r1
 8009e66:	d12d      	bne.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8009e68:	4b45      	ldr	r3, [pc, #276]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e6e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009e72:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8009e74:	4b42      	ldr	r3, [pc, #264]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e80:	d105      	bne.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8009e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d102      	bne.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8009e88:	4b3f      	ldr	r3, [pc, #252]	@ (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e8c:	e22e      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e94:	d107      	bne.n	8009ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fe fc70 	bl	8008780 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ea4:	e222      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8009ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009eac:	d107      	bne.n	8009ebe <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eae:	f107 0318 	add.w	r3, r7, #24
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7fe fdbe 	bl	8008a34 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ebc:	e216      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ec2:	e213      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ec8:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8009ecc:	430b      	orrs	r3, r1
 8009ece:	d15d      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ed6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009eda:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ede:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ee2:	d028      	beq.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8009ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009eea:	d845      	bhi.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ef2:	d013      	beq.n	8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8009ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009efa:	d83d      	bhi.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d004      	beq.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8009f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f08:	d004      	beq.n	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8009f0a:	e035      	b.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009f0c:	f7fd fdae 	bl	8007a6c <HAL_RCC_GetPCLK2Freq>
 8009f10:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009f12:	e1eb      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009f14:	f7fd fc7a 	bl	800780c <HAL_RCC_GetSysClockFreq>
 8009f18:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009f1a:	e1e7      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f1c:	4b18      	ldr	r3, [pc, #96]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f28:	d102      	bne.n	8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8009f2a:	4b17      	ldr	r3, [pc, #92]	@ (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009f2c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009f2e:	e1dd      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009f30:	2300      	movs	r3, #0
 8009f32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f34:	e1da      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009f36:	4b12      	ldr	r3, [pc, #72]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 0320 	and.w	r3, r3, #32
 8009f3e:	2b20      	cmp	r3, #32
 8009f40:	d117      	bne.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009f42:	4b0f      	ldr	r3, [pc, #60]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d005      	beq.n	8009f5a <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8009f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	0e1b      	lsrs	r3, r3, #24
 8009f54:	f003 030f 	and.w	r3, r3, #15
 8009f58:	e006      	b.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8009f5a:	4b09      	ldr	r3, [pc, #36]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009f5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009f60:	041b      	lsls	r3, r3, #16
 8009f62:	0e1b      	lsrs	r3, r3, #24
 8009f64:	f003 030f 	and.w	r3, r3, #15
 8009f68:	4a06      	ldr	r2, [pc, #24]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8009f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f6e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009f70:	e1bc      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009f72:	2300      	movs	r3, #0
 8009f74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f76:	e1b9      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f7c:	e1b6      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8009f7e:	bf00      	nop
 8009f80:	46020c00 	.word	0x46020c00
 8009f84:	0802d854 	.word	0x0802d854
 8009f88:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f90:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8009f94:	430b      	orrs	r3, r1
 8009f96:	d156      	bne.n	800a046 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009f98:	4ba5      	ldr	r3, [pc, #660]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009f9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009fa2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009faa:	d028      	beq.n	8009ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8009fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009fb2:	d845      	bhi.n	800a040 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8009fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fba:	d013      	beq.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8009fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fc2:	d83d      	bhi.n	800a040 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8009fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d004      	beq.n	8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8009fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fd0:	d004      	beq.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8009fd2:	e035      	b.n	800a040 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009fd4:	f7fd fd36 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 8009fd8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009fda:	e187      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009fdc:	f7fd fc16 	bl	800780c <HAL_RCC_GetSysClockFreq>
 8009fe0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009fe2:	e183      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009fe4:	4b92      	ldr	r3, [pc, #584]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ff0:	d102      	bne.n	8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8009ff2:	4b90      	ldr	r3, [pc, #576]	@ (800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8009ff4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009ff6:	e179      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ffc:	e176      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009ffe:	4b8c      	ldr	r3, [pc, #560]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 0320 	and.w	r3, r3, #32
 800a006:	2b20      	cmp	r3, #32
 800a008:	d117      	bne.n	800a03a <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a00a:	4b89      	ldr	r3, [pc, #548]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a012:	2b00      	cmp	r3, #0
 800a014:	d005      	beq.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 800a016:	4b86      	ldr	r3, [pc, #536]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	0e1b      	lsrs	r3, r3, #24
 800a01c:	f003 030f 	and.w	r3, r3, #15
 800a020:	e006      	b.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 800a022:	4b83      	ldr	r3, [pc, #524]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a024:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a028:	041b      	lsls	r3, r3, #16
 800a02a:	0e1b      	lsrs	r3, r3, #24
 800a02c:	f003 030f 	and.w	r3, r3, #15
 800a030:	4a81      	ldr	r2, [pc, #516]	@ (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800a032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a036:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a038:	e158      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a03a:	2300      	movs	r3, #0
 800a03c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a03e:	e155      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800a040:	2300      	movs	r3, #0
 800a042:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a044:	e152      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800a046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a04a:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800a04e:	430b      	orrs	r3, r1
 800a050:	d177      	bne.n	800a142 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800a052:	4b77      	ldr	r3, [pc, #476]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a054:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a058:	f003 0318 	and.w	r3, r3, #24
 800a05c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800a05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a060:	2b18      	cmp	r3, #24
 800a062:	d86b      	bhi.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 800a064:	a201      	add	r2, pc, #4	@ (adr r2, 800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 800a066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06a:	bf00      	nop
 800a06c:	0800a0d1 	.word	0x0800a0d1
 800a070:	0800a13d 	.word	0x0800a13d
 800a074:	0800a13d 	.word	0x0800a13d
 800a078:	0800a13d 	.word	0x0800a13d
 800a07c:	0800a13d 	.word	0x0800a13d
 800a080:	0800a13d 	.word	0x0800a13d
 800a084:	0800a13d 	.word	0x0800a13d
 800a088:	0800a13d 	.word	0x0800a13d
 800a08c:	0800a0d9 	.word	0x0800a0d9
 800a090:	0800a13d 	.word	0x0800a13d
 800a094:	0800a13d 	.word	0x0800a13d
 800a098:	0800a13d 	.word	0x0800a13d
 800a09c:	0800a13d 	.word	0x0800a13d
 800a0a0:	0800a13d 	.word	0x0800a13d
 800a0a4:	0800a13d 	.word	0x0800a13d
 800a0a8:	0800a13d 	.word	0x0800a13d
 800a0ac:	0800a0e1 	.word	0x0800a0e1
 800a0b0:	0800a13d 	.word	0x0800a13d
 800a0b4:	0800a13d 	.word	0x0800a13d
 800a0b8:	0800a13d 	.word	0x0800a13d
 800a0bc:	0800a13d 	.word	0x0800a13d
 800a0c0:	0800a13d 	.word	0x0800a13d
 800a0c4:	0800a13d 	.word	0x0800a13d
 800a0c8:	0800a13d 	.word	0x0800a13d
 800a0cc:	0800a0fb 	.word	0x0800a0fb
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800a0d0:	f7fd fce0 	bl	8007a94 <HAL_RCC_GetPCLK3Freq>
 800a0d4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a0d6:	e109      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a0d8:	f7fd fb98 	bl	800780c <HAL_RCC_GetSysClockFreq>
 800a0dc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a0de:	e105      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a0e0:	4b53      	ldr	r3, [pc, #332]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0ec:	d102      	bne.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 800a0ee:	4b51      	ldr	r3, [pc, #324]	@ (800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800a0f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a0f2:	e0fb      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a0f8:	e0f8      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a0fa:	4b4d      	ldr	r3, [pc, #308]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 0320 	and.w	r3, r3, #32
 800a102:	2b20      	cmp	r3, #32
 800a104:	d117      	bne.n	800a136 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a106:	4b4a      	ldr	r3, [pc, #296]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d005      	beq.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 800a112:	4b47      	ldr	r3, [pc, #284]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	0e1b      	lsrs	r3, r3, #24
 800a118:	f003 030f 	and.w	r3, r3, #15
 800a11c:	e006      	b.n	800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800a11e:	4b44      	ldr	r3, [pc, #272]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a124:	041b      	lsls	r3, r3, #16
 800a126:	0e1b      	lsrs	r3, r3, #24
 800a128:	f003 030f 	and.w	r3, r3, #15
 800a12c:	4a42      	ldr	r2, [pc, #264]	@ (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800a12e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a132:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a134:	e0da      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a136:	2300      	movs	r3, #0
 800a138:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a13a:	e0d7      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800a13c:	2300      	movs	r3, #0
 800a13e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a140:	e0d4      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800a142:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a146:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800a14a:	430b      	orrs	r3, r1
 800a14c:	d155      	bne.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a14e:	4b38      	ldr	r3, [pc, #224]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a150:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a154:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a158:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a160:	d013      	beq.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 800a162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a164:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a168:	d844      	bhi.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800a16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a170:	d013      	beq.n	800a19a <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800a172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a174:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a178:	d83c      	bhi.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800a17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d014      	beq.n	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 800a180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a182:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a186:	d014      	beq.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 800a188:	e034      	b.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a18a:	f107 0318 	add.w	r3, r7, #24
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fe fc50 	bl	8008a34 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a198:	e0a8      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a19a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7fe faee 	bl	8008780 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1a8:	e0a0      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a1aa:	f7fd fb2f 	bl	800780c <HAL_RCC_GetSysClockFreq>
 800a1ae:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a1b0:	e09c      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a1b2:	4b1f      	ldr	r3, [pc, #124]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f003 0320 	and.w	r3, r3, #32
 800a1ba:	2b20      	cmp	r3, #32
 800a1bc:	d117      	bne.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a1be:	4b1c      	ldr	r3, [pc, #112]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d005      	beq.n	800a1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800a1ca:	4b19      	ldr	r3, [pc, #100]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	0e1b      	lsrs	r3, r3, #24
 800a1d0:	f003 030f 	and.w	r3, r3, #15
 800a1d4:	e006      	b.n	800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 800a1d6:	4b16      	ldr	r3, [pc, #88]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a1d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a1dc:	041b      	lsls	r3, r3, #16
 800a1de:	0e1b      	lsrs	r3, r3, #24
 800a1e0:	f003 030f 	and.w	r3, r3, #15
 800a1e4:	4a14      	ldr	r2, [pc, #80]	@ (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800a1e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1ea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a1ec:	e07e      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1f2:	e07b      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1f8:	e078      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800a1fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1fe:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800a202:	430b      	orrs	r3, r1
 800a204:	d138      	bne.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800a206:	4b0a      	ldr	r3, [pc, #40]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a208:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a20c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a210:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800a212:	4b07      	ldr	r3, [pc, #28]	@ (800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a214:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a218:	f003 0302 	and.w	r3, r3, #2
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d10d      	bne.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800a220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10a      	bne.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800a226:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a22a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a22c:	e05e      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800a22e:	bf00      	nop
 800a230:	46020c00 	.word	0x46020c00
 800a234:	00f42400 	.word	0x00f42400
 800a238:	0802d854 	.word	0x0802d854
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800a23c:	4b2e      	ldr	r3, [pc, #184]	@ (800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a23e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a242:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a246:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a24a:	d112      	bne.n	800a272 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 800a24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a24e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a252:	d10e      	bne.n	800a272 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a254:	4b28      	ldr	r3, [pc, #160]	@ (800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a256:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a25a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a25e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a262:	d102      	bne.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 800a264:	23fa      	movs	r3, #250	@ 0xfa
 800a266:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a268:	e040      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800a26a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a26e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a270:	e03c      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800a272:	2300      	movs	r3, #0
 800a274:	637b      	str	r3, [r7, #52]	@ 0x34
 800a276:	e039      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800a278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a27c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a280:	430b      	orrs	r3, r1
 800a282:	d131      	bne.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a284:	4b1c      	ldr	r3, [pc, #112]	@ (800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a286:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a28a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a28e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a290:	4b19      	ldr	r3, [pc, #100]	@ (800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a298:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a29c:	d105      	bne.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 800a29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d102      	bne.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 800a2a4:	4b15      	ldr	r3, [pc, #84]	@ (800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 800a2a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2a8:	e020      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800a2aa:	4b13      	ldr	r3, [pc, #76]	@ (800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a2b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2b6:	d106      	bne.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2be:	d102      	bne.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 800a2c0:	4b0f      	ldr	r3, [pc, #60]	@ (800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800a2c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2c4:	e012      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800a2c6:	4b0c      	ldr	r3, [pc, #48]	@ (800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2d2:	d106      	bne.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 800a2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2da:	d102      	bne.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 800a2dc:	4b09      	ldr	r3, [pc, #36]	@ (800a304 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800a2de:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2e0:	e004      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2e6:	e001      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800a2ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3738      	adds	r7, #56	@ 0x38
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	46020c00 	.word	0x46020c00
 800a2fc:	02dc6c00 	.word	0x02dc6c00
 800a300:	016e3600 	.word	0x016e3600
 800a304:	00f42400 	.word	0x00f42400

0800a308 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800a310:	4b47      	ldr	r3, [pc, #284]	@ (800a430 <RCCEx_PLL2_Config+0x128>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a46      	ldr	r2, [pc, #280]	@ (800a430 <RCCEx_PLL2_Config+0x128>)
 800a316:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a31a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a31c:	f7f7 fdde 	bl	8001edc <HAL_GetTick>
 800a320:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a322:	e008      	b.n	800a336 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a324:	f7f7 fdda 	bl	8001edc <HAL_GetTick>
 800a328:	4602      	mov	r2, r0
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	1ad3      	subs	r3, r2, r3
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d901      	bls.n	800a336 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a332:	2303      	movs	r3, #3
 800a334:	e077      	b.n	800a426 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a336:	4b3e      	ldr	r3, [pc, #248]	@ (800a430 <RCCEx_PLL2_Config+0x128>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1f0      	bne.n	800a324 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a342:	4b3b      	ldr	r3, [pc, #236]	@ (800a430 <RCCEx_PLL2_Config+0x128>)
 800a344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a346:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a34a:	f023 0303 	bic.w	r3, r3, #3
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	6811      	ldr	r1, [r2, #0]
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	6852      	ldr	r2, [r2, #4]
 800a356:	3a01      	subs	r2, #1
 800a358:	0212      	lsls	r2, r2, #8
 800a35a:	430a      	orrs	r2, r1
 800a35c:	4934      	ldr	r1, [pc, #208]	@ (800a430 <RCCEx_PLL2_Config+0x128>)
 800a35e:	4313      	orrs	r3, r2
 800a360:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a362:	4b33      	ldr	r3, [pc, #204]	@ (800a430 <RCCEx_PLL2_Config+0x128>)
 800a364:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a366:	4b33      	ldr	r3, [pc, #204]	@ (800a434 <RCCEx_PLL2_Config+0x12c>)
 800a368:	4013      	ands	r3, r2
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	6892      	ldr	r2, [r2, #8]
 800a36e:	3a01      	subs	r2, #1
 800a370:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	68d2      	ldr	r2, [r2, #12]
 800a378:	3a01      	subs	r2, #1
 800a37a:	0252      	lsls	r2, r2, #9
 800a37c:	b292      	uxth	r2, r2
 800a37e:	4311      	orrs	r1, r2
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	6912      	ldr	r2, [r2, #16]
 800a384:	3a01      	subs	r2, #1
 800a386:	0412      	lsls	r2, r2, #16
 800a388:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a38c:	4311      	orrs	r1, r2
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	6952      	ldr	r2, [r2, #20]
 800a392:	3a01      	subs	r2, #1
 800a394:	0612      	lsls	r2, r2, #24
 800a396:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a39a:	430a      	orrs	r2, r1
 800a39c:	4924      	ldr	r1, [pc, #144]	@ (800a430 <RCCEx_PLL2_Config+0x128>)
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a3a2:	4b23      	ldr	r3, [pc, #140]	@ (800a430 <RCCEx_PLL2_Config+0x128>)
 800a3a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3a6:	f023 020c 	bic.w	r2, r3, #12
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	4920      	ldr	r1, [pc, #128]	@ (800a430 <RCCEx_PLL2_Config+0x128>)
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a3b4:	4b1e      	ldr	r3, [pc, #120]	@ (800a430 <RCCEx_PLL2_Config+0x128>)
 800a3b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a1b      	ldr	r3, [r3, #32]
 800a3bc:	491c      	ldr	r1, [pc, #112]	@ (800a430 <RCCEx_PLL2_Config+0x128>)
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800a3c2:	4b1b      	ldr	r3, [pc, #108]	@ (800a430 <RCCEx_PLL2_Config+0x128>)
 800a3c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3c6:	4a1a      	ldr	r2, [pc, #104]	@ (800a430 <RCCEx_PLL2_Config+0x128>)
 800a3c8:	f023 0310 	bic.w	r3, r3, #16
 800a3cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a3ce:	4b18      	ldr	r3, [pc, #96]	@ (800a430 <RCCEx_PLL2_Config+0x128>)
 800a3d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a3d6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	69d2      	ldr	r2, [r2, #28]
 800a3de:	00d2      	lsls	r2, r2, #3
 800a3e0:	4913      	ldr	r1, [pc, #76]	@ (800a430 <RCCEx_PLL2_Config+0x128>)
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800a3e6:	4b12      	ldr	r3, [pc, #72]	@ (800a430 <RCCEx_PLL2_Config+0x128>)
 800a3e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ea:	4a11      	ldr	r2, [pc, #68]	@ (800a430 <RCCEx_PLL2_Config+0x128>)
 800a3ec:	f043 0310 	orr.w	r3, r3, #16
 800a3f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800a3f2:	4b0f      	ldr	r3, [pc, #60]	@ (800a430 <RCCEx_PLL2_Config+0x128>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a0e      	ldr	r2, [pc, #56]	@ (800a430 <RCCEx_PLL2_Config+0x128>)
 800a3f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a3fc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a3fe:	f7f7 fd6d 	bl	8001edc <HAL_GetTick>
 800a402:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a404:	e008      	b.n	800a418 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a406:	f7f7 fd69 	bl	8001edc <HAL_GetTick>
 800a40a:	4602      	mov	r2, r0
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	2b02      	cmp	r3, #2
 800a412:	d901      	bls.n	800a418 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a414:	2303      	movs	r3, #3
 800a416:	e006      	b.n	800a426 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a418:	4b05      	ldr	r3, [pc, #20]	@ (800a430 <RCCEx_PLL2_Config+0x128>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a420:	2b00      	cmp	r3, #0
 800a422:	d0f0      	beq.n	800a406 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800a424:	2300      	movs	r3, #0

}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	46020c00 	.word	0x46020c00
 800a434:	80800000 	.word	0x80800000

0800a438 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800a440:	4b47      	ldr	r3, [pc, #284]	@ (800a560 <RCCEx_PLL3_Config+0x128>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a46      	ldr	r2, [pc, #280]	@ (800a560 <RCCEx_PLL3_Config+0x128>)
 800a446:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a44a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a44c:	f7f7 fd46 	bl	8001edc <HAL_GetTick>
 800a450:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a452:	e008      	b.n	800a466 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a454:	f7f7 fd42 	bl	8001edc <HAL_GetTick>
 800a458:	4602      	mov	r2, r0
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	2b02      	cmp	r3, #2
 800a460:	d901      	bls.n	800a466 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a462:	2303      	movs	r3, #3
 800a464:	e077      	b.n	800a556 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a466:	4b3e      	ldr	r3, [pc, #248]	@ (800a560 <RCCEx_PLL3_Config+0x128>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1f0      	bne.n	800a454 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a472:	4b3b      	ldr	r3, [pc, #236]	@ (800a560 <RCCEx_PLL3_Config+0x128>)
 800a474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a476:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a47a:	f023 0303 	bic.w	r3, r3, #3
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	6811      	ldr	r1, [r2, #0]
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	6852      	ldr	r2, [r2, #4]
 800a486:	3a01      	subs	r2, #1
 800a488:	0212      	lsls	r2, r2, #8
 800a48a:	430a      	orrs	r2, r1
 800a48c:	4934      	ldr	r1, [pc, #208]	@ (800a560 <RCCEx_PLL3_Config+0x128>)
 800a48e:	4313      	orrs	r3, r2
 800a490:	630b      	str	r3, [r1, #48]	@ 0x30
 800a492:	4b33      	ldr	r3, [pc, #204]	@ (800a560 <RCCEx_PLL3_Config+0x128>)
 800a494:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a496:	4b33      	ldr	r3, [pc, #204]	@ (800a564 <RCCEx_PLL3_Config+0x12c>)
 800a498:	4013      	ands	r3, r2
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	6892      	ldr	r2, [r2, #8]
 800a49e:	3a01      	subs	r2, #1
 800a4a0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	68d2      	ldr	r2, [r2, #12]
 800a4a8:	3a01      	subs	r2, #1
 800a4aa:	0252      	lsls	r2, r2, #9
 800a4ac:	b292      	uxth	r2, r2
 800a4ae:	4311      	orrs	r1, r2
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	6912      	ldr	r2, [r2, #16]
 800a4b4:	3a01      	subs	r2, #1
 800a4b6:	0412      	lsls	r2, r2, #16
 800a4b8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a4bc:	4311      	orrs	r1, r2
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	6952      	ldr	r2, [r2, #20]
 800a4c2:	3a01      	subs	r2, #1
 800a4c4:	0612      	lsls	r2, r2, #24
 800a4c6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a4ca:	430a      	orrs	r2, r1
 800a4cc:	4924      	ldr	r1, [pc, #144]	@ (800a560 <RCCEx_PLL3_Config+0x128>)
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800a4d2:	4b23      	ldr	r3, [pc, #140]	@ (800a560 <RCCEx_PLL3_Config+0x128>)
 800a4d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4d6:	f023 020c 	bic.w	r2, r3, #12
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	699b      	ldr	r3, [r3, #24]
 800a4de:	4920      	ldr	r1, [pc, #128]	@ (800a560 <RCCEx_PLL3_Config+0x128>)
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a4e4:	4b1e      	ldr	r3, [pc, #120]	@ (800a560 <RCCEx_PLL3_Config+0x128>)
 800a4e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6a1b      	ldr	r3, [r3, #32]
 800a4ec:	491c      	ldr	r1, [pc, #112]	@ (800a560 <RCCEx_PLL3_Config+0x128>)
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800a4f2:	4b1b      	ldr	r3, [pc, #108]	@ (800a560 <RCCEx_PLL3_Config+0x128>)
 800a4f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4f6:	4a1a      	ldr	r2, [pc, #104]	@ (800a560 <RCCEx_PLL3_Config+0x128>)
 800a4f8:	f023 0310 	bic.w	r3, r3, #16
 800a4fc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a4fe:	4b18      	ldr	r3, [pc, #96]	@ (800a560 <RCCEx_PLL3_Config+0x128>)
 800a500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a502:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a506:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	69d2      	ldr	r2, [r2, #28]
 800a50e:	00d2      	lsls	r2, r2, #3
 800a510:	4913      	ldr	r1, [pc, #76]	@ (800a560 <RCCEx_PLL3_Config+0x128>)
 800a512:	4313      	orrs	r3, r2
 800a514:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800a516:	4b12      	ldr	r3, [pc, #72]	@ (800a560 <RCCEx_PLL3_Config+0x128>)
 800a518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a51a:	4a11      	ldr	r2, [pc, #68]	@ (800a560 <RCCEx_PLL3_Config+0x128>)
 800a51c:	f043 0310 	orr.w	r3, r3, #16
 800a520:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800a522:	4b0f      	ldr	r3, [pc, #60]	@ (800a560 <RCCEx_PLL3_Config+0x128>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a0e      	ldr	r2, [pc, #56]	@ (800a560 <RCCEx_PLL3_Config+0x128>)
 800a528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a52c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a52e:	f7f7 fcd5 	bl	8001edc <HAL_GetTick>
 800a532:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a534:	e008      	b.n	800a548 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a536:	f7f7 fcd1 	bl	8001edc <HAL_GetTick>
 800a53a:	4602      	mov	r2, r0
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	2b02      	cmp	r3, #2
 800a542:	d901      	bls.n	800a548 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a544:	2303      	movs	r3, #3
 800a546:	e006      	b.n	800a556 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a548:	4b05      	ldr	r3, [pc, #20]	@ (800a560 <RCCEx_PLL3_Config+0x128>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d0f0      	beq.n	800a536 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	46020c00 	.word	0x46020c00
 800a564:	80800000 	.word	0x80800000

0800a568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d101      	bne.n	800a57a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e049      	b.n	800a60e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b00      	cmp	r3, #0
 800a584:	d106      	bne.n	800a594 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f7f7 fb5a 	bl	8001c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2202      	movs	r2, #2
 800a598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	4610      	mov	r0, r2
 800a5a8:	f000 fa4e 	bl	800aa48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
	...

0800a618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a626:	b2db      	uxtb	r3, r3
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d001      	beq.n	800a630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	e072      	b.n	800a716 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2202      	movs	r2, #2
 800a634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68da      	ldr	r2, [r3, #12]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f042 0201 	orr.w	r2, r2, #1
 800a646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a35      	ldr	r2, [pc, #212]	@ (800a724 <HAL_TIM_Base_Start_IT+0x10c>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d040      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a34      	ldr	r2, [pc, #208]	@ (800a728 <HAL_TIM_Base_Start_IT+0x110>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d03b      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a664:	d036      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a66e:	d031      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a2d      	ldr	r2, [pc, #180]	@ (800a72c <HAL_TIM_Base_Start_IT+0x114>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d02c      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a2c      	ldr	r2, [pc, #176]	@ (800a730 <HAL_TIM_Base_Start_IT+0x118>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d027      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a2a      	ldr	r2, [pc, #168]	@ (800a734 <HAL_TIM_Base_Start_IT+0x11c>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d022      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a29      	ldr	r2, [pc, #164]	@ (800a738 <HAL_TIM_Base_Start_IT+0x120>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d01d      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a27      	ldr	r2, [pc, #156]	@ (800a73c <HAL_TIM_Base_Start_IT+0x124>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d018      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a26      	ldr	r2, [pc, #152]	@ (800a740 <HAL_TIM_Base_Start_IT+0x128>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d013      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a24      	ldr	r2, [pc, #144]	@ (800a744 <HAL_TIM_Base_Start_IT+0x12c>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d00e      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a23      	ldr	r2, [pc, #140]	@ (800a748 <HAL_TIM_Base_Start_IT+0x130>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d009      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a21      	ldr	r2, [pc, #132]	@ (800a74c <HAL_TIM_Base_Start_IT+0x134>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d004      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a20      	ldr	r2, [pc, #128]	@ (800a750 <HAL_TIM_Base_Start_IT+0x138>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d115      	bne.n	800a700 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	689a      	ldr	r2, [r3, #8]
 800a6da:	4b1e      	ldr	r3, [pc, #120]	@ (800a754 <HAL_TIM_Base_Start_IT+0x13c>)
 800a6dc:	4013      	ands	r3, r2
 800a6de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2b06      	cmp	r3, #6
 800a6e4:	d015      	beq.n	800a712 <HAL_TIM_Base_Start_IT+0xfa>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6ec:	d011      	beq.n	800a712 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f042 0201 	orr.w	r2, r2, #1
 800a6fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6fe:	e008      	b.n	800a712 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f042 0201 	orr.w	r2, r2, #1
 800a70e:	601a      	str	r2, [r3, #0]
 800a710:	e000      	b.n	800a714 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a712:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	40012c00 	.word	0x40012c00
 800a728:	50012c00 	.word	0x50012c00
 800a72c:	40000400 	.word	0x40000400
 800a730:	50000400 	.word	0x50000400
 800a734:	40000800 	.word	0x40000800
 800a738:	50000800 	.word	0x50000800
 800a73c:	40000c00 	.word	0x40000c00
 800a740:	50000c00 	.word	0x50000c00
 800a744:	40013400 	.word	0x40013400
 800a748:	50013400 	.word	0x50013400
 800a74c:	40014000 	.word	0x40014000
 800a750:	50014000 	.word	0x50014000
 800a754:	00010007 	.word	0x00010007

0800a758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	f003 0302 	and.w	r3, r3, #2
 800a776:	2b00      	cmp	r3, #0
 800a778:	d020      	beq.n	800a7bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f003 0302 	and.w	r3, r3, #2
 800a780:	2b00      	cmp	r3, #0
 800a782:	d01b      	beq.n	800a7bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f06f 0202 	mvn.w	r2, #2
 800a78c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2201      	movs	r2, #1
 800a792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	699b      	ldr	r3, [r3, #24]
 800a79a:	f003 0303 	and.w	r3, r3, #3
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d003      	beq.n	800a7aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 f931 	bl	800aa0a <HAL_TIM_IC_CaptureCallback>
 800a7a8:	e005      	b.n	800a7b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f923 	bl	800a9f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 f934 	bl	800aa1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	f003 0304 	and.w	r3, r3, #4
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d020      	beq.n	800a808 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f003 0304 	and.w	r3, r3, #4
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d01b      	beq.n	800a808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f06f 0204 	mvn.w	r2, #4
 800a7d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2202      	movs	r2, #2
 800a7de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	699b      	ldr	r3, [r3, #24]
 800a7e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d003      	beq.n	800a7f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 f90b 	bl	800aa0a <HAL_TIM_IC_CaptureCallback>
 800a7f4:	e005      	b.n	800a802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f8fd 	bl	800a9f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 f90e 	bl	800aa1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	f003 0308 	and.w	r3, r3, #8
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d020      	beq.n	800a854 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f003 0308 	and.w	r3, r3, #8
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d01b      	beq.n	800a854 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f06f 0208 	mvn.w	r2, #8
 800a824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2204      	movs	r2, #4
 800a82a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	69db      	ldr	r3, [r3, #28]
 800a832:	f003 0303 	and.w	r3, r3, #3
 800a836:	2b00      	cmp	r3, #0
 800a838:	d003      	beq.n	800a842 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f8e5 	bl	800aa0a <HAL_TIM_IC_CaptureCallback>
 800a840:	e005      	b.n	800a84e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 f8d7 	bl	800a9f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 f8e8 	bl	800aa1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	f003 0310 	and.w	r3, r3, #16
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d020      	beq.n	800a8a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f003 0310 	and.w	r3, r3, #16
 800a864:	2b00      	cmp	r3, #0
 800a866:	d01b      	beq.n	800a8a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f06f 0210 	mvn.w	r2, #16
 800a870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2208      	movs	r2, #8
 800a876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	69db      	ldr	r3, [r3, #28]
 800a87e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a882:	2b00      	cmp	r3, #0
 800a884:	d003      	beq.n	800a88e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f8bf 	bl	800aa0a <HAL_TIM_IC_CaptureCallback>
 800a88c:	e005      	b.n	800a89a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 f8b1 	bl	800a9f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f8c2 	bl	800aa1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	f003 0301 	and.w	r3, r3, #1
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00c      	beq.n	800a8c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f003 0301 	and.w	r3, r3, #1
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d007      	beq.n	800a8c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f06f 0201 	mvn.w	r2, #1
 800a8bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f7f6 fe64 	bl	800158c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d104      	bne.n	800a8d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00c      	beq.n	800a8f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d007      	beq.n	800a8f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a8ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 fa77 	bl	800ade0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00c      	beq.n	800a916 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a902:	2b00      	cmp	r3, #0
 800a904:	d007      	beq.n	800a916 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a90e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 fa6f 	bl	800adf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00c      	beq.n	800a93a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a926:	2b00      	cmp	r3, #0
 800a928:	d007      	beq.n	800a93a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 f87c 	bl	800aa32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	f003 0320 	and.w	r3, r3, #32
 800a940:	2b00      	cmp	r3, #0
 800a942:	d00c      	beq.n	800a95e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f003 0320 	and.w	r3, r3, #32
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d007      	beq.n	800a95e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f06f 0220 	mvn.w	r2, #32
 800a956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 fa37 	bl	800adcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a964:	2b00      	cmp	r3, #0
 800a966:	d00c      	beq.n	800a982 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d007      	beq.n	800a982 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a97a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fa43 	bl	800ae08 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00c      	beq.n	800a9a6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a992:	2b00      	cmp	r3, #0
 800a994:	d007      	beq.n	800a9a6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a99e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 fa3b 	bl	800ae1c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00c      	beq.n	800a9ca <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d007      	beq.n	800a9ca <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a9c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 fa33 	bl	800ae30 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00c      	beq.n	800a9ee <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d007      	beq.n	800a9ee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a9e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 fa2b 	bl	800ae44 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a9ee:	bf00      	nop
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9f6:	b480      	push	{r7}
 800a9f8:	b083      	sub	sp, #12
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a9fe:	bf00      	nop
 800aa00:	370c      	adds	r7, #12
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa0a:	b480      	push	{r7}
 800aa0c:	b083      	sub	sp, #12
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa12:	bf00      	nop
 800aa14:	370c      	adds	r7, #12
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr

0800aa1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa1e:	b480      	push	{r7}
 800aa20:	b083      	sub	sp, #12
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa26:	bf00      	nop
 800aa28:	370c      	adds	r7, #12
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa32:	b480      	push	{r7}
 800aa34:	b083      	sub	sp, #12
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa3a:	bf00      	nop
 800aa3c:	370c      	adds	r7, #12
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr
	...

0800aa48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4a6b      	ldr	r2, [pc, #428]	@ (800ac08 <TIM_Base_SetConfig+0x1c0>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d02b      	beq.n	800aab8 <TIM_Base_SetConfig+0x70>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a6a      	ldr	r2, [pc, #424]	@ (800ac0c <TIM_Base_SetConfig+0x1c4>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d027      	beq.n	800aab8 <TIM_Base_SetConfig+0x70>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa6e:	d023      	beq.n	800aab8 <TIM_Base_SetConfig+0x70>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa76:	d01f      	beq.n	800aab8 <TIM_Base_SetConfig+0x70>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a65      	ldr	r2, [pc, #404]	@ (800ac10 <TIM_Base_SetConfig+0x1c8>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d01b      	beq.n	800aab8 <TIM_Base_SetConfig+0x70>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	4a64      	ldr	r2, [pc, #400]	@ (800ac14 <TIM_Base_SetConfig+0x1cc>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d017      	beq.n	800aab8 <TIM_Base_SetConfig+0x70>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a63      	ldr	r2, [pc, #396]	@ (800ac18 <TIM_Base_SetConfig+0x1d0>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d013      	beq.n	800aab8 <TIM_Base_SetConfig+0x70>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a62      	ldr	r2, [pc, #392]	@ (800ac1c <TIM_Base_SetConfig+0x1d4>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d00f      	beq.n	800aab8 <TIM_Base_SetConfig+0x70>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a61      	ldr	r2, [pc, #388]	@ (800ac20 <TIM_Base_SetConfig+0x1d8>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d00b      	beq.n	800aab8 <TIM_Base_SetConfig+0x70>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a60      	ldr	r2, [pc, #384]	@ (800ac24 <TIM_Base_SetConfig+0x1dc>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d007      	beq.n	800aab8 <TIM_Base_SetConfig+0x70>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a5f      	ldr	r2, [pc, #380]	@ (800ac28 <TIM_Base_SetConfig+0x1e0>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d003      	beq.n	800aab8 <TIM_Base_SetConfig+0x70>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a5e      	ldr	r2, [pc, #376]	@ (800ac2c <TIM_Base_SetConfig+0x1e4>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d108      	bne.n	800aaca <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aabe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a4e      	ldr	r2, [pc, #312]	@ (800ac08 <TIM_Base_SetConfig+0x1c0>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d043      	beq.n	800ab5a <TIM_Base_SetConfig+0x112>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a4d      	ldr	r2, [pc, #308]	@ (800ac0c <TIM_Base_SetConfig+0x1c4>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d03f      	beq.n	800ab5a <TIM_Base_SetConfig+0x112>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aae0:	d03b      	beq.n	800ab5a <TIM_Base_SetConfig+0x112>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aae8:	d037      	beq.n	800ab5a <TIM_Base_SetConfig+0x112>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a48      	ldr	r2, [pc, #288]	@ (800ac10 <TIM_Base_SetConfig+0x1c8>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d033      	beq.n	800ab5a <TIM_Base_SetConfig+0x112>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4a47      	ldr	r2, [pc, #284]	@ (800ac14 <TIM_Base_SetConfig+0x1cc>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d02f      	beq.n	800ab5a <TIM_Base_SetConfig+0x112>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a46      	ldr	r2, [pc, #280]	@ (800ac18 <TIM_Base_SetConfig+0x1d0>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d02b      	beq.n	800ab5a <TIM_Base_SetConfig+0x112>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4a45      	ldr	r2, [pc, #276]	@ (800ac1c <TIM_Base_SetConfig+0x1d4>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d027      	beq.n	800ab5a <TIM_Base_SetConfig+0x112>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4a44      	ldr	r2, [pc, #272]	@ (800ac20 <TIM_Base_SetConfig+0x1d8>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d023      	beq.n	800ab5a <TIM_Base_SetConfig+0x112>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a43      	ldr	r2, [pc, #268]	@ (800ac24 <TIM_Base_SetConfig+0x1dc>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d01f      	beq.n	800ab5a <TIM_Base_SetConfig+0x112>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4a42      	ldr	r2, [pc, #264]	@ (800ac28 <TIM_Base_SetConfig+0x1e0>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d01b      	beq.n	800ab5a <TIM_Base_SetConfig+0x112>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	4a41      	ldr	r2, [pc, #260]	@ (800ac2c <TIM_Base_SetConfig+0x1e4>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d017      	beq.n	800ab5a <TIM_Base_SetConfig+0x112>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a40      	ldr	r2, [pc, #256]	@ (800ac30 <TIM_Base_SetConfig+0x1e8>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d013      	beq.n	800ab5a <TIM_Base_SetConfig+0x112>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a3f      	ldr	r2, [pc, #252]	@ (800ac34 <TIM_Base_SetConfig+0x1ec>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d00f      	beq.n	800ab5a <TIM_Base_SetConfig+0x112>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a3e      	ldr	r2, [pc, #248]	@ (800ac38 <TIM_Base_SetConfig+0x1f0>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d00b      	beq.n	800ab5a <TIM_Base_SetConfig+0x112>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a3d      	ldr	r2, [pc, #244]	@ (800ac3c <TIM_Base_SetConfig+0x1f4>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d007      	beq.n	800ab5a <TIM_Base_SetConfig+0x112>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a3c      	ldr	r2, [pc, #240]	@ (800ac40 <TIM_Base_SetConfig+0x1f8>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d003      	beq.n	800ab5a <TIM_Base_SetConfig+0x112>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a3b      	ldr	r2, [pc, #236]	@ (800ac44 <TIM_Base_SetConfig+0x1fc>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d108      	bne.n	800ab6c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	695b      	ldr	r3, [r3, #20]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	689a      	ldr	r2, [r3, #8]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a1e      	ldr	r2, [pc, #120]	@ (800ac08 <TIM_Base_SetConfig+0x1c0>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d023      	beq.n	800abda <TIM_Base_SetConfig+0x192>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a1d      	ldr	r2, [pc, #116]	@ (800ac0c <TIM_Base_SetConfig+0x1c4>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d01f      	beq.n	800abda <TIM_Base_SetConfig+0x192>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a22      	ldr	r2, [pc, #136]	@ (800ac28 <TIM_Base_SetConfig+0x1e0>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d01b      	beq.n	800abda <TIM_Base_SetConfig+0x192>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a21      	ldr	r2, [pc, #132]	@ (800ac2c <TIM_Base_SetConfig+0x1e4>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d017      	beq.n	800abda <TIM_Base_SetConfig+0x192>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a20      	ldr	r2, [pc, #128]	@ (800ac30 <TIM_Base_SetConfig+0x1e8>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d013      	beq.n	800abda <TIM_Base_SetConfig+0x192>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a1f      	ldr	r2, [pc, #124]	@ (800ac34 <TIM_Base_SetConfig+0x1ec>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d00f      	beq.n	800abda <TIM_Base_SetConfig+0x192>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a1e      	ldr	r2, [pc, #120]	@ (800ac38 <TIM_Base_SetConfig+0x1f0>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d00b      	beq.n	800abda <TIM_Base_SetConfig+0x192>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a1d      	ldr	r2, [pc, #116]	@ (800ac3c <TIM_Base_SetConfig+0x1f4>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d007      	beq.n	800abda <TIM_Base_SetConfig+0x192>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a1c      	ldr	r2, [pc, #112]	@ (800ac40 <TIM_Base_SetConfig+0x1f8>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d003      	beq.n	800abda <TIM_Base_SetConfig+0x192>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a1b      	ldr	r2, [pc, #108]	@ (800ac44 <TIM_Base_SetConfig+0x1fc>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d103      	bne.n	800abe2 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	691a      	ldr	r2, [r3, #16]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f043 0204 	orr.w	r2, r3, #4
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2201      	movs	r2, #1
 800abf2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	601a      	str	r2, [r3, #0]
}
 800abfa:	bf00      	nop
 800abfc:	3714      	adds	r7, #20
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	40012c00 	.word	0x40012c00
 800ac0c:	50012c00 	.word	0x50012c00
 800ac10:	40000400 	.word	0x40000400
 800ac14:	50000400 	.word	0x50000400
 800ac18:	40000800 	.word	0x40000800
 800ac1c:	50000800 	.word	0x50000800
 800ac20:	40000c00 	.word	0x40000c00
 800ac24:	50000c00 	.word	0x50000c00
 800ac28:	40013400 	.word	0x40013400
 800ac2c:	50013400 	.word	0x50013400
 800ac30:	40014000 	.word	0x40014000
 800ac34:	50014000 	.word	0x50014000
 800ac38:	40014400 	.word	0x40014400
 800ac3c:	50014400 	.word	0x50014400
 800ac40:	40014800 	.word	0x40014800
 800ac44:	50014800 	.word	0x50014800

0800ac48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d101      	bne.n	800ac60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac5c:	2302      	movs	r3, #2
 800ac5e:	e097      	b.n	800ad90 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2202      	movs	r2, #2
 800ac6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a45      	ldr	r2, [pc, #276]	@ (800ad9c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d00e      	beq.n	800aca8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a44      	ldr	r2, [pc, #272]	@ (800ada0 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d009      	beq.n	800aca8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a42      	ldr	r2, [pc, #264]	@ (800ada4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d004      	beq.n	800aca8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a41      	ldr	r2, [pc, #260]	@ (800ada8 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d108      	bne.n	800acba <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800acae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800acc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	4313      	orrs	r3, r2
 800acce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a2f      	ldr	r2, [pc, #188]	@ (800ad9c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d040      	beq.n	800ad64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a2e      	ldr	r2, [pc, #184]	@ (800ada0 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d03b      	beq.n	800ad64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acf4:	d036      	beq.n	800ad64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800acfe:	d031      	beq.n	800ad64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a29      	ldr	r2, [pc, #164]	@ (800adac <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d02c      	beq.n	800ad64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a28      	ldr	r2, [pc, #160]	@ (800adb0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d027      	beq.n	800ad64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a26      	ldr	r2, [pc, #152]	@ (800adb4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d022      	beq.n	800ad64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a25      	ldr	r2, [pc, #148]	@ (800adb8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d01d      	beq.n	800ad64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a23      	ldr	r2, [pc, #140]	@ (800adbc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d018      	beq.n	800ad64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a22      	ldr	r2, [pc, #136]	@ (800adc0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d013      	beq.n	800ad64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a18      	ldr	r2, [pc, #96]	@ (800ada4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d00e      	beq.n	800ad64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4a17      	ldr	r2, [pc, #92]	@ (800ada8 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d009      	beq.n	800ad64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a1b      	ldr	r2, [pc, #108]	@ (800adc4 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d004      	beq.n	800ad64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4a1a      	ldr	r2, [pc, #104]	@ (800adc8 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d10c      	bne.n	800ad7e <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	68ba      	ldr	r2, [r7, #8]
 800ad72:	4313      	orrs	r3, r2
 800ad74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	68ba      	ldr	r2, [r7, #8]
 800ad7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2201      	movs	r2, #1
 800ad82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3714      	adds	r7, #20
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr
 800ad9c:	40012c00 	.word	0x40012c00
 800ada0:	50012c00 	.word	0x50012c00
 800ada4:	40013400 	.word	0x40013400
 800ada8:	50013400 	.word	0x50013400
 800adac:	40000400 	.word	0x40000400
 800adb0:	50000400 	.word	0x50000400
 800adb4:	40000800 	.word	0x40000800
 800adb8:	50000800 	.word	0x50000800
 800adbc:	40000c00 	.word	0x40000c00
 800adc0:	50000c00 	.word	0x50000c00
 800adc4:	40014000 	.word	0x40014000
 800adc8:	50014000 	.word	0x50014000

0800adcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800adcc:	b480      	push	{r7}
 800adce:	b083      	sub	sp, #12
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800add4:	bf00      	nop
 800add6:	370c      	adds	r7, #12
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ae10:	bf00      	nop
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d101      	bne.n	800ae6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae66:	2301      	movs	r3, #1
 800ae68:	e042      	b.n	800aef0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d106      	bne.n	800ae82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7f6 ff57 	bl	8001d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2224      	movs	r2, #36	@ 0x24
 800ae86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f022 0201 	bic.w	r2, r2, #1
 800ae98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d002      	beq.n	800aea8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 fa68 	bl	800b378 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f8c3 	bl	800b034 <UART_SetConfig>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d101      	bne.n	800aeb8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e01b      	b.n	800aef0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	685a      	ldr	r2, [r3, #4]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aec6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	689a      	ldr	r2, [r3, #8]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aed6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f042 0201 	orr.w	r2, r2, #1
 800aee6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 fae7 	bl	800b4bc <UART_CheckIdleState>
 800aeee:	4603      	mov	r3, r0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b08a      	sub	sp, #40	@ 0x28
 800aefc:	af02      	add	r7, sp, #8
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	603b      	str	r3, [r7, #0]
 800af04:	4613      	mov	r3, r2
 800af06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af0e:	2b20      	cmp	r3, #32
 800af10:	f040 808b 	bne.w	800b02a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d002      	beq.n	800af20 <HAL_UART_Transmit+0x28>
 800af1a:	88fb      	ldrh	r3, [r7, #6]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d101      	bne.n	800af24 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	e083      	b.n	800b02c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af2e:	2b80      	cmp	r3, #128	@ 0x80
 800af30:	d107      	bne.n	800af42 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	689a      	ldr	r2, [r3, #8]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800af40:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2200      	movs	r2, #0
 800af46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2221      	movs	r2, #33	@ 0x21
 800af4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af52:	f7f6 ffc3 	bl	8001edc <HAL_GetTick>
 800af56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	88fa      	ldrh	r2, [r7, #6]
 800af5c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	88fa      	ldrh	r2, [r7, #6]
 800af64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af70:	d108      	bne.n	800af84 <HAL_UART_Transmit+0x8c>
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d104      	bne.n	800af84 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800af7a:	2300      	movs	r3, #0
 800af7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	61bb      	str	r3, [r7, #24]
 800af82:	e003      	b.n	800af8c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800af88:	2300      	movs	r3, #0
 800af8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800af8c:	e030      	b.n	800aff0 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	9300      	str	r3, [sp, #0]
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	2200      	movs	r2, #0
 800af96:	2180      	movs	r1, #128	@ 0x80
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f000 fb39 	bl	800b610 <UART_WaitOnFlagUntilTimeout>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d005      	beq.n	800afb0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2220      	movs	r2, #32
 800afa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800afac:	2303      	movs	r3, #3
 800afae:	e03d      	b.n	800b02c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d10b      	bne.n	800afce <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	881b      	ldrh	r3, [r3, #0]
 800afba:	461a      	mov	r2, r3
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800afc4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	3302      	adds	r3, #2
 800afca:	61bb      	str	r3, [r7, #24]
 800afcc:	e007      	b.n	800afde <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	781a      	ldrb	r2, [r3, #0]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	3301      	adds	r3, #1
 800afdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	3b01      	subs	r3, #1
 800afe8:	b29a      	uxth	r2, r3
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1c8      	bne.n	800af8e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	9300      	str	r3, [sp, #0]
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	2200      	movs	r2, #0
 800b004:	2140      	movs	r1, #64	@ 0x40
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f000 fb02 	bl	800b610 <UART_WaitOnFlagUntilTimeout>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d005      	beq.n	800b01e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2220      	movs	r2, #32
 800b016:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b01a:	2303      	movs	r3, #3
 800b01c:	e006      	b.n	800b02c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2220      	movs	r2, #32
 800b022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b026:	2300      	movs	r3, #0
 800b028:	e000      	b.n	800b02c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b02a:	2302      	movs	r3, #2
  }
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3720      	adds	r7, #32
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b038:	b094      	sub	sp, #80	@ 0x50
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b03e:	2300      	movs	r3, #0
 800b040:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	4b7e      	ldr	r3, [pc, #504]	@ (800b244 <UART_SetConfig+0x210>)
 800b04a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b04e:	689a      	ldr	r2, [r3, #8]
 800b050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	431a      	orrs	r2, r3
 800b056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b058:	695b      	ldr	r3, [r3, #20]
 800b05a:	431a      	orrs	r2, r3
 800b05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b05e:	69db      	ldr	r3, [r3, #28]
 800b060:	4313      	orrs	r3, r2
 800b062:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4977      	ldr	r1, [pc, #476]	@ (800b248 <UART_SetConfig+0x214>)
 800b06c:	4019      	ands	r1, r3
 800b06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b074:	430b      	orrs	r3, r1
 800b076:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b084:	68d9      	ldr	r1, [r3, #12]
 800b086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	ea40 0301 	orr.w	r3, r0, r1
 800b08e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b092:	699b      	ldr	r3, [r3, #24]
 800b094:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	4b6a      	ldr	r3, [pc, #424]	@ (800b244 <UART_SetConfig+0x210>)
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d009      	beq.n	800b0b4 <UART_SetConfig+0x80>
 800b0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	4b69      	ldr	r3, [pc, #420]	@ (800b24c <UART_SetConfig+0x218>)
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d004      	beq.n	800b0b4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b0aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ac:	6a1a      	ldr	r2, [r3, #32]
 800b0ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b0be:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b0c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0c8:	430b      	orrs	r3, r1
 800b0ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0d2:	f023 000f 	bic.w	r0, r3, #15
 800b0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	ea40 0301 	orr.w	r3, r0, r1
 800b0e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	4b59      	ldr	r3, [pc, #356]	@ (800b250 <UART_SetConfig+0x21c>)
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d102      	bne.n	800b0f4 <UART_SetConfig+0xc0>
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0f2:	e029      	b.n	800b148 <UART_SetConfig+0x114>
 800b0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	4b56      	ldr	r3, [pc, #344]	@ (800b254 <UART_SetConfig+0x220>)
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d102      	bne.n	800b104 <UART_SetConfig+0xd0>
 800b0fe:	2302      	movs	r3, #2
 800b100:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b102:	e021      	b.n	800b148 <UART_SetConfig+0x114>
 800b104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	4b53      	ldr	r3, [pc, #332]	@ (800b258 <UART_SetConfig+0x224>)
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d102      	bne.n	800b114 <UART_SetConfig+0xe0>
 800b10e:	2304      	movs	r3, #4
 800b110:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b112:	e019      	b.n	800b148 <UART_SetConfig+0x114>
 800b114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	4b50      	ldr	r3, [pc, #320]	@ (800b25c <UART_SetConfig+0x228>)
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d102      	bne.n	800b124 <UART_SetConfig+0xf0>
 800b11e:	2308      	movs	r3, #8
 800b120:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b122:	e011      	b.n	800b148 <UART_SetConfig+0x114>
 800b124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	4b4d      	ldr	r3, [pc, #308]	@ (800b260 <UART_SetConfig+0x22c>)
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d102      	bne.n	800b134 <UART_SetConfig+0x100>
 800b12e:	2310      	movs	r3, #16
 800b130:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b132:	e009      	b.n	800b148 <UART_SetConfig+0x114>
 800b134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	4b42      	ldr	r3, [pc, #264]	@ (800b244 <UART_SetConfig+0x210>)
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d102      	bne.n	800b144 <UART_SetConfig+0x110>
 800b13e:	2320      	movs	r3, #32
 800b140:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b142:	e001      	b.n	800b148 <UART_SetConfig+0x114>
 800b144:	2300      	movs	r3, #0
 800b146:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	4b3d      	ldr	r3, [pc, #244]	@ (800b244 <UART_SetConfig+0x210>)
 800b14e:	429a      	cmp	r2, r3
 800b150:	d005      	beq.n	800b15e <UART_SetConfig+0x12a>
 800b152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	4b3d      	ldr	r3, [pc, #244]	@ (800b24c <UART_SetConfig+0x218>)
 800b158:	429a      	cmp	r2, r3
 800b15a:	f040 8085 	bne.w	800b268 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b15e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b160:	2200      	movs	r2, #0
 800b162:	623b      	str	r3, [r7, #32]
 800b164:	627a      	str	r2, [r7, #36]	@ 0x24
 800b166:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b16a:	f7fd ff17 	bl	8008f9c <HAL_RCCEx_GetPeriphCLKFreq>
 800b16e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b170:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b172:	2b00      	cmp	r3, #0
 800b174:	f000 80e8 	beq.w	800b348 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b17a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b17c:	4a39      	ldr	r2, [pc, #228]	@ (800b264 <UART_SetConfig+0x230>)
 800b17e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b182:	461a      	mov	r2, r3
 800b184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b186:	fbb3 f3f2 	udiv	r3, r3, r2
 800b18a:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b18e:	685a      	ldr	r2, [r3, #4]
 800b190:	4613      	mov	r3, r2
 800b192:	005b      	lsls	r3, r3, #1
 800b194:	4413      	add	r3, r2
 800b196:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b198:	429a      	cmp	r2, r3
 800b19a:	d305      	bcc.n	800b1a8 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b1a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d903      	bls.n	800b1b0 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b1ae:	e048      	b.n	800b242 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	61bb      	str	r3, [r7, #24]
 800b1b6:	61fa      	str	r2, [r7, #28]
 800b1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1bc:	4a29      	ldr	r2, [pc, #164]	@ (800b264 <UART_SetConfig+0x230>)
 800b1be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	613b      	str	r3, [r7, #16]
 800b1c8:	617a      	str	r2, [r7, #20]
 800b1ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b1ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b1d2:	f7f5 f8a5 	bl	8000320 <__aeabi_uldivmod>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	460b      	mov	r3, r1
 800b1da:	4610      	mov	r0, r2
 800b1dc:	4619      	mov	r1, r3
 800b1de:	f04f 0200 	mov.w	r2, #0
 800b1e2:	f04f 0300 	mov.w	r3, #0
 800b1e6:	020b      	lsls	r3, r1, #8
 800b1e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b1ec:	0202      	lsls	r2, r0, #8
 800b1ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1f0:	6849      	ldr	r1, [r1, #4]
 800b1f2:	0849      	lsrs	r1, r1, #1
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	460c      	mov	r4, r1
 800b1f8:	4605      	mov	r5, r0
 800b1fa:	eb12 0804 	adds.w	r8, r2, r4
 800b1fe:	eb43 0905 	adc.w	r9, r3, r5
 800b202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	60bb      	str	r3, [r7, #8]
 800b20a:	60fa      	str	r2, [r7, #12]
 800b20c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b210:	4640      	mov	r0, r8
 800b212:	4649      	mov	r1, r9
 800b214:	f7f5 f884 	bl	8000320 <__aeabi_uldivmod>
 800b218:	4602      	mov	r2, r0
 800b21a:	460b      	mov	r3, r1
 800b21c:	4613      	mov	r3, r2
 800b21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b226:	d308      	bcc.n	800b23a <UART_SetConfig+0x206>
 800b228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b22a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b22e:	d204      	bcs.n	800b23a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800b230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b236:	60da      	str	r2, [r3, #12]
 800b238:	e003      	b.n	800b242 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800b23a:	2301      	movs	r3, #1
 800b23c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b240:	e082      	b.n	800b348 <UART_SetConfig+0x314>
 800b242:	e081      	b.n	800b348 <UART_SetConfig+0x314>
 800b244:	46002400 	.word	0x46002400
 800b248:	cfff69f3 	.word	0xcfff69f3
 800b24c:	56002400 	.word	0x56002400
 800b250:	40013800 	.word	0x40013800
 800b254:	40004400 	.word	0x40004400
 800b258:	40004800 	.word	0x40004800
 800b25c:	40004c00 	.word	0x40004c00
 800b260:	40005000 	.word	0x40005000
 800b264:	0802d914 	.word	0x0802d914
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b26a:	69db      	ldr	r3, [r3, #28]
 800b26c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b270:	d13c      	bne.n	800b2ec <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b272:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b274:	2200      	movs	r2, #0
 800b276:	603b      	str	r3, [r7, #0]
 800b278:	607a      	str	r2, [r7, #4]
 800b27a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b27e:	f7fd fe8d 	bl	8008f9c <HAL_RCCEx_GetPeriphCLKFreq>
 800b282:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b286:	2b00      	cmp	r3, #0
 800b288:	d05e      	beq.n	800b348 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b28c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b28e:	4a39      	ldr	r2, [pc, #228]	@ (800b374 <UART_SetConfig+0x340>)
 800b290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b294:	461a      	mov	r2, r3
 800b296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b298:	fbb3 f3f2 	udiv	r3, r3, r2
 800b29c:	005a      	lsls	r2, r3, #1
 800b29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	085b      	lsrs	r3, r3, #1
 800b2a4:	441a      	add	r2, r3
 800b2a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2b2:	2b0f      	cmp	r3, #15
 800b2b4:	d916      	bls.n	800b2e4 <UART_SetConfig+0x2b0>
 800b2b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2bc:	d212      	bcs.n	800b2e4 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b2be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	f023 030f 	bic.w	r3, r3, #15
 800b2c6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b2c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2ca:	085b      	lsrs	r3, r3, #1
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	f003 0307 	and.w	r3, r3, #7
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b2da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b2e0:	60da      	str	r2, [r3, #12]
 800b2e2:	e031      	b.n	800b348 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b2ea:	e02d      	b.n	800b348 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b2ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	469a      	mov	sl, r3
 800b2f2:	4693      	mov	fp, r2
 800b2f4:	4650      	mov	r0, sl
 800b2f6:	4659      	mov	r1, fp
 800b2f8:	f7fd fe50 	bl	8008f9c <HAL_RCCEx_GetPeriphCLKFreq>
 800b2fc:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b2fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b300:	2b00      	cmp	r3, #0
 800b302:	d021      	beq.n	800b348 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b308:	4a1a      	ldr	r2, [pc, #104]	@ (800b374 <UART_SetConfig+0x340>)
 800b30a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b30e:	461a      	mov	r2, r3
 800b310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b312:	fbb3 f2f2 	udiv	r2, r3, r2
 800b316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	085b      	lsrs	r3, r3, #1
 800b31c:	441a      	add	r2, r3
 800b31e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	fbb2 f3f3 	udiv	r3, r2, r3
 800b326:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b32a:	2b0f      	cmp	r3, #15
 800b32c:	d909      	bls.n	800b342 <UART_SetConfig+0x30e>
 800b32e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b334:	d205      	bcs.n	800b342 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b338:	b29a      	uxth	r2, r3
 800b33a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	60da      	str	r2, [r3, #12]
 800b340:	e002      	b.n	800b348 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b34a:	2201      	movs	r2, #1
 800b34c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b352:	2201      	movs	r2, #1
 800b354:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b35a:	2200      	movs	r2, #0
 800b35c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b35e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b360:	2200      	movs	r2, #0
 800b362:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b364:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3750      	adds	r7, #80	@ 0x50
 800b36c:	46bd      	mov	sp, r7
 800b36e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b372:	bf00      	nop
 800b374:	0802d914 	.word	0x0802d914

0800b378 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b384:	f003 0308 	and.w	r3, r3, #8
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d00a      	beq.n	800b3a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	430a      	orrs	r2, r1
 800b3a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3a6:	f003 0301 	and.w	r3, r3, #1
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00a      	beq.n	800b3c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	430a      	orrs	r2, r1
 800b3c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3c8:	f003 0302 	and.w	r3, r3, #2
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d00a      	beq.n	800b3e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	430a      	orrs	r2, r1
 800b3e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ea:	f003 0304 	and.w	r3, r3, #4
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00a      	beq.n	800b408 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	430a      	orrs	r2, r1
 800b406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b40c:	f003 0310 	and.w	r3, r3, #16
 800b410:	2b00      	cmp	r3, #0
 800b412:	d00a      	beq.n	800b42a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	689b      	ldr	r3, [r3, #8]
 800b41a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	430a      	orrs	r2, r1
 800b428:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b42e:	f003 0320 	and.w	r3, r3, #32
 800b432:	2b00      	cmp	r3, #0
 800b434:	d00a      	beq.n	800b44c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	689b      	ldr	r3, [r3, #8]
 800b43c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	430a      	orrs	r2, r1
 800b44a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b454:	2b00      	cmp	r3, #0
 800b456:	d01a      	beq.n	800b48e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	430a      	orrs	r2, r1
 800b46c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b472:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b476:	d10a      	bne.n	800b48e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	430a      	orrs	r2, r1
 800b48c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b496:	2b00      	cmp	r3, #0
 800b498:	d00a      	beq.n	800b4b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	430a      	orrs	r2, r1
 800b4ae:	605a      	str	r2, [r3, #4]
  }
}
 800b4b0:	bf00      	nop
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b098      	sub	sp, #96	@ 0x60
 800b4c0:	af02      	add	r7, sp, #8
 800b4c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b4cc:	f7f6 fd06 	bl	8001edc <HAL_GetTick>
 800b4d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f003 0308 	and.w	r3, r3, #8
 800b4dc:	2b08      	cmp	r3, #8
 800b4de:	d12f      	bne.n	800b540 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b4e4:	9300      	str	r3, [sp, #0]
 800b4e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 f88e 	bl	800b610 <UART_WaitOnFlagUntilTimeout>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d022      	beq.n	800b540 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b502:	e853 3f00 	ldrex	r3, [r3]
 800b506:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b50a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b50e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	461a      	mov	r2, r3
 800b516:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b518:	647b      	str	r3, [r7, #68]	@ 0x44
 800b51a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b51e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b520:	e841 2300 	strex	r3, r2, [r1]
 800b524:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d1e6      	bne.n	800b4fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2220      	movs	r2, #32
 800b530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b53c:	2303      	movs	r3, #3
 800b53e:	e063      	b.n	800b608 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f003 0304 	and.w	r3, r3, #4
 800b54a:	2b04      	cmp	r3, #4
 800b54c:	d149      	bne.n	800b5e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b54e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b552:	9300      	str	r3, [sp, #0]
 800b554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b556:	2200      	movs	r2, #0
 800b558:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 f857 	bl	800b610 <UART_WaitOnFlagUntilTimeout>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d03c      	beq.n	800b5e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b570:	e853 3f00 	ldrex	r3, [r3]
 800b574:	623b      	str	r3, [r7, #32]
   return(result);
 800b576:	6a3b      	ldr	r3, [r7, #32]
 800b578:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b57c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	461a      	mov	r2, r3
 800b584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b586:	633b      	str	r3, [r7, #48]	@ 0x30
 800b588:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b58c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b58e:	e841 2300 	strex	r3, r2, [r1]
 800b592:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1e6      	bne.n	800b568 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	3308      	adds	r3, #8
 800b5a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	e853 3f00 	ldrex	r3, [r3]
 800b5a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f023 0301 	bic.w	r3, r3, #1
 800b5b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	3308      	adds	r3, #8
 800b5b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5ba:	61fa      	str	r2, [r7, #28]
 800b5bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5be:	69b9      	ldr	r1, [r7, #24]
 800b5c0:	69fa      	ldr	r2, [r7, #28]
 800b5c2:	e841 2300 	strex	r3, r2, [r1]
 800b5c6:	617b      	str	r3, [r7, #20]
   return(result);
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1e5      	bne.n	800b59a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2220      	movs	r2, #32
 800b5d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5de:	2303      	movs	r3, #3
 800b5e0:	e012      	b.n	800b608 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2220      	movs	r2, #32
 800b5e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2220      	movs	r2, #32
 800b5ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2200      	movs	r2, #0
 800b602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b606:	2300      	movs	r3, #0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3758      	adds	r7, #88	@ 0x58
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	603b      	str	r3, [r7, #0]
 800b61c:	4613      	mov	r3, r2
 800b61e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b620:	e04f      	b.n	800b6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b628:	d04b      	beq.n	800b6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b62a:	f7f6 fc57 	bl	8001edc <HAL_GetTick>
 800b62e:	4602      	mov	r2, r0
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	1ad3      	subs	r3, r2, r3
 800b634:	69ba      	ldr	r2, [r7, #24]
 800b636:	429a      	cmp	r2, r3
 800b638:	d302      	bcc.n	800b640 <UART_WaitOnFlagUntilTimeout+0x30>
 800b63a:	69bb      	ldr	r3, [r7, #24]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d101      	bne.n	800b644 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b640:	2303      	movs	r3, #3
 800b642:	e04e      	b.n	800b6e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f003 0304 	and.w	r3, r3, #4
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d037      	beq.n	800b6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	2b80      	cmp	r3, #128	@ 0x80
 800b656:	d034      	beq.n	800b6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	2b40      	cmp	r3, #64	@ 0x40
 800b65c:	d031      	beq.n	800b6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	69db      	ldr	r3, [r3, #28]
 800b664:	f003 0308 	and.w	r3, r3, #8
 800b668:	2b08      	cmp	r3, #8
 800b66a:	d110      	bne.n	800b68e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2208      	movs	r2, #8
 800b672:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b674:	68f8      	ldr	r0, [r7, #12]
 800b676:	f000 f838 	bl	800b6ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2208      	movs	r2, #8
 800b67e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2200      	movs	r2, #0
 800b686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b68a:	2301      	movs	r3, #1
 800b68c:	e029      	b.n	800b6e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	69db      	ldr	r3, [r3, #28]
 800b694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b69c:	d111      	bne.n	800b6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b6a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f000 f81e 	bl	800b6ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2220      	movs	r2, #32
 800b6b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b6be:	2303      	movs	r3, #3
 800b6c0:	e00f      	b.n	800b6e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	69da      	ldr	r2, [r3, #28]
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	4013      	ands	r3, r2
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	bf0c      	ite	eq
 800b6d2:	2301      	moveq	r3, #1
 800b6d4:	2300      	movne	r3, #0
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	461a      	mov	r2, r3
 800b6da:	79fb      	ldrb	r3, [r7, #7]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d0a0      	beq.n	800b622 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6ea:	b480      	push	{r7}
 800b6ec:	b095      	sub	sp, #84	@ 0x54
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6fa:	e853 3f00 	ldrex	r3, [r3]
 800b6fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b702:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	461a      	mov	r2, r3
 800b70e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b710:	643b      	str	r3, [r7, #64]	@ 0x40
 800b712:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b714:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b716:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b718:	e841 2300 	strex	r3, r2, [r1]
 800b71c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1e6      	bne.n	800b6f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	3308      	adds	r3, #8
 800b72a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b72c:	6a3b      	ldr	r3, [r7, #32]
 800b72e:	e853 3f00 	ldrex	r3, [r3]
 800b732:	61fb      	str	r3, [r7, #28]
   return(result);
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b73a:	f023 0301 	bic.w	r3, r3, #1
 800b73e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	3308      	adds	r3, #8
 800b746:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b748:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b74a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b74e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b750:	e841 2300 	strex	r3, r2, [r1]
 800b754:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1e3      	bne.n	800b724 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b760:	2b01      	cmp	r3, #1
 800b762:	d118      	bne.n	800b796 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	e853 3f00 	ldrex	r3, [r3]
 800b770:	60bb      	str	r3, [r7, #8]
   return(result);
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	f023 0310 	bic.w	r3, r3, #16
 800b778:	647b      	str	r3, [r7, #68]	@ 0x44
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	461a      	mov	r2, r3
 800b780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b782:	61bb      	str	r3, [r7, #24]
 800b784:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b786:	6979      	ldr	r1, [r7, #20]
 800b788:	69ba      	ldr	r2, [r7, #24]
 800b78a:	e841 2300 	strex	r3, r2, [r1]
 800b78e:	613b      	str	r3, [r7, #16]
   return(result);
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1e6      	bne.n	800b764 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2220      	movs	r2, #32
 800b79a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b7aa:	bf00      	nop
 800b7ac:	3754      	adds	r7, #84	@ 0x54
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr

0800b7b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b7b6:	b480      	push	{r7}
 800b7b8:	b085      	sub	sp, #20
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d101      	bne.n	800b7cc <HAL_UARTEx_DisableFifoMode+0x16>
 800b7c8:	2302      	movs	r3, #2
 800b7ca:	e027      	b.n	800b81c <HAL_UARTEx_DisableFifoMode+0x66>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2224      	movs	r2, #36	@ 0x24
 800b7d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f022 0201 	bic.w	r2, r2, #1
 800b7f2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b7fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2200      	movs	r2, #0
 800b800:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2220      	movs	r2, #32
 800b80e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3714      	adds	r7, #20
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d101      	bne.n	800b840 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b83c:	2302      	movs	r3, #2
 800b83e:	e02d      	b.n	800b89c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2224      	movs	r2, #36	@ 0x24
 800b84c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f022 0201 	bic.w	r2, r2, #1
 800b866:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	683a      	ldr	r2, [r7, #0]
 800b878:	430a      	orrs	r2, r1
 800b87a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f000 f84f 	bl	800b920 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2220      	movs	r2, #32
 800b88e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b89a:	2300      	movs	r3, #0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3710      	adds	r7, #16
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d101      	bne.n	800b8bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b8b8:	2302      	movs	r3, #2
 800b8ba:	e02d      	b.n	800b918 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2224      	movs	r2, #36	@ 0x24
 800b8c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f022 0201 	bic.w	r2, r2, #1
 800b8e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	689b      	ldr	r3, [r3, #8]
 800b8ea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	683a      	ldr	r2, [r7, #0]
 800b8f4:	430a      	orrs	r2, r1
 800b8f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 f811 	bl	800b920 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2220      	movs	r2, #32
 800b90a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b916:	2300      	movs	r3, #0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3710      	adds	r7, #16
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d108      	bne.n	800b942 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2201      	movs	r2, #1
 800b934:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2201      	movs	r2, #1
 800b93c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b940:	e031      	b.n	800b9a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b942:	2308      	movs	r3, #8
 800b944:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b946:	2308      	movs	r3, #8
 800b948:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	0e5b      	lsrs	r3, r3, #25
 800b952:	b2db      	uxtb	r3, r3
 800b954:	f003 0307 	and.w	r3, r3, #7
 800b958:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	0f5b      	lsrs	r3, r3, #29
 800b962:	b2db      	uxtb	r3, r3
 800b964:	f003 0307 	and.w	r3, r3, #7
 800b968:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b96a:	7bbb      	ldrb	r3, [r7, #14]
 800b96c:	7b3a      	ldrb	r2, [r7, #12]
 800b96e:	4911      	ldr	r1, [pc, #68]	@ (800b9b4 <UARTEx_SetNbDataToProcess+0x94>)
 800b970:	5c8a      	ldrb	r2, [r1, r2]
 800b972:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b976:	7b3a      	ldrb	r2, [r7, #12]
 800b978:	490f      	ldr	r1, [pc, #60]	@ (800b9b8 <UARTEx_SetNbDataToProcess+0x98>)
 800b97a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b97c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b980:	b29a      	uxth	r2, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b988:	7bfb      	ldrb	r3, [r7, #15]
 800b98a:	7b7a      	ldrb	r2, [r7, #13]
 800b98c:	4909      	ldr	r1, [pc, #36]	@ (800b9b4 <UARTEx_SetNbDataToProcess+0x94>)
 800b98e:	5c8a      	ldrb	r2, [r1, r2]
 800b990:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b994:	7b7a      	ldrb	r2, [r7, #13]
 800b996:	4908      	ldr	r1, [pc, #32]	@ (800b9b8 <UARTEx_SetNbDataToProcess+0x98>)
 800b998:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b99a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b99e:	b29a      	uxth	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b9a6:	bf00      	nop
 800b9a8:	3714      	adds	r7, #20
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	0802d92c 	.word	0x0802d92c
 800b9b8:	0802d934 	.word	0x0802d934

0800b9bc <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f043 0202 	orr.w	r2, r3, #2
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	685a      	ldr	r2, [r3, #4]
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	021b      	lsls	r3, r3, #8
 800b9dc:	431a      	orrs	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f023 0202 	bic.w	r2, r3, #2
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	601a      	str	r2, [r3, #0]
}
 800b9ee:	bf00      	nop
 800b9f0:	370c      	adds	r7, #12
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr
	...

0800b9fc <__NVIC_SetPriority>:
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	4603      	mov	r3, r0
 800ba04:	6039      	str	r1, [r7, #0]
 800ba06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ba08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	db0a      	blt.n	800ba26 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	b2da      	uxtb	r2, r3
 800ba14:	490c      	ldr	r1, [pc, #48]	@ (800ba48 <__NVIC_SetPriority+0x4c>)
 800ba16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba1a:	0112      	lsls	r2, r2, #4
 800ba1c:	b2d2      	uxtb	r2, r2
 800ba1e:	440b      	add	r3, r1
 800ba20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ba24:	e00a      	b.n	800ba3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	b2da      	uxtb	r2, r3
 800ba2a:	4908      	ldr	r1, [pc, #32]	@ (800ba4c <__NVIC_SetPriority+0x50>)
 800ba2c:	79fb      	ldrb	r3, [r7, #7]
 800ba2e:	f003 030f 	and.w	r3, r3, #15
 800ba32:	3b04      	subs	r3, #4
 800ba34:	0112      	lsls	r2, r2, #4
 800ba36:	b2d2      	uxtb	r2, r2
 800ba38:	440b      	add	r3, r1
 800ba3a:	761a      	strb	r2, [r3, #24]
}
 800ba3c:	bf00      	nop
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr
 800ba48:	e000e100 	.word	0xe000e100
 800ba4c:	e000ed00 	.word	0xe000ed00

0800ba50 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ba50:	b580      	push	{r7, lr}
 800ba52:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800ba54:	4b05      	ldr	r3, [pc, #20]	@ (800ba6c <SysTick_Handler+0x1c>)
 800ba56:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ba58:	f002 fa82 	bl	800df60 <xTaskGetSchedulerState>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d001      	beq.n	800ba66 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ba62:	f003 f80d 	bl	800ea80 <xPortSysTickHandler>
  }
}
 800ba66:	bf00      	nop
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	e000e010 	.word	0xe000e010

0800ba70 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ba70:	b580      	push	{r7, lr}
 800ba72:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800ba74:	2100      	movs	r1, #0
 800ba76:	f06f 0004 	mvn.w	r0, #4
 800ba7a:	f7ff ffbf 	bl	800b9fc <__NVIC_SetPriority>
#endif
}
 800ba7e:	bf00      	nop
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b086      	sub	sp, #24
 800ba86:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba8c:	f3ef 8305 	mrs	r3, IPSR
 800ba90:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba92:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d002      	beq.n	800ba9e <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	617b      	str	r3, [r7, #20]
 800ba9c:	e013      	b.n	800bac6 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800ba9e:	f002 fa5f 	bl	800df60 <xTaskGetSchedulerState>
 800baa2:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d00d      	beq.n	800bac6 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800baaa:	f3ef 8310 	mrs	r3, PRIMASK
 800baae:	60bb      	str	r3, [r7, #8]
  return(result);
 800bab0:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d105      	bne.n	800bac2 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bab6:	f3ef 8311 	mrs	r3, BASEPRI
 800baba:	607b      	str	r3, [r7, #4]
  return(result);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d001      	beq.n	800bac6 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800bac2:	2301      	movs	r3, #1
 800bac4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800bac6:	697b      	ldr	r3, [r7, #20]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3718      	adds	r7, #24
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800bad6:	f7ff ffd4 	bl	800ba82 <IRQ_Context>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d003      	beq.n	800bae8 <osKernelInitialize+0x18>
    stat = osErrorISR;
 800bae0:	f06f 0305 	mvn.w	r3, #5
 800bae4:	607b      	str	r3, [r7, #4]
 800bae6:	e012      	b.n	800bb0e <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800bae8:	f002 fa3a 	bl	800df60 <xTaskGetSchedulerState>
 800baec:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d109      	bne.n	800bb08 <osKernelInitialize+0x38>
 800baf4:	4b08      	ldr	r3, [pc, #32]	@ (800bb18 <osKernelInitialize+0x48>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d105      	bne.n	800bb08 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bafc:	4b06      	ldr	r3, [pc, #24]	@ (800bb18 <osKernelInitialize+0x48>)
 800bafe:	2201      	movs	r2, #1
 800bb00:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bb02:	2300      	movs	r3, #0
 800bb04:	607b      	str	r3, [r7, #4]
 800bb06:	e002      	b.n	800bb0e <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800bb08:	f04f 33ff 	mov.w	r3, #4294967295
 800bb0c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800bb0e:	687b      	ldr	r3, [r7, #4]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3708      	adds	r7, #8
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	20045c8c 	.word	0x20045c8c

0800bb1c <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800bb22:	f7ff ffae 	bl	800ba82 <IRQ_Context>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d003      	beq.n	800bb34 <osKernelStart+0x18>
    stat = osErrorISR;
 800bb2c:	f06f 0305 	mvn.w	r3, #5
 800bb30:	607b      	str	r3, [r7, #4]
 800bb32:	e016      	b.n	800bb62 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800bb34:	f002 fa14 	bl	800df60 <xTaskGetSchedulerState>
 800bb38:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d10d      	bne.n	800bb5c <osKernelStart+0x40>
 800bb40:	4b0a      	ldr	r3, [pc, #40]	@ (800bb6c <osKernelStart+0x50>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d109      	bne.n	800bb5c <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bb48:	f7ff ff92 	bl	800ba70 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 800bb4c:	4b07      	ldr	r3, [pc, #28]	@ (800bb6c <osKernelStart+0x50>)
 800bb4e:	2202      	movs	r2, #2
 800bb50:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bb52:	f001 fcc7 	bl	800d4e4 <vTaskStartScheduler>
      stat = osOK;
 800bb56:	2300      	movs	r3, #0
 800bb58:	607b      	str	r3, [r7, #4]
 800bb5a:	e002      	b.n	800bb62 <osKernelStart+0x46>
    } else {
      stat = osError;
 800bb5c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb60:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800bb62:	687b      	ldr	r3, [r7, #4]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3708      	adds	r7, #8
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	20045c8c 	.word	0x20045c8c

0800bb70 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b08e      	sub	sp, #56	@ 0x38
 800bb74:	af04      	add	r7, sp, #16
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 800bb80:	f7ff ff7f 	bl	800ba82 <IRQ_Context>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d17f      	bne.n	800bc8a <osThreadNew+0x11a>
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d07c      	beq.n	800bc8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bb90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bb96:	2318      	movs	r3, #24
 800bb98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bb9e:	f04f 33ff 	mov.w	r3, #4294967295
 800bba2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d045      	beq.n	800bc36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d002      	beq.n	800bbb8 <osThreadNew+0x48>
        name = attr->name;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	699b      	ldr	r3, [r3, #24]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d002      	beq.n	800bbc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	699b      	ldr	r3, [r3, #24]
 800bbc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d008      	beq.n	800bbde <osThreadNew+0x6e>
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	2b38      	cmp	r3, #56	@ 0x38
 800bbd0:	d805      	bhi.n	800bbde <osThreadNew+0x6e>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	f003 0301 	and.w	r3, r3, #1
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d001      	beq.n	800bbe2 <osThreadNew+0x72>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 800bbde:	2300      	movs	r3, #0
 800bbe0:	e054      	b.n	800bc8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	695b      	ldr	r3, [r3, #20]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d003      	beq.n	800bbf2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	695b      	ldr	r3, [r3, #20]
 800bbee:	089b      	lsrs	r3, r3, #2
 800bbf0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	689b      	ldr	r3, [r3, #8]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d00e      	beq.n	800bc18 <osThreadNew+0xa8>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	2b5b      	cmp	r3, #91	@ 0x5b
 800bc00:	d90a      	bls.n	800bc18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d006      	beq.n	800bc18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	695b      	ldr	r3, [r3, #20]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d002      	beq.n	800bc18 <osThreadNew+0xa8>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 800bc12:	2301      	movs	r3, #1
 800bc14:	61bb      	str	r3, [r7, #24]
 800bc16:	e010      	b.n	800bc3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	689b      	ldr	r3, [r3, #8]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d10c      	bne.n	800bc3a <osThreadNew+0xca>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	68db      	ldr	r3, [r3, #12]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d108      	bne.n	800bc3a <osThreadNew+0xca>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d104      	bne.n	800bc3a <osThreadNew+0xca>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 800bc30:	2300      	movs	r3, #0
 800bc32:	61bb      	str	r3, [r7, #24]
 800bc34:	e001      	b.n	800bc3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bc36:	2300      	movs	r3, #0
 800bc38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bc3a:	69bb      	ldr	r3, [r7, #24]
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d110      	bne.n	800bc62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc48:	9202      	str	r2, [sp, #8]
 800bc4a:	9301      	str	r3, [sp, #4]
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	9300      	str	r3, [sp, #0]
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	6a3a      	ldr	r2, [r7, #32]
 800bc54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f001 fa74 	bl	800d144 <xTaskCreateStatic>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	617b      	str	r3, [r7, #20]
 800bc60:	e013      	b.n	800bc8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d110      	bne.n	800bc8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800bc68:	6a3b      	ldr	r3, [r7, #32]
 800bc6a:	b29a      	uxth	r2, r3
 800bc6c:	f107 0314 	add.w	r3, r7, #20
 800bc70:	9301      	str	r3, [sp, #4]
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f001 faaf 	bl	800d1de <xTaskCreate>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d001      	beq.n	800bc8a <osThreadNew+0x11a>
            hTask = NULL;
 800bc86:	2300      	movs	r3, #0
 800bc88:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800bc8a:	697b      	ldr	r3, [r7, #20]
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3728      	adds	r7, #40	@ 0x28
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 800bc9c:	f7ff fef1 	bl	800ba82 <IRQ_Context>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d003      	beq.n	800bcae <osDelay+0x1a>
    stat = osErrorISR;
 800bca6:	f06f 0305 	mvn.w	r3, #5
 800bcaa:	60fb      	str	r3, [r7, #12]
 800bcac:	e007      	b.n	800bcbe <osDelay+0x2a>
  }
  else {
    stat = osOK;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d002      	beq.n	800bcbe <osDelay+0x2a>
      vTaskDelay(ticks);
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f001 fbed 	bl	800d498 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3710      	adds	r7, #16
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <osSemaphoreNew>:
/* ==== Semaphore Management Functions ==== */

/*
  Create and Initialize a Semaphore object.
*/
osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b088      	sub	sp, #32
 800bccc:	af02      	add	r7, sp, #8
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
  SemaphoreHandle_t hSemaphore;
  int32_t mem;

  hSemaphore = NULL;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (max_count > 0U) && (initial_count <= max_count)) {
 800bcd8:	f7ff fed3 	bl	800ba82 <IRQ_Context>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d175      	bne.n	800bdce <osSemaphoreNew+0x106>
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d072      	beq.n	800bdce <osSemaphoreNew+0x106>
 800bce8:	68ba      	ldr	r2, [r7, #8]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d86e      	bhi.n	800bdce <osSemaphoreNew+0x106>
    mem = -1;
 800bcf0:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf4:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d015      	beq.n	800bd28 <osSemaphoreNew+0x60>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d006      	beq.n	800bd12 <osSemaphoreNew+0x4a>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	2b4f      	cmp	r3, #79	@ 0x4f
 800bd0a:	d902      	bls.n	800bd12 <osSemaphoreNew+0x4a>
        /* The memory for control block is provided, use static object */
        mem = 1;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	613b      	str	r3, [r7, #16]
 800bd10:	e00c      	b.n	800bd2c <osSemaphoreNew+0x64>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d108      	bne.n	800bd2c <osSemaphoreNew+0x64>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d104      	bne.n	800bd2c <osSemaphoreNew+0x64>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800bd22:	2300      	movs	r3, #0
 800bd24:	613b      	str	r3, [r7, #16]
 800bd26:	e001      	b.n	800bd2c <osSemaphoreNew+0x64>
        }
      }
    }
    else {
      mem = 0;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	613b      	str	r3, [r7, #16]
    }

    if (mem != -1) {
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd32:	d04c      	beq.n	800bdce <osSemaphoreNew+0x106>
      if (max_count == 1U) {
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d128      	bne.n	800bd8c <osSemaphoreNew+0xc4>
        if (mem == 1) {
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d10a      	bne.n	800bd56 <osSemaphoreNew+0x8e>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	2203      	movs	r2, #3
 800bd46:	9200      	str	r2, [sp, #0]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	2100      	movs	r1, #0
 800bd4c:	2001      	movs	r0, #1
 800bd4e:	f000 fb2e 	bl	800c3ae <xQueueGenericCreateStatic>
 800bd52:	6178      	str	r0, [r7, #20]
 800bd54:	e005      	b.n	800bd62 <osSemaphoreNew+0x9a>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800bd56:	2203      	movs	r2, #3
 800bd58:	2100      	movs	r1, #0
 800bd5a:	2001      	movs	r0, #1
 800bd5c:	f000 fb70 	bl	800c440 <xQueueGenericCreate>
 800bd60:	6178      	str	r0, [r7, #20]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d022      	beq.n	800bdae <osSemaphoreNew+0xe6>
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d01f      	beq.n	800bdae <osSemaphoreNew+0xe6>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bd6e:	2300      	movs	r3, #0
 800bd70:	2200      	movs	r2, #0
 800bd72:	2100      	movs	r1, #0
 800bd74:	6978      	ldr	r0, [r7, #20]
 800bd76:	f000 fc23 	bl	800c5c0 <xQueueGenericSend>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d016      	beq.n	800bdae <osSemaphoreNew+0xe6>
            vSemaphoreDelete (hSemaphore);
 800bd80:	6978      	ldr	r0, [r7, #20]
 800bd82:	f000 fff0 	bl	800cd66 <vQueueDelete>
            hSemaphore = NULL;
 800bd86:	2300      	movs	r3, #0
 800bd88:	617b      	str	r3, [r7, #20]
 800bd8a:	e010      	b.n	800bdae <osSemaphoreNew+0xe6>
          }
        }
      }
      else {
        if (mem == 1) {
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d108      	bne.n	800bda4 <osSemaphoreNew+0xdc>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	461a      	mov	r2, r3
 800bd98:	68b9      	ldr	r1, [r7, #8]
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	f000 fbbe 	bl	800c51c <xQueueCreateCountingSemaphoreStatic>
 800bda0:	6178      	str	r0, [r7, #20]
 800bda2:	e004      	b.n	800bdae <osSemaphoreNew+0xe6>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800bda4:	68b9      	ldr	r1, [r7, #8]
 800bda6:	68f8      	ldr	r0, [r7, #12]
 800bda8:	f000 fbe3 	bl	800c572 <xQueueCreateCountingSemaphore>
 800bdac:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00c      	beq.n	800bdce <osSemaphoreNew+0x106>
        if ((attr != NULL) && (attr->name != NULL)) {
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d009      	beq.n	800bdce <osSemaphoreNew+0x106>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d005      	beq.n	800bdce <osSemaphoreNew+0x106>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hSemaphore, attr->name);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	6978      	ldr	r0, [r7, #20]
 800bdca:	f001 f911 	bl	800cff0 <vQueueAddToRegistry>
      #endif
    }
  }

  /* Return semaphore ID */
  return ((osSemaphoreId_t)hSemaphore);
 800bdce:	697b      	ldr	r3, [r7, #20]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3718      	adds	r7, #24
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <osSemaphoreAcquire>:

/*
  Acquire a Semaphore token or timeout if no tokens are available.
*/
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b086      	sub	sp, #24
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bde6:	2300      	movs	r3, #0
 800bde8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d103      	bne.n	800bdf8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800bdf0:	f06f 0303 	mvn.w	r3, #3
 800bdf4:	617b      	str	r3, [r7, #20]
 800bdf6:	e034      	b.n	800be62 <osSemaphoreAcquire+0x8a>
  }
  else if (IRQ_Context() != 0U) {
 800bdf8:	f7ff fe43 	bl	800ba82 <IRQ_Context>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d01e      	beq.n	800be40 <osSemaphoreAcquire+0x68>
    if (timeout != 0U) {
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d003      	beq.n	800be10 <osSemaphoreAcquire+0x38>
      stat = osErrorParameter;
 800be08:	f06f 0303 	mvn.w	r3, #3
 800be0c:	617b      	str	r3, [r7, #20]
 800be0e:	e028      	b.n	800be62 <osSemaphoreAcquire+0x8a>
    }
    else {
      yield = pdFALSE;
 800be10:	2300      	movs	r3, #0
 800be12:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800be14:	f107 030c 	add.w	r3, r7, #12
 800be18:	461a      	mov	r2, r3
 800be1a:	2100      	movs	r1, #0
 800be1c:	6938      	ldr	r0, [r7, #16]
 800be1e:	f000 ff30 	bl	800cc82 <xQueueReceiveFromISR>
 800be22:	4603      	mov	r3, r0
 800be24:	2b01      	cmp	r3, #1
 800be26:	d003      	beq.n	800be30 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
 800be28:	f06f 0302 	mvn.w	r3, #2
 800be2c:	617b      	str	r3, [r7, #20]
 800be2e:	e018      	b.n	800be62 <osSemaphoreAcquire+0x8a>
      } else {
        portYIELD_FROM_ISR (yield);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d015      	beq.n	800be62 <osSemaphoreAcquire+0x8a>
 800be36:	4b0d      	ldr	r3, [pc, #52]	@ (800be6c <osSemaphoreAcquire+0x94>)
 800be38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be3c:	601a      	str	r2, [r3, #0]
 800be3e:	e010      	b.n	800be62 <osSemaphoreAcquire+0x8a>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800be40:	6839      	ldr	r1, [r7, #0]
 800be42:	6938      	ldr	r0, [r7, #16]
 800be44:	f000 fe43 	bl	800cace <xQueueSemaphoreTake>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d009      	beq.n	800be62 <osSemaphoreAcquire+0x8a>
      if (timeout != 0U) {
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d003      	beq.n	800be5c <osSemaphoreAcquire+0x84>
        stat = osErrorTimeout;
 800be54:	f06f 0301 	mvn.w	r3, #1
 800be58:	617b      	str	r3, [r7, #20]
 800be5a:	e002      	b.n	800be62 <osSemaphoreAcquire+0x8a>
      } else {
        stat = osErrorResource;
 800be5c:	f06f 0302 	mvn.w	r3, #2
 800be60:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800be62:	697b      	ldr	r3, [r7, #20]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3718      	adds	r7, #24
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	e000ed04 	.word	0xe000ed04

0800be70 <osSemaphoreRelease>:

/*
  Release a Semaphore token up to the initial maximum count.
*/
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800be70:	b580      	push	{r7, lr}
 800be72:	b086      	sub	sp, #24
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800be7c:	2300      	movs	r3, #0
 800be7e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d103      	bne.n	800be8e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800be86:	f06f 0303 	mvn.w	r3, #3
 800be8a:	617b      	str	r3, [r7, #20]
 800be8c:	e027      	b.n	800bede <osSemaphoreRelease+0x6e>
  }
  else if (IRQ_Context() != 0U) {
 800be8e:	f7ff fdf8 	bl	800ba82 <IRQ_Context>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d016      	beq.n	800bec6 <osSemaphoreRelease+0x56>
    yield = pdFALSE;
 800be98:	2300      	movs	r3, #0
 800be9a:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800be9c:	f107 030c 	add.w	r3, r7, #12
 800bea0:	4619      	mov	r1, r3
 800bea2:	6938      	ldr	r0, [r7, #16]
 800bea4:	f000 fcdf 	bl	800c866 <xQueueGiveFromISR>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d003      	beq.n	800beb6 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800beae:	f06f 0302 	mvn.w	r3, #2
 800beb2:	617b      	str	r3, [r7, #20]
 800beb4:	e013      	b.n	800bede <osSemaphoreRelease+0x6e>
    } else {
      portYIELD_FROM_ISR (yield);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d010      	beq.n	800bede <osSemaphoreRelease+0x6e>
 800bebc:	4b0a      	ldr	r3, [pc, #40]	@ (800bee8 <osSemaphoreRelease+0x78>)
 800bebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bec2:	601a      	str	r2, [r3, #0]
 800bec4:	e00b      	b.n	800bede <osSemaphoreRelease+0x6e>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bec6:	2300      	movs	r3, #0
 800bec8:	2200      	movs	r2, #0
 800beca:	2100      	movs	r1, #0
 800becc:	6938      	ldr	r0, [r7, #16]
 800bece:	f000 fb77 	bl	800c5c0 <xQueueGenericSend>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d002      	beq.n	800bede <osSemaphoreRelease+0x6e>
      stat = osErrorResource;
 800bed8:	f06f 0302 	mvn.w	r3, #2
 800bedc:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return execution status */
  return (stat);
 800bede:	697b      	ldr	r3, [r7, #20]
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3718      	adds	r7, #24
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	e000ed04 	.word	0xe000ed04

0800beec <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800beec:	b580      	push	{r7, lr}
 800beee:	b088      	sub	sp, #32
 800bef0:	af02      	add	r7, sp, #8
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 800bef8:	2300      	movs	r3, #0
 800befa:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 800befc:	f7ff fdc1 	bl	800ba82 <IRQ_Context>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d15f      	bne.n	800bfc6 <osMessageQueueNew+0xda>
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d05c      	beq.n	800bfc6 <osMessageQueueNew+0xda>
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d059      	beq.n	800bfc6 <osMessageQueueNew+0xda>
    mem = -1;
 800bf12:	f04f 33ff 	mov.w	r3, #4294967295
 800bf16:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d029      	beq.n	800bf72 <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d012      	beq.n	800bf4c <osMessageQueueNew+0x60>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	68db      	ldr	r3, [r3, #12]
 800bf2a:	2b4f      	cmp	r3, #79	@ 0x4f
 800bf2c:	d90e      	bls.n	800bf4c <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d00a      	beq.n	800bf4c <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	695a      	ldr	r2, [r3, #20]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	68b9      	ldr	r1, [r7, #8]
 800bf3e:	fb01 f303 	mul.w	r3, r1, r3
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d302      	bcc.n	800bf4c <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 800bf46:	2301      	movs	r3, #1
 800bf48:	613b      	str	r3, [r7, #16]
 800bf4a:	e014      	b.n	800bf76 <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d110      	bne.n	800bf76 <osMessageQueueNew+0x8a>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d10c      	bne.n	800bf76 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d108      	bne.n	800bf76 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	695b      	ldr	r3, [r3, #20]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d104      	bne.n	800bf76 <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	613b      	str	r3, [r7, #16]
 800bf70:	e001      	b.n	800bf76 <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800bf72:	2300      	movs	r3, #0
 800bf74:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d10b      	bne.n	800bf94 <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	691a      	ldr	r2, [r3, #16]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	2100      	movs	r1, #0
 800bf86:	9100      	str	r1, [sp, #0]
 800bf88:	68b9      	ldr	r1, [r7, #8]
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f000 fa0f 	bl	800c3ae <xQueueGenericCreateStatic>
 800bf90:	6178      	str	r0, [r7, #20]
 800bf92:	e008      	b.n	800bfa6 <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d105      	bne.n	800bfa6 <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	68b9      	ldr	r1, [r7, #8]
 800bf9e:	68f8      	ldr	r0, [r7, #12]
 800bfa0:	f000 fa4e 	bl	800c440 <xQueueGenericCreate>
 800bfa4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d00c      	beq.n	800bfc6 <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d009      	beq.n	800bfc6 <osMessageQueueNew+0xda>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d005      	beq.n	800bfc6 <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4619      	mov	r1, r3
 800bfc0:	6978      	ldr	r0, [r7, #20]
 800bfc2:	f001 f815 	bl	800cff0 <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 800bfc6:	697b      	ldr	r3, [r7, #20]
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3718      	adds	r7, #24
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <osMessageQueuePut>:
  Put a Message into a Queue or timeout if Queue is full.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b088      	sub	sp, #32
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	603b      	str	r3, [r7, #0]
 800bfdc:	4613      	mov	r3, r2
 800bfde:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 800bfe8:	f7ff fd4b 	bl	800ba82 <IRQ_Context>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d024      	beq.n	800c03c <osMessageQueuePut+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d005      	beq.n	800c004 <osMessageQueuePut+0x34>
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d002      	beq.n	800c004 <osMessageQueuePut+0x34>
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d003      	beq.n	800c00c <osMessageQueuePut+0x3c>
      stat = osErrorParameter;
 800c004:	f06f 0303 	mvn.w	r3, #3
 800c008:	61fb      	str	r3, [r7, #28]
 800c00a:	e034      	b.n	800c076 <osMessageQueuePut+0xa6>
    }
    else {
      yield = pdFALSE;
 800c00c:	2300      	movs	r3, #0
 800c00e:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c010:	f107 0214 	add.w	r2, r7, #20
 800c014:	2300      	movs	r3, #0
 800c016:	68b9      	ldr	r1, [r7, #8]
 800c018:	69b8      	ldr	r0, [r7, #24]
 800c01a:	f000 fb9e 	bl	800c75a <xQueueGenericSendFromISR>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b01      	cmp	r3, #1
 800c022:	d003      	beq.n	800c02c <osMessageQueuePut+0x5c>
        stat = osErrorResource;
 800c024:	f06f 0302 	mvn.w	r3, #2
 800c028:	61fb      	str	r3, [r7, #28]
 800c02a:	e024      	b.n	800c076 <osMessageQueuePut+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d021      	beq.n	800c076 <osMessageQueuePut+0xa6>
 800c032:	4b13      	ldr	r3, [pc, #76]	@ (800c080 <osMessageQueuePut+0xb0>)
 800c034:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c038:	601a      	str	r2, [r3, #0]
 800c03a:	e01c      	b.n	800c076 <osMessageQueuePut+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d002      	beq.n	800c048 <osMessageQueuePut+0x78>
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d103      	bne.n	800c050 <osMessageQueuePut+0x80>
      stat = osErrorParameter;
 800c048:	f06f 0303 	mvn.w	r3, #3
 800c04c:	61fb      	str	r3, [r7, #28]
 800c04e:	e012      	b.n	800c076 <osMessageQueuePut+0xa6>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c050:	2300      	movs	r3, #0
 800c052:	683a      	ldr	r2, [r7, #0]
 800c054:	68b9      	ldr	r1, [r7, #8]
 800c056:	69b8      	ldr	r0, [r7, #24]
 800c058:	f000 fab2 	bl	800c5c0 <xQueueGenericSend>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d009      	beq.n	800c076 <osMessageQueuePut+0xa6>
        if (timeout != 0U) {
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d003      	beq.n	800c070 <osMessageQueuePut+0xa0>
          stat = osErrorTimeout;
 800c068:	f06f 0301 	mvn.w	r3, #1
 800c06c:	61fb      	str	r3, [r7, #28]
 800c06e:	e002      	b.n	800c076 <osMessageQueuePut+0xa6>
        } else {
          stat = osErrorResource;
 800c070:	f06f 0302 	mvn.w	r3, #2
 800c074:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800c076:	69fb      	ldr	r3, [r7, #28]
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3720      	adds	r7, #32
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	e000ed04 	.word	0xe000ed04

0800c084 <osMessageQueueGet>:
  Get a Message from a Queue or timeout if Queue is empty.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c084:	b580      	push	{r7, lr}
 800c086:	b088      	sub	sp, #32
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	607a      	str	r2, [r7, #4]
 800c090:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c096:	2300      	movs	r3, #0
 800c098:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 800c09a:	f7ff fcf2 	bl	800ba82 <IRQ_Context>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d024      	beq.n	800c0ee <osMessageQueueGet+0x6a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c0a4:	69bb      	ldr	r3, [r7, #24]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d005      	beq.n	800c0b6 <osMessageQueueGet+0x32>
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d002      	beq.n	800c0b6 <osMessageQueueGet+0x32>
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d003      	beq.n	800c0be <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 800c0b6:	f06f 0303 	mvn.w	r3, #3
 800c0ba:	61fb      	str	r3, [r7, #28]
 800c0bc:	e033      	b.n	800c126 <osMessageQueueGet+0xa2>
    }
    else {
      yield = pdFALSE;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c0c2:	f107 0314 	add.w	r3, r7, #20
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	68b9      	ldr	r1, [r7, #8]
 800c0ca:	69b8      	ldr	r0, [r7, #24]
 800c0cc:	f000 fdd9 	bl	800cc82 <xQueueReceiveFromISR>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d003      	beq.n	800c0de <osMessageQueueGet+0x5a>
        stat = osErrorResource;
 800c0d6:	f06f 0302 	mvn.w	r3, #2
 800c0da:	61fb      	str	r3, [r7, #28]
 800c0dc:	e023      	b.n	800c126 <osMessageQueueGet+0xa2>
      } else {
        portYIELD_FROM_ISR (yield);
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d020      	beq.n	800c126 <osMessageQueueGet+0xa2>
 800c0e4:	4b12      	ldr	r3, [pc, #72]	@ (800c130 <osMessageQueueGet+0xac>)
 800c0e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0ea:	601a      	str	r2, [r3, #0]
 800c0ec:	e01b      	b.n	800c126 <osMessageQueueGet+0xa2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d002      	beq.n	800c0fa <osMessageQueueGet+0x76>
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d103      	bne.n	800c102 <osMessageQueueGet+0x7e>
      stat = osErrorParameter;
 800c0fa:	f06f 0303 	mvn.w	r3, #3
 800c0fe:	61fb      	str	r3, [r7, #28]
 800c100:	e011      	b.n	800c126 <osMessageQueueGet+0xa2>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c102:	683a      	ldr	r2, [r7, #0]
 800c104:	68b9      	ldr	r1, [r7, #8]
 800c106:	69b8      	ldr	r0, [r7, #24]
 800c108:	f000 fc25 	bl	800c956 <xQueueReceive>
 800c10c:	4603      	mov	r3, r0
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d009      	beq.n	800c126 <osMessageQueueGet+0xa2>
        if (timeout != 0U) {
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d003      	beq.n	800c120 <osMessageQueueGet+0x9c>
          stat = osErrorTimeout;
 800c118:	f06f 0301 	mvn.w	r3, #1
 800c11c:	61fb      	str	r3, [r7, #28]
 800c11e:	e002      	b.n	800c126 <osMessageQueueGet+0xa2>
        } else {
          stat = osErrorResource;
 800c120:	f06f 0302 	mvn.w	r3, #2
 800c124:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800c126:	69fb      	ldr	r3, [r7, #28]
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3720      	adds	r7, #32
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	e000ed04 	.word	0xe000ed04

0800c134 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c134:	b480      	push	{r7}
 800c136:	b085      	sub	sp, #20
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	4a07      	ldr	r2, [pc, #28]	@ (800c160 <vApplicationGetIdleTaskMemory+0x2c>)
 800c144:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	4a06      	ldr	r2, [pc, #24]	@ (800c164 <vApplicationGetIdleTaskMemory+0x30>)
 800c14a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c152:	601a      	str	r2, [r3, #0]
}
 800c154:	bf00      	nop
 800c156:	3714      	adds	r7, #20
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr
 800c160:	20045c90 	.word	0x20045c90
 800c164:	20045cec 	.word	0x20045cec

0800c168 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c168:	b480      	push	{r7}
 800c16a:	b085      	sub	sp, #20
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	4a07      	ldr	r2, [pc, #28]	@ (800c194 <vApplicationGetTimerTaskMemory+0x2c>)
 800c178:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	4a06      	ldr	r2, [pc, #24]	@ (800c198 <vApplicationGetTimerTaskMemory+0x30>)
 800c17e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2280      	movs	r2, #128	@ 0x80
 800c184:	601a      	str	r2, [r3, #0]
}
 800c186:	bf00      	nop
 800c188:	3714      	adds	r7, #20
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr
 800c192:	bf00      	nop
 800c194:	200464ec 	.word	0x200464ec
 800c198:	20046548 	.word	0x20046548

0800c19c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f103 0208 	add.w	r2, r3, #8
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c1b4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f103 0208 	add.w	r2, r3, #8
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f103 0208 	add.w	r2, r3, #8
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c1d0:	bf00      	nop
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr

0800c1dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c1ea:	bf00      	nop
 800c1ec:	370c      	adds	r7, #12
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr

0800c1f6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800c1f6:	b480      	push	{r7}
 800c1f8:	b085      	sub	sp, #20
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20c:	d103      	bne.n	800c216 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	691b      	ldr	r3, [r3, #16]
 800c212:	60fb      	str	r3, [r7, #12]
 800c214:	e00c      	b.n	800c230 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	3308      	adds	r3, #8
 800c21a:	60fb      	str	r3, [r7, #12]
 800c21c:	e002      	b.n	800c224 <vListInsert+0x2e>
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	60fb      	str	r3, [r7, #12]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	68ba      	ldr	r2, [r7, #8]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d2f6      	bcs.n	800c21e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	685a      	ldr	r2, [r3, #4]
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	683a      	ldr	r2, [r7, #0]
 800c23e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	683a      	ldr	r2, [r7, #0]
 800c24a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	1c5a      	adds	r2, r3, #1
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	601a      	str	r2, [r3, #0]
}
 800c25c:	bf00      	nop
 800c25e:	3714      	adds	r7, #20
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c268:	b480      	push	{r7}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	691b      	ldr	r3, [r3, #16]
 800c274:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	6892      	ldr	r2, [r2, #8]
 800c27e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	689b      	ldr	r3, [r3, #8]
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	6852      	ldr	r2, [r2, #4]
 800c288:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	429a      	cmp	r2, r3
 800c292:	d103      	bne.n	800c29c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	689a      	ldr	r2, [r3, #8]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	1e5a      	subs	r2, r3, #1
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3714      	adds	r7, #20
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d103      	bne.n	800c2dc <xQueueGenericReset+0x20>
 800c2d4:	f002 fd70 	bl	800edb8 <ulSetInterruptMask>
 800c2d8:	bf00      	nop
 800c2da:	e7fd      	b.n	800c2d8 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d057      	beq.n	800c392 <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d053      	beq.n	800c392 <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2f2:	2100      	movs	r1, #0
 800c2f4:	fba3 2302 	umull	r2, r3, r3, r2
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d000      	beq.n	800c2fe <xQueueGenericReset+0x42>
 800c2fc:	2101      	movs	r1, #1
 800c2fe:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800c300:	2b00      	cmp	r3, #0
 800c302:	d146      	bne.n	800c392 <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 800c304:	f002 fb90 	bl	800ea28 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c310:	68b9      	ldr	r1, [r7, #8]
 800c312:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c314:	fb01 f303 	mul.w	r3, r1, r3
 800c318:	441a      	add	r2, r3
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	2200      	movs	r2, #0
 800c322:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c334:	3b01      	subs	r3, #1
 800c336:	68b9      	ldr	r1, [r7, #8]
 800c338:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c33a:	fb01 f303 	mul.w	r3, r1, r3
 800c33e:	441a      	add	r2, r3
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	22ff      	movs	r2, #255	@ 0xff
 800c348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	22ff      	movs	r2, #255	@ 0xff
 800c350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d10e      	bne.n	800c378 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	691b      	ldr	r3, [r3, #16]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d014      	beq.n	800c38c <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	3310      	adds	r3, #16
 800c366:	4618      	mov	r0, r3
 800c368:	f001 fbf0 	bl	800db4c <xTaskRemoveFromEventList>
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00c      	beq.n	800c38c <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800c372:	f002 fb47 	bl	800ea04 <vPortYield>
 800c376:	e009      	b.n	800c38c <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	3310      	adds	r3, #16
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7ff ff0d 	bl	800c19c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	3324      	adds	r3, #36	@ 0x24
 800c386:	4618      	mov	r0, r3
 800c388:	f7ff ff08 	bl	800c19c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800c38c:	f002 fb5e 	bl	800ea4c <vPortExitCritical>
 800c390:	e001      	b.n	800c396 <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 800c392:	2300      	movs	r3, #0
 800c394:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d103      	bne.n	800c3a4 <xQueueGenericReset+0xe8>
 800c39c:	f002 fd0c 	bl	800edb8 <ulSetInterruptMask>
 800c3a0:	bf00      	nop
 800c3a2:	e7fd      	b.n	800c3a0 <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b088      	sub	sp, #32
 800c3b2:	af02      	add	r7, sp, #8
 800c3b4:	60f8      	str	r0, [r7, #12]
 800c3b6:	60b9      	str	r1, [r7, #8]
 800c3b8:	607a      	str	r2, [r7, #4]
 800c3ba:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d103      	bne.n	800c3ce <xQueueGenericCreateStatic+0x20>
 800c3c6:	f002 fcf7 	bl	800edb8 <ulSetInterruptMask>
 800c3ca:	bf00      	nop
 800c3cc:	e7fd      	b.n	800c3ca <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d029      	beq.n	800c428 <xQueueGenericCreateStatic+0x7a>
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d026      	beq.n	800c428 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d002      	beq.n	800c3e6 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d020      	beq.n	800c428 <xQueueGenericCreateStatic+0x7a>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d102      	bne.n	800c3f2 <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d11a      	bne.n	800c428 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800c3f2:	2350      	movs	r3, #80	@ 0x50
 800c3f4:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	2b50      	cmp	r3, #80	@ 0x50
 800c3fa:	d003      	beq.n	800c404 <xQueueGenericCreateStatic+0x56>
 800c3fc:	f002 fcdc 	bl	800edb8 <ulSetInterruptMask>
 800c400:	bf00      	nop
 800c402:	e7fd      	b.n	800c400 <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800c404:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	2201      	movs	r2, #1
 800c40e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c412:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	9300      	str	r3, [sp, #0]
 800c41a:	4613      	mov	r3, r2
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	68b9      	ldr	r1, [r7, #8]
 800c420:	68f8      	ldr	r0, [r7, #12]
 800c422:	f000 f858 	bl	800c4d6 <prvInitialiseNewQueue>
 800c426:	e006      	b.n	800c436 <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d103      	bne.n	800c436 <xQueueGenericCreateStatic+0x88>
 800c42e:	f002 fcc3 	bl	800edb8 <ulSetInterruptMask>
 800c432:	bf00      	nop
 800c434:	e7fd      	b.n	800c432 <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800c436:	697b      	ldr	r3, [r7, #20]
    }
 800c438:	4618      	mov	r0, r3
 800c43a:	3718      	adds	r7, #24
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800c440:	b580      	push	{r7, lr}
 800c442:	b08a      	sub	sp, #40	@ 0x28
 800c444:	af02      	add	r7, sp, #8
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	4613      	mov	r3, r2
 800c44c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800c44e:	2300      	movs	r3, #0
 800c450:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d032      	beq.n	800c4be <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800c458:	2100      	movs	r1, #0
 800c45a:	68ba      	ldr	r2, [r7, #8]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	fba3 2302 	umull	r2, r3, r3, r2
 800c462:	2b00      	cmp	r3, #0
 800c464:	d000      	beq.n	800c468 <xQueueGenericCreate+0x28>
 800c466:	2101      	movs	r1, #1
 800c468:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d127      	bne.n	800c4be <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	68ba      	ldr	r2, [r7, #8]
 800c472:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800c476:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800c47a:	d820      	bhi.n	800c4be <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	68ba      	ldr	r2, [r7, #8]
 800c480:	fb02 f303 	mul.w	r3, r2, r3
 800c484:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	3350      	adds	r3, #80	@ 0x50
 800c48a:	4618      	mov	r0, r3
 800c48c:	f002 fcfc 	bl	800ee88 <pvPortMalloc>
 800c490:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d019      	beq.n	800c4cc <xQueueGenericCreate+0x8c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	3350      	adds	r3, #80	@ 0x50
 800c4a0:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c4a2:	69fb      	ldr	r3, [r7, #28]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c4aa:	79fa      	ldrb	r2, [r7, #7]
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	9300      	str	r3, [sp, #0]
 800c4b0:	4613      	mov	r3, r2
 800c4b2:	697a      	ldr	r2, [r7, #20]
 800c4b4:	68b9      	ldr	r1, [r7, #8]
 800c4b6:	68f8      	ldr	r0, [r7, #12]
 800c4b8:	f000 f80d 	bl	800c4d6 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800c4bc:	e006      	b.n	800c4cc <xQueueGenericCreate+0x8c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d103      	bne.n	800c4cc <xQueueGenericCreate+0x8c>
 800c4c4:	f002 fc78 	bl	800edb8 <ulSetInterruptMask>
 800c4c8:	bf00      	nop
 800c4ca:	e7fd      	b.n	800c4c8 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800c4cc:	69fb      	ldr	r3, [r7, #28]
    }
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3720      	adds	r7, #32
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b084      	sub	sp, #16
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	60f8      	str	r0, [r7, #12]
 800c4de:	60b9      	str	r1, [r7, #8]
 800c4e0:	607a      	str	r2, [r7, #4]
 800c4e2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d103      	bne.n	800c4f2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	69ba      	ldr	r2, [r7, #24]
 800c4ee:	601a      	str	r2, [r3, #0]
 800c4f0:	e002      	b.n	800c4f8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	68fa      	ldr	r2, [r7, #12]
 800c4fc:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800c4fe:	69bb      	ldr	r3, [r7, #24]
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c504:	2101      	movs	r1, #1
 800c506:	69b8      	ldr	r0, [r7, #24]
 800c508:	f7ff fed8 	bl	800c2bc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800c50c:	69bb      	ldr	r3, [r7, #24]
 800c50e:	78fa      	ldrb	r2, [r7, #3]
 800c510:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800c514:	bf00      	nop
 800c516:	3710      	adds	r7, #16
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <xQueueCreateCountingSemaphoreStatic>:
#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                       const UBaseType_t uxInitialCount,
                                                       StaticQueue_t * pxStaticQueue )
    {
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b088      	sub	sp, #32
 800c520:	af02      	add	r7, sp, #8
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
 800c528:	2300      	movs	r3, #0
 800c52a:	617b      	str	r3, [r7, #20]

        if( ( uxMaxCount != 0 ) &&
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d013      	beq.n	800c55a <xQueueCreateCountingSemaphoreStatic+0x3e>
 800c532:	68ba      	ldr	r2, [r7, #8]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	429a      	cmp	r2, r3
 800c538:	d80f      	bhi.n	800c55a <xQueueCreateCountingSemaphoreStatic+0x3e>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c53a:	2302      	movs	r3, #2
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2200      	movs	r2, #0
 800c542:	2100      	movs	r1, #0
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	f7ff ff32 	bl	800c3ae <xQueueGenericCreateStatic>
 800c54a:	6178      	str	r0, [r7, #20]

            if( xHandle != NULL )
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00a      	beq.n	800c568 <xQueueCreateCountingSemaphoreStatic+0x4c>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	68ba      	ldr	r2, [r7, #8]
 800c556:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 800c558:	e006      	b.n	800c568 <xQueueCreateCountingSemaphoreStatic+0x4c>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d103      	bne.n	800c568 <xQueueCreateCountingSemaphoreStatic+0x4c>
 800c560:	f002 fc2a 	bl	800edb8 <ulSetInterruptMask>
 800c564:	bf00      	nop
 800c566:	e7fd      	b.n	800c564 <xQueueCreateCountingSemaphoreStatic+0x48>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 800c568:	697b      	ldr	r3, [r7, #20]
    }
 800c56a:	4618      	mov	r0, r3
 800c56c:	3718      	adds	r7, #24
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}

0800c572 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 800c572:	b580      	push	{r7, lr}
 800c574:	b084      	sub	sp, #16
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
 800c57a:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 800c57c:	2300      	movs	r3, #0
 800c57e:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d010      	beq.n	800c5a8 <xQueueCreateCountingSemaphore+0x36>
 800c586:	683a      	ldr	r2, [r7, #0]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d80c      	bhi.n	800c5a8 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c58e:	2202      	movs	r2, #2
 800c590:	2100      	movs	r1, #0
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f7ff ff54 	bl	800c440 <xQueueGenericCreate>
 800c598:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d00a      	beq.n	800c5b6 <xQueueCreateCountingSemaphore+0x44>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	683a      	ldr	r2, [r7, #0]
 800c5a4:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 800c5a6:	e006      	b.n	800c5b6 <xQueueCreateCountingSemaphore+0x44>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d103      	bne.n	800c5b6 <xQueueCreateCountingSemaphore+0x44>
 800c5ae:	f002 fc03 	bl	800edb8 <ulSetInterruptMask>
 800c5b2:	bf00      	nop
 800c5b4:	e7fd      	b.n	800c5b2 <xQueueCreateCountingSemaphore+0x40>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
    }
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3710      	adds	r7, #16
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b08a      	sub	sp, #40	@ 0x28
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	607a      	str	r2, [r7, #4]
 800c5cc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800c5d6:	6a3b      	ldr	r3, [r7, #32]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d103      	bne.n	800c5e4 <xQueueGenericSend+0x24>
 800c5dc:	f002 fbec 	bl	800edb8 <ulSetInterruptMask>
 800c5e0:	bf00      	nop
 800c5e2:	e7fd      	b.n	800c5e0 <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d103      	bne.n	800c5f2 <xQueueGenericSend+0x32>
 800c5ea:	6a3b      	ldr	r3, [r7, #32]
 800c5ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d101      	bne.n	800c5f6 <xQueueGenericSend+0x36>
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	e000      	b.n	800c5f8 <xQueueGenericSend+0x38>
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d103      	bne.n	800c604 <xQueueGenericSend+0x44>
 800c5fc:	f002 fbdc 	bl	800edb8 <ulSetInterruptMask>
 800c600:	bf00      	nop
 800c602:	e7fd      	b.n	800c600 <xQueueGenericSend+0x40>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	2b02      	cmp	r3, #2
 800c608:	d103      	bne.n	800c612 <xQueueGenericSend+0x52>
 800c60a:	6a3b      	ldr	r3, [r7, #32]
 800c60c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d101      	bne.n	800c616 <xQueueGenericSend+0x56>
 800c612:	2301      	movs	r3, #1
 800c614:	e000      	b.n	800c618 <xQueueGenericSend+0x58>
 800c616:	2300      	movs	r3, #0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d103      	bne.n	800c624 <xQueueGenericSend+0x64>
 800c61c:	f002 fbcc 	bl	800edb8 <ulSetInterruptMask>
 800c620:	bf00      	nop
 800c622:	e7fd      	b.n	800c620 <xQueueGenericSend+0x60>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c624:	f001 fc9c 	bl	800df60 <xTaskGetSchedulerState>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d102      	bne.n	800c634 <xQueueGenericSend+0x74>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d101      	bne.n	800c638 <xQueueGenericSend+0x78>
 800c634:	2301      	movs	r3, #1
 800c636:	e000      	b.n	800c63a <xQueueGenericSend+0x7a>
 800c638:	2300      	movs	r3, #0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d103      	bne.n	800c646 <xQueueGenericSend+0x86>
 800c63e:	f002 fbbb 	bl	800edb8 <ulSetInterruptMask>
 800c642:	bf00      	nop
 800c644:	e7fd      	b.n	800c642 <xQueueGenericSend+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800c646:	f002 f9ef 	bl	800ea28 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c64a:	6a3b      	ldr	r3, [r7, #32]
 800c64c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c64e:	6a3b      	ldr	r3, [r7, #32]
 800c650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c652:	429a      	cmp	r2, r3
 800c654:	d302      	bcc.n	800c65c <xQueueGenericSend+0x9c>
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	2b02      	cmp	r3, #2
 800c65a:	d11d      	bne.n	800c698 <xQueueGenericSend+0xd8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c65c:	683a      	ldr	r2, [r7, #0]
 800c65e:	68b9      	ldr	r1, [r7, #8]
 800c660:	6a38      	ldr	r0, [r7, #32]
 800c662:	f000 fbb4 	bl	800cdce <prvCopyDataToQueue>
 800c666:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c668:	6a3b      	ldr	r3, [r7, #32]
 800c66a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d00a      	beq.n	800c686 <xQueueGenericSend+0xc6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c670:	6a3b      	ldr	r3, [r7, #32]
 800c672:	3324      	adds	r3, #36	@ 0x24
 800c674:	4618      	mov	r0, r3
 800c676:	f001 fa69 	bl	800db4c <xTaskRemoveFromEventList>
 800c67a:	4603      	mov	r3, r0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d007      	beq.n	800c690 <xQueueGenericSend+0xd0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800c680:	f002 f9c0 	bl	800ea04 <vPortYield>
 800c684:	e004      	b.n	800c690 <xQueueGenericSend+0xd0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800c686:	69fb      	ldr	r3, [r7, #28]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d001      	beq.n	800c690 <xQueueGenericSend+0xd0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800c68c:	f002 f9ba 	bl	800ea04 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800c690:	f002 f9dc 	bl	800ea4c <vPortExitCritical>
                return pdPASS;
 800c694:	2301      	movs	r3, #1
 800c696:	e05c      	b.n	800c752 <xQueueGenericSend+0x192>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d103      	bne.n	800c6a6 <xQueueGenericSend+0xe6>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c69e:	f002 f9d5 	bl	800ea4c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	e055      	b.n	800c752 <xQueueGenericSend+0x192>
                }
                else if( xEntryTimeSet == pdFALSE )
 800c6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d106      	bne.n	800c6ba <xQueueGenericSend+0xfa>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800c6ac:	f107 0314 	add.w	r3, r7, #20
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f001 fb19 	bl	800dce8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c6ba:	f002 f9c7 	bl	800ea4c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800c6be:	f000 ff6d 	bl	800d59c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800c6c2:	f002 f9b1 	bl	800ea28 <vPortEnterCritical>
 800c6c6:	6a3b      	ldr	r3, [r7, #32]
 800c6c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c6cc:	b25b      	sxtb	r3, r3
 800c6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6d2:	d103      	bne.n	800c6dc <xQueueGenericSend+0x11c>
 800c6d4:	6a3b      	ldr	r3, [r7, #32]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c6dc:	6a3b      	ldr	r3, [r7, #32]
 800c6de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c6e2:	b25b      	sxtb	r3, r3
 800c6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6e8:	d103      	bne.n	800c6f2 <xQueueGenericSend+0x132>
 800c6ea:	6a3b      	ldr	r3, [r7, #32]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c6f2:	f002 f9ab 	bl	800ea4c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6f6:	1d3a      	adds	r2, r7, #4
 800c6f8:	f107 0314 	add.w	r3, r7, #20
 800c6fc:	4611      	mov	r1, r2
 800c6fe:	4618      	mov	r0, r3
 800c700:	f001 fb08 	bl	800dd14 <xTaskCheckForTimeOut>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d11d      	bne.n	800c746 <xQueueGenericSend+0x186>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c70a:	6a38      	ldr	r0, [r7, #32]
 800c70c:	f000 fc57 	bl	800cfbe <prvIsQueueFull>
 800c710:	4603      	mov	r3, r0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d011      	beq.n	800c73a <xQueueGenericSend+0x17a>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c716:	6a3b      	ldr	r3, [r7, #32]
 800c718:	3310      	adds	r3, #16
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	4611      	mov	r1, r2
 800c71e:	4618      	mov	r0, r3
 800c720:	f001 f9b8 	bl	800da94 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800c724:	6a38      	ldr	r0, [r7, #32]
 800c726:	f000 fbe2 	bl	800ceee <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800c72a:	f000 ff45 	bl	800d5b8 <xTaskResumeAll>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b00      	cmp	r3, #0
 800c732:	d188      	bne.n	800c646 <xQueueGenericSend+0x86>
                {
                    portYIELD_WITHIN_API();
 800c734:	f002 f966 	bl	800ea04 <vPortYield>
 800c738:	e785      	b.n	800c646 <xQueueGenericSend+0x86>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800c73a:	6a38      	ldr	r0, [r7, #32]
 800c73c:	f000 fbd7 	bl	800ceee <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800c740:	f000 ff3a 	bl	800d5b8 <xTaskResumeAll>
 800c744:	e77f      	b.n	800c646 <xQueueGenericSend+0x86>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800c746:	6a38      	ldr	r0, [r7, #32]
 800c748:	f000 fbd1 	bl	800ceee <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800c74c:	f000 ff34 	bl	800d5b8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800c750:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800c752:	4618      	mov	r0, r3
 800c754:	3728      	adds	r7, #40	@ 0x28
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b08a      	sub	sp, #40	@ 0x28
 800c75e:	af00      	add	r7, sp, #0
 800c760:	60f8      	str	r0, [r7, #12]
 800c762:	60b9      	str	r1, [r7, #8]
 800c764:	607a      	str	r2, [r7, #4]
 800c766:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800c76c:	6a3b      	ldr	r3, [r7, #32]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d103      	bne.n	800c77a <xQueueGenericSendFromISR+0x20>
 800c772:	f002 fb21 	bl	800edb8 <ulSetInterruptMask>
 800c776:	bf00      	nop
 800c778:	e7fd      	b.n	800c776 <xQueueGenericSendFromISR+0x1c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d103      	bne.n	800c788 <xQueueGenericSendFromISR+0x2e>
 800c780:	6a3b      	ldr	r3, [r7, #32]
 800c782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c784:	2b00      	cmp	r3, #0
 800c786:	d101      	bne.n	800c78c <xQueueGenericSendFromISR+0x32>
 800c788:	2301      	movs	r3, #1
 800c78a:	e000      	b.n	800c78e <xQueueGenericSendFromISR+0x34>
 800c78c:	2300      	movs	r3, #0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d103      	bne.n	800c79a <xQueueGenericSendFromISR+0x40>
 800c792:	f002 fb11 	bl	800edb8 <ulSetInterruptMask>
 800c796:	bf00      	nop
 800c798:	e7fd      	b.n	800c796 <xQueueGenericSendFromISR+0x3c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	2b02      	cmp	r3, #2
 800c79e:	d103      	bne.n	800c7a8 <xQueueGenericSendFromISR+0x4e>
 800c7a0:	6a3b      	ldr	r3, [r7, #32]
 800c7a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d101      	bne.n	800c7ac <xQueueGenericSendFromISR+0x52>
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e000      	b.n	800c7ae <xQueueGenericSendFromISR+0x54>
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d103      	bne.n	800c7ba <xQueueGenericSendFromISR+0x60>
 800c7b2:	f002 fb01 	bl	800edb8 <ulSetInterruptMask>
 800c7b6:	bf00      	nop
 800c7b8:	e7fd      	b.n	800c7b6 <xQueueGenericSendFromISR+0x5c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7ba:	f002 fa99 	bl	800ecf0 <vPortValidateInterruptPriority>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7be:	f002 fafb 	bl	800edb8 <ulSetInterruptMask>
 800c7c2:	61f8      	str	r0, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c7c4:	6a3b      	ldr	r3, [r7, #32]
 800c7c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7c8:	6a3b      	ldr	r3, [r7, #32]
 800c7ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d302      	bcc.n	800c7d6 <xQueueGenericSendFromISR+0x7c>
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	2b02      	cmp	r3, #2
 800c7d4:	d13d      	bne.n	800c852 <xQueueGenericSendFromISR+0xf8>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800c7d6:	6a3b      	ldr	r3, [r7, #32]
 800c7d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c7dc:	76fb      	strb	r3, [r7, #27]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7de:	6a3b      	ldr	r3, [r7, #32]
 800c7e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7e2:	617b      	str	r3, [r7, #20]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c7e4:	683a      	ldr	r2, [r7, #0]
 800c7e6:	68b9      	ldr	r1, [r7, #8]
 800c7e8:	6a38      	ldr	r0, [r7, #32]
 800c7ea:	f000 faf0 	bl	800cdce <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800c7ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f6:	d112      	bne.n	800c81e <xQueueGenericSendFromISR+0xc4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7f8:	6a3b      	ldr	r3, [r7, #32]
 800c7fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d025      	beq.n	800c84c <xQueueGenericSendFromISR+0xf2>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c800:	6a3b      	ldr	r3, [r7, #32]
 800c802:	3324      	adds	r3, #36	@ 0x24
 800c804:	4618      	mov	r0, r3
 800c806:	f001 f9a1 	bl	800db4c <xTaskRemoveFromEventList>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d01d      	beq.n	800c84c <xQueueGenericSendFromISR+0xf2>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d01a      	beq.n	800c84c <xQueueGenericSendFromISR+0xf2>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2201      	movs	r2, #1
 800c81a:	601a      	str	r2, [r3, #0]
 800c81c:	e016      	b.n	800c84c <xQueueGenericSendFromISR+0xf2>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800c81e:	f000 ffc9 	bl	800d7b4 <uxTaskGetNumberOfTasks>
 800c822:	6138      	str	r0, [r7, #16]
 800c824:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c828:	693a      	ldr	r2, [r7, #16]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d90e      	bls.n	800c84c <xQueueGenericSendFromISR+0xf2>
 800c82e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c832:	2b7f      	cmp	r3, #127	@ 0x7f
 800c834:	d103      	bne.n	800c83e <xQueueGenericSendFromISR+0xe4>
 800c836:	f002 fabf 	bl	800edb8 <ulSetInterruptMask>
 800c83a:	bf00      	nop
 800c83c:	e7fd      	b.n	800c83a <xQueueGenericSendFromISR+0xe0>
 800c83e:	7efb      	ldrb	r3, [r7, #27]
 800c840:	3301      	adds	r3, #1
 800c842:	b2db      	uxtb	r3, r3
 800c844:	b25a      	sxtb	r2, r3
 800c846:	6a3b      	ldr	r3, [r7, #32]
 800c848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800c84c:	2301      	movs	r3, #1
 800c84e:	627b      	str	r3, [r7, #36]	@ 0x24
        {
 800c850:	e001      	b.n	800c856 <xQueueGenericSendFromISR+0xfc>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800c852:	2300      	movs	r3, #0
 800c854:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c856:	69f8      	ldr	r0, [r7, #28]
 800c858:	f002 fabb 	bl	800edd2 <vClearInterruptMask>

    return xReturn;
 800c85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3728      	adds	r7, #40	@ 0x28
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}

0800c866 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b088      	sub	sp, #32
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
 800c86e:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	61bb      	str	r3, [r7, #24]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800c874:	69bb      	ldr	r3, [r7, #24]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d103      	bne.n	800c882 <xQueueGiveFromISR+0x1c>
 800c87a:	f002 fa9d 	bl	800edb8 <ulSetInterruptMask>
 800c87e:	bf00      	nop
 800c880:	e7fd      	b.n	800c87e <xQueueGiveFromISR+0x18>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800c882:	69bb      	ldr	r3, [r7, #24]
 800c884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c886:	2b00      	cmp	r3, #0
 800c888:	d003      	beq.n	800c892 <xQueueGiveFromISR+0x2c>
 800c88a:	f002 fa95 	bl	800edb8 <ulSetInterruptMask>
 800c88e:	bf00      	nop
 800c890:	e7fd      	b.n	800c88e <xQueueGiveFromISR+0x28>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d103      	bne.n	800c8a2 <xQueueGiveFromISR+0x3c>
 800c89a:	69bb      	ldr	r3, [r7, #24]
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d101      	bne.n	800c8a6 <xQueueGiveFromISR+0x40>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e000      	b.n	800c8a8 <xQueueGiveFromISR+0x42>
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d103      	bne.n	800c8b4 <xQueueGiveFromISR+0x4e>
 800c8ac:	f002 fa84 	bl	800edb8 <ulSetInterruptMask>
 800c8b0:	bf00      	nop
 800c8b2:	e7fd      	b.n	800c8b0 <xQueueGiveFromISR+0x4a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c8b4:	f002 fa1c 	bl	800ecf0 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c8b8:	f002 fa7e 	bl	800edb8 <ulSetInterruptMask>
 800c8bc:	6178      	str	r0, [r7, #20]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8c2:	613b      	str	r3, [r7, #16]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800c8c4:	69bb      	ldr	r3, [r7, #24]
 800c8c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8c8:	693a      	ldr	r2, [r7, #16]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d239      	bcs.n	800c942 <xQueueGiveFromISR+0xdc>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c8d4:	73fb      	strb	r3, [r7, #15]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	1c5a      	adds	r2, r3, #1
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800c8de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e6:	d112      	bne.n	800c90e <xQueueGiveFromISR+0xa8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d025      	beq.n	800c93c <xQueueGiveFromISR+0xd6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8f0:	69bb      	ldr	r3, [r7, #24]
 800c8f2:	3324      	adds	r3, #36	@ 0x24
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f001 f929 	bl	800db4c <xTaskRemoveFromEventList>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d01d      	beq.n	800c93c <xQueueGiveFromISR+0xd6>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d01a      	beq.n	800c93c <xQueueGiveFromISR+0xd6>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	2201      	movs	r2, #1
 800c90a:	601a      	str	r2, [r3, #0]
 800c90c:	e016      	b.n	800c93c <xQueueGiveFromISR+0xd6>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800c90e:	f000 ff51 	bl	800d7b4 <uxTaskGetNumberOfTasks>
 800c912:	60b8      	str	r0, [r7, #8]
 800c914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c918:	68ba      	ldr	r2, [r7, #8]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d90e      	bls.n	800c93c <xQueueGiveFromISR+0xd6>
 800c91e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c922:	2b7f      	cmp	r3, #127	@ 0x7f
 800c924:	d103      	bne.n	800c92e <xQueueGiveFromISR+0xc8>
 800c926:	f002 fa47 	bl	800edb8 <ulSetInterruptMask>
 800c92a:	bf00      	nop
 800c92c:	e7fd      	b.n	800c92a <xQueueGiveFromISR+0xc4>
 800c92e:	7bfb      	ldrb	r3, [r7, #15]
 800c930:	3301      	adds	r3, #1
 800c932:	b2db      	uxtb	r3, r3
 800c934:	b25a      	sxtb	r2, r3
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800c93c:	2301      	movs	r3, #1
 800c93e:	61fb      	str	r3, [r7, #28]
 800c940:	e001      	b.n	800c946 <xQueueGiveFromISR+0xe0>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800c942:	2300      	movs	r3, #0
 800c944:	61fb      	str	r3, [r7, #28]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c946:	6978      	ldr	r0, [r7, #20]
 800c948:	f002 fa43 	bl	800edd2 <vClearInterruptMask>

    return xReturn;
 800c94c:	69fb      	ldr	r3, [r7, #28]
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3720      	adds	r7, #32
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}

0800c956 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800c956:	b580      	push	{r7, lr}
 800c958:	b08a      	sub	sp, #40	@ 0x28
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	60f8      	str	r0, [r7, #12]
 800c95e:	60b9      	str	r1, [r7, #8]
 800c960:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800c962:	2300      	movs	r3, #0
 800c964:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800c96a:	6a3b      	ldr	r3, [r7, #32]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d103      	bne.n	800c978 <xQueueReceive+0x22>
 800c970:	f002 fa22 	bl	800edb8 <ulSetInterruptMask>
 800c974:	bf00      	nop
 800c976:	e7fd      	b.n	800c974 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d103      	bne.n	800c986 <xQueueReceive+0x30>
 800c97e:	6a3b      	ldr	r3, [r7, #32]
 800c980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c982:	2b00      	cmp	r3, #0
 800c984:	d101      	bne.n	800c98a <xQueueReceive+0x34>
 800c986:	2301      	movs	r3, #1
 800c988:	e000      	b.n	800c98c <xQueueReceive+0x36>
 800c98a:	2300      	movs	r3, #0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d103      	bne.n	800c998 <xQueueReceive+0x42>
 800c990:	f002 fa12 	bl	800edb8 <ulSetInterruptMask>
 800c994:	bf00      	nop
 800c996:	e7fd      	b.n	800c994 <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c998:	f001 fae2 	bl	800df60 <xTaskGetSchedulerState>
 800c99c:	4603      	mov	r3, r0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d102      	bne.n	800c9a8 <xQueueReceive+0x52>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d101      	bne.n	800c9ac <xQueueReceive+0x56>
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e000      	b.n	800c9ae <xQueueReceive+0x58>
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d103      	bne.n	800c9ba <xQueueReceive+0x64>
 800c9b2:	f002 fa01 	bl	800edb8 <ulSetInterruptMask>
 800c9b6:	bf00      	nop
 800c9b8:	e7fd      	b.n	800c9b6 <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800c9ba:	f002 f835 	bl	800ea28 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9be:	6a3b      	ldr	r3, [r7, #32]
 800c9c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9c2:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d019      	beq.n	800c9fe <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c9ca:	68b9      	ldr	r1, [r7, #8]
 800c9cc:	6a38      	ldr	r0, [r7, #32]
 800c9ce:	f000 fa68 	bl	800cea2 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	1e5a      	subs	r2, r3, #1
 800c9d6:	6a3b      	ldr	r3, [r7, #32]
 800c9d8:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9da:	6a3b      	ldr	r3, [r7, #32]
 800c9dc:	691b      	ldr	r3, [r3, #16]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d009      	beq.n	800c9f6 <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9e2:	6a3b      	ldr	r3, [r7, #32]
 800c9e4:	3310      	adds	r3, #16
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f001 f8b0 	bl	800db4c <xTaskRemoveFromEventList>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d001      	beq.n	800c9f6 <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800c9f2:	f002 f807 	bl	800ea04 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800c9f6:	f002 f829 	bl	800ea4c <vPortExitCritical>
                return pdPASS;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e063      	b.n	800cac6 <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d103      	bne.n	800ca0c <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800ca04:	f002 f822 	bl	800ea4c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	e05c      	b.n	800cac6 <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 800ca0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d106      	bne.n	800ca20 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800ca12:	f107 0314 	add.w	r3, r7, #20
 800ca16:	4618      	mov	r0, r3
 800ca18:	f001 f966 	bl	800dce8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800ca20:	f002 f814 	bl	800ea4c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800ca24:	f000 fdba 	bl	800d59c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800ca28:	f001 fffe 	bl	800ea28 <vPortEnterCritical>
 800ca2c:	6a3b      	ldr	r3, [r7, #32]
 800ca2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca32:	b25b      	sxtb	r3, r3
 800ca34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca38:	d103      	bne.n	800ca42 <xQueueReceive+0xec>
 800ca3a:	6a3b      	ldr	r3, [r7, #32]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ca42:	6a3b      	ldr	r3, [r7, #32]
 800ca44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca48:	b25b      	sxtb	r3, r3
 800ca4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca4e:	d103      	bne.n	800ca58 <xQueueReceive+0x102>
 800ca50:	6a3b      	ldr	r3, [r7, #32]
 800ca52:	2200      	movs	r2, #0
 800ca54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ca58:	f001 fff8 	bl	800ea4c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca5c:	1d3a      	adds	r2, r7, #4
 800ca5e:	f107 0314 	add.w	r3, r7, #20
 800ca62:	4611      	mov	r1, r2
 800ca64:	4618      	mov	r0, r3
 800ca66:	f001 f955 	bl	800dd14 <xTaskCheckForTimeOut>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d11d      	bne.n	800caac <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca70:	6a38      	ldr	r0, [r7, #32]
 800ca72:	f000 fa8e 	bl	800cf92 <prvIsQueueEmpty>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d011      	beq.n	800caa0 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ca7c:	6a3b      	ldr	r3, [r7, #32]
 800ca7e:	3324      	adds	r3, #36	@ 0x24
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	4611      	mov	r1, r2
 800ca84:	4618      	mov	r0, r3
 800ca86:	f001 f805 	bl	800da94 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800ca8a:	6a38      	ldr	r0, [r7, #32]
 800ca8c:	f000 fa2f 	bl	800ceee <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800ca90:	f000 fd92 	bl	800d5b8 <xTaskResumeAll>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d18f      	bne.n	800c9ba <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 800ca9a:	f001 ffb3 	bl	800ea04 <vPortYield>
 800ca9e:	e78c      	b.n	800c9ba <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800caa0:	6a38      	ldr	r0, [r7, #32]
 800caa2:	f000 fa24 	bl	800ceee <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800caa6:	f000 fd87 	bl	800d5b8 <xTaskResumeAll>
 800caaa:	e786      	b.n	800c9ba <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800caac:	6a38      	ldr	r0, [r7, #32]
 800caae:	f000 fa1e 	bl	800ceee <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800cab2:	f000 fd81 	bl	800d5b8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cab6:	6a38      	ldr	r0, [r7, #32]
 800cab8:	f000 fa6b 	bl	800cf92 <prvIsQueueEmpty>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	f43f af7b 	beq.w	800c9ba <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800cac4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3728      	adds	r7, #40	@ 0x28
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b08a      	sub	sp, #40	@ 0x28
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
 800cad6:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800cad8:	2300      	movs	r3, #0
 800cada:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800cae0:	2300      	movs	r3, #0
 800cae2:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d103      	bne.n	800caf2 <xQueueSemaphoreTake+0x24>
 800caea:	f002 f965 	bl	800edb8 <ulSetInterruptMask>
 800caee:	bf00      	nop
 800caf0:	e7fd      	b.n	800caee <xQueueSemaphoreTake+0x20>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d003      	beq.n	800cb02 <xQueueSemaphoreTake+0x34>
 800cafa:	f002 f95d 	bl	800edb8 <ulSetInterruptMask>
 800cafe:	bf00      	nop
 800cb00:	e7fd      	b.n	800cafe <xQueueSemaphoreTake+0x30>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb02:	f001 fa2d 	bl	800df60 <xTaskGetSchedulerState>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d102      	bne.n	800cb12 <xQueueSemaphoreTake+0x44>
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d101      	bne.n	800cb16 <xQueueSemaphoreTake+0x48>
 800cb12:	2301      	movs	r3, #1
 800cb14:	e000      	b.n	800cb18 <xQueueSemaphoreTake+0x4a>
 800cb16:	2300      	movs	r3, #0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d103      	bne.n	800cb24 <xQueueSemaphoreTake+0x56>
 800cb1c:	f002 f94c 	bl	800edb8 <ulSetInterruptMask>
 800cb20:	bf00      	nop
 800cb22:	e7fd      	b.n	800cb20 <xQueueSemaphoreTake+0x52>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800cb24:	f001 ff80 	bl	800ea28 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb2c:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cb2e:	69bb      	ldr	r3, [r7, #24]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d01e      	beq.n	800cb72 <xQueueSemaphoreTake+0xa4>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cb34:	69bb      	ldr	r3, [r7, #24]
 800cb36:	1e5a      	subs	r2, r3, #1
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d104      	bne.n	800cb4e <xQueueSemaphoreTake+0x80>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cb44:	f001 fbde 	bl	800e304 <pvTaskIncrementMutexHeldCount>
 800cb48:	4602      	mov	r2, r0
 800cb4a:	69fb      	ldr	r3, [r7, #28]
 800cb4c:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb4e:	69fb      	ldr	r3, [r7, #28]
 800cb50:	691b      	ldr	r3, [r3, #16]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d009      	beq.n	800cb6a <xQueueSemaphoreTake+0x9c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	3310      	adds	r3, #16
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f000 fff6 	bl	800db4c <xTaskRemoveFromEventList>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d001      	beq.n	800cb6a <xQueueSemaphoreTake+0x9c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800cb66:	f001 ff4d 	bl	800ea04 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800cb6a:	f001 ff6f 	bl	800ea4c <vPortExitCritical>
                return pdPASS;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	e083      	b.n	800cc7a <xQueueSemaphoreTake+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d103      	bne.n	800cb80 <xQueueSemaphoreTake+0xb2>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800cb78:	f001 ff68 	bl	800ea4c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	e07c      	b.n	800cc7a <xQueueSemaphoreTake+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 800cb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d106      	bne.n	800cb94 <xQueueSemaphoreTake+0xc6>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800cb86:	f107 030c 	add.w	r3, r7, #12
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f001 f8ac 	bl	800dce8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800cb90:	2301      	movs	r3, #1
 800cb92:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800cb94:	f001 ff5a 	bl	800ea4c <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800cb98:	f000 fd00 	bl	800d59c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800cb9c:	f001 ff44 	bl	800ea28 <vPortEnterCritical>
 800cba0:	69fb      	ldr	r3, [r7, #28]
 800cba2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cba6:	b25b      	sxtb	r3, r3
 800cba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbac:	d103      	bne.n	800cbb6 <xQueueSemaphoreTake+0xe8>
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cbb6:	69fb      	ldr	r3, [r7, #28]
 800cbb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cbbc:	b25b      	sxtb	r3, r3
 800cbbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbc2:	d103      	bne.n	800cbcc <xQueueSemaphoreTake+0xfe>
 800cbc4:	69fb      	ldr	r3, [r7, #28]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cbcc:	f001 ff3e 	bl	800ea4c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cbd0:	463a      	mov	r2, r7
 800cbd2:	f107 030c 	add.w	r3, r7, #12
 800cbd6:	4611      	mov	r1, r2
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f001 f89b 	bl	800dd14 <xTaskCheckForTimeOut>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d12c      	bne.n	800cc3e <xQueueSemaphoreTake+0x170>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbe4:	69f8      	ldr	r0, [r7, #28]
 800cbe6:	f000 f9d4 	bl	800cf92 <prvIsQueueEmpty>
 800cbea:	4603      	mov	r3, r0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d020      	beq.n	800cc32 <xQueueSemaphoreTake+0x164>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cbf0:	69fb      	ldr	r3, [r7, #28]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d109      	bne.n	800cc0c <xQueueSemaphoreTake+0x13e>
                    {
                        taskENTER_CRITICAL();
 800cbf8:	f001 ff16 	bl	800ea28 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	689b      	ldr	r3, [r3, #8]
 800cc00:	4618      	mov	r0, r3
 800cc02:	f001 f9cb 	bl	800df9c <xTaskPriorityInherit>
 800cc06:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 800cc08:	f001 ff20 	bl	800ea4c <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	3324      	adds	r3, #36	@ 0x24
 800cc10:	683a      	ldr	r2, [r7, #0]
 800cc12:	4611      	mov	r1, r2
 800cc14:	4618      	mov	r0, r3
 800cc16:	f000 ff3d 	bl	800da94 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800cc1a:	69f8      	ldr	r0, [r7, #28]
 800cc1c:	f000 f967 	bl	800ceee <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800cc20:	f000 fcca 	bl	800d5b8 <xTaskResumeAll>
 800cc24:	4603      	mov	r3, r0
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f47f af7c 	bne.w	800cb24 <xQueueSemaphoreTake+0x56>
                {
                    portYIELD_WITHIN_API();
 800cc2c:	f001 feea 	bl	800ea04 <vPortYield>
 800cc30:	e778      	b.n	800cb24 <xQueueSemaphoreTake+0x56>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800cc32:	69f8      	ldr	r0, [r7, #28]
 800cc34:	f000 f95b 	bl	800ceee <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800cc38:	f000 fcbe 	bl	800d5b8 <xTaskResumeAll>
 800cc3c:	e772      	b.n	800cb24 <xQueueSemaphoreTake+0x56>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800cc3e:	69f8      	ldr	r0, [r7, #28]
 800cc40:	f000 f955 	bl	800ceee <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800cc44:	f000 fcb8 	bl	800d5b8 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc48:	69f8      	ldr	r0, [r7, #28]
 800cc4a:	f000 f9a2 	bl	800cf92 <prvIsQueueEmpty>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	f43f af67 	beq.w	800cb24 <xQueueSemaphoreTake+0x56>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800cc56:	6a3b      	ldr	r3, [r7, #32]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d00d      	beq.n	800cc78 <xQueueSemaphoreTake+0x1aa>
                    {
                        taskENTER_CRITICAL();
 800cc5c:	f001 fee4 	bl	800ea28 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cc60:	69f8      	ldr	r0, [r7, #28]
 800cc62:	f000 f89c 	bl	800cd9e <prvGetDisinheritPriorityAfterTimeout>
 800cc66:	6178      	str	r0, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	6979      	ldr	r1, [r7, #20]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f001 faac 	bl	800e1cc <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800cc74:	f001 feea 	bl	800ea4c <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800cc78:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3728      	adds	r7, #40	@ 0x28
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b08a      	sub	sp, #40	@ 0x28
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	60f8      	str	r0, [r7, #12]
 800cc8a:	60b9      	str	r1, [r7, #8]
 800cc8c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800cc92:	6a3b      	ldr	r3, [r7, #32]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d103      	bne.n	800cca0 <xQueueReceiveFromISR+0x1e>
 800cc98:	f002 f88e 	bl	800edb8 <ulSetInterruptMask>
 800cc9c:	bf00      	nop
 800cc9e:	e7fd      	b.n	800cc9c <xQueueReceiveFromISR+0x1a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d103      	bne.n	800ccae <xQueueReceiveFromISR+0x2c>
 800cca6:	6a3b      	ldr	r3, [r7, #32]
 800cca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d101      	bne.n	800ccb2 <xQueueReceiveFromISR+0x30>
 800ccae:	2301      	movs	r3, #1
 800ccb0:	e000      	b.n	800ccb4 <xQueueReceiveFromISR+0x32>
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d103      	bne.n	800ccc0 <xQueueReceiveFromISR+0x3e>
 800ccb8:	f002 f87e 	bl	800edb8 <ulSetInterruptMask>
 800ccbc:	bf00      	nop
 800ccbe:	e7fd      	b.n	800ccbc <xQueueReceiveFromISR+0x3a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ccc0:	f002 f816 	bl	800ecf0 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ccc4:	f002 f878 	bl	800edb8 <ulSetInterruptMask>
 800ccc8:	61f8      	str	r0, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccca:	6a3b      	ldr	r3, [r7, #32]
 800cccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccce:	61bb      	str	r3, [r7, #24]

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ccd0:	69bb      	ldr	r3, [r7, #24]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d03d      	beq.n	800cd52 <xQueueReceiveFromISR+0xd0>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800ccd6:	6a3b      	ldr	r3, [r7, #32]
 800ccd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ccdc:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ccde:	68b9      	ldr	r1, [r7, #8]
 800cce0:	6a38      	ldr	r0, [r7, #32]
 800cce2:	f000 f8de 	bl	800cea2 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cce6:	69bb      	ldr	r3, [r7, #24]
 800cce8:	1e5a      	subs	r2, r3, #1
 800ccea:	6a3b      	ldr	r3, [r7, #32]
 800ccec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800ccee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ccf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccf6:	d112      	bne.n	800cd1e <xQueueReceiveFromISR+0x9c>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccf8:	6a3b      	ldr	r3, [r7, #32]
 800ccfa:	691b      	ldr	r3, [r3, #16]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d025      	beq.n	800cd4c <xQueueReceiveFromISR+0xca>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd00:	6a3b      	ldr	r3, [r7, #32]
 800cd02:	3310      	adds	r3, #16
 800cd04:	4618      	mov	r0, r3
 800cd06:	f000 ff21 	bl	800db4c <xTaskRemoveFromEventList>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d01d      	beq.n	800cd4c <xQueueReceiveFromISR+0xca>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d01a      	beq.n	800cd4c <xQueueReceiveFromISR+0xca>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2201      	movs	r2, #1
 800cd1a:	601a      	str	r2, [r3, #0]
 800cd1c:	e016      	b.n	800cd4c <xQueueReceiveFromISR+0xca>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 800cd1e:	f000 fd49 	bl	800d7b4 <uxTaskGetNumberOfTasks>
 800cd22:	6138      	str	r0, [r7, #16]
 800cd24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd28:	693a      	ldr	r2, [r7, #16]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d90e      	bls.n	800cd4c <xQueueReceiveFromISR+0xca>
 800cd2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd32:	2b7f      	cmp	r3, #127	@ 0x7f
 800cd34:	d103      	bne.n	800cd3e <xQueueReceiveFromISR+0xbc>
 800cd36:	f002 f83f 	bl	800edb8 <ulSetInterruptMask>
 800cd3a:	bf00      	nop
 800cd3c:	e7fd      	b.n	800cd3a <xQueueReceiveFromISR+0xb8>
 800cd3e:	7dfb      	ldrb	r3, [r7, #23]
 800cd40:	3301      	adds	r3, #1
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	b25a      	sxtb	r2, r3
 800cd46:	6a3b      	ldr	r3, [r7, #32]
 800cd48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd50:	e001      	b.n	800cd56 <xQueueReceiveFromISR+0xd4>
        }
        else
        {
            xReturn = pdFAIL;
 800cd52:	2300      	movs	r3, #0
 800cd54:	627b      	str	r3, [r7, #36]	@ 0x24
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800cd56:	69f8      	ldr	r0, [r7, #28]
 800cd58:	f002 f83b 	bl	800edd2 <vClearInterruptMask>

    return xReturn;
 800cd5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3728      	adds	r7, #40	@ 0x28
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}

0800cd66 <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b084      	sub	sp, #16
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d103      	bne.n	800cd80 <vQueueDelete+0x1a>
 800cd78:	f002 f81e 	bl	800edb8 <ulSetInterruptMask>
 800cd7c:	bf00      	nop
 800cd7e:	e7fd      	b.n	800cd7c <vQueueDelete+0x16>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 800cd80:	68f8      	ldr	r0, [r7, #12]
 800cd82:	f000 f97b 	bl	800d07c <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d102      	bne.n	800cd96 <vQueueDelete+0x30>
        {
            vPortFree( pxQueue );
 800cd90:	68f8      	ldr	r0, [r7, #12]
 800cd92:	f002 f935 	bl	800f000 <vPortFree>
        /* The queue must have been statically allocated, so is not going to be
         * deleted.  Avoid compiler warnings about the unused parameter. */
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cd96:	bf00      	nop
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800cd9e:	b480      	push	{r7}
 800cda0:	b085      	sub	sp, #20
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d006      	beq.n	800cdbc <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800cdb8:	60fb      	str	r3, [r7, #12]
 800cdba:	e001      	b.n	800cdc0 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
    }
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3714      	adds	r7, #20
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdcc:	4770      	bx	lr

0800cdce <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b086      	sub	sp, #24
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	60f8      	str	r0, [r7, #12]
 800cdd6:	60b9      	str	r1, [r7, #8]
 800cdd8:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800cdda:	2300      	movs	r3, #0
 800cddc:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cde2:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10d      	bne.n	800ce08 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d14d      	bne.n	800ce90 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	689b      	ldr	r3, [r3, #8]
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f001 f95f 	bl	800e0bc <xTaskPriorityDisinherit>
 800cdfe:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2200      	movs	r2, #0
 800ce04:	609a      	str	r2, [r3, #8]
 800ce06:	e043      	b.n	800ce90 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d119      	bne.n	800ce42 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	6858      	ldr	r0, [r3, #4]
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce16:	461a      	mov	r2, r3
 800ce18:	68b9      	ldr	r1, [r7, #8]
 800ce1a:	f01f f9a8 	bl	802c16e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	685a      	ldr	r2, [r3, #4]
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce26:	441a      	add	r2, r3
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	685a      	ldr	r2, [r3, #4]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d32b      	bcc.n	800ce90 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	605a      	str	r2, [r3, #4]
 800ce40:	e026      	b.n	800ce90 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	68d8      	ldr	r0, [r3, #12]
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	68b9      	ldr	r1, [r7, #8]
 800ce4e:	f01f f98e 	bl	802c16e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	68da      	ldr	r2, [r3, #12]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce5a:	425b      	negs	r3, r3
 800ce5c:	441a      	add	r2, r3
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	68da      	ldr	r2, [r3, #12]
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d207      	bcs.n	800ce7e <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	689a      	ldr	r2, [r3, #8]
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce76:	425b      	negs	r3, r3
 800ce78:	441a      	add	r2, r3
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2b02      	cmp	r3, #2
 800ce82:	d105      	bne.n	800ce90 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d002      	beq.n	800ce90 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	3b01      	subs	r3, #1
 800ce8e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	1c5a      	adds	r2, r3, #1
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800ce98:	697b      	ldr	r3, [r7, #20]
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3718      	adds	r7, #24
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800cea2:	b580      	push	{r7, lr}
 800cea4:	b082      	sub	sp, #8
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
 800ceaa:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d018      	beq.n	800cee6 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	68da      	ldr	r2, [r3, #12]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cebc:	441a      	add	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	68da      	ldr	r2, [r3, #12]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d303      	bcc.n	800ced6 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	68d9      	ldr	r1, [r3, #12]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cede:	461a      	mov	r2, r3
 800cee0:	6838      	ldr	r0, [r7, #0]
 800cee2:	f01f f944 	bl	802c16e <memcpy>
    }
}
 800cee6:	bf00      	nop
 800cee8:	3708      	adds	r7, #8
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b084      	sub	sp, #16
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800cef6:	f001 fd97 	bl	800ea28 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf00:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf02:	e011      	b.n	800cf28 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d012      	beq.n	800cf32 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	3324      	adds	r3, #36	@ 0x24
 800cf10:	4618      	mov	r0, r3
 800cf12:	f000 fe1b 	bl	800db4c <xTaskRemoveFromEventList>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d001      	beq.n	800cf20 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800cf1c:	f000 ff52 	bl	800ddc4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800cf20:	7bfb      	ldrb	r3, [r7, #15]
 800cf22:	3b01      	subs	r3, #1
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	dce9      	bgt.n	800cf04 <prvUnlockQueue+0x16>
 800cf30:	e000      	b.n	800cf34 <prvUnlockQueue+0x46>
                    break;
 800cf32:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	22ff      	movs	r2, #255	@ 0xff
 800cf38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800cf3c:	f001 fd86 	bl	800ea4c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800cf40:	f001 fd72 	bl	800ea28 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf4a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf4c:	e011      	b.n	800cf72 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	691b      	ldr	r3, [r3, #16]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d012      	beq.n	800cf7c <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	3310      	adds	r3, #16
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f000 fdf6 	bl	800db4c <xTaskRemoveFromEventList>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d001      	beq.n	800cf6a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800cf66:	f000 ff2d 	bl	800ddc4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800cf6a:	7bbb      	ldrb	r3, [r7, #14]
 800cf6c:	3b01      	subs	r3, #1
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	dce9      	bgt.n	800cf4e <prvUnlockQueue+0x60>
 800cf7a:	e000      	b.n	800cf7e <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800cf7c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	22ff      	movs	r2, #255	@ 0xff
 800cf82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800cf86:	f001 fd61 	bl	800ea4c <vPortExitCritical>
}
 800cf8a:	bf00      	nop
 800cf8c:	3710      	adds	r7, #16
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}

0800cf92 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800cf92:	b580      	push	{r7, lr}
 800cf94:	b084      	sub	sp, #16
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800cf9a:	f001 fd45 	bl	800ea28 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d102      	bne.n	800cfac <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	60fb      	str	r3, [r7, #12]
 800cfaa:	e001      	b.n	800cfb0 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800cfac:	2300      	movs	r3, #0
 800cfae:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800cfb0:	f001 fd4c 	bl	800ea4c <vPortExitCritical>

    return xReturn;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}

0800cfbe <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800cfbe:	b580      	push	{r7, lr}
 800cfc0:	b084      	sub	sp, #16
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800cfc6:	f001 fd2f 	bl	800ea28 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d102      	bne.n	800cfdc <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	60fb      	str	r3, [r7, #12]
 800cfda:	e001      	b.n	800cfe0 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800cfe0:	f001 fd34 	bl	800ea4c <vPortExitCritical>

    return xReturn;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3710      	adds	r7, #16
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
	...

0800cff0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800cffa:	2300      	movs	r3, #0
 800cffc:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d103      	bne.n	800d00c <vQueueAddToRegistry+0x1c>
 800d004:	f001 fed8 	bl	800edb8 <ulSetInterruptMask>
 800d008:	bf00      	nop
 800d00a:	e7fd      	b.n	800d008 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d024      	beq.n	800d05c <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d012:	2300      	movs	r3, #0
 800d014:	60fb      	str	r3, [r7, #12]
 800d016:	e01e      	b.n	800d056 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800d018:	4a17      	ldr	r2, [pc, #92]	@ (800d078 <vQueueAddToRegistry+0x88>)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	00db      	lsls	r3, r3, #3
 800d01e:	4413      	add	r3, r2
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	429a      	cmp	r2, r3
 800d026:	d105      	bne.n	800d034 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	00db      	lsls	r3, r3, #3
 800d02c:	4a12      	ldr	r2, [pc, #72]	@ (800d078 <vQueueAddToRegistry+0x88>)
 800d02e:	4413      	add	r3, r2
 800d030:	60bb      	str	r3, [r7, #8]
                    break;
 800d032:	e013      	b.n	800d05c <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d10a      	bne.n	800d050 <vQueueAddToRegistry+0x60>
 800d03a:	4a0f      	ldr	r2, [pc, #60]	@ (800d078 <vQueueAddToRegistry+0x88>)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d104      	bne.n	800d050 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	00db      	lsls	r3, r3, #3
 800d04a:	4a0b      	ldr	r2, [pc, #44]	@ (800d078 <vQueueAddToRegistry+0x88>)
 800d04c:	4413      	add	r3, r2
 800d04e:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	3301      	adds	r3, #1
 800d054:	60fb      	str	r3, [r7, #12]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2b07      	cmp	r3, #7
 800d05a:	d9dd      	bls.n	800d018 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d005      	beq.n	800d06e <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	683a      	ldr	r2, [r7, #0]
 800d066:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800d06e:	bf00      	nop
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	20046748 	.word	0x20046748

0800d07c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d103      	bne.n	800d092 <vQueueUnregisterQueue+0x16>
 800d08a:	f001 fe95 	bl	800edb8 <ulSetInterruptMask>
 800d08e:	bf00      	nop
 800d090:	e7fd      	b.n	800d08e <vQueueUnregisterQueue+0x12>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d092:	2300      	movs	r3, #0
 800d094:	60fb      	str	r3, [r7, #12]
 800d096:	e016      	b.n	800d0c6 <vQueueUnregisterQueue+0x4a>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d098:	4a0f      	ldr	r2, [pc, #60]	@ (800d0d8 <vQueueUnregisterQueue+0x5c>)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	00db      	lsls	r3, r3, #3
 800d09e:	4413      	add	r3, r2
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	687a      	ldr	r2, [r7, #4]
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d10b      	bne.n	800d0c0 <vQueueUnregisterQueue+0x44>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 800d0a8:	4a0b      	ldr	r2, [pc, #44]	@ (800d0d8 <vQueueUnregisterQueue+0x5c>)
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2100      	movs	r1, #0
 800d0ae:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d0b2:	4a09      	ldr	r2, [pc, #36]	@ (800d0d8 <vQueueUnregisterQueue+0x5c>)
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	00db      	lsls	r3, r3, #3
 800d0b8:	4413      	add	r3, r2
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	605a      	str	r2, [r3, #4]
                break;
 800d0be:	e006      	b.n	800d0ce <vQueueUnregisterQueue+0x52>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	60fb      	str	r3, [r7, #12]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2b07      	cmp	r3, #7
 800d0ca:	d9e5      	bls.n	800d098 <vQueueUnregisterQueue+0x1c>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d0cc:	bf00      	nop
 800d0ce:	bf00      	nop
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	20046748 	.word	0x20046748

0800d0dc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b086      	sub	sp, #24
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800d0ec:	f001 fc9c 	bl	800ea28 <vPortEnterCritical>
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d0f6:	b25b      	sxtb	r3, r3
 800d0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0fc:	d103      	bne.n	800d106 <vQueueWaitForMessageRestricted+0x2a>
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	2200      	movs	r2, #0
 800d102:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d10c:	b25b      	sxtb	r3, r3
 800d10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d112:	d103      	bne.n	800d11c <vQueueWaitForMessageRestricted+0x40>
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	2200      	movs	r2, #0
 800d118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d11c:	f001 fc96 	bl	800ea4c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d124:	2b00      	cmp	r3, #0
 800d126:	d106      	bne.n	800d136 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	3324      	adds	r3, #36	@ 0x24
 800d12c:	687a      	ldr	r2, [r7, #4]
 800d12e:	68b9      	ldr	r1, [r7, #8]
 800d130:	4618      	mov	r0, r3
 800d132:	f000 fccd 	bl	800dad0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800d136:	6978      	ldr	r0, [r7, #20]
 800d138:	f7ff fed9 	bl	800ceee <prvUnlockQueue>
    }
 800d13c:	bf00      	nop
 800d13e:	3718      	adds	r7, #24
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800d144:	b580      	push	{r7, lr}
 800d146:	b08c      	sub	sp, #48	@ 0x30
 800d148:	af04      	add	r7, sp, #16
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	60b9      	str	r1, [r7, #8]
 800d14e:	607a      	str	r2, [r7, #4]
 800d150:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800d152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d154:	2b00      	cmp	r3, #0
 800d156:	d103      	bne.n	800d160 <xTaskCreateStatic+0x1c>
 800d158:	f001 fe2e 	bl	800edb8 <ulSetInterruptMask>
 800d15c:	bf00      	nop
 800d15e:	e7fd      	b.n	800d15c <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800d160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d162:	2b00      	cmp	r3, #0
 800d164:	d103      	bne.n	800d16e <xTaskCreateStatic+0x2a>
 800d166:	f001 fe27 	bl	800edb8 <ulSetInterruptMask>
 800d16a:	bf00      	nop
 800d16c:	e7fd      	b.n	800d16a <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800d16e:	235c      	movs	r3, #92	@ 0x5c
 800d170:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	2b5c      	cmp	r3, #92	@ 0x5c
 800d176:	d003      	beq.n	800d180 <xTaskCreateStatic+0x3c>
 800d178:	f001 fe1e 	bl	800edb8 <ulSetInterruptMask>
 800d17c:	bf00      	nop
 800d17e:	e7fd      	b.n	800d17c <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d180:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d184:	2b00      	cmp	r3, #0
 800d186:	d023      	beq.n	800d1d0 <xTaskCreateStatic+0x8c>
 800d188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d020      	beq.n	800d1d0 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d190:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d192:	225c      	movs	r2, #92	@ 0x5c
 800d194:	2100      	movs	r1, #0
 800d196:	69f8      	ldr	r0, [r7, #28]
 800d198:	f01e ff1a 	bl	802bfd0 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d19c:	69fb      	ldr	r3, [r7, #28]
 800d19e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1a0:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d1a2:	69fb      	ldr	r3, [r7, #28]
 800d1a4:	2202      	movs	r2, #2
 800d1a6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	9303      	str	r3, [sp, #12]
 800d1ae:	69fb      	ldr	r3, [r7, #28]
 800d1b0:	9302      	str	r3, [sp, #8]
 800d1b2:	f107 0318 	add.w	r3, r7, #24
 800d1b6:	9301      	str	r3, [sp, #4]
 800d1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ba:	9300      	str	r3, [sp, #0]
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	68b9      	ldr	r1, [r7, #8]
 800d1c2:	68f8      	ldr	r0, [r7, #12]
 800d1c4:	f000 f855 	bl	800d272 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800d1c8:	69f8      	ldr	r0, [r7, #28]
 800d1ca:	f000 f8d5 	bl	800d378 <prvAddNewTaskToReadyList>
 800d1ce:	e001      	b.n	800d1d4 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800d1d4:	69bb      	ldr	r3, [r7, #24]
    }
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3720      	adds	r7, #32
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}

0800d1de <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b08c      	sub	sp, #48	@ 0x30
 800d1e2:	af04      	add	r7, sp, #16
 800d1e4:	60f8      	str	r0, [r7, #12]
 800d1e6:	60b9      	str	r1, [r7, #8]
 800d1e8:	603b      	str	r3, [r7, #0]
 800d1ea:	4613      	mov	r3, r2
 800d1ec:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d1ee:	88fb      	ldrh	r3, [r7, #6]
 800d1f0:	009b      	lsls	r3, r3, #2
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f001 fe48 	bl	800ee88 <pvPortMalloc>
 800d1f8:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d013      	beq.n	800d228 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d200:	205c      	movs	r0, #92	@ 0x5c
 800d202:	f001 fe41 	bl	800ee88 <pvPortMalloc>
 800d206:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d008      	beq.n	800d220 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d20e:	225c      	movs	r2, #92	@ 0x5c
 800d210:	2100      	movs	r1, #0
 800d212:	69f8      	ldr	r0, [r7, #28]
 800d214:	f01e fedc 	bl	802bfd0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	697a      	ldr	r2, [r7, #20]
 800d21c:	631a      	str	r2, [r3, #48]	@ 0x30
 800d21e:	e005      	b.n	800d22c <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800d220:	6978      	ldr	r0, [r7, #20]
 800d222:	f001 feed 	bl	800f000 <vPortFree>
 800d226:	e001      	b.n	800d22c <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800d228:	2300      	movs	r3, #0
 800d22a:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800d22c:	69fb      	ldr	r3, [r7, #28]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d017      	beq.n	800d262 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d232:	69fb      	ldr	r3, [r7, #28]
 800d234:	2200      	movs	r2, #0
 800d236:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d23a:	88fa      	ldrh	r2, [r7, #6]
 800d23c:	2300      	movs	r3, #0
 800d23e:	9303      	str	r3, [sp, #12]
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	9302      	str	r3, [sp, #8]
 800d244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d246:	9301      	str	r3, [sp, #4]
 800d248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d24a:	9300      	str	r3, [sp, #0]
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	68b9      	ldr	r1, [r7, #8]
 800d250:	68f8      	ldr	r0, [r7, #12]
 800d252:	f000 f80e 	bl	800d272 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800d256:	69f8      	ldr	r0, [r7, #28]
 800d258:	f000 f88e 	bl	800d378 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800d25c:	2301      	movs	r3, #1
 800d25e:	61bb      	str	r3, [r7, #24]
 800d260:	e002      	b.n	800d268 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d262:	f04f 33ff 	mov.w	r3, #4294967295
 800d266:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800d268:	69bb      	ldr	r3, [r7, #24]
    }
 800d26a:	4618      	mov	r0, r3
 800d26c:	3720      	adds	r7, #32
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}

0800d272 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800d272:	b580      	push	{r7, lr}
 800d274:	b086      	sub	sp, #24
 800d276:	af00      	add	r7, sp, #0
 800d278:	60f8      	str	r0, [r7, #12]
 800d27a:	60b9      	str	r1, [r7, #8]
 800d27c:	607a      	str	r2, [r7, #4]
 800d27e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d282:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	461a      	mov	r2, r3
 800d28a:	21a5      	movs	r1, #165	@ 0xa5
 800d28c:	f01e fea0 	bl	802bfd0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d292:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d29a:	3b01      	subs	r3, #1
 800d29c:	009b      	lsls	r3, r3, #2
 800d29e:	4413      	add	r3, r2
 800d2a0:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	f023 0307 	bic.w	r3, r3, #7
 800d2a8:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	f003 0307 	and.w	r3, r3, #7
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d003      	beq.n	800d2bc <prvInitialiseNewTask+0x4a>
 800d2b4:	f001 fd80 	bl	800edb8 <ulSetInterruptMask>
 800d2b8:	bf00      	nop
 800d2ba:	e7fd      	b.n	800d2b8 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d01e      	beq.n	800d300 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	617b      	str	r3, [r7, #20]
 800d2c6:	e012      	b.n	800d2ee <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d2c8:	68ba      	ldr	r2, [r7, #8]
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	7819      	ldrb	r1, [r3, #0]
 800d2d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	4413      	add	r3, r2
 800d2d6:	3334      	adds	r3, #52	@ 0x34
 800d2d8:	460a      	mov	r2, r1
 800d2da:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800d2dc:	68ba      	ldr	r2, [r7, #8]
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	4413      	add	r3, r2
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d006      	beq.n	800d2f6 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	617b      	str	r3, [r7, #20]
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	2b0f      	cmp	r3, #15
 800d2f2:	d9e9      	bls.n	800d2c8 <prvInitialiseNewTask+0x56>
 800d2f4:	e000      	b.n	800d2f8 <prvInitialiseNewTask+0x86>
            {
                break;
 800d2f6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800d300:	6a3b      	ldr	r3, [r7, #32]
 800d302:	2b37      	cmp	r3, #55	@ 0x37
 800d304:	d903      	bls.n	800d30e <prvInitialiseNewTask+0x9c>
 800d306:	f001 fd57 	bl	800edb8 <ulSetInterruptMask>
 800d30a:	bf00      	nop
 800d30c:	e7fd      	b.n	800d30a <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d30e:	6a3b      	ldr	r3, [r7, #32]
 800d310:	2b37      	cmp	r3, #55	@ 0x37
 800d312:	d901      	bls.n	800d318 <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d314:	2337      	movs	r3, #55	@ 0x37
 800d316:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800d318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d31a:	6a3a      	ldr	r2, [r7, #32]
 800d31c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800d31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d320:	6a3a      	ldr	r2, [r7, #32]
 800d322:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d326:	3304      	adds	r3, #4
 800d328:	4618      	mov	r0, r3
 800d32a:	f7fe ff57 	bl	800c1dc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d330:	3318      	adds	r3, #24
 800d332:	4618      	mov	r0, r3
 800d334:	f7fe ff52 	bl	800c1dc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d33a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d33c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d33e:	6a3b      	ldr	r3, [r7, #32]
 800d340:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d346:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d34a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d34c:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800d34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d350:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	68fa      	ldr	r2, [r7, #12]
 800d356:	6938      	ldr	r0, [r7, #16]
 800d358:	f001 fbc6 	bl	800eae8 <pxPortInitialiseStack>
 800d35c:	4602      	mov	r2, r0
 800d35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d360:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800d362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d364:	2b00      	cmp	r3, #0
 800d366:	d002      	beq.n	800d36e <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d36a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d36c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d36e:	bf00      	nop
 800d370:	3718      	adds	r7, #24
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
	...

0800d378 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b084      	sub	sp, #16
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800d380:	f001 fb52 	bl	800ea28 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800d384:	4b3e      	ldr	r3, [pc, #248]	@ (800d480 <prvAddNewTaskToReadyList+0x108>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	3301      	adds	r3, #1
 800d38a:	4a3d      	ldr	r2, [pc, #244]	@ (800d480 <prvAddNewTaskToReadyList+0x108>)
 800d38c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800d38e:	4b3d      	ldr	r3, [pc, #244]	@ (800d484 <prvAddNewTaskToReadyList+0x10c>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d109      	bne.n	800d3aa <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800d396:	4a3b      	ldr	r2, [pc, #236]	@ (800d484 <prvAddNewTaskToReadyList+0x10c>)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d39c:	4b38      	ldr	r3, [pc, #224]	@ (800d480 <prvAddNewTaskToReadyList+0x108>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	d110      	bne.n	800d3c6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800d3a4:	f000 fd2a 	bl	800ddfc <prvInitialiseTaskLists>
 800d3a8:	e00d      	b.n	800d3c6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800d3aa:	4b37      	ldr	r3, [pc, #220]	@ (800d488 <prvAddNewTaskToReadyList+0x110>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d109      	bne.n	800d3c6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d3b2:	4b34      	ldr	r3, [pc, #208]	@ (800d484 <prvAddNewTaskToReadyList+0x10c>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d802      	bhi.n	800d3c6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800d3c0:	4a30      	ldr	r2, [pc, #192]	@ (800d484 <prvAddNewTaskToReadyList+0x10c>)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800d3c6:	4b31      	ldr	r3, [pc, #196]	@ (800d48c <prvAddNewTaskToReadyList+0x114>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	4a2f      	ldr	r2, [pc, #188]	@ (800d48c <prvAddNewTaskToReadyList+0x114>)
 800d3ce:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d3d0:	4b2e      	ldr	r3, [pc, #184]	@ (800d48c <prvAddNewTaskToReadyList+0x114>)
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3dc:	4b2c      	ldr	r3, [pc, #176]	@ (800d490 <prvAddNewTaskToReadyList+0x118>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d903      	bls.n	800d3ec <prvAddNewTaskToReadyList+0x74>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3e8:	4a29      	ldr	r2, [pc, #164]	@ (800d490 <prvAddNewTaskToReadyList+0x118>)
 800d3ea:	6013      	str	r3, [r2, #0]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3f0:	4928      	ldr	r1, [pc, #160]	@ (800d494 <prvAddNewTaskToReadyList+0x11c>)
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	4413      	add	r3, r2
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	440b      	add	r3, r1
 800d3fc:	3304      	adds	r3, #4
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	60fb      	str	r3, [r7, #12]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	68fa      	ldr	r2, [r7, #12]
 800d406:	609a      	str	r2, [r3, #8]
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	689a      	ldr	r2, [r3, #8]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	60da      	str	r2, [r3, #12]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	689b      	ldr	r3, [r3, #8]
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	3204      	adds	r2, #4
 800d418:	605a      	str	r2, [r3, #4]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	1d1a      	adds	r2, r3, #4
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	609a      	str	r2, [r3, #8]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d426:	4613      	mov	r3, r2
 800d428:	009b      	lsls	r3, r3, #2
 800d42a:	4413      	add	r3, r2
 800d42c:	009b      	lsls	r3, r3, #2
 800d42e:	4a19      	ldr	r2, [pc, #100]	@ (800d494 <prvAddNewTaskToReadyList+0x11c>)
 800d430:	441a      	add	r2, r3
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	615a      	str	r2, [r3, #20]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d43a:	4916      	ldr	r1, [pc, #88]	@ (800d494 <prvAddNewTaskToReadyList+0x11c>)
 800d43c:	4613      	mov	r3, r2
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	4413      	add	r3, r2
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	440b      	add	r3, r1
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	1c59      	adds	r1, r3, #1
 800d44a:	4812      	ldr	r0, [pc, #72]	@ (800d494 <prvAddNewTaskToReadyList+0x11c>)
 800d44c:	4613      	mov	r3, r2
 800d44e:	009b      	lsls	r3, r3, #2
 800d450:	4413      	add	r3, r2
 800d452:	009b      	lsls	r3, r3, #2
 800d454:	4403      	add	r3, r0
 800d456:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800d458:	f001 faf8 	bl	800ea4c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800d45c:	4b0a      	ldr	r3, [pc, #40]	@ (800d488 <prvAddNewTaskToReadyList+0x110>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d008      	beq.n	800d476 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d464:	4b07      	ldr	r3, [pc, #28]	@ (800d484 <prvAddNewTaskToReadyList+0x10c>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d46e:	429a      	cmp	r2, r3
 800d470:	d201      	bcs.n	800d476 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800d472:	f001 fac7 	bl	800ea04 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d476:	bf00      	nop
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	bf00      	nop
 800d480:	20046c5c 	.word	0x20046c5c
 800d484:	20046788 	.word	0x20046788
 800d488:	20046c68 	.word	0x20046c68
 800d48c:	20046c78 	.word	0x20046c78
 800d490:	20046c64 	.word	0x20046c64
 800d494:	2004678c 	.word	0x2004678c

0800d498 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800d498:	b580      	push	{r7, lr}
 800d49a:	b084      	sub	sp, #16
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d010      	beq.n	800d4cc <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 800d4aa:	4b0d      	ldr	r3, [pc, #52]	@ (800d4e0 <vTaskDelay+0x48>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d003      	beq.n	800d4ba <vTaskDelay+0x22>
 800d4b2:	f001 fc81 	bl	800edb8 <ulSetInterruptMask>
 800d4b6:	bf00      	nop
 800d4b8:	e7fd      	b.n	800d4b6 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800d4ba:	f000 f86f 	bl	800d59c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d4be:	2100      	movs	r1, #0
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f000 ff33 	bl	800e32c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800d4c6:	f000 f877 	bl	800d5b8 <xTaskResumeAll>
 800d4ca:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d101      	bne.n	800d4d6 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 800d4d2:	f001 fa97 	bl	800ea04 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800d4d6:	bf00      	nop
 800d4d8:	3710      	adds	r7, #16
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	20046c84 	.word	0x20046c84

0800d4e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b088      	sub	sp, #32
 800d4e8:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d4f2:	463a      	mov	r2, r7
 800d4f4:	1d39      	adds	r1, r7, #4
 800d4f6:	f107 0308 	add.w	r3, r7, #8
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7fe fe1a 	bl	800c134 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800d500:	6839      	ldr	r1, [r7, #0]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	68ba      	ldr	r2, [r7, #8]
 800d506:	9202      	str	r2, [sp, #8]
 800d508:	9301      	str	r3, [sp, #4]
 800d50a:	2300      	movs	r3, #0
 800d50c:	9300      	str	r3, [sp, #0]
 800d50e:	2300      	movs	r3, #0
 800d510:	460a      	mov	r2, r1
 800d512:	491b      	ldr	r1, [pc, #108]	@ (800d580 <vTaskStartScheduler+0x9c>)
 800d514:	481b      	ldr	r0, [pc, #108]	@ (800d584 <vTaskStartScheduler+0xa0>)
 800d516:	f7ff fe15 	bl	800d144 <xTaskCreateStatic>
 800d51a:	4603      	mov	r3, r0
 800d51c:	4a1a      	ldr	r2, [pc, #104]	@ (800d588 <vTaskStartScheduler+0xa4>)
 800d51e:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800d520:	4b19      	ldr	r3, [pc, #100]	@ (800d588 <vTaskStartScheduler+0xa4>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d002      	beq.n	800d52e <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800d528:	2301      	movs	r3, #1
 800d52a:	60fb      	str	r3, [r7, #12]
 800d52c:	e001      	b.n	800d532 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800d52e:	2300      	movs	r3, #0
 800d530:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	2b01      	cmp	r3, #1
 800d536:	d102      	bne.n	800d53e <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800d538:	f000 ff66 	bl	800e408 <xTimerCreateTimerTask>
 800d53c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2b01      	cmp	r3, #1
 800d542:	d10e      	bne.n	800d562 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800d544:	f001 fc38 	bl	800edb8 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800d548:	4b10      	ldr	r3, [pc, #64]	@ (800d58c <vTaskStartScheduler+0xa8>)
 800d54a:	f04f 32ff 	mov.w	r2, #4294967295
 800d54e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800d550:	4b0f      	ldr	r3, [pc, #60]	@ (800d590 <vTaskStartScheduler+0xac>)
 800d552:	2201      	movs	r2, #1
 800d554:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d556:	4b0f      	ldr	r3, [pc, #60]	@ (800d594 <vTaskStartScheduler+0xb0>)
 800d558:	2200      	movs	r2, #0
 800d55a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800d55c:	f001 fb4e 	bl	800ebfc <xPortStartScheduler>
 800d560:	e007      	b.n	800d572 <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d568:	d103      	bne.n	800d572 <vTaskStartScheduler+0x8e>
 800d56a:	f001 fc25 	bl	800edb8 <ulSetInterruptMask>
 800d56e:	bf00      	nop
 800d570:	e7fd      	b.n	800d56e <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800d572:	4b09      	ldr	r3, [pc, #36]	@ (800d598 <vTaskStartScheduler+0xb4>)
 800d574:	681b      	ldr	r3, [r3, #0]
}
 800d576:	bf00      	nop
 800d578:	3710      	adds	r7, #16
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	0802cbd0 	.word	0x0802cbd0
 800d584:	0800dddd 	.word	0x0800dddd
 800d588:	20046c80 	.word	0x20046c80
 800d58c:	20046c7c 	.word	0x20046c7c
 800d590:	20046c68 	.word	0x20046c68
 800d594:	20046c60 	.word	0x20046c60
 800d598:	0802d93c 	.word	0x0802d93c

0800d59c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d59c:	b480      	push	{r7}
 800d59e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800d5a0:	4b04      	ldr	r3, [pc, #16]	@ (800d5b4 <vTaskSuspendAll+0x18>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	4a03      	ldr	r2, [pc, #12]	@ (800d5b4 <vTaskSuspendAll+0x18>)
 800d5a8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800d5aa:	bf00      	nop
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr
 800d5b4:	20046c84 	.word	0x20046c84

0800d5b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b086      	sub	sp, #24
 800d5bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 800d5c6:	4b6b      	ldr	r3, [pc, #428]	@ (800d774 <xTaskResumeAll+0x1bc>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d103      	bne.n	800d5d6 <xTaskResumeAll+0x1e>
 800d5ce:	f001 fbf3 	bl	800edb8 <ulSetInterruptMask>
 800d5d2:	bf00      	nop
 800d5d4:	e7fd      	b.n	800d5d2 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800d5d6:	f001 fa27 	bl	800ea28 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800d5da:	4b66      	ldr	r3, [pc, #408]	@ (800d774 <xTaskResumeAll+0x1bc>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	3b01      	subs	r3, #1
 800d5e0:	4a64      	ldr	r2, [pc, #400]	@ (800d774 <xTaskResumeAll+0x1bc>)
 800d5e2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800d5e4:	4b63      	ldr	r3, [pc, #396]	@ (800d774 <xTaskResumeAll+0x1bc>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	f040 80bb 	bne.w	800d764 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d5ee:	4b62      	ldr	r3, [pc, #392]	@ (800d778 <xTaskResumeAll+0x1c0>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	f000 80b6 	beq.w	800d764 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d5f8:	e08b      	b.n	800d712 <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5fa:	4b60      	ldr	r3, [pc, #384]	@ (800d77c <xTaskResumeAll+0x1c4>)
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	68db      	ldr	r3, [r3, #12]
 800d600:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d606:	60bb      	str	r3, [r7, #8]
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	69db      	ldr	r3, [r3, #28]
 800d60c:	697a      	ldr	r2, [r7, #20]
 800d60e:	6a12      	ldr	r2, [r2, #32]
 800d610:	609a      	str	r2, [r3, #8]
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	6a1b      	ldr	r3, [r3, #32]
 800d616:	697a      	ldr	r2, [r7, #20]
 800d618:	69d2      	ldr	r2, [r2, #28]
 800d61a:	605a      	str	r2, [r3, #4]
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	685a      	ldr	r2, [r3, #4]
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	3318      	adds	r3, #24
 800d624:	429a      	cmp	r2, r3
 800d626:	d103      	bne.n	800d630 <xTaskResumeAll+0x78>
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	6a1a      	ldr	r2, [r3, #32]
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	605a      	str	r2, [r3, #4]
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	2200      	movs	r2, #0
 800d634:	629a      	str	r2, [r3, #40]	@ 0x28
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	1e5a      	subs	r2, r3, #1
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	695b      	ldr	r3, [r3, #20]
 800d644:	607b      	str	r3, [r7, #4]
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	689b      	ldr	r3, [r3, #8]
 800d64a:	697a      	ldr	r2, [r7, #20]
 800d64c:	68d2      	ldr	r2, [r2, #12]
 800d64e:	609a      	str	r2, [r3, #8]
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	68db      	ldr	r3, [r3, #12]
 800d654:	697a      	ldr	r2, [r7, #20]
 800d656:	6892      	ldr	r2, [r2, #8]
 800d658:	605a      	str	r2, [r3, #4]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	685a      	ldr	r2, [r3, #4]
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	3304      	adds	r3, #4
 800d662:	429a      	cmp	r2, r3
 800d664:	d103      	bne.n	800d66e <xTaskResumeAll+0xb6>
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	68da      	ldr	r2, [r3, #12]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	605a      	str	r2, [r3, #4]
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	2200      	movs	r2, #0
 800d672:	615a      	str	r2, [r3, #20]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	1e5a      	subs	r2, r3, #1
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d682:	4b3f      	ldr	r3, [pc, #252]	@ (800d780 <xTaskResumeAll+0x1c8>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	429a      	cmp	r2, r3
 800d688:	d903      	bls.n	800d692 <xTaskResumeAll+0xda>
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d68e:	4a3c      	ldr	r2, [pc, #240]	@ (800d780 <xTaskResumeAll+0x1c8>)
 800d690:	6013      	str	r3, [r2, #0]
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d696:	493b      	ldr	r1, [pc, #236]	@ (800d784 <xTaskResumeAll+0x1cc>)
 800d698:	4613      	mov	r3, r2
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	4413      	add	r3, r2
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	440b      	add	r3, r1
 800d6a2:	3304      	adds	r3, #4
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	603b      	str	r3, [r7, #0]
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	683a      	ldr	r2, [r7, #0]
 800d6ac:	609a      	str	r2, [r3, #8]
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	689a      	ldr	r2, [r3, #8]
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	60da      	str	r2, [r3, #12]
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	689b      	ldr	r3, [r3, #8]
 800d6ba:	697a      	ldr	r2, [r7, #20]
 800d6bc:	3204      	adds	r2, #4
 800d6be:	605a      	str	r2, [r3, #4]
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	1d1a      	adds	r2, r3, #4
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	609a      	str	r2, [r3, #8]
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6cc:	4613      	mov	r3, r2
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	4413      	add	r3, r2
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	4a2b      	ldr	r2, [pc, #172]	@ (800d784 <xTaskResumeAll+0x1cc>)
 800d6d6:	441a      	add	r2, r3
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	615a      	str	r2, [r3, #20]
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6e0:	4928      	ldr	r1, [pc, #160]	@ (800d784 <xTaskResumeAll+0x1cc>)
 800d6e2:	4613      	mov	r3, r2
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	4413      	add	r3, r2
 800d6e8:	009b      	lsls	r3, r3, #2
 800d6ea:	440b      	add	r3, r1
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	1c59      	adds	r1, r3, #1
 800d6f0:	4824      	ldr	r0, [pc, #144]	@ (800d784 <xTaskResumeAll+0x1cc>)
 800d6f2:	4613      	mov	r3, r2
 800d6f4:	009b      	lsls	r3, r3, #2
 800d6f6:	4413      	add	r3, r2
 800d6f8:	009b      	lsls	r3, r3, #2
 800d6fa:	4403      	add	r3, r0
 800d6fc:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d702:	4b21      	ldr	r3, [pc, #132]	@ (800d788 <xTaskResumeAll+0x1d0>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d708:	429a      	cmp	r2, r3
 800d70a:	d902      	bls.n	800d712 <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 800d70c:	4b1f      	ldr	r3, [pc, #124]	@ (800d78c <xTaskResumeAll+0x1d4>)
 800d70e:	2201      	movs	r2, #1
 800d710:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d712:	4b1a      	ldr	r3, [pc, #104]	@ (800d77c <xTaskResumeAll+0x1c4>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	f47f af6f 	bne.w	800d5fa <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d001      	beq.n	800d726 <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800d722:	f000 fc01 	bl	800df28 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d726:	4b1a      	ldr	r3, [pc, #104]	@ (800d790 <xTaskResumeAll+0x1d8>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d010      	beq.n	800d754 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800d732:	f000 f84b 	bl	800d7cc <xTaskIncrementTick>
 800d736:	4603      	mov	r3, r0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d002      	beq.n	800d742 <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 800d73c:	4b13      	ldr	r3, [pc, #76]	@ (800d78c <xTaskResumeAll+0x1d4>)
 800d73e:	2201      	movs	r2, #1
 800d740:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	3b01      	subs	r3, #1
 800d746:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d1f1      	bne.n	800d732 <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 800d74e:	4b10      	ldr	r3, [pc, #64]	@ (800d790 <xTaskResumeAll+0x1d8>)
 800d750:	2200      	movs	r2, #0
 800d752:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800d754:	4b0d      	ldr	r3, [pc, #52]	@ (800d78c <xTaskResumeAll+0x1d4>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d003      	beq.n	800d764 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800d75c:	2301      	movs	r3, #1
 800d75e:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800d760:	f001 f950 	bl	800ea04 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800d764:	f001 f972 	bl	800ea4c <vPortExitCritical>

    return xAlreadyYielded;
 800d768:	693b      	ldr	r3, [r7, #16]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3718      	adds	r7, #24
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	20046c84 	.word	0x20046c84
 800d778:	20046c5c 	.word	0x20046c5c
 800d77c:	20046c1c 	.word	0x20046c1c
 800d780:	20046c64 	.word	0x20046c64
 800d784:	2004678c 	.word	0x2004678c
 800d788:	20046788 	.word	0x20046788
 800d78c:	20046c70 	.word	0x20046c70
 800d790:	20046c6c 	.word	0x20046c6c

0800d794 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d794:	b480      	push	{r7}
 800d796:	b083      	sub	sp, #12
 800d798:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800d79a:	4b05      	ldr	r3, [pc, #20]	@ (800d7b0 <xTaskGetTickCount+0x1c>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800d7a0:	687b      	ldr	r3, [r7, #4]
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	370c      	adds	r7, #12
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr
 800d7ae:	bf00      	nop
 800d7b0:	20046c60 	.word	0x20046c60

0800d7b4 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 800d7b8:	4b03      	ldr	r3, [pc, #12]	@ (800d7c8 <uxTaskGetNumberOfTasks+0x14>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr
 800d7c6:	bf00      	nop
 800d7c8:	20046c5c 	.word	0x20046c5c

0800d7cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b088      	sub	sp, #32
 800d7d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800d7d6:	4b7a      	ldr	r3, [pc, #488]	@ (800d9c0 <xTaskIncrementTick+0x1f4>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	f040 80e6 	bne.w	800d9ac <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d7e0:	4b78      	ldr	r3, [pc, #480]	@ (800d9c4 <xTaskIncrementTick+0x1f8>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800d7e8:	4a76      	ldr	r2, [pc, #472]	@ (800d9c4 <xTaskIncrementTick+0x1f8>)
 800d7ea:	69bb      	ldr	r3, [r7, #24]
 800d7ec:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d7ee:	69bb      	ldr	r3, [r7, #24]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d119      	bne.n	800d828 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 800d7f4:	4b74      	ldr	r3, [pc, #464]	@ (800d9c8 <xTaskIncrementTick+0x1fc>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d003      	beq.n	800d806 <xTaskIncrementTick+0x3a>
 800d7fe:	f001 fadb 	bl	800edb8 <ulSetInterruptMask>
 800d802:	bf00      	nop
 800d804:	e7fd      	b.n	800d802 <xTaskIncrementTick+0x36>
 800d806:	4b70      	ldr	r3, [pc, #448]	@ (800d9c8 <xTaskIncrementTick+0x1fc>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	617b      	str	r3, [r7, #20]
 800d80c:	4b6f      	ldr	r3, [pc, #444]	@ (800d9cc <xTaskIncrementTick+0x200>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a6d      	ldr	r2, [pc, #436]	@ (800d9c8 <xTaskIncrementTick+0x1fc>)
 800d812:	6013      	str	r3, [r2, #0]
 800d814:	4a6d      	ldr	r2, [pc, #436]	@ (800d9cc <xTaskIncrementTick+0x200>)
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	6013      	str	r3, [r2, #0]
 800d81a:	4b6d      	ldr	r3, [pc, #436]	@ (800d9d0 <xTaskIncrementTick+0x204>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	3301      	adds	r3, #1
 800d820:	4a6b      	ldr	r2, [pc, #428]	@ (800d9d0 <xTaskIncrementTick+0x204>)
 800d822:	6013      	str	r3, [r2, #0]
 800d824:	f000 fb80 	bl	800df28 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800d828:	4b6a      	ldr	r3, [pc, #424]	@ (800d9d4 <xTaskIncrementTick+0x208>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	69ba      	ldr	r2, [r7, #24]
 800d82e:	429a      	cmp	r2, r3
 800d830:	f0c0 80a7 	bcc.w	800d982 <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d834:	4b64      	ldr	r3, [pc, #400]	@ (800d9c8 <xTaskIncrementTick+0x1fc>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d104      	bne.n	800d848 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d83e:	4b65      	ldr	r3, [pc, #404]	@ (800d9d4 <xTaskIncrementTick+0x208>)
 800d840:	f04f 32ff 	mov.w	r2, #4294967295
 800d844:	601a      	str	r2, [r3, #0]
                    break;
 800d846:	e09c      	b.n	800d982 <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d848:	4b5f      	ldr	r3, [pc, #380]	@ (800d9c8 <xTaskIncrementTick+0x1fc>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	685b      	ldr	r3, [r3, #4]
 800d856:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800d858:	69ba      	ldr	r2, [r7, #24]
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d203      	bcs.n	800d868 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800d860:	4a5c      	ldr	r2, [pc, #368]	@ (800d9d4 <xTaskIncrementTick+0x208>)
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800d866:	e08c      	b.n	800d982 <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	695b      	ldr	r3, [r3, #20]
 800d86c:	60bb      	str	r3, [r7, #8]
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	689b      	ldr	r3, [r3, #8]
 800d872:	693a      	ldr	r2, [r7, #16]
 800d874:	68d2      	ldr	r2, [r2, #12]
 800d876:	609a      	str	r2, [r3, #8]
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	693a      	ldr	r2, [r7, #16]
 800d87e:	6892      	ldr	r2, [r2, #8]
 800d880:	605a      	str	r2, [r3, #4]
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	685a      	ldr	r2, [r3, #4]
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	3304      	adds	r3, #4
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d103      	bne.n	800d896 <xTaskIncrementTick+0xca>
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	68da      	ldr	r2, [r3, #12]
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	605a      	str	r2, [r3, #4]
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	2200      	movs	r2, #0
 800d89a:	615a      	str	r2, [r3, #20]
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	1e5a      	subs	r2, r3, #1
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d01e      	beq.n	800d8ec <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8b2:	607b      	str	r3, [r7, #4]
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	69db      	ldr	r3, [r3, #28]
 800d8b8:	693a      	ldr	r2, [r7, #16]
 800d8ba:	6a12      	ldr	r2, [r2, #32]
 800d8bc:	609a      	str	r2, [r3, #8]
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	6a1b      	ldr	r3, [r3, #32]
 800d8c2:	693a      	ldr	r2, [r7, #16]
 800d8c4:	69d2      	ldr	r2, [r2, #28]
 800d8c6:	605a      	str	r2, [r3, #4]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	685a      	ldr	r2, [r3, #4]
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	3318      	adds	r3, #24
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d103      	bne.n	800d8dc <xTaskIncrementTick+0x110>
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	6a1a      	ldr	r2, [r3, #32]
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	605a      	str	r2, [r3, #4]
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	629a      	str	r2, [r3, #40]	@ 0x28
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	1e5a      	subs	r2, r3, #1
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8f0:	4b39      	ldr	r3, [pc, #228]	@ (800d9d8 <xTaskIncrementTick+0x20c>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d903      	bls.n	800d900 <xTaskIncrementTick+0x134>
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8fc:	4a36      	ldr	r2, [pc, #216]	@ (800d9d8 <xTaskIncrementTick+0x20c>)
 800d8fe:	6013      	str	r3, [r2, #0]
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d904:	4935      	ldr	r1, [pc, #212]	@ (800d9dc <xTaskIncrementTick+0x210>)
 800d906:	4613      	mov	r3, r2
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	4413      	add	r3, r2
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	440b      	add	r3, r1
 800d910:	3304      	adds	r3, #4
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	603b      	str	r3, [r7, #0]
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	683a      	ldr	r2, [r7, #0]
 800d91a:	609a      	str	r2, [r3, #8]
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	689a      	ldr	r2, [r3, #8]
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	60da      	str	r2, [r3, #12]
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	689b      	ldr	r3, [r3, #8]
 800d928:	693a      	ldr	r2, [r7, #16]
 800d92a:	3204      	adds	r2, #4
 800d92c:	605a      	str	r2, [r3, #4]
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	1d1a      	adds	r2, r3, #4
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	609a      	str	r2, [r3, #8]
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d93a:	4613      	mov	r3, r2
 800d93c:	009b      	lsls	r3, r3, #2
 800d93e:	4413      	add	r3, r2
 800d940:	009b      	lsls	r3, r3, #2
 800d942:	4a26      	ldr	r2, [pc, #152]	@ (800d9dc <xTaskIncrementTick+0x210>)
 800d944:	441a      	add	r2, r3
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	615a      	str	r2, [r3, #20]
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d94e:	4923      	ldr	r1, [pc, #140]	@ (800d9dc <xTaskIncrementTick+0x210>)
 800d950:	4613      	mov	r3, r2
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	4413      	add	r3, r2
 800d956:	009b      	lsls	r3, r3, #2
 800d958:	440b      	add	r3, r1
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	1c59      	adds	r1, r3, #1
 800d95e:	481f      	ldr	r0, [pc, #124]	@ (800d9dc <xTaskIncrementTick+0x210>)
 800d960:	4613      	mov	r3, r2
 800d962:	009b      	lsls	r3, r3, #2
 800d964:	4413      	add	r3, r2
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	4403      	add	r3, r0
 800d96a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d970:	4b1b      	ldr	r3, [pc, #108]	@ (800d9e0 <xTaskIncrementTick+0x214>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d976:	429a      	cmp	r2, r3
 800d978:	f67f af5c 	bls.w	800d834 <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 800d97c:	2301      	movs	r3, #1
 800d97e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d980:	e758      	b.n	800d834 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d982:	4b17      	ldr	r3, [pc, #92]	@ (800d9e0 <xTaskIncrementTick+0x214>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d988:	4914      	ldr	r1, [pc, #80]	@ (800d9dc <xTaskIncrementTick+0x210>)
 800d98a:	4613      	mov	r3, r2
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	4413      	add	r3, r2
 800d990:	009b      	lsls	r3, r3, #2
 800d992:	440b      	add	r3, r1
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2b01      	cmp	r3, #1
 800d998:	d901      	bls.n	800d99e <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 800d99a:	2301      	movs	r3, #1
 800d99c:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800d99e:	4b11      	ldr	r3, [pc, #68]	@ (800d9e4 <xTaskIncrementTick+0x218>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d007      	beq.n	800d9b6 <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	61fb      	str	r3, [r7, #28]
 800d9aa:	e004      	b.n	800d9b6 <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800d9ac:	4b0e      	ldr	r3, [pc, #56]	@ (800d9e8 <xTaskIncrementTick+0x21c>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	4a0d      	ldr	r2, [pc, #52]	@ (800d9e8 <xTaskIncrementTick+0x21c>)
 800d9b4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800d9b6:	69fb      	ldr	r3, [r7, #28]
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3720      	adds	r7, #32
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	20046c84 	.word	0x20046c84
 800d9c4:	20046c60 	.word	0x20046c60
 800d9c8:	20046c14 	.word	0x20046c14
 800d9cc:	20046c18 	.word	0x20046c18
 800d9d0:	20046c74 	.word	0x20046c74
 800d9d4:	20046c7c 	.word	0x20046c7c
 800d9d8:	20046c64 	.word	0x20046c64
 800d9dc:	2004678c 	.word	0x2004678c
 800d9e0:	20046788 	.word	0x20046788
 800d9e4:	20046c70 	.word	0x20046c70
 800d9e8:	20046c6c 	.word	0x20046c6c

0800d9ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b082      	sub	sp, #8
 800d9f0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800d9f2:	4b23      	ldr	r3, [pc, #140]	@ (800da80 <vTaskSwitchContext+0x94>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d003      	beq.n	800da02 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800d9fa:	4b22      	ldr	r3, [pc, #136]	@ (800da84 <vTaskSwitchContext+0x98>)
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800da00:	e039      	b.n	800da76 <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800da02:	4b20      	ldr	r3, [pc, #128]	@ (800da84 <vTaskSwitchContext+0x98>)
 800da04:	2200      	movs	r2, #0
 800da06:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da08:	4b1f      	ldr	r3, [pc, #124]	@ (800da88 <vTaskSwitchContext+0x9c>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	607b      	str	r3, [r7, #4]
 800da0e:	e009      	b.n	800da24 <vTaskSwitchContext+0x38>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d103      	bne.n	800da1e <vTaskSwitchContext+0x32>
 800da16:	f001 f9cf 	bl	800edb8 <ulSetInterruptMask>
 800da1a:	bf00      	nop
 800da1c:	e7fd      	b.n	800da1a <vTaskSwitchContext+0x2e>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	3b01      	subs	r3, #1
 800da22:	607b      	str	r3, [r7, #4]
 800da24:	4919      	ldr	r1, [pc, #100]	@ (800da8c <vTaskSwitchContext+0xa0>)
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	4613      	mov	r3, r2
 800da2a:	009b      	lsls	r3, r3, #2
 800da2c:	4413      	add	r3, r2
 800da2e:	009b      	lsls	r3, r3, #2
 800da30:	440b      	add	r3, r1
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d0eb      	beq.n	800da10 <vTaskSwitchContext+0x24>
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	4613      	mov	r3, r2
 800da3c:	009b      	lsls	r3, r3, #2
 800da3e:	4413      	add	r3, r2
 800da40:	009b      	lsls	r3, r3, #2
 800da42:	4a12      	ldr	r2, [pc, #72]	@ (800da8c <vTaskSwitchContext+0xa0>)
 800da44:	4413      	add	r3, r2
 800da46:	603b      	str	r3, [r7, #0]
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	685a      	ldr	r2, [r3, #4]
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	605a      	str	r2, [r3, #4]
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	685a      	ldr	r2, [r3, #4]
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	3308      	adds	r3, #8
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d103      	bne.n	800da66 <vTaskSwitchContext+0x7a>
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	68da      	ldr	r2, [r3, #12]
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	605a      	str	r2, [r3, #4]
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	68db      	ldr	r3, [r3, #12]
 800da6c:	4a08      	ldr	r2, [pc, #32]	@ (800da90 <vTaskSwitchContext+0xa4>)
 800da6e:	6013      	str	r3, [r2, #0]
 800da70:	4a05      	ldr	r2, [pc, #20]	@ (800da88 <vTaskSwitchContext+0x9c>)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6013      	str	r3, [r2, #0]
}
 800da76:	bf00      	nop
 800da78:	3708      	adds	r7, #8
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
 800da7e:	bf00      	nop
 800da80:	20046c84 	.word	0x20046c84
 800da84:	20046c70 	.word	0x20046c70
 800da88:	20046c64 	.word	0x20046c64
 800da8c:	2004678c 	.word	0x2004678c
 800da90:	20046788 	.word	0x20046788

0800da94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b082      	sub	sp, #8
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d103      	bne.n	800daac <vTaskPlaceOnEventList+0x18>
 800daa4:	f001 f988 	bl	800edb8 <ulSetInterruptMask>
 800daa8:	bf00      	nop
 800daaa:	e7fd      	b.n	800daa8 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800daac:	4b07      	ldr	r3, [pc, #28]	@ (800dacc <vTaskPlaceOnEventList+0x38>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	3318      	adds	r3, #24
 800dab2:	4619      	mov	r1, r3
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f7fe fb9e 	bl	800c1f6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800daba:	2101      	movs	r1, #1
 800dabc:	6838      	ldr	r0, [r7, #0]
 800dabe:	f000 fc35 	bl	800e32c <prvAddCurrentTaskToDelayedList>
}
 800dac2:	bf00      	nop
 800dac4:	3708      	adds	r7, #8
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	20046788 	.word	0x20046788

0800dad0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b086      	sub	sp, #24
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d103      	bne.n	800daea <vTaskPlaceOnEventListRestricted+0x1a>
 800dae2:	f001 f969 	bl	800edb8 <ulSetInterruptMask>
 800dae6:	bf00      	nop
 800dae8:	e7fd      	b.n	800dae6 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	617b      	str	r3, [r7, #20]
 800daf0:	4b15      	ldr	r3, [pc, #84]	@ (800db48 <vTaskPlaceOnEventListRestricted+0x78>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	697a      	ldr	r2, [r7, #20]
 800daf6:	61da      	str	r2, [r3, #28]
 800daf8:	4b13      	ldr	r3, [pc, #76]	@ (800db48 <vTaskPlaceOnEventListRestricted+0x78>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	697a      	ldr	r2, [r7, #20]
 800dafe:	6892      	ldr	r2, [r2, #8]
 800db00:	621a      	str	r2, [r3, #32]
 800db02:	4b11      	ldr	r3, [pc, #68]	@ (800db48 <vTaskPlaceOnEventListRestricted+0x78>)
 800db04:	681a      	ldr	r2, [r3, #0]
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	3218      	adds	r2, #24
 800db0c:	605a      	str	r2, [r3, #4]
 800db0e:	4b0e      	ldr	r3, [pc, #56]	@ (800db48 <vTaskPlaceOnEventListRestricted+0x78>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	f103 0218 	add.w	r2, r3, #24
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	609a      	str	r2, [r3, #8]
 800db1a:	4b0b      	ldr	r3, [pc, #44]	@ (800db48 <vTaskPlaceOnEventListRestricted+0x78>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	629a      	str	r2, [r3, #40]	@ 0x28
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	1c5a      	adds	r2, r3, #1
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d002      	beq.n	800db38 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 800db32:	f04f 33ff 	mov.w	r3, #4294967295
 800db36:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800db38:	6879      	ldr	r1, [r7, #4]
 800db3a:	68b8      	ldr	r0, [r7, #8]
 800db3c:	f000 fbf6 	bl	800e32c <prvAddCurrentTaskToDelayedList>
    }
 800db40:	bf00      	nop
 800db42:	3718      	adds	r7, #24
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	20046788 	.word	0x20046788

0800db4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b088      	sub	sp, #32
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	68db      	ldr	r3, [r3, #12]
 800db58:	68db      	ldr	r3, [r3, #12]
 800db5a:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800db5c:	69bb      	ldr	r3, [r7, #24]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d103      	bne.n	800db6a <xTaskRemoveFromEventList+0x1e>
 800db62:	f001 f929 	bl	800edb8 <ulSetInterruptMask>
 800db66:	bf00      	nop
 800db68:	e7fd      	b.n	800db66 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800db6a:	69bb      	ldr	r3, [r7, #24]
 800db6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db6e:	617b      	str	r3, [r7, #20]
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	69db      	ldr	r3, [r3, #28]
 800db74:	69ba      	ldr	r2, [r7, #24]
 800db76:	6a12      	ldr	r2, [r2, #32]
 800db78:	609a      	str	r2, [r3, #8]
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	6a1b      	ldr	r3, [r3, #32]
 800db7e:	69ba      	ldr	r2, [r7, #24]
 800db80:	69d2      	ldr	r2, [r2, #28]
 800db82:	605a      	str	r2, [r3, #4]
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	685a      	ldr	r2, [r3, #4]
 800db88:	69bb      	ldr	r3, [r7, #24]
 800db8a:	3318      	adds	r3, #24
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d103      	bne.n	800db98 <xTaskRemoveFromEventList+0x4c>
 800db90:	69bb      	ldr	r3, [r7, #24]
 800db92:	6a1a      	ldr	r2, [r3, #32]
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	605a      	str	r2, [r3, #4]
 800db98:	69bb      	ldr	r3, [r7, #24]
 800db9a:	2200      	movs	r2, #0
 800db9c:	629a      	str	r2, [r3, #40]	@ 0x28
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	1e5a      	subs	r2, r3, #1
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800dba8:	4b49      	ldr	r3, [pc, #292]	@ (800dcd0 <xTaskRemoveFromEventList+0x184>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d15f      	bne.n	800dc70 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800dbb0:	69bb      	ldr	r3, [r7, #24]
 800dbb2:	695b      	ldr	r3, [r3, #20]
 800dbb4:	60fb      	str	r3, [r7, #12]
 800dbb6:	69bb      	ldr	r3, [r7, #24]
 800dbb8:	689b      	ldr	r3, [r3, #8]
 800dbba:	69ba      	ldr	r2, [r7, #24]
 800dbbc:	68d2      	ldr	r2, [r2, #12]
 800dbbe:	609a      	str	r2, [r3, #8]
 800dbc0:	69bb      	ldr	r3, [r7, #24]
 800dbc2:	68db      	ldr	r3, [r3, #12]
 800dbc4:	69ba      	ldr	r2, [r7, #24]
 800dbc6:	6892      	ldr	r2, [r2, #8]
 800dbc8:	605a      	str	r2, [r3, #4]
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	685a      	ldr	r2, [r3, #4]
 800dbce:	69bb      	ldr	r3, [r7, #24]
 800dbd0:	3304      	adds	r3, #4
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d103      	bne.n	800dbde <xTaskRemoveFromEventList+0x92>
 800dbd6:	69bb      	ldr	r3, [r7, #24]
 800dbd8:	68da      	ldr	r2, [r3, #12]
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	605a      	str	r2, [r3, #4]
 800dbde:	69bb      	ldr	r3, [r7, #24]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	615a      	str	r2, [r3, #20]
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	1e5a      	subs	r2, r3, #1
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbf2:	4b38      	ldr	r3, [pc, #224]	@ (800dcd4 <xTaskRemoveFromEventList+0x188>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d903      	bls.n	800dc02 <xTaskRemoveFromEventList+0xb6>
 800dbfa:	69bb      	ldr	r3, [r7, #24]
 800dbfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbfe:	4a35      	ldr	r2, [pc, #212]	@ (800dcd4 <xTaskRemoveFromEventList+0x188>)
 800dc00:	6013      	str	r3, [r2, #0]
 800dc02:	69bb      	ldr	r3, [r7, #24]
 800dc04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc06:	4934      	ldr	r1, [pc, #208]	@ (800dcd8 <xTaskRemoveFromEventList+0x18c>)
 800dc08:	4613      	mov	r3, r2
 800dc0a:	009b      	lsls	r3, r3, #2
 800dc0c:	4413      	add	r3, r2
 800dc0e:	009b      	lsls	r3, r3, #2
 800dc10:	440b      	add	r3, r1
 800dc12:	3304      	adds	r3, #4
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	60bb      	str	r3, [r7, #8]
 800dc18:	69bb      	ldr	r3, [r7, #24]
 800dc1a:	68ba      	ldr	r2, [r7, #8]
 800dc1c:	609a      	str	r2, [r3, #8]
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	689a      	ldr	r2, [r3, #8]
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	60da      	str	r2, [r3, #12]
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	689b      	ldr	r3, [r3, #8]
 800dc2a:	69ba      	ldr	r2, [r7, #24]
 800dc2c:	3204      	adds	r2, #4
 800dc2e:	605a      	str	r2, [r3, #4]
 800dc30:	69bb      	ldr	r3, [r7, #24]
 800dc32:	1d1a      	adds	r2, r3, #4
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	609a      	str	r2, [r3, #8]
 800dc38:	69bb      	ldr	r3, [r7, #24]
 800dc3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc3c:	4613      	mov	r3, r2
 800dc3e:	009b      	lsls	r3, r3, #2
 800dc40:	4413      	add	r3, r2
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	4a24      	ldr	r2, [pc, #144]	@ (800dcd8 <xTaskRemoveFromEventList+0x18c>)
 800dc46:	441a      	add	r2, r3
 800dc48:	69bb      	ldr	r3, [r7, #24]
 800dc4a:	615a      	str	r2, [r3, #20]
 800dc4c:	69bb      	ldr	r3, [r7, #24]
 800dc4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc50:	4921      	ldr	r1, [pc, #132]	@ (800dcd8 <xTaskRemoveFromEventList+0x18c>)
 800dc52:	4613      	mov	r3, r2
 800dc54:	009b      	lsls	r3, r3, #2
 800dc56:	4413      	add	r3, r2
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	440b      	add	r3, r1
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	1c59      	adds	r1, r3, #1
 800dc60:	481d      	ldr	r0, [pc, #116]	@ (800dcd8 <xTaskRemoveFromEventList+0x18c>)
 800dc62:	4613      	mov	r3, r2
 800dc64:	009b      	lsls	r3, r3, #2
 800dc66:	4413      	add	r3, r2
 800dc68:	009b      	lsls	r3, r3, #2
 800dc6a:	4403      	add	r3, r0
 800dc6c:	6019      	str	r1, [r3, #0]
 800dc6e:	e01b      	b.n	800dca8 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dc70:	4b1a      	ldr	r3, [pc, #104]	@ (800dcdc <xTaskRemoveFromEventList+0x190>)
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	613b      	str	r3, [r7, #16]
 800dc76:	69bb      	ldr	r3, [r7, #24]
 800dc78:	693a      	ldr	r2, [r7, #16]
 800dc7a:	61da      	str	r2, [r3, #28]
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	689a      	ldr	r2, [r3, #8]
 800dc80:	69bb      	ldr	r3, [r7, #24]
 800dc82:	621a      	str	r2, [r3, #32]
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	689b      	ldr	r3, [r3, #8]
 800dc88:	69ba      	ldr	r2, [r7, #24]
 800dc8a:	3218      	adds	r2, #24
 800dc8c:	605a      	str	r2, [r3, #4]
 800dc8e:	69bb      	ldr	r3, [r7, #24]
 800dc90:	f103 0218 	add.w	r2, r3, #24
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	609a      	str	r2, [r3, #8]
 800dc98:	69bb      	ldr	r3, [r7, #24]
 800dc9a:	4a10      	ldr	r2, [pc, #64]	@ (800dcdc <xTaskRemoveFromEventList+0x190>)
 800dc9c:	629a      	str	r2, [r3, #40]	@ 0x28
 800dc9e:	4b0f      	ldr	r3, [pc, #60]	@ (800dcdc <xTaskRemoveFromEventList+0x190>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	3301      	adds	r3, #1
 800dca4:	4a0d      	ldr	r2, [pc, #52]	@ (800dcdc <xTaskRemoveFromEventList+0x190>)
 800dca6:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcac:	4b0c      	ldr	r3, [pc, #48]	@ (800dce0 <xTaskRemoveFromEventList+0x194>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d905      	bls.n	800dcc2 <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800dcba:	4b0a      	ldr	r3, [pc, #40]	@ (800dce4 <xTaskRemoveFromEventList+0x198>)
 800dcbc:	2201      	movs	r2, #1
 800dcbe:	601a      	str	r2, [r3, #0]
 800dcc0:	e001      	b.n	800dcc6 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800dcc6:	69fb      	ldr	r3, [r7, #28]
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3720      	adds	r7, #32
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	20046c84 	.word	0x20046c84
 800dcd4:	20046c64 	.word	0x20046c64
 800dcd8:	2004678c 	.word	0x2004678c
 800dcdc:	20046c1c 	.word	0x20046c1c
 800dce0:	20046788 	.word	0x20046788
 800dce4:	20046c70 	.word	0x20046c70

0800dce8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dce8:	b480      	push	{r7}
 800dcea:	b083      	sub	sp, #12
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dcf0:	4b06      	ldr	r3, [pc, #24]	@ (800dd0c <vTaskInternalSetTimeOutState+0x24>)
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800dcf8:	4b05      	ldr	r3, [pc, #20]	@ (800dd10 <vTaskInternalSetTimeOutState+0x28>)
 800dcfa:	681a      	ldr	r2, [r3, #0]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	605a      	str	r2, [r3, #4]
}
 800dd00:	bf00      	nop
 800dd02:	370c      	adds	r7, #12
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr
 800dd0c:	20046c74 	.word	0x20046c74
 800dd10:	20046c60 	.word	0x20046c60

0800dd14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b086      	sub	sp, #24
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d103      	bne.n	800dd2c <xTaskCheckForTimeOut+0x18>
 800dd24:	f001 f848 	bl	800edb8 <ulSetInterruptMask>
 800dd28:	bf00      	nop
 800dd2a:	e7fd      	b.n	800dd28 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d103      	bne.n	800dd3a <xTaskCheckForTimeOut+0x26>
 800dd32:	f001 f841 	bl	800edb8 <ulSetInterruptMask>
 800dd36:	bf00      	nop
 800dd38:	e7fd      	b.n	800dd36 <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 800dd3a:	f000 fe75 	bl	800ea28 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800dd3e:	4b1f      	ldr	r3, [pc, #124]	@ (800ddbc <xTaskCheckForTimeOut+0xa8>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	693a      	ldr	r2, [r7, #16]
 800dd4a:	1ad3      	subs	r3, r2, r3
 800dd4c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd56:	d102      	bne.n	800dd5e <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	617b      	str	r3, [r7, #20]
 800dd5c:	e026      	b.n	800ddac <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681a      	ldr	r2, [r3, #0]
 800dd62:	4b17      	ldr	r3, [pc, #92]	@ (800ddc0 <xTaskCheckForTimeOut+0xac>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d00a      	beq.n	800dd80 <xTaskCheckForTimeOut+0x6c>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	693a      	ldr	r2, [r7, #16]
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d305      	bcc.n	800dd80 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800dd74:	2301      	movs	r3, #1
 800dd76:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	601a      	str	r2, [r3, #0]
 800dd7e:	e015      	b.n	800ddac <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	68fa      	ldr	r2, [r7, #12]
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d20b      	bcs.n	800dda2 <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	681a      	ldr	r2, [r3, #0]
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	1ad2      	subs	r2, r2, r3
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f7ff ffa6 	bl	800dce8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	617b      	str	r3, [r7, #20]
 800dda0:	e004      	b.n	800ddac <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	2200      	movs	r2, #0
 800dda6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800ddac:	f000 fe4e 	bl	800ea4c <vPortExitCritical>

    return xReturn;
 800ddb0:	697b      	ldr	r3, [r7, #20]
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3718      	adds	r7, #24
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}
 800ddba:	bf00      	nop
 800ddbc:	20046c60 	.word	0x20046c60
 800ddc0:	20046c74 	.word	0x20046c74

0800ddc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800ddc8:	4b03      	ldr	r3, [pc, #12]	@ (800ddd8 <vTaskMissedYield+0x14>)
 800ddca:	2201      	movs	r2, #1
 800ddcc:	601a      	str	r2, [r3, #0]
}
 800ddce:	bf00      	nop
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr
 800ddd8:	20046c70 	.word	0x20046c70

0800dddc <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b082      	sub	sp, #8
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800dde4:	f000 f84a 	bl	800de7c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dde8:	4b03      	ldr	r3, [pc, #12]	@ (800ddf8 <prvIdleTask+0x1c>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d9f9      	bls.n	800dde4 <prvIdleTask+0x8>
            {
                taskYIELD();
 800ddf0:	f000 fe08 	bl	800ea04 <vPortYield>
        prvCheckTasksWaitingTermination();
 800ddf4:	e7f6      	b.n	800dde4 <prvIdleTask+0x8>
 800ddf6:	bf00      	nop
 800ddf8:	2004678c 	.word	0x2004678c

0800ddfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b082      	sub	sp, #8
 800de00:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de02:	2300      	movs	r3, #0
 800de04:	607b      	str	r3, [r7, #4]
 800de06:	e00c      	b.n	800de22 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800de08:	687a      	ldr	r2, [r7, #4]
 800de0a:	4613      	mov	r3, r2
 800de0c:	009b      	lsls	r3, r3, #2
 800de0e:	4413      	add	r3, r2
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	4a12      	ldr	r2, [pc, #72]	@ (800de5c <prvInitialiseTaskLists+0x60>)
 800de14:	4413      	add	r3, r2
 800de16:	4618      	mov	r0, r3
 800de18:	f7fe f9c0 	bl	800c19c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	3301      	adds	r3, #1
 800de20:	607b      	str	r3, [r7, #4]
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2b37      	cmp	r3, #55	@ 0x37
 800de26:	d9ef      	bls.n	800de08 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800de28:	480d      	ldr	r0, [pc, #52]	@ (800de60 <prvInitialiseTaskLists+0x64>)
 800de2a:	f7fe f9b7 	bl	800c19c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800de2e:	480d      	ldr	r0, [pc, #52]	@ (800de64 <prvInitialiseTaskLists+0x68>)
 800de30:	f7fe f9b4 	bl	800c19c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800de34:	480c      	ldr	r0, [pc, #48]	@ (800de68 <prvInitialiseTaskLists+0x6c>)
 800de36:	f7fe f9b1 	bl	800c19c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800de3a:	480c      	ldr	r0, [pc, #48]	@ (800de6c <prvInitialiseTaskLists+0x70>)
 800de3c:	f7fe f9ae 	bl	800c19c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800de40:	480b      	ldr	r0, [pc, #44]	@ (800de70 <prvInitialiseTaskLists+0x74>)
 800de42:	f7fe f9ab 	bl	800c19c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800de46:	4b0b      	ldr	r3, [pc, #44]	@ (800de74 <prvInitialiseTaskLists+0x78>)
 800de48:	4a05      	ldr	r2, [pc, #20]	@ (800de60 <prvInitialiseTaskLists+0x64>)
 800de4a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800de4c:	4b0a      	ldr	r3, [pc, #40]	@ (800de78 <prvInitialiseTaskLists+0x7c>)
 800de4e:	4a05      	ldr	r2, [pc, #20]	@ (800de64 <prvInitialiseTaskLists+0x68>)
 800de50:	601a      	str	r2, [r3, #0]
}
 800de52:	bf00      	nop
 800de54:	3708      	adds	r7, #8
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	2004678c 	.word	0x2004678c
 800de60:	20046bec 	.word	0x20046bec
 800de64:	20046c00 	.word	0x20046c00
 800de68:	20046c1c 	.word	0x20046c1c
 800de6c:	20046c30 	.word	0x20046c30
 800de70:	20046c48 	.word	0x20046c48
 800de74:	20046c14 	.word	0x20046c14
 800de78:	20046c18 	.word	0x20046c18

0800de7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b082      	sub	sp, #8
 800de80:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de82:	e019      	b.n	800deb8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800de84:	f000 fdd0 	bl	800ea28 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de88:	4b10      	ldr	r3, [pc, #64]	@ (800decc <prvCheckTasksWaitingTermination+0x50>)
 800de8a:	68db      	ldr	r3, [r3, #12]
 800de8c:	68db      	ldr	r3, [r3, #12]
 800de8e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	3304      	adds	r3, #4
 800de94:	4618      	mov	r0, r3
 800de96:	f7fe f9e7 	bl	800c268 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800de9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ded0 <prvCheckTasksWaitingTermination+0x54>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	3b01      	subs	r3, #1
 800dea0:	4a0b      	ldr	r2, [pc, #44]	@ (800ded0 <prvCheckTasksWaitingTermination+0x54>)
 800dea2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800dea4:	4b0b      	ldr	r3, [pc, #44]	@ (800ded4 <prvCheckTasksWaitingTermination+0x58>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	3b01      	subs	r3, #1
 800deaa:	4a0a      	ldr	r2, [pc, #40]	@ (800ded4 <prvCheckTasksWaitingTermination+0x58>)
 800deac:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800deae:	f000 fdcd 	bl	800ea4c <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 f810 	bl	800ded8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800deb8:	4b06      	ldr	r3, [pc, #24]	@ (800ded4 <prvCheckTasksWaitingTermination+0x58>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d1e1      	bne.n	800de84 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800dec0:	bf00      	nop
 800dec2:	bf00      	nop
 800dec4:	3708      	adds	r7, #8
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	20046c30 	.word	0x20046c30
 800ded0:	20046c5c 	.word	0x20046c5c
 800ded4:	20046c44 	.word	0x20046c44

0800ded8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800ded8:	b580      	push	{r7, lr}
 800deda:	b082      	sub	sp, #8
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d108      	bne.n	800defc <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800deee:	4618      	mov	r0, r3
 800def0:	f001 f886 	bl	800f000 <vPortFree>
                vPortFree( pxTCB );
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f001 f883 	bl	800f000 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800defa:	e011      	b.n	800df20 <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800df02:	2b01      	cmp	r3, #1
 800df04:	d103      	bne.n	800df0e <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f001 f87a 	bl	800f000 <vPortFree>
    }
 800df0c:	e008      	b.n	800df20 <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800df14:	2b02      	cmp	r3, #2
 800df16:	d003      	beq.n	800df20 <prvDeleteTCB+0x48>
 800df18:	f000 ff4e 	bl	800edb8 <ulSetInterruptMask>
 800df1c:	bf00      	nop
 800df1e:	e7fd      	b.n	800df1c <prvDeleteTCB+0x44>
    }
 800df20:	bf00      	nop
 800df22:	3708      	adds	r7, #8
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800df28:	b480      	push	{r7}
 800df2a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df2c:	4b0a      	ldr	r3, [pc, #40]	@ (800df58 <prvResetNextTaskUnblockTime+0x30>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d104      	bne.n	800df40 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800df36:	4b09      	ldr	r3, [pc, #36]	@ (800df5c <prvResetNextTaskUnblockTime+0x34>)
 800df38:	f04f 32ff 	mov.w	r2, #4294967295
 800df3c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800df3e:	e005      	b.n	800df4c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800df40:	4b05      	ldr	r3, [pc, #20]	@ (800df58 <prvResetNextTaskUnblockTime+0x30>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	68db      	ldr	r3, [r3, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a04      	ldr	r2, [pc, #16]	@ (800df5c <prvResetNextTaskUnblockTime+0x34>)
 800df4a:	6013      	str	r3, [r2, #0]
}
 800df4c:	bf00      	nop
 800df4e:	46bd      	mov	sp, r7
 800df50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df54:	4770      	bx	lr
 800df56:	bf00      	nop
 800df58:	20046c14 	.word	0x20046c14
 800df5c:	20046c7c 	.word	0x20046c7c

0800df60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800df60:	b480      	push	{r7}
 800df62:	b083      	sub	sp, #12
 800df64:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800df66:	4b0b      	ldr	r3, [pc, #44]	@ (800df94 <xTaskGetSchedulerState+0x34>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d102      	bne.n	800df74 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800df6e:	2301      	movs	r3, #1
 800df70:	607b      	str	r3, [r7, #4]
 800df72:	e008      	b.n	800df86 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800df74:	4b08      	ldr	r3, [pc, #32]	@ (800df98 <xTaskGetSchedulerState+0x38>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d102      	bne.n	800df82 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800df7c:	2302      	movs	r3, #2
 800df7e:	607b      	str	r3, [r7, #4]
 800df80:	e001      	b.n	800df86 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800df82:	2300      	movs	r3, #0
 800df84:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800df86:	687b      	ldr	r3, [r7, #4]
    }
 800df88:	4618      	mov	r0, r3
 800df8a:	370c      	adds	r7, #12
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr
 800df94:	20046c68 	.word	0x20046c68
 800df98:	20046c84 	.word	0x20046c84

0800df9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b086      	sub	sp, #24
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d079      	beq.n	800e0a6 <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfb6:	4b3e      	ldr	r3, [pc, #248]	@ (800e0b0 <xTaskPriorityInherit+0x114>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d269      	bcs.n	800e094 <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	699b      	ldr	r3, [r3, #24]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	db06      	blt.n	800dfd6 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfc8:	4b39      	ldr	r3, [pc, #228]	@ (800e0b0 <xTaskPriorityInherit+0x114>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	6959      	ldr	r1, [r3, #20]
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfde:	4613      	mov	r3, r2
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	4413      	add	r3, r2
 800dfe4:	009b      	lsls	r3, r3, #2
 800dfe6:	4a33      	ldr	r2, [pc, #204]	@ (800e0b4 <xTaskPriorityInherit+0x118>)
 800dfe8:	4413      	add	r3, r2
 800dfea:	4299      	cmp	r1, r3
 800dfec:	d14a      	bne.n	800e084 <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	3304      	adds	r3, #4
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7fe f938 	bl	800c268 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dff8:	4b2d      	ldr	r3, [pc, #180]	@ (800e0b0 <xTaskPriorityInherit+0x114>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e006:	4b2c      	ldr	r3, [pc, #176]	@ (800e0b8 <xTaskPriorityInherit+0x11c>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d903      	bls.n	800e016 <xTaskPriorityInherit+0x7a>
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e012:	4a29      	ldr	r2, [pc, #164]	@ (800e0b8 <xTaskPriorityInherit+0x11c>)
 800e014:	6013      	str	r3, [r2, #0]
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e01a:	4926      	ldr	r1, [pc, #152]	@ (800e0b4 <xTaskPriorityInherit+0x118>)
 800e01c:	4613      	mov	r3, r2
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	4413      	add	r3, r2
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	440b      	add	r3, r1
 800e026:	3304      	adds	r3, #4
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	60fb      	str	r3, [r7, #12]
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	68fa      	ldr	r2, [r7, #12]
 800e030:	609a      	str	r2, [r3, #8]
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	689a      	ldr	r2, [r3, #8]
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	60da      	str	r2, [r3, #12]
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	689b      	ldr	r3, [r3, #8]
 800e03e:	693a      	ldr	r2, [r7, #16]
 800e040:	3204      	adds	r2, #4
 800e042:	605a      	str	r2, [r3, #4]
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	1d1a      	adds	r2, r3, #4
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	609a      	str	r2, [r3, #8]
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e050:	4613      	mov	r3, r2
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	4413      	add	r3, r2
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	4a16      	ldr	r2, [pc, #88]	@ (800e0b4 <xTaskPriorityInherit+0x118>)
 800e05a:	441a      	add	r2, r3
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	615a      	str	r2, [r3, #20]
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e064:	4913      	ldr	r1, [pc, #76]	@ (800e0b4 <xTaskPriorityInherit+0x118>)
 800e066:	4613      	mov	r3, r2
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	4413      	add	r3, r2
 800e06c:	009b      	lsls	r3, r3, #2
 800e06e:	440b      	add	r3, r1
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	1c59      	adds	r1, r3, #1
 800e074:	480f      	ldr	r0, [pc, #60]	@ (800e0b4 <xTaskPriorityInherit+0x118>)
 800e076:	4613      	mov	r3, r2
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	4413      	add	r3, r2
 800e07c:	009b      	lsls	r3, r3, #2
 800e07e:	4403      	add	r3, r0
 800e080:	6019      	str	r1, [r3, #0]
 800e082:	e004      	b.n	800e08e <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e084:	4b0a      	ldr	r3, [pc, #40]	@ (800e0b0 <xTaskPriorityInherit+0x114>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800e08e:	2301      	movs	r3, #1
 800e090:	617b      	str	r3, [r7, #20]
 800e092:	e008      	b.n	800e0a6 <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e098:	4b05      	ldr	r3, [pc, #20]	@ (800e0b0 <xTaskPriorityInherit+0x114>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d201      	bcs.n	800e0a6 <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800e0a6:	697b      	ldr	r3, [r7, #20]
    }
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3718      	adds	r7, #24
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	20046788 	.word	0x20046788
 800e0b4:	2004678c 	.word	0x2004678c
 800e0b8:	20046c64 	.word	0x20046c64

0800e0bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b086      	sub	sp, #24
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d070      	beq.n	800e1b4 <xTaskPriorityDisinherit+0xf8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800e0d2:	4b3b      	ldr	r3, [pc, #236]	@ (800e1c0 <xTaskPriorityDisinherit+0x104>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	693a      	ldr	r2, [r7, #16]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d003      	beq.n	800e0e4 <xTaskPriorityDisinherit+0x28>
 800e0dc:	f000 fe6c 	bl	800edb8 <ulSetInterruptMask>
 800e0e0:	bf00      	nop
 800e0e2:	e7fd      	b.n	800e0e0 <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d103      	bne.n	800e0f4 <xTaskPriorityDisinherit+0x38>
 800e0ec:	f000 fe64 	bl	800edb8 <ulSetInterruptMask>
 800e0f0:	bf00      	nop
 800e0f2:	e7fd      	b.n	800e0f0 <xTaskPriorityDisinherit+0x34>
            ( pxTCB->uxMutexesHeld )--;
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0f8:	1e5a      	subs	r2, r3, #1
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e106:	429a      	cmp	r2, r3
 800e108:	d054      	beq.n	800e1b4 <xTaskPriorityDisinherit+0xf8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d150      	bne.n	800e1b4 <xTaskPriorityDisinherit+0xf8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	3304      	adds	r3, #4
 800e116:	4618      	mov	r0, r3
 800e118:	f7fe f8a6 	bl	800c268 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e128:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e134:	4b23      	ldr	r3, [pc, #140]	@ (800e1c4 <xTaskPriorityDisinherit+0x108>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d903      	bls.n	800e144 <xTaskPriorityDisinherit+0x88>
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e140:	4a20      	ldr	r2, [pc, #128]	@ (800e1c4 <xTaskPriorityDisinherit+0x108>)
 800e142:	6013      	str	r3, [r2, #0]
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e148:	491f      	ldr	r1, [pc, #124]	@ (800e1c8 <xTaskPriorityDisinherit+0x10c>)
 800e14a:	4613      	mov	r3, r2
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	4413      	add	r3, r2
 800e150:	009b      	lsls	r3, r3, #2
 800e152:	440b      	add	r3, r1
 800e154:	3304      	adds	r3, #4
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	60fb      	str	r3, [r7, #12]
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	68fa      	ldr	r2, [r7, #12]
 800e15e:	609a      	str	r2, [r3, #8]
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	689a      	ldr	r2, [r3, #8]
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	60da      	str	r2, [r3, #12]
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	689b      	ldr	r3, [r3, #8]
 800e16c:	693a      	ldr	r2, [r7, #16]
 800e16e:	3204      	adds	r2, #4
 800e170:	605a      	str	r2, [r3, #4]
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	1d1a      	adds	r2, r3, #4
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	609a      	str	r2, [r3, #8]
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e17e:	4613      	mov	r3, r2
 800e180:	009b      	lsls	r3, r3, #2
 800e182:	4413      	add	r3, r2
 800e184:	009b      	lsls	r3, r3, #2
 800e186:	4a10      	ldr	r2, [pc, #64]	@ (800e1c8 <xTaskPriorityDisinherit+0x10c>)
 800e188:	441a      	add	r2, r3
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	615a      	str	r2, [r3, #20]
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e192:	490d      	ldr	r1, [pc, #52]	@ (800e1c8 <xTaskPriorityDisinherit+0x10c>)
 800e194:	4613      	mov	r3, r2
 800e196:	009b      	lsls	r3, r3, #2
 800e198:	4413      	add	r3, r2
 800e19a:	009b      	lsls	r3, r3, #2
 800e19c:	440b      	add	r3, r1
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	1c59      	adds	r1, r3, #1
 800e1a2:	4809      	ldr	r0, [pc, #36]	@ (800e1c8 <xTaskPriorityDisinherit+0x10c>)
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	009b      	lsls	r3, r3, #2
 800e1a8:	4413      	add	r3, r2
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	4403      	add	r3, r0
 800e1ae:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800e1b4:	697b      	ldr	r3, [r7, #20]
    }
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3718      	adds	r7, #24
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	bf00      	nop
 800e1c0:	20046788 	.word	0x20046788
 800e1c4:	20046c64 	.word	0x20046c64
 800e1c8:	2004678c 	.word	0x2004678c

0800e1cc <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b088      	sub	sp, #32
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e1da:	2301      	movs	r3, #1
 800e1dc:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	f000 8085 	beq.w	800e2f0 <vTaskPriorityDisinheritAfterTimeout+0x124>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800e1e6:	69bb      	ldr	r3, [r7, #24]
 800e1e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d103      	bne.n	800e1f6 <vTaskPriorityDisinheritAfterTimeout+0x2a>
 800e1ee:	f000 fde3 	bl	800edb8 <ulSetInterruptMask>
 800e1f2:	bf00      	nop
 800e1f4:	e7fd      	b.n	800e1f2 <vTaskPriorityDisinheritAfterTimeout+0x26>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e1f6:	69bb      	ldr	r3, [r7, #24]
 800e1f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1fa:	683a      	ldr	r2, [r7, #0]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d902      	bls.n	800e206 <vTaskPriorityDisinheritAfterTimeout+0x3a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	61fb      	str	r3, [r7, #28]
 800e204:	e002      	b.n	800e20c <vTaskPriorityDisinheritAfterTimeout+0x40>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e20a:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800e20c:	69bb      	ldr	r3, [r7, #24]
 800e20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e210:	69fa      	ldr	r2, [r7, #28]
 800e212:	429a      	cmp	r2, r3
 800e214:	d06c      	beq.n	800e2f0 <vTaskPriorityDisinheritAfterTimeout+0x124>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e216:	69bb      	ldr	r3, [r7, #24]
 800e218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e21a:	697a      	ldr	r2, [r7, #20]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d167      	bne.n	800e2f0 <vTaskPriorityDisinheritAfterTimeout+0x124>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800e220:	4b35      	ldr	r3, [pc, #212]	@ (800e2f8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	69ba      	ldr	r2, [r7, #24]
 800e226:	429a      	cmp	r2, r3
 800e228:	d103      	bne.n	800e232 <vTaskPriorityDisinheritAfterTimeout+0x66>
 800e22a:	f000 fdc5 	bl	800edb8 <ulSetInterruptMask>
 800e22e:	bf00      	nop
 800e230:	e7fd      	b.n	800e22e <vTaskPriorityDisinheritAfterTimeout+0x62>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e232:	69bb      	ldr	r3, [r7, #24]
 800e234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e236:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800e238:	69bb      	ldr	r3, [r7, #24]
 800e23a:	69fa      	ldr	r2, [r7, #28]
 800e23c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e23e:	69bb      	ldr	r3, [r7, #24]
 800e240:	699b      	ldr	r3, [r3, #24]
 800e242:	2b00      	cmp	r3, #0
 800e244:	db04      	blt.n	800e250 <vTaskPriorityDisinheritAfterTimeout+0x84>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e246:	69fb      	ldr	r3, [r7, #28]
 800e248:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e24c:	69bb      	ldr	r3, [r7, #24]
 800e24e:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e250:	69bb      	ldr	r3, [r7, #24]
 800e252:	6959      	ldr	r1, [r3, #20]
 800e254:	693a      	ldr	r2, [r7, #16]
 800e256:	4613      	mov	r3, r2
 800e258:	009b      	lsls	r3, r3, #2
 800e25a:	4413      	add	r3, r2
 800e25c:	009b      	lsls	r3, r3, #2
 800e25e:	4a27      	ldr	r2, [pc, #156]	@ (800e2fc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e260:	4413      	add	r3, r2
 800e262:	4299      	cmp	r1, r3
 800e264:	d144      	bne.n	800e2f0 <vTaskPriorityDisinheritAfterTimeout+0x124>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e266:	69bb      	ldr	r3, [r7, #24]
 800e268:	3304      	adds	r3, #4
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7fd fffc 	bl	800c268 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800e270:	69bb      	ldr	r3, [r7, #24]
 800e272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e274:	4b22      	ldr	r3, [pc, #136]	@ (800e300 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	429a      	cmp	r2, r3
 800e27a:	d903      	bls.n	800e284 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800e27c:	69bb      	ldr	r3, [r7, #24]
 800e27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e280:	4a1f      	ldr	r2, [pc, #124]	@ (800e300 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e282:	6013      	str	r3, [r2, #0]
 800e284:	69bb      	ldr	r3, [r7, #24]
 800e286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e288:	491c      	ldr	r1, [pc, #112]	@ (800e2fc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e28a:	4613      	mov	r3, r2
 800e28c:	009b      	lsls	r3, r3, #2
 800e28e:	4413      	add	r3, r2
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	440b      	add	r3, r1
 800e294:	3304      	adds	r3, #4
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	60fb      	str	r3, [r7, #12]
 800e29a:	69bb      	ldr	r3, [r7, #24]
 800e29c:	68fa      	ldr	r2, [r7, #12]
 800e29e:	609a      	str	r2, [r3, #8]
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	689a      	ldr	r2, [r3, #8]
 800e2a4:	69bb      	ldr	r3, [r7, #24]
 800e2a6:	60da      	str	r2, [r3, #12]
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	689b      	ldr	r3, [r3, #8]
 800e2ac:	69ba      	ldr	r2, [r7, #24]
 800e2ae:	3204      	adds	r2, #4
 800e2b0:	605a      	str	r2, [r3, #4]
 800e2b2:	69bb      	ldr	r3, [r7, #24]
 800e2b4:	1d1a      	adds	r2, r3, #4
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	609a      	str	r2, [r3, #8]
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2be:	4613      	mov	r3, r2
 800e2c0:	009b      	lsls	r3, r3, #2
 800e2c2:	4413      	add	r3, r2
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	4a0d      	ldr	r2, [pc, #52]	@ (800e2fc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e2c8:	441a      	add	r2, r3
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	615a      	str	r2, [r3, #20]
 800e2ce:	69bb      	ldr	r3, [r7, #24]
 800e2d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2d2:	490a      	ldr	r1, [pc, #40]	@ (800e2fc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e2d4:	4613      	mov	r3, r2
 800e2d6:	009b      	lsls	r3, r3, #2
 800e2d8:	4413      	add	r3, r2
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	440b      	add	r3, r1
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	1c59      	adds	r1, r3, #1
 800e2e2:	4806      	ldr	r0, [pc, #24]	@ (800e2fc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e2e4:	4613      	mov	r3, r2
 800e2e6:	009b      	lsls	r3, r3, #2
 800e2e8:	4413      	add	r3, r2
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	4403      	add	r3, r0
 800e2ee:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800e2f0:	bf00      	nop
 800e2f2:	3720      	adds	r7, #32
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}
 800e2f8:	20046788 	.word	0x20046788
 800e2fc:	2004678c 	.word	0x2004678c
 800e300:	20046c64 	.word	0x20046c64

0800e304 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800e304:	b480      	push	{r7}
 800e306:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800e308:	4b07      	ldr	r3, [pc, #28]	@ (800e328 <pvTaskIncrementMutexHeldCount+0x24>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d004      	beq.n	800e31a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800e310:	4b05      	ldr	r3, [pc, #20]	@ (800e328 <pvTaskIncrementMutexHeldCount+0x24>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e316:	3201      	adds	r2, #1
 800e318:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
 800e31a:	4b03      	ldr	r3, [pc, #12]	@ (800e328 <pvTaskIncrementMutexHeldCount+0x24>)
 800e31c:	681b      	ldr	r3, [r3, #0]
    }
 800e31e:	4618      	mov	r0, r3
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr
 800e328:	20046788 	.word	0x20046788

0800e32c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b086      	sub	sp, #24
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800e336:	4b2e      	ldr	r3, [pc, #184]	@ (800e3f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e33c:	4b2d      	ldr	r3, [pc, #180]	@ (800e3f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	3304      	adds	r3, #4
 800e342:	4618      	mov	r0, r3
 800e344:	f7fd ff90 	bl	800c268 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e34e:	d124      	bne.n	800e39a <prvAddCurrentTaskToDelayedList+0x6e>
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d021      	beq.n	800e39a <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e356:	4b28      	ldr	r3, [pc, #160]	@ (800e3f8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	613b      	str	r3, [r7, #16]
 800e35c:	4b25      	ldr	r3, [pc, #148]	@ (800e3f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	693a      	ldr	r2, [r7, #16]
 800e362:	609a      	str	r2, [r3, #8]
 800e364:	4b23      	ldr	r3, [pc, #140]	@ (800e3f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	693a      	ldr	r2, [r7, #16]
 800e36a:	6892      	ldr	r2, [r2, #8]
 800e36c:	60da      	str	r2, [r3, #12]
 800e36e:	4b21      	ldr	r3, [pc, #132]	@ (800e3f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e370:	681a      	ldr	r2, [r3, #0]
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	689b      	ldr	r3, [r3, #8]
 800e376:	3204      	adds	r2, #4
 800e378:	605a      	str	r2, [r3, #4]
 800e37a:	4b1e      	ldr	r3, [pc, #120]	@ (800e3f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	1d1a      	adds	r2, r3, #4
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	609a      	str	r2, [r3, #8]
 800e384:	4b1b      	ldr	r3, [pc, #108]	@ (800e3f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	4a1b      	ldr	r2, [pc, #108]	@ (800e3f8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e38a:	615a      	str	r2, [r3, #20]
 800e38c:	4b1a      	ldr	r3, [pc, #104]	@ (800e3f8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	3301      	adds	r3, #1
 800e392:	4a19      	ldr	r2, [pc, #100]	@ (800e3f8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e394:	6013      	str	r3, [r2, #0]
 800e396:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800e398:	e026      	b.n	800e3e8 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800e39a:	697a      	ldr	r2, [r7, #20]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	4413      	add	r3, r2
 800e3a0:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e3a2:	4b14      	ldr	r3, [pc, #80]	@ (800e3f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	68fa      	ldr	r2, [r7, #12]
 800e3a8:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800e3aa:	68fa      	ldr	r2, [r7, #12]
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d209      	bcs.n	800e3c6 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3b2:	4b12      	ldr	r3, [pc, #72]	@ (800e3fc <prvAddCurrentTaskToDelayedList+0xd0>)
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	4b0f      	ldr	r3, [pc, #60]	@ (800e3f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	3304      	adds	r3, #4
 800e3bc:	4619      	mov	r1, r3
 800e3be:	4610      	mov	r0, r2
 800e3c0:	f7fd ff19 	bl	800c1f6 <vListInsert>
}
 800e3c4:	e010      	b.n	800e3e8 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3c6:	4b0e      	ldr	r3, [pc, #56]	@ (800e400 <prvAddCurrentTaskToDelayedList+0xd4>)
 800e3c8:	681a      	ldr	r2, [r3, #0]
 800e3ca:	4b0a      	ldr	r3, [pc, #40]	@ (800e3f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	3304      	adds	r3, #4
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	4610      	mov	r0, r2
 800e3d4:	f7fd ff0f 	bl	800c1f6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800e3d8:	4b0a      	ldr	r3, [pc, #40]	@ (800e404 <prvAddCurrentTaskToDelayedList+0xd8>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	68fa      	ldr	r2, [r7, #12]
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d202      	bcs.n	800e3e8 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800e3e2:	4a08      	ldr	r2, [pc, #32]	@ (800e404 <prvAddCurrentTaskToDelayedList+0xd8>)
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	6013      	str	r3, [r2, #0]
}
 800e3e8:	bf00      	nop
 800e3ea:	3718      	adds	r7, #24
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	20046c60 	.word	0x20046c60
 800e3f4:	20046788 	.word	0x20046788
 800e3f8:	20046c48 	.word	0x20046c48
 800e3fc:	20046c18 	.word	0x20046c18
 800e400:	20046c14 	.word	0x20046c14
 800e404:	20046c7c 	.word	0x20046c7c

0800e408 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800e408:	b580      	push	{r7, lr}
 800e40a:	b088      	sub	sp, #32
 800e40c:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800e40e:	2300      	movs	r3, #0
 800e410:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800e412:	f000 fa5f 	bl	800e8d4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800e416:	4b18      	ldr	r3, [pc, #96]	@ (800e478 <xTimerCreateTimerTask+0x70>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d020      	beq.n	800e460 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800e41e:	2300      	movs	r3, #0
 800e420:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800e422:	2300      	movs	r3, #0
 800e424:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e426:	463a      	mov	r2, r7
 800e428:	1d39      	adds	r1, r7, #4
 800e42a:	f107 0308 	add.w	r3, r7, #8
 800e42e:	4618      	mov	r0, r3
 800e430:	f7fd fe9a 	bl	800c168 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800e434:	6839      	ldr	r1, [r7, #0]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	68ba      	ldr	r2, [r7, #8]
 800e43a:	9202      	str	r2, [sp, #8]
 800e43c:	9301      	str	r3, [sp, #4]
 800e43e:	2302      	movs	r3, #2
 800e440:	9300      	str	r3, [sp, #0]
 800e442:	2300      	movs	r3, #0
 800e444:	460a      	mov	r2, r1
 800e446:	490d      	ldr	r1, [pc, #52]	@ (800e47c <xTimerCreateTimerTask+0x74>)
 800e448:	480d      	ldr	r0, [pc, #52]	@ (800e480 <xTimerCreateTimerTask+0x78>)
 800e44a:	f7fe fe7b 	bl	800d144 <xTaskCreateStatic>
 800e44e:	4603      	mov	r3, r0
 800e450:	4a0c      	ldr	r2, [pc, #48]	@ (800e484 <xTimerCreateTimerTask+0x7c>)
 800e452:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800e454:	4b0b      	ldr	r3, [pc, #44]	@ (800e484 <xTimerCreateTimerTask+0x7c>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d001      	beq.n	800e460 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800e45c:	2301      	movs	r3, #1
 800e45e:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d103      	bne.n	800e46e <xTimerCreateTimerTask+0x66>
 800e466:	f000 fca7 	bl	800edb8 <ulSetInterruptMask>
 800e46a:	bf00      	nop
 800e46c:	e7fd      	b.n	800e46a <xTimerCreateTimerTask+0x62>
        return xReturn;
 800e46e:	68fb      	ldr	r3, [r7, #12]
    }
 800e470:	4618      	mov	r0, r3
 800e472:	3710      	adds	r7, #16
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	20046cb8 	.word	0x20046cb8
 800e47c:	0802cbd8 	.word	0x0802cbd8
 800e480:	0800e52d 	.word	0x0800e52d
 800e484:	20046cbc 	.word	0x20046cbc

0800e488 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800e488:	b580      	push	{r7, lr}
 800e48a:	b084      	sub	sp, #16
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	60b9      	str	r1, [r7, #8]
 800e492:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800e494:	e008      	b.n	800e4a8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	699b      	ldr	r3, [r3, #24]
 800e49a:	68ba      	ldr	r2, [r7, #8]
 800e49c:	4413      	add	r3, r2
 800e49e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	6a1b      	ldr	r3, [r3, #32]
 800e4a4:	68f8      	ldr	r0, [r7, #12]
 800e4a6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	699a      	ldr	r2, [r3, #24]
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	18d1      	adds	r1, r2, r3
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	68f8      	ldr	r0, [r7, #12]
 800e4b6:	f000 f8d7 	bl	800e668 <prvInsertTimerInActiveList>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d1ea      	bne.n	800e496 <prvReloadTimer+0xe>
        }
    }
 800e4c0:	bf00      	nop
 800e4c2:	bf00      	nop
 800e4c4:	3710      	adds	r7, #16
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
	...

0800e4cc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b084      	sub	sp, #16
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4d6:	4b14      	ldr	r3, [pc, #80]	@ (800e528 <prvProcessExpiredTimer+0x5c>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	68db      	ldr	r3, [r3, #12]
 800e4dc:	68db      	ldr	r3, [r3, #12]
 800e4de:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	3304      	adds	r3, #4
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7fd febf 	bl	800c268 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e4f0:	f003 0304 	and.w	r3, r3, #4
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d005      	beq.n	800e504 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800e4f8:	683a      	ldr	r2, [r7, #0]
 800e4fa:	6879      	ldr	r1, [r7, #4]
 800e4fc:	68f8      	ldr	r0, [r7, #12]
 800e4fe:	f7ff ffc3 	bl	800e488 <prvReloadTimer>
 800e502:	e008      	b.n	800e516 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e50a:	f023 0301 	bic.w	r3, r3, #1
 800e50e:	b2da      	uxtb	r2, r3
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	6a1b      	ldr	r3, [r3, #32]
 800e51a:	68f8      	ldr	r0, [r7, #12]
 800e51c:	4798      	blx	r3
    }
 800e51e:	bf00      	nop
 800e520:	3710      	adds	r7, #16
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	20046cb0 	.word	0x20046cb0

0800e52c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e534:	f107 0308 	add.w	r3, r7, #8
 800e538:	4618      	mov	r0, r3
 800e53a:	f000 f851 	bl	800e5e0 <prvGetNextExpireTime>
 800e53e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	4619      	mov	r1, r3
 800e544:	68f8      	ldr	r0, [r7, #12]
 800e546:	f000 f805 	bl	800e554 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800e54a:	f000 f8cf 	bl	800e6ec <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e54e:	bf00      	nop
 800e550:	e7f0      	b.n	800e534 <prvTimerTask+0x8>
	...

0800e554 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800e554:	b580      	push	{r7, lr}
 800e556:	b084      	sub	sp, #16
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800e55e:	f7ff f81d 	bl	800d59c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e562:	f107 0308 	add.w	r3, r7, #8
 800e566:	4618      	mov	r0, r3
 800e568:	f000 f85e 	bl	800e628 <prvSampleTimeNow>
 800e56c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d12a      	bne.n	800e5ca <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d10a      	bne.n	800e590 <prvProcessTimerOrBlockTask+0x3c>
 800e57a:	687a      	ldr	r2, [r7, #4]
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	429a      	cmp	r2, r3
 800e580:	d806      	bhi.n	800e590 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800e582:	f7ff f819 	bl	800d5b8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e586:	68f9      	ldr	r1, [r7, #12]
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f7ff ff9f 	bl	800e4cc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800e58e:	e01e      	b.n	800e5ce <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d008      	beq.n	800e5a8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e596:	4b10      	ldr	r3, [pc, #64]	@ (800e5d8 <prvProcessTimerOrBlockTask+0x84>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d101      	bne.n	800e5a4 <prvProcessTimerOrBlockTask+0x50>
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	e000      	b.n	800e5a6 <prvProcessTimerOrBlockTask+0x52>
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e5a8:	4b0c      	ldr	r3, [pc, #48]	@ (800e5dc <prvProcessTimerOrBlockTask+0x88>)
 800e5aa:	6818      	ldr	r0, [r3, #0]
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	1ad3      	subs	r3, r2, r3
 800e5b2:	683a      	ldr	r2, [r7, #0]
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	f7fe fd91 	bl	800d0dc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800e5ba:	f7fe fffd 	bl	800d5b8 <xTaskResumeAll>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d104      	bne.n	800e5ce <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800e5c4:	f000 fa1e 	bl	800ea04 <vPortYield>
    }
 800e5c8:	e001      	b.n	800e5ce <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800e5ca:	f7fe fff5 	bl	800d5b8 <xTaskResumeAll>
    }
 800e5ce:	bf00      	nop
 800e5d0:	3710      	adds	r7, #16
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}
 800e5d6:	bf00      	nop
 800e5d8:	20046cb4 	.word	0x20046cb4
 800e5dc:	20046cb8 	.word	0x20046cb8

0800e5e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800e5e0:	b480      	push	{r7}
 800e5e2:	b085      	sub	sp, #20
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e5e8:	4b0e      	ldr	r3, [pc, #56]	@ (800e624 <prvGetNextExpireTime+0x44>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d101      	bne.n	800e5f6 <prvGetNextExpireTime+0x16>
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	e000      	b.n	800e5f8 <prvGetNextExpireTime+0x18>
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d105      	bne.n	800e610 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e604:	4b07      	ldr	r3, [pc, #28]	@ (800e624 <prvGetNextExpireTime+0x44>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	68db      	ldr	r3, [r3, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	60fb      	str	r3, [r7, #12]
 800e60e:	e001      	b.n	800e614 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800e610:	2300      	movs	r3, #0
 800e612:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800e614:	68fb      	ldr	r3, [r7, #12]
    }
 800e616:	4618      	mov	r0, r3
 800e618:	3714      	adds	r7, #20
 800e61a:	46bd      	mov	sp, r7
 800e61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e620:	4770      	bx	lr
 800e622:	bf00      	nop
 800e624:	20046cb0 	.word	0x20046cb0

0800e628 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800e630:	f7ff f8b0 	bl	800d794 <xTaskGetTickCount>
 800e634:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800e636:	4b0b      	ldr	r3, [pc, #44]	@ (800e664 <prvSampleTimeNow+0x3c>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	68fa      	ldr	r2, [r7, #12]
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d205      	bcs.n	800e64c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800e640:	f000 f922 	bl	800e888 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2201      	movs	r2, #1
 800e648:	601a      	str	r2, [r3, #0]
 800e64a:	e002      	b.n	800e652 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2200      	movs	r2, #0
 800e650:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800e652:	4a04      	ldr	r2, [pc, #16]	@ (800e664 <prvSampleTimeNow+0x3c>)
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800e658:	68fb      	ldr	r3, [r7, #12]
    }
 800e65a:	4618      	mov	r0, r3
 800e65c:	3710      	adds	r7, #16
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}
 800e662:	bf00      	nop
 800e664:	20046cc0 	.word	0x20046cc0

0800e668 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800e668:	b580      	push	{r7, lr}
 800e66a:	b086      	sub	sp, #24
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	60f8      	str	r0, [r7, #12]
 800e670:	60b9      	str	r1, [r7, #8]
 800e672:	607a      	str	r2, [r7, #4]
 800e674:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800e676:	2300      	movs	r3, #0
 800e678:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	68ba      	ldr	r2, [r7, #8]
 800e67e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	68fa      	ldr	r2, [r7, #12]
 800e684:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800e686:	68ba      	ldr	r2, [r7, #8]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d812      	bhi.n	800e6b4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e68e:	687a      	ldr	r2, [r7, #4]
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	1ad2      	subs	r2, r2, r3
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	699b      	ldr	r3, [r3, #24]
 800e698:	429a      	cmp	r2, r3
 800e69a:	d302      	bcc.n	800e6a2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800e69c:	2301      	movs	r3, #1
 800e69e:	617b      	str	r3, [r7, #20]
 800e6a0:	e01b      	b.n	800e6da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e6a2:	4b10      	ldr	r3, [pc, #64]	@ (800e6e4 <prvInsertTimerInActiveList+0x7c>)
 800e6a4:	681a      	ldr	r2, [r3, #0]
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	3304      	adds	r3, #4
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	4610      	mov	r0, r2
 800e6ae:	f7fd fda2 	bl	800c1f6 <vListInsert>
 800e6b2:	e012      	b.n	800e6da <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d206      	bcs.n	800e6ca <prvInsertTimerInActiveList+0x62>
 800e6bc:	68ba      	ldr	r2, [r7, #8]
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d302      	bcc.n	800e6ca <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	617b      	str	r3, [r7, #20]
 800e6c8:	e007      	b.n	800e6da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e6ca:	4b07      	ldr	r3, [pc, #28]	@ (800e6e8 <prvInsertTimerInActiveList+0x80>)
 800e6cc:	681a      	ldr	r2, [r3, #0]
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	3304      	adds	r3, #4
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	4610      	mov	r0, r2
 800e6d6:	f7fd fd8e 	bl	800c1f6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800e6da:	697b      	ldr	r3, [r7, #20]
    }
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3718      	adds	r7, #24
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}
 800e6e4:	20046cb4 	.word	0x20046cb4
 800e6e8:	20046cb0 	.word	0x20046cb0

0800e6ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b088      	sub	sp, #32
 800e6f0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e6f2:	e0b7      	b.n	800e864 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	da11      	bge.n	800e71e <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e6fa:	1d3b      	adds	r3, r7, #4
 800e6fc:	3304      	adds	r3, #4
 800e6fe:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800e700:	69fb      	ldr	r3, [r7, #28]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d103      	bne.n	800e70e <prvProcessReceivedCommands+0x22>
 800e706:	f000 fb57 	bl	800edb8 <ulSetInterruptMask>
 800e70a:	bf00      	nop
 800e70c:	e7fd      	b.n	800e70a <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e70e:	69fb      	ldr	r3, [r7, #28]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	69fa      	ldr	r2, [r7, #28]
 800e714:	6850      	ldr	r0, [r2, #4]
 800e716:	69fa      	ldr	r2, [r7, #28]
 800e718:	6892      	ldr	r2, [r2, #8]
 800e71a:	4611      	mov	r1, r2
 800e71c:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2b00      	cmp	r3, #0
 800e722:	f2c0 809f 	blt.w	800e864 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e72a:	69bb      	ldr	r3, [r7, #24]
 800e72c:	695b      	ldr	r3, [r3, #20]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d004      	beq.n	800e73c <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e732:	69bb      	ldr	r3, [r7, #24]
 800e734:	3304      	adds	r3, #4
 800e736:	4618      	mov	r0, r3
 800e738:	f7fd fd96 	bl	800c268 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e73c:	463b      	mov	r3, r7
 800e73e:	4618      	mov	r0, r3
 800e740:	f7ff ff72 	bl	800e628 <prvSampleTimeNow>
 800e744:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	3b01      	subs	r3, #1
 800e74a:	2b08      	cmp	r3, #8
 800e74c:	f200 8087 	bhi.w	800e85e <prvProcessReceivedCommands+0x172>
 800e750:	a201      	add	r2, pc, #4	@ (adr r2, 800e758 <prvProcessReceivedCommands+0x6c>)
 800e752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e756:	bf00      	nop
 800e758:	0800e77d 	.word	0x0800e77d
 800e75c:	0800e77d 	.word	0x0800e77d
 800e760:	0800e7e5 	.word	0x0800e7e5
 800e764:	0800e7f9 	.word	0x0800e7f9
 800e768:	0800e835 	.word	0x0800e835
 800e76c:	0800e77d 	.word	0x0800e77d
 800e770:	0800e77d 	.word	0x0800e77d
 800e774:	0800e7e5 	.word	0x0800e7e5
 800e778:	0800e7f9 	.word	0x0800e7f9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e77c:	69bb      	ldr	r3, [r7, #24]
 800e77e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e782:	f043 0301 	orr.w	r3, r3, #1
 800e786:	b2da      	uxtb	r2, r3
 800e788:	69bb      	ldr	r3, [r7, #24]
 800e78a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e78e:	68ba      	ldr	r2, [r7, #8]
 800e790:	69bb      	ldr	r3, [r7, #24]
 800e792:	699b      	ldr	r3, [r3, #24]
 800e794:	18d1      	adds	r1, r2, r3
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	697a      	ldr	r2, [r7, #20]
 800e79a:	69b8      	ldr	r0, [r7, #24]
 800e79c:	f7ff ff64 	bl	800e668 <prvInsertTimerInActiveList>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d05d      	beq.n	800e862 <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e7a6:	69bb      	ldr	r3, [r7, #24]
 800e7a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e7ac:	f003 0304 	and.w	r3, r3, #4
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d009      	beq.n	800e7c8 <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800e7b4:	68ba      	ldr	r2, [r7, #8]
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	699b      	ldr	r3, [r3, #24]
 800e7ba:	4413      	add	r3, r2
 800e7bc:	697a      	ldr	r2, [r7, #20]
 800e7be:	4619      	mov	r1, r3
 800e7c0:	69b8      	ldr	r0, [r7, #24]
 800e7c2:	f7ff fe61 	bl	800e488 <prvReloadTimer>
 800e7c6:	e008      	b.n	800e7da <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e7c8:	69bb      	ldr	r3, [r7, #24]
 800e7ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e7ce:	f023 0301 	bic.w	r3, r3, #1
 800e7d2:	b2da      	uxtb	r2, r3
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7da:	69bb      	ldr	r3, [r7, #24]
 800e7dc:	6a1b      	ldr	r3, [r3, #32]
 800e7de:	69b8      	ldr	r0, [r7, #24]
 800e7e0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800e7e2:	e03e      	b.n	800e862 <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e7ea:	f023 0301 	bic.w	r3, r3, #1
 800e7ee:	b2da      	uxtb	r2, r3
 800e7f0:	69bb      	ldr	r3, [r7, #24]
 800e7f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800e7f6:	e035      	b.n	800e864 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e7f8:	69bb      	ldr	r3, [r7, #24]
 800e7fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e7fe:	f043 0301 	orr.w	r3, r3, #1
 800e802:	b2da      	uxtb	r2, r3
 800e804:	69bb      	ldr	r3, [r7, #24]
 800e806:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e80a:	68ba      	ldr	r2, [r7, #8]
 800e80c:	69bb      	ldr	r3, [r7, #24]
 800e80e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	699b      	ldr	r3, [r3, #24]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d103      	bne.n	800e820 <prvProcessReceivedCommands+0x134>
 800e818:	f000 face 	bl	800edb8 <ulSetInterruptMask>
 800e81c:	bf00      	nop
 800e81e:	e7fd      	b.n	800e81c <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e820:	69bb      	ldr	r3, [r7, #24]
 800e822:	699a      	ldr	r2, [r3, #24]
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	18d1      	adds	r1, r2, r3
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	697a      	ldr	r2, [r7, #20]
 800e82c:	69b8      	ldr	r0, [r7, #24]
 800e82e:	f7ff ff1b 	bl	800e668 <prvInsertTimerInActiveList>
                        break;
 800e832:	e017      	b.n	800e864 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e834:	69bb      	ldr	r3, [r7, #24]
 800e836:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e83a:	f003 0302 	and.w	r3, r3, #2
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d103      	bne.n	800e84a <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 800e842:	69b8      	ldr	r0, [r7, #24]
 800e844:	f000 fbdc 	bl	800f000 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800e848:	e00c      	b.n	800e864 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e84a:	69bb      	ldr	r3, [r7, #24]
 800e84c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e850:	f023 0301 	bic.w	r3, r3, #1
 800e854:	b2da      	uxtb	r2, r3
 800e856:	69bb      	ldr	r3, [r7, #24]
 800e858:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800e85c:	e002      	b.n	800e864 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 800e85e:	bf00      	nop
 800e860:	e000      	b.n	800e864 <prvProcessReceivedCommands+0x178>
                        break;
 800e862:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e864:	4b07      	ldr	r3, [pc, #28]	@ (800e884 <prvProcessReceivedCommands+0x198>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	1d39      	adds	r1, r7, #4
 800e86a:	2200      	movs	r2, #0
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7fe f872 	bl	800c956 <xQueueReceive>
 800e872:	4603      	mov	r3, r0
 800e874:	2b00      	cmp	r3, #0
 800e876:	f47f af3d 	bne.w	800e6f4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800e87a:	bf00      	nop
 800e87c:	bf00      	nop
 800e87e:	3720      	adds	r7, #32
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}
 800e884:	20046cb8 	.word	0x20046cb8

0800e888 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800e888:	b580      	push	{r7, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e88e:	e009      	b.n	800e8a4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e890:	4b0e      	ldr	r3, [pc, #56]	@ (800e8cc <prvSwitchTimerLists+0x44>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	68db      	ldr	r3, [r3, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800e89a:	f04f 31ff 	mov.w	r1, #4294967295
 800e89e:	6838      	ldr	r0, [r7, #0]
 800e8a0:	f7ff fe14 	bl	800e4cc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e8a4:	4b09      	ldr	r3, [pc, #36]	@ (800e8cc <prvSwitchTimerLists+0x44>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d1f0      	bne.n	800e890 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800e8ae:	4b07      	ldr	r3, [pc, #28]	@ (800e8cc <prvSwitchTimerLists+0x44>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800e8b4:	4b06      	ldr	r3, [pc, #24]	@ (800e8d0 <prvSwitchTimerLists+0x48>)
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	4a04      	ldr	r2, [pc, #16]	@ (800e8cc <prvSwitchTimerLists+0x44>)
 800e8ba:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800e8bc:	4a04      	ldr	r2, [pc, #16]	@ (800e8d0 <prvSwitchTimerLists+0x48>)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6013      	str	r3, [r2, #0]
    }
 800e8c2:	bf00      	nop
 800e8c4:	3708      	adds	r7, #8
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	20046cb0 	.word	0x20046cb0
 800e8d0:	20046cb4 	.word	0x20046cb4

0800e8d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b082      	sub	sp, #8
 800e8d8:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800e8da:	f000 f8a5 	bl	800ea28 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800e8de:	4b15      	ldr	r3, [pc, #84]	@ (800e934 <prvCheckForValidListAndQueue+0x60>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d120      	bne.n	800e928 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800e8e6:	4814      	ldr	r0, [pc, #80]	@ (800e938 <prvCheckForValidListAndQueue+0x64>)
 800e8e8:	f7fd fc58 	bl	800c19c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800e8ec:	4813      	ldr	r0, [pc, #76]	@ (800e93c <prvCheckForValidListAndQueue+0x68>)
 800e8ee:	f7fd fc55 	bl	800c19c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800e8f2:	4b13      	ldr	r3, [pc, #76]	@ (800e940 <prvCheckForValidListAndQueue+0x6c>)
 800e8f4:	4a10      	ldr	r2, [pc, #64]	@ (800e938 <prvCheckForValidListAndQueue+0x64>)
 800e8f6:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800e8f8:	4b12      	ldr	r3, [pc, #72]	@ (800e944 <prvCheckForValidListAndQueue+0x70>)
 800e8fa:	4a10      	ldr	r2, [pc, #64]	@ (800e93c <prvCheckForValidListAndQueue+0x68>)
 800e8fc:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e8fe:	2300      	movs	r3, #0
 800e900:	9300      	str	r3, [sp, #0]
 800e902:	4b11      	ldr	r3, [pc, #68]	@ (800e948 <prvCheckForValidListAndQueue+0x74>)
 800e904:	4a11      	ldr	r2, [pc, #68]	@ (800e94c <prvCheckForValidListAndQueue+0x78>)
 800e906:	2110      	movs	r1, #16
 800e908:	200a      	movs	r0, #10
 800e90a:	f7fd fd50 	bl	800c3ae <xQueueGenericCreateStatic>
 800e90e:	4603      	mov	r3, r0
 800e910:	4a08      	ldr	r2, [pc, #32]	@ (800e934 <prvCheckForValidListAndQueue+0x60>)
 800e912:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800e914:	4b07      	ldr	r3, [pc, #28]	@ (800e934 <prvCheckForValidListAndQueue+0x60>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d005      	beq.n	800e928 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e91c:	4b05      	ldr	r3, [pc, #20]	@ (800e934 <prvCheckForValidListAndQueue+0x60>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	490b      	ldr	r1, [pc, #44]	@ (800e950 <prvCheckForValidListAndQueue+0x7c>)
 800e922:	4618      	mov	r0, r3
 800e924:	f7fe fb64 	bl	800cff0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800e928:	f000 f890 	bl	800ea4c <vPortExitCritical>
    }
 800e92c:	bf00      	nop
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	20046cb8 	.word	0x20046cb8
 800e938:	20046c88 	.word	0x20046c88
 800e93c:	20046c9c 	.word	0x20046c9c
 800e940:	20046cb0 	.word	0x20046cb0
 800e944:	20046cb4 	.word	0x20046cb4
 800e948:	20046d64 	.word	0x20046d64
 800e94c:	20046cc4 	.word	0x20046cc4
 800e950:	0802cbe0 	.word	0x0802cbe0

0800e954 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800e954:	b480      	push	{r7}
 800e956:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e958:	4b0b      	ldr	r3, [pc, #44]	@ (800e988 <vPortSetupTimerInterrupt+0x34>)
 800e95a:	2200      	movs	r2, #0
 800e95c:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e95e:	4b0b      	ldr	r3, [pc, #44]	@ (800e98c <vPortSetupTimerInterrupt+0x38>)
 800e960:	2200      	movs	r2, #0
 800e962:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e964:	4b0a      	ldr	r3, [pc, #40]	@ (800e990 <vPortSetupTimerInterrupt+0x3c>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	4a0a      	ldr	r2, [pc, #40]	@ (800e994 <vPortSetupTimerInterrupt+0x40>)
 800e96a:	fba2 2303 	umull	r2, r3, r2, r3
 800e96e:	099b      	lsrs	r3, r3, #6
 800e970:	4a09      	ldr	r2, [pc, #36]	@ (800e998 <vPortSetupTimerInterrupt+0x44>)
 800e972:	3b01      	subs	r3, #1
 800e974:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800e976:	4b04      	ldr	r3, [pc, #16]	@ (800e988 <vPortSetupTimerInterrupt+0x34>)
 800e978:	2207      	movs	r2, #7
 800e97a:	601a      	str	r2, [r3, #0]
}
 800e97c:	bf00      	nop
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop
 800e988:	e000e010 	.word	0xe000e010
 800e98c:	e000e018 	.word	0xe000e018
 800e990:	20000004 	.word	0x20000004
 800e994:	10624dd3 	.word	0x10624dd3
 800e998:	e000e014 	.word	0xe000e014

0800e99c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800e9a6:	4b0a      	ldr	r3, [pc, #40]	@ (800e9d0 <prvTaskExitError+0x34>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ae:	d003      	beq.n	800e9b8 <prvTaskExitError+0x1c>
 800e9b0:	f000 fa02 	bl	800edb8 <ulSetInterruptMask>
 800e9b4:	bf00      	nop
 800e9b6:	e7fd      	b.n	800e9b4 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800e9b8:	f000 f9fe 	bl	800edb8 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800e9bc:	bf00      	nop
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d0fc      	beq.n	800e9be <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800e9c4:	bf00      	nop
 800e9c6:	bf00      	nop
 800e9c8:	3708      	adds	r7, #8
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
 800e9ce:	bf00      	nop
 800e9d0:	20000010 	.word	0x20000010

0800e9d4 <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if ( configENABLE_FPU == 1 )
    static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
    {
 800e9d4:	b480      	push	{r7}
 800e9d6:	af00      	add	r7, sp, #0
        #endif /* configENABLE_TRUSTZONE */

        /* CP10 = 11 ==> Full access to FPU i.e. both privileged and
         * unprivileged code should be able to access FPU. CP11 should be
         * programmed to the same value as CP10. */
        *( portCPACR ) |= ( ( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 800e9d8:	4b08      	ldr	r3, [pc, #32]	@ (800e9fc <prvSetupFPU+0x28>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	4a07      	ldr	r2, [pc, #28]	@ (800e9fc <prvSetupFPU+0x28>)
 800e9de:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e9e2:	6013      	str	r3, [r2, #0]
                            );

        /* ASPEN = 1 ==> Hardware should automatically preserve floating point
         * context on exception entry and restore on exception return.
         * LSPEN = 1 ==> Enable lazy context save of FP state. */
        *( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 800e9e4:	4b06      	ldr	r3, [pc, #24]	@ (800ea00 <prvSetupFPU+0x2c>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4a05      	ldr	r2, [pc, #20]	@ (800ea00 <prvSetupFPU+0x2c>)
 800e9ea:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e9ee:	6013      	str	r3, [r2, #0]
    }
 800e9f0:	bf00      	nop
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f8:	4770      	bx	lr
 800e9fa:	bf00      	nop
 800e9fc:	e000ed88 	.word	0xe000ed88
 800ea00:	e000ef34 	.word	0xe000ef34

0800ea04 <vPortYield>:
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800ea04:	b480      	push	{r7}
 800ea06:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea08:	4b06      	ldr	r3, [pc, #24]	@ (800ea24 <vPortYield+0x20>)
 800ea0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea0e:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800ea10:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800ea14:	f3bf 8f6f 	isb	sy
}
 800ea18:	bf00      	nop
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea20:	4770      	bx	lr
 800ea22:	bf00      	nop
 800ea24:	e000ed04 	.word	0xe000ed04

0800ea28 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800ea2c:	f000 f9c4 	bl	800edb8 <ulSetInterruptMask>
    ulCriticalNesting++;
 800ea30:	4b05      	ldr	r3, [pc, #20]	@ (800ea48 <vPortEnterCritical+0x20>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	3301      	adds	r3, #1
 800ea36:	4a04      	ldr	r2, [pc, #16]	@ (800ea48 <vPortEnterCritical+0x20>)
 800ea38:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800ea3a:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800ea3e:	f3bf 8f6f 	isb	sy
}
 800ea42:	bf00      	nop
 800ea44:	bd80      	pop	{r7, pc}
 800ea46:	bf00      	nop
 800ea48:	20000010 	.word	0x20000010

0800ea4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800ea50:	4b0a      	ldr	r3, [pc, #40]	@ (800ea7c <vPortExitCritical+0x30>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d103      	bne.n	800ea60 <vPortExitCritical+0x14>
 800ea58:	f000 f9ae 	bl	800edb8 <ulSetInterruptMask>
 800ea5c:	bf00      	nop
 800ea5e:	e7fd      	b.n	800ea5c <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800ea60:	4b06      	ldr	r3, [pc, #24]	@ (800ea7c <vPortExitCritical+0x30>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	3b01      	subs	r3, #1
 800ea66:	4a05      	ldr	r2, [pc, #20]	@ (800ea7c <vPortExitCritical+0x30>)
 800ea68:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800ea6a:	4b04      	ldr	r3, [pc, #16]	@ (800ea7c <vPortExitCritical+0x30>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d102      	bne.n	800ea78 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 800ea72:	2000      	movs	r0, #0
 800ea74:	f000 f9ad 	bl	800edd2 <vClearInterruptMask>
    }
}
 800ea78:	bf00      	nop
 800ea7a:	bd80      	pop	{r7, pc}
 800ea7c:	20000010 	.word	0x20000010

0800ea80 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b082      	sub	sp, #8
 800ea84:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea86:	f000 f997 	bl	800edb8 <ulSetInterruptMask>
 800ea8a:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800ea8c:	f7fe fe9e 	bl	800d7cc <xTaskIncrementTick>
 800ea90:	4603      	mov	r3, r0
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d003      	beq.n	800ea9e <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea96:	4b05      	ldr	r3, [pc, #20]	@ (800eaac <xPortSysTickHandler+0x2c>)
 800ea98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea9c:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f000 f997 	bl	800edd2 <vClearInterruptMask>
}
 800eaa4:	bf00      	nop
 800eaa6:	3708      	adds	r7, #8
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	e000ed04 	.word	0xe000ed04

0800eab0 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b084      	sub	sp, #16
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	699b      	ldr	r3, [r3, #24]
 800eabc:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	3b02      	subs	r3, #2
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800eac6:	7afb      	ldrb	r3, [r7, #11]
 800eac8:	2b66      	cmp	r3, #102	@ 0x66
 800eaca:	d104      	bne.n	800ead6 <vPortSVCHandler_C+0x26>
            #endif /* configENABLE_TRUSTZONE */

            #if ( configENABLE_FPU == 1 )
            {
                /* Setup the Floating Point Unit (FPU). */
                prvSetupFPU();
 800eacc:	f7ff ff82 	bl	800e9d4 <prvSetupFPU>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800ead0:	f000 f93e 	bl	800ed50 <vRestoreContextOfFirstTask>
            break;
 800ead4:	e003      	b.n	800eade <vPortSVCHandler_C+0x2e>
                break;
        #endif /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 1 ) */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800ead6:	f000 f96f 	bl	800edb8 <ulSetInterruptMask>
 800eada:	bf00      	nop
 800eadc:	e7fd      	b.n	800eada <vPortSVCHandler_C+0x2a>
    }
}
 800eade:	bf00      	nop
 800eae0:	3710      	adds	r7, #16
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
	...

0800eae8 <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 800eae8:	b480      	push	{r7}
 800eaea:	b085      	sub	sp, #20
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	60f8      	str	r0, [r7, #12]
 800eaf0:	60b9      	str	r1, [r7, #8]
 800eaf2:	607a      	str	r2, [r7, #4]
 800eaf4:	603b      	str	r3, [r7, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	3b04      	subs	r3, #4
 800eafa:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800eb02:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	3b04      	subs	r3, #4
 800eb08:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 800eb0a:	687a      	ldr	r2, [r7, #4]
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	3b04      	subs	r3, #4
 800eb14:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 800eb16:	4a38      	ldr	r2, [pc, #224]	@ (800ebf8 <pxPortInitialiseStack+0x110>)
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	3b04      	subs	r3, #4
 800eb20:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800eb28:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	3b04      	subs	r3, #4
 800eb2e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800eb36:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	3b04      	subs	r3, #4
 800eb3c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800eb44:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	3b04      	subs	r3, #4
 800eb4a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800eb52:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	3b04      	subs	r3, #4
 800eb58:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
 800eb5a:	683a      	ldr	r2, [r7, #0]
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	3b04      	subs	r3, #4
 800eb64:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800eb6c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	3b04      	subs	r3, #4
 800eb72:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800eb7a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	3b04      	subs	r3, #4
 800eb80:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800eb88:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	3b04      	subs	r3, #4
 800eb8e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800eb96:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	3b04      	subs	r3, #4
 800eb9c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800eba4:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	3b04      	subs	r3, #4
 800ebaa:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800ebb2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	3b04      	subs	r3, #4
 800ebb8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800ebc0:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	3b04      	subs	r3, #4
 800ebc6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800ebce:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	3b04      	subs	r3, #4
 800ebd4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 800ebdc:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	3b04      	subs	r3, #4
 800ebe2:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800ebe4:	68ba      	ldr	r2, [r7, #8]
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	601a      	str	r2, [r3, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
 800ebea:	68fb      	ldr	r3, [r7, #12]
    }
 800ebec:	4618      	mov	r0, r3
 800ebee:	3714      	adds	r7, #20
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr
 800ebf8:	0800e99d 	.word	0x0800e99d

0800ebfc <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b084      	sub	sp, #16
 800ec00:	af00      	add	r7, sp, #0
    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800ec02:	2300      	movs	r3, #0
 800ec04:	60bb      	str	r3, [r7, #8]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = portNVIC_SHPR2_REG;
 800ec06:	4b35      	ldr	r3, [pc, #212]	@ (800ecdc <xPortStartScheduler+0xe0>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	60fb      	str	r3, [r7, #12]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        portNVIC_SHPR2_REG = 0xFF000000;
 800ec0c:	4b33      	ldr	r3, [pc, #204]	@ (800ecdc <xPortStartScheduler+0xe0>)
 800ec0e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800ec12:	601a      	str	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 800ec14:	4b31      	ldr	r3, [pc, #196]	@ (800ecdc <xPortStartScheduler+0xe0>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	0e1b      	lsrs	r3, r3, #24
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ec1e:	79fb      	ldrb	r3, [r7, #7]
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ec26:	b2da      	uxtb	r2, r3
 800ec28:	4b2d      	ldr	r3, [pc, #180]	@ (800ece0 <xPortStartScheduler+0xe4>)
 800ec2a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800ec2c:	4b2c      	ldr	r3, [pc, #176]	@ (800ece0 <xPortStartScheduler+0xe4>)
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d103      	bne.n	800ec3c <xPortStartScheduler+0x40>
 800ec34:	f000 f8c0 	bl	800edb8 <ulSetInterruptMask>
 800ec38:	bf00      	nop
 800ec3a:	e7fd      	b.n	800ec38 <xPortStartScheduler+0x3c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800ec3c:	79fb      	ldrb	r3, [r7, #7]
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	43db      	mvns	r3, r3
 800ec42:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d00b      	beq.n	800ec62 <xPortStartScheduler+0x66>
 800ec4a:	f000 f8b5 	bl	800edb8 <ulSetInterruptMask>
 800ec4e:	bf00      	nop
 800ec50:	e7fd      	b.n	800ec4e <xPortStartScheduler+0x52>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	3301      	adds	r3, #1
 800ec56:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ec58:	79fb      	ldrb	r3, [r7, #7]
 800ec5a:	b2db      	uxtb	r3, r3
 800ec5c:	005b      	lsls	r3, r3, #1
 800ec5e:	b2db      	uxtb	r3, r3
 800ec60:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec62:	79fb      	ldrb	r3, [r7, #7]
 800ec64:	b2db      	uxtb	r3, r3
 800ec66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ec6a:	2b80      	cmp	r3, #128	@ 0x80
 800ec6c:	d0f1      	beq.n	800ec52 <xPortStartScheduler+0x56>
        }

        if( ulImplementedPrioBits == 8 )
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	2b08      	cmp	r3, #8
 800ec72:	d103      	bne.n	800ec7c <xPortStartScheduler+0x80>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800ec74:	4b1b      	ldr	r3, [pc, #108]	@ (800ece4 <xPortStartScheduler+0xe8>)
 800ec76:	2200      	movs	r2, #0
 800ec78:	601a      	str	r2, [r3, #0]
 800ec7a:	e004      	b.n	800ec86 <xPortStartScheduler+0x8a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	f1c3 0307 	rsb	r3, r3, #7
 800ec82:	4a18      	ldr	r2, [pc, #96]	@ (800ece4 <xPortStartScheduler+0xe8>)
 800ec84:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ec86:	4b17      	ldr	r3, [pc, #92]	@ (800ece4 <xPortStartScheduler+0xe8>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	021b      	lsls	r3, r3, #8
 800ec8c:	4a15      	ldr	r2, [pc, #84]	@ (800ece4 <xPortStartScheduler+0xe8>)
 800ec8e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ec90:	4b14      	ldr	r3, [pc, #80]	@ (800ece4 <xPortStartScheduler+0xe8>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ec98:	4a12      	ldr	r2, [pc, #72]	@ (800ece4 <xPortStartScheduler+0xe8>)
 800ec9a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        portNVIC_SHPR2_REG = ulOriginalPriority;
 800ec9c:	4a0f      	ldr	r2, [pc, #60]	@ (800ecdc <xPortStartScheduler+0xe0>)
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	6013      	str	r3, [r2, #0]
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) ) */

    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800eca2:	4b11      	ldr	r3, [pc, #68]	@ (800ece8 <xPortStartScheduler+0xec>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	4a10      	ldr	r2, [pc, #64]	@ (800ece8 <xPortStartScheduler+0xec>)
 800eca8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ecac:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800ecae:	4b0e      	ldr	r3, [pc, #56]	@ (800ece8 <xPortStartScheduler+0xec>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	4a0d      	ldr	r2, [pc, #52]	@ (800ece8 <xPortStartScheduler+0xec>)
 800ecb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ecb8:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800ecba:	f7ff fe4b 	bl	800e954 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800ecbe:	4b0b      	ldr	r3, [pc, #44]	@ (800ecec <xPortStartScheduler+0xf0>)
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
 800ecc4:	f000 f864 	bl	800ed90 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800ecc8:	f7fe fe90 	bl	800d9ec <vTaskSwitchContext>
    prvTaskExitError();
 800eccc:	f7ff fe66 	bl	800e99c <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800ecd0:	2300      	movs	r3, #0
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3710      	adds	r7, #16
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	e000ed1c 	.word	0xe000ed1c
 800ece0:	20046db4 	.word	0x20046db4
 800ece4:	20046db8 	.word	0x20046db8
 800ece8:	e000ed20 	.word	0xe000ed20
 800ecec:	20000010 	.word	0x20000010

0800ecf0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )

    void vPortValidateInterruptPriority( void )
    {
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800ecf6:	f3ef 8305 	mrs	r3, IPSR
 800ecfa:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2b0f      	cmp	r3, #15
 800ed00:	d90d      	bls.n	800ed1e <vPortValidateInterruptPriority+0x2e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ed02:	4a0f      	ldr	r2, [pc, #60]	@ (800ed40 <vPortValidateInterruptPriority+0x50>)
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	4413      	add	r3, r2
 800ed08:	781b      	ldrb	r3, [r3, #0]
 800ed0a:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ed0c:	4b0d      	ldr	r3, [pc, #52]	@ (800ed44 <vPortValidateInterruptPriority+0x54>)
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	78fa      	ldrb	r2, [r7, #3]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d203      	bcs.n	800ed1e <vPortValidateInterruptPriority+0x2e>
 800ed16:	f000 f84f 	bl	800edb8 <ulSetInterruptMask>
 800ed1a:	bf00      	nop
 800ed1c:	e7fd      	b.n	800ed1a <vPortValidateInterruptPriority+0x2a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ed1e:	4b0a      	ldr	r3, [pc, #40]	@ (800ed48 <vPortValidateInterruptPriority+0x58>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ed26:	4b09      	ldr	r3, [pc, #36]	@ (800ed4c <vPortValidateInterruptPriority+0x5c>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d903      	bls.n	800ed36 <vPortValidateInterruptPriority+0x46>
 800ed2e:	f000 f843 	bl	800edb8 <ulSetInterruptMask>
 800ed32:	bf00      	nop
 800ed34:	e7fd      	b.n	800ed32 <vPortValidateInterruptPriority+0x42>
    }
 800ed36:	bf00      	nop
 800ed38:	3708      	adds	r7, #8
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}
 800ed3e:	bf00      	nop
 800ed40:	e000e3f0 	.word	0xe000e3f0
 800ed44:	20046db4 	.word	0x20046db4
 800ed48:	e000ed0c 	.word	0xe000ed0c
 800ed4c:	20046db8 	.word	0x20046db8

0800ed50 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800ed50:	4a0b      	ldr	r2, [pc, #44]	@ (800ed80 <pxCurrentTCBConst2>)
 800ed52:	6811      	ldr	r1, [r2, #0]
 800ed54:	6808      	ldr	r0, [r1, #0]
 800ed56:	c806      	ldmia	r0!, {r1, r2}
 800ed58:	f381 880b 	msr	PSPLIM, r1
 800ed5c:	2102      	movs	r1, #2
 800ed5e:	f381 8814 	msr	CONTROL, r1
 800ed62:	3020      	adds	r0, #32
 800ed64:	f380 8809 	msr	PSP, r0
 800ed68:	f3bf 8f6f 	isb	sy
 800ed6c:	f04f 0000 	mov.w	r0, #0
 800ed70:	f380 8811 	msr	BASEPRI, r0
 800ed74:	4710      	bx	r2
 800ed76:	bf00      	nop
 800ed78:	f3af 8000 	nop.w
 800ed7c:	f3af 8000 	nop.w

0800ed80 <pxCurrentTCBConst2>:
 800ed80:	20046788 	.word	0x20046788
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
    }
 800ed84:	bf00      	nop
 800ed86:	bf00      	nop
	...

0800ed90 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ed90:	4807      	ldr	r0, [pc, #28]	@ (800edb0 <xVTORConst>)
 800ed92:	6800      	ldr	r0, [r0, #0]
 800ed94:	6800      	ldr	r0, [r0, #0]
 800ed96:	f380 8808 	msr	MSP, r0
 800ed9a:	b662      	cpsie	i
 800ed9c:	b661      	cpsie	f
 800ed9e:	f3bf 8f4f 	dsb	sy
 800eda2:	f3bf 8f6f 	isb	sy
 800eda6:	df66      	svc	102	@ 0x66
 800eda8:	bf00      	nop
 800edaa:	bf00      	nop
 800edac:	f3af 8000 	nop.w

0800edb0 <xVTORConst>:
 800edb0:	e000ed08 	.word	0xe000ed08
        "                                                   \n"
        "   .align 4                                        \n"
        "xVTORConst: .word 0xe000ed08                       \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800edb4:	bf00      	nop
 800edb6:	bf00      	nop

0800edb8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800edb8:	f3ef 8011 	mrs	r0, BASEPRI
 800edbc:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800edc0:	f381 8811 	msr	BASEPRI, r1
 800edc4:	f3bf 8f4f 	dsb	sy
 800edc8:	f3bf 8f6f 	isb	sy
 800edcc:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800edce:	bf00      	nop
 800edd0:	4618      	mov	r0, r3

0800edd2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800edd2:	f380 8811 	msr	BASEPRI, r0
 800edd6:	f3bf 8f4f 	dsb	sy
 800edda:	f3bf 8f6f 	isb	sy
 800edde:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::: "memory"
    );
}
 800ede0:	bf00      	nop
	...

0800edf0 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800edf0:	f3ef 8009 	mrs	r0, PSP
 800edf4:	f01e 0f10 	tst.w	lr, #16
 800edf8:	bf08      	it	eq
 800edfa:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800edfe:	f3ef 820b 	mrs	r2, PSPLIM
 800ee02:	4673      	mov	r3, lr
 800ee04:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800ee08:	4a11      	ldr	r2, [pc, #68]	@ (800ee50 <pxCurrentTCBConst>)
 800ee0a:	6811      	ldr	r1, [r2, #0]
 800ee0c:	6008      	str	r0, [r1, #0]
 800ee0e:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ee12:	f380 8811 	msr	BASEPRI, r0
 800ee16:	f3bf 8f4f 	dsb	sy
 800ee1a:	f3bf 8f6f 	isb	sy
 800ee1e:	f7fe fde5 	bl	800d9ec <vTaskSwitchContext>
 800ee22:	f04f 0000 	mov.w	r0, #0
 800ee26:	f380 8811 	msr	BASEPRI, r0
 800ee2a:	4a09      	ldr	r2, [pc, #36]	@ (800ee50 <pxCurrentTCBConst>)
 800ee2c:	6811      	ldr	r1, [r2, #0]
 800ee2e:	6808      	ldr	r0, [r1, #0]
 800ee30:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800ee34:	f013 0f10 	tst.w	r3, #16
 800ee38:	bf08      	it	eq
 800ee3a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ee3e:	f382 880b 	msr	PSPLIM, r2
 800ee42:	f380 8809 	msr	PSP, r0
 800ee46:	4718      	bx	r3
 800ee48:	f3af 8000 	nop.w
 800ee4c:	f3af 8000 	nop.w

0800ee50 <pxCurrentTCBConst>:
 800ee50:	20046788 	.word	0x20046788
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst: .word pxCurrentTCB              \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 800ee54:	bf00      	nop
 800ee56:	bf00      	nop
	...

0800ee60 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800ee60:	f01e 0f04 	tst.w	lr, #4
 800ee64:	bf0c      	ite	eq
 800ee66:	f3ef 8008 	mrseq	r0, MSP
 800ee6a:	f3ef 8009 	mrsne	r0, PSP
 800ee6e:	4904      	ldr	r1, [pc, #16]	@ (800ee80 <svchandler_address_const>)
 800ee70:	4708      	bx	r1
 800ee72:	bf00      	nop
 800ee74:	f3af 8000 	nop.w
 800ee78:	f3af 8000 	nop.w
 800ee7c:	f3af 8000 	nop.w

0800ee80 <svchandler_address_const>:
 800ee80:	0800eab1 	.word	0x0800eab1
            "   bx r1                                           \n"
            "                                                   \n"
            "   .align 4                                        \n"
            "svchandler_address_const: .word vPortSVCHandler_C  \n"
        );
    }
 800ee84:	bf00      	nop
 800ee86:	bf00      	nop

0800ee88 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b088      	sub	sp, #32
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800ee90:	2300      	movs	r3, #0
 800ee92:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800ee94:	f7fe fb82 	bl	800d59c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800ee98:	4b54      	ldr	r3, [pc, #336]	@ (800efec <pvPortMalloc+0x164>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d101      	bne.n	800eea4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800eea0:	f000 f8f8 	bl	800f094 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d022      	beq.n	800eef0 <pvPortMalloc+0x68>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800eeaa:	2308      	movs	r3, #8
 800eeac:	43db      	mvns	r3, r3
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d81b      	bhi.n	800eeec <pvPortMalloc+0x64>
            {
                xWantedSize += xHeapStructSize;
 800eeb4:	2208      	movs	r2, #8
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	4413      	add	r3, r2
 800eeba:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f003 0307 	and.w	r3, r3, #7
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d014      	beq.n	800eef0 <pvPortMalloc+0x68>
                {
                    /* Byte alignment required. */
                    xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f003 0307 	and.w	r3, r3, #7
 800eecc:	f1c3 0308 	rsb	r3, r3, #8
 800eed0:	613b      	str	r3, [r7, #16]

                    if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800eed2:	693b      	ldr	r3, [r7, #16]
 800eed4:	43db      	mvns	r3, r3
 800eed6:	687a      	ldr	r2, [r7, #4]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d804      	bhi.n	800eee6 <pvPortMalloc+0x5e>
                    {
                        xWantedSize += xAdditionalRequiredSize;
 800eedc:	687a      	ldr	r2, [r7, #4]
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	4413      	add	r3, r2
 800eee2:	607b      	str	r3, [r7, #4]
 800eee4:	e004      	b.n	800eef0 <pvPortMalloc+0x68>
                    }
                    else
                    {
                        xWantedSize = 0;
 800eee6:	2300      	movs	r3, #0
 800eee8:	607b      	str	r3, [r7, #4]
 800eeea:	e001      	b.n	800eef0 <pvPortMalloc+0x68>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800eeec:	2300      	movs	r3, #0
 800eeee:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	db69      	blt.n	800efca <pvPortMalloc+0x142>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d066      	beq.n	800efca <pvPortMalloc+0x142>
 800eefc:	4b3c      	ldr	r3, [pc, #240]	@ (800eff0 <pvPortMalloc+0x168>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	687a      	ldr	r2, [r7, #4]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d861      	bhi.n	800efca <pvPortMalloc+0x142>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800ef06:	4b3b      	ldr	r3, [pc, #236]	@ (800eff4 <pvPortMalloc+0x16c>)
 800ef08:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800ef0a:	4b3a      	ldr	r3, [pc, #232]	@ (800eff4 <pvPortMalloc+0x16c>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef10:	e004      	b.n	800ef1c <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 800ef12:	69fb      	ldr	r3, [r7, #28]
 800ef14:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800ef16:	69fb      	ldr	r3, [r7, #28]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef1c:	69fb      	ldr	r3, [r7, #28]
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	687a      	ldr	r2, [r7, #4]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d903      	bls.n	800ef2e <pvPortMalloc+0xa6>
 800ef26:	69fb      	ldr	r3, [r7, #28]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d1f1      	bne.n	800ef12 <pvPortMalloc+0x8a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800ef2e:	4b2f      	ldr	r3, [pc, #188]	@ (800efec <pvPortMalloc+0x164>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	69fa      	ldr	r2, [r7, #28]
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d048      	beq.n	800efca <pvPortMalloc+0x142>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ef38:	69bb      	ldr	r3, [r7, #24]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	2208      	movs	r2, #8
 800ef3e:	4413      	add	r3, r2
 800ef40:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ef42:	69fb      	ldr	r3, [r7, #28]
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	69bb      	ldr	r3, [r7, #24]
 800ef48:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ef4a:	69fb      	ldr	r3, [r7, #28]
 800ef4c:	685a      	ldr	r2, [r3, #4]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	1ad2      	subs	r2, r2, r3
 800ef52:	2308      	movs	r3, #8
 800ef54:	005b      	lsls	r3, r3, #1
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d918      	bls.n	800ef8c <pvPortMalloc+0x104>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ef5a:	69fa      	ldr	r2, [r7, #28]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	4413      	add	r3, r2
 800ef60:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	f003 0307 	and.w	r3, r3, #7
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d003      	beq.n	800ef74 <pvPortMalloc+0xec>
 800ef6c:	f7ff ff24 	bl	800edb8 <ulSetInterruptMask>
 800ef70:	bf00      	nop
 800ef72:	e7fd      	b.n	800ef70 <pvPortMalloc+0xe8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ef74:	69fb      	ldr	r3, [r7, #28]
 800ef76:	685a      	ldr	r2, [r3, #4]
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	1ad2      	subs	r2, r2, r3
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800ef80:	69fb      	ldr	r3, [r7, #28]
 800ef82:	687a      	ldr	r2, [r7, #4]
 800ef84:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ef86:	68f8      	ldr	r0, [r7, #12]
 800ef88:	f000 f8e2 	bl	800f150 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ef8c:	4b18      	ldr	r3, [pc, #96]	@ (800eff0 <pvPortMalloc+0x168>)
 800ef8e:	681a      	ldr	r2, [r3, #0]
 800ef90:	69fb      	ldr	r3, [r7, #28]
 800ef92:	685b      	ldr	r3, [r3, #4]
 800ef94:	1ad3      	subs	r3, r2, r3
 800ef96:	4a16      	ldr	r2, [pc, #88]	@ (800eff0 <pvPortMalloc+0x168>)
 800ef98:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ef9a:	4b15      	ldr	r3, [pc, #84]	@ (800eff0 <pvPortMalloc+0x168>)
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	4b16      	ldr	r3, [pc, #88]	@ (800eff8 <pvPortMalloc+0x170>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d203      	bcs.n	800efae <pvPortMalloc+0x126>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800efa6:	4b12      	ldr	r3, [pc, #72]	@ (800eff0 <pvPortMalloc+0x168>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	4a13      	ldr	r2, [pc, #76]	@ (800eff8 <pvPortMalloc+0x170>)
 800efac:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800efae:	69fb      	ldr	r3, [r7, #28]
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800efb6:	69fb      	ldr	r3, [r7, #28]
 800efb8:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800efba:	69fb      	ldr	r3, [r7, #28]
 800efbc:	2200      	movs	r2, #0
 800efbe:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800efc0:	4b0e      	ldr	r3, [pc, #56]	@ (800effc <pvPortMalloc+0x174>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	3301      	adds	r3, #1
 800efc6:	4a0d      	ldr	r2, [pc, #52]	@ (800effc <pvPortMalloc+0x174>)
 800efc8:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800efca:	f7fe faf5 	bl	800d5b8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	f003 0307 	and.w	r3, r3, #7
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d003      	beq.n	800efe0 <pvPortMalloc+0x158>
 800efd8:	f7ff feee 	bl	800edb8 <ulSetInterruptMask>
 800efdc:	bf00      	nop
 800efde:	e7fd      	b.n	800efdc <pvPortMalloc+0x154>
    return pvReturn;
 800efe0:	697b      	ldr	r3, [r7, #20]
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3720      	adds	r7, #32
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
 800efea:	bf00      	nop
 800efec:	2005a644 	.word	0x2005a644
 800eff0:	2005a648 	.word	0x2005a648
 800eff4:	2005a63c 	.word	0x2005a63c
 800eff8:	2005a64c 	.word	0x2005a64c
 800effc:	2005a650 	.word	0x2005a650

0800f000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b084      	sub	sp, #16
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d037      	beq.n	800f082 <vPortFree+0x82>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800f012:	2308      	movs	r3, #8
 800f014:	425b      	negs	r3, r3
 800f016:	68fa      	ldr	r2, [r7, #12]
 800f018:	4413      	add	r3, r2
 800f01a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	685b      	ldr	r3, [r3, #4]
 800f024:	2b00      	cmp	r3, #0
 800f026:	db03      	blt.n	800f030 <vPortFree+0x30>
 800f028:	f7ff fec6 	bl	800edb8 <ulSetInterruptMask>
 800f02c:	bf00      	nop
 800f02e:	e7fd      	b.n	800f02c <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d003      	beq.n	800f040 <vPortFree+0x40>
 800f038:	f7ff febe 	bl	800edb8 <ulSetInterruptMask>
 800f03c:	bf00      	nop
 800f03e:	e7fd      	b.n	800f03c <vPortFree+0x3c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	2b00      	cmp	r3, #0
 800f046:	da1c      	bge.n	800f082 <vPortFree+0x82>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d118      	bne.n	800f082 <vPortFree+0x82>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800f05c:	f7fe fa9e 	bl	800d59c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	685a      	ldr	r2, [r3, #4]
 800f064:	4b09      	ldr	r3, [pc, #36]	@ (800f08c <vPortFree+0x8c>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4413      	add	r3, r2
 800f06a:	4a08      	ldr	r2, [pc, #32]	@ (800f08c <vPortFree+0x8c>)
 800f06c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f06e:	68b8      	ldr	r0, [r7, #8]
 800f070:	f000 f86e 	bl	800f150 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800f074:	4b06      	ldr	r3, [pc, #24]	@ (800f090 <vPortFree+0x90>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	3301      	adds	r3, #1
 800f07a:	4a05      	ldr	r2, [pc, #20]	@ (800f090 <vPortFree+0x90>)
 800f07c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800f07e:	f7fe fa9b 	bl	800d5b8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800f082:	bf00      	nop
 800f084:	3710      	adds	r7, #16
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	2005a648 	.word	0x2005a648
 800f090:	2005a654 	.word	0x2005a654

0800f094 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800f094:	b480      	push	{r7}
 800f096:	b085      	sub	sp, #20
 800f098:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f09a:	4b27      	ldr	r3, [pc, #156]	@ (800f138 <prvHeapInit+0xa4>)
 800f09c:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800f09e:	4b27      	ldr	r3, [pc, #156]	@ (800f13c <prvHeapInit+0xa8>)
 800f0a0:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f003 0307 	and.w	r3, r3, #7
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d00c      	beq.n	800f0c6 <prvHeapInit+0x32>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	3307      	adds	r3, #7
 800f0b0:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	f023 0307 	bic.w	r3, r3, #7
 800f0b8:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 800f0ba:	68ba      	ldr	r2, [r7, #8]
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	1ad3      	subs	r3, r2, r3
 800f0c0:	4a1e      	ldr	r2, [pc, #120]	@ (800f13c <prvHeapInit+0xa8>)
 800f0c2:	4413      	add	r3, r2
 800f0c4:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f0ca:	4a1d      	ldr	r2, [pc, #116]	@ (800f140 <prvHeapInit+0xac>)
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800f0d0:	4b1b      	ldr	r3, [pc, #108]	@ (800f140 <prvHeapInit+0xac>)
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ( pucAlignedHeap + xTotalHeapSize );
 800f0d6:	687a      	ldr	r2, [r7, #4]
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	4413      	add	r3, r2
 800f0dc:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800f0de:	2208      	movs	r2, #8
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	1a9b      	subs	r3, r3, r2
 800f0e4:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	f023 0307 	bic.w	r3, r3, #7
 800f0ec:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	4a14      	ldr	r2, [pc, #80]	@ (800f144 <prvHeapInit+0xb0>)
 800f0f2:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800f0f4:	4b13      	ldr	r3, [pc, #76]	@ (800f144 <prvHeapInit+0xb0>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800f0fc:	4b11      	ldr	r3, [pc, #68]	@ (800f144 <prvHeapInit+0xb0>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	2200      	movs	r2, #0
 800f102:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	68fa      	ldr	r2, [r7, #12]
 800f10c:	1ad2      	subs	r2, r2, r3
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f112:	4b0c      	ldr	r3, [pc, #48]	@ (800f144 <prvHeapInit+0xb0>)
 800f114:	681a      	ldr	r2, [r3, #0]
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	685b      	ldr	r3, [r3, #4]
 800f11e:	4a0a      	ldr	r2, [pc, #40]	@ (800f148 <prvHeapInit+0xb4>)
 800f120:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	685b      	ldr	r3, [r3, #4]
 800f126:	4a09      	ldr	r2, [pc, #36]	@ (800f14c <prvHeapInit+0xb8>)
 800f128:	6013      	str	r3, [r2, #0]
}
 800f12a:	bf00      	nop
 800f12c:	3714      	adds	r7, #20
 800f12e:	46bd      	mov	sp, r7
 800f130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f134:	4770      	bx	lr
 800f136:	bf00      	nop
 800f138:	00013880 	.word	0x00013880
 800f13c:	20046dbc 	.word	0x20046dbc
 800f140:	2005a63c 	.word	0x2005a63c
 800f144:	2005a644 	.word	0x2005a644
 800f148:	2005a64c 	.word	0x2005a64c
 800f14c:	2005a648 	.word	0x2005a648

0800f150 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800f150:	b480      	push	{r7}
 800f152:	b085      	sub	sp, #20
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f158:	4b28      	ldr	r3, [pc, #160]	@ (800f1fc <prvInsertBlockIntoFreeList+0xac>)
 800f15a:	60fb      	str	r3, [r7, #12]
 800f15c:	e002      	b.n	800f164 <prvInsertBlockIntoFreeList+0x14>
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	60fb      	str	r3, [r7, #12]
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	687a      	ldr	r2, [r7, #4]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d8f7      	bhi.n	800f15e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	685b      	ldr	r3, [r3, #4]
 800f176:	68ba      	ldr	r2, [r7, #8]
 800f178:	4413      	add	r3, r2
 800f17a:	687a      	ldr	r2, [r7, #4]
 800f17c:	429a      	cmp	r2, r3
 800f17e:	d108      	bne.n	800f192 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	685a      	ldr	r2, [r3, #4]
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	441a      	add	r2, r3
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	685b      	ldr	r3, [r3, #4]
 800f19a:	68ba      	ldr	r2, [r7, #8]
 800f19c:	441a      	add	r2, r3
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	d118      	bne.n	800f1d8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	4b15      	ldr	r3, [pc, #84]	@ (800f200 <prvInsertBlockIntoFreeList+0xb0>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d00d      	beq.n	800f1ce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	685a      	ldr	r2, [r3, #4]
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	441a      	add	r2, r3
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	681a      	ldr	r2, [r3, #0]
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	601a      	str	r2, [r3, #0]
 800f1cc:	e008      	b.n	800f1e0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f1ce:	4b0c      	ldr	r3, [pc, #48]	@ (800f200 <prvInsertBlockIntoFreeList+0xb0>)
 800f1d0:	681a      	ldr	r2, [r3, #0]
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	601a      	str	r2, [r3, #0]
 800f1d6:	e003      	b.n	800f1e0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800f1e0:	68fa      	ldr	r2, [r7, #12]
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d002      	beq.n	800f1ee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	687a      	ldr	r2, [r7, #4]
 800f1ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800f1ee:	bf00      	nop
 800f1f0:	3714      	adds	r7, #20
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr
 800f1fa:	bf00      	nop
 800f1fc:	2005a63c 	.word	0x2005a63c
 800f200:	2005a644 	.word	0x2005a644

0800f204 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800f204:	b480      	push	{r7}
 800f206:	af00      	add	r7, sp, #0
}
 800f208:	bf00      	nop
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr

0800f212 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800f212:	b580      	push	{r7, lr}
 800f214:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800f216:	f003 fe3b 	bl	8012e90 <touchgfx_components_init>
    touchgfx_init();
 800f21a:	f003 fe07 	bl	8012e2c <touchgfx_init>
}
 800f21e:	bf00      	nop
 800f220:	bd80      	pop	{r7, pc}

0800f222 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800f222:	b580      	push	{r7, lr}
 800f224:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 800f226:	f003 fe3b 	bl	8012ea0 <touchgfx_taskEntry>
}
 800f22a:	bf00      	nop
 800f22c:	bd80      	pop	{r7, pc}
	...

0800f230 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800f230:	b480      	push	{r7}
 800f232:	b083      	sub	sp, #12
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
    {
 800f238:	4a04      	ldr	r2, [pc, #16]	@ (800f24c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	601a      	str	r2, [r3, #0]
    }
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	4618      	mov	r0, r3
 800f242:	370c      	adds	r7, #12
 800f244:	46bd      	mov	sp, r7
 800f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24a:	4770      	bx	lr
 800f24c:	0802d95c 	.word	0x0802d95c

0800f250 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
    }
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f7ff ffe9 	bl	800f230 <_ZN8touchgfx12FontProviderD1Ev>
 800f25e:	2104      	movs	r1, #4
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f01b fcb4 	bl	802abce <_ZdlPvj>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	4618      	mov	r0, r3
 800f26a:	3708      	adds	r7, #8
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	460b      	mov	r3, r1
 800f27a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f27c:	887b      	ldrh	r3, [r7, #2]
 800f27e:	2b02      	cmp	r3, #2
 800f280:	d010      	beq.n	800f2a4 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800f282:	2b02      	cmp	r3, #2
 800f284:	dc13      	bgt.n	800f2ae <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800f286:	2b00      	cmp	r3, #0
 800f288:	d002      	beq.n	800f290 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800f28a:	2b01      	cmp	r3, #1
 800f28c:	d005      	beq.n	800f29a <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800f28e:	e00e      	b.n	800f2ae <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f290:	f001 fe60 	bl	8010f54 <_ZN17TypedTextDatabase8getFontsEv>
 800f294:	4603      	mov	r3, r0
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	e00a      	b.n	800f2b0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f29a:	f001 fe5b 	bl	8010f54 <_ZN17TypedTextDatabase8getFontsEv>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	e005      	b.n	800f2b0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f2a4:	f001 fe56 	bl	8010f54 <_ZN17TypedTextDatabase8getFontsEv>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	689b      	ldr	r3, [r3, #8]
 800f2ac:	e000      	b.n	800f2b0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800f2ae:	2300      	movs	r3, #0
    }
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3708      	adds	r7, #8
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}

0800f2b8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	4a05      	ldr	r2, [pc, #20]	@ (800f2d8 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	601a      	str	r2, [r3, #0]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7ff ffb1 	bl	800f230 <_ZN8touchgfx12FontProviderD1Ev>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3708      	adds	r7, #8
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	0802d948 	.word	0x0802d948

0800f2dc <_ZN23ApplicationFontProviderD0Ev>:
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b082      	sub	sp, #8
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f7ff ffe7 	bl	800f2b8 <_ZN23ApplicationFontProviderD1Ev>
 800f2ea:	2104      	movs	r1, #4
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f01b fc6e 	bl	802abce <_ZdlPvj>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3708      	adds	r7, #8
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
    {
 800f304:	4a04      	ldr	r2, [pc, #16]	@ (800f318 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	601a      	str	r2, [r3, #0]
    }
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	4618      	mov	r0, r3
 800f30e:	370c      	adds	r7, #12
 800f310:	46bd      	mov	sp, r7
 800f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f316:	4770      	bx	lr
 800f318:	0802dc04 	.word	0x0802dc04

0800f31c <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
    }
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f7ff ffe9 	bl	800f2fc <_ZN8touchgfx4FontD1Ev>
 800f32a:	2114      	movs	r1, #20
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f01b fc4e 	bl	802abce <_ZdlPvj>
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	4618      	mov	r0, r3
 800f336:	3708      	adds	r7, #8
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}

0800f33c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800f33c:	b590      	push	{r4, r7, lr}
 800f33e:	b087      	sub	sp, #28
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	460b      	mov	r3, r1
 800f346:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800f348:	887b      	ldrh	r3, [r7, #2]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d101      	bne.n	800f352 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800f34e:	2300      	movs	r3, #0
 800f350:	e010      	b.n	800f374 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800f352:	2300      	movs	r3, #0
 800f354:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800f356:	2300      	movs	r3, #0
 800f358:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	3308      	adds	r3, #8
 800f360:	681c      	ldr	r4, [r3, #0]
 800f362:	f107 030f 	add.w	r3, r7, #15
 800f366:	f107 0210 	add.w	r2, r7, #16
 800f36a:	8879      	ldrh	r1, [r7, #2]
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	47a0      	blx	r4
 800f370:	6178      	str	r0, [r7, #20]
        return glyph;
 800f372:	697b      	ldr	r3, [r7, #20]
    }
 800f374:	4618      	mov	r0, r3
 800f376:	371c      	adds	r7, #28
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd90      	pop	{r4, r7, pc}

0800f37c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800f37c:	b480      	push	{r7}
 800f37e:	b083      	sub	sp, #12
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	89db      	ldrh	r3, [r3, #14]
    }
 800f388:	4618      	mov	r0, r3
 800f38a:	370c      	adds	r7, #12
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr

0800f394 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800f394:	b480      	push	{r7}
 800f396:	b083      	sub	sp, #12
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	8a1b      	ldrh	r3, [r3, #16]
    }
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	370c      	adds	r7, #12
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3aa:	4770      	bx	lr

0800f3ac <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	88db      	ldrh	r3, [r3, #6]
    }
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	370c      	adds	r7, #12
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800f3c4:	b480      	push	{r7}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	889b      	ldrh	r3, [r3, #4]
    }
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	370c      	adds	r7, #12
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr

0800f3dc <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800f3dc:	b480      	push	{r7}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	7a9b      	ldrb	r3, [r3, #10]
 800f3e8:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800f3ec:	b2db      	uxtb	r3, r3
    }
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	370c      	adds	r7, #12
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f8:	4770      	bx	lr

0800f3fa <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800f3fa:	b480      	push	{r7}
 800f3fc:	b083      	sub	sp, #12
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	7a9b      	ldrb	r3, [r3, #10]
 800f406:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f40a:	b2db      	uxtb	r3, r3
    }
 800f40c:	4618      	mov	r0, r3
 800f40e:	370c      	adds	r7, #12
 800f410:	46bd      	mov	sp, r7
 800f412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f416:	4770      	bx	lr

0800f418 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800f418:	b480      	push	{r7}
 800f41a:	b083      	sub	sp, #12
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
    {
        return false;
 800f420:	2300      	movs	r3, #0
    }
 800f422:	4618      	mov	r0, r3
 800f424:	370c      	adds	r7, #12
 800f426:	46bd      	mov	sp, r7
 800f428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42c:	4770      	bx	lr

0800f42e <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800f42e:	b480      	push	{r7}
 800f430:	b083      	sub	sp, #12
 800f432:	af00      	add	r7, sp, #0
 800f434:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f436:	f04f 0300 	mov.w	r3, #0
 800f43a:	ee07 3a90 	vmov	s15, r3
    }
 800f43e:	eeb0 0a67 	vmov.f32	s0, s15
 800f442:	370c      	adds	r7, #12
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr

0800f44c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b082      	sub	sp, #8
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	4a05      	ldr	r2, [pc, #20]	@ (800f46c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	601a      	str	r2, [r3, #0]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7ff ff4d 	bl	800f2fc <_ZN8touchgfx4FontD1Ev>
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	4618      	mov	r0, r3
 800f466:	3708      	adds	r7, #8
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	0802e788 	.word	0x0802e788

0800f470 <_ZN8touchgfx9ConstFontD0Ev>:
 800f470:	b580      	push	{r7, lr}
 800f472:	b082      	sub	sp, #8
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f7ff ffe7 	bl	800f44c <_ZN8touchgfx9ConstFontD1Ev>
 800f47e:	211c      	movs	r1, #28
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f01b fba4 	bl	802abce <_ZdlPvj>
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	4618      	mov	r0, r3
 800f48a:	3708      	adds	r7, #8
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	4a05      	ldr	r2, [pc, #20]	@ (800f4b0 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	601a      	str	r2, [r3, #0]
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7ff ffd3 	bl	800f44c <_ZN8touchgfx9ConstFontD1Ev>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3708      	adds	r7, #8
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}
 800f4b0:	0802d970 	.word	0x0802d970

0800f4b4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f7ff ffe7 	bl	800f490 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f4c2:	212c      	movs	r1, #44	@ 0x2c
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f01b fb82 	bl	802abce <_ZdlPvj>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3708      	adds	r7, #8
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f4d4:	b480      	push	{r7}
 800f4d6:	af00      	add	r7, sp, #0
    {
        return instance;
 800f4d8:	4b03      	ldr	r3, [pc, #12]	@ (800f4e8 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f4da:	681b      	ldr	r3, [r3, #0]
    }
 800f4dc:	4618      	mov	r0, r3
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e4:	4770      	bx	lr
 800f4e6:	bf00      	nop
 800f4e8:	2005b928 	.word	0x2005b928

0800f4ec <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800f4ec:	b480      	push	{r7}
 800f4ee:	b083      	sub	sp, #12
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	370c      	adds	r7, #12
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr

0800f504 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800f504:	b480      	push	{r7}
 800f506:	b083      	sub	sp, #12
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800f510:	4618      	mov	r0, r3
 800f512:	370c      	adds	r7, #12
 800f514:	46bd      	mov	sp, r7
 800f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51a:	4770      	bx	lr

0800f51c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <math.h>
#include <stddef.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b08e      	sub	sp, #56	@ 0x38
 800f520:	af0a      	add	r7, sp, #40	@ 0x28
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	4611      	mov	r1, r2
 800f528:	461a      	mov	r2, r3
 800f52a:	460b      	mov	r3, r1
 800f52c:	80fb      	strh	r3, [r7, #6]
 800f52e:	4613      	mov	r3, r2
 800f530:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800f532:	68f8      	ldr	r0, [r7, #12]
 800f534:	88b9      	ldrh	r1, [r7, #4]
 800f536:	88fa      	ldrh	r2, [r7, #6]
 800f538:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800f53c:	9308      	str	r3, [sp, #32]
 800f53e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f540:	9307      	str	r3, [sp, #28]
 800f542:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800f546:	9306      	str	r3, [sp, #24]
 800f548:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f54c:	9305      	str	r3, [sp, #20]
 800f54e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f552:	9304      	str	r3, [sp, #16]
 800f554:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f558:	9303      	str	r3, [sp, #12]
 800f55a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f55e:	9302      	str	r3, [sp, #8]
 800f560:	7f3b      	ldrb	r3, [r7, #28]
 800f562:	9301      	str	r3, [sp, #4]
 800f564:	8b3b      	ldrh	r3, [r7, #24]
 800f566:	9300      	str	r3, [sp, #0]
 800f568:	460b      	mov	r3, r1
 800f56a:	68b9      	ldr	r1, [r7, #8]
 800f56c:	f00a ff64 	bl	801a438 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800f570:	4a09      	ldr	r2, [pc, #36]	@ (800f598 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f57a:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f580:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f586:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f58c:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	4618      	mov	r0, r3
 800f592:	3710      	adds	r7, #16
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}
 800f598:	0802d970 	.word	0x0802d970

0800f59c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f59c:	b480      	push	{r7}
 800f59e:	b087      	sub	sp, #28
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	6039      	str	r1, [r7, #0]
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	617b      	str	r3, [r7, #20]
    uint32_t offset = dataOffset[0];
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	881b      	ldrh	r3, [r3, #0]
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	613b      	str	r3, [r7, #16]
    offset |= dataOffset[1] << 16;
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	3302      	adds	r3, #2
 800f5b6:	881b      	ldrh	r3, [r3, #0]
 800f5b8:	b29b      	uxth	r3, r3
 800f5ba:	041b      	lsls	r3, r3, #16
 800f5bc:	461a      	mov	r2, r3
 800f5be:	693b      	ldr	r3, [r7, #16]
 800f5c0:	4313      	orrs	r3, r2
 800f5c2:	613b      	str	r3, [r7, #16]

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	69db      	ldr	r3, [r3, #28]
 800f5c8:	60fb      	str	r3, [r7, #12]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	889b      	ldrh	r3, [r3, #4]
 800f5ce:	0adb      	lsrs	r3, r3, #11
 800f5d0:	b29b      	uxth	r3, r3
 800f5d2:	009b      	lsls	r3, r3, #2
 800f5d4:	68fa      	ldr	r2, [r7, #12]
 800f5d6:	4413      	add	r3, r2
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	60bb      	str	r3, [r7, #8]
    return pixels + offset;
 800f5dc:	68ba      	ldr	r2, [r7, #8]
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	4413      	add	r3, r2
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	371c      	adds	r7, #28
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ec:	4770      	bx	lr

0800f5ee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f5ee:	b480      	push	{r7}
 800f5f0:	b089      	sub	sp, #36	@ 0x24
 800f5f2:	af00      	add	r7, sp, #0
 800f5f4:	60f8      	str	r0, [r7, #12]
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	607a      	str	r2, [r7, #4]
 800f5fa:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d003      	beq.n	800f60a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	7b1b      	ldrb	r3, [r3, #12]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d101      	bne.n	800f60e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f60a:	2300      	movs	r3, #0
 800f60c:	e032      	b.n	800f674 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	6a1a      	ldr	r2, [r3, #32]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	7b5b      	ldrb	r3, [r3, #13]
 800f61a:	b21b      	sxth	r3, r3
 800f61c:	021b      	lsls	r3, r3, #8
 800f61e:	b21b      	sxth	r3, r3
 800f620:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f624:	b219      	sxth	r1, r3
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	7adb      	ldrb	r3, [r3, #11]
 800f62a:	b21b      	sxth	r3, r3
 800f62c:	430b      	orrs	r3, r1
 800f62e:	b21b      	sxth	r3, r3
 800f630:	b29b      	uxth	r3, r3
 800f632:	009b      	lsls	r3, r3, #2
 800f634:	4413      	add	r3, r2
 800f636:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	7b1b      	ldrb	r3, [r3, #12]
 800f63c:	837b      	strh	r3, [r7, #26]
 800f63e:	e013      	b.n	800f668 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7a>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800f640:	69fb      	ldr	r3, [r7, #28]
 800f642:	881b      	ldrh	r3, [r3, #0]
 800f644:	897a      	ldrh	r2, [r7, #10]
 800f646:	429a      	cmp	r2, r3
 800f648:	d103      	bne.n	800f652 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x64>
        {
            return kerndata->distance;
 800f64a:	69fb      	ldr	r3, [r7, #28]
 800f64c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f650:	e010      	b.n	800f674 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800f652:	69fb      	ldr	r3, [r7, #28]
 800f654:	881b      	ldrh	r3, [r3, #0]
 800f656:	897a      	ldrh	r2, [r7, #10]
 800f658:	429a      	cmp	r2, r3
 800f65a:	d309      	bcc.n	800f670 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f65c:	8b7b      	ldrh	r3, [r7, #26]
 800f65e:	3b01      	subs	r3, #1
 800f660:	837b      	strh	r3, [r7, #26]
 800f662:	69fb      	ldr	r3, [r7, #28]
 800f664:	3304      	adds	r3, #4
 800f666:	61fb      	str	r3, [r7, #28]
 800f668:	8b7b      	ldrh	r3, [r7, #26]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d1e8      	bne.n	800f640 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
 800f66e:	e000      	b.n	800f672 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        {
            break;
 800f670:	bf00      	nop
        }
    }
    return 0;
 800f672:	2300      	movs	r3, #0
}
 800f674:	4618      	mov	r0, r3
 800f676:	3724      	adds	r7, #36	@ 0x24
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr

0800f680 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800f680:	b580      	push	{r7, lr}
 800f682:	af00      	add	r7, sp, #0
 800f684:	4801      	ldr	r0, [pc, #4]	@ (800f68c <__tcf_0+0xc>)
 800f686:	f7ff ff03 	bl	800f490 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f68a:	bd80      	pop	{r7, pc}
 800f68c:	2005a658 	.word	0x2005a658

0800f690 <_Z23getFont_verdana_10_4bppv>:
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b08e      	sub	sp, #56	@ 0x38
 800f694:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800f696:	4b20      	ldr	r3, [pc, #128]	@ (800f718 <_Z23getFont_verdana_10_4bppv+0x88>)
 800f698:	e8d3 3faf 	lda	r3, [r3]
 800f69c:	f003 0301 	and.w	r3, r3, #1
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	bf0c      	ite	eq
 800f6a4:	2301      	moveq	r3, #1
 800f6a6:	2300      	movne	r3, #0
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d030      	beq.n	800f710 <_Z23getFont_verdana_10_4bppv+0x80>
 800f6ae:	481a      	ldr	r0, [pc, #104]	@ (800f718 <_Z23getFont_verdana_10_4bppv+0x88>)
 800f6b0:	f01b fa8f 	bl	802abd2 <__cxa_guard_acquire>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	bf14      	ite	ne
 800f6ba:	2301      	movne	r3, #1
 800f6bc:	2300      	moveq	r3, #0
 800f6be:	b2db      	uxtb	r3, r3
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d025      	beq.n	800f710 <_Z23getFont_verdana_10_4bppv+0x80>
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	930c      	str	r3, [sp, #48]	@ 0x30
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6d0:	233f      	movs	r3, #63	@ 0x3f
 800f6d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6d4:	4b11      	ldr	r3, [pc, #68]	@ (800f71c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800f6d6:	9308      	str	r3, [sp, #32]
 800f6d8:	4b11      	ldr	r3, [pc, #68]	@ (800f720 <_Z23getFont_verdana_10_4bppv+0x90>)
 800f6da:	9307      	str	r3, [sp, #28]
 800f6dc:	2300      	movs	r3, #0
 800f6de:	9306      	str	r3, [sp, #24]
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	9305      	str	r3, [sp, #20]
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	9304      	str	r3, [sp, #16]
 800f6e8:	2304      	movs	r3, #4
 800f6ea:	9303      	str	r3, [sp, #12]
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	9302      	str	r3, [sp, #8]
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	9301      	str	r3, [sp, #4]
 800f6f4:	230a      	movs	r3, #10
 800f6f6:	9300      	str	r3, [sp, #0]
 800f6f8:	230a      	movs	r3, #10
 800f6fa:	2201      	movs	r2, #1
 800f6fc:	4909      	ldr	r1, [pc, #36]	@ (800f724 <_Z23getFont_verdana_10_4bppv+0x94>)
 800f6fe:	480a      	ldr	r0, [pc, #40]	@ (800f728 <_Z23getFont_verdana_10_4bppv+0x98>)
 800f700:	f7ff ff0c 	bl	800f51c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f704:	4809      	ldr	r0, [pc, #36]	@ (800f72c <_Z23getFont_verdana_10_4bppv+0x9c>)
 800f706:	f01c f975 	bl	802b9f4 <atexit>
 800f70a:	4803      	ldr	r0, [pc, #12]	@ (800f718 <_Z23getFont_verdana_10_4bppv+0x88>)
 800f70c:	f01b fa6d 	bl	802abea <__cxa_guard_release>
    return verdana_10_4bpp;
 800f710:	4b05      	ldr	r3, [pc, #20]	@ (800f728 <_Z23getFont_verdana_10_4bppv+0x98>)
}
 800f712:	4618      	mov	r0, r3
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}
 800f718:	2005a684 	.word	0x2005a684
 800f71c:	0802f184 	.word	0x0802f184
 800f720:	0802f190 	.word	0x0802f190
 800f724:	0802f154 	.word	0x0802f154
 800f728:	2005a658 	.word	0x2005a658
 800f72c:	0800f681 	.word	0x0800f681

0800f730 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800f730:	b580      	push	{r7, lr}
 800f732:	af00      	add	r7, sp, #0
 800f734:	4801      	ldr	r0, [pc, #4]	@ (800f73c <__tcf_0+0xc>)
 800f736:	f7ff feab 	bl	800f490 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f73a:	bd80      	pop	{r7, pc}
 800f73c:	2005a688 	.word	0x2005a688

0800f740 <_Z23getFont_verdana_20_4bppv>:
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b08e      	sub	sp, #56	@ 0x38
 800f744:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800f746:	4b20      	ldr	r3, [pc, #128]	@ (800f7c8 <_Z23getFont_verdana_20_4bppv+0x88>)
 800f748:	e8d3 3faf 	lda	r3, [r3]
 800f74c:	f003 0301 	and.w	r3, r3, #1
 800f750:	2b00      	cmp	r3, #0
 800f752:	bf0c      	ite	eq
 800f754:	2301      	moveq	r3, #1
 800f756:	2300      	movne	r3, #0
 800f758:	b2db      	uxtb	r3, r3
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d030      	beq.n	800f7c0 <_Z23getFont_verdana_20_4bppv+0x80>
 800f75e:	481a      	ldr	r0, [pc, #104]	@ (800f7c8 <_Z23getFont_verdana_20_4bppv+0x88>)
 800f760:	f01b fa37 	bl	802abd2 <__cxa_guard_acquire>
 800f764:	4603      	mov	r3, r0
 800f766:	2b00      	cmp	r3, #0
 800f768:	bf14      	ite	ne
 800f76a:	2301      	movne	r3, #1
 800f76c:	2300      	moveq	r3, #0
 800f76e:	b2db      	uxtb	r3, r3
 800f770:	2b00      	cmp	r3, #0
 800f772:	d025      	beq.n	800f7c0 <_Z23getFont_verdana_20_4bppv+0x80>
 800f774:	2300      	movs	r3, #0
 800f776:	930c      	str	r3, [sp, #48]	@ 0x30
 800f778:	2300      	movs	r3, #0
 800f77a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f77c:	2300      	movs	r3, #0
 800f77e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f780:	233f      	movs	r3, #63	@ 0x3f
 800f782:	9309      	str	r3, [sp, #36]	@ 0x24
 800f784:	4b11      	ldr	r3, [pc, #68]	@ (800f7cc <_Z23getFont_verdana_20_4bppv+0x8c>)
 800f786:	9308      	str	r3, [sp, #32]
 800f788:	4b11      	ldr	r3, [pc, #68]	@ (800f7d0 <_Z23getFont_verdana_20_4bppv+0x90>)
 800f78a:	9307      	str	r3, [sp, #28]
 800f78c:	2300      	movs	r3, #0
 800f78e:	9306      	str	r3, [sp, #24]
 800f790:	2300      	movs	r3, #0
 800f792:	9305      	str	r3, [sp, #20]
 800f794:	2301      	movs	r3, #1
 800f796:	9304      	str	r3, [sp, #16]
 800f798:	2304      	movs	r3, #4
 800f79a:	9303      	str	r3, [sp, #12]
 800f79c:	2300      	movs	r3, #0
 800f79e:	9302      	str	r3, [sp, #8]
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	9301      	str	r3, [sp, #4]
 800f7a4:	2314      	movs	r3, #20
 800f7a6:	9300      	str	r3, [sp, #0]
 800f7a8:	2314      	movs	r3, #20
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	4909      	ldr	r1, [pc, #36]	@ (800f7d4 <_Z23getFont_verdana_20_4bppv+0x94>)
 800f7ae:	480a      	ldr	r0, [pc, #40]	@ (800f7d8 <_Z23getFont_verdana_20_4bppv+0x98>)
 800f7b0:	f7ff feb4 	bl	800f51c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f7b4:	4809      	ldr	r0, [pc, #36]	@ (800f7dc <_Z23getFont_verdana_20_4bppv+0x9c>)
 800f7b6:	f01c f91d 	bl	802b9f4 <atexit>
 800f7ba:	4803      	ldr	r0, [pc, #12]	@ (800f7c8 <_Z23getFont_verdana_20_4bppv+0x88>)
 800f7bc:	f01b fa15 	bl	802abea <__cxa_guard_release>
    return verdana_20_4bpp;
 800f7c0:	4b05      	ldr	r3, [pc, #20]	@ (800f7d8 <_Z23getFont_verdana_20_4bppv+0x98>)
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}
 800f7c8:	2005a6b4 	.word	0x2005a6b4
 800f7cc:	0802f188 	.word	0x0802f188
 800f7d0:	0802f194 	.word	0x0802f194
 800f7d4:	0802f164 	.word	0x0802f164
 800f7d8:	2005a688 	.word	0x2005a688
 800f7dc:	0800f731 	.word	0x0800f731

0800f7e0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	4801      	ldr	r0, [pc, #4]	@ (800f7ec <__tcf_0+0xc>)
 800f7e6:	f7ff fe53 	bl	800f490 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f7ea:	bd80      	pop	{r7, pc}
 800f7ec:	2005a6b8 	.word	0x2005a6b8

0800f7f0 <_Z23getFont_verdana_40_4bppv>:
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b08e      	sub	sp, #56	@ 0x38
 800f7f4:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800f7f6:	4b20      	ldr	r3, [pc, #128]	@ (800f878 <_Z23getFont_verdana_40_4bppv+0x88>)
 800f7f8:	e8d3 3faf 	lda	r3, [r3]
 800f7fc:	f003 0301 	and.w	r3, r3, #1
 800f800:	2b00      	cmp	r3, #0
 800f802:	bf0c      	ite	eq
 800f804:	2301      	moveq	r3, #1
 800f806:	2300      	movne	r3, #0
 800f808:	b2db      	uxtb	r3, r3
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d030      	beq.n	800f870 <_Z23getFont_verdana_40_4bppv+0x80>
 800f80e:	481a      	ldr	r0, [pc, #104]	@ (800f878 <_Z23getFont_verdana_40_4bppv+0x88>)
 800f810:	f01b f9df 	bl	802abd2 <__cxa_guard_acquire>
 800f814:	4603      	mov	r3, r0
 800f816:	2b00      	cmp	r3, #0
 800f818:	bf14      	ite	ne
 800f81a:	2301      	movne	r3, #1
 800f81c:	2300      	moveq	r3, #0
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	2b00      	cmp	r3, #0
 800f822:	d025      	beq.n	800f870 <_Z23getFont_verdana_40_4bppv+0x80>
 800f824:	2300      	movs	r3, #0
 800f826:	930c      	str	r3, [sp, #48]	@ 0x30
 800f828:	2300      	movs	r3, #0
 800f82a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f82c:	2300      	movs	r3, #0
 800f82e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f830:	233f      	movs	r3, #63	@ 0x3f
 800f832:	9309      	str	r3, [sp, #36]	@ 0x24
 800f834:	4b11      	ldr	r3, [pc, #68]	@ (800f87c <_Z23getFont_verdana_40_4bppv+0x8c>)
 800f836:	9308      	str	r3, [sp, #32]
 800f838:	4b11      	ldr	r3, [pc, #68]	@ (800f880 <_Z23getFont_verdana_40_4bppv+0x90>)
 800f83a:	9307      	str	r3, [sp, #28]
 800f83c:	2300      	movs	r3, #0
 800f83e:	9306      	str	r3, [sp, #24]
 800f840:	2300      	movs	r3, #0
 800f842:	9305      	str	r3, [sp, #20]
 800f844:	2301      	movs	r3, #1
 800f846:	9304      	str	r3, [sp, #16]
 800f848:	2304      	movs	r3, #4
 800f84a:	9303      	str	r3, [sp, #12]
 800f84c:	2300      	movs	r3, #0
 800f84e:	9302      	str	r3, [sp, #8]
 800f850:	2300      	movs	r3, #0
 800f852:	9301      	str	r3, [sp, #4]
 800f854:	2328      	movs	r3, #40	@ 0x28
 800f856:	9300      	str	r3, [sp, #0]
 800f858:	2328      	movs	r3, #40	@ 0x28
 800f85a:	2201      	movs	r2, #1
 800f85c:	4909      	ldr	r1, [pc, #36]	@ (800f884 <_Z23getFont_verdana_40_4bppv+0x94>)
 800f85e:	480a      	ldr	r0, [pc, #40]	@ (800f888 <_Z23getFont_verdana_40_4bppv+0x98>)
 800f860:	f7ff fe5c 	bl	800f51c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f864:	4809      	ldr	r0, [pc, #36]	@ (800f88c <_Z23getFont_verdana_40_4bppv+0x9c>)
 800f866:	f01c f8c5 	bl	802b9f4 <atexit>
 800f86a:	4803      	ldr	r0, [pc, #12]	@ (800f878 <_Z23getFont_verdana_40_4bppv+0x88>)
 800f86c:	f01b f9bd 	bl	802abea <__cxa_guard_release>
    return verdana_40_4bpp;
 800f870:	4b05      	ldr	r3, [pc, #20]	@ (800f888 <_Z23getFont_verdana_40_4bppv+0x98>)
}
 800f872:	4618      	mov	r0, r3
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}
 800f878:	2005a6e4 	.word	0x2005a6e4
 800f87c:	0802f18c 	.word	0x0802f18c
 800f880:	0802f198 	.word	0x0802f198
 800f884:	0802f174 	.word	0x0802f174
 800f888:	2005a6b8 	.word	0x2005a6b8
 800f88c:	0800f7e1 	.word	0x0800f7e1

0800f890 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 800f890:	b480      	push	{r7}
 800f892:	b085      	sub	sp, #20
 800f894:	af00      	add	r7, sp, #0
 800f896:	60f8      	str	r0, [r7, #12]
 800f898:	60b9      	str	r1, [r7, #8]
 800f89a:	607a      	str	r2, [r7, #4]
 800f89c:	603b      	str	r3, [r7, #0]
    pointArray = 0;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	601a      	str	r2, [r3, #0]
    pointArraySize = 0;
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	601a      	str	r2, [r3, #0]
    commandArray = 0;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	601a      	str	r2, [r3, #0]
    commandArraySize = 0;
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	601a      	str	r2, [r3, #0]
}
 800f8b6:	bf00      	nop
 800f8b8:	3714      	adds	r7, #20
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c0:	4770      	bx	lr

0800f8c2 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f8c2:	b480      	push	{r7}
 800f8c4:	b083      	sub	sp, #12
 800f8c6:	af00      	add	r7, sp, #0
 800f8c8:	6078      	str	r0, [r7, #4]
 800f8ca:	6039      	str	r1, [r7, #0]
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	370c      	adds	r7, #12
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d8:	4770      	bx	lr

0800f8da <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f8da:	b480      	push	{r7}
 800f8dc:	b083      	sub	sp, #12
 800f8de:	af00      	add	r7, sp, #0
 800f8e0:	6078      	str	r0, [r7, #4]
 800f8e2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f8e4:	bf00      	nop
 800f8e6:	370c      	adds	r7, #12
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ee:	4770      	bx	lr

0800f8f0 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f8f0:	b480      	push	{r7}
 800f8f2:	b083      	sub	sp, #12
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f8fa:	bf00      	nop
 800f8fc:	370c      	adds	r7, #12
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr

0800f906 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f906:	b480      	push	{r7}
 800f908:	b083      	sub	sp, #12
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
 800f90e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f910:	bf00      	nop
 800f912:	370c      	adds	r7, #12
 800f914:	46bd      	mov	sp, r7
 800f916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91a:	4770      	bx	lr

0800f91c <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800f91c:	b480      	push	{r7}
 800f91e:	b083      	sub	sp, #12
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	460b      	mov	r3, r1
 800f926:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800f928:	bf00      	nop
 800f92a:	370c      	adds	r7, #12
 800f92c:	46bd      	mov	sp, r7
 800f92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f932:	4770      	bx	lr

0800f934 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800f934:	b480      	push	{r7}
 800f936:	b083      	sub	sp, #12
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
    {
    }
 800f93c:	bf00      	nop
 800f93e:	370c      	adds	r7, #12
 800f940:	46bd      	mov	sp, r7
 800f942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f946:	4770      	bx	lr

0800f948 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800f948:	b480      	push	{r7}
 800f94a:	b083      	sub	sp, #12
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
    {
    }
 800f950:	bf00      	nop
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800f95c:	b480      	push	{r7}
 800f95e:	b083      	sub	sp, #12
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
    {
 800f964:	4a04      	ldr	r2, [pc, #16]	@ (800f978 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	601a      	str	r2, [r3, #0]
    }
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	4618      	mov	r0, r3
 800f96e:	370c      	adds	r7, #12
 800f970:	46bd      	mov	sp, r7
 800f972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f976:	4770      	bx	lr
 800f978:	0802daf8 	.word	0x0802daf8

0800f97c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b082      	sub	sp, #8
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
    }
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f7ff ffe9 	bl	800f95c <_ZN8touchgfx15UIEventListenerD1Ev>
 800f98a:	2104      	movs	r1, #4
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f01b f91e 	bl	802abce <_ZdlPvj>
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	4618      	mov	r0, r3
 800f996:	3708      	adds	r7, #8
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800f99c:	b480      	push	{r7}
 800f99e:	b083      	sub	sp, #12
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
    {
    }
 800f9a4:	bf00      	nop
 800f9a6:	370c      	adds	r7, #12
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr

0800f9b0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800f9b0:	b480      	push	{r7}
 800f9b2:	b083      	sub	sp, #12
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	460b      	mov	r3, r1
 800f9ba:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800f9bc:	bf00      	nop
 800f9be:	370c      	adds	r7, #12
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c6:	4770      	bx	lr

0800f9c8 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800f9c8:	b480      	push	{r7}
 800f9ca:	b083      	sub	sp, #12
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	683a      	ldr	r2, [r7, #0]
 800f9d6:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800f9da:	6810      	ldr	r0, [r2, #0]
 800f9dc:	6851      	ldr	r1, [r2, #4]
 800f9de:	c303      	stmia	r3!, {r0, r1}
    }
 800f9e0:	bf00      	nop
 800f9e2:	370c      	adds	r7, #12
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr

0800f9ec <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b082      	sub	sp, #8
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	3304      	adds	r3, #4
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f008 ff40 	bl	801887e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800f9fe:	bf00      	nop
 800fa00:	3708      	adds	r7, #8
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
	...

0800fa08 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800fa08:	b480      	push	{r7}
 800fa0a:	b083      	sub	sp, #12
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
    {
 800fa10:	4a04      	ldr	r2, [pc, #16]	@ (800fa24 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	601a      	str	r2, [r3, #0]
    }
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4618      	mov	r0, r3
 800fa1a:	370c      	adds	r7, #12
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa22:	4770      	bx	lr
 800fa24:	0802dae0 	.word	0x0802dae0

0800fa28 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b082      	sub	sp, #8
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
    }
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f7ff ffe9 	bl	800fa08 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800fa36:	2104      	movs	r1, #4
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f01b f8c8 	bl	802abce <_ZdlPvj>
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	4618      	mov	r0, r3
 800fa42:	3708      	adds	r7, #8
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800fa48:	b480      	push	{r7}
 800fa4a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800fa4c:	4b0b      	ldr	r3, [pc, #44]	@ (800fa7c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d008      	beq.n	800fa6a <_ZN8touchgfx3HAL3lcdEv+0x22>
 800fa58:	4b08      	ldr	r3, [pc, #32]	@ (800fa7c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d003      	beq.n	800fa6a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800fa62:	4b06      	ldr	r3, [pc, #24]	@ (800fa7c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa68:	e002      	b.n	800fa70 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800fa6a:	4b04      	ldr	r3, [pc, #16]	@ (800fa7c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	689b      	ldr	r3, [r3, #8]
    }
 800fa70:	4618      	mov	r0, r3
 800fa72:	46bd      	mov	sp, r7
 800fa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa78:	4770      	bx	lr
 800fa7a:	bf00      	nop
 800fa7c:	2005b928 	.word	0x2005b928

0800fa80 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800fa88:	4a07      	ldr	r2, [pc, #28]	@ (800faa8 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	601a      	str	r2, [r3, #0]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2200      	movs	r2, #0
 800fa92:	605a      	str	r2, [r3, #4]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2200      	movs	r2, #0
 800fa98:	721a      	strb	r2, [r3, #8]
    {
    }
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	370c      	adds	r7, #12
 800faa0:	46bd      	mov	sp, r7
 800faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa6:	4770      	bx	lr
 800faa8:	0802dabc 	.word	0x0802dabc

0800faac <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800faac:	b480      	push	{r7}
 800faae:	b083      	sub	sp, #12
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
    {
 800fab4:	4a04      	ldr	r2, [pc, #16]	@ (800fac8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	601a      	str	r2, [r3, #0]
    }
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	4618      	mov	r0, r3
 800fabe:	370c      	adds	r7, #12
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr
 800fac8:	0802dabc 	.word	0x0802dabc

0800facc <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
    }
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f7ff ffe9 	bl	800faac <_ZN8touchgfx10TransitionD1Ev>
 800fada:	210c      	movs	r1, #12
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f01b f876 	bl	802abce <_ZdlPvj>
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	4618      	mov	r0, r3
 800fae6:	3708      	adds	r7, #8
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800faec:	b480      	push	{r7}
 800faee:	b083      	sub	sp, #12
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
    {
    }
 800faf4:	bf00      	nop
 800faf6:	370c      	adds	r7, #12
 800faf8:	46bd      	mov	sp, r7
 800fafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafe:	4770      	bx	lr

0800fb00 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800fb00:	b480      	push	{r7}
 800fb02:	b083      	sub	sp, #12
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
    {
    }
 800fb08:	bf00      	nop
 800fb0a:	370c      	adds	r7, #12
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb12:	4770      	bx	lr

0800fb14 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800fb14:	b480      	push	{r7}
 800fb16:	b083      	sub	sp, #12
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
    {
    }
 800fb1c:	bf00      	nop
 800fb1e:	370c      	adds	r7, #12
 800fb20:	46bd      	mov	sp, r7
 800fb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb26:	4770      	bx	lr

0800fb28 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b082      	sub	sp, #8
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800fb30:	f008 fe80 	bl	8018834 <_ZN8touchgfx11Application11getInstanceEv>
 800fb34:	4603      	mov	r3, r0
 800fb36:	681a      	ldr	r2, [r3, #0]
 800fb38:	323c      	adds	r2, #60	@ 0x3c
 800fb3a:	6812      	ldr	r2, [r2, #0]
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	4790      	blx	r2
    }
 800fb40:	bf00      	nop
 800fb42:	3708      	adds	r7, #8
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}

0800fb48 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800fb48:	b480      	push	{r7}
 800fb4a:	b083      	sub	sp, #12
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	683a      	ldr	r2, [r7, #0]
 800fb56:	605a      	str	r2, [r3, #4]
    }
 800fb58:	bf00      	nop
 800fb5a:	370c      	adds	r7, #12
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb62:	4770      	bx	lr

0800fb64 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	4a05      	ldr	r2, [pc, #20]	@ (800fb84 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	601a      	str	r2, [r3, #0]
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7ff fef1 	bl	800f95c <_ZN8touchgfx15UIEventListenerD1Ev>
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3708      	adds	r7, #8
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}
 800fb84:	0802e6b8 	.word	0x0802e6b8

0800fb88 <_ZN8touchgfx11ApplicationD0Ev>:
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b082      	sub	sp, #8
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f7ff ffe7 	bl	800fb64 <_ZN8touchgfx11ApplicationD1Ev>
 800fb96:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f01b f817 	bl	802abce <_ZdlPvj>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	4618      	mov	r0, r3
 800fba4:	3708      	adds	r7, #8
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
	...

0800fbac <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f008 fefe 	bl	80189b8 <_ZN8touchgfx11ApplicationC1Ev>
 800fbbc:	4a09      	ldr	r2, [pc, #36]	@ (800fbe4 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	4a04      	ldr	r2, [pc, #16]	@ (800fbe8 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800fbd6:	6013      	str	r3, [r2, #0]
    }
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3708      	adds	r7, #8
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	0802da68 	.word	0x0802da68
 800fbe8:	2005b97c 	.word	0x2005b97c

0800fbec <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b082      	sub	sp, #8
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f000 f804 	bl	800fc02 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800fbfa:	bf00      	nop
 800fbfc:	3708      	adds	r7, #8
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}

0800fc02 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800fc02:	b580      	push	{r7, lr}
 800fc04:	b082      	sub	sp, #8
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d00f      	beq.n	800fc34 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	330c      	adds	r3, #12
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	4610      	mov	r0, r2
 800fc28:	4798      	blx	r3
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d001      	beq.n	800fc34 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fc30:	2301      	movs	r3, #1
 800fc32:	e000      	b.n	800fc36 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800fc34:	2300      	movs	r3, #0
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d00e      	beq.n	800fc58 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	3308      	adds	r3, #8
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	4610      	mov	r0, r2
 800fc4e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2200      	movs	r2, #0
 800fc54:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 800fc58:	bf00      	nop
 800fc5a:	3708      	adds	r7, #8
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800fc60:	b480      	push	{r7}
 800fc62:	b083      	sub	sp, #12
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	683a      	ldr	r2, [r7, #0]
 800fc6e:	601a      	str	r2, [r3, #0]
    }
 800fc70:	bf00      	nop
 800fc72:	370c      	adds	r7, #12
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	4a05      	ldr	r2, [pc, #20]	@ (800fc9c <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	601a      	str	r2, [r3, #0]
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7ff ff69 	bl	800fb64 <_ZN8touchgfx11ApplicationD1Ev>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	4618      	mov	r0, r3
 800fc96:	3708      	adds	r7, #8
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	0802da68 	.word	0x0802da68

0800fca0 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b082      	sub	sp, #8
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f7ff ffe7 	bl	800fc7c <_ZN8touchgfx14MVPApplicationD1Ev>
 800fcae:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800fcb2:	6878      	ldr	r0, [r7, #4]
 800fcb4:	f01a ff8b 	bl	802abce <_ZdlPvj>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	4618      	mov	r0, r3
 800fcbc:	3708      	adds	r7, #8
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
	...

0800fcc4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b082      	sub	sp, #8
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	4a05      	ldr	r2, [pc, #20]	@ (800fce4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	601a      	str	r2, [r3, #0]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7ff fe97 	bl	800fa08 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	4618      	mov	r0, r3
 800fcde:	3708      	adds	r7, #8
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	0802da50 	.word	0x0802da50

0800fce8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b082      	sub	sp, #8
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f7ff ffe7 	bl	800fcc4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fcf6:	2110      	movs	r1, #16
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f01a ff68 	bl	802abce <_ZdlPvj>
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	4618      	mov	r0, r3
 800fd02:	3708      	adds	r7, #8
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}

0800fd08 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b082      	sub	sp, #8
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
 800fd10:	4a08      	ldr	r2, [pc, #32]	@ (800fd34 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	601a      	str	r2, [r3, #0]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f7ff ffd1 	bl	800fcc4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7ff ffa9 	bl	800fc7c <_ZN8touchgfx14MVPApplicationD1Ev>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3708      	adds	r7, #8
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}
 800fd34:	0802d9fc 	.word	0x0802d9fc

0800fd38 <_ZN23FrontendApplicationBaseD0Ev>:
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f7ff ffe1 	bl	800fd08 <_ZN23FrontendApplicationBaseD1Ev>
 800fd46:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f01a ff3f 	bl	802abce <_ZdlPvj>
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	4618      	mov	r0, r3
 800fd54:	3708      	adds	r7, #8
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}

0800fd5a <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800fd5a:	b580      	push	{r7, lr}
 800fd5c:	b082      	sub	sp, #8
 800fd5e:	af00      	add	r7, sp, #0
 800fd60:	6078      	str	r0, [r7, #4]
    {
        gotoscreenScreenNoTransition();
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f000 f886 	bl	800fe74 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 800fd68:	bf00      	nop
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800fd70:	b480      	push	{r7}
 800fd72:	b083      	sub	sp, #12
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2201      	movs	r2, #1
 800fd7c:	721a      	strb	r2, [r3, #8]
    }
 800fd7e:	bf00      	nop
 800fd80:	370c      	adds	r7, #12
 800fd82:	46bd      	mov	sp, r7
 800fd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd88:	4770      	bx	lr

0800fd8a <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800fd8a:	b480      	push	{r7}
 800fd8c:	b083      	sub	sp, #12
 800fd8e:	af00      	add	r7, sp, #0
 800fd90:	6078      	str	r0, [r7, #4]
 800fd92:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	683a      	ldr	r2, [r7, #0]
 800fd98:	605a      	str	r2, [r3, #4]
    }
 800fd9a:	bf00      	nop
 800fd9c:	370c      	adds	r7, #12
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda4:	4770      	bx	lr
	...

0800fda8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b084      	sub	sp, #16
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	60f8      	str	r0, [r7, #12]
 800fdb0:	60b9      	str	r1, [r7, #8]
 800fdb2:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7ff fef8 	bl	800fbac <_ZN8touchgfx14MVPApplicationC1Ev>
 800fdbc:	4a18      	ldr	r2, [pc, #96]	@ (800fe20 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f000 f8a9 	bl	800ff20 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	687a      	ldr	r2, [r7, #4]
 800fdd2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	68ba      	ldr	r2, [r7, #8]
 800fdda:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800fdde:	f7ff fb79 	bl	800f4d4 <_ZN8touchgfx3HAL11getInstanceEv>
 800fde2:	4603      	mov	r3, r0
 800fde4:	681a      	ldr	r2, [r3, #0]
 800fde6:	3208      	adds	r2, #8
 800fde8:	6812      	ldr	r2, [r2, #0]
 800fdea:	2101      	movs	r1, #1
 800fdec:	4618      	mov	r0, r3
 800fdee:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800fdf0:	f7ff fe2a 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f012 fe0f 	bl	8022a1a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800fdfc:	f7ff fe24 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 800fe00:	4603      	mov	r3, r0
 800fe02:	4618      	mov	r0, r3
 800fe04:	f012 fe80 	bl	8022b08 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800fe08:	f7ff fe1e 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f012 fe86 	bl	8022b20 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>
}
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	4618      	mov	r0, r3
 800fe18:	3710      	adds	r7, #16
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	0802d9fc 	.word	0x0802d9fc

0800fe24 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800fe24:	b480      	push	{r7}
 800fe26:	b083      	sub	sp, #12
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
 800fe2c:	6039      	str	r1, [r7, #0]
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	4618      	mov	r0, r3
 800fe32:	370c      	adds	r7, #12
 800fe34:	46bd      	mov	sp, r7
 800fe36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3a:	4770      	bx	lr

0800fe3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	6039      	str	r1, [r7, #0]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	683a      	ldr	r2, [r7, #0]
 800fe4a:	4611      	mov	r1, r2
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7ff ffe9 	bl	800fe24 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	685a      	ldr	r2, [r3, #4]
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	605a      	str	r2, [r3, #4]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	683a      	ldr	r2, [r7, #0]
 800fe5e:	3308      	adds	r3, #8
 800fe60:	3208      	adds	r2, #8
 800fe62:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe66:	e883 0003 	stmia.w	r3, {r0, r1}
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3708      	adds	r7, #8
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800fe74:	b590      	push	{r4, r7, lr}
 800fe76:	b089      	sub	sp, #36	@ 0x24
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreenScreenNoTransitionImpl);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800fe82:	4b10      	ldr	r3, [pc, #64]	@ (800fec4 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800fe84:	61bb      	str	r3, [r7, #24]
 800fe86:	2300      	movs	r3, #0
 800fe88:	61fb      	str	r3, [r7, #28]
 800fe8a:	f107 0008 	add.w	r0, r7, #8
 800fe8e:	f107 0318 	add.w	r3, r7, #24
 800fe92:	cb0c      	ldmia	r3, {r2, r3}
 800fe94:	6879      	ldr	r1, [r7, #4]
 800fe96:	f000 f85f 	bl	800ff58 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fe9a:	f107 0308 	add.w	r3, r7, #8
 800fe9e:	4619      	mov	r1, r3
 800fea0:	4620      	mov	r0, r4
 800fea2:	f7ff ffcb 	bl	800fe3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fea6:	f107 0308 	add.w	r3, r7, #8
 800feaa:	4618      	mov	r0, r3
 800feac:	f7ff ff0a 	bl	800fcc4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800febc:	bf00      	nop
 800febe:	3724      	adds	r7, #36	@ 0x24
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd90      	pop	{r4, r7, pc}
 800fec4:	0800fec9 	.word	0x0800fec9

0800fec8 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af02      	add	r7, sp, #8
 800fece:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800fedc:	461a      	mov	r2, r3
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800fee4:	9300      	str	r3, [sp, #0]
 800fee6:	4b04      	ldr	r3, [pc, #16]	@ (800fef8 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800fee8:	4804      	ldr	r0, [pc, #16]	@ (800fefc <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800feea:	f000 f867 	bl	800ffbc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800feee:	bf00      	nop
 800fef0:	3708      	adds	r7, #8
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}
 800fef6:	bf00      	nop
 800fef8:	2005b970 	.word	0x2005b970
 800fefc:	2005b96c 	.word	0x2005b96c

0800ff00 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800ff00:	b480      	push	{r7}
 800ff02:	b083      	sub	sp, #12
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	4a04      	ldr	r2, [pc, #16]	@ (800ff1c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	601a      	str	r2, [r3, #0]
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	4618      	mov	r0, r3
 800ff12:	370c      	adds	r7, #12
 800ff14:	46bd      	mov	sp, r7
 800ff16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1a:	4770      	bx	lr
 800ff1c:	0802dae0 	.word	0x0802dae0

0800ff20 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b082      	sub	sp, #8
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7ff ffe8 	bl	800ff00 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ff30:	4a08      	ldr	r2, [pc, #32]	@ (800ff54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	601a      	str	r2, [r3, #0]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	605a      	str	r2, [r3, #4]
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	609a      	str	r2, [r3, #8]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2200      	movs	r2, #0
 800ff46:	60da      	str	r2, [r3, #12]
    {
    }
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3708      	adds	r7, #8
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}
 800ff52:	bf00      	nop
 800ff54:	0802da50 	.word	0x0802da50

0800ff58 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	60f8      	str	r0, [r7, #12]
 800ff60:	60b9      	str	r1, [r7, #8]
 800ff62:	4639      	mov	r1, r7
 800ff64:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7ff ffc8 	bl	800ff00 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ff70:	4a08      	ldr	r2, [pc, #32]	@ (800ff94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	601a      	str	r2, [r3, #0]
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	68ba      	ldr	r2, [r7, #8]
 800ff7a:	605a      	str	r2, [r3, #4]
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	3308      	adds	r3, #8
 800ff80:	463a      	mov	r2, r7
 800ff82:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff86:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3710      	adds	r7, #16
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}
 800ff94:	0802da50 	.word	0x0802da50

0800ff98 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b082      	sub	sp, #8
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7ff fd6c 	bl	800fa80 <_ZN8touchgfx10TransitionC1Ev>
 800ffa8:	4a03      	ldr	r2, [pc, #12]	@ (800ffb8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	601a      	str	r2, [r3, #0]
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	3708      	adds	r7, #8
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}
 800ffb8:	0802d9d8 	.word	0x0802d9d8

0800ffbc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ffbc:	b590      	push	{r4, r7, lr}
 800ffbe:	b08f      	sub	sp, #60	@ 0x3c
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	60f8      	str	r0, [r7, #12]
 800ffc4:	60b9      	str	r1, [r7, #8]
 800ffc6:	607a      	str	r2, [r7, #4]
 800ffc8:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	689a      	ldr	r2, [r3, #8]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	689b      	ldr	r3, [r3, #8]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	3320      	adds	r3, #32
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	4610      	mov	r0, r2
 800ffda:	4798      	blx	r3
 800ffdc:	4603      	mov	r3, r0
 800ffde:	2bc3      	cmp	r3, #195	@ 0xc3
 800ffe0:	d805      	bhi.n	800ffee <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800ffe2:	4b7d      	ldr	r3, [pc, #500]	@ (80101d8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x21c>)
 800ffe4:	4a7d      	ldr	r2, [pc, #500]	@ (80101dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800ffe6:	21a3      	movs	r1, #163	@ 0xa3
 800ffe8:	487d      	ldr	r0, [pc, #500]	@ (80101e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800ffea:	f01b fce5 	bl	802b9b8 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	685a      	ldr	r2, [r3, #4]
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	3320      	adds	r3, #32
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	4610      	mov	r0, r2
 800fffe:	4798      	blx	r3
 8010000:	4603      	mov	r3, r0
 8010002:	2b0f      	cmp	r3, #15
 8010004:	d805      	bhi.n	8010012 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x56>
 8010006:	4b77      	ldr	r3, [pc, #476]	@ (80101e4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8010008:	4a74      	ldr	r2, [pc, #464]	@ (80101dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 801000a:	21a4      	movs	r1, #164	@ 0xa4
 801000c:	4874      	ldr	r0, [pc, #464]	@ (80101e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 801000e:	f01b fcd3 	bl	802b9b8 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	68da      	ldr	r2, [r3, #12]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	68db      	ldr	r3, [r3, #12]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	3320      	adds	r3, #32
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	4610      	mov	r0, r2
 8010022:	4798      	blx	r3
 8010024:	4603      	mov	r3, r0
 8010026:	2b0b      	cmp	r3, #11
 8010028:	d805      	bhi.n	8010036 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7a>
 801002a:	4b6f      	ldr	r3, [pc, #444]	@ (80101e8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 801002c:	4a6b      	ldr	r2, [pc, #428]	@ (80101dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 801002e:	21a5      	movs	r1, #165	@ 0xa5
 8010030:	486b      	ldr	r0, [pc, #428]	@ (80101e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8010032:	f01b fcc1 	bl	802b9b8 <__assert_func>
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	62bb      	str	r3, [r7, #40]	@ 0x28
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	627b      	str	r3, [r7, #36]	@ 0x24
 801003e:	683b      	ldr	r3, [r7, #0]
 8010040:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8010042:	f008 fbf7 	bl	8018834 <_ZN8touchgfx11Application11getInstanceEv>
 8010046:	4603      	mov	r3, r0
 8010048:	4618      	mov	r0, r3
 801004a:	f7ff fccf 	bl	800f9ec <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 801004e:	6a3b      	ldr	r3, [r7, #32]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d008      	beq.n	8010068 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xac>
        (*currentTrans)->tearDown();
 8010056:	6a3b      	ldr	r3, [r7, #32]
 8010058:	681a      	ldr	r2, [r3, #0]
 801005a:	6a3b      	ldr	r3, [r7, #32]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	330c      	adds	r3, #12
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	4610      	mov	r0, r2
 8010066:	4798      	blx	r3
    if (*currentTrans)
 8010068:	6a3b      	ldr	r3, [r7, #32]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d007      	beq.n	8010080 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc4>
        (*currentTrans)->~Transition();
 8010070:	6a3b      	ldr	r3, [r7, #32]
 8010072:	681a      	ldr	r2, [r3, #0]
 8010074:	6a3b      	ldr	r3, [r7, #32]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	4610      	mov	r0, r2
 801007e:	4798      	blx	r3
    if (*currentScreen)
 8010080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d008      	beq.n	801009a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
        (*currentScreen)->tearDownScreen();
 8010088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801008a:	681a      	ldr	r2, [r3, #0]
 801008c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	3314      	adds	r3, #20
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	4610      	mov	r0, r2
 8010098:	4798      	blx	r3
    if (*currentPresenter)
 801009a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d008      	beq.n	80100b4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xf8>
        (*currentPresenter)->deactivate();
 80100a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a4:	681a      	ldr	r2, [r3, #0]
 80100a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	3304      	adds	r3, #4
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	4610      	mov	r0, r2
 80100b2:	4798      	blx	r3
    if (*currentScreen)
 80100b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d007      	beq.n	80100cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
        (*currentScreen)->~Screen();
 80100bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100be:	681a      	ldr	r2, [r3, #0]
 80100c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	4610      	mov	r0, r2
 80100ca:	4798      	blx	r3
    if (*currentPresenter)
 80100cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d008      	beq.n	80100e6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
        (*currentPresenter)->~Presenter();
 80100d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	3308      	adds	r3, #8
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	4610      	mov	r0, r2
 80100e4:	4798      	blx	r3
}
 80100e6:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	68db      	ldr	r3, [r3, #12]
 80100ec:	2100      	movs	r1, #0
 80100ee:	4618      	mov	r0, r3
 80100f0:	f000 f87c 	bl	80101ec <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80100f4:	4603      	mov	r3, r0
 80100f6:	4619      	mov	r1, r3
 80100f8:	200c      	movs	r0, #12
 80100fa:	f7ff fbe2 	bl	800f8c2 <_ZnwjPv>
 80100fe:	4604      	mov	r4, r0
 8010100:	4620      	mov	r0, r4
 8010102:	f7ff ff49 	bl	800ff98 <_ZN8touchgfx12NoTransitionC1Ev>
 8010106:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	689b      	ldr	r3, [r3, #8]
 801010c:	2100      	movs	r1, #0
 801010e:	4618      	mov	r0, r3
 8010110:	f000 f87f 	bl	8010212 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 8010114:	4603      	mov	r3, r0
 8010116:	4619      	mov	r1, r3
 8010118:	20c4      	movs	r0, #196	@ 0xc4
 801011a:	f7ff fbd2 	bl	800f8c2 <_ZnwjPv>
 801011e:	4604      	mov	r4, r0
 8010120:	4620      	mov	r0, r4
 8010122:	f001 f8a3 	bl	801126c <_ZN10screenViewC1Ev>
 8010126:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	685b      	ldr	r3, [r3, #4]
 801012c:	2100      	movs	r1, #0
 801012e:	4618      	mov	r0, r3
 8010130:	f000 f882 	bl	8010238 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 8010134:	4603      	mov	r3, r0
 8010136:	4619      	mov	r1, r3
 8010138:	2010      	movs	r0, #16
 801013a:	f7ff fbc2 	bl	800f8c2 <_ZnwjPv>
 801013e:	4604      	mov	r4, r0
 8010140:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010142:	4620      	mov	r0, r4
 8010144:	f001 f83c 	bl	80111c0 <_ZN15screenPresenterC1ER10screenView>
 8010148:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801014e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010154:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801015a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801015c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801015e:	2b00      	cmp	r3, #0
 8010160:	d002      	beq.n	8010168 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ac>
 8010162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010164:	3304      	adds	r3, #4
 8010166:	e000      	b.n	801016a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ae>
 8010168:	2300      	movs	r3, #0
 801016a:	4619      	mov	r1, r3
 801016c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801016e:	f7ff fd77 	bl	800fc60 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010174:	3304      	adds	r3, #4
 8010176:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8010178:	4618      	mov	r0, r3
 801017a:	f7ff fe06 	bl	800fd8a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801017e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010180:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010182:	4618      	mov	r0, r3
 8010184:	f000 f86b 	bl	801025e <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 8010188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801018a:	61fb      	str	r3, [r7, #28]
 801018c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801018e:	61bb      	str	r3, [r7, #24]
 8010190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010192:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8010194:	69fb      	ldr	r3, [r7, #28]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	330c      	adds	r3, #12
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	69f8      	ldr	r0, [r7, #28]
 801019e:	4798      	blx	r3
    newPresenter->activate();
 80101a0:	69bb      	ldr	r3, [r7, #24]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	69b8      	ldr	r0, [r7, #24]
 80101a8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80101aa:	6979      	ldr	r1, [r7, #20]
 80101ac:	69f8      	ldr	r0, [r7, #28]
 80101ae:	f00a fce1 	bl	801ab74 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	3310      	adds	r3, #16
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	6978      	ldr	r0, [r7, #20]
 80101bc:	4798      	blx	r3
    newTransition->invalidate();
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	3314      	adds	r3, #20
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	6978      	ldr	r0, [r7, #20]
 80101c8:	4798      	blx	r3
}
 80101ca:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80101cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	373c      	adds	r7, #60	@ 0x3c
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd90      	pop	{r4, r7, pc}
 80101d6:	bf00      	nop
 80101d8:	0802cbe8 	.word	0x0802cbe8
 80101dc:	0802cc78 	.word	0x0802cc78
 80101e0:	0802cd48 	.word	0x0802cd48
 80101e4:	0802cd8c 	.word	0x0802cd8c
 80101e8:	0802ce30 	.word	0x0802ce30

080101ec <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b082      	sub	sp, #8
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
 80101f4:	460b      	mov	r3, r1
 80101f6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	3324      	adds	r3, #36	@ 0x24
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	887a      	ldrh	r2, [r7, #2]
 8010202:	4611      	mov	r1, r2
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	4798      	blx	r3
 8010208:	4603      	mov	r3, r0
    }
 801020a:	4618      	mov	r0, r3
 801020c:	3708      	adds	r7, #8
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}

08010212 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 8010212:	b580      	push	{r7, lr}
 8010214:	b082      	sub	sp, #8
 8010216:	af00      	add	r7, sp, #0
 8010218:	6078      	str	r0, [r7, #4]
 801021a:	460b      	mov	r3, r1
 801021c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	3324      	adds	r3, #36	@ 0x24
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	887a      	ldrh	r2, [r7, #2]
 8010228:	4611      	mov	r1, r2
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	4798      	blx	r3
 801022e:	4603      	mov	r3, r0
    }
 8010230:	4618      	mov	r0, r3
 8010232:	3708      	adds	r7, #8
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}

08010238 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	460b      	mov	r3, r1
 8010242:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	3324      	adds	r3, #36	@ 0x24
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	887a      	ldrh	r2, [r7, #2]
 801024e:	4611      	mov	r1, r2
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	4798      	blx	r3
 8010254:	4603      	mov	r3, r0
    }
 8010256:	4618      	mov	r0, r3
 8010258:	3708      	adds	r7, #8
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}

0801025e <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 801025e:	b480      	push	{r7}
 8010260:	b083      	sub	sp, #12
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
 8010266:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	683a      	ldr	r2, [r7, #0]
 801026c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 801026e:	bf00      	nop
 8010270:	370c      	adds	r7, #12
 8010272:	46bd      	mov	sp, r7
 8010274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010278:	4770      	bx	lr
	...

0801027c <_ZN8touchgfx12NoTransitionD1Ev>:
 801027c:	b580      	push	{r7, lr}
 801027e:	b082      	sub	sp, #8
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
 8010284:	4a05      	ldr	r2, [pc, #20]	@ (801029c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	601a      	str	r2, [r3, #0]
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	4618      	mov	r0, r3
 801028e:	f7ff fc0d 	bl	800faac <_ZN8touchgfx10TransitionD1Ev>
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	4618      	mov	r0, r3
 8010296:	3708      	adds	r7, #8
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}
 801029c:	0802d9d8 	.word	0x0802d9d8

080102a0 <_ZN8touchgfx12NoTransitionD0Ev>:
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f7ff ffe7 	bl	801027c <_ZN8touchgfx12NoTransitionD1Ev>
 80102ae:	210c      	movs	r1, #12
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f01a fc8c 	bl	802abce <_ZdlPvj>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	4618      	mov	r0, r3
 80102ba:	3708      	adds	r7, #8
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	687a      	ldr	r2, [r7, #4]
 80102ce:	68d2      	ldr	r2, [r2, #12]
 80102d0:	1052      	asrs	r2, r2, #1
 80102d2:	1899      	adds	r1, r3, r2
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	68db      	ldr	r3, [r3, #12]
 80102d8:	f003 0301 	and.w	r3, r3, #1
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d102      	bne.n	80102e6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	e00a      	b.n	80102fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	685b      	ldr	r3, [r3, #4]
 80102ea:	687a      	ldr	r2, [r7, #4]
 80102ec:	68d2      	ldr	r2, [r2, #12]
 80102ee:	1052      	asrs	r2, r2, #1
 80102f0:	4413      	add	r3, r2
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	687a      	ldr	r2, [r7, #4]
 80102f6:	6892      	ldr	r2, [r2, #8]
 80102f8:	4413      	add	r3, r2
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	4608      	mov	r0, r1
 80102fe:	4798      	blx	r3
    }
 8010300:	bf00      	nop
 8010302:	3708      	adds	r7, #8
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}

08010308 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	685b      	ldr	r3, [r3, #4]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d010      	beq.n	801033a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	689b      	ldr	r3, [r3, #8]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d107      	bne.n	8010330 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	68db      	ldr	r3, [r3, #12]
 8010324:	f003 0301 	and.w	r3, r3, #1
 8010328:	2b00      	cmp	r3, #0
 801032a:	d101      	bne.n	8010330 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801032c:	2301      	movs	r3, #1
 801032e:	e000      	b.n	8010332 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8010330:	2300      	movs	r3, #0
 8010332:	2b01      	cmp	r3, #1
 8010334:	d001      	beq.n	801033a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010336:	2301      	movs	r3, #1
 8010338:	e000      	b.n	801033c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801033a:	2300      	movs	r3, #0
    }
 801033c:	4618      	mov	r0, r3
 801033e:	370c      	adds	r7, #12
 8010340:	46bd      	mov	sp, r7
 8010342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010346:	4770      	bx	lr

08010348 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 8010348:	b480      	push	{r7}
 801034a:	b083      	sub	sp, #12
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
 8010350:	6039      	str	r1, [r7, #0]
        : color(col)
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	683a      	ldr	r2, [r7, #0]
 8010356:	601a      	str	r2, [r3, #0]
    {
    }
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	4618      	mov	r0, r3
 801035c:	370c      	adds	r7, #12
 801035e:	46bd      	mov	sp, r7
 8010360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010364:	4770      	bx	lr

08010366 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8010366:	b480      	push	{r7}
 8010368:	b083      	sub	sp, #12
 801036a:	af00      	add	r7, sp, #0
 801036c:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2200      	movs	r2, #0
 8010372:	801a      	strh	r2, [r3, #0]
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2200      	movs	r2, #0
 8010378:	805a      	strh	r2, [r3, #2]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	2200      	movs	r2, #0
 801037e:	809a      	strh	r2, [r3, #4]
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2200      	movs	r2, #0
 8010384:	80da      	strh	r2, [r3, #6]
    {
    }
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	4618      	mov	r0, r3
 801038a:	370c      	adds	r7, #12
 801038c:	46bd      	mov	sp, r7
 801038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010392:	4770      	bx	lr

08010394 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8010394:	b480      	push	{r7}
 8010396:	b083      	sub	sp, #12
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	460b      	mov	r3, r1
 801039e:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	887a      	ldrh	r2, [r7, #2]
 80103a4:	801a      	strh	r2, [r3, #0]
    {
    }
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	4618      	mov	r0, r3
 80103aa:	370c      	adds	r7, #12
 80103ac:	46bd      	mov	sp, r7
 80103ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b2:	4770      	bx	lr

080103b4 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b082      	sub	sp, #8
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 80103bc:	4a14      	ldr	r2, [pc, #80]	@ (8010410 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	601a      	str	r2, [r3, #0]
        : rect(),
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	3304      	adds	r3, #4
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7ff ffcd 	bl	8010366 <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	330c      	adds	r3, #12
 80103d0:	4618      	mov	r0, r3
 80103d2:	f7ff ffc8 	bl	8010366 <_ZN8touchgfx4RectC1Ev>
          parent(0),
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2200      	movs	r2, #0
 80103da:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2200      	movs	r2, #0
 80103e0:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2200      	movs	r2, #0
 80103e6:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2200      	movs	r2, #0
 80103ec:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2200      	movs	r2, #0
 80103f2:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2200      	movs	r2, #0
 80103f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2201      	movs	r2, #1
 8010400:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	4618      	mov	r0, r3
 8010408:	3708      	adds	r7, #8
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
 801040e:	bf00      	nop
 8010410:	0802e70c 	.word	0x0802e70c

08010414 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8010414:	b480      	push	{r7}
 8010416:	b083      	sub	sp, #12
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
    {
 801041c:	4a04      	ldr	r2, [pc, #16]	@ (8010430 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	601a      	str	r2, [r3, #0]
    }
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	4618      	mov	r0, r3
 8010426:	370c      	adds	r7, #12
 8010428:	46bd      	mov	sp, r7
 801042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042e:	4770      	bx	lr
 8010430:	0802e70c 	.word	0x0802e70c

08010434 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8010434:	b580      	push	{r7, lr}
 8010436:	b082      	sub	sp, #8
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
    }
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	f7ff ffe9 	bl	8010414 <_ZN8touchgfx8DrawableD1Ev>
 8010442:	2128      	movs	r1, #40	@ 0x28
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f01a fbc2 	bl	802abce <_ZdlPvj>
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	4618      	mov	r0, r3
 801044e:	3708      	adds	r7, #8
 8010450:	46bd      	mov	sp, r7
 8010452:	bd80      	pop	{r7, pc}

08010454 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8010454:	b580      	push	{r7, lr}
 8010456:	b082      	sub	sp, #8
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8010462:	2b00      	cmp	r3, #0
 8010464:	d005      	beq.n	8010472 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	3314      	adds	r3, #20
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	4798      	blx	r3
        }
    }
 8010472:	bf00      	nop
 8010474:	3708      	adds	r7, #8
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}

0801047a <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 801047a:	b480      	push	{r7}
 801047c:	b083      	sub	sp, #12
 801047e:	af00      	add	r7, sp, #0
 8010480:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8010482:	2300      	movs	r3, #0
    }
 8010484:	4618      	mov	r0, r3
 8010486:	370c      	adds	r7, #12
 8010488:	46bd      	mov	sp, r7
 801048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048e:	4770      	bx	lr

08010490 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010490:	b580      	push	{r7, lr}
 8010492:	b084      	sub	sp, #16
 8010494:	af00      	add	r7, sp, #0
 8010496:	60f8      	str	r0, [r7, #12]
 8010498:	4608      	mov	r0, r1
 801049a:	4611      	mov	r1, r2
 801049c:	461a      	mov	r2, r3
 801049e:	4603      	mov	r3, r0
 80104a0:	817b      	strh	r3, [r7, #10]
 80104a2:	460b      	mov	r3, r1
 80104a4:	813b      	strh	r3, [r7, #8]
 80104a6:	4613      	mov	r3, r2
 80104a8:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 80104aa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80104ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80104b2:	4619      	mov	r1, r3
 80104b4:	68f8      	ldr	r0, [r7, #12]
 80104b6:	f000 f82a 	bl	801050e <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 80104ba:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80104be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80104c2:	4619      	mov	r1, r3
 80104c4:	68f8      	ldr	r0, [r7, #12]
 80104c6:	f000 f87e 	bl	80105c6 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80104ca:	bf00      	nop
 80104cc:	3710      	adds	r7, #16
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}

080104d2 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 80104d2:	b480      	push	{r7}
 80104d4:	b083      	sub	sp, #12
 80104d6:	af00      	add	r7, sp, #0
 80104d8:	6078      	str	r0, [r7, #4]
 80104da:	460b      	mov	r3, r1
 80104dc:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	887a      	ldrh	r2, [r7, #2]
 80104e2:	809a      	strh	r2, [r3, #4]
    }
 80104e4:	bf00      	nop
 80104e6:	370c      	adds	r7, #12
 80104e8:	46bd      	mov	sp, r7
 80104ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ee:	4770      	bx	lr

080104f0 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 80104f0:	b480      	push	{r7}
 80104f2:	b083      	sub	sp, #12
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
 80104f8:	460b      	mov	r3, r1
 80104fa:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	887a      	ldrh	r2, [r7, #2]
 8010500:	80da      	strh	r2, [r3, #6]
    }
 8010502:	bf00      	nop
 8010504:	370c      	adds	r7, #12
 8010506:	46bd      	mov	sp, r7
 8010508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050c:	4770      	bx	lr

0801050e <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 801050e:	b580      	push	{r7, lr}
 8010510:	b082      	sub	sp, #8
 8010512:	af00      	add	r7, sp, #0
 8010514:	6078      	str	r0, [r7, #4]
 8010516:	460b      	mov	r3, r1
 8010518:	807b      	strh	r3, [r7, #2]
 801051a:	4613      	mov	r3, r2
 801051c:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	3330      	adds	r3, #48	@ 0x30
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801052a:	4611      	mov	r1, r2
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	4798      	blx	r3
        setY(y);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	3334      	adds	r3, #52	@ 0x34
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	f9b7 2000 	ldrsh.w	r2, [r7]
 801053c:	4611      	mov	r1, r2
 801053e:	6878      	ldr	r0, [r7, #4]
 8010540:	4798      	blx	r3
    }
 8010542:	bf00      	nop
 8010544:	3708      	adds	r7, #8
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}

0801054a <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 801054a:	b480      	push	{r7}
 801054c:	b083      	sub	sp, #12
 801054e:	af00      	add	r7, sp, #0
 8010550:	6078      	str	r0, [r7, #4]
 8010552:	460b      	mov	r3, r1
 8010554:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	887a      	ldrh	r2, [r7, #2]
 801055a:	811a      	strh	r2, [r3, #8]
    }
 801055c:	bf00      	nop
 801055e:	370c      	adds	r7, #12
 8010560:	46bd      	mov	sp, r7
 8010562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010566:	4770      	bx	lr

08010568 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8010568:	b480      	push	{r7}
 801056a:	b083      	sub	sp, #12
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	460b      	mov	r3, r1
 8010572:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	887a      	ldrh	r2, [r7, #2]
 8010578:	815a      	strh	r2, [r3, #10]
    }
 801057a:	bf00      	nop
 801057c:	370c      	adds	r7, #12
 801057e:	46bd      	mov	sp, r7
 8010580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010584:	4770      	bx	lr

08010586 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8010586:	b480      	push	{r7}
 8010588:	b083      	sub	sp, #12
 801058a:	af00      	add	r7, sp, #0
 801058c:	6078      	str	r0, [r7, #4]
    {
    }
 801058e:	bf00      	nop
 8010590:	370c      	adds	r7, #12
 8010592:	46bd      	mov	sp, r7
 8010594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010598:	4770      	bx	lr

0801059a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 801059a:	b480      	push	{r7}
 801059c:	b083      	sub	sp, #12
 801059e:	af00      	add	r7, sp, #0
 80105a0:	6078      	str	r0, [r7, #4]
 80105a2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80105a4:	bf00      	nop
 80105a6:	370c      	adds	r7, #12
 80105a8:	46bd      	mov	sp, r7
 80105aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ae:	4770      	bx	lr

080105b0 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80105b0:	b480      	push	{r7}
 80105b2:	b083      	sub	sp, #12
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80105ba:	bf00      	nop
 80105bc:	370c      	adds	r7, #12
 80105be:	46bd      	mov	sp, r7
 80105c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c4:	4770      	bx	lr

080105c6 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 80105c6:	b580      	push	{r7, lr}
 80105c8:	b082      	sub	sp, #8
 80105ca:	af00      	add	r7, sp, #0
 80105cc:	6078      	str	r0, [r7, #4]
 80105ce:	460b      	mov	r3, r1
 80105d0:	807b      	strh	r3, [r7, #2]
 80105d2:	4613      	mov	r3, r2
 80105d4:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	3338      	adds	r3, #56	@ 0x38
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80105e2:	4611      	mov	r1, r2
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	4798      	blx	r3
        setHeight(height);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	333c      	adds	r3, #60	@ 0x3c
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80105f4:	4611      	mov	r1, r2
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	4798      	blx	r3
    }
 80105fa:	bf00      	nop
 80105fc:	3708      	adds	r7, #8
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}

08010602 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8010602:	b480      	push	{r7}
 8010604:	b083      	sub	sp, #12
 8010606:	af00      	add	r7, sp, #0
 8010608:	6078      	str	r0, [r7, #4]
 801060a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 801060c:	bf00      	nop
 801060e:	370c      	adds	r7, #12
 8010610:	46bd      	mov	sp, r7
 8010612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010616:	4770      	bx	lr

08010618 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8010618:	b480      	push	{r7}
 801061a:	b083      	sub	sp, #12
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
    {
    }
 8010620:	bf00      	nop
 8010622:	370c      	adds	r7, #12
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr

0801062c <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 801062c:	b480      	push	{r7}
 801062e:	b083      	sub	sp, #12
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 801063a:	4618      	mov	r0, r3
 801063c:	370c      	adds	r7, #12
 801063e:	46bd      	mov	sp, r7
 8010640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010644:	4770      	bx	lr

08010646 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8010646:	b480      	push	{r7}
 8010648:	b083      	sub	sp, #12
 801064a:	af00      	add	r7, sp, #0
 801064c:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 8010654:	4618      	mov	r0, r3
 8010656:	370c      	adds	r7, #12
 8010658:	46bd      	mov	sp, r7
 801065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065e:	4770      	bx	lr

08010660 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8010660:	b580      	push	{r7, lr}
 8010662:	b082      	sub	sp, #8
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	460b      	mov	r3, r1
 801066a:	807b      	strh	r3, [r7, #2]
 801066c:	4613      	mov	r3, r2
 801066e:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	3354      	adds	r3, #84	@ 0x54
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	8879      	ldrh	r1, [r7, #2]
 801067a:	687a      	ldr	r2, [r7, #4]
 801067c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010680:	b292      	uxth	r2, r2
 8010682:	1a8a      	subs	r2, r1, r2
 8010684:	b292      	uxth	r2, r2
 8010686:	b210      	sxth	r0, r2
 8010688:	8839      	ldrh	r1, [r7, #0]
 801068a:	687a      	ldr	r2, [r7, #4]
 801068c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8010690:	b292      	uxth	r2, r2
 8010692:	1a8a      	subs	r2, r1, r2
 8010694:	b292      	uxth	r2, r2
 8010696:	b212      	sxth	r2, r2
 8010698:	4601      	mov	r1, r0
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	4798      	blx	r3
    }
 801069e:	bf00      	nop
 80106a0:	3708      	adds	r7, #8
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}

080106a6 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80106a6:	b480      	push	{r7}
 80106a8:	b083      	sub	sp, #12
 80106aa:	af00      	add	r7, sp, #0
 80106ac:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80106b4:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80106bc:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80106c4:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 80106c6:	bf00      	nop
 80106c8:	370c      	adds	r7, #12
 80106ca:	46bd      	mov	sp, r7
 80106cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d0:	4770      	bx	lr

080106d2 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80106d2:	b580      	push	{r7, lr}
 80106d4:	b084      	sub	sp, #16
 80106d6:	af00      	add	r7, sp, #0
 80106d8:	60f8      	str	r0, [r7, #12]
 80106da:	60b9      	str	r1, [r7, #8]
 80106dc:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 80106de:	68f8      	ldr	r0, [r7, #12]
 80106e0:	f7ff ffe1 	bl	80106a6 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681a      	ldr	r2, [r3, #0]
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	68fa      	ldr	r2, [r7, #12]
 80106f0:	601a      	str	r2, [r3, #0]
    }
 80106f2:	bf00      	nop
 80106f4:	3710      	adds	r7, #16
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}

080106fa <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 80106fa:	b580      	push	{r7, lr}
 80106fc:	b084      	sub	sp, #16
 80106fe:	af00      	add	r7, sp, #0
 8010700:	60f8      	str	r0, [r7, #12]
 8010702:	607b      	str	r3, [r7, #4]
 8010704:	460b      	mov	r3, r1
 8010706:	817b      	strh	r3, [r7, #10]
 8010708:	4613      	mov	r3, r2
 801070a:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	4618      	mov	r0, r3
 8010710:	f7ff ff8c 	bl	801062c <_ZNK8touchgfx8Drawable9isVisibleEv>
 8010714:	4603      	mov	r3, r0
 8010716:	2b00      	cmp	r3, #0
 8010718:	d008      	beq.n	801072c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	4618      	mov	r0, r3
 801071e:	f7ff ff92 	bl	8010646 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8010722:	4603      	mov	r3, r0
 8010724:	2b00      	cmp	r3, #0
 8010726:	d001      	beq.n	801072c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010728:	2301      	movs	r3, #1
 801072a:	e000      	b.n	801072e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 801072c:	2300      	movs	r3, #0
 801072e:	2b00      	cmp	r3, #0
 8010730:	d002      	beq.n	8010738 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8010732:	68fa      	ldr	r2, [r7, #12]
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	601a      	str	r2, [r3, #0]
        }
    }
 8010738:	bf00      	nop
 801073a:	3710      	adds	r7, #16
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}

08010740 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8010740:	b580      	push	{r7, lr}
 8010742:	b082      	sub	sp, #8
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
 8010748:	4a05      	ldr	r2, [pc, #20]	@ (8010760 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	601a      	str	r2, [r3, #0]
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	4618      	mov	r0, r3
 8010752:	f7ff fe5f 	bl	8010414 <_ZN8touchgfx8DrawableD1Ev>
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	4618      	mov	r0, r3
 801075a:	3708      	adds	r7, #8
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}
 8010760:	0802e250 	.word	0x0802e250

08010764 <_ZN8touchgfx9ContainerD0Ev>:
 8010764:	b580      	push	{r7, lr}
 8010766:	b082      	sub	sp, #8
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f7ff ffe7 	bl	8010740 <_ZN8touchgfx9ContainerD1Ev>
 8010772:	212c      	movs	r1, #44	@ 0x2c
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f01a fa2a 	bl	802abce <_ZdlPvj>
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	4618      	mov	r0, r3
 801077e:	3708      	adds	r7, #8
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
    {
 801078c:	4a06      	ldr	r2, [pc, #24]	@ (80107a8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	601a      	str	r2, [r3, #0]
    }
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	3304      	adds	r3, #4
 8010796:	4618      	mov	r0, r3
 8010798:	f7ff ffd2 	bl	8010740 <_ZN8touchgfx9ContainerD1Ev>
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	4618      	mov	r0, r3
 80107a0:	3708      	adds	r7, #8
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}
 80107a6:	bf00      	nop
 80107a8:	0802e82c 	.word	0x0802e82c

080107ac <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b082      	sub	sp, #8
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
    }
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f7ff ffe5 	bl	8010784 <_ZN8touchgfx6ScreenD1Ev>
 80107ba:	213c      	movs	r1, #60	@ 0x3c
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f01a fa06 	bl	802abce <_ZdlPvj>
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	4618      	mov	r0, r3
 80107c6:	3708      	adds	r7, #8
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}

080107cc <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80107cc:	b480      	push	{r7}
 80107ce:	b083      	sub	sp, #12
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
    {
    }
 80107d4:	bf00      	nop
 80107d6:	370c      	adds	r7, #12
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr

080107e0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80107e0:	b480      	push	{r7}
 80107e2:	b083      	sub	sp, #12
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
    {
    }
 80107e8:	bf00      	nop
 80107ea:	370c      	adds	r7, #12
 80107ec:	46bd      	mov	sp, r7
 80107ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f2:	4770      	bx	lr

080107f4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80107f4:	b480      	push	{r7}
 80107f6:	b083      	sub	sp, #12
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
    {
    }
 80107fc:	bf00      	nop
 80107fe:	370c      	adds	r7, #12
 8010800:	46bd      	mov	sp, r7
 8010802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010806:	4770      	bx	lr

08010808 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010808:	b480      	push	{r7}
 801080a:	b083      	sub	sp, #12
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
    {
    }
 8010810:	bf00      	nop
 8010812:	370c      	adds	r7, #12
 8010814:	46bd      	mov	sp, r7
 8010816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081a:	4770      	bx	lr

0801081c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 801081c:	b480      	push	{r7}
 801081e:	b083      	sub	sp, #12
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
 8010824:	460b      	mov	r3, r1
 8010826:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8010828:	bf00      	nop
 801082a:	370c      	adds	r7, #12
 801082c:	46bd      	mov	sp, r7
 801082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010832:	4770      	bx	lr

08010834 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8010834:	b580      	push	{r7, lr}
 8010836:	b082      	sub	sp, #8
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	3304      	adds	r3, #4
 8010842:	6839      	ldr	r1, [r7, #0]
 8010844:	4618      	mov	r0, r3
 8010846:	f003 fa19 	bl	8013c7c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801084a:	bf00      	nop
 801084c:	3708      	adds	r7, #8
 801084e:	46bd      	mov	sp, r7
 8010850:	bd80      	pop	{r7, pc}
	...

08010854 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8010854:	b580      	push	{r7, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	4618      	mov	r0, r3
 8010860:	f7ff fda8 	bl	80103b4 <_ZN8touchgfx8DrawableC1Ev>
 8010864:	4a03      	ldr	r2, [pc, #12]	@ (8010874 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	601a      	str	r2, [r3, #0]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4618      	mov	r0, r3
 801086e:	3708      	adds	r7, #8
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	0802db88 	.word	0x0802db88

08010878 <_ZN8touchgfx6WidgetD1Ev>:
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	4a05      	ldr	r2, [pc, #20]	@ (8010898 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	601a      	str	r2, [r3, #0]
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	4618      	mov	r0, r3
 801088a:	f7ff fdc3 	bl	8010414 <_ZN8touchgfx8DrawableD1Ev>
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	4618      	mov	r0, r3
 8010892:	3708      	adds	r7, #8
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	0802db88 	.word	0x0802db88

0801089c <_ZN8touchgfx6WidgetD0Ev>:
 801089c:	b580      	push	{r7, lr}
 801089e:	b082      	sub	sp, #8
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	6878      	ldr	r0, [r7, #4]
 80108a6:	f7ff ffe7 	bl	8010878 <_ZN8touchgfx6WidgetD1Ev>
 80108aa:	2128      	movs	r1, #40	@ 0x28
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f01a f98e 	bl	802abce <_ZdlPvj>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	4618      	mov	r0, r3
 80108b6:	3708      	adds	r7, #8
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80108bc:	b580      	push	{r7, lr}
 80108be:	b082      	sub	sp, #8
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	4618      	mov	r0, r3
 80108c8:	2326      	movs	r3, #38	@ 0x26
 80108ca:	461a      	mov	r2, r3
 80108cc:	2100      	movs	r1, #0
 80108ce:	f01b fb7f 	bl	802bfd0 <memset>
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	4618      	mov	r0, r3
 80108d6:	f7ff ffbd 	bl	8010854 <_ZN8touchgfx6WidgetC1Ev>
 80108da:	4a09      	ldr	r2, [pc, #36]	@ (8010900 <_ZN8touchgfx3BoxC1Ev+0x44>)
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	601a      	str	r2, [r3, #0]
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	22ff      	movs	r2, #255	@ 0xff
 80108e4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	3328      	adds	r3, #40	@ 0x28
 80108ec:	2100      	movs	r1, #0
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7ff fd2a 	bl	8010348 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	4618      	mov	r0, r3
 80108f8:	3708      	adds	r7, #8
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}
 80108fe:	bf00      	nop
 8010900:	0802e57c 	.word	0x0802e57c

08010904 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8010904:	b480      	push	{r7}
 8010906:	b083      	sub	sp, #12
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	683a      	ldr	r2, [r7, #0]
 8010912:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 8010914:	bf00      	nop
 8010916:	370c      	adds	r7, #12
 8010918:	46bd      	mov	sp, r7
 801091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091e:	4770      	bx	lr

08010920 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8010920:	b580      	push	{r7, lr}
 8010922:	b082      	sub	sp, #8
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
 8010928:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	4618      	mov	r0, r3
 801092e:	2326      	movs	r3, #38	@ 0x26
 8010930:	461a      	mov	r2, r3
 8010932:	2100      	movs	r1, #0
 8010934:	f01b fb4c 	bl	802bfd0 <memset>
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	4618      	mov	r0, r3
 801093c:	f7ff ff8a 	bl	8010854 <_ZN8touchgfx6WidgetC1Ev>
 8010940:	4a09      	ldr	r2, [pc, #36]	@ (8010968 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	601a      	str	r2, [r3, #0]
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	683a      	ldr	r2, [r7, #0]
 801094a:	8812      	ldrh	r2, [r2, #0]
 801094c:	84da      	strh	r2, [r3, #38]	@ 0x26
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	22ff      	movs	r2, #255	@ 0xff
 8010952:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    {
        Image::setBitmap(bmp);
 8010956:	6839      	ldr	r1, [r7, #0]
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f006 f82d 	bl	80169b8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	4618      	mov	r0, r3
 8010962:	3708      	adds	r7, #8
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}
 8010968:	0802e5e4 	.word	0x0802e5e4

0801096c <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 801096c:	b580      	push	{r7, lr}
 801096e:	b082      	sub	sp, #8
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	4a05      	ldr	r2, [pc, #20]	@ (801098c <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	601a      	str	r2, [r3, #0]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	4618      	mov	r0, r3
 801097e:	f7ff ff01 	bl	8010784 <_ZN8touchgfx6ScreenD1Ev>
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	4618      	mov	r0, r3
 8010986:	3708      	adds	r7, #8
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}
 801098c:	0802db54 	.word	0x0802db54

08010990 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 8010990:	b580      	push	{r7, lr}
 8010992:	b082      	sub	sp, #8
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f7ff ffe7 	bl	801096c <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 801099e:	2140      	movs	r1, #64	@ 0x40
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	f01a f914 	bl	802abce <_ZdlPvj>
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	4618      	mov	r0, r3
 80109aa:	3708      	adds	r7, #8
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}

080109b0 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b082      	sub	sp, #8
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	4a05      	ldr	r2, [pc, #20]	@ (80109d0 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	601a      	str	r2, [r3, #0]
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	4618      	mov	r0, r3
 80109c2:	f7ff ff59 	bl	8010878 <_ZN8touchgfx6WidgetD1Ev>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	4618      	mov	r0, r3
 80109ca:	3708      	adds	r7, #8
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}
 80109d0:	0802e57c 	.word	0x0802e57c

080109d4 <_ZN8touchgfx3BoxD0Ev>:
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b082      	sub	sp, #8
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f7ff ffe7 	bl	80109b0 <_ZN8touchgfx3BoxD1Ev>
 80109e2:	212c      	movs	r1, #44	@ 0x2c
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f01a f8f2 	bl	802abce <_ZdlPvj>
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	4618      	mov	r0, r3
 80109ee:	3708      	adds	r7, #8
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}

080109f4 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b082      	sub	sp, #8
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
 80109fc:	4a05      	ldr	r2, [pc, #20]	@ (8010a14 <_ZN8touchgfx5ImageD1Ev+0x20>)
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	601a      	str	r2, [r3, #0]
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	4618      	mov	r0, r3
 8010a06:	f7ff ff37 	bl	8010878 <_ZN8touchgfx6WidgetD1Ev>
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	3708      	adds	r7, #8
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}
 8010a14:	0802e5e4 	.word	0x0802e5e4

08010a18 <_ZN8touchgfx5ImageD0Ev>:
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b082      	sub	sp, #8
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f7ff ffe7 	bl	80109f4 <_ZN8touchgfx5ImageD1Ev>
 8010a26:	212c      	movs	r1, #44	@ 0x2c
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f01a f8d0 	bl	802abce <_ZdlPvj>
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	4618      	mov	r0, r3
 8010a32:	3708      	adds	r7, #8
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}

08010a38 <_ZN14screenViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

screenViewBase::screenViewBase()
 8010a38:	b590      	push	{r4, r7, lr}
 8010a3a:	b08b      	sub	sp, #44	@ 0x2c
 8010a3c:	af02      	add	r7, sp, #8
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	4618      	mov	r0, r3
 8010a44:	f000 f8dc 	bl	8010c00 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 8010a48:	4a4e      	ldr	r2, [pc, #312]	@ (8010b84 <_ZN14screenViewBaseC1Ev+0x14c>)
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	601a      	str	r2, [r3, #0]
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	3340      	adds	r3, #64	@ 0x40
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7ff ff32 	bl	80108bc <_ZN8touchgfx3BoxC1Ev>
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	336c      	adds	r3, #108	@ 0x6c
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f7ff ff2d 	bl	80108bc <_ZN8touchgfx3BoxC1Ev>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 8010a68:	f107 0308 	add.w	r3, r7, #8
 8010a6c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8010a70:	4618      	mov	r0, r3
 8010a72:	f7ff fc8f 	bl	8010394 <_ZN8touchgfx6BitmapC1Et>
 8010a76:	f107 0308 	add.w	r3, r7, #8
 8010a7a:	4619      	mov	r1, r3
 8010a7c:	4620      	mov	r0, r4
 8010a7e:	f7ff ff4f 	bl	8010920 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
{
    __background.setPosition(0, 0, 240, 296);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8010a88:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8010a8c:	9300      	str	r3, [sp, #0]
 8010a8e:	23f0      	movs	r3, #240	@ 0xf0
 8010a90:	2200      	movs	r2, #0
 8010a92:	2100      	movs	r1, #0
 8010a94:	f7ff fcfc 	bl	8010490 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	773b      	strb	r3, [r7, #28]
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	76fb      	strb	r3, [r7, #27]
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	76bb      	strb	r3, [r7, #26]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8010aaa:	7f3b      	ldrb	r3, [r7, #28]
 8010aac:	041a      	lsls	r2, r3, #16
 8010aae:	7efb      	ldrb	r3, [r7, #27]
 8010ab0:	021b      	lsls	r3, r3, #8
 8010ab2:	431a      	orrs	r2, r3
 8010ab4:	7ebb      	ldrb	r3, [r7, #26]
 8010ab6:	4313      	orrs	r3, r2
 8010ab8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010abc:	f107 0314 	add.w	r3, r7, #20
 8010ac0:	4611      	mov	r1, r2
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7ff fc40 	bl	8010348 <_ZN8touchgfx9colortypeC1Em>
 8010ac8:	697b      	ldr	r3, [r7, #20]
 8010aca:	4619      	mov	r1, r3
 8010acc:	4620      	mov	r0, r4
 8010ace:	f7ff ff19 	bl	8010904 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8010ad2:	687a      	ldr	r2, [r7, #4]
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	3340      	adds	r3, #64	@ 0x40
 8010ad8:	4619      	mov	r1, r3
 8010ada:	4610      	mov	r0, r2
 8010adc:	f7ff feaa 	bl	8010834 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 240, 296);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8010ae6:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8010aea:	9300      	str	r3, [sp, #0]
 8010aec:	23f0      	movs	r3, #240	@ 0xf0
 8010aee:	2200      	movs	r2, #0
 8010af0:	2100      	movs	r1, #0
 8010af2:	f7ff fccd 	bl	8010490 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8010afc:	23ff      	movs	r3, #255	@ 0xff
 8010afe:	77fb      	strb	r3, [r7, #31]
 8010b00:	23ff      	movs	r3, #255	@ 0xff
 8010b02:	77bb      	strb	r3, [r7, #30]
 8010b04:	23ff      	movs	r3, #255	@ 0xff
 8010b06:	777b      	strb	r3, [r7, #29]
 8010b08:	7ffb      	ldrb	r3, [r7, #31]
 8010b0a:	041a      	lsls	r2, r3, #16
 8010b0c:	7fbb      	ldrb	r3, [r7, #30]
 8010b0e:	021b      	lsls	r3, r3, #8
 8010b10:	431a      	orrs	r2, r3
 8010b12:	7f7b      	ldrb	r3, [r7, #29]
 8010b14:	4313      	orrs	r3, r2
 8010b16:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010b1a:	f107 0310 	add.w	r3, r7, #16
 8010b1e:	4611      	mov	r1, r2
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7ff fc11 	bl	8010348 <_ZN8touchgfx9colortypeC1Em>
 8010b26:	693b      	ldr	r3, [r7, #16]
 8010b28:	4619      	mov	r1, r3
 8010b2a:	4620      	mov	r0, r4
 8010b2c:	f7ff feea 	bl	8010904 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 8010b30:	687a      	ldr	r2, [r7, #4]
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	336c      	adds	r3, #108	@ 0x6c
 8010b36:	4619      	mov	r1, r3
 8010b38:	4610      	mov	r0, r2
 8010b3a:	f7ff fe7b 	bl	8010834 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image1.setXY(44, 72);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	3398      	adds	r3, #152	@ 0x98
 8010b42:	2248      	movs	r2, #72	@ 0x48
 8010b44:	212c      	movs	r1, #44	@ 0x2c
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7ff fce1 	bl	801050e <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_LOGOS_TOUCHGFX_GRADIENT_EMBOSSED_SVG_152_152_000000_SVG_ID));
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 8010b52:	f107 030c 	add.w	r3, r7, #12
 8010b56:	2100      	movs	r1, #0
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7ff fc1b 	bl	8010394 <_ZN8touchgfx6BitmapC1Et>
 8010b5e:	f107 030c 	add.w	r3, r7, #12
 8010b62:	4619      	mov	r1, r3
 8010b64:	4620      	mov	r0, r4
 8010b66:	f005 ff27 	bl	80169b8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image1);
 8010b6a:	687a      	ldr	r2, [r7, #4]
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	3398      	adds	r3, #152	@ 0x98
 8010b70:	4619      	mov	r1, r3
 8010b72:	4610      	mov	r0, r2
 8010b74:	f7ff fe5e 	bl	8010834 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	3724      	adds	r7, #36	@ 0x24
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd90      	pop	{r4, r7, pc}
 8010b82:	bf00      	nop
 8010b84:	0802db20 	.word	0x0802db20

08010b88 <_ZN14screenViewBaseD1Ev>:

screenViewBase::~screenViewBase()
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b082      	sub	sp, #8
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	4a0d      	ldr	r2, [pc, #52]	@ (8010bc8 <_ZN14screenViewBaseD1Ev+0x40>)
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	601a      	str	r2, [r3, #0]
{

}
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	3398      	adds	r3, #152	@ 0x98
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7ff ff2a 	bl	80109f4 <_ZN8touchgfx5ImageD1Ev>
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	336c      	adds	r3, #108	@ 0x6c
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7ff ff03 	bl	80109b0 <_ZN8touchgfx3BoxD1Ev>
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	3340      	adds	r3, #64	@ 0x40
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7ff fefe 	bl	80109b0 <_ZN8touchgfx3BoxD1Ev>
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f7ff fed8 	bl	801096c <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3708      	adds	r7, #8
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}
 8010bc6:	bf00      	nop
 8010bc8:	0802db20 	.word	0x0802db20

08010bcc <_ZN14screenViewBaseD0Ev>:
screenViewBase::~screenViewBase()
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b082      	sub	sp, #8
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
}
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f7ff ffd7 	bl	8010b88 <_ZN14screenViewBaseD1Ev>
 8010bda:	21c4      	movs	r1, #196	@ 0xc4
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f019 fff6 	bl	802abce <_ZdlPvj>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	4618      	mov	r0, r3
 8010be6:	3708      	adds	r7, #8
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}

08010bec <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 8010bec:	b480      	push	{r7}
 8010bee:	b083      	sub	sp, #12
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]

}
 8010bf4:	bf00      	nop
 8010bf6:	370c      	adds	r7, #12
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfe:	4770      	bx	lr

08010c00 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b082      	sub	sp, #8
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f009 fe06 	bl	801a81c <_ZN8touchgfx6ScreenC1Ev>
 8010c10:	4a05      	ldr	r2, [pc, #20]	@ (8010c28 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	601a      	str	r2, [r3, #0]
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	2200      	movs	r2, #0
 8010c1a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	4618      	mov	r0, r3
 8010c20:	3708      	adds	r7, #8
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}
 8010c26:	bf00      	nop
 8010c28:	0802db54 	.word	0x0802db54

08010c2c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8010c2c:	b480      	push	{r7}
 8010c2e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8010c30:	4b02      	ldr	r3, [pc, #8]	@ (8010c3c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8010c32:	4618      	mov	r0, r3
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr
 8010c3c:	0802dbe8 	.word	0x0802dbe8

08010c40 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8010c40:	b480      	push	{r7}
 8010c42:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8010c44:	2301      	movs	r3, #1
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4e:	4770      	bx	lr

08010c50 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8010c50:	b480      	push	{r7}
 8010c52:	b085      	sub	sp, #20
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	60f8      	str	r0, [r7, #12]
 8010c58:	460b      	mov	r3, r1
 8010c5a:	607a      	str	r2, [r7, #4]
 8010c5c:	817b      	strh	r3, [r7, #10]
        return 0;
 8010c5e:	2300      	movs	r3, #0
    }
 8010c60:	4618      	mov	r0, r3
 8010c62:	3714      	adds	r7, #20
 8010c64:	46bd      	mov	sp, r7
 8010c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6a:	4770      	bx	lr

08010c6c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 8010c6c:	b480      	push	{r7}
 8010c6e:	b083      	sub	sp, #12
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
        return 0;
 8010c74:	2300      	movs	r3, #0
    }
 8010c76:	4618      	mov	r0, r3
 8010c78:	370c      	adds	r7, #12
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c80:	4770      	bx	lr

08010c82 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8010c82:	b480      	push	{r7}
 8010c84:	b083      	sub	sp, #12
 8010c86:	af00      	add	r7, sp, #0
 8010c88:	6078      	str	r0, [r7, #4]
        return 0;
 8010c8a:	2300      	movs	r3, #0
    }
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	370c      	adds	r7, #12
 8010c90:	46bd      	mov	sp, r7
 8010c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c96:	4770      	bx	lr

08010c98 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8010c98:	b480      	push	{r7}
 8010c9a:	b085      	sub	sp, #20
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	60f8      	str	r0, [r7, #12]
 8010ca0:	60b9      	str	r1, [r7, #8]
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8010ca6:	4a07      	ldr	r2, [pc, #28]	@ (8010cc4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	6013      	str	r3, [r2, #0]
        fonts = f;
 8010cac:	4a06      	ldr	r2, [pc, #24]	@ (8010cc8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8010cb2:	4a06      	ldr	r2, [pc, #24]	@ (8010ccc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8010cb4:	88fb      	ldrh	r3, [r7, #6]
 8010cb6:	8013      	strh	r3, [r2, #0]
    }
 8010cb8:	bf00      	nop
 8010cba:	3714      	adds	r7, #20
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc2:	4770      	bx	lr
 8010cc4:	2005b980 	.word	0x2005b980
 8010cc8:	2005b988 	.word	0x2005b988
 8010ccc:	2005b984 	.word	0x2005b984

08010cd0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8010cd0:	b40e      	push	{r1, r2, r3}
 8010cd2:	b580      	push	{r7, lr}
 8010cd4:	b085      	sub	sp, #20
 8010cd6:	af00      	add	r7, sp, #0
 8010cd8:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8010cda:	f107 0320 	add.w	r3, r7, #32
 8010cde:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	69fa      	ldr	r2, [r7, #28]
 8010ce4:	2100      	movs	r1, #0
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f008 fe2c 	bl	8019944 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010cec:	4603      	mov	r3, r0
 8010cee:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010cf0:	89fb      	ldrh	r3, [r7, #14]
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3714      	adds	r7, #20
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010cfc:	b003      	add	sp, #12
 8010cfe:	4770      	bx	lr

08010d00 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8010d00:	b40c      	push	{r2, r3}
 8010d02:	b580      	push	{r7, lr}
 8010d04:	b084      	sub	sp, #16
 8010d06:	af00      	add	r7, sp, #0
 8010d08:	6078      	str	r0, [r7, #4]
 8010d0a:	460b      	mov	r3, r1
 8010d0c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8010d0e:	f107 031c 	add.w	r3, r7, #28
 8010d12:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8010d14:	78f9      	ldrb	r1, [r7, #3]
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	69ba      	ldr	r2, [r7, #24]
 8010d1a:	6878      	ldr	r0, [r7, #4]
 8010d1c:	f008 fe12 	bl	8019944 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010d20:	4603      	mov	r3, r0
 8010d22:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010d24:	89fb      	ldrh	r3, [r7, #14]
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3710      	adds	r7, #16
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010d30:	b002      	add	sp, #8
 8010d32:	4770      	bx	lr

08010d34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b08a      	sub	sp, #40	@ 0x28
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
 8010d3c:	460b      	mov	r3, r1
 8010d3e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d016      	beq.n	8010d76 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	3322      	adds	r3, #34	@ 0x22
 8010d4c:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8010d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d50:	8adb      	ldrh	r3, [r3, #22]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d105      	bne.n	8010d62 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8010d56:	4b43      	ldr	r3, [pc, #268]	@ (8010e64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010d58:	4a43      	ldr	r2, [pc, #268]	@ (8010e68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010d5a:	21c5      	movs	r1, #197	@ 0xc5
 8010d5c:	4843      	ldr	r0, [pc, #268]	@ (8010e6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010d5e:	f01a fe2b 	bl	802b9b8 <__assert_func>
            return buffer[pos];
 8010d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d64:	8a9b      	ldrh	r3, [r3, #20]
 8010d66:	461a      	mov	r2, r3
 8010d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d6a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d001      	beq.n	8010d76 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010d72:	2301      	movs	r3, #1
 8010d74:	e000      	b.n	8010d78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8010d76:	2300      	movs	r3, #0
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d06a      	beq.n	8010e52 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f00a fbec 	bl	801b55a <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	3322      	adds	r3, #34	@ 0x22
 8010d86:	623b      	str	r3, [r7, #32]
 8010d88:	2301      	movs	r3, #1
 8010d8a:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8010d8c:	6a3b      	ldr	r3, [r7, #32]
 8010d8e:	8adb      	ldrh	r3, [r3, #22]
 8010d90:	8bfa      	ldrh	r2, [r7, #30]
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d305      	bcc.n	8010da2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8010d96:	4b36      	ldr	r3, [pc, #216]	@ (8010e70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8010d98:	4a36      	ldr	r2, [pc, #216]	@ (8010e74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8010d9a:	21cb      	movs	r1, #203	@ 0xcb
 8010d9c:	4833      	ldr	r0, [pc, #204]	@ (8010e6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010d9e:	f01a fe0b 	bl	802b9b8 <__assert_func>
            const uint16_t index = pos + offset;
 8010da2:	6a3b      	ldr	r3, [r7, #32]
 8010da4:	8a9a      	ldrh	r2, [r3, #20]
 8010da6:	8bfb      	ldrh	r3, [r7, #30]
 8010da8:	4413      	add	r3, r2
 8010daa:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8010dac:	8bbb      	ldrh	r3, [r7, #28]
 8010dae:	2b09      	cmp	r3, #9
 8010db0:	d801      	bhi.n	8010db6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8010db2:	8bbb      	ldrh	r3, [r7, #28]
 8010db4:	e001      	b.n	8010dba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8010db6:	8bbb      	ldrh	r3, [r7, #28]
 8010db8:	3b0a      	subs	r3, #10
 8010dba:	6a3a      	ldr	r2, [r7, #32]
 8010dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010dc0:	f640 123f 	movw	r2, #2367	@ 0x93f
 8010dc4:	4293      	cmp	r3, r2
 8010dc6:	bf0c      	ite	eq
 8010dc8:	2301      	moveq	r3, #1
 8010dca:	2300      	movne	r3, #0
 8010dcc:	b2db      	uxtb	r3, r3
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d03f      	beq.n	8010e52 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	3322      	adds	r3, #34	@ 0x22
 8010dd6:	687a      	ldr	r2, [r7, #4]
 8010dd8:	3222      	adds	r2, #34	@ 0x22
 8010dda:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8010ddc:	68ba      	ldr	r2, [r7, #8]
 8010dde:	8ad2      	ldrh	r2, [r2, #22]
 8010de0:	2a00      	cmp	r2, #0
 8010de2:	d105      	bne.n	8010df0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8010de4:	4b1f      	ldr	r3, [pc, #124]	@ (8010e64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010de6:	4a20      	ldr	r2, [pc, #128]	@ (8010e68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010de8:	21c5      	movs	r1, #197	@ 0xc5
 8010dea:	4820      	ldr	r0, [pc, #128]	@ (8010e6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010dec:	f01a fde4 	bl	802b9b8 <__assert_func>
            return buffer[pos];
 8010df0:	68ba      	ldr	r2, [r7, #8]
 8010df2:	8a92      	ldrh	r2, [r2, #20]
 8010df4:	4611      	mov	r1, r2
 8010df6:	68ba      	ldr	r2, [r7, #8]
 8010df8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8010dfc:	613b      	str	r3, [r7, #16]
 8010dfe:	4613      	mov	r3, r2
 8010e00:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8010e02:	693b      	ldr	r3, [r7, #16]
 8010e04:	8adb      	ldrh	r3, [r3, #22]
 8010e06:	2b01      	cmp	r3, #1
 8010e08:	d806      	bhi.n	8010e18 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8010e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8010e78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8010e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8010e7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8010e0e:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8010e12:	4816      	ldr	r0, [pc, #88]	@ (8010e6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010e14:	f01a fdd0 	bl	802b9b8 <__assert_func>
            const uint16_t index = pos + 1;
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	8a9b      	ldrh	r3, [r3, #20]
 8010e1c:	3301      	adds	r3, #1
 8010e1e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8010e20:	89bb      	ldrh	r3, [r7, #12]
 8010e22:	2b09      	cmp	r3, #9
 8010e24:	d801      	bhi.n	8010e2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8010e26:	89bb      	ldrh	r3, [r7, #12]
 8010e28:	e000      	b.n	8010e2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	693a      	ldr	r2, [r7, #16]
 8010e2e:	89f9      	ldrh	r1, [r7, #14]
 8010e30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8010e34:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	3322      	adds	r3, #34	@ 0x22
 8010e3a:	61bb      	str	r3, [r7, #24]
 8010e3c:	f640 133f 	movw	r3, #2367	@ 0x93f
 8010e40:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8010e42:	69bb      	ldr	r3, [r7, #24]
 8010e44:	8a9b      	ldrh	r3, [r3, #20]
 8010e46:	4619      	mov	r1, r3
 8010e48:	69bb      	ldr	r3, [r7, #24]
 8010e4a:	8afa      	ldrh	r2, [r7, #22]
 8010e4c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8010e50:	bf00      	nop
        }
    }
    return getNextChar();
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f00a fa84 	bl	801b360 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010e58:	4603      	mov	r3, r0
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3728      	adds	r7, #40	@ 0x28
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	bf00      	nop
 8010e64:	0802ced4 	.word	0x0802ced4
 8010e68:	0802cee0 	.word	0x0802cee0
 8010e6c:	0802cf8c 	.word	0x0802cf8c
 8010e70:	0802cfd4 	.word	0x0802cfd4
 8010e74:	0802cfe4 	.word	0x0802cfe4
 8010e78:	0802d0b8 	.word	0x0802d0b8
 8010e7c:	0802d0c4 	.word	0x0802d0c4

08010e80 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f00a fa30 	bl	801b2ee <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8010e8e:	bf00      	nop
 8010e90:	3708      	adds	r7, #8
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}
	...

08010e98 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8010e98:	b590      	push	{r4, r7, lr}
 8010e9a:	b085      	sub	sp, #20
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8010ea6:	88fb      	ldrh	r3, [r7, #6]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d127      	bne.n	8010efc <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8010eac:	88fb      	ldrh	r3, [r7, #6]
 8010eae:	4a1e      	ldr	r2, [pc, #120]	@ (8010f28 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8010eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d016      	beq.n	8010ee6 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8010eb8:	88fb      	ldrh	r3, [r7, #6]
 8010eba:	4a1b      	ldr	r2, [pc, #108]	@ (8010f28 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8010ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ec0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	68ba      	ldr	r2, [r7, #8]
 8010ec8:	4413      	add	r3, r2
 8010eca:	4a18      	ldr	r2, [pc, #96]	@ (8010f2c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010ecc:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	685b      	ldr	r3, [r3, #4]
 8010ed2:	68ba      	ldr	r2, [r7, #8]
 8010ed4:	4413      	add	r3, r2
 8010ed6:	4a16      	ldr	r2, [pc, #88]	@ (8010f30 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010ed8:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	689b      	ldr	r3, [r3, #8]
 8010ede:	68ba      	ldr	r2, [r7, #8]
 8010ee0:	4413      	add	r3, r2
 8010ee2:	60fb      	str	r3, [r7, #12]
 8010ee4:	e00a      	b.n	8010efc <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8010ee6:	4b11      	ldr	r3, [pc, #68]	@ (8010f2c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010ee8:	4a12      	ldr	r2, [pc, #72]	@ (8010f34 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8010eea:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8010eec:	4a12      	ldr	r2, [pc, #72]	@ (8010f38 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8010eee:	4b10      	ldr	r3, [pc, #64]	@ (8010f30 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010ef0:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8010ef2:	88fb      	ldrh	r3, [r7, #6]
 8010ef4:	4a11      	ldr	r2, [pc, #68]	@ (8010f3c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8010ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010efa:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d00d      	beq.n	8010f1e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8010f02:	4a0f      	ldr	r2, [pc, #60]	@ (8010f40 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8010f04:	88fb      	ldrh	r3, [r7, #6]
 8010f06:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8010f08:	f000 f824 	bl	8010f54 <_ZN17TypedTextDatabase8getFontsEv>
 8010f0c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8010f0e:	f000 f819 	bl	8010f44 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8010f12:	4603      	mov	r3, r0
 8010f14:	461a      	mov	r2, r3
 8010f16:	4621      	mov	r1, r4
 8010f18:	68f8      	ldr	r0, [r7, #12]
 8010f1a:	f7ff febd 	bl	8010c98 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8010f1e:	bf00      	nop
 8010f20:	3714      	adds	r7, #20
 8010f22:	46bd      	mov	sp, r7
 8010f24:	bd90      	pop	{r4, r7, pc}
 8010f26:	bf00      	nop
 8010f28:	2005a6e8 	.word	0x2005a6e8
 8010f2c:	2005a6f0 	.word	0x2005a6f0
 8010f30:	2005a6f4 	.word	0x2005a6f4
 8010f34:	08045aa0 	.word	0x08045aa0
 8010f38:	08045a9c 	.word	0x08045a9c
 8010f3c:	08045aa8 	.word	0x08045aa8
 8010f40:	2005a6ec 	.word	0x2005a6ec

08010f44 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8010f44:	b480      	push	{r7}
 8010f46:	af00      	add	r7, sp, #0
    return 0;
 8010f48:	2300      	movs	r3, #0
}
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f52:	4770      	bx	lr

08010f54 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8010f54:	b480      	push	{r7}
 8010f56:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8010f58:	4b02      	ldr	r3, [pc, #8]	@ (8010f64 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f62:	4770      	bx	lr
 8010f64:	2005a6f8 	.word	0x2005a6f8

08010f68 <_Z41__static_initialization_and_destruction_0v>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	af00      	add	r7, sp, #0
    &(getFont_verdana_20_4bpp()),
 8010f6c:	f7fe fbe8 	bl	800f740 <_Z23getFont_verdana_20_4bppv>
 8010f70:	4603      	mov	r3, r0
};
 8010f72:	4a07      	ldr	r2, [pc, #28]	@ (8010f90 <_Z41__static_initialization_and_destruction_0v+0x28>)
 8010f74:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8010f76:	f7fe fc3b 	bl	800f7f0 <_Z23getFont_verdana_40_4bppv>
 8010f7a:	4603      	mov	r3, r0
};
 8010f7c:	4a04      	ldr	r2, [pc, #16]	@ (8010f90 <_Z41__static_initialization_and_destruction_0v+0x28>)
 8010f7e:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8010f80:	f7fe fb86 	bl	800f690 <_Z23getFont_verdana_10_4bppv>
 8010f84:	4603      	mov	r3, r0
};
 8010f86:	4a02      	ldr	r2, [pc, #8]	@ (8010f90 <_Z41__static_initialization_and_destruction_0v+0x28>)
 8010f88:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8010f8a:	bf00      	nop
 8010f8c:	bd80      	pop	{r7, pc}
 8010f8e:	bf00      	nop
 8010f90:	2005a6f8 	.word	0x2005a6f8

08010f94 <_GLOBAL__sub_I_touchgfx_fonts>:
 8010f94:	b580      	push	{r7, lr}
 8010f96:	af00      	add	r7, sp, #0
 8010f98:	f7ff ffe6 	bl	8010f68 <_Z41__static_initialization_and_destruction_0v>
 8010f9c:	bd80      	pop	{r7, pc}
	...

08010fa0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	4a05      	ldr	r2, [pc, #20]	@ (8010fc0 <_ZN19FrontendApplicationD1Ev+0x20>)
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	601a      	str	r2, [r3, #0]
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7fe fea9 	bl	800fd08 <_ZN23FrontendApplicationBaseD1Ev>
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3708      	adds	r7, #8
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}
 8010fc0:	0802dc68 	.word	0x0802dc68

08010fc4 <_ZN19FrontendApplicationD0Ev>:
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b082      	sub	sp, #8
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	f7ff ffe7 	bl	8010fa0 <_ZN19FrontendApplicationD1Ev>
 8010fd2:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f019 fdf9 	bl	802abce <_ZdlPvj>
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3708      	adds	r7, #8
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}

08010fe6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8010fe6:	b580      	push	{r7, lr}
 8010fe8:	b082      	sub	sp, #8
 8010fea:	af00      	add	r7, sp, #0
 8010fec:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f000 f82d 	bl	8011054 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f007 fc9b 	bl	8018938 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8011002:	bf00      	nop
 8011004:	3708      	adds	r7, #8
 8011006:	46bd      	mov	sp, r7
 8011008:	bd80      	pop	{r7, pc}
	...

0801100c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 801100c:	b580      	push	{r7, lr}
 801100e:	b084      	sub	sp, #16
 8011010:	af00      	add	r7, sp, #0
 8011012:	60f8      	str	r0, [r7, #12]
 8011014:	60b9      	str	r1, [r7, #8]
 8011016:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	687a      	ldr	r2, [r7, #4]
 801101c:	68b9      	ldr	r1, [r7, #8]
 801101e:	4618      	mov	r0, r3
 8011020:	f7fe fec2 	bl	800fda8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8011024:	4a03      	ldr	r2, [pc, #12]	@ (8011034 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	601a      	str	r2, [r3, #0]
{

}
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	4618      	mov	r0, r3
 801102e:	3710      	adds	r7, #16
 8011030:	46bd      	mov	sp, r7
 8011032:	bd80      	pop	{r7, pc}
 8011034:	0802dc68 	.word	0x0802dc68

08011038 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8011038:	b480      	push	{r7}
 801103a:	b083      	sub	sp, #12
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2200      	movs	r2, #0
 8011044:	601a      	str	r2, [r3, #0]
{

}
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	4618      	mov	r0, r3
 801104a:	370c      	adds	r7, #12
 801104c:	46bd      	mov	sp, r7
 801104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011052:	4770      	bx	lr

08011054 <_ZN5Model4tickEv>:

void Model::tick()
{
 8011054:	b480      	push	{r7}
 8011056:	b083      	sub	sp, #12
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]

}
 801105c:	bf00      	nop
 801105e:	370c      	adds	r7, #12
 8011060:	46bd      	mov	sp, r7
 8011062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011066:	4770      	bx	lr

08011068 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8011068:	b480      	push	{r7}
 801106a:	b083      	sub	sp, #12
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
    {
    }
 8011070:	bf00      	nop
 8011072:	370c      	adds	r7, #12
 8011074:	46bd      	mov	sp, r7
 8011076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107a:	4770      	bx	lr

0801107c <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 801107c:	b480      	push	{r7}
 801107e:	b083      	sub	sp, #12
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
    {
    }
 8011084:	bf00      	nop
 8011086:	370c      	adds	r7, #12
 8011088:	46bd      	mov	sp, r7
 801108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108e:	4770      	bx	lr

08011090 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8011090:	b480      	push	{r7}
 8011092:	b083      	sub	sp, #12
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
    {
 8011098:	4a04      	ldr	r2, [pc, #16]	@ (80110ac <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	601a      	str	r2, [r3, #0]
    }
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	4618      	mov	r0, r3
 80110a2:	370c      	adds	r7, #12
 80110a4:	46bd      	mov	sp, r7
 80110a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110aa:	4770      	bx	lr
 80110ac:	0802dcf4 	.word	0x0802dcf4

080110b0 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b082      	sub	sp, #8
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
    }
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f7ff ffe9 	bl	8011090 <_ZN8touchgfx9PresenterD1Ev>
 80110be:	2104      	movs	r1, #4
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f019 fd84 	bl	802abce <_ZdlPvj>
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	4618      	mov	r0, r3
 80110ca:	3708      	adds	r7, #8
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd80      	pop	{r7, pc}

080110d0 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80110d0:	b480      	push	{r7}
 80110d2:	b083      	sub	sp, #12
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
    {
 80110d8:	4a04      	ldr	r2, [pc, #16]	@ (80110ec <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	601a      	str	r2, [r3, #0]
    }
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	4618      	mov	r0, r3
 80110e2:	370c      	adds	r7, #12
 80110e4:	46bd      	mov	sp, r7
 80110e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ea:	4770      	bx	lr
 80110ec:	0802dcf4 	.word	0x0802dcf4

080110f0 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80110f0:	b480      	push	{r7}
 80110f2:	b083      	sub	sp, #12
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	4a06      	ldr	r2, [pc, #24]	@ (8011114 <_ZN13ModelListenerC1Ev+0x24>)
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	601a      	str	r2, [r3, #0]
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	2200      	movs	r2, #0
 8011102:	605a      	str	r2, [r3, #4]
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	4618      	mov	r0, r3
 8011108:	370c      	adds	r7, #12
 801110a:	46bd      	mov	sp, r7
 801110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011110:	4770      	bx	lr
 8011112:	bf00      	nop
 8011114:	0802dce4 	.word	0x0802dce4

08011118 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8011118:	b480      	push	{r7}
 801111a:	b083      	sub	sp, #12
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
 8011120:	4a04      	ldr	r2, [pc, #16]	@ (8011134 <_ZN13ModelListenerD1Ev+0x1c>)
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	601a      	str	r2, [r3, #0]
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	4618      	mov	r0, r3
 801112a:	370c      	adds	r7, #12
 801112c:	46bd      	mov	sp, r7
 801112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011132:	4770      	bx	lr
 8011134:	0802dce4 	.word	0x0802dce4

08011138 <_ZN13ModelListenerD0Ev>:
 8011138:	b580      	push	{r7, lr}
 801113a:	b082      	sub	sp, #8
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	f7ff ffe9 	bl	8011118 <_ZN13ModelListenerD1Ev>
 8011146:	2108      	movs	r1, #8
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f019 fd40 	bl	802abce <_ZdlPvj>
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	4618      	mov	r0, r3
 8011152:	3708      	adds	r7, #8
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}

08011158 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {}
 8011158:	b580      	push	{r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
 8011160:	4a09      	ldr	r2, [pc, #36]	@ (8011188 <_ZN15screenPresenterD1Ev+0x30>)
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	601a      	str	r2, [r3, #0]
 8011166:	4a09      	ldr	r2, [pc, #36]	@ (801118c <_ZN15screenPresenterD1Ev+0x34>)
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	605a      	str	r2, [r3, #4]
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	3304      	adds	r3, #4
 8011170:	4618      	mov	r0, r3
 8011172:	f7ff ffd1 	bl	8011118 <_ZN13ModelListenerD1Ev>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	4618      	mov	r0, r3
 801117a:	f7ff ff89 	bl	8011090 <_ZN8touchgfx9PresenterD1Ev>
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	4618      	mov	r0, r3
 8011182:	3708      	adds	r7, #8
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}
 8011188:	0802dcbc 	.word	0x0802dcbc
 801118c:	0802dcd4 	.word	0x0802dcd4

08011190 <_ZThn4_N15screenPresenterD1Ev>:
 8011190:	f1a0 0004 	sub.w	r0, r0, #4
 8011194:	e7e0      	b.n	8011158 <_ZN15screenPresenterD1Ev>
 8011196:	bf00      	nop

08011198 <_ZN15screenPresenterD0Ev>:
 8011198:	b580      	push	{r7, lr}
 801119a:	b082      	sub	sp, #8
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f7ff ffd9 	bl	8011158 <_ZN15screenPresenterD1Ev>
 80111a6:	2110      	movs	r1, #16
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	f019 fd10 	bl	802abce <_ZdlPvj>
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	4618      	mov	r0, r3
 80111b2:	3708      	adds	r7, #8
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}

080111b8 <_ZThn4_N15screenPresenterD0Ev>:
 80111b8:	f1a0 0004 	sub.w	r0, r0, #4
 80111bc:	e7ec      	b.n	8011198 <_ZN15screenPresenterD0Ev>
	...

080111c0 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b082      	sub	sp, #8
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
 80111c8:	6039      	str	r1, [r7, #0]
    : view(v)
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	4618      	mov	r0, r3
 80111ce:	f7ff ff7f 	bl	80110d0 <_ZN8touchgfx9PresenterC1Ev>
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	3304      	adds	r3, #4
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7ff ff8a 	bl	80110f0 <_ZN13ModelListenerC1Ev>
 80111dc:	4a06      	ldr	r2, [pc, #24]	@ (80111f8 <_ZN15screenPresenterC1ER10screenView+0x38>)
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	601a      	str	r2, [r3, #0]
 80111e2:	4a06      	ldr	r2, [pc, #24]	@ (80111fc <_ZN15screenPresenterC1ER10screenView+0x3c>)
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	605a      	str	r2, [r3, #4]
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	683a      	ldr	r2, [r7, #0]
 80111ec:	60da      	str	r2, [r3, #12]
{

}
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	4618      	mov	r0, r3
 80111f2:	3708      	adds	r7, #8
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd80      	pop	{r7, pc}
 80111f8:	0802dcbc 	.word	0x0802dcbc
 80111fc:	0802dcd4 	.word	0x0802dcd4

08011200 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 8011200:	b480      	push	{r7}
 8011202:	b083      	sub	sp, #12
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]

}
 8011208:	bf00      	nop
 801120a:	370c      	adds	r7, #12
 801120c:	46bd      	mov	sp, r7
 801120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011212:	4770      	bx	lr

08011214 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8011214:	b480      	push	{r7}
 8011216:	b083      	sub	sp, #12
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]

}
 801121c:	bf00      	nop
 801121e:	370c      	adds	r7, #12
 8011220:	46bd      	mov	sp, r7
 8011222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011226:	4770      	bx	lr

08011228 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 8011228:	b580      	push	{r7, lr}
 801122a:	b082      	sub	sp, #8
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	4a05      	ldr	r2, [pc, #20]	@ (8011248 <_ZN10screenViewD1Ev+0x20>)
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	601a      	str	r2, [r3, #0]
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	4618      	mov	r0, r3
 801123a:	f7ff fca5 	bl	8010b88 <_ZN14screenViewBaseD1Ev>
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	4618      	mov	r0, r3
 8011242:	3708      	adds	r7, #8
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}
 8011248:	0802dd0c 	.word	0x0802dd0c

0801124c <_ZN10screenViewD0Ev>:
 801124c:	b580      	push	{r7, lr}
 801124e:	b082      	sub	sp, #8
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f7ff ffe7 	bl	8011228 <_ZN10screenViewD1Ev>
 801125a:	21c4      	movs	r1, #196	@ 0xc4
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f019 fcb6 	bl	802abce <_ZdlPvj>
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	4618      	mov	r0, r3
 8011266:	3708      	adds	r7, #8
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}

0801126c <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 801126c:	b580      	push	{r7, lr}
 801126e:	b082      	sub	sp, #8
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	4618      	mov	r0, r3
 8011278:	f7ff fbde 	bl	8010a38 <_ZN14screenViewBaseC1Ev>
 801127c:	4a03      	ldr	r2, [pc, #12]	@ (801128c <_ZN10screenViewC1Ev+0x20>)
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	601a      	str	r2, [r3, #0]
{

}
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	4618      	mov	r0, r3
 8011286:	3708      	adds	r7, #8
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}
 801128c:	0802dd0c 	.word	0x0802dd0c

08011290 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	4618      	mov	r0, r3
 801129c:	f7ff fca6 	bl	8010bec <_ZN14screenViewBase11setupScreenEv>
}
 80112a0:	bf00      	nop
 80112a2:	3708      	adds	r7, #8
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}

080112a8 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b082      	sub	sp, #8
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	4618      	mov	r0, r3
 80112b4:	f7ff fa9e 	bl	80107f4 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80112b8:	bf00      	nop
 80112ba:	3708      	adds	r7, #8
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}

080112c0 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80112c0:	b480      	push	{r7}
 80112c2:	b083      	sub	sp, #12
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
    {
 80112c8:	4a04      	ldr	r2, [pc, #16]	@ (80112dc <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	601a      	str	r2, [r3, #0]
    }
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	4618      	mov	r0, r3
 80112d2:	370c      	adds	r7, #12
 80112d4:	46bd      	mov	sp, r7
 80112d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112da:	4770      	bx	lr
 80112dc:	0802dd58 	.word	0x0802dd58

080112e0 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b082      	sub	sp, #8
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
    }
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f7ff ffe9 	bl	80112c0 <_ZN8touchgfx15TouchControllerD1Ev>
 80112ee:	2104      	movs	r1, #4
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f019 fc6c 	bl	802abce <_ZdlPvj>
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	4618      	mov	r0, r3
 80112fa:	3708      	adds	r7, #8
 80112fc:	46bd      	mov	sp, r7
 80112fe:	bd80      	pop	{r7, pc}

08011300 <_ZN20STM32TouchController4initEv>:

// 触摸状态获取函数声明
static bool myTouchController_GetState(TouchControllerState *state);

void STM32TouchController::init()
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b084      	sub	sp, #16
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    CST816D_Init();
 8011308:	f7ef fa00 	bl	800070c <CST816D_Init>
    uint8_t irq_setting = EnTouch | EnChange | EnMotion;
 801130c:	2370      	movs	r3, #112	@ 0x70
 801130e:	73fb      	strb	r3, [r7, #15]
    CST816D_SetIrqCtl(irq_setting);
 8011310:	7bfb      	ldrb	r3, [r7, #15]
 8011312:	4618      	mov	r0, r3
 8011314:	f7ef fab2 	bl	800087c <CST816D_SetIrqCtl>
    CST816D_SetMotionMask(0x07);
 8011318:	2007      	movs	r0, #7
 801131a:	f7ef fa9f 	bl	800085c <CST816D_SetMotionMask>
    printf("cst816d init\n");
 801131e:	4803      	ldr	r0, [pc, #12]	@ (801132c <_ZN20STM32TouchController4initEv+0x2c>)
 8011320:	f01a fd76 	bl	802be10 <puts>
}
 8011324:	bf00      	nop
 8011326:	3710      	adds	r7, #16
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}
 801132c:	0802d178 	.word	0x0802d178

08011330 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t &x, int32_t &y)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b086      	sub	sp, #24
 8011334:	af00      	add	r7, sp, #0
 8011336:	60f8      	str	r0, [r7, #12]
 8011338:	60b9      	str	r1, [r7, #8]
 801133a:	607a      	str	r2, [r7, #4]
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TouchControllerState state;
    if (myTouchController_GetState(&state))
 801133c:	f107 0310 	add.w	r3, r7, #16
 8011340:	4618      	mov	r0, r3
 8011342:	f000 f813 	bl	801136c <_ZL26myTouchController_GetStateP20TouchControllerState>
 8011346:	4603      	mov	r3, r0
 8011348:	2b00      	cmp	r3, #0
 801134a:	d009      	beq.n	8011360 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>
    {
        x = state.touchX;
 801134c:	8a3b      	ldrh	r3, [r7, #16]
 801134e:	461a      	mov	r2, r3
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	601a      	str	r2, [r3, #0]
        y = state.touchY;
 8011354:	8a7b      	ldrh	r3, [r7, #18]
 8011356:	461a      	mov	r2, r3
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	601a      	str	r2, [r3, #0]
        return true;
 801135c:	2301      	movs	r3, #1
 801135e:	e000      	b.n	8011362 <_ZN20STM32TouchController11sampleTouchERlS0_+0x32>
    }
    return false; // 无触摸
 8011360:	2300      	movs	r3, #0
}
 8011362:	4618      	mov	r0, r3
 8011364:	3718      	adds	r7, #24
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
	...

0801136c <_ZL26myTouchController_GetStateP20TouchControllerState>:

static bool myTouchController_GetState(TouchControllerState *state)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b084      	sub	sp, #16
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
    static int32_t lastY = 0;
    static bool wasTouched = false;
    static bool justReleased = false;

    // 检查触摸状态
    if (CST816D_IsTouched())
 8011374:	f7ef fa60 	bl	8000838 <CST816D_IsTouched>
 8011378:	4603      	mov	r3, r0
 801137a:	2b00      	cmp	r3, #0
 801137c:	bf14      	ite	ne
 801137e:	2301      	movne	r3, #1
 8011380:	2300      	moveq	r3, #0
 8011382:	b2db      	uxtb	r3, r3
 8011384:	2b00      	cmp	r3, #0
 8011386:	d02a      	beq.n	80113de <_ZL26myTouchController_GetStateP20TouchControllerState+0x72>
    {
        CST816D_TouchData touchData;

        if (CST816D_GetTouchData(&touchData) == HAL_OK && touchData.finger_num > 0)
 8011388:	f107 0308 	add.w	r3, r7, #8
 801138c:	4618      	mov	r0, r3
 801138e:	f7ef fa09 	bl	80007a4 <CST816D_GetTouchData>
 8011392:	4603      	mov	r3, r0
 8011394:	2b00      	cmp	r3, #0
 8011396:	d104      	bne.n	80113a2 <_ZL26myTouchController_GetStateP20TouchControllerState+0x36>
 8011398:	7a7b      	ldrb	r3, [r7, #9]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d001      	beq.n	80113a2 <_ZL26myTouchController_GetStateP20TouchControllerState+0x36>
 801139e:	2301      	movs	r3, #1
 80113a0:	e000      	b.n	80113a4 <_ZL26myTouchController_GetStateP20TouchControllerState+0x38>
 80113a2:	2300      	movs	r3, #0
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d03d      	beq.n	8011424 <_ZL26myTouchController_GetStateP20TouchControllerState+0xb8>
        {
            // 获取坐标
            state->touchX = touchData.x;
 80113a8:	897a      	ldrh	r2, [r7, #10]
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	801a      	strh	r2, [r3, #0]
            state->touchY = touchData.y;
 80113ae:	89ba      	ldrh	r2, [r7, #12]
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	805a      	strh	r2, [r3, #2]
            lastX = state->touchX;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	881b      	ldrh	r3, [r3, #0]
 80113b8:	461a      	mov	r2, r3
 80113ba:	4b1e      	ldr	r3, [pc, #120]	@ (8011434 <_ZL26myTouchController_GetStateP20TouchControllerState+0xc8>)
 80113bc:	601a      	str	r2, [r3, #0]
            lastY = state->touchY;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	885b      	ldrh	r3, [r3, #2]
 80113c2:	461a      	mov	r2, r3
 80113c4:	4b1c      	ldr	r3, [pc, #112]	@ (8011438 <_ZL26myTouchController_GetStateP20TouchControllerState+0xcc>)
 80113c6:	601a      	str	r2, [r3, #0]

            wasTouched = true;
 80113c8:	4b1c      	ldr	r3, [pc, #112]	@ (801143c <_ZL26myTouchController_GetStateP20TouchControllerState+0xd0>)
 80113ca:	2201      	movs	r2, #1
 80113cc:	701a      	strb	r2, [r3, #0]
            justReleased = false;
 80113ce:	4b1c      	ldr	r3, [pc, #112]	@ (8011440 <_ZL26myTouchController_GetStateP20TouchControllerState+0xd4>)
 80113d0:	2200      	movs	r2, #0
 80113d2:	701a      	strb	r2, [r3, #0]
            state->touched = true;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2201      	movs	r2, #1
 80113d8:	711a      	strb	r2, [r3, #4]

            return true;
 80113da:	2301      	movs	r3, #1
 80113dc:	e026      	b.n	801142c <_ZL26myTouchController_GetStateP20TouchControllerState+0xc0>
        }
    }
    else if (wasTouched)
 80113de:	4b17      	ldr	r3, [pc, #92]	@ (801143c <_ZL26myTouchController_GetStateP20TouchControllerState+0xd0>)
 80113e0:	781b      	ldrb	r3, [r3, #0]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d01e      	beq.n	8011424 <_ZL26myTouchController_GetStateP20TouchControllerState+0xb8>
    {
        // 触摸刚刚结束
        if (!justReleased)
 80113e6:	4b16      	ldr	r3, [pc, #88]	@ (8011440 <_ZL26myTouchController_GetStateP20TouchControllerState+0xd4>)
 80113e8:	781b      	ldrb	r3, [r3, #0]
 80113ea:	f083 0301 	eor.w	r3, r3, #1
 80113ee:	b2db      	uxtb	r3, r3
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d011      	beq.n	8011418 <_ZL26myTouchController_GetStateP20TouchControllerState+0xac>
        {
            // 发送最后一个触摸位置
            state->touchX = lastX;
 80113f4:	4b0f      	ldr	r3, [pc, #60]	@ (8011434 <_ZL26myTouchController_GetStateP20TouchControllerState+0xc8>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	b29a      	uxth	r2, r3
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	801a      	strh	r2, [r3, #0]
            state->touchY = lastY;
 80113fe:	4b0e      	ldr	r3, [pc, #56]	@ (8011438 <_ZL26myTouchController_GetStateP20TouchControllerState+0xcc>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	b29a      	uxth	r2, r3
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	805a      	strh	r2, [r3, #2]
            state->touched = true;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2201      	movs	r2, #1
 801140c:	711a      	strb	r2, [r3, #4]
            justReleased = true;
 801140e:	4b0c      	ldr	r3, [pc, #48]	@ (8011440 <_ZL26myTouchController_GetStateP20TouchControllerState+0xd4>)
 8011410:	2201      	movs	r2, #1
 8011412:	701a      	strb	r2, [r3, #0]

            return true;
 8011414:	2301      	movs	r3, #1
 8011416:	e009      	b.n	801142c <_ZL26myTouchController_GetStateP20TouchControllerState+0xc0>
        }
        else
        {
            // 恢复到未触摸状态
            justReleased = false;
 8011418:	4b09      	ldr	r3, [pc, #36]	@ (8011440 <_ZL26myTouchController_GetStateP20TouchControllerState+0xd4>)
 801141a:	2200      	movs	r2, #0
 801141c:	701a      	strb	r2, [r3, #0]
            wasTouched = false;
 801141e:	4b07      	ldr	r3, [pc, #28]	@ (801143c <_ZL26myTouchController_GetStateP20TouchControllerState+0xd0>)
 8011420:	2200      	movs	r2, #0
 8011422:	701a      	strb	r2, [r3, #0]
        }
    }

    state->touched = false;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2200      	movs	r2, #0
 8011428:	711a      	strb	r2, [r3, #4]
    return false;
 801142a:	2300      	movs	r3, #0
}
 801142c:	4618      	mov	r0, r3
 801142e:	3710      	adds	r7, #16
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}
 8011434:	2005a704 	.word	0x2005a704
 8011438:	2005a708 	.word	0x2005a708
 801143c:	2005a70c 	.word	0x2005a70c
 8011440:	2005a70d 	.word	0x2005a70d

08011444 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8011444:	b580      	push	{r7, lr}
 8011446:	b082      	sub	sp, #8
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
 801144c:	4a05      	ldr	r2, [pc, #20]	@ (8011464 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	601a      	str	r2, [r3, #0]
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	4618      	mov	r0, r3
 8011456:	f7ff ff33 	bl	80112c0 <_ZN8touchgfx15TouchControllerD1Ev>
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	4618      	mov	r0, r3
 801145e:	3708      	adds	r7, #8
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}
 8011464:	0802dd40 	.word	0x0802dd40

08011468 <_ZN20STM32TouchControllerD0Ev>:
 8011468:	b580      	push	{r7, lr}
 801146a:	b082      	sub	sp, #8
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f7ff ffe7 	bl	8011444 <_ZN20STM32TouchControllerD1Ev>
 8011476:	2104      	movs	r1, #4
 8011478:	6878      	ldr	r0, [r7, #4]
 801147a:	f019 fba8 	bl	802abce <_ZdlPvj>
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	4618      	mov	r0, r3
 8011482:	3708      	adds	r7, #8
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}

08011488 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8011488:	b480      	push	{r7}
 801148a:	af00      	add	r7, sp, #0

}
 801148c:	bf00      	nop
 801148e:	46bd      	mov	sp, r7
 8011490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011494:	4770      	bx	lr
	...

08011498 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8011498:	b480      	push	{r7}
 801149a:	b083      	sub	sp, #12
 801149c:	af00      	add	r7, sp, #0
 801149e:	4603      	mov	r3, r0
 80114a0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80114a2:	79fb      	ldrb	r3, [r7, #7]
 80114a4:	2b03      	cmp	r3, #3
 80114a6:	d80c      	bhi.n	80114c2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 80114a8:	a201      	add	r2, pc, #4	@ (adr r2, 80114b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 80114aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ae:	bf00      	nop
 80114b0:	080114c1 	.word	0x080114c1
 80114b4:	080114c1 	.word	0x080114c1
 80114b8:	080114c1 	.word	0x080114c1
 80114bc:	080114c1 	.word	0x080114c1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 80114c0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 80114c2:	bf00      	nop
 80114c4:	370c      	adds	r7, #12
 80114c6:	46bd      	mov	sp, r7
 80114c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114cc:	4770      	bx	lr
 80114ce:	bf00      	nop

080114d0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80114d0:	b480      	push	{r7}
 80114d2:	b083      	sub	sp, #12
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	4603      	mov	r3, r0
 80114d8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80114da:	79fb      	ldrb	r3, [r7, #7]
 80114dc:	2b03      	cmp	r3, #3
 80114de:	d80c      	bhi.n	80114fa <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 80114e0:	a201      	add	r2, pc, #4	@ (adr r2, 80114e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 80114e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114e6:	bf00      	nop
 80114e8:	080114f9 	.word	0x080114f9
 80114ec:	080114f9 	.word	0x080114f9
 80114f0:	080114f9 	.word	0x080114f9
 80114f4:	080114f9 	.word	0x080114f9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 80114f8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 80114fa:	bf00      	nop
 80114fc:	370c      	adds	r7, #12
 80114fe:	46bd      	mov	sp, r7
 8011500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011504:	4770      	bx	lr
 8011506:	bf00      	nop

08011508 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8011508:	b480      	push	{r7}
 801150a:	b083      	sub	sp, #12
 801150c:	af00      	add	r7, sp, #0
 801150e:	4603      	mov	r3, r0
 8011510:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8011512:	79fb      	ldrb	r3, [r7, #7]
 8011514:	2b03      	cmp	r3, #3
 8011516:	d80c      	bhi.n	8011532 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8011518:	a201      	add	r2, pc, #4	@ (adr r2, 8011520 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 801151a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801151e:	bf00      	nop
 8011520:	08011531 	.word	0x08011531
 8011524:	08011531 	.word	0x08011531
 8011528:	08011531 	.word	0x08011531
 801152c:	08011531 	.word	0x08011531
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8011530:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8011532:	bf00      	nop
 8011534:	370c      	adds	r7, #12
 8011536:	46bd      	mov	sp, r7
 8011538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153c:	4770      	bx	lr
 801153e:	bf00      	nop

08011540 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8011540:	b480      	push	{r7}
 8011542:	b083      	sub	sp, #12
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
    {
 8011548:	4a04      	ldr	r2, [pc, #16]	@ (801155c <_ZN8touchgfx3HALD1Ev+0x1c>)
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	601a      	str	r2, [r3, #0]
    }
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	4618      	mov	r0, r3
 8011552:	370c      	adds	r7, #12
 8011554:	46bd      	mov	sp, r7
 8011556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155a:	4770      	bx	lr
 801155c:	0802e2ec 	.word	0x0802e2ec

08011560 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8011560:	b580      	push	{r7, lr}
 8011562:	b082      	sub	sp, #8
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
    }
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f7ff ffe9 	bl	8011540 <_ZN8touchgfx3HALD1Ev>
 801156e:	2184      	movs	r1, #132	@ 0x84
 8011570:	6878      	ldr	r0, [r7, #4]
 8011572:	f019 fb2c 	bl	802abce <_ZdlPvj>
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	4618      	mov	r0, r3
 801157a:	3708      	adds	r7, #8
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}

08011580 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8011580:	b480      	push	{r7}
 8011582:	b083      	sub	sp, #12
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
 8011588:	460b      	mov	r3, r1
 801158a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	78fa      	ldrb	r2, [r7, #3]
 8011590:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2201      	movs	r2, #1
 8011598:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 801159c:	bf00      	nop
 801159e:	370c      	adds	r7, #12
 80115a0:	46bd      	mov	sp, r7
 80115a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a6:	4770      	bx	lr

080115a8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b082      	sub	sp, #8
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
 80115b0:	460b      	mov	r3, r1
 80115b2:	807b      	strh	r3, [r7, #2]
 80115b4:	4613      	mov	r3, r2
 80115b6:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80115b8:	4b0c      	ldr	r3, [pc, #48]	@ (80115ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 80115ba:	881b      	ldrh	r3, [r3, #0]
 80115bc:	887a      	ldrh	r2, [r7, #2]
 80115be:	429a      	cmp	r2, r3
 80115c0:	d304      	bcc.n	80115cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 80115c2:	4b0b      	ldr	r3, [pc, #44]	@ (80115f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 80115c4:	881b      	ldrh	r3, [r3, #0]
 80115c6:	883a      	ldrh	r2, [r7, #0]
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d205      	bcs.n	80115d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 80115cc:	4b09      	ldr	r3, [pc, #36]	@ (80115f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 80115ce:	4a0a      	ldr	r2, [pc, #40]	@ (80115f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 80115d0:	21a3      	movs	r1, #163	@ 0xa3
 80115d2:	480a      	ldr	r0, [pc, #40]	@ (80115fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 80115d4:	f01a f9f0 	bl	802b9b8 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80115d8:	4a09      	ldr	r2, [pc, #36]	@ (8011600 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 80115da:	887b      	ldrh	r3, [r7, #2]
 80115dc:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 80115de:	4a09      	ldr	r2, [pc, #36]	@ (8011604 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 80115e0:	883b      	ldrh	r3, [r7, #0]
 80115e2:	8013      	strh	r3, [r2, #0]
    }
 80115e4:	bf00      	nop
 80115e6:	3708      	adds	r7, #8
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}
 80115ec:	2005b91c 	.word	0x2005b91c
 80115f0:	2005b91e 	.word	0x2005b91e
 80115f4:	0802d188 	.word	0x0802d188
 80115f8:	0802d1ec 	.word	0x0802d1ec
 80115fc:	0802d230 	.word	0x0802d230
 8011600:	2005b922 	.word	0x2005b922
 8011604:	2005b924 	.word	0x2005b924

08011608 <_ZN8touchgfx3HAL11submitGPU2DEv>:
    virtual void submitGPU2D()
 8011608:	b480      	push	{r7}
 801160a:	b083      	sub	sp, #12
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
    }
 8011610:	bf00      	nop
 8011612:	370c      	adds	r7, #12
 8011614:	46bd      	mov	sp, r7
 8011616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161a:	4770      	bx	lr

0801161c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 801161c:	b580      	push	{r7, lr}
 801161e:	b082      	sub	sp, #8
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 801162a:	2b00      	cmp	r3, #0
 801162c:	d009      	beq.n	8011642 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	685a      	ldr	r2, [r3, #4]
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	685b      	ldr	r3, [r3, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	4610      	mov	r0, r2
 801163c:	4798      	blx	r3
 801163e:	4603      	mov	r3, r0
 8011640:	e000      	b.n	8011644 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8011642:	2300      	movs	r3, #0
    }
 8011644:	4618      	mov	r0, r3
 8011646:	3708      	adds	r7, #8
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}

0801164c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    }

    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 801164c:	b580      	push	{r7, lr}
 801164e:	b082      	sub	sp, #8
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8011654:	6878      	ldr	r0, [r7, #4]
 8011656:	f003 fb6d 	bl	8014d34 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	33bc      	adds	r3, #188	@ 0xbc
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	4798      	blx	r3
    }
 8011666:	bf00      	nop
 8011668:	3708      	adds	r7, #8
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}

0801166e <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 801166e:	b480      	push	{r7}
 8011670:	b083      	sub	sp, #12
 8011672:	af00      	add	r7, sp, #0
 8011674:	6078      	str	r0, [r7, #4]
 8011676:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8011678:	2300      	movs	r3, #0
    }
 801167a:	4618      	mov	r0, r3
 801167c:	370c      	adds	r7, #12
 801167e:	46bd      	mov	sp, r7
 8011680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011684:	4770      	bx	lr
	...

08011688 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8011688:	b580      	push	{r7, lr}
 801168a:	b084      	sub	sp, #16
 801168c:	af00      	add	r7, sp, #0
 801168e:	60f8      	str	r0, [r7, #12]
 8011690:	60b9      	str	r1, [r7, #8]
 8011692:	607a      	str	r2, [r7, #4]
 8011694:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d106      	bne.n	80116aa <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 801169c:	4b0f      	ldr	r3, [pc, #60]	@ (80116dc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 801169e:	4a10      	ldr	r2, [pc, #64]	@ (80116e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 80116a0:	f240 21ff 	movw	r1, #767	@ 0x2ff
 80116a4:	480f      	ldr	r0, [pc, #60]	@ (80116e4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80116a6:	f01a f987 	bl	802b9b8 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	68ba      	ldr	r2, [r7, #8]
 80116ae:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	687a      	ldr	r2, [r7, #4]
 80116b4:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	bf14      	ite	ne
 80116bc:	2301      	movne	r3, #1
 80116be:	2300      	moveq	r3, #0
 80116c0:	b2da      	uxtb	r2, r3
 80116c2:	4b09      	ldr	r3, [pc, #36]	@ (80116e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80116c4:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	3390      	adds	r3, #144	@ 0x90
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	6839      	ldr	r1, [r7, #0]
 80116d0:	68f8      	ldr	r0, [r7, #12]
 80116d2:	4798      	blx	r3
    }
 80116d4:	bf00      	nop
 80116d6:	3710      	adds	r7, #16
 80116d8:	46bd      	mov	sp, r7
 80116da:	bd80      	pop	{r7, pc}
 80116dc:	0802d274 	.word	0x0802d274
 80116e0:	0802d2ac 	.word	0x0802d2ac
 80116e4:	0802d230 	.word	0x0802d230
 80116e8:	2005b926 	.word	0x2005b926

080116ec <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 80116ec:	b480      	push	{r7}
 80116ee:	b083      	sub	sp, #12
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	683a      	ldr	r2, [r7, #0]
 80116fa:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	bf14      	ite	ne
 8011702:	2301      	movne	r3, #1
 8011704:	2300      	moveq	r3, #0
 8011706:	b2da      	uxtb	r2, r3
 8011708:	4b03      	ldr	r3, [pc, #12]	@ (8011718 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 801170a:	701a      	strb	r2, [r3, #0]
    }
 801170c:	bf00      	nop
 801170e:	370c      	adds	r7, #12
 8011710:	46bd      	mov	sp, r7
 8011712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011716:	4770      	bx	lr
 8011718:	2005b927 	.word	0x2005b927

0801171c <_ZN8touchgfx3HAL16waitForLTDCLinesEt>:
     * Only applicable on LTDC systems and when the partial framebuffer strategy is
     * enabled.
     *
     * @param numberOfLines Number of lines to wait.
     */
    virtual void waitForLTDCLines(uint16_t numberOfLines)
 801171c:	b480      	push	{r7}
 801171e:	b083      	sub	sp, #12
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
 8011724:	460b      	mov	r3, r1
 8011726:	807b      	strh	r3, [r7, #2]
    {
    }
 8011728:	bf00      	nop
 801172a:	370c      	adds	r7, #12
 801172c:	46bd      	mov	sp, r7
 801172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011732:	4770      	bx	lr

08011734 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8011734:	b480      	push	{r7}
 8011736:	b083      	sub	sp, #12
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 801173c:	2300      	movs	r3, #0
    }
 801173e:	4618      	mov	r0, r3
 8011740:	370c      	adds	r7, #12
 8011742:	46bd      	mov	sp, r7
 8011744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011748:	4770      	bx	lr

0801174a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 801174a:	b580      	push	{r7, lr}
 801174c:	b082      	sub	sp, #8
 801174e:	af00      	add	r7, sp, #0
 8011750:	6078      	str	r0, [r7, #4]
 8011752:	460b      	mov	r3, r1
 8011754:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801175a:	2b00      	cmp	r3, #0
 801175c:	d004      	beq.n	8011768 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011762:	887a      	ldrh	r2, [r7, #2]
 8011764:	4610      	mov	r0, r2
 8011766:	4798      	blx	r3
        }
    }
 8011768:	bf00      	nop
 801176a:	3708      	adds	r7, #8
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}

08011770 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8011770:	b480      	push	{r7}
 8011772:	b083      	sub	sp, #12
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8011778:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
 801177c:	4618      	mov	r0, r3
 801177e:	370c      	adds	r7, #12
 8011780:	46bd      	mov	sp, r7
 8011782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011786:	4770      	bx	lr

08011788 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8011788:	b580      	push	{r7, lr}
 801178a:	b082      	sub	sp, #8
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	685a      	ldr	r2, [r3, #4]
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	685b      	ldr	r3, [r3, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	3318      	adds	r3, #24
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	4610      	mov	r0, r2
 80117a0:	4798      	blx	r3
 80117a2:	4603      	mov	r3, r0
    }
 80117a4:	4618      	mov	r0, r3
 80117a6:	3708      	adds	r7, #8
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}

080117ac <_ZN8touchgfx3HAL25partialLTDCDeadlineMissedEv>:
     * This occurrence will lead to tearing on the display.
     *
     * This empty function can be overridden to e.g. output this error condition
     * on a pin.
     */
    virtual void partialLTDCDeadlineMissed()
 80117ac:	b480      	push	{r7}
 80117ae:	b083      	sub	sp, #12
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
    {
    }
 80117b4:	bf00      	nop
 80117b6:	370c      	adds	r7, #12
 80117b8:	46bd      	mov	sp, r7
 80117ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117be:	4770      	bx	lr

080117c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
    /**
     * Gets client framebuffer.
     *
     * @return The address of the framebuffer currently used by the framework to draw in.
     */
    uint16_t* getClientFrameBuffer()
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b082      	sub	sp, #8
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
    {
        if (USE_DOUBLE_BUFFERING && getTFTFrameBuffer() == frameBuffer0)
 80117c8:	4b0e      	ldr	r3, [pc, #56]	@ (8011804 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x44>)
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d00c      	beq.n	80117ea <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	3334      	adds	r3, #52	@ 0x34
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	4798      	blx	r3
 80117dc:	4602      	mov	r2, r0
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80117e2:	429a      	cmp	r2, r3
 80117e4:	d101      	bne.n	80117ea <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 80117e6:	2301      	movs	r3, #1
 80117e8:	e000      	b.n	80117ec <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2c>
 80117ea:	2300      	movs	r3, #0
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d002      	beq.n	80117f6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x36>
        {
            return frameBuffer1;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80117f4:	e001      	b.n	80117fa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x3a>
        }
        return frameBuffer0;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 80117fa:	4618      	mov	r0, r3
 80117fc:	3708      	adds	r7, #8
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}
 8011802:	bf00      	nop
 8011804:	2005b926 	.word	0x2005b926

08011808 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8011808:	b480      	push	{r7}
 801180a:	b085      	sub	sp, #20
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801181c:	429a      	cmp	r2, r3
 801181e:	d011      	beq.n	8011844 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8011820:	4b14      	ldr	r3, [pc, #80]	@ (8011874 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8011822:	781b      	ldrb	r3, [r3, #0]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d11e      	bne.n	8011866 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8011828:	4b13      	ldr	r3, [pc, #76]	@ (8011878 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801182a:	881b      	ldrh	r3, [r3, #0]
 801182c:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801182e:	4b13      	ldr	r3, [pc, #76]	@ (801187c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011830:	881a      	ldrh	r2, [r3, #0]
 8011832:	4b11      	ldr	r3, [pc, #68]	@ (8011878 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011834:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8011836:	4a11      	ldr	r2, [pc, #68]	@ (801187c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011838:	89bb      	ldrh	r3, [r7, #12]
 801183a:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 801183c:	4b0d      	ldr	r3, [pc, #52]	@ (8011874 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801183e:	2201      	movs	r2, #1
 8011840:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8011842:	e010      	b.n	8011866 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8011844:	4b0b      	ldr	r3, [pc, #44]	@ (8011874 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8011846:	781b      	ldrb	r3, [r3, #0]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d00c      	beq.n	8011866 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 801184c:	4b0a      	ldr	r3, [pc, #40]	@ (8011878 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801184e:	881b      	ldrh	r3, [r3, #0]
 8011850:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8011852:	4b0a      	ldr	r3, [pc, #40]	@ (801187c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011854:	881a      	ldrh	r2, [r3, #0]
 8011856:	4b08      	ldr	r3, [pc, #32]	@ (8011878 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011858:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 801185a:	4a08      	ldr	r2, [pc, #32]	@ (801187c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801185c:	89fb      	ldrh	r3, [r7, #14]
 801185e:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8011860:	4b04      	ldr	r3, [pc, #16]	@ (8011874 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8011862:	2200      	movs	r2, #0
 8011864:	701a      	strb	r2, [r3, #0]
    }
 8011866:	bf00      	nop
 8011868:	3714      	adds	r7, #20
 801186a:	46bd      	mov	sp, r7
 801186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011870:	4770      	bx	lr
 8011872:	bf00      	nop
 8011874:	2005b920 	.word	0x2005b920
 8011878:	2005b91e 	.word	0x2005b91e
 801187c:	2005b91c 	.word	0x2005b91c

08011880 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 8011880:	b480      	push	{r7}
 8011882:	b083      	sub	sp, #12
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
    {
    }
 8011888:	bf00      	nop
 801188a:	370c      	adds	r7, #12
 801188c:	46bd      	mov	sp, r7
 801188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011892:	4770      	bx	lr

08011894 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8011894:	b480      	push	{r7}
 8011896:	b083      	sub	sp, #12
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
    {
    }
 801189c:	bf00      	nop
 801189e:	370c      	adds	r7, #12
 80118a0:	46bd      	mov	sp, r7
 80118a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a6:	4770      	bx	lr

080118a8 <_ZN8touchgfx3HAL22InvalidateTextureCacheEv>:
     * Invalidate texture cache(s).
     *
     * Called on every tick before drawing into the framebuffer to enable
     * invalidation of any caches that may be incoherent with main memory.
     */
    virtual void InvalidateTextureCache()
 80118a8:	b480      	push	{r7}
 80118aa:	b083      	sub	sp, #12
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
    {
    }
 80118b0:	bf00      	nop
 80118b2:	370c      	adds	r7, #12
 80118b4:	46bd      	mov	sp, r7
 80118b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ba:	4770      	bx	lr

080118bc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80118bc:	b580      	push	{r7, lr}
 80118be:	b082      	sub	sp, #8
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	4618      	mov	r0, r3
 80118c8:	f002 fc62 	bl	8014190 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80118cc:	bf00      	nop
 80118ce:	3708      	adds	r7, #8
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}

080118d4 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b082      	sub	sp, #8
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	4a05      	ldr	r2, [pc, #20]	@ (80118f4 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	601a      	str	r2, [r3, #0]
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7ff fe2b 	bl	8011540 <_ZN8touchgfx3HALD1Ev>
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	4618      	mov	r0, r3
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}
 80118f4:	0802e0f0 	.word	0x0802e0f0

080118f8 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b082      	sub	sp, #8
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f7ff ffe7 	bl	80118d4 <_ZN20TouchGFXGeneratedHALD1Ev>
 8011906:	2184      	movs	r1, #132	@ 0x84
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f019 f960 	bl	802abce <_ZdlPvj>
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	4618      	mov	r0, r3
 8011912:	3708      	adds	r7, #8
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}

08011918 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8011918:	b580      	push	{r7, lr}
 801191a:	b082      	sub	sp, #8
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	4618      	mov	r0, r3
 8011924:	f7ff ffca 	bl	80118bc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8011928:	bf00      	nop
 801192a:	3708      	adds	r7, #8
 801192c:	46bd      	mov	sp, r7
 801192e:	bd80      	pop	{r7, pc}

08011930 <_ZN11TouchGFXHAL10initializeEv>:
#include <touchgfx/hal/GPIO.hpp>

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b082      	sub	sp, #8
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    printf("ICNA3306_Init\r\n");
 8011938:	4806      	ldr	r0, [pc, #24]	@ (8011954 <_ZN11TouchGFXHAL10initializeEv+0x24>)
 801193a:	f01a fa69 	bl	802be10 <puts>

    TouchGFXGeneratedHAL::initialize();
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	4618      	mov	r0, r3
 8011942:	f002 f8bf 	bl	8013ac4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    // setAnimationStorage((void *)animationBuffer); // Add animation storage
    ICNA3306_Init();
 8011946:	f7ef fab9 	bl	8000ebc <ICNA3306_Init>
}
 801194a:	bf00      	nop
 801194c:	3708      	adds	r7, #8
 801194e:	46bd      	mov	sp, r7
 8011950:	bd80      	pop	{r7, pc}
 8011952:	bf00      	nop
 8011954:	0802d2fc 	.word	0x0802d2fc

08011958 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b082      	sub	sp, #8
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	4618      	mov	r0, r3
 8011964:	f002 f918 	bl	8013b98 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8011968:	4603      	mov	r3, r0
}
 801196a:	4618      	mov	r0, r3
 801196c:	3708      	adds	r7, #8
 801196e:	46bd      	mov	sp, r7
 8011970:	bd80      	pop	{r7, pc}

08011972 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8011972:	b580      	push	{r7, lr}
 8011974:	b082      	sub	sp, #8
 8011976:	af00      	add	r7, sp, #0
 8011978:	6078      	str	r0, [r7, #4]
 801197a:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6839      	ldr	r1, [r7, #0]
 8011980:	4618      	mov	r0, r3
 8011982:	f002 f917 	bl	8013bb4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8011986:	bf00      	nop
 8011988:	3708      	adds	r7, #8
 801198a:	46bd      	mov	sp, r7
 801198c:	bd80      	pop	{r7, pc}
	...

08011990 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b08a      	sub	sp, #40	@ 0x28
 8011994:	af02      	add	r7, sp, #8
 8011996:	6078      	str	r0, [r7, #4]
 8011998:	6039      	str	r1, [r7, #0]
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate the start address of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp
	printf("fluashBuffer\r\n");
 801199a:	482b      	ldr	r0, [pc, #172]	@ (8011a48 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0xb8>)
 801199c:	f01a fa38 	bl	802be10 <puts>
    uint8_t *fbPtr = (uint8_t *)getClientFrameBuffer();
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	4618      	mov	r0, r3
 80119a4:	f7ff ff0c 	bl	80117c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80119a8:	6138      	str	r0, [r7, #16]
    for (size_t row = 0; row < rect.height; row++)
 80119aa:	2300      	movs	r3, #0
 80119ac:	61fb      	str	r3, [r7, #28]
 80119ae:	e030      	b.n	8011a12 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x82>
    {
        uint8_t *pixel = fbPtr + ((rect.y + row) * 240 + rect.x) * 2;
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80119b6:	461a      	mov	r2, r3
 80119b8:	69fb      	ldr	r3, [r7, #28]
 80119ba:	441a      	add	r2, r3
 80119bc:	4613      	mov	r3, r2
 80119be:	011b      	lsls	r3, r3, #4
 80119c0:	1a9b      	subs	r3, r3, r2
 80119c2:	011b      	lsls	r3, r3, #4
 80119c4:	461a      	mov	r2, r3
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80119cc:	4413      	add	r3, r2
 80119ce:	005b      	lsls	r3, r3, #1
 80119d0:	693a      	ldr	r2, [r7, #16]
 80119d2:	4413      	add	r3, r2
 80119d4:	61bb      	str	r3, [r7, #24]
        for (size_t col = 0; col < rect.width; col++)
 80119d6:	2300      	movs	r3, #0
 80119d8:	617b      	str	r3, [r7, #20]
 80119da:	e010      	b.n	80119fe <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x6e>
        {
            uint8_t temp = pixel[0];
 80119dc:	69bb      	ldr	r3, [r7, #24]
 80119de:	781b      	ldrb	r3, [r3, #0]
 80119e0:	73fb      	strb	r3, [r7, #15]
            pixel[0] = pixel[1];
 80119e2:	69bb      	ldr	r3, [r7, #24]
 80119e4:	785a      	ldrb	r2, [r3, #1]
 80119e6:	69bb      	ldr	r3, [r7, #24]
 80119e8:	701a      	strb	r2, [r3, #0]
            pixel[1] = temp;
 80119ea:	69bb      	ldr	r3, [r7, #24]
 80119ec:	3301      	adds	r3, #1
 80119ee:	7bfa      	ldrb	r2, [r7, #15]
 80119f0:	701a      	strb	r2, [r3, #0]
            pixel += 2;
 80119f2:	69bb      	ldr	r3, [r7, #24]
 80119f4:	3302      	adds	r3, #2
 80119f6:	61bb      	str	r3, [r7, #24]
        for (size_t col = 0; col < rect.width; col++)
 80119f8:	697b      	ldr	r3, [r7, #20]
 80119fa:	3301      	adds	r3, #1
 80119fc:	617b      	str	r3, [r7, #20]
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011a04:	461a      	mov	r2, r3
 8011a06:	697b      	ldr	r3, [r7, #20]
 8011a08:	4293      	cmp	r3, r2
 8011a0a:	d3e7      	bcc.n	80119dc <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>
    for (size_t row = 0; row < rect.height; row++)
 8011a0c:	69fb      	ldr	r3, [r7, #28]
 8011a0e:	3301      	adds	r3, #1
 8011a10:	61fb      	str	r3, [r7, #28]
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011a18:	461a      	mov	r2, r3
 8011a1a:	69fb      	ldr	r3, [r7, #28]
 8011a1c:	4293      	cmp	r3, r2
 8011a1e:	d3c7      	bcc.n	80119b0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x20>
        }
    }
    //printf("fluashBuffer\r\n");
    ICNA3306_DrawBuffer(0, 0, 240, 296, fbPtr, (240 * 296) * 2);
 8011a20:	4b0a      	ldr	r3, [pc, #40]	@ (8011a4c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0xbc>)
 8011a22:	9301      	str	r3, [sp, #4]
 8011a24:	693b      	ldr	r3, [r7, #16]
 8011a26:	9300      	str	r3, [sp, #0]
 8011a28:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8011a2c:	22f0      	movs	r2, #240	@ 0xf0
 8011a2e:	2100      	movs	r1, #0
 8011a30:	2000      	movs	r0, #0
 8011a32:	f7ef f9e5 	bl	8000e00 <ICNA3306_DrawBuffer>

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6839      	ldr	r1, [r7, #0]
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f002 f8c5 	bl	8013bca <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8011a40:	bf00      	nop
 8011a42:	3720      	adds	r7, #32
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}
 8011a48:	0802d30c 	.word	0x0802d30c
 8011a4c:	00022b00 	.word	0x00022b00

08011a50 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b084      	sub	sp, #16
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	60f8      	str	r0, [r7, #12]
 8011a58:	60b9      	str	r1, [r7, #8]
 8011a5a:	607a      	str	r2, [r7, #4]
 8011a5c:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8011a5e:	68f8      	ldr	r0, [r7, #12]
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	687a      	ldr	r2, [r7, #4]
 8011a64:	68b9      	ldr	r1, [r7, #8]
 8011a66:	f002 f8be 	bl	8013be6 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8011a6a:	4603      	mov	r3, r0
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	3710      	adds	r7, #16
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}

08011a74 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b082      	sub	sp, #8
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f002 f844 	bl	8013b0c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8011a84:	bf00      	nop
 8011a86:	3708      	adds	r7, #8
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b082      	sub	sp, #8
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	4618      	mov	r0, r3
 8011a98:	f002 f844 	bl	8013b24 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8011a9c:	bf00      	nop
 8011a9e:	3708      	adds	r7, #8
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f002 f843 	bl	8013b3a <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8011ab4:	bf00      	nop
 8011ab6:	3708      	adds	r7, #8
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bd80      	pop	{r7, pc}

08011abc <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b082      	sub	sp, #8
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f002 f842 	bl	8013b50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8011acc:	bf00      	nop
 8011ace:	3708      	adds	r7, #8
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}

08011ad4 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b082      	sub	sp, #8
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f002 f840 	bl	8013b64 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 8011ae4:	4603      	mov	r3, r0
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3708      	adds	r7, #8
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}

08011aee <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8011aee:	b580      	push	{r7, lr}
 8011af0:	b082      	sub	sp, #8
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	4618      	mov	r0, r3
 8011afa:	f002 f840 	bl	8013b7e <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8011afe:	bf00      	nop
 8011b00:	3708      	adds	r7, #8
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}

08011b06 <touchgfx_tim_vsync>:
extern "C" void touchgfx_tim_vsync(void)
{
 8011b06:	b580      	push	{r7, lr}
 8011b08:	af00      	add	r7, sp, #0
    OSWrappers::signalVSync();
 8011b0a:	f000 f88b 	bl	8011c24 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
    //printf("5555\r\n");
}
 8011b0e:	bf00      	nop
 8011b10:	bd80      	pop	{r7, pc}
	...

08011b14 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b082      	sub	sp, #8
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	4a05      	ldr	r2, [pc, #20]	@ (8011b34 <_ZN11TouchGFXHALD1Ev+0x20>)
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	601a      	str	r2, [r3, #0]
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7ff fed5 	bl	80118d4 <_ZN20TouchGFXGeneratedHALD1Ev>
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	3708      	adds	r7, #8
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}
 8011b34:	0802dd70 	.word	0x0802dd70

08011b38 <_ZN11TouchGFXHALD0Ev>:
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b082      	sub	sp, #8
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	f7ff ffe7 	bl	8011b14 <_ZN11TouchGFXHALD1Ev>
 8011b46:	2184      	movs	r1, #132	@ 0x84
 8011b48:	6878      	ldr	r0, [r7, #4]
 8011b4a:	f019 f840 	bl	802abce <_ZdlPvj>
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	4618      	mov	r0, r3
 8011b52:	3708      	adds	r7, #8
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd80      	pop	{r7, pc}

08011b58 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	2101      	movs	r1, #1
 8011b60:	2001      	movs	r0, #1
 8011b62:	f7fa f8b1 	bl	800bcc8 <osSemaphoreNew>
 8011b66:	4603      	mov	r3, r0
 8011b68:	4a0f      	ldr	r2, [pc, #60]	@ (8011ba8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8011b6a:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8011b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8011ba8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d105      	bne.n	8011b80 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8011b74:	4b0d      	ldr	r3, [pc, #52]	@ (8011bac <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8011b76:	4a0e      	ldr	r2, [pc, #56]	@ (8011bb0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8011b78:	2128      	movs	r1, #40	@ 0x28
 8011b7a:	480e      	ldr	r0, [pc, #56]	@ (8011bb4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8011b7c:	f019 ff1c 	bl	802b9b8 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8011b80:	2200      	movs	r2, #0
 8011b82:	2104      	movs	r1, #4
 8011b84:	2001      	movs	r0, #1
 8011b86:	f7fa f9b1 	bl	800beec <osMessageQueueNew>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8011bb8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8011b8e:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8011b90:	4b09      	ldr	r3, [pc, #36]	@ (8011bb8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d105      	bne.n	8011ba4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8011b98:	4b08      	ldr	r3, [pc, #32]	@ (8011bbc <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8011b9a:	4a05      	ldr	r2, [pc, #20]	@ (8011bb0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8011b9c:	212c      	movs	r1, #44	@ 0x2c
 8011b9e:	4805      	ldr	r0, [pc, #20]	@ (8011bb4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8011ba0:	f019 ff0a 	bl	802b9b8 <__assert_func>
}
 8011ba4:	bf00      	nop
 8011ba6:	bd80      	pop	{r7, pc}
 8011ba8:	2005a710 	.word	0x2005a710
 8011bac:	0802d31c 	.word	0x0802d31c
 8011bb0:	0802d368 	.word	0x0802d368
 8011bb4:	0802d398 	.word	0x0802d398
 8011bb8:	2005a714 	.word	0x2005a714
 8011bbc:	0802d3c4 	.word	0x0802d3c4

08011bc0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8011bc4:	4b04      	ldr	r3, [pc, #16]	@ (8011bd8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f7fa f903 	bl	800bdd8 <osSemaphoreAcquire>
}
 8011bd2:	bf00      	nop
 8011bd4:	bd80      	pop	{r7, pc}
 8011bd6:	bf00      	nop
 8011bd8:	2005a710 	.word	0x2005a710

08011bdc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8011be0:	4b03      	ldr	r3, [pc, #12]	@ (8011bf0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	4618      	mov	r0, r3
 8011be6:	f7fa f943 	bl	800be70 <osSemaphoreRelease>
}
 8011bea:	bf00      	nop
 8011bec:	bd80      	pop	{r7, pc}
 8011bee:	bf00      	nop
 8011bf0:	2005a710 	.word	0x2005a710

08011bf4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8011bf8:	4b03      	ldr	r3, [pc, #12]	@ (8011c08 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	2100      	movs	r1, #0
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f7fa f8ea 	bl	800bdd8 <osSemaphoreAcquire>
}
 8011c04:	bf00      	nop
 8011c06:	bd80      	pop	{r7, pc}
 8011c08:	2005a710 	.word	0x2005a710

08011c0c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8011c10:	4b03      	ldr	r3, [pc, #12]	@ (8011c20 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7fa f92b 	bl	800be70 <osSemaphoreRelease>
}
 8011c1a:	bf00      	nop
 8011c1c:	bd80      	pop	{r7, pc}
 8011c1e:	bf00      	nop
 8011c20:	2005a710 	.word	0x2005a710

08011c24 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8011c28:	4b04      	ldr	r3, [pc, #16]	@ (8011c3c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8011c2a:	6818      	ldr	r0, [r3, #0]
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	2200      	movs	r2, #0
 8011c30:	4903      	ldr	r1, [pc, #12]	@ (8011c40 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8011c32:	f7fa f9cd 	bl	800bfd0 <osMessageQueuePut>
}
 8011c36:	bf00      	nop
 8011c38:	bd80      	pop	{r7, pc}
 8011c3a:	bf00      	nop
 8011c3c:	2005a714 	.word	0x2005a714
 8011c40:	20000014 	.word	0x20000014

08011c44 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b082      	sub	sp, #8
 8011c48:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8011c4a:	4b09      	ldr	r3, [pc, #36]	@ (8011c70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8011c4c:	6818      	ldr	r0, [r3, #0]
 8011c4e:	1d39      	adds	r1, r7, #4
 8011c50:	2300      	movs	r3, #0
 8011c52:	2200      	movs	r2, #0
 8011c54:	f7fa fa16 	bl	800c084 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8011c58:	4b05      	ldr	r3, [pc, #20]	@ (8011c70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8011c5a:	6818      	ldr	r0, [r3, #0]
 8011c5c:	1d39      	adds	r1, r7, #4
 8011c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8011c62:	2200      	movs	r2, #0
 8011c64:	f7fa fa0e 	bl	800c084 <osMessageQueueGet>
}
 8011c68:	bf00      	nop
 8011c6a:	3708      	adds	r7, #8
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}
 8011c70:	2005a714 	.word	0x2005a714

08011c74 <__NVIC_EnableIRQ>:
{
 8011c74:	b480      	push	{r7}
 8011c76:	b083      	sub	sp, #12
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	db0b      	blt.n	8011c9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011c86:	79fb      	ldrb	r3, [r7, #7]
 8011c88:	f003 021f 	and.w	r2, r3, #31
 8011c8c:	4907      	ldr	r1, [pc, #28]	@ (8011cac <__NVIC_EnableIRQ+0x38>)
 8011c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011c92:	095b      	lsrs	r3, r3, #5
 8011c94:	2001      	movs	r0, #1
 8011c96:	fa00 f202 	lsl.w	r2, r0, r2
 8011c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011c9e:	bf00      	nop
 8011ca0:	370c      	adds	r7, #12
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca8:	4770      	bx	lr
 8011caa:	bf00      	nop
 8011cac:	e000e100 	.word	0xe000e100

08011cb0 <__NVIC_DisableIRQ>:
{
 8011cb0:	b480      	push	{r7}
 8011cb2:	b083      	sub	sp, #12
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	db12      	blt.n	8011ce8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011cc2:	79fb      	ldrb	r3, [r7, #7]
 8011cc4:	f003 021f 	and.w	r2, r3, #31
 8011cc8:	490a      	ldr	r1, [pc, #40]	@ (8011cf4 <__NVIC_DisableIRQ+0x44>)
 8011cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011cce:	095b      	lsrs	r3, r3, #5
 8011cd0:	2001      	movs	r0, #1
 8011cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8011cd6:	3320      	adds	r3, #32
 8011cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8011cdc:	f3bf 8f4f 	dsb	sy
}
 8011ce0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011ce2:	f3bf 8f6f 	isb	sy
}
 8011ce6:	bf00      	nop
}
 8011ce8:	bf00      	nop
 8011cea:	370c      	adds	r7, #12
 8011cec:	46bd      	mov	sp, r7
 8011cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf2:	4770      	bx	lr
 8011cf4:	e000e100 	.word	0xe000e100

08011cf8 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8011cf8:	b480      	push	{r7}
 8011cfa:	b083      	sub	sp, #12
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
        : color(0)
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2200      	movs	r2, #0
 8011d04:	601a      	str	r2, [r3, #0]
    }
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	4618      	mov	r0, r3
 8011d0a:	370c      	adds	r7, #12
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d12:	4770      	bx	lr

08011d14 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8011d14:	b480      	push	{r7}
 8011d16:	b083      	sub	sp, #12
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
        return color;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
    }
 8011d20:	4618      	mov	r0, r3
 8011d22:	370c      	adds	r7, #12
 8011d24:	46bd      	mov	sp, r7
 8011d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2a:	4770      	bx	lr

08011d2c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8011d2c:	b480      	push	{r7}
 8011d2e:	b083      	sub	sp, #12
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
    {
 8011d34:	4a04      	ldr	r2, [pc, #16]	@ (8011d48 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	601a      	str	r2, [r3, #0]
    }
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	370c      	adds	r7, #12
 8011d40:	46bd      	mov	sp, r7
 8011d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d46:	4770      	bx	lr
 8011d48:	0802deac 	.word	0x0802deac

08011d4c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b082      	sub	sp, #8
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
    }
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	f7ff ffe9 	bl	8011d2c <_ZN8touchgfx9DMA_QueueD1Ev>
 8011d5a:	2104      	movs	r1, #4
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f018 ff36 	bl	802abce <_ZdlPvj>
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	4618      	mov	r0, r3
 8011d66:	3708      	adds	r7, #8
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}

08011d6c <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b082      	sub	sp, #8
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	3344      	adds	r3, #68	@ 0x44
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	6878      	ldr	r0, [r7, #4]
 8011d7e:	4798      	blx	r3
    }
 8011d80:	bf00      	nop
 8011d82:	3708      	adds	r7, #8
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}

08011d88 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8011d88:	b480      	push	{r7}
 8011d8a:	b083      	sub	sp, #12
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
    {
 8011d90:	4a04      	ldr	r2, [pc, #16]	@ (8011da4 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	601a      	str	r2, [r3, #0]
    }
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	4618      	mov	r0, r3
 8011d9a:	370c      	adds	r7, #12
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da2:	4770      	bx	lr
 8011da4:	0802e3d8 	.word	0x0802e3d8

08011da8 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b082      	sub	sp, #8
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
    }
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f7ff ffe9 	bl	8011d88 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8011db6:	210c      	movs	r1, #12
 8011db8:	6878      	ldr	r0, [r7, #4]
 8011dba:	f018 ff08 	bl	802abce <_ZdlPvj>
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	3708      	adds	r7, #8
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}

08011dc8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8011dc8:	b480      	push	{r7}
 8011dca:	b083      	sub	sp, #12
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8011dd2:	4a09      	ldr	r2, [pc, #36]	@ (8011df8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	601a      	str	r2, [r3, #0]
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	683a      	ldr	r2, [r7, #0]
 8011ddc:	605a      	str	r2, [r3, #4]
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	2200      	movs	r2, #0
 8011de2:	721a      	strb	r2, [r3, #8]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2200      	movs	r2, #0
 8011de8:	725a      	strb	r2, [r3, #9]
    {
    }
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	4618      	mov	r0, r3
 8011dee:	370c      	adds	r7, #12
 8011df0:	46bd      	mov	sp, r7
 8011df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df6:	4770      	bx	lr
 8011df8:	0802e3d8 	.word	0x0802e3d8

08011dfc <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8011dfc:	b480      	push	{r7}
 8011dfe:	b083      	sub	sp, #12
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8011e04:	2301      	movs	r3, #1
    }
 8011e06:	4618      	mov	r0, r3
 8011e08:	370c      	adds	r7, #12
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e10:	4770      	bx	lr

08011e12 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8011e12:	b580      	push	{r7, lr}
 8011e14:	b082      	sub	sp, #8
 8011e16:	af00      	add	r7, sp, #0
 8011e18:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8011e1a:	687a      	ldr	r2, [r7, #4]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	3328      	adds	r3, #40	@ 0x28
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	4610      	mov	r0, r2
 8011e26:	4798      	blx	r3
    }
 8011e28:	bf00      	nop
 8011e2a:	3708      	adds	r7, #8
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd80      	pop	{r7, pc}

08011e30 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b082      	sub	sp, #8
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	685a      	ldr	r2, [r3, #4]
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	685b      	ldr	r3, [r3, #4]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	3314      	adds	r3, #20
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	4610      	mov	r0, r2
 8011e48:	4798      	blx	r3
    }
 8011e4a:	bf00      	nop
 8011e4c:	3708      	adds	r7, #8
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}

08011e52 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8011e52:	b580      	push	{r7, lr}
 8011e54:	b082      	sub	sp, #8
 8011e56:	af00      	add	r7, sp, #0
 8011e58:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8011e5a:	f7fd fb3b 	bl	800f4d4 <_ZN8touchgfx3HAL11getInstanceEv>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	4618      	mov	r0, r3
 8011e62:	f7ff ffe5 	bl	8011e30 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8011e66:	bf00      	nop
 8011e68:	3708      	adds	r7, #8
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd80      	pop	{r7, pc}

08011e6e <DMA2D_XferErrorCallback>:

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
 8011e6e:	b480      	push	{r7}
 8011e70:	b083      	sub	sp, #12
 8011e72:	af00      	add	r7, sp, #0
 8011e74:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        while (1)
 8011e76:	bf00      	nop
 8011e78:	e7fd      	b.n	8011e76 <DMA2D_XferErrorCallback+0x8>
	...

08011e7c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b082      	sub	sp, #8
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
 8011e84:	4a05      	ldr	r2, [pc, #20]	@ (8011e9c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	601a      	str	r2, [r3, #0]
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f7ff ff4d 	bl	8011d2c <_ZN8touchgfx9DMA_QueueD1Ev>
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	4618      	mov	r0, r3
 8011e96:	3708      	adds	r7, #8
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bd80      	pop	{r7, pc}
 8011e9c:	0802e428 	.word	0x0802e428

08011ea0 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b082      	sub	sp, #8
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f7ff ffe7 	bl	8011e7c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8011eae:	2114      	movs	r1, #20
 8011eb0:	6878      	ldr	r0, [r7, #4]
 8011eb2:	f018 fe8c 	bl	802abce <_ZdlPvj>
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3708      	adds	r7, #8
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}

08011ec0 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b082      	sub	sp, #8
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	330c      	adds	r3, #12
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f7ff ff13 	bl	8011cf8 <_ZN8touchgfx9colortypeC1Ev>
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3708      	adds	r7, #8
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}

08011edc <_ZN8STM32DMAC1Ev>:

        }
    }
}

STM32DMA::STM32DMA()
 8011edc:	b5b0      	push	{r4, r5, r7, lr}
 8011ede:	b082      	sub	sp, #8
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8011ee4:	687a      	ldr	r2, [r7, #4]
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	330c      	adds	r3, #12
 8011eea:	4619      	mov	r1, r3
 8011eec:	4610      	mov	r0, r2
 8011eee:	f7ff ff6b 	bl	8011dc8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8011ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8011f2c <_ZN8STM32DMAC1Ev+0x50>)
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	601a      	str	r2, [r3, #0]
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	f103 000c 	add.w	r0, r3, #12
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	3320      	adds	r3, #32
 8011f02:	2260      	movs	r2, #96	@ 0x60
 8011f04:	4619      	mov	r1, r3
 8011f06:	f003 f867 	bl	8014fd8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	3320      	adds	r3, #32
 8011f0e:	245f      	movs	r4, #95	@ 0x5f
 8011f10:	461d      	mov	r5, r3
 8011f12:	e004      	b.n	8011f1e <_ZN8STM32DMAC1Ev+0x42>
 8011f14:	4628      	mov	r0, r5
 8011f16:	f7ff ffd3 	bl	8011ec0 <_ZN8touchgfx6BlitOpC1Ev>
 8011f1a:	3c01      	subs	r4, #1
 8011f1c:	3524      	adds	r5, #36	@ 0x24
 8011f1e:	2c00      	cmp	r4, #0
 8011f20:	daf8      	bge.n	8011f14 <_ZN8STM32DMAC1Ev+0x38>
{
}
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	4618      	mov	r0, r3
 8011f26:	3708      	adds	r7, #8
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8011f2c:	0802de5c 	.word	0x0802de5c

08011f30 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
 8011f38:	4a09      	ldr	r2, [pc, #36]	@ (8011f60 <_ZN8STM32DMAD1Ev+0x30>)
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8011f3e:	2076      	movs	r0, #118	@ 0x76
 8011f40:	f7ff feb6 	bl	8011cb0 <__NVIC_DisableIRQ>
}
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	330c      	adds	r3, #12
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f7ff ff97 	bl	8011e7c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	4618      	mov	r0, r3
 8011f52:	f7ff ff19 	bl	8011d88 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	4618      	mov	r0, r3
 8011f5a:	3708      	adds	r7, #8
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}
 8011f60:	0802de5c 	.word	0x0802de5c

08011f64 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b082      	sub	sp, #8
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
}
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f7ff ffdf 	bl	8011f30 <_ZN8STM32DMAD1Ev>
 8011f72:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f018 fe29 	bl	802abce <_ZdlPvj>
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	4618      	mov	r0, r3
 8011f80:	3708      	adds	r7, #8
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}
	...

08011f88 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b084      	sub	sp, #16
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8011f90:	4b13      	ldr	r3, [pc, #76]	@ (8011fe0 <_ZN8STM32DMA10initializeEv+0x58>)
 8011f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011f96:	4a12      	ldr	r2, [pc, #72]	@ (8011fe0 <_ZN8STM32DMA10initializeEv+0x58>)
 8011f98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011f9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8011fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8011fe0 <_ZN8STM32DMA10initializeEv+0x58>)
 8011fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011fa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011faa:	60fb      	str	r3, [r7, #12]
 8011fac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8011fae:	4b0c      	ldr	r3, [pc, #48]	@ (8011fe0 <_ZN8STM32DMA10initializeEv+0x58>)
 8011fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011fb2:	4a0b      	ldr	r2, [pc, #44]	@ (8011fe0 <_ZN8STM32DMA10initializeEv+0x58>)
 8011fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011fb8:	6613      	str	r3, [r2, #96]	@ 0x60
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8011fba:	4b09      	ldr	r3, [pc, #36]	@ (8011fe0 <_ZN8STM32DMA10initializeEv+0x58>)
 8011fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011fbe:	4a08      	ldr	r2, [pc, #32]	@ (8011fe0 <_ZN8STM32DMA10initializeEv+0x58>)
 8011fc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011fc4:	6613      	str	r3, [r2, #96]	@ 0x60

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8011fc6:	4b07      	ldr	r3, [pc, #28]	@ (8011fe4 <_ZN8STM32DMA10initializeEv+0x5c>)
 8011fc8:	4a07      	ldr	r2, [pc, #28]	@ (8011fe8 <_ZN8STM32DMA10initializeEv+0x60>)
 8011fca:	621a      	str	r2, [r3, #32]

    /* Add transfer error callback function */
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8011fcc:	4b05      	ldr	r3, [pc, #20]	@ (8011fe4 <_ZN8STM32DMA10initializeEv+0x5c>)
 8011fce:	4a07      	ldr	r2, [pc, #28]	@ (8011fec <_ZN8STM32DMA10initializeEv+0x64>)
 8011fd0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8011fd2:	2076      	movs	r0, #118	@ 0x76
 8011fd4:	f7ff fe4e 	bl	8011c74 <__NVIC_EnableIRQ>
}
 8011fd8:	bf00      	nop
 8011fda:	3710      	adds	r7, #16
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}
 8011fe0:	46020c00 	.word	0x46020c00
 8011fe4:	200459d0 	.word	0x200459d0
 8011fe8:	08011e53 	.word	0x08011e53
 8011fec:	08011e6f 	.word	0x08011e6f

08011ff0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b084      	sub	sp, #16
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	460b      	mov	r3, r1
 8011ffa:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	60fb      	str	r3, [r7, #12]

    switch (format)
 8012000:	78fb      	ldrb	r3, [r7, #3]
 8012002:	2b0b      	cmp	r3, #11
 8012004:	d826      	bhi.n	8012054 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8012006:	a201      	add	r2, pc, #4	@ (adr r2, 801200c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8012008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801200c:	08012049 	.word	0x08012049
 8012010:	08012043 	.word	0x08012043
 8012014:	0801203d 	.word	0x0801203d
 8012018:	08012055 	.word	0x08012055
 801201c:	08012055 	.word	0x08012055
 8012020:	08012055 	.word	0x08012055
 8012024:	08012055 	.word	0x08012055
 8012028:	0801204f 	.word	0x0801204f
 801202c:	0801204f 	.word	0x0801204f
 8012030:	0801204f 	.word	0x0801204f
 8012034:	0801204f 	.word	0x0801204f
 8012038:	0801204f 	.word	0x0801204f
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 801203c:	2300      	movs	r3, #0
 801203e:	60fb      	str	r3, [r7, #12]
        break;
 8012040:	e00e      	b.n	8012060 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8012042:	2301      	movs	r3, #1
 8012044:	60fb      	str	r3, [r7, #12]
        break;
 8012046:	e00b      	b.n	8012060 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8012048:	2302      	movs	r3, #2
 801204a:	60fb      	str	r3, [r7, #12]
        break;
 801204c:	e008      	b.n	8012060 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 801204e:	2305      	movs	r3, #5
 8012050:	60fb      	str	r3, [r7, #12]
        break;
 8012052:	e005      	b.n	8012060 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8012054:	4b05      	ldr	r3, [pc, #20]	@ (801206c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8012056:	4a06      	ldr	r2, [pc, #24]	@ (8012070 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8012058:	216f      	movs	r1, #111	@ 0x6f
 801205a:	4806      	ldr	r0, [pc, #24]	@ (8012074 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 801205c:	f019 fcac 	bl	802b9b8 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8012060:	68fb      	ldr	r3, [r7, #12]
}
 8012062:	4618      	mov	r0, r3
 8012064:	3710      	adds	r7, #16
 8012066:	46bd      	mov	sp, r7
 8012068:	bd80      	pop	{r7, pc}
 801206a:	bf00      	nop
 801206c:	0802d408 	.word	0x0802d408
 8012070:	0802d424 	.word	0x0802d424
 8012074:	0802d470 	.word	0x0802d470

08012078 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b084      	sub	sp, #16
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	460b      	mov	r3, r1
 8012082:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8012084:	2300      	movs	r3, #0
 8012086:	60fb      	str	r3, [r7, #12]

    switch (format)
 8012088:	78fb      	ldrb	r3, [r7, #3]
 801208a:	2b0a      	cmp	r3, #10
 801208c:	d821      	bhi.n	80120d2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 801208e:	a201      	add	r2, pc, #4	@ (adr r2, 8012094 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8012090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012094:	080120cd 	.word	0x080120cd
 8012098:	080120c7 	.word	0x080120c7
 801209c:	080120c1 	.word	0x080120c1
 80120a0:	080120d3 	.word	0x080120d3
 80120a4:	080120d3 	.word	0x080120d3
 80120a8:	080120d3 	.word	0x080120d3
 80120ac:	080120d3 	.word	0x080120d3
 80120b0:	080120c7 	.word	0x080120c7
 80120b4:	080120c7 	.word	0x080120c7
 80120b8:	080120c7 	.word	0x080120c7
 80120bc:	080120c7 	.word	0x080120c7
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80120c0:	2300      	movs	r3, #0
 80120c2:	60fb      	str	r3, [r7, #12]
        break;
 80120c4:	e00b      	b.n	80120de <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 80120c6:	2301      	movs	r3, #1
 80120c8:	60fb      	str	r3, [r7, #12]
        break;
 80120ca:	e008      	b.n	80120de <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80120cc:	2302      	movs	r3, #2
 80120ce:	60fb      	str	r3, [r7, #12]
        break;
 80120d0:	e005      	b.n	80120de <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 80120d2:	4b05      	ldr	r3, [pc, #20]	@ (80120e8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 80120d4:	4a05      	ldr	r2, [pc, #20]	@ (80120ec <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 80120d6:	2190      	movs	r1, #144	@ 0x90
 80120d8:	4805      	ldr	r0, [pc, #20]	@ (80120f0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 80120da:	f019 fc6d 	bl	802b9b8 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80120de:	68fb      	ldr	r3, [r7, #12]
}
 80120e0:	4618      	mov	r0, r3
 80120e2:	3710      	adds	r7, #16
 80120e4:	46bd      	mov	sp, r7
 80120e6:	bd80      	pop	{r7, pc}
 80120e8:	0802d408 	.word	0x0802d408
 80120ec:	0802d49c 	.word	0x0802d49c
 80120f0:	0802d470 	.word	0x0802d470

080120f4 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 80120f4:	b480      	push	{r7}
 80120f6:	b083      	sub	sp, #12
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80120fc:	f240 33ef 	movw	r3, #1007	@ 0x3ef
}
 8012100:	4618      	mov	r0, r3
 8012102:	370c      	adds	r7, #12
 8012104:	46bd      	mov	sp, r7
 8012106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210a:	4770      	bx	lr

0801210c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 801210c:	b590      	push	{r4, r7, lr}
 801210e:	b089      	sub	sp, #36	@ 0x24
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
 8012114:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	7f5b      	ldrb	r3, [r3, #29]
 801211a:	4619      	mov	r1, r3
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f7ff ff67 	bl	8011ff0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012122:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	7f9b      	ldrb	r3, [r3, #30]
 8012128:	4619      	mov	r1, r3
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f7ff ff60 	bl	8011ff0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012130:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8012132:	683b      	ldr	r3, [r7, #0]
 8012134:	7f9b      	ldrb	r3, [r3, #30]
 8012136:	4619      	mov	r1, r3
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f7ff ff9d 	bl	8012078 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801213e:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	8b5b      	ldrh	r3, [r3, #26]
 8012144:	461a      	mov	r2, r3
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	8a9b      	ldrh	r3, [r3, #20]
 801214a:	1ad2      	subs	r2, r2, r3
 801214c:	4b97      	ldr	r3, [pc, #604]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801214e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	8b5b      	ldrh	r3, [r3, #26]
 8012154:	461a      	mov	r2, r3
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	8a9b      	ldrh	r3, [r3, #20]
 801215a:	1ad2      	subs	r2, r2, r3
 801215c:	4b93      	ldr	r3, [pc, #588]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801215e:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	8b1b      	ldrh	r3, [r3, #24]
 8012164:	461a      	mov	r2, r3
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	8a9b      	ldrh	r3, [r3, #20]
 801216a:	1ad2      	subs	r2, r2, r3
 801216c:	4b8f      	ldr	r3, [pc, #572]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801216e:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8012170:	4a8e      	ldr	r2, [pc, #568]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012172:	693b      	ldr	r3, [r7, #16]
 8012174:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	8adb      	ldrh	r3, [r3, #22]
 801217a:	461a      	mov	r2, r3
 801217c:	683b      	ldr	r3, [r7, #0]
 801217e:	8a9b      	ldrh	r3, [r3, #20]
 8012180:	041b      	lsls	r3, r3, #16
 8012182:	431a      	orrs	r2, r3
 8012184:	4b89      	ldr	r3, [pc, #548]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012186:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	691a      	ldr	r2, [r3, #16]
 801218c:	4b87      	ldr	r3, [pc, #540]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801218e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8012190:	683b      	ldr	r3, [r7, #0]
 8012192:	685a      	ldr	r2, [r3, #4]
 8012194:	4b85      	ldr	r3, [pc, #532]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012196:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80121a0:	d037      	beq.n	8012212 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 80121a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80121a6:	f200 80e4 	bhi.w	8012372 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 80121aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80121ae:	d014      	beq.n	80121da <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 80121b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80121b4:	f200 80dd 	bhi.w	8012372 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 80121b8:	2b80      	cmp	r3, #128	@ 0x80
 80121ba:	d05a      	beq.n	8012272 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x166>
 80121bc:	2b80      	cmp	r3, #128	@ 0x80
 80121be:	f200 80d8 	bhi.w	8012372 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 80121c2:	2b40      	cmp	r3, #64	@ 0x40
 80121c4:	f000 80c1 	beq.w	801234a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23e>
 80121c8:	2b40      	cmp	r3, #64	@ 0x40
 80121ca:	f200 80d2 	bhi.w	8012372 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 80121ce:	2b04      	cmp	r3, #4
 80121d0:	d03b      	beq.n	801224a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
 80121d2:	2b20      	cmp	r3, #32
 80121d4:	f000 80b9 	beq.w	801234a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23e>
 80121d8:	e0cb      	b.n	8012372 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80121da:	683b      	ldr	r3, [r7, #0]
 80121dc:	7f1b      	ldrb	r3, [r3, #28]
 80121de:	061b      	lsls	r3, r3, #24
 80121e0:	4a72      	ldr	r2, [pc, #456]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80121e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80121e6:	f043 030a 	orr.w	r3, r3, #10
 80121ea:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	330c      	adds	r3, #12
 80121f0:	4c6e      	ldr	r4, [pc, #440]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80121f2:	4618      	mov	r0, r3
 80121f4:	f7ff fd8e 	bl	8011d14 <_ZNK8touchgfx9colortypecvmEv>
 80121f8:	4603      	mov	r3, r0
 80121fa:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80121fc:	4a6b      	ldr	r2, [pc, #428]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80121fe:	697b      	ldr	r3, [r7, #20]
 8012200:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	691a      	ldr	r2, [r3, #16]
 8012206:	4b69      	ldr	r3, [pc, #420]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012208:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 801220a:	4b68      	ldr	r3, [pc, #416]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801220c:	4a68      	ldr	r2, [pc, #416]	@ (80123b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801220e:	601a      	str	r2, [r3, #0]
        break;
 8012210:	e0c7      	b.n	80123a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	7f1b      	ldrb	r3, [r3, #28]
 8012216:	061b      	lsls	r3, r3, #24
 8012218:	4a64      	ldr	r2, [pc, #400]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801221a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801221e:	f043 0309 	orr.w	r3, r3, #9
 8012222:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	330c      	adds	r3, #12
 8012228:	4c60      	ldr	r4, [pc, #384]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801222a:	4618      	mov	r0, r3
 801222c:	f7ff fd72 	bl	8011d14 <_ZNK8touchgfx9colortypecvmEv>
 8012230:	4603      	mov	r3, r0
 8012232:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012234:	4a5d      	ldr	r2, [pc, #372]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012236:	697b      	ldr	r3, [r7, #20]
 8012238:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	691a      	ldr	r2, [r3, #16]
 801223e:	4b5b      	ldr	r3, [pc, #364]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012240:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012242:	4b5a      	ldr	r3, [pc, #360]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012244:	4a5a      	ldr	r2, [pc, #360]	@ (80123b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8012246:	601a      	str	r2, [r3, #0]
        break;
 8012248:	e0ab      	b.n	80123a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	7f1b      	ldrb	r3, [r3, #28]
 801224e:	061a      	lsls	r2, r3, #24
 8012250:	69bb      	ldr	r3, [r7, #24]
 8012252:	4313      	orrs	r3, r2
 8012254:	4a55      	ldr	r2, [pc, #340]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801225a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801225c:	4a53      	ldr	r2, [pc, #332]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801225e:	697b      	ldr	r3, [r7, #20]
 8012260:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	691a      	ldr	r2, [r3, #16]
 8012266:	4b51      	ldr	r3, [pc, #324]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012268:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 801226a:	4b50      	ldr	r3, [pc, #320]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801226c:	4a50      	ldr	r2, [pc, #320]	@ (80123b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801226e:	601a      	str	r2, [r3, #0]
        break;
 8012270:	e097      	b.n	80123a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8012272:	2301      	movs	r3, #1
 8012274:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	689b      	ldr	r3, [r3, #8]
 801227a:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	1d1a      	adds	r2, r3, #4
 8012280:	4b4a      	ldr	r3, [pc, #296]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012282:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	7f1b      	ldrb	r3, [r3, #28]
 8012288:	061a      	lsls	r2, r3, #24
 801228a:	69bb      	ldr	r3, [r7, #24]
 801228c:	4313      	orrs	r3, r2
 801228e:	4a47      	ldr	r2, [pc, #284]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012294:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012296:	4a45      	ldr	r2, [pc, #276]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	691a      	ldr	r2, [r3, #16]
 80122a0:	4b42      	ldr	r3, [pc, #264]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80122a2:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	881b      	ldrh	r3, [r3, #0]
 80122a8:	b2db      	uxtb	r3, r3
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d002      	beq.n	80122b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 80122ae:	2b01      	cmp	r3, #1
 80122b0:	d00e      	beq.n	80122d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>
 80122b2:	e023      	b.n	80122fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80122b4:	4b3d      	ldr	r3, [pc, #244]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80122b6:	69db      	ldr	r3, [r3, #28]
 80122b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80122bc:	f023 0310 	bic.w	r3, r3, #16
 80122c0:	68fa      	ldr	r2, [r7, #12]
 80122c2:	8852      	ldrh	r2, [r2, #2]
 80122c4:	3a01      	subs	r2, #1
 80122c6:	0212      	lsls	r2, r2, #8
 80122c8:	4938      	ldr	r1, [pc, #224]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80122ca:	4313      	orrs	r3, r2
 80122cc:	61cb      	str	r3, [r1, #28]
                break;
 80122ce:	e01c      	b.n	801230a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fe>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	7f1b      	ldrb	r3, [r3, #28]
 80122d4:	2bff      	cmp	r3, #255	@ 0xff
 80122d6:	d101      	bne.n	80122dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
                {
                    blend = false;
 80122d8:	2300      	movs	r3, #0
 80122da:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80122dc:	4b33      	ldr	r3, [pc, #204]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80122de:	69db      	ldr	r3, [r3, #28]
 80122e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80122e4:	f023 0310 	bic.w	r3, r3, #16
 80122e8:	68fa      	ldr	r2, [r7, #12]
 80122ea:	8852      	ldrh	r2, [r2, #2]
 80122ec:	3a01      	subs	r2, #1
 80122ee:	0212      	lsls	r2, r2, #8
 80122f0:	4313      	orrs	r3, r2
 80122f2:	4a2e      	ldr	r2, [pc, #184]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80122f4:	f043 0310 	orr.w	r3, r3, #16
 80122f8:	61d3      	str	r3, [r2, #28]
                break;
 80122fa:	e006      	b.n	801230a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fe>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 80122fc:	4b2d      	ldr	r3, [pc, #180]	@ (80123b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80122fe:	4a2e      	ldr	r2, [pc, #184]	@ (80123b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8012300:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8012304:	482d      	ldr	r0, [pc, #180]	@ (80123bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8012306:	f019 fb57 	bl	802b9b8 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 801230a:	4b28      	ldr	r3, [pc, #160]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801230c:	69db      	ldr	r3, [r3, #28]
 801230e:	4a27      	ldr	r2, [pc, #156]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012310:	f043 0320 	orr.w	r3, r3, #32
 8012314:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8012316:	bf00      	nop
 8012318:	4b24      	ldr	r3, [pc, #144]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801231a:	69db      	ldr	r3, [r3, #28]
 801231c:	f003 0320 	and.w	r3, r3, #32
 8012320:	2b00      	cmp	r3, #0
 8012322:	bf14      	ite	ne
 8012324:	2301      	movne	r3, #1
 8012326:	2300      	moveq	r3, #0
 8012328:	b2db      	uxtb	r3, r3
 801232a:	2b00      	cmp	r3, #0
 801232c:	d1f4      	bne.n	8012318 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 801232e:	4b1f      	ldr	r3, [pc, #124]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012330:	2210      	movs	r2, #16
 8012332:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8012334:	7ffb      	ldrb	r3, [r7, #31]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d003      	beq.n	8012342 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x236>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 801233a:	4b1c      	ldr	r3, [pc, #112]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801233c:	4a1c      	ldr	r2, [pc, #112]	@ (80123b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801233e:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
            }
        }
        break;
 8012340:	e02f      	b.n	80123a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012342:	4b1a      	ldr	r3, [pc, #104]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012344:	4a1e      	ldr	r2, [pc, #120]	@ (80123c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8012346:	601a      	str	r2, [r3, #0]
        break;
 8012348:	e02b      	b.n	80123a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	7f1b      	ldrb	r3, [r3, #28]
 801234e:	061a      	lsls	r2, r3, #24
 8012350:	69bb      	ldr	r3, [r7, #24]
 8012352:	4313      	orrs	r3, r2
 8012354:	4a15      	ldr	r2, [pc, #84]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012356:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801235a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801235c:	4a13      	ldr	r2, [pc, #76]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801235e:	697b      	ldr	r3, [r7, #20]
 8012360:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	691a      	ldr	r2, [r3, #16]
 8012366:	4b11      	ldr	r3, [pc, #68]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012368:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 801236a:	4b10      	ldr	r3, [pc, #64]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801236c:	4a10      	ldr	r2, [pc, #64]	@ (80123b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801236e:	601a      	str	r2, [r3, #0]
        break;
 8012370:	e017      	b.n	80123a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012372:	683b      	ldr	r3, [r7, #0]
 8012374:	7f1b      	ldrb	r3, [r3, #28]
 8012376:	061a      	lsls	r2, r3, #24
 8012378:	69bb      	ldr	r3, [r7, #24]
 801237a:	4313      	orrs	r3, r2
 801237c:	4a0b      	ldr	r2, [pc, #44]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801237e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012382:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	7f5a      	ldrb	r2, [r3, #29]
 8012388:	683b      	ldr	r3, [r7, #0]
 801238a:	7f9b      	ldrb	r3, [r3, #30]
 801238c:	429a      	cmp	r2, r3
 801238e:	d003      	beq.n	8012398 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012390:	4b06      	ldr	r3, [pc, #24]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012392:	4a0b      	ldr	r2, [pc, #44]	@ (80123c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8012394:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
        }
        break;
 8012396:	e003      	b.n	80123a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8012398:	4b04      	ldr	r3, [pc, #16]	@ (80123ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801239a:	f242 3201 	movw	r2, #8961	@ 0x2301
 801239e:	601a      	str	r2, [r3, #0]
        break;
 80123a0:	bf00      	nop
    }
}
 80123a2:	bf00      	nop
 80123a4:	3724      	adds	r7, #36	@ 0x24
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd90      	pop	{r4, r7, pc}
 80123aa:	bf00      	nop
 80123ac:	4002b000 	.word	0x4002b000
 80123b0:	00022301 	.word	0x00022301
 80123b4:	0802d4e8 	.word	0x0802d4e8
 80123b8:	0802d504 	.word	0x0802d504
 80123bc:	0802d470 	.word	0x0802d470
 80123c0:	00012301 	.word	0x00012301

080123c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80123c4:	b590      	push	{r4, r7, lr}
 80123c6:	b085      	sub	sp, #20
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
 80123cc:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	7f9b      	ldrb	r3, [r3, #30]
 80123d2:	4619      	mov	r1, r3
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f7ff fe4f 	bl	8012078 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80123da:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80123dc:	4a3b      	ldr	r2, [pc, #236]	@ (80124cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	8adb      	ldrh	r3, [r3, #22]
 80123e6:	461a      	mov	r2, r3
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	8a9b      	ldrh	r3, [r3, #20]
 80123ec:	041b      	lsls	r3, r3, #16
 80123ee:	431a      	orrs	r2, r3
 80123f0:	4b36      	ldr	r3, [pc, #216]	@ (80124cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80123f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80123f4:	683b      	ldr	r3, [r7, #0]
 80123f6:	691a      	ldr	r2, [r3, #16]
 80123f8:	4b34      	ldr	r3, [pc, #208]	@ (80124cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80123fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	8b5b      	ldrh	r3, [r3, #26]
 8012400:	461a      	mov	r2, r3
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	8a9b      	ldrh	r3, [r3, #20]
 8012406:	1ad2      	subs	r2, r2, r3
 8012408:	4b30      	ldr	r3, [pc, #192]	@ (80124cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801240a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 801240c:	683b      	ldr	r3, [r7, #0]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	2b08      	cmp	r3, #8
 8012412:	d12f      	bne.n	8012474 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012414:	683b      	ldr	r3, [r7, #0]
 8012416:	8b5b      	ldrh	r3, [r3, #26]
 8012418:	461a      	mov	r2, r3
 801241a:	683b      	ldr	r3, [r7, #0]
 801241c:	8a9b      	ldrh	r3, [r3, #20]
 801241e:	1ad2      	subs	r2, r2, r3
 8012420:	4b2a      	ldr	r3, [pc, #168]	@ (80124cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012422:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	8b5b      	ldrh	r3, [r3, #26]
 8012428:	461a      	mov	r2, r3
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	8a9b      	ldrh	r3, [r3, #20]
 801242e:	1ad2      	subs	r2, r2, r3
 8012430:	4b26      	ldr	r3, [pc, #152]	@ (80124cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012432:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012434:	4a25      	ldr	r2, [pc, #148]	@ (80124cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	7f1b      	ldrb	r3, [r3, #28]
 801243e:	061b      	lsls	r3, r3, #24
 8012440:	4a22      	ldr	r2, [pc, #136]	@ (80124cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012442:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012446:	f043 0309 	orr.w	r3, r3, #9
 801244a:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	330c      	adds	r3, #12
 8012450:	4c1e      	ldr	r4, [pc, #120]	@ (80124cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012452:	4618      	mov	r0, r3
 8012454:	f7ff fc5e 	bl	8011d14 <_ZNK8touchgfx9colortypecvmEv>
 8012458:	4603      	mov	r3, r0
 801245a:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	691a      	ldr	r2, [r3, #16]
 8012460:	4b1a      	ldr	r3, [pc, #104]	@ (80124cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012462:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	691a      	ldr	r2, [r3, #16]
 8012468:	4b18      	ldr	r3, [pc, #96]	@ (80124cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801246a:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 801246c:	4b17      	ldr	r3, [pc, #92]	@ (80124cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801246e:	4a18      	ldr	r2, [pc, #96]	@ (80124d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8012470:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
    }
}
 8012472:	e027      	b.n	80124c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8012474:	4a15      	ldr	r2, [pc, #84]	@ (80124cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 801247a:	4b14      	ldr	r3, [pc, #80]	@ (80124cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801247c:	2200      	movs	r2, #0
 801247e:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	330c      	adds	r3, #12
 8012484:	4618      	mov	r0, r3
 8012486:	f7ff fc45 	bl	8011d14 <_ZNK8touchgfx9colortypecvmEv>
 801248a:	4603      	mov	r3, r0
 801248c:	0a1b      	lsrs	r3, r3, #8
 801248e:	f403 4478 	and.w	r4, r3, #63488	@ 0xf800
 8012492:	683b      	ldr	r3, [r7, #0]
 8012494:	330c      	adds	r3, #12
 8012496:	4618      	mov	r0, r3
 8012498:	f7ff fc3c 	bl	8011d14 <_ZNK8touchgfx9colortypecvmEv>
 801249c:	4603      	mov	r3, r0
 801249e:	095b      	lsrs	r3, r3, #5
 80124a0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80124a4:	431c      	orrs	r4, r3
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	330c      	adds	r3, #12
 80124aa:	4618      	mov	r0, r3
 80124ac:	f7ff fc32 	bl	8011d14 <_ZNK8touchgfx9colortypecvmEv>
 80124b0:	4603      	mov	r3, r0
 80124b2:	08db      	lsrs	r3, r3, #3
 80124b4:	f003 031f 	and.w	r3, r3, #31
 80124b8:	4a04      	ldr	r2, [pc, #16]	@ (80124cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80124ba:	4323      	orrs	r3, r4
 80124bc:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 80124be:	4b03      	ldr	r3, [pc, #12]	@ (80124cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80124c0:	4a04      	ldr	r2, [pc, #16]	@ (80124d4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 80124c2:	601a      	str	r2, [r3, #0]
}
 80124c4:	bf00      	nop
 80124c6:	3714      	adds	r7, #20
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd90      	pop	{r4, r7, pc}
 80124cc:	4002b000 	.word	0x4002b000
 80124d0:	00022301 	.word	0x00022301
 80124d4:	00032301 	.word	0x00032301

080124d8 <_ZN8touchgfx5paint8tearDownEv>:
 * @fn void tearDown();
 *
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
 80124d8:	b480      	push	{r7}
 80124da:	af00      	add	r7, sp, #0
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80124dc:	bf00      	nop
 80124de:	4b09      	ldr	r3, [pc, #36]	@ (8012504 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	f003 0301 	and.w	r3, r3, #1
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	bf14      	ite	ne
 80124ea:	2301      	movne	r3, #1
 80124ec:	2300      	moveq	r3, #0
 80124ee:	b2db      	uxtb	r3, r3
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d1f4      	bne.n	80124de <_ZN8touchgfx5paint8tearDownEv+0x6>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80124f4:	4b03      	ldr	r3, [pc, #12]	@ (8012504 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 80124f6:	2223      	movs	r2, #35	@ 0x23
 80124f8:	609a      	str	r2, [r3, #8]
}
 80124fa:	bf00      	nop
 80124fc:	46bd      	mov	sp, r7
 80124fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012502:	4770      	bx	lr
 8012504:	4002b000 	.word	0x4002b000

08012508 <_ZN8touchgfx5paint9flushLineEPmi>:
/** Flushes a line of pixels in the data cache if used.
 *
 * @brief Flushes decoded RGB pixels when rendering compressed images
 */
void flushLine(uint32_t* addr, int sizebytes)
{
 8012508:	b480      	push	{r7}
 801250a:	b083      	sub	sp, #12
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
 8012510:	6039      	str	r1, [r7, #0]
}
 8012512:	bf00      	nop
 8012514:	370c      	adds	r7, #12
 8012516:	46bd      	mov	sp, r7
 8012518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251c:	4770      	bx	lr
	...

08012520 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 8012520:	b480      	push	{r7}
 8012522:	b085      	sub	sp, #20
 8012524:	af00      	add	r7, sp, #0
 8012526:	60f8      	str	r0, [r7, #12]
 8012528:	60b9      	str	r1, [r7, #8]
 801252a:	607a      	str	r2, [r7, #4]
 801252c:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 801252e:	bf00      	nop
 8012530:	4b21      	ldr	r3, [pc, #132]	@ (80125b8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	f003 0301 	and.w	r3, r3, #1
 8012538:	2b00      	cmp	r3, #0
 801253a:	bf14      	ite	ne
 801253c:	2301      	movne	r3, #1
 801253e:	2300      	moveq	r3, #0
 8012540:	b2db      	uxtb	r3, r3
 8012542:	2b00      	cmp	r3, #0
 8012544:	d1f4      	bne.n	8012530 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8012546:	4b1c      	ldr	r3, [pc, #112]	@ (80125b8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012548:	2223      	movs	r2, #35	@ 0x23
 801254a:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 801254c:	4b1a      	ldr	r3, [pc, #104]	@ (80125b8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801254e:	2202      	movs	r2, #2
 8012550:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8012552:	68bb      	ldr	r3, [r7, #8]
 8012554:	041b      	lsls	r3, r3, #16
 8012556:	4a18      	ldr	r2, [pc, #96]	@ (80125b8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012558:	f043 0301 	orr.w	r3, r3, #1
 801255c:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 801255e:	4a16      	ldr	r2, [pc, #88]	@ (80125b8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	63d3      	str	r3, [r2, #60]	@ 0x3c

    if (alpha < 0xFF)
 8012564:	78fb      	ldrb	r3, [r7, #3]
 8012566:	2bff      	cmp	r3, #255	@ 0xff
 8012568:	d017      	beq.n	801259a <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x7a>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801256a:	4b13      	ldr	r3, [pc, #76]	@ (80125b8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801256c:	2202      	movs	r2, #2
 801256e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8012570:	78fb      	ldrb	r3, [r7, #3]
 8012572:	061b      	lsls	r3, r3, #24
 8012574:	4a10      	ldr	r2, [pc, #64]	@ (80125b8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801257a:	f043 0309 	orr.w	r3, r3, #9
 801257e:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color);
 8012580:	4a0d      	ldr	r2, [pc, #52]	@ (80125b8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8012586:	4a0c      	ldr	r2, [pc, #48]	@ (80125b8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	6153      	str	r3, [r2, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 801258c:	4a0a      	ldr	r2, [pc, #40]	@ (80125b8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	60d3      	str	r3, [r2, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8012592:	4b09      	ldr	r3, [pc, #36]	@ (80125b8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012594:	4a09      	ldr	r2, [pc, #36]	@ (80125bc <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x9c>)
 8012596:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, color565);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}
 8012598:	e008      	b.n	80125ac <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x8c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 801259a:	4b07      	ldr	r3, [pc, #28]	@ (80125b8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801259c:	2202      	movs	r2, #2
 801259e:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, color565);
 80125a0:	4a05      	ldr	r2, [pc, #20]	@ (80125b8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80125a2:	69bb      	ldr	r3, [r7, #24]
 80125a4:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 80125a6:	4b04      	ldr	r3, [pc, #16]	@ (80125b8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80125a8:	4a05      	ldr	r2, [pc, #20]	@ (80125c0 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0xa0>)
 80125aa:	601a      	str	r2, [r3, #0]
}
 80125ac:	bf00      	nop
 80125ae:	3714      	adds	r7, #20
 80125b0:	46bd      	mov	sp, r7
 80125b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b6:	4770      	bx	lr
 80125b8:	4002b000 	.word	0x4002b000
 80125bc:	00020001 	.word	0x00020001
 80125c0:	00030001 	.word	0x00030001

080125c4 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>:

void lineFromRGB565(uint16_t* const ptr, const uint16_t* const data, const unsigned count, const uint8_t alpha)
{
 80125c4:	b480      	push	{r7}
 80125c6:	b085      	sub	sp, #20
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	60f8      	str	r0, [r7, #12]
 80125cc:	60b9      	str	r1, [r7, #8]
 80125ce:	607a      	str	r2, [r7, #4]
 80125d0:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80125d2:	bf00      	nop
 80125d4:	4b1f      	ldr	r3, [pc, #124]	@ (8012654 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	f003 0301 	and.w	r3, r3, #1
 80125dc:	2b00      	cmp	r3, #0
 80125de:	bf14      	ite	ne
 80125e0:	2301      	movne	r3, #1
 80125e2:	2300      	moveq	r3, #0
 80125e4:	b2db      	uxtb	r3, r3
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d1f4      	bne.n	80125d4 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80125ea:	4b1a      	ldr	r3, [pc, #104]	@ (8012654 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80125ec:	2223      	movs	r2, #35	@ 0x23
 80125ee:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 80125f0:	4b18      	ldr	r3, [pc, #96]	@ (8012654 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80125f2:	2202      	movs	r2, #2
 80125f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	041b      	lsls	r3, r3, #16
 80125fa:	4a16      	ldr	r2, [pc, #88]	@ (8012654 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 80125fc:	f043 0301 	orr.w	r3, r3, #1
 8012600:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8012602:	4a14      	ldr	r2, [pc, #80]	@ (8012654 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8012608:	4a12      	ldr	r2, [pc, #72]	@ (8012654 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	60d3      	str	r3, [r2, #12]

    if (alpha < 0xFF)
 801260e:	78fb      	ldrb	r3, [r7, #3]
 8012610:	2bff      	cmp	r3, #255	@ 0xff
 8012612:	d00f      	beq.n	8012634 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x70>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8012614:	78fb      	ldrb	r3, [r7, #3]
 8012616:	061b      	lsls	r3, r3, #24
 8012618:	4a0e      	ldr	r2, [pc, #56]	@ (8012654 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 801261a:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 801261e:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012620:	4b0c      	ldr	r3, [pc, #48]	@ (8012654 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8012622:	2202      	movs	r2, #2
 8012624:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8012626:	4a0b      	ldr	r2, [pc, #44]	@ (8012654 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	6153      	str	r3, [r2, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 801262c:	4b09      	ldr	r3, [pc, #36]	@ (8012654 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 801262e:	4a0a      	ldr	r2, [pc, #40]	@ (8012658 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x94>)
 8012630:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8012632:	e008      	b.n	8012646 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8012634:	78fb      	ldrb	r3, [r7, #3]
 8012636:	061b      	lsls	r3, r3, #24
 8012638:	4a06      	ldr	r2, [pc, #24]	@ (8012654 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 801263a:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 801263e:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8012640:	4b04      	ldr	r3, [pc, #16]	@ (8012654 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8012642:	2201      	movs	r2, #1
 8012644:	601a      	str	r2, [r3, #0]
}
 8012646:	bf00      	nop
 8012648:	3714      	adds	r7, #20
 801264a:	46bd      	mov	sp, r7
 801264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012650:	4770      	bx	lr
 8012652:	bf00      	nop
 8012654:	4002b000 	.word	0x4002b000
 8012658:	00020001 	.word	0x00020001

0801265c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>:

void lineFromARGB8888(uint16_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 801265c:	b480      	push	{r7}
 801265e:	b085      	sub	sp, #20
 8012660:	af00      	add	r7, sp, #0
 8012662:	60f8      	str	r0, [r7, #12]
 8012664:	60b9      	str	r1, [r7, #8]
 8012666:	607a      	str	r2, [r7, #4]
 8012668:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 801266a:	bf00      	nop
 801266c:	4b18      	ldr	r3, [pc, #96]	@ (80126d0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	f003 0301 	and.w	r3, r3, #1
 8012674:	2b00      	cmp	r3, #0
 8012676:	bf14      	ite	ne
 8012678:	2301      	movne	r3, #1
 801267a:	2300      	moveq	r3, #0
 801267c:	b2db      	uxtb	r3, r3
 801267e:	2b00      	cmp	r3, #0
 8012680:	d1f4      	bne.n	801266c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8012682:	4b13      	ldr	r3, [pc, #76]	@ (80126d0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8012684:	2223      	movs	r2, #35	@ 0x23
 8012686:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8012688:	4b11      	ldr	r3, [pc, #68]	@ (80126d0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 801268a:	2202      	movs	r2, #2
 801268c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	041b      	lsls	r3, r3, #16
 8012692:	4a0f      	ldr	r2, [pc, #60]	@ (80126d0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8012694:	f043 0301 	orr.w	r3, r3, #1
 8012698:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 801269a:	4a0d      	ldr	r2, [pc, #52]	@ (80126d0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 80126a0:	4a0b      	ldr	r2, [pc, #44]	@ (80126d0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 80126a2:	68bb      	ldr	r3, [r7, #8]
 80126a4:	60d3      	str	r3, [r2, #12]

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80126a6:	78fb      	ldrb	r3, [r7, #3]
 80126a8:	061b      	lsls	r3, r3, #24
 80126aa:	4a09      	ldr	r2, [pc, #36]	@ (80126d0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 80126ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80126b0:	61d3      	str	r3, [r2, #28]

    /* Write DMA2D BGPFCCR register */
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80126b2:	4b07      	ldr	r3, [pc, #28]	@ (80126d0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 80126b4:	2202      	movs	r2, #2
 80126b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 80126b8:	4a05      	ldr	r2, [pc, #20]	@ (80126d0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	6153      	str	r3, [r2, #20]

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80126be:	4b04      	ldr	r3, [pc, #16]	@ (80126d0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 80126c0:	4a04      	ldr	r2, [pc, #16]	@ (80126d4 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x78>)
 80126c2:	601a      	str	r2, [r3, #0]
}
 80126c4:	bf00      	nop
 80126c6:	3714      	adds	r7, #20
 80126c8:	46bd      	mov	sp, r7
 80126ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ce:	4770      	bx	lr
 80126d0:	4002b000 	.word	0x4002b000
 80126d4:	00020001 	.word	0x00020001

080126d8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 80126d8:	b480      	push	{r7}
 80126da:	b083      	sub	sp, #12
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 80126e0:	4a04      	ldr	r2, [pc, #16]	@ (80126f4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	6013      	str	r3, [r2, #0]
    }
 80126e6:	bf00      	nop
 80126e8:	370c      	adds	r7, #12
 80126ea:	46bd      	mov	sp, r7
 80126ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f0:	4770      	bx	lr
 80126f2:	bf00      	nop
 80126f4:	2005b98c 	.word	0x2005b98c

080126f8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80126f8:	b480      	push	{r7}
 80126fa:	b085      	sub	sp, #20
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	60f8      	str	r0, [r7, #12]
 8012700:	60b9      	str	r1, [r7, #8]
 8012702:	607a      	str	r2, [r7, #4]
 8012704:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8012706:	4a0b      	ldr	r2, [pc, #44]	@ (8012734 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	68ba      	ldr	r2, [r7, #8]
 8012710:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	687a      	ldr	r2, [r7, #4]
 8012716:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	683a      	ldr	r2, [r7, #0]
 801271c:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	69ba      	ldr	r2, [r7, #24]
 8012722:	611a      	str	r2, [r3, #16]
    {
    }
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	4618      	mov	r0, r3
 8012728:	3714      	adds	r7, #20
 801272a:	46bd      	mov	sp, r7
 801272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012730:	4770      	bx	lr
 8012732:	bf00      	nop
 8012734:	0802dfa8 	.word	0x0802dfa8

08012738 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8012738:	b480      	push	{r7}
 801273a:	b083      	sub	sp, #12
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
    {
 8012740:	4a04      	ldr	r2, [pc, #16]	@ (8012754 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	601a      	str	r2, [r3, #0]
    }
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	4618      	mov	r0, r3
 801274a:	370c      	adds	r7, #12
 801274c:	46bd      	mov	sp, r7
 801274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012752:	4770      	bx	lr
 8012754:	0802dfa8 	.word	0x0802dfa8

08012758 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8012758:	b580      	push	{r7, lr}
 801275a:	b082      	sub	sp, #8
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
    }
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f7ff ffe9 	bl	8012738 <_ZN8touchgfx7MVPHeapD1Ev>
 8012766:	2114      	movs	r1, #20
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f018 fa30 	bl	802abce <_ZdlPvj>
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	4618      	mov	r0, r3
 8012772:	3708      	adds	r7, #8
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}

08012778 <_ZN8touchgfx18VectorFontRendererD1Ev>:
 */
class VectorFontRenderer
{
public:
    /** Virtual destructor. */
    virtual ~VectorFontRenderer()
 8012778:	b480      	push	{r7}
 801277a:	b083      	sub	sp, #12
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
    {
 8012780:	4a04      	ldr	r2, [pc, #16]	@ (8012794 <_ZN8touchgfx18VectorFontRendererD1Ev+0x1c>)
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	601a      	str	r2, [r3, #0]
    }
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	4618      	mov	r0, r3
 801278a:	370c      	adds	r7, #12
 801278c:	46bd      	mov	sp, r7
 801278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012792:	4770      	bx	lr
 8012794:	0802df94 	.word	0x0802df94

08012798 <_ZN8touchgfx18VectorFontRendererD0Ev>:
    virtual ~VectorFontRenderer()
 8012798:	b580      	push	{r7, lr}
 801279a:	b082      	sub	sp, #8
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
    }
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f7ff ffe9 	bl	8012778 <_ZN8touchgfx18VectorFontRendererD1Ev>
 80127a6:	2104      	movs	r1, #4
 80127a8:	6878      	ldr	r0, [r7, #4]
 80127aa:	f018 fa10 	bl	802abce <_ZdlPvj>
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	4618      	mov	r0, r3
 80127b2:	3708      	adds	r7, #8
 80127b4:	46bd      	mov	sp, r7
 80127b6:	bd80      	pop	{r7, pc}

080127b8 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80127b8:	b480      	push	{r7}
 80127ba:	b083      	sub	sp, #12
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
    {
 80127c0:	4a04      	ldr	r2, [pc, #16]	@ (80127d4 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	601a      	str	r2, [r3, #0]
    }
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	4618      	mov	r0, r3
 80127ca:	370c      	adds	r7, #12
 80127cc:	46bd      	mov	sp, r7
 80127ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d2:	4770      	bx	lr
 80127d4:	0802e660 	.word	0x0802e660

080127d8 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80127d8:	b580      	push	{r7, lr}
 80127da:	b082      	sub	sp, #8
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
    }
 80127e0:	6878      	ldr	r0, [r7, #4]
 80127e2:	f7ff ffe9 	bl	80127b8 <_ZN8touchgfx3LCDD1Ev>
 80127e6:	210c      	movs	r1, #12
 80127e8:	6878      	ldr	r0, [r7, #4]
 80127ea:	f018 f9f0 	bl	802abce <_ZdlPvj>
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	4618      	mov	r0, r3
 80127f2:	3708      	adds	r7, #8
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd80      	pop	{r7, pc}

080127f8 <_ZN8touchgfx3LCD21setVectorFontRendererEPNS_18VectorFontRendererE>:
    /**
     * Set the vector font renderer
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
 80127f8:	b480      	push	{r7}
 80127fa:	b083      	sub	sp, #12
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
 8012800:	6039      	str	r1, [r7, #0]
    {
        vectorFontRenderer = renderer;
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	683a      	ldr	r2, [r7, #0]
 8012806:	609a      	str	r2, [r3, #8]
    }
 8012808:	bf00      	nop
 801280a:	370c      	adds	r7, #12
 801280c:	46bd      	mov	sp, r7
 801280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012812:	4770      	bx	lr

08012814 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8012814:	b480      	push	{r7}
 8012816:	b083      	sub	sp, #12
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
            : startX(0),
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2200      	movs	r2, #0
 8012820:	801a      	strh	r2, [r3, #0]
              startY(0),
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	2200      	movs	r2, #0
 8012826:	805a      	strh	r2, [r3, #2]
              downX(0),
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	2200      	movs	r2, #0
 801282c:	809a      	strh	r2, [r3, #4]
              downY(0),
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	2200      	movs	r2, #0
 8012832:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2200      	movs	r2, #0
 8012838:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	2200      	movs	r2, #0
 801283e:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2200      	movs	r2, #0
 8012844:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	2200      	movs	r2, #0
 801284a:	739a      	strb	r2, [r3, #14]
        {
        }
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	4618      	mov	r0, r3
 8012850:	370c      	adds	r7, #12
 8012852:	46bd      	mov	sp, r7
 8012854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012858:	4770      	bx	lr

0801285a <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 801285a:	b580      	push	{r7, lr}
 801285c:	b082      	sub	sp, #8
 801285e:	af00      	add	r7, sp, #0
 8012860:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	4618      	mov	r0, r3
 8012866:	f7ff ffd5 	bl	8012814 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	2200      	movs	r2, #0
 801286e:	611a      	str	r2, [r3, #16]
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	2200      	movs	r2, #0
 8012874:	829a      	strh	r2, [r3, #20]
    {
    }
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	4618      	mov	r0, r3
 801287a:	3708      	adds	r7, #8
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}

08012880 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8012880:	b580      	push	{r7, lr}
 8012882:	b084      	sub	sp, #16
 8012884:	af00      	add	r7, sp, #0
 8012886:	60f8      	str	r0, [r7, #12]
 8012888:	60b9      	str	r1, [r7, #8]
 801288a:	607a      	str	r2, [r7, #4]
 801288c:	603b      	str	r3, [r7, #0]
          maxBlockLines(20)
 801288e:	4a65      	ldr	r2, [pc, #404]	@ (8012a24 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1a4>)
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	68ba      	ldr	r2, [r7, #8]
 8012898:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	687a      	ldr	r2, [r7, #4]
 801289e:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	683a      	ldr	r2, [r7, #0]
 80128a4:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	2200      	movs	r2, #0
 80128aa:	611a      	str	r2, [r3, #16]
          buttonController(0),
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	2200      	movs	r2, #0
 80128b0:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	2200      	movs	r2, #0
 80128b6:	619a      	str	r2, [r3, #24]
          gestures(),
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	331c      	adds	r3, #28
 80128bc:	4618      	mov	r0, r3
 80128be:	f7ff ffcc 	bl	801285a <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	2200      	movs	r2, #0
 80128c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	2200      	movs	r2, #0
 80128ce:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	2200      	movs	r2, #0
 80128d4:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	2200      	movs	r2, #0
 80128da:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	2200      	movs	r2, #0
 80128e0:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	2200      	movs	r2, #0
 80128e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	2201      	movs	r2, #1
 80128ee:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	2200      	movs	r2, #0
 80128f6:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	2200      	movs	r2, #0
 80128fe:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	2200      	movs	r2, #0
 8012906:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	3350      	adds	r3, #80	@ 0x50
 801290c:	4618      	mov	r0, r3
 801290e:	f7fd fd2a 	bl	8010366 <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	2200      	movs	r2, #0
 8012916:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          listener(0),
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	2200      	movs	r2, #0
 801291e:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastX(0),
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	2200      	movs	r2, #0
 8012924:	661a      	str	r2, [r3, #96]	@ 0x60
          lastY(0),
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	2200      	movs	r2, #0
 801292a:	665a      	str	r2, [r3, #100]	@ 0x64
          touchSampleRate(1),
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	2201      	movs	r2, #1
 8012930:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          mcuLoadPct(0),
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	2200      	movs	r2, #0
 8012938:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          vSyncCnt(0),
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	2200      	movs	r2, #0
 8012940:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          vSyncForFrame(1),
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	2201      	movs	r2, #1
 8012948:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	2200      	movs	r2, #0
 8012950:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          clientDirty(false),
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	2200      	movs	r2, #0
 8012958:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
          swapRequested(false),
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	2200      	movs	r2, #0
 8012960:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
          lastTouched(false),
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	2200      	movs	r2, #0
 8012968:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
          updateMCULoad(0),
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	2200      	movs	r2, #0
 8012970:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	2200      	movs	r2, #0
 8012978:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	2200      	movs	r2, #0
 801297e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	2200      	movs	r2, #0
 8012986:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
          useDMAAcceleration(true),
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	2201      	movs	r2, #1
 801298e:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
          lastRenderMethod(HARDWARE),
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	2201      	movs	r2, #1
 8012996:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
          isFrontPorchEntered(false),
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	2200      	movs	r2, #0
 801299e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
          numberOfBlocks(4),
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	2204      	movs	r2, #4
 80129a6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
          maxDrawingHeight(height / numberOfBlocks), // Best guess based on testing (but not ideal in all cases)
 80129aa:	8bbb      	ldrh	r3, [r7, #28]
 80129ac:	68fa      	ldr	r2, [r7, #12]
 80129ae:	f892 207d 	ldrb.w	r2, [r2, #125]	@ 0x7d
 80129b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80129b6:	b29a      	uxth	r2, r3
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 80129c4:	4a18      	ldr	r2, [pc, #96]	@ (8012a28 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1a8>)
 80129c6:	fba2 2303 	umull	r2, r3, r2, r3
 80129ca:	085b      	lsrs	r3, r3, #1
 80129cc:	b29a      	uxth	r2, r3
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
          maxBlockLines(20)
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	2214      	movs	r2, #20
 80129d8:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
        instance = this;
 80129dc:	4a13      	ldr	r2, [pc, #76]	@ (8012a2c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1ac>)
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80129e2:	4a13      	ldr	r2, [pc, #76]	@ (8012a30 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b0>)
 80129e4:	8b3b      	ldrh	r3, [r7, #24]
 80129e6:	8013      	strh	r3, [r2, #0]
 80129e8:	4b11      	ldr	r3, [pc, #68]	@ (8012a30 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b0>)
 80129ea:	881a      	ldrh	r2, [r3, #0]
 80129ec:	4b11      	ldr	r3, [pc, #68]	@ (8012a34 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b4>)
 80129ee:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80129f0:	4a11      	ldr	r2, [pc, #68]	@ (8012a38 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b8>)
 80129f2:	8bbb      	ldrh	r3, [r7, #28]
 80129f4:	8013      	strh	r3, [r2, #0]
 80129f6:	4b10      	ldr	r3, [pc, #64]	@ (8012a38 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b8>)
 80129f8:	881a      	ldrh	r2, [r3, #0]
 80129fa:	4b10      	ldr	r3, [pc, #64]	@ (8012a3c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1bc>)
 80129fc:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 80129fe:	4b10      	ldr	r3, [pc, #64]	@ (8012a40 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1c0>)
 8012a00:	2200      	movs	r2, #0
 8012a02:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8012a04:	8b3a      	ldrh	r2, [r7, #24]
 8012a06:	8bbb      	ldrh	r3, [r7, #28]
 8012a08:	429a      	cmp	r2, r3
 8012a0a:	bf34      	ite	cc
 8012a0c:	2301      	movcc	r3, #1
 8012a0e:	2300      	movcs	r3, #0
 8012a10:	b2db      	uxtb	r3, r3
 8012a12:	461a      	mov	r2, r3
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	3710      	adds	r7, #16
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}
 8012a24:	0802e2ec 	.word	0x0802e2ec
 8012a28:	aaaaaaab 	.word	0xaaaaaaab
 8012a2c:	2005b928 	.word	0x2005b928
 8012a30:	2005b91c 	.word	0x2005b91c
 8012a34:	2005b922 	.word	0x2005b922
 8012a38:	2005b91e 	.word	0x2005b91e
 8012a3c:	2005b924 	.word	0x2005b924
 8012a40:	2005b920 	.word	0x2005b920

08012a44 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b082      	sub	sp, #8
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
 8012a4c:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	4618      	mov	r0, r3
 8012a52:	f7fd fa0f 	bl	800fe74 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8012a56:	bf00      	nop
 8012a58:	3708      	adds	r7, #8
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}
	...

08012a60 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b086      	sub	sp, #24
 8012a64:	af02      	add	r7, sp, #8
 8012a66:	60f8      	str	r0, [r7, #12]
 8012a68:	60b9      	str	r1, [r7, #8]
 8012a6a:	607a      	str	r2, [r7, #4]
 8012a6c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8012a6e:	68f8      	ldr	r0, [r7, #12]
 8012a70:	69bb      	ldr	r3, [r7, #24]
 8012a72:	9300      	str	r3, [sp, #0]
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	687a      	ldr	r2, [r7, #4]
 8012a78:	68b9      	ldr	r1, [r7, #8]
 8012a7a:	f7ff fe3d 	bl	80126f8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8012a7e:	4a04      	ldr	r2, [pc, #16]	@ (8012a90 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	601a      	str	r2, [r3, #0]
    {

    }
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	4618      	mov	r0, r3
 8012a88:	3710      	adds	r7, #16
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}
 8012a8e:	bf00      	nop
 8012a90:	0802df80 	.word	0x0802df80

08012a94 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b082      	sub	sp, #8
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
 8012a9c:	4a05      	ldr	r2, [pc, #20]	@ (8012ab4 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	601a      	str	r2, [r3, #0]
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f7ff fe47 	bl	8012738 <_ZN8touchgfx7MVPHeapD1Ev>
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	4618      	mov	r0, r3
 8012aae:	3708      	adds	r7, #8
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}
 8012ab4:	0802df80 	.word	0x0802df80

08012ab8 <_ZN16FrontendHeapBaseD0Ev>:
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b082      	sub	sp, #8
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f7ff ffe7 	bl	8012a94 <_ZN16FrontendHeapBaseD1Ev>
 8012ac6:	2114      	movs	r1, #20
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f018 f880 	bl	802abce <_ZdlPvj>
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	3708      	adds	r7, #8
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}

08012ad8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b082      	sub	sp, #8
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
 8012ae0:	4a05      	ldr	r2, [pc, #20]	@ (8012af8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	601a      	str	r2, [r3, #0]
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	4618      	mov	r0, r3
 8012aea:	f001 f8b1 	bl	8013c50 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	4618      	mov	r0, r3
 8012af2:	3708      	adds	r7, #8
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}
 8012af8:	0802df4c 	.word	0x0802df4c

08012afc <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b082      	sub	sp, #8
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f7ff ffe7 	bl	8012ad8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012b0a:	2118      	movs	r1, #24
 8012b0c:	6878      	ldr	r0, [r7, #4]
 8012b0e:	f018 f85e 	bl	802abce <_ZdlPvj>
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	4618      	mov	r0, r3
 8012b16:	3708      	adds	r7, #8
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}

08012b1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b082      	sub	sp, #8
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
 8012b24:	4a05      	ldr	r2, [pc, #20]	@ (8012b3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	601a      	str	r2, [r3, #0]
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f001 f88f 	bl	8013c50 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	4618      	mov	r0, r3
 8012b36:	3708      	adds	r7, #8
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}
 8012b3c:	0802df18 	.word	0x0802df18

08012b40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b082      	sub	sp, #8
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	6878      	ldr	r0, [r7, #4]
 8012b4a:	f7ff ffe7 	bl	8012b1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012b4e:	21cc      	movs	r1, #204	@ 0xcc
 8012b50:	6878      	ldr	r0, [r7, #4]
 8012b52:	f018 f83c 	bl	802abce <_ZdlPvj>
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	4618      	mov	r0, r3
 8012b5a:	3708      	adds	r7, #8
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}

08012b60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b082      	sub	sp, #8
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
 8012b68:	4a05      	ldr	r2, [pc, #20]	@ (8012b80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	601a      	str	r2, [r3, #0]
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	4618      	mov	r0, r3
 8012b72:	f001 f86d 	bl	8013c50 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	4618      	mov	r0, r3
 8012b7a:	3708      	adds	r7, #8
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bd80      	pop	{r7, pc}
 8012b80:	0802dee4 	.word	0x0802dee4

08012b84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b082      	sub	sp, #8
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f7ff ffe7 	bl	8012b60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012b92:	2114      	movs	r1, #20
 8012b94:	6878      	ldr	r0, [r7, #4]
 8012b96:	f018 f81a 	bl	802abce <_ZdlPvj>
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3708      	adds	r7, #8
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}

08012ba4 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b082      	sub	sp, #8
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
 8012bac:	4a10      	ldr	r2, [pc, #64]	@ (8012bf0 <_ZN12FrontendHeapD1Ev+0x4c>)
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	601a      	str	r2, [r3, #0]
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8012bb8:	4618      	mov	r0, r3
 8012bba:	f7fe f9f1 	bl	8010fa0 <_ZN19FrontendApplicationD1Ev>
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	33f8      	adds	r3, #248	@ 0xf8
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7ff ffcc 	bl	8012b60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	332c      	adds	r3, #44	@ 0x2c
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f7ff ffa5 	bl	8012b1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	3314      	adds	r3, #20
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f7ff ff7e 	bl	8012ad8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7ff ff58 	bl	8012a94 <_ZN16FrontendHeapBaseD1Ev>
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	4618      	mov	r0, r3
 8012be8:	3708      	adds	r7, #8
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bd80      	pop	{r7, pc}
 8012bee:	bf00      	nop
 8012bf0:	0802ded0 	.word	0x0802ded0

08012bf4 <_ZN12FrontendHeapD0Ev>:
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b082      	sub	sp, #8
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f7ff ffd1 	bl	8012ba4 <_ZN12FrontendHeapD1Ev>
 8012c02:	f44f 711b 	mov.w	r1, #620	@ 0x26c
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f017 ffe1 	bl	802abce <_ZdlPvj>
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	4618      	mov	r0, r3
 8012c10:	3708      	adds	r7, #8
 8012c12:	46bd      	mov	sp, r7
 8012c14:	bd80      	pop	{r7, pc}
	...

08012c18 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	af00      	add	r7, sp, #0
 8012c1c:	4801      	ldr	r0, [pc, #4]	@ (8012c24 <__tcf_0+0xc>)
 8012c1e:	f7ff ffc1 	bl	8012ba4 <_ZN12FrontendHeapD1Ev>
 8012c22:	bd80      	pop	{r7, pc}
 8012c24:	2005a718 	.word	0x2005a718

08012c28 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8012c2c:	4b11      	ldr	r3, [pc, #68]	@ (8012c74 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012c2e:	e8d3 3faf 	lda	r3, [r3]
 8012c32:	f003 0301 	and.w	r3, r3, #1
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	bf0c      	ite	eq
 8012c3a:	2301      	moveq	r3, #1
 8012c3c:	2300      	movne	r3, #0
 8012c3e:	b2db      	uxtb	r3, r3
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d013      	beq.n	8012c6c <_ZN12FrontendHeap11getInstanceEv+0x44>
 8012c44:	480b      	ldr	r0, [pc, #44]	@ (8012c74 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012c46:	f017 ffc4 	bl	802abd2 <__cxa_guard_acquire>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	bf14      	ite	ne
 8012c50:	2301      	movne	r3, #1
 8012c52:	2300      	moveq	r3, #0
 8012c54:	b2db      	uxtb	r3, r3
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d008      	beq.n	8012c6c <_ZN12FrontendHeap11getInstanceEv+0x44>
 8012c5a:	4807      	ldr	r0, [pc, #28]	@ (8012c78 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8012c5c:	f000 f846 	bl	8012cec <_ZN12FrontendHeapC1Ev>
 8012c60:	4806      	ldr	r0, [pc, #24]	@ (8012c7c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8012c62:	f018 fec7 	bl	802b9f4 <atexit>
 8012c66:	4803      	ldr	r0, [pc, #12]	@ (8012c74 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012c68:	f017 ffbf 	bl	802abea <__cxa_guard_release>
        return instance;
 8012c6c:	4b02      	ldr	r3, [pc, #8]	@ (8012c78 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8012c6e:	4618      	mov	r0, r3
 8012c70:	bd80      	pop	{r7, pc}
 8012c72:	bf00      	nop
 8012c74:	2005a984 	.word	0x2005a984
 8012c78:	2005a718 	.word	0x2005a718
 8012c7c:	08012c19 	.word	0x08012c19

08012c80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b082      	sub	sp, #8
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f000 ffe2 	bl	8013c54 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012c90:	4a03      	ldr	r2, [pc, #12]	@ (8012ca0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	601a      	str	r2, [r3, #0]
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	4618      	mov	r0, r3
 8012c9a:	3708      	adds	r7, #8
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}
 8012ca0:	0802df4c 	.word	0x0802df4c

08012ca4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f000 ffd0 	bl	8013c54 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012cb4:	4a03      	ldr	r2, [pc, #12]	@ (8012cc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	601a      	str	r2, [r3, #0]
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	3708      	adds	r7, #8
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	bd80      	pop	{r7, pc}
 8012cc4:	0802df18 	.word	0x0802df18

08012cc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b082      	sub	sp, #8
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f000 ffbe 	bl	8013c54 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012cd8:	4a03      	ldr	r2, [pc, #12]	@ (8012ce8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	601a      	str	r2, [r3, #0]
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3708      	adds	r7, #8
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}
 8012ce8:	0802dee4 	.word	0x0802dee4

08012cec <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012cec:	b590      	push	{r4, r7, lr}
 8012cee:	b085      	sub	sp, #20
 8012cf0:	af02      	add	r7, sp, #8
 8012cf2:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8012cf4:	6878      	ldr	r0, [r7, #4]
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	f103 0114 	add.w	r1, r3, #20
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	f103 04f8 	add.w	r4, r3, #248	@ 0xf8
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
                     app(model, *this)
 8012d0e:	9300      	str	r3, [sp, #0]
 8012d10:	4623      	mov	r3, r4
 8012d12:	f7ff fea5 	bl	8012a60 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8012d16:	4a17      	ldr	r2, [pc, #92]	@ (8012d74 <_ZN12FrontendHeapC1Ev+0x88>)
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	601a      	str	r2, [r3, #0]
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	3314      	adds	r3, #20
 8012d20:	4618      	mov	r0, r3
 8012d22:	f7ff ffad 	bl	8012c80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	332c      	adds	r3, #44	@ 0x2c
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f7ff ffba 	bl	8012ca4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	33f8      	adds	r3, #248	@ 0xf8
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7ff ffc7 	bl	8012cc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8012d40:	4618      	mov	r0, r3
 8012d42:	f7fe f979 	bl	8011038 <_ZN5ModelC1Ev>
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8012d52:	687a      	ldr	r2, [r7, #4]
 8012d54:	4619      	mov	r1, r3
 8012d56:	f7fe f959 	bl	801100c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8012d5a:	687a      	ldr	r2, [r7, #4]
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8012d62:	4619      	mov	r1, r3
 8012d64:	4610      	mov	r0, r2
 8012d66:	f7ff fe6d 	bl	8012a44 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	370c      	adds	r7, #12
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd90      	pop	{r4, r7, pc}
 8012d74:	0802ded0 	.word	0x0802ded0

08012d78 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b086      	sub	sp, #24
 8012d7c:	af02      	add	r7, sp, #8
 8012d7e:	60f8      	str	r0, [r7, #12]
 8012d80:	60b9      	str	r1, [r7, #8]
 8012d82:	607a      	str	r2, [r7, #4]
 8012d84:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8012d86:	68f8      	ldr	r0, [r7, #12]
 8012d88:	8bbb      	ldrh	r3, [r7, #28]
 8012d8a:	9301      	str	r3, [sp, #4]
 8012d8c:	8b3b      	ldrh	r3, [r7, #24]
 8012d8e:	9300      	str	r3, [sp, #0]
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	687a      	ldr	r2, [r7, #4]
 8012d94:	68b9      	ldr	r1, [r7, #8]
 8012d96:	f7ff fd73 	bl	8012880 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8012d9a:	4a04      	ldr	r2, [pc, #16]	@ (8012dac <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	601a      	str	r2, [r3, #0]
    }
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	4618      	mov	r0, r3
 8012da4:	3710      	adds	r7, #16
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}
 8012daa:	bf00      	nop
 8012dac:	0802e0f0 	.word	0x0802e0f0

08012db0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b086      	sub	sp, #24
 8012db4:	af02      	add	r7, sp, #8
 8012db6:	60f8      	str	r0, [r7, #12]
 8012db8:	60b9      	str	r1, [r7, #8]
 8012dba:	607a      	str	r2, [r7, #4]
 8012dbc:	603b      	str	r3, [r7, #0]
 8012dbe:	68f8      	ldr	r0, [r7, #12]
 8012dc0:	8bbb      	ldrh	r3, [r7, #28]
 8012dc2:	9301      	str	r3, [sp, #4]
 8012dc4:	8b3b      	ldrh	r3, [r7, #24]
 8012dc6:	9300      	str	r3, [sp, #0]
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	687a      	ldr	r2, [r7, #4]
 8012dcc:	68b9      	ldr	r1, [r7, #8]
 8012dce:	f7ff ffd3 	bl	8012d78 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8012dd2:	4a04      	ldr	r2, [pc, #16]	@ (8012de4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	601a      	str	r2, [r3, #0]
    }
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	4618      	mov	r0, r3
 8012ddc:	3710      	adds	r7, #16
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bd80      	pop	{r7, pc}
 8012de2:	bf00      	nop
 8012de4:	0802dd70 	.word	0x0802dd70

08012de8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8012de8:	b480      	push	{r7}
 8012dea:	b083      	sub	sp, #12
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
 8012df0:	4a04      	ldr	r2, [pc, #16]	@ (8012e04 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	601a      	str	r2, [r3, #0]
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	4618      	mov	r0, r3
 8012dfa:	370c      	adds	r7, #12
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e02:	4770      	bx	lr
 8012e04:	0802dd58 	.word	0x0802dd58

08012e08 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b082      	sub	sp, #8
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7ff ffe8 	bl	8012de8 <_ZN8touchgfx15TouchControllerC1Ev>
 8012e18:	4a03      	ldr	r2, [pc, #12]	@ (8012e28 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	601a      	str	r2, [r3, #0]
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	4618      	mov	r0, r3
 8012e22:	3708      	adds	r7, #8
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}
 8012e28:	0802dd40 	.word	0x0802dd40

08012e2c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 296);

void touchgfx_init()
{
 8012e2c:	b590      	push	{r4, r7, lr}
 8012e2e:	b085      	sub	sp, #20
 8012e30:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8012e32:	f7fd fefb 	bl	8010c2c <_ZN14BitmapDatabase11getInstanceEv>
 8012e36:	4604      	mov	r4, r0
 8012e38:	f7fd ff02 	bl	8010c40 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	4619      	mov	r1, r3
 8012e40:	2300      	movs	r3, #0
 8012e42:	9300      	str	r3, [sp, #0]
 8012e44:	2300      	movs	r3, #0
 8012e46:	2200      	movs	r2, #0
 8012e48:	4620      	mov	r0, r4
 8012e4a:	f008 fe5b 	bl	801bb04 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8012e4e:	480b      	ldr	r0, [pc, #44]	@ (8012e7c <touchgfx_init+0x50>)
 8012e50:	f7ff fc42 	bl	80126d8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8012e54:	2000      	movs	r0, #0
 8012e56:	f7fe f81f 	bl	8010e98 <_ZN8touchgfx5Texts11setLanguageEt>

    display.setVectorFontRenderer(&vectorFontRenderer);
 8012e5a:	4909      	ldr	r1, [pc, #36]	@ (8012e80 <touchgfx_init+0x54>)
 8012e5c:	4809      	ldr	r0, [pc, #36]	@ (8012e84 <touchgfx_init+0x58>)
 8012e5e:	f7ff fccb 	bl	80127f8 <_ZN8touchgfx3LCD21setVectorFontRendererEPNS_18VectorFontRendererE>

    FontManager::setFontProvider(&fontProvider);
 8012e62:	4809      	ldr	r0, [pc, #36]	@ (8012e88 <touchgfx_init+0x5c>)
 8012e64:	f008 fdb6 	bl	801b9d4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8012e68:	f7ff fede 	bl	8012c28 <_ZN12FrontendHeap11getInstanceEv>
 8012e6c:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8012e6e:	4807      	ldr	r0, [pc, #28]	@ (8012e8c <touchgfx_init+0x60>)
 8012e70:	f7fe fd5e 	bl	8011930 <_ZN11TouchGFXHAL10initializeEv>
}
 8012e74:	bf00      	nop
 8012e76:	370c      	adds	r7, #12
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd90      	pop	{r4, r7, pc}
 8012e7c:	2005b7d4 	.word	0x2005b7d4
 8012e80:	2005b7b8 	.word	0x2005b7b8
 8012e84:	2005b72c 	.word	0x2005b72c
 8012e88:	20000018 	.word	0x20000018
 8012e8c:	2005b7d8 	.word	0x2005b7d8

08012e90 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8012e90:	b480      	push	{r7}
 8012e92:	af00      	add	r7, sp, #0
}
 8012e94:	bf00      	nop
 8012e96:	46bd      	mov	sp, r7
 8012e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9c:	4770      	bx	lr
	...

08012ea0 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8012ea4:	4802      	ldr	r0, [pc, #8]	@ (8012eb0 <touchgfx_taskEntry+0x10>)
 8012ea6:	f001 f9dc 	bl	8014262 <_ZN8touchgfx3HAL9taskEntryEv>
}
 8012eaa:	bf00      	nop
 8012eac:	bd80      	pop	{r7, pc}
 8012eae:	bf00      	nop
 8012eb0:	2005b7d8 	.word	0x2005b7d8

08012eb4 <_Z41__static_initialization_and_destruction_0v>:
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b082      	sub	sp, #8
 8012eb8:	af02      	add	r7, sp, #8
static STM32TouchController tc;
 8012eba:	480d      	ldr	r0, [pc, #52]	@ (8012ef0 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8012ebc:	f7ff ffa4 	bl	8012e08 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8012ec0:	480c      	ldr	r0, [pc, #48]	@ (8012ef4 <_Z41__static_initialization_and_destruction_0v+0x40>)
 8012ec2:	f7ff f80b 	bl	8011edc <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8012ec6:	480c      	ldr	r0, [pc, #48]	@ (8012ef8 <_Z41__static_initialization_and_destruction_0v+0x44>)
 8012ec8:	f00d ff1c 	bl	8020d04 <_ZN8touchgfx8LCD16bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8012ecc:	480b      	ldr	r0, [pc, #44]	@ (8012efc <_Z41__static_initialization_and_destruction_0v+0x48>)
 8012ece:	f006 ff11 	bl	8019cf4 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 296);
 8012ed2:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8012ed6:	9301      	str	r3, [sp, #4]
 8012ed8:	23f0      	movs	r3, #240	@ 0xf0
 8012eda:	9300      	str	r3, [sp, #0]
 8012edc:	4b04      	ldr	r3, [pc, #16]	@ (8012ef0 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8012ede:	4a06      	ldr	r2, [pc, #24]	@ (8012ef8 <_Z41__static_initialization_and_destruction_0v+0x44>)
 8012ee0:	4904      	ldr	r1, [pc, #16]	@ (8012ef4 <_Z41__static_initialization_and_destruction_0v+0x40>)
 8012ee2:	4807      	ldr	r0, [pc, #28]	@ (8012f00 <_Z41__static_initialization_and_destruction_0v+0x4c>)
 8012ee4:	f7ff ff64 	bl	8012db0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 8012ee8:	bf00      	nop
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}
 8012eee:	bf00      	nop
 8012ef0:	2005a988 	.word	0x2005a988
 8012ef4:	2005a98c 	.word	0x2005a98c
 8012ef8:	2005b72c 	.word	0x2005b72c
 8012efc:	2005b7b8 	.word	0x2005b7b8
 8012f00:	2005b7d8 	.word	0x2005b7d8

08012f04 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
namespace touchgfx
{
/**
 * Implementation of the VectorFontRenderer interface
 */
class VectorFontRendererImpl : public VectorFontRenderer
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b082      	sub	sp, #8
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
 8012f0c:	4a05      	ldr	r2, [pc, #20]	@ (8012f24 <_ZN8touchgfx22VectorFontRendererImplD1Ev+0x20>)
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	601a      	str	r2, [r3, #0]
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	4618      	mov	r0, r3
 8012f16:	f7ff fc2f 	bl	8012778 <_ZN8touchgfx18VectorFontRendererD1Ev>
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	3708      	adds	r7, #8
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bd80      	pop	{r7, pc}
 8012f24:	0802e774 	.word	0x0802e774

08012f28 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b082      	sub	sp, #8
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	6078      	str	r0, [r7, #4]
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	f7ff ffe7 	bl	8012f04 <_ZN8touchgfx22VectorFontRendererImplD1Ev>
 8012f36:	211c      	movs	r1, #28
 8012f38:	6878      	ldr	r0, [r7, #4]
 8012f3a:	f017 fe48 	bl	802abce <_ZdlPvj>
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	4618      	mov	r0, r3
 8012f42:	3708      	adds	r7, #8
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}

08012f48 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
 8012f50:	4a05      	ldr	r2, [pc, #20]	@ (8012f68 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	601a      	str	r2, [r3, #0]
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	4618      	mov	r0, r3
 8012f5a:	f7ff fc2d 	bl	80127b8 <_ZN8touchgfx3LCDD1Ev>
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	4618      	mov	r0, r3
 8012f62:	3708      	adds	r7, #8
 8012f64:	46bd      	mov	sp, r7
 8012f66:	bd80      	pop	{r7, pc}
 8012f68:	0802eafc 	.word	0x0802eafc

08012f6c <_ZN8touchgfx8LCD16bppD0Ev>:
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b082      	sub	sp, #8
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f7ff ffe7 	bl	8012f48 <_ZN8touchgfx8LCD16bppD1Ev>
 8012f7a:	218c      	movs	r1, #140	@ 0x8c
 8012f7c:	6878      	ldr	r0, [r7, #4]
 8012f7e:	f017 fe26 	bl	802abce <_ZdlPvj>
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	4618      	mov	r0, r3
 8012f86:	3708      	adds	r7, #8
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}

08012f8c <_Z41__static_initialization_and_destruction_1v>:
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	af00      	add	r7, sp, #0
static TouchGFXHAL hal(dma, display, tc, 240, 296);
 8012f90:	4809      	ldr	r0, [pc, #36]	@ (8012fb8 <_Z41__static_initialization_and_destruction_1v+0x2c>)
 8012f92:	f7fe fdbf 	bl	8011b14 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8012f96:	4809      	ldr	r0, [pc, #36]	@ (8012fbc <_Z41__static_initialization_and_destruction_1v+0x30>)
 8012f98:	f7fc f98e 	bl	800f2b8 <_ZN23ApplicationFontProviderD1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8012f9c:	4808      	ldr	r0, [pc, #32]	@ (8012fc0 <_Z41__static_initialization_and_destruction_1v+0x34>)
 8012f9e:	f7ff ffb1 	bl	8012f04 <_ZN8touchgfx22VectorFontRendererImplD1Ev>
static LCD16bpp display;
 8012fa2:	4808      	ldr	r0, [pc, #32]	@ (8012fc4 <_Z41__static_initialization_and_destruction_1v+0x38>)
 8012fa4:	f7ff ffd0 	bl	8012f48 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8012fa8:	4807      	ldr	r0, [pc, #28]	@ (8012fc8 <_Z41__static_initialization_and_destruction_1v+0x3c>)
 8012faa:	f7fe ffc1 	bl	8011f30 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8012fae:	4807      	ldr	r0, [pc, #28]	@ (8012fcc <_Z41__static_initialization_and_destruction_1v+0x40>)
 8012fb0:	f7fe fa48 	bl	8011444 <_ZN20STM32TouchControllerD1Ev>
}
 8012fb4:	bf00      	nop
 8012fb6:	bd80      	pop	{r7, pc}
 8012fb8:	2005b7d8 	.word	0x2005b7d8
 8012fbc:	20000018 	.word	0x20000018
 8012fc0:	2005b7b8 	.word	0x2005b7b8
 8012fc4:	2005b72c 	.word	0x2005b72c
 8012fc8:	2005a98c 	.word	0x2005a98c
 8012fcc:	2005a988 	.word	0x2005a988

08012fd0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8012fd0:	b480      	push	{r7}
 8012fd2:	b083      	sub	sp, #12
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8012fd8:	2301      	movs	r3, #1
    }
 8012fda:	4618      	mov	r0, r3
 8012fdc:	370c      	adds	r7, #12
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe4:	4770      	bx	lr

08012fe6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8012fe6:	b480      	push	{r7}
 8012fe8:	b083      	sub	sp, #12
 8012fea:	af00      	add	r7, sp, #0
 8012fec:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8012fee:	230c      	movs	r3, #12
    }
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	370c      	adds	r7, #12
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffa:	4770      	bx	lr

08012ffc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8012ffc:	b480      	push	{r7}
 8012ffe:	b083      	sub	sp, #12
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
 8013004:	460b      	mov	r3, r1
 8013006:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8013008:	887a      	ldrh	r2, [r7, #2]
 801300a:	4613      	mov	r3, r2
 801300c:	005b      	lsls	r3, r3, #1
 801300e:	4413      	add	r3, r2
 8013010:	009b      	lsls	r3, r3, #2
 8013012:	3308      	adds	r3, #8
 8013014:	687a      	ldr	r2, [r7, #4]
 8013016:	4413      	add	r3, r2
    }
 8013018:	4618      	mov	r0, r3
 801301a:	370c      	adds	r7, #12
 801301c:	46bd      	mov	sp, r7
 801301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013022:	4770      	bx	lr

08013024 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8013024:	b480      	push	{r7}
 8013026:	b083      	sub	sp, #12
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
 801302c:	460b      	mov	r3, r1
 801302e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8013030:	887a      	ldrh	r2, [r7, #2]
 8013032:	4613      	mov	r3, r2
 8013034:	005b      	lsls	r3, r3, #1
 8013036:	4413      	add	r3, r2
 8013038:	009b      	lsls	r3, r3, #2
 801303a:	3308      	adds	r3, #8
 801303c:	687a      	ldr	r2, [r7, #4]
 801303e:	4413      	add	r3, r2
    }
 8013040:	4618      	mov	r0, r3
 8013042:	370c      	adds	r7, #12
 8013044:	46bd      	mov	sp, r7
 8013046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304a:	4770      	bx	lr

0801304c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801304c:	b480      	push	{r7}
 801304e:	b083      	sub	sp, #12
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013054:	2301      	movs	r3, #1
    }
 8013056:	4618      	mov	r0, r3
 8013058:	370c      	adds	r7, #12
 801305a:	46bd      	mov	sp, r7
 801305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013060:	4770      	bx	lr

08013062 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013062:	b480      	push	{r7}
 8013064:	b083      	sub	sp, #12
 8013066:	af00      	add	r7, sp, #0
 8013068:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801306a:	23c4      	movs	r3, #196	@ 0xc4
    }
 801306c:	4618      	mov	r0, r3
 801306e:	370c      	adds	r7, #12
 8013070:	46bd      	mov	sp, r7
 8013072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013076:	4770      	bx	lr

08013078 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013078:	b480      	push	{r7}
 801307a:	b083      	sub	sp, #12
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
 8013080:	460b      	mov	r3, r1
 8013082:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013084:	887b      	ldrh	r3, [r7, #2]
 8013086:	22c4      	movs	r2, #196	@ 0xc4
 8013088:	fb02 f303 	mul.w	r3, r2, r3
 801308c:	3308      	adds	r3, #8
 801308e:	687a      	ldr	r2, [r7, #4]
 8013090:	4413      	add	r3, r2
    }
 8013092:	4618      	mov	r0, r3
 8013094:	370c      	adds	r7, #12
 8013096:	46bd      	mov	sp, r7
 8013098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309c:	4770      	bx	lr

0801309e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801309e:	b480      	push	{r7}
 80130a0:	b083      	sub	sp, #12
 80130a2:	af00      	add	r7, sp, #0
 80130a4:	6078      	str	r0, [r7, #4]
 80130a6:	460b      	mov	r3, r1
 80130a8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80130aa:	887b      	ldrh	r3, [r7, #2]
 80130ac:	22c4      	movs	r2, #196	@ 0xc4
 80130ae:	fb02 f303 	mul.w	r3, r2, r3
 80130b2:	3308      	adds	r3, #8
 80130b4:	687a      	ldr	r2, [r7, #4]
 80130b6:	4413      	add	r3, r2
    }
 80130b8:	4618      	mov	r0, r3
 80130ba:	370c      	adds	r7, #12
 80130bc:	46bd      	mov	sp, r7
 80130be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c2:	4770      	bx	lr

080130c4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80130c4:	b480      	push	{r7}
 80130c6:	b083      	sub	sp, #12
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80130cc:	2301      	movs	r3, #1
    }
 80130ce:	4618      	mov	r0, r3
 80130d0:	370c      	adds	r7, #12
 80130d2:	46bd      	mov	sp, r7
 80130d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d8:	4770      	bx	lr

080130da <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80130da:	b480      	push	{r7}
 80130dc:	b083      	sub	sp, #12
 80130de:	af00      	add	r7, sp, #0
 80130e0:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80130e2:	2310      	movs	r3, #16
    }
 80130e4:	4618      	mov	r0, r3
 80130e6:	370c      	adds	r7, #12
 80130e8:	46bd      	mov	sp, r7
 80130ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ee:	4770      	bx	lr

080130f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80130f0:	b480      	push	{r7}
 80130f2:	b083      	sub	sp, #12
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
 80130f8:	460b      	mov	r3, r1
 80130fa:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80130fc:	887b      	ldrh	r3, [r7, #2]
 80130fe:	011b      	lsls	r3, r3, #4
 8013100:	3308      	adds	r3, #8
 8013102:	687a      	ldr	r2, [r7, #4]
 8013104:	4413      	add	r3, r2
    }
 8013106:	4618      	mov	r0, r3
 8013108:	370c      	adds	r7, #12
 801310a:	46bd      	mov	sp, r7
 801310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013110:	4770      	bx	lr

08013112 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013112:	b480      	push	{r7}
 8013114:	b083      	sub	sp, #12
 8013116:	af00      	add	r7, sp, #0
 8013118:	6078      	str	r0, [r7, #4]
 801311a:	460b      	mov	r3, r1
 801311c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801311e:	887b      	ldrh	r3, [r7, #2]
 8013120:	011b      	lsls	r3, r3, #4
 8013122:	3308      	adds	r3, #8
 8013124:	687a      	ldr	r2, [r7, #4]
 8013126:	4413      	add	r3, r2
    }
 8013128:	4618      	mov	r0, r3
 801312a:	370c      	adds	r7, #12
 801312c:	46bd      	mov	sp, r7
 801312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013132:	4770      	bx	lr

08013134 <_GLOBAL__sub_I_touchgfx_init>:
 8013134:	b580      	push	{r7, lr}
 8013136:	af00      	add	r7, sp, #0
 8013138:	f7ff febc 	bl	8012eb4 <_Z41__static_initialization_and_destruction_0v>
 801313c:	bd80      	pop	{r7, pc}

0801313e <_GLOBAL__sub_D_touchgfx_init>:
 801313e:	b580      	push	{r7, lr}
 8013140:	af00      	add	r7, sp, #0
 8013142:	f7ff ff23 	bl	8012f8c <_Z41__static_initialization_and_destruction_1v>
 8013146:	bd80      	pop	{r7, pc}

08013148 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 8013148:	b480      	push	{r7}
 801314a:	b085      	sub	sp, #20
 801314c:	af00      	add	r7, sp, #0
 801314e:	60f8      	str	r0, [r7, #12]
 8013150:	4608      	mov	r0, r1
 8013152:	4611      	mov	r1, r2
 8013154:	461a      	mov	r2, r3
 8013156:	4603      	mov	r3, r0
 8013158:	817b      	strh	r3, [r7, #10]
 801315a:	460b      	mov	r3, r1
 801315c:	813b      	strh	r3, [r7, #8]
 801315e:	4613      	mov	r3, r2
 8013160:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	897a      	ldrh	r2, [r7, #10]
 8013166:	801a      	strh	r2, [r3, #0]
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	893a      	ldrh	r2, [r7, #8]
 801316c:	805a      	strh	r2, [r3, #2]
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	88fa      	ldrh	r2, [r7, #6]
 8013172:	809a      	strh	r2, [r3, #4]
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	8b3a      	ldrh	r2, [r7, #24]
 8013178:	80da      	strh	r2, [r3, #6]
    {
    }
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	4618      	mov	r0, r3
 801317e:	3714      	adds	r7, #20
 8013180:	46bd      	mov	sp, r7
 8013182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013186:	4770      	bx	lr

08013188 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8013188:	b480      	push	{r7}
 801318a:	b083      	sub	sp, #12
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
        return rect.width;
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8013196:	4618      	mov	r0, r3
 8013198:	370c      	adds	r7, #12
 801319a:	46bd      	mov	sp, r7
 801319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a0:	4770      	bx	lr

080131a2 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 80131a2:	b480      	push	{r7}
 80131a4:	b083      	sub	sp, #12
 80131a6:	af00      	add	r7, sp, #0
 80131a8:	6078      	str	r0, [r7, #4]
        return rect.height;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 80131b0:	4618      	mov	r0, r3
 80131b2:	370c      	adds	r7, #12
 80131b4:	46bd      	mov	sp, r7
 80131b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ba:	4770      	bx	lr

080131bc <_ZN8touchgfx14VectorRendererD1Ev>:
 */
class VectorRenderer
{
public:
    /** Virtual destructor. */
    virtual ~VectorRenderer()
 80131bc:	b480      	push	{r7}
 80131be:	b083      	sub	sp, #12
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
    {
 80131c4:	4a04      	ldr	r2, [pc, #16]	@ (80131d8 <_ZN8touchgfx14VectorRendererD1Ev+0x1c>)
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	601a      	str	r2, [r3, #0]
    }
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	4618      	mov	r0, r3
 80131ce:	370c      	adds	r7, #12
 80131d0:	46bd      	mov	sp, r7
 80131d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d6:	4770      	bx	lr
 80131d8:	0802e1dc 	.word	0x0802e1dc

080131dc <_ZN8touchgfx14VectorRendererD0Ev>:
    virtual ~VectorRenderer()
 80131dc:	b580      	push	{r7, lr}
 80131de:	b082      	sub	sp, #8
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
    }
 80131e4:	6878      	ldr	r0, [r7, #4]
 80131e6:	f7ff ffe9 	bl	80131bc <_ZN8touchgfx14VectorRendererD1Ev>
 80131ea:	2104      	movs	r1, #4
 80131ec:	6878      	ldr	r0, [r7, #4]
 80131ee:	f017 fcee 	bl	802abce <_ZdlPvj>
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	4618      	mov	r0, r3
 80131f6:	3708      	adds	r7, #8
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bd80      	pop	{r7, pc}

080131fc <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    LCD* getAuxiliaryLCD()
 80131fc:	b480      	push	{r7}
 80131fe:	b083      	sub	sp, #12
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
        return auxiliaryLCD;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    }
 8013208:	4618      	mov	r0, r3
 801320a:	370c      	adds	r7, #12
 801320c:	46bd      	mov	sp, r7
 801320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013212:	4770      	bx	lr

08013214 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 8013214:	b580      	push	{r7, lr}
 8013216:	b082      	sub	sp, #8
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
 801321c:	6039      	str	r1, [r7, #0]
    {
 801321e:	4a08      	ldr	r2, [pc, #32]	@ (8013240 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	601a      	str	r2, [r3, #0]
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	3304      	adds	r3, #4
 8013228:	4618      	mov	r0, r3
 801322a:	f7fe fd65 	bl	8011cf8 <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 801322e:	6839      	ldr	r1, [r7, #0]
 8013230:	6878      	ldr	r0, [r7, #4]
 8013232:	f000 f827 	bl	8013284 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	4618      	mov	r0, r3
 801323a:	3708      	adds	r7, #8
 801323c:	46bd      	mov	sp, r7
 801323e:	bd80      	pop	{r7, pc}
 8013240:	0802e0dc 	.word	0x0802e0dc

08013244 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 8013244:	b480      	push	{r7}
 8013246:	b083      	sub	sp, #12
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
    {
 801324c:	4a04      	ldr	r2, [pc, #16]	@ (8013260 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	601a      	str	r2, [r3, #0]
    }
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	4618      	mov	r0, r3
 8013256:	370c      	adds	r7, #12
 8013258:	46bd      	mov	sp, r7
 801325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325e:	4770      	bx	lr
 8013260:	0802e0dc 	.word	0x0802e0dc

08013264 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 8013264:	b580      	push	{r7, lr}
 8013266:	b082      	sub	sp, #8
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
    }
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f7ff ffe9 	bl	8013244 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8013272:	2108      	movs	r1, #8
 8013274:	6878      	ldr	r0, [r7, #4]
 8013276:	f017 fcaa 	bl	802abce <_ZdlPvj>
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	4618      	mov	r0, r3
 801327e:	3708      	adds	r7, #8
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}

08013284 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 8013284:	b480      	push	{r7}
 8013286:	b083      	sub	sp, #12
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
 801328c:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	683a      	ldr	r2, [r7, #0]
 8013292:	605a      	str	r2, [r3, #4]
    }
 8013294:	bf00      	nop
 8013296:	370c      	adds	r7, #12
 8013298:	46bd      	mov	sp, r7
 801329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801329e:	4770      	bx	lr

080132a0 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 80132a0:	b480      	push	{r7}
 80132a2:	b083      	sub	sp, #12
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 80132a8:	4a06      	ldr	r2, [pc, #24]	@ (80132c4 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	601a      	str	r2, [r3, #0]
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	2200      	movs	r2, #0
 80132b2:	809a      	strh	r2, [r3, #4]
    {
    }
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	4618      	mov	r0, r3
 80132b8:	370c      	adds	r7, #12
 80132ba:	46bd      	mov	sp, r7
 80132bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c0:	4770      	bx	lr
 80132c2:	bf00      	nop
 80132c4:	0802e0bc 	.word	0x0802e0bc

080132c8 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 80132c8:	b480      	push	{r7}
 80132ca:	b083      	sub	sp, #12
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
    {
 80132d0:	4a04      	ldr	r2, [pc, #16]	@ (80132e4 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	601a      	str	r2, [r3, #0]
    }
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	4618      	mov	r0, r3
 80132da:	370c      	adds	r7, #12
 80132dc:	46bd      	mov	sp, r7
 80132de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e2:	4770      	bx	lr
 80132e4:	0802e0bc 	.word	0x0802e0bc

080132e8 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b082      	sub	sp, #8
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
    }
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f7ff ffe9 	bl	80132c8 <_ZN8touchgfx15AbstractPainterD1Ev>
 80132f6:	2108      	movs	r1, #8
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	f017 fc68 	bl	802abce <_ZdlPvj>
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	4618      	mov	r0, r3
 8013302:	3708      	adds	r7, #8
 8013304:	46bd      	mov	sp, r7
 8013306:	bd80      	pop	{r7, pc}

08013308 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 8013308:	b480      	push	{r7}
 801330a:	b083      	sub	sp, #12
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 8013310:	2300      	movs	r3, #0
    }
 8013312:	4618      	mov	r0, r3
 8013314:	370c      	adds	r7, #12
 8013316:	46bd      	mov	sp, r7
 8013318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331c:	4770      	bx	lr

0801331e <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 801331e:	b480      	push	{r7}
 8013320:	b083      	sub	sp, #12
 8013322:	af00      	add	r7, sp, #0
 8013324:	6078      	str	r0, [r7, #4]
 8013326:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 8013328:	683b      	ldr	r3, [r7, #0]
 801332a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	809a      	strh	r2, [r3, #4]
        return true;
 8013332:	2301      	movs	r3, #1
    }
 8013334:	4618      	mov	r0, r3
 8013336:	370c      	adds	r7, #12
 8013338:	46bd      	mov	sp, r7
 801333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333e:	4770      	bx	lr

08013340 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 8013340:	b480      	push	{r7}
 8013342:	b083      	sub	sp, #12
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
    {
        return;
 8013348:	bf00      	nop
    }
 801334a:	370c      	adds	r7, #12
 801334c:	46bd      	mov	sp, r7
 801334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013352:	4770      	bx	lr

08013354 <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev>:
 */
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
 8013354:	b580      	push	{r7, lr}
 8013356:	b082      	sub	sp, #8
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
        : AbstractPainter(),
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	4618      	mov	r0, r3
 8013360:	f7ff ff9e 	bl	80132a0 <_ZN8touchgfx15AbstractPainterC1Ev>
 8013364:	4a14      	ldr	r2, [pc, #80]	@ (80133b8 <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev+0x64>)
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	601a      	str	r2, [r3, #0]
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	2200      	movs	r2, #0
 801336e:	811a      	strh	r2, [r3, #8]
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	2264      	movs	r2, #100	@ 0x64
 8013374:	815a      	strh	r2, [r3, #10]
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	2200      	movs	r2, #0
 801337a:	60da      	str	r2, [r3, #12]
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	2200      	movs	r2, #0
 8013380:	741a      	strb	r2, [r3, #16]
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	2200      	movs	r2, #0
 8013386:	745a      	strb	r2, [r3, #17]
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	2200      	movs	r2, #0
 801338c:	749a      	strb	r2, [r3, #18]
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	f04f 0200 	mov.w	r2, #0
 8013394:	615a      	str	r2, [r3, #20]
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	f04f 0200 	mov.w	r2, #0
 801339c:	619a      	str	r2, [r3, #24]
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	f04f 0200 	mov.w	r2, #0
 80133a4:	61da      	str	r2, [r3, #28]
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	f04f 0200 	mov.w	r2, #0
 80133ac:	621a      	str	r2, [r3, #32]
    {
    }
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	4618      	mov	r0, r3
 80133b2:	3708      	adds	r7, #8
 80133b4:	46bd      	mov	sp, r7
 80133b6:	bd80      	pop	{r7, pc}
 80133b8:	0802e09c 	.word	0x0802e09c

080133bc <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterLinearGradient()
 80133bc:	b580      	push	{r7, lr}
 80133be:	b082      	sub	sp, #8
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
    {
 80133c4:	4a05      	ldr	r2, [pc, #20]	@ (80133dc <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev+0x20>)
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	601a      	str	r2, [r3, #0]
    }
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	4618      	mov	r0, r3
 80133ce:	f7ff ff7b 	bl	80132c8 <_ZN8touchgfx15AbstractPainterD1Ev>
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	4618      	mov	r0, r3
 80133d6:	3708      	adds	r7, #8
 80133d8:	46bd      	mov	sp, r7
 80133da:	bd80      	pop	{r7, pc}
 80133dc:	0802e09c 	.word	0x0802e09c

080133e0 <_ZN8touchgfx29AbstractPainterLinearGradientD0Ev>:
    virtual ~AbstractPainterLinearGradient()
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b082      	sub	sp, #8
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
    }
 80133e8:	6878      	ldr	r0, [r7, #4]
 80133ea:	f7ff ffe7 	bl	80133bc <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>
 80133ee:	2124      	movs	r1, #36	@ 0x24
 80133f0:	6878      	ldr	r0, [r7, #4]
 80133f2:	f017 fbec 	bl	802abce <_ZdlPvj>
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	4618      	mov	r0, r3
 80133fa:	3708      	adds	r7, #8
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bd80      	pop	{r7, pc}

08013400 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    {
        return canvasPainter;
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 8013400:	b480      	push	{r7}
 8013402:	b083      	sub	sp, #12
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
 8013408:	460b      	mov	r3, r1
 801340a:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	78fa      	ldrb	r2, [r7, #3]
 8013410:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    }
 8013414:	bf00      	nop
 8013416:	370c      	adds	r7, #12
 8013418:	46bd      	mov	sp, r7
 801341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801341e:	4770      	bx	lr

08013420 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 8013420:	b480      	push	{r7}
 8013422:	b083      	sub	sp, #12
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
    }
 801342e:	4618      	mov	r0, r3
 8013430:	370c      	adds	r7, #12
 8013432:	46bd      	mov	sp, r7
 8013434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013438:	4770      	bx	lr

0801343a <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 801343a:	b590      	push	{r4, r7, lr}
 801343c:	b085      	sub	sp, #20
 801343e:	af02      	add	r7, sp, #8
 8013440:	6078      	str	r0, [r7, #4]
 8013442:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	4618      	mov	r0, r3
 8013448:	f7ff fe9e 	bl	8013188 <_ZNK8touchgfx8Drawable8getWidthEv>
 801344c:	4603      	mov	r3, r0
 801344e:	461c      	mov	r4, r3
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	4618      	mov	r0, r3
 8013454:	f7ff fea5 	bl	80131a2 <_ZNK8touchgfx8Drawable9getHeightEv>
 8013458:	4603      	mov	r3, r0
 801345a:	9300      	str	r3, [sp, #0]
 801345c:	4623      	mov	r3, r4
 801345e:	2200      	movs	r2, #0
 8013460:	2100      	movs	r1, #0
 8013462:	6878      	ldr	r0, [r7, #4]
 8013464:	f7ff fe70 	bl	8013148 <_ZN8touchgfx4RectC1Essss>
    }
 8013468:	6878      	ldr	r0, [r7, #4]
 801346a:	370c      	adds	r7, #12
 801346c:	46bd      	mov	sp, r7
 801346e:	bd90      	pop	{r4, r7, pc}

08013470 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
     * @see draw
     *
     * @note Function draw() might fail for some horizontal lines due to memory constraints. These
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
 8013470:	b580      	push	{r7, lr}
 8013472:	b082      	sub	sp, #8
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
 8013478:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f7fc ff73 	bl	8010366 <_ZN8touchgfx4RectC1Ev>
    }
 8013480:	6878      	ldr	r0, [r7, #4]
 8013482:	3708      	adds	r7, #8
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}

08013488 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 8013488:	b580      	push	{r7, lr}
 801348a:	b084      	sub	sp, #16
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	4618      	mov	r0, r3
 8013494:	f7ff ff04 	bl	80132a0 <_ZN8touchgfx15AbstractPainterC1Ev>
 8013498:	4a26      	ldr	r2, [pc, #152]	@ (8013534 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xac>)
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	601a      	str	r2, [r3, #0]
 801349e:	2300      	movs	r3, #0
 80134a0:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 80134a2:	f7fc fad1 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 80134a6:	4603      	mov	r3, r0
 80134a8:	681a      	ldr	r2, [r3, #0]
 80134aa:	322c      	adds	r2, #44	@ 0x2c
 80134ac:	6812      	ldr	r2, [r2, #0]
 80134ae:	4618      	mov	r0, r3
 80134b0:	4790      	blx	r2
 80134b2:	4603      	mov	r3, r0
 80134b4:	461a      	mov	r2, r3
 80134b6:	7bfb      	ldrb	r3, [r7, #15]
 80134b8:	4293      	cmp	r3, r2
 80134ba:	bf0c      	ite	eq
 80134bc:	2301      	moveq	r3, #1
 80134be:	2300      	movne	r3, #0
 80134c0:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 80134c2:	f7fc f807 	bl	800f4d4 <_ZN8touchgfx3HAL11getInstanceEv>
 80134c6:	4603      	mov	r3, r0
 80134c8:	4618      	mov	r0, r3
 80134ca:	f7ff fe97 	bl	80131fc <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80134ce:	4603      	mov	r3, r0
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	bf14      	ite	ne
 80134d4:	2301      	movne	r3, #1
 80134d6:	2300      	moveq	r3, #0
 80134d8:	b2db      	uxtb	r3, r3
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d01b      	beq.n	8013516 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80134de:	f7fb fff9 	bl	800f4d4 <_ZN8touchgfx3HAL11getInstanceEv>
 80134e2:	4603      	mov	r3, r0
 80134e4:	4618      	mov	r0, r3
 80134e6:	f7ff fe89 	bl	80131fc <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80134ea:	4603      	mov	r3, r0
 80134ec:	681a      	ldr	r2, [r3, #0]
 80134ee:	322c      	adds	r2, #44	@ 0x2c
 80134f0:	6812      	ldr	r2, [r2, #0]
 80134f2:	4618      	mov	r0, r3
 80134f4:	4790      	blx	r2
 80134f6:	4603      	mov	r3, r0
 80134f8:	461a      	mov	r2, r3
 80134fa:	7bfb      	ldrb	r3, [r7, #15]
 80134fc:	4293      	cmp	r3, r2
 80134fe:	bf0c      	ite	eq
 8013500:	2301      	moveq	r3, #1
 8013502:	2300      	movne	r3, #0
 8013504:	b2da      	uxtb	r2, r3
 8013506:	7bbb      	ldrb	r3, [r7, #14]
 8013508:	4313      	orrs	r3, r2
 801350a:	b2db      	uxtb	r3, r3
 801350c:	2b00      	cmp	r3, #0
 801350e:	bf14      	ite	ne
 8013510:	2301      	movne	r3, #1
 8013512:	2300      	moveq	r3, #0
 8013514:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 8013516:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 8013518:	2b00      	cmp	r3, #0
 801351a:	d105      	bne.n	8013528 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xa0>
 801351c:	4b06      	ldr	r3, [pc, #24]	@ (8013538 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb0>)
 801351e:	4a07      	ldr	r2, [pc, #28]	@ (801353c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb4>)
 8013520:	212c      	movs	r1, #44	@ 0x2c
 8013522:	4807      	ldr	r0, [pc, #28]	@ (8013540 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb8>)
 8013524:	f018 fa48 	bl	802b9b8 <__assert_func>
    }
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	4618      	mov	r0, r3
 801352c:	3710      	adds	r7, #16
 801352e:	46bd      	mov	sp, r7
 8013530:	bd80      	pop	{r7, pc}
 8013532:	bf00      	nop
 8013534:	0802e07c 	.word	0x0802e07c
 8013538:	0802d6b8 	.word	0x0802d6b8
 801353c:	0802d718 	.word	0x0802d718
 8013540:	0802d754 	.word	0x0802d754

08013544 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
class AbstractPainterRGB565 : public AbstractPainter
 8013544:	b580      	push	{r7, lr}
 8013546:	b082      	sub	sp, #8
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
 801354c:	4a05      	ldr	r2, [pc, #20]	@ (8013564 <_ZN8touchgfx21AbstractPainterRGB565D1Ev+0x20>)
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	601a      	str	r2, [r3, #0]
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	4618      	mov	r0, r3
 8013556:	f7ff feb7 	bl	80132c8 <_ZN8touchgfx15AbstractPainterD1Ev>
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	4618      	mov	r0, r3
 801355e:	3708      	adds	r7, #8
 8013560:	46bd      	mov	sp, r7
 8013562:	bd80      	pop	{r7, pc}
 8013564:	0802e07c 	.word	0x0802e07c

08013568 <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 8013568:	b580      	push	{r7, lr}
 801356a:	b082      	sub	sp, #8
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f7ff ffe7 	bl	8013544 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 8013576:	2108      	movs	r1, #8
 8013578:	6878      	ldr	r0, [r7, #4]
 801357a:	f017 fb28 	bl	802abce <_ZdlPvj>
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	4618      	mov	r0, r3
 8013582:	3708      	adds	r7, #8
 8013584:	46bd      	mov	sp, r7
 8013586:	bd80      	pop	{r7, pc}

08013588 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
 8013588:	b580      	push	{r7, lr}
 801358a:	b082      	sub	sp, #8
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
 8013590:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	4618      	mov	r0, r3
 8013596:	f7ff ff77 	bl	8013488 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	3308      	adds	r3, #8
 801359e:	6839      	ldr	r1, [r7, #0]
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7ff fe37 	bl	8013214 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 80135a6:	4a05      	ldr	r2, [pc, #20]	@ (80135bc <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x34>)
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	601a      	str	r2, [r3, #0]
 80135ac:	4a04      	ldr	r2, [pc, #16]	@ (80135c0 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x38>)
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	609a      	str	r2, [r3, #8]
    {
    }
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	4618      	mov	r0, r3
 80135b6:	3708      	adds	r7, #8
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd80      	pop	{r7, pc}
 80135bc:	0802e46c 	.word	0x0802e46c
 80135c0:	0802e490 	.word	0x0802e490

080135c4 <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * The default mode is non-zero filling.
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
 80135c4:	b480      	push	{r7}
 80135c6:	b083      	sub	sp, #12
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
 80135cc:	460b      	mov	r3, r1
 80135ce:	70fb      	strb	r3, [r7, #3]
    {
        drawMode = mode;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	78fa      	ldrb	r2, [r7, #3]
 80135d4:	771a      	strb	r2, [r3, #28]
    }
 80135d6:	bf00      	nop
 80135d8:	370c      	adds	r7, #12
 80135da:	46bd      	mov	sp, r7
 80135dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e0:	4770      	bx	lr

080135e2 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
 80135e2:	b480      	push	{r7}
 80135e4:	b083      	sub	sp, #12
 80135e6:	af00      	add	r7, sp, #0
 80135e8:	6078      	str	r0, [r7, #4]
 80135ea:	ed87 0a00 	vstr	s0, [r7]
    {
        strokeMiterLimit = miterLimit;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	683a      	ldr	r2, [r7, #0]
 80135f2:	621a      	str	r2, [r3, #32]
    }
 80135f4:	bf00      	nop
 80135f6:	370c      	adds	r7, #12
 80135f8:	46bd      	mov	sp, r7
 80135fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fe:	4770      	bx	lr

08013600 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
 8013600:	b480      	push	{r7}
 8013602:	b083      	sub	sp, #12
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
 8013608:	460b      	mov	r3, r1
 801360a:	70fb      	strb	r3, [r7, #3]
    {
        strokeLineJoin = lineJoin;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	78fa      	ldrb	r2, [r7, #3]
 8013610:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 8013614:	bf00      	nop
 8013616:	370c      	adds	r7, #12
 8013618:	46bd      	mov	sp, r7
 801361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361e:	4770      	bx	lr

08013620 <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
 8013620:	b480      	push	{r7}
 8013622:	b083      	sub	sp, #12
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
 8013628:	460b      	mov	r3, r1
 801362a:	70fb      	strb	r3, [r7, #3]
    {
        strokeLineCap = lineCap;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	78fa      	ldrb	r2, [r7, #3]
 8013630:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
 8013634:	bf00      	nop
 8013636:	370c      	adds	r7, #12
 8013638:	46bd      	mov	sp, r7
 801363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801363e:	4770      	bx	lr

08013640 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    void drawStrokeBackwards(uint32_t cmdInxPathStart, uint32_t cmdInx, uint32_t pointInx, const uint8_t* cmds, const float* points, bool drawLineCaps, StrokeCanvas& canvas) const;
    void getPreviousDestination(float& positionX, float& positionY, uint32_t cmdInx, uint32_t pointInx, const uint8_t* cmds, const float* points) const;

    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
 8013640:	b480      	push	{r7}
 8013642:	b083      	sub	sp, #12
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
 8013648:	6039      	str	r1, [r7, #0]
        {
            return true;
 801364a:	2301      	movs	r3, #1
        }
 801364c:	4618      	mov	r0, r3
 801364e:	370c      	adds	r7, #12
 8013650:	46bd      	mov	sp, r7
 8013652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013656:	4770      	bx	lr

08013658 <_ZN8touchgfx23CWRVectorRendererRGB56516getLinearPainterEv>:
 * Implementation of the CWRVectorRendererInterface
 * for the RGB565 framebuffer format.
 */
class CWRVectorRendererRGB565 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
 8013658:	b480      	push	{r7}
 801365a:	b083      	sub	sp, #12
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
    {
        return linearPainter;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	3398      	adds	r3, #152	@ 0x98
    }
 8013664:	4618      	mov	r0, r3
 8013666:	370c      	adds	r7, #12
 8013668:	46bd      	mov	sp, r7
 801366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366e:	4770      	bx	lr

08013670 <_ZN8touchgfx23CWRVectorRendererRGB56520getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
 8013670:	b480      	push	{r7}
 8013672:	b083      	sub	sp, #12
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
    {
        return colorPainter;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	338c      	adds	r3, #140	@ 0x8c
    }
 801367c:	4618      	mov	r0, r3
 801367e:	370c      	adds	r7, #12
 8013680:	46bd      	mov	sp, r7
 8013682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013686:	4770      	bx	lr

08013688 <_ZN8touchgfx23CWRVectorRendererRGB56515getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
 8013688:	b480      	push	{r7}
 801368a:	b083      	sub	sp, #12
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
    {
        return colorPainter;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	3384      	adds	r3, #132	@ 0x84
    }
 8013694:	4618      	mov	r0, r3
 8013696:	370c      	adds	r7, #12
 8013698:	46bd      	mov	sp, r7
 801369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369e:	4770      	bx	lr

080136a0 <_ZN8touchgfx14VectorRendererC1Ev>:
class VectorRenderer
 80136a0:	b480      	push	{r7}
 80136a2:	b083      	sub	sp, #12
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
 80136a8:	4a04      	ldr	r2, [pc, #16]	@ (80136bc <_ZN8touchgfx14VectorRendererC1Ev+0x1c>)
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	601a      	str	r2, [r3, #0]
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	4618      	mov	r0, r3
 80136b2:	370c      	adds	r7, #12
 80136b4:	46bd      	mov	sp, r7
 80136b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ba:	4770      	bx	lr
 80136bc:	0802e1dc 	.word	0x0802e1dc

080136c0 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b082      	sub	sp, #8
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
 80136c8:	4a05      	ldr	r2, [pc, #20]	@ (80136e0 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	601a      	str	r2, [r3, #0]
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	4618      	mov	r0, r3
 80136d2:	f7fd f8d1 	bl	8010878 <_ZN8touchgfx6WidgetD1Ev>
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	4618      	mov	r0, r3
 80136da:	3708      	adds	r7, #8
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}
 80136e0:	0802e504 	.word	0x0802e504

080136e4 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b082      	sub	sp, #8
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f7ff ffe7 	bl	80136c0 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80136f2:	212c      	movs	r1, #44	@ 0x2c
 80136f4:	6878      	ldr	r0, [r7, #4]
 80136f6:	f017 fa6a 	bl	802abce <_ZdlPvj>
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	4618      	mov	r0, r3
 80136fe:	3708      	adds	r7, #8
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}

08013704 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8013704:	b580      	push	{r7, lr}
 8013706:	b082      	sub	sp, #8
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	4618      	mov	r0, r3
 8013710:	f003 f900 	bl	8016914 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8013714:	4a03      	ldr	r2, [pc, #12]	@ (8013724 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev+0x20>)
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	601a      	str	r2, [r3, #0]
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	4618      	mov	r0, r3
 801371e:	3708      	adds	r7, #8
 8013720:	46bd      	mov	sp, r7
 8013722:	bd80      	pop	{r7, pc}
 8013724:	0802e004 	.word	0x0802e004

08013728 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
 8013728:	b580      	push	{r7, lr}
 801372a:	b082      	sub	sp, #8
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
 8013730:	4a05      	ldr	r2, [pc, #20]	@ (8013748 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev+0x20>)
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	601a      	str	r2, [r3, #0]
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	4618      	mov	r0, r3
 801373a:	f7ff ffc1 	bl	80136c0 <_ZN8touchgfx12CanvasWidgetD1Ev>
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	4618      	mov	r0, r3
 8013742:	3708      	adds	r7, #8
 8013744:	46bd      	mov	sp, r7
 8013746:	bd80      	pop	{r7, pc}
 8013748:	0802e004 	.word	0x0802e004

0801374c <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 801374c:	b580      	push	{r7, lr}
 801374e:	b082      	sub	sp, #8
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	f7ff ffe7 	bl	8013728 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>
 801375a:	212c      	movs	r1, #44	@ 0x2c
 801375c:	6878      	ldr	r0, [r7, #4]
 801375e:	f017 fa36 	bl	802abce <_ZdlPvj>
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	4618      	mov	r0, r3
 8013766:	3708      	adds	r7, #8
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}

0801376c <_ZN8touchgfx17CWRVectorRendererC1Ev>:
class CWRVectorRenderer : public VectorRenderer
 801376c:	b580      	push	{r7, lr}
 801376e:	b082      	sub	sp, #8
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	4618      	mov	r0, r3
 8013778:	f7ff ff92 	bl	80136a0 <_ZN8touchgfx14VectorRendererC1Ev>
 801377c:	4a10      	ldr	r2, [pc, #64]	@ (80137c0 <_ZN8touchgfx17CWRVectorRendererC1Ev+0x54>)
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	601a      	str	r2, [r3, #0]
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	3304      	adds	r3, #4
 8013786:	4618      	mov	r0, r3
 8013788:	f7fc fded 	bl	8010366 <_ZN8touchgfx4RectC1Ev>
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	330c      	adds	r3, #12
 8013790:	4618      	mov	r0, r3
 8013792:	f7fc fde8 	bl	8010366 <_ZN8touchgfx4RectC1Ev>
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	3326      	adds	r3, #38	@ 0x26
 801379a:	4618      	mov	r0, r3
 801379c:	f7fc fde3 	bl	8010366 <_ZN8touchgfx4RectC1Ev>
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	3334      	adds	r3, #52	@ 0x34
 80137a4:	4618      	mov	r0, r3
 80137a6:	f006 fd8a 	bl	801a2be <_ZN8touchgfx9Matrix3x3C1Ev>
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	3358      	adds	r3, #88	@ 0x58
 80137ae:	4618      	mov	r0, r3
 80137b0:	f7ff ffa8 	bl	8013704 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev>
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	4618      	mov	r0, r3
 80137b8:	3708      	adds	r7, #8
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}
 80137be:	bf00      	nop
 80137c0:	0802e4b8 	.word	0x0802e4b8

080137c4 <_ZN8touchgfx17CWRVectorRendererD1Ev>:
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b082      	sub	sp, #8
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
 80137cc:	4a08      	ldr	r2, [pc, #32]	@ (80137f0 <_ZN8touchgfx17CWRVectorRendererD1Ev+0x2c>)
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	601a      	str	r2, [r3, #0]
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	3358      	adds	r3, #88	@ 0x58
 80137d6:	4618      	mov	r0, r3
 80137d8:	f7ff ffa6 	bl	8013728 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	4618      	mov	r0, r3
 80137e0:	f7ff fcec 	bl	80131bc <_ZN8touchgfx14VectorRendererD1Ev>
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	4618      	mov	r0, r3
 80137e8:	3708      	adds	r7, #8
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}
 80137ee:	bf00      	nop
 80137f0:	0802e4b8 	.word	0x0802e4b8

080137f4 <_ZN8touchgfx17CWRVectorRendererD0Ev>:
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b082      	sub	sp, #8
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
 80137fc:	6878      	ldr	r0, [r7, #4]
 80137fe:	f7ff ffe1 	bl	80137c4 <_ZN8touchgfx17CWRVectorRendererD1Ev>
 8013802:	2184      	movs	r1, #132	@ 0x84
 8013804:	6878      	ldr	r0, [r7, #4]
 8013806:	f017 f9e2 	bl	802abce <_ZdlPvj>
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	4618      	mov	r0, r3
 801380e:	3708      	adds	r7, #8
 8013810:	46bd      	mov	sp, r7
 8013812:	bd80      	pop	{r7, pc}

08013814 <_ZN8touchgfx13PainterRGB565D1Ev>:
class PainterRGB565 : public AbstractPainterRGB565, public AbstractPainterColor
 8013814:	b580      	push	{r7, lr}
 8013816:	b082      	sub	sp, #8
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
 801381c:	4a09      	ldr	r2, [pc, #36]	@ (8013844 <_ZN8touchgfx13PainterRGB565D1Ev+0x30>)
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	601a      	str	r2, [r3, #0]
 8013822:	4a09      	ldr	r2, [pc, #36]	@ (8013848 <_ZN8touchgfx13PainterRGB565D1Ev+0x34>)
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	609a      	str	r2, [r3, #8]
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	3308      	adds	r3, #8
 801382c:	4618      	mov	r0, r3
 801382e:	f7ff fd09 	bl	8013244 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	4618      	mov	r0, r3
 8013836:	f7ff fe85 	bl	8013544 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	4618      	mov	r0, r3
 801383e:	3708      	adds	r7, #8
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}
 8013844:	0802e46c 	.word	0x0802e46c
 8013848:	0802e490 	.word	0x0802e490

0801384c <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 801384c:	f1a0 0008 	sub.w	r0, r0, #8
 8013850:	e7e0      	b.n	8013814 <_ZN8touchgfx13PainterRGB565D1Ev>
 8013852:	bf00      	nop

08013854 <_ZN8touchgfx13PainterRGB565D0Ev>:
 8013854:	b580      	push	{r7, lr}
 8013856:	b082      	sub	sp, #8
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
 801385c:	6878      	ldr	r0, [r7, #4]
 801385e:	f7ff ffd9 	bl	8013814 <_ZN8touchgfx13PainterRGB565D1Ev>
 8013862:	2114      	movs	r1, #20
 8013864:	6878      	ldr	r0, [r7, #4]
 8013866:	f017 f9b2 	bl	802abce <_ZdlPvj>
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	4618      	mov	r0, r3
 801386e:	3708      	adds	r7, #8
 8013870:	46bd      	mov	sp, r7
 8013872:	bd80      	pop	{r7, pc}

08013874 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 8013874:	f1a0 0008 	sub.w	r0, r0, #8
 8013878:	e7ec      	b.n	8013854 <_ZN8touchgfx13PainterRGB565D0Ev>
	...

0801387c <_ZN8touchgfx27PainterRGB565LinearGradientC1Ev>:
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB565LinearGradient : public AbstractPainterLinearGradient
 801387c:	b580      	push	{r7, lr}
 801387e:	b082      	sub	sp, #8
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	4618      	mov	r0, r3
 8013888:	f7ff fd64 	bl	8013354 <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev>
 801388c:	4a03      	ldr	r2, [pc, #12]	@ (801389c <_ZN8touchgfx27PainterRGB565LinearGradientC1Ev+0x20>)
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	601a      	str	r2, [r3, #0]
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	4618      	mov	r0, r3
 8013896:	3708      	adds	r7, #8
 8013898:	46bd      	mov	sp, r7
 801389a:	bd80      	pop	{r7, pc}
 801389c:	0802e44c 	.word	0x0802e44c

080138a0 <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev>:
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b082      	sub	sp, #8
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
 80138a8:	4a05      	ldr	r2, [pc, #20]	@ (80138c0 <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev+0x20>)
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	601a      	str	r2, [r3, #0]
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	4618      	mov	r0, r3
 80138b2:	f7ff fd83 	bl	80133bc <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	4618      	mov	r0, r3
 80138ba:	3708      	adds	r7, #8
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}
 80138c0:	0802e44c 	.word	0x0802e44c

080138c4 <_ZN8touchgfx27PainterRGB565LinearGradientD0Ev>:
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b082      	sub	sp, #8
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
 80138cc:	6878      	ldr	r0, [r7, #4]
 80138ce:	f7ff ffe7 	bl	80138a0 <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev>
 80138d2:	2124      	movs	r1, #36	@ 0x24
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	f017 f97a 	bl	802abce <_ZdlPvj>
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	4618      	mov	r0, r3
 80138de:	3708      	adds	r7, #8
 80138e0:	46bd      	mov	sp, r7
 80138e2:	bd80      	pop	{r7, pc}

080138e4 <_ZN8touchgfx23CWRVectorRendererRGB565C1Ev>:
class CWRVectorRendererRGB565 : public CWRVectorRenderer
 80138e4:	b590      	push	{r4, r7, lr}
 80138e6:	b085      	sub	sp, #20
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	4618      	mov	r0, r3
 80138f0:	f7ff ff3c 	bl	801376c <_ZN8touchgfx17CWRVectorRendererC1Ev>
 80138f4:	4a0c      	ldr	r2, [pc, #48]	@ (8013928 <_ZN8touchgfx23CWRVectorRendererRGB565C1Ev+0x44>)
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	601a      	str	r2, [r3, #0]
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	f103 0484 	add.w	r4, r3, #132	@ 0x84
 8013900:	f107 030c 	add.w	r3, r7, #12
 8013904:	2100      	movs	r1, #0
 8013906:	4618      	mov	r0, r3
 8013908:	f7fc fd1e 	bl	8010348 <_ZN8touchgfx9colortypeC1Em>
 801390c:	68f9      	ldr	r1, [r7, #12]
 801390e:	4620      	mov	r0, r4
 8013910:	f7ff fe3a 	bl	8013588 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	3398      	adds	r3, #152	@ 0x98
 8013918:	4618      	mov	r0, r3
 801391a:	f7ff ffaf 	bl	801387c <_ZN8touchgfx27PainterRGB565LinearGradientC1Ev>
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	4618      	mov	r0, r3
 8013922:	3714      	adds	r7, #20
 8013924:	46bd      	mov	sp, r7
 8013926:	bd90      	pop	{r4, r7, pc}
 8013928:	0802dfb8 	.word	0x0802dfb8

0801392c <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev>:
 801392c:	b580      	push	{r7, lr}
 801392e:	b082      	sub	sp, #8
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
 8013934:	4a0a      	ldr	r2, [pc, #40]	@ (8013960 <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev+0x34>)
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	601a      	str	r2, [r3, #0]
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	3398      	adds	r3, #152	@ 0x98
 801393e:	4618      	mov	r0, r3
 8013940:	f7ff ffae 	bl	80138a0 <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev>
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	3384      	adds	r3, #132	@ 0x84
 8013948:	4618      	mov	r0, r3
 801394a:	f7ff ff63 	bl	8013814 <_ZN8touchgfx13PainterRGB565D1Ev>
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	4618      	mov	r0, r3
 8013952:	f7ff ff37 	bl	80137c4 <_ZN8touchgfx17CWRVectorRendererD1Ev>
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	4618      	mov	r0, r3
 801395a:	3708      	adds	r7, #8
 801395c:	46bd      	mov	sp, r7
 801395e:	bd80      	pop	{r7, pc}
 8013960:	0802dfb8 	.word	0x0802dfb8

08013964 <_ZN8touchgfx23CWRVectorRendererRGB565D0Ev>:
 8013964:	b580      	push	{r7, lr}
 8013966:	b082      	sub	sp, #8
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
 801396c:	6878      	ldr	r0, [r7, #4]
 801396e:	f7ff ffdd 	bl	801392c <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev>
 8013972:	21bc      	movs	r1, #188	@ 0xbc
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f017 f92a 	bl	802abce <_ZdlPvj>
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	4618      	mov	r0, r3
 801397e:	3708      	adds	r7, #8
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}

08013984 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB565 renderer;
 8013984:	b580      	push	{r7, lr}
 8013986:	af00      	add	r7, sp, #0
 8013988:	4801      	ldr	r0, [pc, #4]	@ (8013990 <__tcf_1+0xc>)
 801398a:	f7ff ffcf 	bl	801392c <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev>
 801398e:	bd80      	pop	{r7, pc}
 8013990:	2005b85c 	.word	0x2005b85c

08013994 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8013994:	b580      	push	{r7, lr}
 8013996:	af00      	add	r7, sp, #0
    static CWRVectorRendererRGB565 renderer;
 8013998:	4b11      	ldr	r3, [pc, #68]	@ (80139e0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 801399a:	e8d3 3faf 	lda	r3, [r3]
 801399e:	f003 0301 	and.w	r3, r3, #1
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	bf0c      	ite	eq
 80139a6:	2301      	moveq	r3, #1
 80139a8:	2300      	movne	r3, #0
 80139aa:	b2db      	uxtb	r3, r3
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d013      	beq.n	80139d8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x44>
 80139b0:	480b      	ldr	r0, [pc, #44]	@ (80139e0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 80139b2:	f017 f90e 	bl	802abd2 <__cxa_guard_acquire>
 80139b6:	4603      	mov	r3, r0
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	bf14      	ite	ne
 80139bc:	2301      	movne	r3, #1
 80139be:	2300      	moveq	r3, #0
 80139c0:	b2db      	uxtb	r3, r3
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d008      	beq.n	80139d8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x44>
 80139c6:	4807      	ldr	r0, [pc, #28]	@ (80139e4 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x50>)
 80139c8:	f7ff ff8c 	bl	80138e4 <_ZN8touchgfx23CWRVectorRendererRGB565C1Ev>
 80139cc:	4806      	ldr	r0, [pc, #24]	@ (80139e8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x54>)
 80139ce:	f018 f811 	bl	802b9f4 <atexit>
 80139d2:	4803      	ldr	r0, [pc, #12]	@ (80139e0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 80139d4:	f017 f909 	bl	802abea <__cxa_guard_release>

    return &renderer;
 80139d8:	4b02      	ldr	r3, [pc, #8]	@ (80139e4 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x50>)
}
 80139da:	4618      	mov	r0, r3
 80139dc:	bd80      	pop	{r7, pc}
 80139de:	bf00      	nop
 80139e0:	2005b918 	.word	0x2005b918
 80139e4:	2005b85c 	.word	0x2005b85c
 80139e8:	08013985 	.word	0x08013985

080139ec <__NVIC_EnableIRQ>:
{
 80139ec:	b480      	push	{r7}
 80139ee:	b083      	sub	sp, #12
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	4603      	mov	r3, r0
 80139f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80139f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	db0b      	blt.n	8013a16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80139fe:	79fb      	ldrb	r3, [r7, #7]
 8013a00:	f003 021f 	and.w	r2, r3, #31
 8013a04:	4907      	ldr	r1, [pc, #28]	@ (8013a24 <__NVIC_EnableIRQ+0x38>)
 8013a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a0a:	095b      	lsrs	r3, r3, #5
 8013a0c:	2001      	movs	r0, #1
 8013a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8013a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013a16:	bf00      	nop
 8013a18:	370c      	adds	r7, #12
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a20:	4770      	bx	lr
 8013a22:	bf00      	nop
 8013a24:	e000e100 	.word	0xe000e100

08013a28 <__NVIC_DisableIRQ>:
{
 8013a28:	b480      	push	{r7}
 8013a2a:	b083      	sub	sp, #12
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	4603      	mov	r3, r0
 8013a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	db12      	blt.n	8013a60 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013a3a:	79fb      	ldrb	r3, [r7, #7]
 8013a3c:	f003 021f 	and.w	r2, r3, #31
 8013a40:	490a      	ldr	r1, [pc, #40]	@ (8013a6c <__NVIC_DisableIRQ+0x44>)
 8013a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a46:	095b      	lsrs	r3, r3, #5
 8013a48:	2001      	movs	r0, #1
 8013a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8013a4e:	3320      	adds	r3, #32
 8013a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013a54:	f3bf 8f4f 	dsb	sy
}
 8013a58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013a5a:	f3bf 8f6f 	isb	sy
}
 8013a5e:	bf00      	nop
}
 8013a60:	bf00      	nop
 8013a62:	370c      	adds	r7, #12
 8013a64:	46bd      	mov	sp, r7
 8013a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6a:	4770      	bx	lr
 8013a6c:	e000e100 	.word	0xe000e100

08013a70 <__NVIC_SetPriority>:
{
 8013a70:	b480      	push	{r7}
 8013a72:	b083      	sub	sp, #12
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	4603      	mov	r3, r0
 8013a78:	6039      	str	r1, [r7, #0]
 8013a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	db0a      	blt.n	8013a9a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013a84:	683b      	ldr	r3, [r7, #0]
 8013a86:	b2da      	uxtb	r2, r3
 8013a88:	490c      	ldr	r1, [pc, #48]	@ (8013abc <__NVIC_SetPriority+0x4c>)
 8013a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a8e:	0112      	lsls	r2, r2, #4
 8013a90:	b2d2      	uxtb	r2, r2
 8013a92:	440b      	add	r3, r1
 8013a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8013a98:	e00a      	b.n	8013ab0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013a9a:	683b      	ldr	r3, [r7, #0]
 8013a9c:	b2da      	uxtb	r2, r3
 8013a9e:	4908      	ldr	r1, [pc, #32]	@ (8013ac0 <__NVIC_SetPriority+0x50>)
 8013aa0:	79fb      	ldrb	r3, [r7, #7]
 8013aa2:	f003 030f 	and.w	r3, r3, #15
 8013aa6:	3b04      	subs	r3, #4
 8013aa8:	0112      	lsls	r2, r2, #4
 8013aaa:	b2d2      	uxtb	r2, r2
 8013aac:	440b      	add	r3, r1
 8013aae:	761a      	strb	r2, [r3, #24]
}
 8013ab0:	bf00      	nop
 8013ab2:	370c      	adds	r7, #12
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aba:	4770      	bx	lr
 8013abc:	e000e100 	.word	0xe000e100
 8013ac0:	e000ed00 	.word	0xe000ed00

08013ac4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
uint32_t frameBuf[(240 * 296 * 2 + 3) / 4 * 2] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}

void TouchGFXGeneratedHAL::initialize()
{
 8013ac4:	b5b0      	push	{r4, r5, r7, lr}
 8013ac6:	b082      	sub	sp, #8
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f000 fbb3 	bl	801423a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8013ad4:	687d      	ldr	r5, [r7, #4]
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	3368      	adds	r3, #104	@ 0x68
 8013adc:	681c      	ldr	r4, [r3, #0]
 8013ade:	f004 fea9 	bl	8018834 <_ZN8touchgfx11Application11getInstanceEv>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	4619      	mov	r1, r3
 8013ae6:	4628      	mov	r0, r5
 8013ae8:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8013aea:	6878      	ldr	r0, [r7, #4]
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	338c      	adds	r3, #140	@ 0x8c
 8013af2:	681c      	ldr	r4, [r3, #0]
 8013af4:	4a03      	ldr	r2, [pc, #12]	@ (8013b04 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8013af6:	2300      	movs	r3, #0
 8013af8:	4903      	ldr	r1, [pc, #12]	@ (8013b08 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8013afa:	47a0      	blx	r4
}
 8013afc:	bf00      	nop
 8013afe:	3708      	adds	r7, #8
 8013b00:	46bd      	mov	sp, r7
 8013b02:	bdb0      	pop	{r4, r5, r7, pc}
 8013b04:	20022bfc 	.word	0x20022bfc
 8013b08:	200000fc 	.word	0x200000fc

08013b0c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b082      	sub	sp, #8
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8013b14:	2109      	movs	r1, #9
 8013b16:	2076      	movs	r0, #118	@ 0x76
 8013b18:	f7ff ffaa 	bl	8013a70 <__NVIC_SetPriority>
}
 8013b1c:	bf00      	nop
 8013b1e:	3708      	adds	r7, #8
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}

08013b24 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b082      	sub	sp, #8
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8013b2c:	2076      	movs	r0, #118	@ 0x76
 8013b2e:	f7ff ff5d 	bl	80139ec <__NVIC_EnableIRQ>
}
 8013b32:	bf00      	nop
 8013b34:	3708      	adds	r7, #8
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bd80      	pop	{r7, pc}

08013b3a <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8013b3a:	b580      	push	{r7, lr}
 8013b3c:	b082      	sub	sp, #8
 8013b3e:	af00      	add	r7, sp, #0
 8013b40:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013b42:	2076      	movs	r0, #118	@ 0x76
 8013b44:	f7ff ff70 	bl	8013a28 <__NVIC_DisableIRQ>
}
 8013b48:	bf00      	nop
 8013b4a:	3708      	adds	r7, #8
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}

08013b50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8013b50:	b480      	push	{r7}
 8013b52:	b083      	sub	sp, #12
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
}
 8013b58:	bf00      	nop
 8013b5a:	370c      	adds	r7, #12
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b62:	4770      	bx	lr

08013b64 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b082      	sub	sp, #8
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f000 fb4a 	bl	8014208 <_ZN8touchgfx3HAL10beginFrameEv>
 8013b74:	4603      	mov	r3, r0
}
 8013b76:	4618      	mov	r0, r3
 8013b78:	3708      	adds	r7, #8
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}

08013b7e <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8013b7e:	b580      	push	{r7, lr}
 8013b80:	b082      	sub	sp, #8
 8013b82:	af00      	add	r7, sp, #0
 8013b84:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f000 fb49 	bl	8014220 <_ZN8touchgfx3HAL8endFrameEv>
}
 8013b8e:	bf00      	nop
 8013b90:	3708      	adds	r7, #8
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}
	...

08013b98 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8013b98:	b480      	push	{r7}
 8013b9a:	b083      	sub	sp, #12
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)frameBuf;
 8013ba0:	4b03      	ldr	r3, [pc, #12]	@ (8013bb0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
}
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	370c      	adds	r7, #12
 8013ba6:	46bd      	mov	sp, r7
 8013ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bac:	4770      	bx	lr
 8013bae:	bf00      	nop
 8013bb0:	200000fc 	.word	0x200000fc

08013bb4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8013bb4:	b480      	push	{r7}
 8013bb6:	b083      	sub	sp, #12
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
 8013bbc:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 8013bbe:	bf00      	nop
 8013bc0:	370c      	adds	r7, #12
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc8:	4770      	bx	lr

08013bca <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013bca:	b580      	push	{r7, lr}
 8013bcc:	b082      	sub	sp, #8
 8013bce:	af00      	add	r7, sp, #0
 8013bd0:	6078      	str	r0, [r7, #4]
 8013bd2:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	6839      	ldr	r1, [r7, #0]
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f000 fadf 	bl	801419c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8013bde:	bf00      	nop
 8013be0:	3708      	adds	r7, #8
 8013be2:	46bd      	mov	sp, r7
 8013be4:	bd80      	pop	{r7, pc}

08013be6 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8013be6:	b580      	push	{r7, lr}
 8013be8:	b084      	sub	sp, #16
 8013bea:	af00      	add	r7, sp, #0
 8013bec:	60f8      	str	r0, [r7, #12]
 8013bee:	60b9      	str	r1, [r7, #8]
 8013bf0:	607a      	str	r2, [r7, #4]
 8013bf2:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8013bf4:	68f8      	ldr	r0, [r7, #12]
 8013bf6:	683b      	ldr	r3, [r7, #0]
 8013bf8:	687a      	ldr	r2, [r7, #4]
 8013bfa:	68b9      	ldr	r1, [r7, #8]
 8013bfc:	f000 fc51 	bl	80144a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8013c00:	4603      	mov	r3, r0
}
 8013c02:	4618      	mov	r0, r3
 8013c04:	3710      	adds	r7, #16
 8013c06:	46bd      	mov	sp, r7
 8013c08:	bd80      	pop	{r7, pc}

08013c0a <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8013c0a:	8880      	ldrh	r0, [r0, #4]
 8013c0c:	4770      	bx	lr

08013c0e <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8013c0e:	b570      	push	{r4, r5, r6, lr}
 8013c10:	6803      	ldr	r3, [r0, #0]
 8013c12:	4605      	mov	r5, r0
 8013c14:	460c      	mov	r4, r1
 8013c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c18:	2100      	movs	r1, #0
 8013c1a:	4798      	blx	r3
 8013c1c:	682b      	ldr	r3, [r5, #0]
 8013c1e:	4606      	mov	r6, r0
 8013c20:	6a1b      	ldr	r3, [r3, #32]
 8013c22:	4628      	mov	r0, r5
 8013c24:	4798      	blx	r3
 8013c26:	1ba4      	subs	r4, r4, r6
 8013c28:	b2a4      	uxth	r4, r4
 8013c2a:	fbb4 f0f0 	udiv	r0, r4, r0
 8013c2e:	bd70      	pop	{r4, r5, r6, pc}

08013c30 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8013c30:	2300      	movs	r3, #0
 8013c32:	8083      	strh	r3, [r0, #4]
 8013c34:	4770      	bx	lr

08013c36 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8013c36:	b510      	push	{r4, lr}
 8013c38:	4604      	mov	r4, r0
 8013c3a:	6803      	ldr	r3, [r0, #0]
 8013c3c:	8881      	ldrh	r1, [r0, #4]
 8013c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c40:	4798      	blx	r3
 8013c42:	88a3      	ldrh	r3, [r4, #4]
 8013c44:	3301      	adds	r3, #1
 8013c46:	80a3      	strh	r3, [r4, #4]
 8013c48:	bd10      	pop	{r4, pc}

08013c4a <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8013c4a:	6803      	ldr	r3, [r0, #0]
 8013c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c4e:	4718      	bx	r3

08013c50 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8013c50:	4770      	bx	lr
	...

08013c54 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8013c54:	4a02      	ldr	r2, [pc, #8]	@ (8013c60 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8013c56:	6002      	str	r2, [r0, #0]
 8013c58:	2200      	movs	r2, #0
 8013c5a:	8082      	strh	r2, [r0, #4]
 8013c5c:	4770      	bx	lr
 8013c5e:	bf00      	nop
 8013c60:	0802e21c 	.word	0x0802e21c

08013c64 <_ZN8touchgfx9Container13getFirstChildEv>:
 8013c64:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8013c66:	4770      	bx	lr

08013c68 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8013c68:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013c6a:	2000      	movs	r0, #0
 8013c6c:	b12b      	cbz	r3, 8013c7a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013c6e:	b920      	cbnz	r0, 8013c7a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013c70:	1a5a      	subs	r2, r3, r1
 8013c72:	4250      	negs	r0, r2
 8013c74:	4150      	adcs	r0, r2
 8013c76:	699b      	ldr	r3, [r3, #24]
 8013c78:	e7f8      	b.n	8013c6c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8013c7a:	4770      	bx	lr

08013c7c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	6148      	str	r0, [r1, #20]
 8013c80:	618b      	str	r3, [r1, #24]
 8013c82:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013c84:	b913      	cbnz	r3, 8013c8c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8013c86:	6281      	str	r1, [r0, #40]	@ 0x28
 8013c88:	4770      	bx	lr
 8013c8a:	4613      	mov	r3, r2
 8013c8c:	699a      	ldr	r2, [r3, #24]
 8013c8e:	2a00      	cmp	r2, #0
 8013c90:	d1fb      	bne.n	8013c8a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8013c92:	6199      	str	r1, [r3, #24]
 8013c94:	4770      	bx	lr

08013c96 <_ZN8touchgfx9Container9removeAllEv>:
 8013c96:	2200      	movs	r2, #0
 8013c98:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013c9a:	b123      	cbz	r3, 8013ca6 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8013c9c:	6999      	ldr	r1, [r3, #24]
 8013c9e:	6281      	str	r1, [r0, #40]	@ 0x28
 8013ca0:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8013ca4:	e7f8      	b.n	8013c98 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8013ca6:	4770      	bx	lr

08013ca8 <_ZN8touchgfx9Container6unlinkEv>:
 8013ca8:	2300      	movs	r3, #0
 8013caa:	6283      	str	r3, [r0, #40]	@ 0x28
 8013cac:	4770      	bx	lr

08013cae <_ZNK8touchgfx9Container12getSolidRectEv>:
 8013cae:	2200      	movs	r2, #0
 8013cb0:	8002      	strh	r2, [r0, #0]
 8013cb2:	8042      	strh	r2, [r0, #2]
 8013cb4:	8082      	strh	r2, [r0, #4]
 8013cb6:	80c2      	strh	r2, [r0, #6]
 8013cb8:	4770      	bx	lr

08013cba <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8013cba:	b570      	push	{r4, r5, r6, lr}
 8013cbc:	460d      	mov	r5, r1
 8013cbe:	4616      	mov	r6, r2
 8013cc0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8013cc2:	b13c      	cbz	r4, 8013cd4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8013cc4:	6823      	ldr	r3, [r4, #0]
 8013cc6:	4620      	mov	r0, r4
 8013cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013cca:	4632      	mov	r2, r6
 8013ccc:	4629      	mov	r1, r5
 8013cce:	4798      	blx	r3
 8013cd0:	69a4      	ldr	r4, [r4, #24]
 8013cd2:	e7f6      	b.n	8013cc2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8013cd4:	bd70      	pop	{r4, r5, r6, pc}

08013cd6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8013cd6:	b538      	push	{r3, r4, r5, lr}
 8013cd8:	460d      	mov	r5, r1
 8013cda:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8013cdc:	b134      	cbz	r4, 8013cec <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8013cde:	682b      	ldr	r3, [r5, #0]
 8013ce0:	4621      	mov	r1, r4
 8013ce2:	689b      	ldr	r3, [r3, #8]
 8013ce4:	4628      	mov	r0, r5
 8013ce6:	4798      	blx	r3
 8013ce8:	69a4      	ldr	r4, [r4, #24]
 8013cea:	e7f7      	b.n	8013cdc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8013cec:	bd38      	pop	{r3, r4, r5, pc}

08013cee <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8013cee:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013cf0:	b19b      	cbz	r3, 8013d1a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013cf2:	428b      	cmp	r3, r1
 8013cf4:	d109      	bne.n	8013d0a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8013cf6:	2100      	movs	r1, #0
 8013cf8:	699a      	ldr	r2, [r3, #24]
 8013cfa:	6159      	str	r1, [r3, #20]
 8013cfc:	6282      	str	r2, [r0, #40]	@ 0x28
 8013cfe:	b902      	cbnz	r2, 8013d02 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8013d00:	4770      	bx	lr
 8013d02:	6199      	str	r1, [r3, #24]
 8013d04:	4770      	bx	lr
 8013d06:	4613      	mov	r3, r2
 8013d08:	b13a      	cbz	r2, 8013d1a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013d0a:	699a      	ldr	r2, [r3, #24]
 8013d0c:	428a      	cmp	r2, r1
 8013d0e:	d1fa      	bne.n	8013d06 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8013d10:	698a      	ldr	r2, [r1, #24]
 8013d12:	619a      	str	r2, [r3, #24]
 8013d14:	2300      	movs	r3, #0
 8013d16:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8013d1a:	4770      	bx	lr

08013d1c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8013d1c:	b410      	push	{r4}
 8013d1e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013d20:	4604      	mov	r4, r0
 8013d22:	b92b      	cbnz	r3, 8013d30 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8013d24:	6803      	ldr	r3, [r0, #0]
 8013d26:	4611      	mov	r1, r2
 8013d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d2e:	4718      	bx	r3
 8013d30:	b941      	cbnz	r1, 8013d44 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8013d32:	6193      	str	r3, [r2, #24]
 8013d34:	6282      	str	r2, [r0, #40]	@ 0x28
 8013d36:	6154      	str	r4, [r2, #20]
 8013d38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d3c:	4770      	bx	lr
 8013d3e:	4603      	mov	r3, r0
 8013d40:	2800      	cmp	r0, #0
 8013d42:	d0f9      	beq.n	8013d38 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8013d44:	4299      	cmp	r1, r3
 8013d46:	6998      	ldr	r0, [r3, #24]
 8013d48:	d1f9      	bne.n	8013d3e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8013d4a:	6190      	str	r0, [r2, #24]
 8013d4c:	618a      	str	r2, [r1, #24]
 8013d4e:	e7f2      	b.n	8013d36 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08013d50 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8013d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d54:	461f      	mov	r7, r3
 8013d56:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8013d5a:	460d      	mov	r5, r1
 8013d5c:	4616      	mov	r6, r2
 8013d5e:	b103      	cbz	r3, 8013d62 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8013d60:	6038      	str	r0, [r7, #0]
 8013d62:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8013d64:	b314      	cbz	r4, 8013dac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8013d66:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8013d6a:	b1eb      	cbz	r3, 8013da8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013d6c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013d70:	428d      	cmp	r5, r1
 8013d72:	db19      	blt.n	8013da8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013d74:	8923      	ldrh	r3, [r4, #8]
 8013d76:	b289      	uxth	r1, r1
 8013d78:	440b      	add	r3, r1
 8013d7a:	b21b      	sxth	r3, r3
 8013d7c:	429d      	cmp	r5, r3
 8013d7e:	da13      	bge.n	8013da8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013d80:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013d84:	4296      	cmp	r6, r2
 8013d86:	db0f      	blt.n	8013da8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013d88:	8963      	ldrh	r3, [r4, #10]
 8013d8a:	b292      	uxth	r2, r2
 8013d8c:	4413      	add	r3, r2
 8013d8e:	b21b      	sxth	r3, r3
 8013d90:	429e      	cmp	r6, r3
 8013d92:	da09      	bge.n	8013da8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013d94:	6823      	ldr	r3, [r4, #0]
 8013d96:	1ab2      	subs	r2, r6, r2
 8013d98:	1a69      	subs	r1, r5, r1
 8013d9a:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8013d9e:	b212      	sxth	r2, r2
 8013da0:	463b      	mov	r3, r7
 8013da2:	b209      	sxth	r1, r1
 8013da4:	4620      	mov	r0, r4
 8013da6:	47c0      	blx	r8
 8013da8:	69a4      	ldr	r4, [r4, #24]
 8013daa:	e7db      	b.n	8013d64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8013dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013db0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8013db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013db4:	4c6c      	ldr	r4, [pc, #432]	@ (8013f68 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 8013db6:	b0a1      	sub	sp, #132	@ 0x84
 8013db8:	6824      	ldr	r4, [r4, #0]
 8013dba:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8013dbc:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8013dc0:	2400      	movs	r4, #0
 8013dc2:	802c      	strh	r4, [r5, #0]
 8013dc4:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8013dc6:	4606      	mov	r6, r0
 8013dc8:	802c      	strh	r4, [r5, #0]
 8013dca:	601c      	str	r4, [r3, #0]
 8013dcc:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8013dd0:	9303      	str	r3, [sp, #12]
 8013dd2:	f7ff ffbd 	bl	8013d50 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013dd6:	f1b9 0f03 	cmp.w	r9, #3
 8013dda:	f340 80bf 	ble.w	8013f5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 8013dde:	4631      	mov	r1, r6
 8013de0:	a80c      	add	r0, sp, #48	@ 0x30
 8013de2:	f005 ff75 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013de6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8013dea:	9306      	str	r3, [sp, #24]
 8013dec:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8013df0:	9307      	str	r3, [sp, #28]
 8013df2:	9b03      	ldr	r3, [sp, #12]
 8013df4:	f8d3 a000 	ldr.w	sl, [r3]
 8013df8:	f1ba 0f00 	cmp.w	sl, #0
 8013dfc:	f000 80b1 	beq.w	8013f62 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8013e00:	4651      	mov	r1, sl
 8013e02:	a810      	add	r0, sp, #64	@ 0x40
 8013e04:	f005 ff64 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013e08:	2002      	movs	r0, #2
 8013e0a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8013e0e:	9b01      	ldr	r3, [sp, #4]
 8013e10:	fb91 f1f0 	sdiv	r1, r1, r0
 8013e14:	9a06      	ldr	r2, [sp, #24]
 8013e16:	189d      	adds	r5, r3, r2
 8013e18:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8013e1c:	9a07      	ldr	r2, [sp, #28]
 8013e1e:	4419      	add	r1, r3
 8013e20:	9b02      	ldr	r3, [sp, #8]
 8013e22:	1a6d      	subs	r5, r5, r1
 8013e24:	4413      	add	r3, r2
 8013e26:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8013e2a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8013e2e:	fb92 f2f0 	sdiv	r2, r2, r0
 8013e32:	440a      	add	r2, r1
 8013e34:	1a9b      	subs	r3, r3, r2
 8013e36:	435b      	muls	r3, r3
 8013e38:	fb05 3505 	mla	r5, r5, r5, r3
 8013e3c:	4f4b      	ldr	r7, [pc, #300]	@ (8013f6c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8013e3e:	ac10      	add	r4, sp, #64	@ 0x40
 8013e40:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013e44:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013e48:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013e4c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8013e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013e54:	2303      	movs	r3, #3
 8013e56:	f1b9 0f0c 	cmp.w	r9, #12
 8013e5a:	bfda      	itte	le
 8013e5c:	f109 32ff 	addle.w	r2, r9, #4294967295
 8013e60:	fb92 f8f3 	sdivle	r8, r2, r3
 8013e64:	4698      	movgt	r8, r3
 8013e66:	2400      	movs	r4, #0
 8013e68:	f8cd 9000 	str.w	r9, [sp]
 8013e6c:	1c63      	adds	r3, r4, #1
 8013e6e:	9308      	str	r3, [sp, #32]
 8013e70:	9b00      	ldr	r3, [sp, #0]
 8013e72:	f04f 0b00 	mov.w	fp, #0
 8013e76:	fb93 f3f8 	sdiv	r3, r3, r8
 8013e7a:	f004 0401 	and.w	r4, r4, #1
 8013e7e:	aa10      	add	r2, sp, #64	@ 0x40
 8013e80:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8013e84:	b29b      	uxth	r3, r3
 8013e86:	3404      	adds	r4, #4
 8013e88:	9304      	str	r3, [sp, #16]
 8013e8a:	9a04      	ldr	r2, [sp, #16]
 8013e8c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013e90:	fb13 f302 	smulbb	r3, r3, r2
 8013e94:	9a01      	ldr	r2, [sp, #4]
 8013e96:	b29b      	uxth	r3, r3
 8013e98:	1899      	adds	r1, r3, r2
 8013e9a:	9305      	str	r3, [sp, #20]
 8013e9c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013ea0:	b209      	sxth	r1, r1
 8013ea2:	4299      	cmp	r1, r3
 8013ea4:	db4d      	blt.n	8013f42 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013ea6:	8932      	ldrh	r2, [r6, #8]
 8013ea8:	4413      	add	r3, r2
 8013eaa:	b21b      	sxth	r3, r3
 8013eac:	4299      	cmp	r1, r3
 8013eae:	da48      	bge.n	8013f42 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013eb0:	9b04      	ldr	r3, [sp, #16]
 8013eb2:	6827      	ldr	r7, [r4, #0]
 8013eb4:	fb17 f703 	smulbb	r7, r7, r3
 8013eb8:	9b02      	ldr	r3, [sp, #8]
 8013eba:	b2bf      	uxth	r7, r7
 8013ebc:	18fa      	adds	r2, r7, r3
 8013ebe:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8013ec2:	b212      	sxth	r2, r2
 8013ec4:	429a      	cmp	r2, r3
 8013ec6:	db3c      	blt.n	8013f42 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013ec8:	8970      	ldrh	r0, [r6, #10]
 8013eca:	4403      	add	r3, r0
 8013ecc:	b21b      	sxth	r3, r3
 8013ece:	429a      	cmp	r2, r3
 8013ed0:	da37      	bge.n	8013f42 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	4630      	mov	r0, r6
 8013ed6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013ed8:	ab0b      	add	r3, sp, #44	@ 0x2c
 8013eda:	f7ff ff39 	bl	8013d50 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013ede:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013ee0:	b37a      	cbz	r2, 8013f42 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013ee2:	4552      	cmp	r2, sl
 8013ee4:	d02d      	beq.n	8013f42 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013ee6:	4611      	mov	r1, r2
 8013ee8:	a80e      	add	r0, sp, #56	@ 0x38
 8013eea:	9209      	str	r2, [sp, #36]	@ 0x24
 8013eec:	f005 fef0 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013ef0:	f04f 0e02 	mov.w	lr, #2
 8013ef4:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8013ef8:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8013efc:	fb91 f1fe 	sdiv	r1, r1, lr
 8013f00:	fb9c fcfe 	sdiv	ip, ip, lr
 8013f04:	9a06      	ldr	r2, [sp, #24]
 8013f06:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8013f0a:	9b01      	ldr	r3, [sp, #4]
 8013f0c:	4401      	add	r1, r0
 8013f0e:	4413      	add	r3, r2
 8013f10:	1a58      	subs	r0, r3, r1
 8013f12:	9a07      	ldr	r2, [sp, #28]
 8013f14:	9b02      	ldr	r3, [sp, #8]
 8013f16:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8013f1a:	4413      	add	r3, r2
 8013f1c:	448c      	add	ip, r1
 8013f1e:	eba3 030c 	sub.w	r3, r3, ip
 8013f22:	435b      	muls	r3, r3
 8013f24:	fb00 3300 	mla	r3, r0, r0, r3
 8013f28:	42ab      	cmp	r3, r5
 8013f2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013f2c:	d208      	bcs.n	8013f40 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 8013f2e:	461d      	mov	r5, r3
 8013f30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013f32:	9803      	ldr	r0, [sp, #12]
 8013f34:	6001      	str	r1, [r0, #0]
 8013f36:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8013f38:	9805      	ldr	r0, [sp, #20]
 8013f3a:	8008      	strh	r0, [r1, #0]
 8013f3c:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8013f3e:	800f      	strh	r7, [r1, #0]
 8013f40:	4692      	mov	sl, r2
 8013f42:	f10b 0b01 	add.w	fp, fp, #1
 8013f46:	f1bb 0f04 	cmp.w	fp, #4
 8013f4a:	f104 0408 	add.w	r4, r4, #8
 8013f4e:	d19c      	bne.n	8013e8a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 8013f50:	9b00      	ldr	r3, [sp, #0]
 8013f52:	9c08      	ldr	r4, [sp, #32]
 8013f54:	444b      	add	r3, r9
 8013f56:	4544      	cmp	r4, r8
 8013f58:	9300      	str	r3, [sp, #0]
 8013f5a:	d187      	bne.n	8013e6c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 8013f5c:	b021      	add	sp, #132	@ 0x84
 8013f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f62:	f04f 35ff 	mov.w	r5, #4294967295
 8013f66:	e769      	b.n	8013e3c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8013f68:	2005b928 	.word	0x2005b928
 8013f6c:	0802d7b4 	.word	0x0802d7b4

08013f70 <_ZN8touchgfx4RectaNERKS0_>:
 8013f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f74:	f9b1 7000 	ldrsh.w	r7, [r1]
 8013f78:	888c      	ldrh	r4, [r1, #4]
 8013f7a:	f9b0 9000 	ldrsh.w	r9, [r0]
 8013f7e:	443c      	add	r4, r7
 8013f80:	b2a4      	uxth	r4, r4
 8013f82:	fa0f f884 	sxth.w	r8, r4
 8013f86:	45c1      	cmp	r9, r8
 8013f88:	da2f      	bge.n	8013fea <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013f8a:	8882      	ldrh	r2, [r0, #4]
 8013f8c:	444a      	add	r2, r9
 8013f8e:	b292      	uxth	r2, r2
 8013f90:	fa0f fe82 	sxth.w	lr, r2
 8013f94:	4577      	cmp	r7, lr
 8013f96:	da28      	bge.n	8013fea <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013f98:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8013f9c:	88cb      	ldrh	r3, [r1, #6]
 8013f9e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8013fa2:	442b      	add	r3, r5
 8013fa4:	b21b      	sxth	r3, r3
 8013fa6:	429e      	cmp	r6, r3
 8013fa8:	da1f      	bge.n	8013fea <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013faa:	88c3      	ldrh	r3, [r0, #6]
 8013fac:	4433      	add	r3, r6
 8013fae:	b29b      	uxth	r3, r3
 8013fb0:	fa0f fc83 	sxth.w	ip, r3
 8013fb4:	4565      	cmp	r5, ip
 8013fb6:	da18      	bge.n	8013fea <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013fb8:	454f      	cmp	r7, r9
 8013fba:	bfb8      	it	lt
 8013fbc:	464f      	movlt	r7, r9
 8013fbe:	42b5      	cmp	r5, r6
 8013fc0:	bfb8      	it	lt
 8013fc2:	4635      	movlt	r5, r6
 8013fc4:	45f0      	cmp	r8, lr
 8013fc6:	bfd8      	it	le
 8013fc8:	4622      	movle	r2, r4
 8013fca:	1bd2      	subs	r2, r2, r7
 8013fcc:	8082      	strh	r2, [r0, #4]
 8013fce:	884a      	ldrh	r2, [r1, #2]
 8013fd0:	88c9      	ldrh	r1, [r1, #6]
 8013fd2:	8007      	strh	r7, [r0, #0]
 8013fd4:	440a      	add	r2, r1
 8013fd6:	b292      	uxth	r2, r2
 8013fd8:	b211      	sxth	r1, r2
 8013fda:	458c      	cmp	ip, r1
 8013fdc:	bfa8      	it	ge
 8013fde:	4613      	movge	r3, r2
 8013fe0:	1b5b      	subs	r3, r3, r5
 8013fe2:	80c3      	strh	r3, [r0, #6]
 8013fe4:	8045      	strh	r5, [r0, #2]
 8013fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fea:	2300      	movs	r3, #0
 8013fec:	8003      	strh	r3, [r0, #0]
 8013fee:	8043      	strh	r3, [r0, #2]
 8013ff0:	8083      	strh	r3, [r0, #4]
 8013ff2:	80c3      	strh	r3, [r0, #6]
 8013ff4:	e7f7      	b.n	8013fe6 <_ZN8touchgfx4RectaNERKS0_+0x76>

08013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8013ff6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	dd06      	ble.n	801400c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8013ffe:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8014002:	2800      	cmp	r0, #0
 8014004:	bfcc      	ite	gt
 8014006:	2000      	movgt	r0, #0
 8014008:	2001      	movle	r0, #1
 801400a:	4770      	bx	lr
 801400c:	2001      	movs	r0, #1
 801400e:	4770      	bx	lr

08014010 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8014010:	2300      	movs	r3, #0
 8014012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014016:	4604      	mov	r4, r0
 8014018:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801401a:	8003      	strh	r3, [r0, #0]
 801401c:	8043      	strh	r3, [r0, #2]
 801401e:	8083      	strh	r3, [r0, #4]
 8014020:	80c3      	strh	r3, [r0, #6]
 8014022:	2d00      	cmp	r5, #0
 8014024:	d040      	beq.n	80140a8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8014026:	1d28      	adds	r0, r5, #4
 8014028:	f7ff ffe5 	bl	8013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801402c:	b988      	cbnz	r0, 8014052 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801402e:	4620      	mov	r0, r4
 8014030:	f7ff ffe1 	bl	8013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014034:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014038:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801403c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8014040:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8014044:	b138      	cbz	r0, 8014056 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8014046:	8022      	strh	r2, [r4, #0]
 8014048:	8063      	strh	r3, [r4, #2]
 801404a:	f8a4 e004 	strh.w	lr, [r4, #4]
 801404e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8014052:	69ad      	ldr	r5, [r5, #24]
 8014054:	e7e5      	b.n	8014022 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8014056:	f9b4 0000 	ldrsh.w	r0, [r4]
 801405a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801405e:	4290      	cmp	r0, r2
 8014060:	4607      	mov	r7, r0
 8014062:	bfa8      	it	ge
 8014064:	4617      	movge	r7, r2
 8014066:	4299      	cmp	r1, r3
 8014068:	460e      	mov	r6, r1
 801406a:	bfa8      	it	ge
 801406c:	461e      	movge	r6, r3
 801406e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8014072:	4472      	add	r2, lr
 8014074:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8014078:	4440      	add	r0, r8
 801407a:	4471      	add	r1, lr
 801407c:	4463      	add	r3, ip
 801407e:	b200      	sxth	r0, r0
 8014080:	b212      	sxth	r2, r2
 8014082:	b209      	sxth	r1, r1
 8014084:	b21b      	sxth	r3, r3
 8014086:	4290      	cmp	r0, r2
 8014088:	bfac      	ite	ge
 801408a:	ebc7 0200 	rsbge	r2, r7, r0
 801408e:	ebc7 0202 	rsblt	r2, r7, r2
 8014092:	4299      	cmp	r1, r3
 8014094:	bfac      	ite	ge
 8014096:	ebc6 0301 	rsbge	r3, r6, r1
 801409a:	ebc6 0303 	rsblt	r3, r6, r3
 801409e:	8027      	strh	r7, [r4, #0]
 80140a0:	8066      	strh	r6, [r4, #2]
 80140a2:	80a2      	strh	r2, [r4, #4]
 80140a4:	80e3      	strh	r3, [r4, #6]
 80140a6:	e7d4      	b.n	8014052 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80140a8:	4620      	mov	r0, r4
 80140aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080140ae <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80140ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80140b2:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80140b6:	b383      	cbz	r3, 801411a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80140b8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80140ba:	b374      	cbz	r4, 801411a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80140bc:	f9b1 5000 	ldrsh.w	r5, [r1]
 80140c0:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80140c4:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80140c8:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80140cc:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80140d0:	b303      	cbz	r3, 8014114 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80140d2:	4668      	mov	r0, sp
 80140d4:	1d21      	adds	r1, r4, #4
 80140d6:	f8ad 5000 	strh.w	r5, [sp]
 80140da:	f8ad 6002 	strh.w	r6, [sp, #2]
 80140de:	f8ad 7004 	strh.w	r7, [sp, #4]
 80140e2:	f8ad 8006 	strh.w	r8, [sp, #6]
 80140e6:	f7ff ff43 	bl	8013f70 <_ZN8touchgfx4RectaNERKS0_>
 80140ea:	4668      	mov	r0, sp
 80140ec:	f7ff ff83 	bl	8013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80140f0:	b980      	cbnz	r0, 8014114 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80140f2:	f8bd 3000 	ldrh.w	r3, [sp]
 80140f6:	88a2      	ldrh	r2, [r4, #4]
 80140f8:	4669      	mov	r1, sp
 80140fa:	1a9b      	subs	r3, r3, r2
 80140fc:	f8ad 3000 	strh.w	r3, [sp]
 8014100:	88e2      	ldrh	r2, [r4, #6]
 8014102:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014106:	4620      	mov	r0, r4
 8014108:	1a9b      	subs	r3, r3, r2
 801410a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801410e:	6823      	ldr	r3, [r4, #0]
 8014110:	689b      	ldr	r3, [r3, #8]
 8014112:	4798      	blx	r3
 8014114:	69a4      	ldr	r4, [r4, #24]
 8014116:	2c00      	cmp	r4, #0
 8014118:	d1d8      	bne.n	80140cc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801411a:	b002      	add	sp, #8
 801411c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014120 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8014120:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014122:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8014126:	460d      	mov	r5, r1
 8014128:	4616      	mov	r6, r2
 801412a:	b323      	cbz	r3, 8014176 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801412c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801412e:	b314      	cbz	r4, 8014176 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014130:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8014134:	b1eb      	cbz	r3, 8014172 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014136:	466b      	mov	r3, sp
 8014138:	6828      	ldr	r0, [r5, #0]
 801413a:	6869      	ldr	r1, [r5, #4]
 801413c:	c303      	stmia	r3!, {r0, r1}
 801413e:	4668      	mov	r0, sp
 8014140:	1d21      	adds	r1, r4, #4
 8014142:	f7ff ff15 	bl	8013f70 <_ZN8touchgfx4RectaNERKS0_>
 8014146:	4668      	mov	r0, sp
 8014148:	f7ff ff55 	bl	8013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801414c:	b988      	cbnz	r0, 8014172 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801414e:	f8bd 3000 	ldrh.w	r3, [sp]
 8014152:	88a2      	ldrh	r2, [r4, #4]
 8014154:	4669      	mov	r1, sp
 8014156:	1a9b      	subs	r3, r3, r2
 8014158:	f8ad 3000 	strh.w	r3, [sp]
 801415c:	88e2      	ldrh	r2, [r4, #6]
 801415e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014162:	4620      	mov	r0, r4
 8014164:	1a9b      	subs	r3, r3, r2
 8014166:	f8ad 3002 	strh.w	r3, [sp, #2]
 801416a:	6823      	ldr	r3, [r4, #0]
 801416c:	4632      	mov	r2, r6
 801416e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014170:	4798      	blx	r3
 8014172:	69a4      	ldr	r4, [r4, #24]
 8014174:	e7db      	b.n	801412e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8014176:	b002      	add	sp, #8
 8014178:	bd70      	pop	{r4, r5, r6, pc}

0801417a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801417a:	b513      	push	{r0, r1, r4, lr}
 801417c:	6803      	ldr	r3, [r0, #0]
 801417e:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 8014182:	2300      	movs	r3, #0
 8014184:	e9cd 3300 	strd	r3, r3, [sp]
 8014188:	466b      	mov	r3, sp
 801418a:	47a0      	blx	r4
 801418c:	b002      	add	sp, #8
 801418e:	bd10      	pop	{r4, pc}

08014190 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8014190:	2301      	movs	r3, #1
 8014192:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8014196:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 801419a:	4770      	bx	lr

0801419c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801419c:	2301      	movs	r3, #1
 801419e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80141a2:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80141a6:	4770      	bx	lr

080141a8 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80141a8:	2201      	movs	r2, #1
 80141aa:	6843      	ldr	r3, [r0, #4]
 80141ac:	725a      	strb	r2, [r3, #9]
 80141ae:	6840      	ldr	r0, [r0, #4]
 80141b0:	6803      	ldr	r3, [r0, #0]
 80141b2:	691b      	ldr	r3, [r3, #16]
 80141b4:	4718      	bx	r3

080141b6 <_ZN8touchgfx3HAL8flushDMAEv>:
 80141b6:	6840      	ldr	r0, [r0, #4]
 80141b8:	6803      	ldr	r3, [r0, #0]
 80141ba:	689b      	ldr	r3, [r3, #8]
 80141bc:	4718      	bx	r3

080141be <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80141be:	b530      	push	{r4, r5, lr}
 80141c0:	b08b      	sub	sp, #44	@ 0x2c
 80141c2:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 80141c6:	6804      	ldr	r4, [r0, #0]
 80141c8:	9509      	str	r5, [sp, #36]	@ 0x24
 80141ca:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 80141ce:	9508      	str	r5, [sp, #32]
 80141d0:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 80141d4:	9507      	str	r5, [sp, #28]
 80141d6:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 80141da:	9506      	str	r5, [sp, #24]
 80141dc:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80141e0:	9505      	str	r5, [sp, #20]
 80141e2:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80141e6:	9504      	str	r5, [sp, #16]
 80141e8:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 80141ec:	9503      	str	r5, [sp, #12]
 80141ee:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 80141f2:	9502      	str	r5, [sp, #8]
 80141f4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80141f8:	e9cd 3500 	strd	r3, r5, [sp]
 80141fc:	4613      	mov	r3, r2
 80141fe:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 8014200:	2200      	movs	r2, #0
 8014202:	47a0      	blx	r4
 8014204:	b00b      	add	sp, #44	@ 0x2c
 8014206:	bd30      	pop	{r4, r5, pc}

08014208 <_ZN8touchgfx3HAL10beginFrameEv>:
 8014208:	4b04      	ldr	r3, [pc, #16]	@ (801421c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801420a:	781b      	ldrb	r3, [r3, #0]
 801420c:	b123      	cbz	r3, 8014218 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801420e:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8014212:	f080 0001 	eor.w	r0, r0, #1
 8014216:	4770      	bx	lr
 8014218:	2001      	movs	r0, #1
 801421a:	4770      	bx	lr
 801421c:	2005b926 	.word	0x2005b926

08014220 <_ZN8touchgfx3HAL8endFrameEv>:
 8014220:	b510      	push	{r4, lr}
 8014222:	4604      	mov	r4, r0
 8014224:	6840      	ldr	r0, [r0, #4]
 8014226:	6803      	ldr	r3, [r0, #0]
 8014228:	689b      	ldr	r3, [r3, #8]
 801422a:	4798      	blx	r3
 801422c:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8014230:	b113      	cbz	r3, 8014238 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8014232:	2301      	movs	r3, #1
 8014234:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8014238:	bd10      	pop	{r4, pc}

0801423a <_ZN8touchgfx3HAL10initializeEv>:
 801423a:	b510      	push	{r4, lr}
 801423c:	4604      	mov	r4, r0
 801423e:	f7fd fc8b 	bl	8011b58 <_ZN8touchgfx10OSWrappers10initializeEv>
 8014242:	f7fd f921 	bl	8011488 <_ZN8touchgfx4GPIO4initEv>
 8014246:	6860      	ldr	r0, [r4, #4]
 8014248:	6803      	ldr	r3, [r0, #0]
 801424a:	68db      	ldr	r3, [r3, #12]
 801424c:	4798      	blx	r3
 801424e:	68e0      	ldr	r0, [r4, #12]
 8014250:	6803      	ldr	r3, [r0, #0]
 8014252:	689b      	ldr	r3, [r3, #8]
 8014254:	4798      	blx	r3
 8014256:	6823      	ldr	r3, [r4, #0]
 8014258:	4620      	mov	r0, r4
 801425a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801425e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014260:	4718      	bx	r3

08014262 <_ZN8touchgfx3HAL9taskEntryEv>:
 8014262:	4604      	mov	r4, r0
 8014264:	b508      	push	{r3, lr}
 8014266:	6803      	ldr	r3, [r0, #0]
 8014268:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801426c:	4798      	blx	r3
 801426e:	6823      	ldr	r3, [r4, #0]
 8014270:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014272:	4620      	mov	r0, r4
 8014274:	4798      	blx	r3
 8014276:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801427a:	2b02      	cmp	r3, #2
 801427c:	d001      	beq.n	8014282 <_ZN8touchgfx3HAL9taskEntryEv+0x20>
 801427e:	f7fd fce1 	bl	8011c44 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8014282:	6823      	ldr	r3, [r4, #0]
 8014284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014286:	e7f4      	b.n	8014272 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08014288 <_ZN8touchgfx3HAL4tickEv>:
 8014288:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801428a:	6803      	ldr	r3, [r0, #0]
 801428c:	4604      	mov	r4, r0
 801428e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8014292:	4798      	blx	r3
 8014294:	4d60      	ldr	r5, [pc, #384]	@ (8014418 <_ZN8touchgfx3HAL4tickEv+0x190>)
 8014296:	2800      	cmp	r0, #0
 8014298:	f000 809e 	beq.w	80143d8 <_ZN8touchgfx3HAL4tickEv+0x150>
 801429c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80142a0:	2b02      	cmp	r3, #2
 80142a2:	d002      	beq.n	80142aa <_ZN8touchgfx3HAL4tickEv+0x22>
 80142a4:	2001      	movs	r0, #1
 80142a6:	f7fd f8f7 	bl	8011498 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80142aa:	2600      	movs	r6, #0
 80142ac:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 80142b0:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 80142b4:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80142b8:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 80142bc:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 80142c0:	b133      	cbz	r3, 80142d0 <_ZN8touchgfx3HAL4tickEv+0x48>
 80142c2:	6823      	ldr	r3, [r4, #0]
 80142c4:	4620      	mov	r0, r4
 80142c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80142ca:	4798      	blx	r3
 80142cc:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 80142d0:	2601      	movs	r6, #1
 80142d2:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 80142d6:	6862      	ldr	r2, [r4, #4]
 80142d8:	f083 0301 	eor.w	r3, r3, #1
 80142dc:	7253      	strb	r3, [r2, #9]
 80142de:	702e      	strb	r6, [r5, #0]
 80142e0:	f004 faa8 	bl	8018834 <_ZN8touchgfx11Application11getInstanceEv>
 80142e4:	6803      	ldr	r3, [r0, #0]
 80142e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80142e8:	4798      	blx	r3
 80142ea:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 80142ee:	b90b      	cbnz	r3, 80142f4 <_ZN8touchgfx3HAL4tickEv+0x6c>
 80142f0:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 80142f4:	f004 fa9e 	bl	8018834 <_ZN8touchgfx11Application11getInstanceEv>
 80142f8:	6803      	ldr	r3, [r0, #0]
 80142fa:	695b      	ldr	r3, [r3, #20]
 80142fc:	4798      	blx	r3
 80142fe:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8014300:	6803      	ldr	r3, [r0, #0]
 8014302:	691b      	ldr	r3, [r3, #16]
 8014304:	4798      	blx	r3
 8014306:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 801430a:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 801430e:	3b01      	subs	r3, #1
 8014310:	b2db      	uxtb	r3, r3
 8014312:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8014316:	b10a      	cbz	r2, 801431c <_ZN8touchgfx3HAL4tickEv+0x94>
 8014318:	2b00      	cmp	r3, #0
 801431a:	d1eb      	bne.n	80142f4 <_ZN8touchgfx3HAL4tickEv+0x6c>
 801431c:	4a3f      	ldr	r2, [pc, #252]	@ (801441c <_ZN8touchgfx3HAL4tickEv+0x194>)
 801431e:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8014322:	7813      	ldrb	r3, [r2, #0]
 8014324:	3301      	adds	r3, #1
 8014326:	b25b      	sxtb	r3, r3
 8014328:	4299      	cmp	r1, r3
 801432a:	7013      	strb	r3, [r2, #0]
 801432c:	dc10      	bgt.n	8014350 <_ZN8touchgfx3HAL4tickEv+0xc8>
 801432e:	2300      	movs	r3, #0
 8014330:	68e0      	ldr	r0, [r4, #12]
 8014332:	7013      	strb	r3, [r2, #0]
 8014334:	6803      	ldr	r3, [r0, #0]
 8014336:	aa03      	add	r2, sp, #12
 8014338:	68db      	ldr	r3, [r3, #12]
 801433a:	a902      	add	r1, sp, #8
 801433c:	4798      	blx	r3
 801433e:	6823      	ldr	r3, [r4, #0]
 8014340:	2800      	cmp	r0, #0
 8014342:	d059      	beq.n	80143f8 <_ZN8touchgfx3HAL4tickEv+0x170>
 8014344:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014348:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 801434c:	4620      	mov	r0, r4
 801434e:	4798      	blx	r3
 8014350:	2300      	movs	r3, #0
 8014352:	6960      	ldr	r0, [r4, #20]
 8014354:	f88d 3007 	strb.w	r3, [sp, #7]
 8014358:	b158      	cbz	r0, 8014372 <_ZN8touchgfx3HAL4tickEv+0xea>
 801435a:	6803      	ldr	r3, [r0, #0]
 801435c:	f10d 0107 	add.w	r1, sp, #7
 8014360:	68db      	ldr	r3, [r3, #12]
 8014362:	4798      	blx	r3
 8014364:	b128      	cbz	r0, 8014372 <_ZN8touchgfx3HAL4tickEv+0xea>
 8014366:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8014368:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801436c:	6803      	ldr	r3, [r0, #0]
 801436e:	68db      	ldr	r3, [r3, #12]
 8014370:	4798      	blx	r3
 8014372:	f104 001c 	add.w	r0, r4, #28
 8014376:	f015 fe2d 	bl	8029fd4 <_ZN8touchgfx8Gestures4tickEv>
 801437a:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 801437e:	b30b      	cbz	r3, 80143c4 <_ZN8touchgfx3HAL4tickEv+0x13c>
 8014380:	6920      	ldr	r0, [r4, #16]
 8014382:	6803      	ldr	r3, [r0, #0]
 8014384:	691b      	ldr	r3, [r3, #16]
 8014386:	4798      	blx	r3
 8014388:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801438a:	4606      	mov	r6, r0
 801438c:	b903      	cbnz	r3, 8014390 <_ZN8touchgfx3HAL4tickEv+0x108>
 801438e:	6760      	str	r0, [r4, #116]	@ 0x74
 8014390:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8014392:	4a23      	ldr	r2, [pc, #140]	@ (8014420 <_ZN8touchgfx3HAL4tickEv+0x198>)
 8014394:	1af3      	subs	r3, r6, r3
 8014396:	4293      	cmp	r3, r2
 8014398:	d914      	bls.n	80143c4 <_ZN8touchgfx3HAL4tickEv+0x13c>
 801439a:	6920      	ldr	r0, [r4, #16]
 801439c:	6803      	ldr	r3, [r0, #0]
 801439e:	699b      	ldr	r3, [r3, #24]
 80143a0:	4798      	blx	r3
 80143a2:	2264      	movs	r2, #100	@ 0x64
 80143a4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80143a6:	1af3      	subs	r3, r6, r3
 80143a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80143ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80143b0:	2800      	cmp	r0, #0
 80143b2:	dc26      	bgt.n	8014402 <_ZN8touchgfx3HAL4tickEv+0x17a>
 80143b4:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 80143b8:	6920      	ldr	r0, [r4, #16]
 80143ba:	2100      	movs	r1, #0
 80143bc:	6803      	ldr	r3, [r0, #0]
 80143be:	69db      	ldr	r3, [r3, #28]
 80143c0:	4798      	blx	r3
 80143c2:	6766      	str	r6, [r4, #116]	@ 0x74
 80143c4:	6823      	ldr	r3, [r4, #0]
 80143c6:	4620      	mov	r0, r4
 80143c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80143cc:	4798      	blx	r3
 80143ce:	f004 fa31 	bl	8018834 <_ZN8touchgfx11Application11getInstanceEv>
 80143d2:	6803      	ldr	r3, [r0, #0]
 80143d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80143d6:	4798      	blx	r3
 80143d8:	6823      	ldr	r3, [r4, #0]
 80143da:	4620      	mov	r0, r4
 80143dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80143e0:	4798      	blx	r3
 80143e2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80143e6:	2b02      	cmp	r3, #2
 80143e8:	d002      	beq.n	80143f0 <_ZN8touchgfx3HAL4tickEv+0x168>
 80143ea:	2001      	movs	r0, #1
 80143ec:	f7fd f870 	bl	80114d0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80143f0:	2300      	movs	r3, #0
 80143f2:	702b      	strb	r3, [r5, #0]
 80143f4:	b004      	add	sp, #16
 80143f6:	bd70      	pop	{r4, r5, r6, pc}
 80143f8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80143fc:	4620      	mov	r0, r4
 80143fe:	4798      	blx	r3
 8014400:	e7a6      	b.n	8014350 <_ZN8touchgfx3HAL4tickEv+0xc8>
 8014402:	2863      	cmp	r0, #99	@ 0x63
 8014404:	bfcb      	itete	gt
 8014406:	2300      	movgt	r3, #0
 8014408:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 801440c:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8014410:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8014414:	e7d0      	b.n	80143b8 <_ZN8touchgfx3HAL4tickEv+0x130>
 8014416:	bf00      	nop
 8014418:	2005b92c 	.word	0x2005b92c
 801441c:	2005b92d 	.word	0x2005b92d
 8014420:	05f5e100 	.word	0x05f5e100

08014424 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014424:	b510      	push	{r4, lr}
 8014426:	4604      	mov	r4, r0
 8014428:	f7fd fbd8 	bl	8011bdc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 801442c:	2200      	movs	r2, #0
 801442e:	6863      	ldr	r3, [r4, #4]
 8014430:	729a      	strb	r2, [r3, #10]
 8014432:	bd10      	pop	{r4, pc}

08014434 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014434:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8014436:	301c      	adds	r0, #28
 8014438:	f015 bdca 	b.w	8029fd0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801443c <_ZN8touchgfx3HAL5touchEll>:
 801443c:	b530      	push	{r4, r5, lr}
 801443e:	4604      	mov	r4, r0
 8014440:	b087      	sub	sp, #28
 8014442:	a804      	add	r0, sp, #16
 8014444:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8014448:	f003 ffe6 	bl	8018418 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801444c:	9b04      	ldr	r3, [sp, #16]
 801444e:	a906      	add	r1, sp, #24
 8014450:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014454:	9b05      	ldr	r3, [sp, #20]
 8014456:	a803      	add	r0, sp, #12
 8014458:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801445c:	f004 f82e 	bl	80184bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8014460:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8014464:	f104 001c 	add.w	r0, r4, #28
 8014468:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801446c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8014470:	b189      	cbz	r1, 8014496 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8014472:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8014476:	9300      	str	r3, [sp, #0]
 8014478:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 801447c:	4613      	mov	r3, r2
 801447e:	462a      	mov	r2, r5
 8014480:	f015 fdb6 	bl	8029ff0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8014484:	b128      	cbz	r0, 8014492 <_ZN8touchgfx3HAL5touchEll+0x56>
 8014486:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801448a:	6623      	str	r3, [r4, #96]	@ 0x60
 801448c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014490:	6663      	str	r3, [r4, #100]	@ 0x64
 8014492:	b007      	add	sp, #28
 8014494:	bd30      	pop	{r4, r5, pc}
 8014496:	f015 fdeb 	bl	802a070 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801449a:	2301      	movs	r3, #1
 801449c:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80144a0:	e7f1      	b.n	8014486 <_ZN8touchgfx3HAL5touchEll+0x4a>

080144a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80144a2:	b510      	push	{r4, lr}
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d046      	beq.n	8014536 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80144a8:	ea81 0002 	eor.w	r0, r1, r2
 80144ac:	07c4      	lsls	r4, r0, #31
 80144ae:	d508      	bpl.n	80144c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80144b0:	440b      	add	r3, r1
 80144b2:	3a01      	subs	r2, #1
 80144b4:	428b      	cmp	r3, r1
 80144b6:	d93e      	bls.n	8014536 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80144b8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80144bc:	f801 0b01 	strb.w	r0, [r1], #1
 80144c0:	e7f8      	b.n	80144b4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80144c2:	07d0      	lsls	r0, r2, #31
 80144c4:	bf42      	ittt	mi
 80144c6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80144ca:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80144ce:	f801 0b01 	strbmi.w	r0, [r1], #1
 80144d2:	2b01      	cmp	r3, #1
 80144d4:	d911      	bls.n	80144fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80144d6:	ea81 0402 	eor.w	r4, r1, r2
 80144da:	07a4      	lsls	r4, r4, #30
 80144dc:	4610      	mov	r0, r2
 80144de:	d022      	beq.n	8014526 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80144e0:	f023 0401 	bic.w	r4, r3, #1
 80144e4:	440c      	add	r4, r1
 80144e6:	428c      	cmp	r4, r1
 80144e8:	4602      	mov	r2, r0
 80144ea:	d904      	bls.n	80144f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80144ec:	8812      	ldrh	r2, [r2, #0]
 80144ee:	3002      	adds	r0, #2
 80144f0:	f821 2b02 	strh.w	r2, [r1], #2
 80144f4:	e7f7      	b.n	80144e6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80144f6:	f003 0301 	and.w	r3, r3, #1
 80144fa:	f023 0003 	bic.w	r0, r3, #3
 80144fe:	4408      	add	r0, r1
 8014500:	4288      	cmp	r0, r1
 8014502:	4614      	mov	r4, r2
 8014504:	d904      	bls.n	8014510 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8014506:	6824      	ldr	r4, [r4, #0]
 8014508:	3204      	adds	r2, #4
 801450a:	f841 4b04 	str.w	r4, [r1], #4
 801450e:	e7f7      	b.n	8014500 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8014510:	f003 0303 	and.w	r3, r3, #3
 8014514:	440b      	add	r3, r1
 8014516:	3a01      	subs	r2, #1
 8014518:	428b      	cmp	r3, r1
 801451a:	d90c      	bls.n	8014536 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801451c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014520:	f801 0b01 	strb.w	r0, [r1], #1
 8014524:	e7f8      	b.n	8014518 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8014526:	0790      	lsls	r0, r2, #30
 8014528:	d0e7      	beq.n	80144fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801452a:	f832 0b02 	ldrh.w	r0, [r2], #2
 801452e:	3b02      	subs	r3, #2
 8014530:	f821 0b02 	strh.w	r0, [r1], #2
 8014534:	e7e1      	b.n	80144fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014536:	2001      	movs	r0, #1
 8014538:	bd10      	pop	{r4, pc}

0801453a <_ZN8touchgfx3HAL7noTouchEv>:
 801453a:	b510      	push	{r4, lr}
 801453c:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8014540:	4604      	mov	r4, r0
 8014542:	b153      	cbz	r3, 801455a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8014544:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8014548:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 801454c:	2101      	movs	r1, #1
 801454e:	301c      	adds	r0, #28
 8014550:	f015 fd8e 	bl	802a070 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014554:	2300      	movs	r3, #0
 8014556:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 801455a:	bd10      	pop	{r4, pc}

0801455c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801455c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014560:	4604      	mov	r4, r0
 8014562:	2000      	movs	r0, #0
 8014564:	b085      	sub	sp, #20
 8014566:	ad04      	add	r5, sp, #16
 8014568:	f845 0d04 	str.w	r0, [r5, #-4]!
 801456c:	69a0      	ldr	r0, [r4, #24]
 801456e:	4699      	mov	r9, r3
 8014570:	6806      	ldr	r6, [r0, #0]
 8014572:	9501      	str	r5, [sp, #4]
 8014574:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8014578:	460f      	mov	r7, r1
 801457a:	9500      	str	r5, [sp, #0]
 801457c:	6835      	ldr	r5, [r6, #0]
 801457e:	4690      	mov	r8, r2
 8014580:	47a8      	blx	r5
 8014582:	4d10      	ldr	r5, [pc, #64]	@ (80145c4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8014584:	4606      	mov	r6, r0
 8014586:	f8a5 9000 	strh.w	r9, [r5]
 801458a:	f7fb fa5d 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 801458e:	6803      	ldr	r3, [r0, #0]
 8014590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014592:	4798      	blx	r3
 8014594:	b128      	cbz	r0, 80145a2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8014596:	2801      	cmp	r0, #1
 8014598:	d00b      	beq.n	80145b2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801459a:	4630      	mov	r0, r6
 801459c:	b005      	add	sp, #20
 801459e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145a2:	882b      	ldrh	r3, [r5, #0]
 80145a4:	fb08 7203 	mla	r2, r8, r3, r7
 80145a8:	9b03      	ldr	r3, [sp, #12]
 80145aa:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80145ae:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80145b0:	e7f3      	b.n	801459a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80145b2:	882a      	ldrh	r2, [r5, #0]
 80145b4:	9b03      	ldr	r3, [sp, #12]
 80145b6:	fb08 7202 	mla	r2, r8, r2, r7
 80145ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80145be:	1a9a      	subs	r2, r3, r2
 80145c0:	63e2      	str	r2, [r4, #60]	@ 0x3c
 80145c2:	e7ea      	b.n	801459a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80145c4:	2005b922 	.word	0x2005b922

080145c8 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs>:
 80145c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145ca:	4b15      	ldr	r3, [pc, #84]	@ (8014620 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x58>)
 80145cc:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 80145d0:	881b      	ldrh	r3, [r3, #0]
 80145d2:	460f      	mov	r7, r1
 80145d4:	fb93 f4f4 	sdiv	r4, r3, r4
 80145d8:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 80145da:	4606      	mov	r6, r0
 80145dc:	f7fb fa34 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 80145e0:	6803      	ldr	r3, [r0, #0]
 80145e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145e4:	4798      	blx	r3
 80145e6:	2801      	cmp	r0, #1
 80145e8:	d00b      	beq.n	8014602 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x3a>
 80145ea:	d303      	bcc.n	80145f4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x2c>
 80145ec:	2802      	cmp	r0, #2
 80145ee:	d010      	beq.n	8014612 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x4a>
 80145f0:	63f5      	str	r5, [r6, #60]	@ 0x3c
 80145f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145f4:	437c      	muls	r4, r7
 80145f6:	4b0b      	ldr	r3, [pc, #44]	@ (8014624 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 80145f8:	8819      	ldrh	r1, [r3, #0]
 80145fa:	434c      	muls	r4, r1
 80145fc:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 8014600:	e7f6      	b.n	80145f0 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 8014602:	437c      	muls	r4, r7
 8014604:	4b07      	ldr	r3, [pc, #28]	@ (8014624 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 8014606:	8819      	ldrh	r1, [r3, #0]
 8014608:	434c      	muls	r4, r1
 801460a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801460e:	1b2d      	subs	r5, r5, r4
 8014610:	e7ee      	b.n	80145f0 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 8014612:	437c      	muls	r4, r7
 8014614:	4b03      	ldr	r3, [pc, #12]	@ (8014624 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 8014616:	8819      	ldrh	r1, [r3, #0]
 8014618:	434c      	muls	r4, r1
 801461a:	eba5 0584 	sub.w	r5, r5, r4, lsl #2
 801461e:	e7e7      	b.n	80145f0 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 8014620:	2005b924 	.word	0x2005b924
 8014624:	2005b922 	.word	0x2005b922

08014628 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8014628:	b5f0      	push	{r4, r5, r6, r7, lr}
 801462a:	b08b      	sub	sp, #44	@ 0x2c
 801462c:	4617      	mov	r7, r2
 801462e:	4604      	mov	r4, r0
 8014630:	460e      	mov	r6, r1
 8014632:	461d      	mov	r5, r3
 8014634:	f7fb fa08 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 8014638:	6803      	ldr	r3, [r0, #0]
 801463a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801463c:	4798      	blx	r3
 801463e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8014642:	9007      	str	r0, [sp, #28]
 8014644:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014648:	4b0d      	ldr	r3, [pc, #52]	@ (8014680 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801464a:	6822      	ldr	r2, [r4, #0]
 801464c:	881b      	ldrh	r3, [r3, #0]
 801464e:	4631      	mov	r1, r6
 8014650:	9306      	str	r3, [sp, #24]
 8014652:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8014656:	4620      	mov	r0, r4
 8014658:	9305      	str	r3, [sp, #20]
 801465a:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 801465e:	9304      	str	r3, [sp, #16]
 8014660:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014664:	9303      	str	r3, [sp, #12]
 8014666:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801466a:	9302      	str	r3, [sp, #8]
 801466c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8014670:	e9cd 5300 	strd	r5, r3, [sp]
 8014674:	463b      	mov	r3, r7
 8014676:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8014678:	2200      	movs	r2, #0
 801467a:	47a8      	blx	r5
 801467c:	b00b      	add	sp, #44	@ 0x2c
 801467e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014680:	2005b922 	.word	0x2005b922

08014684 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8014684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014688:	4698      	mov	r8, r3
 801468a:	6803      	ldr	r3, [r0, #0]
 801468c:	b08b      	sub	sp, #44	@ 0x2c
 801468e:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 8014690:	4b14      	ldr	r3, [pc, #80]	@ (80146e4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8014692:	4617      	mov	r7, r2
 8014694:	f8b3 9000 	ldrh.w	r9, [r3]
 8014698:	460e      	mov	r6, r1
 801469a:	4604      	mov	r4, r0
 801469c:	f7fb f9d4 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 80146a0:	6803      	ldr	r3, [r0, #0]
 80146a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146a4:	4798      	blx	r3
 80146a6:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80146aa:	2200      	movs	r2, #0
 80146ac:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80146b0:	2302      	movs	r3, #2
 80146b2:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80146b6:	2301      	movs	r3, #1
 80146b8:	9305      	str	r3, [sp, #20]
 80146ba:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80146be:	4631      	mov	r1, r6
 80146c0:	9304      	str	r3, [sp, #16]
 80146c2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80146c6:	4620      	mov	r0, r4
 80146c8:	9303      	str	r3, [sp, #12]
 80146ca:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80146ce:	9302      	str	r3, [sp, #8]
 80146d0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80146d4:	e9cd 8300 	strd	r8, r3, [sp]
 80146d8:	463b      	mov	r3, r7
 80146da:	47a8      	blx	r5
 80146dc:	b00b      	add	sp, #44	@ 0x2c
 80146de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146e2:	bf00      	nop
 80146e4:	2005b922 	.word	0x2005b922

080146e8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80146e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80146ec:	4698      	mov	r8, r3
 80146ee:	6803      	ldr	r3, [r0, #0]
 80146f0:	b087      	sub	sp, #28
 80146f2:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 80146f4:	4b10      	ldr	r3, [pc, #64]	@ (8014738 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80146f6:	460e      	mov	r6, r1
 80146f8:	f8b3 9000 	ldrh.w	r9, [r3]
 80146fc:	4617      	mov	r7, r2
 80146fe:	4604      	mov	r4, r0
 8014700:	f7fb f9a2 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 8014704:	6803      	ldr	r3, [r0, #0]
 8014706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014708:	4798      	blx	r3
 801470a:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 801470e:	f8cd 900c 	str.w	r9, [sp, #12]
 8014712:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8014716:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 801471a:	463a      	mov	r2, r7
 801471c:	9302      	str	r3, [sp, #8]
 801471e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8014722:	4631      	mov	r1, r6
 8014724:	9301      	str	r3, [sp, #4]
 8014726:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801472a:	4620      	mov	r0, r4
 801472c:	9300      	str	r3, [sp, #0]
 801472e:	4643      	mov	r3, r8
 8014730:	47a8      	blx	r5
 8014732:	b007      	add	sp, #28
 8014734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014738:	2005b922 	.word	0x2005b922

0801473c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801473c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014740:	4604      	mov	r4, r0
 8014742:	b08f      	sub	sp, #60	@ 0x3c
 8014744:	4610      	mov	r0, r2
 8014746:	460d      	mov	r5, r1
 8014748:	4691      	mov	r9, r2
 801474a:	461e      	mov	r6, r3
 801474c:	f007 f95a 	bl	801ba04 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014750:	2800      	cmp	r0, #0
 8014752:	f000 809d 	beq.w	8014890 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8014756:	6823      	ldr	r3, [r4, #0]
 8014758:	4620      	mov	r0, r4
 801475a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801475c:	4798      	blx	r3
 801475e:	6823      	ldr	r3, [r4, #0]
 8014760:	f8df b190 	ldr.w	fp, [pc, #400]	@ 80148f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8014764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014766:	4620      	mov	r0, r4
 8014768:	4798      	blx	r3
 801476a:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 80148f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801476e:	f8bb 3000 	ldrh.w	r3, [fp]
 8014772:	4f5d      	ldr	r7, [pc, #372]	@ (80148e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014774:	9301      	str	r3, [sp, #4]
 8014776:	f8ba 3000 	ldrh.w	r3, [sl]
 801477a:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 801477e:	9302      	str	r3, [sp, #8]
 8014780:	883b      	ldrh	r3, [r7, #0]
 8014782:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8014786:	9303      	str	r3, [sp, #12]
 8014788:	4b58      	ldr	r3, [pc, #352]	@ (80148ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801478a:	4640      	mov	r0, r8
 801478c:	881a      	ldrh	r2, [r3, #0]
 801478e:	9305      	str	r3, [sp, #20]
 8014790:	9204      	str	r2, [sp, #16]
 8014792:	f007 f9cb 	bl	801bb2c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014796:	8038      	strh	r0, [r7, #0]
 8014798:	4640      	mov	r0, r8
 801479a:	f007 f9fb 	bl	801bb94 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801479e:	9b05      	ldr	r3, [sp, #20]
 80147a0:	b280      	uxth	r0, r0
 80147a2:	8018      	strh	r0, [r3, #0]
 80147a4:	4b52      	ldr	r3, [pc, #328]	@ (80148f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80147a6:	781b      	ldrb	r3, [r3, #0]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d174      	bne.n	8014896 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80147ac:	883b      	ldrh	r3, [r7, #0]
 80147ae:	f8aa 0000 	strh.w	r0, [sl]
 80147b2:	f8ab 3000 	strh.w	r3, [fp]
 80147b6:	4648      	mov	r0, r9
 80147b8:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 80147bc:	f007 f922 	bl	801ba04 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80147c0:	2200      	movs	r2, #0
 80147c2:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80147c6:	4611      	mov	r1, r2
 80147c8:	4628      	mov	r0, r5
 80147ca:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80147ce:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80147d2:	f7fb fe9c 	bl	801050e <_ZN8touchgfx8Drawable5setXYEss>
 80147d6:	2301      	movs	r3, #1
 80147d8:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 80147dc:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80147e0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	dd5c      	ble.n	80148a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80147e8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	dd58      	ble.n	80148a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80147f0:	462a      	mov	r2, r5
 80147f2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80147f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80147f8:	6851      	ldr	r1, [r2, #4]
 80147fa:	c303      	stmia	r3!, {r0, r1}
 80147fc:	4631      	mov	r1, r6
 80147fe:	a80a      	add	r0, sp, #40	@ 0x28
 8014800:	f7ff fbb6 	bl	8013f70 <_ZN8touchgfx4RectaNERKS0_>
 8014804:	2100      	movs	r1, #0
 8014806:	4b38      	ldr	r3, [pc, #224]	@ (80148e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014808:	910c      	str	r1, [sp, #48]	@ 0x30
 801480a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801480e:	4b37      	ldr	r3, [pc, #220]	@ (80148ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014810:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8014814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014818:	aa0a      	add	r2, sp, #40	@ 0x28
 801481a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801481e:	ab08      	add	r3, sp, #32
 8014820:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014824:	e883 0003 	stmia.w	r3, {r0, r1}
 8014828:	4618      	mov	r0, r3
 801482a:	a90c      	add	r1, sp, #48	@ 0x30
 801482c:	f7ff fba0 	bl	8013f70 <_ZN8touchgfx4RectaNERKS0_>
 8014830:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8014832:	2b00      	cmp	r3, #0
 8014834:	d13c      	bne.n	80148b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8014836:	2000      	movs	r0, #0
 8014838:	2600      	movs	r6, #0
 801483a:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 801483e:	696b      	ldr	r3, [r5, #20]
 8014840:	682a      	ldr	r2, [r5, #0]
 8014842:	616e      	str	r6, [r5, #20]
 8014844:	9305      	str	r3, [sp, #20]
 8014846:	6892      	ldr	r2, [r2, #8]
 8014848:	a908      	add	r1, sp, #32
 801484a:	4628      	mov	r0, r5
 801484c:	4790      	blx	r2
 801484e:	9b05      	ldr	r3, [sp, #20]
 8014850:	4652      	mov	r2, sl
 8014852:	616b      	str	r3, [r5, #20]
 8014854:	4649      	mov	r1, r9
 8014856:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 801485a:	4628      	mov	r0, r5
 801485c:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8014860:	f7fb fe55 	bl	801050e <_ZN8touchgfx8Drawable5setXYEss>
 8014864:	9a01      	ldr	r2, [sp, #4]
 8014866:	4b23      	ldr	r3, [pc, #140]	@ (80148f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8014868:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 801486c:	801a      	strh	r2, [r3, #0]
 801486e:	9a02      	ldr	r2, [sp, #8]
 8014870:	4b21      	ldr	r3, [pc, #132]	@ (80148f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8014872:	4620      	mov	r0, r4
 8014874:	801a      	strh	r2, [r3, #0]
 8014876:	9a03      	ldr	r2, [sp, #12]
 8014878:	4b1b      	ldr	r3, [pc, #108]	@ (80148e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801487a:	801a      	strh	r2, [r3, #0]
 801487c:	4b1b      	ldr	r3, [pc, #108]	@ (80148ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801487e:	9a04      	ldr	r2, [sp, #16]
 8014880:	801a      	strh	r2, [r3, #0]
 8014882:	6823      	ldr	r3, [r4, #0]
 8014884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014886:	4798      	blx	r3
 8014888:	6823      	ldr	r3, [r4, #0]
 801488a:	4620      	mov	r0, r4
 801488c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801488e:	4798      	blx	r3
 8014890:	b00f      	add	sp, #60	@ 0x3c
 8014892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014896:	883b      	ldrh	r3, [r7, #0]
 8014898:	f8ab 0000 	strh.w	r0, [fp]
 801489c:	f8aa 3000 	strh.w	r3, [sl]
 80148a0:	e789      	b.n	80147b6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80148a2:	462a      	mov	r2, r5
 80148a4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80148a8:	ab0a      	add	r3, sp, #40	@ 0x28
 80148aa:	6851      	ldr	r1, [r2, #4]
 80148ac:	c303      	stmia	r3!, {r0, r1}
 80148ae:	e7a9      	b.n	8014804 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80148b0:	a807      	add	r0, sp, #28
 80148b2:	f007 fab1 	bl	801be18 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80148b6:	4606      	mov	r6, r0
 80148b8:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80148ba:	6803      	ldr	r3, [r0, #0]
 80148bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148be:	4798      	blx	r3
 80148c0:	4286      	cmp	r6, r0
 80148c2:	d1b8      	bne.n	8014836 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80148c4:	f7fb f8c0 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 80148c8:	6803      	ldr	r3, [r0, #0]
 80148ca:	4606      	mov	r6, r0
 80148cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80148ce:	a807      	add	r0, sp, #28
 80148d0:	9305      	str	r3, [sp, #20]
 80148d2:	f007 faa1 	bl	801be18 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80148d6:	9b05      	ldr	r3, [sp, #20]
 80148d8:	4601      	mov	r1, r0
 80148da:	4630      	mov	r0, r6
 80148dc:	4798      	blx	r3
 80148de:	f080 0001 	eor.w	r0, r0, #1
 80148e2:	b2c0      	uxtb	r0, r0
 80148e4:	e7a8      	b.n	8014838 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80148e6:	bf00      	nop
 80148e8:	2005b91c 	.word	0x2005b91c
 80148ec:	2005b91e 	.word	0x2005b91e
 80148f0:	2005b920 	.word	0x2005b920
 80148f4:	2005b922 	.word	0x2005b922
 80148f8:	2005b924 	.word	0x2005b924

080148fc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80148fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014900:	461d      	mov	r5, r3
 8014902:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014906:	2400      	movs	r4, #0
 8014908:	b08a      	sub	sp, #40	@ 0x28
 801490a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801490e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8014912:	4690      	mov	r8, r2
 8014914:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014918:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801491c:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8014920:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014924:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014928:	4607      	mov	r7, r0
 801492a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801492e:	9404      	str	r4, [sp, #16]
 8014930:	f88d 4020 	strb.w	r4, [sp, #32]
 8014934:	f7fc ff44 	bl	80117c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014938:	fb06 8505 	mla	r5, r6, r5, r8
 801493c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014940:	6878      	ldr	r0, [r7, #4]
 8014942:	9505      	str	r5, [sp, #20]
 8014944:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014948:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801494c:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8014950:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8014954:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8014958:	6803      	ldr	r3, [r0, #0]
 801495a:	a901      	add	r1, sp, #4
 801495c:	685b      	ldr	r3, [r3, #4]
 801495e:	4798      	blx	r3
 8014960:	b00a      	add	sp, #40	@ 0x28
 8014962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014966 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8014966:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801496a:	2400      	movs	r4, #0
 801496c:	461d      	mov	r5, r3
 801496e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014972:	4691      	mov	r9, r2
 8014974:	b08b      	sub	sp, #44	@ 0x2c
 8014976:	4688      	mov	r8, r1
 8014978:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 801497c:	4607      	mov	r7, r0
 801497e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014982:	9404      	str	r4, [sp, #16]
 8014984:	f7fc ff1c 	bl	80117c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014988:	fb06 9505 	mla	r5, r6, r5, r9
 801498c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014990:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014994:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014998:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	9505      	str	r5, [sp, #20]
 80149a0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80149a4:	f8ad 401c 	strh.w	r4, [sp, #28]
 80149a8:	f8ad 601e 	strh.w	r6, [sp, #30]
 80149ac:	f8cd 8010 	str.w	r8, [sp, #16]
 80149b0:	f8ad 4020 	strh.w	r4, [sp, #32]
 80149b4:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80149b8:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80149bc:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80149c0:	6803      	ldr	r3, [r0, #0]
 80149c2:	a901      	add	r1, sp, #4
 80149c4:	685b      	ldr	r3, [r3, #4]
 80149c6:	4798      	blx	r3
 80149c8:	b00b      	add	sp, #44	@ 0x2c
 80149ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080149d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80149d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149d4:	4698      	mov	r8, r3
 80149d6:	2300      	movs	r3, #0
 80149d8:	b08a      	sub	sp, #40	@ 0x28
 80149da:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80149de:	4606      	mov	r6, r0
 80149e0:	2d0b      	cmp	r5, #11
 80149e2:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80149e6:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 80149ea:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 80149ee:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 80149f2:	9304      	str	r3, [sp, #16]
 80149f4:	d137      	bne.n	8014a66 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80149f6:	2380      	movs	r3, #128	@ 0x80
 80149f8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80149fc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8014a00:	f88d 0020 	strb.w	r0, [sp, #32]
 8014a04:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014a08:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014a0c:	4630      	mov	r0, r6
 8014a0e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014a12:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8014a16:	9203      	str	r2, [sp, #12]
 8014a18:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014a1c:	f7fc fed0 	bl	80117c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014a20:	2c0b      	cmp	r4, #11
 8014a22:	bf8c      	ite	hi
 8014a24:	2100      	movhi	r1, #0
 8014a26:	4b1b      	ldrls	r3, [pc, #108]	@ (8014a94 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8014a28:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8014a2c:	bf98      	it	ls
 8014a2e:	5d19      	ldrbls	r1, [r3, r4]
 8014a30:	fb02 8307 	mla	r3, r2, r7, r8
 8014a34:	10c9      	asrs	r1, r1, #3
 8014a36:	fb01 0003 	mla	r0, r1, r3, r0
 8014a3a:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8014a3e:	9005      	str	r0, [sp, #20]
 8014a40:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8014a44:	2300      	movs	r3, #0
 8014a46:	6870      	ldr	r0, [r6, #4]
 8014a48:	f8ad 701e 	strh.w	r7, [sp, #30]
 8014a4c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8014a50:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8014a54:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8014a58:	6803      	ldr	r3, [r0, #0]
 8014a5a:	a901      	add	r1, sp, #4
 8014a5c:	685b      	ldr	r3, [r3, #4]
 8014a5e:	4798      	blx	r3
 8014a60:	b00a      	add	sp, #40	@ 0x28
 8014a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a66:	2d02      	cmp	r5, #2
 8014a68:	d109      	bne.n	8014a7e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8014a6a:	28ff      	cmp	r0, #255	@ 0xff
 8014a6c:	d105      	bne.n	8014a7a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8014a6e:	f1bc 0f00 	cmp.w	ip, #0
 8014a72:	bf14      	ite	ne
 8014a74:	2340      	movne	r3, #64	@ 0x40
 8014a76:	2320      	moveq	r3, #32
 8014a78:	e7be      	b.n	80149f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014a7a:	2340      	movs	r3, #64	@ 0x40
 8014a7c:	e7bc      	b.n	80149f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014a7e:	28ff      	cmp	r0, #255	@ 0xff
 8014a80:	d105      	bne.n	8014a8e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8014a82:	f1bc 0f00 	cmp.w	ip, #0
 8014a86:	bf14      	ite	ne
 8014a88:	2304      	movne	r3, #4
 8014a8a:	2301      	moveq	r3, #1
 8014a8c:	e7b4      	b.n	80149f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014a8e:	2304      	movs	r3, #4
 8014a90:	e7b2      	b.n	80149f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014a92:	bf00      	nop
 8014a94:	0802e2d8 	.word	0x0802e2d8

08014a98 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8014a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a9c:	b08b      	sub	sp, #44	@ 0x2c
 8014a9e:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8014aa2:	461d      	mov	r5, r3
 8014aa4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8014aa8:	bf14      	ite	ne
 8014aaa:	2308      	movne	r3, #8
 8014aac:	2302      	moveq	r3, #2
 8014aae:	2400      	movs	r4, #0
 8014ab0:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8014ab4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014ab8:	4688      	mov	r8, r1
 8014aba:	4693      	mov	fp, r2
 8014abc:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8014ac0:	9404      	str	r4, [sp, #16]
 8014ac2:	4607      	mov	r7, r0
 8014ac4:	f7fc fe7c 	bl	80117c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014ac8:	2e0b      	cmp	r6, #11
 8014aca:	bf98      	it	ls
 8014acc:	4b15      	ldrls	r3, [pc, #84]	@ (8014b24 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8014ace:	fb05 b50a 	mla	r5, r5, sl, fp
 8014ad2:	bf98      	it	ls
 8014ad4:	5d9c      	ldrbls	r4, [r3, r6]
 8014ad6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8014ada:	10e4      	asrs	r4, r4, #3
 8014adc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014ae0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8014ae4:	fb04 0405 	mla	r4, r4, r5, r0
 8014ae8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014aec:	2300      	movs	r3, #0
 8014aee:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8014af2:	6878      	ldr	r0, [r7, #4]
 8014af4:	9405      	str	r4, [sp, #20]
 8014af6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014afa:	f8ad a01e 	strh.w	sl, [sp, #30]
 8014afe:	f8cd 8010 	str.w	r8, [sp, #16]
 8014b02:	f88d 9020 	strb.w	r9, [sp, #32]
 8014b06:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8014b0a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8014b0e:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8014b12:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8014b16:	6803      	ldr	r3, [r0, #0]
 8014b18:	a901      	add	r1, sp, #4
 8014b1a:	685b      	ldr	r3, [r3, #4]
 8014b1c:	4798      	blx	r3
 8014b1e:	b00b      	add	sp, #44	@ 0x2c
 8014b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b24:	0802e2d8 	.word	0x0802e2d8

08014b28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8014b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b2c:	461e      	mov	r6, r3
 8014b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8014b58 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8014b30:	460f      	mov	r7, r1
 8014b32:	881d      	ldrh	r5, [r3, #0]
 8014b34:	4690      	mov	r8, r2
 8014b36:	f7fa ff87 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 8014b3a:	6803      	ldr	r3, [r0, #0]
 8014b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b3e:	4798      	blx	r3
 8014b40:	280b      	cmp	r0, #11
 8014b42:	bf8e      	itee	hi
 8014b44:	2400      	movhi	r4, #0
 8014b46:	4b05      	ldrls	r3, [pc, #20]	@ (8014b5c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8014b48:	5c1c      	ldrbls	r4, [r3, r0]
 8014b4a:	fb08 7005 	mla	r0, r8, r5, r7
 8014b4e:	10e4      	asrs	r4, r4, #3
 8014b50:	fb04 6000 	mla	r0, r4, r0, r6
 8014b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b58:	2005b922 	.word	0x2005b922
 8014b5c:	0802e2d8 	.word	0x0802e2d8

08014b60 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8014b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b62:	2500      	movs	r5, #0
 8014b64:	b08b      	sub	sp, #44	@ 0x2c
 8014b66:	461f      	mov	r7, r3
 8014b68:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8014b6c:	4604      	mov	r4, r0
 8014b6e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014b72:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8014b76:	4616      	mov	r6, r2
 8014b78:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014b7c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8014b80:	9504      	str	r5, [sp, #16]
 8014b82:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014b86:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014b8a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014b8e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8014b92:	f88d 3020 	strb.w	r3, [sp, #32]
 8014b96:	f7fc fe13 	bl	80117c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014b9a:	463a      	mov	r2, r7
 8014b9c:	4631      	mov	r1, r6
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	4620      	mov	r0, r4
 8014ba2:	f7ff ffc1 	bl	8014b28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8014be0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8014ba8:	9005      	str	r0, [sp, #20]
 8014baa:	881b      	ldrh	r3, [r3, #0]
 8014bac:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014bb0:	f7fa ff4a 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 8014bb4:	6803      	ldr	r3, [r0, #0]
 8014bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014bb8:	4798      	blx	r3
 8014bba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014bbc:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8014bc0:	9304      	str	r3, [sp, #16]
 8014bc2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8014bc6:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8014bca:	6860      	ldr	r0, [r4, #4]
 8014bcc:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8014bd0:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8014bd4:	6803      	ldr	r3, [r0, #0]
 8014bd6:	a901      	add	r1, sp, #4
 8014bd8:	685b      	ldr	r3, [r3, #4]
 8014bda:	4798      	blx	r3
 8014bdc:	b00b      	add	sp, #44	@ 0x2c
 8014bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014be0:	2005b922 	.word	0x2005b922

08014be4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8014be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014be6:	b08d      	sub	sp, #52	@ 0x34
 8014be8:	466b      	mov	r3, sp
 8014bea:	e883 0006 	stmia.w	r3, {r1, r2}
 8014bee:	2300      	movs	r3, #0
 8014bf0:	2501      	movs	r5, #1
 8014bf2:	9306      	str	r3, [sp, #24]
 8014bf4:	6803      	ldr	r3, [r0, #0]
 8014bf6:	9503      	str	r5, [sp, #12]
 8014bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014bfa:	4604      	mov	r4, r0
 8014bfc:	f8bd 6000 	ldrh.w	r6, [sp]
 8014c00:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8014c04:	4798      	blx	r3
 8014c06:	463a      	mov	r2, r7
 8014c08:	4631      	mov	r1, r6
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	4620      	mov	r0, r4
 8014c0e:	f7ff ff8b 	bl	8014b28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014c12:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8014c14:	9004      	str	r0, [sp, #16]
 8014c16:	9307      	str	r3, [sp, #28]
 8014c18:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014c1c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014c20:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014c24:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8014c28:	4b0e      	ldr	r3, [pc, #56]	@ (8014c64 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8014c2a:	881b      	ldrh	r3, [r3, #0]
 8014c2c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8014c30:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8014c34:	f7fa ff08 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 8014c38:	6803      	ldr	r3, [r0, #0]
 8014c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c3c:	4798      	blx	r3
 8014c3e:	23ff      	movs	r3, #255	@ 0xff
 8014c40:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8014c44:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8014c48:	6860      	ldr	r0, [r4, #4]
 8014c4a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8014c4e:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8014c52:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8014c56:	6803      	ldr	r3, [r0, #0]
 8014c58:	a903      	add	r1, sp, #12
 8014c5a:	685b      	ldr	r3, [r3, #4]
 8014c5c:	4798      	blx	r3
 8014c5e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8014c60:	b00d      	add	sp, #52	@ 0x34
 8014c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c64:	2005b922 	.word	0x2005b922

08014c68 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8014c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c6c:	b08c      	sub	sp, #48	@ 0x30
 8014c6e:	466d      	mov	r5, sp
 8014c70:	461e      	mov	r6, r3
 8014c72:	2300      	movs	r3, #0
 8014c74:	e885 0006 	stmia.w	r5, {r1, r2}
 8014c78:	2501      	movs	r5, #1
 8014c7a:	9306      	str	r3, [sp, #24]
 8014c7c:	6803      	ldr	r3, [r0, #0]
 8014c7e:	9503      	str	r5, [sp, #12]
 8014c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c82:	4604      	mov	r4, r0
 8014c84:	f8bd 7000 	ldrh.w	r7, [sp]
 8014c88:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8014c8c:	4798      	blx	r3
 8014c8e:	4642      	mov	r2, r8
 8014c90:	4639      	mov	r1, r7
 8014c92:	4603      	mov	r3, r0
 8014c94:	4620      	mov	r0, r4
 8014c96:	f7ff ff47 	bl	8014b28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014c9a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014c9e:	9004      	str	r0, [sp, #16]
 8014ca0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014ca4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014ca8:	9607      	str	r6, [sp, #28]
 8014caa:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8014cae:	4b10      	ldr	r3, [pc, #64]	@ (8014cf0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8014cb0:	881b      	ldrh	r3, [r3, #0]
 8014cb2:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8014cb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014cb8:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8014cbc:	f7fa fec4 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 8014cc0:	6803      	ldr	r3, [r0, #0]
 8014cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cc4:	4798      	blx	r3
 8014cc6:	23ff      	movs	r3, #255	@ 0xff
 8014cc8:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8014ccc:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8014cd0:	6860      	ldr	r0, [r4, #4]
 8014cd2:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8014cd6:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8014cda:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8014cde:	6803      	ldr	r3, [r0, #0]
 8014ce0:	a903      	add	r1, sp, #12
 8014ce2:	685b      	ldr	r3, [r3, #4]
 8014ce4:	4798      	blx	r3
 8014ce6:	4630      	mov	r0, r6
 8014ce8:	b00c      	add	sp, #48	@ 0x30
 8014cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cee:	bf00      	nop
 8014cf0:	2005b922 	.word	0x2005b922

08014cf4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8014cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cf6:	b085      	sub	sp, #20
 8014cf8:	ac02      	add	r4, sp, #8
 8014cfa:	e884 0006 	stmia.w	r4, {r1, r2}
 8014cfe:	4605      	mov	r5, r0
 8014d00:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8014d04:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8014d08:	f7fc fd5a 	bl	80117c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014d0c:	463a      	mov	r2, r7
 8014d0e:	4603      	mov	r3, r0
 8014d10:	4631      	mov	r1, r6
 8014d12:	4628      	mov	r0, r5
 8014d14:	f7ff ff08 	bl	8014b28 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014d18:	4a05      	ldr	r2, [pc, #20]	@ (8014d30 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8014d1a:	682b      	ldr	r3, [r5, #0]
 8014d1c:	8812      	ldrh	r2, [r2, #0]
 8014d1e:	9200      	str	r2, [sp, #0]
 8014d20:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 8014d22:	e894 0006 	ldmia.w	r4, {r1, r2}
 8014d26:	4603      	mov	r3, r0
 8014d28:	4628      	mov	r0, r5
 8014d2a:	47b0      	blx	r6
 8014d2c:	b005      	add	sp, #20
 8014d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d30:	2005b922 	.word	0x2005b922

08014d34 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8014d34:	b570      	push	{r4, r5, r6, lr}
 8014d36:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8014d3a:	4604      	mov	r4, r0
 8014d3c:	b19b      	cbz	r3, 8014d66 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8014d3e:	2002      	movs	r0, #2
 8014d40:	f7fc fbe2 	bl	8011508 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8014d44:	2300      	movs	r3, #0
 8014d46:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8014d4a:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8014d4e:	6823      	ldr	r3, [r4, #0]
 8014d50:	4620      	mov	r0, r4
 8014d52:	f8d3 50c8 	ldr.w	r5, [r3, #200]	@ 0xc8
 8014d56:	f7fc fd33 	bl	80117c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014d5a:	462b      	mov	r3, r5
 8014d5c:	4601      	mov	r1, r0
 8014d5e:	4620      	mov	r0, r4
 8014d60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d64:	4718      	bx	r3
 8014d66:	bd70      	pop	{r4, r5, r6, pc}

08014d68 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8014d68:	b538      	push	{r3, r4, r5, lr}
 8014d6a:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8014d6e:	4604      	mov	r4, r0
 8014d70:	428b      	cmp	r3, r1
 8014d72:	460d      	mov	r5, r1
 8014d74:	d006      	beq.n	8014d84 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8014d76:	6803      	ldr	r3, [r0, #0]
 8014d78:	b929      	cbnz	r1, 8014d86 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8014d7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8014d7e:	4798      	blx	r3
 8014d80:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8014d84:	bd38      	pop	{r3, r4, r5, pc}
 8014d86:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8014d8a:	e7f8      	b.n	8014d7e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08014d8c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8014d8c:	b510      	push	{r4, lr}
 8014d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8014dc0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x34>)
 8014d90:	4604      	mov	r4, r0
 8014d92:	781b      	ldrb	r3, [r3, #0]
 8014d94:	b953      	cbnz	r3, 8014dac <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8014d96:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8014d9a:	b93b      	cbnz	r3, 8014dac <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8014d9c:	6840      	ldr	r0, [r0, #4]
 8014d9e:	f000 f927 	bl	8014ff0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8014da2:	b118      	cbz	r0, 8014dac <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8014da4:	6862      	ldr	r2, [r4, #4]
 8014da6:	7a53      	ldrb	r3, [r2, #9]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d0fc      	beq.n	8014da6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1a>
 8014dac:	f7fc ff08 	bl	8011bc0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014db0:	4620      	mov	r0, r4
 8014db2:	2100      	movs	r1, #0
 8014db4:	f7ff ffd8 	bl	8014d68 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014db8:	4620      	mov	r0, r4
 8014dba:	f7fc fd01 	bl	80117c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014dbe:	bd10      	pop	{r4, pc}
 8014dc0:	2005b926 	.word	0x2005b926

08014dc4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8014dc4:	b570      	push	{r4, r5, r6, lr}
 8014dc6:	4604      	mov	r4, r0
 8014dc8:	6803      	ldr	r3, [r0, #0]
 8014dca:	b919      	cbnz	r1, 8014dd4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8014dcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014dd2:	4718      	bx	r3
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8014dda:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 8014dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014de0:	4798      	blx	r3
 8014de2:	2101      	movs	r1, #1
 8014de4:	4605      	mov	r5, r0
 8014de6:	6863      	ldr	r3, [r4, #4]
 8014de8:	4620      	mov	r0, r4
 8014dea:	7299      	strb	r1, [r3, #10]
 8014dec:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8014df0:	f7ff ffba 	bl	8014d68 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014df4:	4628      	mov	r0, r5
 8014df6:	bd70      	pop	{r4, r5, r6, pc}

08014df8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8014df8:	4770      	bx	lr

08014dfa <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8014dfa:	2000      	movs	r0, #0
 8014dfc:	4770      	bx	lr

08014dfe <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8014dfe:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8014e02:	1a13      	subs	r3, r2, r0
 8014e04:	4258      	negs	r0, r3
 8014e06:	4158      	adcs	r0, r3
 8014e08:	4770      	bx	lr

08014e0a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8014e0a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8014e0e:	1a9b      	subs	r3, r3, r2
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	bfdc      	itt	le
 8014e14:	6882      	ldrle	r2, [r0, #8]
 8014e16:	189b      	addle	r3, r3, r2
 8014e18:	2b01      	cmp	r3, #1
 8014e1a:	bfcc      	ite	gt
 8014e1c:	2000      	movgt	r0, #0
 8014e1e:	2001      	movle	r0, #1
 8014e20:	4770      	bx	lr

08014e22 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8014e22:	6902      	ldr	r2, [r0, #16]
 8014e24:	6843      	ldr	r3, [r0, #4]
 8014e26:	2024      	movs	r0, #36	@ 0x24
 8014e28:	fb00 3002 	mla	r0, r0, r2, r3
 8014e2c:	4770      	bx	lr

08014e2e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8014e2e:	6803      	ldr	r3, [r0, #0]
 8014e30:	691b      	ldr	r3, [r3, #16]
 8014e32:	4718      	bx	r3

08014e34 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8014e34:	2301      	movs	r3, #1
 8014e36:	b570      	push	{r4, r5, r6, lr}
 8014e38:	7203      	strb	r3, [r0, #8]
 8014e3a:	4604      	mov	r4, r0
 8014e3c:	6840      	ldr	r0, [r0, #4]
 8014e3e:	6803      	ldr	r3, [r0, #0]
 8014e40:	699b      	ldr	r3, [r3, #24]
 8014e42:	4798      	blx	r3
 8014e44:	6803      	ldr	r3, [r0, #0]
 8014e46:	4605      	mov	r5, r0
 8014e48:	2b40      	cmp	r3, #64	@ 0x40
 8014e4a:	d00c      	beq.n	8014e66 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014e4c:	d810      	bhi.n	8014e70 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8014e4e:	2b04      	cmp	r3, #4
 8014e50:	d01d      	beq.n	8014e8e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8014e52:	d804      	bhi.n	8014e5e <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8014e54:	2b01      	cmp	r3, #1
 8014e56:	d006      	beq.n	8014e66 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014e58:	2b02      	cmp	r3, #2
 8014e5a:	d02c      	beq.n	8014eb6 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8014e5c:	bd70      	pop	{r4, r5, r6, pc}
 8014e5e:	2b08      	cmp	r3, #8
 8014e60:	d01d      	beq.n	8014e9e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8014e62:	2b20      	cmp	r3, #32
 8014e64:	d1fa      	bne.n	8014e5c <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8014e66:	6823      	ldr	r3, [r4, #0]
 8014e68:	4620      	mov	r0, r4
 8014e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e6c:	4798      	blx	r3
 8014e6e:	e013      	b.n	8014e98 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8014e70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014e74:	d0f7      	beq.n	8014e66 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014e76:	d804      	bhi.n	8014e82 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8014e78:	2b80      	cmp	r3, #128	@ 0x80
 8014e7a:	d0f4      	beq.n	8014e66 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014e80:	e7f0      	b.n	8014e64 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8014e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014e86:	d0ee      	beq.n	8014e66 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014e88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014e8c:	e7e5      	b.n	8014e5a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8014e8e:	6823      	ldr	r3, [r4, #0]
 8014e90:	7f01      	ldrb	r1, [r0, #28]
 8014e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014e94:	4620      	mov	r0, r4
 8014e96:	4798      	blx	r3
 8014e98:	6823      	ldr	r3, [r4, #0]
 8014e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014e9c:	e006      	b.n	8014eac <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8014e9e:	6823      	ldr	r3, [r4, #0]
 8014ea0:	7f01      	ldrb	r1, [r0, #28]
 8014ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014ea4:	4620      	mov	r0, r4
 8014ea6:	4798      	blx	r3
 8014ea8:	6823      	ldr	r3, [r4, #0]
 8014eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014eac:	4629      	mov	r1, r5
 8014eae:	4620      	mov	r0, r4
 8014eb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014eb4:	4718      	bx	r3
 8014eb6:	6823      	ldr	r3, [r4, #0]
 8014eb8:	4620      	mov	r0, r4
 8014eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014ebc:	4798      	blx	r3
 8014ebe:	e7f3      	b.n	8014ea8 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08014ec0 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8014ec0:	4770      	bx	lr

08014ec2 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8014ec2:	4770      	bx	lr

08014ec4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8014ec4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8014ec8:	1ad2      	subs	r2, r2, r3
 8014eca:	2a00      	cmp	r2, #0
 8014ecc:	b510      	push	{r4, lr}
 8014ece:	bfdc      	itt	le
 8014ed0:	6884      	ldrle	r4, [r0, #8]
 8014ed2:	1912      	addle	r2, r2, r4
 8014ed4:	2a01      	cmp	r2, #1
 8014ed6:	dd16      	ble.n	8014f06 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8014ed8:	2424      	movs	r4, #36	@ 0x24
 8014eda:	6842      	ldr	r2, [r0, #4]
 8014edc:	fb04 2303 	mla	r3, r4, r3, r2
 8014ee0:	f101 0220 	add.w	r2, r1, #32
 8014ee4:	f851 4b04 	ldr.w	r4, [r1], #4
 8014ee8:	4291      	cmp	r1, r2
 8014eea:	f843 4b04 	str.w	r4, [r3], #4
 8014eee:	d1f9      	bne.n	8014ee4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8014ef0:	780a      	ldrb	r2, [r1, #0]
 8014ef2:	701a      	strb	r2, [r3, #0]
 8014ef4:	68c3      	ldr	r3, [r0, #12]
 8014ef6:	6882      	ldr	r2, [r0, #8]
 8014ef8:	3301      	adds	r3, #1
 8014efa:	429a      	cmp	r2, r3
 8014efc:	bfd8      	it	le
 8014efe:	1a9b      	suble	r3, r3, r2
 8014f00:	f3bf 8f5b 	dmb	ish
 8014f04:	60c3      	str	r3, [r0, #12]
 8014f06:	bd10      	pop	{r4, pc}

08014f08 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8014f08:	6903      	ldr	r3, [r0, #16]
 8014f0a:	6882      	ldr	r2, [r0, #8]
 8014f0c:	3301      	adds	r3, #1
 8014f0e:	429a      	cmp	r2, r3
 8014f10:	bfd8      	it	le
 8014f12:	1a9b      	suble	r3, r3, r2
 8014f14:	f3bf 8f5b 	dmb	ish
 8014f18:	6103      	str	r3, [r0, #16]
 8014f1a:	4770      	bx	lr

08014f1c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8014f1c:	b570      	push	{r4, r5, r6, lr}
 8014f1e:	4604      	mov	r4, r0
 8014f20:	460e      	mov	r6, r1
 8014f22:	6860      	ldr	r0, [r4, #4]
 8014f24:	6803      	ldr	r3, [r0, #0]
 8014f26:	685b      	ldr	r3, [r3, #4]
 8014f28:	4798      	blx	r3
 8014f2a:	2800      	cmp	r0, #0
 8014f2c:	d1f9      	bne.n	8014f22 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8014f2e:	4d0d      	ldr	r5, [pc, #52]	@ (8014f64 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8014f30:	6828      	ldr	r0, [r5, #0]
 8014f32:	6803      	ldr	r3, [r0, #0]
 8014f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014f38:	4798      	blx	r3
 8014f3a:	f7fc fe5b 	bl	8011bf4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8014f3e:	6828      	ldr	r0, [r5, #0]
 8014f40:	2101      	movs	r1, #1
 8014f42:	f7ff ff11 	bl	8014d68 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014f46:	6860      	ldr	r0, [r4, #4]
 8014f48:	4631      	mov	r1, r6
 8014f4a:	6803      	ldr	r3, [r0, #0]
 8014f4c:	689b      	ldr	r3, [r3, #8]
 8014f4e:	4798      	blx	r3
 8014f50:	6823      	ldr	r3, [r4, #0]
 8014f52:	4620      	mov	r0, r4
 8014f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f56:	4798      	blx	r3
 8014f58:	6828      	ldr	r0, [r5, #0]
 8014f5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f5e:	6803      	ldr	r3, [r0, #0]
 8014f60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014f62:	4718      	bx	r3
 8014f64:	2005b928 	.word	0x2005b928

08014f68 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8014f68:	b508      	push	{r3, lr}
 8014f6a:	f7fc fe29 	bl	8011bc0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014f6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014f72:	f7fc be33 	b.w	8011bdc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014f76 <_ZN8touchgfx13DMA_Interface5startEv>:
 8014f76:	b510      	push	{r4, lr}
 8014f78:	4604      	mov	r4, r0
 8014f7a:	6840      	ldr	r0, [r0, #4]
 8014f7c:	6803      	ldr	r3, [r0, #0]
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	4798      	blx	r3
 8014f82:	b948      	cbnz	r0, 8014f98 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014f84:	7a63      	ldrb	r3, [r4, #9]
 8014f86:	b13b      	cbz	r3, 8014f98 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014f88:	7a23      	ldrb	r3, [r4, #8]
 8014f8a:	b92b      	cbnz	r3, 8014f98 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014f8c:	6823      	ldr	r3, [r4, #0]
 8014f8e:	4620      	mov	r0, r4
 8014f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f96:	4718      	bx	r3
 8014f98:	bd10      	pop	{r4, pc}

08014f9a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8014f9a:	b570      	push	{r4, r5, r6, lr}
 8014f9c:	4604      	mov	r4, r0
 8014f9e:	6840      	ldr	r0, [r0, #4]
 8014fa0:	6803      	ldr	r3, [r0, #0]
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	4798      	blx	r3
 8014fa6:	4605      	mov	r5, r0
 8014fa8:	b930      	cbnz	r0, 8014fb8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014faa:	7a23      	ldrb	r3, [r4, #8]
 8014fac:	b123      	cbz	r3, 8014fb8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014fae:	6860      	ldr	r0, [r4, #4]
 8014fb0:	6803      	ldr	r3, [r0, #0]
 8014fb2:	695b      	ldr	r3, [r3, #20]
 8014fb4:	4798      	blx	r3
 8014fb6:	7225      	strb	r5, [r4, #8]
 8014fb8:	6860      	ldr	r0, [r4, #4]
 8014fba:	6803      	ldr	r3, [r0, #0]
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	4798      	blx	r3
 8014fc0:	b928      	cbnz	r0, 8014fce <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8014fc2:	6823      	ldr	r3, [r4, #0]
 8014fc4:	4620      	mov	r0, r4
 8014fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014fcc:	4718      	bx	r3
 8014fce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014fd2:	f7fc be1b 	b.w	8011c0c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08014fd8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8014fd8:	6082      	str	r2, [r0, #8]
 8014fda:	2200      	movs	r2, #0
 8014fdc:	b510      	push	{r4, lr}
 8014fde:	4c03      	ldr	r4, [pc, #12]	@ (8014fec <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8014fe0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8014fe4:	e9c0 4100 	strd	r4, r1, [r0]
 8014fe8:	bd10      	pop	{r4, pc}
 8014fea:	bf00      	nop
 8014fec:	0802e428 	.word	0x0802e428

08014ff0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8014ff0:	6840      	ldr	r0, [r0, #4]
 8014ff2:	6803      	ldr	r3, [r0, #0]
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	4718      	bx	r3

08014ff8 <_ZN8touchgfxL10applyNoiseEiihhh>:
 8014ff8:	fb80 0101 	smull	r0, r1, r0, r1
 8014ffc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8015000:	4f1f      	ldr	r7, [pc, #124]	@ (8015080 <_ZN8touchgfxL10applyNoiseEiihhh+0x88>)
 8015002:	461c      	mov	r4, r3
 8015004:	fba0 bc07 	umull	fp, ip, r0, r7
 8015008:	fb07 cc01 	mla	ip, r7, r1, ip
 801500c:	fbab 010b 	umull	r0, r1, fp, fp
 8015010:	fb0b f70c 	mul.w	r7, fp, ip
 8015014:	fb00 f30c 	mul.w	r3, r0, ip
 8015018:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 801501c:	fb0b 3301 	mla	r3, fp, r1, r3
 8015020:	fba0 010b 	umull	r0, r1, r0, fp
 8015024:	4616      	mov	r6, r2
 8015026:	4419      	add	r1, r3
 8015028:	a313      	add	r3, pc, #76	@ (adr r3, 8015078 <_ZN8touchgfxL10applyNoiseEiihhh+0x80>)
 801502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801502e:	f7eb f927 	bl	8000280 <__aeabi_ldivmod>
 8015032:	2ef7      	cmp	r6, #247	@ 0xf7
 8015034:	b290      	uxth	r0, r2
 8015036:	bf9e      	ittt	ls
 8015038:	f002 0207 	andls.w	r2, r2, #7
 801503c:	18b6      	addls	r6, r6, r2
 801503e:	b2f6      	uxtbls	r6, r6
 8015040:	2cfb      	cmp	r4, #251	@ 0xfb
 8015042:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8015046:	bf9e      	ittt	ls
 8015048:	f3c0 03c1 	ubfxls	r3, r0, #3, #2
 801504c:	18e4      	addls	r4, r4, r3
 801504e:	b2e4      	uxtbls	r4, r4
 8015050:	2df7      	cmp	r5, #247	@ 0xf7
 8015052:	bf9c      	itt	ls
 8015054:	f3c0 1042 	ubfxls	r0, r0, #5, #3
 8015058:	182d      	addls	r5, r5, r0
 801505a:	480a      	ldr	r0, [pc, #40]	@ (8015084 <_ZN8touchgfxL10applyNoiseEiihhh+0x8c>)
 801505c:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8015060:	ea00 2006 	and.w	r0, r0, r6, lsl #8
 8015064:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8015068:	bf98      	it	ls
 801506a:	b2ed      	uxtbls	r5, r5
 801506c:	4304      	orrs	r4, r0
 801506e:	ea44 00d5 	orr.w	r0, r4, r5, lsr #3
 8015072:	b280      	uxth	r0, r0
 8015074:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8015078:	797a8d77 	.word	0x797a8d77
 801507c:	00000000 	.word	0x00000000
 8015080:	00ec4ba7 	.word	0x00ec4ba7
 8015084:	fffff800 	.word	0xfffff800

08015088 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh>:
 8015088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801508c:	ed2d 8b02 	vpush	{d8}
 8015090:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8015094:	7c41      	ldrb	r1, [r0, #17]
 8015096:	b087      	sub	sp, #28
 8015098:	4605      	mov	r5, r0
 801509a:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	@ 0x48
 801509e:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	@ 0x4c
 80150a2:	f89d a050 	ldrb.w	sl, [sp, #80]	@ 0x50
 80150a6:	2900      	cmp	r1, #0
 80150a8:	f000 809a 	beq.w	80151e0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x158>
 80150ac:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80150b0:	ed90 7a08 	vldr	s14, [r0, #32]
 80150b4:	454a      	cmp	r2, r9
 80150b6:	68c0      	ldr	r0, [r0, #12]
 80150b8:	db25      	blt.n	8015106 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x7e>
 80150ba:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80150be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150c2:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80150c6:	bfc8      	it	gt
 80150c8:	2200      	movgt	r2, #0
 80150ca:	2100      	movs	r1, #0
 80150cc:	5882      	ldr	r2, [r0, r2]
 80150ce:	7c2d      	ldrb	r5, [r5, #16]
 80150d0:	ea4f 2812 	mov.w	r8, r2, lsr #8
 80150d4:	0950      	lsrs	r0, r2, #5
 80150d6:	f408 4e78 	and.w	lr, r8, #63488	@ 0xf800
 80150da:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80150de:	f3c2 0cc4 	ubfx	ip, r2, #3, #5
 80150e2:	eb04 0746 	add.w	r7, r4, r6, lsl #1
 80150e6:	2d00      	cmp	r5, #0
 80150e8:	d044      	beq.n	8015174 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xec>
 80150ea:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80150ee:	d141      	bne.n	8015174 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xec>
 80150f0:	bb61      	cbnz	r1, 801514c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xc4>
 80150f2:	ea4e 0000 	orr.w	r0, lr, r0
 80150f6:	ea4c 0500 	orr.w	r5, ip, r0
 80150fa:	42bc      	cmp	r4, r7
 80150fc:	f080 8216 	bcs.w	801552c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8015100:	f824 5b02 	strh.w	r5, [r4], #2
 8015104:	e7f9      	b.n	80150fa <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x72>
 8015106:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 801510a:	454f      	cmp	r7, r9
 801510c:	dc08      	bgt.n	8015120 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x98>
 801510e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015116:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801511a:	bfd8      	it	le
 801511c:	2200      	movle	r2, #0
 801511e:	e7d4      	b.n	80150ca <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x42>
 8015120:	eba9 0202 	sub.w	r2, r9, r2
 8015124:	ee07 2a90 	vmov	s15, r2
 8015128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801512c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015130:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015134:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801513c:	ee17 2a90 	vmov	r2, s15
 8015140:	bfd8      	it	le
 8015142:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 8015146:	0092      	lsls	r2, r2, #2
 8015148:	5882      	ldr	r2, [r0, r2]
 801514a:	e7c0      	b.n	80150ce <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x46>
 801514c:	461e      	mov	r6, r3
 801514e:	b2d5      	uxtb	r5, r2
 8015150:	fa5f f888 	uxtb.w	r8, r8
 8015154:	f3c2 4a07 	ubfx	sl, r2, #16, #8
 8015158:	42bc      	cmp	r4, r7
 801515a:	f080 81e7 	bcs.w	801552c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 801515e:	4630      	mov	r0, r6
 8015160:	9500      	str	r5, [sp, #0]
 8015162:	4643      	mov	r3, r8
 8015164:	4652      	mov	r2, sl
 8015166:	4649      	mov	r1, r9
 8015168:	f7ff ff46 	bl	8014ff8 <_ZN8touchgfxL10applyNoiseEiihhh>
 801516c:	3601      	adds	r6, #1
 801516e:	f824 0b02 	strh.w	r0, [r4], #2
 8015172:	e7f1      	b.n	8015158 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xd0>
 8015174:	0e12      	lsrs	r2, r2, #24
 8015176:	fb02 f20a 	mul.w	r2, r2, sl
 801517a:	1c53      	adds	r3, r2, #1
 801517c:	eb03 2222 	add.w	r2, r3, r2, asr #8
 8015180:	1212      	asrs	r2, r2, #8
 8015182:	fb02 f50c 	mul.w	r5, r2, ip
 8015186:	fb02 f10e 	mul.w	r1, r2, lr
 801518a:	4350      	muls	r0, r2
 801518c:	43d2      	mvns	r2, r2
 801518e:	26ff      	movs	r6, #255	@ 0xff
 8015190:	f8df c3ac 	ldr.w	ip, [pc, #940]	@ 8015540 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 8015194:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8015198:	42bc      	cmp	r4, r7
 801519a:	f080 81c7 	bcs.w	801552c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 801519e:	f8b4 e000 	ldrh.w	lr, [r4]
 80151a2:	ea0e 030c 	and.w	r3, lr, ip
 80151a6:	f40e 68fc 	and.w	r8, lr, #2016	@ 0x7e0
 80151aa:	fb02 1303 	mla	r3, r2, r3, r1
 80151ae:	fb02 0808 	mla	r8, r2, r8, r0
 80151b2:	f00e 0e1f 	and.w	lr, lr, #31
 80151b6:	fb02 5e0e 	mla	lr, r2, lr, r5
 80151ba:	fb93 f3f6 	sdiv	r3, r3, r6
 80151be:	fb98 f8f6 	sdiv	r8, r8, r6
 80151c2:	fb9e fef6 	sdiv	lr, lr, r6
 80151c6:	ea03 030c 	and.w	r3, r3, ip
 80151ca:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80151ce:	ea43 0308 	orr.w	r3, r3, r8
 80151d2:	f00e 0e1f 	and.w	lr, lr, #31
 80151d6:	ea43 030e 	orr.w	r3, r3, lr
 80151da:	f824 3b02 	strh.w	r3, [r4], #2
 80151de:	e7db      	b.n	8015198 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x110>
 80151e0:	7c82      	ldrb	r2, [r0, #18]
 80151e2:	2a00      	cmp	r2, #0
 80151e4:	d050      	beq.n	8015288 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x200>
 80151e6:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80151ea:	ee07 2a90 	vmov	s15, r2
 80151ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80151f2:	ee07 3a10 	vmov	s14, r3
 80151f6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80151fa:	eef4 6ae7 	vcmpe.f32	s13, s15
 80151fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015202:	461f      	mov	r7, r3
 8015204:	f200 8096 	bhi.w	8015334 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2ac>
 8015208:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801520c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015210:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015214:	ee06 6a90 	vmov	s13, r6
 8015218:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801521c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015224:	bf44      	itt	mi
 8015226:	eebd 7ac7 	vcvtmi.s32.f32	s14, s14
 801522a:	ed8d 7a02 	vstrmi	s14, [sp, #8]
 801522e:	ed95 7a08 	vldr	s14, [r5, #32]
 8015232:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015236:	bf58      	it	pl
 8015238:	9602      	strpl	r6, [sp, #8]
 801523a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801523e:	f640 71fc 	movw	r1, #4092	@ 0xffc
 8015242:	bfc8      	it	gt
 8015244:	2100      	movgt	r1, #0
 8015246:	68ea      	ldr	r2, [r5, #12]
 8015248:	f895 c010 	ldrb.w	ip, [r5, #16]
 801524c:	5852      	ldr	r2, [r2, r1]
 801524e:	9902      	ldr	r1, [sp, #8]
 8015250:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 8015254:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8015258:	0950      	lsrs	r0, r2, #5
 801525a:	9103      	str	r1, [sp, #12]
 801525c:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 8015260:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8015264:	f3c2 01c4 	ubfx	r1, r2, #3, #5
 8015268:	f1bc 0f00 	cmp.w	ip, #0
 801526c:	d024      	beq.n	80152b8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x230>
 801526e:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8015272:	d121      	bne.n	80152b8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x230>
 8015274:	ea4b 0b00 	orr.w	fp, fp, r0
 8015278:	ea41 010b 	orr.w	r1, r1, fp
 801527c:	9a03      	ldr	r2, [sp, #12]
 801527e:	4294      	cmp	r4, r2
 8015280:	d255      	bcs.n	801532e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2a6>
 8015282:	f824 1b02 	strh.w	r1, [r4], #2
 8015286:	e7f9      	b.n	801527c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x1f4>
 8015288:	ee07 9a10 	vmov	s14, r9
 801528c:	edd0 7a06 	vldr	s15, [r0, #24]
 8015290:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015294:	edd0 6a05 	vldr	s13, [r0, #20]
 8015298:	ee37 7a67 	vsub.f32	s14, s14, s15
 801529c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80152a0:	ed90 7a08 	vldr	s14, [r0, #32]
 80152a4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80152a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152ac:	bf44      	itt	mi
 80152ae:	ed90 7a07 	vldrmi	s14, [r0, #28]
 80152b2:	ee77 7ac7 	vsubmi.f32	s15, s15, s14
 80152b6:	e79c      	b.n	80151f2 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x16a>
 80152b8:	0e12      	lsrs	r2, r2, #24
 80152ba:	fb02 f20a 	mul.w	r2, r2, sl
 80152be:	f102 0c01 	add.w	ip, r2, #1
 80152c2:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 80152c6:	1212      	asrs	r2, r2, #8
 80152c8:	4350      	muls	r0, r2
 80152ca:	4351      	muls	r1, r2
 80152cc:	fb02 fb0b 	mul.w	fp, r2, fp
 80152d0:	43d2      	mvns	r2, r2
 80152d2:	f04f 0eff 	mov.w	lr, #255	@ 0xff
 80152d6:	f8df 8268 	ldr.w	r8, [pc, #616]	@ 8015540 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 80152da:	9004      	str	r0, [sp, #16]
 80152dc:	9105      	str	r1, [sp, #20]
 80152de:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80152e2:	9903      	ldr	r1, [sp, #12]
 80152e4:	428c      	cmp	r4, r1
 80152e6:	d222      	bcs.n	801532e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2a6>
 80152e8:	8820      	ldrh	r0, [r4, #0]
 80152ea:	f400 61fc 	and.w	r1, r0, #2016	@ 0x7e0
 80152ee:	460f      	mov	r7, r1
 80152f0:	9904      	ldr	r1, [sp, #16]
 80152f2:	ea00 0c08 	and.w	ip, r0, r8
 80152f6:	fb02 bc0c 	mla	ip, r2, ip, fp
 80152fa:	fb02 1107 	mla	r1, r2, r7, r1
 80152fe:	fb9c fcfe 	sdiv	ip, ip, lr
 8015302:	fb91 f1fe 	sdiv	r1, r1, lr
 8015306:	ea0c 0c08 	and.w	ip, ip, r8
 801530a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801530e:	ea4c 0101 	orr.w	r1, ip, r1
 8015312:	f000 0c1f 	and.w	ip, r0, #31
 8015316:	9805      	ldr	r0, [sp, #20]
 8015318:	fb02 0c0c 	mla	ip, r2, ip, r0
 801531c:	fb9c fcfe 	sdiv	ip, ip, lr
 8015320:	f00c 0c1f 	and.w	ip, ip, #31
 8015324:	ea41 010c 	orr.w	r1, r1, ip
 8015328:	f824 1b02 	strh.w	r1, [r4], #2
 801532c:	e7d9      	b.n	80152e2 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x25a>
 801532e:	9a02      	ldr	r2, [sp, #8]
 8015330:	441a      	add	r2, r3
 8015332:	4617      	mov	r7, r2
 8015334:	441e      	add	r6, r3
 8015336:	b236      	sxth	r6, r6
 8015338:	42be      	cmp	r6, r7
 801533a:	f340 80f7 	ble.w	801552c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 801533e:	ed95 7a07 	vldr	s14, [r5, #28]
 8015342:	ee06 7a90 	vmov	s13, r7
 8015346:	ee37 7a87 	vadd.f32	s14, s15, s14
 801534a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801534e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015356:	f340 80b3 	ble.w	80154c0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x438>
 801535a:	ee06 6a10 	vmov	s12, r6
 801535e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015362:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8015366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801536a:	bfdc      	itt	le
 801536c:	eebd 7ac7 	vcvtle.s32.f32	s14, s14
 8015370:	ee17 8a10 	vmovle	r8, s14
 8015374:	ed95 7a08 	vldr	s14, [r5, #32]
 8015378:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801537c:	bfc8      	it	gt
 801537e:	46b0      	movgt	r8, r6
 8015380:	ed9f 8a6d 	vldr	s16, [pc, #436]	@ 8015538 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b0>
 8015384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015388:	ed9f 6a6c 	vldr	s12, [pc, #432]	@ 801553c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b4>
 801538c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8015390:	7c2b      	ldrb	r3, [r5, #16]
 8015392:	eba8 0707 	sub.w	r7, r8, r7
 8015396:	fe38 8a06 	vselgt.f32	s16, s16, s12
 801539a:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 801539e:	eea7 8a27 	vfma.f32	s16, s14, s15
 80153a2:	b1db      	cbz	r3, 80153dc <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x354>
 80153a4:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80153a8:	d118      	bne.n	80153dc <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x354>
 80153aa:	42bc      	cmp	r4, r7
 80153ac:	d262      	bcs.n	8015474 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3ec>
 80153ae:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80153b2:	ee17 0a90 	vmov	r0, s15
 80153b6:	68eb      	ldr	r3, [r5, #12]
 80153b8:	4649      	mov	r1, r9
 80153ba:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80153be:	b2d3      	uxtb	r3, r2
 80153c0:	9300      	str	r3, [sp, #0]
 80153c2:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80153c6:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80153ca:	f7ff fe15 	bl	8014ff8 <_ZN8touchgfxL10applyNoiseEiihhh>
 80153ce:	f824 0b02 	strh.w	r0, [r4], #2
 80153d2:	edd5 7a08 	vldr	s15, [r5, #32]
 80153d6:	ee38 8a27 	vadd.f32	s16, s16, s15
 80153da:	e7e6      	b.n	80153aa <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x322>
 80153dc:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 80153e0:	f8df b15c 	ldr.w	fp, [pc, #348]	@ 8015540 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 80153e4:	42bc      	cmp	r4, r7
 80153e6:	d245      	bcs.n	8015474 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3ec>
 80153e8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80153ec:	ee17 2a90 	vmov	r2, s15
 80153f0:	68eb      	ldr	r3, [r5, #12]
 80153f2:	f8b4 e000 	ldrh.w	lr, [r4]
 80153f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80153fa:	0e13      	lsrs	r3, r2, #24
 80153fc:	fb03 f30a 	mul.w	r3, r3, sl
 8015400:	1c58      	adds	r0, r3, #1
 8015402:	eb00 2023 	add.w	r0, r0, r3, asr #8
 8015406:	1200      	asrs	r0, r0, #8
 8015408:	ea6f 0c00 	mvn.w	ip, r0
 801540c:	ea0e 030b 	and.w	r3, lr, fp
 8015410:	fa5f fc8c 	uxtb.w	ip, ip
 8015414:	fb0c f303 	mul.w	r3, ip, r3
 8015418:	ea0b 2112 	and.w	r1, fp, r2, lsr #8
 801541c:	b289      	uxth	r1, r1
 801541e:	fb00 3101 	mla	r1, r0, r1, r3
 8015422:	fb91 f1f9 	sdiv	r1, r1, r9
 8015426:	ea01 030b 	and.w	r3, r1, fp
 801542a:	9302      	str	r3, [sp, #8]
 801542c:	0953      	lsrs	r3, r2, #5
 801542e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8015432:	4619      	mov	r1, r3
 8015434:	f40e 63fc 	and.w	r3, lr, #2016	@ 0x7e0
 8015438:	fb0c f303 	mul.w	r3, ip, r3
 801543c:	f00e 0e1f 	and.w	lr, lr, #31
 8015440:	fb0c fc0e 	mul.w	ip, ip, lr
 8015444:	fb00 3301 	mla	r3, r0, r1, r3
 8015448:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801544c:	fb00 c002 	mla	r0, r0, r2, ip
 8015450:	fb93 f3f9 	sdiv	r3, r3, r9
 8015454:	fb90 f0f9 	sdiv	r0, r0, r9
 8015458:	9902      	ldr	r1, [sp, #8]
 801545a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801545e:	4319      	orrs	r1, r3
 8015460:	f000 001f 	and.w	r0, r0, #31
 8015464:	4301      	orrs	r1, r0
 8015466:	f824 1b02 	strh.w	r1, [r4], #2
 801546a:	edd5 7a08 	vldr	s15, [r5, #32]
 801546e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8015472:	e7b7      	b.n	80153e4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x35c>
 8015474:	4546      	cmp	r6, r8
 8015476:	dd59      	ble.n	801552c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 8015478:	edd5 7a08 	vldr	s15, [r5, #32]
 801547c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015484:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8015488:	bfd8      	it	le
 801548a:	2300      	movle	r3, #0
 801548c:	68ea      	ldr	r2, [r5, #12]
 801548e:	7c29      	ldrb	r1, [r5, #16]
 8015490:	58d2      	ldr	r2, [r2, r3]
 8015492:	eba6 0608 	sub.w	r6, r6, r8
 8015496:	0a10      	lsrs	r0, r2, #8
 8015498:	0953      	lsrs	r3, r2, #5
 801549a:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 801549e:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 80154a2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80154a6:	f3c2 07c4 	ubfx	r7, r2, #3, #5
 80154aa:	b159      	cbz	r1, 80154c4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x43c>
 80154ac:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80154b0:	d108      	bne.n	80154c4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x43c>
 80154b2:	4318      	orrs	r0, r3
 80154b4:	4338      	orrs	r0, r7
 80154b6:	42b4      	cmp	r4, r6
 80154b8:	d238      	bcs.n	801552c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 80154ba:	f824 0b02 	strh.w	r0, [r4], #2
 80154be:	e7fa      	b.n	80154b6 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x42e>
 80154c0:	46b8      	mov	r8, r7
 80154c2:	e7d9      	b.n	8015478 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3f0>
 80154c4:	0e12      	lsrs	r2, r2, #24
 80154c6:	fb02 f10a 	mul.w	r1, r2, sl
 80154ca:	1c4a      	adds	r2, r1, #1
 80154cc:	eb02 2221 	add.w	r2, r2, r1, asr #8
 80154d0:	1212      	asrs	r2, r2, #8
 80154d2:	fb02 f507 	mul.w	r5, r2, r7
 80154d6:	4350      	muls	r0, r2
 80154d8:	4353      	muls	r3, r2
 80154da:	43d2      	mvns	r2, r2
 80154dc:	27ff      	movs	r7, #255	@ 0xff
 80154de:	f8df c060 	ldr.w	ip, [pc, #96]	@ 8015540 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 80154e2:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80154e6:	42b4      	cmp	r4, r6
 80154e8:	d220      	bcs.n	801552c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a4>
 80154ea:	f8b4 e000 	ldrh.w	lr, [r4]
 80154ee:	ea0e 010c 	and.w	r1, lr, ip
 80154f2:	f40e 68fc 	and.w	r8, lr, #2016	@ 0x7e0
 80154f6:	fb02 0101 	mla	r1, r2, r1, r0
 80154fa:	fb02 3808 	mla	r8, r2, r8, r3
 80154fe:	f00e 0e1f 	and.w	lr, lr, #31
 8015502:	fb02 5e0e 	mla	lr, r2, lr, r5
 8015506:	fb91 f1f7 	sdiv	r1, r1, r7
 801550a:	fb98 f8f7 	sdiv	r8, r8, r7
 801550e:	fb9e fef7 	sdiv	lr, lr, r7
 8015512:	ea01 010c 	and.w	r1, r1, ip
 8015516:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801551a:	ea41 0108 	orr.w	r1, r1, r8
 801551e:	f00e 0e1f 	and.w	lr, lr, #31
 8015522:	ea41 010e 	orr.w	r1, r1, lr
 8015526:	f824 1b02 	strh.w	r1, [r4], #2
 801552a:	e7dc      	b.n	80154e6 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x45e>
 801552c:	b007      	add	sp, #28
 801552e:	ecbd 8b02 	vpop	{d8}
 8015532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015536:	bf00      	nop
 8015538:	00000000 	.word	0x00000000
 801553c:	447ffffe 	.word	0x447ffffe
 8015540:	fffff800 	.word	0xfffff800

08015544 <_ZNK8touchgfx27PainterRGB565LinearGradient8tearDownEv>:
 8015544:	4770      	bx	lr
	...

08015548 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8015548:	4b06      	ldr	r3, [pc, #24]	@ (8015564 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
 801554a:	094a      	lsrs	r2, r1, #5
 801554c:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 8015550:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8015554:	60c1      	str	r1, [r0, #12]
 8015556:	4313      	orrs	r3, r2
 8015558:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801555c:	4319      	orrs	r1, r3
 801555e:	8201      	strh	r1, [r0, #16]
 8015560:	4770      	bx	lr
 8015562:	bf00      	nop
 8015564:	fffff800 	.word	0xfffff800

08015568 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8015568:	f1a0 0008 	sub.w	r0, r0, #8
 801556c:	e7ec      	b.n	8015548 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
 801556e:	bf00      	nop

08015570 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 8015570:	b508      	push	{r3, lr}
 8015572:	4b05      	ldr	r3, [pc, #20]	@ (8015588 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 8015574:	6818      	ldr	r0, [r3, #0]
 8015576:	6803      	ldr	r3, [r0, #0]
 8015578:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801557c:	4798      	blx	r3
 801557e:	1e43      	subs	r3, r0, #1
 8015580:	4258      	negs	r0, r3
 8015582:	4158      	adcs	r0, r3
 8015584:	bd08      	pop	{r3, pc}
 8015586:	bf00      	nop
 8015588:	2005b928 	.word	0x2005b928

0801558c <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 801558c:	b430      	push	{r4, r5}
 801558e:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8015592:	8a02      	ldrh	r2, [r0, #16]
 8015594:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8015598:	9202      	str	r2, [sp, #8]
 801559a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801559e:	68c2      	ldr	r2, [r0, #12]
 80155a0:	4629      	mov	r1, r5
 80155a2:	4620      	mov	r0, r4
 80155a4:	bc30      	pop	{r4, r5}
 80155a6:	f7fc bfbb 	b.w	8012520 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

080155aa <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 80155aa:	f7fc bf95 	b.w	80124d8 <_ZN8touchgfx5paint8tearDownEv>

080155ae <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 80155ae:	2300      	movs	r3, #0
 80155b0:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80155b2:	8503      	strh	r3, [r0, #40]	@ 0x28
 80155b4:	8543      	strh	r3, [r0, #42]	@ 0x2a
 80155b6:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80155b8:	6980      	ldr	r0, [r0, #24]
 80155ba:	b110      	cbz	r0, 80155c2 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 80155bc:	6803      	ldr	r3, [r0, #0]
 80155be:	691b      	ldr	r3, [r3, #16]
 80155c0:	4718      	bx	r3
 80155c2:	4770      	bx	lr

080155c4 <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 80155c4:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 80155c8:	4770      	bx	lr

080155ca <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 80155ca:	b538      	push	{r3, r4, r5, lr}
 80155cc:	0e0b      	lsrs	r3, r1, #24
 80155ce:	7783      	strb	r3, [r0, #30]
 80155d0:	6803      	ldr	r3, [r0, #0]
 80155d2:	4604      	mov	r4, r0
 80155d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155d6:	460d      	mov	r5, r1
 80155d8:	4798      	blx	r3
 80155da:	6803      	ldr	r3, [r0, #0]
 80155dc:	4629      	mov	r1, r5
 80155de:	689b      	ldr	r3, [r3, #8]
 80155e0:	4798      	blx	r3
 80155e2:	6823      	ldr	r3, [r4, #0]
 80155e4:	4620      	mov	r0, r4
 80155e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80155e8:	4798      	blx	r3
 80155ea:	61a0      	str	r0, [r4, #24]
 80155ec:	bd38      	pop	{r3, r4, r5, pc}

080155ee <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 80155ee:	7741      	strb	r1, [r0, #29]
 80155f0:	4770      	bx	lr

080155f2 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 80155f2:	b530      	push	{r4, r5, lr}
 80155f4:	460d      	mov	r5, r1
 80155f6:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 80155fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80155fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80155fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015602:	682b      	ldr	r3, [r5, #0]
 8015604:	6023      	str	r3, [r4, #0]
 8015606:	bd30      	pop	{r4, r5, pc}

08015608 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 8015608:	b538      	push	{r3, r4, r5, lr}
 801560a:	4604      	mov	r4, r0
 801560c:	2500      	movs	r5, #0
 801560e:	1d03      	adds	r3, r0, #4
 8015610:	6808      	ldr	r0, [r1, #0]
 8015612:	6849      	ldr	r1, [r1, #4]
 8015614:	c303      	stmia	r3!, {r0, r1}
 8015616:	6813      	ldr	r3, [r2, #0]
 8015618:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 801561c:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 8015620:	6853      	ldr	r3, [r2, #4]
 8015622:	61a5      	str	r5, [r4, #24]
 8015624:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 8015628:	f004 fe3c 	bl	801a2a4 <_ZN8touchgfx9Matrix3x35resetEv>
 801562c:	23ff      	movs	r3, #255	@ 0xff
 801562e:	7763      	strb	r3, [r4, #29]
 8015630:	77a3      	strb	r3, [r4, #30]
 8015632:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8015636:	6323      	str	r3, [r4, #48]	@ 0x30
 8015638:	2301      	movs	r3, #1
 801563a:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 801563e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8015642:	bd38      	pop	{r3, r4, r5, pc}

08015644 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 8015644:	ee70 7a41 	vsub.f32	s15, s0, s2
 8015648:	eef5 7a40 	vcmp.f32	s15, #0.0
 801564c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015650:	ed2d 8b0a 	vpush	{d8-d12}
 8015654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015658:	b087      	sub	sp, #28
 801565a:	4605      	mov	r5, r0
 801565c:	eef0 9a40 	vmov.f32	s19, s0
 8015660:	eeb0 aa60 	vmov.f32	s20, s1
 8015664:	eeb0 9a41 	vmov.f32	s18, s2
 8015668:	eef0 8a61 	vmov.f32	s17, s3
 801566c:	eeb0 ca42 	vmov.f32	s24, s4
 8015670:	eef0 ca62 	vmov.f32	s25, s5
 8015674:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8015678:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 801567a:	6802      	ldr	r2, [r0, #0]
 801567c:	d112      	bne.n	80156a4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 801567e:	ee70 7ae1 	vsub.f32	s15, s1, s3
 8015682:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801568a:	d10b      	bne.n	80156a4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 801568c:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8015690:	3901      	subs	r1, #1
 8015692:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8015694:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8015698:	b007      	add	sp, #28
 801569a:	ecbd 8b0a 	vpop	{d8-d12}
 801569e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156a2:	4710      	bx	r2
 80156a4:	23ff      	movs	r3, #255	@ 0xff
 80156a6:	77ab      	strb	r3, [r5, #30]
 80156a8:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80156aa:	4628      	mov	r0, r5
 80156ac:	4798      	blx	r3
 80156ae:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80156b2:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 80156b6:	80c3      	strh	r3, [r0, #6]
 80156b8:	eef0 0a4a 	vmov.f32	s1, s20
 80156bc:	eeb0 0a69 	vmov.f32	s0, s19
 80156c0:	4604      	mov	r4, r0
 80156c2:	4640      	mov	r0, r8
 80156c4:	f004 fe9d 	bl	801a402 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80156c8:	4640      	mov	r0, r8
 80156ca:	eeb0 ba40 	vmov.f32	s22, s0
 80156ce:	eef0 ba60 	vmov.f32	s23, s1
 80156d2:	ed8d 0a00 	vstr	s0, [sp]
 80156d6:	edcd 0a01 	vstr	s1, [sp, #4]
 80156da:	eeb0 0a49 	vmov.f32	s0, s18
 80156de:	eef0 0a68 	vmov.f32	s1, s17
 80156e2:	f004 fe8e 	bl	801a402 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80156e6:	eeb4 ba40 	vcmp.f32	s22, s0
 80156ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156ee:	eef4 ba60 	vcmp.f32	s23, s1
 80156f2:	bf0c      	ite	eq
 80156f4:	2301      	moveq	r3, #1
 80156f6:	2300      	movne	r3, #0
 80156f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156fc:	eeb4 ba40 	vcmp.f32	s22, s0
 8015700:	7463      	strb	r3, [r4, #17]
 8015702:	bf0c      	ite	eq
 8015704:	2301      	moveq	r3, #1
 8015706:	2300      	movne	r3, #0
 8015708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801570c:	eeb0 8a40 	vmov.f32	s16, s0
 8015710:	eef0 aa60 	vmov.f32	s21, s1
 8015714:	ed8d 0a02 	vstr	s0, [sp, #8]
 8015718:	edcd 0a03 	vstr	s1, [sp, #12]
 801571c:	74a3      	strb	r3, [r4, #18]
 801571e:	f8df 9250 	ldr.w	r9, [pc, #592]	@ 8015970 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x32c>
 8015722:	d030      	beq.n	8015786 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x142>
 8015724:	eef4 ba60 	vcmp.f32	s23, s1
 8015728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801572c:	d02b      	beq.n	8015786 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x142>
 801572e:	ee39 9a69 	vsub.f32	s18, s18, s19
 8015732:	ee78 8aca 	vsub.f32	s17, s17, s20
 8015736:	ee89 7a0c 	vdiv.f32	s14, s18, s24
 801573a:	eec8 7aac 	vdiv.f32	s15, s17, s25
 801573e:	eef0 0a4a 	vmov.f32	s1, s20
 8015742:	eeb0 0a69 	vmov.f32	s0, s19
 8015746:	eeec 0a87 	vfma.f32	s1, s25, s14
 801574a:	eea7 0acc 	vfms.f32	s0, s15, s24
 801574e:	4640      	mov	r0, r8
 8015750:	f004 fe57 	bl	801a402 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015754:	edcd 0a05 	vstr	s1, [sp, #20]
 8015758:	ee70 0aeb 	vsub.f32	s1, s1, s23
 801575c:	f899 3000 	ldrb.w	r3, [r9]
 8015760:	ed8d 0a04 	vstr	s0, [sp, #16]
 8015764:	2b01      	cmp	r3, #1
 8015766:	ee30 0a4b 	vsub.f32	s0, s0, s22
 801576a:	bf02      	ittt	eq
 801576c:	eef1 7a60 	vnegeq.f32	s15, s1
 8015770:	eef0 0a40 	vmoveq.f32	s1, s0
 8015774:	eeb0 0a67 	vmoveq.f32	s0, s15
 8015778:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801577c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015780:	d134      	bne.n	80157ec <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1a8>
 8015782:	2301      	movs	r3, #1
 8015784:	74a3      	strb	r3, [r4, #18]
 8015786:	f899 2000 	ldrb.w	r2, [r9]
 801578a:	7c63      	ldrb	r3, [r4, #17]
 801578c:	2a01      	cmp	r2, #1
 801578e:	f040 80a4 	bne.w	80158da <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x296>
 8015792:	2b00      	cmp	r3, #0
 8015794:	d072      	beq.n	801587c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x238>
 8015796:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 801579a:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8015968 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x324>
 801579e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80157a2:	edc4 7a08 	vstr	s15, [r4, #32]
 80157a6:	eefd 7aea 	vcvt.s32.f32	s15, s21
 80157aa:	ee17 3a90 	vmov	r3, s15
 80157ae:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 80157b2:	eef4 baea 	vcmpe.f32	s23, s21
 80157b6:	b21a      	sxth	r2, r3
 80157b8:	ee17 3a90 	vmov	r3, s15
 80157bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157c0:	b21b      	sxth	r3, r3
 80157c2:	bf47      	ittee	mi
 80157c4:	8123      	strhmi	r3, [r4, #8]
 80157c6:	8162      	strhmi	r2, [r4, #10]
 80157c8:	8122      	strhpl	r2, [r4, #8]
 80157ca:	8163      	strhpl	r3, [r4, #10]
 80157cc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80157d0:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80157d4:	1a9b      	subs	r3, r3, r2
 80157d6:	ee07 3a90 	vmov	s15, r3
 80157da:	2300      	movs	r3, #0
 80157dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80157e0:	7463      	strb	r3, [r4, #17]
 80157e2:	edc4 7a07 	vstr	s15, [r4, #28]
 80157e6:	2301      	movs	r3, #1
 80157e8:	74a3      	strb	r3, [r4, #18]
 80157ea:	e03f      	b.n	801586c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 80157ec:	ee80 7a80 	vdiv.f32	s14, s1, s0
 80157f0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80157f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157f8:	ed84 7a05 	vstr	s14, [r4, #20]
 80157fc:	d102      	bne.n	8015804 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1c0>
 80157fe:	2301      	movs	r3, #1
 8015800:	7463      	strb	r3, [r4, #17]
 8015802:	e7c0      	b.n	8015786 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x142>
 8015804:	2b01      	cmp	r3, #1
 8015806:	bf09      	itett	eq
 8015808:	f9b4 2006 	ldrsheq.w	r2, [r4, #6]
 801580c:	eef0 7a6b 	vmovne.f32	s15, s23
 8015810:	ee07 2a90 	vmoveq	s15, r2
 8015814:	eef8 7ae7 	vcvteq.f32.s32	s15, s15
 8015818:	bf0a      	itet	eq
 801581a:	ee77 7acb 	vsubeq.f32	s15, s15, s22
 801581e:	eeeb 7a47 	vfmsne.f32	s15, s22, s14
 8015822:	eeeb 7ac7 	vfmseq.f32	s15, s23, s14
 8015826:	ee38 8a4b 	vsub.f32	s16, s16, s22
 801582a:	2b01      	cmp	r3, #1
 801582c:	ee7a aaeb 	vsub.f32	s21, s21, s23
 8015830:	edc4 7a06 	vstr	s15, [r4, #24]
 8015834:	bf02      	ittt	eq
 8015836:	eef1 7a48 	vnegeq.f32	s15, s16
 801583a:	eeb0 8a6a 	vmoveq.f32	s16, s21
 801583e:	eef0 aa67 	vmoveq.f32	s21, s15
 8015842:	eeca 7a87 	vdiv.f32	s15, s21, s14
 8015846:	ee38 8a67 	vsub.f32	s16, s16, s15
 801584a:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 801596c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 801584e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015852:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8015856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801585a:	ed84 8a07 	vstr	s16, [r4, #28]
 801585e:	edc4 7a08 	vstr	s15, [r4, #32]
 8015862:	d503      	bpl.n	801586c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 8015864:	eeb1 8a48 	vneg.f32	s16, s16
 8015868:	ed84 8a07 	vstr	s16, [r4, #28]
 801586c:	60e7      	str	r7, [r4, #12]
 801586e:	7426      	strb	r6, [r4, #16]
 8015870:	61ac      	str	r4, [r5, #24]
 8015872:	b007      	add	sp, #28
 8015874:	ecbd 8b0a 	vpop	{d8-d12}
 8015878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801587c:	7ca3      	ldrb	r3, [r4, #18]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d0f4      	beq.n	801586c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 8015882:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015886:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8015968 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x324>
 801588a:	ee00 3a10 	vmov	s0, r3
 801588e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8015892:	ee30 8a48 	vsub.f32	s16, s0, s16
 8015896:	ee30 0a4b 	vsub.f32	s0, s0, s22
 801589a:	ee38 7a40 	vsub.f32	s14, s16, s0
 801589e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80158a2:	edc4 7a08 	vstr	s15, [r4, #32]
 80158a6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80158aa:	ee17 3a90 	vmov	r3, s15
 80158ae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80158b2:	eeb4 8ac0 	vcmpe.f32	s16, s0
 80158b6:	b21a      	sxth	r2, r3
 80158b8:	ee17 3a90 	vmov	r3, s15
 80158bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158c0:	b21b      	sxth	r3, r3
 80158c2:	bfcc      	ite	gt
 80158c4:	8123      	strhgt	r3, [r4, #8]
 80158c6:	8163      	strhle	r3, [r4, #10]
 80158c8:	f04f 0301 	mov.w	r3, #1
 80158cc:	bfc8      	it	gt
 80158ce:	8162      	strhgt	r2, [r4, #10]
 80158d0:	7463      	strb	r3, [r4, #17]
 80158d2:	bfd8      	it	le
 80158d4:	8122      	strhle	r2, [r4, #8]
 80158d6:	2300      	movs	r3, #0
 80158d8:	e786      	b.n	80157e8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1a4>
 80158da:	b1db      	cbz	r3, 8015914 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x2d0>
 80158dc:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 80158e0:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8015968 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x324>
 80158e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80158e8:	edc4 7a08 	vstr	s15, [r4, #32]
 80158ec:	eefd 7aea 	vcvt.s32.f32	s15, s21
 80158f0:	ee17 3a90 	vmov	r3, s15
 80158f4:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 80158f8:	eef4 baea 	vcmpe.f32	s23, s21
 80158fc:	b21a      	sxth	r2, r3
 80158fe:	ee17 3a90 	vmov	r3, s15
 8015902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015906:	b21b      	sxth	r3, r3
 8015908:	bf47      	ittee	mi
 801590a:	8123      	strhmi	r3, [r4, #8]
 801590c:	8162      	strhmi	r2, [r4, #10]
 801590e:	8122      	strhpl	r2, [r4, #8]
 8015910:	8163      	strhpl	r3, [r4, #10]
 8015912:	e7ab      	b.n	801586c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 8015914:	7ca3      	ldrb	r3, [r4, #18]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d0a8      	beq.n	801586c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 801591a:	ee38 7a4b 	vsub.f32	s14, s16, s22
 801591e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8015968 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x324>
 8015922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015926:	edc4 7a08 	vstr	s15, [r4, #32]
 801592a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801592e:	ee17 3a90 	vmov	r3, s15
 8015932:	eefd 7acb 	vcvt.s32.f32	s15, s22
 8015936:	eeb4 bac8 	vcmpe.f32	s22, s16
 801593a:	b21a      	sxth	r2, r3
 801593c:	ee17 3a90 	vmov	r3, s15
 8015940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015944:	b21b      	sxth	r3, r3
 8015946:	bf47      	ittee	mi
 8015948:	8123      	strhmi	r3, [r4, #8]
 801594a:	8162      	strhmi	r2, [r4, #10]
 801594c:	8122      	strhpl	r2, [r4, #8]
 801594e:	8163      	strhpl	r3, [r4, #10]
 8015950:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015954:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8015958:	1a9b      	subs	r3, r3, r2
 801595a:	ee07 3a90 	vmov	s15, r3
 801595e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015962:	edc4 7a07 	vstr	s15, [r4, #28]
 8015966:	e781      	b.n	801586c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x228>
 8015968:	447ffffe 	.word	0x447ffffe
 801596c:	44800000 	.word	0x44800000
 8015970:	2005b920 	.word	0x2005b920

08015974 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 8015974:	b510      	push	{r4, lr}
 8015976:	ed2d 8b02 	vpush	{d8}
 801597a:	eef0 8a62 	vmov.f32	s17, s5
 801597e:	2100      	movs	r1, #0
 8015980:	4604      	mov	r4, r0
 8015982:	eeb0 8a42 	vmov.f32	s16, s4
 8015986:	f014 feb3 	bl	802a6f0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 801598a:	eef0 7a68 	vmov.f32	s15, s17
 801598e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8015992:	ee17 2a90 	vmov	r2, s15
 8015996:	eef0 7a48 	vmov.f32	s15, s16
 801599a:	ecbd 8b02 	vpop	{d8}
 801599e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80159a2:	6823      	ldr	r3, [r4, #0]
 80159a4:	4620      	mov	r0, r4
 80159a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159aa:	689b      	ldr	r3, [r3, #8]
 80159ac:	ee17 1a90 	vmov	r1, s15
 80159b0:	4718      	bx	r3

080159b2 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 80159b2:	b510      	push	{r4, lr}
 80159b4:	ed2d 8b02 	vpush	{d8}
 80159b8:	eef0 8a63 	vmov.f32	s17, s7
 80159bc:	2100      	movs	r1, #0
 80159be:	4604      	mov	r4, r0
 80159c0:	eeb0 8a43 	vmov.f32	s16, s6
 80159c4:	f014 ff56 	bl	802a874 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 80159c8:	eef0 7a68 	vmov.f32	s15, s17
 80159cc:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80159d0:	ee17 2a90 	vmov	r2, s15
 80159d4:	eef0 7a48 	vmov.f32	s15, s16
 80159d8:	ecbd 8b02 	vpop	{d8}
 80159dc:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80159e0:	6823      	ldr	r3, [r4, #0]
 80159e2:	4620      	mov	r0, r4
 80159e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159e8:	689b      	ldr	r3, [r3, #8]
 80159ea:	ee17 1a90 	vmov	r1, s15
 80159ee:	4718      	bx	r3

080159f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 80159f0:	b513      	push	{r0, r1, r4, lr}
 80159f2:	4604      	mov	r4, r0
 80159f4:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 80159f6:	f004 fd04 	bl	801a402 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80159fa:	eef0 7a60 	vmov.f32	s15, s1
 80159fe:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8015a02:	ee17 2a90 	vmov	r2, s15
 8015a06:	eef0 7a40 	vmov.f32	s15, s0
 8015a0a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8015a0e:	4620      	mov	r0, r4
 8015a10:	ee17 1a90 	vmov	r1, s15
 8015a14:	b002      	add	sp, #8
 8015a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a1a:	f014 bdc3 	b.w	802a5a4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

08015a1e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 8015a1e:	b513      	push	{r0, r1, r4, lr}
 8015a20:	4604      	mov	r4, r0
 8015a22:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8015a24:	f004 fced 	bl	801a402 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015a28:	eef0 7a60 	vmov.f32	s15, s1
 8015a2c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8015a30:	ee17 2a90 	vmov	r2, s15
 8015a34:	eef0 7a40 	vmov.f32	s15, s0
 8015a38:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8015a3c:	4620      	mov	r0, r4
 8015a3e:	ee17 1a90 	vmov	r1, s15
 8015a42:	b002      	add	sp, #8
 8015a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a48:	f014 bdf9 	b.w	802a63e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

08015a4c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 8015a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a4e:	2400      	movs	r4, #0
 8015a50:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 8015a54:	4626      	mov	r6, r4
 8015a56:	f04f 0e01 	mov.w	lr, #1
 8015a5a:	9f07      	ldr	r7, [sp, #28]
 8015a5c:	4463      	add	r3, ip
 8015a5e:	4563      	cmp	r3, ip
 8015a60:	d02d      	beq.n	8015abe <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 8015a62:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 8015a66:	2d06      	cmp	r5, #6
 8015a68:	d8f9      	bhi.n	8015a5e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8015a6a:	fa0e f505 	lsl.w	r5, lr, r5
 8015a6e:	f015 0f66 	tst.w	r5, #102	@ 0x66
 8015a72:	d10d      	bne.n	8015a90 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 8015a74:	f015 0f10 	tst.w	r5, #16
 8015a78:	d117      	bne.n	8015aaa <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 8015a7a:	072d      	lsls	r5, r5, #28
 8015a7c:	d5ef      	bpl.n	8015a5e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8015a7e:	3801      	subs	r0, #1
 8015a80:	b91e      	cbnz	r6, 8015a8a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 8015a82:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 8015a86:	682d      	ldr	r5, [r5, #0]
 8015a88:	600d      	str	r5, [r1, #0]
 8015a8a:	b96c      	cbnz	r4, 8015aa8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8015a8c:	2601      	movs	r6, #1
 8015a8e:	e7e6      	b.n	8015a5e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8015a90:	b926      	cbnz	r6, 8015a9c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 8015a92:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8015a96:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8015a9a:	600b      	str	r3, [r1, #0]
 8015a9c:	b924      	cbnz	r4, 8015aa8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8015a9e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8015aa2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015aa6:	6013      	str	r3, [r2, #0]
 8015aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015aaa:	3801      	subs	r0, #1
 8015aac:	b91c      	cbnz	r4, 8015ab6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 8015aae:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 8015ab2:	6824      	ldr	r4, [r4, #0]
 8015ab4:	6014      	str	r4, [r2, #0]
 8015ab6:	2e00      	cmp	r6, #0
 8015ab8:	d1f6      	bne.n	8015aa8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8015aba:	2401      	movs	r4, #1
 8015abc:	e7cf      	b.n	8015a5e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8015abe:	b90e      	cbnz	r6, 8015ac4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	600b      	str	r3, [r1, #0]
 8015ac4:	2c00      	cmp	r4, #0
 8015ac6:	d1ef      	bne.n	8015aa8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8015ac8:	2300      	movs	r3, #0
 8015aca:	e7ec      	b.n	8015aa6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

08015acc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 8015acc:	b538      	push	{r3, r4, r5, lr}
 8015ace:	4604      	mov	r4, r0
 8015ad0:	ed2d 8b0a 	vpush	{d8-d12}
 8015ad4:	460d      	mov	r5, r1
 8015ad6:	eef0 ba40 	vmov.f32	s23, s0
 8015ada:	eeb0 ca60 	vmov.f32	s24, s1
 8015ade:	eef0 aa41 	vmov.f32	s21, s2
 8015ae2:	eeb0 ba61 	vmov.f32	s22, s3
 8015ae6:	eeb0 9a42 	vmov.f32	s18, s4
 8015aea:	eef0 9a62 	vmov.f32	s19, s5
 8015aee:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 8015af2:	ee7b 8a29 	vadd.f32	s17, s22, s19
 8015af6:	ee3a 8a89 	vadd.f32	s16, s21, s18
 8015afa:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8015afe:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8015b02:	ee3c 0a68 	vsub.f32	s0, s24, s17
 8015b06:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 8015b0a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015b0e:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8015b12:	f015 f885 	bl	802ac20 <sqrtf>
 8015b16:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8015b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b1e:	d12e      	bne.n	8015b7e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 8015b20:	ee79 7a6a 	vsub.f32	s15, s18, s21
 8015b24:	ee39 7acb 	vsub.f32	s14, s19, s22
 8015b28:	eeb0 8a6a 	vmov.f32	s16, s21
 8015b2c:	eef0 8a4b 	vmov.f32	s17, s22
 8015b30:	eea7 8a8a 	vfma.f32	s16, s15, s20
 8015b34:	eee7 8a0a 	vfma.f32	s17, s14, s20
 8015b38:	eea7 8a0a 	vfma.f32	s16, s14, s20
 8015b3c:	eee7 8aca 	vfms.f32	s17, s15, s20
 8015b40:	2d02      	cmp	r5, #2
 8015b42:	dc2f      	bgt.n	8015ba4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 8015b44:	3501      	adds	r5, #1
 8015b46:	eef0 1a4b 	vmov.f32	s3, s22
 8015b4a:	eeb0 1a6a 	vmov.f32	s2, s21
 8015b4e:	4629      	mov	r1, r5
 8015b50:	eef0 2a68 	vmov.f32	s5, s17
 8015b54:	eeb0 2a48 	vmov.f32	s4, s16
 8015b58:	eef0 0a4c 	vmov.f32	s1, s24
 8015b5c:	eeb0 0a6b 	vmov.f32	s0, s23
 8015b60:	4620      	mov	r0, r4
 8015b62:	f7ff ffb3 	bl	8015acc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8015b66:	eef0 0a68 	vmov.f32	s1, s17
 8015b6a:	eeb0 0a48 	vmov.f32	s0, s16
 8015b6e:	4620      	mov	r0, r4
 8015b70:	f7ff ff55 	bl	8015a1e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015b74:	eeb0 ba68 	vmov.f32	s22, s17
 8015b78:	eef0 aa48 	vmov.f32	s21, s16
 8015b7c:	e7b9      	b.n	8015af2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 8015b7e:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8015b82:	ee38 8a6b 	vsub.f32	s16, s16, s23
 8015b86:	ee78 8acc 	vsub.f32	s17, s17, s24
 8015b8a:	ee28 7a27 	vmul.f32	s14, s16, s15
 8015b8e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015b92:	ee87 8a00 	vdiv.f32	s16, s14, s0
 8015b96:	eec7 8a80 	vdiv.f32	s17, s15, s0
 8015b9a:	ee3b 8a88 	vadd.f32	s16, s23, s16
 8015b9e:	ee7c 8a28 	vadd.f32	s17, s24, s17
 8015ba2:	e7cd      	b.n	8015b40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8015ba4:	eef0 0a68 	vmov.f32	s1, s17
 8015ba8:	eeb0 0a48 	vmov.f32	s0, s16
 8015bac:	4620      	mov	r0, r4
 8015bae:	f7ff ff36 	bl	8015a1e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015bb2:	ecbd 8b0a 	vpop	{d8-d12}
 8015bb6:	bd38      	pop	{r3, r4, r5, pc}

08015bb8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8015bb8:	b510      	push	{r4, lr}
 8015bba:	ed2d 8b0a 	vpush	{d8-d12}
 8015bbe:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8015bc2:	4604      	mov	r4, r0
 8015bc4:	2b02      	cmp	r3, #2
 8015bc6:	eeb0 ca40 	vmov.f32	s24, s0
 8015bca:	eeb0 9a60 	vmov.f32	s18, s1
 8015bce:	eef0 9a41 	vmov.f32	s19, s2
 8015bd2:	eef0 8a61 	vmov.f32	s17, s3
 8015bd6:	eeb0 ba42 	vmov.f32	s22, s4
 8015bda:	eef0 ba62 	vmov.f32	s23, s5
 8015bde:	eeb0 aa43 	vmov.f32	s20, s6
 8015be2:	eef0 aa63 	vmov.f32	s21, s7
 8015be6:	eeb0 8a44 	vmov.f32	s16, s8
 8015bea:	eef0 ca64 	vmov.f32	s25, s9
 8015bee:	d12c      	bne.n	8015c4a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 8015bf0:	eef0 0a62 	vmov.f32	s1, s5
 8015bf4:	eeb0 0a42 	vmov.f32	s0, s4
 8015bf8:	f7ff ff11 	bl	8015a1e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015bfc:	ee79 9acb 	vsub.f32	s19, s19, s22
 8015c00:	ee7a caec 	vsub.f32	s25, s21, s25
 8015c04:	ee78 8aeb 	vsub.f32	s17, s17, s23
 8015c08:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8015c0c:	ee69 9aac 	vmul.f32	s19, s19, s25
 8015c10:	ee28 8a88 	vmul.f32	s16, s17, s16
 8015c14:	eef4 9ac8 	vcmpe.f32	s19, s16
 8015c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c1c:	db0f      	blt.n	8015c3e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 8015c1e:	2101      	movs	r1, #1
 8015c20:	eef0 2a6a 	vmov.f32	s5, s21
 8015c24:	eeb0 2a4a 	vmov.f32	s4, s20
 8015c28:	eef0 1a6b 	vmov.f32	s3, s23
 8015c2c:	eeb0 1a4b 	vmov.f32	s2, s22
 8015c30:	eef0 0a49 	vmov.f32	s1, s18
 8015c34:	eeb0 0a4c 	vmov.f32	s0, s24
 8015c38:	4620      	mov	r0, r4
 8015c3a:	f7ff ff47 	bl	8015acc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8015c3e:	eef0 0a6a 	vmov.f32	s1, s21
 8015c42:	eeb0 0a4a 	vmov.f32	s0, s20
 8015c46:	4620      	mov	r0, r4
 8015c48:	e035      	b.n	8015cb6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 8015c4a:	2b01      	cmp	r3, #1
 8015c4c:	d138      	bne.n	8015cc0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8015c4e:	ee31 4ae2 	vsub.f32	s8, s3, s5
 8015c52:	ee33 6a48 	vsub.f32	s12, s6, s16
 8015c56:	ee71 7a42 	vsub.f32	s15, s2, s4
 8015c5a:	ee73 6ae4 	vsub.f32	s13, s7, s9
 8015c5e:	ee26 7a44 	vnmul.f32	s14, s12, s8
 8015c62:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015c66:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c6e:	d027      	beq.n	8015cc0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8015c70:	ee28 8a63 	vnmul.f32	s16, s16, s7
 8015c74:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 8015c78:	eea4 8a83 	vfma.f32	s16, s9, s6
 8015c7c:	eee1 8a22 	vfma.f32	s17, s2, s5
 8015c80:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8015c84:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8015c88:	eea6 8aa8 	vfma.f32	s16, s13, s17
 8015c8c:	eee6 7a28 	vfma.f32	s15, s12, s17
 8015c90:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8015c94:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8015c98:	ee39 9a60 	vsub.f32	s18, s18, s1
 8015c9c:	ee3c ca40 	vsub.f32	s24, s24, s0
 8015ca0:	ee29 9a09 	vmul.f32	s18, s18, s18
 8015ca4:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8015ca8:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8015cac:	eef4 7ac9 	vcmpe.f32	s15, s18
 8015cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cb4:	db04      	blt.n	8015cc0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8015cb6:	f7ff feb2 	bl	8015a1e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015cba:	ecbd 8b0a 	vpop	{d8-d12}
 8015cbe:	bd10      	pop	{r4, pc}
 8015cc0:	eef0 0a6b 	vmov.f32	s1, s23
 8015cc4:	eeb0 0a4b 	vmov.f32	s0, s22
 8015cc8:	4620      	mov	r0, r4
 8015cca:	f7ff fea8 	bl	8015a1e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015cce:	e7b6      	b.n	8015c3e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08015cd0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8015cd0:	b510      	push	{r4, lr}
 8015cd2:	ed2d 8b0c 	vpush	{d8-d13}
 8015cd6:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8015cda:	4604      	mov	r4, r0
 8015cdc:	eeb0 9a40 	vmov.f32	s18, s0
 8015ce0:	eef0 9a60 	vmov.f32	s19, s1
 8015ce4:	eef0 aa41 	vmov.f32	s21, s2
 8015ce8:	eeb0 ba61 	vmov.f32	s22, s3
 8015cec:	b933      	cbnz	r3, 8015cfc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 8015cee:	f7ff fe96 	bl	8015a1e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015cf2:	eef0 0a4b 	vmov.f32	s1, s22
 8015cf6:	eeb0 0a6a 	vmov.f32	s0, s21
 8015cfa:	e015      	b.n	8015d28 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 8015cfc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015d00:	ee71 8a40 	vsub.f32	s17, s2, s0
 8015d04:	ee31 8ae0 	vsub.f32	s16, s3, s1
 8015d08:	2b02      	cmp	r3, #2
 8015d0a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8015d0e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015d12:	d10f      	bne.n	8015d34 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8015d14:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8015d18:	ee30 0a08 	vadd.f32	s0, s0, s16
 8015d1c:	f7ff fe7f 	bl	8015a1e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015d20:	ee7b 0a68 	vsub.f32	s1, s22, s17
 8015d24:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8015d28:	4620      	mov	r0, r4
 8015d2a:	f7ff fe78 	bl	8015a1e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015d2e:	ecbd 8b0c 	vpop	{d8-d13}
 8015d32:	bd10      	pop	{r4, pc}
 8015d34:	f7ff fe73 	bl	8015a1e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015d38:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8015e70 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 8015d3c:	eef0 0a69 	vmov.f32	s1, s19
 8015d40:	eeb0 0a49 	vmov.f32	s0, s18
 8015d44:	eeb1 aa68 	vneg.f32	s20, s17
 8015d48:	eddf ba4a 	vldr	s23, [pc, #296]	@ 8015e74 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 8015d4c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015d50:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015d54:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8015d58:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8015d5c:	4620      	mov	r0, r4
 8015d5e:	f7ff fe5e 	bl	8015a1e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015d62:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8015e78 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 8015d66:	eef0 0a69 	vmov.f32	s1, s19
 8015d6a:	eeb0 0a49 	vmov.f32	s0, s18
 8015d6e:	ed9f ca43 	vldr	s24, [pc, #268]	@ 8015e7c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 8015d72:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015d76:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015d7a:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8015d7e:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8015d82:	4620      	mov	r0, r4
 8015d84:	f7ff fe4b 	bl	8015a1e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015d88:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 8015e80 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 8015d8c:	eef0 0a69 	vmov.f32	s1, s19
 8015d90:	eeb0 0a49 	vmov.f32	s0, s18
 8015d94:	eddf ca3b 	vldr	s25, [pc, #236]	@ 8015e84 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 8015d98:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015d9c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015da0:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8015da4:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8015da8:	4620      	mov	r0, r4
 8015daa:	f7ff fe38 	bl	8015a1e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015dae:	eddf 7a36 	vldr	s15, [pc, #216]	@ 8015e88 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 8015db2:	eef0 0a69 	vmov.f32	s1, s19
 8015db6:	eeb0 0a49 	vmov.f32	s0, s18
 8015dba:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015dbe:	ed9f da33 	vldr	s26, [pc, #204]	@ 8015e8c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 8015dc2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015dc6:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8015dca:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8015dce:	4620      	mov	r0, r4
 8015dd0:	f7ff fe25 	bl	8015a1e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015dd4:	ee79 0a88 	vadd.f32	s1, s19, s16
 8015dd8:	ee39 0a28 	vadd.f32	s0, s18, s17
 8015ddc:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8015de0:	ee30 0a08 	vadd.f32	s0, s0, s16
 8015de4:	4620      	mov	r0, r4
 8015de6:	f7ff fe1a 	bl	8015a1e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015dea:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8015e90 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 8015dee:	eef0 0a69 	vmov.f32	s1, s19
 8015df2:	eeb0 0a49 	vmov.f32	s0, s18
 8015df6:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015dfa:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015dfe:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8015e02:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8015e06:	4620      	mov	r0, r4
 8015e08:	f7ff fe09 	bl	8015a1e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015e0c:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8015e94 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 8015e10:	eef0 0a69 	vmov.f32	s1, s19
 8015e14:	eeb0 0a49 	vmov.f32	s0, s18
 8015e18:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015e1c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015e20:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8015e24:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8015e28:	4620      	mov	r0, r4
 8015e2a:	f7ff fdf8 	bl	8015a1e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015e2e:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8015e98 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 8015e32:	eef0 0a69 	vmov.f32	s1, s19
 8015e36:	eeb0 0a49 	vmov.f32	s0, s18
 8015e3a:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015e3e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015e42:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8015e46:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8015e4a:	4620      	mov	r0, r4
 8015e4c:	f7ff fde7 	bl	8015a1e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015e50:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8015e9c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 8015e54:	eef0 0a69 	vmov.f32	s1, s19
 8015e58:	eeb0 0a49 	vmov.f32	s0, s18
 8015e5c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015e60:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015e64:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8015e68:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8015e6c:	4620      	mov	r0, r4
 8015e6e:	e73e      	b.n	8015cee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 8015e70:	3d23d70a 	.word	0x3d23d70a
 8015e74:	3e8f5c29 	.word	0x3e8f5c29
 8015e78:	3e4ccccd 	.word	0x3e4ccccd
 8015e7c:	3f19999a 	.word	0x3f19999a
 8015e80:	3ecccccd 	.word	0x3ecccccd
 8015e84:	3f4ccccd 	.word	0x3f4ccccd
 8015e88:	3f3851ec 	.word	0x3f3851ec
 8015e8c:	3f75c28f 	.word	0x3f75c28f
 8015e90:	3fa3d70a 	.word	0x3fa3d70a
 8015e94:	3fcccccd 	.word	0x3fcccccd
 8015e98:	3fe66666 	.word	0x3fe66666
 8015e9c:	3ffae148 	.word	0x3ffae148

08015ea0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8015ea0:	b570      	push	{r4, r5, r6, lr}
 8015ea2:	ed2d 8b06 	vpush	{d8-d10}
 8015ea6:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8015eaa:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 8015eae:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8015eb2:	ee30 9a49 	vsub.f32	s18, s0, s18
 8015eb6:	eef0 aa40 	vmov.f32	s21, s0
 8015eba:	ee28 0a08 	vmul.f32	s0, s16, s16
 8015ebe:	eea9 0a09 	vfma.f32	s0, s18, s18
 8015ec2:	4604      	mov	r4, r0
 8015ec4:	eeb0 aa60 	vmov.f32	s20, s1
 8015ec8:	f014 feaa 	bl	802ac20 <sqrtf>
 8015ecc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ed4:	dd36      	ble.n	8015f44 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 8015ed6:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8015eda:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8015ede:	2600      	movs	r6, #0
 8015ee0:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8015ee4:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 8015ee8:	ee89 8a26 	vdiv.f32	s16, s18, s13
 8015eec:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 8015ef0:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 8015ef4:	ee70 9a28 	vadd.f32	s19, s0, s17
 8015ef8:	ee30 9ac8 	vsub.f32	s18, s1, s16
 8015efc:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8015f00:	ee78 8aaa 	vadd.f32	s17, s17, s21
 8015f04:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8015f08:	b1fd      	cbz	r5, 8015f4a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 8015f0a:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 8015f0e:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 8015f12:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 8015f16:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 8015f1a:	eef0 0a49 	vmov.f32	s1, s18
 8015f1e:	eeb0 0a69 	vmov.f32	s0, s19
 8015f22:	4620      	mov	r0, r4
 8015f24:	f7ff fd64 	bl	80159f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8015f28:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 8015f2c:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 8015f30:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 8015f34:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 8015f38:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 8015f3c:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 8015f40:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 8015f44:	ecbd 8b06 	vpop	{d8-d10}
 8015f48:	bd70      	pop	{r4, r5, r6, pc}
 8015f4a:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 8015f4e:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8015f52:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8015f56:	b16b      	cbz	r3, 8015f74 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 8015f58:	eef0 1a49 	vmov.f32	s3, s18
 8015f5c:	eeb0 1a69 	vmov.f32	s2, s19
 8015f60:	eef0 0a62 	vmov.f32	s1, s5
 8015f64:	eeb0 0a42 	vmov.f32	s0, s4
 8015f68:	4620      	mov	r0, r4
 8015f6a:	f7ff feb1 	bl	8015cd0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8015f6e:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 8015f72:	e7db      	b.n	8015f2c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 8015f74:	eef0 4a48 	vmov.f32	s9, s16
 8015f78:	eeb0 4a68 	vmov.f32	s8, s17
 8015f7c:	eef0 3a49 	vmov.f32	s7, s18
 8015f80:	eeb0 3a69 	vmov.f32	s6, s19
 8015f84:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8015f88:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8015f8c:	4620      	mov	r0, r4
 8015f8e:	f7ff fe13 	bl	8015bb8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8015f92:	e7cb      	b.n	8015f2c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08015f94 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8015f94:	ee07 2a90 	vmov	s15, r2
 8015f98:	ee07 1a10 	vmov	s14, r1
 8015f9c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8015fa0:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8015fa4:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8015fb4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8015fa8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015fac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015fb0:	f7ff bf76 	b.w	8015ea0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8015fb4:	3d000000 	.word	0x3d000000

08015fb8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8015fb8:	b538      	push	{r3, r4, r5, lr}
 8015fba:	ed2d 8b02 	vpush	{d8}
 8015fbe:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8015fc2:	4604      	mov	r4, r0
 8015fc4:	b31d      	cbz	r5, 801600e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8015fc6:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 8015fca:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8015fce:	ee78 8a67 	vsub.f32	s17, s16, s15
 8015fd2:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8015fd6:	eef0 0a68 	vmov.f32	s1, s17
 8015fda:	ee38 8a27 	vadd.f32	s16, s16, s15
 8015fde:	f7ff fd07 	bl	80159f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8015fe2:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8015fe6:	eef0 1a48 	vmov.f32	s3, s16
 8015fea:	eeb0 0a41 	vmov.f32	s0, s2
 8015fee:	eef0 0a68 	vmov.f32	s1, s17
 8015ff2:	4620      	mov	r0, r4
 8015ff4:	f7ff fe6c 	bl	8015cd0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8015ff8:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8015ffc:	eef0 1a68 	vmov.f32	s3, s17
 8016000:	eef0 0a48 	vmov.f32	s1, s16
 8016004:	eeb0 0a41 	vmov.f32	s0, s2
 8016008:	4620      	mov	r0, r4
 801600a:	f7ff fe61 	bl	8015cd0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 801600e:	ecbd 8b02 	vpop	{d8}
 8016012:	4628      	mov	r0, r5
 8016014:	bd38      	pop	{r3, r4, r5, pc}

08016016 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 8016016:	b510      	push	{r4, lr}
 8016018:	ed2d 8b02 	vpush	{d8}
 801601c:	4604      	mov	r4, r0
 801601e:	eeb0 8a40 	vmov.f32	s16, s0
 8016022:	eef0 8a60 	vmov.f32	s17, s1
 8016026:	f7ff ffc7 	bl	8015fb8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801602a:	b9d0      	cbnz	r0, 8016062 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 801602c:	4620      	mov	r0, r4
 801602e:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 8016032:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 8016036:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 801603a:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 801603e:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8016042:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8016046:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 801604a:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 801604e:	eef0 0a68 	vmov.f32	s1, s17
 8016052:	eeb0 0a48 	vmov.f32	s0, s16
 8016056:	f7ff fdaf 	bl	8015bb8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 801605a:	2001      	movs	r0, #1
 801605c:	ecbd 8b02 	vpop	{d8}
 8016060:	bd10      	pop	{r4, pc}
 8016062:	2000      	movs	r0, #0
 8016064:	e7fa      	b.n	801605c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

08016066 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 8016066:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 801606a:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 801606e:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 8016072:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 8016076:	f7ff be2b 	b.w	8015cd0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

0801607c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 801607c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016080:	b089      	sub	sp, #36	@ 0x24
 8016082:	461c      	mov	r4, r3
 8016084:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8016088:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801608c:	4682      	mov	sl, r0
 801608e:	9304      	str	r3, [sp, #16]
 8016090:	2300      	movs	r3, #0
 8016092:	4615      	mov	r5, r2
 8016094:	f10d 0820 	add.w	r8, sp, #32
 8016098:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801609a:	9306      	str	r3, [sp, #24]
 801609c:	f848 3d04 	str.w	r3, [r8, #-4]!
 80160a0:	9b04      	ldr	r3, [sp, #16]
 80160a2:	9105      	str	r1, [sp, #20]
 80160a4:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 80160a8:	9b05      	ldr	r3, [sp, #20]
 80160aa:	429d      	cmp	r5, r3
 80160ac:	d96d      	bls.n	801618a <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 80160ae:	3d01      	subs	r5, #1
 80160b0:	f819 3005 	ldrb.w	r3, [r9, r5]
 80160b4:	2b06      	cmp	r3, #6
 80160b6:	d8f7      	bhi.n	80160a8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 80160b8:	a201      	add	r2, pc, #4	@ (adr r2, 80160c0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 80160ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160be:	bf00      	nop
 80160c0:	080160df 	.word	0x080160df
 80160c4:	080160a9 	.word	0x080160a9
 80160c8:	080160dd 	.word	0x080160dd
 80160cc:	08016101 	.word	0x08016101
 80160d0:	08016101 	.word	0x08016101
 80160d4:	08016105 	.word	0x08016105
 80160d8:	08016145 	.word	0x08016145
 80160dc:	3c02      	subs	r4, #2
 80160de:	4650      	mov	r0, sl
 80160e0:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80160e4:	9400      	str	r4, [sp, #0]
 80160e6:	462b      	mov	r3, r5
 80160e8:	4642      	mov	r2, r8
 80160ea:	a906      	add	r1, sp, #24
 80160ec:	f7ff fcae 	bl	8015a4c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80160f0:	eddd 0a07 	vldr	s1, [sp, #28]
 80160f4:	ed9d 0a06 	vldr	s0, [sp, #24]
 80160f8:	4630      	mov	r0, r6
 80160fa:	f7ff fed1 	bl	8015ea0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80160fe:	e7d3      	b.n	80160a8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8016100:	3c01      	subs	r4, #1
 8016102:	e7ec      	b.n	80160de <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8016104:	f1a4 0b04 	sub.w	fp, r4, #4
 8016108:	3c02      	subs	r4, #2
 801610a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801610e:	4650      	mov	r0, sl
 8016110:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8016114:	f8cd b000 	str.w	fp, [sp]
 8016118:	462b      	mov	r3, r5
 801611a:	4642      	mov	r2, r8
 801611c:	a906      	add	r1, sp, #24
 801611e:	f7ff fc95 	bl	8015a4c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8016122:	eddd 2a07 	vldr	s5, [sp, #28]
 8016126:	ed9d 2a06 	vldr	s4, [sp, #24]
 801612a:	ed54 1a01 	vldr	s3, [r4, #-4]
 801612e:	ed14 1a02 	vldr	s2, [r4, #-8]
 8016132:	edd4 0a01 	vldr	s1, [r4, #4]
 8016136:	ed94 0a00 	vldr	s0, [r4]
 801613a:	4630      	mov	r0, r6
 801613c:	f7ff fc1a 	bl	8015974 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8016140:	465c      	mov	r4, fp
 8016142:	e7b1      	b.n	80160a8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8016144:	f1a4 0b06 	sub.w	fp, r4, #6
 8016148:	3c02      	subs	r4, #2
 801614a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801614e:	4650      	mov	r0, sl
 8016150:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8016154:	f8cd b000 	str.w	fp, [sp]
 8016158:	462b      	mov	r3, r5
 801615a:	4642      	mov	r2, r8
 801615c:	a906      	add	r1, sp, #24
 801615e:	f7ff fc75 	bl	8015a4c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8016162:	eddd 3a07 	vldr	s7, [sp, #28]
 8016166:	ed9d 3a06 	vldr	s6, [sp, #24]
 801616a:	ed54 2a03 	vldr	s5, [r4, #-12]
 801616e:	ed14 2a04 	vldr	s4, [r4, #-16]
 8016172:	ed54 1a01 	vldr	s3, [r4, #-4]
 8016176:	ed14 1a02 	vldr	s2, [r4, #-8]
 801617a:	edd4 0a01 	vldr	s1, [r4, #4]
 801617e:	ed94 0a00 	vldr	s0, [r4]
 8016182:	4630      	mov	r0, r6
 8016184:	f7ff fc15 	bl	80159b2 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8016188:	e7da      	b.n	8016140 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 801618a:	9b04      	ldr	r3, [sp, #16]
 801618c:	b113      	cbz	r3, 8016194 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 801618e:	4630      	mov	r0, r6
 8016190:	f7ff ff69 	bl	8016066 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8016194:	b009      	add	sp, #36	@ 0x24
 8016196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801619a:	bf00      	nop

0801619c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 801619c:	eef0 7a60 	vmov.f32	s15, s1
 80161a0:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80161a4:	ee17 2a90 	vmov	r2, s15
 80161a8:	eef0 7a40 	vmov.f32	s15, s0
 80161ac:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80161b0:	6803      	ldr	r3, [r0, #0]
 80161b2:	ee17 1a90 	vmov	r1, s15
 80161b6:	689b      	ldr	r3, [r3, #8]
 80161b8:	4718      	bx	r3
	...

080161bc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 80161bc:	b510      	push	{r4, lr}
 80161be:	4604      	mov	r4, r0
 80161c0:	4b03      	ldr	r3, [pc, #12]	@ (80161d0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 80161c2:	f840 3b14 	str.w	r3, [r0], #20
 80161c6:	f000 fc6d 	bl	8016aa4 <_ZN8touchgfx7OutlineD1Ev>
 80161ca:	4620      	mov	r0, r4
 80161cc:	bd10      	pop	{r4, pc}
 80161ce:	bf00      	nop
 80161d0:	0802eb54 	.word	0x0802eb54

080161d4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 80161d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161d8:	ed2d 8b04 	vpush	{d8-d9}
 80161dc:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 80161e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80161e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161e8:	b0b5      	sub	sp, #212	@ 0xd4
 80161ea:	4605      	mov	r5, r0
 80161ec:	468b      	mov	fp, r1
 80161ee:	9206      	str	r2, [sp, #24]
 80161f0:	461e      	mov	r6, r3
 80161f2:	f04f 0400 	mov.w	r4, #0
 80161f6:	f240 814e 	bls.w	8016496 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 80161fa:	23ff      	movs	r3, #255	@ 0xff
 80161fc:	9300      	str	r3, [sp, #0]
 80161fe:	1d02      	adds	r2, r0, #4
 8016200:	6981      	ldr	r1, [r0, #24]
 8016202:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8016204:	a808      	add	r0, sp, #32
 8016206:	f014 f881 	bl	802a30c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 801620a:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 801620e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016216:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801621a:	bf48      	it	mi
 801621c:	eef1 7a67 	vnegmi.f32	s15, s15
 8016220:	edd5 6a08 	vldr	s13, [r5, #32]
 8016224:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016228:	ee26 7aa7 	vmul.f32	s14, s13, s15
 801622c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016230:	ed9f 9a9a 	vldr	s18, [pc, #616]	@ 801649c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 8016234:	f04f 0800 	mov.w	r8, #0
 8016238:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 801623c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016240:	4b97      	ldr	r3, [pc, #604]	@ (80164a0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 8016242:	2201      	movs	r2, #1
 8016244:	9308      	str	r3, [sp, #32]
 8016246:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 801624a:	9325      	str	r3, [sp, #148]	@ 0x94
 801624c:	2300      	movs	r3, #0
 801624e:	942a      	str	r4, [sp, #168]	@ 0xa8
 8016250:	942b      	str	r4, [sp, #172]	@ 0xac
 8016252:	942c      	str	r4, [sp, #176]	@ 0xb0
 8016254:	942d      	str	r4, [sp, #180]	@ 0xb4
 8016256:	942e      	str	r4, [sp, #184]	@ 0xb8
 8016258:	942f      	str	r4, [sp, #188]	@ 0xbc
 801625a:	9430      	str	r4, [sp, #192]	@ 0xc0
 801625c:	9431      	str	r4, [sp, #196]	@ 0xc4
 801625e:	9432      	str	r4, [sp, #200]	@ 0xc8
 8016260:	9433      	str	r4, [sp, #204]	@ 0xcc
 8016262:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8016266:	eef0 9a49 	vmov.f32	s19, s18
 801626a:	eeb0 8a49 	vmov.f32	s16, s18
 801626e:	eef0 8a49 	vmov.f32	s17, s18
 8016272:	4644      	mov	r4, r8
 8016274:	46c1      	mov	r9, r8
 8016276:	f04f 0a01 	mov.w	sl, #1
 801627a:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 801627e:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 8016282:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 8016286:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801628a:	7f6a      	ldrb	r2, [r5, #29]
 801628c:	7fab      	ldrb	r3, [r5, #30]
 801628e:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 8016292:	435a      	muls	r2, r3
 8016294:	1c53      	adds	r3, r2, #1
 8016296:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 801629a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801629e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80162a2:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 80162a6:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 80162aa:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 80162ae:	af08      	add	r7, sp, #32
 80162b0:	9b06      	ldr	r3, [sp, #24]
 80162b2:	454b      	cmp	r3, r9
 80162b4:	f000 80cc 	beq.w	8016450 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 80162b8:	f109 0301 	add.w	r3, r9, #1
 80162bc:	9305      	str	r3, [sp, #20]
 80162be:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80162c2:	2b06      	cmp	r3, #6
 80162c4:	d839      	bhi.n	801633a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80162c6:	e8df f003 	tbb	[pc, r3]
 80162ca:	3b04      	.short	0x3b04
 80162cc:	817c6f60 	.word	0x817c6f60
 80162d0:	a0          	.byte	0xa0
 80162d1:	00          	.byte	0x00
 80162d2:	45c1      	cmp	r9, r8
 80162d4:	d92b      	bls.n	801632e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 80162d6:	eef0 0a49 	vmov.f32	s1, s18
 80162da:	eeb0 0a69 	vmov.f32	s0, s19
 80162de:	4638      	mov	r0, r7
 80162e0:	f7ff fdde 	bl	8015ea0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80162e4:	4638      	mov	r0, r7
 80162e6:	f7ff fe67 	bl	8015fb8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80162ea:	4681      	mov	r9, r0
 80162ec:	b9f8      	cbnz	r0, 801632e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 80162ee:	eef0 0a49 	vmov.f32	s1, s18
 80162f2:	eeb0 0a69 	vmov.f32	s0, s19
 80162f6:	4638      	mov	r0, r7
 80162f8:	f7ff fe8d 	bl	8016016 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 80162fc:	4628      	mov	r0, r5
 80162fe:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8016302:	e9cd b600 	strd	fp, r6, [sp]
 8016306:	4623      	mov	r3, r4
 8016308:	9a05      	ldr	r2, [sp, #20]
 801630a:	4641      	mov	r1, r8
 801630c:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 8016310:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8016314:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8016318:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 801631c:	f7ff feae 	bl	801607c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8016320:	eef0 0a49 	vmov.f32	s1, s18
 8016324:	eeb0 0a69 	vmov.f32	s0, s19
 8016328:	4638      	mov	r0, r7
 801632a:	f7ff fe74 	bl	8016016 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 801632e:	eeb0 8a49 	vmov.f32	s16, s18
 8016332:	eef0 8a69 	vmov.f32	s17, s19
 8016336:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801633a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801633e:	e7b7      	b.n	80162b0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8016340:	45c1      	cmp	r9, r8
 8016342:	d90d      	bls.n	8016360 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8016344:	4638      	mov	r0, r7
 8016346:	f7ff fe37 	bl	8015fb8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801634a:	b948      	cbnz	r0, 8016360 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 801634c:	e9cd a702 	strd	sl, r7, [sp, #8]
 8016350:	e9cd b600 	strd	fp, r6, [sp]
 8016354:	4623      	mov	r3, r4
 8016356:	464a      	mov	r2, r9
 8016358:	4641      	mov	r1, r8
 801635a:	4628      	mov	r0, r5
 801635c:	f7ff fe8e 	bl	801607c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8016360:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016364:	edd3 8a00 	vldr	s17, [r3]
 8016368:	ed93 8a01 	vldr	s16, [r3, #4]
 801636c:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8016370:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8016374:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8016378:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 801637c:	3402      	adds	r4, #2
 801637e:	46c8      	mov	r8, r9
 8016380:	eeb0 9a48 	vmov.f32	s18, s16
 8016384:	eef0 9a68 	vmov.f32	s19, s17
 8016388:	e7d7      	b.n	801633a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801638a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801638e:	edd3 8a00 	vldr	s17, [r3]
 8016392:	ed93 8a01 	vldr	s16, [r3, #4]
 8016396:	eeb0 0a68 	vmov.f32	s0, s17
 801639a:	eef0 0a48 	vmov.f32	s1, s16
 801639e:	4638      	mov	r0, r7
 80163a0:	f7ff fd7e 	bl	8015ea0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80163a4:	3402      	adds	r4, #2
 80163a6:	e7c8      	b.n	801633a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80163a8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80163ac:	edd3 8a00 	vldr	s17, [r3]
 80163b0:	eef0 0a48 	vmov.f32	s1, s16
 80163b4:	eeb0 0a68 	vmov.f32	s0, s17
 80163b8:	4638      	mov	r0, r7
 80163ba:	f7ff fd71 	bl	8015ea0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80163be:	3401      	adds	r4, #1
 80163c0:	e7bb      	b.n	801633a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80163c2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80163c6:	ed93 8a00 	vldr	s16, [r3]
 80163ca:	e7f1      	b.n	80163b0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 80163cc:	00a3      	lsls	r3, r4, #2
 80163ce:	f103 0208 	add.w	r2, r3, #8
 80163d2:	f103 090c 	add.w	r9, r3, #12
 80163d6:	4432      	add	r2, r6
 80163d8:	4433      	add	r3, r6
 80163da:	44b1      	add	r9, r6
 80163dc:	ed92 2a00 	vldr	s4, [r2]
 80163e0:	eef0 0a48 	vmov.f32	s1, s16
 80163e4:	eeb0 0a68 	vmov.f32	s0, s17
 80163e8:	edd9 2a00 	vldr	s5, [r9]
 80163ec:	edd3 1a01 	vldr	s3, [r3, #4]
 80163f0:	ed93 1a00 	vldr	s2, [r3]
 80163f4:	4638      	mov	r0, r7
 80163f6:	9207      	str	r2, [sp, #28]
 80163f8:	f7ff fabc 	bl	8015974 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80163fc:	9a07      	ldr	r2, [sp, #28]
 80163fe:	ed99 8a00 	vldr	s16, [r9]
 8016402:	edd2 8a00 	vldr	s17, [r2]
 8016406:	3404      	adds	r4, #4
 8016408:	e797      	b.n	801633a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801640a:	00a3      	lsls	r3, r4, #2
 801640c:	f103 0210 	add.w	r2, r3, #16
 8016410:	f103 0914 	add.w	r9, r3, #20
 8016414:	4432      	add	r2, r6
 8016416:	4433      	add	r3, r6
 8016418:	44b1      	add	r9, r6
 801641a:	ed92 3a00 	vldr	s6, [r2]
 801641e:	eef0 0a48 	vmov.f32	s1, s16
 8016422:	eeb0 0a68 	vmov.f32	s0, s17
 8016426:	edd9 3a00 	vldr	s7, [r9]
 801642a:	edd3 2a03 	vldr	s5, [r3, #12]
 801642e:	ed93 2a02 	vldr	s4, [r3, #8]
 8016432:	edd3 1a01 	vldr	s3, [r3, #4]
 8016436:	ed93 1a00 	vldr	s2, [r3]
 801643a:	4638      	mov	r0, r7
 801643c:	9207      	str	r2, [sp, #28]
 801643e:	f7ff fab8 	bl	80159b2 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8016442:	9a07      	ldr	r2, [sp, #28]
 8016444:	ed99 8a00 	vldr	s16, [r9]
 8016448:	edd2 8a00 	vldr	s17, [r2]
 801644c:	3406      	adds	r4, #6
 801644e:	e774      	b.n	801633a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8016450:	9b06      	ldr	r3, [sp, #24]
 8016452:	af08      	add	r7, sp, #32
 8016454:	4543      	cmp	r3, r8
 8016456:	d90f      	bls.n	8016478 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8016458:	4638      	mov	r0, r7
 801645a:	f7ff fdad 	bl	8015fb8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801645e:	b958      	cbnz	r0, 8016478 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8016460:	2301      	movs	r3, #1
 8016462:	9703      	str	r7, [sp, #12]
 8016464:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8016468:	f8cd b000 	str.w	fp, [sp]
 801646c:	4623      	mov	r3, r4
 801646e:	9a06      	ldr	r2, [sp, #24]
 8016470:	4641      	mov	r1, r8
 8016472:	4628      	mov	r0, r5
 8016474:	f7ff fe02 	bl	801607c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8016478:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 801647c:	4638      	mov	r0, r7
 801647e:	f013 ffd9 	bl	802a434 <_ZN8touchgfx6Canvas6renderEh>
 8016482:	4604      	mov	r4, r0
 8016484:	4638      	mov	r0, r7
 8016486:	f7ff fe99 	bl	80161bc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 801648a:	4620      	mov	r0, r4
 801648c:	b035      	add	sp, #212	@ 0xd4
 801648e:	ecbd 8b04 	vpop	{d8-d9}
 8016492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016496:	2401      	movs	r4, #1
 8016498:	e7f7      	b.n	801648a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 801649a:	bf00      	nop
 801649c:	00000000 	.word	0x00000000
 80164a0:	0802e4a4 	.word	0x0802e4a4

080164a4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 80164a4:	b510      	push	{r4, lr}
 80164a6:	4604      	mov	r4, r0
 80164a8:	f7ff fe88 	bl	80161bc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 80164ac:	4620      	mov	r0, r4
 80164ae:	21b0      	movs	r1, #176	@ 0xb0
 80164b0:	f014 fb8d 	bl	802abce <_ZdlPvj>
 80164b4:	4620      	mov	r0, r4
 80164b6:	bd10      	pop	{r4, pc}

080164b8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 80164b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164bc:	ed2d 8b06 	vpush	{d8-d10}
 80164c0:	4698      	mov	r8, r3
 80164c2:	23ff      	movs	r3, #255	@ 0xff
 80164c4:	4607      	mov	r7, r0
 80164c6:	b0aa      	sub	sp, #168	@ 0xa8
 80164c8:	9300      	str	r3, [sp, #0]
 80164ca:	4689      	mov	r9, r1
 80164cc:	4692      	mov	sl, r2
 80164ce:	6981      	ldr	r1, [r0, #24]
 80164d0:	1d02      	adds	r2, r0, #4
 80164d2:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80164d4:	a80d      	add	r0, sp, #52	@ 0x34
 80164d6:	f013 ff19 	bl	802a30c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 80164da:	eddf 0a80 	vldr	s1, [pc, #512]	@ 80166dc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 80164de:	7f3b      	ldrb	r3, [r7, #28]
 80164e0:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 80164e4:	1e5a      	subs	r2, r3, #1
 80164e6:	4253      	negs	r3, r2
 80164e8:	4153      	adcs	r3, r2
 80164ea:	eeb0 0a60 	vmov.f32	s0, s1
 80164ee:	4628      	mov	r0, r5
 80164f0:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 80164f4:	ed9f 8a79 	vldr	s16, [pc, #484]	@ 80166dc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 80164f8:	f003 ff83 	bl	801a402 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80164fc:	eef0 8a48 	vmov.f32	s17, s16
 8016500:	eeb0 9a40 	vmov.f32	s18, s0
 8016504:	eef0 9a60 	vmov.f32	s19, s1
 8016508:	2400      	movs	r4, #0
 801650a:	44ca      	add	sl, r9
 801650c:	45ca      	cmp	sl, r9
 801650e:	f000 80cd 	beq.w	80166ac <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8016512:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016516:	2b06      	cmp	r3, #6
 8016518:	d8f8      	bhi.n	801650c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801651a:	e8df f003 	tbb	[pc, r3]
 801651e:	0804      	.short	0x0804
 8016520:	58533f2a 	.word	0x58533f2a
 8016524:	8a          	.byte	0x8a
 8016525:	00          	.byte	0x00
 8016526:	a80d      	add	r0, sp, #52	@ 0x34
 8016528:	f013 ff62 	bl	802a3f0 <_ZN8touchgfx6Canvas5closeEv>
 801652c:	e7ee      	b.n	801650c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801652e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8016532:	edd3 8a00 	vldr	s17, [r3]
 8016536:	ed93 8a01 	vldr	s16, [r3, #4]
 801653a:	eeb0 0a68 	vmov.f32	s0, s17
 801653e:	eef0 0a48 	vmov.f32	s1, s16
 8016542:	4628      	mov	r0, r5
 8016544:	f003 ff5d 	bl	801a402 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016548:	eef0 7a60 	vmov.f32	s15, s1
 801654c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8016550:	ee17 2a90 	vmov	r2, s15
 8016554:	eef0 7a40 	vmov.f32	s15, s0
 8016558:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801655c:	a80d      	add	r0, sp, #52	@ 0x34
 801655e:	ee17 1a90 	vmov	r1, s15
 8016562:	eeb0 9a40 	vmov.f32	s18, s0
 8016566:	eef0 9a60 	vmov.f32	s19, s1
 801656a:	f014 f81b 	bl	802a5a4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801656e:	3402      	adds	r4, #2
 8016570:	e7cc      	b.n	801650c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8016572:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8016576:	edd3 8a00 	vldr	s17, [r3]
 801657a:	ed93 8a01 	vldr	s16, [r3, #4]
 801657e:	eeb0 0a68 	vmov.f32	s0, s17
 8016582:	eef0 0a48 	vmov.f32	s1, s16
 8016586:	4628      	mov	r0, r5
 8016588:	f003 ff3b 	bl	801a402 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801658c:	a80d      	add	r0, sp, #52	@ 0x34
 801658e:	eeb0 9a40 	vmov.f32	s18, s0
 8016592:	eef0 9a60 	vmov.f32	s19, s1
 8016596:	f7ff fe01 	bl	801619c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801659a:	e7e8      	b.n	801656e <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 801659c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80165a0:	edd3 8a00 	vldr	s17, [r3]
 80165a4:	eef0 0a48 	vmov.f32	s1, s16
 80165a8:	eeb0 0a68 	vmov.f32	s0, s17
 80165ac:	4628      	mov	r0, r5
 80165ae:	f003 ff28 	bl	801a402 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80165b2:	a80d      	add	r0, sp, #52	@ 0x34
 80165b4:	eeb0 9a40 	vmov.f32	s18, s0
 80165b8:	eef0 9a60 	vmov.f32	s19, s1
 80165bc:	3401      	adds	r4, #1
 80165be:	f7ff fded 	bl	801619c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80165c2:	e7a3      	b.n	801650c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80165c4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80165c8:	ed93 8a00 	vldr	s16, [r3]
 80165cc:	e7ea      	b.n	80165a4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 80165ce:	1ca3      	adds	r3, r4, #2
 80165d0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80165d4:	ed53 0a01 	vldr	s1, [r3, #-4]
 80165d8:	ed13 0a02 	vldr	s0, [r3, #-8]
 80165dc:	4628      	mov	r0, r5
 80165de:	edd3 8a00 	vldr	s17, [r3]
 80165e2:	ed93 8a01 	vldr	s16, [r3, #4]
 80165e6:	f003 ff0c 	bl	801a402 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80165ea:	4628      	mov	r0, r5
 80165ec:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 80165f0:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 80165f4:	eeb0 0a68 	vmov.f32	s0, s17
 80165f8:	eef0 0a48 	vmov.f32	s1, s16
 80165fc:	f003 ff01 	bl	801a402 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016600:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 8016604:	eef0 2a60 	vmov.f32	s5, s1
 8016608:	eeb0 2a40 	vmov.f32	s4, s0
 801660c:	eeb0 aa40 	vmov.f32	s20, s0
 8016610:	eef0 aa60 	vmov.f32	s21, s1
 8016614:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 8016618:	eef0 0a69 	vmov.f32	s1, s19
 801661c:	eeb0 0a49 	vmov.f32	s0, s18
 8016620:	a80d      	add	r0, sp, #52	@ 0x34
 8016622:	f7ff f9a7 	bl	8015974 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8016626:	3404      	adds	r4, #4
 8016628:	eef0 9a6a 	vmov.f32	s19, s21
 801662c:	eeb0 9a4a 	vmov.f32	s18, s20
 8016630:	e76c      	b.n	801650c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8016632:	1d26      	adds	r6, r4, #4
 8016634:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016638:	ed56 0a03 	vldr	s1, [r6, #-12]
 801663c:	ed16 0a04 	vldr	s0, [r6, #-16]
 8016640:	4628      	mov	r0, r5
 8016642:	edd6 8a00 	vldr	s17, [r6]
 8016646:	ed96 8a01 	vldr	s16, [r6, #4]
 801664a:	f003 feda 	bl	801a402 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801664e:	4628      	mov	r0, r5
 8016650:	ed8d 0a07 	vstr	s0, [sp, #28]
 8016654:	edcd 0a08 	vstr	s1, [sp, #32]
 8016658:	ed16 0a02 	vldr	s0, [r6, #-8]
 801665c:	ed56 0a01 	vldr	s1, [r6, #-4]
 8016660:	f003 fecf 	bl	801a402 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8016664:	4628      	mov	r0, r5
 8016666:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 801666a:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 801666e:	eeb0 0a68 	vmov.f32	s0, s17
 8016672:	eef0 0a48 	vmov.f32	s1, s16
 8016676:	f003 fec4 	bl	801a402 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801667a:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 801667e:	eef0 3a60 	vmov.f32	s7, s1
 8016682:	eeb0 3a40 	vmov.f32	s6, s0
 8016686:	eeb0 aa40 	vmov.f32	s20, s0
 801668a:	eef0 aa60 	vmov.f32	s21, s1
 801668e:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 8016692:	eddd 1a08 	vldr	s3, [sp, #32]
 8016696:	ed9d 1a07 	vldr	s2, [sp, #28]
 801669a:	eef0 0a69 	vmov.f32	s1, s19
 801669e:	eeb0 0a49 	vmov.f32	s0, s18
 80166a2:	a80d      	add	r0, sp, #52	@ 0x34
 80166a4:	f7ff f985 	bl	80159b2 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 80166a8:	3406      	adds	r4, #6
 80166aa:	e7bd      	b.n	8016628 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 80166ac:	7f7b      	ldrb	r3, [r7, #29]
 80166ae:	7fb9      	ldrb	r1, [r7, #30]
 80166b0:	a80d      	add	r0, sp, #52	@ 0x34
 80166b2:	4359      	muls	r1, r3
 80166b4:	1c4b      	adds	r3, r1, #1
 80166b6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80166ba:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80166be:	f013 feb9 	bl	802a434 <_ZN8touchgfx6Canvas6renderEh>
 80166c2:	4604      	mov	r4, r0
 80166c4:	4b06      	ldr	r3, [pc, #24]	@ (80166e0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 80166c6:	a812      	add	r0, sp, #72	@ 0x48
 80166c8:	930d      	str	r3, [sp, #52]	@ 0x34
 80166ca:	f000 f9eb 	bl	8016aa4 <_ZN8touchgfx7OutlineD1Ev>
 80166ce:	4620      	mov	r0, r4
 80166d0:	b02a      	add	sp, #168	@ 0xa8
 80166d2:	ecbd 8b06 	vpop	{d8-d10}
 80166d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166da:	bf00      	nop
 80166dc:	00000000 	.word	0x00000000
 80166e0:	0802eb54 	.word	0x0802eb54

080166e4 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 80166e4:	b410      	push	{r4}
 80166e6:	7f04      	ldrb	r4, [r0, #28]
 80166e8:	b11c      	cbz	r4, 80166f2 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 80166ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80166ee:	f7ff bee3 	b.w	80164b8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 80166f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80166f6:	f7ff bd6d 	b.w	80161d4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>
	...

080166fc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 80166fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016700:	4691      	mov	r9, r2
 8016702:	4602      	mov	r2, r0
 8016704:	4605      	mov	r5, r0
 8016706:	f852 0f26 	ldr.w	r0, [r2, #38]!
 801670a:	b085      	sub	sp, #20
 801670c:	4688      	mov	r8, r1
 801670e:	6851      	ldr	r1, [r2, #4]
 8016710:	469a      	mov	sl, r3
 8016712:	ab02      	add	r3, sp, #8
 8016714:	c303      	stmia	r3!, {r0, r1}
 8016716:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801671a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801671e:	2b00      	cmp	r3, #0
 8016720:	af02      	add	r7, sp, #8
 8016722:	dd08      	ble.n	8016736 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8016724:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8016728:	2c00      	cmp	r4, #0
 801672a:	dd04      	ble.n	8016736 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 801672c:	4a2e      	ldr	r2, [pc, #184]	@ (80167e8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xec>)
 801672e:	7812      	ldrb	r2, [r2, #0]
 8016730:	b122      	cbz	r2, 801673c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x40>
 8016732:	2a01      	cmp	r2, #1
 8016734:	d02d      	beq.n	8016792 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x96>
 8016736:	b005      	add	sp, #20
 8016738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801673c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016740:	441c      	add	r4, r3
 8016742:	b2a4      	uxth	r4, r4
 8016744:	b226      	sxth	r6, r4
 8016746:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801674a:	42b3      	cmp	r3, r6
 801674c:	daf3      	bge.n	8016736 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 801674e:	e9cd b700 	strd	fp, r7, [sp]
 8016752:	4653      	mov	r3, sl
 8016754:	464a      	mov	r2, r9
 8016756:	4641      	mov	r1, r8
 8016758:	4628      	mov	r0, r5
 801675a:	f7ff ffc3 	bl	80166e4 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 801675e:	b940      	cbnz	r0, 8016772 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 8016760:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016764:	2b01      	cmp	r3, #1
 8016766:	d004      	beq.n	8016772 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 8016768:	3301      	adds	r3, #1
 801676a:	105b      	asrs	r3, r3, #1
 801676c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016770:	e7ed      	b.n	801674e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x52>
 8016772:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8016776:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801677a:	4413      	add	r3, r2
 801677c:	b29b      	uxth	r3, r3
 801677e:	441a      	add	r2, r3
 8016780:	b212      	sxth	r2, r2
 8016782:	4296      	cmp	r6, r2
 8016784:	f8ad 300a 	strh.w	r3, [sp, #10]
 8016788:	dadd      	bge.n	8016746 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 801678a:	1ae3      	subs	r3, r4, r3
 801678c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016790:	e7d9      	b.n	8016746 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 8016792:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8016796:	441c      	add	r4, r3
 8016798:	b2a4      	uxth	r4, r4
 801679a:	b226      	sxth	r6, r4
 801679c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80167a0:	42b3      	cmp	r3, r6
 80167a2:	dac8      	bge.n	8016736 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 80167a4:	e9cd b700 	strd	fp, r7, [sp]
 80167a8:	4653      	mov	r3, sl
 80167aa:	464a      	mov	r2, r9
 80167ac:	4641      	mov	r1, r8
 80167ae:	4628      	mov	r0, r5
 80167b0:	f7ff ff98 	bl	80166e4 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 80167b4:	b940      	cbnz	r0, 80167c8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 80167b6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80167ba:	2b01      	cmp	r3, #1
 80167bc:	d004      	beq.n	80167c8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 80167be:	3301      	adds	r3, #1
 80167c0:	105b      	asrs	r3, r3, #1
 80167c2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80167c6:	e7ed      	b.n	80167a4 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa8>
 80167c8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80167cc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80167d0:	4413      	add	r3, r2
 80167d2:	b29b      	uxth	r3, r3
 80167d4:	441a      	add	r2, r3
 80167d6:	b212      	sxth	r2, r2
 80167d8:	4296      	cmp	r6, r2
 80167da:	f8ad 3008 	strh.w	r3, [sp, #8]
 80167de:	dadd      	bge.n	801679c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 80167e0:	1ae3      	subs	r3, r4, r3
 80167e2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80167e6:	e7d9      	b.n	801679c <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 80167e8:	2005b920 	.word	0x2005b920

080167ec <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80167ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80167ee:	6803      	ldr	r3, [r0, #0]
 80167f0:	460d      	mov	r5, r1
 80167f2:	4604      	mov	r4, r0
 80167f4:	4601      	mov	r1, r0
 80167f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80167f8:	a802      	add	r0, sp, #8
 80167fa:	4798      	blx	r3
 80167fc:	466b      	mov	r3, sp
 80167fe:	6828      	ldr	r0, [r5, #0]
 8016800:	6869      	ldr	r1, [r5, #4]
 8016802:	c303      	stmia	r3!, {r0, r1}
 8016804:	4668      	mov	r0, sp
 8016806:	4619      	mov	r1, r3
 8016808:	f7fd fbb2 	bl	8013f70 <_ZN8touchgfx4RectaNERKS0_>
 801680c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801680e:	b188      	cbz	r0, 8016834 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016810:	6803      	ldr	r3, [r0, #0]
 8016812:	1d21      	adds	r1, r4, #4
 8016814:	68db      	ldr	r3, [r3, #12]
 8016816:	4798      	blx	r3
 8016818:	b160      	cbz	r0, 8016834 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801681a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801681e:	2b00      	cmp	r3, #0
 8016820:	dd08      	ble.n	8016834 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016822:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8016826:	2d00      	cmp	r5, #0
 8016828:	dd04      	ble.n	8016834 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801682a:	4a2b      	ldr	r2, [pc, #172]	@ (80168d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 801682c:	7812      	ldrb	r2, [r2, #0]
 801682e:	b11a      	cbz	r2, 8016838 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8016830:	2a01      	cmp	r2, #1
 8016832:	d029      	beq.n	8016888 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8016834:	b004      	add	sp, #16
 8016836:	bd70      	pop	{r4, r5, r6, pc}
 8016838:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801683c:	441d      	add	r5, r3
 801683e:	b2ad      	uxth	r5, r5
 8016840:	b22e      	sxth	r6, r5
 8016842:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8016846:	42b3      	cmp	r3, r6
 8016848:	daf4      	bge.n	8016834 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801684a:	6823      	ldr	r3, [r4, #0]
 801684c:	4669      	mov	r1, sp
 801684e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016850:	4620      	mov	r0, r4
 8016852:	4798      	blx	r3
 8016854:	b940      	cbnz	r0, 8016868 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8016856:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801685a:	2b01      	cmp	r3, #1
 801685c:	d004      	beq.n	8016868 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801685e:	3301      	adds	r3, #1
 8016860:	105b      	asrs	r3, r3, #1
 8016862:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016866:	e7f0      	b.n	801684a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016868:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801686c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016870:	4413      	add	r3, r2
 8016872:	b29b      	uxth	r3, r3
 8016874:	441a      	add	r2, r3
 8016876:	b212      	sxth	r2, r2
 8016878:	4296      	cmp	r6, r2
 801687a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801687e:	dae0      	bge.n	8016842 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8016880:	1aeb      	subs	r3, r5, r3
 8016882:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016886:	e7dc      	b.n	8016842 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8016888:	f8bd 5000 	ldrh.w	r5, [sp]
 801688c:	441d      	add	r5, r3
 801688e:	b2ad      	uxth	r5, r5
 8016890:	b22e      	sxth	r6, r5
 8016892:	f9bd 3000 	ldrsh.w	r3, [sp]
 8016896:	42b3      	cmp	r3, r6
 8016898:	dacc      	bge.n	8016834 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801689a:	6823      	ldr	r3, [r4, #0]
 801689c:	4669      	mov	r1, sp
 801689e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168a0:	4620      	mov	r0, r4
 80168a2:	4798      	blx	r3
 80168a4:	b940      	cbnz	r0, 80168b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80168a6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80168aa:	2b01      	cmp	r3, #1
 80168ac:	d004      	beq.n	80168b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80168ae:	3301      	adds	r3, #1
 80168b0:	105b      	asrs	r3, r3, #1
 80168b2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80168b6:	e7f0      	b.n	801689a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80168b8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80168bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80168c0:	4413      	add	r3, r2
 80168c2:	b29b      	uxth	r3, r3
 80168c4:	441a      	add	r2, r3
 80168c6:	b212      	sxth	r2, r2
 80168c8:	4296      	cmp	r6, r2
 80168ca:	f8ad 3000 	strh.w	r3, [sp]
 80168ce:	dae0      	bge.n	8016892 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 80168d0:	1aeb      	subs	r3, r5, r3
 80168d2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80168d6:	e7dc      	b.n	8016892 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 80168d8:	2005b920 	.word	0x2005b920

080168dc <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80168dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80168de:	6803      	ldr	r3, [r0, #0]
 80168e0:	4604      	mov	r4, r0
 80168e2:	4601      	mov	r1, r0
 80168e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80168e6:	4668      	mov	r0, sp
 80168e8:	4798      	blx	r3
 80168ea:	2100      	movs	r1, #0
 80168ec:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80168f0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80168f4:	9102      	str	r1, [sp, #8]
 80168f6:	4668      	mov	r0, sp
 80168f8:	a902      	add	r1, sp, #8
 80168fa:	f8ad 200c 	strh.w	r2, [sp, #12]
 80168fe:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016902:	f7fd fb35 	bl	8013f70 <_ZN8touchgfx4RectaNERKS0_>
 8016906:	6823      	ldr	r3, [r4, #0]
 8016908:	4669      	mov	r1, sp
 801690a:	691b      	ldr	r3, [r3, #16]
 801690c:	4620      	mov	r0, r4
 801690e:	4798      	blx	r3
 8016910:	b004      	add	sp, #16
 8016912:	bd10      	pop	{r4, pc}

08016914 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8016914:	2101      	movs	r1, #1
 8016916:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801691a:	490b      	ldr	r1, [pc, #44]	@ (8016948 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801691c:	2200      	movs	r2, #0
 801691e:	6001      	str	r1, [r0, #0]
 8016920:	21ff      	movs	r1, #255	@ 0xff
 8016922:	8082      	strh	r2, [r0, #4]
 8016924:	80c2      	strh	r2, [r0, #6]
 8016926:	8102      	strh	r2, [r0, #8]
 8016928:	8142      	strh	r2, [r0, #10]
 801692a:	8182      	strh	r2, [r0, #12]
 801692c:	81c2      	strh	r2, [r0, #14]
 801692e:	8202      	strh	r2, [r0, #16]
 8016930:	8242      	strh	r2, [r0, #18]
 8016932:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016936:	61c2      	str	r2, [r0, #28]
 8016938:	8402      	strh	r2, [r0, #32]
 801693a:	8442      	strh	r2, [r0, #34]	@ 0x22
 801693c:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8016940:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8016944:	6282      	str	r2, [r0, #40]	@ 0x28
 8016946:	4770      	bx	lr
 8016948:	0802e504 	.word	0x0802e504

0801694c <_ZNK8touchgfx3Box12getSolidRectEv>:
 801694c:	2300      	movs	r3, #0
 801694e:	8083      	strh	r3, [r0, #4]
 8016950:	80c3      	strh	r3, [r0, #6]
 8016952:	8003      	strh	r3, [r0, #0]
 8016954:	8043      	strh	r3, [r0, #2]
 8016956:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 801695a:	2bff      	cmp	r3, #255	@ 0xff
 801695c:	bf01      	itttt	eq
 801695e:	890b      	ldrheq	r3, [r1, #8]
 8016960:	8083      	strheq	r3, [r0, #4]
 8016962:	894b      	ldrheq	r3, [r1, #10]
 8016964:	80c3      	strheq	r3, [r0, #6]
 8016966:	4770      	bx	lr

08016968 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8016968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801696a:	4604      	mov	r4, r0
 801696c:	466b      	mov	r3, sp
 801696e:	6808      	ldr	r0, [r1, #0]
 8016970:	6849      	ldr	r1, [r1, #4]
 8016972:	c303      	stmia	r3!, {r0, r1}
 8016974:	6823      	ldr	r3, [r4, #0]
 8016976:	4669      	mov	r1, sp
 8016978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801697a:	4620      	mov	r0, r4
 801697c:	4798      	blx	r3
 801697e:	4b08      	ldr	r3, [pc, #32]	@ (80169a0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8016986:	b10a      	cbz	r2, 801698c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8016988:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801698a:	b900      	cbnz	r0, 801698e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801698c:	6898      	ldr	r0, [r3, #8]
 801698e:	6803      	ldr	r3, [r0, #0]
 8016990:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8016992:	6a1d      	ldr	r5, [r3, #32]
 8016994:	4669      	mov	r1, sp
 8016996:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801699a:	47a8      	blx	r5
 801699c:	b003      	add	sp, #12
 801699e:	bd30      	pop	{r4, r5, pc}
 80169a0:	2005b928 	.word	0x2005b928

080169a4 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80169a4:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 80169a8:	b12a      	cbz	r2, 80169b6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80169aa:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80169ae:	b112      	cbz	r2, 80169b6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80169b0:	6803      	ldr	r3, [r0, #0]
 80169b2:	695b      	ldr	r3, [r3, #20]
 80169b4:	4718      	bx	r3
 80169b6:	4770      	bx	lr

080169b8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80169b8:	b570      	push	{r4, r5, r6, lr}
 80169ba:	880b      	ldrh	r3, [r1, #0]
 80169bc:	4604      	mov	r4, r0
 80169be:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80169c0:	4608      	mov	r0, r1
 80169c2:	460d      	mov	r5, r1
 80169c4:	f005 f8b2 	bl	801bb2c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80169c8:	4606      	mov	r6, r0
 80169ca:	4628      	mov	r0, r5
 80169cc:	f005 f8e2 	bl	801bb94 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80169d0:	4605      	mov	r5, r0
 80169d2:	6823      	ldr	r3, [r4, #0]
 80169d4:	4631      	mov	r1, r6
 80169d6:	4620      	mov	r0, r4
 80169d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80169da:	4798      	blx	r3
 80169dc:	6823      	ldr	r3, [r4, #0]
 80169de:	4629      	mov	r1, r5
 80169e0:	4620      	mov	r0, r4
 80169e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80169e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80169e8:	4718      	bx	r3

080169ea <_ZNK8touchgfx5Image12getSolidRectEv>:
 80169ea:	b510      	push	{r4, lr}
 80169ec:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80169f0:	4604      	mov	r4, r0
 80169f2:	2bff      	cmp	r3, #255	@ 0xff
 80169f4:	d006      	beq.n	8016a04 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80169f6:	2300      	movs	r3, #0
 80169f8:	8003      	strh	r3, [r0, #0]
 80169fa:	8043      	strh	r3, [r0, #2]
 80169fc:	8083      	strh	r3, [r0, #4]
 80169fe:	80c3      	strh	r3, [r0, #6]
 8016a00:	4620      	mov	r0, r4
 8016a02:	bd10      	pop	{r4, pc}
 8016a04:	3126      	adds	r1, #38	@ 0x26
 8016a06:	f005 f8f9 	bl	801bbfc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8016a0a:	e7f9      	b.n	8016a00 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08016a0c <_ZNK8touchgfx5Image17invalidateContentEv>:
 8016a0c:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 8016a10:	b12a      	cbz	r2, 8016a1e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8016a12:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8016a16:	b112      	cbz	r2, 8016a1e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8016a18:	6803      	ldr	r3, [r0, #0]
 8016a1a:	695b      	ldr	r3, [r3, #20]
 8016a1c:	4718      	bx	r3
 8016a1e:	4770      	bx	lr

08016a20 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8016a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a24:	4604      	mov	r4, r0
 8016a26:	2500      	movs	r5, #0
 8016a28:	f854 3b26 	ldr.w	r3, [r4], #38
 8016a2c:	b088      	sub	sp, #32
 8016a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016a30:	460f      	mov	r7, r1
 8016a32:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016a36:	a904      	add	r1, sp, #16
 8016a38:	4606      	mov	r6, r0
 8016a3a:	4798      	blx	r3
 8016a3c:	4620      	mov	r0, r4
 8016a3e:	f005 f875 	bl	801bb2c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016a42:	4680      	mov	r8, r0
 8016a44:	4620      	mov	r0, r4
 8016a46:	f005 f8a5 	bl	801bb94 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016a4a:	9506      	str	r5, [sp, #24]
 8016a4c:	ad06      	add	r5, sp, #24
 8016a4e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8016a52:	4639      	mov	r1, r7
 8016a54:	4628      	mov	r0, r5
 8016a56:	f8ad 801c 	strh.w	r8, [sp, #28]
 8016a5a:	f7fd fa89 	bl	8013f70 <_ZN8touchgfx4RectaNERKS0_>
 8016a5e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	dd19      	ble.n	8016a9a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8016a66:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	dd15      	ble.n	8016a9a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8016a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8016aa0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8016a76:	b10a      	cbz	r2, 8016a7c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8016a78:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8016a7a:	b900      	cbnz	r0, 8016a7e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8016a7c:	6898      	ldr	r0, [r3, #8]
 8016a7e:	2701      	movs	r7, #1
 8016a80:	6801      	ldr	r1, [r0, #0]
 8016a82:	9702      	str	r7, [sp, #8]
 8016a84:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8016a88:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8016a8c:	e9cd 5600 	strd	r5, r6, [sp]
 8016a90:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8016a94:	688d      	ldr	r5, [r1, #8]
 8016a96:	4621      	mov	r1, r4
 8016a98:	47a8      	blx	r5
 8016a9a:	b008      	add	sp, #32
 8016a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016aa0:	2005b928 	.word	0x2005b928

08016aa4 <_ZN8touchgfx7OutlineD1Ev>:
 8016aa4:	4770      	bx	lr

08016aa6 <_ZN8touchgfx7OutlineD0Ev>:
 8016aa6:	b510      	push	{r4, lr}
 8016aa8:	4604      	mov	r4, r0
 8016aaa:	2130      	movs	r1, #48	@ 0x30
 8016aac:	f014 f88f 	bl	802abce <_ZdlPvj>
 8016ab0:	4620      	mov	r0, r4
 8016ab2:	bd10      	pop	{r4, pc}

08016ab4 <_ZN8touchgfx7Outline5resetEv>:
 8016ab4:	b510      	push	{r4, lr}
 8016ab6:	4604      	mov	r4, r0
 8016ab8:	f000 fe80 	bl	80177bc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8016abc:	60e0      	str	r0, [r4, #12]
 8016abe:	f000 fe83 	bl	80177c8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8016ac2:	2200      	movs	r2, #0
 8016ac4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8016ac8:	68e3      	ldr	r3, [r4, #12]
 8016aca:	08c0      	lsrs	r0, r0, #3
 8016acc:	3801      	subs	r0, #1
 8016ace:	6123      	str	r3, [r4, #16]
 8016ad0:	6060      	str	r0, [r4, #4]
 8016ad2:	60a2      	str	r2, [r4, #8]
 8016ad4:	8019      	strh	r1, [r3, #0]
 8016ad6:	8059      	strh	r1, [r3, #2]
 8016ad8:	809a      	strh	r2, [r3, #4]
 8016ada:	80da      	strh	r2, [r3, #6]
 8016adc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8016ade:	f023 0301 	bic.w	r3, r3, #1
 8016ae2:	f043 0302 	orr.w	r3, r3, #2
 8016ae6:	6263      	str	r3, [r4, #36]	@ 0x24
 8016ae8:	bd10      	pop	{r4, pc}
	...

08016aec <_ZN8touchgfx7OutlineC1Ev>:
 8016aec:	4b0a      	ldr	r3, [pc, #40]	@ (8016b18 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8016aee:	b510      	push	{r4, lr}
 8016af0:	6003      	str	r3, [r0, #0]
 8016af2:	2300      	movs	r3, #0
 8016af4:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8016af8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016afc:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8016b00:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8016b04:	6243      	str	r3, [r0, #36]	@ 0x24
 8016b06:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016b0a:	4604      	mov	r4, r0
 8016b0c:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8016b10:	f7ff ffd0 	bl	8016ab4 <_ZN8touchgfx7Outline5resetEv>
 8016b14:	4620      	mov	r0, r4
 8016b16:	bd10      	pop	{r4, pc}
 8016b18:	0802e650 	.word	0x0802e650

08016b1c <_ZN8touchgfx7Outline10renderLineEiiii>:
 8016b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b20:	b093      	sub	sp, #76	@ 0x4c
 8016b22:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8016b24:	9305      	str	r3, [sp, #20]
 8016b26:	f004 051f 	and.w	r5, r4, #31
 8016b2a:	1153      	asrs	r3, r2, #5
 8016b2c:	9504      	str	r5, [sp, #16]
 8016b2e:	1156      	asrs	r6, r2, #5
 8016b30:	1165      	asrs	r5, r4, #5
 8016b32:	9303      	str	r3, [sp, #12]
 8016b34:	42ae      	cmp	r6, r5
 8016b36:	ea4f 1364 	mov.w	r3, r4, asr #5
 8016b3a:	9306      	str	r3, [sp, #24]
 8016b3c:	f002 031f 	and.w	r3, r2, #31
 8016b40:	f040 80f8 	bne.w	8016d34 <_ZN8touchgfx7Outline10renderLineEiiii+0x218>
 8016b44:	9c04      	ldr	r4, [sp, #16]
 8016b46:	9a05      	ldr	r2, [sp, #20]
 8016b48:	42a3      	cmp	r3, r4
 8016b4a:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8016b4e:	6902      	ldr	r2, [r0, #16]
 8016b50:	d125      	bne.n	8016b9e <_ZN8touchgfx7Outline10renderLineEiiii+0x82>
 8016b52:	f9b2 3000 	ldrsh.w	r3, [r2]
 8016b56:	459e      	cmp	lr, r3
 8016b58:	d103      	bne.n	8016b62 <_ZN8touchgfx7Outline10renderLineEiiii+0x46>
 8016b5a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8016b5e:	429e      	cmp	r6, r3
 8016b60:	d035      	beq.n	8016bce <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8016b62:	88d1      	ldrh	r1, [r2, #6]
 8016b64:	8893      	ldrh	r3, [r2, #4]
 8016b66:	430b      	orrs	r3, r1
 8016b68:	d010      	beq.n	8016b8c <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8016b6a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	db0c      	blt.n	8016b8c <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8016b72:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8016b74:	428b      	cmp	r3, r1
 8016b76:	da09      	bge.n	8016b8c <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8016b78:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8016b7c:	428b      	cmp	r3, r1
 8016b7e:	bf38      	it	cc
 8016b80:	3208      	addcc	r2, #8
 8016b82:	f103 0301 	add.w	r3, r3, #1
 8016b86:	bf38      	it	cc
 8016b88:	6102      	strcc	r2, [r0, #16]
 8016b8a:	6083      	str	r3, [r0, #8]
 8016b8c:	6903      	ldr	r3, [r0, #16]
 8016b8e:	9a03      	ldr	r2, [sp, #12]
 8016b90:	f8a3 e000 	strh.w	lr, [r3]
 8016b94:	805a      	strh	r2, [r3, #2]
 8016b96:	2200      	movs	r2, #0
 8016b98:	809a      	strh	r2, [r3, #4]
 8016b9a:	80da      	strh	r2, [r3, #6]
 8016b9c:	e017      	b.n	8016bce <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8016b9e:	9c05      	ldr	r4, [sp, #20]
 8016ba0:	114e      	asrs	r6, r1, #5
 8016ba2:	f004 041f 	and.w	r4, r4, #31
 8016ba6:	9402      	str	r4, [sp, #8]
 8016ba8:	9c04      	ldr	r4, [sp, #16]
 8016baa:	4576      	cmp	r6, lr
 8016bac:	f001 0c1f 	and.w	ip, r1, #31
 8016bb0:	eba4 0403 	sub.w	r4, r4, r3
 8016bb4:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8016bb8:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8016bbc:	d10a      	bne.n	8016bd4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb8>
 8016bbe:	9b02      	ldr	r3, [sp, #8]
 8016bc0:	44a0      	add	r8, r4
 8016bc2:	449c      	add	ip, r3
 8016bc4:	fb04 a40c 	mla	r4, r4, ip, sl
 8016bc8:	f8a2 8004 	strh.w	r8, [r2, #4]
 8016bcc:	80d4      	strh	r4, [r2, #6]
 8016bce:	b013      	add	sp, #76	@ 0x4c
 8016bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bd4:	9d05      	ldr	r5, [sp, #20]
 8016bd6:	1a69      	subs	r1, r5, r1
 8016bd8:	bf5b      	ittet	pl
 8016bda:	f1cc 0520 	rsbpl	r5, ip, #32
 8016bde:	436c      	mulpl	r4, r5
 8016be0:	2500      	movmi	r5, #0
 8016be2:	2520      	movpl	r5, #32
 8016be4:	bf44      	itt	mi
 8016be6:	fb04 f40c 	mulmi.w	r4, r4, ip
 8016bea:	4249      	negmi	r1, r1
 8016bec:	9501      	str	r5, [sp, #4]
 8016bee:	fb94 f5f1 	sdiv	r5, r4, r1
 8016bf2:	bf54      	ite	pl
 8016bf4:	f04f 0901 	movpl.w	r9, #1
 8016bf8:	f04f 39ff 	movmi.w	r9, #4294967295
 8016bfc:	fb01 4415 	mls	r4, r1, r5, r4
 8016c00:	9f01      	ldr	r7, [sp, #4]
 8016c02:	2c00      	cmp	r4, #0
 8016c04:	bfb8      	it	lt
 8016c06:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8016c0a:	44bc      	add	ip, r7
 8016c0c:	fb05 ac0c 	mla	ip, r5, ip, sl
 8016c10:	44a8      	add	r8, r5
 8016c12:	f8a2 8004 	strh.w	r8, [r2, #4]
 8016c16:	f8a2 c006 	strh.w	ip, [r2, #6]
 8016c1a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016c1e:	bfb8      	it	lt
 8016c20:	1864      	addlt	r4, r4, r1
 8016c22:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8016c26:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8016c2a:	444e      	add	r6, r9
 8016c2c:	ea58 0202 	orrs.w	r2, r8, r2
 8016c30:	d011      	beq.n	8016c56 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8016c32:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8016c36:	f1b8 0f00 	cmp.w	r8, #0
 8016c3a:	db0c      	blt.n	8016c56 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8016c3c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8016c3e:	4590      	cmp	r8, r2
 8016c40:	da09      	bge.n	8016c56 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8016c42:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8016c46:	4590      	cmp	r8, r2
 8016c48:	bf3c      	itt	cc
 8016c4a:	f10c 0208 	addcc.w	r2, ip, #8
 8016c4e:	6102      	strcc	r2, [r0, #16]
 8016c50:	f108 0201 	add.w	r2, r8, #1
 8016c54:	6082      	str	r2, [r0, #8]
 8016c56:	2700      	movs	r7, #0
 8016c58:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016c5c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8016c60:	45b6      	cmp	lr, r6
 8016c62:	f8ac 6000 	strh.w	r6, [ip]
 8016c66:	f8ac 2002 	strh.w	r2, [ip, #2]
 8016c6a:	f8ac 7004 	strh.w	r7, [ip, #4]
 8016c6e:	f8ac 7006 	strh.w	r7, [ip, #6]
 8016c72:	442b      	add	r3, r5
 8016c74:	d04d      	beq.n	8016d12 <_ZN8touchgfx7Outline10renderLineEiiii+0x1f6>
 8016c76:	9f04      	ldr	r7, [sp, #16]
 8016c78:	f04f 0a00 	mov.w	sl, #0
 8016c7c:	1aff      	subs	r7, r7, r3
 8016c7e:	443d      	add	r5, r7
 8016c80:	016d      	lsls	r5, r5, #5
 8016c82:	fb95 f8f1 	sdiv	r8, r5, r1
 8016c86:	fb01 5518 	mls	r5, r1, r8, r5
 8016c8a:	2d00      	cmp	r5, #0
 8016c8c:	bfb8      	it	lt
 8016c8e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8016c92:	f108 0701 	add.w	r7, r8, #1
 8016c96:	bfb8      	it	lt
 8016c98:	186d      	addlt	r5, r5, r1
 8016c9a:	1a64      	subs	r4, r4, r1
 8016c9c:	9703      	str	r7, [sp, #12]
 8016c9e:	1964      	adds	r4, r4, r5
 8016ca0:	bf48      	it	mi
 8016ca2:	4647      	movmi	r7, r8
 8016ca4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016ca8:	bf58      	it	pl
 8016caa:	9f03      	ldrpl	r7, [sp, #12]
 8016cac:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8016cb0:	443b      	add	r3, r7
 8016cb2:	44bb      	add	fp, r7
 8016cb4:	f8ac b004 	strh.w	fp, [ip, #4]
 8016cb8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016cbc:	bf58      	it	pl
 8016cbe:	1a64      	subpl	r4, r4, r1
 8016cc0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8016cc4:	f8ac b006 	strh.w	fp, [ip, #6]
 8016cc8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016ccc:	444e      	add	r6, r9
 8016cce:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016cd2:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8016cd6:	ea5b 0707 	orrs.w	r7, fp, r7
 8016cda:	d011      	beq.n	8016d00 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8016cdc:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8016ce0:	f1bb 0f00 	cmp.w	fp, #0
 8016ce4:	db0c      	blt.n	8016d00 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8016ce6:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8016ce8:	45bb      	cmp	fp, r7
 8016cea:	da09      	bge.n	8016d00 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8016cec:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8016cf0:	45bb      	cmp	fp, r7
 8016cf2:	bf3c      	itt	cc
 8016cf4:	f10c 0708 	addcc.w	r7, ip, #8
 8016cf8:	6107      	strcc	r7, [r0, #16]
 8016cfa:	f10b 0701 	add.w	r7, fp, #1
 8016cfe:	6087      	str	r7, [r0, #8]
 8016d00:	6907      	ldr	r7, [r0, #16]
 8016d02:	45b6      	cmp	lr, r6
 8016d04:	803e      	strh	r6, [r7, #0]
 8016d06:	807a      	strh	r2, [r7, #2]
 8016d08:	f8a7 a004 	strh.w	sl, [r7, #4]
 8016d0c:	f8a7 a006 	strh.w	sl, [r7, #6]
 8016d10:	d1c5      	bne.n	8016c9e <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 8016d12:	9a04      	ldr	r2, [sp, #16]
 8016d14:	1ad3      	subs	r3, r2, r3
 8016d16:	6902      	ldr	r2, [r0, #16]
 8016d18:	8891      	ldrh	r1, [r2, #4]
 8016d1a:	88d6      	ldrh	r6, [r2, #6]
 8016d1c:	4419      	add	r1, r3
 8016d1e:	8091      	strh	r1, [r2, #4]
 8016d20:	9902      	ldr	r1, [sp, #8]
 8016d22:	f101 0c20 	add.w	ip, r1, #32
 8016d26:	9901      	ldr	r1, [sp, #4]
 8016d28:	ebac 0c01 	sub.w	ip, ip, r1
 8016d2c:	fb03 630c 	mla	r3, r3, ip, r6
 8016d30:	80d3      	strh	r3, [r2, #6]
 8016d32:	e74c      	b.n	8016bce <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8016d34:	9d05      	ldr	r5, [sp, #20]
 8016d36:	1aa2      	subs	r2, r4, r2
 8016d38:	eba5 0501 	sub.w	r5, r5, r1
 8016d3c:	9508      	str	r5, [sp, #32]
 8016d3e:	9202      	str	r2, [sp, #8]
 8016d40:	f140 8128 	bpl.w	8016f94 <_ZN8touchgfx7Outline10renderLineEiiii+0x478>
 8016d44:	9a03      	ldr	r2, [sp, #12]
 8016d46:	2a00      	cmp	r2, #0
 8016d48:	f6ff af41 	blt.w	8016bce <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8016d4c:	f04f 34ff 	mov.w	r4, #4294967295
 8016d50:	9a02      	ldr	r2, [sp, #8]
 8016d52:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016d54:	4252      	negs	r2, r2
 8016d56:	9202      	str	r2, [sp, #8]
 8016d58:	9a06      	ldr	r2, [sp, #24]
 8016d5a:	2400      	movs	r4, #0
 8016d5c:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8016d60:	9206      	str	r2, [sp, #24]
 8016d62:	462a      	mov	r2, r5
 8016d64:	435a      	muls	r2, r3
 8016d66:	9401      	str	r4, [sp, #4]
 8016d68:	9c02      	ldr	r4, [sp, #8]
 8016d6a:	9d02      	ldr	r5, [sp, #8]
 8016d6c:	fb92 f4f4 	sdiv	r4, r2, r4
 8016d70:	fb05 2214 	mls	r2, r5, r4, r2
 8016d74:	2a00      	cmp	r2, #0
 8016d76:	9207      	str	r2, [sp, #28]
 8016d78:	bfbc      	itt	lt
 8016d7a:	1952      	addlt	r2, r2, r5
 8016d7c:	9207      	strlt	r2, [sp, #28]
 8016d7e:	9a01      	ldr	r2, [sp, #4]
 8016d80:	bfb8      	it	lt
 8016d82:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8016d86:	eb04 0901 	add.w	r9, r4, r1
 8016d8a:	429a      	cmp	r2, r3
 8016d8c:	ea4f 1669 	mov.w	r6, r9, asr #5
 8016d90:	6905      	ldr	r5, [r0, #16]
 8016d92:	f040 8112 	bne.w	8016fba <_ZN8touchgfx7Outline10renderLineEiiii+0x49e>
 8016d96:	f9b5 3000 	ldrsh.w	r3, [r5]
 8016d9a:	429e      	cmp	r6, r3
 8016d9c:	d104      	bne.n	8016da8 <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 8016d9e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8016da2:	9a03      	ldr	r2, [sp, #12]
 8016da4:	429a      	cmp	r2, r3
 8016da6:	d01b      	beq.n	8016de0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8016da8:	88ea      	ldrh	r2, [r5, #6]
 8016daa:	88ab      	ldrh	r3, [r5, #4]
 8016dac:	4313      	orrs	r3, r2
 8016dae:	d010      	beq.n	8016dd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8016db0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016db4:	2a00      	cmp	r2, #0
 8016db6:	db0c      	blt.n	8016dd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8016db8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8016dba:	429a      	cmp	r2, r3
 8016dbc:	da09      	bge.n	8016dd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8016dbe:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8016dc2:	429a      	cmp	r2, r3
 8016dc4:	bf38      	it	cc
 8016dc6:	3508      	addcc	r5, #8
 8016dc8:	f102 0201 	add.w	r2, r2, #1
 8016dcc:	bf38      	it	cc
 8016dce:	6105      	strcc	r5, [r0, #16]
 8016dd0:	6082      	str	r2, [r0, #8]
 8016dd2:	6903      	ldr	r3, [r0, #16]
 8016dd4:	9a03      	ldr	r2, [sp, #12]
 8016dd6:	801e      	strh	r6, [r3, #0]
 8016dd8:	805a      	strh	r2, [r3, #2]
 8016dda:	2200      	movs	r2, #0
 8016ddc:	809a      	strh	r2, [r3, #4]
 8016dde:	80da      	strh	r2, [r3, #6]
 8016de0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016de2:	9a03      	ldr	r2, [sp, #12]
 8016de4:	6901      	ldr	r1, [r0, #16]
 8016de6:	441a      	add	r2, r3
 8016de8:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016dec:	42b3      	cmp	r3, r6
 8016dee:	d103      	bne.n	8016df8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2dc>
 8016df0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016df4:	429a      	cmp	r2, r3
 8016df6:	d01a      	beq.n	8016e2e <_ZN8touchgfx7Outline10renderLineEiiii+0x312>
 8016df8:	88cc      	ldrh	r4, [r1, #6]
 8016dfa:	888b      	ldrh	r3, [r1, #4]
 8016dfc:	4323      	orrs	r3, r4
 8016dfe:	d010      	beq.n	8016e22 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8016e00:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8016e04:	2c00      	cmp	r4, #0
 8016e06:	db0c      	blt.n	8016e22 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8016e08:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8016e0a:	429c      	cmp	r4, r3
 8016e0c:	da09      	bge.n	8016e22 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8016e0e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8016e12:	429c      	cmp	r4, r3
 8016e14:	bf38      	it	cc
 8016e16:	3108      	addcc	r1, #8
 8016e18:	f104 0401 	add.w	r4, r4, #1
 8016e1c:	bf38      	it	cc
 8016e1e:	6101      	strcc	r1, [r0, #16]
 8016e20:	6084      	str	r4, [r0, #8]
 8016e22:	2100      	movs	r1, #0
 8016e24:	6903      	ldr	r3, [r0, #16]
 8016e26:	801e      	strh	r6, [r3, #0]
 8016e28:	805a      	strh	r2, [r3, #2]
 8016e2a:	8099      	strh	r1, [r3, #4]
 8016e2c:	80d9      	strh	r1, [r3, #6]
 8016e2e:	9b06      	ldr	r3, [sp, #24]
 8016e30:	4293      	cmp	r3, r2
 8016e32:	f000 8082 	beq.w	8016f3a <_ZN8touchgfx7Outline10renderLineEiiii+0x41e>
 8016e36:	9b08      	ldr	r3, [sp, #32]
 8016e38:	9902      	ldr	r1, [sp, #8]
 8016e3a:	015b      	lsls	r3, r3, #5
 8016e3c:	fb93 f1f1 	sdiv	r1, r3, r1
 8016e40:	9c02      	ldr	r4, [sp, #8]
 8016e42:	9103      	str	r1, [sp, #12]
 8016e44:	fb04 3311 	mls	r3, r4, r1, r3
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	9308      	str	r3, [sp, #32]
 8016e4c:	da04      	bge.n	8016e58 <_ZN8touchgfx7Outline10renderLineEiiii+0x33c>
 8016e4e:	1e4b      	subs	r3, r1, #1
 8016e50:	9303      	str	r3, [sp, #12]
 8016e52:	9b08      	ldr	r3, [sp, #32]
 8016e54:	4423      	add	r3, r4
 8016e56:	9308      	str	r3, [sp, #32]
 8016e58:	464f      	mov	r7, r9
 8016e5a:	2600      	movs	r6, #0
 8016e5c:	9b07      	ldr	r3, [sp, #28]
 8016e5e:	9902      	ldr	r1, [sp, #8]
 8016e60:	1a5b      	subs	r3, r3, r1
 8016e62:	9307      	str	r3, [sp, #28]
 8016e64:	9b01      	ldr	r3, [sp, #4]
 8016e66:	f1c3 0320 	rsb	r3, r3, #32
 8016e6a:	930e      	str	r3, [sp, #56]	@ 0x38
 8016e6c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8016e6e:	9b01      	ldr	r3, [sp, #4]
 8016e70:	1a5b      	subs	r3, r3, r1
 8016e72:	930a      	str	r3, [sp, #40]	@ 0x28
 8016e74:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8016e78:	185b      	adds	r3, r3, r1
 8016e7a:	bf58      	it	pl
 8016e7c:	9902      	ldrpl	r1, [sp, #8]
 8016e7e:	9307      	str	r3, [sp, #28]
 8016e80:	bf5d      	ittte	pl
 8016e82:	1a5b      	subpl	r3, r3, r1
 8016e84:	9307      	strpl	r3, [sp, #28]
 8016e86:	9b03      	ldrpl	r3, [sp, #12]
 8016e88:	9903      	ldrmi	r1, [sp, #12]
 8016e8a:	bf58      	it	pl
 8016e8c:	1c59      	addpl	r1, r3, #1
 8016e8e:	4489      	add	r9, r1
 8016e90:	2a00      	cmp	r2, #0
 8016e92:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8016e96:	db2e      	blt.n	8016ef6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8016e98:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8016e9a:	4293      	cmp	r3, r2
 8016e9c:	dd2b      	ble.n	8016ef6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8016e9e:	9c01      	ldr	r4, [sp, #4]
 8016ea0:	6905      	ldr	r5, [r0, #16]
 8016ea2:	46a0      	mov	r8, r4
 8016ea4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8016ea6:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8016eaa:	45a0      	cmp	r8, r4
 8016eac:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8016eb0:	f040 8150 	bne.w	8017154 <_ZN8touchgfx7Outline10renderLineEiiii+0x638>
 8016eb4:	f9b5 1000 	ldrsh.w	r1, [r5]
 8016eb8:	4551      	cmp	r1, sl
 8016eba:	d103      	bne.n	8016ec4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3a8>
 8016ebc:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8016ec0:	4291      	cmp	r1, r2
 8016ec2:	d018      	beq.n	8016ef6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8016ec4:	ea5c 010e 	orrs.w	r1, ip, lr
 8016ec8:	d00f      	beq.n	8016eea <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8016eca:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8016ece:	2900      	cmp	r1, #0
 8016ed0:	db0b      	blt.n	8016eea <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8016ed2:	428b      	cmp	r3, r1
 8016ed4:	dd09      	ble.n	8016eea <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8016ed6:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8016eda:	4299      	cmp	r1, r3
 8016edc:	bf38      	it	cc
 8016ede:	3508      	addcc	r5, #8
 8016ee0:	f101 0101 	add.w	r1, r1, #1
 8016ee4:	bf38      	it	cc
 8016ee6:	6105      	strcc	r5, [r0, #16]
 8016ee8:	6081      	str	r1, [r0, #8]
 8016eea:	6903      	ldr	r3, [r0, #16]
 8016eec:	f8a3 a000 	strh.w	sl, [r3]
 8016ef0:	805a      	strh	r2, [r3, #2]
 8016ef2:	809e      	strh	r6, [r3, #4]
 8016ef4:	80de      	strh	r6, [r3, #6]
 8016ef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016ef8:	6901      	ldr	r1, [r0, #16]
 8016efa:	441a      	add	r2, r3
 8016efc:	88cc      	ldrh	r4, [r1, #6]
 8016efe:	888b      	ldrh	r3, [r1, #4]
 8016f00:	4323      	orrs	r3, r4
 8016f02:	d010      	beq.n	8016f26 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8016f04:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8016f08:	2c00      	cmp	r4, #0
 8016f0a:	db0c      	blt.n	8016f26 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8016f0c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8016f0e:	429c      	cmp	r4, r3
 8016f10:	da09      	bge.n	8016f26 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8016f12:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8016f16:	429c      	cmp	r4, r3
 8016f18:	bf38      	it	cc
 8016f1a:	3108      	addcc	r1, #8
 8016f1c:	f104 0401 	add.w	r4, r4, #1
 8016f20:	bf38      	it	cc
 8016f22:	6101      	strcc	r1, [r0, #16]
 8016f24:	6084      	str	r4, [r0, #8]
 8016f26:	6903      	ldr	r3, [r0, #16]
 8016f28:	464f      	mov	r7, r9
 8016f2a:	f8a3 a000 	strh.w	sl, [r3]
 8016f2e:	805a      	strh	r2, [r3, #2]
 8016f30:	809e      	strh	r6, [r3, #4]
 8016f32:	80de      	strh	r6, [r3, #6]
 8016f34:	9b06      	ldr	r3, [sp, #24]
 8016f36:	4293      	cmp	r3, r2
 8016f38:	d19c      	bne.n	8016e74 <_ZN8touchgfx7Outline10renderLineEiiii+0x358>
 8016f3a:	9b01      	ldr	r3, [sp, #4]
 8016f3c:	6907      	ldr	r7, [r0, #16]
 8016f3e:	f1c3 0620 	rsb	r6, r3, #32
 8016f42:	9b05      	ldr	r3, [sp, #20]
 8016f44:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8016f48:	9b04      	ldr	r3, [sp, #16]
 8016f4a:	429e      	cmp	r6, r3
 8016f4c:	f040 81cc 	bne.w	80172e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7cc>
 8016f50:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016f54:	459e      	cmp	lr, r3
 8016f56:	d104      	bne.n	8016f62 <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 8016f58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016f5c:	429a      	cmp	r2, r3
 8016f5e:	f43f ae36 	beq.w	8016bce <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8016f62:	88f9      	ldrh	r1, [r7, #6]
 8016f64:	88bb      	ldrh	r3, [r7, #4]
 8016f66:	430b      	orrs	r3, r1
 8016f68:	d010      	beq.n	8016f8c <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8016f6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	db0c      	blt.n	8016f8c <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8016f72:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8016f74:	428b      	cmp	r3, r1
 8016f76:	da09      	bge.n	8016f8c <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8016f78:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8016f7c:	428b      	cmp	r3, r1
 8016f7e:	bf38      	it	cc
 8016f80:	3708      	addcc	r7, #8
 8016f82:	f103 0301 	add.w	r3, r3, #1
 8016f86:	bf38      	it	cc
 8016f88:	6107      	strcc	r7, [r0, #16]
 8016f8a:	6083      	str	r3, [r0, #8]
 8016f8c:	6903      	ldr	r3, [r0, #16]
 8016f8e:	f8a3 e000 	strh.w	lr, [r3]
 8016f92:	e5ff      	b.n	8016b94 <_ZN8touchgfx7Outline10renderLineEiiii+0x78>
 8016f94:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8016f96:	9c03      	ldr	r4, [sp, #12]
 8016f98:	42a2      	cmp	r2, r4
 8016f9a:	f6ff ae18 	blt.w	8016bce <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8016f9e:	9c06      	ldr	r4, [sp, #24]
 8016fa0:	42a2      	cmp	r2, r4
 8016fa2:	bfb8      	it	lt
 8016fa4:	3201      	addlt	r2, #1
 8016fa6:	9c08      	ldr	r4, [sp, #32]
 8016fa8:	bfb8      	it	lt
 8016faa:	9206      	strlt	r2, [sp, #24]
 8016fac:	f1c3 0220 	rsb	r2, r3, #32
 8016fb0:	4362      	muls	r2, r4
 8016fb2:	2401      	movs	r4, #1
 8016fb4:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016fb6:	2420      	movs	r4, #32
 8016fb8:	e6d5      	b.n	8016d66 <_ZN8touchgfx7Outline10renderLineEiiii+0x24a>
 8016fba:	f009 021f 	and.w	r2, r9, #31
 8016fbe:	ea4f 1861 	mov.w	r8, r1, asr #5
 8016fc2:	920c      	str	r2, [sp, #48]	@ 0x30
 8016fc4:	9a01      	ldr	r2, [sp, #4]
 8016fc6:	45b0      	cmp	r8, r6
 8016fc8:	f001 011f 	and.w	r1, r1, #31
 8016fcc:	eba2 0203 	sub.w	r2, r2, r3
 8016fd0:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8016fd4:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8016fd8:	d108      	bne.n	8016fec <_ZN8touchgfx7Outline10renderLineEiiii+0x4d0>
 8016fda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016fdc:	4496      	add	lr, r2
 8016fde:	4419      	add	r1, r3
 8016fe0:	fb02 a101 	mla	r1, r2, r1, sl
 8016fe4:	f8a5 e004 	strh.w	lr, [r5, #4]
 8016fe8:	80e9      	strh	r1, [r5, #6]
 8016fea:	e6f9      	b.n	8016de0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8016fec:	2c00      	cmp	r4, #0
 8016fee:	f2c0 80aa 	blt.w	8017146 <_ZN8touchgfx7Outline10renderLineEiiii+0x62a>
 8016ff2:	2701      	movs	r7, #1
 8016ff4:	970a      	str	r7, [sp, #40]	@ 0x28
 8016ff6:	2720      	movs	r7, #32
 8016ff8:	f1c1 0c20 	rsb	ip, r1, #32
 8016ffc:	fb02 f20c 	mul.w	r2, r2, ip
 8017000:	fb92 fcf4 	sdiv	ip, r2, r4
 8017004:	fb04 221c 	mls	r2, r4, ip, r2
 8017008:	9709      	str	r7, [sp, #36]	@ 0x24
 801700a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801700c:	2a00      	cmp	r2, #0
 801700e:	bfb8      	it	lt
 8017010:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8017014:	4439      	add	r1, r7
 8017016:	fb0c a101 	mla	r1, ip, r1, sl
 801701a:	44e6      	add	lr, ip
 801701c:	80e9      	strh	r1, [r5, #6]
 801701e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017020:	f8a5 e004 	strh.w	lr, [r5, #4]
 8017024:	eb08 0501 	add.w	r5, r8, r1
 8017028:	6901      	ldr	r1, [r0, #16]
 801702a:	bfb8      	it	lt
 801702c:	1912      	addlt	r2, r2, r4
 801702e:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8017032:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8017036:	ea58 070e 	orrs.w	r7, r8, lr
 801703a:	d010      	beq.n	801705e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 801703c:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8017040:	f1be 0f00 	cmp.w	lr, #0
 8017044:	db0b      	blt.n	801705e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8017046:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017048:	45be      	cmp	lr, r7
 801704a:	da08      	bge.n	801705e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 801704c:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8017050:	45be      	cmp	lr, r7
 8017052:	bf3c      	itt	cc
 8017054:	3108      	addcc	r1, #8
 8017056:	6101      	strcc	r1, [r0, #16]
 8017058:	f10e 0101 	add.w	r1, lr, #1
 801705c:	6081      	str	r1, [r0, #8]
 801705e:	f04f 0e00 	mov.w	lr, #0
 8017062:	6901      	ldr	r1, [r0, #16]
 8017064:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8017068:	42ae      	cmp	r6, r5
 801706a:	800d      	strh	r5, [r1, #0]
 801706c:	f8a1 8002 	strh.w	r8, [r1, #2]
 8017070:	f8a1 e004 	strh.w	lr, [r1, #4]
 8017074:	f8a1 e006 	strh.w	lr, [r1, #6]
 8017078:	4463      	add	r3, ip
 801707a:	d055      	beq.n	8017128 <_ZN8touchgfx7Outline10renderLineEiiii+0x60c>
 801707c:	9901      	ldr	r1, [sp, #4]
 801707e:	1b12      	subs	r2, r2, r4
 8017080:	1ac9      	subs	r1, r1, r3
 8017082:	4461      	add	r1, ip
 8017084:	0149      	lsls	r1, r1, #5
 8017086:	fb91 fef4 	sdiv	lr, r1, r4
 801708a:	fb04 111e 	mls	r1, r4, lr, r1
 801708e:	2900      	cmp	r1, #0
 8017090:	bfb8      	it	lt
 8017092:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8017096:	f10e 0701 	add.w	r7, lr, #1
 801709a:	bfb8      	it	lt
 801709c:	1909      	addlt	r1, r1, r4
 801709e:	970d      	str	r7, [sp, #52]	@ 0x34
 80170a0:	1852      	adds	r2, r2, r1
 80170a2:	bf48      	it	mi
 80170a4:	46f4      	movmi	ip, lr
 80170a6:	f8d0 a010 	ldr.w	sl, [r0, #16]
 80170aa:	bf58      	it	pl
 80170ac:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 80170b0:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80170b4:	4463      	add	r3, ip
 80170b6:	44e3      	add	fp, ip
 80170b8:	f8aa b004 	strh.w	fp, [sl, #4]
 80170bc:	f8ba b006 	ldrh.w	fp, [sl, #6]
 80170c0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80170c2:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 80170c6:	f8aa b006 	strh.w	fp, [sl, #6]
 80170ca:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80170ce:	bf58      	it	pl
 80170d0:	1b12      	subpl	r2, r2, r4
 80170d2:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80170d6:	f8bc a004 	ldrh.w	sl, [ip, #4]
 80170da:	443d      	add	r5, r7
 80170dc:	ea5b 070a 	orrs.w	r7, fp, sl
 80170e0:	d014      	beq.n	801710c <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 80170e2:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80170e6:	f1ba 0f00 	cmp.w	sl, #0
 80170ea:	db0f      	blt.n	801710c <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 80170ec:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80170ee:	45ba      	cmp	sl, r7
 80170f0:	da0c      	bge.n	801710c <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 80170f2:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 80170f6:	45ba      	cmp	sl, r7
 80170f8:	bf38      	it	cc
 80170fa:	f10c 0c08 	addcc.w	ip, ip, #8
 80170fe:	f10a 0a01 	add.w	sl, sl, #1
 8017102:	bf38      	it	cc
 8017104:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8017108:	f8c0 a008 	str.w	sl, [r0, #8]
 801710c:	f04f 0700 	mov.w	r7, #0
 8017110:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017114:	42ae      	cmp	r6, r5
 8017116:	f8ac 5000 	strh.w	r5, [ip]
 801711a:	f8ac 8002 	strh.w	r8, [ip, #2]
 801711e:	f8ac 7004 	strh.w	r7, [ip, #4]
 8017122:	f8ac 7006 	strh.w	r7, [ip, #6]
 8017126:	d1bb      	bne.n	80170a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x584>
 8017128:	6904      	ldr	r4, [r0, #16]
 801712a:	9a01      	ldr	r2, [sp, #4]
 801712c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801712e:	1ad3      	subs	r3, r2, r3
 8017130:	88a2      	ldrh	r2, [r4, #4]
 8017132:	3120      	adds	r1, #32
 8017134:	441a      	add	r2, r3
 8017136:	80a2      	strh	r2, [r4, #4]
 8017138:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801713a:	1a89      	subs	r1, r1, r2
 801713c:	88e2      	ldrh	r2, [r4, #6]
 801713e:	fb03 2301 	mla	r3, r3, r1, r2
 8017142:	80e3      	strh	r3, [r4, #6]
 8017144:	e64c      	b.n	8016de0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8017146:	f04f 37ff 	mov.w	r7, #4294967295
 801714a:	434a      	muls	r2, r1
 801714c:	970a      	str	r7, [sp, #40]	@ 0x28
 801714e:	4264      	negs	r4, r4
 8017150:	2700      	movs	r7, #0
 8017152:	e755      	b.n	8017000 <_ZN8touchgfx7Outline10renderLineEiiii+0x4e4>
 8017154:	ea4f 1867 	mov.w	r8, r7, asr #5
 8017158:	f009 031f 	and.w	r3, r9, #31
 801715c:	45d0      	cmp	r8, sl
 801715e:	f007 071f 	and.w	r7, r7, #31
 8017162:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017164:	fa1f fc8c 	uxth.w	ip, ip
 8017168:	fa1f fe8e 	uxth.w	lr, lr
 801716c:	d10a      	bne.n	8017184 <_ZN8touchgfx7Outline10renderLineEiiii+0x668>
 801716e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017170:	449c      	add	ip, r3
 8017172:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017174:	f8a5 c004 	strh.w	ip, [r5, #4]
 8017178:	441f      	add	r7, r3
 801717a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801717c:	fb03 e707 	mla	r7, r3, r7, lr
 8017180:	80ef      	strh	r7, [r5, #6]
 8017182:	e6b8      	b.n	8016ef6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8017184:	2900      	cmp	r1, #0
 8017186:	f2c0 80a7 	blt.w	80172d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7bc>
 801718a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801718c:	f1c7 0320 	rsb	r3, r7, #32
 8017190:	4363      	muls	r3, r4
 8017192:	2401      	movs	r4, #1
 8017194:	940d      	str	r4, [sp, #52]	@ 0x34
 8017196:	2420      	movs	r4, #32
 8017198:	940c      	str	r4, [sp, #48]	@ 0x30
 801719a:	fb93 f4f1 	sdiv	r4, r3, r1
 801719e:	fb01 3b14 	mls	fp, r1, r4, r3
 80171a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80171a4:	f1bb 0f00 	cmp.w	fp, #0
 80171a8:	bfb8      	it	lt
 80171aa:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80171ae:	441f      	add	r7, r3
 80171b0:	fb04 e707 	mla	r7, r4, r7, lr
 80171b4:	44a4      	add	ip, r4
 80171b6:	f8a5 c004 	strh.w	ip, [r5, #4]
 80171ba:	80ef      	strh	r7, [r5, #6]
 80171bc:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80171c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80171c2:	f8bc e006 	ldrh.w	lr, [ip, #6]
 80171c6:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80171ca:	bfb8      	it	lt
 80171cc:	448b      	addlt	fp, r1
 80171ce:	eb08 0503 	add.w	r5, r8, r3
 80171d2:	ea5e 0307 	orrs.w	r3, lr, r7
 80171d6:	d011      	beq.n	80171fc <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80171d8:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 80171dc:	f1be 0f00 	cmp.w	lr, #0
 80171e0:	db0c      	blt.n	80171fc <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80171e2:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80171e4:	45be      	cmp	lr, r7
 80171e6:	da09      	bge.n	80171fc <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80171e8:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80171ec:	45be      	cmp	lr, r7
 80171ee:	bf3c      	itt	cc
 80171f0:	f10c 0708 	addcc.w	r7, ip, #8
 80171f4:	6107      	strcc	r7, [r0, #16]
 80171f6:	f10e 0701 	add.w	r7, lr, #1
 80171fa:	6087      	str	r7, [r0, #8]
 80171fc:	6907      	ldr	r7, [r0, #16]
 80171fe:	b213      	sxth	r3, r2
 8017200:	9310      	str	r3, [sp, #64]	@ 0x40
 8017202:	807b      	strh	r3, [r7, #2]
 8017204:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017206:	4555      	cmp	r5, sl
 8017208:	803d      	strh	r5, [r7, #0]
 801720a:	80be      	strh	r6, [r7, #4]
 801720c:	80fe      	strh	r6, [r7, #6]
 801720e:	eb04 0c03 	add.w	ip, r4, r3
 8017212:	d050      	beq.n	80172b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x79a>
 8017214:	9b01      	ldr	r3, [sp, #4]
 8017216:	eba3 070c 	sub.w	r7, r3, ip
 801721a:	443c      	add	r4, r7
 801721c:	0164      	lsls	r4, r4, #5
 801721e:	fb94 f8f1 	sdiv	r8, r4, r1
 8017222:	fb01 4418 	mls	r4, r1, r8, r4
 8017226:	2c00      	cmp	r4, #0
 8017228:	bfb8      	it	lt
 801722a:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801722e:	ebab 0301 	sub.w	r3, fp, r1
 8017232:	f108 0701 	add.w	r7, r8, #1
 8017236:	bfb8      	it	lt
 8017238:	1864      	addlt	r4, r4, r1
 801723a:	9309      	str	r3, [sp, #36]	@ 0x24
 801723c:	9711      	str	r7, [sp, #68]	@ 0x44
 801723e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017240:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8017244:	191b      	adds	r3, r3, r4
 8017246:	bf4c      	ite	mi
 8017248:	4647      	movmi	r7, r8
 801724a:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 801724c:	f8be b004 	ldrh.w	fp, [lr, #4]
 8017250:	44bc      	add	ip, r7
 8017252:	44bb      	add	fp, r7
 8017254:	f8ae b004 	strh.w	fp, [lr, #4]
 8017258:	f8be b006 	ldrh.w	fp, [lr, #6]
 801725c:	9309      	str	r3, [sp, #36]	@ 0x24
 801725e:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8017262:	f8ae b006 	strh.w	fp, [lr, #6]
 8017266:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8017268:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801726c:	443d      	add	r5, r7
 801726e:	f8be b006 	ldrh.w	fp, [lr, #6]
 8017272:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8017276:	bf5c      	itt	pl
 8017278:	1a5b      	subpl	r3, r3, r1
 801727a:	9309      	strpl	r3, [sp, #36]	@ 0x24
 801727c:	ea5b 0307 	orrs.w	r3, fp, r7
 8017280:	d011      	beq.n	80172a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8017282:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8017286:	f1bb 0f00 	cmp.w	fp, #0
 801728a:	db0c      	blt.n	80172a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 801728c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801728e:	45bb      	cmp	fp, r7
 8017290:	da09      	bge.n	80172a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8017292:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8017296:	45bb      	cmp	fp, r7
 8017298:	bf3c      	itt	cc
 801729a:	f10e 0708 	addcc.w	r7, lr, #8
 801729e:	6107      	strcc	r7, [r0, #16]
 80172a0:	f10b 0701 	add.w	r7, fp, #1
 80172a4:	6087      	str	r7, [r0, #8]
 80172a6:	6907      	ldr	r7, [r0, #16]
 80172a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80172aa:	4555      	cmp	r5, sl
 80172ac:	803d      	strh	r5, [r7, #0]
 80172ae:	807b      	strh	r3, [r7, #2]
 80172b0:	80be      	strh	r6, [r7, #4]
 80172b2:	80fe      	strh	r6, [r7, #6]
 80172b4:	d1c3      	bne.n	801723e <_ZN8touchgfx7Outline10renderLineEiiii+0x722>
 80172b6:	9b01      	ldr	r3, [sp, #4]
 80172b8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80172ba:	eba3 0c0c 	sub.w	ip, r3, ip
 80172be:	6903      	ldr	r3, [r0, #16]
 80172c0:	3720      	adds	r7, #32
 80172c2:	8899      	ldrh	r1, [r3, #4]
 80172c4:	4461      	add	r1, ip
 80172c6:	8099      	strh	r1, [r3, #4]
 80172c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80172ca:	1a7f      	subs	r7, r7, r1
 80172cc:	88d9      	ldrh	r1, [r3, #6]
 80172ce:	fb0c 1c07 	mla	ip, ip, r7, r1
 80172d2:	f8a3 c006 	strh.w	ip, [r3, #6]
 80172d6:	e60e      	b.n	8016ef6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80172d8:	f04f 34ff 	mov.w	r4, #4294967295
 80172dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80172de:	940d      	str	r4, [sp, #52]	@ 0x34
 80172e0:	437b      	muls	r3, r7
 80172e2:	4249      	negs	r1, r1
 80172e4:	2400      	movs	r4, #0
 80172e6:	e757      	b.n	8017198 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 80172e8:	9905      	ldr	r1, [sp, #20]
 80172ea:	ea4f 1b69 	mov.w	fp, r9, asr #5
 80172ee:	f001 011f 	and.w	r1, r1, #31
 80172f2:	9102      	str	r1, [sp, #8]
 80172f4:	9904      	ldr	r1, [sp, #16]
 80172f6:	45f3      	cmp	fp, lr
 80172f8:	f009 0c1f 	and.w	ip, r9, #31
 80172fc:	eba1 0406 	sub.w	r4, r1, r6
 8017300:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8017304:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8017308:	d108      	bne.n	801731c <_ZN8touchgfx7Outline10renderLineEiiii+0x800>
 801730a:	9b02      	ldr	r3, [sp, #8]
 801730c:	44a0      	add	r8, r4
 801730e:	449c      	add	ip, r3
 8017310:	fb04 a40c 	mla	r4, r4, ip, sl
 8017314:	f8a7 8004 	strh.w	r8, [r7, #4]
 8017318:	80fc      	strh	r4, [r7, #6]
 801731a:	e458      	b.n	8016bce <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801731c:	9905      	ldr	r1, [sp, #20]
 801731e:	ebb1 0109 	subs.w	r1, r1, r9
 8017322:	bf5b      	ittet	pl
 8017324:	f1cc 0520 	rsbpl	r5, ip, #32
 8017328:	436c      	mulpl	r4, r5
 801732a:	2500      	movmi	r5, #0
 801732c:	2520      	movpl	r5, #32
 801732e:	bf44      	itt	mi
 8017330:	fb04 f40c 	mulmi.w	r4, r4, ip
 8017334:	4249      	negmi	r1, r1
 8017336:	9501      	str	r5, [sp, #4]
 8017338:	fb94 f5f1 	sdiv	r5, r4, r1
 801733c:	bf54      	ite	pl
 801733e:	f04f 0901 	movpl.w	r9, #1
 8017342:	f04f 39ff 	movmi.w	r9, #4294967295
 8017346:	fb01 4415 	mls	r4, r1, r5, r4
 801734a:	9b01      	ldr	r3, [sp, #4]
 801734c:	2c00      	cmp	r4, #0
 801734e:	bfb8      	it	lt
 8017350:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8017354:	449c      	add	ip, r3
 8017356:	fb05 ac0c 	mla	ip, r5, ip, sl
 801735a:	44a8      	add	r8, r5
 801735c:	f8a7 8004 	strh.w	r8, [r7, #4]
 8017360:	f8a7 c006 	strh.w	ip, [r7, #6]
 8017364:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017368:	bfb8      	it	lt
 801736a:	1864      	addlt	r4, r4, r1
 801736c:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8017370:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8017374:	eb0b 0309 	add.w	r3, fp, r9
 8017378:	ea58 0707 	orrs.w	r7, r8, r7
 801737c:	d011      	beq.n	80173a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 801737e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8017382:	f1b8 0f00 	cmp.w	r8, #0
 8017386:	db0c      	blt.n	80173a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8017388:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801738a:	45b8      	cmp	r8, r7
 801738c:	da09      	bge.n	80173a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 801738e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8017392:	45b8      	cmp	r8, r7
 8017394:	bf3c      	itt	cc
 8017396:	f10c 0708 	addcc.w	r7, ip, #8
 801739a:	6107      	strcc	r7, [r0, #16]
 801739c:	f108 0701 	add.w	r7, r8, #1
 80173a0:	6087      	str	r7, [r0, #8]
 80173a2:	f04f 0c00 	mov.w	ip, #0
 80173a6:	6907      	ldr	r7, [r0, #16]
 80173a8:	b212      	sxth	r2, r2
 80173aa:	459e      	cmp	lr, r3
 80173ac:	803b      	strh	r3, [r7, #0]
 80173ae:	807a      	strh	r2, [r7, #2]
 80173b0:	f8a7 c004 	strh.w	ip, [r7, #4]
 80173b4:	f8a7 c006 	strh.w	ip, [r7, #6]
 80173b8:	442e      	add	r6, r5
 80173ba:	d04d      	beq.n	8017458 <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 80173bc:	9f04      	ldr	r7, [sp, #16]
 80173be:	f04f 0a00 	mov.w	sl, #0
 80173c2:	1bbf      	subs	r7, r7, r6
 80173c4:	443d      	add	r5, r7
 80173c6:	016d      	lsls	r5, r5, #5
 80173c8:	fb95 f8f1 	sdiv	r8, r5, r1
 80173cc:	fb01 5518 	mls	r5, r1, r8, r5
 80173d0:	4565      	cmp	r5, ip
 80173d2:	bfb8      	it	lt
 80173d4:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80173d8:	f108 0701 	add.w	r7, r8, #1
 80173dc:	bfb8      	it	lt
 80173de:	186d      	addlt	r5, r5, r1
 80173e0:	1a64      	subs	r4, r4, r1
 80173e2:	9703      	str	r7, [sp, #12]
 80173e4:	1964      	adds	r4, r4, r5
 80173e6:	bf48      	it	mi
 80173e8:	4647      	movmi	r7, r8
 80173ea:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80173ee:	bf58      	it	pl
 80173f0:	9f03      	ldrpl	r7, [sp, #12]
 80173f2:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80173f6:	443e      	add	r6, r7
 80173f8:	44bb      	add	fp, r7
 80173fa:	f8ac b004 	strh.w	fp, [ip, #4]
 80173fe:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017402:	bf58      	it	pl
 8017404:	1a64      	subpl	r4, r4, r1
 8017406:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801740a:	f8ac b006 	strh.w	fp, [ip, #6]
 801740e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017412:	444b      	add	r3, r9
 8017414:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017418:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801741c:	ea5b 0707 	orrs.w	r7, fp, r7
 8017420:	d011      	beq.n	8017446 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8017422:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8017426:	f1bb 0f00 	cmp.w	fp, #0
 801742a:	db0c      	blt.n	8017446 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 801742c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801742e:	45bb      	cmp	fp, r7
 8017430:	da09      	bge.n	8017446 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8017432:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8017436:	45bb      	cmp	fp, r7
 8017438:	bf3c      	itt	cc
 801743a:	f10c 0708 	addcc.w	r7, ip, #8
 801743e:	6107      	strcc	r7, [r0, #16]
 8017440:	f10b 0701 	add.w	r7, fp, #1
 8017444:	6087      	str	r7, [r0, #8]
 8017446:	6907      	ldr	r7, [r0, #16]
 8017448:	459e      	cmp	lr, r3
 801744a:	803b      	strh	r3, [r7, #0]
 801744c:	807a      	strh	r2, [r7, #2]
 801744e:	f8a7 a004 	strh.w	sl, [r7, #4]
 8017452:	f8a7 a006 	strh.w	sl, [r7, #6]
 8017456:	d1c5      	bne.n	80173e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x8c8>
 8017458:	9b04      	ldr	r3, [sp, #16]
 801745a:	1b9e      	subs	r6, r3, r6
 801745c:	6903      	ldr	r3, [r0, #16]
 801745e:	889a      	ldrh	r2, [r3, #4]
 8017460:	4432      	add	r2, r6
 8017462:	809a      	strh	r2, [r3, #4]
 8017464:	9a02      	ldr	r2, [sp, #8]
 8017466:	f102 0c20 	add.w	ip, r2, #32
 801746a:	9a01      	ldr	r2, [sp, #4]
 801746c:	ebac 0c02 	sub.w	ip, ip, r2
 8017470:	88da      	ldrh	r2, [r3, #6]
 8017472:	fb06 260c 	mla	r6, r6, ip, r2
 8017476:	80de      	strh	r6, [r3, #6]
 8017478:	f7ff bba9 	b.w	8016bce <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>

0801747c <_ZN8touchgfx7Outline6lineToEii>:
 801747c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801747e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017480:	079b      	lsls	r3, r3, #30
 8017482:	460e      	mov	r6, r1
 8017484:	4615      	mov	r5, r2
 8017486:	d511      	bpl.n	80174ac <_ZN8touchgfx7Outline6lineToEii+0x30>
 8017488:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 801748c:	ea86 0701 	eor.w	r7, r6, r1
 8017490:	ea85 0302 	eor.w	r3, r5, r2
 8017494:	433b      	orrs	r3, r7
 8017496:	d009      	beq.n	80174ac <_ZN8touchgfx7Outline6lineToEii+0x30>
 8017498:	4633      	mov	r3, r6
 801749a:	9500      	str	r5, [sp, #0]
 801749c:	f7ff fb3e 	bl	8016b1c <_ZN8touchgfx7Outline10renderLineEiiii>
 80174a0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80174a2:	e9c0 6505 	strd	r6, r5, [r0, #20]
 80174a6:	f043 0301 	orr.w	r3, r3, #1
 80174aa:	6243      	str	r3, [r0, #36]	@ 0x24
 80174ac:	b003      	add	sp, #12
 80174ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080174b0 <_ZN8touchgfx7Outline6moveToEii>:
 80174b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174b2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80174b4:	4615      	mov	r5, r2
 80174b6:	079a      	lsls	r2, r3, #30
 80174b8:	4604      	mov	r4, r0
 80174ba:	460e      	mov	r6, r1
 80174bc:	d401      	bmi.n	80174c2 <_ZN8touchgfx7Outline6moveToEii+0x12>
 80174be:	f7ff faf9 	bl	8016ab4 <_ZN8touchgfx7Outline5resetEv>
 80174c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80174c4:	07db      	lsls	r3, r3, #31
 80174c6:	d504      	bpl.n	80174d2 <_ZN8touchgfx7Outline6moveToEii+0x22>
 80174c8:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 80174cc:	4620      	mov	r0, r4
 80174ce:	f7ff ffd5 	bl	801747c <_ZN8touchgfx7Outline6lineToEii>
 80174d2:	6923      	ldr	r3, [r4, #16]
 80174d4:	1170      	asrs	r0, r6, #5
 80174d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80174da:	1169      	asrs	r1, r5, #5
 80174dc:	4290      	cmp	r0, r2
 80174de:	d103      	bne.n	80174e8 <_ZN8touchgfx7Outline6moveToEii+0x38>
 80174e0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80174e4:	4291      	cmp	r1, r2
 80174e6:	d01a      	beq.n	801751e <_ZN8touchgfx7Outline6moveToEii+0x6e>
 80174e8:	88df      	ldrh	r7, [r3, #6]
 80174ea:	889a      	ldrh	r2, [r3, #4]
 80174ec:	433a      	orrs	r2, r7
 80174ee:	d010      	beq.n	8017512 <_ZN8touchgfx7Outline6moveToEii+0x62>
 80174f0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80174f4:	2a00      	cmp	r2, #0
 80174f6:	db0c      	blt.n	8017512 <_ZN8touchgfx7Outline6moveToEii+0x62>
 80174f8:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80174fa:	42ba      	cmp	r2, r7
 80174fc:	da09      	bge.n	8017512 <_ZN8touchgfx7Outline6moveToEii+0x62>
 80174fe:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8017502:	42ba      	cmp	r2, r7
 8017504:	bf38      	it	cc
 8017506:	3308      	addcc	r3, #8
 8017508:	f102 0201 	add.w	r2, r2, #1
 801750c:	bf38      	it	cc
 801750e:	6123      	strcc	r3, [r4, #16]
 8017510:	60a2      	str	r2, [r4, #8]
 8017512:	2200      	movs	r2, #0
 8017514:	6923      	ldr	r3, [r4, #16]
 8017516:	8018      	strh	r0, [r3, #0]
 8017518:	8059      	strh	r1, [r3, #2]
 801751a:	809a      	strh	r2, [r3, #4]
 801751c:	80da      	strh	r2, [r3, #6]
 801751e:	6166      	str	r6, [r4, #20]
 8017520:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8017524:	6225      	str	r5, [r4, #32]
 8017526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017528 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8017528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801752c:	b0d0      	sub	sp, #320	@ 0x140
 801752e:	466c      	mov	r4, sp
 8017530:	4627      	mov	r7, r4
 8017532:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8017536:	1a0d      	subs	r5, r1, r0
 8017538:	2d48      	cmp	r5, #72	@ 0x48
 801753a:	f100 0308 	add.w	r3, r0, #8
 801753e:	f340 80d5 	ble.w	80176ec <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8017542:	112d      	asrs	r5, r5, #4
 8017544:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8017548:	6816      	ldr	r6, [r2, #0]
 801754a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801754e:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8017552:	6006      	str	r6, [r0, #0]
 8017554:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8017558:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801755c:	6856      	ldr	r6, [r2, #4]
 801755e:	6046      	str	r6, [r0, #4]
 8017560:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8017564:	f8a2 8002 	strh.w	r8, [r2, #2]
 8017568:	f8a2 e004 	strh.w	lr, [r2, #4]
 801756c:	f8a2 c006 	strh.w	ip, [r2, #6]
 8017570:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8017574:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8017578:	f1a1 0208 	sub.w	r2, r1, #8
 801757c:	4565      	cmp	r5, ip
 801757e:	db06      	blt.n	801758e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8017580:	d119      	bne.n	80175b6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8017582:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8017586:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801758a:	42ae      	cmp	r6, r5
 801758c:	dd13      	ble.n	80175b6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801758e:	460e      	mov	r6, r1
 8017590:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8017594:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8017598:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 801759c:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 80175a0:	601d      	str	r5, [r3, #0]
 80175a2:	6875      	ldr	r5, [r6, #4]
 80175a4:	605d      	str	r5, [r3, #4]
 80175a6:	f821 9c08 	strh.w	r9, [r1, #-8]
 80175aa:	f821 cc06 	strh.w	ip, [r1, #-6]
 80175ae:	f821 8c04 	strh.w	r8, [r1, #-4]
 80175b2:	f821 ec02 	strh.w	lr, [r1, #-2]
 80175b6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80175ba:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 80175be:	42ae      	cmp	r6, r5
 80175c0:	db06      	blt.n	80175d0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 80175c2:	d116      	bne.n	80175f2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80175c4:	f9b0 c000 	ldrsh.w	ip, [r0]
 80175c8:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80175cc:	45ac      	cmp	ip, r5
 80175ce:	da10      	bge.n	80175f2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80175d0:	681d      	ldr	r5, [r3, #0]
 80175d2:	f9b0 8000 	ldrsh.w	r8, [r0]
 80175d6:	6005      	str	r5, [r0, #0]
 80175d8:	685d      	ldr	r5, [r3, #4]
 80175da:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80175de:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80175e2:	f8a0 8008 	strh.w	r8, [r0, #8]
 80175e6:	6045      	str	r5, [r0, #4]
 80175e8:	8146      	strh	r6, [r0, #10]
 80175ea:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80175ee:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80175f2:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80175f6:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80175fa:	4565      	cmp	r5, ip
 80175fc:	db06      	blt.n	801760c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 80175fe:	d119      	bne.n	8017634 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8017600:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8017604:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017608:	42ae      	cmp	r6, r5
 801760a:	da13      	bge.n	8017634 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801760c:	460e      	mov	r6, r1
 801760e:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8017612:	f9b0 9000 	ldrsh.w	r9, [r0]
 8017616:	6005      	str	r5, [r0, #0]
 8017618:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801761c:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8017620:	6875      	ldr	r5, [r6, #4]
 8017622:	6045      	str	r5, [r0, #4]
 8017624:	f821 9c08 	strh.w	r9, [r1, #-8]
 8017628:	f821 cc06 	strh.w	ip, [r1, #-6]
 801762c:	f821 8c04 	strh.w	r8, [r1, #-4]
 8017630:	f821 ec02 	strh.w	lr, [r1, #-2]
 8017634:	3308      	adds	r3, #8
 8017636:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801763a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801763e:	45e6      	cmp	lr, ip
 8017640:	dbf8      	blt.n	8017634 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8017642:	d105      	bne.n	8017650 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8017644:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017648:	f9b0 5000 	ldrsh.w	r5, [r0]
 801764c:	42ae      	cmp	r6, r5
 801764e:	dbf1      	blt.n	8017634 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8017650:	4615      	mov	r5, r2
 8017652:	3a08      	subs	r2, #8
 8017654:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8017658:	45b4      	cmp	ip, r6
 801765a:	dbf9      	blt.n	8017650 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801765c:	d105      	bne.n	801766a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801765e:	f9b0 8000 	ldrsh.w	r8, [r0]
 8017662:	f9b2 6000 	ldrsh.w	r6, [r2]
 8017666:	45b0      	cmp	r8, r6
 8017668:	dbf2      	blt.n	8017650 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801766a:	4293      	cmp	r3, r2
 801766c:	f1a5 0608 	sub.w	r6, r5, #8
 8017670:	d816      	bhi.n	80176a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8017672:	f8d6 c000 	ldr.w	ip, [r6]
 8017676:	f9b3 a000 	ldrsh.w	sl, [r3]
 801767a:	f8c3 c000 	str.w	ip, [r3]
 801767e:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8017682:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8017686:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801768a:	f8c3 c004 	str.w	ip, [r3, #4]
 801768e:	f825 ac08 	strh.w	sl, [r5, #-8]
 8017692:	f825 ec06 	strh.w	lr, [r5, #-6]
 8017696:	f825 9c04 	strh.w	r9, [r5, #-4]
 801769a:	f825 8c02 	strh.w	r8, [r5, #-2]
 801769e:	e7c9      	b.n	8017634 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80176a0:	f8d6 e000 	ldr.w	lr, [r6]
 80176a4:	f9b0 a000 	ldrsh.w	sl, [r0]
 80176a8:	f8c0 e000 	str.w	lr, [r0]
 80176ac:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 80176b0:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 80176b4:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80176b8:	1a16      	subs	r6, r2, r0
 80176ba:	f8c0 e004 	str.w	lr, [r0, #4]
 80176be:	f825 ac08 	strh.w	sl, [r5, #-8]
 80176c2:	f825 cc06 	strh.w	ip, [r5, #-6]
 80176c6:	f825 9c04 	strh.w	r9, [r5, #-4]
 80176ca:	f825 8c02 	strh.w	r8, [r5, #-2]
 80176ce:	1acd      	subs	r5, r1, r3
 80176d0:	10ed      	asrs	r5, r5, #3
 80176d2:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 80176d6:	bfb5      	itete	lt
 80176d8:	e9c4 0200 	strdlt	r0, r2, [r4]
 80176dc:	e9c4 3100 	strdge	r3, r1, [r4]
 80176e0:	460a      	movlt	r2, r1
 80176e2:	4603      	movge	r3, r0
 80176e4:	3408      	adds	r4, #8
 80176e6:	4618      	mov	r0, r3
 80176e8:	4611      	mov	r1, r2
 80176ea:	e724      	b.n	8017536 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80176ec:	4299      	cmp	r1, r3
 80176ee:	d928      	bls.n	8017742 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x21a>
 80176f0:	f1a3 0210 	sub.w	r2, r3, #16
 80176f4:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 80176f8:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 80176fc:	45ac      	cmp	ip, r5
 80176fe:	db06      	blt.n	801770e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8017700:	d11d      	bne.n	801773e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8017702:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8017706:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801770a:	42ae      	cmp	r6, r5
 801770c:	da17      	bge.n	801773e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 801770e:	4615      	mov	r5, r2
 8017710:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8017714:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8017718:	6116      	str	r6, [r2, #16]
 801771a:	686e      	ldr	r6, [r5, #4]
 801771c:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8017720:	f9b2 e016 	ldrsh.w	lr, [r2, #22]
 8017724:	42a8      	cmp	r0, r5
 8017726:	6156      	str	r6, [r2, #20]
 8017728:	f8a2 9008 	strh.w	r9, [r2, #8]
 801772c:	f8a2 c00a 	strh.w	ip, [r2, #10]
 8017730:	f8a2 800c 	strh.w	r8, [r2, #12]
 8017734:	f8a2 e00e 	strh.w	lr, [r2, #14]
 8017738:	f1a2 0208 	sub.w	r2, r2, #8
 801773c:	d1da      	bne.n	80176f4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 801773e:	3308      	adds	r3, #8
 8017740:	e7d4      	b.n	80176ec <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8017742:	42bc      	cmp	r4, r7
 8017744:	d903      	bls.n	801774e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x226>
 8017746:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801774a:	3c08      	subs	r4, #8
 801774c:	e6f3      	b.n	8017536 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801774e:	b050      	add	sp, #320	@ 0x140
 8017750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08017754 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8017754:	b510      	push	{r4, lr}
 8017756:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017758:	4604      	mov	r4, r0
 801775a:	07da      	lsls	r2, r3, #31
 801775c:	d507      	bpl.n	801776e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 801775e:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8017762:	f7ff fe8b 	bl	801747c <_ZN8touchgfx7Outline6lineToEii>
 8017766:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017768:	f023 0301 	bic.w	r3, r3, #1
 801776c:	6243      	str	r3, [r0, #36]	@ 0x24
 801776e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8017770:	079b      	lsls	r3, r3, #30
 8017772:	d521      	bpl.n	80177b8 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8017774:	6923      	ldr	r3, [r4, #16]
 8017776:	88d9      	ldrh	r1, [r3, #6]
 8017778:	889a      	ldrh	r2, [r3, #4]
 801777a:	430a      	orrs	r2, r1
 801777c:	d010      	beq.n	80177a0 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801777e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017782:	2a00      	cmp	r2, #0
 8017784:	db0c      	blt.n	80177a0 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8017786:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017788:	428a      	cmp	r2, r1
 801778a:	da09      	bge.n	80177a0 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801778c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8017790:	4291      	cmp	r1, r2
 8017792:	bf88      	it	hi
 8017794:	3308      	addhi	r3, #8
 8017796:	f102 0201 	add.w	r2, r2, #1
 801779a:	bf88      	it	hi
 801779c:	6123      	strhi	r3, [r4, #16]
 801779e:	60a2      	str	r2, [r4, #8]
 80177a0:	68a1      	ldr	r1, [r4, #8]
 80177a2:	b129      	cbz	r1, 80177b0 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80177a4:	6863      	ldr	r3, [r4, #4]
 80177a6:	4299      	cmp	r1, r3
 80177a8:	d802      	bhi.n	80177b0 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80177aa:	68e0      	ldr	r0, [r4, #12]
 80177ac:	f7ff febc 	bl	8017528 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80177b0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80177b2:	f023 0302 	bic.w	r3, r3, #2
 80177b6:	6263      	str	r3, [r4, #36]	@ 0x24
 80177b8:	68e0      	ldr	r0, [r4, #12]
 80177ba:	bd10      	pop	{r4, pc}

080177bc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80177bc:	4b01      	ldr	r3, [pc, #4]	@ (80177c4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80177be:	6818      	ldr	r0, [r3, #0]
 80177c0:	4770      	bx	lr
 80177c2:	bf00      	nop
 80177c4:	2005b930 	.word	0x2005b930

080177c8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80177c8:	4b01      	ldr	r3, [pc, #4]	@ (80177d0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80177ca:	6818      	ldr	r0, [r3, #0]
 80177cc:	4770      	bx	lr
 80177ce:	bf00      	nop
 80177d0:	2005b934 	.word	0x2005b934

080177d4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80177d4:	b510      	push	{r4, lr}
 80177d6:	6803      	ldr	r3, [r0, #0]
 80177d8:	460c      	mov	r4, r1
 80177da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80177dc:	4798      	blx	r3
 80177de:	1b03      	subs	r3, r0, r4
 80177e0:	4258      	negs	r0, r3
 80177e2:	4158      	adcs	r0, r3
 80177e4:	bd10      	pop	{r4, pc}
	...

080177e8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80177e8:	4b01      	ldr	r3, [pc, #4]	@ (80177f0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80177ea:	6019      	str	r1, [r3, #0]
 80177ec:	4770      	bx	lr
 80177ee:	bf00      	nop
 80177f0:	2005b938 	.word	0x2005b938

080177f4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80177f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177f8:	4696      	mov	lr, r2
 80177fa:	4614      	mov	r4, r2
 80177fc:	4605      	mov	r5, r0
 80177fe:	460e      	mov	r6, r1
 8017800:	461f      	mov	r7, r3
 8017802:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017806:	b097      	sub	sp, #92	@ 0x5c
 8017808:	f10d 0c1c 	add.w	ip, sp, #28
 801780c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017810:	f8de 3000 	ldr.w	r3, [lr]
 8017814:	f104 0e14 	add.w	lr, r4, #20
 8017818:	f8cc 3000 	str.w	r3, [ip]
 801781c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8017820:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017824:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017828:	f8de 3000 	ldr.w	r3, [lr]
 801782c:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8017830:	f8cc 3000 	str.w	r3, [ip]
 8017834:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8017838:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801783c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017840:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8017844:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8017848:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 801784c:	f8de 3000 	ldr.w	r3, [lr]
 8017850:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8017852:	f8cc 3000 	str.w	r3, [ip]
 8017856:	9201      	str	r2, [sp, #4]
 8017858:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801785c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801785e:	682b      	ldr	r3, [r5, #0]
 8017860:	9200      	str	r2, [sp, #0]
 8017862:	f8cd 8008 	str.w	r8, [sp, #8]
 8017866:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 801786a:	aa07      	add	r2, sp, #28
 801786c:	463b      	mov	r3, r7
 801786e:	4631      	mov	r1, r6
 8017870:	4628      	mov	r0, r5
 8017872:	47d8      	blx	fp
 8017874:	46a6      	mov	lr, r4
 8017876:	f10d 0c1c 	add.w	ip, sp, #28
 801787a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801787e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017882:	f8de 3000 	ldr.w	r3, [lr]
 8017886:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801788a:	f8cc 3000 	str.w	r3, [ip]
 801788e:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8017892:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017896:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801789a:	f8de 3000 	ldr.w	r3, [lr]
 801789e:	343c      	adds	r4, #60	@ 0x3c
 80178a0:	f8cc 3000 	str.w	r3, [ip]
 80178a4:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80178a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80178aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80178ae:	6823      	ldr	r3, [r4, #0]
 80178b0:	4631      	mov	r1, r6
 80178b2:	f8cc 3000 	str.w	r3, [ip]
 80178b6:	682b      	ldr	r3, [r5, #0]
 80178b8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80178bc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80178be:	f8cd 8008 	str.w	r8, [sp, #8]
 80178c2:	9201      	str	r2, [sp, #4]
 80178c4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80178c6:	4628      	mov	r0, r5
 80178c8:	9200      	str	r2, [sp, #0]
 80178ca:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 80178cc:	aa07      	add	r2, sp, #28
 80178ce:	463b      	mov	r3, r7
 80178d0:	47a0      	blx	r4
 80178d2:	b017      	add	sp, #92	@ 0x5c
 80178d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080178d8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80178d8:	2000      	movs	r0, #0
 80178da:	4770      	bx	lr

080178dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80178dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178e0:	b08d      	sub	sp, #52	@ 0x34
 80178e2:	4688      	mov	r8, r1
 80178e4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80178e6:	f8d3 c000 	ldr.w	ip, [r3]
 80178ea:	680f      	ldr	r7, [r1, #0]
 80178ec:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 80178f0:	eba7 070c 	sub.w	r7, r7, ip
 80178f4:	42bc      	cmp	r4, r7
 80178f6:	bfa8      	it	ge
 80178f8:	463c      	movge	r4, r7
 80178fa:	ee07 4a90 	vmov	s15, r4
 80178fe:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8017902:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8017906:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 801790a:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 801790e:	edd3 6a07 	vldr	s13, [r3, #28]
 8017912:	ee25 4a04 	vmul.f32	s8, s10, s8
 8017916:	ee65 4a24 	vmul.f32	s9, s10, s9
 801791a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801791e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017922:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8017926:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 801792a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801792e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017930:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8017934:	f9b1 9000 	ldrsh.w	r9, [r1]
 8017938:	f9ba 1000 	ldrsh.w	r1, [sl]
 801793c:	eb09 0e0c 	add.w	lr, r9, ip
 8017940:	4571      	cmp	r1, lr
 8017942:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8017946:	ee32 1a05 	vadd.f32	s2, s4, s10
 801794a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801794e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017952:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017956:	f340 808c 	ble.w	8017a72 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801795a:	eba1 060e 	sub.w	r6, r1, lr
 801795e:	fb96 f5f4 	sdiv	r5, r6, r4
 8017962:	ee07 5a10 	vmov	s14, r5
 8017966:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801796a:	2d00      	cmp	r5, #0
 801796c:	fb04 6615 	mls	r6, r4, r5, r6
 8017970:	eea7 0a04 	vfma.f32	s0, s14, s8
 8017974:	eee7 0a24 	vfma.f32	s1, s14, s9
 8017978:	eea7 1a05 	vfma.f32	s2, s14, s10
 801797c:	dd12      	ble.n	80179a4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801797e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8017982:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801798a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801798e:	bf14      	ite	ne
 8017990:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8017994:	eeb0 7a67 	vmoveq.f32	s14, s15
 8017998:	ee31 2a45 	vsub.f32	s4, s2, s10
 801799c:	ee61 1a87 	vmul.f32	s3, s3, s14
 80179a0:	ee22 2a07 	vmul.f32	s4, s4, s14
 80179a4:	fb05 f204 	mul.w	r2, r5, r4
 80179a8:	1abf      	subs	r7, r7, r2
 80179aa:	4494      	add	ip, r2
 80179ac:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80179b0:	4411      	add	r1, r2
 80179b2:	eb09 020c 	add.w	r2, r9, ip
 80179b6:	443a      	add	r2, r7
 80179b8:	b209      	sxth	r1, r1
 80179ba:	428a      	cmp	r2, r1
 80179bc:	bfc4      	itt	gt
 80179be:	eba1 0209 	subgt.w	r2, r1, r9
 80179c2:	eba2 070c 	subgt.w	r7, r2, ip
 80179c6:	2f00      	cmp	r7, #0
 80179c8:	dd50      	ble.n	8017a6c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80179ca:	fb97 f1f4 	sdiv	r1, r7, r4
 80179ce:	fb04 7211 	mls	r2, r4, r1, r7
 80179d2:	b90a      	cbnz	r2, 80179d8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80179d4:	4622      	mov	r2, r4
 80179d6:	3901      	subs	r1, #1
 80179d8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80179dc:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80179e0:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80179e4:	ee21 3a23 	vmul.f32	s6, s2, s7
 80179e8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80179ec:	ee17 7a90 	vmov	r7, s15
 80179f0:	ee73 7a42 	vsub.f32	s15, s6, s4
 80179f4:	eef0 6a42 	vmov.f32	s13, s4
 80179f8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80179fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017a00:	ee17 ca90 	vmov	ip, s15
 8017a04:	eeb0 7a61 	vmov.f32	s14, s3
 8017a08:	6840      	ldr	r0, [r0, #4]
 8017a0a:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8017a0e:	f8d0 a000 	ldr.w	sl, [r0]
 8017a12:	900b      	str	r0, [sp, #44]	@ 0x2c
 8017a14:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8017a16:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8017a1a:	9008      	str	r0, [sp, #32]
 8017a1c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8017a1e:	695b      	ldr	r3, [r3, #20]
 8017a20:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8017a24:	fb9c fcf4 	sdiv	ip, ip, r4
 8017a28:	445b      	add	r3, fp
 8017a2a:	9307      	str	r3, [sp, #28]
 8017a2c:	ee16 3a90 	vmov	r3, s13
 8017a30:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8017a34:	fb0c 3306 	mla	r3, ip, r6, r3
 8017a38:	fb97 f7f4 	sdiv	r7, r7, r4
 8017a3c:	9302      	str	r3, [sp, #8]
 8017a3e:	ee17 3a10 	vmov	r3, s14
 8017a42:	2900      	cmp	r1, #0
 8017a44:	bfcc      	ite	gt
 8017a46:	46a1      	movgt	r9, r4
 8017a48:	4691      	movle	r9, r2
 8017a4a:	44b6      	add	lr, r6
 8017a4c:	fb04 e505 	mla	r5, r4, r5, lr
 8017a50:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8017a54:	fb07 3706 	mla	r7, r7, r6, r3
 8017a58:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8017a5c:	e9cd 4700 	strd	r4, r7, [sp]
 8017a60:	eba9 0306 	sub.w	r3, r9, r6
 8017a64:	f8da 4008 	ldr.w	r4, [sl, #8]
 8017a68:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8017a6a:	47a0      	blx	r4
 8017a6c:	b00d      	add	sp, #52	@ 0x34
 8017a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a72:	2500      	movs	r5, #0
 8017a74:	462e      	mov	r6, r5
 8017a76:	e799      	b.n	80179ac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08017a78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a7c:	461d      	mov	r5, r3
 8017a7e:	b0db      	sub	sp, #364	@ 0x16c
 8017a80:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8017a84:	910f      	str	r1, [sp, #60]	@ 0x3c
 8017a86:	930a      	str	r3, [sp, #40]	@ 0x28
 8017a88:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8017a8c:	9009      	str	r0, [sp, #36]	@ 0x24
 8017a8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017a90:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8017a94:	4614      	mov	r4, r2
 8017a96:	9310      	str	r3, [sp, #64]	@ 0x40
 8017a98:	6803      	ldr	r3, [r0, #0]
 8017a9a:	4629      	mov	r1, r5
 8017a9c:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8017a9e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8017aa2:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8017aa6:	47b8      	blx	r7
 8017aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017aaa:	6058      	str	r0, [r3, #4]
 8017aac:	2800      	cmp	r0, #0
 8017aae:	f000 83a1 	beq.w	80181f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017ab2:	ed94 7a02 	vldr	s14, [r4, #8]
 8017ab6:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8017aba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017abe:	682b      	ldr	r3, [r5, #0]
 8017ac0:	9314      	str	r3, [sp, #80]	@ 0x50
 8017ac2:	686b      	ldr	r3, [r5, #4]
 8017ac4:	9315      	str	r3, [sp, #84]	@ 0x54
 8017ac6:	4bc1      	ldr	r3, [pc, #772]	@ (8017dcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8017ac8:	7819      	ldrb	r1, [r3, #0]
 8017aca:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8017ace:	2900      	cmp	r1, #0
 8017ad0:	bf16      	itet	ne
 8017ad2:	4619      	movne	r1, r3
 8017ad4:	4611      	moveq	r1, r2
 8017ad6:	4613      	movne	r3, r2
 8017ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017adc:	9116      	str	r1, [sp, #88]	@ 0x58
 8017ade:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8017ae2:	f240 8387 	bls.w	80181f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017ae6:	ed94 7a07 	vldr	s14, [r4, #28]
 8017aea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017af2:	f240 837f 	bls.w	80181f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017af6:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8017afa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b02:	f240 8377 	bls.w	80181f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017b06:	6822      	ldr	r2, [r4, #0]
 8017b08:	4bb1      	ldr	r3, [pc, #708]	@ (8017dd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8017b0a:	429a      	cmp	r2, r3
 8017b0c:	f2c0 8372 	blt.w	80181f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017b10:	49b0      	ldr	r1, [pc, #704]	@ (8017dd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8017b12:	6963      	ldr	r3, [r4, #20]
 8017b14:	428a      	cmp	r2, r1
 8017b16:	f300 836d 	bgt.w	80181f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017b1a:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8017b1e:	48ae      	ldr	r0, [pc, #696]	@ (8017dd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8017b20:	33ff      	adds	r3, #255	@ 0xff
 8017b22:	4283      	cmp	r3, r0
 8017b24:	f200 8366 	bhi.w	80181f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017b28:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8017b2a:	4dac      	ldr	r5, [pc, #688]	@ (8017ddc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8017b2c:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8017b30:	33ff      	adds	r3, #255	@ 0xff
 8017b32:	42ab      	cmp	r3, r5
 8017b34:	f200 835e 	bhi.w	80181f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017b38:	6862      	ldr	r2, [r4, #4]
 8017b3a:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8017b3e:	33ff      	adds	r3, #255	@ 0xff
 8017b40:	4283      	cmp	r3, r0
 8017b42:	f200 8357 	bhi.w	80181f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017b46:	69a1      	ldr	r1, [r4, #24]
 8017b48:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8017b4c:	33ff      	adds	r3, #255	@ 0xff
 8017b4e:	4283      	cmp	r3, r0
 8017b50:	f200 8350 	bhi.w	80181f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017b54:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8017b56:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8017b5a:	30ff      	adds	r0, #255	@ 0xff
 8017b5c:	42a8      	cmp	r0, r5
 8017b5e:	f200 8349 	bhi.w	80181f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017b62:	428a      	cmp	r2, r1
 8017b64:	f280 8110 	bge.w	8017d88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8017b68:	429a      	cmp	r2, r3
 8017b6a:	f300 8119 	bgt.w	8017da0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8017b6e:	4299      	cmp	r1, r3
 8017b70:	f280 811d 	bge.w	8017dae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8017b74:	2502      	movs	r5, #2
 8017b76:	2701      	movs	r7, #1
 8017b78:	46a9      	mov	r9, r5
 8017b7a:	46b8      	mov	r8, r7
 8017b7c:	f04f 0a00 	mov.w	sl, #0
 8017b80:	4621      	mov	r1, r4
 8017b82:	a849      	add	r0, sp, #292	@ 0x124
 8017b84:	f003 fd08 	bl	801b598 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8017b88:	4622      	mov	r2, r4
 8017b8a:	4653      	mov	r3, sl
 8017b8c:	a949      	add	r1, sp, #292	@ 0x124
 8017b8e:	f8cd 9000 	str.w	r9, [sp]
 8017b92:	a819      	add	r0, sp, #100	@ 0x64
 8017b94:	f003 fe32 	bl	801b7fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017b98:	4622      	mov	r2, r4
 8017b9a:	4653      	mov	r3, sl
 8017b9c:	a949      	add	r1, sp, #292	@ 0x124
 8017b9e:	f8cd 8000 	str.w	r8, [sp]
 8017ba2:	a829      	add	r0, sp, #164	@ 0xa4
 8017ba4:	f003 fe2a 	bl	801b7fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017ba8:	4643      	mov	r3, r8
 8017baa:	4622      	mov	r2, r4
 8017bac:	a949      	add	r1, sp, #292	@ 0x124
 8017bae:	f8cd 9000 	str.w	r9, [sp]
 8017bb2:	a839      	add	r0, sp, #228	@ 0xe4
 8017bb4:	f003 fe22 	bl	801b7fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017bb8:	42af      	cmp	r7, r5
 8017bba:	bfb5      	itete	lt
 8017bbc:	2300      	movlt	r3, #0
 8017bbe:	2301      	movge	r3, #1
 8017bc0:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8017bc2:	930e      	strge	r3, [sp, #56]	@ 0x38
 8017bc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017bc6:	af12      	add	r7, sp, #72	@ 0x48
 8017bc8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017bcc:	bfb9      	ittee	lt
 8017bce:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8017bd0:	ac19      	addlt	r4, sp, #100	@ 0x64
 8017bd2:	ad19      	addge	r5, sp, #100	@ 0x64
 8017bd4:	ac29      	addge	r4, sp, #164	@ 0xa4
 8017bd6:	e887 0003 	stmia.w	r7, {r0, r1}
 8017bda:	b928      	cbnz	r0, 8017be8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8017bdc:	4b80      	ldr	r3, [pc, #512]	@ (8017de0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8017bde:	6818      	ldr	r0, [r3, #0]
 8017be0:	6803      	ldr	r3, [r0, #0]
 8017be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017be4:	4798      	blx	r3
 8017be6:	6038      	str	r0, [r7, #0]
 8017be8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8017bea:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8017bee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017bf2:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8017bf4:	930c      	str	r3, [sp, #48]	@ 0x30
 8017bf6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017bf8:	6963      	ldr	r3, [r4, #20]
 8017bfa:	440b      	add	r3, r1
 8017bfc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017c00:	4408      	add	r0, r1
 8017c02:	b200      	sxth	r0, r0
 8017c04:	4283      	cmp	r3, r0
 8017c06:	900d      	str	r0, [sp, #52]	@ 0x34
 8017c08:	f280 80dd 	bge.w	8017dc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8017c0c:	428b      	cmp	r3, r1
 8017c0e:	da08      	bge.n	8017c22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017c10:	2a00      	cmp	r2, #0
 8017c12:	dd06      	ble.n	8017c22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017c14:	1acb      	subs	r3, r1, r3
 8017c16:	429a      	cmp	r2, r3
 8017c18:	f2c0 80e4 	blt.w	8017de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	f300 80e2 	bgt.w	8017de6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8017c22:	6967      	ldr	r7, [r4, #20]
 8017c24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017c26:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8017c2a:	443b      	add	r3, r7
 8017c2c:	461f      	mov	r7, r3
 8017c2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017c30:	1bdf      	subs	r7, r3, r7
 8017c32:	4297      	cmp	r7, r2
 8017c34:	bfa8      	it	ge
 8017c36:	4617      	movge	r7, r2
 8017c38:	2f00      	cmp	r7, #0
 8017c3a:	f340 8166 	ble.w	8017f0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8017c3e:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8017c40:	6829      	ldr	r1, [r5, #0]
 8017c42:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017c46:	f9bb 3000 	ldrsh.w	r3, [fp]
 8017c4a:	4411      	add	r1, r2
 8017c4c:	4299      	cmp	r1, r3
 8017c4e:	6820      	ldr	r0, [r4, #0]
 8017c50:	dd1a      	ble.n	8017c88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017c52:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017c56:	4402      	add	r2, r0
 8017c58:	440b      	add	r3, r1
 8017c5a:	b21b      	sxth	r3, r3
 8017c5c:	429a      	cmp	r2, r3
 8017c5e:	dc13      	bgt.n	8017c88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017c60:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c64:	a912      	add	r1, sp, #72	@ 0x48
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	9206      	str	r2, [sp, #24]
 8017c6a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017c6c:	9500      	str	r5, [sp, #0]
 8017c6e:	9205      	str	r2, [sp, #20]
 8017c70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017c72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017c74:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017c78:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8017c7a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017c7e:	aa49      	add	r2, sp, #292	@ 0x124
 8017c80:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8017c84:	4623      	mov	r3, r4
 8017c86:	47c8      	blx	r9
 8017c88:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017c8c:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8017c90:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8017c94:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8017c98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017c9c:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8017ca0:	ed94 6a08 	vldr	s12, [r4, #32]
 8017ca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017ca8:	edd4 6a07 	vldr	s13, [r4, #28]
 8017cac:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017cb0:	441a      	add	r2, r3
 8017cb2:	6963      	ldr	r3, [r4, #20]
 8017cb4:	68a1      	ldr	r1, [r4, #8]
 8017cb6:	3301      	adds	r3, #1
 8017cb8:	6163      	str	r3, [r4, #20]
 8017cba:	69a3      	ldr	r3, [r4, #24]
 8017cbc:	6022      	str	r2, [r4, #0]
 8017cbe:	3b01      	subs	r3, #1
 8017cc0:	61a3      	str	r3, [r4, #24]
 8017cc2:	6923      	ldr	r3, [r4, #16]
 8017cc4:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8017cc8:	440b      	add	r3, r1
 8017cca:	68e1      	ldr	r1, [r4, #12]
 8017ccc:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8017cd0:	428b      	cmp	r3, r1
 8017cd2:	edc4 6a07 	vstr	s13, [r4, #28]
 8017cd6:	6123      	str	r3, [r4, #16]
 8017cd8:	db15      	blt.n	8017d06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8017cda:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8017cde:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017ce2:	edc4 6a07 	vstr	s13, [r4, #28]
 8017ce6:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8017cea:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017cee:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8017cf2:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8017cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017cfa:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8017cfe:	3201      	adds	r2, #1
 8017d00:	1a5b      	subs	r3, r3, r1
 8017d02:	6022      	str	r2, [r4, #0]
 8017d04:	6123      	str	r3, [r4, #16]
 8017d06:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8017d0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017d0e:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8017d12:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8017d16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017d1a:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8017d1e:	ed95 6a08 	vldr	s12, [r5, #32]
 8017d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017d26:	edd5 6a07 	vldr	s13, [r5, #28]
 8017d2a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017d2e:	441a      	add	r2, r3
 8017d30:	696b      	ldr	r3, [r5, #20]
 8017d32:	68a9      	ldr	r1, [r5, #8]
 8017d34:	3301      	adds	r3, #1
 8017d36:	616b      	str	r3, [r5, #20]
 8017d38:	69ab      	ldr	r3, [r5, #24]
 8017d3a:	602a      	str	r2, [r5, #0]
 8017d3c:	3b01      	subs	r3, #1
 8017d3e:	61ab      	str	r3, [r5, #24]
 8017d40:	692b      	ldr	r3, [r5, #16]
 8017d42:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8017d46:	440b      	add	r3, r1
 8017d48:	68e9      	ldr	r1, [r5, #12]
 8017d4a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8017d4e:	428b      	cmp	r3, r1
 8017d50:	edc5 6a07 	vstr	s13, [r5, #28]
 8017d54:	612b      	str	r3, [r5, #16]
 8017d56:	db15      	blt.n	8017d84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8017d58:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8017d5c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017d60:	edc5 6a07 	vstr	s13, [r5, #28]
 8017d64:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8017d68:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017d6c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8017d70:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8017d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017d78:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8017d7c:	3201      	adds	r2, #1
 8017d7e:	1a5b      	subs	r3, r3, r1
 8017d80:	602a      	str	r2, [r5, #0]
 8017d82:	612b      	str	r3, [r5, #16]
 8017d84:	3f01      	subs	r7, #1
 8017d86:	e757      	b.n	8017c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8017d88:	4299      	cmp	r1, r3
 8017d8a:	dc13      	bgt.n	8017db4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8017d8c:	429a      	cmp	r2, r3
 8017d8e:	da14      	bge.n	8017dba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8017d90:	2502      	movs	r5, #2
 8017d92:	2703      	movs	r7, #3
 8017d94:	46a9      	mov	r9, r5
 8017d96:	f04f 0800 	mov.w	r8, #0
 8017d9a:	f04f 0a01 	mov.w	sl, #1
 8017d9e:	e6ef      	b.n	8017b80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017da0:	2501      	movs	r5, #1
 8017da2:	2700      	movs	r7, #0
 8017da4:	46a9      	mov	r9, r5
 8017da6:	46b8      	mov	r8, r7
 8017da8:	f04f 0a02 	mov.w	sl, #2
 8017dac:	e6e8      	b.n	8017b80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017dae:	2501      	movs	r5, #1
 8017db0:	2702      	movs	r7, #2
 8017db2:	e6e1      	b.n	8017b78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8017db4:	2500      	movs	r5, #0
 8017db6:	2701      	movs	r7, #1
 8017db8:	e7f4      	b.n	8017da4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8017dba:	2702      	movs	r7, #2
 8017dbc:	2503      	movs	r5, #3
 8017dbe:	f04f 0900 	mov.w	r9, #0
 8017dc2:	46b8      	mov	r8, r7
 8017dc4:	e7e9      	b.n	8017d9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8017dc6:	4613      	mov	r3, r2
 8017dc8:	e728      	b.n	8017c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8017dca:	bf00      	nop
 8017dcc:	2005b920 	.word	0x2005b920
 8017dd0:	fffd8f01 	.word	0xfffd8f01
 8017dd4:	00027100 	.word	0x00027100
 8017dd8:	0004e1ff 	.word	0x0004e1ff
 8017ddc:	0004e1fe 	.word	0x0004e1fe
 8017de0:	2005b928 	.word	0x2005b928
 8017de4:	4613      	mov	r3, r2
 8017de6:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8017dea:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8017dee:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8017df2:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8017df6:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8017dfa:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8017dfe:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8017e02:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8017e06:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8017e0a:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8017e0e:	469e      	mov	lr, r3
 8017e10:	469c      	mov	ip, r3
 8017e12:	f04f 0900 	mov.w	r9, #0
 8017e16:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8017e18:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8017e1a:	9111      	str	r1, [sp, #68]	@ 0x44
 8017e1c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8017e20:	f1bc 0f00 	cmp.w	ip, #0
 8017e24:	d147      	bne.n	8017eb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8017e26:	eb03 0c07 	add.w	ip, r3, r7
 8017e2a:	1ad7      	subs	r7, r2, r3
 8017e2c:	f1b9 0f00 	cmp.w	r9, #0
 8017e30:	d009      	beq.n	8017e46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8017e32:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8017e36:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8017e3a:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8017e3e:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8017e42:	9029      	str	r0, [sp, #164]	@ 0xa4
 8017e44:	912d      	str	r1, [sp, #180]	@ 0xb4
 8017e46:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8017e4a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8017e4e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8017e52:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8017e56:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8017e5a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8017e5e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8017e62:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8017e66:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8017e6a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8017e6e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8017e72:	f04f 0800 	mov.w	r8, #0
 8017e76:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8017e78:	9111      	str	r1, [sp, #68]	@ 0x44
 8017e7a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8017e7e:	f1be 0f00 	cmp.w	lr, #0
 8017e82:	d031      	beq.n	8017ee8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8017e84:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8017e86:	4450      	add	r0, sl
 8017e88:	4431      	add	r1, r6
 8017e8a:	4549      	cmp	r1, r9
 8017e8c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017e90:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017e94:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017e98:	db08      	blt.n	8017eac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8017e9a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017e9e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017ea2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017ea6:	3001      	adds	r0, #1
 8017ea8:	eba1 0109 	sub.w	r1, r1, r9
 8017eac:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017eb0:	f04f 0801 	mov.w	r8, #1
 8017eb4:	e7e3      	b.n	8017e7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8017eb6:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8017eb8:	4450      	add	r0, sl
 8017eba:	4431      	add	r1, r6
 8017ebc:	4541      	cmp	r1, r8
 8017ebe:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017ec2:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017ec6:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8017eca:	db08      	blt.n	8017ede <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8017ecc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017ed0:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017ed4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017ed8:	3001      	adds	r0, #1
 8017eda:	eba1 0108 	sub.w	r1, r1, r8
 8017ede:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017ee2:	f04f 0901 	mov.w	r9, #1
 8017ee6:	e79b      	b.n	8017e20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8017ee8:	449c      	add	ip, r3
 8017eea:	1aff      	subs	r7, r7, r3
 8017eec:	f1b8 0f00 	cmp.w	r8, #0
 8017ef0:	d009      	beq.n	8017f06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8017ef2:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8017ef6:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8017efa:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8017efe:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8017f02:	9019      	str	r0, [sp, #100]	@ 0x64
 8017f04:	911d      	str	r1, [sp, #116]	@ 0x74
 8017f06:	1ad2      	subs	r2, r2, r3
 8017f08:	e68b      	b.n	8017c22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017f0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017f0c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	f000 80d1 	beq.w	80180b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8017f14:	ad19      	add	r5, sp, #100	@ 0x64
 8017f16:	ac39      	add	r4, sp, #228	@ 0xe4
 8017f18:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8017f1a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8017f1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017f22:	930c      	str	r3, [sp, #48]	@ 0x30
 8017f24:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017f26:	6963      	ldr	r3, [r4, #20]
 8017f28:	440b      	add	r3, r1
 8017f2a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017f2e:	4408      	add	r0, r1
 8017f30:	b200      	sxth	r0, r0
 8017f32:	4283      	cmp	r3, r0
 8017f34:	900d      	str	r0, [sp, #52]	@ 0x34
 8017f36:	f280 80c1 	bge.w	80180bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8017f3a:	428b      	cmp	r3, r1
 8017f3c:	da08      	bge.n	8017f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017f3e:	2a00      	cmp	r2, #0
 8017f40:	dd06      	ble.n	8017f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017f42:	1acb      	subs	r3, r1, r3
 8017f44:	429a      	cmp	r2, r3
 8017f46:	f2c0 80bb 	blt.w	80180c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	f300 80b9 	bgt.w	80180c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8017f50:	6967      	ldr	r7, [r4, #20]
 8017f52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017f54:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8017f58:	443b      	add	r3, r7
 8017f5a:	461f      	mov	r7, r3
 8017f5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017f5e:	1bdf      	subs	r7, r3, r7
 8017f60:	4297      	cmp	r7, r2
 8017f62:	bfa8      	it	ge
 8017f64:	4617      	movge	r7, r2
 8017f66:	2f00      	cmp	r7, #0
 8017f68:	f340 813c 	ble.w	80181e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8017f6c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8017f6e:	6829      	ldr	r1, [r5, #0]
 8017f70:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017f74:	f9bb 3000 	ldrsh.w	r3, [fp]
 8017f78:	4411      	add	r1, r2
 8017f7a:	4299      	cmp	r1, r3
 8017f7c:	6820      	ldr	r0, [r4, #0]
 8017f7e:	dd1a      	ble.n	8017fb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017f80:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017f84:	4402      	add	r2, r0
 8017f86:	440b      	add	r3, r1
 8017f88:	b21b      	sxth	r3, r3
 8017f8a:	429a      	cmp	r2, r3
 8017f8c:	dc13      	bgt.n	8017fb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017f8e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f92:	a912      	add	r1, sp, #72	@ 0x48
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	9206      	str	r2, [sp, #24]
 8017f98:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017f9a:	9500      	str	r5, [sp, #0]
 8017f9c:	9205      	str	r2, [sp, #20]
 8017f9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017fa0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017fa2:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017fa6:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8017fa8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017fac:	aa49      	add	r2, sp, #292	@ 0x124
 8017fae:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8017fb2:	4623      	mov	r3, r4
 8017fb4:	47c8      	blx	r9
 8017fb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017fba:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8017fbe:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8017fc2:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8017fc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017fca:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8017fce:	ed94 6a08 	vldr	s12, [r4, #32]
 8017fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017fd6:	edd4 6a07 	vldr	s13, [r4, #28]
 8017fda:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017fde:	441a      	add	r2, r3
 8017fe0:	6963      	ldr	r3, [r4, #20]
 8017fe2:	68a1      	ldr	r1, [r4, #8]
 8017fe4:	3301      	adds	r3, #1
 8017fe6:	6163      	str	r3, [r4, #20]
 8017fe8:	69a3      	ldr	r3, [r4, #24]
 8017fea:	6022      	str	r2, [r4, #0]
 8017fec:	3b01      	subs	r3, #1
 8017fee:	61a3      	str	r3, [r4, #24]
 8017ff0:	6923      	ldr	r3, [r4, #16]
 8017ff2:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8017ff6:	440b      	add	r3, r1
 8017ff8:	68e1      	ldr	r1, [r4, #12]
 8017ffa:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8017ffe:	428b      	cmp	r3, r1
 8018000:	edc4 6a07 	vstr	s13, [r4, #28]
 8018004:	6123      	str	r3, [r4, #16]
 8018006:	db15      	blt.n	8018034 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8018008:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801800c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018010:	edc4 6a07 	vstr	s13, [r4, #28]
 8018014:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8018018:	ee36 7a87 	vadd.f32	s14, s13, s14
 801801c:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8018020:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8018024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018028:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801802c:	3201      	adds	r2, #1
 801802e:	1a5b      	subs	r3, r3, r1
 8018030:	6022      	str	r2, [r4, #0]
 8018032:	6123      	str	r3, [r4, #16]
 8018034:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8018038:	e9d5 2300 	ldrd	r2, r3, [r5]
 801803c:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8018040:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8018044:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018048:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801804c:	ed95 6a08 	vldr	s12, [r5, #32]
 8018050:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018054:	edd5 6a07 	vldr	s13, [r5, #28]
 8018058:	ee76 6a86 	vadd.f32	s13, s13, s12
 801805c:	441a      	add	r2, r3
 801805e:	696b      	ldr	r3, [r5, #20]
 8018060:	68a9      	ldr	r1, [r5, #8]
 8018062:	3301      	adds	r3, #1
 8018064:	616b      	str	r3, [r5, #20]
 8018066:	69ab      	ldr	r3, [r5, #24]
 8018068:	602a      	str	r2, [r5, #0]
 801806a:	3b01      	subs	r3, #1
 801806c:	61ab      	str	r3, [r5, #24]
 801806e:	692b      	ldr	r3, [r5, #16]
 8018070:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8018074:	440b      	add	r3, r1
 8018076:	68e9      	ldr	r1, [r5, #12]
 8018078:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801807c:	428b      	cmp	r3, r1
 801807e:	edc5 6a07 	vstr	s13, [r5, #28]
 8018082:	612b      	str	r3, [r5, #16]
 8018084:	db15      	blt.n	80180b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8018086:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801808a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801808e:	edc5 6a07 	vstr	s13, [r5, #28]
 8018092:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8018096:	ee36 7a87 	vadd.f32	s14, s13, s14
 801809a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801809e:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80180a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80180a6:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80180aa:	3201      	adds	r2, #1
 80180ac:	1a5b      	subs	r3, r3, r1
 80180ae:	602a      	str	r2, [r5, #0]
 80180b0:	612b      	str	r3, [r5, #16]
 80180b2:	3f01      	subs	r7, #1
 80180b4:	e757      	b.n	8017f66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80180b6:	ad39      	add	r5, sp, #228	@ 0xe4
 80180b8:	ac19      	add	r4, sp, #100	@ 0x64
 80180ba:	e72d      	b.n	8017f18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80180bc:	4613      	mov	r3, r2
 80180be:	e744      	b.n	8017f4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80180c0:	4613      	mov	r3, r2
 80180c2:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 80180c6:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 80180ca:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 80180ce:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 80180d2:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 80180d6:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 80180da:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 80180de:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 80180e2:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 80180e6:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 80180ea:	469e      	mov	lr, r3
 80180ec:	461f      	mov	r7, r3
 80180ee:	f04f 0900 	mov.w	r9, #0
 80180f2:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 80180f4:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 80180f8:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 80180fa:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 80180fe:	960e      	str	r6, [sp, #56]	@ 0x38
 8018100:	2f00      	cmp	r7, #0
 8018102:	d146      	bne.n	8018192 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8018104:	449c      	add	ip, r3
 8018106:	1ad7      	subs	r7, r2, r3
 8018108:	f1b9 0f00 	cmp.w	r9, #0
 801810c:	d009      	beq.n	8018122 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801810e:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8018112:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8018116:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801811a:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 801811e:	9039      	str	r0, [sp, #228]	@ 0xe4
 8018120:	913d      	str	r1, [sp, #244]	@ 0xf4
 8018122:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8018126:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801812a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801812e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8018132:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8018136:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801813a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801813e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8018142:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8018146:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801814a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801814e:	f04f 0800 	mov.w	r8, #0
 8018152:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8018154:	910e      	str	r1, [sp, #56]	@ 0x38
 8018156:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801815a:	f1be 0f00 	cmp.w	lr, #0
 801815e:	d030      	beq.n	80181c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8018160:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8018162:	4450      	add	r0, sl
 8018164:	4431      	add	r1, r6
 8018166:	4549      	cmp	r1, r9
 8018168:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801816c:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018170:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018174:	db08      	blt.n	8018188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8018176:	ee77 7a85 	vadd.f32	s15, s15, s10
 801817a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801817e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018182:	3001      	adds	r0, #1
 8018184:	eba1 0109 	sub.w	r1, r1, r9
 8018188:	f10e 3eff 	add.w	lr, lr, #4294967295
 801818c:	f04f 0801 	mov.w	r8, #1
 8018190:	e7e3      	b.n	801815a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8018192:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8018194:	4450      	add	r0, sl
 8018196:	4431      	add	r1, r6
 8018198:	4541      	cmp	r1, r8
 801819a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801819e:	ee77 7a84 	vadd.f32	s15, s15, s8
 80181a2:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80181a6:	db08      	blt.n	80181ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80181a8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80181ac:	ee37 7a25 	vadd.f32	s14, s14, s11
 80181b0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80181b4:	3001      	adds	r0, #1
 80181b6:	eba1 0108 	sub.w	r1, r1, r8
 80181ba:	3f01      	subs	r7, #1
 80181bc:	f04f 0901 	mov.w	r9, #1
 80181c0:	e79e      	b.n	8018100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80181c2:	449c      	add	ip, r3
 80181c4:	1aff      	subs	r7, r7, r3
 80181c6:	f1b8 0f00 	cmp.w	r8, #0
 80181ca:	d009      	beq.n	80181e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80181cc:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80181d0:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80181d4:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80181d8:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80181dc:	9019      	str	r0, [sp, #100]	@ 0x64
 80181de:	911d      	str	r1, [sp, #116]	@ 0x74
 80181e0:	1ad2      	subs	r2, r2, r3
 80181e2:	e6b5      	b.n	8017f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80181e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	b923      	cbnz	r3, 80181f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80181ea:	4b04      	ldr	r3, [pc, #16]	@ (80181fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80181ec:	6818      	ldr	r0, [r3, #0]
 80181ee:	6803      	ldr	r3, [r0, #0]
 80181f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80181f2:	4798      	blx	r3
 80181f4:	b05b      	add	sp, #364	@ 0x16c
 80181f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181fa:	bf00      	nop
 80181fc:	2005b928 	.word	0x2005b928

08018200 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018200:	2b03      	cmp	r3, #3
 8018202:	d818      	bhi.n	8018236 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8018204:	e8df f003 	tbb	[pc, r3]
 8018208:	130d0602 	.word	0x130d0602
 801820c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018210:	1850      	adds	r0, r2, r1
 8018212:	4770      	bx	lr
 8018214:	8803      	ldrh	r3, [r0, #0]
 8018216:	8880      	ldrh	r0, [r0, #4]
 8018218:	4418      	add	r0, r3
 801821a:	b200      	sxth	r0, r0
 801821c:	1a80      	subs	r0, r0, r2
 801821e:	3801      	subs	r0, #1
 8018220:	4770      	bx	lr
 8018222:	8803      	ldrh	r3, [r0, #0]
 8018224:	8880      	ldrh	r0, [r0, #4]
 8018226:	4418      	add	r0, r3
 8018228:	b200      	sxth	r0, r0
 801822a:	1a40      	subs	r0, r0, r1
 801822c:	e7f7      	b.n	801821e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801822e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8018232:	4410      	add	r0, r2
 8018234:	4770      	bx	lr
 8018236:	2000      	movs	r0, #0
 8018238:	4770      	bx	lr

0801823a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801823a:	2b03      	cmp	r3, #3
 801823c:	d817      	bhi.n	801826e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801823e:	e8df f003 	tbb	[pc, r3]
 8018242:	0602      	.short	0x0602
 8018244:	1009      	.short	0x1009
 8018246:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801824a:	1850      	adds	r0, r2, r1
 801824c:	4770      	bx	lr
 801824e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018252:	e7fa      	b.n	801824a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8018254:	8843      	ldrh	r3, [r0, #2]
 8018256:	88c0      	ldrh	r0, [r0, #6]
 8018258:	4418      	add	r0, r3
 801825a:	b200      	sxth	r0, r0
 801825c:	1a80      	subs	r0, r0, r2
 801825e:	3801      	subs	r0, #1
 8018260:	4770      	bx	lr
 8018262:	8843      	ldrh	r3, [r0, #2]
 8018264:	88c0      	ldrh	r0, [r0, #6]
 8018266:	4418      	add	r0, r3
 8018268:	b200      	sxth	r0, r0
 801826a:	1a40      	subs	r0, r0, r1
 801826c:	e7f7      	b.n	801825e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801826e:	2000      	movs	r0, #0
 8018270:	4770      	bx	lr
	...

08018274 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8018274:	2200      	movs	r2, #0
 8018276:	4b01      	ldr	r3, [pc, #4]	@ (801827c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8018278:	601a      	str	r2, [r3, #0]
 801827a:	4770      	bx	lr
 801827c:	2005b938 	.word	0x2005b938

08018280 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8018280:	4603      	mov	r3, r0
 8018282:	b1c8      	cbz	r0, 80182b8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8018284:	0c02      	lsrs	r2, r0, #16
 8018286:	0412      	lsls	r2, r2, #16
 8018288:	b9a2      	cbnz	r2, 80182b4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801828a:	0403      	lsls	r3, r0, #16
 801828c:	2010      	movs	r0, #16
 801828e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8018292:	bf04      	itt	eq
 8018294:	021b      	lsleq	r3, r3, #8
 8018296:	3008      	addeq	r0, #8
 8018298:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801829c:	bf04      	itt	eq
 801829e:	011b      	lsleq	r3, r3, #4
 80182a0:	3004      	addeq	r0, #4
 80182a2:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 80182a6:	bf04      	itt	eq
 80182a8:	009b      	lsleq	r3, r3, #2
 80182aa:	3002      	addeq	r0, #2
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	db04      	blt.n	80182ba <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80182b0:	3001      	adds	r0, #1
 80182b2:	4770      	bx	lr
 80182b4:	2000      	movs	r0, #0
 80182b6:	e7ea      	b.n	801828e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80182b8:	2020      	movs	r0, #32
 80182ba:	4770      	bx	lr

080182bc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80182bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182c0:	b087      	sub	sp, #28
 80182c2:	460d      	mov	r5, r1
 80182c4:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 80182c8:	4616      	mov	r6, r2
 80182ca:	4698      	mov	r8, r3
 80182cc:	4601      	mov	r1, r0
 80182ce:	b120      	cbz	r0, 80182da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80182d0:	b11a      	cbz	r2, 80182da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80182d2:	2d1f      	cmp	r5, #31
 80182d4:	d801      	bhi.n	80182da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80182d6:	2b1f      	cmp	r3, #31
 80182d8:	d904      	bls.n	80182e4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 80182da:	2000      	movs	r0, #0
 80182dc:	6038      	str	r0, [r7, #0]
 80182de:	b007      	add	sp, #28
 80182e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182e4:	b97d      	cbnz	r5, 8018306 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 80182e6:	b143      	cbz	r3, 80182fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 80182e8:	4602      	mov	r2, r0
 80182ea:	e9cd 4700 	strd	r4, r7, [sp]
 80182ee:	462b      	mov	r3, r5
 80182f0:	4641      	mov	r1, r8
 80182f2:	4630      	mov	r0, r6
 80182f4:	f7ff ffe2 	bl	80182bc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80182f8:	e7f1      	b.n	80182de <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80182fa:	f04f 33ff 	mov.w	r3, #4294967295
 80182fe:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8018302:	603b      	str	r3, [r7, #0]
 8018304:	e7eb      	b.n	80182de <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8018306:	fa32 fa05 	lsrs.w	sl, r2, r5
 801830a:	d106      	bne.n	801831a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801830c:	4346      	muls	r6, r0
 801830e:	fbb6 f0f4 	udiv	r0, r6, r4
 8018312:	fb04 6610 	mls	r6, r4, r0, r6
 8018316:	603e      	str	r6, [r7, #0]
 8018318:	e7e1      	b.n	80182de <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801831a:	fa00 fb05 	lsl.w	fp, r0, r5
 801831e:	fbbb f9f4 	udiv	r9, fp, r4
 8018322:	2201      	movs	r2, #1
 8018324:	fb0a f309 	mul.w	r3, sl, r9
 8018328:	40aa      	lsls	r2, r5
 801832a:	3a01      	subs	r2, #1
 801832c:	4016      	ands	r6, r2
 801832e:	4630      	mov	r0, r6
 8018330:	9303      	str	r3, [sp, #12]
 8018332:	f7ff ffa5 	bl	8018280 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018336:	462b      	mov	r3, r5
 8018338:	460a      	mov	r2, r1
 801833a:	e9cd 4700 	strd	r4, r7, [sp]
 801833e:	4601      	mov	r1, r0
 8018340:	4630      	mov	r0, r6
 8018342:	f7ff ffbb 	bl	80182bc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018346:	fb04 b919 	mls	r9, r4, r9, fp
 801834a:	4606      	mov	r6, r0
 801834c:	4648      	mov	r0, r9
 801834e:	eb05 0108 	add.w	r1, r5, r8
 8018352:	f7ff ff95 	bl	8018280 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018356:	ab05      	add	r3, sp, #20
 8018358:	e9cd 4300 	strd	r4, r3, [sp]
 801835c:	464a      	mov	r2, r9
 801835e:	4603      	mov	r3, r0
 8018360:	4650      	mov	r0, sl
 8018362:	f7ff ffab 	bl	80182bc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018366:	6839      	ldr	r1, [r7, #0]
 8018368:	9a05      	ldr	r2, [sp, #20]
 801836a:	9b03      	ldr	r3, [sp, #12]
 801836c:	4411      	add	r1, r2
 801836e:	fbb1 f2f4 	udiv	r2, r1, r4
 8018372:	fb04 1412 	mls	r4, r4, r2, r1
 8018376:	18d3      	adds	r3, r2, r3
 8018378:	441e      	add	r6, r3
 801837a:	4430      	add	r0, r6
 801837c:	603c      	str	r4, [r7, #0]
 801837e:	e7ae      	b.n	80182de <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08018380 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8018380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018384:	b085      	sub	sp, #20
 8018386:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8018388:	f1b0 0900 	subs.w	r9, r0, #0
 801838c:	461d      	mov	r5, r3
 801838e:	bfbf      	itttt	lt
 8018390:	6823      	ldrlt	r3, [r4, #0]
 8018392:	f1c9 0900 	rsblt	r9, r9, #0
 8018396:	425b      	neglt	r3, r3
 8018398:	6023      	strlt	r3, [r4, #0]
 801839a:	bfb4      	ite	lt
 801839c:	f04f 36ff 	movlt.w	r6, #4294967295
 80183a0:	2601      	movge	r6, #1
 80183a2:	2a00      	cmp	r2, #0
 80183a4:	4617      	mov	r7, r2
 80183a6:	da04      	bge.n	80183b2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80183a8:	6823      	ldr	r3, [r4, #0]
 80183aa:	4257      	negs	r7, r2
 80183ac:	425b      	negs	r3, r3
 80183ae:	4276      	negs	r6, r6
 80183b0:	6023      	str	r3, [r4, #0]
 80183b2:	2d00      	cmp	r5, #0
 80183b4:	4638      	mov	r0, r7
 80183b6:	bfba      	itte	lt
 80183b8:	426d      	neglt	r5, r5
 80183ba:	f04f 38ff 	movlt.w	r8, #4294967295
 80183be:	f04f 0801 	movge.w	r8, #1
 80183c2:	f7ff ff5d 	bl	8018280 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80183c6:	ab03      	add	r3, sp, #12
 80183c8:	e9cd 5300 	strd	r5, r3, [sp]
 80183cc:	463a      	mov	r2, r7
 80183ce:	4603      	mov	r3, r0
 80183d0:	4648      	mov	r0, r9
 80183d2:	f7ff ff73 	bl	80182bc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80183d6:	6823      	ldr	r3, [r4, #0]
 80183d8:	9a03      	ldr	r2, [sp, #12]
 80183da:	4546      	cmp	r6, r8
 80183dc:	441a      	add	r2, r3
 80183de:	fb92 f3f5 	sdiv	r3, r2, r5
 80183e2:	4418      	add	r0, r3
 80183e4:	fb05 2313 	mls	r3, r5, r3, r2
 80183e8:	bf18      	it	ne
 80183ea:	4240      	negne	r0, r0
 80183ec:	1c72      	adds	r2, r6, #1
 80183ee:	6023      	str	r3, [r4, #0]
 80183f0:	d105      	bne.n	80183fe <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	f1c3 0200 	rsb	r2, r3, #0
 80183f8:	db0b      	blt.n	8018412 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80183fa:	6022      	str	r2, [r4, #0]
 80183fc:	e006      	b.n	801840c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80183fe:	2e01      	cmp	r6, #1
 8018400:	d104      	bne.n	801840c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018402:	2b00      	cmp	r3, #0
 8018404:	da02      	bge.n	801840c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018406:	442b      	add	r3, r5
 8018408:	3801      	subs	r0, #1
 801840a:	6023      	str	r3, [r4, #0]
 801840c:	b005      	add	sp, #20
 801840e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018412:	3801      	subs	r0, #1
 8018414:	1b52      	subs	r2, r2, r5
 8018416:	e7f0      	b.n	80183fa <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08018418 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8018418:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801841c:	4c1c      	ldr	r4, [pc, #112]	@ (8018490 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801841e:	4605      	mov	r5, r0
 8018420:	69a3      	ldr	r3, [r4, #24]
 8018422:	6807      	ldr	r7, [r0, #0]
 8018424:	b92b      	cbnz	r3, 8018432 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8018426:	6840      	ldr	r0, [r0, #4]
 8018428:	e9c5 7000 	strd	r7, r0, [r5]
 801842c:	b004      	add	sp, #16
 801842e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018432:	f04f 0802 	mov.w	r8, #2
 8018436:	fb93 f1f8 	sdiv	r1, r3, r8
 801843a:	68a2      	ldr	r2, [r4, #8]
 801843c:	ae04      	add	r6, sp, #16
 801843e:	440a      	add	r2, r1
 8018440:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018444:	69e1      	ldr	r1, [r4, #28]
 8018446:	463a      	mov	r2, r7
 8018448:	9600      	str	r6, [sp, #0]
 801844a:	6820      	ldr	r0, [r4, #0]
 801844c:	f7ff ff98 	bl	8018380 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018450:	69a3      	ldr	r3, [r4, #24]
 8018452:	4607      	mov	r7, r0
 8018454:	686a      	ldr	r2, [r5, #4]
 8018456:	6a21      	ldr	r1, [r4, #32]
 8018458:	9600      	str	r6, [sp, #0]
 801845a:	6860      	ldr	r0, [r4, #4]
 801845c:	f7ff ff90 	bl	8018380 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018460:	69a3      	ldr	r3, [r4, #24]
 8018462:	6962      	ldr	r2, [r4, #20]
 8018464:	fb93 f8f8 	sdiv	r8, r3, r8
 8018468:	4442      	add	r2, r8
 801846a:	9203      	str	r2, [sp, #12]
 801846c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801846e:	682a      	ldr	r2, [r5, #0]
 8018470:	4407      	add	r7, r0
 8018472:	9600      	str	r6, [sp, #0]
 8018474:	68e0      	ldr	r0, [r4, #12]
 8018476:	f7ff ff83 	bl	8018380 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801847a:	9600      	str	r6, [sp, #0]
 801847c:	4680      	mov	r8, r0
 801847e:	69a3      	ldr	r3, [r4, #24]
 8018480:	686a      	ldr	r2, [r5, #4]
 8018482:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8018484:	6920      	ldr	r0, [r4, #16]
 8018486:	f7ff ff7b 	bl	8018380 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801848a:	4440      	add	r0, r8
 801848c:	e7cc      	b.n	8018428 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801848e:	bf00      	nop
 8018490:	2005b93c 	.word	0x2005b93c

08018494 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8018494:	4b07      	ldr	r3, [pc, #28]	@ (80184b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8018496:	781b      	ldrb	r3, [r3, #0]
 8018498:	2b01      	cmp	r3, #1
 801849a:	d109      	bne.n	80184b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801849c:	f9b1 3000 	ldrsh.w	r3, [r1]
 80184a0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80184a4:	8003      	strh	r3, [r0, #0]
 80184a6:	4b04      	ldr	r3, [pc, #16]	@ (80184b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80184a8:	881b      	ldrh	r3, [r3, #0]
 80184aa:	3b01      	subs	r3, #1
 80184ac:	1a9b      	subs	r3, r3, r2
 80184ae:	800b      	strh	r3, [r1, #0]
 80184b0:	4770      	bx	lr
 80184b2:	bf00      	nop
 80184b4:	2005b920 	.word	0x2005b920
 80184b8:	2005b91c 	.word	0x2005b91c

080184bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80184bc:	b510      	push	{r4, lr}
 80184be:	4b07      	ldr	r3, [pc, #28]	@ (80184dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80184c0:	781b      	ldrb	r3, [r3, #0]
 80184c2:	2b01      	cmp	r3, #1
 80184c4:	d108      	bne.n	80184d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80184c6:	4b06      	ldr	r3, [pc, #24]	@ (80184e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80184c8:	880c      	ldrh	r4, [r1, #0]
 80184ca:	881b      	ldrh	r3, [r3, #0]
 80184cc:	f9b0 2000 	ldrsh.w	r2, [r0]
 80184d0:	3b01      	subs	r3, #1
 80184d2:	1b1b      	subs	r3, r3, r4
 80184d4:	8003      	strh	r3, [r0, #0]
 80184d6:	800a      	strh	r2, [r1, #0]
 80184d8:	bd10      	pop	{r4, pc}
 80184da:	bf00      	nop
 80184dc:	2005b920 	.word	0x2005b920
 80184e0:	2005b91c 	.word	0x2005b91c

080184e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80184e4:	b510      	push	{r4, lr}
 80184e6:	4b0a      	ldr	r3, [pc, #40]	@ (8018510 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80184e8:	781b      	ldrb	r3, [r3, #0]
 80184ea:	2b01      	cmp	r3, #1
 80184ec:	d10e      	bne.n	801850c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80184ee:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80184f2:	8843      	ldrh	r3, [r0, #2]
 80184f4:	f9b0 4000 	ldrsh.w	r4, [r0]
 80184f8:	18ca      	adds	r2, r1, r3
 80184fa:	4b06      	ldr	r3, [pc, #24]	@ (8018514 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80184fc:	8044      	strh	r4, [r0, #2]
 80184fe:	881b      	ldrh	r3, [r3, #0]
 8018500:	1a9b      	subs	r3, r3, r2
 8018502:	8003      	strh	r3, [r0, #0]
 8018504:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018508:	8081      	strh	r1, [r0, #4]
 801850a:	80c3      	strh	r3, [r0, #6]
 801850c:	bd10      	pop	{r4, pc}
 801850e:	bf00      	nop
 8018510:	2005b920 	.word	0x2005b920
 8018514:	2005b91c 	.word	0x2005b91c

08018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8018518:	4b08      	ldr	r3, [pc, #32]	@ (801853c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801851a:	781b      	ldrb	r3, [r3, #0]
 801851c:	2b01      	cmp	r3, #1
 801851e:	d10c      	bne.n	801853a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8018520:	8803      	ldrh	r3, [r0, #0]
 8018522:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8018526:	8842      	ldrh	r2, [r0, #2]
 8018528:	8002      	strh	r2, [r0, #0]
 801852a:	185a      	adds	r2, r3, r1
 801852c:	4b04      	ldr	r3, [pc, #16]	@ (8018540 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801852e:	881b      	ldrh	r3, [r3, #0]
 8018530:	1a9b      	subs	r3, r3, r2
 8018532:	8043      	strh	r3, [r0, #2]
 8018534:	88c3      	ldrh	r3, [r0, #6]
 8018536:	80c1      	strh	r1, [r0, #6]
 8018538:	8083      	strh	r3, [r0, #4]
 801853a:	4770      	bx	lr
 801853c:	2005b920 	.word	0x2005b920
 8018540:	2005b91c 	.word	0x2005b91c

08018544 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018544:	b510      	push	{r4, lr}
 8018546:	4b07      	ldr	r3, [pc, #28]	@ (8018564 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8018548:	781b      	ldrb	r3, [r3, #0]
 801854a:	2b01      	cmp	r3, #1
 801854c:	d108      	bne.n	8018560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801854e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018552:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018556:	8003      	strh	r3, [r0, #0]
 8018558:	8893      	ldrh	r3, [r2, #4]
 801855a:	3b01      	subs	r3, #1
 801855c:	1b1b      	subs	r3, r3, r4
 801855e:	800b      	strh	r3, [r1, #0]
 8018560:	bd10      	pop	{r4, pc}
 8018562:	bf00      	nop
 8018564:	2005b920 	.word	0x2005b920

08018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8018568:	b510      	push	{r4, lr}
 801856a:	4b0a      	ldr	r3, [pc, #40]	@ (8018594 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801856c:	460a      	mov	r2, r1
 801856e:	781b      	ldrb	r3, [r3, #0]
 8018570:	2b01      	cmp	r3, #1
 8018572:	d10d      	bne.n	8018590 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018574:	8881      	ldrh	r1, [r0, #4]
 8018576:	8803      	ldrh	r3, [r0, #0]
 8018578:	440b      	add	r3, r1
 801857a:	4601      	mov	r1, r0
 801857c:	3b01      	subs	r3, #1
 801857e:	f821 3b02 	strh.w	r3, [r1], #2
 8018582:	f7ff ffdf 	bl	8018544 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018586:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801858a:	88c2      	ldrh	r2, [r0, #6]
 801858c:	80c3      	strh	r3, [r0, #6]
 801858e:	8082      	strh	r2, [r0, #4]
 8018590:	bd10      	pop	{r4, pc}
 8018592:	bf00      	nop
 8018594:	2005b920 	.word	0x2005b920

08018598 <_ZN8touchgfx11Application13requestRedrawEv>:
 8018598:	2100      	movs	r1, #0
 801859a:	4b06      	ldr	r3, [pc, #24]	@ (80185b4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801859c:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 80185a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80185a4:	4b04      	ldr	r3, [pc, #16]	@ (80185b8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80185a6:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 80185aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80185ae:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 80185b2:	4770      	bx	lr
 80185b4:	2005b91c 	.word	0x2005b91c
 80185b8:	2005b91e 	.word	0x2005b91e

080185bc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80185bc:	4b03      	ldr	r3, [pc, #12]	@ (80185cc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80185be:	6818      	ldr	r0, [r3, #0]
 80185c0:	b110      	cbz	r0, 80185c8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80185c2:	6803      	ldr	r3, [r0, #0]
 80185c4:	699b      	ldr	r3, [r3, #24]
 80185c6:	4718      	bx	r3
 80185c8:	4770      	bx	lr
 80185ca:	bf00      	nop
 80185cc:	2005b96c 	.word	0x2005b96c

080185d0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80185d0:	4770      	bx	lr
	...

080185d4 <_ZN8touchgfx11Application4drawEv>:
 80185d4:	b507      	push	{r0, r1, r2, lr}
 80185d6:	2100      	movs	r1, #0
 80185d8:	4b08      	ldr	r3, [pc, #32]	@ (80185fc <_ZN8touchgfx11Application4drawEv+0x28>)
 80185da:	9100      	str	r1, [sp, #0]
 80185dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80185e0:	4b07      	ldr	r3, [pc, #28]	@ (8018600 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80185e2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80185e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80185ea:	4669      	mov	r1, sp
 80185ec:	f8ad 3006 	strh.w	r3, [sp, #6]
 80185f0:	6803      	ldr	r3, [r0, #0]
 80185f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80185f4:	4798      	blx	r3
 80185f6:	b003      	add	sp, #12
 80185f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80185fc:	2005b91c 	.word	0x2005b91c
 8018600:	2005b91e 	.word	0x2005b91e

08018604 <_ZN8touchgfx11Application10invalidateEv>:
 8018604:	2100      	movs	r1, #0
 8018606:	4b09      	ldr	r3, [pc, #36]	@ (801862c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8018608:	b082      	sub	sp, #8
 801860a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801860e:	4b08      	ldr	r3, [pc, #32]	@ (8018630 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8018610:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018618:	9100      	str	r1, [sp, #0]
 801861a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801861e:	6803      	ldr	r3, [r0, #0]
 8018620:	aa02      	add	r2, sp, #8
 8018622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018624:	e912 0006 	ldmdb	r2, {r1, r2}
 8018628:	b002      	add	sp, #8
 801862a:	4718      	bx	r3
 801862c:	2005b91c 	.word	0x2005b91c
 8018630:	2005b91e 	.word	0x2005b91e

08018634 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018634:	4b03      	ldr	r3, [pc, #12]	@ (8018644 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8018636:	6818      	ldr	r0, [r3, #0]
 8018638:	b110      	cbz	r0, 8018640 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801863a:	6803      	ldr	r3, [r0, #0]
 801863c:	69db      	ldr	r3, [r3, #28]
 801863e:	4718      	bx	r3
 8018640:	4770      	bx	lr
 8018642:	bf00      	nop
 8018644:	2005b96c 	.word	0x2005b96c

08018648 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018648:	4b03      	ldr	r3, [pc, #12]	@ (8018658 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801864a:	6818      	ldr	r0, [r3, #0]
 801864c:	b110      	cbz	r0, 8018654 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801864e:	6803      	ldr	r3, [r0, #0]
 8018650:	6a1b      	ldr	r3, [r3, #32]
 8018652:	4718      	bx	r3
 8018654:	4770      	bx	lr
 8018656:	bf00      	nop
 8018658:	2005b96c 	.word	0x2005b96c

0801865c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801865c:	2300      	movs	r3, #0
 801865e:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 8018662:	4770      	bx	lr

08018664 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8018664:	4b03      	ldr	r3, [pc, #12]	@ (8018674 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8018666:	6818      	ldr	r0, [r3, #0]
 8018668:	b110      	cbz	r0, 8018670 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801866a:	6803      	ldr	r3, [r0, #0]
 801866c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801866e:	4718      	bx	r3
 8018670:	4770      	bx	lr
 8018672:	bf00      	nop
 8018674:	2005b96c 	.word	0x2005b96c

08018678 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8018678:	b510      	push	{r4, lr}
 801867a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801867e:	888a      	ldrh	r2, [r1, #4]
 8018680:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018684:	4422      	add	r2, r4
 8018686:	b212      	sxth	r2, r2
 8018688:	4293      	cmp	r3, r2
 801868a:	da15      	bge.n	80186b8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801868c:	8882      	ldrh	r2, [r0, #4]
 801868e:	4413      	add	r3, r2
 8018690:	b21b      	sxth	r3, r3
 8018692:	429c      	cmp	r4, r3
 8018694:	da10      	bge.n	80186b8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018696:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801869a:	88c9      	ldrh	r1, [r1, #6]
 801869c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80186a0:	4419      	add	r1, r3
 80186a2:	b209      	sxth	r1, r1
 80186a4:	428a      	cmp	r2, r1
 80186a6:	da07      	bge.n	80186b8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80186a8:	88c0      	ldrh	r0, [r0, #6]
 80186aa:	4410      	add	r0, r2
 80186ac:	b200      	sxth	r0, r0
 80186ae:	4283      	cmp	r3, r0
 80186b0:	bfac      	ite	ge
 80186b2:	2000      	movge	r0, #0
 80186b4:	2001      	movlt	r0, #1
 80186b6:	bd10      	pop	{r4, pc}
 80186b8:	2000      	movs	r0, #0
 80186ba:	e7fc      	b.n	80186b6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080186bc <_ZN8touchgfx4Rect10restrictToEss>:
 80186bc:	f9b0 3000 	ldrsh.w	r3, [r0]
 80186c0:	b510      	push	{r4, lr}
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	da04      	bge.n	80186d0 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80186c6:	8884      	ldrh	r4, [r0, #4]
 80186c8:	4423      	add	r3, r4
 80186ca:	8083      	strh	r3, [r0, #4]
 80186cc:	2300      	movs	r3, #0
 80186ce:	8003      	strh	r3, [r0, #0]
 80186d0:	f9b0 4000 	ldrsh.w	r4, [r0]
 80186d4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80186d8:	1b09      	subs	r1, r1, r4
 80186da:	428b      	cmp	r3, r1
 80186dc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80186e0:	bfc8      	it	gt
 80186e2:	8081      	strhgt	r1, [r0, #4]
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	da04      	bge.n	80186f2 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80186e8:	88c1      	ldrh	r1, [r0, #6]
 80186ea:	440b      	add	r3, r1
 80186ec:	80c3      	strh	r3, [r0, #6]
 80186ee:	2300      	movs	r3, #0
 80186f0:	8043      	strh	r3, [r0, #2]
 80186f2:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80186f6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80186fa:	1a52      	subs	r2, r2, r1
 80186fc:	4293      	cmp	r3, r2
 80186fe:	bfc8      	it	gt
 8018700:	80c2      	strhgt	r2, [r0, #6]
 8018702:	bd10      	pop	{r4, pc}

08018704 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8018704:	b510      	push	{r4, lr}
 8018706:	460c      	mov	r4, r1
 8018708:	4b0f      	ldr	r3, [pc, #60]	@ (8018748 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801870a:	4620      	mov	r0, r4
 801870c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018710:	4b0e      	ldr	r3, [pc, #56]	@ (801874c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8018712:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018716:	f7ff ffd1 	bl	80186bc <_ZN8touchgfx4Rect10restrictToEss>
 801871a:	4b0d      	ldr	r3, [pc, #52]	@ (8018750 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801871c:	6818      	ldr	r0, [r3, #0]
 801871e:	b190      	cbz	r0, 8018746 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8018720:	6803      	ldr	r3, [r0, #0]
 8018722:	4621      	mov	r1, r4
 8018724:	689b      	ldr	r3, [r3, #8]
 8018726:	4798      	blx	r3
 8018728:	4b0a      	ldr	r3, [pc, #40]	@ (8018754 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801872a:	6818      	ldr	r0, [r3, #0]
 801872c:	b118      	cbz	r0, 8018736 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801872e:	6803      	ldr	r3, [r0, #0]
 8018730:	4621      	mov	r1, r4
 8018732:	689b      	ldr	r3, [r3, #8]
 8018734:	4798      	blx	r3
 8018736:	4b08      	ldr	r3, [pc, #32]	@ (8018758 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8018738:	4621      	mov	r1, r4
 801873a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801873e:	6818      	ldr	r0, [r3, #0]
 8018740:	6803      	ldr	r3, [r0, #0]
 8018742:	69db      	ldr	r3, [r3, #28]
 8018744:	4718      	bx	r3
 8018746:	bd10      	pop	{r4, pc}
 8018748:	2005b91e 	.word	0x2005b91e
 801874c:	2005b91c 	.word	0x2005b91c
 8018750:	2005b96c 	.word	0x2005b96c
 8018754:	2005b968 	.word	0x2005b968
 8018758:	2005b928 	.word	0x2005b928

0801875c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801875c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801875e:	4606      	mov	r6, r0
 8018760:	4608      	mov	r0, r1
 8018762:	460f      	mov	r7, r1
 8018764:	f7fb fc47 	bl	8013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018768:	b9e8      	cbnz	r0, 80187a6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801876a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801876e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8018772:	42a5      	cmp	r5, r4
 8018774:	db17      	blt.n	80187a6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018776:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801877a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801877e:	429a      	cmp	r2, r3
 8018780:	db11      	blt.n	80187a6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018782:	88b9      	ldrh	r1, [r7, #4]
 8018784:	440d      	add	r5, r1
 8018786:	88b1      	ldrh	r1, [r6, #4]
 8018788:	b22d      	sxth	r5, r5
 801878a:	440c      	add	r4, r1
 801878c:	b224      	sxth	r4, r4
 801878e:	42a5      	cmp	r5, r4
 8018790:	dc09      	bgt.n	80187a6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018792:	88f8      	ldrh	r0, [r7, #6]
 8018794:	4410      	add	r0, r2
 8018796:	88f2      	ldrh	r2, [r6, #6]
 8018798:	b200      	sxth	r0, r0
 801879a:	4413      	add	r3, r2
 801879c:	b21b      	sxth	r3, r3
 801879e:	4298      	cmp	r0, r3
 80187a0:	bfcc      	ite	gt
 80187a2:	2000      	movgt	r0, #0
 80187a4:	2001      	movle	r0, #1
 80187a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080187a8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80187a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187aa:	4604      	mov	r4, r0
 80187ac:	4608      	mov	r0, r1
 80187ae:	460d      	mov	r5, r1
 80187b0:	f7fb fc21 	bl	8013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80187b4:	b978      	cbnz	r0, 80187d6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80187b6:	4620      	mov	r0, r4
 80187b8:	f7fb fc1d 	bl	8013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80187bc:	f9b5 6000 	ldrsh.w	r6, [r5]
 80187c0:	b150      	cbz	r0, 80187d8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80187c2:	8026      	strh	r6, [r4, #0]
 80187c4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80187c8:	8063      	strh	r3, [r4, #2]
 80187ca:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80187ce:	80a3      	strh	r3, [r4, #4]
 80187d0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80187d4:	80e3      	strh	r3, [r4, #6]
 80187d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80187d8:	f9b4 1000 	ldrsh.w	r1, [r4]
 80187dc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80187e0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80187e4:	42b1      	cmp	r1, r6
 80187e6:	460f      	mov	r7, r1
 80187e8:	bfa8      	it	ge
 80187ea:	4637      	movge	r7, r6
 80187ec:	4293      	cmp	r3, r2
 80187ee:	4618      	mov	r0, r3
 80187f0:	bfa8      	it	ge
 80187f2:	4610      	movge	r0, r2
 80187f4:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80187f8:	88ed      	ldrh	r5, [r5, #6]
 80187fa:	4466      	add	r6, ip
 80187fc:	442a      	add	r2, r5
 80187fe:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8018802:	88e5      	ldrh	r5, [r4, #6]
 8018804:	4461      	add	r1, ip
 8018806:	442b      	add	r3, r5
 8018808:	b236      	sxth	r6, r6
 801880a:	b209      	sxth	r1, r1
 801880c:	b212      	sxth	r2, r2
 801880e:	b21b      	sxth	r3, r3
 8018810:	428e      	cmp	r6, r1
 8018812:	bfac      	ite	ge
 8018814:	ebc7 0106 	rsbge	r1, r7, r6
 8018818:	ebc7 0101 	rsblt	r1, r7, r1
 801881c:	429a      	cmp	r2, r3
 801881e:	bfac      	ite	ge
 8018820:	ebc0 0202 	rsbge	r2, r0, r2
 8018824:	ebc0 0203 	rsblt	r2, r0, r3
 8018828:	8027      	strh	r7, [r4, #0]
 801882a:	8060      	strh	r0, [r4, #2]
 801882c:	80a1      	strh	r1, [r4, #4]
 801882e:	80e2      	strh	r2, [r4, #6]
 8018830:	e7d1      	b.n	80187d6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08018834 <_ZN8touchgfx11Application11getInstanceEv>:
 8018834:	4b01      	ldr	r3, [pc, #4]	@ (801883c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018836:	6818      	ldr	r0, [r3, #0]
 8018838:	4770      	bx	lr
 801883a:	bf00      	nop
 801883c:	2005b97c 	.word	0x2005b97c

08018840 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8018840:	2300      	movs	r3, #0
 8018842:	b510      	push	{r4, lr}
 8018844:	4604      	mov	r4, r0
 8018846:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 801884a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801884e:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8018852:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8018856:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801885a:	429a      	cmp	r2, r3
 801885c:	d90e      	bls.n	801887c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801885e:	18e2      	adds	r2, r4, r3
 8018860:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8018864:	b122      	cbz	r2, 8018870 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8018866:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801886a:	6803      	ldr	r3, [r0, #0]
 801886c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801886e:	4798      	blx	r3
 8018870:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8018874:	3301      	adds	r3, #1
 8018876:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801887a:	e7ea      	b.n	8018852 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801887c:	bd10      	pop	{r4, pc}

0801887e <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801887e:	2300      	movs	r3, #0
 8018880:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8018884:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8018888:	30a4      	adds	r0, #164	@ 0xa4
 801888a:	f802 3b01 	strb.w	r3, [r2], #1
 801888e:	4282      	cmp	r2, r0
 8018890:	d1fb      	bne.n	801888a <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8018892:	4770      	bx	lr

08018894 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018894:	b570      	push	{r4, r5, r6, lr}
 8018896:	4c0b      	ldr	r4, [pc, #44]	@ (80188c4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8018898:	4605      	mov	r5, r0
 801889a:	6820      	ldr	r0, [r4, #0]
 801889c:	460e      	mov	r6, r1
 801889e:	b110      	cbz	r0, 80188a6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80188a0:	6803      	ldr	r3, [r0, #0]
 80188a2:	695b      	ldr	r3, [r3, #20]
 80188a4:	4798      	blx	r3
 80188a6:	1d28      	adds	r0, r5, #4
 80188a8:	f7ff ffe9 	bl	801887e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80188ac:	6026      	str	r6, [r4, #0]
 80188ae:	6833      	ldr	r3, [r6, #0]
 80188b0:	4630      	mov	r0, r6
 80188b2:	68db      	ldr	r3, [r3, #12]
 80188b4:	4798      	blx	r3
 80188b6:	682b      	ldr	r3, [r5, #0]
 80188b8:	4628      	mov	r0, r5
 80188ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80188be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80188c0:	4718      	bx	r3
 80188c2:	bf00      	nop
 80188c4:	2005b96c 	.word	0x2005b96c

080188c8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 80188c8:	2300      	movs	r3, #0
 80188ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188cc:	461a      	mov	r2, r3
 80188ce:	461c      	mov	r4, r3
 80188d0:	461d      	mov	r5, r3
 80188d2:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 80188d6:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 80188da:	459c      	cmp	ip, r3
 80188dc:	dd1a      	ble.n	8018914 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 80188de:	18c6      	adds	r6, r0, r3
 80188e0:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 80188e4:	b16e      	cbz	r6, 8018902 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 80188e6:	429a      	cmp	r2, r3
 80188e8:	d008      	beq.n	80188fc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 80188ea:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 80188ee:	fa1f fe82 	uxth.w	lr, r2
 80188f2:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 80188f6:	1887      	adds	r7, r0, r2
 80188f8:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 80188fc:	3201      	adds	r2, #1
 80188fe:	3301      	adds	r3, #1
 8018900:	e7eb      	b.n	80188da <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8018902:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8018906:	4299      	cmp	r1, r3
 8018908:	bfa8      	it	ge
 801890a:	3501      	addge	r5, #1
 801890c:	429e      	cmp	r6, r3
 801890e:	bfc8      	it	gt
 8018910:	3401      	addgt	r4, #1
 8018912:	e7f4      	b.n	80188fe <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8018914:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8018918:	1b49      	subs	r1, r1, r5
 801891a:	1b1b      	subs	r3, r3, r4
 801891c:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8018920:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8018924:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8018928:	4293      	cmp	r3, r2
 801892a:	dd03      	ble.n	8018934 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801892c:	3b01      	subs	r3, #1
 801892e:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8018932:	e7f7      	b.n	8018924 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8018934:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018938 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018938:	b570      	push	{r4, r5, r6, lr}
 801893a:	4d16      	ldr	r5, [pc, #88]	@ (8018994 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801893c:	4604      	mov	r4, r0
 801893e:	6828      	ldr	r0, [r5, #0]
 8018940:	b140      	cbz	r0, 8018954 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018942:	7a03      	ldrb	r3, [r0, #8]
 8018944:	b933      	cbnz	r3, 8018954 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018946:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801894a:	6803      	ldr	r3, [r0, #0]
 801894c:	689b      	ldr	r3, [r3, #8]
 801894e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018952:	4718      	bx	r3
 8018954:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8018958:	4e0f      	ldr	r6, [pc, #60]	@ (8018998 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801895a:	b973      	cbnz	r3, 801897a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801895c:	b168      	cbz	r0, 801897a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801895e:	7a03      	ldrb	r3, [r0, #8]
 8018960:	b15b      	cbz	r3, 801897a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018962:	6830      	ldr	r0, [r6, #0]
 8018964:	b110      	cbz	r0, 801896c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8018966:	6803      	ldr	r3, [r0, #0]
 8018968:	691b      	ldr	r3, [r3, #16]
 801896a:	4798      	blx	r3
 801896c:	6828      	ldr	r0, [r5, #0]
 801896e:	6803      	ldr	r3, [r0, #0]
 8018970:	68db      	ldr	r3, [r3, #12]
 8018972:	4798      	blx	r3
 8018974:	2301      	movs	r3, #1
 8018976:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801897a:	3404      	adds	r4, #4
 801897c:	4620      	mov	r0, r4
 801897e:	f7ff ff5f 	bl	8018840 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8018982:	4620      	mov	r0, r4
 8018984:	f7ff ffa0 	bl	80188c8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8018988:	6830      	ldr	r0, [r6, #0]
 801898a:	b110      	cbz	r0, 8018992 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801898c:	6803      	ldr	r3, [r0, #0]
 801898e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018990:	e7dd      	b.n	801894e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8018992:	bd70      	pop	{r4, r5, r6, pc}
 8018994:	2005b970 	.word	0x2005b970
 8018998:	2005b96c 	.word	0x2005b96c

0801899c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801899c:	4603      	mov	r3, r0
 801899e:	2200      	movs	r2, #0
 80189a0:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 80189a4:	801a      	strh	r2, [r3, #0]
 80189a6:	805a      	strh	r2, [r3, #2]
 80189a8:	809a      	strh	r2, [r3, #4]
 80189aa:	80da      	strh	r2, [r3, #6]
 80189ac:	3308      	adds	r3, #8
 80189ae:	428b      	cmp	r3, r1
 80189b0:	d1f8      	bne.n	80189a4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80189b2:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 80189b6:	4770      	bx	lr

080189b8 <_ZN8touchgfx11ApplicationC1Ev>:
 80189b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189ba:	4606      	mov	r6, r0
 80189bc:	4604      	mov	r4, r0
 80189be:	2500      	movs	r5, #0
 80189c0:	4b1b      	ldr	r3, [pc, #108]	@ (8018a30 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80189c2:	22a8      	movs	r2, #168	@ 0xa8
 80189c4:	f846 3b04 	str.w	r3, [r6], #4
 80189c8:	2100      	movs	r1, #0
 80189ca:	4630      	mov	r0, r6
 80189cc:	f013 fb00 	bl	802bfd0 <memset>
 80189d0:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 80189d4:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80189d8:	f7ff ffe0 	bl	801899c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80189dc:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 80189e0:	f7ff ffdc 	bl	801899c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80189e4:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 80189e8:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 80189ec:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 80189f0:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 80189f4:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 80189f8:	490e      	ldr	r1, [pc, #56]	@ (8018a34 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80189fa:	480f      	ldr	r0, [pc, #60]	@ (8018a38 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80189fc:	f011 fa76 	bl	8029eec <CRC_Lock>
 8018a00:	4f0e      	ldr	r7, [pc, #56]	@ (8018a3c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8018a02:	4b0f      	ldr	r3, [pc, #60]	@ (8018a40 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8018a04:	b158      	cbz	r0, 8018a1e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8018a06:	801d      	strh	r5, [r3, #0]
 8018a08:	2300      	movs	r3, #0
 8018a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8018a44 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8018a0c:	4630      	mov	r0, r6
 8018a0e:	6013      	str	r3, [r2, #0]
 8018a10:	4a0d      	ldr	r2, [pc, #52]	@ (8018a48 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8018a12:	603b      	str	r3, [r7, #0]
 8018a14:	6013      	str	r3, [r2, #0]
 8018a16:	f7ff ff32 	bl	801887e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8018a1a:	4620      	mov	r0, r4
 8018a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8018a22:	2002      	movs	r0, #2
 8018a24:	801a      	strh	r2, [r3, #0]
 8018a26:	6038      	str	r0, [r7, #0]
 8018a28:	f001 ff30 	bl	801a88c <_ZN8touchgfx6Screen4drawEv>
 8018a2c:	e7ec      	b.n	8018a08 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8018a2e:	bf00      	nop
 8018a30:	0802e6b8 	.word	0x0802e6b8
 8018a34:	b5e8b5cd 	.word	0xb5e8b5cd
 8018a38:	f407a5c2 	.word	0xf407a5c2
 8018a3c:	2005b96c 	.word	0x2005b96c
 8018a40:	2000001c 	.word	0x2000001c
 8018a44:	2005b97c 	.word	0x2005b97c
 8018a48:	2005b970 	.word	0x2005b970

08018a4c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018a4c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8018a50:	b510      	push	{r4, lr}
 8018a52:	3b01      	subs	r3, #1
 8018a54:	b29b      	uxth	r3, r3
 8018a56:	428b      	cmp	r3, r1
 8018a58:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8018a5c:	d908      	bls.n	8018a70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8018a5e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8018a62:	681a      	ldr	r2, [r3, #0]
 8018a64:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8018a68:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8018a6c:	685a      	ldr	r2, [r3, #4]
 8018a6e:	6062      	str	r2, [r4, #4]
 8018a70:	bd10      	pop	{r4, pc}
	...

08018a74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a78:	4b92      	ldr	r3, [pc, #584]	@ (8018cc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x250>)
 8018a7a:	b08f      	sub	sp, #60	@ 0x3c
 8018a7c:	ac0a      	add	r4, sp, #40	@ 0x28
 8018a7e:	e884 0006 	stmia.w	r4, {r1, r2}
 8018a82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018a86:	4b90      	ldr	r3, [pc, #576]	@ (8018cc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x254>)
 8018a88:	4683      	mov	fp, r0
 8018a8a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018a8e:	4620      	mov	r0, r4
 8018a90:	f7ff fe14 	bl	80186bc <_ZN8touchgfx4Rect10restrictToEss>
 8018a94:	4620      	mov	r0, r4
 8018a96:	f7fb faae 	bl	8013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018a9a:	2800      	cmp	r0, #0
 8018a9c:	d170      	bne.n	8018b80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8018a9e:	4b8b      	ldr	r3, [pc, #556]	@ (8018ccc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8018aa6:	2b02      	cmp	r3, #2
 8018aa8:	d06a      	beq.n	8018b80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8018aaa:	9403      	str	r4, [sp, #12]
 8018aac:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8018ab0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8018ab4:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8018ab8:	35a4      	adds	r5, #164	@ 0xa4
 8018aba:	9301      	str	r3, [sp, #4]
 8018abc:	b15c      	cbz	r4, 8018ad6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8018abe:	4629      	mov	r1, r5
 8018ac0:	9803      	ldr	r0, [sp, #12]
 8018ac2:	f7ff fe4b 	bl	801875c <_ZNK8touchgfx4Rect8includesERKS0_>
 8018ac6:	3c01      	subs	r4, #1
 8018ac8:	b118      	cbz	r0, 8018ad2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8018aca:	b2a1      	uxth	r1, r4
 8018acc:	9801      	ldr	r0, [sp, #4]
 8018ace:	f7ff ffbd 	bl	8018a4c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018ad2:	3d08      	subs	r5, #8
 8018ad4:	e7f2      	b.n	8018abc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8018ad6:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8018ada:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018ade:	9302      	str	r3, [sp, #8]
 8018ae0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8018ae4:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8018ae8:	f8cd a010 	str.w	sl, [sp, #16]
 8018aec:	9306      	str	r3, [sp, #24]
 8018aee:	445c      	add	r4, fp
 8018af0:	2500      	movs	r5, #0
 8018af2:	4626      	mov	r6, r4
 8018af4:	462f      	mov	r7, r5
 8018af6:	f8cd a014 	str.w	sl, [sp, #20]
 8018afa:	9b05      	ldr	r3, [sp, #20]
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d073      	beq.n	8018be8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x174>
 8018b00:	9903      	ldr	r1, [sp, #12]
 8018b02:	4630      	mov	r0, r6
 8018b04:	f7ff fdb8 	bl	8018678 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018b08:	b350      	cbz	r0, 8018b60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8018b0a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8018b0e:	f9b6 c000 	ldrsh.w	ip, [r6]
 8018b12:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8018b16:	45e6      	cmp	lr, ip
 8018b18:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8018b1c:	db33      	blt.n	8018b86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 8018b1e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8018b22:	88b3      	ldrh	r3, [r6, #4]
 8018b24:	4472      	add	r2, lr
 8018b26:	4463      	add	r3, ip
 8018b28:	b212      	sxth	r2, r2
 8018b2a:	b21b      	sxth	r3, r3
 8018b2c:	429a      	cmp	r2, r3
 8018b2e:	dc2a      	bgt.n	8018b86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 8018b30:	88f3      	ldrh	r3, [r6, #6]
 8018b32:	fa1f f289 	uxth.w	r2, r9
 8018b36:	4413      	add	r3, r2
 8018b38:	b29b      	uxth	r3, r3
 8018b3a:	45c8      	cmp	r8, r9
 8018b3c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8018b40:	fa1f fc88 	uxth.w	ip, r8
 8018b44:	fa0f fe83 	sxth.w	lr, r3
 8018b48:	db0f      	blt.n	8018b6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf6>
 8018b4a:	eba3 030c 	sub.w	r3, r3, ip
 8018b4e:	1ac9      	subs	r1, r1, r3
 8018b50:	b209      	sxth	r1, r1
 8018b52:	2900      	cmp	r1, #0
 8018b54:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8018b58:	dd12      	ble.n	8018b80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8018b5a:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8018b5e:	4605      	mov	r5, r0
 8018b60:	9b05      	ldr	r3, [sp, #20]
 8018b62:	3e08      	subs	r6, #8
 8018b64:	3b01      	subs	r3, #1
 8018b66:	9305      	str	r3, [sp, #20]
 8018b68:	e7c7      	b.n	8018afa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x86>
 8018b6a:	4461      	add	r1, ip
 8018b6c:	b209      	sxth	r1, r1
 8018b6e:	4571      	cmp	r1, lr
 8018b70:	dc38      	bgt.n	8018be4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8018b72:	eba2 020c 	sub.w	r2, r2, ip
 8018b76:	b212      	sxth	r2, r2
 8018b78:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8018b7c:	2a00      	cmp	r2, #0
 8018b7e:	dcee      	bgt.n	8018b5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8018b80:	b00f      	add	sp, #60	@ 0x3c
 8018b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b86:	45c8      	cmp	r8, r9
 8018b88:	db2c      	blt.n	8018be4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8018b8a:	88f3      	ldrh	r3, [r6, #6]
 8018b8c:	4499      	add	r9, r3
 8018b8e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8018b92:	fa0f f989 	sxth.w	r9, r9
 8018b96:	4498      	add	r8, r3
 8018b98:	fa0f f888 	sxth.w	r8, r8
 8018b9c:	45c1      	cmp	r9, r8
 8018b9e:	db21      	blt.n	8018be4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8018ba0:	88b3      	ldrh	r3, [r6, #4]
 8018ba2:	fa1f f28c 	uxth.w	r2, ip
 8018ba6:	4413      	add	r3, r2
 8018ba8:	b29b      	uxth	r3, r3
 8018baa:	45e6      	cmp	lr, ip
 8018bac:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8018bb0:	fa1f f88e 	uxth.w	r8, lr
 8018bb4:	fa0f f983 	sxth.w	r9, r3
 8018bb8:	db0a      	blt.n	8018bd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15c>
 8018bba:	eba3 0308 	sub.w	r3, r3, r8
 8018bbe:	1ac9      	subs	r1, r1, r3
 8018bc0:	b209      	sxth	r1, r1
 8018bc2:	2900      	cmp	r1, #0
 8018bc4:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8018bc8:	ddda      	ble.n	8018b80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8018bca:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8018bce:	e7c6      	b.n	8018b5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8018bd0:	4441      	add	r1, r8
 8018bd2:	b209      	sxth	r1, r1
 8018bd4:	4549      	cmp	r1, r9
 8018bd6:	dc05      	bgt.n	8018be4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8018bd8:	eba2 0208 	sub.w	r2, r2, r8
 8018bdc:	b212      	sxth	r2, r2
 8018bde:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8018be2:	e7cb      	b.n	8018b7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x108>
 8018be4:	4607      	mov	r7, r0
 8018be6:	e7bb      	b.n	8018b60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8018be8:	2d00      	cmp	r5, #0
 8018bea:	d181      	bne.n	8018af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7c>
 8018bec:	2f00      	cmp	r7, #0
 8018bee:	f000 81e0 	beq.w	8018fb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 8018bf2:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8018bf6:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8018bfa:	b2b3      	uxth	r3, r6
 8018bfc:	9305      	str	r3, [sp, #20]
 8018bfe:	9a05      	ldr	r2, [sp, #20]
 8018c00:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8018c04:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8018c08:	4413      	add	r3, r2
 8018c0a:	b2ba      	uxth	r2, r7
 8018c0c:	4492      	add	sl, r2
 8018c0e:	b29b      	uxth	r3, r3
 8018c10:	fa1f fa8a 	uxth.w	sl, sl
 8018c14:	fa0f f883 	sxth.w	r8, r3
 8018c18:	fa0f f98a 	sxth.w	r9, sl
 8018c1c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8018c20:	9b04      	ldr	r3, [sp, #16]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d054      	beq.n	8018cd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>
 8018c26:	9903      	ldr	r1, [sp, #12]
 8018c28:	4620      	mov	r0, r4
 8018c2a:	f7ff fd25 	bl	8018678 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018c2e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018c32:	b1c0      	cbz	r0, 8018c66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8018c34:	f9b4 e000 	ldrsh.w	lr, [r4]
 8018c38:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018c3c:	4576      	cmp	r6, lr
 8018c3e:	dc22      	bgt.n	8018c86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 8018c40:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8018c44:	44f4      	add	ip, lr
 8018c46:	fa0f fc8c 	sxth.w	ip, ip
 8018c4a:	45e0      	cmp	r8, ip
 8018c4c:	db1b      	blt.n	8018c86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 8018c4e:	428f      	cmp	r7, r1
 8018c50:	fa1f fc81 	uxth.w	ip, r1
 8018c54:	88e1      	ldrh	r1, [r4, #6]
 8018c56:	dc0d      	bgt.n	8018c74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x200>
 8018c58:	ebaa 0c0c 	sub.w	ip, sl, ip
 8018c5c:	eba1 010c 	sub.w	r1, r1, ip
 8018c60:	f8a4 9002 	strh.w	r9, [r4, #2]
 8018c64:	80e1      	strh	r1, [r4, #6]
 8018c66:	4628      	mov	r0, r5
 8018c68:	9904      	ldr	r1, [sp, #16]
 8018c6a:	3c08      	subs	r4, #8
 8018c6c:	3901      	subs	r1, #1
 8018c6e:	9104      	str	r1, [sp, #16]
 8018c70:	4605      	mov	r5, r0
 8018c72:	e7d3      	b.n	8018c1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a8>
 8018c74:	4461      	add	r1, ip
 8018c76:	b209      	sxth	r1, r1
 8018c78:	4549      	cmp	r1, r9
 8018c7a:	dcf5      	bgt.n	8018c68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8018c7c:	eba2 0c0c 	sub.w	ip, r2, ip
 8018c80:	f8a4 c006 	strh.w	ip, [r4, #6]
 8018c84:	e7ef      	b.n	8018c66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8018c86:	428f      	cmp	r7, r1
 8018c88:	dcee      	bgt.n	8018c68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8018c8a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8018c8e:	4461      	add	r1, ip
 8018c90:	b209      	sxth	r1, r1
 8018c92:	4589      	cmp	r9, r1
 8018c94:	dbe8      	blt.n	8018c68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8018c96:	4576      	cmp	r6, lr
 8018c98:	fa1f fc8e 	uxth.w	ip, lr
 8018c9c:	88a1      	ldrh	r1, [r4, #4]
 8018c9e:	dc07      	bgt.n	8018cb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x23c>
 8018ca0:	eba3 0c0c 	sub.w	ip, r3, ip
 8018ca4:	eba1 010c 	sub.w	r1, r1, ip
 8018ca8:	f8a4 8000 	strh.w	r8, [r4]
 8018cac:	80a1      	strh	r1, [r4, #4]
 8018cae:	e7da      	b.n	8018c66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8018cb0:	4461      	add	r1, ip
 8018cb2:	b209      	sxth	r1, r1
 8018cb4:	4588      	cmp	r8, r1
 8018cb6:	dbd7      	blt.n	8018c68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8018cb8:	9905      	ldr	r1, [sp, #20]
 8018cba:	eba1 0c0c 	sub.w	ip, r1, ip
 8018cbe:	f8a4 c004 	strh.w	ip, [r4, #4]
 8018cc2:	e7d0      	b.n	8018c66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8018cc4:	2005b91e 	.word	0x2005b91e
 8018cc8:	2005b91c 	.word	0x2005b91c
 8018ccc:	2005b928 	.word	0x2005b928
 8018cd0:	2d00      	cmp	r5, #0
 8018cd2:	f000 816e 	beq.w	8018fb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 8018cd6:	9b06      	ldr	r3, [sp, #24]
 8018cd8:	445b      	add	r3, fp
 8018cda:	461c      	mov	r4, r3
 8018cdc:	9b02      	ldr	r3, [sp, #8]
 8018cde:	3301      	adds	r3, #1
 8018ce0:	f000 8167 	beq.w	8018fb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 8018ce4:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8018ce8:	4629      	mov	r1, r5
 8018cea:	9803      	ldr	r0, [sp, #12]
 8018cec:	f7ff fd36 	bl	801875c <_ZNK8touchgfx4Rect8includesERKS0_>
 8018cf0:	b120      	cbz	r0, 8018cfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x288>
 8018cf2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8018cf6:	9801      	ldr	r0, [sp, #4]
 8018cf8:	f7ff fea8 	bl	8018a4c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018cfc:	9903      	ldr	r1, [sp, #12]
 8018cfe:	4628      	mov	r0, r5
 8018d00:	f7ff fcba 	bl	8018678 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018d04:	2800      	cmp	r0, #0
 8018d06:	f000 809c 	beq.w	8018e42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 8018d0a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8018d0e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8018d12:	fa1f f189 	uxth.w	r1, r9
 8018d16:	eb01 0c03 	add.w	ip, r1, r3
 8018d1a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8018d1e:	fa1f fa8c 	uxth.w	sl, ip
 8018d22:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8018d26:	9309      	str	r3, [sp, #36]	@ 0x24
 8018d28:	b283      	uxth	r3, r0
 8018d2a:	eb03 050c 	add.w	r5, r3, ip
 8018d2e:	b2ad      	uxth	r5, r5
 8018d30:	9505      	str	r5, [sp, #20]
 8018d32:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8018d36:	4548      	cmp	r0, r9
 8018d38:	9504      	str	r5, [sp, #16]
 8018d3a:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8018d3e:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8018d42:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8018d46:	f340 8099 	ble.w	8018e7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 8018d4a:	1a5b      	subs	r3, r3, r1
 8018d4c:	b29b      	uxth	r3, r3
 8018d4e:	4596      	cmp	lr, r2
 8018d50:	fa0f f08a 	sxth.w	r0, sl
 8018d54:	b21e      	sxth	r6, r3
 8018d56:	dd2e      	ble.n	8018db6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x342>
 8018d58:	9f02      	ldr	r7, [sp, #8]
 8018d5a:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8018d5e:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8018d62:	9f04      	ldr	r7, [sp, #16]
 8018d64:	fa1f fe8e 	uxth.w	lr, lr
 8018d68:	1a3f      	subs	r7, r7, r0
 8018d6a:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8018d6e:	b292      	uxth	r2, r2
 8018d70:	ebae 0102 	sub.w	r1, lr, r2
 8018d74:	44a6      	add	lr, r4
 8018d76:	4402      	add	r2, r0
 8018d78:	b289      	uxth	r1, r1
 8018d7a:	fa0f fe8e 	sxth.w	lr, lr
 8018d7e:	b212      	sxth	r2, r2
 8018d80:	b20d      	sxth	r5, r1
 8018d82:	ebae 0202 	sub.w	r2, lr, r2
 8018d86:	436f      	muls	r7, r5
 8018d88:	4372      	muls	r2, r6
 8018d8a:	4297      	cmp	r7, r2
 8018d8c:	db09      	blt.n	8018da2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32e>
 8018d8e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8018d92:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8018d96:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8018d9a:	449c      	add	ip, r3
 8018d9c:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8018da0:	e684      	b.n	8018aac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8018da2:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8018da6:	4421      	add	r1, r4
 8018da8:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8018dac:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8018db0:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8018db4:	e67a      	b.n	8018aac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8018db6:	9f04      	ldr	r7, [sp, #16]
 8018db8:	42b8      	cmp	r0, r7
 8018dba:	da27      	bge.n	8018e0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x398>
 8018dbc:	9902      	ldr	r1, [sp, #8]
 8018dbe:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8018dc2:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8018dc6:	eb05 010e 	add.w	r1, r5, lr
 8018dca:	fa1f f881 	uxth.w	r8, r1
 8018dce:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8018dd2:	fa0f f988 	sxth.w	r9, r8
 8018dd6:	4411      	add	r1, r2
 8018dd8:	eba1 0108 	sub.w	r1, r1, r8
 8018ddc:	b289      	uxth	r1, r1
 8018dde:	fa0f f881 	sxth.w	r8, r1
 8018de2:	eba2 020e 	sub.w	r2, r2, lr
 8018de6:	1a3f      	subs	r7, r7, r0
 8018de8:	4372      	muls	r2, r6
 8018dea:	fb08 f707 	mul.w	r7, r8, r7
 8018dee:	42ba      	cmp	r2, r7
 8018df0:	dc06      	bgt.n	8018e00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38c>
 8018df2:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8018df6:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8018dfa:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8018dfe:	e7ca      	b.n	8018d96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8018e00:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8018e04:	4429      	add	r1, r5
 8018e06:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8018e0a:	e64f      	b.n	8018aac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8018e0c:	9805      	ldr	r0, [sp, #20]
 8018e0e:	2d06      	cmp	r5, #6
 8018e10:	ebaa 0000 	sub.w	r0, sl, r0
 8018e14:	b280      	uxth	r0, r0
 8018e16:	fa0f fe80 	sxth.w	lr, r0
 8018e1a:	d817      	bhi.n	8018e4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d8>
 8018e1c:	9b04      	ldr	r3, [sp, #16]
 8018e1e:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8018e22:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8018e26:	1c6b      	adds	r3, r5, #1
 8018e28:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8018e2c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8018e30:	9b01      	ldr	r3, [sp, #4]
 8018e32:	9801      	ldr	r0, [sp, #4]
 8018e34:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018e38:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8018e3c:	805a      	strh	r2, [r3, #2]
 8018e3e:	809e      	strh	r6, [r3, #4]
 8018e40:	80d9      	strh	r1, [r3, #6]
 8018e42:	9b02      	ldr	r3, [sp, #8]
 8018e44:	3c08      	subs	r4, #8
 8018e46:	3b01      	subs	r3, #1
 8018e48:	9302      	str	r3, [sp, #8]
 8018e4a:	e747      	b.n	8018cdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x268>
 8018e4c:	9a02      	ldr	r2, [sp, #8]
 8018e4e:	45b6      	cmp	lr, r6
 8018e50:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8018e54:	db0d      	blt.n	8018e72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fe>
 8018e56:	449c      	add	ip, r3
 8018e58:	fa1f fc8c 	uxth.w	ip, ip
 8018e5c:	445a      	add	r2, fp
 8018e5e:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8018e62:	448c      	add	ip, r1
 8018e64:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8018e68:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8018e6c:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8018e70:	e61c      	b.n	8018aac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8018e72:	445a      	add	r2, fp
 8018e74:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8018e78:	4484      	add	ip, r0
 8018e7a:	e78f      	b.n	8018d9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8018e7c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8018e80:	fa1f f18e 	uxth.w	r1, lr
 8018e84:	eb01 0806 	add.w	r8, r1, r6
 8018e88:	b293      	uxth	r3, r2
 8018e8a:	fa1f f888 	uxth.w	r8, r8
 8018e8e:	9306      	str	r3, [sp, #24]
 8018e90:	fa0f f388 	sxth.w	r3, r8
 8018e94:	9307      	str	r3, [sp, #28]
 8018e96:	9f06      	ldr	r7, [sp, #24]
 8018e98:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8018e9c:	4596      	cmp	lr, r2
 8018e9e:	443b      	add	r3, r7
 8018ea0:	b29b      	uxth	r3, r3
 8018ea2:	9308      	str	r3, [sp, #32]
 8018ea4:	da24      	bge.n	8018ef0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8018ea6:	9905      	ldr	r1, [sp, #20]
 8018ea8:	eba3 0308 	sub.w	r3, r3, r8
 8018eac:	ebaa 0401 	sub.w	r4, sl, r1
 8018eb0:	b2a4      	uxth	r4, r4
 8018eb2:	b29b      	uxth	r3, r3
 8018eb4:	b225      	sxth	r5, r4
 8018eb6:	b219      	sxth	r1, r3
 8018eb8:	eba2 020e 	sub.w	r2, r2, lr
 8018ebc:	eba9 0000 	sub.w	r0, r9, r0
 8018ec0:	436a      	muls	r2, r5
 8018ec2:	4348      	muls	r0, r1
 8018ec4:	4282      	cmp	r2, r0
 8018ec6:	9a02      	ldr	r2, [sp, #8]
 8018ec8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8018ecc:	445a      	add	r2, fp
 8018ece:	dc06      	bgt.n	8018ede <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8018ed0:	9b07      	ldr	r3, [sp, #28]
 8018ed2:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8018ed6:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8018eda:	44a4      	add	ip, r4
 8018edc:	e75e      	b.n	8018d9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8018ede:	9904      	ldr	r1, [sp, #16]
 8018ee0:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8018ee4:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8018ee8:	4433      	add	r3, r6
 8018eea:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8018eee:	e5dd      	b.n	8018aac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8018ef0:	9f06      	ldr	r7, [sp, #24]
 8018ef2:	9b04      	ldr	r3, [sp, #16]
 8018ef4:	1bc9      	subs	r1, r1, r7
 8018ef6:	fa0f f78a 	sxth.w	r7, sl
 8018efa:	b289      	uxth	r1, r1
 8018efc:	429f      	cmp	r7, r3
 8018efe:	fa0f fe81 	sxth.w	lr, r1
 8018f02:	dd24      	ble.n	8018f4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4da>
 8018f04:	9a05      	ldr	r2, [sp, #20]
 8018f06:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018f0a:	ebaa 0202 	sub.w	r2, sl, r2
 8018f0e:	9d07      	ldr	r5, [sp, #28]
 8018f10:	b292      	uxth	r2, r2
 8018f12:	eba5 0a03 	sub.w	sl, r5, r3
 8018f16:	b214      	sxth	r4, r2
 8018f18:	eba9 0000 	sub.w	r0, r9, r0
 8018f1c:	fb0e f000 	mul.w	r0, lr, r0
 8018f20:	fb04 fa0a 	mul.w	sl, r4, sl
 8018f24:	9b02      	ldr	r3, [sp, #8]
 8018f26:	4550      	cmp	r0, sl
 8018f28:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8018f2c:	445b      	add	r3, fp
 8018f2e:	db03      	blt.n	8018f38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 8018f30:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8018f34:	4494      	add	ip, r2
 8018f36:	e731      	b.n	8018d9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8018f38:	9a04      	ldr	r2, [sp, #16]
 8018f3a:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8018f3e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8018f42:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8018f46:	4431      	add	r1, r6
 8018f48:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8018f4c:	e75b      	b.n	8018e06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x392>
 8018f4e:	9b08      	ldr	r3, [sp, #32]
 8018f50:	2d06      	cmp	r5, #6
 8018f52:	eba3 0308 	sub.w	r3, r3, r8
 8018f56:	b29b      	uxth	r3, r3
 8018f58:	b218      	sxth	r0, r3
 8018f5a:	d813      	bhi.n	8018f84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x510>
 8018f5c:	9b07      	ldr	r3, [sp, #28]
 8018f5e:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8018f62:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8018f66:	1c6b      	adds	r3, r5, #1
 8018f68:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8018f6c:	9b01      	ldr	r3, [sp, #4]
 8018f6e:	9901      	ldr	r1, [sp, #4]
 8018f70:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018f74:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8018f78:	805a      	strh	r2, [r3, #2]
 8018f7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018f7c:	f8a3 e006 	strh.w	lr, [r3, #6]
 8018f80:	809a      	strh	r2, [r3, #4]
 8018f82:	e75e      	b.n	8018e42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 8018f84:	9c02      	ldr	r4, [sp, #8]
 8018f86:	4570      	cmp	r0, lr
 8018f88:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8018f8c:	db0d      	blt.n	8018faa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x536>
 8018f8e:	4431      	add	r1, r6
 8018f90:	9b06      	ldr	r3, [sp, #24]
 8018f92:	b289      	uxth	r1, r1
 8018f94:	445c      	add	r4, fp
 8018f96:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8018f9a:	4419      	add	r1, r3
 8018f9c:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8018fa0:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8018fa4:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8018fa8:	e580      	b.n	8018aac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8018faa:	445c      	add	r4, fp
 8018fac:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8018fb0:	e79a      	b.n	8018ee8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8018fb2:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8018fb6:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8018fba:	1e65      	subs	r5, r4, #1
 8018fbc:	b2ad      	uxth	r5, r5
 8018fbe:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8018fc2:	42b5      	cmp	r5, r6
 8018fc4:	d044      	beq.n	8019050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 8018fc6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8018fca:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8018fce:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8018fd2:	4282      	cmp	r2, r0
 8018fd4:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8018fd8:	d11f      	bne.n	801901a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a6>
 8018fda:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8018fde:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8018fe2:	459c      	cmp	ip, r3
 8018fe4:	d119      	bne.n	801901a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a6>
 8018fe6:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8018fea:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8018fee:	19d8      	adds	r0, r3, r7
 8018ff0:	b200      	sxth	r0, r0
 8018ff2:	4288      	cmp	r0, r1
 8018ff4:	d109      	bne.n	801900a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 8018ff6:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8018ffa:	4413      	add	r3, r2
 8018ffc:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8019000:	4629      	mov	r1, r5
 8019002:	9801      	ldr	r0, [sp, #4]
 8019004:	f7ff fd22 	bl	8018a4c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019008:	e003      	b.n	8019012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59e>
 801900a:	4411      	add	r1, r2
 801900c:	b209      	sxth	r1, r1
 801900e:	42b9      	cmp	r1, r7
 8019010:	d0f3      	beq.n	8018ffa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 8019012:	3d01      	subs	r5, #1
 8019014:	b2ad      	uxth	r5, r5
 8019016:	3c08      	subs	r4, #8
 8019018:	e7d3      	b.n	8018fc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 801901a:	42b9      	cmp	r1, r7
 801901c:	d1f9      	bne.n	8019012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59e>
 801901e:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8019022:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8019026:	4299      	cmp	r1, r3
 8019028:	d1f3      	bne.n	8019012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59e>
 801902a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801902e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8019032:	181f      	adds	r7, r3, r0
 8019034:	b23f      	sxth	r7, r7
 8019036:	42ba      	cmp	r2, r7
 8019038:	d105      	bne.n	8019046 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5d2>
 801903a:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801903e:	440b      	add	r3, r1
 8019040:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8019044:	e7dc      	b.n	8019000 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8019046:	440a      	add	r2, r1
 8019048:	b212      	sxth	r2, r2
 801904a:	4290      	cmp	r0, r2
 801904c:	d1e1      	bne.n	8019012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59e>
 801904e:	e7f6      	b.n	801903e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8019050:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8019054:	2e07      	cmp	r6, #7
 8019056:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801905a:	d812      	bhi.n	8019082 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60e>
 801905c:	1c75      	adds	r5, r6, #1
 801905e:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8019062:	9d01      	ldr	r5, [sp, #4]
 8019064:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8019068:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801906c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8019070:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8019074:	442c      	add	r4, r5
 8019076:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801907a:	8061      	strh	r1, [r4, #2]
 801907c:	80a2      	strh	r2, [r4, #4]
 801907e:	80e3      	strh	r3, [r4, #6]
 8019080:	e57e      	b.n	8018b80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8019082:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8019086:	f04f 37ff 	mov.w	r7, #4294967295
 801908a:	2500      	movs	r5, #0
 801908c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8019090:	3e01      	subs	r6, #1
 8019092:	445c      	add	r4, fp
 8019094:	9305      	str	r3, [sp, #20]
 8019096:	1e72      	subs	r2, r6, #1
 8019098:	4691      	mov	r9, r2
 801909a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801909e:	9302      	str	r3, [sp, #8]
 80190a0:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 80190a4:	9304      	str	r3, [sp, #16]
 80190a6:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 80190aa:	f1b9 3fff 	cmp.w	r9, #4294967295
 80190ae:	bf16      	itet	ne
 80190b0:	9905      	ldrne	r1, [sp, #20]
 80190b2:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80190b6:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80190ba:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80190be:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80190c2:	6818      	ldr	r0, [r3, #0]
 80190c4:	fb18 f801 	smulbb	r8, r8, r1
 80190c8:	6859      	ldr	r1, [r3, #4]
 80190ca:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80190ce:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80190d2:	4671      	mov	r1, lr
 80190d4:	a80c      	add	r0, sp, #48	@ 0x30
 80190d6:	9207      	str	r2, [sp, #28]
 80190d8:	9306      	str	r3, [sp, #24]
 80190da:	f7ff fb65 	bl	80187a8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80190de:	f04f 0c08 	mov.w	ip, #8
 80190e2:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 80190e6:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 80190ea:	9b04      	ldr	r3, [sp, #16]
 80190ec:	9a02      	ldr	r2, [sp, #8]
 80190ee:	fb10 f001 	smulbb	r0, r0, r1
 80190f2:	fb02 8803 	mla	r8, r2, r3, r8
 80190f6:	eba0 0108 	sub.w	r1, r0, r8
 80190fa:	fb90 f0fc 	sdiv	r0, r0, ip
 80190fe:	4288      	cmp	r0, r1
 8019100:	dc20      	bgt.n	8019144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d0>
 8019102:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8019106:	4551      	cmp	r1, sl
 8019108:	da03      	bge.n	8019112 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x69e>
 801910a:	b1d9      	cbz	r1, 8019144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d0>
 801910c:	468a      	mov	sl, r1
 801910e:	464f      	mov	r7, r9
 8019110:	4635      	mov	r5, r6
 8019112:	f109 39ff 	add.w	r9, r9, #4294967295
 8019116:	f119 0f02 	cmn.w	r9, #2
 801911a:	d1c6      	bne.n	80190aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x636>
 801911c:	4616      	mov	r6, r2
 801911e:	3201      	adds	r2, #1
 8019120:	f1a4 0408 	sub.w	r4, r4, #8
 8019124:	d1b7      	bne.n	8019096 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 8019126:	9b01      	ldr	r3, [sp, #4]
 8019128:	b2ac      	uxth	r4, r5
 801912a:	00ed      	lsls	r5, r5, #3
 801912c:	1958      	adds	r0, r3, r5
 801912e:	1c7b      	adds	r3, r7, #1
 8019130:	d10b      	bne.n	801914a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d6>
 8019132:	4601      	mov	r1, r0
 8019134:	9803      	ldr	r0, [sp, #12]
 8019136:	f7ff fb37 	bl	80187a8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801913a:	4621      	mov	r1, r4
 801913c:	9801      	ldr	r0, [sp, #4]
 801913e:	f7ff fc85 	bl	8018a4c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019142:	e4b3      	b.n	8018aac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8019144:	464f      	mov	r7, r9
 8019146:	4635      	mov	r5, r6
 8019148:	e7ed      	b.n	8019126 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b2>
 801914a:	9b01      	ldr	r3, [sp, #4]
 801914c:	00ff      	lsls	r7, r7, #3
 801914e:	19d9      	adds	r1, r3, r7
 8019150:	f7ff fb2a 	bl	80187a8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019154:	9b03      	ldr	r3, [sp, #12]
 8019156:	445f      	add	r7, fp
 8019158:	cb03      	ldmia	r3!, {r0, r1}
 801915a:	445d      	add	r5, fp
 801915c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8019160:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8019164:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8019168:	9b03      	ldr	r3, [sp, #12]
 801916a:	6869      	ldr	r1, [r5, #4]
 801916c:	c303      	stmia	r3!, {r0, r1}
 801916e:	e7e4      	b.n	801913a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>

08019170 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8019170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019174:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8019178:	b0a1      	sub	sp, #132	@ 0x84
 801917a:	4604      	mov	r4, r0
 801917c:	4630      	mov	r0, r6
 801917e:	f7fa ff3a 	bl	8013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019182:	4605      	mov	r5, r0
 8019184:	b948      	cbnz	r0, 801919a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8019186:	e896 0006 	ldmia.w	r6, {r1, r2}
 801918a:	6823      	ldr	r3, [r4, #0]
 801918c:	4620      	mov	r0, r4
 801918e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019190:	4798      	blx	r3
 8019192:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8019196:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801919a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d149      	bne.n	8019236 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc6>
 80191a2:	4bb2      	ldr	r3, [pc, #712]	@ (801946c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	f893 7048 	ldrb.w	r7, [r3, #72]	@ 0x48
 80191aa:	1ebb      	subs	r3, r7, #2
 80191ac:	425f      	negs	r7, r3
 80191ae:	415f      	adcs	r7, r3
 80191b0:	4baf      	ldr	r3, [pc, #700]	@ (8019470 <_ZN8touchgfx11Application15drawCachedAreasEv+0x300>)
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d040      	beq.n	801923a <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 80191b8:	4dae      	ldr	r5, [pc, #696]	@ (8019474 <_ZN8touchgfx11Application15drawCachedAreasEv+0x304>)
 80191ba:	4628      	mov	r0, r5
 80191bc:	f7fa ff1b 	bl	8013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80191c0:	4606      	mov	r6, r0
 80191c2:	2800      	cmp	r0, #0
 80191c4:	d139      	bne.n	801923a <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 80191c6:	4628      	mov	r0, r5
 80191c8:	f7ff f98c 	bl	80184e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80191cc:	6823      	ldr	r3, [r4, #0]
 80191ce:	6829      	ldr	r1, [r5, #0]
 80191d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80191d2:	686a      	ldr	r2, [r5, #4]
 80191d4:	4620      	mov	r0, r4
 80191d6:	4798      	blx	r3
 80191d8:	802e      	strh	r6, [r5, #0]
 80191da:	806e      	strh	r6, [r5, #2]
 80191dc:	80ae      	strh	r6, [r5, #4]
 80191de:	80ee      	strh	r6, [r5, #6]
 80191e0:	af0f      	add	r7, sp, #60	@ 0x3c
 80191e2:	4ea5      	ldr	r6, [pc, #660]	@ (8019478 <_ZN8touchgfx11Application15drawCachedAreasEv+0x308>)
 80191e4:	4638      	mov	r0, r7
 80191e6:	f7ff fbd9 	bl	801899c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80191ea:	8835      	ldrh	r5, [r6, #0]
 80191ec:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	@ 0xec
 80191f0:	462b      	mov	r3, r5
 80191f2:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80191f6:	4563      	cmp	r3, ip
 80191f8:	d224      	bcs.n	8019244 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 80191fa:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 80191fe:	2907      	cmp	r1, #7
 8019200:	d816      	bhi.n	8019230 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8019202:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8019206:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801920a:	f9b2 8004 	ldrsh.w	r8, [r2, #4]
 801920e:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 8019212:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8019216:	1c4a      	adds	r2, r1, #1
 8019218:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
 801921c:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
 8019220:	f827 9031 	strh.w	r9, [r7, r1, lsl #3]
 8019224:	f8a2 a002 	strh.w	sl, [r2, #2]
 8019228:	f8a2 8004 	strh.w	r8, [r2, #4]
 801922c:	f8a2 e006 	strh.w	lr, [r2, #6]
 8019230:	3301      	adds	r3, #1
 8019232:	b29b      	uxth	r3, r3
 8019234:	e7df      	b.n	80191f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 8019236:	2701      	movs	r7, #1
 8019238:	e7ba      	b.n	80191b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40>
 801923a:	2f00      	cmp	r7, #0
 801923c:	d1d0      	bne.n	80191e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x70>
 801923e:	b021      	add	sp, #132	@ 0x84
 8019240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019244:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8019248:	42ab      	cmp	r3, r5
 801924a:	d90c      	bls.n	8019266 <_ZN8touchgfx11Application15drawCachedAreasEv+0xf6>
 801924c:	6822      	ldr	r2, [r4, #0]
 801924e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8019252:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8019254:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8019258:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801925c:	4620      	mov	r0, r4
 801925e:	3501      	adds	r5, #1
 8019260:	47b8      	blx	r7
 8019262:	b2ad      	uxth	r5, r5
 8019264:	e7ee      	b.n	8019244 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 8019266:	4d81      	ldr	r5, [pc, #516]	@ (801946c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 8019268:	6828      	ldr	r0, [r5, #0]
 801926a:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 801926e:	2b01      	cmp	r3, #1
 8019270:	f040 813d 	bne.w	80194ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x37e>
 8019274:	4a81      	ldr	r2, [pc, #516]	@ (801947c <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>)
 8019276:	8833      	ldrh	r3, [r6, #0]
 8019278:	7812      	ldrb	r2, [r2, #0]
 801927a:	f8b4 00ec 	ldrh.w	r0, [r4, #236]	@ 0xec
 801927e:	2a01      	cmp	r2, #1
 8019280:	d014      	beq.n	80192ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 8019282:	f04f 0900 	mov.w	r9, #0
 8019286:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 801928a:	32ae      	adds	r2, #174	@ 0xae
 801928c:	4283      	cmp	r3, r0
 801928e:	f102 0208 	add.w	r2, r2, #8
 8019292:	f280 8083 	bge.w	801939c <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 8019296:	f832 1c04 	ldrh.w	r1, [r2, #-4]
 801929a:	f832 7c08 	ldrh.w	r7, [r2, #-8]
 801929e:	3301      	adds	r3, #1
 80192a0:	4439      	add	r1, r7
 80192a2:	b209      	sxth	r1, r1
 80192a4:	4589      	cmp	r9, r1
 80192a6:	bfb8      	it	lt
 80192a8:	4689      	movlt	r9, r1
 80192aa:	e7ef      	b.n	801928c <_ZN8touchgfx11Application15drawCachedAreasEv+0x11c>
 80192ac:	4f74      	ldr	r7, [pc, #464]	@ (8019480 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>)
 80192ae:	883a      	ldrh	r2, [r7, #0]
 80192b0:	4693      	mov	fp, r2
 80192b2:	4283      	cmp	r3, r0
 80192b4:	da08      	bge.n	80192c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x158>
 80192b6:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 80192ba:	f9b1 10ac 	ldrsh.w	r1, [r1, #172]	@ 0xac
 80192be:	3301      	adds	r3, #1
 80192c0:	458b      	cmp	fp, r1
 80192c2:	bfa8      	it	ge
 80192c4:	468b      	movge	fp, r1
 80192c6:	e7f4      	b.n	80192b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x142>
 80192c8:	2300      	movs	r3, #0
 80192ca:	2a0f      	cmp	r2, #15
 80192cc:	bf98      	it	ls
 80192ce:	f04f 0801 	movls.w	r8, #1
 80192d2:	f8df 91b0 	ldr.w	r9, [pc, #432]	@ 8019484 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 80192d6:	bf88      	it	hi
 80192d8:	ea4f 08d2 	movhi.w	r8, r2, lsr #3
 80192dc:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 80192e0:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80192e4:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80192e8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80192ec:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80192f0:	6828      	ldr	r0, [r5, #0]
 80192f2:	455b      	cmp	r3, fp
 80192f4:	f340 80c8 	ble.w	8019488 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80192f8:	6803      	ldr	r3, [r0, #0]
 80192fa:	f8b7 a000 	ldrh.w	sl, [r7]
 80192fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8019302:	4798      	blx	r3
 8019304:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8019308:	ebaa 0000 	sub.w	r0, sl, r0
 801930c:	682b      	ldr	r3, [r5, #0]
 801930e:	b280      	uxth	r0, r0
 8019310:	ebac 0e08 	sub.w	lr, ip, r8
 8019314:	4570      	cmp	r0, lr
 8019316:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 801931a:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 801931e:	dd05      	ble.n	801932c <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 8019320:	4558      	cmp	r0, fp
 8019322:	dd03      	ble.n	801932c <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 8019324:	b901      	cbnz	r1, 8019328 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8019326:	b392      	cbz	r2, 801938e <_ZN8touchgfx11Application15drawCachedAreasEv+0x21e>
 8019328:	4658      	mov	r0, fp
 801932a:	e006      	b.n	801933a <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ca>
 801932c:	2900      	cmp	r1, #0
 801932e:	d1fb      	bne.n	8019328 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8019330:	2a00      	cmp	r2, #0
 8019332:	d1f9      	bne.n	8019328 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8019334:	4558      	cmp	r0, fp
 8019336:	bfb8      	it	lt
 8019338:	4658      	movlt	r0, fp
 801933a:	2200      	movs	r2, #0
 801933c:	f9b9 3000 	ldrsh.w	r3, [r9]
 8019340:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8019344:	f8b6 a000 	ldrh.w	sl, [r6]
 8019348:	ebac 0000 	sub.w	r0, ip, r0
 801934c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8019350:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8019354:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8019358:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801935c:	4553      	cmp	r3, sl
 801935e:	ddc5      	ble.n	80192ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8019360:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8019364:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8019368:	ab0d      	add	r3, sp, #52	@ 0x34
 801936a:	6851      	ldr	r1, [r2, #4]
 801936c:	c303      	stmia	r3!, {r0, r1}
 801936e:	a80d      	add	r0, sp, #52	@ 0x34
 8019370:	a90b      	add	r1, sp, #44	@ 0x2c
 8019372:	f7fa fdfd 	bl	8013f70 <_ZN8touchgfx4RectaNERKS0_>
 8019376:	a80d      	add	r0, sp, #52	@ 0x34
 8019378:	f7fa fe3d 	bl	8013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801937c:	b920      	cbnz	r0, 8019388 <_ZN8touchgfx11Application15drawCachedAreasEv+0x218>
 801937e:	6823      	ldr	r3, [r4, #0]
 8019380:	a90d      	add	r1, sp, #52	@ 0x34
 8019382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019384:	4620      	mov	r0, r4
 8019386:	4798      	blx	r3
 8019388:	f10a 0a01 	add.w	sl, sl, #1
 801938c:	e7e4      	b.n	8019358 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1e8>
 801938e:	681a      	ldr	r2, [r3, #0]
 8019390:	2101      	movs	r1, #1
 8019392:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 8019396:	4618      	mov	r0, r3
 8019398:	4790      	blx	r2
 801939a:	e7a7      	b.n	80192ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 801939c:	4b39      	ldr	r3, [pc, #228]	@ (8019484 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>)
 801939e:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8019480 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 80193a2:	881f      	ldrh	r7, [r3, #0]
 80193a4:	2300      	movs	r3, #0
 80193a6:	2f0f      	cmp	r7, #15
 80193a8:	bf98      	it	ls
 80193aa:	2701      	movls	r7, #1
 80193ac:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 80193b0:	bf88      	it	hi
 80193b2:	08ff      	lsrhi	r7, r7, #3
 80193b4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80193b8:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 80193bc:	6828      	ldr	r0, [r5, #0]
 80193be:	4413      	add	r3, r2
 80193c0:	b21b      	sxth	r3, r3
 80193c2:	454b      	cmp	r3, r9
 80193c4:	da60      	bge.n	8019488 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80193c6:	6803      	ldr	r3, [r0, #0]
 80193c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80193cc:	4798      	blx	r3
 80193ce:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 80193d2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80193d6:	682a      	ldr	r2, [r5, #0]
 80193d8:	4473      	add	r3, lr
 80193da:	b21b      	sxth	r3, r3
 80193dc:	eb03 0e07 	add.w	lr, r3, r7
 80193e0:	4570      	cmp	r0, lr
 80193e2:	f892 c07c 	ldrb.w	ip, [r2, #124]	@ 0x7c
 80193e6:	f892 106a 	ldrb.w	r1, [r2, #106]	@ 0x6a
 80193ea:	da0d      	bge.n	8019408 <_ZN8touchgfx11Application15drawCachedAreasEv+0x298>
 80193ec:	4548      	cmp	r0, r9
 80193ee:	da0b      	bge.n	8019408 <_ZN8touchgfx11Application15drawCachedAreasEv+0x298>
 80193f0:	f1bc 0f00 	cmp.w	ip, #0
 80193f4:	d138      	bne.n	8019468 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>
 80193f6:	2900      	cmp	r1, #0
 80193f8:	d136      	bne.n	8019468 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>
 80193fa:	6813      	ldr	r3, [r2, #0]
 80193fc:	2101      	movs	r1, #1
 80193fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8019402:	4610      	mov	r0, r2
 8019404:	4798      	blx	r3
 8019406:	e7d5      	b.n	80193b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8019408:	f1bc 0f00 	cmp.w	ip, #0
 801940c:	d12c      	bne.n	8019468 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>
 801940e:	bb59      	cbnz	r1, 8019468 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>
 8019410:	4548      	cmp	r0, r9
 8019412:	bfa8      	it	ge
 8019414:	4648      	movge	r0, r9
 8019416:	2100      	movs	r1, #0
 8019418:	f9b8 2000 	ldrsh.w	r2, [r8]
 801941c:	1ac0      	subs	r0, r0, r3
 801941e:	f8b6 a000 	ldrh.w	sl, [r6]
 8019422:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8019426:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801942a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801942e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8019432:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8019436:	4553      	cmp	r3, sl
 8019438:	ddbc      	ble.n	80193b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801943a:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801943e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8019442:	ab0d      	add	r3, sp, #52	@ 0x34
 8019444:	6851      	ldr	r1, [r2, #4]
 8019446:	c303      	stmia	r3!, {r0, r1}
 8019448:	a80d      	add	r0, sp, #52	@ 0x34
 801944a:	a90b      	add	r1, sp, #44	@ 0x2c
 801944c:	f7fa fd90 	bl	8013f70 <_ZN8touchgfx4RectaNERKS0_>
 8019450:	a80d      	add	r0, sp, #52	@ 0x34
 8019452:	f7fa fdd0 	bl	8013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019456:	b920      	cbnz	r0, 8019462 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 8019458:	6823      	ldr	r3, [r4, #0]
 801945a:	a90d      	add	r1, sp, #52	@ 0x34
 801945c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801945e:	4620      	mov	r0, r4
 8019460:	4798      	blx	r3
 8019462:	f10a 0a01 	add.w	sl, sl, #1
 8019466:	e7e4      	b.n	8019432 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c2>
 8019468:	4648      	mov	r0, r9
 801946a:	e7d4      	b.n	8019416 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a6>
 801946c:	2005b928 	.word	0x2005b928
 8019470:	2005b968 	.word	0x2005b968
 8019474:	2005b974 	.word	0x2005b974
 8019478:	2000001c 	.word	0x2000001c
 801947c:	2005b920 	.word	0x2005b920
 8019480:	2005b91c 	.word	0x2005b91c
 8019484:	2005b91e 	.word	0x2005b91e
 8019488:	6828      	ldr	r0, [r5, #0]
 801948a:	6803      	ldr	r3, [r0, #0]
 801948c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801948e:	4798      	blx	r3
 8019490:	4ba4      	ldr	r3, [pc, #656]	@ (8019724 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b4>)
 8019492:	781b      	ldrb	r3, [r3, #0]
 8019494:	2b00      	cmp	r3, #0
 8019496:	f43f aed2 	beq.w	801923e <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 801949a:	2300      	movs	r3, #0
 801949c:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 80194a0:	4ba1      	ldr	r3, [pc, #644]	@ (8019728 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b8>)
 80194a2:	f8bd 607c 	ldrh.w	r6, [sp, #124]	@ 0x7c
 80194a6:	881b      	ldrh	r3, [r3, #0]
 80194a8:	a80f      	add	r0, sp, #60	@ 0x3c
 80194aa:	f104 05ee 	add.w	r5, r4, #238	@ 0xee
 80194ae:	42b3      	cmp	r3, r6
 80194b0:	f4bf aec5 	bcs.w	801923e <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 80194b4:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 80194b8:	2907      	cmp	r1, #7
 80194ba:	d815      	bhi.n	80194e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x378>
 80194bc:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80194c0:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 80194c4:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 80194c8:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 80194cc:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 80194d0:	1c4a      	adds	r2, r1, #1
 80194d2:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 80194d6:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 80194da:	f825 8031 	strh.w	r8, [r5, r1, lsl #3]
 80194de:	f8a2 e002 	strh.w	lr, [r2, #2]
 80194e2:	f8a2 c004 	strh.w	ip, [r2, #4]
 80194e6:	80d7      	strh	r7, [r2, #6]
 80194e8:	3301      	adds	r3, #1
 80194ea:	b29b      	uxth	r3, r3
 80194ec:	e7df      	b.n	80194ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x33e>
 80194ee:	2b02      	cmp	r3, #2
 80194f0:	f040 80cf 	bne.w	8019692 <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 80194f4:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80194f8:	f890 b07d 	ldrb.w	fp, [r0, #125]	@ 0x7d
 80194fc:	9308      	str	r3, [sp, #32]
 80194fe:	f8b0 307e 	ldrh.w	r3, [r0, #126]	@ 0x7e
 8019502:	f10b 37ff 	add.w	r7, fp, #4294967295
 8019506:	9307      	str	r3, [sp, #28]
 8019508:	6803      	ldr	r3, [r0, #0]
 801950a:	b2bf      	uxth	r7, r7
 801950c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8019510:	4798      	blx	r3
 8019512:	4b86      	ldr	r3, [pc, #536]	@ (801972c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5bc>)
 8019514:	4682      	mov	sl, r0
 8019516:	881b      	ldrh	r3, [r3, #0]
 8019518:	2000      	movs	r0, #0
 801951a:	9302      	str	r3, [sp, #8]
 801951c:	4b84      	ldr	r3, [pc, #528]	@ (8019730 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c0>)
 801951e:	fa0f f887 	sxth.w	r8, r7
 8019522:	881e      	ldrh	r6, [r3, #0]
 8019524:	4b83      	ldr	r3, [pc, #524]	@ (8019734 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8019526:	781b      	ldrb	r3, [r3, #0]
 8019528:	2b01      	cmp	r3, #1
 801952a:	bf1e      	ittt	ne
 801952c:	9b02      	ldrne	r3, [sp, #8]
 801952e:	9602      	strne	r6, [sp, #8]
 8019530:	461e      	movne	r6, r3
 8019532:	f7f7 ffb1 	bl	8011498 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8019536:	fb96 fbfb 	sdiv	fp, r6, fp
 801953a:	fb0b f808 	mul.w	r8, fp, r8
 801953e:	45c2      	cmp	sl, r8
 8019540:	da0c      	bge.n	801955c <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ec>
 8019542:	6828      	ldr	r0, [r5, #0]
 8019544:	210a      	movs	r1, #10
 8019546:	6803      	ldr	r3, [r0, #0]
 8019548:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801954c:	4798      	blx	r3
 801954e:	6828      	ldr	r0, [r5, #0]
 8019550:	6803      	ldr	r3, [r0, #0]
 8019552:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8019556:	4798      	blx	r3
 8019558:	4682      	mov	sl, r0
 801955a:	e7f0      	b.n	801953e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ce>
 801955c:	f04f 0800 	mov.w	r8, #0
 8019560:	4645      	mov	r5, r8
 8019562:	2000      	movs	r0, #0
 8019564:	f7f7 ffb4 	bl	80114d0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8019568:	fa1f f38b 	uxth.w	r3, fp
 801956c:	fb17 f703 	smulbb	r7, r7, r3
 8019570:	9304      	str	r3, [sp, #16]
 8019572:	b2bb      	uxth	r3, r7
 8019574:	9305      	str	r3, [sp, #20]
 8019576:	4f70      	ldr	r7, [pc, #448]	@ (8019738 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c8>)
 8019578:	0973      	lsrs	r3, r6, #5
 801957a:	9306      	str	r3, [sp, #24]
 801957c:	42b5      	cmp	r5, r6
 801957e:	d087      	beq.n	8019490 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8019580:	6838      	ldr	r0, [r7, #0]
 8019582:	6803      	ldr	r3, [r0, #0]
 8019584:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8019588:	4798      	blx	r3
 801958a:	4582      	cmp	sl, r0
 801958c:	4681      	mov	r9, r0
 801958e:	d907      	bls.n	80195a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x430>
 8019590:	f1b8 0f00 	cmp.w	r8, #0
 8019594:	d007      	beq.n	80195a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x436>
 8019596:	6838      	ldr	r0, [r7, #0]
 8019598:	6803      	ldr	r3, [r0, #0]
 801959a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801959e:	e776      	b.n	801948e <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 80195a0:	f1b8 0f00 	cmp.w	r8, #0
 80195a4:	d003      	beq.n	80195ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x43e>
 80195a6:	454d      	cmp	r5, r9
 80195a8:	d3f5      	bcc.n	8019596 <_ZN8touchgfx11Application15drawCachedAreasEv+0x426>
 80195aa:	f04f 0801 	mov.w	r8, #1
 80195ae:	fb95 f3fb 	sdiv	r3, r5, fp
 80195b2:	9a04      	ldr	r2, [sp, #16]
 80195b4:	9303      	str	r3, [sp, #12]
 80195b6:	3301      	adds	r3, #1
 80195b8:	fb13 f302 	smulbb	r3, r3, r2
 80195bc:	b299      	uxth	r1, r3
 80195be:	f1b8 0f00 	cmp.w	r8, #0
 80195c2:	d04e      	beq.n	8019662 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f2>
 80195c4:	eb09 030b 	add.w	r3, r9, fp
 80195c8:	42b3      	cmp	r3, r6
 80195ca:	bfa8      	it	ge
 80195cc:	4633      	movge	r3, r6
 80195ce:	b29b      	uxth	r3, r3
 80195d0:	428b      	cmp	r3, r1
 80195d2:	bf94      	ite	ls
 80195d4:	ebc5 0203 	rsbls	r2, r5, r3
 80195d8:	ebc5 0201 	rsbhi	r2, r5, r1
 80195dc:	9807      	ldr	r0, [sp, #28]
 80195de:	4282      	cmp	r2, r0
 80195e0:	bfa8      	it	ge
 80195e2:	4602      	movge	r2, r0
 80195e4:	9808      	ldr	r0, [sp, #32]
 80195e6:	fa1f fa82 	uxth.w	sl, r2
 80195ea:	4582      	cmp	sl, r0
 80195ec:	d205      	bcs.n	80195fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 80195ee:	fa15 f082 	uxtah	r0, r5, r2
 80195f2:	4286      	cmp	r6, r0
 80195f4:	d001      	beq.n	80195fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 80195f6:	4299      	cmp	r1, r3
 80195f8:	d240      	bcs.n	801967c <_ZN8touchgfx11Application15drawCachedAreasEv+0x50c>
 80195fa:	2001      	movs	r0, #1
 80195fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80195fe:	f7f7 ff4b 	bl	8011498 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8019602:	6838      	ldr	r0, [r7, #0]
 8019604:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8019608:	6803      	ldr	r3, [r0, #0]
 801960a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801960e:	4798      	blx	r3
 8019610:	4b48      	ldr	r3, [pc, #288]	@ (8019734 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8019612:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019614:	781b      	ldrb	r3, [r3, #0]
 8019616:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801961a:	2b01      	cmp	r3, #1
 801961c:	b212      	sxth	r2, r2
 801961e:	f04f 0000 	mov.w	r0, #0
 8019622:	d122      	bne.n	801966a <_ZN8touchgfx11Application15drawCachedAreasEv+0x4fa>
 8019624:	1b73      	subs	r3, r6, r5
 8019626:	eba3 030a 	sub.w	r3, r3, sl
 801962a:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801962e:	f8ad 0036 	strh.w	r0, [sp, #54]	@ 0x36
 8019632:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8019636:	f8ad 103a 	strh.w	r1, [sp, #58]	@ 0x3a
 801963a:	6823      	ldr	r3, [r4, #0]
 801963c:	a90d      	add	r1, sp, #52	@ 0x34
 801963e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019640:	4620      	mov	r0, r4
 8019642:	4798      	blx	r3
 8019644:	6838      	ldr	r0, [r7, #0]
 8019646:	9b03      	ldr	r3, [sp, #12]
 8019648:	4455      	add	r5, sl
 801964a:	4259      	negs	r1, r3
 801964c:	6803      	ldr	r3, [r0, #0]
 801964e:	b209      	sxth	r1, r1
 8019650:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8019654:	4798      	blx	r3
 8019656:	2001      	movs	r0, #1
 8019658:	b2ad      	uxth	r5, r5
 801965a:	f7f7 ff39 	bl	80114d0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801965e:	46ca      	mov	sl, r9
 8019660:	e78c      	b.n	801957c <_ZN8touchgfx11Application15drawCachedAreasEv+0x40c>
 8019662:	9b05      	ldr	r3, [sp, #20]
 8019664:	eba9 0303 	sub.w	r3, r9, r3
 8019668:	e7b1      	b.n	80195ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 801966a:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 801966e:	f8ad 5036 	strh.w	r5, [sp, #54]	@ 0x36
 8019672:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 8019676:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 801967a:	e7de      	b.n	801963a <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ca>
 801967c:	6838      	ldr	r0, [r7, #0]
 801967e:	6803      	ldr	r3, [r0, #0]
 8019680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019682:	4798      	blx	r3
 8019684:	6838      	ldr	r0, [r7, #0]
 8019686:	9906      	ldr	r1, [sp, #24]
 8019688:	6803      	ldr	r3, [r0, #0]
 801968a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801968e:	4798      	blx	r3
 8019690:	e7e5      	b.n	801965e <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ee>
 8019692:	2b03      	cmp	r3, #3
 8019694:	f040 8130 	bne.w	80198f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x788>
 8019698:	4b26      	ldr	r3, [pc, #152]	@ (8019734 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 801969a:	f9b0 9082 	ldrsh.w	r9, [r0, #130]	@ 0x82
 801969e:	781b      	ldrb	r3, [r3, #0]
 80196a0:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 80196a4:	2b01      	cmp	r3, #1
 80196a6:	f000 8093 	beq.w	80197d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 80196aa:	8832      	ldrh	r2, [r6, #0]
 80196ac:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 80196b0:	3201      	adds	r2, #1
 80196b2:	b292      	uxth	r2, r2
 80196b4:	2900      	cmp	r1, #0
 80196b6:	f43f aeeb 	beq.w	8019490 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 80196ba:	4694      	mov	ip, r2
 80196bc:	f04f 0800 	mov.w	r8, #0
 80196c0:	f8b4 50b2 	ldrh.w	r5, [r4, #178]	@ 0xb2
 80196c4:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 80196c8:	441d      	add	r5, r3
 80196ca:	b22d      	sxth	r5, r5
 80196cc:	fa1f f38c 	uxth.w	r3, ip
 80196d0:	4299      	cmp	r1, r3
 80196d2:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80196d6:	f240 80ba 	bls.w	801984e <_ZN8touchgfx11Application15drawCachedAreasEv+0x6de>
 80196da:	4427      	add	r7, r4
 80196dc:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 80196e0:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80196e4:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 80196e8:	4283      	cmp	r3, r0
 80196ea:	f340 809c 	ble.w	8019826 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b6>
 80196ee:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
 80196f2:	46e0      	mov	r8, ip
 80196f4:	4405      	add	r5, r0
 80196f6:	b22d      	sxth	r5, r5
 80196f8:	429d      	cmp	r5, r3
 80196fa:	bfa8      	it	ge
 80196fc:	461d      	movge	r5, r3
 80196fe:	f10c 0c01 	add.w	ip, ip, #1
 8019702:	e7e3      	b.n	80196cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>
 8019704:	d10a      	bne.n	801971c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5ac>
 8019706:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	@ 0xb2
 801970a:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801970e:	4562      	cmp	r2, ip
 8019710:	bfb8      	it	lt
 8019712:	4662      	movlt	r2, ip
 8019714:	4288      	cmp	r0, r1
 8019716:	bfb8      	it	lt
 8019718:	4698      	movlt	r8, r3
 801971a:	e082      	b.n	8019822 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b2>
 801971c:	428a      	cmp	r2, r1
 801971e:	bfb8      	it	lt
 8019720:	460a      	movlt	r2, r1
 8019722:	e07e      	b.n	8019822 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b2>
 8019724:	2005b926 	.word	0x2005b926
 8019728:	2000001c 	.word	0x2000001c
 801972c:	2005b91e 	.word	0x2005b91e
 8019730:	2005b91c 	.word	0x2005b91c
 8019734:	2005b920 	.word	0x2005b920
 8019738:	2005b928 	.word	0x2005b928
 801973c:	19e1      	adds	r1, r4, r7
 801973e:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8019742:	ab0d      	add	r3, sp, #52	@ 0x34
 8019744:	6849      	ldr	r1, [r1, #4]
 8019746:	c303      	stmia	r3!, {r0, r1}
 8019748:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 801974c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8019750:	454b      	cmp	r3, r9
 8019752:	bfb8      	it	lt
 8019754:	f9bd 2034 	ldrshlt.w	r2, [sp, #52]	@ 0x34
 8019758:	440b      	add	r3, r1
 801975a:	1a9b      	subs	r3, r3, r2
 801975c:	a80d      	add	r0, sp, #52	@ 0x34
 801975e:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8019762:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8019766:	f7fe fed7 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801976a:	a80d      	add	r0, sp, #52	@ 0x34
 801976c:	f7fa fc43 	bl	8013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019770:	bb70      	cbnz	r0, 80197d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 8019772:	f9bd c03a 	ldrsh.w	ip, [sp, #58]	@ 0x3a
 8019776:	6828      	ldr	r0, [r5, #0]
 8019778:	45cc      	cmp	ip, r9
 801977a:	f8d0 e000 	ldr.w	lr, [r0]
 801977e:	bfd4      	ite	le
 8019780:	fa1f fc8c 	uxthle.w	ip, ip
 8019784:	fa1f fc89 	uxthgt.w	ip, r9
 8019788:	f8cd c000 	str.w	ip, [sp]
 801978c:	f8de b094 	ldr.w	fp, [lr, #148]	@ 0x94
 8019790:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8019794:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8019798:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801979c:	47d8      	blx	fp
 801979e:	4683      	mov	fp, r0
 80197a0:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 80197a4:	a80d      	add	r0, sp, #52	@ 0x34
 80197a6:	f7fe fe9d 	bl	80184e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80197aa:	6823      	ldr	r3, [r4, #0]
 80197ac:	4620      	mov	r0, r4
 80197ae:	4427      	add	r7, r4
 80197b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80197b2:	a90d      	add	r1, sp, #52	@ 0x34
 80197b4:	4798      	blx	r3
 80197b6:	f8b7 00b0 	ldrh.w	r0, [r7, #176]	@ 0xb0
 80197ba:	eba0 000b 	sub.w	r0, r0, fp
 80197be:	b200      	sxth	r0, r0
 80197c0:	f8a7 00b0 	strh.w	r0, [r7, #176]	@ 0xb0
 80197c4:	b920      	cbnz	r0, 80197d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 80197c6:	fa1f f188 	uxth.w	r1, r8
 80197ca:	4650      	mov	r0, sl
 80197cc:	f7ff f93e 	bl	8018a4c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80197d0:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 80197d4:	f1bb 0f00 	cmp.w	fp, #0
 80197d8:	f43f ae5a 	beq.w	8019490 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 80197dc:	f04f 0800 	mov.w	r8, #0
 80197e0:	8833      	ldrh	r3, [r6, #0]
 80197e2:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 80197e6:	3301      	adds	r3, #1
 80197e8:	b29b      	uxth	r3, r3
 80197ea:	b299      	uxth	r1, r3
 80197ec:	458b      	cmp	fp, r1
 80197ee:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80197f2:	d9a3      	bls.n	801973c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>
 80197f4:	4427      	add	r7, r4
 80197f6:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 80197fa:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	@ 0xac
 80197fe:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8019802:	4408      	add	r0, r1
 8019804:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8019808:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801980c:	b200      	sxth	r0, r0
 801980e:	4461      	add	r1, ip
 8019810:	b209      	sxth	r1, r1
 8019812:	4288      	cmp	r0, r1
 8019814:	f6bf af76 	bge.w	8019704 <_ZN8touchgfx11Application15drawCachedAreasEv+0x594>
 8019818:	4584      	cmp	ip, r0
 801981a:	4662      	mov	r2, ip
 801981c:	4698      	mov	r8, r3
 801981e:	bfb8      	it	lt
 8019820:	4602      	movlt	r2, r0
 8019822:	3301      	adds	r3, #1
 8019824:	e7e1      	b.n	80197ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x67a>
 8019826:	d10e      	bne.n	8019846 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6d6>
 8019828:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801982c:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 8019830:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8019834:	4473      	add	r3, lr
 8019836:	b21b      	sxth	r3, r3
 8019838:	429d      	cmp	r5, r3
 801983a:	bfa8      	it	ge
 801983c:	461d      	movge	r5, r3
 801983e:	4287      	cmp	r7, r0
 8019840:	bfb8      	it	lt
 8019842:	46e0      	movlt	r8, ip
 8019844:	e75b      	b.n	80196fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x58e>
 8019846:	4285      	cmp	r5, r0
 8019848:	bfa8      	it	ge
 801984a:	4605      	movge	r5, r0
 801984c:	e757      	b.n	80196fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x58e>
 801984e:	eb0a 0007 	add.w	r0, sl, r7
 8019852:	4427      	add	r7, r4
 8019854:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 8019858:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801985c:	45cb      	cmp	fp, r9
 801985e:	bfbe      	ittt	lt
 8019860:	f8b7 50ae 	ldrhlt.w	r5, [r7, #174]	@ 0xae
 8019864:	445d      	addlt	r5, fp
 8019866:	b22d      	sxthlt	r5, r5
 8019868:	f7fa fbc5 	bl	8013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801986c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8019870:	2800      	cmp	r0, #0
 8019872:	f47f af1f 	bne.w	80196b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x544>
 8019876:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801987a:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 801987e:	1aad      	subs	r5, r5, r2
 8019880:	454d      	cmp	r5, r9
 8019882:	bfa8      	it	ge
 8019884:	464d      	movge	r5, r9
 8019886:	4829      	ldr	r0, [pc, #164]	@ (801992c <_ZN8touchgfx11Application15drawCachedAreasEv+0x7bc>)
 8019888:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801988c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8019890:	6800      	ldr	r0, [r0, #0]
 8019892:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
 8019896:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801989a:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801989e:	f8d0 c000 	ldr.w	ip, [r0]
 80198a2:	b2ad      	uxth	r5, r5
 80198a4:	fa1f fb8b 	uxth.w	fp, fp
 80198a8:	455d      	cmp	r5, fp
 80198aa:	bf94      	ite	ls
 80198ac:	9500      	strls	r5, [sp, #0]
 80198ae:	f8cd b000 	strhi.w	fp, [sp]
 80198b2:	b292      	uxth	r2, r2
 80198b4:	f8dc 5094 	ldr.w	r5, [ip, #148]	@ 0x94
 80198b8:	b29b      	uxth	r3, r3
 80198ba:	b289      	uxth	r1, r1
 80198bc:	47a8      	blx	r5
 80198be:	6823      	ldr	r3, [r4, #0]
 80198c0:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 80198c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80198c6:	a90d      	add	r1, sp, #52	@ 0x34
 80198c8:	4620      	mov	r0, r4
 80198ca:	4798      	blx	r3
 80198cc:	f8bd 103a 	ldrh.w	r1, [sp, #58]	@ 0x3a
 80198d0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80198d4:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 80198d8:	1a5b      	subs	r3, r3, r1
 80198da:	440a      	add	r2, r1
 80198dc:	b21b      	sxth	r3, r3
 80198de:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 80198e2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	f47f aedf 	bne.w	80196aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x53a>
 80198ec:	fa1f f188 	uxth.w	r1, r8
 80198f0:	4650      	mov	r0, sl
 80198f2:	f7ff f8ab 	bl	8018a4c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80198f6:	e6d8      	b.n	80196aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x53a>
 80198f8:	8835      	ldrh	r5, [r6, #0]
 80198fa:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80198fe:	42ab      	cmp	r3, r5
 8019900:	f67f adc6 	bls.w	8019490 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8019904:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8019908:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801990c:	ab0d      	add	r3, sp, #52	@ 0x34
 801990e:	6851      	ldr	r1, [r2, #4]
 8019910:	c303      	stmia	r3!, {r0, r1}
 8019912:	a80d      	add	r0, sp, #52	@ 0x34
 8019914:	f7fa fb6f 	bl	8013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019918:	b920      	cbnz	r0, 8019924 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7b4>
 801991a:	6823      	ldr	r3, [r4, #0]
 801991c:	a90d      	add	r1, sp, #52	@ 0x34
 801991e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019920:	4620      	mov	r0, r4
 8019922:	4798      	blx	r3
 8019924:	3501      	adds	r5, #1
 8019926:	b2ad      	uxth	r5, r5
 8019928:	e7e7      	b.n	80198fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x78a>
 801992a:	bf00      	nop
 801992c:	2005b928 	.word	0x2005b928

08019930 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8019930:	2200      	movs	r2, #0
 8019932:	4b03      	ldr	r3, [pc, #12]	@ (8019940 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8019934:	801a      	strh	r2, [r3, #0]
 8019936:	805a      	strh	r2, [r3, #2]
 8019938:	809a      	strh	r2, [r3, #4]
 801993a:	80da      	strh	r2, [r3, #6]
 801993c:	4770      	bx	lr
 801993e:	bf00      	nop
 8019940:	2005b974 	.word	0x2005b974

08019944 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8019944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019948:	4606      	mov	r6, r0
 801994a:	b09d      	sub	sp, #116	@ 0x74
 801994c:	a803      	add	r0, sp, #12
 801994e:	4614      	mov	r4, r2
 8019950:	468a      	mov	sl, r1
 8019952:	461d      	mov	r5, r3
 8019954:	f001 f914 	bl	801ab80 <_ZN8touchgfx12TextProviderC1Ev>
 8019958:	6833      	ldr	r3, [r6, #0]
 801995a:	4630      	mov	r0, r6
 801995c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801995e:	4798      	blx	r3
 8019960:	6833      	ldr	r3, [r6, #0]
 8019962:	4607      	mov	r7, r0
 8019964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019966:	4630      	mov	r0, r6
 8019968:	4798      	blx	r3
 801996a:	462a      	mov	r2, r5
 801996c:	2500      	movs	r5, #0
 801996e:	9000      	str	r0, [sp, #0]
 8019970:	4621      	mov	r1, r4
 8019972:	463b      	mov	r3, r7
 8019974:	a803      	add	r0, sp, #12
 8019976:	f001 f956 	bl	801ac26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801997a:	462c      	mov	r4, r5
 801997c:	46a9      	mov	r9, r5
 801997e:	46a8      	mov	r8, r5
 8019980:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8019984:	2300      	movs	r3, #0
 8019986:	9302      	str	r3, [sp, #8]
 8019988:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801998c:	429c      	cmp	r4, r3
 801998e:	d002      	beq.n	8019996 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8019990:	455c      	cmp	r4, fp
 8019992:	bf18      	it	ne
 8019994:	4625      	movne	r5, r4
 8019996:	ab02      	add	r3, sp, #8
 8019998:	4632      	mov	r2, r6
 801999a:	4651      	mov	r1, sl
 801999c:	a803      	add	r0, sp, #12
 801999e:	f001 fc5d 	bl	801b25c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80199a2:	4604      	mov	r4, r0
 80199a4:	b108      	cbz	r0, 80199aa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80199a6:	280a      	cmp	r0, #10
 80199a8:	d10a      	bne.n	80199c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80199aa:	45c1      	cmp	r9, r8
 80199ac:	bf38      	it	cc
 80199ae:	46c1      	movcc	r9, r8
 80199b0:	f04f 0800 	mov.w	r8, #0
 80199b4:	2c00      	cmp	r4, #0
 80199b6:	d1e5      	bne.n	8019984 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80199b8:	4648      	mov	r0, r9
 80199ba:	b01d      	add	sp, #116	@ 0x74
 80199bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199c0:	9a02      	ldr	r2, [sp, #8]
 80199c2:	2a00      	cmp	r2, #0
 80199c4:	d0de      	beq.n	8019984 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80199c6:	7b57      	ldrb	r7, [r2, #13]
 80199c8:	6833      	ldr	r3, [r6, #0]
 80199ca:	007f      	lsls	r7, r7, #1
 80199cc:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 80199d0:	7a97      	ldrb	r7, [r2, #10]
 80199d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80199d4:	4307      	orrs	r7, r0
 80199d6:	4629      	mov	r1, r5
 80199d8:	4630      	mov	r0, r6
 80199da:	8894      	ldrh	r4, [r2, #4]
 80199dc:	4798      	blx	r3
 80199de:	4438      	add	r0, r7
 80199e0:	4480      	add	r8, r0
 80199e2:	fa1f f888 	uxth.w	r8, r8
 80199e6:	e7e5      	b.n	80199b4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080199e8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80199e8:	b508      	push	{r3, lr}
 80199ea:	6803      	ldr	r3, [r0, #0]
 80199ec:	68db      	ldr	r3, [r3, #12]
 80199ee:	4798      	blx	r3
 80199f0:	b128      	cbz	r0, 80199fe <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80199f2:	7b43      	ldrb	r3, [r0, #13]
 80199f4:	7a80      	ldrb	r0, [r0, #10]
 80199f6:	005b      	lsls	r3, r3, #1
 80199f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80199fc:	4318      	orrs	r0, r3
 80199fe:	bd08      	pop	{r3, pc}

08019a00 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019a00:	b40e      	push	{r1, r2, r3}
 8019a02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a04:	4605      	mov	r5, r0
 8019a06:	b09e      	sub	sp, #120	@ 0x78
 8019a08:	ab23      	add	r3, sp, #140	@ 0x8c
 8019a0a:	f853 4b04 	ldr.w	r4, [r3], #4
 8019a0e:	a805      	add	r0, sp, #20
 8019a10:	9303      	str	r3, [sp, #12]
 8019a12:	f001 f8b5 	bl	801ab80 <_ZN8touchgfx12TextProviderC1Ev>
 8019a16:	682b      	ldr	r3, [r5, #0]
 8019a18:	4628      	mov	r0, r5
 8019a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019a1c:	4798      	blx	r3
 8019a1e:	682b      	ldr	r3, [r5, #0]
 8019a20:	4606      	mov	r6, r0
 8019a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019a24:	4628      	mov	r0, r5
 8019a26:	4798      	blx	r3
 8019a28:	4621      	mov	r1, r4
 8019a2a:	2400      	movs	r4, #0
 8019a2c:	4633      	mov	r3, r6
 8019a2e:	9000      	str	r0, [sp, #0]
 8019a30:	9a03      	ldr	r2, [sp, #12]
 8019a32:	ae1e      	add	r6, sp, #120	@ 0x78
 8019a34:	a805      	add	r0, sp, #20
 8019a36:	f001 f8f6 	bl	801ac26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019a3a:	f846 4d68 	str.w	r4, [r6, #-104]!
 8019a3e:	4633      	mov	r3, r6
 8019a40:	462a      	mov	r2, r5
 8019a42:	4621      	mov	r1, r4
 8019a44:	a805      	add	r0, sp, #20
 8019a46:	f001 fc09 	bl	801b25c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019a4a:	b1f0      	cbz	r0, 8019a8a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8019a4c:	280a      	cmp	r0, #10
 8019a4e:	d018      	beq.n	8019a82 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8019a50:	9f04      	ldr	r7, [sp, #16]
 8019a52:	b1b7      	cbz	r7, 8019a82 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8019a54:	7b78      	ldrb	r0, [r7, #13]
 8019a56:	7a3b      	ldrb	r3, [r7, #8]
 8019a58:	00c1      	lsls	r1, r0, #3
 8019a5a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8019a5e:	4319      	orrs	r1, r3
 8019a60:	0643      	lsls	r3, r0, #25
 8019a62:	bf44      	itt	mi
 8019a64:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8019a68:	b219      	sxthmi	r1, r3
 8019a6a:	0100      	lsls	r0, r0, #4
 8019a6c:	79fb      	ldrb	r3, [r7, #7]
 8019a6e:	88ea      	ldrh	r2, [r5, #6]
 8019a70:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8019a74:	4303      	orrs	r3, r0
 8019a76:	4413      	add	r3, r2
 8019a78:	1a5b      	subs	r3, r3, r1
 8019a7a:	b21b      	sxth	r3, r3
 8019a7c:	429c      	cmp	r4, r3
 8019a7e:	bfb8      	it	lt
 8019a80:	461c      	movlt	r4, r3
 8019a82:	4633      	mov	r3, r6
 8019a84:	462a      	mov	r2, r5
 8019a86:	2100      	movs	r1, #0
 8019a88:	e7dc      	b.n	8019a44 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8019a8a:	b2a0      	uxth	r0, r4
 8019a8c:	b01e      	add	sp, #120	@ 0x78
 8019a8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019a92:	b003      	add	sp, #12
 8019a94:	4770      	bx	lr

08019a96 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8019a96:	7a43      	ldrb	r3, [r0, #9]
 8019a98:	8880      	ldrh	r0, [r0, #4]
 8019a9a:	4418      	add	r0, r3
 8019a9c:	b280      	uxth	r0, r0
 8019a9e:	4770      	bx	lr

08019aa0 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8019aa0:	6803      	ldr	r3, [r0, #0]
 8019aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019aa4:	4718      	bx	r3

08019aa6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8019aa6:	b40e      	push	{r1, r2, r3}
 8019aa8:	b570      	push	{r4, r5, r6, lr}
 8019aaa:	4604      	mov	r4, r0
 8019aac:	b09d      	sub	sp, #116	@ 0x74
 8019aae:	ab21      	add	r3, sp, #132	@ 0x84
 8019ab0:	f853 5b04 	ldr.w	r5, [r3], #4
 8019ab4:	a803      	add	r0, sp, #12
 8019ab6:	9302      	str	r3, [sp, #8]
 8019ab8:	f001 f862 	bl	801ab80 <_ZN8touchgfx12TextProviderC1Ev>
 8019abc:	6823      	ldr	r3, [r4, #0]
 8019abe:	4620      	mov	r0, r4
 8019ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019ac2:	4798      	blx	r3
 8019ac4:	6823      	ldr	r3, [r4, #0]
 8019ac6:	4606      	mov	r6, r0
 8019ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019aca:	4620      	mov	r0, r4
 8019acc:	4798      	blx	r3
 8019ace:	4633      	mov	r3, r6
 8019ad0:	9000      	str	r0, [sp, #0]
 8019ad2:	9a02      	ldr	r2, [sp, #8]
 8019ad4:	4629      	mov	r1, r5
 8019ad6:	a803      	add	r0, sp, #12
 8019ad8:	f001 f8a5 	bl	801ac26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019adc:	a803      	add	r0, sp, #12
 8019ade:	f001 fc3f 	bl	801b360 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019ae2:	2401      	movs	r4, #1
 8019ae4:	b2a3      	uxth	r3, r4
 8019ae6:	b140      	cbz	r0, 8019afa <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8019ae8:	280a      	cmp	r0, #10
 8019aea:	bf08      	it	eq
 8019aec:	3301      	addeq	r3, #1
 8019aee:	a803      	add	r0, sp, #12
 8019af0:	bf08      	it	eq
 8019af2:	b21c      	sxtheq	r4, r3
 8019af4:	f001 fc34 	bl	801b360 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019af8:	e7f4      	b.n	8019ae4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8019afa:	4618      	mov	r0, r3
 8019afc:	b01d      	add	sp, #116	@ 0x74
 8019afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b02:	b003      	add	sp, #12
 8019b04:	4770      	bx	lr

08019b06 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019b06:	b40e      	push	{r1, r2, r3}
 8019b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b0a:	4604      	mov	r4, r0
 8019b0c:	b09e      	sub	sp, #120	@ 0x78
 8019b0e:	ab23      	add	r3, sp, #140	@ 0x8c
 8019b10:	f853 5b04 	ldr.w	r5, [r3], #4
 8019b14:	a805      	add	r0, sp, #20
 8019b16:	9303      	str	r3, [sp, #12]
 8019b18:	f001 f832 	bl	801ab80 <_ZN8touchgfx12TextProviderC1Ev>
 8019b1c:	6823      	ldr	r3, [r4, #0]
 8019b1e:	4620      	mov	r0, r4
 8019b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019b22:	4798      	blx	r3
 8019b24:	6823      	ldr	r3, [r4, #0]
 8019b26:	4606      	mov	r6, r0
 8019b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019b2a:	4620      	mov	r0, r4
 8019b2c:	4798      	blx	r3
 8019b2e:	4633      	mov	r3, r6
 8019b30:	4629      	mov	r1, r5
 8019b32:	9000      	str	r0, [sp, #0]
 8019b34:	9a03      	ldr	r2, [sp, #12]
 8019b36:	a805      	add	r0, sp, #20
 8019b38:	f001 f875 	bl	801ac26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019b3c:	2100      	movs	r1, #0
 8019b3e:	ad1e      	add	r5, sp, #120	@ 0x78
 8019b40:	f845 1d68 	str.w	r1, [r5, #-104]!
 8019b44:	462b      	mov	r3, r5
 8019b46:	4622      	mov	r2, r4
 8019b48:	a805      	add	r0, sp, #20
 8019b4a:	f001 fb87 	bl	801b25c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019b4e:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8019b52:	b1d8      	cbz	r0, 8019b8c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8019b54:	280a      	cmp	r0, #10
 8019b56:	d012      	beq.n	8019b7e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019b58:	9804      	ldr	r0, [sp, #16]
 8019b5a:	b180      	cbz	r0, 8019b7e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019b5c:	7b47      	ldrb	r7, [r0, #13]
 8019b5e:	88e2      	ldrh	r2, [r4, #6]
 8019b60:	00fb      	lsls	r3, r7, #3
 8019b62:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8019b66:	7a03      	ldrb	r3, [r0, #8]
 8019b68:	430b      	orrs	r3, r1
 8019b6a:	0679      	lsls	r1, r7, #25
 8019b6c:	bf44      	itt	mi
 8019b6e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8019b72:	b21b      	sxthmi	r3, r3
 8019b74:	1ad3      	subs	r3, r2, r3
 8019b76:	b21b      	sxth	r3, r3
 8019b78:	429e      	cmp	r6, r3
 8019b7a:	bfa8      	it	ge
 8019b7c:	461e      	movge	r6, r3
 8019b7e:	462b      	mov	r3, r5
 8019b80:	4622      	mov	r2, r4
 8019b82:	2100      	movs	r1, #0
 8019b84:	a805      	add	r0, sp, #20
 8019b86:	f001 fb69 	bl	801b25c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019b8a:	e7e2      	b.n	8019b52 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8019b8c:	4630      	mov	r0, r6
 8019b8e:	b01e      	add	sp, #120	@ 0x78
 8019b90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019b94:	b003      	add	sp, #12
 8019b96:	4770      	bx	lr

08019b98 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019b98:	b513      	push	{r0, r1, r4, lr}
 8019b9a:	2400      	movs	r4, #0
 8019b9c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019ba0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019ba4:	6803      	ldr	r3, [r0, #0]
 8019ba6:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019baa:	9400      	str	r4, [sp, #0]
 8019bac:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019bb0:	691b      	ldr	r3, [r3, #16]
 8019bb2:	4669      	mov	r1, sp
 8019bb4:	4798      	blx	r3
 8019bb6:	b002      	add	sp, #8
 8019bb8:	bd10      	pop	{r4, pc}

08019bba <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019bba:	b538      	push	{r3, r4, r5, lr}
 8019bbc:	460c      	mov	r4, r1
 8019bbe:	4605      	mov	r5, r0
 8019bc0:	680b      	ldr	r3, [r1, #0]
 8019bc2:	68db      	ldr	r3, [r3, #12]
 8019bc4:	4798      	blx	r3
 8019bc6:	6823      	ldr	r3, [r4, #0]
 8019bc8:	4620      	mov	r0, r4
 8019bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019bcc:	4629      	mov	r1, r5
 8019bce:	4798      	blx	r3
 8019bd0:	4628      	mov	r0, r5
 8019bd2:	bd38      	pop	{r3, r4, r5, pc}

08019bd4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019bd4:	b410      	push	{r4}
 8019bd6:	880a      	ldrh	r2, [r1, #0]
 8019bd8:	8884      	ldrh	r4, [r0, #4]
 8019bda:	4422      	add	r2, r4
 8019bdc:	800a      	strh	r2, [r1, #0]
 8019bde:	88c4      	ldrh	r4, [r0, #6]
 8019be0:	884a      	ldrh	r2, [r1, #2]
 8019be2:	4422      	add	r2, r4
 8019be4:	804a      	strh	r2, [r1, #2]
 8019be6:	6940      	ldr	r0, [r0, #20]
 8019be8:	b120      	cbz	r0, 8019bf4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019bea:	6803      	ldr	r3, [r0, #0]
 8019bec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019bf2:	4718      	bx	r3
 8019bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019bf8:	4770      	bx	lr

08019bfa <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019bfa:	b570      	push	{r4, r5, r6, lr}
 8019bfc:	460c      	mov	r4, r1
 8019bfe:	8882      	ldrh	r2, [r0, #4]
 8019c00:	880b      	ldrh	r3, [r1, #0]
 8019c02:	4605      	mov	r5, r0
 8019c04:	4413      	add	r3, r2
 8019c06:	800b      	strh	r3, [r1, #0]
 8019c08:	88c2      	ldrh	r2, [r0, #6]
 8019c0a:	884b      	ldrh	r3, [r1, #2]
 8019c0c:	4413      	add	r3, r2
 8019c0e:	804b      	strh	r3, [r1, #2]
 8019c10:	1d01      	adds	r1, r0, #4
 8019c12:	4620      	mov	r0, r4
 8019c14:	f7fa f9ac 	bl	8013f70 <_ZN8touchgfx4RectaNERKS0_>
 8019c18:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	dd0b      	ble.n	8019c38 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019c20:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	dd07      	ble.n	8019c38 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019c28:	6968      	ldr	r0, [r5, #20]
 8019c2a:	b128      	cbz	r0, 8019c38 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019c2c:	6803      	ldr	r3, [r0, #0]
 8019c2e:	4621      	mov	r1, r4
 8019c30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019c36:	4718      	bx	r3
 8019c38:	bd70      	pop	{r4, r5, r6, pc}
	...

08019c3c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019c3c:	b570      	push	{r4, r5, r6, lr}
 8019c3e:	460c      	mov	r4, r1
 8019c40:	8882      	ldrh	r2, [r0, #4]
 8019c42:	880b      	ldrh	r3, [r1, #0]
 8019c44:	4605      	mov	r5, r0
 8019c46:	4413      	add	r3, r2
 8019c48:	800b      	strh	r3, [r1, #0]
 8019c4a:	88c2      	ldrh	r2, [r0, #6]
 8019c4c:	884b      	ldrh	r3, [r1, #2]
 8019c4e:	4413      	add	r3, r2
 8019c50:	804b      	strh	r3, [r1, #2]
 8019c52:	1d01      	adds	r1, r0, #4
 8019c54:	4620      	mov	r0, r4
 8019c56:	f7fa f98b 	bl	8013f70 <_ZN8touchgfx4RectaNERKS0_>
 8019c5a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	dd19      	ble.n	8019c96 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8019c62:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	dd15      	ble.n	8019c96 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8019c6a:	6968      	ldr	r0, [r5, #20]
 8019c6c:	b128      	cbz	r0, 8019c7a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8019c6e:	6803      	ldr	r3, [r0, #0]
 8019c70:	4621      	mov	r1, r4
 8019c72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c76:	691b      	ldr	r3, [r3, #16]
 8019c78:	4718      	bx	r3
 8019c7a:	4b07      	ldr	r3, [pc, #28]	@ (8019c98 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	3304      	adds	r3, #4
 8019c80:	429d      	cmp	r5, r3
 8019c82:	d108      	bne.n	8019c96 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8019c84:	f7fe fdd6 	bl	8018834 <_ZN8touchgfx11Application11getInstanceEv>
 8019c88:	6803      	ldr	r3, [r0, #0]
 8019c8a:	6821      	ldr	r1, [r4, #0]
 8019c8c:	6862      	ldr	r2, [r4, #4]
 8019c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c94:	4718      	bx	r3
 8019c96:	bd70      	pop	{r4, r5, r6, pc}
 8019c98:	2005b96c 	.word	0x2005b96c

08019c9c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019c9c:	b570      	push	{r4, r5, r6, lr}
 8019c9e:	4604      	mov	r4, r0
 8019ca0:	4616      	mov	r6, r2
 8019ca2:	460d      	mov	r5, r1
 8019ca4:	b901      	cbnz	r1, 8019ca8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019ca6:	b192      	cbz	r2, 8019cce <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8019ca8:	6823      	ldr	r3, [r4, #0]
 8019caa:	4620      	mov	r0, r4
 8019cac:	699b      	ldr	r3, [r3, #24]
 8019cae:	4798      	blx	r3
 8019cb0:	88e2      	ldrh	r2, [r4, #6]
 8019cb2:	88a1      	ldrh	r1, [r4, #4]
 8019cb4:	4432      	add	r2, r6
 8019cb6:	4429      	add	r1, r5
 8019cb8:	4620      	mov	r0, r4
 8019cba:	b212      	sxth	r2, r2
 8019cbc:	b209      	sxth	r1, r1
 8019cbe:	f7f6 fc26 	bl	801050e <_ZN8touchgfx8Drawable5setXYEss>
 8019cc2:	6823      	ldr	r3, [r4, #0]
 8019cc4:	4620      	mov	r0, r4
 8019cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019cca:	699b      	ldr	r3, [r3, #24]
 8019ccc:	4718      	bx	r3
 8019cce:	bd70      	pop	{r4, r5, r6, pc}

08019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019cd0:	b510      	push	{r4, lr}
 8019cd2:	2300      	movs	r3, #0
 8019cd4:	4604      	mov	r4, r0
 8019cd6:	4608      	mov	r0, r1
 8019cd8:	8023      	strh	r3, [r4, #0]
 8019cda:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019cde:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019ce2:	8063      	strh	r3, [r4, #2]
 8019ce4:	6803      	ldr	r3, [r0, #0]
 8019ce6:	80a1      	strh	r1, [r4, #4]
 8019ce8:	80e2      	strh	r2, [r4, #6]
 8019cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019cec:	4621      	mov	r1, r4
 8019cee:	4798      	blx	r3
 8019cf0:	4620      	mov	r0, r4
 8019cf2:	bd10      	pop	{r4, pc}

08019cf4 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8019cf4:	4a04      	ldr	r2, [pc, #16]	@ (8019d08 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 8019cf6:	6002      	str	r2, [r0, #0]
 8019cf8:	2200      	movs	r2, #0
 8019cfa:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8019cfe:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8019d02:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019d06:	4770      	bx	lr
 8019d08:	0802e774 	.word	0x0802e774

08019d0c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 8019d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d10:	4604      	mov	r4, r0
 8019d12:	b087      	sub	sp, #28
 8019d14:	8b45      	ldrh	r5, [r0, #26]
 8019d16:	f8b2 c000 	ldrh.w	ip, [r2]
 8019d1a:	9105      	str	r1, [sp, #20]
 8019d1c:	68e1      	ldr	r1, [r4, #12]
 8019d1e:	1c68      	adds	r0, r5, #1
 8019d20:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8019d24:	f01c 0501 	ands.w	r5, ip, #1
 8019d28:	9203      	str	r2, [sp, #12]
 8019d2a:	b280      	uxth	r0, r0
 8019d2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019d30:	9502      	str	r5, [sp, #8]
 8019d32:	d07d      	beq.n	8019e30 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x124>
 8019d34:	ee07 2a90 	vmov	s15, r2
 8019d38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019d3c:	8360      	strh	r0, [r4, #26]
 8019d3e:	edc1 6a00 	vstr	s13, [r1]
 8019d42:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019d46:	f04f 0e00 	mov.w	lr, #0
 8019d4a:	ee07 2a10 	vmov	s14, r2
 8019d4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019d52:	8b61      	ldrh	r1, [r4, #26]
 8019d54:	68e2      	ldr	r2, [r4, #12]
 8019d56:	1c48      	adds	r0, r1, #1
 8019d58:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8019d5c:	8360      	strh	r0, [r4, #26]
 8019d5e:	ee06 ea10 	vmov	s12, lr
 8019d62:	ed82 7a00 	vstr	s14, [r2]
 8019d66:	2501      	movs	r5, #1
 8019d68:	8b21      	ldrh	r1, [r4, #24]
 8019d6a:	68a2      	ldr	r2, [r4, #8]
 8019d6c:	1c48      	adds	r0, r1, #1
 8019d6e:	8320      	strh	r0, [r4, #24]
 8019d70:	5455      	strb	r5, [r2, r1]
 8019d72:	2200      	movs	r2, #0
 8019d74:	3304      	adds	r3, #4
 8019d76:	9300      	str	r3, [sp, #0]
 8019d78:	46aa      	mov	sl, r5
 8019d7a:	ee07 2a90 	vmov	s15, r2
 8019d7e:	4613      	mov	r3, r2
 8019d80:	4611      	mov	r1, r2
 8019d82:	462e      	mov	r6, r5
 8019d84:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8019d88:	9201      	str	r2, [sp, #4]
 8019d8a:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 8019d8e:	9805      	ldr	r0, [sp, #20]
 8019d90:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8019d94:	f108 0701 	add.w	r7, r8, #1
 8019d98:	42a8      	cmp	r0, r5
 8019d9a:	b2bf      	uxth	r7, r7
 8019d9c:	eb0b 0908 	add.w	r9, fp, r8
 8019da0:	f340 80db 	ble.w	8019f5a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x24e>
 8019da4:	fa4c f906 	asr.w	r9, ip, r6
 8019da8:	f009 0901 	and.w	r9, r9, #1
 8019dac:	fa5f f389 	uxtb.w	r3, r9
 8019db0:	9304      	str	r3, [sp, #16]
 8019db2:	9b00      	ldr	r3, [sp, #0]
 8019db4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019db8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019dbc:	f1b9 0f00 	cmp.w	r9, #0
 8019dc0:	d07d      	beq.n	8019ebe <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1b2>
 8019dc2:	ee05 1a10 	vmov	s10, r1
 8019dc6:	eef8 4ac5 	vcvt.f32.s32	s9, s10
 8019dca:	ee05 3a10 	vmov	s10, r3
 8019dce:	8327      	strh	r7, [r4, #24]
 8019dd0:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8019dd4:	f1ba 0f00 	cmp.w	sl, #0
 8019dd8:	d050      	beq.n	8019e7c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x170>
 8019dda:	f04f 0002 	mov.w	r0, #2
 8019dde:	f80b 0008 	strb.w	r0, [fp, r8]
 8019de2:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019de6:	68e7      	ldr	r7, [r4, #12]
 8019de8:	f108 0901 	add.w	r9, r8, #1
 8019dec:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019df0:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019df4:	edc7 4a00 	vstr	s9, [r7]
 8019df8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019dfc:	68e7      	ldr	r7, [r4, #12]
 8019dfe:	f108 0901 	add.w	r9, r8, #1
 8019e02:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019e06:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019e0a:	ed87 5a00 	vstr	s10, [r7]
 8019e0e:	3601      	adds	r6, #1
 8019e10:	2e10      	cmp	r6, #16
 8019e12:	d106      	bne.n	8019e22 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x116>
 8019e14:	9e01      	ldr	r6, [sp, #4]
 8019e16:	9803      	ldr	r0, [sp, #12]
 8019e18:	3601      	adds	r6, #1
 8019e1a:	9601      	str	r6, [sp, #4]
 8019e1c:	f830 c016 	ldrh.w	ip, [r0, r6, lsl #1]
 8019e20:	2600      	movs	r6, #0
 8019e22:	9800      	ldr	r0, [sp, #0]
 8019e24:	3501      	adds	r5, #1
 8019e26:	3004      	adds	r0, #4
 8019e28:	9000      	str	r0, [sp, #0]
 8019e2a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8019e2e:	e7ac      	b.n	8019d8a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x7e>
 8019e30:	ee06 2a10 	vmov	s12, r2
 8019e34:	ee16 5a10 	vmov	r5, s12
 8019e38:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8019e3c:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8019e40:	442a      	add	r2, r5
 8019e42:	ee06 2a90 	vmov	s13, r2
 8019e46:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019e4a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8019e4e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019e52:	4472      	add	r2, lr
 8019e54:	ee07 2a10 	vmov	s14, r2
 8019e58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8019e5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e60:	8360      	strh	r0, [r4, #26]
 8019e62:	edc1 6a00 	vstr	s13, [r1]
 8019e66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019e6a:	8b61      	ldrh	r1, [r4, #26]
 8019e6c:	68e2      	ldr	r2, [r4, #12]
 8019e6e:	1c48      	adds	r0, r1, #1
 8019e70:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8019e74:	8360      	strh	r0, [r4, #26]
 8019e76:	ed82 7a00 	vstr	s14, [r2]
 8019e7a:	e774      	b.n	8019d66 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x5a>
 8019e7c:	f04f 0005 	mov.w	r0, #5
 8019e80:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 8019e84:	f80b 0008 	strb.w	r0, [fp, r8]
 8019e88:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019e8c:	68e7      	ldr	r7, [r4, #12]
 8019e8e:	f108 0901 	add.w	r9, r8, #1
 8019e92:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019e96:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019e9a:	ed87 4a00 	vstr	s8, [r7]
 8019e9e:	ee04 2a10 	vmov	s8, r2
 8019ea2:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8019ea6:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019eaa:	68e7      	ldr	r7, [r4, #12]
 8019eac:	f108 0901 	add.w	r9, r8, #1
 8019eb0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019eb4:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019eb8:	ed87 4a00 	vstr	s8, [r7]
 8019ebc:	e791      	b.n	8019de2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xd6>
 8019ebe:	f1ba 0f00 	cmp.w	sl, #0
 8019ec2:	d146      	bne.n	8019f52 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x246>
 8019ec4:	f04f 0005 	mov.w	r0, #5
 8019ec8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8019ecc:	8327      	strh	r7, [r4, #24]
 8019ece:	f80b 0008 	strb.w	r0, [fp, r8]
 8019ed2:	ee17 0a90 	vmov	r0, s15
 8019ed6:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019eda:	68e7      	ldr	r7, [r4, #12]
 8019edc:	f108 0901 	add.w	r9, r8, #1
 8019ee0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019ee4:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019ee8:	ed87 5a00 	vstr	s10, [r7]
 8019eec:	ee05 2a10 	vmov	s10, r2
 8019ef0:	4408      	add	r0, r1
 8019ef2:	ee07 0a90 	vmov	s15, r0
 8019ef6:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8019efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019efe:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019f02:	68e7      	ldr	r7, [r4, #12]
 8019f04:	f108 0901 	add.w	r9, r8, #1
 8019f08:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019f0c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019f10:	ed87 5a00 	vstr	s10, [r7]
 8019f14:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019f18:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019f1c:	68e7      	ldr	r7, [r4, #12]
 8019f1e:	f108 0901 	add.w	r9, r8, #1
 8019f22:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019f26:	441a      	add	r2, r3
 8019f28:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019f2c:	edc7 7a00 	vstr	s15, [r7]
 8019f30:	ee07 2a90 	vmov	s15, r2
 8019f34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019f38:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019f3c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019f40:	68e7      	ldr	r7, [r4, #12]
 8019f42:	f108 0901 	add.w	r9, r8, #1
 8019f46:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019f4a:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019f4e:	edc7 7a00 	vstr	s15, [r7]
 8019f52:	461a      	mov	r2, r3
 8019f54:	ee07 1a90 	vmov	s15, r1
 8019f58:	e759      	b.n	8019e0e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 8019f5a:	f1ba 0f00 	cmp.w	sl, #0
 8019f5e:	d045      	beq.n	8019fec <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 8019f60:	ee05 1a90 	vmov	s11, r1
 8019f64:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8019f68:	eef4 5a66 	vcmp.f32	s11, s13
 8019f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f70:	d108      	bne.n	8019f84 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x278>
 8019f72:	ee05 3a90 	vmov	s11, r3
 8019f76:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8019f7a:	eef4 5a47 	vcmp.f32	s11, s14
 8019f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f82:	d033      	beq.n	8019fec <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 8019f84:	9b02      	ldr	r3, [sp, #8]
 8019f86:	8327      	strh	r7, [r4, #24]
 8019f88:	b1b3      	cbz	r3, 8019fb8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2ac>
 8019f8a:	2302      	movs	r3, #2
 8019f8c:	f889 3000 	strb.w	r3, [r9]
 8019f90:	8b62      	ldrh	r2, [r4, #26]
 8019f92:	68e3      	ldr	r3, [r4, #12]
 8019f94:	1c51      	adds	r1, r2, #1
 8019f96:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8019f9a:	8361      	strh	r1, [r4, #26]
 8019f9c:	edc3 6a00 	vstr	s13, [r3]
 8019fa0:	8b62      	ldrh	r2, [r4, #26]
 8019fa2:	68e3      	ldr	r3, [r4, #12]
 8019fa4:	1c51      	adds	r1, r2, #1
 8019fa6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8019faa:	8361      	strh	r1, [r4, #26]
 8019fac:	ed83 7a00 	vstr	s14, [r3]
 8019fb0:	9800      	ldr	r0, [sp, #0]
 8019fb2:	b007      	add	sp, #28
 8019fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fb8:	2305      	movs	r3, #5
 8019fba:	f889 3000 	strb.w	r3, [r9]
 8019fbe:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8019fc2:	ee07 ea90 	vmov	s15, lr
 8019fc6:	8b62      	ldrh	r2, [r4, #26]
 8019fc8:	68e3      	ldr	r3, [r4, #12]
 8019fca:	1c51      	adds	r1, r2, #1
 8019fcc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8019fd0:	8361      	strh	r1, [r4, #26]
 8019fd2:	ed83 6a00 	vstr	s12, [r3]
 8019fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019fda:	8b62      	ldrh	r2, [r4, #26]
 8019fdc:	68e3      	ldr	r3, [r4, #12]
 8019fde:	1c51      	adds	r1, r2, #1
 8019fe0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8019fe4:	8361      	strh	r1, [r4, #26]
 8019fe6:	edc3 7a00 	vstr	s15, [r3]
 8019fea:	e7d1      	b.n	8019f90 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 8019fec:	ee05 2a90 	vmov	s11, r2
 8019ff0:	2305      	movs	r3, #5
 8019ff2:	9902      	ldr	r1, [sp, #8]
 8019ff4:	8327      	strh	r7, [r4, #24]
 8019ff6:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8019ffa:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8019ffe:	f889 3000 	strb.w	r3, [r9]
 801a002:	b181      	cbz	r1, 801a026 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x31a>
 801a004:	8b62      	ldrh	r2, [r4, #26]
 801a006:	68e3      	ldr	r3, [r4, #12]
 801a008:	1c51      	adds	r1, r2, #1
 801a00a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801a00e:	8361      	strh	r1, [r4, #26]
 801a010:	ed83 5a00 	vstr	s10, [r3]
 801a014:	8b62      	ldrh	r2, [r4, #26]
 801a016:	68e3      	ldr	r3, [r4, #12]
 801a018:	1c51      	adds	r1, r2, #1
 801a01a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801a01e:	8361      	strh	r1, [r4, #26]
 801a020:	edc3 5a00 	vstr	s11, [r3]
 801a024:	e7b4      	b.n	8019f90 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 801a026:	8b65      	ldrh	r5, [r4, #26]
 801a028:	68e1      	ldr	r1, [r4, #12]
 801a02a:	1c6e      	adds	r6, r5, #1
 801a02c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801a030:	8366      	strh	r6, [r4, #26]
 801a032:	ed81 5a00 	vstr	s10, [r1]
 801a036:	8b65      	ldrh	r5, [r4, #26]
 801a038:	68e1      	ldr	r1, [r4, #12]
 801a03a:	1c6e      	adds	r6, r5, #1
 801a03c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801a040:	8366      	strh	r6, [r4, #26]
 801a042:	edc1 5a00 	vstr	s11, [r1]
 801a046:	8b65      	ldrh	r5, [r4, #26]
 801a048:	68e1      	ldr	r1, [r4, #12]
 801a04a:	1c6e      	adds	r6, r5, #1
 801a04c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801a050:	ee17 0a90 	vmov	r0, s15
 801a054:	ee16 5a10 	vmov	r5, s12
 801a058:	4428      	add	r0, r5
 801a05a:	ee07 0a90 	vmov	s15, r0
 801a05e:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801a062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a066:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801a06a:	4472      	add	r2, lr
 801a06c:	8366      	strh	r6, [r4, #26]
 801a06e:	edc1 7a00 	vstr	s15, [r1]
 801a072:	ee07 2a90 	vmov	s15, r2
 801a076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a07a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801a07e:	8b61      	ldrh	r1, [r4, #26]
 801a080:	68e5      	ldr	r5, [r4, #12]
 801a082:	1c4e      	adds	r6, r1, #1
 801a084:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801a088:	8366      	strh	r6, [r4, #26]
 801a08a:	edc1 7a00 	vstr	s15, [r1]
 801a08e:	8b22      	ldrh	r2, [r4, #24]
 801a090:	68a1      	ldr	r1, [r4, #8]
 801a092:	1c55      	adds	r5, r2, #1
 801a094:	8325      	strh	r5, [r4, #24]
 801a096:	548b      	strb	r3, [r1, r2]
 801a098:	e791      	b.n	8019fbe <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2b2>
	...

0801a09c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 801a09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0a0:	b08e      	sub	sp, #56	@ 0x38
 801a0a2:	4604      	mov	r4, r0
 801a0a4:	4688      	mov	r8, r1
 801a0a6:	4615      	mov	r5, r2
 801a0a8:	4699      	mov	r9, r3
 801a0aa:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801a0ac:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 801a0b0:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801a0b2:	f7f9 fc6f 	bl	8013994 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 801a0b6:	6060      	str	r0, [r4, #4]
 801a0b8:	f1b9 0f00 	cmp.w	r9, #0
 801a0bc:	f000 80e8 	beq.w	801a290 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801a0c0:	2800      	cmp	r0, #0
 801a0c2:	f000 80e5 	beq.w	801a290 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801a0c6:	a805      	add	r0, sp, #20
 801a0c8:	f000 f8f9 	bl	801a2be <_ZN8touchgfx9Matrix3x3C1Ev>
 801a0cc:	6833      	ldr	r3, [r6, #0]
 801a0ce:	4630      	mov	r0, r6
 801a0d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a0d2:	4798      	blx	r3
 801a0d4:	a805      	add	r0, sp, #20
 801a0d6:	eef0 0a40 	vmov.f32	s1, s0
 801a0da:	f000 f8f4 	bl	801a2c6 <_ZN8touchgfx9Matrix3x35scaleEff>
 801a0de:	6860      	ldr	r0, [r4, #4]
 801a0e0:	f1ba 0f03 	cmp.w	sl, #3
 801a0e4:	d83b      	bhi.n	801a15e <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801a0e6:	e8df f00a 	tbb	[pc, sl]
 801a0ea:	1002      	.short	0x1002
 801a0ec:	9f71      	.short	0x9f71
 801a0ee:	6803      	ldr	r3, [r0, #0]
 801a0f0:	462a      	mov	r2, r5
 801a0f2:	689b      	ldr	r3, [r3, #8]
 801a0f4:	4641      	mov	r1, r8
 801a0f6:	4798      	blx	r3
 801a0f8:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801a0fc:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801a100:	ee07 7a90 	vmov	s15, r7
 801a104:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801a108:	e026      	b.n	801a158 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801a10a:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801a10e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801a112:	8869      	ldrh	r1, [r5, #2]
 801a114:	1a9b      	subs	r3, r3, r2
 801a116:	1a5b      	subs	r3, r3, r1
 801a118:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a11c:	882b      	ldrh	r3, [r5, #0]
 801a11e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a122:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a126:	88ab      	ldrh	r3, [r5, #4]
 801a128:	aa03      	add	r2, sp, #12
 801a12a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a12e:	6803      	ldr	r3, [r0, #0]
 801a130:	4641      	mov	r1, r8
 801a132:	689b      	ldr	r3, [r3, #8]
 801a134:	4798      	blx	r3
 801a136:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 801a298 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 801a13a:	a805      	add	r0, sp, #20
 801a13c:	f000 f8e8 	bl	801a310 <_ZN8touchgfx9Matrix3x36rotateEf>
 801a140:	ee07 7a90 	vmov	s15, r7
 801a144:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801a148:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801a14a:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801a14e:	1a9b      	subs	r3, r3, r2
 801a150:	ee00 3a10 	vmov	s0, r3
 801a154:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a158:	a805      	add	r0, sp, #20
 801a15a:	f000 f927 	bl	801a3ac <_ZN8touchgfx9Matrix3x39translateEff>
 801a15e:	2500      	movs	r5, #0
 801a160:	6860      	ldr	r0, [r4, #4]
 801a162:	a905      	add	r1, sp, #20
 801a164:	6803      	ldr	r3, [r0, #0]
 801a166:	f109 0602 	add.w	r6, r9, #2
 801a16a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a16c:	4798      	blx	r3
 801a16e:	6860      	ldr	r0, [r4, #4]
 801a170:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801a172:	6803      	ldr	r3, [r0, #0]
 801a174:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 801a178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a17a:	4798      	blx	r3
 801a17c:	6860      	ldr	r0, [r4, #4]
 801a17e:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 801a182:	6803      	ldr	r3, [r0, #0]
 801a184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a186:	4798      	blx	r3
 801a188:	6860      	ldr	r0, [r4, #4]
 801a18a:	2101      	movs	r1, #1
 801a18c:	6803      	ldr	r3, [r0, #0]
 801a18e:	68db      	ldr	r3, [r3, #12]
 801a190:	4798      	blx	r3
 801a192:	f8b9 7000 	ldrh.w	r7, [r9]
 801a196:	f104 0310 	add.w	r3, r4, #16
 801a19a:	61a5      	str	r5, [r4, #24]
 801a19c:	f104 0208 	add.w	r2, r4, #8
 801a1a0:	f104 0114 	add.w	r1, r4, #20
 801a1a4:	f104 000c 	add.w	r0, r4, #12
 801a1a8:	f7f5 fb72 	bl	800f890 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 801a1ac:	42af      	cmp	r7, r5
 801a1ae:	dd60      	ble.n	801a272 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 801a1b0:	8831      	ldrh	r1, [r6, #0]
 801a1b2:	1cb2      	adds	r2, r6, #2
 801a1b4:	f101 030f 	add.w	r3, r1, #15
 801a1b8:	f3c3 1307 	ubfx	r3, r3, #4, #8
 801a1bc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801a1c0:	4620      	mov	r0, r4
 801a1c2:	f7ff fda3 	bl	8019d0c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 801a1c6:	3501      	adds	r5, #1
 801a1c8:	4606      	mov	r6, r0
 801a1ca:	e7ef      	b.n	801a1ac <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 801a1cc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801a1d0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801a1d4:	8829      	ldrh	r1, [r5, #0]
 801a1d6:	1a9b      	subs	r3, r3, r2
 801a1d8:	1a5b      	subs	r3, r3, r1
 801a1da:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a1de:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a1e2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801a1e6:	886d      	ldrh	r5, [r5, #2]
 801a1e8:	1a5b      	subs	r3, r3, r1
 801a1ea:	1b5b      	subs	r3, r3, r5
 801a1ec:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a1f0:	f8ad 1012 	strh.w	r1, [sp, #18]
 801a1f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a1f8:	6803      	ldr	r3, [r0, #0]
 801a1fa:	aa03      	add	r2, sp, #12
 801a1fc:	689b      	ldr	r3, [r3, #8]
 801a1fe:	4641      	mov	r1, r8
 801a200:	4798      	blx	r3
 801a202:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 801a29c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801a206:	a805      	add	r0, sp, #20
 801a208:	f000 f882 	bl	801a310 <_ZN8touchgfx9Matrix3x36rotateEf>
 801a20c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801a210:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801a212:	1a9b      	subs	r3, r3, r2
 801a214:	ee00 3a90 	vmov	s1, r3
 801a218:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801a21c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a220:	1bdb      	subs	r3, r3, r7
 801a222:	ee00 3a10 	vmov	s0, r3
 801a226:	e795      	b.n	801a154 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 801a228:	886b      	ldrh	r3, [r5, #2]
 801a22a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801a22e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a232:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801a236:	8829      	ldrh	r1, [r5, #0]
 801a238:	1a9b      	subs	r3, r3, r2
 801a23a:	1a5b      	subs	r3, r3, r1
 801a23c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a240:	88eb      	ldrh	r3, [r5, #6]
 801a242:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a246:	f8ad 3010 	strh.w	r3, [sp, #16]
 801a24a:	6803      	ldr	r3, [r0, #0]
 801a24c:	aa03      	add	r2, sp, #12
 801a24e:	689b      	ldr	r3, [r3, #8]
 801a250:	4641      	mov	r1, r8
 801a252:	4798      	blx	r3
 801a254:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 801a2a0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 801a258:	a805      	add	r0, sp, #20
 801a25a:	f000 f859 	bl	801a310 <_ZN8touchgfx9Matrix3x36rotateEf>
 801a25e:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801a262:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801a266:	1bdb      	subs	r3, r3, r7
 801a268:	ee00 3a90 	vmov	s1, r3
 801a26c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a270:	e748      	b.n	801a104 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 801a272:	2100      	movs	r1, #0
 801a274:	6860      	ldr	r0, [r4, #4]
 801a276:	8b22      	ldrh	r2, [r4, #24]
 801a278:	6803      	ldr	r3, [r0, #0]
 801a27a:	9101      	str	r1, [sp, #4]
 801a27c:	8b61      	ldrh	r1, [r4, #26]
 801a27e:	9100      	str	r1, [sp, #0]
 801a280:	6a1d      	ldr	r5, [r3, #32]
 801a282:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801a286:	47a8      	blx	r5
 801a288:	6860      	ldr	r0, [r4, #4]
 801a28a:	6803      	ldr	r3, [r0, #0]
 801a28c:	69db      	ldr	r3, [r3, #28]
 801a28e:	4798      	blx	r3
 801a290:	b00e      	add	sp, #56	@ 0x38
 801a292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a296:	bf00      	nop
 801a298:	42b40000 	.word	0x42b40000
 801a29c:	43340000 	.word	0x43340000
 801a2a0:	43870000 	.word	0x43870000

0801a2a4 <_ZN8touchgfx9Matrix3x35resetEv>:
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801a2aa:	6043      	str	r3, [r0, #4]
 801a2ac:	6002      	str	r2, [r0, #0]
 801a2ae:	6083      	str	r3, [r0, #8]
 801a2b0:	60c3      	str	r3, [r0, #12]
 801a2b2:	6102      	str	r2, [r0, #16]
 801a2b4:	6143      	str	r3, [r0, #20]
 801a2b6:	6183      	str	r3, [r0, #24]
 801a2b8:	61c3      	str	r3, [r0, #28]
 801a2ba:	6202      	str	r2, [r0, #32]
 801a2bc:	4770      	bx	lr

0801a2be <_ZN8touchgfx9Matrix3x3C1Ev>:
 801a2be:	b508      	push	{r3, lr}
 801a2c0:	f7ff fff0 	bl	801a2a4 <_ZN8touchgfx9Matrix3x35resetEv>
 801a2c4:	bd08      	pop	{r3, pc}

0801a2c6 <_ZN8touchgfx9Matrix3x35scaleEff>:
 801a2c6:	edd0 7a00 	vldr	s15, [r0]
 801a2ca:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a2ce:	edc0 7a00 	vstr	s15, [r0]
 801a2d2:	edd0 7a01 	vldr	s15, [r0, #4]
 801a2d6:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a2da:	edc0 7a01 	vstr	s15, [r0, #4]
 801a2de:	edd0 7a02 	vldr	s15, [r0, #8]
 801a2e2:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a2e6:	edd0 7a03 	vldr	s15, [r0, #12]
 801a2ea:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801a2ee:	edc0 7a03 	vstr	s15, [r0, #12]
 801a2f2:	edd0 7a04 	vldr	s15, [r0, #16]
 801a2f6:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801a2fa:	edc0 7a04 	vstr	s15, [r0, #16]
 801a2fe:	edd0 7a05 	vldr	s15, [r0, #20]
 801a302:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801a306:	ed80 0a02 	vstr	s0, [r0, #8]
 801a30a:	edc0 0a05 	vstr	s1, [r0, #20]
 801a30e:	4770      	bx	lr

0801a310 <_ZN8touchgfx9Matrix3x36rotateEf>:
 801a310:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801a3a4 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 801a314:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a318:	eddf 7a23 	vldr	s15, [pc, #140]	@ 801a3a8 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 801a31c:	b510      	push	{r4, lr}
 801a31e:	ed2d 8b02 	vpush	{d8}
 801a322:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801a326:	eeb0 0a68 	vmov.f32	s0, s17
 801a32a:	4604      	mov	r4, r0
 801a32c:	f010 fc96 	bl	802ac5c <cosf>
 801a330:	eeb0 8a40 	vmov.f32	s16, s0
 801a334:	eeb0 0a68 	vmov.f32	s0, s17
 801a338:	f010 fcd4 	bl	802ace4 <sinf>
 801a33c:	edd4 6a03 	vldr	s13, [r4, #12]
 801a340:	edd4 4a00 	vldr	s9, [r4]
 801a344:	ee60 7a66 	vnmul.f32	s15, s0, s13
 801a348:	ed94 7a04 	vldr	s14, [r4, #16]
 801a34c:	eee8 7a24 	vfma.f32	s15, s16, s9
 801a350:	ed94 5a01 	vldr	s10, [r4, #4]
 801a354:	edc4 7a00 	vstr	s15, [r4]
 801a358:	ee60 7a47 	vnmul.f32	s15, s0, s14
 801a35c:	eee8 7a05 	vfma.f32	s15, s16, s10
 801a360:	edc4 7a01 	vstr	s15, [r4, #4]
 801a364:	edd4 7a05 	vldr	s15, [r4, #20]
 801a368:	edd4 5a02 	vldr	s11, [r4, #8]
 801a36c:	ee20 6a67 	vnmul.f32	s12, s0, s15
 801a370:	ee66 6a88 	vmul.f32	s13, s13, s16
 801a374:	ee27 7a08 	vmul.f32	s14, s14, s16
 801a378:	ee67 7a88 	vmul.f32	s15, s15, s16
 801a37c:	eea8 6a25 	vfma.f32	s12, s16, s11
 801a380:	ecbd 8b02 	vpop	{d8}
 801a384:	eee0 6a24 	vfma.f32	s13, s0, s9
 801a388:	eea0 7a05 	vfma.f32	s14, s0, s10
 801a38c:	eee0 7a25 	vfma.f32	s15, s0, s11
 801a390:	ed84 6a02 	vstr	s12, [r4, #8]
 801a394:	edc4 6a03 	vstr	s13, [r4, #12]
 801a398:	ed84 7a04 	vstr	s14, [r4, #16]
 801a39c:	edc4 7a05 	vstr	s15, [r4, #20]
 801a3a0:	bd10      	pop	{r4, pc}
 801a3a2:	bf00      	nop
 801a3a4:	40490fdb 	.word	0x40490fdb
 801a3a8:	43340000 	.word	0x43340000

0801a3ac <_ZN8touchgfx9Matrix3x39translateEff>:
 801a3ac:	ed90 6a06 	vldr	s12, [r0, #24]
 801a3b0:	edd0 7a00 	vldr	s15, [r0]
 801a3b4:	eee6 7a00 	vfma.f32	s15, s12, s0
 801a3b8:	edd0 6a07 	vldr	s13, [r0, #28]
 801a3bc:	edc0 7a00 	vstr	s15, [r0]
 801a3c0:	edd0 7a01 	vldr	s15, [r0, #4]
 801a3c4:	eee6 7a80 	vfma.f32	s15, s13, s0
 801a3c8:	ed90 7a08 	vldr	s14, [r0, #32]
 801a3cc:	edc0 7a01 	vstr	s15, [r0, #4]
 801a3d0:	edd0 7a02 	vldr	s15, [r0, #8]
 801a3d4:	eee7 7a00 	vfma.f32	s15, s14, s0
 801a3d8:	edc0 7a02 	vstr	s15, [r0, #8]
 801a3dc:	edd0 7a03 	vldr	s15, [r0, #12]
 801a3e0:	eee6 7a20 	vfma.f32	s15, s12, s1
 801a3e4:	edc0 7a03 	vstr	s15, [r0, #12]
 801a3e8:	edd0 7a04 	vldr	s15, [r0, #16]
 801a3ec:	eee6 7aa0 	vfma.f32	s15, s13, s1
 801a3f0:	edc0 7a04 	vstr	s15, [r0, #16]
 801a3f4:	edd0 7a05 	vldr	s15, [r0, #20]
 801a3f8:	eee7 7a20 	vfma.f32	s15, s14, s1
 801a3fc:	edc0 7a05 	vstr	s15, [r0, #20]
 801a400:	4770      	bx	lr

0801a402 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 801a402:	edd0 6a01 	vldr	s13, [r0, #4]
 801a406:	edd0 7a04 	vldr	s15, [r0, #16]
 801a40a:	ed90 7a03 	vldr	s14, [r0, #12]
 801a40e:	ee60 7aa7 	vmul.f32	s15, s1, s15
 801a412:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801a416:	edd0 6a00 	vldr	s13, [r0]
 801a41a:	eee7 7a00 	vfma.f32	s15, s14, s0
 801a41e:	eee6 0a80 	vfma.f32	s1, s13, s0
 801a422:	ed90 7a05 	vldr	s14, [r0, #20]
 801a426:	ed90 0a02 	vldr	s0, [r0, #8]
 801a42a:	ee30 0a80 	vadd.f32	s0, s1, s0
 801a42e:	ee77 0a87 	vadd.f32	s1, s15, s14
 801a432:	b084      	sub	sp, #16
 801a434:	b004      	add	sp, #16
 801a436:	4770      	bx	lr

0801a438 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801a438:	b530      	push	{r4, r5, lr}
 801a43a:	8083      	strh	r3, [r0, #4]
 801a43c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801a440:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801a444:	80c3      	strh	r3, [r0, #6]
 801a446:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801a44a:	6141      	str	r1, [r0, #20]
 801a44c:	7203      	strb	r3, [r0, #8]
 801a44e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a452:	8302      	strh	r2, [r0, #24]
 801a454:	7243      	strb	r3, [r0, #9]
 801a456:	7a83      	ldrb	r3, [r0, #10]
 801a458:	f365 0306 	bfi	r3, r5, #0, #7
 801a45c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801a460:	f365 13c7 	bfi	r3, r5, #7, #1
 801a464:	7283      	strb	r3, [r0, #10]
 801a466:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801a46a:	72c3      	strb	r3, [r0, #11]
 801a46c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801a470:	7303      	strb	r3, [r0, #12]
 801a472:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801a476:	81c3      	strh	r3, [r0, #14]
 801a478:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801a47c:	8203      	strh	r3, [r0, #16]
 801a47e:	4b01      	ldr	r3, [pc, #4]	@ (801a484 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801a480:	6003      	str	r3, [r0, #0]
 801a482:	bd30      	pop	{r4, r5, pc}
 801a484:	0802e788 	.word	0x0802e788

0801a488 <_ZNK8touchgfx9ConstFont4findEt>:
 801a488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a48a:	6944      	ldr	r4, [r0, #20]
 801a48c:	b3bc      	cbz	r4, 801a4fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a48e:	88a3      	ldrh	r3, [r4, #4]
 801a490:	8b02      	ldrh	r2, [r0, #24]
 801a492:	1acb      	subs	r3, r1, r3
 801a494:	f102 32ff 	add.w	r2, r2, #4294967295
 801a498:	d431      	bmi.n	801a4fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a49a:	4293      	cmp	r3, r2
 801a49c:	dd0c      	ble.n	801a4b8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801a49e:	230e      	movs	r3, #14
 801a4a0:	fb03 4302 	mla	r3, r3, r2, r4
 801a4a4:	889b      	ldrh	r3, [r3, #4]
 801a4a6:	1a5b      	subs	r3, r3, r1
 801a4a8:	1ad3      	subs	r3, r2, r3
 801a4aa:	429a      	cmp	r2, r3
 801a4ac:	db27      	blt.n	801a4fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	bfbc      	itt	lt
 801a4b2:	2302      	movlt	r3, #2
 801a4b4:	fb92 f3f3 	sdivlt	r3, r2, r3
 801a4b8:	2500      	movs	r5, #0
 801a4ba:	260e      	movs	r6, #14
 801a4bc:	4295      	cmp	r5, r2
 801a4be:	dc1e      	bgt.n	801a4fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a4c0:	fb06 4003 	mla	r0, r6, r3, r4
 801a4c4:	8887      	ldrh	r7, [r0, #4]
 801a4c6:	42b9      	cmp	r1, r7
 801a4c8:	d01a      	beq.n	801a500 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801a4ca:	d20d      	bcs.n	801a4e8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801a4cc:	1e5a      	subs	r2, r3, #1
 801a4ce:	4295      	cmp	r5, r2
 801a4d0:	dc15      	bgt.n	801a4fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a4d2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801a4d6:	1a5b      	subs	r3, r3, r1
 801a4d8:	1ad3      	subs	r3, r2, r3
 801a4da:	429a      	cmp	r2, r3
 801a4dc:	db0f      	blt.n	801a4fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a4de:	429d      	cmp	r5, r3
 801a4e0:	ddec      	ble.n	801a4bc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a4e2:	1953      	adds	r3, r2, r5
 801a4e4:	105b      	asrs	r3, r3, #1
 801a4e6:	e7e9      	b.n	801a4bc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a4e8:	1c5d      	adds	r5, r3, #1
 801a4ea:	42aa      	cmp	r2, r5
 801a4ec:	db07      	blt.n	801a4fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a4ee:	8a43      	ldrh	r3, [r0, #18]
 801a4f0:	1acb      	subs	r3, r1, r3
 801a4f2:	442b      	add	r3, r5
 801a4f4:	429d      	cmp	r5, r3
 801a4f6:	dc02      	bgt.n	801a4fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a4f8:	429a      	cmp	r2, r3
 801a4fa:	dadf      	bge.n	801a4bc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a4fc:	e7f1      	b.n	801a4e2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801a4fe:	2000      	movs	r0, #0
 801a500:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a502 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801a502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a504:	4604      	mov	r4, r0
 801a506:	4617      	mov	r7, r2
 801a508:	461e      	mov	r6, r3
 801a50a:	b911      	cbnz	r1, 801a512 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801a50c:	2500      	movs	r5, #0
 801a50e:	4628      	mov	r0, r5
 801a510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a512:	290a      	cmp	r1, #10
 801a514:	d0fa      	beq.n	801a50c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a516:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801a51a:	4291      	cmp	r1, r2
 801a51c:	d0f6      	beq.n	801a50c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a51e:	f242 020b 	movw	r2, #8203	@ 0x200b
 801a522:	4291      	cmp	r1, r2
 801a524:	d0f2      	beq.n	801a50c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a526:	f7ff ffaf 	bl	801a488 <_ZNK8touchgfx9ConstFont4findEt>
 801a52a:	4605      	mov	r5, r0
 801a52c:	b950      	cbnz	r0, 801a544 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801a52e:	6823      	ldr	r3, [r4, #0]
 801a530:	4620      	mov	r0, r4
 801a532:	691b      	ldr	r3, [r3, #16]
 801a534:	4798      	blx	r3
 801a536:	4601      	mov	r1, r0
 801a538:	4620      	mov	r0, r4
 801a53a:	f7ff ffa5 	bl	801a488 <_ZNK8touchgfx9ConstFont4findEt>
 801a53e:	4605      	mov	r5, r0
 801a540:	2800      	cmp	r0, #0
 801a542:	d0e3      	beq.n	801a50c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a544:	6823      	ldr	r3, [r4, #0]
 801a546:	4629      	mov	r1, r5
 801a548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a54a:	4620      	mov	r0, r4
 801a54c:	4798      	blx	r3
 801a54e:	6038      	str	r0, [r7, #0]
 801a550:	6823      	ldr	r3, [r4, #0]
 801a552:	4620      	mov	r0, r4
 801a554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a556:	4798      	blx	r3
 801a558:	7030      	strb	r0, [r6, #0]
 801a55a:	e7d8      	b.n	801a50e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801a55c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801a55c:	2000      	movs	r0, #0
 801a55e:	4770      	bx	lr

0801a560 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801a560:	2001      	movs	r0, #1
 801a562:	4770      	bx	lr

0801a564 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801a564:	2002      	movs	r0, #2
 801a566:	4770      	bx	lr

0801a568 <_ZN8touchgfx12GestureEventD1Ev>:
 801a568:	4770      	bx	lr

0801a56a <_ZN8touchgfx9DragEventD1Ev>:
 801a56a:	4770      	bx	lr

0801a56c <_ZN8touchgfx10ClickEventD1Ev>:
 801a56c:	4770      	bx	lr

0801a56e <_ZN8touchgfx10ClickEventD0Ev>:
 801a56e:	b510      	push	{r4, lr}
 801a570:	4604      	mov	r4, r0
 801a572:	210c      	movs	r1, #12
 801a574:	f010 fb2b 	bl	802abce <_ZdlPvj>
 801a578:	4620      	mov	r0, r4
 801a57a:	bd10      	pop	{r4, pc}

0801a57c <_ZN8touchgfx9DragEventD0Ev>:
 801a57c:	b510      	push	{r4, lr}
 801a57e:	4604      	mov	r4, r0
 801a580:	2110      	movs	r1, #16
 801a582:	f010 fb24 	bl	802abce <_ZdlPvj>
 801a586:	4620      	mov	r0, r4
 801a588:	bd10      	pop	{r4, pc}

0801a58a <_ZN8touchgfx12GestureEventD0Ev>:
 801a58a:	b510      	push	{r4, lr}
 801a58c:	4604      	mov	r4, r0
 801a58e:	210c      	movs	r1, #12
 801a590:	f010 fb1d 	bl	802abce <_ZdlPvj>
 801a594:	4620      	mov	r0, r4
 801a596:	bd10      	pop	{r4, pc}

0801a598 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801a598:	b530      	push	{r4, r5, lr}
 801a59a:	460d      	mov	r5, r1
 801a59c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801a59e:	b087      	sub	sp, #28
 801a5a0:	4604      	mov	r4, r0
 801a5a2:	b301      	cbz	r1, 801a5e6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801a5a4:	a801      	add	r0, sp, #4
 801a5a6:	f7ff fb93 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a5aa:	892a      	ldrh	r2, [r5, #8]
 801a5ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a5b0:	7928      	ldrb	r0, [r5, #4]
 801a5b2:	1ad2      	subs	r2, r2, r3
 801a5b4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801a5b6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a5ba:	441a      	add	r2, r3
 801a5bc:	896b      	ldrh	r3, [r5, #10]
 801a5be:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801a5c2:	f88d 0010 	strb.w	r0, [sp, #16]
 801a5c6:	1b5b      	subs	r3, r3, r5
 801a5c8:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801a5ca:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801a5cc:	442b      	add	r3, r5
 801a5ce:	4d07      	ldr	r5, [pc, #28]	@ (801a5ec <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801a5d0:	f8ad 1012 	strh.w	r1, [sp, #18]
 801a5d4:	9503      	str	r5, [sp, #12]
 801a5d6:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a5da:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a5de:	6803      	ldr	r3, [r0, #0]
 801a5e0:	a903      	add	r1, sp, #12
 801a5e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a5e4:	4798      	blx	r3
 801a5e6:	b007      	add	sp, #28
 801a5e8:	bd30      	pop	{r4, r5, pc}
 801a5ea:	bf00      	nop
 801a5ec:	0802e818 	.word	0x0802e818

0801a5f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801a5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5f4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a5f6:	b08a      	sub	sp, #40	@ 0x28
 801a5f8:	4604      	mov	r4, r0
 801a5fa:	460d      	mov	r5, r1
 801a5fc:	b113      	cbz	r3, 801a604 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801a5fe:	790b      	ldrb	r3, [r1, #4]
 801a600:	2b00      	cmp	r3, #0
 801a602:	d044      	beq.n	801a68e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a604:	f104 0804 	add.w	r8, r4, #4
 801a608:	4641      	mov	r1, r8
 801a60a:	a803      	add	r0, sp, #12
 801a60c:	f7ff fb60 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a610:	792b      	ldrb	r3, [r5, #4]
 801a612:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801a616:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801a61a:	b983      	cbnz	r3, 801a63e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801a61c:	892a      	ldrh	r2, [r5, #8]
 801a61e:	88e9      	ldrh	r1, [r5, #6]
 801a620:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801a624:	1b92      	subs	r2, r2, r6
 801a626:	1bc9      	subs	r1, r1, r7
 801a628:	9301      	str	r3, [sp, #4]
 801a62a:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801a62e:	9300      	str	r3, [sp, #0]
 801a630:	b212      	sxth	r2, r2
 801a632:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801a636:	b209      	sxth	r1, r1
 801a638:	4640      	mov	r0, r8
 801a63a:	f7f9 fbb9 	bl	8013db0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801a63e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a640:	b329      	cbz	r1, 801a68e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a642:	a805      	add	r0, sp, #20
 801a644:	f7ff fb44 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a648:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801a64c:	792b      	ldrb	r3, [r5, #4]
 801a64e:	1abf      	subs	r7, r7, r2
 801a650:	88ea      	ldrh	r2, [r5, #6]
 801a652:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801a654:	4417      	add	r7, r2
 801a656:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801a658:	f88d 3020 	strb.w	r3, [sp, #32]
 801a65c:	4417      	add	r7, r2
 801a65e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801a662:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801a666:	1ab6      	subs	r6, r6, r2
 801a668:	892a      	ldrh	r2, [r5, #8]
 801a66a:	a907      	add	r1, sp, #28
 801a66c:	4416      	add	r6, r2
 801a66e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801a670:	4416      	add	r6, r2
 801a672:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801a676:	2600      	movs	r6, #0
 801a678:	4a06      	ldr	r2, [pc, #24]	@ (801a694 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801a67a:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801a67e:	9207      	str	r2, [sp, #28]
 801a680:	6803      	ldr	r3, [r0, #0]
 801a682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a684:	4798      	blx	r3
 801a686:	792b      	ldrb	r3, [r5, #4]
 801a688:	b10b      	cbz	r3, 801a68e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a68a:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801a68e:	b00a      	add	sp, #40	@ 0x28
 801a690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a694:	0802e7f0 	.word	0x0802e7f0

0801a698 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801a698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a69c:	460c      	mov	r4, r1
 801a69e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801a6a0:	b088      	sub	sp, #32
 801a6a2:	4605      	mov	r5, r0
 801a6a4:	2900      	cmp	r1, #0
 801a6a6:	d06d      	beq.n	801a784 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801a6a8:	4668      	mov	r0, sp
 801a6aa:	f7ff fb11 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a6ae:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801a6b0:	88e3      	ldrh	r3, [r4, #6]
 801a6b2:	f9bd 8000 	ldrsh.w	r8, [sp]
 801a6b6:	440b      	add	r3, r1
 801a6b8:	b21b      	sxth	r3, r3
 801a6ba:	4543      	cmp	r3, r8
 801a6bc:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801a6c0:	db31      	blt.n	801a726 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a6c2:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801a6c6:	44c4      	add	ip, r8
 801a6c8:	fa0f fc8c 	sxth.w	ip, ip
 801a6cc:	4563      	cmp	r3, ip
 801a6ce:	da2a      	bge.n	801a726 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a6d0:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801a6d2:	8926      	ldrh	r6, [r4, #8]
 801a6d4:	4416      	add	r6, r2
 801a6d6:	b236      	sxth	r6, r6
 801a6d8:	42be      	cmp	r6, r7
 801a6da:	db24      	blt.n	801a726 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a6dc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801a6e0:	4438      	add	r0, r7
 801a6e2:	b200      	sxth	r0, r0
 801a6e4:	4286      	cmp	r6, r0
 801a6e6:	da1e      	bge.n	801a726 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a6e8:	8963      	ldrh	r3, [r4, #10]
 801a6ea:	4419      	add	r1, r3
 801a6ec:	b209      	sxth	r1, r1
 801a6ee:	4541      	cmp	r1, r8
 801a6f0:	db08      	blt.n	801a704 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a6f2:	4561      	cmp	r1, ip
 801a6f4:	da06      	bge.n	801a704 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a6f6:	89a3      	ldrh	r3, [r4, #12]
 801a6f8:	441a      	add	r2, r3
 801a6fa:	b212      	sxth	r2, r2
 801a6fc:	42ba      	cmp	r2, r7
 801a6fe:	db01      	blt.n	801a704 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a700:	4282      	cmp	r2, r0
 801a702:	db10      	blt.n	801a726 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a704:	4b21      	ldr	r3, [pc, #132]	@ (801a78c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801a706:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801a708:	9304      	str	r3, [sp, #16]
 801a70a:	2302      	movs	r3, #2
 801a70c:	f88d 3014 	strb.w	r3, [sp, #20]
 801a710:	2300      	movs	r3, #0
 801a712:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a716:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a71a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a71e:	6803      	ldr	r3, [r0, #0]
 801a720:	a904      	add	r1, sp, #16
 801a722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a724:	4798      	blx	r3
 801a726:	1d29      	adds	r1, r5, #4
 801a728:	a802      	add	r0, sp, #8
 801a72a:	f7ff fad1 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a72e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a732:	88e0      	ldrh	r0, [r4, #6]
 801a734:	eba3 0808 	sub.w	r8, r3, r8
 801a738:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a73c:	7921      	ldrb	r1, [r4, #4]
 801a73e:	1bdf      	subs	r7, r3, r7
 801a740:	b2bb      	uxth	r3, r7
 801a742:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801a746:	fa1f f888 	uxth.w	r8, r8
 801a74a:	8922      	ldrh	r2, [r4, #8]
 801a74c:	8967      	ldrh	r7, [r4, #10]
 801a74e:	89a4      	ldrh	r4, [r4, #12]
 801a750:	4440      	add	r0, r8
 801a752:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801a754:	4460      	add	r0, ip
 801a756:	441a      	add	r2, r3
 801a758:	44b8      	add	r8, r7
 801a75a:	4423      	add	r3, r4
 801a75c:	4c0c      	ldr	r4, [pc, #48]	@ (801a790 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801a75e:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a762:	4433      	add	r3, r6
 801a764:	4432      	add	r2, r6
 801a766:	44e0      	add	r8, ip
 801a768:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801a76a:	f88d 1014 	strb.w	r1, [sp, #20]
 801a76e:	9404      	str	r4, [sp, #16]
 801a770:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a774:	f8ad 801a 	strh.w	r8, [sp, #26]
 801a778:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a77c:	6803      	ldr	r3, [r0, #0]
 801a77e:	a904      	add	r1, sp, #16
 801a780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a782:	4798      	blx	r3
 801a784:	b008      	add	sp, #32
 801a786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a78a:	bf00      	nop
 801a78c:	0802e7f0 	.word	0x0802e7f0
 801a790:	0802e804 	.word	0x0802e804

0801a794 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a796:	4604      	mov	r4, r0
 801a798:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a79c:	3201      	adds	r2, #1
 801a79e:	d112      	bne.n	801a7c6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a7a0:	2500      	movs	r5, #0
 801a7a2:	9500      	str	r5, [sp, #0]
 801a7a4:	466d      	mov	r5, sp
 801a7a6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a7aa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a7ae:	6803      	ldr	r3, [r0, #0]
 801a7b0:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a7b4:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a7b8:	4629      	mov	r1, r5
 801a7ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a7bc:	4798      	blx	r3
 801a7be:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a7c2:	e884 0003 	stmia.w	r4, {r0, r1}
 801a7c6:	4620      	mov	r0, r4
 801a7c8:	b003      	add	sp, #12
 801a7ca:	bd30      	pop	{r4, r5, pc}

0801a7cc <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a7cc:	b513      	push	{r0, r1, r4, lr}
 801a7ce:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a7d2:	4604      	mov	r4, r0
 801a7d4:	3301      	adds	r3, #1
 801a7d6:	d109      	bne.n	801a7ec <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a7d8:	4601      	mov	r1, r0
 801a7da:	4668      	mov	r0, sp
 801a7dc:	f7ff fa78 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a7e0:	f8bd 3000 	ldrh.w	r3, [sp]
 801a7e4:	8423      	strh	r3, [r4, #32]
 801a7e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a7ea:	8463      	strh	r3, [r4, #34]	@ 0x22
 801a7ec:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a7f0:	b002      	add	sp, #8
 801a7f2:	bd10      	pop	{r4, pc}

0801a7f4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a7f4:	b513      	push	{r0, r1, r4, lr}
 801a7f6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801a7fa:	4604      	mov	r4, r0
 801a7fc:	3301      	adds	r3, #1
 801a7fe:	d109      	bne.n	801a814 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a800:	4601      	mov	r1, r0
 801a802:	4668      	mov	r0, sp
 801a804:	f7ff fa64 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a808:	f8bd 3000 	ldrh.w	r3, [sp]
 801a80c:	8423      	strh	r3, [r4, #32]
 801a80e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a812:	8463      	strh	r3, [r4, #34]	@ 0x22
 801a814:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801a818:	b002      	add	sp, #8
 801a81a:	bd10      	pop	{r4, pc}

0801a81c <_ZN8touchgfx6ScreenC1Ev>:
 801a81c:	b570      	push	{r4, r5, r6, lr}
 801a81e:	4605      	mov	r5, r0
 801a820:	4b16      	ldr	r3, [pc, #88]	@ (801a87c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801a822:	2101      	movs	r1, #1
 801a824:	f845 3b04 	str.w	r3, [r5], #4
 801a828:	2300      	movs	r3, #0
 801a82a:	4604      	mov	r4, r0
 801a82c:	8103      	strh	r3, [r0, #8]
 801a82e:	8143      	strh	r3, [r0, #10]
 801a830:	8183      	strh	r3, [r0, #12]
 801a832:	81c3      	strh	r3, [r0, #14]
 801a834:	8203      	strh	r3, [r0, #16]
 801a836:	8243      	strh	r3, [r0, #18]
 801a838:	8283      	strh	r3, [r0, #20]
 801a83a:	82c3      	strh	r3, [r0, #22]
 801a83c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801a840:	6203      	str	r3, [r0, #32]
 801a842:	8483      	strh	r3, [r0, #36]	@ 0x24
 801a844:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801a846:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801a84a:	4a0d      	ldr	r2, [pc, #52]	@ (801a880 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a84c:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801a850:	6343      	str	r3, [r0, #52]	@ 0x34
 801a852:	4b0c      	ldr	r3, [pc, #48]	@ (801a884 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a854:	6042      	str	r2, [r0, #4]
 801a856:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a85a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801a85c:	4a0a      	ldr	r2, [pc, #40]	@ (801a888 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a85e:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801a862:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801a866:	f9b2 1000 	ldrsh.w	r1, [r2]
 801a86a:	4628      	mov	r0, r5
 801a86c:	4798      	blx	r3
 801a86e:	6863      	ldr	r3, [r4, #4]
 801a870:	4628      	mov	r0, r5
 801a872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a874:	4631      	mov	r1, r6
 801a876:	4798      	blx	r3
 801a878:	4620      	mov	r0, r4
 801a87a:	bd70      	pop	{r4, r5, r6, pc}
 801a87c:	0802e82c 	.word	0x0802e82c
 801a880:	0802e250 	.word	0x0802e250
 801a884:	2005b91e 	.word	0x2005b91e
 801a888:	2005b91c 	.word	0x2005b91c

0801a88c <_ZN8touchgfx6Screen4drawEv>:
 801a88c:	b507      	push	{r0, r1, r2, lr}
 801a88e:	2100      	movs	r1, #0
 801a890:	4b08      	ldr	r3, [pc, #32]	@ (801a8b4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a892:	9100      	str	r1, [sp, #0]
 801a894:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a898:	4b07      	ldr	r3, [pc, #28]	@ (801a8b8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a89a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a89e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a8a2:	4669      	mov	r1, sp
 801a8a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a8a8:	6803      	ldr	r3, [r0, #0]
 801a8aa:	689b      	ldr	r3, [r3, #8]
 801a8ac:	4798      	blx	r3
 801a8ae:	b003      	add	sp, #12
 801a8b0:	f85d fb04 	ldr.w	pc, [sp], #4
 801a8b4:	2005b91c 	.word	0x2005b91c
 801a8b8:	2005b91e 	.word	0x2005b91e

0801a8bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8c0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a8c4:	b089      	sub	sp, #36	@ 0x24
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	4680      	mov	r8, r0
 801a8ca:	460c      	mov	r4, r1
 801a8cc:	4615      	mov	r5, r2
 801a8ce:	dd0e      	ble.n	801a8ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a8d0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	dd0a      	ble.n	801a8ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a8d8:	4628      	mov	r0, r5
 801a8da:	f7ff ff5b 	bl	801a794 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a8de:	4621      	mov	r1, r4
 801a8e0:	f7fd feca 	bl	8018678 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a8e4:	69eb      	ldr	r3, [r5, #28]
 801a8e6:	b928      	cbnz	r0, 801a8f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801a8e8:	461d      	mov	r5, r3
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d1f4      	bne.n	801a8d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801a8ee:	b009      	add	sp, #36	@ 0x24
 801a8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8f4:	ae04      	add	r6, sp, #16
 801a8f6:	2b00      	cmp	r3, #0
 801a8f8:	f000 80b5 	beq.w	801aa66 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a8fc:	682b      	ldr	r3, [r5, #0]
 801a8fe:	4629      	mov	r1, r5
 801a900:	68db      	ldr	r3, [r3, #12]
 801a902:	a802      	add	r0, sp, #8
 801a904:	4798      	blx	r3
 801a906:	4628      	mov	r0, r5
 801a908:	f7ff ff60 	bl	801a7cc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a90c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a910:	4407      	add	r7, r0
 801a912:	4628      	mov	r0, r5
 801a914:	f7ff ff6e 	bl	801a7f4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a918:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a91c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a920:	4418      	add	r0, r3
 801a922:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a926:	4621      	mov	r1, r4
 801a928:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a92c:	b23f      	sxth	r7, r7
 801a92e:	4630      	mov	r0, r6
 801a930:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a934:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a938:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a93c:	f7f9 fb18 	bl	8013f70 <_ZN8touchgfx4RectaNERKS0_>
 801a940:	4628      	mov	r0, r5
 801a942:	f7ff ff27 	bl	801a794 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a946:	4602      	mov	r2, r0
 801a948:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a94c:	ab06      	add	r3, sp, #24
 801a94e:	e883 0003 	stmia.w	r3, {r0, r1}
 801a952:	4611      	mov	r1, r2
 801a954:	4618      	mov	r0, r3
 801a956:	f7f9 fb0b 	bl	8013f70 <_ZN8touchgfx4RectaNERKS0_>
 801a95a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a95e:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a962:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a966:	4299      	cmp	r1, r3
 801a968:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a96c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a970:	d10b      	bne.n	801a98a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a972:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a976:	4552      	cmp	r2, sl
 801a978:	d107      	bne.n	801a98a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a97a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a97e:	455a      	cmp	r2, fp
 801a980:	d103      	bne.n	801a98a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a982:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a986:	454a      	cmp	r2, r9
 801a988:	d06d      	beq.n	801aa66 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a98a:	f1bb 0f00 	cmp.w	fp, #0
 801a98e:	dd65      	ble.n	801aa5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a990:	f1b9 0f00 	cmp.w	r9, #0
 801a994:	dd62      	ble.n	801aa5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a996:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a99a:	fa1f f08a 	uxth.w	r0, sl
 801a99e:	4552      	cmp	r2, sl
 801a9a0:	9000      	str	r0, [sp, #0]
 801a9a2:	da12      	bge.n	801a9ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801a9a4:	9301      	str	r3, [sp, #4]
 801a9a6:	9b00      	ldr	r3, [sp, #0]
 801a9a8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a9ac:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a9b0:	1a9a      	subs	r2, r3, r2
 801a9b2:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a9b6:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a9ba:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a9be:	69ea      	ldr	r2, [r5, #28]
 801a9c0:	4631      	mov	r1, r6
 801a9c2:	4640      	mov	r0, r8
 801a9c4:	f7ff ff7a 	bl	801a8bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a9c8:	9b01      	ldr	r3, [sp, #4]
 801a9ca:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a9ce:	b29f      	uxth	r7, r3
 801a9d0:	429a      	cmp	r2, r3
 801a9d2:	da0d      	bge.n	801a9f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801a9d4:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a9d8:	1aba      	subs	r2, r7, r2
 801a9da:	f8ad a012 	strh.w	sl, [sp, #18]
 801a9de:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a9e2:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a9e6:	69ea      	ldr	r2, [r5, #28]
 801a9e8:	4631      	mov	r1, r6
 801a9ea:	4640      	mov	r0, r8
 801a9ec:	f7ff ff66 	bl	801a8bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a9f0:	8822      	ldrh	r2, [r4, #0]
 801a9f2:	88a3      	ldrh	r3, [r4, #4]
 801a9f4:	445f      	add	r7, fp
 801a9f6:	4413      	add	r3, r2
 801a9f8:	b29b      	uxth	r3, r3
 801a9fa:	b2bf      	uxth	r7, r7
 801a9fc:	b23a      	sxth	r2, r7
 801a9fe:	b219      	sxth	r1, r3
 801aa00:	4291      	cmp	r1, r2
 801aa02:	dd0d      	ble.n	801aa20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801aa04:	1bdb      	subs	r3, r3, r7
 801aa06:	f8ad 2010 	strh.w	r2, [sp, #16]
 801aa0a:	f8ad a012 	strh.w	sl, [sp, #18]
 801aa0e:	f8ad 3014 	strh.w	r3, [sp, #20]
 801aa12:	f8ad 9016 	strh.w	r9, [sp, #22]
 801aa16:	69ea      	ldr	r2, [r5, #28]
 801aa18:	4631      	mov	r1, r6
 801aa1a:	4640      	mov	r0, r8
 801aa1c:	f7ff ff4e 	bl	801a8bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801aa20:	88e2      	ldrh	r2, [r4, #6]
 801aa22:	8863      	ldrh	r3, [r4, #2]
 801aa24:	4413      	add	r3, r2
 801aa26:	9a00      	ldr	r2, [sp, #0]
 801aa28:	b29b      	uxth	r3, r3
 801aa2a:	444a      	add	r2, r9
 801aa2c:	fa1f f982 	uxth.w	r9, r2
 801aa30:	fa0f f289 	sxth.w	r2, r9
 801aa34:	b219      	sxth	r1, r3
 801aa36:	428a      	cmp	r2, r1
 801aa38:	da15      	bge.n	801aa66 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801aa3a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801aa3e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801aa42:	eba3 0309 	sub.w	r3, r3, r9
 801aa46:	f8ad 1014 	strh.w	r1, [sp, #20]
 801aa4a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801aa4e:	f8ad 2012 	strh.w	r2, [sp, #18]
 801aa52:	f8ad 3016 	strh.w	r3, [sp, #22]
 801aa56:	69ea      	ldr	r2, [r5, #28]
 801aa58:	4631      	mov	r1, r6
 801aa5a:	e001      	b.n	801aa60 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801aa5c:	4621      	mov	r1, r4
 801aa5e:	69ea      	ldr	r2, [r5, #28]
 801aa60:	4640      	mov	r0, r8
 801aa62:	f7ff ff2b 	bl	801a8bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801aa66:	4628      	mov	r0, r5
 801aa68:	f7ff fe94 	bl	801a794 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801aa6c:	4633      	mov	r3, r6
 801aa6e:	4602      	mov	r2, r0
 801aa70:	6861      	ldr	r1, [r4, #4]
 801aa72:	6820      	ldr	r0, [r4, #0]
 801aa74:	c303      	stmia	r3!, {r0, r1}
 801aa76:	4611      	mov	r1, r2
 801aa78:	4630      	mov	r0, r6
 801aa7a:	f7f9 fa79 	bl	8013f70 <_ZN8touchgfx4RectaNERKS0_>
 801aa7e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	f77f af33 	ble.w	801a8ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801aa88:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	f77f af2e 	ble.w	801a8ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801aa92:	4628      	mov	r0, r5
 801aa94:	f7ff fe9a 	bl	801a7cc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801aa98:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801aa9c:	1a18      	subs	r0, r3, r0
 801aa9e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801aaa2:	4628      	mov	r0, r5
 801aaa4:	f7ff fea6 	bl	801a7f4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801aaa8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801aaac:	4631      	mov	r1, r6
 801aaae:	1a18      	subs	r0, r3, r0
 801aab0:	f8ad 0012 	strh.w	r0, [sp, #18]
 801aab4:	682b      	ldr	r3, [r5, #0]
 801aab6:	4628      	mov	r0, r5
 801aab8:	689b      	ldr	r3, [r3, #8]
 801aaba:	4798      	blx	r3
 801aabc:	e717      	b.n	801a8ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801aabe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801aabe:	b570      	push	{r4, r5, r6, lr}
 801aac0:	2300      	movs	r3, #0
 801aac2:	460c      	mov	r4, r1
 801aac4:	b086      	sub	sp, #24
 801aac6:	1d06      	adds	r6, r0, #4
 801aac8:	4631      	mov	r1, r6
 801aaca:	4605      	mov	r5, r0
 801aacc:	a802      	add	r0, sp, #8
 801aace:	9301      	str	r3, [sp, #4]
 801aad0:	f7ff f8fe 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801aad4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801aad8:	8822      	ldrh	r2, [r4, #0]
 801aada:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801aade:	1ad2      	subs	r2, r2, r3
 801aae0:	8863      	ldrh	r3, [r4, #2]
 801aae2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801aae6:	1a5b      	subs	r3, r3, r1
 801aae8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801aaec:	f8ad 2010 	strh.w	r2, [sp, #16]
 801aaf0:	f8ad 0014 	strh.w	r0, [sp, #20]
 801aaf4:	f8ad 1016 	strh.w	r1, [sp, #22]
 801aaf8:	aa01      	add	r2, sp, #4
 801aafa:	a904      	add	r1, sp, #16
 801aafc:	4630      	mov	r0, r6
 801aafe:	f8ad 3012 	strh.w	r3, [sp, #18]
 801ab02:	f7f9 fb0d 	bl	8014120 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801ab06:	9a01      	ldr	r2, [sp, #4]
 801ab08:	b11a      	cbz	r2, 801ab12 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801ab0a:	4621      	mov	r1, r4
 801ab0c:	4628      	mov	r0, r5
 801ab0e:	f7ff fed5 	bl	801a8bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ab12:	b006      	add	sp, #24
 801ab14:	bd70      	pop	{r4, r5, r6, pc}

0801ab16 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801ab16:	b530      	push	{r4, r5, lr}
 801ab18:	4602      	mov	r2, r0
 801ab1a:	b085      	sub	sp, #20
 801ab1c:	460d      	mov	r5, r1
 801ab1e:	466b      	mov	r3, sp
 801ab20:	4604      	mov	r4, r0
 801ab22:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801ab26:	6851      	ldr	r1, [r2, #4]
 801ab28:	c303      	stmia	r3!, {r0, r1}
 801ab2a:	4629      	mov	r1, r5
 801ab2c:	4668      	mov	r0, sp
 801ab2e:	f7f9 fa1f 	bl	8013f70 <_ZN8touchgfx4RectaNERKS0_>
 801ab32:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801ab36:	b12b      	cbz	r3, 801ab44 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801ab38:	4669      	mov	r1, sp
 801ab3a:	4620      	mov	r0, r4
 801ab3c:	f7ff ffbf 	bl	801aabe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801ab40:	b005      	add	sp, #20
 801ab42:	bd30      	pop	{r4, r5, pc}
 801ab44:	3404      	adds	r4, #4
 801ab46:	4621      	mov	r1, r4
 801ab48:	a802      	add	r0, sp, #8
 801ab4a:	f7ff f8c1 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ab4e:	f8bd 3000 	ldrh.w	r3, [sp]
 801ab52:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801ab56:	4669      	mov	r1, sp
 801ab58:	1a9b      	subs	r3, r3, r2
 801ab5a:	f8ad 3000 	strh.w	r3, [sp]
 801ab5e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801ab62:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ab66:	4620      	mov	r0, r4
 801ab68:	1a9b      	subs	r3, r3, r2
 801ab6a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801ab6e:	f7f9 fa9e 	bl	80140ae <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801ab72:	e7e5      	b.n	801ab40 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801ab74 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801ab74:	460b      	mov	r3, r1
 801ab76:	680a      	ldr	r2, [r1, #0]
 801ab78:	1d01      	adds	r1, r0, #4
 801ab7a:	6992      	ldr	r2, [r2, #24]
 801ab7c:	4618      	mov	r0, r3
 801ab7e:	4710      	bx	r2

0801ab80 <_ZN8touchgfx12TextProviderC1Ev>:
 801ab80:	b538      	push	{r3, r4, r5, lr}
 801ab82:	2500      	movs	r5, #0
 801ab84:	2302      	movs	r3, #2
 801ab86:	4604      	mov	r4, r0
 801ab88:	e9c0 5500 	strd	r5, r5, [r0]
 801ab8c:	7403      	strb	r3, [r0, #16]
 801ab8e:	6145      	str	r5, [r0, #20]
 801ab90:	7605      	strb	r5, [r0, #24]
 801ab92:	83c5      	strh	r5, [r0, #30]
 801ab94:	8405      	strh	r5, [r0, #32]
 801ab96:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801ab98:	8705      	strh	r5, [r0, #56]	@ 0x38
 801ab9a:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801ab9c:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801aba0:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801aba4:	220e      	movs	r2, #14
 801aba6:	4629      	mov	r1, r5
 801aba8:	304c      	adds	r0, #76	@ 0x4c
 801abaa:	f011 fa11 	bl	802bfd0 <memset>
 801abae:	2301      	movs	r3, #1
 801abb0:	4620      	mov	r0, r4
 801abb2:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801abb6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801abba:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801abbe:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801abc2:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801abc6:	f7f6 f95b 	bl	8010e80 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801abca:	4620      	mov	r0, r4
 801abcc:	bd38      	pop	{r3, r4, r5, pc}

0801abce <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801abce:	b530      	push	{r4, r5, lr}
 801abd0:	2500      	movs	r5, #0
 801abd2:	2401      	movs	r4, #1
 801abd4:	6843      	ldr	r3, [r0, #4]
 801abd6:	b913      	cbnz	r3, 801abde <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801abd8:	6803      	ldr	r3, [r0, #0]
 801abda:	b313      	cbz	r3, 801ac22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801abdc:	6043      	str	r3, [r0, #4]
 801abde:	7e03      	ldrb	r3, [r0, #24]
 801abe0:	b143      	cbz	r3, 801abf4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801abe2:	6943      	ldr	r3, [r0, #20]
 801abe4:	b12b      	cbz	r3, 801abf2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801abe6:	881a      	ldrh	r2, [r3, #0]
 801abe8:	b11a      	cbz	r2, 801abf2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801abea:	1c9a      	adds	r2, r3, #2
 801abec:	6142      	str	r2, [r0, #20]
 801abee:	8818      	ldrh	r0, [r3, #0]
 801abf0:	bd30      	pop	{r4, r5, pc}
 801abf2:	7605      	strb	r5, [r0, #24]
 801abf4:	6843      	ldr	r3, [r0, #4]
 801abf6:	8819      	ldrh	r1, [r3, #0]
 801abf8:	b199      	cbz	r1, 801ac22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801abfa:	1c9a      	adds	r2, r3, #2
 801abfc:	2902      	cmp	r1, #2
 801abfe:	6042      	str	r2, [r0, #4]
 801ac00:	d1f5      	bne.n	801abee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801ac02:	7c03      	ldrb	r3, [r0, #16]
 801ac04:	2b01      	cmp	r3, #1
 801ac06:	d8e5      	bhi.n	801abd4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ac08:	1c5a      	adds	r2, r3, #1
 801ac0a:	7402      	strb	r2, [r0, #16]
 801ac0c:	3302      	adds	r3, #2
 801ac0e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801ac12:	6143      	str	r3, [r0, #20]
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d0dd      	beq.n	801abd4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ac18:	881b      	ldrh	r3, [r3, #0]
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d0da      	beq.n	801abd4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ac1e:	7604      	strb	r4, [r0, #24]
 801ac20:	e7d8      	b.n	801abd4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ac22:	2000      	movs	r0, #0
 801ac24:	e7e4      	b.n	801abf0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801ac26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801ac26:	6001      	str	r1, [r0, #0]
 801ac28:	2100      	movs	r1, #0
 801ac2a:	b430      	push	{r4, r5}
 801ac2c:	6041      	str	r1, [r0, #4]
 801ac2e:	6815      	ldr	r5, [r2, #0]
 801ac30:	6085      	str	r5, [r0, #8]
 801ac32:	6852      	ldr	r2, [r2, #4]
 801ac34:	6443      	str	r3, [r0, #68]	@ 0x44
 801ac36:	9b02      	ldr	r3, [sp, #8]
 801ac38:	60c2      	str	r2, [r0, #12]
 801ac3a:	7401      	strb	r1, [r0, #16]
 801ac3c:	6141      	str	r1, [r0, #20]
 801ac3e:	7601      	strb	r1, [r0, #24]
 801ac40:	8701      	strh	r1, [r0, #56]	@ 0x38
 801ac42:	8401      	strh	r1, [r0, #32]
 801ac44:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801ac48:	6483      	str	r3, [r0, #72]	@ 0x48
 801ac4a:	bc30      	pop	{r4, r5}
 801ac4c:	f7f6 b918 	b.w	8010e80 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801ac50 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801ac50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ac52:	4605      	mov	r5, r0
 801ac54:	4608      	mov	r0, r1
 801ac56:	b1e9      	cbz	r1, 801ac94 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801ac58:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801ac5c:	460b      	mov	r3, r1
 801ac5e:	4622      	mov	r2, r4
 801ac60:	f101 0708 	add.w	r7, r1, #8
 801ac64:	4626      	mov	r6, r4
 801ac66:	6818      	ldr	r0, [r3, #0]
 801ac68:	6859      	ldr	r1, [r3, #4]
 801ac6a:	3308      	adds	r3, #8
 801ac6c:	c603      	stmia	r6!, {r0, r1}
 801ac6e:	42bb      	cmp	r3, r7
 801ac70:	4634      	mov	r4, r6
 801ac72:	d1f7      	bne.n	801ac64 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801ac74:	6818      	ldr	r0, [r3, #0]
 801ac76:	6030      	str	r0, [r6, #0]
 801ac78:	4610      	mov	r0, r2
 801ac7a:	889b      	ldrh	r3, [r3, #4]
 801ac7c:	80b3      	strh	r3, [r6, #4]
 801ac7e:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801ac82:	015b      	lsls	r3, r3, #5
 801ac84:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801ac88:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801ac8c:	430b      	orrs	r3, r1
 801ac8e:	425b      	negs	r3, r3
 801ac90:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801ac94:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ac96 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801ac96:	b538      	push	{r3, r4, r5, lr}
 801ac98:	460c      	mov	r4, r1
 801ac9a:	6811      	ldr	r1, [r2, #0]
 801ac9c:	4610      	mov	r0, r2
 801ac9e:	68cd      	ldr	r5, [r1, #12]
 801aca0:	4619      	mov	r1, r3
 801aca2:	47a8      	blx	r5
 801aca4:	2800      	cmp	r0, #0
 801aca6:	bf08      	it	eq
 801aca8:	4620      	moveq	r0, r4
 801acaa:	bd38      	pop	{r3, r4, r5, pc}

0801acac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801acac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acb0:	468c      	mov	ip, r1
 801acb2:	4605      	mov	r5, r0
 801acb4:	4614      	mov	r4, r2
 801acb6:	b942      	cbnz	r2, 801acca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801acb8:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801acbc:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 801acc0:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 801acc4:	4620      	mov	r0, r4
 801acc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801acca:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801acce:	7b50      	ldrb	r0, [r2, #13]
 801acd0:	8893      	ldrh	r3, [r2, #4]
 801acd2:	0106      	lsls	r6, r0, #4
 801acd4:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801acd8:	79e6      	ldrb	r6, [r4, #7]
 801acda:	4316      	orrs	r6, r2
 801acdc:	185a      	adds	r2, r3, r1
 801acde:	b291      	uxth	r1, r2
 801ace0:	291d      	cmp	r1, #29
 801ace2:	b2b7      	uxth	r7, r6
 801ace4:	d87d      	bhi.n	801ade2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801ace6:	2201      	movs	r2, #1
 801ace8:	408a      	lsls	r2, r1
 801acea:	498a      	ldr	r1, [pc, #552]	@ (801af14 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x268>)
 801acec:	10f6      	asrs	r6, r6, #3
 801acee:	420a      	tst	r2, r1
 801acf0:	d12d      	bne.n	801ad4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 801acf2:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801acf6:	d074      	beq.n	801ade2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801acf8:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801acfc:	4623      	mov	r3, r4
 801acfe:	f104 0e08 	add.w	lr, r4, #8
 801ad02:	4614      	mov	r4, r2
 801ad04:	4694      	mov	ip, r2
 801ad06:	6818      	ldr	r0, [r3, #0]
 801ad08:	6859      	ldr	r1, [r3, #4]
 801ad0a:	3308      	adds	r3, #8
 801ad0c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801ad10:	4573      	cmp	r3, lr
 801ad12:	4662      	mov	r2, ip
 801ad14:	d1f6      	bne.n	801ad04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801ad16:	6818      	ldr	r0, [r3, #0]
 801ad18:	f8cc 0000 	str.w	r0, [ip]
 801ad1c:	889b      	ldrh	r3, [r3, #4]
 801ad1e:	f8ac 3004 	strh.w	r3, [ip, #4]
 801ad22:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 801ad26:	b2b3      	uxth	r3, r6
 801ad28:	1aca      	subs	r2, r1, r3
 801ad2a:	b292      	uxth	r2, r2
 801ad2c:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 801ad30:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 801ad34:	10d2      	asrs	r2, r2, #3
 801ad36:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801ad3a:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801ad3e:	4302      	orrs	r2, r0
 801ad40:	1bcf      	subs	r7, r1, r7
 801ad42:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 801ad46:	1afb      	subs	r3, r7, r3
 801ad48:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 801ad4c:	e7ba      	b.n	801acc4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801ad4e:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801ad52:	4623      	mov	r3, r4
 801ad54:	f104 0808 	add.w	r8, r4, #8
 801ad58:	4614      	mov	r4, r2
 801ad5a:	4696      	mov	lr, r2
 801ad5c:	6818      	ldr	r0, [r3, #0]
 801ad5e:	6859      	ldr	r1, [r3, #4]
 801ad60:	3308      	adds	r3, #8
 801ad62:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801ad66:	4543      	cmp	r3, r8
 801ad68:	4672      	mov	r2, lr
 801ad6a:	d1f6      	bne.n	801ad5a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xae>
 801ad6c:	6818      	ldr	r0, [r3, #0]
 801ad6e:	f8ce 0000 	str.w	r0, [lr]
 801ad72:	889b      	ldrh	r3, [r3, #4]
 801ad74:	f8ae 3004 	strh.w	r3, [lr, #4]
 801ad78:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 801ad7a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801ad7e:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801ad80:	f640 6333 	movw	r3, #3635	@ 0xe33
 801ad84:	4299      	cmp	r1, r3
 801ad86:	d111      	bne.n	801adac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x100>
 801ad88:	f8dc 3000 	ldr.w	r3, [ip]
 801ad8c:	4660      	mov	r0, ip
 801ad8e:	68db      	ldr	r3, [r3, #12]
 801ad90:	4798      	blx	r3
 801ad92:	7b41      	ldrb	r1, [r0, #13]
 801ad94:	00cb      	lsls	r3, r1, #3
 801ad96:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801ad9a:	7a03      	ldrb	r3, [r0, #8]
 801ad9c:	4313      	orrs	r3, r2
 801ad9e:	064a      	lsls	r2, r1, #25
 801ada0:	bf44      	itt	mi
 801ada2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801ada6:	b21b      	sxthmi	r3, r3
 801ada8:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801adac:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 801adb0:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 801adb4:	443b      	add	r3, r7
 801adb6:	4433      	add	r3, r6
 801adb8:	b29b      	uxth	r3, r3
 801adba:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801adbe:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 801adc2:	10db      	asrs	r3, r3, #3
 801adc4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801adc8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801adcc:	4313      	orrs	r3, r2
 801adce:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 801add2:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 801add6:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 801adda:	1a9b      	subs	r3, r3, r2
 801addc:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801ade0:	e770      	b.n	801acc4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801ade2:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801ade6:	f023 0204 	bic.w	r2, r3, #4
 801adea:	428a      	cmp	r2, r1
 801adec:	d003      	beq.n	801adf6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14a>
 801adee:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801adf2:	4293      	cmp	r3, r2
 801adf4:	d137      	bne.n	801ae66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801adf6:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 801adfa:	4622      	mov	r2, r4
 801adfc:	f104 0808 	add.w	r8, r4, #8
 801ae00:	4634      	mov	r4, r6
 801ae02:	46b6      	mov	lr, r6
 801ae04:	6810      	ldr	r0, [r2, #0]
 801ae06:	6851      	ldr	r1, [r2, #4]
 801ae08:	3208      	adds	r2, #8
 801ae0a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801ae0e:	4542      	cmp	r2, r8
 801ae10:	4676      	mov	r6, lr
 801ae12:	d1f6      	bne.n	801ae02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 801ae14:	6810      	ldr	r0, [r2, #0]
 801ae16:	3b01      	subs	r3, #1
 801ae18:	f8ce 0000 	str.w	r0, [lr]
 801ae1c:	8892      	ldrh	r2, [r2, #4]
 801ae1e:	b29b      	uxth	r3, r3
 801ae20:	f8ae 2004 	strh.w	r2, [lr, #4]
 801ae24:	4621      	mov	r1, r4
 801ae26:	4662      	mov	r2, ip
 801ae28:	4628      	mov	r0, r5
 801ae2a:	f7ff ff34 	bl	801ac96 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801ae2e:	7b41      	ldrb	r1, [r0, #13]
 801ae30:	00cb      	lsls	r3, r1, #3
 801ae32:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801ae36:	7a03      	ldrb	r3, [r0, #8]
 801ae38:	0648      	lsls	r0, r1, #25
 801ae3a:	ea43 0302 	orr.w	r3, r3, r2
 801ae3e:	bf44      	itt	mi
 801ae40:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801ae44:	b21b      	sxthmi	r3, r3
 801ae46:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801ae4a:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801ae4e:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 801ae52:	005b      	lsls	r3, r3, #1
 801ae54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ae58:	4313      	orrs	r3, r2
 801ae5a:	115a      	asrs	r2, r3, #5
 801ae5c:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801ae60:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 801ae64:	e046      	b.n	801aef4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x248>
 801ae66:	00c2      	lsls	r2, r0, #3
 801ae68:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801ae6c:	7a22      	ldrb	r2, [r4, #8]
 801ae6e:	430a      	orrs	r2, r1
 801ae70:	0641      	lsls	r1, r0, #25
 801ae72:	f640 6109 	movw	r1, #3593	@ 0xe09
 801ae76:	bf44      	itt	mi
 801ae78:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801ae7c:	b212      	sxthmi	r2, r2
 801ae7e:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801ae82:	f023 0210 	bic.w	r2, r3, #16
 801ae86:	428a      	cmp	r2, r1
 801ae88:	d003      	beq.n	801ae92 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e6>
 801ae8a:	f640 6213 	movw	r2, #3603	@ 0xe13
 801ae8e:	4293      	cmp	r3, r2
 801ae90:	d13d      	bne.n	801af0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x262>
 801ae92:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801ae96:	4696      	mov	lr, r2
 801ae98:	f104 0808 	add.w	r8, r4, #8
 801ae9c:	4616      	mov	r6, r2
 801ae9e:	6820      	ldr	r0, [r4, #0]
 801aea0:	6861      	ldr	r1, [r4, #4]
 801aea2:	3408      	adds	r4, #8
 801aea4:	c603      	stmia	r6!, {r0, r1}
 801aea6:	4544      	cmp	r4, r8
 801aea8:	4632      	mov	r2, r6
 801aeaa:	d1f7      	bne.n	801ae9c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f0>
 801aeac:	6820      	ldr	r0, [r4, #0]
 801aeae:	6030      	str	r0, [r6, #0]
 801aeb0:	88a1      	ldrh	r1, [r4, #4]
 801aeb2:	4628      	mov	r0, r5
 801aeb4:	80b1      	strh	r1, [r6, #4]
 801aeb6:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 801aeba:	4671      	mov	r1, lr
 801aebc:	0076      	lsls	r6, r6, #1
 801aebe:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801aec2:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 801aec6:	4674      	mov	r4, lr
 801aec8:	4316      	orrs	r6, r2
 801aeca:	f640 6213 	movw	r2, #3603	@ 0xe13
 801aece:	4293      	cmp	r3, r2
 801aed0:	bf1a      	itte	ne
 801aed2:	f103 33ff 	addne.w	r3, r3, #4294967295
 801aed6:	b29b      	uxthne	r3, r3
 801aed8:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801aedc:	4662      	mov	r2, ip
 801aede:	f7ff feda 	bl	801ac96 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801aee2:	7b43      	ldrb	r3, [r0, #13]
 801aee4:	7a82      	ldrb	r2, [r0, #10]
 801aee6:	005b      	lsls	r3, r3, #1
 801aee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801aeec:	4313      	orrs	r3, r2
 801aeee:	1af6      	subs	r6, r6, r3
 801aef0:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 801aef4:	7b61      	ldrb	r1, [r4, #13]
 801aef6:	00cb      	lsls	r3, r1, #3
 801aef8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801aefc:	7a23      	ldrb	r3, [r4, #8]
 801aefe:	4313      	orrs	r3, r2
 801af00:	064a      	lsls	r2, r1, #25
 801af02:	bf44      	itt	mi
 801af04:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801af08:	b21b      	sxthmi	r3, r3
 801af0a:	1bdb      	subs	r3, r3, r7
 801af0c:	e71c      	b.n	801ad48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 801af0e:	2300      	movs	r3, #0
 801af10:	e7a6      	b.n	801ae60 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>
 801af12:	bf00      	nop
 801af14:	3fc00079 	.word	0x3fc00079

0801af18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801af18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801af1c:	4604      	mov	r4, r0
 801af1e:	b942      	cbnz	r2, 801af32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801af20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801af24:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801af28:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801af2c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801af30:	e047      	b.n	801afc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801af32:	7b51      	ldrb	r1, [r2, #13]
 801af34:	8893      	ldrh	r3, [r2, #4]
 801af36:	010d      	lsls	r5, r1, #4
 801af38:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801af3c:	79d5      	ldrb	r5, [r2, #7]
 801af3e:	4305      	orrs	r5, r0
 801af40:	2d04      	cmp	r5, #4
 801af42:	bfcc      	ite	gt
 801af44:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801af48:	f04f 0e01 	movle.w	lr, #1
 801af4c:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801af50:	f200 80ab 	bhi.w	801b0aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801af54:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801af58:	4283      	cmp	r3, r0
 801af5a:	d216      	bcs.n	801af8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801af5c:	f240 605b 	movw	r0, #1627	@ 0x65b
 801af60:	4283      	cmp	r3, r0
 801af62:	d859      	bhi.n	801b018 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801af64:	f240 6057 	movw	r0, #1623	@ 0x657
 801af68:	4283      	cmp	r3, r0
 801af6a:	d20e      	bcs.n	801af8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801af6c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801af70:	d24a      	bcs.n	801b008 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801af72:	f240 604e 	movw	r0, #1614	@ 0x64e
 801af76:	4283      	cmp	r3, r0
 801af78:	d207      	bcs.n	801af8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801af7a:	f240 601a 	movw	r0, #1562	@ 0x61a
 801af7e:	4283      	cmp	r3, r0
 801af80:	d02a      	beq.n	801afd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801af82:	d821      	bhi.n	801afc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801af84:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801af88:	d35b      	bcc.n	801b042 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801af8a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801af8e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801af92:	f040 80d0 	bne.w	801b136 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801af96:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801af9a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801af9e:	f040 80ca 	bne.w	801b136 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801afa2:	00cb      	lsls	r3, r1, #3
 801afa4:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801afa8:	7a13      	ldrb	r3, [r2, #8]
 801afaa:	0649      	lsls	r1, r1, #25
 801afac:	ea43 0300 	orr.w	r3, r3, r0
 801afb0:	bf44      	itt	mi
 801afb2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801afb6:	b21b      	sxthmi	r3, r3
 801afb8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801afbc:	1b5d      	subs	r5, r3, r5
 801afbe:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801afc2:	4610      	mov	r0, r2
 801afc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801afc8:	f240 604b 	movw	r0, #1611	@ 0x64b
 801afcc:	4283      	cmp	r3, r0
 801afce:	d338      	bcc.n	801b042 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801afd0:	f240 604c 	movw	r0, #1612	@ 0x64c
 801afd4:	4283      	cmp	r3, r0
 801afd6:	d9d8      	bls.n	801af8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801afd8:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801afdc:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801afe0:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801afe4:	f040 80f2 	bne.w	801b1cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801afe8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801afec:	f040 80ee 	bne.w	801b1cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801aff0:	00cb      	lsls	r3, r1, #3
 801aff2:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801aff6:	7a13      	ldrb	r3, [r2, #8]
 801aff8:	064e      	lsls	r6, r1, #25
 801affa:	ea43 0300 	orr.w	r3, r3, r0
 801affe:	bf44      	itt	mi
 801b000:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801b004:	b21b      	sxthmi	r3, r3
 801b006:	e7d9      	b.n	801afbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801b008:	f240 6054 	movw	r0, #1620	@ 0x654
 801b00c:	4283      	cmp	r3, r0
 801b00e:	d8e3      	bhi.n	801afd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b010:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801b014:	d9e0      	bls.n	801afd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b016:	e7b8      	b.n	801af8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b018:	f240 6074 	movw	r0, #1652	@ 0x674
 801b01c:	4283      	cmp	r3, r0
 801b01e:	d0b4      	beq.n	801af8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b020:	d82d      	bhi.n	801b07e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801b022:	f240 605e 	movw	r0, #1630	@ 0x65e
 801b026:	4283      	cmp	r3, r0
 801b028:	d804      	bhi.n	801b034 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801b02a:	f240 605d 	movw	r0, #1629	@ 0x65d
 801b02e:	4283      	cmp	r3, r0
 801b030:	d3d2      	bcc.n	801afd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b032:	e7aa      	b.n	801af8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b034:	f240 605f 	movw	r0, #1631	@ 0x65f
 801b038:	4283      	cmp	r3, r0
 801b03a:	d0cd      	beq.n	801afd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b03c:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801b040:	d0a3      	beq.n	801af8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b042:	00cb      	lsls	r3, r1, #3
 801b044:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801b048:	7a13      	ldrb	r3, [r2, #8]
 801b04a:	0649      	lsls	r1, r1, #25
 801b04c:	ea43 0300 	orr.w	r3, r3, r0
 801b050:	bf44      	itt	mi
 801b052:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801b056:	b21b      	sxthmi	r3, r3
 801b058:	1b5d      	subs	r5, r3, r5
 801b05a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801b05e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801b062:	7b53      	ldrb	r3, [r2, #13]
 801b064:	015b      	lsls	r3, r3, #5
 801b066:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801b06a:	7993      	ldrb	r3, [r2, #6]
 801b06c:	430b      	orrs	r3, r1
 801b06e:	2105      	movs	r1, #5
 801b070:	005b      	lsls	r3, r3, #1
 801b072:	fb93 f3f1 	sdiv	r3, r3, r1
 801b076:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801b07a:	440b      	add	r3, r1
 801b07c:	e756      	b.n	801af2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801b07e:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801b082:	4283      	cmp	r3, r0
 801b084:	d809      	bhi.n	801b09a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801b086:	f240 60df 	movw	r0, #1759	@ 0x6df
 801b08a:	4283      	cmp	r3, r0
 801b08c:	f4bf af7d 	bcs.w	801af8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b090:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801b094:	2b05      	cmp	r3, #5
 801b096:	d8d4      	bhi.n	801b042 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801b098:	e777      	b.n	801af8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b09a:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801b09e:	4283      	cmp	r3, r0
 801b0a0:	d09a      	beq.n	801afd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b0a2:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801b0a6:	4283      	cmp	r3, r0
 801b0a8:	e7ca      	b.n	801b040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801b0aa:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801b0ae:	d22b      	bcs.n	801b108 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801b0b0:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801b0b4:	4283      	cmp	r3, r0
 801b0b6:	d28f      	bcs.n	801afd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b0b8:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801b0bc:	4283      	cmp	r3, r0
 801b0be:	d816      	bhi.n	801b0ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801b0c0:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801b0c4:	4283      	cmp	r3, r0
 801b0c6:	f4bf af60 	bcs.w	801af8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b0ca:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801b0ce:	4283      	cmp	r3, r0
 801b0d0:	d80a      	bhi.n	801b0e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801b0d2:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801b0d6:	4283      	cmp	r3, r0
 801b0d8:	f4bf af57 	bcs.w	801af8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b0dc:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801b0e0:	4283      	cmp	r3, r0
 801b0e2:	f43f af79 	beq.w	801afd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b0e6:	e7ac      	b.n	801b042 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801b0e8:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801b0ec:	e7f8      	b.n	801b0e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801b0ee:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801b0f2:	4283      	cmp	r3, r0
 801b0f4:	d802      	bhi.n	801b0fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801b0f6:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801b0fa:	e798      	b.n	801b02e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801b0fc:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801b100:	4283      	cmp	r3, r0
 801b102:	f47f af42 	bne.w	801af8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b106:	e767      	b.n	801afd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b108:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801b10c:	4283      	cmp	r3, r0
 801b10e:	f43f af63 	beq.w	801afd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b112:	d802      	bhi.n	801b11a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801b114:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801b118:	e7f2      	b.n	801b100 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801b11a:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801b11e:	4283      	cmp	r3, r0
 801b120:	d805      	bhi.n	801b12e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801b122:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801b126:	4283      	cmp	r3, r0
 801b128:	f4ff af2f 	bcc.w	801af8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b12c:	e754      	b.n	801afd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b12e:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801b132:	4283      	cmp	r3, r0
 801b134:	e7af      	b.n	801b096 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801b136:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801b13a:	4617      	mov	r7, r2
 801b13c:	4666      	mov	r6, ip
 801b13e:	f102 0808 	add.w	r8, r2, #8
 801b142:	46e6      	mov	lr, ip
 801b144:	6838      	ldr	r0, [r7, #0]
 801b146:	6879      	ldr	r1, [r7, #4]
 801b148:	3708      	adds	r7, #8
 801b14a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801b14e:	4547      	cmp	r7, r8
 801b150:	46f4      	mov	ip, lr
 801b152:	d1f6      	bne.n	801b142 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801b154:	6838      	ldr	r0, [r7, #0]
 801b156:	f8ce 0000 	str.w	r0, [lr]
 801b15a:	88b9      	ldrh	r1, [r7, #4]
 801b15c:	f8ae 1004 	strh.w	r1, [lr, #4]
 801b160:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801b164:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801b168:	d009      	beq.n	801b17e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801b16a:	7b51      	ldrb	r1, [r2, #13]
 801b16c:	7992      	ldrb	r2, [r2, #6]
 801b16e:	0149      	lsls	r1, r1, #5
 801b170:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801b174:	4311      	orrs	r1, r2
 801b176:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801b17a:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801b17e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801b182:	b2ad      	uxth	r5, r5
 801b184:	d00d      	beq.n	801b1a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 801b186:	442b      	add	r3, r5
 801b188:	b29b      	uxth	r3, r3
 801b18a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801b18e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801b192:	10db      	asrs	r3, r3, #3
 801b194:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801b198:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801b19c:	4313      	orrs	r3, r2
 801b19e:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801b1a2:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801b1a6:	00cb      	lsls	r3, r1, #3
 801b1a8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801b1ac:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801b1b0:	064f      	lsls	r7, r1, #25
 801b1b2:	ea43 0302 	orr.w	r3, r3, r2
 801b1b6:	bf44      	itt	mi
 801b1b8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801b1bc:	b21b      	sxthmi	r3, r3
 801b1be:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801b1c2:	1b5b      	subs	r3, r3, r5
 801b1c4:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801b1c8:	4632      	mov	r2, r6
 801b1ca:	e6fa      	b.n	801afc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801b1cc:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801b1d0:	4617      	mov	r7, r2
 801b1d2:	4666      	mov	r6, ip
 801b1d4:	f102 0908 	add.w	r9, r2, #8
 801b1d8:	46e0      	mov	r8, ip
 801b1da:	6838      	ldr	r0, [r7, #0]
 801b1dc:	6879      	ldr	r1, [r7, #4]
 801b1de:	3708      	adds	r7, #8
 801b1e0:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801b1e4:	454f      	cmp	r7, r9
 801b1e6:	46c4      	mov	ip, r8
 801b1e8:	d1f6      	bne.n	801b1d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801b1ea:	6838      	ldr	r0, [r7, #0]
 801b1ec:	f8c8 0000 	str.w	r0, [r8]
 801b1f0:	88b9      	ldrh	r1, [r7, #4]
 801b1f2:	f8a8 1004 	strh.w	r1, [r8, #4]
 801b1f6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801b1fa:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801b1fe:	d009      	beq.n	801b214 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 801b200:	7b51      	ldrb	r1, [r2, #13]
 801b202:	7992      	ldrb	r2, [r2, #6]
 801b204:	0149      	lsls	r1, r1, #5
 801b206:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801b20a:	4311      	orrs	r1, r2
 801b20c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801b210:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801b214:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801b218:	d00e      	beq.n	801b238 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801b21a:	eba3 030e 	sub.w	r3, r3, lr
 801b21e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801b222:	b29b      	uxth	r3, r3
 801b224:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801b228:	10db      	asrs	r3, r3, #3
 801b22a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801b22e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801b232:	4313      	orrs	r3, r2
 801b234:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801b238:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801b23c:	00cb      	lsls	r3, r1, #3
 801b23e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801b242:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801b246:	0648      	lsls	r0, r1, #25
 801b248:	ea43 0302 	orr.w	r3, r3, r2
 801b24c:	bf44      	itt	mi
 801b24e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801b252:	b21b      	sxthmi	r3, r3
 801b254:	1b5d      	subs	r5, r3, r5
 801b256:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801b25a:	e7b5      	b.n	801b1c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0801b25c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801b25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b260:	461e      	mov	r6, r3
 801b262:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801b264:	4604      	mov	r4, r0
 801b266:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b26a:	4617      	mov	r7, r2
 801b26c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801b270:	f7f5 fd60 	bl	8010d34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b274:	4605      	mov	r5, r0
 801b276:	b918      	cbnz	r0, 801b280 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801b278:	6030      	str	r0, [r6, #0]
 801b27a:	4628      	mov	r0, r5
 801b27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b280:	683b      	ldr	r3, [r7, #0]
 801b282:	4601      	mov	r1, r0
 801b284:	68db      	ldr	r3, [r3, #12]
 801b286:	4638      	mov	r0, r7
 801b288:	4798      	blx	r3
 801b28a:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801b28e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801b292:	4602      	mov	r2, r0
 801b294:	6030      	str	r0, [r6, #0]
 801b296:	d213      	bcs.n	801b2c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801b298:	4643      	mov	r3, r8
 801b29a:	4639      	mov	r1, r7
 801b29c:	4620      	mov	r0, r4
 801b29e:	f7ff fe3b 	bl	801af18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801b2a2:	6030      	str	r0, [r6, #0]
 801b2a4:	6833      	ldr	r3, [r6, #0]
 801b2a6:	b143      	cbz	r3, 801b2ba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801b2a8:	7b5a      	ldrb	r2, [r3, #13]
 801b2aa:	7a9b      	ldrb	r3, [r3, #10]
 801b2ac:	0052      	lsls	r2, r2, #1
 801b2ae:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801b2b2:	4313      	orrs	r3, r2
 801b2b4:	bf0c      	ite	eq
 801b2b6:	2301      	moveq	r3, #1
 801b2b8:	2300      	movne	r3, #0
 801b2ba:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801b2be:	e7dc      	b.n	801b27a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801b2c0:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801b2c4:	b29b      	uxth	r3, r3
 801b2c6:	2b7f      	cmp	r3, #127	@ 0x7f
 801b2c8:	d804      	bhi.n	801b2d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801b2ca:	4639      	mov	r1, r7
 801b2cc:	4620      	mov	r0, r4
 801b2ce:	f7ff fced 	bl	801acac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b2d2:	e7e6      	b.n	801b2a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801b2d4:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801b2d8:	2b00      	cmp	r3, #0
 801b2da:	d0e3      	beq.n	801b2a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801b2dc:	f640 1302 	movw	r3, #2306	@ 0x902
 801b2e0:	429d      	cmp	r5, r3
 801b2e2:	d1df      	bne.n	801b2a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801b2e4:	4601      	mov	r1, r0
 801b2e6:	4620      	mov	r0, r4
 801b2e8:	f7ff fcb2 	bl	801ac50 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b2ec:	e7d9      	b.n	801b2a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801b2ee <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801b2ee:	b510      	push	{r4, lr}
 801b2f0:	4604      	mov	r4, r0
 801b2f2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801b2f6:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801b2f8:	b1f1      	cbz	r1, 801b338 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801b2fa:	2b0a      	cmp	r3, #10
 801b2fc:	d02f      	beq.n	801b35e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801b2fe:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801b300:	3901      	subs	r1, #1
 801b302:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801b306:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801b308:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801b30c:	1c51      	adds	r1, r2, #1
 801b30e:	b289      	uxth	r1, r1
 801b310:	2901      	cmp	r1, #1
 801b312:	bf84      	itt	hi
 801b314:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b318:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801b31a:	f103 0201 	add.w	r2, r3, #1
 801b31e:	8722      	strh	r2, [r4, #56]	@ 0x38
 801b320:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801b322:	bf98      	it	ls
 801b324:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801b326:	4413      	add	r3, r2
 801b328:	b29b      	uxth	r3, r3
 801b32a:	2b09      	cmp	r3, #9
 801b32c:	bf88      	it	hi
 801b32e:	3b0a      	subhi	r3, #10
 801b330:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b334:	8458      	strh	r0, [r3, #34]	@ 0x22
 801b336:	e7dc      	b.n	801b2f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801b338:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801b33a:	2b0a      	cmp	r3, #10
 801b33c:	d00f      	beq.n	801b35e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801b33e:	4620      	mov	r0, r4
 801b340:	f7ff fc45 	bl	801abce <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801b344:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801b346:	1c5a      	adds	r2, r3, #1
 801b348:	8722      	strh	r2, [r4, #56]	@ 0x38
 801b34a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801b34c:	4413      	add	r3, r2
 801b34e:	b29b      	uxth	r3, r3
 801b350:	2b09      	cmp	r3, #9
 801b352:	bf88      	it	hi
 801b354:	3b0a      	subhi	r3, #10
 801b356:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b35a:	8458      	strh	r0, [r3, #34]	@ 0x22
 801b35c:	e7ec      	b.n	801b338 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801b35e:	bd10      	pop	{r4, pc}

0801b360 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801b360:	b538      	push	{r3, r4, r5, lr}
 801b362:	4604      	mov	r4, r0
 801b364:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801b366:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801b36a:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801b36c:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801b36e:	3a01      	subs	r2, #1
 801b370:	8702      	strh	r2, [r0, #56]	@ 0x38
 801b372:	1c5a      	adds	r2, r3, #1
 801b374:	b292      	uxth	r2, r2
 801b376:	2a09      	cmp	r2, #9
 801b378:	bf86      	itte	hi
 801b37a:	3b09      	subhi	r3, #9
 801b37c:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801b37e:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801b380:	f7ff ffb5 	bl	801b2ee <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b384:	8c23      	ldrh	r3, [r4, #32]
 801b386:	2b01      	cmp	r3, #1
 801b388:	bf9c      	itt	ls
 801b38a:	3301      	addls	r3, #1
 801b38c:	8423      	strhls	r3, [r4, #32]
 801b38e:	8be3      	ldrh	r3, [r4, #30]
 801b390:	b90b      	cbnz	r3, 801b396 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801b392:	2302      	movs	r3, #2
 801b394:	83e3      	strh	r3, [r4, #30]
 801b396:	8be3      	ldrh	r3, [r4, #30]
 801b398:	4628      	mov	r0, r5
 801b39a:	3b01      	subs	r3, #1
 801b39c:	b29b      	uxth	r3, r3
 801b39e:	83e3      	strh	r3, [r4, #30]
 801b3a0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b3a4:	8365      	strh	r5, [r4, #26]
 801b3a6:	bd38      	pop	{r3, r4, r5, pc}

0801b3a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801b3a8:	428a      	cmp	r2, r1
 801b3aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b3ae:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801b3b0:	d931      	bls.n	801b416 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 801b3b2:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801b3b4:	1a54      	subs	r4, r2, r1
 801b3b6:	19ee      	adds	r6, r5, r7
 801b3b8:	3e01      	subs	r6, #1
 801b3ba:	fa1f fe84 	uxth.w	lr, r4
 801b3be:	b2b4      	uxth	r4, r6
 801b3c0:	eba4 090e 	sub.w	r9, r4, lr
 801b3c4:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801b3c8:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801b3cc:	fa1f f989 	uxth.w	r9, r9
 801b3d0:	2c09      	cmp	r4, #9
 801b3d2:	4626      	mov	r6, r4
 801b3d4:	bf88      	it	hi
 801b3d6:	f1a4 060a 	subhi.w	r6, r4, #10
 801b3da:	f1bc 0f00 	cmp.w	ip, #0
 801b3de:	bf08      	it	eq
 801b3e0:	f04f 0c02 	moveq.w	ip, #2
 801b3e4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801b3e8:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b3ec:	3c01      	subs	r4, #1
 801b3ee:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801b3f2:	fa1f fc8c 	uxth.w	ip, ip
 801b3f6:	b2a4      	uxth	r4, r4
 801b3f8:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801b3fc:	454c      	cmp	r4, r9
 801b3fe:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801b402:	d1e5      	bne.n	801b3d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801b404:	eba5 050e 	sub.w	r5, r5, lr
 801b408:	eb0e 0408 	add.w	r4, lr, r8
 801b40c:	8705      	strh	r5, [r0, #56]	@ 0x38
 801b40e:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801b412:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801b416:	250a      	movs	r5, #10
 801b418:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801b41a:	1a64      	subs	r4, r4, r1
 801b41c:	4439      	add	r1, r7
 801b41e:	b289      	uxth	r1, r1
 801b420:	2909      	cmp	r1, #9
 801b422:	bf88      	it	hi
 801b424:	390a      	subhi	r1, #10
 801b426:	8704      	strh	r4, [r0, #56]	@ 0x38
 801b428:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801b42a:	b18a      	cbz	r2, 801b450 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 801b42c:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801b42e:	3a01      	subs	r2, #1
 801b430:	3101      	adds	r1, #1
 801b432:	b292      	uxth	r2, r2
 801b434:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801b438:	8701      	strh	r1, [r0, #56]	@ 0x38
 801b43a:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801b43c:	b901      	cbnz	r1, 801b440 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 801b43e:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801b440:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801b442:	3901      	subs	r1, #1
 801b444:	b289      	uxth	r1, r1
 801b446:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801b448:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801b44c:	844c      	strh	r4, [r1, #34]	@ 0x22
 801b44e:	e7ec      	b.n	801b42a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 801b450:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b454:	f7ff bf4b 	b.w	801b2ee <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801b458 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801b458:	b570      	push	{r4, r5, r6, lr}
 801b45a:	2500      	movs	r5, #0
 801b45c:	4295      	cmp	r5, r2
 801b45e:	d011      	beq.n	801b484 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801b460:	8bc4      	ldrh	r4, [r0, #30]
 801b462:	f831 6b02 	ldrh.w	r6, [r1], #2
 801b466:	4414      	add	r4, r2
 801b468:	3c01      	subs	r4, #1
 801b46a:	1b64      	subs	r4, r4, r5
 801b46c:	b2a4      	uxth	r4, r4
 801b46e:	2c01      	cmp	r4, #1
 801b470:	bf88      	it	hi
 801b472:	3c02      	subhi	r4, #2
 801b474:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b478:	8b64      	ldrh	r4, [r4, #26]
 801b47a:	42b4      	cmp	r4, r6
 801b47c:	d117      	bne.n	801b4ae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801b47e:	3501      	adds	r5, #1
 801b480:	b2ad      	uxth	r5, r5
 801b482:	e7eb      	b.n	801b45c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801b484:	2400      	movs	r4, #0
 801b486:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b48a:	4413      	add	r3, r2
 801b48c:	b2a2      	uxth	r2, r4
 801b48e:	429a      	cmp	r2, r3
 801b490:	da0f      	bge.n	801b4b2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801b492:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801b494:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801b498:	4432      	add	r2, r6
 801b49a:	b292      	uxth	r2, r2
 801b49c:	2a09      	cmp	r2, #9
 801b49e:	bf88      	it	hi
 801b4a0:	3a0a      	subhi	r2, #10
 801b4a2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b4a6:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801b4a8:	3401      	adds	r4, #1
 801b4aa:	42aa      	cmp	r2, r5
 801b4ac:	d0ee      	beq.n	801b48c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801b4ae:	2000      	movs	r0, #0
 801b4b0:	bd70      	pop	{r4, r5, r6, pc}
 801b4b2:	2001      	movs	r0, #1
 801b4b4:	e7fc      	b.n	801b4b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801b4b6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801b4b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4ba:	4605      	mov	r5, r0
 801b4bc:	4616      	mov	r6, r2
 801b4be:	1c8c      	adds	r4, r1, #2
 801b4c0:	8809      	ldrh	r1, [r1, #0]
 801b4c2:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801b4c6:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801b4ca:	42b3      	cmp	r3, r6
 801b4cc:	d124      	bne.n	801b518 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801b4ce:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801b4d2:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801b4d6:	f001 070f 	and.w	r7, r1, #15
 801b4da:	f8cd 8000 	str.w	r8, [sp]
 801b4de:	464b      	mov	r3, r9
 801b4e0:	4652      	mov	r2, sl
 801b4e2:	4621      	mov	r1, r4
 801b4e4:	4628      	mov	r0, r5
 801b4e6:	f7ff ffb7 	bl	801b458 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801b4ea:	4683      	mov	fp, r0
 801b4ec:	b168      	cbz	r0, 801b50a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801b4ee:	eb0a 0109 	add.w	r1, sl, r9
 801b4f2:	4441      	add	r1, r8
 801b4f4:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801b4f8:	463a      	mov	r2, r7
 801b4fa:	4649      	mov	r1, r9
 801b4fc:	4628      	mov	r0, r5
 801b4fe:	f7ff ff53 	bl	801b3a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801b502:	4658      	mov	r0, fp
 801b504:	b003      	add	sp, #12
 801b506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b50a:	eb07 010a 	add.w	r1, r7, sl
 801b50e:	4449      	add	r1, r9
 801b510:	4441      	add	r1, r8
 801b512:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801b516:	e7d2      	b.n	801b4be <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801b518:	f04f 0b00 	mov.w	fp, #0
 801b51c:	e7f1      	b.n	801b502 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801b51e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801b51e:	b570      	push	{r4, r5, r6, lr}
 801b520:	8810      	ldrh	r0, [r2, #0]
 801b522:	4298      	cmp	r0, r3
 801b524:	d817      	bhi.n	801b556 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b526:	1e48      	subs	r0, r1, #1
 801b528:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801b52c:	4298      	cmp	r0, r3
 801b52e:	d312      	bcc.n	801b556 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b530:	2400      	movs	r4, #0
 801b532:	428c      	cmp	r4, r1
 801b534:	d20f      	bcs.n	801b556 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b536:	1860      	adds	r0, r4, r1
 801b538:	1040      	asrs	r0, r0, #1
 801b53a:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801b53e:	0085      	lsls	r5, r0, #2
 801b540:	42b3      	cmp	r3, r6
 801b542:	d902      	bls.n	801b54a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801b544:	3001      	adds	r0, #1
 801b546:	b284      	uxth	r4, r0
 801b548:	e7f3      	b.n	801b532 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b54a:	d201      	bcs.n	801b550 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801b54c:	b281      	uxth	r1, r0
 801b54e:	e7f0      	b.n	801b532 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b550:	442a      	add	r2, r5
 801b552:	8850      	ldrh	r0, [r2, #2]
 801b554:	bd70      	pop	{r4, r5, r6, pc}
 801b556:	2000      	movs	r0, #0
 801b558:	e7fc      	b.n	801b554 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801b55a <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801b55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b55e:	4604      	mov	r4, r0
 801b560:	260b      	movs	r6, #11
 801b562:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801b564:	886f      	ldrh	r7, [r5, #2]
 801b566:	087f      	lsrs	r7, r7, #1
 801b568:	3e01      	subs	r6, #1
 801b56a:	d013      	beq.n	801b594 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801b56c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801b56e:	462a      	mov	r2, r5
 801b570:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b574:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801b578:	4639      	mov	r1, r7
 801b57a:	4643      	mov	r3, r8
 801b57c:	4620      	mov	r0, r4
 801b57e:	f7ff ffce 	bl	801b51e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801b582:	b138      	cbz	r0, 801b594 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801b584:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801b588:	4642      	mov	r2, r8
 801b58a:	4620      	mov	r0, r4
 801b58c:	f7ff ff93 	bl	801b4b6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801b590:	2800      	cmp	r0, #0
 801b592:	d1e9      	bne.n	801b568 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801b594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b598 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801b598:	b570      	push	{r4, r5, r6, lr}
 801b59a:	694a      	ldr	r2, [r1, #20]
 801b59c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801b59e:	684b      	ldr	r3, [r1, #4]
 801b5a0:	1b54      	subs	r4, r2, r5
 801b5a2:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801b5a4:	f000 8107 	beq.w	801b7b6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 801b5a8:	1b9b      	subs	r3, r3, r6
 801b5aa:	d003      	beq.n	801b5b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b5ac:	2210      	movs	r2, #16
 801b5ae:	4363      	muls	r3, r4
 801b5b0:	fb93 f3f2 	sdiv	r3, r3, r2
 801b5b4:	680c      	ldr	r4, [r1, #0]
 801b5b6:	698a      	ldr	r2, [r1, #24]
 801b5b8:	1b65      	subs	r5, r4, r5
 801b5ba:	f000 80fe 	beq.w	801b7ba <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 801b5be:	1b92      	subs	r2, r2, r6
 801b5c0:	d003      	beq.n	801b5ca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b5c2:	2410      	movs	r4, #16
 801b5c4:	436a      	muls	r2, r5
 801b5c6:	fb92 f2f4 	sdiv	r2, r2, r4
 801b5ca:	1a9b      	subs	r3, r3, r2
 801b5cc:	ee07 3a90 	vmov	s15, r3
 801b5d0:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801b7f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 801b5d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b5d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b5dc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b5e0:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801b5e4:	460a      	mov	r2, r1
 801b5e6:	eeb1 6a43 	vneg.f32	s12, s6
 801b5ea:	4603      	mov	r3, r0
 801b5ec:	f100 040c 	add.w	r4, r0, #12
 801b5f0:	edd2 7a02 	vldr	s15, [r2, #8]
 801b5f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b5f8:	ece3 6a01 	vstmia	r3!, {s13}
 801b5fc:	edd2 7a03 	vldr	s15, [r2, #12]
 801b600:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b604:	edc3 7a02 	vstr	s15, [r3, #8]
 801b608:	edd2 7a04 	vldr	s15, [r2, #16]
 801b60c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b610:	429c      	cmp	r4, r3
 801b612:	edc3 7a05 	vstr	s15, [r3, #20]
 801b616:	f102 0214 	add.w	r2, r2, #20
 801b61a:	d1e9      	bne.n	801b5f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801b61c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801b61e:	698b      	ldr	r3, [r1, #24]
 801b620:	edd0 4a02 	vldr	s9, [r0, #8]
 801b624:	1a9b      	subs	r3, r3, r2
 801b626:	ee07 3a90 	vmov	s15, r3
 801b62a:	684b      	ldr	r3, [r1, #4]
 801b62c:	edd0 3a00 	vldr	s7, [r0]
 801b630:	1a9b      	subs	r3, r3, r2
 801b632:	edd0 6a01 	vldr	s13, [r0, #4]
 801b636:	ee07 3a10 	vmov	s14, r3
 801b63a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b63e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801b642:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b646:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801b64a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b64e:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801b652:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b656:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b65a:	ee67 7a83 	vmul.f32	s15, s15, s6
 801b65e:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801b662:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801b664:	694a      	ldr	r2, [r1, #20]
 801b666:	ed90 5a05 	vldr	s10, [r0, #20]
 801b66a:	1b13      	subs	r3, r2, r4
 801b66c:	ee07 3a10 	vmov	s14, r3
 801b670:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b674:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b678:	680b      	ldr	r3, [r1, #0]
 801b67a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801b67e:	1b1b      	subs	r3, r3, r4
 801b680:	ee07 3a10 	vmov	s14, r3
 801b684:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b688:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b68c:	eee6 4a87 	vfma.f32	s9, s13, s14
 801b690:	ee64 4a86 	vmul.f32	s9, s9, s12
 801b694:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801b698:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801b69a:	698b      	ldr	r3, [r1, #24]
 801b69c:	ed90 2a03 	vldr	s4, [r0, #12]
 801b6a0:	1a9b      	subs	r3, r3, r2
 801b6a2:	ee06 3a90 	vmov	s13, r3
 801b6a6:	684b      	ldr	r3, [r1, #4]
 801b6a8:	edd0 5a04 	vldr	s11, [r0, #16]
 801b6ac:	1a9b      	subs	r3, r3, r2
 801b6ae:	ee07 3a10 	vmov	s14, r3
 801b6b2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b6b6:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801b6ba:	ee66 6a84 	vmul.f32	s13, s13, s8
 801b6be:	ee32 5a45 	vsub.f32	s10, s4, s10
 801b6c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b6c6:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801b6ca:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b6ce:	eee5 6a87 	vfma.f32	s13, s11, s14
 801b6d2:	ee66 6a83 	vmul.f32	s13, s13, s6
 801b6d6:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801b6da:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801b6dc:	694a      	ldr	r2, [r1, #20]
 801b6de:	ed90 1a07 	vldr	s2, [r0, #28]
 801b6e2:	1b13      	subs	r3, r2, r4
 801b6e4:	ee07 3a10 	vmov	s14, r3
 801b6e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b6ec:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b6f0:	680b      	ldr	r3, [r1, #0]
 801b6f2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801b6f6:	1b1b      	subs	r3, r3, r4
 801b6f8:	ee07 3a10 	vmov	s14, r3
 801b6fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b700:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b704:	eea5 5a87 	vfma.f32	s10, s11, s14
 801b708:	ee25 5a06 	vmul.f32	s10, s10, s12
 801b70c:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801b710:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801b712:	698b      	ldr	r3, [r1, #24]
 801b714:	edd0 5a08 	vldr	s11, [r0, #32]
 801b718:	1a9b      	subs	r3, r3, r2
 801b71a:	ee07 3a10 	vmov	s14, r3
 801b71e:	684b      	ldr	r3, [r1, #4]
 801b720:	edd0 2a06 	vldr	s5, [r0, #24]
 801b724:	1a9b      	subs	r3, r3, r2
 801b726:	ee01 3a90 	vmov	s3, r3
 801b72a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b72e:	ee31 1a65 	vsub.f32	s2, s2, s11
 801b732:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b736:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801b73a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b73e:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801b742:	ee61 1a84 	vmul.f32	s3, s3, s8
 801b746:	eea1 7a21 	vfma.f32	s14, s2, s3
 801b74a:	ee27 7a03 	vmul.f32	s14, s14, s6
 801b74e:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801b752:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801b754:	694a      	ldr	r2, [r1, #20]
 801b756:	1b13      	subs	r3, r2, r4
 801b758:	ee03 3a10 	vmov	s6, r3
 801b75c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b760:	ee23 3a04 	vmul.f32	s6, s6, s8
 801b764:	680b      	ldr	r3, [r1, #0]
 801b766:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801b76a:	1b1b      	subs	r3, r3, r4
 801b76c:	ee03 3a10 	vmov	s6, r3
 801b770:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b774:	ee23 4a04 	vmul.f32	s8, s6, s8
 801b778:	eee1 5a04 	vfma.f32	s11, s2, s8
 801b77c:	ee25 6a86 	vmul.f32	s12, s11, s12
 801b780:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801b784:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801b788:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801b78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b790:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801b794:	dd13      	ble.n	801b7be <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801b796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801b79a:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801b79e:	eee3 7a87 	vfma.f32	s15, s7, s14
 801b7a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7aa:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801b7ac:	dd15      	ble.n	801b7da <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801b7ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801b7b2:	6403      	str	r3, [r0, #64]	@ 0x40
 801b7b4:	bd70      	pop	{r4, r5, r6, pc}
 801b7b6:	4623      	mov	r3, r4
 801b7b8:	e6fc      	b.n	801b5b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b7ba:	462a      	mov	r2, r5
 801b7bc:	e705      	b.n	801b5ca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b7be:	d502      	bpl.n	801b7c6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 801b7c0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801b7c4:	e7e9      	b.n	801b79a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 801b7c6:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801b7ca:	eea3 2a85 	vfma.f32	s4, s7, s10
 801b7ce:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801b7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7d6:	dade      	bge.n	801b796 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 801b7d8:	e7f2      	b.n	801b7c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 801b7da:	d502      	bpl.n	801b7e2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 801b7dc:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801b7e0:	e7e7      	b.n	801b7b2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 801b7e2:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801b7e6:	eee3 4a86 	vfma.f32	s9, s7, s12
 801b7ea:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801b7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7f2:	dadc      	bge.n	801b7ae <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 801b7f4:	e7f2      	b.n	801b7dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 801b7f6:	bf00      	nop
 801b7f8:	3d800000 	.word	0x3d800000

0801b7fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801b7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b800:	2714      	movs	r7, #20
 801b802:	435f      	muls	r7, r3
 801b804:	eb02 0c07 	add.w	ip, r2, r7
 801b808:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801b80c:	f115 0e0f 	adds.w	lr, r5, #15
 801b810:	f100 80a2 	bmi.w	801b958 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801b814:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801b818:	2614      	movs	r6, #20
 801b81a:	9c08      	ldr	r4, [sp, #32]
 801b81c:	f8c0 e014 	str.w	lr, [r0, #20]
 801b820:	4366      	muls	r6, r4
 801b822:	eb02 0806 	add.w	r8, r2, r6
 801b826:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b82a:	f115 040f 	adds.w	r4, r5, #15
 801b82e:	f100 809f 	bmi.w	801b970 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801b832:	1124      	asrs	r4, r4, #4
 801b834:	eba4 040e 	sub.w	r4, r4, lr
 801b838:	6184      	str	r4, [r0, #24]
 801b83a:	2c00      	cmp	r4, #0
 801b83c:	f000 808a 	beq.w	801b954 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801b840:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801b844:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801b848:	5995      	ldr	r5, [r2, r6]
 801b84a:	eba4 0809 	sub.w	r8, r4, r9
 801b84e:	59d4      	ldr	r4, [r2, r7]
 801b850:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801b854:	eba5 0a04 	sub.w	sl, r5, r4
 801b858:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801b85c:	fb0e fe05 	mul.w	lr, lr, r5
 801b860:	fb0a ee19 	mls	lr, sl, r9, lr
 801b864:	fb08 e404 	mla	r4, r8, r4, lr
 801b868:	3c01      	subs	r4, #1
 801b86a:	19a4      	adds	r4, r4, r6
 801b86c:	f100 808c 	bmi.w	801b988 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801b870:	fb94 fef6 	sdiv	lr, r4, r6
 801b874:	fb06 441e 	mls	r4, r6, lr, r4
 801b878:	f8c0 e000 	str.w	lr, [r0]
 801b87c:	6104      	str	r4, [r0, #16]
 801b87e:	2d00      	cmp	r5, #0
 801b880:	f2c0 8095 	blt.w	801b9ae <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801b884:	fb95 f4f6 	sdiv	r4, r5, r6
 801b888:	fb06 5514 	mls	r5, r6, r4, r5
 801b88c:	6044      	str	r4, [r0, #4]
 801b88e:	6085      	str	r5, [r0, #8]
 801b890:	60c6      	str	r6, [r0, #12]
 801b892:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801b896:	6945      	ldr	r5, [r0, #20]
 801b898:	59d2      	ldr	r2, [r2, r7]
 801b89a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801b89e:	ee07 4a10 	vmov	s14, r4
 801b8a2:	6804      	ldr	r4, [r0, #0]
 801b8a4:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 801b9d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801b8a8:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801b8ac:	ee07 2a90 	vmov	s15, r2
 801b8b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b8b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b8b8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b8bc:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801b8c0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b8c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b8c8:	edd3 6a00 	vldr	s13, [r3]
 801b8cc:	eee6 6a07 	vfma.f32	s13, s12, s14
 801b8d0:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801b8d4:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b8d8:	edc0 6a07 	vstr	s13, [r0, #28]
 801b8dc:	edd0 6a01 	vldr	s13, [r0, #4]
 801b8e0:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801b8e4:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801b8e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b8ec:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b8f0:	ed80 6a08 	vstr	s12, [r0, #32]
 801b8f4:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801b8f6:	6242      	str	r2, [r0, #36]	@ 0x24
 801b8f8:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801b8fc:	ed93 6a03 	vldr	s12, [r3, #12]
 801b900:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b904:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801b908:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801b90c:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801b910:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801b914:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801b918:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b91c:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801b920:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801b922:	6302      	str	r2, [r0, #48]	@ 0x30
 801b924:	ed93 6a06 	vldr	s12, [r3, #24]
 801b928:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801b92c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b930:	eeb0 7a46 	vmov.f32	s14, s12
 801b934:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801b938:	eea6 7a27 	vfma.f32	s14, s12, s15
 801b93c:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801b940:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801b944:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801b948:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b94c:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801b950:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801b952:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801b954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b958:	2410      	movs	r4, #16
 801b95a:	f1c5 0501 	rsb	r5, r5, #1
 801b95e:	f015 050f 	ands.w	r5, r5, #15
 801b962:	fb9e fef4 	sdiv	lr, lr, r4
 801b966:	bf18      	it	ne
 801b968:	2501      	movne	r5, #1
 801b96a:	ebae 0e05 	sub.w	lr, lr, r5
 801b96e:	e753      	b.n	801b818 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801b970:	f04f 0910 	mov.w	r9, #16
 801b974:	f1c5 0501 	rsb	r5, r5, #1
 801b978:	f015 050f 	ands.w	r5, r5, #15
 801b97c:	fb94 f4f9 	sdiv	r4, r4, r9
 801b980:	bf18      	it	ne
 801b982:	2501      	movne	r5, #1
 801b984:	1b64      	subs	r4, r4, r5
 801b986:	e755      	b.n	801b834 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801b988:	4264      	negs	r4, r4
 801b98a:	fb94 fef6 	sdiv	lr, r4, r6
 801b98e:	fb06 441e 	mls	r4, r6, lr, r4
 801b992:	f1ce 0800 	rsb	r8, lr, #0
 801b996:	f8c0 8000 	str.w	r8, [r0]
 801b99a:	6104      	str	r4, [r0, #16]
 801b99c:	2c00      	cmp	r4, #0
 801b99e:	f43f af6e 	beq.w	801b87e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801b9a2:	ea6f 0e0e 	mvn.w	lr, lr
 801b9a6:	1b34      	subs	r4, r6, r4
 801b9a8:	f8c0 e000 	str.w	lr, [r0]
 801b9ac:	e766      	b.n	801b87c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801b9ae:	426d      	negs	r5, r5
 801b9b0:	fb95 f4f6 	sdiv	r4, r5, r6
 801b9b4:	fb06 5514 	mls	r5, r6, r4, r5
 801b9b8:	f1c4 0e00 	rsb	lr, r4, #0
 801b9bc:	f8c0 e004 	str.w	lr, [r0, #4]
 801b9c0:	6085      	str	r5, [r0, #8]
 801b9c2:	2d00      	cmp	r5, #0
 801b9c4:	f43f af64 	beq.w	801b890 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801b9c8:	43e4      	mvns	r4, r4
 801b9ca:	1b75      	subs	r5, r6, r5
 801b9cc:	6044      	str	r4, [r0, #4]
 801b9ce:	e75e      	b.n	801b88e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801b9d0:	3d800000 	.word	0x3d800000

0801b9d4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b9d4:	4b01      	ldr	r3, [pc, #4]	@ (801b9dc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b9d6:	6018      	str	r0, [r3, #0]
 801b9d8:	4770      	bx	lr
 801b9da:	bf00      	nop
 801b9dc:	2005b990 	.word	0x2005b990

0801b9e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801b9e0:	4b06      	ldr	r3, [pc, #24]	@ (801b9fc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801b9e2:	881a      	ldrh	r2, [r3, #0]
 801b9e4:	4282      	cmp	r2, r0
 801b9e6:	d807      	bhi.n	801b9f8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801b9e8:	4b05      	ldr	r3, [pc, #20]	@ (801ba00 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801b9ea:	881b      	ldrh	r3, [r3, #0]
 801b9ec:	4413      	add	r3, r2
 801b9ee:	4298      	cmp	r0, r3
 801b9f0:	bfac      	ite	ge
 801b9f2:	2000      	movge	r0, #0
 801b9f4:	2001      	movlt	r0, #1
 801b9f6:	4770      	bx	lr
 801b9f8:	2000      	movs	r0, #0
 801b9fa:	4770      	bx	lr
 801b9fc:	2005b9b0 	.word	0x2005b9b0
 801ba00:	2005b9b4 	.word	0x2005b9b4

0801ba04 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801ba04:	b508      	push	{r3, lr}
 801ba06:	4601      	mov	r1, r0
 801ba08:	f7ff ffea 	bl	801b9e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801ba0c:	b118      	cbz	r0, 801ba16 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801ba0e:	4b02      	ldr	r3, [pc, #8]	@ (801ba18 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801ba10:	681b      	ldr	r3, [r3, #0]
 801ba12:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801ba16:	bd08      	pop	{r3, pc}
 801ba18:	2005b994 	.word	0x2005b994

0801ba1c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801ba1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba1e:	4c24      	ldr	r4, [pc, #144]	@ (801bab0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801ba20:	6823      	ldr	r3, [r4, #0]
 801ba22:	2b00      	cmp	r3, #0
 801ba24:	d042      	beq.n	801baac <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801ba26:	4a23      	ldr	r2, [pc, #140]	@ (801bab4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801ba28:	4d23      	ldr	r5, [pc, #140]	@ (801bab8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801ba2a:	8811      	ldrh	r1, [r2, #0]
 801ba2c:	f8b5 c000 	ldrh.w	ip, [r5]
 801ba30:	4822      	ldr	r0, [pc, #136]	@ (801babc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801ba32:	4461      	add	r1, ip
 801ba34:	1c4a      	adds	r2, r1, #1
 801ba36:	f022 0201 	bic.w	r2, r2, #1
 801ba3a:	008f      	lsls	r7, r1, #2
 801ba3c:	0412      	lsls	r2, r2, #16
 801ba3e:	19de      	adds	r6, r3, r7
 801ba40:	0c12      	lsrs	r2, r2, #16
 801ba42:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801ba46:	6006      	str	r6, [r0, #0]
 801ba48:	4e1d      	ldr	r6, [pc, #116]	@ (801bac0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801ba4a:	19da      	adds	r2, r3, r7
 801ba4c:	6032      	str	r2, [r6, #0]
 801ba4e:	220e      	movs	r2, #14
 801ba50:	fb02 f20c 	mul.w	r2, r2, ip
 801ba54:	3203      	adds	r2, #3
 801ba56:	f022 0203 	bic.w	r2, r2, #3
 801ba5a:	443a      	add	r2, r7
 801ba5c:	4f19      	ldr	r7, [pc, #100]	@ (801bac4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801ba5e:	4413      	add	r3, r2
 801ba60:	603b      	str	r3, [r7, #0]
 801ba62:	2300      	movs	r3, #0
 801ba64:	4f18      	ldr	r7, [pc, #96]	@ (801bac8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801ba66:	469c      	mov	ip, r3
 801ba68:	803b      	strh	r3, [r7, #0]
 801ba6a:	4f18      	ldr	r7, [pc, #96]	@ (801bacc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801ba6c:	683f      	ldr	r7, [r7, #0]
 801ba6e:	1aba      	subs	r2, r7, r2
 801ba70:	4f17      	ldr	r7, [pc, #92]	@ (801bad0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ba72:	603a      	str	r2, [r7, #0]
 801ba74:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801ba78:	4a16      	ldr	r2, [pc, #88]	@ (801bad4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ba7a:	8013      	strh	r3, [r2, #0]
 801ba7c:	428b      	cmp	r3, r1
 801ba7e:	d10d      	bne.n	801ba9c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801ba80:	2300      	movs	r3, #0
 801ba82:	240e      	movs	r4, #14
 801ba84:	882d      	ldrh	r5, [r5, #0]
 801ba86:	6830      	ldr	r0, [r6, #0]
 801ba88:	429d      	cmp	r5, r3
 801ba8a:	d90f      	bls.n	801baac <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801ba8c:	fb04 0203 	mla	r2, r4, r3, r0
 801ba90:	7b11      	ldrb	r1, [r2, #12]
 801ba92:	3301      	adds	r3, #1
 801ba94:	f36f 1145 	bfc	r1, #5, #1
 801ba98:	7311      	strb	r1, [r2, #12]
 801ba9a:	e7f5      	b.n	801ba88 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801ba9c:	6822      	ldr	r2, [r4, #0]
 801ba9e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801baa2:	6802      	ldr	r2, [r0, #0]
 801baa4:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801baa8:	3301      	adds	r3, #1
 801baaa:	e7e7      	b.n	801ba7c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801baac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801baae:	bf00      	nop
 801bab0:	2005b994 	.word	0x2005b994
 801bab4:	2005b9b0 	.word	0x2005b9b0
 801bab8:	2005b9b4 	.word	0x2005b9b4
 801babc:	2005b9a8 	.word	0x2005b9a8
 801bac0:	2005b998 	.word	0x2005b998
 801bac4:	2005b9a0 	.word	0x2005b9a0
 801bac8:	2005b9b2 	.word	0x2005b9b2
 801bacc:	2005b99c 	.word	0x2005b99c
 801bad0:	2005b9ac 	.word	0x2005b9ac
 801bad4:	2005b9a4 	.word	0x2005b9a4

0801bad8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801bad8:	4b06      	ldr	r3, [pc, #24]	@ (801baf4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801bada:	681b      	ldr	r3, [r3, #0]
 801badc:	b943      	cbnz	r3, 801baf0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801bade:	b139      	cbz	r1, 801baf0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801bae0:	4b05      	ldr	r3, [pc, #20]	@ (801baf8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801bae2:	801a      	strh	r2, [r3, #0]
 801bae4:	4b05      	ldr	r3, [pc, #20]	@ (801bafc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801bae6:	6019      	str	r1, [r3, #0]
 801bae8:	4b05      	ldr	r3, [pc, #20]	@ (801bb00 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801baea:	6018      	str	r0, [r3, #0]
 801baec:	f7ff bf96 	b.w	801ba1c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801baf0:	4770      	bx	lr
 801baf2:	bf00      	nop
 801baf4:	2005b9a0 	.word	0x2005b9a0
 801baf8:	2005b9b4 	.word	0x2005b9b4
 801bafc:	2005b99c 	.word	0x2005b99c
 801bb00:	2005b994 	.word	0x2005b994

0801bb04 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801bb04:	b470      	push	{r4, r5, r6}
 801bb06:	4c07      	ldr	r4, [pc, #28]	@ (801bb24 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801bb08:	4605      	mov	r5, r0
 801bb0a:	6826      	ldr	r6, [r4, #0]
 801bb0c:	4610      	mov	r0, r2
 801bb0e:	9a03      	ldr	r2, [sp, #12]
 801bb10:	b936      	cbnz	r6, 801bb20 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801bb12:	6025      	str	r5, [r4, #0]
 801bb14:	4c04      	ldr	r4, [pc, #16]	@ (801bb28 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801bb16:	8021      	strh	r1, [r4, #0]
 801bb18:	bc70      	pop	{r4, r5, r6}
 801bb1a:	4619      	mov	r1, r3
 801bb1c:	f7ff bfdc 	b.w	801bad8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801bb20:	bc70      	pop	{r4, r5, r6}
 801bb22:	4770      	bx	lr
 801bb24:	2005b9b8 	.word	0x2005b9b8
 801bb28:	2005b9b0 	.word	0x2005b9b0

0801bb2c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801bb2c:	4a12      	ldr	r2, [pc, #72]	@ (801bb78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801bb2e:	8803      	ldrh	r3, [r0, #0]
 801bb30:	8812      	ldrh	r2, [r2, #0]
 801bb32:	4293      	cmp	r3, r2
 801bb34:	d207      	bcs.n	801bb46 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801bb36:	2114      	movs	r1, #20
 801bb38:	4a10      	ldr	r2, [pc, #64]	@ (801bb7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801bb3a:	6812      	ldr	r2, [r2, #0]
 801bb3c:	fb01 2303 	mla	r3, r1, r3, r2
 801bb40:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801bb44:	4770      	bx	lr
 801bb46:	490e      	ldr	r1, [pc, #56]	@ (801bb80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801bb48:	8809      	ldrh	r1, [r1, #0]
 801bb4a:	4411      	add	r1, r2
 801bb4c:	428b      	cmp	r3, r1
 801bb4e:	da04      	bge.n	801bb5a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801bb50:	1a9b      	subs	r3, r3, r2
 801bb52:	4a0c      	ldr	r2, [pc, #48]	@ (801bb84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801bb54:	210e      	movs	r1, #14
 801bb56:	6812      	ldr	r2, [r2, #0]
 801bb58:	e7f0      	b.n	801bb3c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801bb5a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801bb5e:	4293      	cmp	r3, r2
 801bb60:	d108      	bne.n	801bb74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801bb62:	4b09      	ldr	r3, [pc, #36]	@ (801bb88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801bb64:	781b      	ldrb	r3, [r3, #0]
 801bb66:	b91b      	cbnz	r3, 801bb70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801bb68:	4b08      	ldr	r3, [pc, #32]	@ (801bb8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801bb6a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801bb6e:	4770      	bx	lr
 801bb70:	4b07      	ldr	r3, [pc, #28]	@ (801bb90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801bb72:	e7fa      	b.n	801bb6a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801bb74:	2000      	movs	r0, #0
 801bb76:	4770      	bx	lr
 801bb78:	2005b9b0 	.word	0x2005b9b0
 801bb7c:	2005b9b8 	.word	0x2005b9b8
 801bb80:	2005b9b4 	.word	0x2005b9b4
 801bb84:	2005b998 	.word	0x2005b998
 801bb88:	2005b920 	.word	0x2005b920
 801bb8c:	2005b922 	.word	0x2005b922
 801bb90:	2005b924 	.word	0x2005b924

0801bb94 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801bb94:	4a12      	ldr	r2, [pc, #72]	@ (801bbe0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801bb96:	8803      	ldrh	r3, [r0, #0]
 801bb98:	8812      	ldrh	r2, [r2, #0]
 801bb9a:	4293      	cmp	r3, r2
 801bb9c:	d207      	bcs.n	801bbae <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801bb9e:	2114      	movs	r1, #20
 801bba0:	4a10      	ldr	r2, [pc, #64]	@ (801bbe4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801bba2:	6812      	ldr	r2, [r2, #0]
 801bba4:	fb01 2303 	mla	r3, r1, r3, r2
 801bba8:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801bbac:	4770      	bx	lr
 801bbae:	490e      	ldr	r1, [pc, #56]	@ (801bbe8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801bbb0:	8809      	ldrh	r1, [r1, #0]
 801bbb2:	4411      	add	r1, r2
 801bbb4:	428b      	cmp	r3, r1
 801bbb6:	da04      	bge.n	801bbc2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801bbb8:	1a9b      	subs	r3, r3, r2
 801bbba:	4a0c      	ldr	r2, [pc, #48]	@ (801bbec <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801bbbc:	210e      	movs	r1, #14
 801bbbe:	6812      	ldr	r2, [r2, #0]
 801bbc0:	e7f0      	b.n	801bba4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801bbc2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801bbc6:	4293      	cmp	r3, r2
 801bbc8:	d108      	bne.n	801bbdc <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801bbca:	4b09      	ldr	r3, [pc, #36]	@ (801bbf0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801bbcc:	781b      	ldrb	r3, [r3, #0]
 801bbce:	b91b      	cbnz	r3, 801bbd8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801bbd0:	4b08      	ldr	r3, [pc, #32]	@ (801bbf4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801bbd2:	f9b3 0000 	ldrsh.w	r0, [r3]
 801bbd6:	4770      	bx	lr
 801bbd8:	4b07      	ldr	r3, [pc, #28]	@ (801bbf8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801bbda:	e7fa      	b.n	801bbd2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801bbdc:	2000      	movs	r0, #0
 801bbde:	4770      	bx	lr
 801bbe0:	2005b9b0 	.word	0x2005b9b0
 801bbe4:	2005b9b8 	.word	0x2005b9b8
 801bbe8:	2005b9b4 	.word	0x2005b9b4
 801bbec:	2005b998 	.word	0x2005b998
 801bbf0:	2005b920 	.word	0x2005b920
 801bbf4:	2005b924 	.word	0x2005b924
 801bbf8:	2005b922 	.word	0x2005b922

0801bbfc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801bbfc:	b530      	push	{r4, r5, lr}
 801bbfe:	4a22      	ldr	r2, [pc, #136]	@ (801bc88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801bc00:	880b      	ldrh	r3, [r1, #0]
 801bc02:	8812      	ldrh	r2, [r2, #0]
 801bc04:	4293      	cmp	r3, r2
 801bc06:	d213      	bcs.n	801bc30 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801bc08:	2114      	movs	r1, #20
 801bc0a:	4a20      	ldr	r2, [pc, #128]	@ (801bc8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801bc0c:	6812      	ldr	r2, [r2, #0]
 801bc0e:	fb01 2303 	mla	r3, r1, r3, r2
 801bc12:	8a1a      	ldrh	r2, [r3, #16]
 801bc14:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801bc18:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801bc1c:	8a5b      	ldrh	r3, [r3, #18]
 801bc1e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801bc22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bc26:	8004      	strh	r4, [r0, #0]
 801bc28:	8041      	strh	r1, [r0, #2]
 801bc2a:	8082      	strh	r2, [r0, #4]
 801bc2c:	80c3      	strh	r3, [r0, #6]
 801bc2e:	e024      	b.n	801bc7a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801bc30:	4917      	ldr	r1, [pc, #92]	@ (801bc90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801bc32:	8809      	ldrh	r1, [r1, #0]
 801bc34:	4411      	add	r1, r2
 801bc36:	428b      	cmp	r3, r1
 801bc38:	da10      	bge.n	801bc5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801bc3a:	1a9b      	subs	r3, r3, r2
 801bc3c:	220e      	movs	r2, #14
 801bc3e:	4353      	muls	r3, r2
 801bc40:	4a14      	ldr	r2, [pc, #80]	@ (801bc94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801bc42:	6811      	ldr	r1, [r2, #0]
 801bc44:	18ca      	adds	r2, r1, r3
 801bc46:	5ecd      	ldrsh	r5, [r1, r3]
 801bc48:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801bc4c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801bc50:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801bc54:	8005      	strh	r5, [r0, #0]
 801bc56:	8044      	strh	r4, [r0, #2]
 801bc58:	8081      	strh	r1, [r0, #4]
 801bc5a:	e7e7      	b.n	801bc2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801bc5c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801bc60:	4293      	cmp	r3, r2
 801bc62:	d10b      	bne.n	801bc7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801bc64:	4b0c      	ldr	r3, [pc, #48]	@ (801bc98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801bc66:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bc6a:	4b0c      	ldr	r3, [pc, #48]	@ (801bc9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801bc6c:	8081      	strh	r1, [r0, #4]
 801bc6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bc72:	2300      	movs	r3, #0
 801bc74:	80c2      	strh	r2, [r0, #6]
 801bc76:	8003      	strh	r3, [r0, #0]
 801bc78:	8043      	strh	r3, [r0, #2]
 801bc7a:	bd30      	pop	{r4, r5, pc}
 801bc7c:	2300      	movs	r3, #0
 801bc7e:	8003      	strh	r3, [r0, #0]
 801bc80:	8043      	strh	r3, [r0, #2]
 801bc82:	8083      	strh	r3, [r0, #4]
 801bc84:	e7d2      	b.n	801bc2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801bc86:	bf00      	nop
 801bc88:	2005b9b0 	.word	0x2005b9b0
 801bc8c:	2005b9b8 	.word	0x2005b9b8
 801bc90:	2005b9b4 	.word	0x2005b9b4
 801bc94:	2005b998 	.word	0x2005b998
 801bc98:	2005b91c 	.word	0x2005b91c
 801bc9c:	2005b91e 	.word	0x2005b91e

0801bca0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801bca0:	4a17      	ldr	r2, [pc, #92]	@ (801bd00 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801bca2:	8803      	ldrh	r3, [r0, #0]
 801bca4:	8812      	ldrh	r2, [r2, #0]
 801bca6:	4293      	cmp	r3, r2
 801bca8:	d213      	bcs.n	801bcd2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801bcaa:	2114      	movs	r1, #20
 801bcac:	4a15      	ldr	r2, [pc, #84]	@ (801bd04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801bcae:	6812      	ldr	r2, [r2, #0]
 801bcb0:	fb01 2303 	mla	r3, r1, r3, r2
 801bcb4:	8a1a      	ldrh	r2, [r3, #16]
 801bcb6:	8919      	ldrh	r1, [r3, #8]
 801bcb8:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801bcbc:	428a      	cmp	r2, r1
 801bcbe:	db1d      	blt.n	801bcfc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801bcc0:	8a58      	ldrh	r0, [r3, #18]
 801bcc2:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801bcc6:	895b      	ldrh	r3, [r3, #10]
 801bcc8:	4298      	cmp	r0, r3
 801bcca:	bfac      	ite	ge
 801bccc:	2000      	movge	r0, #0
 801bcce:	2001      	movlt	r0, #1
 801bcd0:	4770      	bx	lr
 801bcd2:	490d      	ldr	r1, [pc, #52]	@ (801bd08 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801bcd4:	8809      	ldrh	r1, [r1, #0]
 801bcd6:	4411      	add	r1, r2
 801bcd8:	428b      	cmp	r3, r1
 801bcda:	da0d      	bge.n	801bcf8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801bcdc:	210e      	movs	r1, #14
 801bcde:	1a9b      	subs	r3, r3, r2
 801bce0:	4a0a      	ldr	r2, [pc, #40]	@ (801bd0c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801bce2:	6812      	ldr	r2, [r2, #0]
 801bce4:	fb01 2303 	mla	r3, r1, r3, r2
 801bce8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801bcec:	891a      	ldrh	r2, [r3, #8]
 801bcee:	4291      	cmp	r1, r2
 801bcf0:	db04      	blt.n	801bcfc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801bcf2:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801bcf6:	e7e6      	b.n	801bcc6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801bcf8:	2000      	movs	r0, #0
 801bcfa:	4770      	bx	lr
 801bcfc:	2001      	movs	r0, #1
 801bcfe:	4770      	bx	lr
 801bd00:	2005b9b0 	.word	0x2005b9b0
 801bd04:	2005b9b8 	.word	0x2005b9b8
 801bd08:	2005b9b4 	.word	0x2005b9b4
 801bd0c:	2005b998 	.word	0x2005b998

0801bd10 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801bd10:	4a12      	ldr	r2, [pc, #72]	@ (801bd5c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801bd12:	8803      	ldrh	r3, [r0, #0]
 801bd14:	8811      	ldrh	r1, [r2, #0]
 801bd16:	428b      	cmp	r3, r1
 801bd18:	d20b      	bcs.n	801bd32 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801bd1a:	4a11      	ldr	r2, [pc, #68]	@ (801bd60 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bd1c:	6812      	ldr	r2, [r2, #0]
 801bd1e:	b112      	cbz	r2, 801bd26 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801bd20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bd24:	b9c0      	cbnz	r0, 801bd58 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801bd26:	4a0f      	ldr	r2, [pc, #60]	@ (801bd64 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801bd28:	6811      	ldr	r1, [r2, #0]
 801bd2a:	2214      	movs	r2, #20
 801bd2c:	4353      	muls	r3, r2
 801bd2e:	58c8      	ldr	r0, [r1, r3]
 801bd30:	4770      	bx	lr
 801bd32:	4a0d      	ldr	r2, [pc, #52]	@ (801bd68 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801bd34:	8812      	ldrh	r2, [r2, #0]
 801bd36:	440a      	add	r2, r1
 801bd38:	4293      	cmp	r3, r2
 801bd3a:	da04      	bge.n	801bd46 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801bd3c:	4a08      	ldr	r2, [pc, #32]	@ (801bd60 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bd3e:	6812      	ldr	r2, [r2, #0]
 801bd40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bd44:	4770      	bx	lr
 801bd46:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801bd4a:	4293      	cmp	r3, r2
 801bd4c:	d103      	bne.n	801bd56 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801bd4e:	4b07      	ldr	r3, [pc, #28]	@ (801bd6c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801bd50:	681b      	ldr	r3, [r3, #0]
 801bd52:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801bd54:	4770      	bx	lr
 801bd56:	2000      	movs	r0, #0
 801bd58:	4770      	bx	lr
 801bd5a:	bf00      	nop
 801bd5c:	2005b9b0 	.word	0x2005b9b0
 801bd60:	2005b994 	.word	0x2005b994
 801bd64:	2005b9b8 	.word	0x2005b9b8
 801bd68:	2005b9b4 	.word	0x2005b9b4
 801bd6c:	2005b928 	.word	0x2005b928

0801bd70 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801bd70:	4b24      	ldr	r3, [pc, #144]	@ (801be04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801bd72:	8802      	ldrh	r2, [r0, #0]
 801bd74:	8818      	ldrh	r0, [r3, #0]
 801bd76:	4282      	cmp	r2, r0
 801bd78:	d221      	bcs.n	801bdbe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801bd7a:	4b23      	ldr	r3, [pc, #140]	@ (801be08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bd7c:	6819      	ldr	r1, [r3, #0]
 801bd7e:	2314      	movs	r3, #20
 801bd80:	fb03 1302 	mla	r3, r3, r2, r1
 801bd84:	6858      	ldr	r0, [r3, #4]
 801bd86:	2800      	cmp	r0, #0
 801bd88:	d03a      	beq.n	801be00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801bd8a:	4920      	ldr	r1, [pc, #128]	@ (801be0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bd8c:	6809      	ldr	r1, [r1, #0]
 801bd8e:	2900      	cmp	r1, #0
 801bd90:	d036      	beq.n	801be00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801bd92:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bd96:	2900      	cmp	r1, #0
 801bd98:	d032      	beq.n	801be00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801bd9a:	891a      	ldrh	r2, [r3, #8]
 801bd9c:	8958      	ldrh	r0, [r3, #10]
 801bd9e:	4350      	muls	r0, r2
 801bda0:	7c5a      	ldrb	r2, [r3, #17]
 801bda2:	7cdb      	ldrb	r3, [r3, #19]
 801bda4:	0952      	lsrs	r2, r2, #5
 801bda6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801bdaa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801bdae:	2b0b      	cmp	r3, #11
 801bdb0:	bf18      	it	ne
 801bdb2:	0040      	lslne	r0, r0, #1
 801bdb4:	3003      	adds	r0, #3
 801bdb6:	f020 0003 	bic.w	r0, r0, #3
 801bdba:	4408      	add	r0, r1
 801bdbc:	4770      	bx	lr
 801bdbe:	4b14      	ldr	r3, [pc, #80]	@ (801be10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801bdc0:	881b      	ldrh	r3, [r3, #0]
 801bdc2:	4403      	add	r3, r0
 801bdc4:	429a      	cmp	r2, r3
 801bdc6:	da1a      	bge.n	801bdfe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bdc8:	210e      	movs	r1, #14
 801bdca:	4b12      	ldr	r3, [pc, #72]	@ (801be14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801bdcc:	1a10      	subs	r0, r2, r0
 801bdce:	681b      	ldr	r3, [r3, #0]
 801bdd0:	fb01 3000 	mla	r0, r1, r0, r3
 801bdd4:	7b03      	ldrb	r3, [r0, #12]
 801bdd6:	f003 031f 	and.w	r3, r3, #31
 801bdda:	2b0b      	cmp	r3, #11
 801bddc:	d10b      	bne.n	801bdf6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801bdde:	8903      	ldrh	r3, [r0, #8]
 801bde0:	8940      	ldrh	r0, [r0, #10]
 801bde2:	4358      	muls	r0, r3
 801bde4:	4b09      	ldr	r3, [pc, #36]	@ (801be0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bde6:	3003      	adds	r0, #3
 801bde8:	6819      	ldr	r1, [r3, #0]
 801bdea:	f020 0303 	bic.w	r3, r0, #3
 801bdee:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801bdf2:	4418      	add	r0, r3
 801bdf4:	4770      	bx	lr
 801bdf6:	2b0d      	cmp	r3, #13
 801bdf8:	d101      	bne.n	801bdfe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bdfa:	300d      	adds	r0, #13
 801bdfc:	4770      	bx	lr
 801bdfe:	2000      	movs	r0, #0
 801be00:	4770      	bx	lr
 801be02:	bf00      	nop
 801be04:	2005b9b0 	.word	0x2005b9b0
 801be08:	2005b9b8 	.word	0x2005b9b8
 801be0c:	2005b994 	.word	0x2005b994
 801be10:	2005b9b4 	.word	0x2005b9b4
 801be14:	2005b998 	.word	0x2005b998

0801be18 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801be18:	b510      	push	{r4, lr}
 801be1a:	4b1f      	ldr	r3, [pc, #124]	@ (801be98 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801be1c:	8802      	ldrh	r2, [r0, #0]
 801be1e:	881b      	ldrh	r3, [r3, #0]
 801be20:	429a      	cmp	r2, r3
 801be22:	d21a      	bcs.n	801be5a <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801be24:	2114      	movs	r1, #20
 801be26:	4b1d      	ldr	r3, [pc, #116]	@ (801be9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801be28:	681b      	ldr	r3, [r3, #0]
 801be2a:	fb01 3102 	mla	r1, r1, r2, r3
 801be2e:	7c4b      	ldrb	r3, [r1, #17]
 801be30:	0958      	lsrs	r0, r3, #5
 801be32:	7ccb      	ldrb	r3, [r1, #19]
 801be34:	491a      	ldr	r1, [pc, #104]	@ (801bea0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801be36:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801be3a:	6809      	ldr	r1, [r1, #0]
 801be3c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801be40:	b2d8      	uxtb	r0, r3
 801be42:	b149      	cbz	r1, 801be58 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801be44:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801be48:	b132      	cbz	r2, 801be58 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801be4a:	2b0e      	cmp	r3, #14
 801be4c:	d021      	beq.n	801be92 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801be4e:	280f      	cmp	r0, #15
 801be50:	d01d      	beq.n	801be8e <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801be52:	2810      	cmp	r0, #16
 801be54:	bf08      	it	eq
 801be56:	2002      	moveq	r0, #2
 801be58:	bd10      	pop	{r4, pc}
 801be5a:	4912      	ldr	r1, [pc, #72]	@ (801bea4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801be5c:	8809      	ldrh	r1, [r1, #0]
 801be5e:	4419      	add	r1, r3
 801be60:	428a      	cmp	r2, r1
 801be62:	da09      	bge.n	801be78 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801be64:	210e      	movs	r1, #14
 801be66:	1ad3      	subs	r3, r2, r3
 801be68:	4a0f      	ldr	r2, [pc, #60]	@ (801bea8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801be6a:	6812      	ldr	r2, [r2, #0]
 801be6c:	fb01 2303 	mla	r3, r1, r3, r2
 801be70:	7b18      	ldrb	r0, [r3, #12]
 801be72:	f000 001f 	and.w	r0, r0, #31
 801be76:	e7ef      	b.n	801be58 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801be78:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801be7c:	429a      	cmp	r2, r3
 801be7e:	d108      	bne.n	801be92 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801be80:	f7f3 fde2 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 801be84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be88:	6803      	ldr	r3, [r0, #0]
 801be8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801be8c:	4718      	bx	r3
 801be8e:	2001      	movs	r0, #1
 801be90:	e7e2      	b.n	801be58 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801be92:	2000      	movs	r0, #0
 801be94:	e7e0      	b.n	801be58 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801be96:	bf00      	nop
 801be98:	2005b9b0 	.word	0x2005b9b0
 801be9c:	2005b9b8 	.word	0x2005b9b8
 801bea0:	2005b994 	.word	0x2005b994
 801bea4:	2005b9b4 	.word	0x2005b9b4
 801bea8:	2005b998 	.word	0x2005b998

0801beac <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801beac:	2010      	movs	r0, #16
 801beae:	4770      	bx	lr

0801beb0 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801beb0:	2000      	movs	r0, #0
 801beb2:	4770      	bx	lr

0801beb4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801beb4:	4b02      	ldr	r3, [pc, #8]	@ (801bec0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801beb6:	8818      	ldrh	r0, [r3, #0]
 801beb8:	0040      	lsls	r0, r0, #1
 801beba:	b280      	uxth	r0, r0
 801bebc:	4770      	bx	lr
 801bebe:	bf00      	nop
 801bec0:	2005b922 	.word	0x2005b922

0801bec4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801bec4:	2bff      	cmp	r3, #255	@ 0xff
 801bec6:	d05e      	beq.n	801bf86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 801bec8:	2a0b      	cmp	r2, #11
 801beca:	d058      	beq.n	801bf7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801becc:	d80e      	bhi.n	801beec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801bece:	2a03      	cmp	r2, #3
 801bed0:	d04d      	beq.n	801bf6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 801bed2:	d804      	bhi.n	801bede <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801bed4:	2a01      	cmp	r2, #1
 801bed6:	d04c      	beq.n	801bf72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 801bed8:	d94d      	bls.n	801bf76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 801beda:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801bedc:	e031      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bede:	2a09      	cmp	r2, #9
 801bee0:	d04d      	beq.n	801bf7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801bee2:	d84a      	bhi.n	801bf7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801bee4:	2a08      	cmp	r2, #8
 801bee6:	d048      	beq.n	801bf7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801bee8:	2300      	movs	r3, #0
 801beea:	e02a      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801beec:	2a2f      	cmp	r2, #47	@ 0x2f
 801beee:	d02c      	beq.n	801bf4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801bef0:	d811      	bhi.n	801bf16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801bef2:	2a2d      	cmp	r2, #45	@ 0x2d
 801bef4:	d018      	beq.n	801bf28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 801bef6:	d831      	bhi.n	801bf5c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 801bef8:	2a2c      	cmp	r2, #44	@ 0x2c
 801befa:	d1f5      	bne.n	801bee8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801befc:	684a      	ldr	r2, [r1, #4]
 801befe:	7813      	ldrb	r3, [r2, #0]
 801bf00:	7852      	ldrb	r2, [r2, #1]
 801bf02:	2a00      	cmp	r2, #0
 801bf04:	d1f0      	bne.n	801bee8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bf06:	2b01      	cmp	r3, #1
 801bf08:	d01d      	beq.n	801bf46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801bf0a:	2b00      	cmp	r3, #0
 801bf0c:	d02d      	beq.n	801bf6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801bf0e:	2b02      	cmp	r3, #2
 801bf10:	d1ea      	bne.n	801bee8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bf12:	68c3      	ldr	r3, [r0, #12]
 801bf14:	e015      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bf16:	2a31      	cmp	r2, #49	@ 0x31
 801bf18:	d004      	beq.n	801bf24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 801bf1a:	d332      	bcc.n	801bf82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801bf1c:	2a32      	cmp	r2, #50	@ 0x32
 801bf1e:	d030      	beq.n	801bf82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801bf20:	2a33      	cmp	r2, #51	@ 0x33
 801bf22:	d1e1      	bne.n	801bee8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bf24:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 801bf26:	e00c      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bf28:	684a      	ldr	r2, [r1, #4]
 801bf2a:	7813      	ldrb	r3, [r2, #0]
 801bf2c:	7852      	ldrb	r2, [r2, #1]
 801bf2e:	2a00      	cmp	r2, #0
 801bf30:	d1da      	bne.n	801bee8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bf32:	2b01      	cmp	r3, #1
 801bf34:	d004      	beq.n	801bf40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 801bf36:	d30f      	bcc.n	801bf58 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 801bf38:	2b02      	cmp	r3, #2
 801bf3a:	d1d5      	bne.n	801bee8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bf3c:	6943      	ldr	r3, [r0, #20]
 801bf3e:	e000      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bf40:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801bf42:	4618      	mov	r0, r3
 801bf44:	4770      	bx	lr
 801bf46:	69c3      	ldr	r3, [r0, #28]
 801bf48:	e7fb      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bf4a:	684b      	ldr	r3, [r1, #4]
 801bf4c:	781a      	ldrb	r2, [r3, #0]
 801bf4e:	785b      	ldrb	r3, [r3, #1]
 801bf50:	2b00      	cmp	r3, #0
 801bf52:	d1c9      	bne.n	801bee8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bf54:	2a00      	cmp	r2, #0
 801bf56:	d1f4      	bne.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bf58:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801bf5a:	e7f2      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bf5c:	684b      	ldr	r3, [r1, #4]
 801bf5e:	781a      	ldrb	r2, [r3, #0]
 801bf60:	785b      	ldrb	r3, [r3, #1]
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	d1c0      	bne.n	801bee8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bf66:	2a00      	cmp	r2, #0
 801bf68:	d1eb      	bne.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bf6a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801bf6c:	e7e9      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bf6e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801bf70:	e7e7      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bf72:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801bf74:	e7e5      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bf76:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801bf78:	e7e3      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bf7a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 801bf7c:	e7e1      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bf7e:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 801bf80:	e7df      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bf82:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801bf84:	e7dd      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bf86:	2a0b      	cmp	r2, #11
 801bf88:	d059      	beq.n	801c03e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801bf8a:	d80e      	bhi.n	801bfaa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 801bf8c:	2a03      	cmp	r2, #3
 801bf8e:	d050      	beq.n	801c032 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 801bf90:	d804      	bhi.n	801bf9c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801bf92:	2a01      	cmp	r2, #1
 801bf94:	d04f      	beq.n	801c036 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 801bf96:	d950      	bls.n	801c03a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 801bf98:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801bf9a:	e7d2      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bf9c:	2a09      	cmp	r2, #9
 801bf9e:	d04e      	beq.n	801c03e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801bfa0:	d801      	bhi.n	801bfa6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801bfa2:	2a08      	cmp	r2, #8
 801bfa4:	d1a0      	bne.n	801bee8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bfa6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 801bfa8:	e7cb      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bfaa:	2a2f      	cmp	r2, #47	@ 0x2f
 801bfac:	d02d      	beq.n	801c00a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 801bfae:	d811      	bhi.n	801bfd4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801bfb0:	2a2d      	cmp	r2, #45	@ 0x2d
 801bfb2:	d018      	beq.n	801bfe6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 801bfb4:	d833      	bhi.n	801c01e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 801bfb6:	2a2c      	cmp	r2, #44	@ 0x2c
 801bfb8:	d196      	bne.n	801bee8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bfba:	684a      	ldr	r2, [r1, #4]
 801bfbc:	7813      	ldrb	r3, [r2, #0]
 801bfbe:	7852      	ldrb	r2, [r2, #1]
 801bfc0:	2a00      	cmp	r2, #0
 801bfc2:	d191      	bne.n	801bee8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bfc4:	2b01      	cmp	r3, #1
 801bfc6:	d01e      	beq.n	801c006 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	d030      	beq.n	801c02e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 801bfcc:	2b02      	cmp	r3, #2
 801bfce:	d18b      	bne.n	801bee8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bfd0:	6903      	ldr	r3, [r0, #16]
 801bfd2:	e7b6      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bfd4:	2a31      	cmp	r2, #49	@ 0x31
 801bfd6:	d004      	beq.n	801bfe2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 801bfd8:	d333      	bcc.n	801c042 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801bfda:	2a32      	cmp	r2, #50	@ 0x32
 801bfdc:	d031      	beq.n	801c042 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801bfde:	2a33      	cmp	r2, #51	@ 0x33
 801bfe0:	d182      	bne.n	801bee8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bfe2:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801bfe4:	e7ad      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bfe6:	684a      	ldr	r2, [r1, #4]
 801bfe8:	7813      	ldrb	r3, [r2, #0]
 801bfea:	7852      	ldrb	r2, [r2, #1]
 801bfec:	2a00      	cmp	r2, #0
 801bfee:	f47f af7b 	bne.w	801bee8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bff2:	2b01      	cmp	r3, #1
 801bff4:	d005      	beq.n	801c002 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801bff6:	d310      	bcc.n	801c01a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 801bff8:	2b02      	cmp	r3, #2
 801bffa:	f47f af75 	bne.w	801bee8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bffe:	6983      	ldr	r3, [r0, #24]
 801c000:	e79f      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801c002:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801c004:	e79d      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801c006:	6a03      	ldr	r3, [r0, #32]
 801c008:	e79b      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801c00a:	684b      	ldr	r3, [r1, #4]
 801c00c:	781a      	ldrb	r2, [r3, #0]
 801c00e:	785b      	ldrb	r3, [r3, #1]
 801c010:	2b00      	cmp	r3, #0
 801c012:	f47f af69 	bne.w	801bee8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c016:	2a00      	cmp	r2, #0
 801c018:	d193      	bne.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801c01a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801c01c:	e791      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801c01e:	684b      	ldr	r3, [r1, #4]
 801c020:	781a      	ldrb	r2, [r3, #0]
 801c022:	785b      	ldrb	r3, [r3, #1]
 801c024:	2b00      	cmp	r3, #0
 801c026:	f47f af5f 	bne.w	801bee8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c02a:	2a00      	cmp	r2, #0
 801c02c:	d189      	bne.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801c02e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c030:	e787      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801c032:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801c034:	e785      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801c036:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801c038:	e783      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801c03a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801c03c:	e781      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801c03e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801c040:	e77f      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801c042:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801c044:	e77d      	b.n	801bf42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

0801c046 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c046:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c04a:	b087      	sub	sp, #28
 801c04c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801c04e:	9101      	str	r1, [sp, #4]
 801c050:	9205      	str	r2, [sp, #20]
 801c052:	6841      	ldr	r1, [r0, #4]
 801c054:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801c058:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801c05c:	9202      	str	r2, [sp, #8]
 801c05e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801c062:	fb01 2404 	mla	r4, r1, r4, r2
 801c066:	6802      	ldr	r2, [r0, #0]
 801c068:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c06c:	f8de 2000 	ldr.w	r2, [lr]
 801c070:	9203      	str	r2, [sp, #12]
 801c072:	f8de 2004 	ldr.w	r2, [lr, #4]
 801c076:	3204      	adds	r2, #4
 801c078:	9204      	str	r2, [sp, #16]
 801c07a:	9a02      	ldr	r2, [sp, #8]
 801c07c:	43d6      	mvns	r6, r2
 801c07e:	b2f6      	uxtb	r6, r6
 801c080:	9a01      	ldr	r2, [sp, #4]
 801c082:	2a00      	cmp	r2, #0
 801c084:	dc03      	bgt.n	801c08e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c086:	9a05      	ldr	r2, [sp, #20]
 801c088:	2a00      	cmp	r2, #0
 801c08a:	f340 8129 	ble.w	801c2e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c08e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c090:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801c094:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801c098:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c09a:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801c09e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	dd0e      	ble.n	801c0c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c0a6:	1408      	asrs	r0, r1, #16
 801c0a8:	d405      	bmi.n	801c0b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c0aa:	4560      	cmp	r0, ip
 801c0ac:	da03      	bge.n	801c0b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c0ae:	1410      	asrs	r0, r2, #16
 801c0b0:	d401      	bmi.n	801c0b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c0b2:	42b8      	cmp	r0, r7
 801c0b4:	db07      	blt.n	801c0c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c0b6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c0b8:	3b01      	subs	r3, #1
 801c0ba:	4401      	add	r1, r0
 801c0bc:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c0be:	3402      	adds	r4, #2
 801c0c0:	4402      	add	r2, r0
 801c0c2:	e7ee      	b.n	801c0a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c0c4:	d071      	beq.n	801c1aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c0c6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801c0c8:	1e58      	subs	r0, r3, #1
 801c0ca:	fb05 1500 	mla	r5, r5, r0, r1
 801c0ce:	142d      	asrs	r5, r5, #16
 801c0d0:	d45f      	bmi.n	801c192 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801c0d2:	4565      	cmp	r5, ip
 801c0d4:	da5d      	bge.n	801c192 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801c0d6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801c0d8:	fb05 2000 	mla	r0, r5, r0, r2
 801c0dc:	1400      	asrs	r0, r0, #16
 801c0de:	d458      	bmi.n	801c192 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801c0e0:	42b8      	cmp	r0, r7
 801c0e2:	da56      	bge.n	801c192 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801c0e4:	4699      	mov	r9, r3
 801c0e6:	46a2      	mov	sl, r4
 801c0e8:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801c0ec:	f1b9 0f00 	cmp.w	r9, #0
 801c0f0:	dd57      	ble.n	801c1a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801c0f2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801c0f6:	9803      	ldr	r0, [sp, #12]
 801c0f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c0fc:	fb07 000c 	mla	r0, r7, ip, r0
 801c100:	140d      	asrs	r5, r1, #16
 801c102:	5d40      	ldrb	r0, [r0, r5]
 801c104:	9d04      	ldr	r5, [sp, #16]
 801c106:	f109 39ff 	add.w	r9, r9, #4294967295
 801c10a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801c10e:	f8ba 5000 	ldrh.w	r5, [sl]
 801c112:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801c116:	122f      	asrs	r7, r5, #8
 801c118:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c11c:	fb17 f706 	smulbb	r7, r7, r6
 801c120:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801c124:	00ed      	lsls	r5, r5, #3
 801c126:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801c12a:	b2ed      	uxtb	r5, r5
 801c12c:	fb18 f806 	smulbb	r8, r8, r6
 801c130:	fb15 f506 	smulbb	r5, r5, r6
 801c134:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801c138:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801c13c:	10c7      	asrs	r7, r0, #3
 801c13e:	00c0      	lsls	r0, r0, #3
 801c140:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801c144:	b2c0      	uxtb	r0, r0
 801c146:	fb07 870b 	mla	r7, r7, fp, r8
 801c14a:	fb00 500b 	mla	r0, r0, fp, r5
 801c14e:	fa1f fc8c 	uxth.w	ip, ip
 801c152:	b280      	uxth	r0, r0
 801c154:	b2bf      	uxth	r7, r7
 801c156:	f10c 0501 	add.w	r5, ip, #1
 801c15a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c15e:	f107 0801 	add.w	r8, r7, #1
 801c162:	1c45      	adds	r5, r0, #1
 801c164:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c168:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801c16c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c16e:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801c172:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c176:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801c17a:	ea45 0c0c 	orr.w	ip, r5, ip
 801c17e:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801c182:	4401      	add	r1, r0
 801c184:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c186:	ea4c 0c08 	orr.w	ip, ip, r8
 801c18a:	f82a cb02 	strh.w	ip, [sl], #2
 801c18e:	4402      	add	r2, r0
 801c190:	e7ac      	b.n	801c0ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c192:	f04f 0800 	mov.w	r8, #0
 801c196:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801c19a:	eb03 0008 	add.w	r0, r3, r8
 801c19e:	2800      	cmp	r0, #0
 801c1a0:	dc41      	bgt.n	801c226 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c1a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c1a6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c1aa:	9b01      	ldr	r3, [sp, #4]
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	f340 8097 	ble.w	801c2e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c1b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c1b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c1ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c1be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c1c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c1c6:	eef0 6a62 	vmov.f32	s13, s5
 801c1ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c1ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c1d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c1d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c1da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c1de:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801c1e2:	eef0 6a43 	vmov.f32	s13, s6
 801c1e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c1ea:	ee12 2a90 	vmov	r2, s5
 801c1ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c1f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c1f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c1f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801c1fc:	ee13 2a10 	vmov	r2, s6
 801c200:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c202:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c204:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801c208:	fb92 f3f3 	sdiv	r3, r2, r3
 801c20c:	9314      	str	r3, [sp, #80]	@ 0x50
 801c20e:	9b01      	ldr	r3, [sp, #4]
 801c210:	9a05      	ldr	r2, [sp, #20]
 801c212:	3b01      	subs	r3, #1
 801c214:	9301      	str	r3, [sp, #4]
 801c216:	eeb0 3a67 	vmov.f32	s6, s15
 801c21a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c21c:	eef0 2a47 	vmov.f32	s5, s14
 801c220:	bf08      	it	eq
 801c222:	4613      	moveq	r3, r2
 801c224:	e72c      	b.n	801c080 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801c226:	140f      	asrs	r7, r1, #16
 801c228:	d453      	bmi.n	801c2d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c22a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801c22e:	42bd      	cmp	r5, r7
 801c230:	dd4f      	ble.n	801c2d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c232:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c236:	d44c      	bmi.n	801c2d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c238:	f8de 000c 	ldr.w	r0, [lr, #12]
 801c23c:	4560      	cmp	r0, ip
 801c23e:	dd48      	ble.n	801c2d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c240:	9803      	ldr	r0, [sp, #12]
 801c242:	b22d      	sxth	r5, r5
 801c244:	fb0c 0505 	mla	r5, ip, r5, r0
 801c248:	5de8      	ldrb	r0, [r5, r7]
 801c24a:	9d04      	ldr	r5, [sp, #16]
 801c24c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801c250:	f06f 0501 	mvn.w	r5, #1
 801c254:	fb05 fb08 	mul.w	fp, r5, r8
 801c258:	f834 500b 	ldrh.w	r5, [r4, fp]
 801c25c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801c260:	122f      	asrs	r7, r5, #8
 801c262:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c266:	fb17 f706 	smulbb	r7, r7, r6
 801c26a:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801c26e:	00ed      	lsls	r5, r5, #3
 801c270:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801c274:	b2ed      	uxtb	r5, r5
 801c276:	fb19 f906 	smulbb	r9, r9, r6
 801c27a:	fb15 f506 	smulbb	r5, r5, r6
 801c27e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801c282:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801c286:	10c7      	asrs	r7, r0, #3
 801c288:	00c0      	lsls	r0, r0, #3
 801c28a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801c28e:	b2c0      	uxtb	r0, r0
 801c290:	fb07 970a 	mla	r7, r7, sl, r9
 801c294:	fb00 500a 	mla	r0, r0, sl, r5
 801c298:	fa1f fc8c 	uxth.w	ip, ip
 801c29c:	b2bf      	uxth	r7, r7
 801c29e:	b280      	uxth	r0, r0
 801c2a0:	f10c 0501 	add.w	r5, ip, #1
 801c2a4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c2a8:	f107 0901 	add.w	r9, r7, #1
 801c2ac:	1c45      	adds	r5, r0, #1
 801c2ae:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c2b2:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801c2b6:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801c2ba:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c2be:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801c2c2:	ea45 0c0c 	orr.w	ip, r5, ip
 801c2c6:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801c2ca:	ea4c 0c09 	orr.w	ip, ip, r9
 801c2ce:	f824 c00b 	strh.w	ip, [r4, fp]
 801c2d2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c2d4:	f108 38ff 	add.w	r8, r8, #4294967295
 801c2d8:	4401      	add	r1, r0
 801c2da:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c2dc:	4402      	add	r2, r0
 801c2de:	e75c      	b.n	801c19a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c2e0:	b007      	add	sp, #28
 801c2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c2e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c2e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c2ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2ee:	b085      	sub	sp, #20
 801c2f0:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801c2f2:	4693      	mov	fp, r2
 801c2f4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801c2f8:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801c2fc:	6870      	ldr	r0, [r6, #4]
 801c2fe:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801c300:	fb00 2404 	mla	r4, r0, r4, r2
 801c304:	6832      	ldr	r2, [r6, #0]
 801c306:	9100      	str	r1, [sp, #0]
 801c308:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c30c:	682a      	ldr	r2, [r5, #0]
 801c30e:	9201      	str	r2, [sp, #4]
 801c310:	686a      	ldr	r2, [r5, #4]
 801c312:	3204      	adds	r2, #4
 801c314:	9202      	str	r2, [sp, #8]
 801c316:	9a00      	ldr	r2, [sp, #0]
 801c318:	2a00      	cmp	r2, #0
 801c31a:	dc03      	bgt.n	801c324 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c31c:	f1bb 0f00 	cmp.w	fp, #0
 801c320:	f340 80a0 	ble.w	801c464 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801c324:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c326:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c32a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c32e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c330:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801c334:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c338:	2b00      	cmp	r3, #0
 801c33a:	dd0c      	ble.n	801c356 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c33c:	1406      	asrs	r6, r0, #16
 801c33e:	d405      	bmi.n	801c34c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c340:	454e      	cmp	r6, r9
 801c342:	da03      	bge.n	801c34c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c344:	1416      	asrs	r6, r2, #16
 801c346:	d401      	bmi.n	801c34c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c348:	4546      	cmp	r6, r8
 801c34a:	db05      	blt.n	801c358 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c34c:	4470      	add	r0, lr
 801c34e:	4462      	add	r2, ip
 801c350:	3b01      	subs	r3, #1
 801c352:	3402      	adds	r4, #2
 801c354:	e7f0      	b.n	801c338 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c356:	d00f      	beq.n	801c378 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c358:	1e5e      	subs	r6, r3, #1
 801c35a:	fb0e 0706 	mla	r7, lr, r6, r0
 801c35e:	143f      	asrs	r7, r7, #16
 801c360:	d541      	bpl.n	801c3e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801c362:	4698      	mov	r8, r3
 801c364:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801c368:	9603      	str	r6, [sp, #12]
 801c36a:	f1b8 0f00 	cmp.w	r8, #0
 801c36e:	dc59      	bgt.n	801c424 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801c370:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c374:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c378:	9b00      	ldr	r3, [sp, #0]
 801c37a:	2b00      	cmp	r3, #0
 801c37c:	dd72      	ble.n	801c464 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801c37e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c382:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c386:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c38a:	eeb0 6a62 	vmov.f32	s12, s5
 801c38e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c392:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c396:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c39a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c39e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c3a2:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801c3a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c3aa:	eeb0 6a43 	vmov.f32	s12, s6
 801c3ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c3b2:	ee12 2a90 	vmov	r2, s5
 801c3b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c3ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c3bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c3c0:	fb92 fef3 	sdiv	lr, r2, r3
 801c3c4:	ee13 2a10 	vmov	r2, s6
 801c3c8:	fb92 fcf3 	sdiv	ip, r2, r3
 801c3cc:	9b00      	ldr	r3, [sp, #0]
 801c3ce:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801c3d2:	3b01      	subs	r3, #1
 801c3d4:	9300      	str	r3, [sp, #0]
 801c3d6:	eeb0 3a67 	vmov.f32	s6, s15
 801c3da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c3dc:	eef0 2a47 	vmov.f32	s5, s14
 801c3e0:	bf08      	it	eq
 801c3e2:	465b      	moveq	r3, fp
 801c3e4:	e797      	b.n	801c316 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801c3e6:	454f      	cmp	r7, r9
 801c3e8:	dabb      	bge.n	801c362 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c3ea:	fb0c 2606 	mla	r6, ip, r6, r2
 801c3ee:	1436      	asrs	r6, r6, #16
 801c3f0:	d4b7      	bmi.n	801c362 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c3f2:	4546      	cmp	r6, r8
 801c3f4:	dab5      	bge.n	801c362 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c3f6:	461e      	mov	r6, r3
 801c3f8:	46a0      	mov	r8, r4
 801c3fa:	2e00      	cmp	r6, #0
 801c3fc:	ddb8      	ble.n	801c370 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c3fe:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801c402:	9901      	ldr	r1, [sp, #4]
 801c404:	1417      	asrs	r7, r2, #16
 801c406:	fb0a 1707 	mla	r7, sl, r7, r1
 801c40a:	ea4f 4920 	mov.w	r9, r0, asr #16
 801c40e:	f817 7009 	ldrb.w	r7, [r7, r9]
 801c412:	9902      	ldr	r1, [sp, #8]
 801c414:	4470      	add	r0, lr
 801c416:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801c41a:	4462      	add	r2, ip
 801c41c:	f828 7b02 	strh.w	r7, [r8], #2
 801c420:	3e01      	subs	r6, #1
 801c422:	e7ea      	b.n	801c3fa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801c424:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c428:	d417      	bmi.n	801c45a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c42a:	68ae      	ldr	r6, [r5, #8]
 801c42c:	454e      	cmp	r6, r9
 801c42e:	dd14      	ble.n	801c45a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c430:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c434:	d411      	bmi.n	801c45a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c436:	68ef      	ldr	r7, [r5, #12]
 801c438:	4557      	cmp	r7, sl
 801c43a:	dd0e      	ble.n	801c45a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c43c:	f06f 0101 	mvn.w	r1, #1
 801c440:	9f01      	ldr	r7, [sp, #4]
 801c442:	b236      	sxth	r6, r6
 801c444:	fb0a 7606 	mla	r6, sl, r6, r7
 801c448:	9f02      	ldr	r7, [sp, #8]
 801c44a:	f816 6009 	ldrb.w	r6, [r6, r9]
 801c44e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801c452:	fb01 f608 	mul.w	r6, r1, r8
 801c456:	9903      	ldr	r1, [sp, #12]
 801c458:	538f      	strh	r7, [r1, r6]
 801c45a:	4470      	add	r0, lr
 801c45c:	4462      	add	r2, ip
 801c45e:	f108 38ff 	add.w	r8, r8, #4294967295
 801c462:	e782      	b.n	801c36a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c464:	b005      	add	sp, #20
 801c466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c46a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c46a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c46e:	b087      	sub	sp, #28
 801c470:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c472:	9102      	str	r1, [sp, #8]
 801c474:	9205      	str	r2, [sp, #20]
 801c476:	6861      	ldr	r1, [r4, #4]
 801c478:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801c47c:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801c480:	9203      	str	r2, [sp, #12]
 801c482:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801c486:	fb01 2000 	mla	r0, r1, r0, r2
 801c48a:	6822      	ldr	r2, [r4, #0]
 801c48c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801c490:	9200      	str	r2, [sp, #0]
 801c492:	f8dc 2000 	ldr.w	r2, [ip]
 801c496:	9204      	str	r2, [sp, #16]
 801c498:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c49c:	3204      	adds	r2, #4
 801c49e:	9201      	str	r2, [sp, #4]
 801c4a0:	9a03      	ldr	r2, [sp, #12]
 801c4a2:	43d5      	mvns	r5, r2
 801c4a4:	b2ed      	uxtb	r5, r5
 801c4a6:	9a02      	ldr	r2, [sp, #8]
 801c4a8:	2a00      	cmp	r2, #0
 801c4aa:	dc03      	bgt.n	801c4b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c4ac:	9a05      	ldr	r2, [sp, #20]
 801c4ae:	2a00      	cmp	r2, #0
 801c4b0:	f340 812c 	ble.w	801c70c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801c4b4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c4b6:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801c4ba:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801c4be:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c4c0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c4c4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	dd10      	ble.n	801c4ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c4cc:	140c      	asrs	r4, r1, #16
 801c4ce:	d405      	bmi.n	801c4dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c4d0:	4574      	cmp	r4, lr
 801c4d2:	da03      	bge.n	801c4dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c4d4:	1414      	asrs	r4, r2, #16
 801c4d6:	d401      	bmi.n	801c4dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c4d8:	42bc      	cmp	r4, r7
 801c4da:	db09      	blt.n	801c4f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c4dc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c4de:	9800      	ldr	r0, [sp, #0]
 801c4e0:	4421      	add	r1, r4
 801c4e2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c4e4:	3002      	adds	r0, #2
 801c4e6:	4422      	add	r2, r4
 801c4e8:	3b01      	subs	r3, #1
 801c4ea:	9000      	str	r0, [sp, #0]
 801c4ec:	e7ec      	b.n	801c4c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c4ee:	d071      	beq.n	801c5d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801c4f0:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801c4f2:	1e5c      	subs	r4, r3, #1
 801c4f4:	fb06 1604 	mla	r6, r6, r4, r1
 801c4f8:	1436      	asrs	r6, r6, #16
 801c4fa:	d45d      	bmi.n	801c5b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c4fc:	4576      	cmp	r6, lr
 801c4fe:	da5b      	bge.n	801c5b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c500:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801c502:	fb06 2404 	mla	r4, r6, r4, r2
 801c506:	1424      	asrs	r4, r4, #16
 801c508:	d456      	bmi.n	801c5b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c50a:	42bc      	cmp	r4, r7
 801c50c:	da54      	bge.n	801c5b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c50e:	4698      	mov	r8, r3
 801c510:	f8dd 9000 	ldr.w	r9, [sp]
 801c514:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801c518:	f1b8 0f00 	cmp.w	r8, #0
 801c51c:	dd54      	ble.n	801c5c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801c51e:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801c522:	9804      	ldr	r0, [sp, #16]
 801c524:	1414      	asrs	r4, r2, #16
 801c526:	fb07 0404 	mla	r4, r7, r4, r0
 801c52a:	140e      	asrs	r6, r1, #16
 801c52c:	f814 e006 	ldrb.w	lr, [r4, r6]
 801c530:	9801      	ldr	r0, [sp, #4]
 801c532:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c536:	eb00 0b0e 	add.w	fp, r0, lr
 801c53a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801c53e:	f8b9 4000 	ldrh.w	r4, [r9]
 801c542:	fb16 f60a 	smulbb	r6, r6, sl
 801c546:	1227      	asrs	r7, r4, #8
 801c548:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c54c:	fb07 6705 	mla	r7, r7, r5, r6
 801c550:	f89b b001 	ldrb.w	fp, [fp, #1]
 801c554:	10e6      	asrs	r6, r4, #3
 801c556:	00e4      	lsls	r4, r4, #3
 801c558:	b2e4      	uxtb	r4, r4
 801c55a:	fb1b fb0a 	smulbb	fp, fp, sl
 801c55e:	fb14 f405 	smulbb	r4, r4, r5
 801c562:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801c566:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801c56a:	fb06 b605 	mla	r6, r6, r5, fp
 801c56e:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801c572:	b2bf      	uxth	r7, r7
 801c574:	b2b6      	uxth	r6, r6
 801c576:	fa1f fe8e 	uxth.w	lr, lr
 801c57a:	1c7c      	adds	r4, r7, #1
 801c57c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801c580:	f106 0b01 	add.w	fp, r6, #1
 801c584:	f10e 0401 	add.w	r4, lr, #1
 801c588:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c58a:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801c58e:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801c592:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801c596:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801c59a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801c59e:	4327      	orrs	r7, r4
 801c5a0:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801c5a4:	4401      	add	r1, r0
 801c5a6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c5a8:	ea47 070b 	orr.w	r7, r7, fp
 801c5ac:	f829 7b02 	strh.w	r7, [r9], #2
 801c5b0:	4402      	add	r2, r0
 801c5b2:	f108 38ff 	add.w	r8, r8, #4294967295
 801c5b6:	e7af      	b.n	801c518 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801c5b8:	f04f 0e00 	mov.w	lr, #0
 801c5bc:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801c5c0:	eb03 040e 	add.w	r4, r3, lr
 801c5c4:	2c00      	cmp	r4, #0
 801c5c6:	dc43      	bgt.n	801c650 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801c5c8:	9a00      	ldr	r2, [sp, #0]
 801c5ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c5ce:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c5d2:	9300      	str	r3, [sp, #0]
 801c5d4:	9b02      	ldr	r3, [sp, #8]
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	f340 8098 	ble.w	801c70c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801c5dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c5e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c5e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c5e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c5ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c5f0:	eef0 6a62 	vmov.f32	s13, s5
 801c5f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c5f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c5fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c600:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c604:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c608:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801c60c:	eef0 6a43 	vmov.f32	s13, s6
 801c610:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c614:	ee12 2a90 	vmov	r2, s5
 801c618:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c61c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c61e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c622:	fb92 f3f3 	sdiv	r3, r2, r3
 801c626:	ee13 2a10 	vmov	r2, s6
 801c62a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c62c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c62e:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801c632:	fb92 f3f3 	sdiv	r3, r2, r3
 801c636:	9314      	str	r3, [sp, #80]	@ 0x50
 801c638:	9b02      	ldr	r3, [sp, #8]
 801c63a:	9a05      	ldr	r2, [sp, #20]
 801c63c:	3b01      	subs	r3, #1
 801c63e:	9302      	str	r3, [sp, #8]
 801c640:	eeb0 3a67 	vmov.f32	s6, s15
 801c644:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c646:	eef0 2a47 	vmov.f32	s5, s14
 801c64a:	bf08      	it	eq
 801c64c:	4613      	moveq	r3, r2
 801c64e:	e72a      	b.n	801c4a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c650:	140f      	asrs	r7, r1, #16
 801c652:	d454      	bmi.n	801c6fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c654:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c658:	42be      	cmp	r6, r7
 801c65a:	dd50      	ble.n	801c6fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c65c:	ea5f 4822 	movs.w	r8, r2, asr #16
 801c660:	d44d      	bmi.n	801c6fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c662:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801c666:	4544      	cmp	r4, r8
 801c668:	dd49      	ble.n	801c6fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c66a:	f06f 0001 	mvn.w	r0, #1
 801c66e:	9c04      	ldr	r4, [sp, #16]
 801c670:	b236      	sxth	r6, r6
 801c672:	fb08 4606 	mla	r6, r8, r6, r4
 801c676:	f816 8007 	ldrb.w	r8, [r6, r7]
 801c67a:	9c01      	ldr	r4, [sp, #4]
 801c67c:	fb00 fa0e 	mul.w	sl, r0, lr
 801c680:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c684:	eb04 0b08 	add.w	fp, r4, r8
 801c688:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801c68c:	9800      	ldr	r0, [sp, #0]
 801c68e:	fb16 f609 	smulbb	r6, r6, r9
 801c692:	f830 400a 	ldrh.w	r4, [r0, sl]
 801c696:	f89b b001 	ldrb.w	fp, [fp, #1]
 801c69a:	1227      	asrs	r7, r4, #8
 801c69c:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c6a0:	fb07 6705 	mla	r7, r7, r5, r6
 801c6a4:	10e6      	asrs	r6, r4, #3
 801c6a6:	00e4      	lsls	r4, r4, #3
 801c6a8:	b2e4      	uxtb	r4, r4
 801c6aa:	fb1b fb09 	smulbb	fp, fp, r9
 801c6ae:	9801      	ldr	r0, [sp, #4]
 801c6b0:	fb14 f405 	smulbb	r4, r4, r5
 801c6b4:	f810 8008 	ldrb.w	r8, [r0, r8]
 801c6b8:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801c6bc:	fb06 b605 	mla	r6, r6, r5, fp
 801c6c0:	fb08 4809 	mla	r8, r8, r9, r4
 801c6c4:	b2bf      	uxth	r7, r7
 801c6c6:	b2b6      	uxth	r6, r6
 801c6c8:	fa1f f888 	uxth.w	r8, r8
 801c6cc:	1c7c      	adds	r4, r7, #1
 801c6ce:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801c6d2:	f106 0b01 	add.w	fp, r6, #1
 801c6d6:	f108 0401 	add.w	r4, r8, #1
 801c6da:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801c6de:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801c6e2:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801c6e6:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801c6ea:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801c6ee:	4327      	orrs	r7, r4
 801c6f0:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801c6f4:	9800      	ldr	r0, [sp, #0]
 801c6f6:	ea47 070b 	orr.w	r7, r7, fp
 801c6fa:	f820 700a 	strh.w	r7, [r0, sl]
 801c6fe:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c700:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c704:	4401      	add	r1, r0
 801c706:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c708:	4402      	add	r2, r0
 801c70a:	e759      	b.n	801c5c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c70c:	b007      	add	sp, #28
 801c70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c714 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c714:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c71c:	b085      	sub	sp, #20
 801c71e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801c720:	9203      	str	r2, [sp, #12]
 801c722:	6870      	ldr	r0, [r6, #4]
 801c724:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801c728:	fb00 2404 	mla	r4, r0, r4, r2
 801c72c:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801c72e:	6832      	ldr	r2, [r6, #0]
 801c730:	686f      	ldr	r7, [r5, #4]
 801c732:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c736:	682a      	ldr	r2, [r5, #0]
 801c738:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 801c73c:	9101      	str	r1, [sp, #4]
 801c73e:	9202      	str	r2, [sp, #8]
 801c740:	3704      	adds	r7, #4
 801c742:	9a01      	ldr	r2, [sp, #4]
 801c744:	2a00      	cmp	r2, #0
 801c746:	dc03      	bgt.n	801c750 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c748:	9a03      	ldr	r2, [sp, #12]
 801c74a:	2a00      	cmp	r2, #0
 801c74c:	f340 80cc 	ble.w	801c8e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801c750:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c752:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c756:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c75a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c75c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801c760:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c764:	2b00      	cmp	r3, #0
 801c766:	dd0d      	ble.n	801c784 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c768:	1406      	asrs	r6, r0, #16
 801c76a:	d405      	bmi.n	801c778 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c76c:	454e      	cmp	r6, r9
 801c76e:	da03      	bge.n	801c778 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c770:	1416      	asrs	r6, r2, #16
 801c772:	d401      	bmi.n	801c778 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c774:	4546      	cmp	r6, r8
 801c776:	db06      	blt.n	801c786 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c778:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801c77a:	4460      	add	r0, ip
 801c77c:	4432      	add	r2, r6
 801c77e:	3b01      	subs	r3, #1
 801c780:	3402      	adds	r4, #2
 801c782:	e7ef      	b.n	801c764 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c784:	d00f      	beq.n	801c7a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c786:	1e5e      	subs	r6, r3, #1
 801c788:	fb0c 0e06 	mla	lr, ip, r6, r0
 801c78c:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801c790:	d543      	bpl.n	801c81a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801c792:	4698      	mov	r8, r3
 801c794:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801c798:	f1b8 0f00 	cmp.w	r8, #0
 801c79c:	dc71      	bgt.n	801c882 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801c79e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c7a2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c7a6:	9b01      	ldr	r3, [sp, #4]
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	f340 809d 	ble.w	801c8e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801c7ae:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c7b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c7b6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c7ba:	eeb0 6a62 	vmov.f32	s12, s5
 801c7be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c7c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c7c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c7ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c7ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c7d2:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801c7d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c7da:	eeb0 6a43 	vmov.f32	s12, s6
 801c7de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c7e2:	ee12 2a90 	vmov	r2, s5
 801c7e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c7ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c7ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c7f0:	fb92 fcf3 	sdiv	ip, r2, r3
 801c7f4:	ee13 2a10 	vmov	r2, s6
 801c7f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801c7fc:	9312      	str	r3, [sp, #72]	@ 0x48
 801c7fe:	9b01      	ldr	r3, [sp, #4]
 801c800:	9a03      	ldr	r2, [sp, #12]
 801c802:	3b01      	subs	r3, #1
 801c804:	9301      	str	r3, [sp, #4]
 801c806:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801c80a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c80c:	eeb0 3a67 	vmov.f32	s6, s15
 801c810:	bf08      	it	eq
 801c812:	4613      	moveq	r3, r2
 801c814:	eef0 2a47 	vmov.f32	s5, s14
 801c818:	e793      	b.n	801c742 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c81a:	45ce      	cmp	lr, r9
 801c81c:	dab9      	bge.n	801c792 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c81e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c820:	fb01 2606 	mla	r6, r1, r6, r2
 801c824:	1436      	asrs	r6, r6, #16
 801c826:	d4b4      	bmi.n	801c792 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c828:	4546      	cmp	r6, r8
 801c82a:	dab2      	bge.n	801c792 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c82c:	4698      	mov	r8, r3
 801c82e:	46a2      	mov	sl, r4
 801c830:	f1b8 0f00 	cmp.w	r8, #0
 801c834:	ddb3      	ble.n	801c79e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c836:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c83a:	9902      	ldr	r1, [sp, #8]
 801c83c:	1416      	asrs	r6, r2, #16
 801c83e:	fb09 1606 	mla	r6, r9, r6, r1
 801c842:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801c846:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801c84a:	4929      	ldr	r1, [pc, #164]	@ (801c8f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801c84c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c850:	eb07 0b0e 	add.w	fp, r7, lr
 801c854:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801c858:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801c85c:	00f6      	lsls	r6, r6, #3
 801c85e:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801c862:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801c866:	ea49 0606 	orr.w	r6, r9, r6
 801c86a:	f817 900e 	ldrb.w	r9, [r7, lr]
 801c86e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c870:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801c874:	f82a 6b02 	strh.w	r6, [sl], #2
 801c878:	4460      	add	r0, ip
 801c87a:	440a      	add	r2, r1
 801c87c:	f108 38ff 	add.w	r8, r8, #4294967295
 801c880:	e7d6      	b.n	801c830 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801c882:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c886:	d429      	bmi.n	801c8dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c888:	68ae      	ldr	r6, [r5, #8]
 801c88a:	454e      	cmp	r6, r9
 801c88c:	dd26      	ble.n	801c8dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c88e:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801c892:	d423      	bmi.n	801c8dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c894:	68e9      	ldr	r1, [r5, #12]
 801c896:	4559      	cmp	r1, fp
 801c898:	dd20      	ble.n	801c8dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c89a:	9902      	ldr	r1, [sp, #8]
 801c89c:	fa0f fe86 	sxth.w	lr, r6
 801c8a0:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801c8a4:	f06f 0101 	mvn.w	r1, #1
 801c8a8:	f81e e009 	ldrb.w	lr, [lr, r9]
 801c8ac:	fb01 f908 	mul.w	r9, r1, r8
 801c8b0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c8b4:	eb07 060e 	add.w	r6, r7, lr
 801c8b8:	f896 b002 	ldrb.w	fp, [r6, #2]
 801c8bc:	7876      	ldrb	r6, [r6, #1]
 801c8be:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 801c8c2:	00f6      	lsls	r6, r6, #3
 801c8c4:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801c8c8:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801c8cc:	ea4b 0606 	orr.w	r6, fp, r6
 801c8d0:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801c8d4:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801c8d8:	f82a 6009 	strh.w	r6, [sl, r9]
 801c8dc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c8de:	4460      	add	r0, ip
 801c8e0:	440a      	add	r2, r1
 801c8e2:	f108 38ff 	add.w	r8, r8, #4294967295
 801c8e6:	e757      	b.n	801c798 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c8e8:	b005      	add	sp, #20
 801c8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8ee:	bf00      	nop
 801c8f0:	fffff800 	.word	0xfffff800

0801c8f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c8f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8fc:	b087      	sub	sp, #28
 801c8fe:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801c900:	468b      	mov	fp, r1
 801c902:	9204      	str	r2, [sp, #16]
 801c904:	6841      	ldr	r1, [r0, #4]
 801c906:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801c90a:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801c90e:	9205      	str	r2, [sp, #20]
 801c910:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801c914:	fb01 2404 	mla	r4, r1, r4, r2
 801c918:	6802      	ldr	r2, [r0, #0]
 801c91a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c91e:	f8dc 2000 	ldr.w	r2, [ip]
 801c922:	9201      	str	r2, [sp, #4]
 801c924:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c928:	3204      	adds	r2, #4
 801c92a:	9202      	str	r2, [sp, #8]
 801c92c:	f1bb 0f00 	cmp.w	fp, #0
 801c930:	dc03      	bgt.n	801c93a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801c932:	9a04      	ldr	r2, [sp, #16]
 801c934:	2a00      	cmp	r2, #0
 801c936:	f340 8138 	ble.w	801cbaa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c93a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c93c:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801c940:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c944:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c946:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801c94a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801c94e:	2b00      	cmp	r3, #0
 801c950:	dd0e      	ble.n	801c970 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c952:	1402      	asrs	r2, r0, #16
 801c954:	d405      	bmi.n	801c962 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c956:	42ba      	cmp	r2, r7
 801c958:	da03      	bge.n	801c962 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c95a:	140a      	asrs	r2, r1, #16
 801c95c:	d401      	bmi.n	801c962 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c95e:	42b2      	cmp	r2, r6
 801c960:	db07      	blt.n	801c972 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c962:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c964:	3b01      	subs	r3, #1
 801c966:	4410      	add	r0, r2
 801c968:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c96a:	3402      	adds	r4, #2
 801c96c:	4411      	add	r1, r2
 801c96e:	e7ee      	b.n	801c94e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c970:	d019      	beq.n	801c9a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801c972:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801c974:	1e5a      	subs	r2, r3, #1
 801c976:	fb05 0502 	mla	r5, r5, r2, r0
 801c97a:	142d      	asrs	r5, r5, #16
 801c97c:	d409      	bmi.n	801c992 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c97e:	42bd      	cmp	r5, r7
 801c980:	da07      	bge.n	801c992 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c982:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801c984:	fb05 1202 	mla	r2, r5, r2, r1
 801c988:	1412      	asrs	r2, r2, #16
 801c98a:	d402      	bmi.n	801c992 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c98c:	42b2      	cmp	r2, r6
 801c98e:	f2c0 80ac 	blt.w	801caea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801c992:	f04f 0e00 	mov.w	lr, #0
 801c996:	eb03 020e 	add.w	r2, r3, lr
 801c99a:	2a00      	cmp	r2, #0
 801c99c:	dc3e      	bgt.n	801ca1c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c99e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c9a2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c9a6:	f1bb 0f00 	cmp.w	fp, #0
 801c9aa:	f340 80fe 	ble.w	801cbaa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c9ae:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c9b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c9b6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c9ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c9be:	eeb0 6a62 	vmov.f32	s12, s5
 801c9c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c9c6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c9ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c9ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c9d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c9d6:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801c9da:	eeb0 6a43 	vmov.f32	s12, s6
 801c9de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c9e2:	ee12 2a90 	vmov	r2, s5
 801c9e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c9ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c9ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c9f0:	fb92 f3f3 	sdiv	r3, r2, r3
 801c9f4:	ee13 2a10 	vmov	r2, s6
 801c9f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c9fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c9fc:	f1bb 0b01 	subs.w	fp, fp, #1
 801ca00:	fb92 f3f3 	sdiv	r3, r2, r3
 801ca04:	9a04      	ldr	r2, [sp, #16]
 801ca06:	9314      	str	r3, [sp, #80]	@ 0x50
 801ca08:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801ca0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ca0e:	eeb0 3a67 	vmov.f32	s6, s15
 801ca12:	bf08      	it	eq
 801ca14:	4613      	moveq	r3, r2
 801ca16:	eef0 2a47 	vmov.f32	s5, s14
 801ca1a:	e787      	b.n	801c92c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ca1c:	1406      	asrs	r6, r0, #16
 801ca1e:	d45d      	bmi.n	801cadc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ca20:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801ca24:	42b5      	cmp	r5, r6
 801ca26:	dd59      	ble.n	801cadc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ca28:	140f      	asrs	r7, r1, #16
 801ca2a:	d457      	bmi.n	801cadc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ca2c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ca30:	42ba      	cmp	r2, r7
 801ca32:	dd53      	ble.n	801cadc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ca34:	9a01      	ldr	r2, [sp, #4]
 801ca36:	b22d      	sxth	r5, r5
 801ca38:	fb07 2505 	mla	r5, r7, r5, r2
 801ca3c:	5daa      	ldrb	r2, [r5, r6]
 801ca3e:	9d02      	ldr	r5, [sp, #8]
 801ca40:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ca44:	0e2e      	lsrs	r6, r5, #24
 801ca46:	d049      	beq.n	801cadc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ca48:	f06f 0201 	mvn.w	r2, #1
 801ca4c:	fb02 f20e 	mul.w	r2, r2, lr
 801ca50:	f834 8002 	ldrh.w	r8, [r4, r2]
 801ca54:	9203      	str	r2, [sp, #12]
 801ca56:	9a05      	ldr	r2, [sp, #20]
 801ca58:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ca5c:	4356      	muls	r6, r2
 801ca5e:	1c72      	adds	r2, r6, #1
 801ca60:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ca64:	1212      	asrs	r2, r2, #8
 801ca66:	fa1f f982 	uxth.w	r9, r2
 801ca6a:	43d2      	mvns	r2, r2
 801ca6c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ca70:	fb16 f609 	smulbb	r6, r6, r9
 801ca74:	b2ed      	uxtb	r5, r5
 801ca76:	ea4f 2728 	mov.w	r7, r8, asr #8
 801ca7a:	fb15 f509 	smulbb	r5, r5, r9
 801ca7e:	b2d2      	uxtb	r2, r2
 801ca80:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ca84:	fb07 6702 	mla	r7, r7, r2, r6
 801ca88:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801ca8c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ca90:	fb1a fa09 	smulbb	sl, sl, r9
 801ca94:	fa5f f888 	uxtb.w	r8, r8
 801ca98:	fb08 5502 	mla	r5, r8, r2, r5
 801ca9c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801caa0:	fb06 a602 	mla	r6, r6, r2, sl
 801caa4:	b2bf      	uxth	r7, r7
 801caa6:	b2ad      	uxth	r5, r5
 801caa8:	1c7a      	adds	r2, r7, #1
 801caaa:	f105 0a01 	add.w	sl, r5, #1
 801caae:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801cab2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cab6:	b2b6      	uxth	r6, r6
 801cab8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cabc:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801cac0:	ea4a 0707 	orr.w	r7, sl, r7
 801cac4:	f106 0a01 	add.w	sl, r6, #1
 801cac8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801cacc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cad0:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801cad4:	9a03      	ldr	r2, [sp, #12]
 801cad6:	ea47 070a 	orr.w	r7, r7, sl
 801cada:	52a7      	strh	r7, [r4, r2]
 801cadc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cade:	f10e 3eff 	add.w	lr, lr, #4294967295
 801cae2:	4410      	add	r0, r2
 801cae4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801cae6:	4411      	add	r1, r2
 801cae8:	e755      	b.n	801c996 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801caea:	f04f 0800 	mov.w	r8, #0
 801caee:	eba3 0208 	sub.w	r2, r3, r8
 801caf2:	2a00      	cmp	r2, #0
 801caf4:	f77f af53 	ble.w	801c99e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801caf8:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801cafc:	9f01      	ldr	r7, [sp, #4]
 801cafe:	140a      	asrs	r2, r1, #16
 801cb00:	fb06 7202 	mla	r2, r6, r2, r7
 801cb04:	1405      	asrs	r5, r0, #16
 801cb06:	5d52      	ldrb	r2, [r2, r5]
 801cb08:	9d02      	ldr	r5, [sp, #8]
 801cb0a:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801cb0e:	0e2e      	lsrs	r6, r5, #24
 801cb10:	d044      	beq.n	801cb9c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801cb12:	9a05      	ldr	r2, [sp, #20]
 801cb14:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801cb18:	4356      	muls	r6, r2
 801cb1a:	1c72      	adds	r2, r6, #1
 801cb1c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801cb20:	1212      	asrs	r2, r2, #8
 801cb22:	fa1f f982 	uxth.w	r9, r2
 801cb26:	43d2      	mvns	r2, r2
 801cb28:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801cb2c:	fb16 f609 	smulbb	r6, r6, r9
 801cb30:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801cb34:	b2ed      	uxtb	r5, r5
 801cb36:	ea4f 272e 	mov.w	r7, lr, asr #8
 801cb3a:	fb15 f509 	smulbb	r5, r5, r9
 801cb3e:	b2d2      	uxtb	r2, r2
 801cb40:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801cb44:	fb07 6702 	mla	r7, r7, r2, r6
 801cb48:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801cb4c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cb50:	fb1a fa09 	smulbb	sl, sl, r9
 801cb54:	fa5f fe8e 	uxtb.w	lr, lr
 801cb58:	fb0e 5502 	mla	r5, lr, r2, r5
 801cb5c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801cb60:	fb06 a602 	mla	r6, r6, r2, sl
 801cb64:	b2bf      	uxth	r7, r7
 801cb66:	b2ad      	uxth	r5, r5
 801cb68:	1c7a      	adds	r2, r7, #1
 801cb6a:	f105 0a01 	add.w	sl, r5, #1
 801cb6e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801cb72:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cb76:	b2b6      	uxth	r6, r6
 801cb78:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cb7c:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801cb80:	ea4a 0707 	orr.w	r7, sl, r7
 801cb84:	f106 0a01 	add.w	sl, r6, #1
 801cb88:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801cb8c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cb90:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801cb94:	ea47 070a 	orr.w	r7, r7, sl
 801cb98:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801cb9c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cb9e:	f108 0801 	add.w	r8, r8, #1
 801cba2:	4410      	add	r0, r2
 801cba4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801cba6:	4411      	add	r1, r2
 801cba8:	e7a1      	b.n	801caee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801cbaa:	b007      	add	sp, #28
 801cbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cbb0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cbb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbb8:	b085      	sub	sp, #20
 801cbba:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801cbbc:	468b      	mov	fp, r1
 801cbbe:	6841      	ldr	r1, [r0, #4]
 801cbc0:	9203      	str	r2, [sp, #12]
 801cbc2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801cbc6:	fb01 2404 	mla	r4, r1, r4, r2
 801cbca:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801cbce:	6802      	ldr	r2, [r0, #0]
 801cbd0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801cbd4:	f8de 2000 	ldr.w	r2, [lr]
 801cbd8:	9200      	str	r2, [sp, #0]
 801cbda:	f8de 2004 	ldr.w	r2, [lr, #4]
 801cbde:	3204      	adds	r2, #4
 801cbe0:	9201      	str	r2, [sp, #4]
 801cbe2:	f1bb 0f00 	cmp.w	fp, #0
 801cbe6:	dc03      	bgt.n	801cbf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801cbe8:	9a03      	ldr	r2, [sp, #12]
 801cbea:	2a00      	cmp	r2, #0
 801cbec:	f340 8153 	ble.w	801ce96 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801cbf0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801cbf2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801cbf6:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801cbfa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801cbfc:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801cc00:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	dd0e      	ble.n	801cc26 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cc08:	1408      	asrs	r0, r1, #16
 801cc0a:	d405      	bmi.n	801cc18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cc0c:	42b8      	cmp	r0, r7
 801cc0e:	da03      	bge.n	801cc18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cc10:	1410      	asrs	r0, r2, #16
 801cc12:	d401      	bmi.n	801cc18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cc14:	42b0      	cmp	r0, r6
 801cc16:	db07      	blt.n	801cc28 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801cc18:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801cc1a:	3b01      	subs	r3, #1
 801cc1c:	4401      	add	r1, r0
 801cc1e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801cc20:	3402      	adds	r4, #2
 801cc22:	4402      	add	r2, r0
 801cc24:	e7ee      	b.n	801cc04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801cc26:	d017      	beq.n	801cc58 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801cc28:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801cc2a:	1e58      	subs	r0, r3, #1
 801cc2c:	fb05 1500 	mla	r5, r5, r0, r1
 801cc30:	142d      	asrs	r5, r5, #16
 801cc32:	d409      	bmi.n	801cc48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801cc34:	42bd      	cmp	r5, r7
 801cc36:	da07      	bge.n	801cc48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801cc38:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801cc3a:	fb05 2000 	mla	r0, r5, r0, r2
 801cc3e:	1400      	asrs	r0, r0, #16
 801cc40:	d402      	bmi.n	801cc48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801cc42:	42b0      	cmp	r0, r6
 801cc44:	f2c0 80bc 	blt.w	801cdc0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801cc48:	2600      	movs	r6, #0
 801cc4a:	1998      	adds	r0, r3, r6
 801cc4c:	2800      	cmp	r0, #0
 801cc4e:	dc3e      	bgt.n	801ccce <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801cc50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cc54:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cc58:	f1bb 0f00 	cmp.w	fp, #0
 801cc5c:	f340 811b 	ble.w	801ce96 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801cc60:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cc64:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cc68:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cc6c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cc70:	eeb0 6a62 	vmov.f32	s12, s5
 801cc74:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cc78:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cc7c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cc80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cc84:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cc88:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801cc8c:	eeb0 6a43 	vmov.f32	s12, s6
 801cc90:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cc94:	ee12 2a90 	vmov	r2, s5
 801cc98:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cc9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cc9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cca2:	fb92 f3f3 	sdiv	r3, r2, r3
 801cca6:	ee13 2a10 	vmov	r2, s6
 801ccaa:	9311      	str	r3, [sp, #68]	@ 0x44
 801ccac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ccae:	f1bb 0b01 	subs.w	fp, fp, #1
 801ccb2:	fb92 f3f3 	sdiv	r3, r2, r3
 801ccb6:	9a03      	ldr	r2, [sp, #12]
 801ccb8:	9312      	str	r3, [sp, #72]	@ 0x48
 801ccba:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801ccbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ccc0:	eeb0 3a67 	vmov.f32	s6, s15
 801ccc4:	bf08      	it	eq
 801ccc6:	4613      	moveq	r3, r2
 801ccc8:	eef0 2a47 	vmov.f32	s5, s14
 801cccc:	e789      	b.n	801cbe2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ccce:	140f      	asrs	r7, r1, #16
 801ccd0:	d426      	bmi.n	801cd20 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ccd2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ccd6:	42bd      	cmp	r5, r7
 801ccd8:	dd22      	ble.n	801cd20 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ccda:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ccde:	d41f      	bmi.n	801cd20 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801cce0:	f8de 000c 	ldr.w	r0, [lr, #12]
 801cce4:	4560      	cmp	r0, ip
 801cce6:	dd1b      	ble.n	801cd20 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801cce8:	9800      	ldr	r0, [sp, #0]
 801ccea:	b22d      	sxth	r5, r5
 801ccec:	fb0c 0505 	mla	r5, ip, r5, r0
 801ccf0:	5de8      	ldrb	r0, [r5, r7]
 801ccf2:	9d01      	ldr	r5, [sp, #4]
 801ccf4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ccf8:	0e07      	lsrs	r7, r0, #24
 801ccfa:	2fff      	cmp	r7, #255	@ 0xff
 801ccfc:	d116      	bne.n	801cd2c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ccfe:	f06f 0501 	mvn.w	r5, #1
 801cd02:	fb05 f706 	mul.w	r7, r5, r6
 801cd06:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801cd0a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801cd0e:	0945      	lsrs	r5, r0, #5
 801cd10:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801cd14:	ea4c 0505 	orr.w	r5, ip, r5
 801cd18:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801cd1c:	4305      	orrs	r5, r0
 801cd1e:	53e5      	strh	r5, [r4, r7]
 801cd20:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801cd22:	3e01      	subs	r6, #1
 801cd24:	4401      	add	r1, r0
 801cd26:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801cd28:	4402      	add	r2, r0
 801cd2a:	e78e      	b.n	801cc4a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801cd2c:	b2fd      	uxtb	r5, r7
 801cd2e:	2f00      	cmp	r7, #0
 801cd30:	d0f6      	beq.n	801cd20 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801cd32:	f06f 0701 	mvn.w	r7, #1
 801cd36:	fa1f f985 	uxth.w	r9, r5
 801cd3a:	43ed      	mvns	r5, r5
 801cd3c:	4377      	muls	r7, r6
 801cd3e:	f834 8007 	ldrh.w	r8, [r4, r7]
 801cd42:	9702      	str	r7, [sp, #8]
 801cd44:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801cd48:	fb17 f709 	smulbb	r7, r7, r9
 801cd4c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801cd50:	b2c0      	uxtb	r0, r0
 801cd52:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801cd56:	fb10 f009 	smulbb	r0, r0, r9
 801cd5a:	b2ed      	uxtb	r5, r5
 801cd5c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801cd60:	fb0c 7c05 	mla	ip, ip, r5, r7
 801cd64:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801cd68:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801cd6c:	fb1a fa09 	smulbb	sl, sl, r9
 801cd70:	fa5f f888 	uxtb.w	r8, r8
 801cd74:	fb08 0005 	mla	r0, r8, r5, r0
 801cd78:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801cd7c:	fb07 a705 	mla	r7, r7, r5, sl
 801cd80:	b280      	uxth	r0, r0
 801cd82:	fa1f fc8c 	uxth.w	ip, ip
 801cd86:	f100 0a01 	add.w	sl, r0, #1
 801cd8a:	f10c 0501 	add.w	r5, ip, #1
 801cd8e:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801cd92:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801cd96:	b2bf      	uxth	r7, r7
 801cd98:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cd9c:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801cda0:	ea4a 0c0c 	orr.w	ip, sl, ip
 801cda4:	f107 0a01 	add.w	sl, r7, #1
 801cda8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801cdac:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cdb0:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801cdb4:	9802      	ldr	r0, [sp, #8]
 801cdb6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801cdba:	f824 c000 	strh.w	ip, [r4, r0]
 801cdbe:	e7af      	b.n	801cd20 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801cdc0:	f04f 0800 	mov.w	r8, #0
 801cdc4:	eba3 0008 	sub.w	r0, r3, r8
 801cdc8:	2800      	cmp	r0, #0
 801cdca:	f77f af41 	ble.w	801cc50 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cdce:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801cdd2:	9f00      	ldr	r7, [sp, #0]
 801cdd4:	1410      	asrs	r0, r2, #16
 801cdd6:	fb06 7000 	mla	r0, r6, r0, r7
 801cdda:	140d      	asrs	r5, r1, #16
 801cddc:	5d40      	ldrb	r0, [r0, r5]
 801cdde:	9d01      	ldr	r5, [sp, #4]
 801cde0:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801cde4:	0e2e      	lsrs	r6, r5, #24
 801cde6:	2eff      	cmp	r6, #255	@ 0xff
 801cde8:	d112      	bne.n	801ce10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801cdea:	482c      	ldr	r0, [pc, #176]	@ (801ce9c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801cdec:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801cdf0:	0968      	lsrs	r0, r5, #5
 801cdf2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801cdf6:	4330      	orrs	r0, r6
 801cdf8:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801cdfc:	4328      	orrs	r0, r5
 801cdfe:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801ce02:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ce04:	f108 0801 	add.w	r8, r8, #1
 801ce08:	4401      	add	r1, r0
 801ce0a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ce0c:	4402      	add	r2, r0
 801ce0e:	e7d9      	b.n	801cdc4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ce10:	b2f0      	uxtb	r0, r6
 801ce12:	2e00      	cmp	r6, #0
 801ce14:	d0f5      	beq.n	801ce02 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ce16:	fa1f f980 	uxth.w	r9, r0
 801ce1a:	43c0      	mvns	r0, r0
 801ce1c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ce20:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801ce24:	fb16 f609 	smulbb	r6, r6, r9
 801ce28:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ce2c:	b2ed      	uxtb	r5, r5
 801ce2e:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ce32:	fb15 f509 	smulbb	r5, r5, r9
 801ce36:	b2c0      	uxtb	r0, r0
 801ce38:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ce3c:	fb07 6700 	mla	r7, r7, r0, r6
 801ce40:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ce44:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ce48:	fb1a fa09 	smulbb	sl, sl, r9
 801ce4c:	fa5f fc8c 	uxtb.w	ip, ip
 801ce50:	fb0c 5500 	mla	r5, ip, r0, r5
 801ce54:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801ce58:	fb06 a600 	mla	r6, r6, r0, sl
 801ce5c:	b2bf      	uxth	r7, r7
 801ce5e:	b2ad      	uxth	r5, r5
 801ce60:	1c78      	adds	r0, r7, #1
 801ce62:	f105 0a01 	add.w	sl, r5, #1
 801ce66:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ce6a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ce6e:	b2b6      	uxth	r6, r6
 801ce70:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ce74:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801ce78:	ea4a 0707 	orr.w	r7, sl, r7
 801ce7c:	f106 0a01 	add.w	sl, r6, #1
 801ce80:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ce84:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ce88:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801ce8c:	ea47 070a 	orr.w	r7, r7, sl
 801ce90:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801ce94:	e7b5      	b.n	801ce02 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ce96:	b005      	add	sp, #20
 801ce98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce9c:	fffff800 	.word	0xfffff800

0801cea0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cea0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cea8:	b087      	sub	sp, #28
 801ceaa:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ceac:	468b      	mov	fp, r1
 801ceae:	9204      	str	r2, [sp, #16]
 801ceb0:	6861      	ldr	r1, [r4, #4]
 801ceb2:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801ceb6:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801ceba:	9205      	str	r2, [sp, #20]
 801cebc:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801cec0:	fb01 2000 	mla	r0, r1, r0, r2
 801cec4:	6822      	ldr	r2, [r4, #0]
 801cec6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801ceca:	f8de 2000 	ldr.w	r2, [lr]
 801cece:	9201      	str	r2, [sp, #4]
 801ced0:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ced4:	9202      	str	r2, [sp, #8]
 801ced6:	f1bb 0f00 	cmp.w	fp, #0
 801ceda:	dc03      	bgt.n	801cee4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801cedc:	9a04      	ldr	r2, [sp, #16]
 801cede:	2a00      	cmp	r2, #0
 801cee0:	f340 8142 	ble.w	801d168 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801cee4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cee6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ceea:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801ceee:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801cef0:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801cef4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801cef8:	2b00      	cmp	r3, #0
 801cefa:	dd0e      	ble.n	801cf1a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801cefc:	140c      	asrs	r4, r1, #16
 801cefe:	d405      	bmi.n	801cf0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801cf00:	42bc      	cmp	r4, r7
 801cf02:	da03      	bge.n	801cf0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801cf04:	1414      	asrs	r4, r2, #16
 801cf06:	d401      	bmi.n	801cf0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801cf08:	42b4      	cmp	r4, r6
 801cf0a:	db07      	blt.n	801cf1c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cf0c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cf0e:	3b01      	subs	r3, #1
 801cf10:	4421      	add	r1, r4
 801cf12:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801cf14:	3002      	adds	r0, #2
 801cf16:	4422      	add	r2, r4
 801cf18:	e7ee      	b.n	801cef8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801cf1a:	d019      	beq.n	801cf50 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801cf1c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801cf1e:	1e5c      	subs	r4, r3, #1
 801cf20:	fb05 1504 	mla	r5, r5, r4, r1
 801cf24:	142d      	asrs	r5, r5, #16
 801cf26:	d409      	bmi.n	801cf3c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801cf28:	42bd      	cmp	r5, r7
 801cf2a:	da07      	bge.n	801cf3c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801cf2c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801cf2e:	fb05 2404 	mla	r4, r5, r4, r2
 801cf32:	1424      	asrs	r4, r4, #16
 801cf34:	d402      	bmi.n	801cf3c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801cf36:	42b4      	cmp	r4, r6
 801cf38:	f2c0 80b1 	blt.w	801d09e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801cf3c:	f04f 0800 	mov.w	r8, #0
 801cf40:	eb03 0408 	add.w	r4, r3, r8
 801cf44:	2c00      	cmp	r4, #0
 801cf46:	dc3e      	bgt.n	801cfc6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801cf48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cf4c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cf50:	f1bb 0f00 	cmp.w	fp, #0
 801cf54:	f340 8108 	ble.w	801d168 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801cf58:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cf5c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cf60:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cf64:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cf68:	eeb0 6a62 	vmov.f32	s12, s5
 801cf6c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cf70:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cf74:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cf78:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cf7c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cf80:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801cf84:	eeb0 6a43 	vmov.f32	s12, s6
 801cf88:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cf8c:	ee12 2a90 	vmov	r2, s5
 801cf90:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cf94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cf96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cf9a:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf9e:	ee13 2a10 	vmov	r2, s6
 801cfa2:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cfa4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cfa6:	f1bb 0b01 	subs.w	fp, fp, #1
 801cfaa:	fb92 f3f3 	sdiv	r3, r2, r3
 801cfae:	9a04      	ldr	r2, [sp, #16]
 801cfb0:	9314      	str	r3, [sp, #80]	@ 0x50
 801cfb2:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801cfb6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cfb8:	eeb0 3a67 	vmov.f32	s6, s15
 801cfbc:	bf08      	it	eq
 801cfbe:	4613      	moveq	r3, r2
 801cfc0:	eef0 2a47 	vmov.f32	s5, s14
 801cfc4:	e787      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801cfc6:	140e      	asrs	r6, r1, #16
 801cfc8:	d462      	bmi.n	801d090 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cfca:	f8de 5008 	ldr.w	r5, [lr, #8]
 801cfce:	42b5      	cmp	r5, r6
 801cfd0:	dd5e      	ble.n	801d090 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cfd2:	1417      	asrs	r7, r2, #16
 801cfd4:	d45c      	bmi.n	801d090 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cfd6:	f8de 400c 	ldr.w	r4, [lr, #12]
 801cfda:	42bc      	cmp	r4, r7
 801cfdc:	dd58      	ble.n	801d090 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cfde:	b22d      	sxth	r5, r5
 801cfe0:	fb07 6505 	mla	r5, r7, r5, r6
 801cfe4:	9c02      	ldr	r4, [sp, #8]
 801cfe6:	5d66      	ldrb	r6, [r4, r5]
 801cfe8:	2e00      	cmp	r6, #0
 801cfea:	d051      	beq.n	801d090 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cfec:	9c01      	ldr	r4, [sp, #4]
 801cfee:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801cff2:	f06f 0401 	mvn.w	r4, #1
 801cff6:	fb04 f408 	mul.w	r4, r4, r8
 801cffa:	5b05      	ldrh	r5, [r0, r4]
 801cffc:	9403      	str	r4, [sp, #12]
 801cffe:	9c05      	ldr	r4, [sp, #20]
 801d000:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801d004:	4366      	muls	r6, r4
 801d006:	1c74      	adds	r4, r6, #1
 801d008:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801d00c:	1224      	asrs	r4, r4, #8
 801d00e:	b2a7      	uxth	r7, r4
 801d010:	43e4      	mvns	r4, r4
 801d012:	122e      	asrs	r6, r5, #8
 801d014:	b2e4      	uxtb	r4, r4
 801d016:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801d01a:	fb16 f604 	smulbb	r6, r6, r4
 801d01e:	00ed      	lsls	r5, r5, #3
 801d020:	b2ed      	uxtb	r5, r5
 801d022:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801d026:	fb15 f504 	smulbb	r5, r5, r4
 801d02a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d02e:	fb0c 6c07 	mla	ip, ip, r7, r6
 801d032:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801d036:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801d03a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801d03e:	fb1a fa04 	smulbb	sl, sl, r4
 801d042:	fa5f f989 	uxtb.w	r9, r9
 801d046:	fb09 5507 	mla	r5, r9, r7, r5
 801d04a:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801d04e:	fb06 a607 	mla	r6, r6, r7, sl
 801d052:	fa1f fc8c 	uxth.w	ip, ip
 801d056:	b2ad      	uxth	r5, r5
 801d058:	f10c 0401 	add.w	r4, ip, #1
 801d05c:	f105 0a01 	add.w	sl, r5, #1
 801d060:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801d064:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d068:	b2b6      	uxth	r6, r6
 801d06a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d06e:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d072:	ea4a 0c0c 	orr.w	ip, sl, ip
 801d076:	f106 0a01 	add.w	sl, r6, #1
 801d07a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d07e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d082:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801d086:	9c03      	ldr	r4, [sp, #12]
 801d088:	ea4c 0c0a 	orr.w	ip, ip, sl
 801d08c:	f820 c004 	strh.w	ip, [r0, r4]
 801d090:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d092:	f108 38ff 	add.w	r8, r8, #4294967295
 801d096:	4421      	add	r1, r4
 801d098:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d09a:	4422      	add	r2, r4
 801d09c:	e750      	b.n	801cf40 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d09e:	f04f 0900 	mov.w	r9, #0
 801d0a2:	eba3 0409 	sub.w	r4, r3, r9
 801d0a6:	2c00      	cmp	r4, #0
 801d0a8:	f77f af4e 	ble.w	801cf48 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801d0ac:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801d0b0:	140d      	asrs	r5, r1, #16
 801d0b2:	1414      	asrs	r4, r2, #16
 801d0b4:	fb06 5404 	mla	r4, r6, r4, r5
 801d0b8:	9d02      	ldr	r5, [sp, #8]
 801d0ba:	5d2e      	ldrb	r6, [r5, r4]
 801d0bc:	2e00      	cmp	r6, #0
 801d0be:	d04c      	beq.n	801d15a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d0c0:	9d01      	ldr	r5, [sp, #4]
 801d0c2:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801d0c6:	9c05      	ldr	r4, [sp, #20]
 801d0c8:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801d0cc:	4366      	muls	r6, r4
 801d0ce:	1c74      	adds	r4, r6, #1
 801d0d0:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801d0d4:	1224      	asrs	r4, r4, #8
 801d0d6:	b2a7      	uxth	r7, r4
 801d0d8:	43e4      	mvns	r4, r4
 801d0da:	122e      	asrs	r6, r5, #8
 801d0dc:	b2e4      	uxtb	r4, r4
 801d0de:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801d0e2:	fb16 f604 	smulbb	r6, r6, r4
 801d0e6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801d0ea:	00ed      	lsls	r5, r5, #3
 801d0ec:	b2ed      	uxtb	r5, r5
 801d0ee:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801d0f2:	fb15 f504 	smulbb	r5, r5, r4
 801d0f6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d0fa:	fb0c 6c07 	mla	ip, ip, r7, r6
 801d0fe:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801d102:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801d106:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d10a:	fb1a fa04 	smulbb	sl, sl, r4
 801d10e:	fa5f f888 	uxtb.w	r8, r8
 801d112:	fb08 5507 	mla	r5, r8, r7, r5
 801d116:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801d11a:	fb06 a607 	mla	r6, r6, r7, sl
 801d11e:	fa1f fc8c 	uxth.w	ip, ip
 801d122:	b2ad      	uxth	r5, r5
 801d124:	f10c 0401 	add.w	r4, ip, #1
 801d128:	f105 0a01 	add.w	sl, r5, #1
 801d12c:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801d130:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d134:	b2b6      	uxth	r6, r6
 801d136:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d13a:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d13e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801d142:	f106 0a01 	add.w	sl, r6, #1
 801d146:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d14a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d14e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801d152:	ea4c 0c0a 	orr.w	ip, ip, sl
 801d156:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801d15a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d15c:	f109 0901 	add.w	r9, r9, #1
 801d160:	4421      	add	r1, r4
 801d162:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d164:	4422      	add	r2, r4
 801d166:	e79c      	b.n	801d0a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801d168:	b007      	add	sp, #28
 801d16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d16e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d16e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d172:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d176:	b085      	sub	sp, #20
 801d178:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d17a:	468b      	mov	fp, r1
 801d17c:	6861      	ldr	r1, [r4, #4]
 801d17e:	9203      	str	r2, [sp, #12]
 801d180:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 801d184:	fb01 2000 	mla	r0, r1, r0, r2
 801d188:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801d18c:	6822      	ldr	r2, [r4, #0]
 801d18e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801d192:	f8d8 2000 	ldr.w	r2, [r8]
 801d196:	9200      	str	r2, [sp, #0]
 801d198:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801d19c:	9201      	str	r2, [sp, #4]
 801d19e:	f1bb 0f00 	cmp.w	fp, #0
 801d1a2:	dc03      	bgt.n	801d1ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d1a4:	9a03      	ldr	r2, [sp, #12]
 801d1a6:	2a00      	cmp	r2, #0
 801d1a8:	f340 8146 	ble.w	801d438 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801d1ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d1ae:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801d1b2:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801d1b6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d1b8:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801d1bc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	dd0e      	ble.n	801d1e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d1c4:	140c      	asrs	r4, r1, #16
 801d1c6:	d405      	bmi.n	801d1d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d1c8:	42bc      	cmp	r4, r7
 801d1ca:	da03      	bge.n	801d1d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d1cc:	1414      	asrs	r4, r2, #16
 801d1ce:	d401      	bmi.n	801d1d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d1d0:	42b4      	cmp	r4, r6
 801d1d2:	db07      	blt.n	801d1e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d1d4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d1d6:	3b01      	subs	r3, #1
 801d1d8:	4421      	add	r1, r4
 801d1da:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d1dc:	3002      	adds	r0, #2
 801d1de:	4422      	add	r2, r4
 801d1e0:	e7ee      	b.n	801d1c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d1e2:	d017      	beq.n	801d214 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d1e4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801d1e6:	1e5c      	subs	r4, r3, #1
 801d1e8:	fb05 1504 	mla	r5, r5, r4, r1
 801d1ec:	142d      	asrs	r5, r5, #16
 801d1ee:	d409      	bmi.n	801d204 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d1f0:	42bd      	cmp	r5, r7
 801d1f2:	da07      	bge.n	801d204 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d1f4:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801d1f6:	fb05 2404 	mla	r4, r5, r4, r2
 801d1fa:	1424      	asrs	r4, r4, #16
 801d1fc:	d402      	bmi.n	801d204 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d1fe:	42b4      	cmp	r4, r6
 801d200:	f2c0 80b3 	blt.w	801d36a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801d204:	2600      	movs	r6, #0
 801d206:	199c      	adds	r4, r3, r6
 801d208:	2c00      	cmp	r4, #0
 801d20a:	dc3e      	bgt.n	801d28a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d20c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d210:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d214:	f1bb 0f00 	cmp.w	fp, #0
 801d218:	f340 810e 	ble.w	801d438 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801d21c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d220:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d224:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d228:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d22c:	eeb0 6a62 	vmov.f32	s12, s5
 801d230:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d234:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d238:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d23c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d240:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d244:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801d248:	eeb0 6a43 	vmov.f32	s12, s6
 801d24c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d250:	ee12 2a90 	vmov	r2, s5
 801d254:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d258:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d25a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d25e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d262:	ee13 2a10 	vmov	r2, s6
 801d266:	9311      	str	r3, [sp, #68]	@ 0x44
 801d268:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d26a:	f1bb 0b01 	subs.w	fp, fp, #1
 801d26e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d272:	9a03      	ldr	r2, [sp, #12]
 801d274:	9312      	str	r3, [sp, #72]	@ 0x48
 801d276:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801d27a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d27c:	eeb0 3a67 	vmov.f32	s6, s15
 801d280:	bf08      	it	eq
 801d282:	4613      	moveq	r3, r2
 801d284:	eef0 2a47 	vmov.f32	s5, s14
 801d288:	e789      	b.n	801d19e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d28a:	140f      	asrs	r7, r1, #16
 801d28c:	d418      	bmi.n	801d2c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d28e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801d292:	42bd      	cmp	r5, r7
 801d294:	dd14      	ble.n	801d2c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d296:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d29a:	d411      	bmi.n	801d2c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d29c:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801d2a0:	4564      	cmp	r4, ip
 801d2a2:	dd0d      	ble.n	801d2c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d2a4:	b22d      	sxth	r5, r5
 801d2a6:	fb0c 7505 	mla	r5, ip, r5, r7
 801d2aa:	9c01      	ldr	r4, [sp, #4]
 801d2ac:	5d64      	ldrb	r4, [r4, r5]
 801d2ae:	2cff      	cmp	r4, #255	@ 0xff
 801d2b0:	d10c      	bne.n	801d2cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801d2b2:	9c00      	ldr	r4, [sp, #0]
 801d2b4:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801d2b8:	f06f 0401 	mvn.w	r4, #1
 801d2bc:	4374      	muls	r4, r6
 801d2be:	5305      	strh	r5, [r0, r4]
 801d2c0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d2c2:	3e01      	subs	r6, #1
 801d2c4:	4421      	add	r1, r4
 801d2c6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d2c8:	4422      	add	r2, r4
 801d2ca:	e79c      	b.n	801d206 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d2cc:	2c00      	cmp	r4, #0
 801d2ce:	d0f7      	beq.n	801d2c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d2d0:	9f00      	ldr	r7, [sp, #0]
 801d2d2:	fa1f fc84 	uxth.w	ip, r4
 801d2d6:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801d2da:	f06f 0501 	mvn.w	r5, #1
 801d2de:	43e4      	mvns	r4, r4
 801d2e0:	4375      	muls	r5, r6
 801d2e2:	9502      	str	r5, [sp, #8]
 801d2e4:	5b45      	ldrh	r5, [r0, r5]
 801d2e6:	b2e4      	uxtb	r4, r4
 801d2e8:	122f      	asrs	r7, r5, #8
 801d2ea:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d2ee:	fb17 f704 	smulbb	r7, r7, r4
 801d2f2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801d2f6:	00ed      	lsls	r5, r5, #3
 801d2f8:	b2ed      	uxtb	r5, r5
 801d2fa:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801d2fe:	fb15 f504 	smulbb	r5, r5, r4
 801d302:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801d306:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801d30a:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801d30e:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801d312:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801d316:	fb1a fa04 	smulbb	sl, sl, r4
 801d31a:	fa5f f989 	uxtb.w	r9, r9
 801d31e:	fb09 550c 	mla	r5, r9, ip, r5
 801d322:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d326:	fb07 a70c 	mla	r7, r7, ip, sl
 801d32a:	fa1f fe8e 	uxth.w	lr, lr
 801d32e:	b2ad      	uxth	r5, r5
 801d330:	f10e 0401 	add.w	r4, lr, #1
 801d334:	f105 0a01 	add.w	sl, r5, #1
 801d338:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801d33c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d340:	b2bf      	uxth	r7, r7
 801d342:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d346:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801d34a:	ea4a 0e0e 	orr.w	lr, sl, lr
 801d34e:	f107 0a01 	add.w	sl, r7, #1
 801d352:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801d356:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d35a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801d35e:	9c02      	ldr	r4, [sp, #8]
 801d360:	ea4e 0e0a 	orr.w	lr, lr, sl
 801d364:	f820 e004 	strh.w	lr, [r0, r4]
 801d368:	e7aa      	b.n	801d2c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d36a:	f04f 0900 	mov.w	r9, #0
 801d36e:	eba3 0409 	sub.w	r4, r3, r9
 801d372:	2c00      	cmp	r4, #0
 801d374:	f77f af4a 	ble.w	801d20c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d378:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801d37c:	1414      	asrs	r4, r2, #16
 801d37e:	140d      	asrs	r5, r1, #16
 801d380:	fb06 5504 	mla	r5, r6, r4, r5
 801d384:	9c01      	ldr	r4, [sp, #4]
 801d386:	5d64      	ldrb	r4, [r4, r5]
 801d388:	2cff      	cmp	r4, #255	@ 0xff
 801d38a:	d10b      	bne.n	801d3a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801d38c:	9c00      	ldr	r4, [sp, #0]
 801d38e:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801d392:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801d396:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d398:	f109 0901 	add.w	r9, r9, #1
 801d39c:	4421      	add	r1, r4
 801d39e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d3a0:	4422      	add	r2, r4
 801d3a2:	e7e4      	b.n	801d36e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801d3a4:	2c00      	cmp	r4, #0
 801d3a6:	d0f6      	beq.n	801d396 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801d3a8:	b2a7      	uxth	r7, r4
 801d3aa:	43e4      	mvns	r4, r4
 801d3ac:	9e00      	ldr	r6, [sp, #0]
 801d3ae:	b2e4      	uxtb	r4, r4
 801d3b0:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801d3b4:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801d3b8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d3bc:	122e      	asrs	r6, r5, #8
 801d3be:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801d3c2:	fb16 f604 	smulbb	r6, r6, r4
 801d3c6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801d3ca:	00ed      	lsls	r5, r5, #3
 801d3cc:	b2ed      	uxtb	r5, r5
 801d3ce:	fb15 f504 	smulbb	r5, r5, r4
 801d3d2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d3d6:	fb0c 6c07 	mla	ip, ip, r7, r6
 801d3da:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801d3de:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801d3e2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d3e6:	fb1a fa04 	smulbb	sl, sl, r4
 801d3ea:	fa5f fe8e 	uxtb.w	lr, lr
 801d3ee:	fb0e 5507 	mla	r5, lr, r7, r5
 801d3f2:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801d3f6:	fb06 a607 	mla	r6, r6, r7, sl
 801d3fa:	fa1f fc8c 	uxth.w	ip, ip
 801d3fe:	b2ad      	uxth	r5, r5
 801d400:	f10c 0401 	add.w	r4, ip, #1
 801d404:	f105 0a01 	add.w	sl, r5, #1
 801d408:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801d40c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d410:	b2b6      	uxth	r6, r6
 801d412:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d416:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d41a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801d41e:	f106 0a01 	add.w	sl, r6, #1
 801d422:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d426:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d42a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801d42e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801d432:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801d436:	e7ae      	b.n	801d396 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801d438:	b005      	add	sp, #20
 801d43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d43e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d43e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d442:	b085      	sub	sp, #20
 801d444:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d446:	9100      	str	r1, [sp, #0]
 801d448:	9203      	str	r2, [sp, #12]
 801d44a:	6841      	ldr	r1, [r0, #4]
 801d44c:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801d450:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801d454:	9201      	str	r2, [sp, #4]
 801d456:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801d45a:	fb01 2404 	mla	r4, r1, r4, r2
 801d45e:	6802      	ldr	r2, [r0, #0]
 801d460:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d464:	f8de 2000 	ldr.w	r2, [lr]
 801d468:	9202      	str	r2, [sp, #8]
 801d46a:	9a01      	ldr	r2, [sp, #4]
 801d46c:	43d6      	mvns	r6, r2
 801d46e:	b2f6      	uxtb	r6, r6
 801d470:	9a00      	ldr	r2, [sp, #0]
 801d472:	2a00      	cmp	r2, #0
 801d474:	dc03      	bgt.n	801d47e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d476:	9a03      	ldr	r2, [sp, #12]
 801d478:	2a00      	cmp	r2, #0
 801d47a:	f340 8124 	ble.w	801d6c6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801d47e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d480:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801d484:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801d488:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d48a:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801d48e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d492:	2b00      	cmp	r3, #0
 801d494:	dd0e      	ble.n	801d4b4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d496:	1408      	asrs	r0, r1, #16
 801d498:	d405      	bmi.n	801d4a6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d49a:	4560      	cmp	r0, ip
 801d49c:	da03      	bge.n	801d4a6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d49e:	1410      	asrs	r0, r2, #16
 801d4a0:	d401      	bmi.n	801d4a6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d4a2:	42b8      	cmp	r0, r7
 801d4a4:	db07      	blt.n	801d4b6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d4a6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801d4a8:	3b01      	subs	r3, #1
 801d4aa:	4401      	add	r1, r0
 801d4ac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d4ae:	3402      	adds	r4, #2
 801d4b0:	4402      	add	r2, r0
 801d4b2:	e7ee      	b.n	801d492 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801d4b4:	d06e      	beq.n	801d594 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d4b6:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801d4b8:	1e58      	subs	r0, r3, #1
 801d4ba:	fb05 1500 	mla	r5, r5, r0, r1
 801d4be:	142d      	asrs	r5, r5, #16
 801d4c0:	d45c      	bmi.n	801d57c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d4c2:	4565      	cmp	r5, ip
 801d4c4:	da5a      	bge.n	801d57c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d4c6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801d4c8:	fb05 2000 	mla	r0, r5, r0, r2
 801d4cc:	1400      	asrs	r0, r0, #16
 801d4ce:	d455      	bmi.n	801d57c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d4d0:	42b8      	cmp	r0, r7
 801d4d2:	da53      	bge.n	801d57c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d4d4:	4699      	mov	r9, r3
 801d4d6:	46a2      	mov	sl, r4
 801d4d8:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801d4dc:	f1b9 0f00 	cmp.w	r9, #0
 801d4e0:	dd54      	ble.n	801d58c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d4e2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801d4e6:	140d      	asrs	r5, r1, #16
 801d4e8:	1410      	asrs	r0, r2, #16
 801d4ea:	fb07 5000 	mla	r0, r7, r0, r5
 801d4ee:	9d02      	ldr	r5, [sp, #8]
 801d4f0:	f109 39ff 	add.w	r9, r9, #4294967295
 801d4f4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801d4f8:	f8ba 5000 	ldrh.w	r5, [sl]
 801d4fc:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d500:	122f      	asrs	r7, r5, #8
 801d502:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d506:	fb17 f706 	smulbb	r7, r7, r6
 801d50a:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801d50e:	00ed      	lsls	r5, r5, #3
 801d510:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801d514:	b2ed      	uxtb	r5, r5
 801d516:	fb18 f806 	smulbb	r8, r8, r6
 801d51a:	fb15 f506 	smulbb	r5, r5, r6
 801d51e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d522:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801d526:	10c7      	asrs	r7, r0, #3
 801d528:	00c0      	lsls	r0, r0, #3
 801d52a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d52e:	b2c0      	uxtb	r0, r0
 801d530:	fb07 870b 	mla	r7, r7, fp, r8
 801d534:	fb00 500b 	mla	r0, r0, fp, r5
 801d538:	fa1f fc8c 	uxth.w	ip, ip
 801d53c:	b280      	uxth	r0, r0
 801d53e:	b2bf      	uxth	r7, r7
 801d540:	f10c 0501 	add.w	r5, ip, #1
 801d544:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d548:	f107 0801 	add.w	r8, r7, #1
 801d54c:	1c45      	adds	r5, r0, #1
 801d54e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d552:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801d556:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801d558:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d55c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d560:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d564:	ea45 0c0c 	orr.w	ip, r5, ip
 801d568:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801d56c:	4401      	add	r1, r0
 801d56e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d570:	ea4c 0c08 	orr.w	ip, ip, r8
 801d574:	f82a cb02 	strh.w	ip, [sl], #2
 801d578:	4402      	add	r2, r0
 801d57a:	e7af      	b.n	801d4dc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d57c:	f04f 0800 	mov.w	r8, #0
 801d580:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801d584:	eb03 0008 	add.w	r0, r3, r8
 801d588:	2800      	cmp	r0, #0
 801d58a:	dc41      	bgt.n	801d610 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d58c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d590:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d594:	9b00      	ldr	r3, [sp, #0]
 801d596:	2b00      	cmp	r3, #0
 801d598:	f340 8095 	ble.w	801d6c6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801d59c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d5a0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d5a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d5a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d5ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d5b0:	eef0 6a62 	vmov.f32	s13, s5
 801d5b4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d5b8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d5bc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d5c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d5c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d5c8:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801d5cc:	eef0 6a43 	vmov.f32	s13, s6
 801d5d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d5d4:	ee12 2a90 	vmov	r2, s5
 801d5d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d5dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d5de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d5e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d5e6:	ee13 2a10 	vmov	r2, s6
 801d5ea:	9311      	str	r3, [sp, #68]	@ 0x44
 801d5ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d5ee:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801d5f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d5f6:	9312      	str	r3, [sp, #72]	@ 0x48
 801d5f8:	9b00      	ldr	r3, [sp, #0]
 801d5fa:	9a03      	ldr	r2, [sp, #12]
 801d5fc:	3b01      	subs	r3, #1
 801d5fe:	9300      	str	r3, [sp, #0]
 801d600:	eeb0 3a67 	vmov.f32	s6, s15
 801d604:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d606:	eef0 2a47 	vmov.f32	s5, s14
 801d60a:	bf08      	it	eq
 801d60c:	4613      	moveq	r3, r2
 801d60e:	e72f      	b.n	801d470 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801d610:	140f      	asrs	r7, r1, #16
 801d612:	d451      	bmi.n	801d6b8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d614:	f8de 5008 	ldr.w	r5, [lr, #8]
 801d618:	42bd      	cmp	r5, r7
 801d61a:	dd4d      	ble.n	801d6b8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d61c:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d620:	d44a      	bmi.n	801d6b8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d622:	f8de 000c 	ldr.w	r0, [lr, #12]
 801d626:	4560      	cmp	r0, ip
 801d628:	dd46      	ble.n	801d6b8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d62a:	b22d      	sxth	r5, r5
 801d62c:	fb0c 7505 	mla	r5, ip, r5, r7
 801d630:	9802      	ldr	r0, [sp, #8]
 801d632:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801d636:	f06f 0501 	mvn.w	r5, #1
 801d63a:	fb05 fb08 	mul.w	fp, r5, r8
 801d63e:	f834 500b 	ldrh.w	r5, [r4, fp]
 801d642:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d646:	122f      	asrs	r7, r5, #8
 801d648:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d64c:	fb17 f706 	smulbb	r7, r7, r6
 801d650:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d654:	00ed      	lsls	r5, r5, #3
 801d656:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801d65a:	b2ed      	uxtb	r5, r5
 801d65c:	fb19 f906 	smulbb	r9, r9, r6
 801d660:	fb15 f506 	smulbb	r5, r5, r6
 801d664:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d668:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801d66c:	10c7      	asrs	r7, r0, #3
 801d66e:	00c0      	lsls	r0, r0, #3
 801d670:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d674:	b2c0      	uxtb	r0, r0
 801d676:	fb07 970a 	mla	r7, r7, sl, r9
 801d67a:	fb00 500a 	mla	r0, r0, sl, r5
 801d67e:	fa1f fc8c 	uxth.w	ip, ip
 801d682:	b2bf      	uxth	r7, r7
 801d684:	b280      	uxth	r0, r0
 801d686:	f10c 0501 	add.w	r5, ip, #1
 801d68a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d68e:	f107 0901 	add.w	r9, r7, #1
 801d692:	1c45      	adds	r5, r0, #1
 801d694:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d698:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801d69c:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d6a0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d6a4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801d6a8:	ea45 0c0c 	orr.w	ip, r5, ip
 801d6ac:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801d6b0:	ea4c 0c09 	orr.w	ip, ip, r9
 801d6b4:	f824 c00b 	strh.w	ip, [r4, fp]
 801d6b8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801d6ba:	f108 38ff 	add.w	r8, r8, #4294967295
 801d6be:	4401      	add	r1, r0
 801d6c0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d6c2:	4402      	add	r2, r0
 801d6c4:	e75e      	b.n	801d584 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d6c6:	b005      	add	sp, #20
 801d6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d6cc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d6cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6d4:	b085      	sub	sp, #20
 801d6d6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d6d8:	4693      	mov	fp, r2
 801d6da:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801d6de:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801d6e2:	6870      	ldr	r0, [r6, #4]
 801d6e4:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801d6e6:	fb00 2404 	mla	r4, r0, r4, r2
 801d6ea:	6832      	ldr	r2, [r6, #0]
 801d6ec:	9101      	str	r1, [sp, #4]
 801d6ee:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d6f2:	682a      	ldr	r2, [r5, #0]
 801d6f4:	9202      	str	r2, [sp, #8]
 801d6f6:	9a01      	ldr	r2, [sp, #4]
 801d6f8:	2a00      	cmp	r2, #0
 801d6fa:	dc03      	bgt.n	801d704 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d6fc:	f1bb 0f00 	cmp.w	fp, #0
 801d700:	f340 809a 	ble.w	801d838 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d704:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d706:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d70a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801d70e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d710:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d714:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d718:	2b00      	cmp	r3, #0
 801d71a:	dd0c      	ble.n	801d736 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d71c:	1406      	asrs	r6, r0, #16
 801d71e:	d405      	bmi.n	801d72c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d720:	454e      	cmp	r6, r9
 801d722:	da03      	bge.n	801d72c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d724:	1416      	asrs	r6, r2, #16
 801d726:	d401      	bmi.n	801d72c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d728:	4546      	cmp	r6, r8
 801d72a:	db05      	blt.n	801d738 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d72c:	4470      	add	r0, lr
 801d72e:	4462      	add	r2, ip
 801d730:	3b01      	subs	r3, #1
 801d732:	3402      	adds	r4, #2
 801d734:	e7f0      	b.n	801d718 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d736:	d00f      	beq.n	801d758 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d738:	1e5e      	subs	r6, r3, #1
 801d73a:	fb0e 0706 	mla	r7, lr, r6, r0
 801d73e:	143f      	asrs	r7, r7, #16
 801d740:	d541      	bpl.n	801d7c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801d742:	4698      	mov	r8, r3
 801d744:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801d748:	9603      	str	r6, [sp, #12]
 801d74a:	f1b8 0f00 	cmp.w	r8, #0
 801d74e:	dc56      	bgt.n	801d7fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801d750:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d754:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d758:	9b01      	ldr	r3, [sp, #4]
 801d75a:	2b00      	cmp	r3, #0
 801d75c:	dd6c      	ble.n	801d838 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d75e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d762:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d766:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d76a:	eeb0 6a62 	vmov.f32	s12, s5
 801d76e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d772:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d776:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d77a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d77e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d782:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801d786:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d78a:	eeb0 6a43 	vmov.f32	s12, s6
 801d78e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d792:	ee12 2a90 	vmov	r2, s5
 801d796:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d79a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d79c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d7a0:	fb92 fef3 	sdiv	lr, r2, r3
 801d7a4:	ee13 2a10 	vmov	r2, s6
 801d7a8:	fb92 fcf3 	sdiv	ip, r2, r3
 801d7ac:	9b01      	ldr	r3, [sp, #4]
 801d7ae:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801d7b2:	3b01      	subs	r3, #1
 801d7b4:	9301      	str	r3, [sp, #4]
 801d7b6:	eeb0 3a67 	vmov.f32	s6, s15
 801d7ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d7bc:	eef0 2a47 	vmov.f32	s5, s14
 801d7c0:	bf08      	it	eq
 801d7c2:	465b      	moveq	r3, fp
 801d7c4:	e797      	b.n	801d6f6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801d7c6:	454f      	cmp	r7, r9
 801d7c8:	dabb      	bge.n	801d742 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d7ca:	fb0c 2606 	mla	r6, ip, r6, r2
 801d7ce:	1436      	asrs	r6, r6, #16
 801d7d0:	d4b7      	bmi.n	801d742 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d7d2:	4546      	cmp	r6, r8
 801d7d4:	dab5      	bge.n	801d742 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d7d6:	461e      	mov	r6, r3
 801d7d8:	46a0      	mov	r8, r4
 801d7da:	2e00      	cmp	r6, #0
 801d7dc:	ddb8      	ble.n	801d750 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d7de:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801d7e2:	1417      	asrs	r7, r2, #16
 801d7e4:	ea4f 4920 	mov.w	r9, r0, asr #16
 801d7e8:	fb0a 9707 	mla	r7, sl, r7, r9
 801d7ec:	9902      	ldr	r1, [sp, #8]
 801d7ee:	4470      	add	r0, lr
 801d7f0:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801d7f4:	4462      	add	r2, ip
 801d7f6:	f828 7b02 	strh.w	r7, [r8], #2
 801d7fa:	3e01      	subs	r6, #1
 801d7fc:	e7ed      	b.n	801d7da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801d7fe:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d802:	d414      	bmi.n	801d82e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d804:	68ae      	ldr	r6, [r5, #8]
 801d806:	454e      	cmp	r6, r9
 801d808:	dd11      	ble.n	801d82e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d80a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d80e:	d40e      	bmi.n	801d82e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d810:	68ef      	ldr	r7, [r5, #12]
 801d812:	4557      	cmp	r7, sl
 801d814:	dd0b      	ble.n	801d82e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d816:	f06f 0101 	mvn.w	r1, #1
 801d81a:	b236      	sxth	r6, r6
 801d81c:	fb0a 9606 	mla	r6, sl, r6, r9
 801d820:	9f02      	ldr	r7, [sp, #8]
 801d822:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801d826:	fb01 f608 	mul.w	r6, r1, r8
 801d82a:	9903      	ldr	r1, [sp, #12]
 801d82c:	538f      	strh	r7, [r1, r6]
 801d82e:	4470      	add	r0, lr
 801d830:	4462      	add	r2, ip
 801d832:	f108 38ff 	add.w	r8, r8, #4294967295
 801d836:	e788      	b.n	801d74a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d838:	b005      	add	sp, #20
 801d83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d83e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d83e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d842:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d846:	b087      	sub	sp, #28
 801d848:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801d84a:	468b      	mov	fp, r1
 801d84c:	9203      	str	r2, [sp, #12]
 801d84e:	6841      	ldr	r1, [r0, #4]
 801d850:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801d854:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801d858:	9204      	str	r2, [sp, #16]
 801d85a:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801d85e:	fb01 2505 	mla	r5, r1, r5, r2
 801d862:	6802      	ldr	r2, [r0, #0]
 801d864:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801d868:	f8d9 2000 	ldr.w	r2, [r9]
 801d86c:	9201      	str	r2, [sp, #4]
 801d86e:	f1bb 0f00 	cmp.w	fp, #0
 801d872:	dc03      	bgt.n	801d87c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d874:	9a03      	ldr	r2, [sp, #12]
 801d876:	2a00      	cmp	r2, #0
 801d878:	f340 8159 	ble.w	801db2e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801d87c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d87e:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801d882:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801d886:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d888:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801d88c:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801d890:	2b00      	cmp	r3, #0
 801d892:	dd0e      	ble.n	801d8b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d894:	1402      	asrs	r2, r0, #16
 801d896:	d405      	bmi.n	801d8a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d898:	42ba      	cmp	r2, r7
 801d89a:	da03      	bge.n	801d8a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d89c:	140a      	asrs	r2, r1, #16
 801d89e:	d401      	bmi.n	801d8a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d8a0:	42b2      	cmp	r2, r6
 801d8a2:	db07      	blt.n	801d8b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d8a4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d8a6:	3b01      	subs	r3, #1
 801d8a8:	4410      	add	r0, r2
 801d8aa:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d8ac:	3502      	adds	r5, #2
 801d8ae:	4411      	add	r1, r2
 801d8b0:	e7ee      	b.n	801d890 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d8b2:	d017      	beq.n	801d8e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d8b4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d8b6:	1e5a      	subs	r2, r3, #1
 801d8b8:	fb04 0402 	mla	r4, r4, r2, r0
 801d8bc:	1424      	asrs	r4, r4, #16
 801d8be:	d409      	bmi.n	801d8d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d8c0:	42bc      	cmp	r4, r7
 801d8c2:	da07      	bge.n	801d8d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d8c4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d8c6:	fb04 1202 	mla	r2, r4, r2, r1
 801d8ca:	1412      	asrs	r2, r2, #16
 801d8cc:	d402      	bmi.n	801d8d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d8ce:	42b2      	cmp	r2, r6
 801d8d0:	f2c0 80bf 	blt.w	801da52 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d8d4:	2700      	movs	r7, #0
 801d8d6:	19da      	adds	r2, r3, r7
 801d8d8:	2a00      	cmp	r2, #0
 801d8da:	dc3e      	bgt.n	801d95a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d8dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d8e0:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801d8e4:	f1bb 0f00 	cmp.w	fp, #0
 801d8e8:	f340 8121 	ble.w	801db2e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801d8ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d8f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d8f4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d8f8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d8fc:	eeb0 6a62 	vmov.f32	s12, s5
 801d900:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d904:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d908:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d90c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d910:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d914:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801d918:	eeb0 6a43 	vmov.f32	s12, s6
 801d91c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d920:	ee12 2a90 	vmov	r2, s5
 801d924:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d928:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d92a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d92e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d932:	ee13 2a10 	vmov	r2, s6
 801d936:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d938:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d93a:	f1bb 0b01 	subs.w	fp, fp, #1
 801d93e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d942:	9a03      	ldr	r2, [sp, #12]
 801d944:	9314      	str	r3, [sp, #80]	@ 0x50
 801d946:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801d94a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d94c:	eeb0 3a67 	vmov.f32	s6, s15
 801d950:	bf08      	it	eq
 801d952:	4613      	moveq	r3, r2
 801d954:	eef0 2a47 	vmov.f32	s5, s14
 801d958:	e789      	b.n	801d86e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d95a:	1406      	asrs	r6, r0, #16
 801d95c:	d42d      	bmi.n	801d9ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d95e:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801d962:	42b4      	cmp	r4, r6
 801d964:	dd29      	ble.n	801d9ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d966:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801d96a:	d426      	bmi.n	801d9ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d96c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801d970:	4562      	cmp	r2, ip
 801d972:	dd22      	ble.n	801d9ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d974:	b224      	sxth	r4, r4
 801d976:	fb0c 6404 	mla	r4, ip, r4, r6
 801d97a:	9a01      	ldr	r2, [sp, #4]
 801d97c:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801d980:	0e22      	lsrs	r2, r4, #24
 801d982:	d01a      	beq.n	801d9ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d984:	9e04      	ldr	r6, [sp, #16]
 801d986:	4372      	muls	r2, r6
 801d988:	1c56      	adds	r6, r2, #1
 801d98a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d98e:	1212      	asrs	r2, r2, #8
 801d990:	0a26      	lsrs	r6, r4, #8
 801d992:	2aff      	cmp	r2, #255	@ 0xff
 801d994:	9605      	str	r6, [sp, #20]
 801d996:	d116      	bne.n	801d9c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801d998:	f06f 0201 	mvn.w	r2, #1
 801d99c:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801d9a0:	fb02 fc07 	mul.w	ip, r2, r7
 801d9a4:	0962      	lsrs	r2, r4, #5
 801d9a6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801d9aa:	f026 0607 	bic.w	r6, r6, #7
 801d9ae:	4316      	orrs	r6, r2
 801d9b0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d9b4:	4326      	orrs	r6, r4
 801d9b6:	f825 600c 	strh.w	r6, [r5, ip]
 801d9ba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d9bc:	3f01      	subs	r7, #1
 801d9be:	4410      	add	r0, r2
 801d9c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d9c2:	4411      	add	r1, r2
 801d9c4:	e787      	b.n	801d8d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d9c6:	f06f 0601 	mvn.w	r6, #1
 801d9ca:	fa1f fa82 	uxth.w	sl, r2
 801d9ce:	43d2      	mvns	r2, r2
 801d9d0:	437e      	muls	r6, r7
 801d9d2:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801d9d6:	f835 8006 	ldrh.w	r8, [r5, r6]
 801d9da:	fb1c fc0a 	smulbb	ip, ip, sl
 801d9de:	b2e4      	uxtb	r4, r4
 801d9e0:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801d9e4:	fb14 f40a 	smulbb	r4, r4, sl
 801d9e8:	b2d2      	uxtb	r2, r2
 801d9ea:	9602      	str	r6, [sp, #8]
 801d9ec:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801d9f0:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801d9f4:	fb0e ce02 	mla	lr, lr, r2, ip
 801d9f8:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801d9fc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801da00:	fb16 f60a 	smulbb	r6, r6, sl
 801da04:	fa5f f888 	uxtb.w	r8, r8
 801da08:	fb08 4402 	mla	r4, r8, r2, r4
 801da0c:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801da10:	fb0c 6c02 	mla	ip, ip, r2, r6
 801da14:	fa1f fe8e 	uxth.w	lr, lr
 801da18:	b2a4      	uxth	r4, r4
 801da1a:	f10e 0201 	add.w	r2, lr, #1
 801da1e:	1c66      	adds	r6, r4, #1
 801da20:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801da24:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801da28:	fa1f fc8c 	uxth.w	ip, ip
 801da2c:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801da30:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801da34:	ea46 0e0e 	orr.w	lr, r6, lr
 801da38:	f10c 0601 	add.w	r6, ip, #1
 801da3c:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801da40:	0976      	lsrs	r6, r6, #5
 801da42:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801da46:	9a02      	ldr	r2, [sp, #8]
 801da48:	ea4e 0e06 	orr.w	lr, lr, r6
 801da4c:	f825 e002 	strh.w	lr, [r5, r2]
 801da50:	e7b3      	b.n	801d9ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801da52:	f04f 0800 	mov.w	r8, #0
 801da56:	eba3 0208 	sub.w	r2, r3, r8
 801da5a:	2a00      	cmp	r2, #0
 801da5c:	f77f af3e 	ble.w	801d8dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801da60:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801da64:	1404      	asrs	r4, r0, #16
 801da66:	140a      	asrs	r2, r1, #16
 801da68:	fb06 4202 	mla	r2, r6, r2, r4
 801da6c:	9c01      	ldr	r4, [sp, #4]
 801da6e:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801da72:	0e22      	lsrs	r2, r4, #24
 801da74:	d016      	beq.n	801daa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801da76:	9e04      	ldr	r6, [sp, #16]
 801da78:	4372      	muls	r2, r6
 801da7a:	1c56      	adds	r6, r2, #1
 801da7c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801da80:	1212      	asrs	r2, r2, #8
 801da82:	2aff      	cmp	r2, #255	@ 0xff
 801da84:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801da88:	d113      	bne.n	801dab2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801da8a:	0962      	lsrs	r2, r4, #5
 801da8c:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801da90:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801da94:	f026 0607 	bic.w	r6, r6, #7
 801da98:	4316      	orrs	r6, r2
 801da9a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801da9e:	4326      	orrs	r6, r4
 801daa0:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801daa4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801daa6:	f108 0801 	add.w	r8, r8, #1
 801daaa:	4410      	add	r0, r2
 801daac:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801daae:	4411      	add	r1, r2
 801dab0:	e7d1      	b.n	801da56 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801dab2:	fa1f fa82 	uxth.w	sl, r2
 801dab6:	43d2      	mvns	r2, r2
 801dab8:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801dabc:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801dac0:	fb17 f70a 	smulbb	r7, r7, sl
 801dac4:	b2e4      	uxtb	r4, r4
 801dac6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801daca:	fb14 f40a 	smulbb	r4, r4, sl
 801dace:	b2d2      	uxtb	r2, r2
 801dad0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801dad4:	fb0c 7c02 	mla	ip, ip, r2, r7
 801dad8:	b2f6      	uxtb	r6, r6
 801dada:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801dade:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801dae2:	fb16 f60a 	smulbb	r6, r6, sl
 801dae6:	fa5f fe8e 	uxtb.w	lr, lr
 801daea:	fb0e 4402 	mla	r4, lr, r2, r4
 801daee:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801daf2:	fb07 6702 	mla	r7, r7, r2, r6
 801daf6:	fa1f fc8c 	uxth.w	ip, ip
 801dafa:	b2a4      	uxth	r4, r4
 801dafc:	f10c 0201 	add.w	r2, ip, #1
 801db00:	1c66      	adds	r6, r4, #1
 801db02:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801db06:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801db0a:	b2bf      	uxth	r7, r7
 801db0c:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801db10:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801db14:	ea46 0c0c 	orr.w	ip, r6, ip
 801db18:	1c7e      	adds	r6, r7, #1
 801db1a:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801db1e:	0976      	lsrs	r6, r6, #5
 801db20:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801db24:	ea4c 0c06 	orr.w	ip, ip, r6
 801db28:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801db2c:	e7ba      	b.n	801daa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801db2e:	b007      	add	sp, #28
 801db30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801db34 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801db34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801db38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db3c:	b085      	sub	sp, #20
 801db3e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801db40:	468b      	mov	fp, r1
 801db42:	6841      	ldr	r1, [r0, #4]
 801db44:	9203      	str	r2, [sp, #12]
 801db46:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801db4a:	fb01 2404 	mla	r4, r1, r4, r2
 801db4e:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801db52:	6802      	ldr	r2, [r0, #0]
 801db54:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801db58:	f8d8 2000 	ldr.w	r2, [r8]
 801db5c:	9201      	str	r2, [sp, #4]
 801db5e:	f1bb 0f00 	cmp.w	fp, #0
 801db62:	dc03      	bgt.n	801db6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801db64:	9a03      	ldr	r2, [sp, #12]
 801db66:	2a00      	cmp	r2, #0
 801db68:	f340 814f 	ble.w	801de0a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801db6c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801db6e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801db72:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801db76:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801db78:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801db7c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801db80:	2b00      	cmp	r3, #0
 801db82:	dd0e      	ble.n	801dba2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801db84:	1408      	asrs	r0, r1, #16
 801db86:	d405      	bmi.n	801db94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801db88:	42b8      	cmp	r0, r7
 801db8a:	da03      	bge.n	801db94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801db8c:	1410      	asrs	r0, r2, #16
 801db8e:	d401      	bmi.n	801db94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801db90:	42b0      	cmp	r0, r6
 801db92:	db07      	blt.n	801dba4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801db94:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801db96:	3b01      	subs	r3, #1
 801db98:	4401      	add	r1, r0
 801db9a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801db9c:	3402      	adds	r4, #2
 801db9e:	4402      	add	r2, r0
 801dba0:	e7ee      	b.n	801db80 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801dba2:	d017      	beq.n	801dbd4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801dba4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801dba6:	1e58      	subs	r0, r3, #1
 801dba8:	fb05 1500 	mla	r5, r5, r0, r1
 801dbac:	142d      	asrs	r5, r5, #16
 801dbae:	d409      	bmi.n	801dbc4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dbb0:	42bd      	cmp	r5, r7
 801dbb2:	da07      	bge.n	801dbc4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dbb4:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801dbb6:	fb05 2000 	mla	r0, r5, r0, r2
 801dbba:	1400      	asrs	r0, r0, #16
 801dbbc:	d402      	bmi.n	801dbc4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dbbe:	42b0      	cmp	r0, r6
 801dbc0:	f2c0 80ba 	blt.w	801dd38 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801dbc4:	2600      	movs	r6, #0
 801dbc6:	1998      	adds	r0, r3, r6
 801dbc8:	2800      	cmp	r0, #0
 801dbca:	dc3e      	bgt.n	801dc4a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801dbcc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dbd0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dbd4:	f1bb 0f00 	cmp.w	fp, #0
 801dbd8:	f340 8117 	ble.w	801de0a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801dbdc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dbe0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dbe4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dbe8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dbec:	eeb0 6a62 	vmov.f32	s12, s5
 801dbf0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dbf4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dbf8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dbfc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dc00:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dc04:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801dc08:	eeb0 6a43 	vmov.f32	s12, s6
 801dc0c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dc10:	ee12 2a90 	vmov	r2, s5
 801dc14:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dc18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc1a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dc1e:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc22:	ee13 2a10 	vmov	r2, s6
 801dc26:	9311      	str	r3, [sp, #68]	@ 0x44
 801dc28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc2a:	f1bb 0b01 	subs.w	fp, fp, #1
 801dc2e:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc32:	9a03      	ldr	r2, [sp, #12]
 801dc34:	9312      	str	r3, [sp, #72]	@ 0x48
 801dc36:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801dc3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc3c:	eeb0 3a67 	vmov.f32	s6, s15
 801dc40:	bf08      	it	eq
 801dc42:	4613      	moveq	r3, r2
 801dc44:	eef0 2a47 	vmov.f32	s5, s14
 801dc48:	e789      	b.n	801db5e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801dc4a:	140f      	asrs	r7, r1, #16
 801dc4c:	d424      	bmi.n	801dc98 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801dc4e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801dc52:	42bd      	cmp	r5, r7
 801dc54:	dd20      	ble.n	801dc98 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801dc56:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801dc5a:	d41d      	bmi.n	801dc98 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801dc5c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801dc60:	4560      	cmp	r0, ip
 801dc62:	dd19      	ble.n	801dc98 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801dc64:	b22d      	sxth	r5, r5
 801dc66:	fb0c 7505 	mla	r5, ip, r5, r7
 801dc6a:	9801      	ldr	r0, [sp, #4]
 801dc6c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801dc70:	0e07      	lsrs	r7, r0, #24
 801dc72:	2fff      	cmp	r7, #255	@ 0xff
 801dc74:	d116      	bne.n	801dca4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801dc76:	f06f 0501 	mvn.w	r5, #1
 801dc7a:	fb05 f706 	mul.w	r7, r5, r6
 801dc7e:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801dc82:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801dc86:	0945      	lsrs	r5, r0, #5
 801dc88:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801dc8c:	ea4c 0505 	orr.w	r5, ip, r5
 801dc90:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801dc94:	4305      	orrs	r5, r0
 801dc96:	53e5      	strh	r5, [r4, r7]
 801dc98:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801dc9a:	3e01      	subs	r6, #1
 801dc9c:	4401      	add	r1, r0
 801dc9e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801dca0:	4402      	add	r2, r0
 801dca2:	e790      	b.n	801dbc6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801dca4:	b2fd      	uxtb	r5, r7
 801dca6:	2f00      	cmp	r7, #0
 801dca8:	d0f6      	beq.n	801dc98 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801dcaa:	f06f 0701 	mvn.w	r7, #1
 801dcae:	fa1f f985 	uxth.w	r9, r5
 801dcb2:	43ed      	mvns	r5, r5
 801dcb4:	4377      	muls	r7, r6
 801dcb6:	f834 e007 	ldrh.w	lr, [r4, r7]
 801dcba:	9702      	str	r7, [sp, #8]
 801dcbc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801dcc0:	fb17 f709 	smulbb	r7, r7, r9
 801dcc4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801dcc8:	b2c0      	uxtb	r0, r0
 801dcca:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801dcce:	fb10 f009 	smulbb	r0, r0, r9
 801dcd2:	b2ed      	uxtb	r5, r5
 801dcd4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801dcd8:	fb0c 7c05 	mla	ip, ip, r5, r7
 801dcdc:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801dce0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801dce4:	fb1a fa09 	smulbb	sl, sl, r9
 801dce8:	fa5f fe8e 	uxtb.w	lr, lr
 801dcec:	fb0e 0005 	mla	r0, lr, r5, r0
 801dcf0:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801dcf4:	fb07 a705 	mla	r7, r7, r5, sl
 801dcf8:	b280      	uxth	r0, r0
 801dcfa:	fa1f fc8c 	uxth.w	ip, ip
 801dcfe:	f100 0a01 	add.w	sl, r0, #1
 801dd02:	f10c 0501 	add.w	r5, ip, #1
 801dd06:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801dd0a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801dd0e:	b2bf      	uxth	r7, r7
 801dd10:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801dd14:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801dd18:	ea4a 0c0c 	orr.w	ip, sl, ip
 801dd1c:	f107 0a01 	add.w	sl, r7, #1
 801dd20:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801dd24:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801dd28:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801dd2c:	9802      	ldr	r0, [sp, #8]
 801dd2e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801dd32:	f824 c000 	strh.w	ip, [r4, r0]
 801dd36:	e7af      	b.n	801dc98 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801dd38:	f04f 0e00 	mov.w	lr, #0
 801dd3c:	eba3 000e 	sub.w	r0, r3, lr
 801dd40:	2800      	cmp	r0, #0
 801dd42:	f77f af43 	ble.w	801dbcc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801dd46:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801dd4a:	140d      	asrs	r5, r1, #16
 801dd4c:	1410      	asrs	r0, r2, #16
 801dd4e:	fb06 5000 	mla	r0, r6, r0, r5
 801dd52:	9d01      	ldr	r5, [sp, #4]
 801dd54:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801dd58:	0e2e      	lsrs	r6, r5, #24
 801dd5a:	2eff      	cmp	r6, #255	@ 0xff
 801dd5c:	d112      	bne.n	801dd84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801dd5e:	482c      	ldr	r0, [pc, #176]	@ (801de10 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801dd60:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801dd64:	0968      	lsrs	r0, r5, #5
 801dd66:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801dd6a:	4330      	orrs	r0, r6
 801dd6c:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801dd70:	4328      	orrs	r0, r5
 801dd72:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801dd76:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801dd78:	f10e 0e01 	add.w	lr, lr, #1
 801dd7c:	4401      	add	r1, r0
 801dd7e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801dd80:	4402      	add	r2, r0
 801dd82:	e7db      	b.n	801dd3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801dd84:	b2f0      	uxtb	r0, r6
 801dd86:	2e00      	cmp	r6, #0
 801dd88:	d0f5      	beq.n	801dd76 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801dd8a:	fa1f f980 	uxth.w	r9, r0
 801dd8e:	43c0      	mvns	r0, r0
 801dd90:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801dd94:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801dd98:	fb16 f609 	smulbb	r6, r6, r9
 801dd9c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801dda0:	b2ed      	uxtb	r5, r5
 801dda2:	ea4f 272c 	mov.w	r7, ip, asr #8
 801dda6:	fb15 f509 	smulbb	r5, r5, r9
 801ddaa:	b2c0      	uxtb	r0, r0
 801ddac:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ddb0:	fb07 6700 	mla	r7, r7, r0, r6
 801ddb4:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ddb8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ddbc:	fb1a fa09 	smulbb	sl, sl, r9
 801ddc0:	fa5f fc8c 	uxtb.w	ip, ip
 801ddc4:	fb0c 5500 	mla	r5, ip, r0, r5
 801ddc8:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801ddcc:	fb06 a600 	mla	r6, r6, r0, sl
 801ddd0:	b2bf      	uxth	r7, r7
 801ddd2:	b2ad      	uxth	r5, r5
 801ddd4:	1c78      	adds	r0, r7, #1
 801ddd6:	f105 0a01 	add.w	sl, r5, #1
 801ddda:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ddde:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801dde2:	b2b6      	uxth	r6, r6
 801dde4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801dde8:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801ddec:	ea4a 0707 	orr.w	r7, sl, r7
 801ddf0:	f106 0a01 	add.w	sl, r6, #1
 801ddf4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ddf8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ddfc:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801de00:	ea47 070a 	orr.w	r7, r7, sl
 801de04:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801de08:	e7b5      	b.n	801dd76 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801de0a:	b005      	add	sp, #20
 801de0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de10:	fffff800 	.word	0xfffff800

0801de14 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801de14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801de18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de1c:	b087      	sub	sp, #28
 801de1e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801de20:	468b      	mov	fp, r1
 801de22:	9203      	str	r2, [sp, #12]
 801de24:	6841      	ldr	r1, [r0, #4]
 801de26:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801de2a:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801de2e:	9204      	str	r2, [sp, #16]
 801de30:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801de34:	fb01 2404 	mla	r4, r1, r4, r2
 801de38:	6802      	ldr	r2, [r0, #0]
 801de3a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801de3e:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801de42:	3201      	adds	r2, #1
 801de44:	f022 0201 	bic.w	r2, r2, #1
 801de48:	9200      	str	r2, [sp, #0]
 801de4a:	f8d9 2000 	ldr.w	r2, [r9]
 801de4e:	9201      	str	r2, [sp, #4]
 801de50:	f1bb 0f00 	cmp.w	fp, #0
 801de54:	dc03      	bgt.n	801de5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801de56:	9a03      	ldr	r2, [sp, #12]
 801de58:	2a00      	cmp	r2, #0
 801de5a:	f340 816a 	ble.w	801e132 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801de5e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801de60:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801de64:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801de68:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801de6a:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801de6e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801de72:	2b00      	cmp	r3, #0
 801de74:	dd0e      	ble.n	801de94 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801de76:	1402      	asrs	r2, r0, #16
 801de78:	d405      	bmi.n	801de86 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801de7a:	42ba      	cmp	r2, r7
 801de7c:	da03      	bge.n	801de86 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801de7e:	140a      	asrs	r2, r1, #16
 801de80:	d401      	bmi.n	801de86 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801de82:	42b2      	cmp	r2, r6
 801de84:	db07      	blt.n	801de96 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801de86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801de88:	3b01      	subs	r3, #1
 801de8a:	4410      	add	r0, r2
 801de8c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801de8e:	3402      	adds	r4, #2
 801de90:	4411      	add	r1, r2
 801de92:	e7ee      	b.n	801de72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801de94:	d017      	beq.n	801dec6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801de96:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801de98:	1e5a      	subs	r2, r3, #1
 801de9a:	fb05 0502 	mla	r5, r5, r2, r0
 801de9e:	142d      	asrs	r5, r5, #16
 801dea0:	d409      	bmi.n	801deb6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801dea2:	42bd      	cmp	r5, r7
 801dea4:	da07      	bge.n	801deb6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801dea6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801dea8:	fb05 1202 	mla	r2, r5, r2, r1
 801deac:	1412      	asrs	r2, r2, #16
 801deae:	d402      	bmi.n	801deb6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801deb0:	42b2      	cmp	r2, r6
 801deb2:	f2c0 80c8 	blt.w	801e046 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801deb6:	2700      	movs	r7, #0
 801deb8:	19da      	adds	r2, r3, r7
 801deba:	2a00      	cmp	r2, #0
 801debc:	dc3e      	bgt.n	801df3c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801debe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dec2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dec6:	f1bb 0f00 	cmp.w	fp, #0
 801deca:	f340 8132 	ble.w	801e132 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801dece:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ded2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ded6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801deda:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dede:	eeb0 6a62 	vmov.f32	s12, s5
 801dee2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dee6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801deea:	ee61 7a27 	vmul.f32	s15, s2, s15
 801deee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801def2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801def6:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801defa:	eeb0 6a43 	vmov.f32	s12, s6
 801defe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801df02:	ee12 2a90 	vmov	r2, s5
 801df06:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801df0a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801df0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801df10:	fb92 f3f3 	sdiv	r3, r2, r3
 801df14:	ee13 2a10 	vmov	r2, s6
 801df18:	9313      	str	r3, [sp, #76]	@ 0x4c
 801df1a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801df1c:	f1bb 0b01 	subs.w	fp, fp, #1
 801df20:	fb92 f3f3 	sdiv	r3, r2, r3
 801df24:	9a03      	ldr	r2, [sp, #12]
 801df26:	9314      	str	r3, [sp, #80]	@ 0x50
 801df28:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801df2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801df2e:	eeb0 3a67 	vmov.f32	s6, s15
 801df32:	bf08      	it	eq
 801df34:	4613      	moveq	r3, r2
 801df36:	eef0 2a47 	vmov.f32	s5, s14
 801df3a:	e789      	b.n	801de50 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801df3c:	1405      	asrs	r5, r0, #16
 801df3e:	d436      	bmi.n	801dfae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801df40:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801df44:	42aa      	cmp	r2, r5
 801df46:	dd32      	ble.n	801dfae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801df48:	140e      	asrs	r6, r1, #16
 801df4a:	d430      	bmi.n	801dfae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801df4c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801df50:	42b2      	cmp	r2, r6
 801df52:	dd2c      	ble.n	801dfae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801df54:	9a00      	ldr	r2, [sp, #0]
 801df56:	fb06 5502 	mla	r5, r6, r2, r5
 801df5a:	9e01      	ldr	r6, [sp, #4]
 801df5c:	086a      	lsrs	r2, r5, #1
 801df5e:	5cb2      	ldrb	r2, [r6, r2]
 801df60:	07ee      	lsls	r6, r5, #31
 801df62:	bf54      	ite	pl
 801df64:	f002 020f 	andpl.w	r2, r2, #15
 801df68:	1112      	asrmi	r2, r2, #4
 801df6a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801df6e:	b2d2      	uxtb	r2, r2
 801df70:	b1ea      	cbz	r2, 801dfae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801df72:	9d04      	ldr	r5, [sp, #16]
 801df74:	436a      	muls	r2, r5
 801df76:	1c55      	adds	r5, r2, #1
 801df78:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801df7c:	4d6e      	ldr	r5, [pc, #440]	@ (801e138 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801df7e:	1212      	asrs	r2, r2, #8
 801df80:	682d      	ldr	r5, [r5, #0]
 801df82:	2aff      	cmp	r2, #255	@ 0xff
 801df84:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801df88:	9605      	str	r6, [sp, #20]
 801df8a:	d116      	bne.n	801dfba <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801df8c:	f06f 0201 	mvn.w	r2, #1
 801df90:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801df94:	fb02 fc07 	mul.w	ip, r2, r7
 801df98:	096a      	lsrs	r2, r5, #5
 801df9a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801df9e:	f026 0607 	bic.w	r6, r6, #7
 801dfa2:	4316      	orrs	r6, r2
 801dfa4:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801dfa8:	432e      	orrs	r6, r5
 801dfaa:	f824 600c 	strh.w	r6, [r4, ip]
 801dfae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dfb0:	3f01      	subs	r7, #1
 801dfb2:	4410      	add	r0, r2
 801dfb4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801dfb6:	4411      	add	r1, r2
 801dfb8:	e77e      	b.n	801deb8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801dfba:	f06f 0601 	mvn.w	r6, #1
 801dfbe:	fa1f fa82 	uxth.w	sl, r2
 801dfc2:	43d2      	mvns	r2, r2
 801dfc4:	437e      	muls	r6, r7
 801dfc6:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801dfca:	f834 8006 	ldrh.w	r8, [r4, r6]
 801dfce:	fb1c fc0a 	smulbb	ip, ip, sl
 801dfd2:	b2ed      	uxtb	r5, r5
 801dfd4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801dfd8:	fb15 f50a 	smulbb	r5, r5, sl
 801dfdc:	b2d2      	uxtb	r2, r2
 801dfde:	9602      	str	r6, [sp, #8]
 801dfe0:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801dfe4:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801dfe8:	fb0e ce02 	mla	lr, lr, r2, ip
 801dfec:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801dff0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801dff4:	fb16 f60a 	smulbb	r6, r6, sl
 801dff8:	fa5f f888 	uxtb.w	r8, r8
 801dffc:	fb08 5502 	mla	r5, r8, r2, r5
 801e000:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801e004:	fb0c 6c02 	mla	ip, ip, r2, r6
 801e008:	fa1f fe8e 	uxth.w	lr, lr
 801e00c:	b2ad      	uxth	r5, r5
 801e00e:	f10e 0201 	add.w	r2, lr, #1
 801e012:	1c6e      	adds	r6, r5, #1
 801e014:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801e018:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801e01c:	fa1f fc8c 	uxth.w	ip, ip
 801e020:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801e024:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801e028:	ea46 0e0e 	orr.w	lr, r6, lr
 801e02c:	f10c 0601 	add.w	r6, ip, #1
 801e030:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801e034:	0976      	lsrs	r6, r6, #5
 801e036:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801e03a:	9a02      	ldr	r2, [sp, #8]
 801e03c:	ea4e 0e06 	orr.w	lr, lr, r6
 801e040:	f824 e002 	strh.w	lr, [r4, r2]
 801e044:	e7b3      	b.n	801dfae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801e046:	f04f 0800 	mov.w	r8, #0
 801e04a:	eba3 0208 	sub.w	r2, r3, r8
 801e04e:	2a00      	cmp	r2, #0
 801e050:	f77f af35 	ble.w	801debe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801e054:	9e00      	ldr	r6, [sp, #0]
 801e056:	1402      	asrs	r2, r0, #16
 801e058:	140d      	asrs	r5, r1, #16
 801e05a:	fb06 2505 	mla	r5, r6, r5, r2
 801e05e:	9e01      	ldr	r6, [sp, #4]
 801e060:	086a      	lsrs	r2, r5, #1
 801e062:	5cb2      	ldrb	r2, [r6, r2]
 801e064:	07ed      	lsls	r5, r5, #31
 801e066:	bf54      	ite	pl
 801e068:	f002 020f 	andpl.w	r2, r2, #15
 801e06c:	1112      	asrmi	r2, r2, #4
 801e06e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e072:	b2d2      	uxtb	r2, r2
 801e074:	b1c2      	cbz	r2, 801e0a8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e076:	9d04      	ldr	r5, [sp, #16]
 801e078:	436a      	muls	r2, r5
 801e07a:	1c55      	adds	r5, r2, #1
 801e07c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801e080:	4d2d      	ldr	r5, [pc, #180]	@ (801e138 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801e082:	1212      	asrs	r2, r2, #8
 801e084:	682e      	ldr	r6, [r5, #0]
 801e086:	2aff      	cmp	r2, #255	@ 0xff
 801e088:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801e08c:	d113      	bne.n	801e0b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e08e:	0972      	lsrs	r2, r6, #5
 801e090:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 801e094:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801e098:	f025 0507 	bic.w	r5, r5, #7
 801e09c:	4315      	orrs	r5, r2
 801e09e:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801e0a2:	4335      	orrs	r5, r6
 801e0a4:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801e0a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e0aa:	f108 0801 	add.w	r8, r8, #1
 801e0ae:	4410      	add	r0, r2
 801e0b0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e0b2:	4411      	add	r1, r2
 801e0b4:	e7c9      	b.n	801e04a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801e0b6:	fa1f fa82 	uxth.w	sl, r2
 801e0ba:	43d2      	mvns	r2, r2
 801e0bc:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801e0c0:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801e0c4:	fb17 f70a 	smulbb	r7, r7, sl
 801e0c8:	b2f6      	uxtb	r6, r6
 801e0ca:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e0ce:	fb16 f60a 	smulbb	r6, r6, sl
 801e0d2:	b2d2      	uxtb	r2, r2
 801e0d4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e0d8:	fb0c 7c02 	mla	ip, ip, r2, r7
 801e0dc:	b2ed      	uxtb	r5, r5
 801e0de:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801e0e2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e0e6:	fb15 f50a 	smulbb	r5, r5, sl
 801e0ea:	fa5f fe8e 	uxtb.w	lr, lr
 801e0ee:	fb0e 6602 	mla	r6, lr, r2, r6
 801e0f2:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e0f6:	fb07 5702 	mla	r7, r7, r2, r5
 801e0fa:	fa1f fc8c 	uxth.w	ip, ip
 801e0fe:	b2b6      	uxth	r6, r6
 801e100:	f10c 0201 	add.w	r2, ip, #1
 801e104:	1c75      	adds	r5, r6, #1
 801e106:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801e10a:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801e10e:	b2bf      	uxth	r7, r7
 801e110:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e114:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e118:	ea45 0c0c 	orr.w	ip, r5, ip
 801e11c:	1c7d      	adds	r5, r7, #1
 801e11e:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801e122:	096d      	lsrs	r5, r5, #5
 801e124:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801e128:	ea4c 0c05 	orr.w	ip, ip, r5
 801e12c:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801e130:	e7ba      	b.n	801e0a8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e132:	b007      	add	sp, #28
 801e134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e138:	2005b938 	.word	0x2005b938

0801e13c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e13c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e144:	b087      	sub	sp, #28
 801e146:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801e148:	9101      	str	r1, [sp, #4]
 801e14a:	6841      	ldr	r1, [r0, #4]
 801e14c:	9205      	str	r2, [sp, #20]
 801e14e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801e152:	fb01 2404 	mla	r4, r1, r4, r2
 801e156:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 801e15a:	6802      	ldr	r2, [r0, #0]
 801e15c:	f8df 82f0 	ldr.w	r8, [pc, #752]	@ 801e450 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801e160:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e164:	f8db 2008 	ldr.w	r2, [fp, #8]
 801e168:	3201      	adds	r2, #1
 801e16a:	f022 0201 	bic.w	r2, r2, #1
 801e16e:	9202      	str	r2, [sp, #8]
 801e170:	f8db 2000 	ldr.w	r2, [fp]
 801e174:	9203      	str	r2, [sp, #12]
 801e176:	9a01      	ldr	r2, [sp, #4]
 801e178:	2a00      	cmp	r2, #0
 801e17a:	dc03      	bgt.n	801e184 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e17c:	9a05      	ldr	r2, [sp, #20]
 801e17e:	2a00      	cmp	r2, #0
 801e180:	f340 8162 	ble.w	801e448 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801e184:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e186:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801e18a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e18e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e190:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801e194:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e198:	2b00      	cmp	r3, #0
 801e19a:	dd0e      	ble.n	801e1ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e19c:	1402      	asrs	r2, r0, #16
 801e19e:	d405      	bmi.n	801e1ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e1a0:	42ba      	cmp	r2, r7
 801e1a2:	da03      	bge.n	801e1ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e1a4:	140a      	asrs	r2, r1, #16
 801e1a6:	d401      	bmi.n	801e1ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e1a8:	42b2      	cmp	r2, r6
 801e1aa:	db07      	blt.n	801e1bc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e1ac:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e1ae:	3b01      	subs	r3, #1
 801e1b0:	4410      	add	r0, r2
 801e1b2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e1b4:	3402      	adds	r4, #2
 801e1b6:	4411      	add	r1, r2
 801e1b8:	e7ee      	b.n	801e198 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e1ba:	d017      	beq.n	801e1ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801e1bc:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801e1be:	1e5a      	subs	r2, r3, #1
 801e1c0:	fb05 0502 	mla	r5, r5, r2, r0
 801e1c4:	142d      	asrs	r5, r5, #16
 801e1c6:	d409      	bmi.n	801e1dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e1c8:	42bd      	cmp	r5, r7
 801e1ca:	da07      	bge.n	801e1dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e1cc:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801e1ce:	fb05 1202 	mla	r2, r5, r2, r1
 801e1d2:	1412      	asrs	r2, r2, #16
 801e1d4:	d402      	bmi.n	801e1dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e1d6:	42b2      	cmp	r2, r6
 801e1d8:	f2c0 80c3 	blt.w	801e362 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801e1dc:	2500      	movs	r5, #0
 801e1de:	195a      	adds	r2, r3, r5
 801e1e0:	2a00      	cmp	r2, #0
 801e1e2:	dc3f      	bgt.n	801e264 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801e1e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e1e8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e1ec:	9b01      	ldr	r3, [sp, #4]
 801e1ee:	2b00      	cmp	r3, #0
 801e1f0:	f340 812a 	ble.w	801e448 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801e1f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e1f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e1fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e200:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e204:	eeb0 6a62 	vmov.f32	s12, s5
 801e208:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e20c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e210:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e214:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e218:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e21c:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801e220:	eeb0 6a43 	vmov.f32	s12, s6
 801e224:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e228:	ee12 2a90 	vmov	r2, s5
 801e22c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e230:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e232:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e236:	fb92 f3f3 	sdiv	r3, r2, r3
 801e23a:	ee13 2a10 	vmov	r2, s6
 801e23e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e240:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e242:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801e246:	fb92 f3f3 	sdiv	r3, r2, r3
 801e24a:	9314      	str	r3, [sp, #80]	@ 0x50
 801e24c:	9b01      	ldr	r3, [sp, #4]
 801e24e:	9a05      	ldr	r2, [sp, #20]
 801e250:	3b01      	subs	r3, #1
 801e252:	9301      	str	r3, [sp, #4]
 801e254:	eeb0 3a67 	vmov.f32	s6, s15
 801e258:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e25a:	eef0 2a47 	vmov.f32	s5, s14
 801e25e:	bf08      	it	eq
 801e260:	4613      	moveq	r3, r2
 801e262:	e788      	b.n	801e176 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e264:	1406      	asrs	r6, r0, #16
 801e266:	d42c      	bmi.n	801e2c2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e268:	f8db 2008 	ldr.w	r2, [fp, #8]
 801e26c:	42b2      	cmp	r2, r6
 801e26e:	dd28      	ble.n	801e2c2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e270:	140f      	asrs	r7, r1, #16
 801e272:	d426      	bmi.n	801e2c2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e274:	f8db 200c 	ldr.w	r2, [fp, #12]
 801e278:	42ba      	cmp	r2, r7
 801e27a:	dd22      	ble.n	801e2c2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e27c:	9a02      	ldr	r2, [sp, #8]
 801e27e:	fb07 6602 	mla	r6, r7, r2, r6
 801e282:	9f03      	ldr	r7, [sp, #12]
 801e284:	0872      	lsrs	r2, r6, #1
 801e286:	5cba      	ldrb	r2, [r7, r2]
 801e288:	07f6      	lsls	r6, r6, #31
 801e28a:	bf54      	ite	pl
 801e28c:	f002 020f 	andpl.w	r2, r2, #15
 801e290:	1112      	asrmi	r2, r2, #4
 801e292:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e296:	b2d2      	uxtb	r2, r2
 801e298:	2aff      	cmp	r2, #255	@ 0xff
 801e29a:	d118      	bne.n	801e2ce <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801e29c:	f06f 0601 	mvn.w	r6, #1
 801e2a0:	f8d8 2000 	ldr.w	r2, [r8]
 801e2a4:	fb06 f705 	mul.w	r7, r6, r5
 801e2a8:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 801e2ac:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801e2b0:	0956      	lsrs	r6, r2, #5
 801e2b2:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801e2b6:	ea4c 0606 	orr.w	r6, ip, r6
 801e2ba:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e2be:	4316      	orrs	r6, r2
 801e2c0:	53e6      	strh	r6, [r4, r7]
 801e2c2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e2c4:	3d01      	subs	r5, #1
 801e2c6:	4410      	add	r0, r2
 801e2c8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e2ca:	4411      	add	r1, r2
 801e2cc:	e787      	b.n	801e1de <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801e2ce:	2a00      	cmp	r2, #0
 801e2d0:	d0f7      	beq.n	801e2c2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e2d2:	f06f 0601 	mvn.w	r6, #1
 801e2d6:	fa1f f982 	uxth.w	r9, r2
 801e2da:	43d2      	mvns	r2, r2
 801e2dc:	436e      	muls	r6, r5
 801e2de:	f8d8 c000 	ldr.w	ip, [r8]
 801e2e2:	f834 e006 	ldrh.w	lr, [r4, r6]
 801e2e6:	9604      	str	r6, [sp, #16]
 801e2e8:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801e2ec:	fb16 f609 	smulbb	r6, r6, r9
 801e2f0:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801e2f4:	fa5f fc8c 	uxtb.w	ip, ip
 801e2f8:	ea4f 272e 	mov.w	r7, lr, asr #8
 801e2fc:	fb1c fc09 	smulbb	ip, ip, r9
 801e300:	b2d2      	uxtb	r2, r2
 801e302:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e306:	fb07 6702 	mla	r7, r7, r2, r6
 801e30a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e30e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e312:	fb1a fa09 	smulbb	sl, sl, r9
 801e316:	fa5f fe8e 	uxtb.w	lr, lr
 801e31a:	fb0e cc02 	mla	ip, lr, r2, ip
 801e31e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e322:	fb06 a602 	mla	r6, r6, r2, sl
 801e326:	b2bf      	uxth	r7, r7
 801e328:	fa1f fc8c 	uxth.w	ip, ip
 801e32c:	1c7a      	adds	r2, r7, #1
 801e32e:	f10c 0a01 	add.w	sl, ip, #1
 801e332:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e336:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801e33a:	b2b6      	uxth	r6, r6
 801e33c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e340:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801e344:	ea4a 0707 	orr.w	r7, sl, r7
 801e348:	f106 0a01 	add.w	sl, r6, #1
 801e34c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e350:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e354:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e358:	9a04      	ldr	r2, [sp, #16]
 801e35a:	ea47 070a 	orr.w	r7, r7, sl
 801e35e:	52a7      	strh	r7, [r4, r2]
 801e360:	e7af      	b.n	801e2c2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e362:	f04f 0e00 	mov.w	lr, #0
 801e366:	eba3 020e 	sub.w	r2, r3, lr
 801e36a:	2a00      	cmp	r2, #0
 801e36c:	f77f af3a 	ble.w	801e1e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801e370:	9e02      	ldr	r6, [sp, #8]
 801e372:	1402      	asrs	r2, r0, #16
 801e374:	140d      	asrs	r5, r1, #16
 801e376:	fb06 2505 	mla	r5, r6, r5, r2
 801e37a:	9e03      	ldr	r6, [sp, #12]
 801e37c:	086a      	lsrs	r2, r5, #1
 801e37e:	5cb2      	ldrb	r2, [r6, r2]
 801e380:	07ed      	lsls	r5, r5, #31
 801e382:	bf54      	ite	pl
 801e384:	f002 020f 	andpl.w	r2, r2, #15
 801e388:	1112      	asrmi	r2, r2, #4
 801e38a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e38e:	b2d2      	uxtb	r2, r2
 801e390:	2aff      	cmp	r2, #255	@ 0xff
 801e392:	d115      	bne.n	801e3c0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801e394:	f8d8 5000 	ldr.w	r5, [r8]
 801e398:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 801e39c:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801e3a0:	096a      	lsrs	r2, r5, #5
 801e3a2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801e3a6:	4332      	orrs	r2, r6
 801e3a8:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801e3ac:	432a      	orrs	r2, r5
 801e3ae:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801e3b2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e3b4:	f10e 0e01 	add.w	lr, lr, #1
 801e3b8:	4410      	add	r0, r2
 801e3ba:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e3bc:	4411      	add	r1, r2
 801e3be:	e7d2      	b.n	801e366 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801e3c0:	2a00      	cmp	r2, #0
 801e3c2:	d0f6      	beq.n	801e3b2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801e3c4:	fa1f f982 	uxth.w	r9, r2
 801e3c8:	43d2      	mvns	r2, r2
 801e3ca:	f8d8 7000 	ldr.w	r7, [r8]
 801e3ce:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801e3d2:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801e3d6:	fb15 f509 	smulbb	r5, r5, r9
 801e3da:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801e3de:	b2ff      	uxtb	r7, r7
 801e3e0:	ea4f 262c 	mov.w	r6, ip, asr #8
 801e3e4:	fb17 f709 	smulbb	r7, r7, r9
 801e3e8:	b2d2      	uxtb	r2, r2
 801e3ea:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801e3ee:	fb06 5602 	mla	r6, r6, r2, r5
 801e3f2:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801e3f6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e3fa:	fb1a fa09 	smulbb	sl, sl, r9
 801e3fe:	fa5f fc8c 	uxtb.w	ip, ip
 801e402:	fb0c 7702 	mla	r7, ip, r2, r7
 801e406:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801e40a:	fb05 a502 	mla	r5, r5, r2, sl
 801e40e:	b2b6      	uxth	r6, r6
 801e410:	b2bf      	uxth	r7, r7
 801e412:	1c72      	adds	r2, r6, #1
 801e414:	f107 0a01 	add.w	sl, r7, #1
 801e418:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801e41c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801e420:	b2ad      	uxth	r5, r5
 801e422:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e426:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801e42a:	ea4a 0606 	orr.w	r6, sl, r6
 801e42e:	f105 0a01 	add.w	sl, r5, #1
 801e432:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e436:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e43a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e43e:	ea46 060a 	orr.w	r6, r6, sl
 801e442:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801e446:	e7b4      	b.n	801e3b2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801e448:	b007      	add	sp, #28
 801e44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e44e:	bf00      	nop
 801e450:	2005b938 	.word	0x2005b938

0801e454 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID1Ev>:
 801e454:	4770      	bx	lr

0801e456 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 801e456:	4770      	bx	lr

0801e458 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 801e458:	4770      	bx	lr

0801e45a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 801e45a:	4770      	bx	lr

0801e45c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801e45c:	4770      	bx	lr

0801e45e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801e45e:	4770      	bx	lr

0801e460 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801e460:	4770      	bx	lr

0801e462 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801e462:	4770      	bx	lr

0801e464 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e464:	4770      	bx	lr

0801e466 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e466:	4770      	bx	lr

0801e468 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e468:	4770      	bx	lr

0801e46a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e46a:	4770      	bx	lr

0801e46c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e46c:	4770      	bx	lr

0801e46e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801e46e:	4770      	bx	lr

0801e470 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e470:	4770      	bx	lr

0801e472 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e472:	4770      	bx	lr

0801e474 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e474:	4770      	bx	lr

0801e476 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801e476:	4770      	bx	lr

0801e478 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e478:	4770      	bx	lr

0801e47a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e47a:	4770      	bx	lr

0801e47c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e47c:	4770      	bx	lr

0801e47e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e47e:	4770      	bx	lr

0801e480 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e480:	4770      	bx	lr

0801e482 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e482:	4770      	bx	lr

0801e484 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e484:	4770      	bx	lr

0801e486 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801e486:	4770      	bx	lr

0801e488 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e488:	4770      	bx	lr

0801e48a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801e48a:	4770      	bx	lr

0801e48c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e48c:	4770      	bx	lr

0801e48e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801e48e:	4770      	bx	lr

0801e490 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e490:	4770      	bx	lr

0801e492 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801e492:	4770      	bx	lr

0801e494 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801e494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e498:	b088      	sub	sp, #32
 801e49a:	ac08      	add	r4, sp, #32
 801e49c:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801e4a0:	4606      	mov	r6, r0
 801e4a2:	4620      	mov	r0, r4
 801e4a4:	4688      	mov	r8, r1
 801e4a6:	4691      	mov	r9, r2
 801e4a8:	f7fd fc32 	bl	801bd10 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e4ac:	6833      	ldr	r3, [r6, #0]
 801e4ae:	4605      	mov	r5, r0
 801e4b0:	4620      	mov	r0, r4
 801e4b2:	699f      	ldr	r7, [r3, #24]
 801e4b4:	f7fd fb3a 	bl	801bb2c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e4b8:	4682      	mov	sl, r0
 801e4ba:	4620      	mov	r0, r4
 801e4bc:	f7fd fb6a 	bl	801bb94 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e4c0:	9500      	str	r5, [sp, #0]
 801e4c2:	e9cd a001 	strd	sl, r0, [sp, #4]
 801e4c6:	464b      	mov	r3, r9
 801e4c8:	a806      	add	r0, sp, #24
 801e4ca:	4642      	mov	r2, r8
 801e4cc:	4631      	mov	r1, r6
 801e4ce:	47b8      	blx	r7
 801e4d0:	4628      	mov	r0, r5
 801e4d2:	b008      	add	sp, #32
 801e4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801e4d8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801e4d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e4dc:	2300      	movs	r3, #0
 801e4de:	9300      	str	r3, [sp, #0]
 801e4e0:	4b3d      	ldr	r3, [pc, #244]	@ (801e5d8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801e4e2:	781b      	ldrb	r3, [r3, #0]
 801e4e4:	2b00      	cmp	r3, #0
 801e4e6:	d137      	bne.n	801e558 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801e4e8:	4a3c      	ldr	r2, [pc, #240]	@ (801e5dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801e4ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 801e4ee:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e4f2:	2b00      	cmp	r3, #0
 801e4f4:	d132      	bne.n	801e55c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801e4f6:	4b3a      	ldr	r3, [pc, #232]	@ (801e5e0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801e4f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e4fc:	6808      	ldr	r0, [r1, #0]
 801e4fe:	6849      	ldr	r1, [r1, #4]
 801e500:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e504:	ac02      	add	r4, sp, #8
 801e506:	ab02      	add	r3, sp, #8
 801e508:	c303      	stmia	r3!, {r0, r1}
 801e50a:	4669      	mov	r1, sp
 801e50c:	4620      	mov	r0, r4
 801e50e:	f7fa f82b 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e512:	4668      	mov	r0, sp
 801e514:	f7fa f800 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e518:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e51c:	f8bd 2000 	ldrh.w	r2, [sp]
 801e520:	4d30      	ldr	r5, [pc, #192]	@ (801e5e4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801e522:	4413      	add	r3, r2
 801e524:	f8ad 3008 	strh.w	r3, [sp, #8]
 801e528:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801e52c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e530:	6828      	ldr	r0, [r5, #0]
 801e532:	4413      	add	r3, r2
 801e534:	f8ad 300a 	strh.w	r3, [sp, #10]
 801e538:	6803      	ldr	r3, [r0, #0]
 801e53a:	462f      	mov	r7, r5
 801e53c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e53e:	4798      	blx	r3
 801e540:	f010 0f01 	tst.w	r0, #1
 801e544:	d00c      	beq.n	801e560 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801e546:	e894 0006 	ldmia.w	r4, {r1, r2}
 801e54a:	6828      	ldr	r0, [r5, #0]
 801e54c:	6803      	ldr	r3, [r0, #0]
 801e54e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e550:	4798      	blx	r3
 801e552:	b004      	add	sp, #16
 801e554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e558:	4a21      	ldr	r2, [pc, #132]	@ (801e5e0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801e55a:	e7c6      	b.n	801e4ea <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801e55c:	4b1f      	ldr	r3, [pc, #124]	@ (801e5dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801e55e:	e7cb      	b.n	801e4f8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801e560:	6838      	ldr	r0, [r7, #0]
 801e562:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801e566:	6803      	ldr	r3, [r0, #0]
 801e568:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801e56c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e56e:	4798      	blx	r3
 801e570:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801e574:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801e578:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801e57c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801e580:	fb16 3602 	smlabb	r6, r6, r2, r3
 801e584:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801e588:	6838      	ldr	r0, [r7, #0]
 801e58a:	6803      	ldr	r3, [r0, #0]
 801e58c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e58e:	4798      	blx	r3
 801e590:	4a12      	ldr	r2, [pc, #72]	@ (801e5dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801e592:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801e596:	4691      	mov	r9, r2
 801e598:	8813      	ldrh	r3, [r2, #0]
 801e59a:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801e59e:	435d      	muls	r5, r3
 801e5a0:	fb03 1404 	mla	r4, r3, r4, r1
 801e5a4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e5a8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801e5ac:	6838      	ldr	r0, [r7, #0]
 801e5ae:	42ac      	cmp	r4, r5
 801e5b0:	6803      	ldr	r3, [r0, #0]
 801e5b2:	d20e      	bcs.n	801e5d2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801e5b4:	f8d3 a038 	ldr.w	sl, [r3, #56]	@ 0x38
 801e5b8:	4632      	mov	r2, r6
 801e5ba:	4643      	mov	r3, r8
 801e5bc:	4621      	mov	r1, r4
 801e5be:	47d0      	blx	sl
 801e5c0:	f8b9 3000 	ldrh.w	r3, [r9]
 801e5c4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e5c8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801e5cc:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801e5d0:	e7ec      	b.n	801e5ac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801e5d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e5d4:	4798      	blx	r3
 801e5d6:	e7bc      	b.n	801e552 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801e5d8:	2005b920 	.word	0x2005b920
 801e5dc:	2005b922 	.word	0x2005b922
 801e5e0:	2005b924 	.word	0x2005b924
 801e5e4:	2005b928 	.word	0x2005b928

0801e5e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801e5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5ec:	b08b      	sub	sp, #44	@ 0x2c
 801e5ee:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 801e5f2:	460f      	mov	r7, r1
 801e5f4:	4616      	mov	r6, r2
 801e5f6:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 801e5fa:	f1bb 0f00 	cmp.w	fp, #0
 801e5fe:	d04a      	beq.n	801e696 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801e600:	6810      	ldr	r0, [r2, #0]
 801e602:	6851      	ldr	r1, [r2, #4]
 801e604:	ad06      	add	r5, sp, #24
 801e606:	c503      	stmia	r5!, {r0, r1}
 801e608:	6818      	ldr	r0, [r3, #0]
 801e60a:	6859      	ldr	r1, [r3, #4]
 801e60c:	ad08      	add	r5, sp, #32
 801e60e:	c503      	stmia	r5!, {r0, r1}
 801e610:	a806      	add	r0, sp, #24
 801e612:	f7f9 ff81 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e616:	4631      	mov	r1, r6
 801e618:	a808      	add	r0, sp, #32
 801e61a:	f7f9 ffa5 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e61e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e622:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801e626:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801e62a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801e62e:	fb16 2103 	smlabb	r1, r6, r3, r2
 801e632:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801e636:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e63a:	4f60      	ldr	r7, [pc, #384]	@ (801e7bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801e63c:	440a      	add	r2, r1
 801e63e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e642:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e646:	6838      	ldr	r0, [r7, #0]
 801e648:	4413      	add	r3, r2
 801e64a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801e64e:	6803      	ldr	r3, [r0, #0]
 801e650:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801e654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e656:	4798      	blx	r3
 801e658:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801e65c:	46b9      	mov	r9, r7
 801e65e:	d11d      	bne.n	801e69c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801e660:	b9fc      	cbnz	r4, 801e6a2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801e662:	f010 0f01 	tst.w	r0, #1
 801e666:	d01c      	beq.n	801e6a2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801e668:	2700      	movs	r7, #0
 801e66a:	f8d9 0000 	ldr.w	r0, [r9]
 801e66e:	b2ad      	uxth	r5, r5
 801e670:	6801      	ldr	r1, [r0, #0]
 801e672:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801e676:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801e67a:	f8cd b00c 	str.w	fp, [sp, #12]
 801e67e:	9402      	str	r4, [sp, #8]
 801e680:	fa1f f488 	uxth.w	r4, r8
 801e684:	9501      	str	r5, [sp, #4]
 801e686:	9400      	str	r4, [sp, #0]
 801e688:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
 801e68a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801e68e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e692:	4631      	mov	r1, r6
 801e694:	47a0      	blx	r4
 801e696:	b00b      	add	sp, #44	@ 0x2c
 801e698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e69c:	f010 0f04 	tst.w	r0, #4
 801e6a0:	e7e1      	b.n	801e666 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801e6a2:	f8d9 0000 	ldr.w	r0, [r9]
 801e6a6:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801e6aa:	6803      	ldr	r3, [r0, #0]
 801e6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e6ae:	4798      	blx	r3
 801e6b0:	4b43      	ldr	r3, [pc, #268]	@ (801e7c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801e6b2:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 801e6b6:	881a      	ldrh	r2, [r3, #0]
 801e6b8:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e6bc:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801e6c0:	fb02 1404 	mla	r4, r2, r4, r1
 801e6c4:	469a      	mov	sl, r3
 801e6c6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e6ca:	fb05 f502 	mul.w	r5, r5, r2
 801e6ce:	d059      	beq.n	801e784 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801e6d0:	469e      	mov	lr, r3
 801e6d2:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 801e6d6:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801e6da:	fa1f f28b 	uxth.w	r2, fp
 801e6de:	fa1f f989 	uxth.w	r9, r9
 801e6e2:	42ac      	cmp	r4, r5
 801e6e4:	d264      	bcs.n	801e7b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801e6e6:	eb04 0a07 	add.w	sl, r4, r7
 801e6ea:	4554      	cmp	r4, sl
 801e6ec:	d23d      	bcs.n	801e76a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801e6ee:	8821      	ldrh	r1, [r4, #0]
 801e6f0:	f836 3b02 	ldrh.w	r3, [r6], #2
 801e6f4:	1208      	asrs	r0, r1, #8
 801e6f6:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801e6fa:	fb10 f009 	smulbb	r0, r0, r9
 801e6fe:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801e702:	00c9      	lsls	r1, r1, #3
 801e704:	b2c9      	uxtb	r1, r1
 801e706:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801e70a:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801e70e:	fb11 f109 	smulbb	r1, r1, r9
 801e712:	fb1b fb09 	smulbb	fp, fp, r9
 801e716:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e71a:	fb0c 0c02 	mla	ip, ip, r2, r0
 801e71e:	10d8      	asrs	r0, r3, #3
 801e720:	00db      	lsls	r3, r3, #3
 801e722:	b2db      	uxtb	r3, r3
 801e724:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801e728:	fb03 1302 	mla	r3, r3, r2, r1
 801e72c:	fb00 b002 	mla	r0, r0, r2, fp
 801e730:	fa1f fc8c 	uxth.w	ip, ip
 801e734:	f10c 0b01 	add.w	fp, ip, #1
 801e738:	b29b      	uxth	r3, r3
 801e73a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e73e:	b280      	uxth	r0, r0
 801e740:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 801e744:	f103 0c01 	add.w	ip, r3, #1
 801e748:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801e74c:	1c43      	adds	r3, r0, #1
 801e74e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e752:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801e756:	0940      	lsrs	r0, r0, #5
 801e758:	ea4c 0c0b 	orr.w	ip, ip, fp
 801e75c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801e760:	ea4c 0c00 	orr.w	ip, ip, r0
 801e764:	f824 cb02 	strh.w	ip, [r4], #2
 801e768:	e7bf      	b.n	801e6ea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801e76a:	f8be 3000 	ldrh.w	r3, [lr]
 801e76e:	eba3 0308 	sub.w	r3, r3, r8
 801e772:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e776:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e77a:	eba3 0308 	sub.w	r3, r3, r8
 801e77e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801e782:	e7ae      	b.n	801e6e2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801e784:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801e788:	f8d9 0000 	ldr.w	r0, [r9]
 801e78c:	42ac      	cmp	r4, r5
 801e78e:	6803      	ldr	r3, [r0, #0]
 801e790:	d20e      	bcs.n	801e7b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801e792:	f8d3 8038 	ldr.w	r8, [r3, #56]	@ 0x38
 801e796:	4632      	mov	r2, r6
 801e798:	463b      	mov	r3, r7
 801e79a:	4621      	mov	r1, r4
 801e79c:	47c0      	blx	r8
 801e79e:	f8ba 3000 	ldrh.w	r3, [sl]
 801e7a2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e7a6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e7aa:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801e7ae:	e7eb      	b.n	801e788 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801e7b0:	4b02      	ldr	r3, [pc, #8]	@ (801e7bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801e7b2:	6818      	ldr	r0, [r3, #0]
 801e7b4:	6803      	ldr	r3, [r0, #0]
 801e7b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e7b8:	4798      	blx	r3
 801e7ba:	e76c      	b.n	801e696 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801e7bc:	2005b928 	.word	0x2005b928
 801e7c0:	2005b922 	.word	0x2005b922

0801e7c4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 801e7c4:	b510      	push	{r4, lr}
 801e7c6:	4604      	mov	r4, r0
 801e7c8:	2104      	movs	r1, #4
 801e7ca:	f00c fa00 	bl	802abce <_ZdlPvj>
 801e7ce:	4620      	mov	r0, r4
 801e7d0:	bd10      	pop	{r4, pc}

0801e7d2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 801e7d2:	b510      	push	{r4, lr}
 801e7d4:	4604      	mov	r4, r0
 801e7d6:	2104      	movs	r1, #4
 801e7d8:	f00c f9f9 	bl	802abce <_ZdlPvj>
 801e7dc:	4620      	mov	r0, r4
 801e7de:	bd10      	pop	{r4, pc}

0801e7e0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 801e7e0:	b510      	push	{r4, lr}
 801e7e2:	4604      	mov	r4, r0
 801e7e4:	f640 0144 	movw	r1, #2116	@ 0x844
 801e7e8:	f00c f9f1 	bl	802abce <_ZdlPvj>
 801e7ec:	4620      	mov	r0, r4
 801e7ee:	bd10      	pop	{r4, pc}

0801e7f0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID0Ev>:
 801e7f0:	b510      	push	{r4, lr}
 801e7f2:	4604      	mov	r4, r0
 801e7f4:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801e7f8:	f00c f9e9 	bl	802abce <_ZdlPvj>
 801e7fc:	4620      	mov	r0, r4
 801e7fe:	bd10      	pop	{r4, pc}

0801e800 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e800:	b510      	push	{r4, lr}
 801e802:	4604      	mov	r4, r0
 801e804:	2104      	movs	r1, #4
 801e806:	f00c f9e2 	bl	802abce <_ZdlPvj>
 801e80a:	4620      	mov	r0, r4
 801e80c:	bd10      	pop	{r4, pc}

0801e80e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801e80e:	b510      	push	{r4, lr}
 801e810:	4604      	mov	r4, r0
 801e812:	2104      	movs	r1, #4
 801e814:	f00c f9db 	bl	802abce <_ZdlPvj>
 801e818:	4620      	mov	r0, r4
 801e81a:	bd10      	pop	{r4, pc}

0801e81c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e81c:	b510      	push	{r4, lr}
 801e81e:	4604      	mov	r4, r0
 801e820:	2104      	movs	r1, #4
 801e822:	f00c f9d4 	bl	802abce <_ZdlPvj>
 801e826:	4620      	mov	r0, r4
 801e828:	bd10      	pop	{r4, pc}

0801e82a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801e82a:	b510      	push	{r4, lr}
 801e82c:	4604      	mov	r4, r0
 801e82e:	2104      	movs	r1, #4
 801e830:	f00c f9cd 	bl	802abce <_ZdlPvj>
 801e834:	4620      	mov	r0, r4
 801e836:	bd10      	pop	{r4, pc}

0801e838 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e838:	b510      	push	{r4, lr}
 801e83a:	4604      	mov	r4, r0
 801e83c:	2104      	movs	r1, #4
 801e83e:	f00c f9c6 	bl	802abce <_ZdlPvj>
 801e842:	4620      	mov	r0, r4
 801e844:	bd10      	pop	{r4, pc}

0801e846 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801e846:	b510      	push	{r4, lr}
 801e848:	4604      	mov	r4, r0
 801e84a:	2104      	movs	r1, #4
 801e84c:	f00c f9bf 	bl	802abce <_ZdlPvj>
 801e850:	4620      	mov	r0, r4
 801e852:	bd10      	pop	{r4, pc}

0801e854 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e854:	b510      	push	{r4, lr}
 801e856:	4604      	mov	r4, r0
 801e858:	2104      	movs	r1, #4
 801e85a:	f00c f9b8 	bl	802abce <_ZdlPvj>
 801e85e:	4620      	mov	r0, r4
 801e860:	bd10      	pop	{r4, pc}

0801e862 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801e862:	b510      	push	{r4, lr}
 801e864:	4604      	mov	r4, r0
 801e866:	2104      	movs	r1, #4
 801e868:	f00c f9b1 	bl	802abce <_ZdlPvj>
 801e86c:	4620      	mov	r0, r4
 801e86e:	bd10      	pop	{r4, pc}

0801e870 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e870:	b510      	push	{r4, lr}
 801e872:	4604      	mov	r4, r0
 801e874:	2104      	movs	r1, #4
 801e876:	f00c f9aa 	bl	802abce <_ZdlPvj>
 801e87a:	4620      	mov	r0, r4
 801e87c:	bd10      	pop	{r4, pc}

0801e87e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e87e:	b510      	push	{r4, lr}
 801e880:	4604      	mov	r4, r0
 801e882:	2104      	movs	r1, #4
 801e884:	f00c f9a3 	bl	802abce <_ZdlPvj>
 801e888:	4620      	mov	r0, r4
 801e88a:	bd10      	pop	{r4, pc}

0801e88c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e88c:	b510      	push	{r4, lr}
 801e88e:	4604      	mov	r4, r0
 801e890:	2104      	movs	r1, #4
 801e892:	f00c f99c 	bl	802abce <_ZdlPvj>
 801e896:	4620      	mov	r0, r4
 801e898:	bd10      	pop	{r4, pc}

0801e89a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e89a:	b510      	push	{r4, lr}
 801e89c:	4604      	mov	r4, r0
 801e89e:	2104      	movs	r1, #4
 801e8a0:	f00c f995 	bl	802abce <_ZdlPvj>
 801e8a4:	4620      	mov	r0, r4
 801e8a6:	bd10      	pop	{r4, pc}

0801e8a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e8a8:	b510      	push	{r4, lr}
 801e8aa:	4604      	mov	r4, r0
 801e8ac:	2104      	movs	r1, #4
 801e8ae:	f00c f98e 	bl	802abce <_ZdlPvj>
 801e8b2:	4620      	mov	r0, r4
 801e8b4:	bd10      	pop	{r4, pc}

0801e8b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801e8b6:	b510      	push	{r4, lr}
 801e8b8:	4604      	mov	r4, r0
 801e8ba:	2104      	movs	r1, #4
 801e8bc:	f00c f987 	bl	802abce <_ZdlPvj>
 801e8c0:	4620      	mov	r0, r4
 801e8c2:	bd10      	pop	{r4, pc}

0801e8c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e8c4:	b510      	push	{r4, lr}
 801e8c6:	4604      	mov	r4, r0
 801e8c8:	2104      	movs	r1, #4
 801e8ca:	f00c f980 	bl	802abce <_ZdlPvj>
 801e8ce:	4620      	mov	r0, r4
 801e8d0:	bd10      	pop	{r4, pc}

0801e8d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e8d2:	b510      	push	{r4, lr}
 801e8d4:	4604      	mov	r4, r0
 801e8d6:	2104      	movs	r1, #4
 801e8d8:	f00c f979 	bl	802abce <_ZdlPvj>
 801e8dc:	4620      	mov	r0, r4
 801e8de:	bd10      	pop	{r4, pc}

0801e8e0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e8e0:	b510      	push	{r4, lr}
 801e8e2:	4604      	mov	r4, r0
 801e8e4:	2104      	movs	r1, #4
 801e8e6:	f00c f972 	bl	802abce <_ZdlPvj>
 801e8ea:	4620      	mov	r0, r4
 801e8ec:	bd10      	pop	{r4, pc}

0801e8ee <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801e8ee:	b510      	push	{r4, lr}
 801e8f0:	4604      	mov	r4, r0
 801e8f2:	2104      	movs	r1, #4
 801e8f4:	f00c f96b 	bl	802abce <_ZdlPvj>
 801e8f8:	4620      	mov	r0, r4
 801e8fa:	bd10      	pop	{r4, pc}

0801e8fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e8fc:	b510      	push	{r4, lr}
 801e8fe:	4604      	mov	r4, r0
 801e900:	2104      	movs	r1, #4
 801e902:	f00c f964 	bl	802abce <_ZdlPvj>
 801e906:	4620      	mov	r0, r4
 801e908:	bd10      	pop	{r4, pc}

0801e90a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e90a:	b510      	push	{r4, lr}
 801e90c:	4604      	mov	r4, r0
 801e90e:	2104      	movs	r1, #4
 801e910:	f00c f95d 	bl	802abce <_ZdlPvj>
 801e914:	4620      	mov	r0, r4
 801e916:	bd10      	pop	{r4, pc}

0801e918 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e918:	b510      	push	{r4, lr}
 801e91a:	4604      	mov	r4, r0
 801e91c:	2104      	movs	r1, #4
 801e91e:	f00c f956 	bl	802abce <_ZdlPvj>
 801e922:	4620      	mov	r0, r4
 801e924:	bd10      	pop	{r4, pc}

0801e926 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e926:	b510      	push	{r4, lr}
 801e928:	4604      	mov	r4, r0
 801e92a:	2104      	movs	r1, #4
 801e92c:	f00c f94f 	bl	802abce <_ZdlPvj>
 801e930:	4620      	mov	r0, r4
 801e932:	bd10      	pop	{r4, pc}

0801e934 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e934:	b510      	push	{r4, lr}
 801e936:	4604      	mov	r4, r0
 801e938:	2104      	movs	r1, #4
 801e93a:	f00c f948 	bl	802abce <_ZdlPvj>
 801e93e:	4620      	mov	r0, r4
 801e940:	bd10      	pop	{r4, pc}

0801e942 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e942:	b510      	push	{r4, lr}
 801e944:	4604      	mov	r4, r0
 801e946:	2104      	movs	r1, #4
 801e948:	f00c f941 	bl	802abce <_ZdlPvj>
 801e94c:	4620      	mov	r0, r4
 801e94e:	bd10      	pop	{r4, pc}

0801e950 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801e950:	b510      	push	{r4, lr}
 801e952:	4604      	mov	r4, r0
 801e954:	2104      	movs	r1, #4
 801e956:	f00c f93a 	bl	802abce <_ZdlPvj>
 801e95a:	4620      	mov	r0, r4
 801e95c:	bd10      	pop	{r4, pc}

0801e95e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801e95e:	b510      	push	{r4, lr}
 801e960:	4604      	mov	r4, r0
 801e962:	2104      	movs	r1, #4
 801e964:	f00c f933 	bl	802abce <_ZdlPvj>
 801e968:	4620      	mov	r0, r4
 801e96a:	bd10      	pop	{r4, pc}

0801e96c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801e96c:	b510      	push	{r4, lr}
 801e96e:	4604      	mov	r4, r0
 801e970:	2104      	movs	r1, #4
 801e972:	f00c f92c 	bl	802abce <_ZdlPvj>
 801e976:	4620      	mov	r0, r4
 801e978:	bd10      	pop	{r4, pc}

0801e97a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801e97a:	b510      	push	{r4, lr}
 801e97c:	4604      	mov	r4, r0
 801e97e:	2104      	movs	r1, #4
 801e980:	f00c f925 	bl	802abce <_ZdlPvj>
 801e984:	4620      	mov	r0, r4
 801e986:	bd10      	pop	{r4, pc}

0801e988 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801e988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e98c:	b08f      	sub	sp, #60	@ 0x3c
 801e98e:	4616      	mov	r6, r2
 801e990:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801e994:	4682      	mov	sl, r0
 801e996:	460d      	mov	r5, r1
 801e998:	9205      	str	r2, [sp, #20]
 801e99a:	2a00      	cmp	r2, #0
 801e99c:	f000 82b7 	beq.w	801ef0e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x586>
 801e9a0:	6830      	ldr	r0, [r6, #0]
 801e9a2:	6871      	ldr	r1, [r6, #4]
 801e9a4:	ac0a      	add	r4, sp, #40	@ 0x28
 801e9a6:	c403      	stmia	r4!, {r0, r1}
 801e9a8:	6818      	ldr	r0, [r3, #0]
 801e9aa:	6859      	ldr	r1, [r3, #4]
 801e9ac:	ac0c      	add	r4, sp, #48	@ 0x30
 801e9ae:	c403      	stmia	r4!, {r0, r1}
 801e9b0:	a80a      	add	r0, sp, #40	@ 0x28
 801e9b2:	f7f9 fdb1 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e9b6:	4631      	mov	r1, r6
 801e9b8:	a80c      	add	r0, sp, #48	@ 0x30
 801e9ba:	f7f9 fdd5 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e9be:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801e9c2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801e9c6:	bfdd      	ittte	le
 801e9c8:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801e9cc:	b293      	uxthle	r3, r2
 801e9ce:	fb91 f3f3 	sdivle	r3, r1, r3
 801e9d2:	2301      	movgt	r3, #1
 801e9d4:	9300      	str	r3, [sp, #0]
 801e9d6:	f105 0308 	add.w	r3, r5, #8
 801e9da:	9900      	ldr	r1, [sp, #0]
 801e9dc:	9306      	str	r3, [sp, #24]
 801e9de:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801e9e2:	440b      	add	r3, r1
 801e9e4:	3b01      	subs	r3, #1
 801e9e6:	fb93 f3f1 	sdiv	r3, r3, r1
 801e9ea:	9906      	ldr	r1, [sp, #24]
 801e9ec:	3b01      	subs	r3, #1
 801e9ee:	b29b      	uxth	r3, r3
 801e9f0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e9f4:	9307      	str	r3, [sp, #28]
 801e9f6:	9900      	ldr	r1, [sp, #0]
 801e9f8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801e9fc:	fb93 f0f1 	sdiv	r0, r3, r1
 801ea00:	b284      	uxth	r4, r0
 801ea02:	9402      	str	r4, [sp, #8]
 801ea04:	9d02      	ldr	r5, [sp, #8]
 801ea06:	9c00      	ldr	r4, [sp, #0]
 801ea08:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801ea0c:	fb05 3414 	mls	r4, r5, r4, r3
 801ea10:	fb14 f402 	smulbb	r4, r4, r2
 801ea14:	440c      	add	r4, r1
 801ea16:	b2a4      	uxth	r4, r4
 801ea18:	2d00      	cmp	r5, #0
 801ea1a:	d06c      	beq.n	801eaf6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16e>
 801ea1c:	9806      	ldr	r0, [sp, #24]
 801ea1e:	1e6a      	subs	r2, r5, #1
 801ea20:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 801ea24:	9a07      	ldr	r2, [sp, #28]
 801ea26:	ba36      	rev	r6, r6
 801ea28:	4416      	add	r6, r2
 801ea2a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801ea2e:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 801ea32:	4411      	add	r1, r2
 801ea34:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801ea38:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801ea3c:	4413      	add	r3, r2
 801ea3e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801ea42:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801ea46:	f8df 9320 	ldr.w	r9, [pc, #800]	@ 801ed68 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>
 801ea4a:	9301      	str	r3, [sp, #4]
 801ea4c:	4bc4      	ldr	r3, [pc, #784]	@ (801ed60 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3d8>)
 801ea4e:	6818      	ldr	r0, [r3, #0]
 801ea50:	6803      	ldr	r3, [r0, #0]
 801ea52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ea54:	4798      	blx	r3
 801ea56:	4bc3      	ldr	r3, [pc, #780]	@ (801ed64 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3dc>)
 801ea58:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801ea5c:	881b      	ldrh	r3, [r3, #0]
 801ea5e:	f9bd 8032 	ldrsh.w	r8, [sp, #50]	@ 0x32
 801ea62:	fb03 2808 	mla	r8, r3, r8, r2
 801ea66:	436b      	muls	r3, r5
 801ea68:	eb00 0848 	add.w	r8, r0, r8, lsl #1
 801ea6c:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801ea70:	9309      	str	r3, [sp, #36]	@ 0x24
 801ea72:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801ea76:	2500      	movs	r5, #0
 801ea78:	fb94 f3f3 	sdiv	r3, r4, r3
 801ea7c:	9304      	str	r3, [sp, #16]
 801ea7e:	f10a 0304 	add.w	r3, sl, #4
 801ea82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ea86:	4629      	mov	r1, r5
 801ea88:	4618      	mov	r0, r3
 801ea8a:	9308      	str	r3, [sp, #32]
 801ea8c:	f00d faa0 	bl	802bfd0 <memset>
 801ea90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea92:	4543      	cmp	r3, r8
 801ea94:	f240 8236 	bls.w	801ef04 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x57c>
 801ea98:	2203      	movs	r2, #3
 801ea9a:	2107      	movs	r1, #7
 801ea9c:	200b      	movs	r0, #11
 801ea9e:	2c00      	cmp	r4, #0
 801eaa0:	f000 8131 	beq.w	801ed06 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x37e>
 801eaa4:	7833      	ldrb	r3, [r6, #0]
 801eaa6:	b2db      	uxtb	r3, r3
 801eaa8:	2bfe      	cmp	r3, #254	@ 0xfe
 801eaaa:	d126      	bne.n	801eafa <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x172>
 801eaac:	f896 e001 	ldrb.w	lr, [r6, #1]
 801eab0:	f896 c002 	ldrb.w	ip, [r6, #2]
 801eab4:	fa5f fe8e 	uxtb.w	lr, lr
 801eab8:	f896 b003 	ldrb.w	fp, [r6, #3]
 801eabc:	fa5f fc8c 	uxtb.w	ip, ip
 801eac0:	f36e 0507 	bfi	r5, lr, #0, #8
 801eac4:	f36c 250f 	bfi	r5, ip, #8, #8
 801eac8:	fa5f fb8b 	uxtb.w	fp, fp
 801eacc:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 801ead0:	fb12 cc0b 	smlabb	ip, r2, fp, ip
 801ead4:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 801ead8:	f36b 4517 	bfi	r5, fp, #16, #8
 801eadc:	0e2b      	lsrs	r3, r5, #24
 801eade:	fb10 c303 	smlabb	r3, r0, r3, ip
 801eae2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801eae6:	3c01      	subs	r4, #1
 801eae8:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801eaec:	1d37      	adds	r7, r6, #4
 801eaee:	b2a4      	uxth	r4, r4
 801eaf0:	605d      	str	r5, [r3, #4]
 801eaf2:	463e      	mov	r6, r7
 801eaf4:	e7d3      	b.n	801ea9e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x116>
 801eaf6:	9e07      	ldr	r6, [sp, #28]
 801eaf8:	e797      	b.n	801ea2a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa2>
 801eafa:	2bff      	cmp	r3, #255	@ 0xff
 801eafc:	d127      	bne.n	801eb4e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1c6>
 801eafe:	f896 c001 	ldrb.w	ip, [r6, #1]
 801eb02:	78b3      	ldrb	r3, [r6, #2]
 801eb04:	fa5f fc8c 	uxtb.w	ip, ip
 801eb08:	f896 e003 	ldrb.w	lr, [r6, #3]
 801eb0c:	b2db      	uxtb	r3, r3
 801eb0e:	f36c 0507 	bfi	r5, ip, #0, #8
 801eb12:	f363 250f 	bfi	r5, r3, #8, #8
 801eb16:	fa5f fe8e 	uxtb.w	lr, lr
 801eb1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801eb1e:	fb12 330e 	smlabb	r3, r2, lr, r3
 801eb22:	fb11 330c 	smlabb	r3, r1, ip, r3
 801eb26:	f896 b004 	ldrb.w	fp, [r6, #4]
 801eb2a:	f36e 4517 	bfi	r5, lr, #16, #8
 801eb2e:	fa5f fb8b 	uxtb.w	fp, fp
 801eb32:	f36b 651f 	bfi	r5, fp, #24, #8
 801eb36:	fb10 3b0b 	smlabb	fp, r0, fp, r3
 801eb3a:	f00b 0b3f 	and.w	fp, fp, #63	@ 0x3f
 801eb3e:	3c01      	subs	r4, #1
 801eb40:	eb0a 0b8b 	add.w	fp, sl, fp, lsl #2
 801eb44:	1d77      	adds	r7, r6, #5
 801eb46:	b2a4      	uxth	r4, r4
 801eb48:	f8cb 5004 	str.w	r5, [fp, #4]
 801eb4c:	e7d1      	b.n	801eaf2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801eb4e:	ea5f 1ca3 	movs.w	ip, r3, asr #6
 801eb52:	f106 0701 	add.w	r7, r6, #1
 801eb56:	d107      	bne.n	801eb68 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e0>
 801eb58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801eb5c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801eb60:	685d      	ldr	r5, [r3, #4]
 801eb62:	3c01      	subs	r4, #1
 801eb64:	b2a4      	uxth	r4, r4
 801eb66:	e7c4      	b.n	801eaf2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801eb68:	f1bc 0f01 	cmp.w	ip, #1
 801eb6c:	d12c      	bne.n	801ebc8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x240>
 801eb6e:	f003 0e03 	and.w	lr, r3, #3
 801eb72:	f1ae 0e02 	sub.w	lr, lr, #2
 801eb76:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 801eb7a:	fa5f fe8e 	uxtb.w	lr, lr
 801eb7e:	f003 0c0c 	and.w	ip, r3, #12
 801eb82:	f36e 0507 	bfi	r5, lr, #0, #8
 801eb86:	f1ac 0c08 	sub.w	ip, ip, #8
 801eb8a:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801eb8e:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801eb92:	f36c 250f 	bfi	r5, ip, #8, #8
 801eb96:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801eb9a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801eb9e:	3b02      	subs	r3, #2
 801eba0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801eba4:	b2db      	uxtb	r3, r3
 801eba6:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 801ebaa:	fb12 cc03 	smlabb	ip, r2, r3, ip
 801ebae:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 801ebb2:	f363 4517 	bfi	r5, r3, #16, #8
 801ebb6:	0e2e      	lsrs	r6, r5, #24
 801ebb8:	fb10 c606 	smlabb	r6, r0, r6, ip
 801ebbc:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 801ebc0:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 801ebc4:	6075      	str	r5, [r6, #4]
 801ebc6:	e7cc      	b.n	801eb62 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1da>
 801ebc8:	f1bc 0f02 	cmp.w	ip, #2
 801ebcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ebd0:	d12a      	bne.n	801ec28 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2a0>
 801ebd2:	1cb7      	adds	r7, r6, #2
 801ebd4:	7876      	ldrb	r6, [r6, #1]
 801ebd6:	3b20      	subs	r3, #32
 801ebd8:	b2f6      	uxtb	r6, r6
 801ebda:	f006 0c0f 	and.w	ip, r6, #15
 801ebde:	f1ac 0c08 	sub.w	ip, ip, #8
 801ebe2:	449c      	add	ip, r3
 801ebe4:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 801ebe8:	fa5f fc8c 	uxtb.w	ip, ip
 801ebec:	f36c 0507 	bfi	r5, ip, #0, #8
 801ebf0:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801ebf4:	eb0e 0e83 	add.w	lr, lr, r3, lsl #2
 801ebf8:	fa5f fe8e 	uxtb.w	lr, lr
 801ebfc:	1136      	asrs	r6, r6, #4
 801ebfe:	f36e 250f 	bfi	r5, lr, #8, #8
 801ec02:	3e08      	subs	r6, #8
 801ec04:	4433      	add	r3, r6
 801ec06:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ec0a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801ec0e:	b2db      	uxtb	r3, r3
 801ec10:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 801ec14:	fb12 ee03 	smlabb	lr, r2, r3, lr
 801ec18:	fb11 ee0c 	smlabb	lr, r1, ip, lr
 801ec1c:	f363 4517 	bfi	r5, r3, #16, #8
 801ec20:	0e2e      	lsrs	r6, r5, #24
 801ec22:	fb10 e606 	smlabb	r6, r0, r6, lr
 801ec26:	e7c9      	b.n	801ebbc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x234>
 801ec28:	1c5e      	adds	r6, r3, #1
 801ec2a:	42a6      	cmp	r6, r4
 801ec2c:	dd4e      	ble.n	801eccc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x344>
 801ec2e:	1b36      	subs	r6, r6, r4
 801ec30:	2e00      	cmp	r6, #0
 801ec32:	dc4e      	bgt.n	801ecd2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x34a>
 801ec34:	2400      	movs	r4, #0
 801ec36:	f8dd b004 	ldr.w	fp, [sp, #4]
 801ec3a:	f1bb 0f00 	cmp.w	fp, #0
 801ec3e:	f340 8122 	ble.w	801ee86 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fe>
 801ec42:	1c7b      	adds	r3, r7, #1
 801ec44:	9303      	str	r3, [sp, #12]
 801ec46:	783b      	ldrb	r3, [r7, #0]
 801ec48:	b2db      	uxtb	r3, r3
 801ec4a:	2bfe      	cmp	r3, #254	@ 0xfe
 801ec4c:	d160      	bne.n	801ed10 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x388>
 801ec4e:	1d3b      	adds	r3, r7, #4
 801ec50:	9303      	str	r3, [sp, #12]
 801ec52:	2303      	movs	r3, #3
 801ec54:	7879      	ldrb	r1, [r7, #1]
 801ec56:	78ba      	ldrb	r2, [r7, #2]
 801ec58:	b2c9      	uxtb	r1, r1
 801ec5a:	78f8      	ldrb	r0, [r7, #3]
 801ec5c:	f361 0507 	bfi	r5, r1, #0, #8
 801ec60:	b2d2      	uxtb	r2, r2
 801ec62:	f362 250f 	bfi	r5, r2, #8, #8
 801ec66:	b2c0      	uxtb	r0, r0
 801ec68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801ec6c:	fb13 2200 	smlabb	r2, r3, r0, r2
 801ec70:	2307      	movs	r3, #7
 801ec72:	fb13 2101 	smlabb	r1, r3, r1, r2
 801ec76:	230b      	movs	r3, #11
 801ec78:	f360 4517 	bfi	r5, r0, #16, #8
 801ec7c:	0e2e      	lsrs	r6, r5, #24
 801ec7e:	fb13 1306 	smlabb	r3, r3, r6, r1
 801ec82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ec86:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801ec8a:	605d      	str	r5, [r3, #4]
 801ec8c:	2601      	movs	r6, #1
 801ec8e:	4637      	mov	r7, r6
 801ec90:	0e2b      	lsrs	r3, r5, #24
 801ec92:	ebab 0b07 	sub.w	fp, fp, r7
 801ec96:	eba6 0607 	sub.w	r6, r6, r7
 801ec9a:	f040 80d3 	bne.w	801ee44 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4bc>
 801ec9e:	b18c      	cbz	r4, 801ecc4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x33c>
 801eca0:	4648      	mov	r0, r9
 801eca2:	00a1      	lsls	r1, r4, #2
 801eca4:	f7f3 fc30 	bl	8012508 <_ZN8touchgfx5paint9flushLineEPmi>
 801eca8:	9b05      	ldr	r3, [sp, #20]
 801ecaa:	4622      	mov	r2, r4
 801ecac:	4649      	mov	r1, r9
 801ecae:	4640      	mov	r0, r8
 801ecb0:	f7f3 fcd4 	bl	801265c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801ecb4:	4b2c      	ldr	r3, [pc, #176]	@ (801ed68 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>)
 801ecb6:	4a2d      	ldr	r2, [pc, #180]	@ (801ed6c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e4>)
 801ecb8:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801ecbc:	4599      	cmp	r9, r3
 801ecbe:	bf08      	it	eq
 801ecc0:	4613      	moveq	r3, r2
 801ecc2:	4699      	mov	r9, r3
 801ecc4:	eb08 0847 	add.w	r8, r8, r7, lsl #1
 801ecc8:	2400      	movs	r4, #0
 801ecca:	e0da      	b.n	801ee82 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fa>
 801eccc:	1ba6      	subs	r6, r4, r6
 801ecce:	b2b4      	uxth	r4, r6
 801ecd0:	e70f      	b.n	801eaf2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801ecd2:	9b01      	ldr	r3, [sp, #4]
 801ecd4:	9a01      	ldr	r2, [sp, #4]
 801ecd6:	42b3      	cmp	r3, r6
 801ecd8:	bfa8      	it	ge
 801ecda:	4633      	movge	r3, r6
 801ecdc:	0e2c      	lsrs	r4, r5, #24
 801ecde:	eba2 0b03 	sub.w	fp, r2, r3
 801ece2:	eba6 0603 	sub.w	r6, r6, r3
 801ece6:	d00b      	beq.n	801ed00 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x378>
 801ece8:	461a      	mov	r2, r3
 801ecea:	f1a9 0104 	sub.w	r1, r9, #4
 801ecee:	2a00      	cmp	r2, #0
 801ecf0:	dc02      	bgt.n	801ecf8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x370>
 801ecf2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ecf6:	e7a0      	b.n	801ec3a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801ecf8:	f841 5f04 	str.w	r5, [r1, #4]!
 801ecfc:	3a01      	subs	r2, #1
 801ecfe:	e7f6      	b.n	801ecee <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x366>
 801ed00:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 801ed04:	e799      	b.n	801ec3a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801ed06:	4637      	mov	r7, r6
 801ed08:	f8dd b004 	ldr.w	fp, [sp, #4]
 801ed0c:	4626      	mov	r6, r4
 801ed0e:	e794      	b.n	801ec3a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801ed10:	2bff      	cmp	r3, #255	@ 0xff
 801ed12:	d11d      	bne.n	801ed50 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3c8>
 801ed14:	1d7b      	adds	r3, r7, #5
 801ed16:	7878      	ldrb	r0, [r7, #1]
 801ed18:	9303      	str	r3, [sp, #12]
 801ed1a:	78ba      	ldrb	r2, [r7, #2]
 801ed1c:	78fe      	ldrb	r6, [r7, #3]
 801ed1e:	793b      	ldrb	r3, [r7, #4]
 801ed20:	b2c0      	uxtb	r0, r0
 801ed22:	b2d9      	uxtb	r1, r3
 801ed24:	2303      	movs	r3, #3
 801ed26:	f360 0507 	bfi	r5, r0, #0, #8
 801ed2a:	b2d2      	uxtb	r2, r2
 801ed2c:	f362 250f 	bfi	r5, r2, #8, #8
 801ed30:	b2f6      	uxtb	r6, r6
 801ed32:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801ed36:	fb13 2206 	smlabb	r2, r3, r6, r2
 801ed3a:	2307      	movs	r3, #7
 801ed3c:	fb13 2000 	smlabb	r0, r3, r0, r2
 801ed40:	230b      	movs	r3, #11
 801ed42:	f366 4517 	bfi	r5, r6, #16, #8
 801ed46:	f361 651f 	bfi	r5, r1, #24, #8
 801ed4a:	fb13 0301 	smlabb	r3, r3, r1, r0
 801ed4e:	e798      	b.n	801ec82 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2fa>
 801ed50:	119e      	asrs	r6, r3, #6
 801ed52:	d10d      	bne.n	801ed70 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801ed54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ed58:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801ed5c:	685d      	ldr	r5, [r3, #4]
 801ed5e:	e795      	b.n	801ec8c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 801ed60:	2005b928 	.word	0x2005b928
 801ed64:	2005b922 	.word	0x2005b922
 801ed68:	20045700 	.word	0x20045700
 801ed6c:	20045800 	.word	0x20045800
 801ed70:	2e01      	cmp	r6, #1
 801ed72:	ea4f 6115 	mov.w	r1, r5, lsr #24
 801ed76:	d12b      	bne.n	801edd0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x448>
 801ed78:	f003 0003 	and.w	r0, r3, #3
 801ed7c:	3802      	subs	r0, #2
 801ed7e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 801ed82:	b2c0      	uxtb	r0, r0
 801ed84:	f003 020c 	and.w	r2, r3, #12
 801ed88:	f360 0507 	bfi	r5, r0, #0, #8
 801ed8c:	3a08      	subs	r2, #8
 801ed8e:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 801ed92:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801ed96:	f362 250f 	bfi	r5, r2, #8, #8
 801ed9a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801ed9e:	1e9f      	subs	r7, r3, #2
 801eda0:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801eda4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801eda8:	2703      	movs	r7, #3
 801edaa:	b2db      	uxtb	r3, r3
 801edac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801edb0:	fb17 2203 	smlabb	r2, r7, r3, r2
 801edb4:	2707      	movs	r7, #7
 801edb6:	f363 4517 	bfi	r5, r3, #16, #8
 801edba:	230b      	movs	r3, #11
 801edbc:	fb17 2000 	smlabb	r0, r7, r0, r2
 801edc0:	fb13 0101 	smlabb	r1, r3, r1, r0
 801edc4:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801edc8:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801edcc:	604d      	str	r5, [r1, #4]
 801edce:	e75e      	b.n	801ec8e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801edd0:	2e02      	cmp	r6, #2
 801edd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801edd6:	d12f      	bne.n	801ee38 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4b0>
 801edd8:	7878      	ldrb	r0, [r7, #1]
 801edda:	1cba      	adds	r2, r7, #2
 801eddc:	b2c0      	uxtb	r0, r0
 801edde:	9203      	str	r2, [sp, #12]
 801ede0:	f000 020f 	and.w	r2, r0, #15
 801ede4:	3b20      	subs	r3, #32
 801ede6:	3a08      	subs	r2, #8
 801ede8:	441a      	add	r2, r3
 801edea:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801edee:	b2d2      	uxtb	r2, r2
 801edf0:	f362 0507 	bfi	r5, r2, #0, #8
 801edf4:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801edf8:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 801edfc:	b2f6      	uxtb	r6, r6
 801edfe:	1100      	asrs	r0, r0, #4
 801ee00:	f366 250f 	bfi	r5, r6, #8, #8
 801ee04:	3808      	subs	r0, #8
 801ee06:	4403      	add	r3, r0
 801ee08:	f3c5 4007 	ubfx	r0, r5, #16, #8
 801ee0c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801ee10:	2003      	movs	r0, #3
 801ee12:	b2db      	uxtb	r3, r3
 801ee14:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 801ee18:	fb10 6603 	smlabb	r6, r0, r3, r6
 801ee1c:	2007      	movs	r0, #7
 801ee1e:	f363 4517 	bfi	r5, r3, #16, #8
 801ee22:	230b      	movs	r3, #11
 801ee24:	fb10 6202 	smlabb	r2, r0, r2, r6
 801ee28:	fb13 2101 	smlabb	r1, r3, r1, r2
 801ee2c:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801ee30:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801ee34:	604d      	str	r5, [r1, #4]
 801ee36:	e729      	b.n	801ec8c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 801ee38:	1c5e      	adds	r6, r3, #1
 801ee3a:	45b3      	cmp	fp, r6
 801ee3c:	465f      	mov	r7, fp
 801ee3e:	bfa8      	it	ge
 801ee40:	4637      	movge	r7, r6
 801ee42:	e725      	b.n	801ec90 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x308>
 801ee44:	193b      	adds	r3, r7, r4
 801ee46:	2b40      	cmp	r3, #64	@ 0x40
 801ee48:	dd13      	ble.n	801ee72 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ea>
 801ee4a:	4648      	mov	r0, r9
 801ee4c:	00a1      	lsls	r1, r4, #2
 801ee4e:	f7f3 fb5b 	bl	8012508 <_ZN8touchgfx5paint9flushLineEPmi>
 801ee52:	4622      	mov	r2, r4
 801ee54:	4640      	mov	r0, r8
 801ee56:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801ee5a:	2400      	movs	r4, #0
 801ee5c:	4649      	mov	r1, r9
 801ee5e:	9b05      	ldr	r3, [sp, #20]
 801ee60:	f7f3 fbfc 	bl	801265c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801ee64:	4b2b      	ldr	r3, [pc, #172]	@ (801ef14 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>)
 801ee66:	4599      	cmp	r9, r3
 801ee68:	bf0c      	ite	eq
 801ee6a:	f8df 90b4 	ldreq.w	r9, [pc, #180]	@ 801ef20 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x598>
 801ee6e:	f8df 90a4 	ldrne.w	r9, [pc, #164]	@ 801ef14 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>
 801ee72:	463b      	mov	r3, r7
 801ee74:	eb09 0284 	add.w	r2, r9, r4, lsl #2
 801ee78:	3b01      	subs	r3, #1
 801ee7a:	f842 5b04 	str.w	r5, [r2], #4
 801ee7e:	d1fb      	bne.n	801ee78 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f0>
 801ee80:	443c      	add	r4, r7
 801ee82:	9f03      	ldr	r7, [sp, #12]
 801ee84:	e6d9      	b.n	801ec3a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801ee86:	b15c      	cbz	r4, 801eea0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x518>
 801ee88:	00a1      	lsls	r1, r4, #2
 801ee8a:	4648      	mov	r0, r9
 801ee8c:	f7f3 fb3c 	bl	8012508 <_ZN8touchgfx5paint9flushLineEPmi>
 801ee90:	4640      	mov	r0, r8
 801ee92:	9b05      	ldr	r3, [sp, #20]
 801ee94:	4622      	mov	r2, r4
 801ee96:	4649      	mov	r1, r9
 801ee98:	f7f3 fbe0 	bl	801265c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801ee9c:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801eea0:	4b1d      	ldr	r3, [pc, #116]	@ (801ef18 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x590>)
 801eea2:	9a01      	ldr	r2, [sp, #4]
 801eea4:	881b      	ldrh	r3, [r3, #0]
 801eea6:	1a9b      	subs	r3, r3, r2
 801eea8:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 801eeac:	9b04      	ldr	r3, [sp, #16]
 801eeae:	3301      	adds	r3, #1
 801eeb0:	9304      	str	r3, [sp, #16]
 801eeb2:	9a04      	ldr	r2, [sp, #16]
 801eeb4:	9b00      	ldr	r3, [sp, #0]
 801eeb6:	4293      	cmp	r3, r2
 801eeb8:	d11d      	bne.n	801eef6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x56e>
 801eeba:	2500      	movs	r5, #0
 801eebc:	9b02      	ldr	r3, [sp, #8]
 801eebe:	9a02      	ldr	r2, [sp, #8]
 801eec0:	f103 0b01 	add.w	fp, r3, #1
 801eec4:	9b06      	ldr	r3, [sp, #24]
 801eec6:	f8bd 4030 	ldrh.w	r4, [sp, #48]	@ 0x30
 801eeca:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801eece:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
 801eed2:	9b07      	ldr	r3, [sp, #28]
 801eed4:	ba3f      	rev	r7, r7
 801eed6:	1ba4      	subs	r4, r4, r6
 801eed8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801eedc:	4629      	mov	r1, r5
 801eede:	9808      	ldr	r0, [sp, #32]
 801eee0:	441f      	add	r7, r3
 801eee2:	b2a4      	uxth	r4, r4
 801eee4:	f00d f874 	bl	802bfd0 <memset>
 801eee8:	f8cd b008 	str.w	fp, [sp, #8]
 801eeec:	9504      	str	r5, [sp, #16]
 801eeee:	f7f3 faf3 	bl	80124d8 <_ZN8touchgfx5paint8tearDownEv>
 801eef2:	463e      	mov	r6, r7
 801eef4:	e5cc      	b.n	801ea90 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x108>
 801eef6:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801eefa:	9b01      	ldr	r3, [sp, #4]
 801eefc:	1ae4      	subs	r4, r4, r3
 801eefe:	1ba4      	subs	r4, r4, r6
 801ef00:	b2a4      	uxth	r4, r4
 801ef02:	e7f4      	b.n	801eeee <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x566>
 801ef04:	4b05      	ldr	r3, [pc, #20]	@ (801ef1c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x594>)
 801ef06:	6818      	ldr	r0, [r3, #0]
 801ef08:	6803      	ldr	r3, [r0, #0]
 801ef0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ef0c:	4798      	blx	r3
 801ef0e:	b00f      	add	sp, #60	@ 0x3c
 801ef10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef14:	20045700 	.word	0x20045700
 801ef18:	2005b922 	.word	0x2005b922
 801ef1c:	2005b928 	.word	0x2005b928
 801ef20:	20045800 	.word	0x20045800

0801ef24 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801ef24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef28:	b08f      	sub	sp, #60	@ 0x3c
 801ef2a:	9205      	str	r2, [sp, #20]
 801ef2c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801ef30:	461c      	mov	r4, r3
 801ef32:	9100      	str	r1, [sp, #0]
 801ef34:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ef36:	9201      	str	r2, [sp, #4]
 801ef38:	2a00      	cmp	r2, #0
 801ef3a:	f000 8116 	beq.w	801f16a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 801ef3e:	6820      	ldr	r0, [r4, #0]
 801ef40:	6861      	ldr	r1, [r4, #4]
 801ef42:	aa0a      	add	r2, sp, #40	@ 0x28
 801ef44:	c203      	stmia	r2!, {r0, r1}
 801ef46:	6818      	ldr	r0, [r3, #0]
 801ef48:	6859      	ldr	r1, [r3, #4]
 801ef4a:	aa0c      	add	r2, sp, #48	@ 0x30
 801ef4c:	c203      	stmia	r2!, {r0, r1}
 801ef4e:	a80a      	add	r0, sp, #40	@ 0x28
 801ef50:	f7f9 fae2 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ef54:	4621      	mov	r1, r4
 801ef56:	a80c      	add	r0, sp, #48	@ 0x30
 801ef58:	f7f9 fb06 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ef5c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801ef60:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801ef64:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801ef68:	bfdd      	ittte	le
 801ef6a:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801ef6e:	b2b3      	uxthle	r3, r6
 801ef70:	fb92 f3f3 	sdivle	r3, r2, r3
 801ef74:	2301      	movgt	r3, #1
 801ef76:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801ef7a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801ef7e:	fb92 f1f3 	sdiv	r1, r2, r3
 801ef82:	fa1f fc81 	uxth.w	ip, r1
 801ef86:	4661      	mov	r1, ip
 801ef88:	fb0c 2413 	mls	r4, ip, r3, r2
 801ef8c:	fb14 f406 	smulbb	r4, r4, r6
 801ef90:	441d      	add	r5, r3
 801ef92:	3d01      	subs	r5, #1
 801ef94:	4404      	add	r4, r0
 801ef96:	fb95 f5f3 	sdiv	r5, r5, r3
 801ef9a:	b2a4      	uxth	r4, r4
 801ef9c:	b131      	cbz	r1, 801efac <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 801ef9e:	9b05      	ldr	r3, [sp, #20]
 801efa0:	9900      	ldr	r1, [sp, #0]
 801efa2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801efa6:	ba1b      	rev	r3, r3
 801efa8:	4419      	add	r1, r3
 801efaa:	9100      	str	r1, [sp, #0]
 801efac:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801efb0:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801efb4:	4418      	add	r0, r3
 801efb6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801efba:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801efbe:	441a      	add	r2, r3
 801efc0:	4b6b      	ldr	r3, [pc, #428]	@ (801f170 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801efc2:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801efc6:	6818      	ldr	r0, [r3, #0]
 801efc8:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801efcc:	6803      	ldr	r3, [r0, #0]
 801efce:	b2ad      	uxth	r5, r5
 801efd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801efd2:	4798      	blx	r3
 801efd4:	4967      	ldr	r1, [pc, #412]	@ (801f174 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 801efd6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801efda:	880b      	ldrh	r3, [r1, #0]
 801efdc:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801efe0:	00ad      	lsls	r5, r5, #2
 801efe2:	fb03 c202 	mla	r2, r3, r2, ip
 801efe6:	4373      	muls	r3, r6
 801efe8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801efec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801eff0:	9306      	str	r3, [sp, #24]
 801eff2:	1d2b      	adds	r3, r5, #4
 801eff4:	9307      	str	r3, [sp, #28]
 801eff6:	9b01      	ldr	r3, [sp, #4]
 801eff8:	2c00      	cmp	r4, #0
 801effa:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 801effe:	bf0c      	ite	eq
 801f000:	46c6      	moveq	lr, r8
 801f002:	f04f 0e00 	movne.w	lr, #0
 801f006:	2300      	movs	r3, #0
 801f008:	9109      	str	r1, [sp, #36]	@ 0x24
 801f00a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801f00e:	b292      	uxth	r2, r2
 801f010:	fa1f fe8e 	uxth.w	lr, lr
 801f014:	9302      	str	r3, [sp, #8]
 801f016:	9103      	str	r1, [sp, #12]
 801f018:	9204      	str	r2, [sp, #16]
 801f01a:	9a06      	ldr	r2, [sp, #24]
 801f01c:	4282      	cmp	r2, r0
 801f01e:	f240 809f 	bls.w	801f160 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 801f022:	b963      	cbnz	r3, 801f03e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801f024:	9b00      	ldr	r3, [sp, #0]
 801f026:	781a      	ldrb	r2, [r3, #0]
 801f028:	0993      	lsrs	r3, r2, #6
 801f02a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801f02e:	9202      	str	r2, [sp, #8]
 801f030:	1e5a      	subs	r2, r3, #1
 801f032:	2a02      	cmp	r2, #2
 801f034:	d815      	bhi.n	801f062 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 801f036:	9a00      	ldr	r2, [sp, #0]
 801f038:	b29b      	uxth	r3, r3
 801f03a:	3201      	adds	r2, #1
 801f03c:	9200      	str	r2, [sp, #0]
 801f03e:	b1b4      	cbz	r4, 801f06e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 801f040:	429c      	cmp	r4, r3
 801f042:	bf99      	ittee	ls
 801f044:	1b1c      	subls	r4, r3, r4
 801f046:	fa1f fa84 	uxthls.w	sl, r4
 801f04a:	4671      	movhi	r1, lr
 801f04c:	f04f 0a00 	movhi.w	sl, #0
 801f050:	bf93      	iteet	ls
 801f052:	2400      	movls	r4, #0
 801f054:	1ae4      	subhi	r4, r4, r3
 801f056:	b2a4      	uxthhi	r4, r4
 801f058:	fa1f f188 	uxthls.w	r1, r8
 801f05c:	4653      	mov	r3, sl
 801f05e:	468e      	mov	lr, r1
 801f060:	e7db      	b.n	801f01a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 801f062:	9a00      	ldr	r2, [sp, #0]
 801f064:	9b00      	ldr	r3, [sp, #0]
 801f066:	3202      	adds	r2, #2
 801f068:	785b      	ldrb	r3, [r3, #1]
 801f06a:	9200      	str	r2, [sp, #0]
 801f06c:	e7e7      	b.n	801f03e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801f06e:	2202      	movs	r2, #2
 801f070:	4615      	mov	r5, r2
 801f072:	4573      	cmp	r3, lr
 801f074:	bf2c      	ite	cs
 801f076:	46f1      	movcs	r9, lr
 801f078:	4699      	movcc	r9, r3
 801f07a:	9907      	ldr	r1, [sp, #28]
 801f07c:	9a02      	ldr	r2, [sp, #8]
 801f07e:	bf28      	it	cs
 801f080:	eba3 0a0e 	subcs.w	sl, r3, lr
 801f084:	fb15 1202 	smlabb	r2, r5, r2, r1
 801f088:	9905      	ldr	r1, [sp, #20]
 801f08a:	bf28      	it	cs
 801f08c:	fa1f fa8a 	uxthcs.w	sl, sl
 801f090:	f831 c002 	ldrh.w	ip, [r1, r2]
 801f094:	9a01      	ldr	r2, [sp, #4]
 801f096:	bf37      	itett	cc
 801f098:	ebae 0103 	subcc.w	r1, lr, r3
 801f09c:	4621      	movcs	r1, r4
 801f09e:	b289      	uxthcc	r1, r1
 801f0a0:	46a2      	movcc	sl, r4
 801f0a2:	2aff      	cmp	r2, #255	@ 0xff
 801f0a4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f0a8:	d105      	bne.n	801f0b6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 801f0aa:	4481      	add	r9, r0
 801f0ac:	4581      	cmp	r9, r0
 801f0ae:	d045      	beq.n	801f13c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 801f0b0:	f820 cb02 	strh.w	ip, [r0], #2
 801f0b4:	e7fa      	b.n	801f0ac <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 801f0b6:	9d03      	ldr	r5, [sp, #12]
 801f0b8:	ea4f 222c 	mov.w	r2, ip, asr #8
 801f0bc:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801f0c0:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801f0c4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f0c8:	436a      	muls	r2, r5
 801f0ca:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801f0ce:	fa5f fc8c 	uxtb.w	ip, ip
 801f0d2:	fb0b fb05 	mul.w	fp, fp, r5
 801f0d6:	fb0c fc05 	mul.w	ip, ip, r5
 801f0da:	9208      	str	r2, [sp, #32]
 801f0dc:	4481      	add	r9, r0
 801f0de:	4581      	cmp	r9, r0
 801f0e0:	d02c      	beq.n	801f13c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 801f0e2:	8802      	ldrh	r2, [r0, #0]
 801f0e4:	9d04      	ldr	r5, [sp, #16]
 801f0e6:	1216      	asrs	r6, r2, #8
 801f0e8:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801f0ec:	fb16 f605 	smulbb	r6, r6, r5
 801f0f0:	9d08      	ldr	r5, [sp, #32]
 801f0f2:	9f04      	ldr	r7, [sp, #16]
 801f0f4:	442e      	add	r6, r5
 801f0f6:	10d5      	asrs	r5, r2, #3
 801f0f8:	00d2      	lsls	r2, r2, #3
 801f0fa:	b2d2      	uxtb	r2, r2
 801f0fc:	fb12 f207 	smulbb	r2, r2, r7
 801f100:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801f104:	fb15 f507 	smulbb	r5, r5, r7
 801f108:	b2b6      	uxth	r6, r6
 801f10a:	4462      	add	r2, ip
 801f10c:	b292      	uxth	r2, r2
 801f10e:	1c77      	adds	r7, r6, #1
 801f110:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801f114:	1c57      	adds	r7, r2, #1
 801f116:	445d      	add	r5, fp
 801f118:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 801f11c:	b2ad      	uxth	r5, r5
 801f11e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f122:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801f126:	4316      	orrs	r6, r2
 801f128:	1c6a      	adds	r2, r5, #1
 801f12a:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801f12e:	096d      	lsrs	r5, r5, #5
 801f130:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f134:	432e      	orrs	r6, r5
 801f136:	f820 6b02 	strh.w	r6, [r0], #2
 801f13a:	e7d0      	b.n	801f0de <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 801f13c:	4573      	cmp	r3, lr
 801f13e:	d38d      	bcc.n	801f05c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 801f140:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801f144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f146:	fa1f f188 	uxth.w	r1, r8
 801f14a:	1a64      	subs	r4, r4, r1
 801f14c:	881b      	ldrh	r3, [r3, #0]
 801f14e:	b2a4      	uxth	r4, r4
 801f150:	2c00      	cmp	r4, #0
 801f152:	eba3 0308 	sub.w	r3, r3, r8
 801f156:	bf18      	it	ne
 801f158:	2100      	movne	r1, #0
 801f15a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f15e:	e77d      	b.n	801f05c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 801f160:	4b03      	ldr	r3, [pc, #12]	@ (801f170 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801f162:	6818      	ldr	r0, [r3, #0]
 801f164:	6803      	ldr	r3, [r0, #0]
 801f166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f168:	4798      	blx	r3
 801f16a:	b00f      	add	sp, #60	@ 0x3c
 801f16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f170:	2005b928 	.word	0x2005b928
 801f174:	2005b922 	.word	0x2005b922

0801f178 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801f178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f17c:	b09f      	sub	sp, #124	@ 0x7c
 801f17e:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 801f182:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 801f186:	461d      	mov	r5, r3
 801f188:	4604      	mov	r4, r0
 801f18a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f18c:	9209      	str	r2, [sp, #36]	@ 0x24
 801f18e:	2a00      	cmp	r2, #0
 801f190:	f000 81e9 	beq.w	801f566 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ee>
 801f194:	6828      	ldr	r0, [r5, #0]
 801f196:	6869      	ldr	r1, [r5, #4]
 801f198:	aa1a      	add	r2, sp, #104	@ 0x68
 801f19a:	c203      	stmia	r2!, {r0, r1}
 801f19c:	6818      	ldr	r0, [r3, #0]
 801f19e:	6859      	ldr	r1, [r3, #4]
 801f1a0:	aa1c      	add	r2, sp, #112	@ 0x70
 801f1a2:	c203      	stmia	r2!, {r0, r1}
 801f1a4:	a81a      	add	r0, sp, #104	@ 0x68
 801f1a6:	f7f9 f9b7 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f1aa:	4629      	mov	r1, r5
 801f1ac:	a81c      	add	r0, sp, #112	@ 0x70
 801f1ae:	f7f9 f9db 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f1b2:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801f1b6:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	@ 0x6e
 801f1ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801f1be:	bfdd      	ittte	le
 801f1c0:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801f1c4:	b29a      	uxthle	r2, r3
 801f1c6:	fb91 f2f2 	sdivle	r2, r1, r2
 801f1ca:	2201      	movgt	r2, #1
 801f1cc:	9202      	str	r2, [sp, #8]
 801f1ce:	9802      	ldr	r0, [sp, #8]
 801f1d0:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 801f1d4:	9902      	ldr	r1, [sp, #8]
 801f1d6:	fb92 f0f0 	sdiv	r0, r2, r0
 801f1da:	b280      	uxth	r0, r0
 801f1dc:	9010      	str	r0, [sp, #64]	@ 0x40
 801f1de:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801f1e0:	9802      	ldr	r0, [sp, #8]
 801f1e2:	4488      	add	r8, r1
 801f1e4:	fb05 2510 	mls	r5, r5, r0, r2
 801f1e8:	fb15 f503 	smulbb	r5, r5, r3
 801f1ec:	f108 38ff 	add.w	r8, r8, #4294967295
 801f1f0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801f1f4:	fb98 f8f1 	sdiv	r8, r8, r1
 801f1f8:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 801f1fc:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	@ 0x76
 801f200:	440d      	add	r5, r1
 801f202:	4419      	add	r1, r3
 801f204:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 801f208:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 801f20c:	441a      	add	r2, r3
 801f20e:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 801f212:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 801f216:	9304      	str	r3, [sp, #16]
 801f218:	4b93      	ldr	r3, [pc, #588]	@ (801f468 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f0>)
 801f21a:	f108 0801 	add.w	r8, r8, #1
 801f21e:	6818      	ldr	r0, [r3, #0]
 801f220:	fa1f f888 	uxth.w	r8, r8
 801f224:	6803      	ldr	r3, [r0, #0]
 801f226:	b2ad      	uxth	r5, r5
 801f228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f22a:	4798      	blx	r3
 801f22c:	4b8f      	ldr	r3, [pc, #572]	@ (801f46c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f4>)
 801f22e:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 801f232:	881a      	ldrh	r2, [r3, #0]
 801f234:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 801f238:	4356      	muls	r6, r2
 801f23a:	fb02 7101 	mla	r1, r2, r1, r7
 801f23e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801f242:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 801f246:	920a      	str	r2, [sp, #40]	@ 0x28
 801f248:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f24a:	2d00      	cmp	r5, #0
 801f24c:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 801f250:	f108 0204 	add.w	r2, r8, #4
 801f254:	9211      	str	r2, [sp, #68]	@ 0x44
 801f256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f258:	f04f 0100 	mov.w	r1, #0
 801f25c:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801f260:	9215      	str	r2, [sp, #84]	@ 0x54
 801f262:	9a04      	ldr	r2, [sp, #16]
 801f264:	bf18      	it	ne
 801f266:	2200      	movne	r2, #0
 801f268:	9318      	str	r3, [sp, #96]	@ 0x60
 801f26a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 801f26e:	b292      	uxth	r2, r2
 801f270:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f272:	4b7f      	ldr	r3, [pc, #508]	@ (801f470 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 801f274:	910d      	str	r1, [sp, #52]	@ 0x34
 801f276:	1b1b      	subs	r3, r3, r4
 801f278:	9319      	str	r3, [sp, #100]	@ 0x64
 801f27a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f27c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f27e:	fa11 f383 	uxtah	r3, r1, r3
 801f282:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801f284:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801f288:	3304      	adds	r3, #4
 801f28a:	9306      	str	r3, [sp, #24]
 801f28c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f28e:	4283      	cmp	r3, r0
 801f290:	f240 8164 	bls.w	801f55c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3e4>
 801f294:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 801f298:	f04f 0a01 	mov.w	sl, #1
 801f29c:	fbb5 f3f3 	udiv	r3, r5, r3
 801f2a0:	9902      	ldr	r1, [sp, #8]
 801f2a2:	9e06      	ldr	r6, [sp, #24]
 801f2a4:	1acb      	subs	r3, r1, r3
 801f2a6:	b29b      	uxth	r3, r3
 801f2a8:	9316      	str	r3, [sp, #88]	@ 0x58
 801f2aa:	9b06      	ldr	r3, [sp, #24]
 801f2ac:	7836      	ldrb	r6, [r6, #0]
 801f2ae:	7859      	ldrb	r1, [r3, #1]
 801f2b0:	789b      	ldrb	r3, [r3, #2]
 801f2b2:	9612      	str	r6, [sp, #72]	@ 0x48
 801f2b4:	021b      	lsls	r3, r3, #8
 801f2b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801f2ba:	9906      	ldr	r1, [sp, #24]
 801f2bc:	3601      	adds	r6, #1
 801f2be:	78c9      	ldrb	r1, [r1, #3]
 801f2c0:	9605      	str	r6, [sp, #20]
 801f2c2:	430b      	orrs	r3, r1
 801f2c4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f2c6:	46d3      	mov	fp, sl
 801f2c8:	4419      	add	r1, r3
 801f2ca:	1c4e      	adds	r6, r1, #1
 801f2cc:	9603      	str	r6, [sp, #12]
 801f2ce:	7849      	ldrb	r1, [r1, #1]
 801f2d0:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801f2d2:	0209      	lsls	r1, r1, #8
 801f2d4:	5cf3      	ldrb	r3, [r6, r3]
 801f2d6:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801f2da:	4319      	orrs	r1, r3
 801f2dc:	b28b      	uxth	r3, r1
 801f2de:	930c      	str	r3, [sp, #48]	@ 0x30
 801f2e0:	2300      	movs	r3, #0
 801f2e2:	4657      	mov	r7, sl
 801f2e4:	9307      	str	r3, [sp, #28]
 801f2e6:	469c      	mov	ip, r3
 801f2e8:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801f2ec:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801f2f0:	930e      	str	r3, [sp, #56]	@ 0x38
 801f2f2:	2d00      	cmp	r5, #0
 801f2f4:	d07e      	beq.n	801f3f4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 801f2f6:	42af      	cmp	r7, r5
 801f2f8:	d26e      	bcs.n	801f3d8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x260>
 801f2fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f2fc:	1bed      	subs	r5, r5, r7
 801f2fe:	4283      	cmp	r3, r0
 801f300:	b2ad      	uxth	r5, r5
 801f302:	9201      	str	r2, [sp, #4]
 801f304:	d802      	bhi.n	801f30c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 801f306:	e073      	b.n	801f3f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x278>
 801f308:	2b00      	cmp	r3, #0
 801f30a:	d15f      	bne.n	801f3cc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x254>
 801f30c:	9b03      	ldr	r3, [sp, #12]
 801f30e:	f1cb 0207 	rsb	r2, fp, #7
 801f312:	785b      	ldrb	r3, [r3, #1]
 801f314:	4093      	lsls	r3, r2
 801f316:	005b      	lsls	r3, r3, #1
 801f318:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801f31c:	9b03      	ldr	r3, [sp, #12]
 801f31e:	781b      	ldrb	r3, [r3, #0]
 801f320:	fa43 f30b 	asr.w	r3, r3, fp
 801f324:	b2db      	uxtb	r3, r3
 801f326:	4313      	orrs	r3, r2
 801f328:	f10b 0201 	add.w	r2, fp, #1
 801f32c:	fa5f fb82 	uxtb.w	fp, r2
 801f330:	9a03      	ldr	r2, [sp, #12]
 801f332:	f1bb 0f08 	cmp.w	fp, #8
 801f336:	bf15      	itete	ne
 801f338:	3201      	addne	r2, #1
 801f33a:	3202      	addeq	r2, #2
 801f33c:	9203      	strne	r2, [sp, #12]
 801f33e:	9203      	streq	r2, [sp, #12]
 801f340:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f342:	b29f      	uxth	r7, r3
 801f344:	bf08      	it	eq
 801f346:	f04f 0b00 	moveq.w	fp, #0
 801f34a:	42ba      	cmp	r2, r7
 801f34c:	d309      	bcc.n	801f362 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ea>
 801f34e:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801f352:	2301      	movs	r3, #1
 801f354:	9a05      	ldr	r2, [sp, #20]
 801f356:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801f35a:	d30e      	bcc.n	801f37a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x202>
 801f35c:	469a      	mov	sl, r3
 801f35e:	2600      	movs	r6, #0
 801f360:	e035      	b.n	801f3ce <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x256>
 801f362:	9b05      	ldr	r3, [sp, #20]
 801f364:	429f      	cmp	r7, r3
 801f366:	d318      	bcc.n	801f39a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x222>
 801f368:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801f36c:	eb04 030a 	add.w	r3, r4, sl
 801f370:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801f374:	f10a 0301 	add.w	r3, sl, #1
 801f378:	b29b      	uxth	r3, r3
 801f37a:	9a05      	ldr	r2, [sp, #20]
 801f37c:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801f380:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f384:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801f386:	7116      	strb	r6, [r2, #4]
 801f388:	f10a 0601 	add.w	r6, sl, #1
 801f38c:	80d1      	strh	r1, [r2, #6]
 801f38e:	7156      	strb	r6, [r2, #5]
 801f390:	9a05      	ldr	r2, [sp, #20]
 801f392:	3201      	adds	r2, #1
 801f394:	b292      	uxth	r2, r2
 801f396:	9205      	str	r2, [sp, #20]
 801f398:	e7e0      	b.n	801f35c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e4>
 801f39a:	463a      	mov	r2, r7
 801f39c:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801f3a0:	795b      	ldrb	r3, [r3, #5]
 801f3a2:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801f3a6:	4426      	add	r6, r4
 801f3a8:	9919      	ldr	r1, [sp, #100]	@ 0x64
 801f3aa:	eb01 0c06 	add.w	ip, r1, r6
 801f3ae:	f1bc 0f00 	cmp.w	ip, #0
 801f3b2:	dd07      	ble.n	801f3c4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>
 801f3b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f3b8:	f892 c004 	ldrb.w	ip, [r2, #4]
 801f3bc:	f806 cd01 	strb.w	ip, [r6, #-1]!
 801f3c0:	88d2      	ldrh	r2, [r2, #6]
 801f3c2:	e7f1      	b.n	801f3a8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x230>
 801f3c4:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801f3c8:	b29b      	uxth	r3, r3
 801f3ca:	e7c3      	b.n	801f354 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1dc>
 801f3cc:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801f3ce:	970c      	str	r7, [sp, #48]	@ 0x30
 801f3d0:	9a01      	ldr	r2, [sp, #4]
 801f3d2:	46b4      	mov	ip, r6
 801f3d4:	461f      	mov	r7, r3
 801f3d6:	e78c      	b.n	801f2f2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17a>
 801f3d8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f3dc:	1b7b      	subs	r3, r7, r5
 801f3de:	eb0c 0605 	add.w	r6, ip, r5
 801f3e2:	b29b      	uxth	r3, r3
 801f3e4:	9201      	str	r2, [sp, #4]
 801f3e6:	b2b6      	uxth	r6, r6
 801f3e8:	2500      	movs	r5, #0
 801f3ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f3ec:	4282      	cmp	r2, r0
 801f3ee:	d88b      	bhi.n	801f308 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 801f3f0:	9a01      	ldr	r2, [sp, #4]
 801f3f2:	e74b      	b.n	801f28c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x114>
 801f3f4:	4297      	cmp	r7, r2
 801f3f6:	d331      	bcc.n	801f45c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2e4>
 801f3f8:	1abb      	subs	r3, r7, r2
 801f3fa:	b29b      	uxth	r3, r3
 801f3fc:	9208      	str	r2, [sp, #32]
 801f3fe:	9501      	str	r5, [sp, #4]
 801f400:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f402:	29ff      	cmp	r1, #255	@ 0xff
 801f404:	9908      	ldr	r1, [sp, #32]
 801f406:	eb0c 0601 	add.w	r6, ip, r1
 801f40a:	d133      	bne.n	801f474 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>
 801f40c:	f1a0 0e02 	sub.w	lr, r0, #2
 801f410:	b2b6      	uxth	r6, r6
 801f412:	45b4      	cmp	ip, r6
 801f414:	f040 808a 	bne.w	801f52c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3b4>
 801f418:	9908      	ldr	r1, [sp, #32]
 801f41a:	4297      	cmp	r7, r2
 801f41c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801f420:	d3e2      	bcc.n	801f3e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x270>
 801f422:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f424:	9904      	ldr	r1, [sp, #16]
 801f426:	8812      	ldrh	r2, [r2, #0]
 801f428:	1a52      	subs	r2, r2, r1
 801f42a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801f42e:	9a07      	ldr	r2, [sp, #28]
 801f430:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801f432:	3201      	adds	r2, #1
 801f434:	428a      	cmp	r2, r1
 801f436:	9207      	str	r2, [sp, #28]
 801f438:	f040 8085 	bne.w	801f546 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ce>
 801f43c:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 801f440:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 801f444:	9b04      	ldr	r3, [sp, #16]
 801f446:	1bed      	subs	r5, r5, r7
 801f448:	b2ad      	uxth	r5, r5
 801f44a:	2d00      	cmp	r5, #0
 801f44c:	bf0c      	ite	eq
 801f44e:	461a      	moveq	r2, r3
 801f450:	2200      	movne	r2, #0
 801f452:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f454:	b292      	uxth	r2, r2
 801f456:	3301      	adds	r3, #1
 801f458:	930d      	str	r3, [sp, #52]	@ 0x34
 801f45a:	e70e      	b.n	801f27a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x102>
 801f45c:	1bd1      	subs	r1, r2, r7
 801f45e:	b28b      	uxth	r3, r1
 801f460:	9301      	str	r3, [sp, #4]
 801f462:	9708      	str	r7, [sp, #32]
 801f464:	462b      	mov	r3, r5
 801f466:	e7cb      	b.n	801f400 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x288>
 801f468:	2005b928 	.word	0x2005b928
 801f46c:	2005b922 	.word	0x2005b922
 801f470:	fffff7fb 	.word	0xfffff7fb
 801f474:	b2b6      	uxth	r6, r6
 801f476:	900b      	str	r0, [sp, #44]	@ 0x2c
 801f478:	45b4      	cmp	ip, r6
 801f47a:	d0cd      	beq.n	801f418 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a0>
 801f47c:	f10c 0101 	add.w	r1, ip, #1
 801f480:	44a4      	add	ip, r4
 801f482:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 801f486:	9117      	str	r1, [sp, #92]	@ 0x5c
 801f488:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f48a:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801f48e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f490:	ea4f 2825 	mov.w	r8, r5, asr #8
 801f494:	f8b1 c000 	ldrh.w	ip, [r1]
 801f498:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f49a:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 801f49e:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801f4a2:	fb1e fe01 	smulbb	lr, lr, r1
 801f4a6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f4a8:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 801f4ac:	fb08 e801 	mla	r8, r8, r1, lr
 801f4b0:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801f4b4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f4b6:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801f4ba:	fb19 f901 	smulbb	r9, r9, r1
 801f4be:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 801f4c2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f4c4:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801f4c8:	fb0e 9e01 	mla	lr, lr, r1, r9
 801f4cc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f4d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f4d2:	fa5f fc8c 	uxtb.w	ip, ip
 801f4d6:	fb1c fc01 	smulbb	ip, ip, r1
 801f4da:	00ed      	lsls	r5, r5, #3
 801f4dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f4de:	b2ed      	uxtb	r5, r5
 801f4e0:	fb05 c501 	mla	r5, r5, r1, ip
 801f4e4:	fa1f f888 	uxth.w	r8, r8
 801f4e8:	fa1f fe8e 	uxth.w	lr, lr
 801f4ec:	b2ad      	uxth	r5, r5
 801f4ee:	f108 0c01 	add.w	ip, r8, #1
 801f4f2:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801f4f6:	f10e 0901 	add.w	r9, lr, #1
 801f4fa:	f105 0c01 	add.w	ip, r5, #1
 801f4fe:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801f502:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 801f506:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f50a:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 801f50e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f512:	ea4c 0808 	orr.w	r8, ip, r8
 801f516:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f518:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801f51c:	ea48 0809 	orr.w	r8, r8, r9
 801f520:	f821 8b02 	strh.w	r8, [r1], #2
 801f524:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f526:	f8bd c05c 	ldrh.w	ip, [sp, #92]	@ 0x5c
 801f52a:	e7a5      	b.n	801f478 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>
 801f52c:	f10c 0801 	add.w	r8, ip, #1
 801f530:	44a4      	add	ip, r4
 801f532:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 801f536:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f538:	fa1f fc88 	uxth.w	ip, r8
 801f53c:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801f540:	f82e 5f02 	strh.w	r5, [lr, #2]!
 801f544:	e765      	b.n	801f412 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29a>
 801f546:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f54a:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801f54e:	1aad      	subs	r5, r5, r2
 801f550:	b2ad      	uxth	r5, r5
 801f552:	2d00      	cmp	r5, #0
 801f554:	bf18      	it	ne
 801f556:	2200      	movne	r2, #0
 801f558:	9201      	str	r2, [sp, #4]
 801f55a:	e746      	b.n	801f3ea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 801f55c:	4b03      	ldr	r3, [pc, #12]	@ (801f56c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f4>)
 801f55e:	6818      	ldr	r0, [r3, #0]
 801f560:	6803      	ldr	r3, [r0, #0]
 801f562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f564:	4798      	blx	r3
 801f566:	b01f      	add	sp, #124	@ 0x7c
 801f568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f56c:	2005b928 	.word	0x2005b928

0801f570 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h>:
 801f570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f574:	b093      	sub	sp, #76	@ 0x4c
 801f576:	4616      	mov	r6, r2
 801f578:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 801f57c:	9003      	str	r0, [sp, #12]
 801f57e:	460d      	mov	r5, r1
 801f580:	9201      	str	r2, [sp, #4]
 801f582:	2a00      	cmp	r2, #0
 801f584:	f000 8304 	beq.w	801fb90 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x620>
 801f588:	6830      	ldr	r0, [r6, #0]
 801f58a:	6871      	ldr	r1, [r6, #4]
 801f58c:	ac0e      	add	r4, sp, #56	@ 0x38
 801f58e:	c403      	stmia	r4!, {r0, r1}
 801f590:	6818      	ldr	r0, [r3, #0]
 801f592:	6859      	ldr	r1, [r3, #4]
 801f594:	ac10      	add	r4, sp, #64	@ 0x40
 801f596:	c403      	stmia	r4!, {r0, r1}
 801f598:	a80e      	add	r0, sp, #56	@ 0x38
 801f59a:	f7f8 ffbd 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f59e:	4631      	mov	r1, r6
 801f5a0:	a810      	add	r0, sp, #64	@ 0x40
 801f5a2:	f7f8 ffe1 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f5a6:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801f5aa:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801f5ae:	bfdd      	ittte	le
 801f5b0:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801f5b4:	b293      	uxthle	r3, r2
 801f5b6:	fb91 f3f3 	sdivle	r3, r1, r3
 801f5ba:	2301      	movgt	r3, #1
 801f5bc:	9304      	str	r3, [sp, #16]
 801f5be:	f105 0308 	add.w	r3, r5, #8
 801f5c2:	9904      	ldr	r1, [sp, #16]
 801f5c4:	9308      	str	r3, [sp, #32]
 801f5c6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801f5ca:	440b      	add	r3, r1
 801f5cc:	3b01      	subs	r3, #1
 801f5ce:	fb93 f3f1 	sdiv	r3, r3, r1
 801f5d2:	9908      	ldr	r1, [sp, #32]
 801f5d4:	3b01      	subs	r3, #1
 801f5d6:	b29b      	uxth	r3, r3
 801f5d8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801f5dc:	9309      	str	r3, [sp, #36]	@ 0x24
 801f5de:	9904      	ldr	r1, [sp, #16]
 801f5e0:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801f5e4:	fb93 f0f1 	sdiv	r0, r3, r1
 801f5e8:	b284      	uxth	r4, r0
 801f5ea:	9405      	str	r4, [sp, #20]
 801f5ec:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801f5f0:	fb05 3914 	mls	r9, r5, r4, r3
 801f5f4:	fb19 f902 	smulbb	r9, r9, r2
 801f5f8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801f5fc:	4489      	add	r9, r1
 801f5fe:	fa1f f989 	uxth.w	r9, r9
 801f602:	2d00      	cmp	r5, #0
 801f604:	d05d      	beq.n	801f6c2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x152>
 801f606:	9808      	ldr	r0, [sp, #32]
 801f608:	1e6a      	subs	r2, r5, #1
 801f60a:	f850 a022 	ldr.w	sl, [r0, r2, lsl #2]
 801f60e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f610:	fa9a fa8a 	rev.w	sl, sl
 801f614:	4492      	add	sl, r2
 801f616:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801f61a:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801f61e:	4411      	add	r1, r2
 801f620:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801f624:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801f628:	4413      	add	r3, r2
 801f62a:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801f62e:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801f632:	f04f 0600 	mov.w	r6, #0
 801f636:	9302      	str	r3, [sp, #8]
 801f638:	4bca      	ldr	r3, [pc, #808]	@ (801f964 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f4>)
 801f63a:	6818      	ldr	r0, [r3, #0]
 801f63c:	6803      	ldr	r3, [r0, #0]
 801f63e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f640:	4798      	blx	r3
 801f642:	4bc9      	ldr	r3, [pc, #804]	@ (801f968 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f8>)
 801f644:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801f648:	881b      	ldrh	r3, [r3, #0]
 801f64a:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 801f64e:	2100      	movs	r1, #0
 801f650:	fb03 2404 	mla	r4, r3, r4, r2
 801f654:	436b      	muls	r3, r5
 801f656:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f65a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f65e:	930d      	str	r3, [sp, #52]	@ 0x34
 801f660:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801f664:	2280      	movs	r2, #128	@ 0x80
 801f666:	fb99 f3f3 	sdiv	r3, r9, r3
 801f66a:	9306      	str	r3, [sp, #24]
 801f66c:	9b01      	ldr	r3, [sp, #4]
 801f66e:	43db      	mvns	r3, r3
 801f670:	b2db      	uxtb	r3, r3
 801f672:	930a      	str	r3, [sp, #40]	@ 0x28
 801f674:	9b03      	ldr	r3, [sp, #12]
 801f676:	3304      	adds	r3, #4
 801f678:	4618      	mov	r0, r3
 801f67a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f67c:	f00c fca8 	bl	802bfd0 <memset>
 801f680:	4bba      	ldr	r3, [pc, #744]	@ (801f96c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3fc>)
 801f682:	9300      	str	r3, [sp, #0]
 801f684:	2300      	movs	r3, #0
 801f686:	9307      	str	r3, [sp, #28]
 801f688:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f68a:	42a3      	cmp	r3, r4
 801f68c:	f240 827b 	bls.w	801fb86 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x616>
 801f690:	f04f 0e07 	mov.w	lr, #7
 801f694:	f1b9 0f00 	cmp.w	r9, #0
 801f698:	f000 8159 	beq.w	801f94e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3de>
 801f69c:	f89a 5000 	ldrb.w	r5, [sl]
 801f6a0:	f10a 0701 	add.w	r7, sl, #1
 801f6a4:	b2ed      	uxtb	r5, r5
 801f6a6:	11aa      	asrs	r2, r5, #6
 801f6a8:	d10e      	bne.n	801f6c8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x158>
 801f6aa:	9b03      	ldr	r3, [sp, #12]
 801f6ac:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 801f6b0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801f6b4:	88ae      	ldrh	r6, [r5, #4]
 801f6b6:	f109 39ff 	add.w	r9, r9, #4294967295
 801f6ba:	fa1f f989 	uxth.w	r9, r9
 801f6be:	46ba      	mov	sl, r7
 801f6c0:	e7e8      	b.n	801f694 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x124>
 801f6c2:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 801f6c6:	e7a6      	b.n	801f616 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0xa6>
 801f6c8:	2a01      	cmp	r2, #1
 801f6ca:	d129      	bne.n	801f720 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1b0>
 801f6cc:	2103      	movs	r1, #3
 801f6ce:	f3c6 0304 	ubfx	r3, r6, #0, #5
 801f6d2:	f005 0203 	and.w	r2, r5, #3
 801f6d6:	3b02      	subs	r3, #2
 801f6d8:	4413      	add	r3, r2
 801f6da:	f003 031f 	and.w	r3, r3, #31
 801f6de:	f3c5 0281 	ubfx	r2, r5, #2, #2
 801f6e2:	f363 0604 	bfi	r6, r3, #0, #5
 801f6e6:	3a02      	subs	r2, #2
 801f6e8:	eb02 1256 	add.w	r2, r2, r6, lsr #5
 801f6ec:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801f6f0:	f3c5 1501 	ubfx	r5, r5, #4, #2
 801f6f4:	f362 164a 	bfi	r6, r2, #5, #6
 801f6f8:	3d02      	subs	r5, #2
 801f6fa:	eb05 25d6 	add.w	r5, r5, r6, lsr #11
 801f6fe:	f005 051f 	and.w	r5, r5, #31
 801f702:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801f706:	fb11 2205 	smlabb	r2, r1, r5, r2
 801f70a:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801f70e:	9a03      	ldr	r2, [sp, #12]
 801f710:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f714:	f365 26cf 	bfi	r6, r5, #11, #5
 801f718:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f71c:	809e      	strh	r6, [r3, #4]
 801f71e:	e7ca      	b.n	801f6b6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x146>
 801f720:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 801f724:	2a02      	cmp	r2, #2
 801f726:	b2ab      	uxth	r3, r5
 801f728:	d136      	bne.n	801f798 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 801f72a:	2101      	movs	r1, #1
 801f72c:	fb12 1205 	smlabb	r2, r2, r5, r1
 801f730:	4492      	add	sl, r2
 801f732:	463a      	mov	r2, r7
 801f734:	4552      	cmp	r2, sl
 801f736:	d01c      	beq.n	801f772 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x202>
 801f738:	4694      	mov	ip, r2
 801f73a:	f04f 0b03 	mov.w	fp, #3
 801f73e:	f81c 1b02 	ldrb.w	r1, [ip], #2
 801f742:	7852      	ldrb	r2, [r2, #1]
 801f744:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801f748:	f3c1 1045 	ubfx	r0, r1, #5, #6
 801f74c:	ea4f 28d1 	mov.w	r8, r1, lsr #11
 801f750:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801f754:	fb1b 0008 	smlabb	r0, fp, r8, r0
 801f758:	f001 021f 	and.w	r2, r1, #31
 801f75c:	fb1e 0002 	smlabb	r0, lr, r2, r0
 801f760:	9a03      	ldr	r2, [sp, #12]
 801f762:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 801f766:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f76a:	460e      	mov	r6, r1
 801f76c:	8081      	strh	r1, [r0, #4]
 801f76e:	4662      	mov	r2, ip
 801f770:	e7e0      	b.n	801f734 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1c4>
 801f772:	4599      	cmp	r9, r3
 801f774:	d20b      	bcs.n	801f78e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21e>
 801f776:	eba5 0509 	sub.w	r5, r5, r9
 801f77a:	2d00      	cmp	r5, #0
 801f77c:	eb07 0749 	add.w	r7, r7, r9, lsl #1
 801f780:	f300 8209 	bgt.w	801fb96 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x626>
 801f784:	2301      	movs	r3, #1
 801f786:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801f78a:	9307      	str	r3, [sp, #28]
 801f78c:	e00c      	b.n	801f7a8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 801f78e:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 801f792:	eba9 0903 	sub.w	r9, r9, r3
 801f796:	e790      	b.n	801f6ba <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x14a>
 801f798:	4599      	cmp	r9, r3
 801f79a:	d2fa      	bcs.n	801f792 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x222>
 801f79c:	eba5 0509 	sub.w	r5, r5, r9
 801f7a0:	2d00      	cmp	r5, #0
 801f7a2:	dc1d      	bgt.n	801f7e0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x270>
 801f7a4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801f7a8:	f04f 0b00 	mov.w	fp, #0
 801f7ac:	f1b8 0f00 	cmp.w	r8, #0
 801f7b0:	f340 81a1 	ble.w	801faf6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x586>
 801f7b4:	783b      	ldrb	r3, [r7, #0]
 801f7b6:	f107 0a01 	add.w	sl, r7, #1
 801f7ba:	b2db      	uxtb	r3, r3
 801f7bc:	119a      	asrs	r2, r3, #6
 801f7be:	f040 80d7 	bne.w	801f970 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x400>
 801f7c2:	9a03      	ldr	r2, [sp, #12]
 801f7c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f7c8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f7cc:	889e      	ldrh	r6, [r3, #4]
 801f7ce:	9b01      	ldr	r3, [sp, #4]
 801f7d0:	2bff      	cmp	r3, #255	@ 0xff
 801f7d2:	f040 81e9 	bne.w	801fba8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x638>
 801f7d6:	8026      	strh	r6, [r4, #0]
 801f7d8:	f108 38ff 	add.w	r8, r8, #4294967295
 801f7dc:	3402      	adds	r4, #2
 801f7de:	e0be      	b.n	801f95e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 801f7e0:	9b02      	ldr	r3, [sp, #8]
 801f7e2:	9a02      	ldr	r2, [sp, #8]
 801f7e4:	42ab      	cmp	r3, r5
 801f7e6:	bfa8      	it	ge
 801f7e8:	462b      	movge	r3, r5
 801f7ea:	eba2 0803 	sub.w	r8, r2, r3
 801f7ee:	9a07      	ldr	r2, [sp, #28]
 801f7f0:	1aed      	subs	r5, r5, r3
 801f7f2:	2a00      	cmp	r2, #0
 801f7f4:	d05a      	beq.n	801f8ac <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x33c>
 801f7f6:	9a01      	ldr	r2, [sp, #4]
 801f7f8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f7fc:	2aff      	cmp	r2, #255	@ 0xff
 801f7fe:	d049      	beq.n	801f894 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 801f800:	f8bd e004 	ldrh.w	lr, [sp, #4]
 801f804:	f8bd 9028 	ldrh.w	r9, [sp, #40]	@ 0x28
 801f808:	42a3      	cmp	r3, r4
 801f80a:	f240 80a5 	bls.w	801f958 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 801f80e:	46bc      	mov	ip, r7
 801f810:	8820      	ldrh	r0, [r4, #0]
 801f812:	f81c 2b02 	ldrb.w	r2, [ip], #2
 801f816:	7879      	ldrb	r1, [r7, #1]
 801f818:	ea4f 2a20 	mov.w	sl, r0, asr #8
 801f81c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801f820:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 801f824:	b212      	sxth	r2, r2
 801f826:	fb1a fa09 	smulbb	sl, sl, r9
 801f82a:	b291      	uxth	r1, r2
 801f82c:	120f      	asrs	r7, r1, #8
 801f82e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f832:	fb07 a70e 	mla	r7, r7, lr, sl
 801f836:	ea4f 0ae0 	mov.w	sl, r0, asr #3
 801f83a:	00c0      	lsls	r0, r0, #3
 801f83c:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801f840:	b2c0      	uxtb	r0, r0
 801f842:	fb1a fa09 	smulbb	sl, sl, r9
 801f846:	fb10 f009 	smulbb	r0, r0, r9
 801f84a:	10c9      	asrs	r1, r1, #3
 801f84c:	00d2      	lsls	r2, r2, #3
 801f84e:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801f852:	b2d2      	uxtb	r2, r2
 801f854:	fb01 a10e 	mla	r1, r1, lr, sl
 801f858:	fb02 020e 	mla	r2, r2, lr, r0
 801f85c:	b2bf      	uxth	r7, r7
 801f85e:	b289      	uxth	r1, r1
 801f860:	b292      	uxth	r2, r2
 801f862:	1c78      	adds	r0, r7, #1
 801f864:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801f868:	f101 0a01 	add.w	sl, r1, #1
 801f86c:	1c50      	adds	r0, r2, #1
 801f86e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801f872:	eb0a 2a11 	add.w	sl, sl, r1, lsr #8
 801f876:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801f87a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801f87e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f882:	4307      	orrs	r7, r0
 801f884:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f888:	ea47 070a 	orr.w	r7, r7, sl
 801f88c:	f824 7b02 	strh.w	r7, [r4], #2
 801f890:	4667      	mov	r7, ip
 801f892:	e7b9      	b.n	801f808 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x298>
 801f894:	42a3      	cmp	r3, r4
 801f896:	d95f      	bls.n	801f958 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 801f898:	463a      	mov	r2, r7
 801f89a:	f812 1b02 	ldrb.w	r1, [r2], #2
 801f89e:	7878      	ldrb	r0, [r7, #1]
 801f8a0:	4617      	mov	r7, r2
 801f8a2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 801f8a6:	f824 1b02 	strh.w	r1, [r4], #2
 801f8aa:	e7f3      	b.n	801f894 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 801f8ac:	9901      	ldr	r1, [sp, #4]
 801f8ae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f8b2:	29ff      	cmp	r1, #255	@ 0xff
 801f8b4:	b2b2      	uxth	r2, r6
 801f8b6:	d044      	beq.n	801f942 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 801f8b8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801f8bc:	ea4f 2922 	mov.w	r9, r2, asr #8
 801f8c0:	4608      	mov	r0, r1
 801f8c2:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801f8c6:	f009 09f8 	and.w	r9, r9, #248	@ 0xf8
 801f8ca:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801f8ce:	fb09 f901 	mul.w	r9, r9, r1
 801f8d2:	fb0e fe01 	mul.w	lr, lr, r1
 801f8d6:	00d1      	lsls	r1, r2, #3
 801f8d8:	b2c9      	uxtb	r1, r1
 801f8da:	4341      	muls	r1, r0
 801f8dc:	f8bd a028 	ldrh.w	sl, [sp, #40]	@ 0x28
 801f8e0:	429c      	cmp	r4, r3
 801f8e2:	f4bf af61 	bcs.w	801f7a8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 801f8e6:	8822      	ldrh	r2, [r4, #0]
 801f8e8:	1210      	asrs	r0, r2, #8
 801f8ea:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 801f8ee:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801f8f2:	00d2      	lsls	r2, r2, #3
 801f8f4:	fb00 900a 	mla	r0, r0, sl, r9
 801f8f8:	b2d2      	uxtb	r2, r2
 801f8fa:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801f8fe:	fb02 120a 	mla	r2, r2, sl, r1
 801f902:	fb0c ec0a 	mla	ip, ip, sl, lr
 801f906:	b280      	uxth	r0, r0
 801f908:	b292      	uxth	r2, r2
 801f90a:	f100 0b01 	add.w	fp, r0, #1
 801f90e:	fa1f fc8c 	uxth.w	ip, ip
 801f912:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 801f916:	1c50      	adds	r0, r2, #1
 801f918:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801f91c:	f10c 0201 	add.w	r2, ip, #1
 801f920:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801f924:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 801f928:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801f92c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801f930:	ea40 0b0b 	orr.w	fp, r0, fp
 801f934:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 801f938:	ea4b 0b0c 	orr.w	fp, fp, ip
 801f93c:	f824 bb02 	strh.w	fp, [r4], #2
 801f940:	e7ce      	b.n	801f8e0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x370>
 801f942:	429c      	cmp	r4, r3
 801f944:	f4bf af30 	bcs.w	801f7a8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 801f948:	f824 2b02 	strh.w	r2, [r4], #2
 801f94c:	e7f9      	b.n	801f942 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 801f94e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801f952:	4657      	mov	r7, sl
 801f954:	464d      	mov	r5, r9
 801f956:	e727      	b.n	801f7a8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 801f958:	2300      	movs	r3, #0
 801f95a:	e716      	b.n	801f78a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21a>
 801f95c:	44bb      	add	fp, r7
 801f95e:	4657      	mov	r7, sl
 801f960:	e724      	b.n	801f7ac <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x23c>
 801f962:	bf00      	nop
 801f964:	2005b928 	.word	0x2005b928
 801f968:	2005b922 	.word	0x2005b922
 801f96c:	20045700 	.word	0x20045700
 801f970:	2a01      	cmp	r2, #1
 801f972:	d12a      	bne.n	801f9ca <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x45a>
 801f974:	f3c6 0104 	ubfx	r1, r6, #0, #5
 801f978:	f003 0203 	and.w	r2, r3, #3
 801f97c:	3902      	subs	r1, #2
 801f97e:	4411      	add	r1, r2
 801f980:	f001 011f 	and.w	r1, r1, #31
 801f984:	f3c3 0081 	ubfx	r0, r3, #2, #2
 801f988:	f361 0604 	bfi	r6, r1, #0, #5
 801f98c:	3802      	subs	r0, #2
 801f98e:	eb00 1056 	add.w	r0, r0, r6, lsr #5
 801f992:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 801f996:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801f99a:	f360 164a 	bfi	r6, r0, #5, #6
 801f99e:	3b02      	subs	r3, #2
 801f9a0:	eb03 22d6 	add.w	r2, r3, r6, lsr #11
 801f9a4:	f002 031f 	and.w	r3, r2, #31
 801f9a8:	2203      	movs	r2, #3
 801f9aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801f9ae:	f363 26cf 	bfi	r6, r3, #11, #5
 801f9b2:	fb12 0303 	smlabb	r3, r2, r3, r0
 801f9b6:	2207      	movs	r2, #7
 801f9b8:	fb12 3301 	smlabb	r3, r2, r1, r3
 801f9bc:	9a03      	ldr	r2, [sp, #12]
 801f9be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f9c2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f9c6:	809e      	strh	r6, [r3, #4]
 801f9c8:	e701      	b.n	801f7ce <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x25e>
 801f9ca:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 801f9ce:	45a8      	cmp	r8, r5
 801f9d0:	4647      	mov	r7, r8
 801f9d2:	bfa8      	it	ge
 801f9d4:	462f      	movge	r7, r5
 801f9d6:	2a02      	cmp	r2, #2
 801f9d8:	d154      	bne.n	801fa84 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x514>
 801f9da:	9b01      	ldr	r3, [sp, #4]
 801f9dc:	2bff      	cmp	r3, #255	@ 0xff
 801f9de:	d01a      	beq.n	801fa16 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 801f9e0:	eb0b 0307 	add.w	r3, fp, r7
 801f9e4:	2b40      	cmp	r3, #64	@ 0x40
 801f9e6:	dd16      	ble.n	801fa16 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 801f9e8:	ea4f 094b 	mov.w	r9, fp, lsl #1
 801f9ec:	4649      	mov	r1, r9
 801f9ee:	9800      	ldr	r0, [sp, #0]
 801f9f0:	f7f2 fd8a 	bl	8012508 <_ZN8touchgfx5paint9flushLineEPmi>
 801f9f4:	465a      	mov	r2, fp
 801f9f6:	9b01      	ldr	r3, [sp, #4]
 801f9f8:	4620      	mov	r0, r4
 801f9fa:	9900      	ldr	r1, [sp, #0]
 801f9fc:	f7f2 fde2 	bl	80125c4 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 801fa00:	9b00      	ldr	r3, [sp, #0]
 801fa02:	f04f 0b00 	mov.w	fp, #0
 801fa06:	461a      	mov	r2, r3
 801fa08:	4b6b      	ldr	r3, [pc, #428]	@ (801fbb8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 801fa0a:	444c      	add	r4, r9
 801fa0c:	429a      	cmp	r2, r3
 801fa0e:	bf0c      	ite	eq
 801fa10:	4b6a      	ldreq	r3, [pc, #424]	@ (801fbbc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 801fa12:	4b69      	ldrne	r3, [pc, #420]	@ (801fbb8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 801fa14:	9300      	str	r3, [sp, #0]
 801fa16:	4652      	mov	r2, sl
 801fa18:	2100      	movs	r1, #0
 801fa1a:	42a9      	cmp	r1, r5
 801fa1c:	da2c      	bge.n	801fa78 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x508>
 801fa1e:	4694      	mov	ip, r2
 801fa20:	f04f 0903 	mov.w	r9, #3
 801fa24:	f81c 3b02 	ldrb.w	r3, [ip], #2
 801fa28:	7852      	ldrb	r2, [r2, #1]
 801fa2a:	42b9      	cmp	r1, r7
 801fa2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801fa30:	f3c3 1045 	ubfx	r0, r3, #5, #6
 801fa34:	ea4f 2ed3 	mov.w	lr, r3, lsr #11
 801fa38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801fa3c:	fb19 000e 	smlabb	r0, r9, lr, r0
 801fa40:	f04f 0e07 	mov.w	lr, #7
 801fa44:	f003 021f 	and.w	r2, r3, #31
 801fa48:	fb1e 0002 	smlabb	r0, lr, r2, r0
 801fa4c:	9a03      	ldr	r2, [sp, #12]
 801fa4e:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 801fa52:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801fa56:	461e      	mov	r6, r3
 801fa58:	8083      	strh	r3, [r0, #4]
 801fa5a:	da0a      	bge.n	801fa72 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x502>
 801fa5c:	9a01      	ldr	r2, [sp, #4]
 801fa5e:	2aff      	cmp	r2, #255	@ 0xff
 801fa60:	bf15      	itete	ne
 801fa62:	9a00      	ldrne	r2, [sp, #0]
 801fa64:	8023      	strheq	r3, [r4, #0]
 801fa66:	f822 301b 	strhne.w	r3, [r2, fp, lsl #1]
 801fa6a:	3402      	addeq	r4, #2
 801fa6c:	bf18      	it	ne
 801fa6e:	f10b 0b01 	addne.w	fp, fp, #1
 801fa72:	3101      	adds	r1, #1
 801fa74:	4662      	mov	r2, ip
 801fa76:	e7d0      	b.n	801fa1a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4aa>
 801fa78:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 801fa7c:	eba8 0807 	sub.w	r8, r8, r7
 801fa80:	1bed      	subs	r5, r5, r7
 801fa82:	e76c      	b.n	801f95e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 801fa84:	9b01      	ldr	r3, [sp, #4]
 801fa86:	eba8 0807 	sub.w	r8, r8, r7
 801fa8a:	2bff      	cmp	r3, #255	@ 0xff
 801fa8c:	eba5 0507 	sub.w	r5, r5, r7
 801fa90:	fa1f f986 	uxth.w	r9, r6
 801fa94:	d027      	beq.n	801fae6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x576>
 801fa96:	eb0b 0307 	add.w	r3, fp, r7
 801fa9a:	2b40      	cmp	r3, #64	@ 0x40
 801fa9c:	dd18      	ble.n	801fad0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x560>
 801fa9e:	ea4f 034b 	mov.w	r3, fp, lsl #1
 801faa2:	4619      	mov	r1, r3
 801faa4:	9800      	ldr	r0, [sp, #0]
 801faa6:	930c      	str	r3, [sp, #48]	@ 0x30
 801faa8:	f7f2 fd2e 	bl	8012508 <_ZN8touchgfx5paint9flushLineEPmi>
 801faac:	465a      	mov	r2, fp
 801faae:	9b01      	ldr	r3, [sp, #4]
 801fab0:	4620      	mov	r0, r4
 801fab2:	9900      	ldr	r1, [sp, #0]
 801fab4:	f7f2 fd86 	bl	80125c4 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 801fab8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801faba:	f04f 0b00 	mov.w	fp, #0
 801fabe:	441c      	add	r4, r3
 801fac0:	9b00      	ldr	r3, [sp, #0]
 801fac2:	461a      	mov	r2, r3
 801fac4:	4b3c      	ldr	r3, [pc, #240]	@ (801fbb8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 801fac6:	429a      	cmp	r2, r3
 801fac8:	bf0c      	ite	eq
 801faca:	4b3c      	ldreq	r3, [pc, #240]	@ (801fbbc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 801facc:	4b3a      	ldrne	r3, [pc, #232]	@ (801fbb8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 801face:	9300      	str	r3, [sp, #0]
 801fad0:	9b00      	ldr	r3, [sp, #0]
 801fad2:	eb03 024b 	add.w	r2, r3, fp, lsl #1
 801fad6:	463b      	mov	r3, r7
 801fad8:	2b00      	cmp	r3, #0
 801fada:	f43f af3f 	beq.w	801f95c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ec>
 801fade:	f822 9b02 	strh.w	r9, [r2], #2
 801fae2:	3b01      	subs	r3, #1
 801fae4:	e7f8      	b.n	801fad8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x568>
 801fae6:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 801faea:	42a7      	cmp	r7, r4
 801faec:	f67f af37 	bls.w	801f95e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 801faf0:	f824 9b02 	strh.w	r9, [r4], #2
 801faf4:	e7f9      	b.n	801faea <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x57a>
 801faf6:	f1bb 0f00 	cmp.w	fp, #0
 801fafa:	d00c      	beq.n	801fb16 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5a6>
 801fafc:	ea4f 084b 	mov.w	r8, fp, lsl #1
 801fb00:	4641      	mov	r1, r8
 801fb02:	9800      	ldr	r0, [sp, #0]
 801fb04:	f7f2 fd00 	bl	8012508 <_ZN8touchgfx5paint9flushLineEPmi>
 801fb08:	4620      	mov	r0, r4
 801fb0a:	9b01      	ldr	r3, [sp, #4]
 801fb0c:	465a      	mov	r2, fp
 801fb0e:	9900      	ldr	r1, [sp, #0]
 801fb10:	f7f2 fd58 	bl	80125c4 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 801fb14:	4444      	add	r4, r8
 801fb16:	4b2a      	ldr	r3, [pc, #168]	@ (801fbc0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x650>)
 801fb18:	9a02      	ldr	r2, [sp, #8]
 801fb1a:	881b      	ldrh	r3, [r3, #0]
 801fb1c:	1a9b      	subs	r3, r3, r2
 801fb1e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fb22:	9b06      	ldr	r3, [sp, #24]
 801fb24:	3301      	adds	r3, #1
 801fb26:	9306      	str	r3, [sp, #24]
 801fb28:	9a06      	ldr	r2, [sp, #24]
 801fb2a:	9b04      	ldr	r3, [sp, #16]
 801fb2c:	4293      	cmp	r3, r2
 801fb2e:	d120      	bne.n	801fb72 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x602>
 801fb30:	9b05      	ldr	r3, [sp, #20]
 801fb32:	9a05      	ldr	r2, [sp, #20]
 801fb34:	f103 0801 	add.w	r8, r3, #1
 801fb38:	9b08      	ldr	r3, [sp, #32]
 801fb3a:	2100      	movs	r1, #0
 801fb3c:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801fb40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb42:	ba3f      	rev	r7, r7
 801fb44:	2280      	movs	r2, #128	@ 0x80
 801fb46:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801fb48:	441f      	add	r7, r3
 801fb4a:	f8bd 9040 	ldrh.w	r9, [sp, #64]	@ 0x40
 801fb4e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801fb52:	f00c fa3d 	bl	802bfd0 <memset>
 801fb56:	2300      	movs	r3, #0
 801fb58:	f04f 0600 	mov.w	r6, #0
 801fb5c:	eba9 0905 	sub.w	r9, r9, r5
 801fb60:	fa1f f989 	uxth.w	r9, r9
 801fb64:	f8cd 8014 	str.w	r8, [sp, #20]
 801fb68:	9306      	str	r3, [sp, #24]
 801fb6a:	f7f2 fcb5 	bl	80124d8 <_ZN8touchgfx5paint8tearDownEv>
 801fb6e:	46ba      	mov	sl, r7
 801fb70:	e58a      	b.n	801f688 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x118>
 801fb72:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 801fb76:	9b02      	ldr	r3, [sp, #8]
 801fb78:	eba9 0903 	sub.w	r9, r9, r3
 801fb7c:	eba9 0505 	sub.w	r5, r9, r5
 801fb80:	fa1f f985 	uxth.w	r9, r5
 801fb84:	e7f1      	b.n	801fb6a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5fa>
 801fb86:	4b0f      	ldr	r3, [pc, #60]	@ (801fbc4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x654>)
 801fb88:	6818      	ldr	r0, [r3, #0]
 801fb8a:	6803      	ldr	r3, [r0, #0]
 801fb8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fb8e:	4798      	blx	r3
 801fb90:	b013      	add	sp, #76	@ 0x4c
 801fb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb96:	9b02      	ldr	r3, [sp, #8]
 801fb98:	9a02      	ldr	r2, [sp, #8]
 801fb9a:	42ab      	cmp	r3, r5
 801fb9c:	bfa8      	it	ge
 801fb9e:	462b      	movge	r3, r5
 801fba0:	eba2 0803 	sub.w	r8, r2, r3
 801fba4:	1aed      	subs	r5, r5, r3
 801fba6:	e626      	b.n	801f7f6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x286>
 801fba8:	f108 38ff 	add.w	r8, r8, #4294967295
 801fbac:	fa1f f986 	uxth.w	r9, r6
 801fbb0:	2500      	movs	r5, #0
 801fbb2:	2701      	movs	r7, #1
 801fbb4:	e76f      	b.n	801fa96 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x526>
 801fbb6:	bf00      	nop
 801fbb8:	20045700 	.word	0x20045700
 801fbbc:	20045800 	.word	0x20045800
 801fbc0:	2005b922 	.word	0x2005b922
 801fbc4:	2005b928 	.word	0x2005b928

0801fbc8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801fbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbcc:	b08f      	sub	sp, #60	@ 0x3c
 801fbce:	9203      	str	r2, [sp, #12]
 801fbd0:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801fbd4:	461c      	mov	r4, r3
 801fbd6:	460f      	mov	r7, r1
 801fbd8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801fbda:	9202      	str	r2, [sp, #8]
 801fbdc:	2a00      	cmp	r2, #0
 801fbde:	f000 812a 	beq.w	801fe36 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26e>
 801fbe2:	6820      	ldr	r0, [r4, #0]
 801fbe4:	6861      	ldr	r1, [r4, #4]
 801fbe6:	aa0a      	add	r2, sp, #40	@ 0x28
 801fbe8:	c203      	stmia	r2!, {r0, r1}
 801fbea:	6818      	ldr	r0, [r3, #0]
 801fbec:	6859      	ldr	r1, [r3, #4]
 801fbee:	aa0c      	add	r2, sp, #48	@ 0x30
 801fbf0:	c203      	stmia	r2!, {r0, r1}
 801fbf2:	a80a      	add	r0, sp, #40	@ 0x28
 801fbf4:	f7f8 fc90 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fbf8:	4621      	mov	r1, r4
 801fbfa:	a80c      	add	r0, sp, #48	@ 0x30
 801fbfc:	f7f8 fcb4 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fc00:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801fc04:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801fc08:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801fc0c:	bfdd      	ittte	le
 801fc0e:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801fc12:	b2b3      	uxthle	r3, r6
 801fc14:	fb92 f3f3 	sdivle	r3, r2, r3
 801fc18:	2301      	movgt	r3, #1
 801fc1a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801fc1e:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801fc22:	fb92 f1f3 	sdiv	r1, r2, r3
 801fc26:	fa1f fc81 	uxth.w	ip, r1
 801fc2a:	4661      	mov	r1, ip
 801fc2c:	fb0c 2413 	mls	r4, ip, r3, r2
 801fc30:	fb14 f406 	smulbb	r4, r4, r6
 801fc34:	441d      	add	r5, r3
 801fc36:	3d01      	subs	r5, #1
 801fc38:	4404      	add	r4, r0
 801fc3a:	fb95 f5f3 	sdiv	r5, r5, r3
 801fc3e:	b2a4      	uxth	r4, r4
 801fc40:	b121      	cbz	r1, 801fc4c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 801fc42:	9b03      	ldr	r3, [sp, #12]
 801fc44:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801fc48:	ba1b      	rev	r3, r3
 801fc4a:	441f      	add	r7, r3
 801fc4c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801fc50:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801fc54:	4418      	add	r0, r3
 801fc56:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801fc5a:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801fc5e:	441a      	add	r2, r3
 801fc60:	4b76      	ldr	r3, [pc, #472]	@ (801fe3c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 801fc62:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801fc66:	6818      	ldr	r0, [r3, #0]
 801fc68:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801fc6c:	6803      	ldr	r3, [r0, #0]
 801fc6e:	b2ad      	uxth	r5, r5
 801fc70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc72:	4798      	blx	r3
 801fc74:	4a72      	ldr	r2, [pc, #456]	@ (801fe40 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x278>)
 801fc76:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801fc7a:	8813      	ldrh	r3, [r2, #0]
 801fc7c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801fc80:	00ad      	lsls	r5, r5, #2
 801fc82:	fb03 c101 	mla	r1, r3, r1, ip
 801fc86:	4373      	muls	r3, r6
 801fc88:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801fc8c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801fc90:	2c00      	cmp	r4, #0
 801fc92:	9304      	str	r3, [sp, #16]
 801fc94:	f105 0304 	add.w	r3, r5, #4
 801fc98:	9305      	str	r3, [sp, #20]
 801fc9a:	bf0c      	ite	eq
 801fc9c:	46c8      	moveq	r8, r9
 801fc9e:	f04f 0800 	movne.w	r8, #0
 801fca2:	2300      	movs	r3, #0
 801fca4:	fa1f f888 	uxth.w	r8, r8
 801fca8:	9301      	str	r3, [sp, #4]
 801fcaa:	9209      	str	r2, [sp, #36]	@ 0x24
 801fcac:	9a04      	ldr	r2, [sp, #16]
 801fcae:	4282      	cmp	r2, r0
 801fcb0:	f240 80bc 	bls.w	801fe2c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x264>
 801fcb4:	b95b      	cbnz	r3, 801fcce <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x106>
 801fcb6:	783a      	ldrb	r2, [r7, #0]
 801fcb8:	0993      	lsrs	r3, r2, #6
 801fcba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801fcbe:	9201      	str	r2, [sp, #4]
 801fcc0:	1e5a      	subs	r2, r3, #1
 801fcc2:	2a02      	cmp	r2, #2
 801fcc4:	bf8d      	iteet	hi
 801fcc6:	787b      	ldrbhi	r3, [r7, #1]
 801fcc8:	3701      	addls	r7, #1
 801fcca:	b29b      	uxthls	r3, r3
 801fccc:	3702      	addhi	r7, #2
 801fcce:	b184      	cbz	r4, 801fcf2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 801fcd0:	429c      	cmp	r4, r3
 801fcd2:	bf99      	ittee	ls
 801fcd4:	1b1c      	subls	r4, r3, r4
 801fcd6:	fa1f fa84 	uxthls.w	sl, r4
 801fcda:	46c4      	movhi	ip, r8
 801fcdc:	f04f 0a00 	movhi.w	sl, #0
 801fce0:	bf93      	iteet	ls
 801fce2:	2400      	movls	r4, #0
 801fce4:	1ae4      	subhi	r4, r4, r3
 801fce6:	b2a4      	uxthhi	r4, r4
 801fce8:	fa1f fc89 	uxthls.w	ip, r9
 801fcec:	4653      	mov	r3, sl
 801fcee:	46e0      	mov	r8, ip
 801fcf0:	e7dc      	b.n	801fcac <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe4>
 801fcf2:	2204      	movs	r2, #4
 801fcf4:	4615      	mov	r5, r2
 801fcf6:	4543      	cmp	r3, r8
 801fcf8:	bf2c      	ite	cs
 801fcfa:	46c6      	movcs	lr, r8
 801fcfc:	469e      	movcc	lr, r3
 801fcfe:	9905      	ldr	r1, [sp, #20]
 801fd00:	9a01      	ldr	r2, [sp, #4]
 801fd02:	bf28      	it	cs
 801fd04:	eba3 0a08 	subcs.w	sl, r3, r8
 801fd08:	fb15 1202 	smlabb	r2, r5, r2, r1
 801fd0c:	9903      	ldr	r1, [sp, #12]
 801fd0e:	bf38      	it	cc
 801fd10:	eba8 0c03 	subcc.w	ip, r8, r3
 801fd14:	588a      	ldr	r2, [r1, r2]
 801fd16:	bf28      	it	cs
 801fd18:	fa1f fa8a 	uxthcs.w	sl, sl
 801fd1c:	ea4f 6112 	mov.w	r1, r2, lsr #24
 801fd20:	bf2e      	itee	cs
 801fd22:	46a4      	movcs	ip, r4
 801fd24:	fa1f fc8c 	uxthcc.w	ip, ip
 801fd28:	46a2      	movcc	sl, r4
 801fd2a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801fd2e:	2900      	cmp	r1, #0
 801fd30:	d066      	beq.n	801fe00 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 801fd32:	29ff      	cmp	r1, #255	@ 0xff
 801fd34:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801fd38:	d114      	bne.n	801fd64 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x19c>
 801fd3a:	9d02      	ldr	r5, [sp, #8]
 801fd3c:	2dff      	cmp	r5, #255	@ 0xff
 801fd3e:	d111      	bne.n	801fd64 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x19c>
 801fd40:	0951      	lsrs	r1, r2, #5
 801fd42:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801fd46:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801fd4a:	f026 0607 	bic.w	r6, r6, #7
 801fd4e:	430e      	orrs	r6, r1
 801fd50:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801fd54:	4316      	orrs	r6, r2
 801fd56:	b2b6      	uxth	r6, r6
 801fd58:	4486      	add	lr, r0
 801fd5a:	4586      	cmp	lr, r0
 801fd5c:	d051      	beq.n	801fe02 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801fd5e:	f820 6b02 	strh.w	r6, [r0], #2
 801fd62:	e7fa      	b.n	801fd5a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x192>
 801fd64:	9d02      	ldr	r5, [sp, #8]
 801fd66:	b2f6      	uxtb	r6, r6
 801fd68:	4369      	muls	r1, r5
 801fd6a:	1c4d      	adds	r5, r1, #1
 801fd6c:	eb05 2521 	add.w	r5, r5, r1, asr #8
 801fd70:	122d      	asrs	r5, r5, #8
 801fd72:	ea6f 0b05 	mvn.w	fp, r5
 801fd76:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801fd7a:	b2ad      	uxth	r5, r5
 801fd7c:	b2d2      	uxtb	r2, r2
 801fd7e:	fb11 f105 	smulbb	r1, r1, r5
 801fd82:	fb16 f605 	smulbb	r6, r6, r5
 801fd86:	fb12 f205 	smulbb	r2, r2, r5
 801fd8a:	b289      	uxth	r1, r1
 801fd8c:	b2b6      	uxth	r6, r6
 801fd8e:	b292      	uxth	r2, r2
 801fd90:	9106      	str	r1, [sp, #24]
 801fd92:	9607      	str	r6, [sp, #28]
 801fd94:	9208      	str	r2, [sp, #32]
 801fd96:	4486      	add	lr, r0
 801fd98:	fa5f fb8b 	uxtb.w	fp, fp
 801fd9c:	4586      	cmp	lr, r0
 801fd9e:	d030      	beq.n	801fe02 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801fda0:	8802      	ldrh	r2, [r0, #0]
 801fda2:	9906      	ldr	r1, [sp, #24]
 801fda4:	1216      	asrs	r6, r2, #8
 801fda6:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801fdaa:	10d5      	asrs	r5, r2, #3
 801fdac:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801fdb0:	fb06 160b 	mla	r6, r6, fp, r1
 801fdb4:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801fdb8:	9907      	ldr	r1, [sp, #28]
 801fdba:	00d2      	lsls	r2, r2, #3
 801fdbc:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801fdc0:	fb05 150b 	mla	r5, r5, fp, r1
 801fdc4:	b2d2      	uxtb	r2, r2
 801fdc6:	9908      	ldr	r1, [sp, #32]
 801fdc8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801fdcc:	fb02 120b 	mla	r2, r2, fp, r1
 801fdd0:	b2b6      	uxth	r6, r6
 801fdd2:	b292      	uxth	r2, r2
 801fdd4:	1c71      	adds	r1, r6, #1
 801fdd6:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801fdda:	1c51      	adds	r1, r2, #1
 801fddc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801fde0:	b2ad      	uxth	r5, r5
 801fde2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801fde6:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801fdea:	4316      	orrs	r6, r2
 801fdec:	1c6a      	adds	r2, r5, #1
 801fdee:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801fdf2:	096d      	lsrs	r5, r5, #5
 801fdf4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801fdf8:	432e      	orrs	r6, r5
 801fdfa:	f820 6b02 	strh.w	r6, [r0], #2
 801fdfe:	e7cd      	b.n	801fd9c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d4>
 801fe00:	4470      	add	r0, lr
 801fe02:	4543      	cmp	r3, r8
 801fe04:	f4ff af72 	bcc.w	801fcec <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 801fe08:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801fe0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe0e:	fa1f fc89 	uxth.w	ip, r9
 801fe12:	eba4 040c 	sub.w	r4, r4, ip
 801fe16:	881b      	ldrh	r3, [r3, #0]
 801fe18:	b2a4      	uxth	r4, r4
 801fe1a:	2c00      	cmp	r4, #0
 801fe1c:	eba3 0309 	sub.w	r3, r3, r9
 801fe20:	bf18      	it	ne
 801fe22:	f04f 0c00 	movne.w	ip, #0
 801fe26:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fe2a:	e75f      	b.n	801fcec <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 801fe2c:	4b03      	ldr	r3, [pc, #12]	@ (801fe3c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 801fe2e:	6818      	ldr	r0, [r3, #0]
 801fe30:	6803      	ldr	r3, [r0, #0]
 801fe32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fe34:	4798      	blx	r3
 801fe36:	b00f      	add	sp, #60	@ 0x3c
 801fe38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe3c:	2005b928 	.word	0x2005b928
 801fe40:	2005b922 	.word	0x2005b922

0801fe44 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801fe44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe48:	b093      	sub	sp, #76	@ 0x4c
 801fe4a:	9205      	str	r2, [sp, #20]
 801fe4c:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 801fe50:	461c      	mov	r4, r3
 801fe52:	9101      	str	r1, [sp, #4]
 801fe54:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fe56:	9202      	str	r2, [sp, #8]
 801fe58:	2a00      	cmp	r2, #0
 801fe5a:	f000 812d 	beq.w	80200b8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 801fe5e:	6820      	ldr	r0, [r4, #0]
 801fe60:	6861      	ldr	r1, [r4, #4]
 801fe62:	aa0e      	add	r2, sp, #56	@ 0x38
 801fe64:	c203      	stmia	r2!, {r0, r1}
 801fe66:	6818      	ldr	r0, [r3, #0]
 801fe68:	6859      	ldr	r1, [r3, #4]
 801fe6a:	aa10      	add	r2, sp, #64	@ 0x40
 801fe6c:	c203      	stmia	r2!, {r0, r1}
 801fe6e:	a80e      	add	r0, sp, #56	@ 0x38
 801fe70:	f7f8 fb52 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fe74:	4621      	mov	r1, r4
 801fe76:	a810      	add	r0, sp, #64	@ 0x40
 801fe78:	f7f8 fb76 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fe7c:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 801fe80:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801fe84:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801fe88:	bfdd      	ittte	le
 801fe8a:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801fe8e:	b2b3      	uxthle	r3, r6
 801fe90:	fb92 f3f3 	sdivle	r3, r2, r3
 801fe94:	2301      	movgt	r3, #1
 801fe96:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801fe9a:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 801fe9e:	fb92 f1f3 	sdiv	r1, r2, r3
 801fea2:	fa1f fc81 	uxth.w	ip, r1
 801fea6:	4661      	mov	r1, ip
 801fea8:	fb0c 2413 	mls	r4, ip, r3, r2
 801feac:	fb14 f406 	smulbb	r4, r4, r6
 801feb0:	441d      	add	r5, r3
 801feb2:	3d01      	subs	r5, #1
 801feb4:	4404      	add	r4, r0
 801feb6:	fb95 f5f3 	sdiv	r5, r5, r3
 801feba:	b2a4      	uxth	r4, r4
 801febc:	b131      	cbz	r1, 801fecc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 801febe:	9b05      	ldr	r3, [sp, #20]
 801fec0:	9901      	ldr	r1, [sp, #4]
 801fec2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801fec6:	ba1b      	rev	r3, r3
 801fec8:	4419      	add	r1, r3
 801feca:	9101      	str	r1, [sp, #4]
 801fecc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801fed0:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801fed4:	4418      	add	r0, r3
 801fed6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801feda:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801fede:	441a      	add	r2, r3
 801fee0:	4b77      	ldr	r3, [pc, #476]	@ (80200c0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801fee2:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 801fee6:	6818      	ldr	r0, [r3, #0]
 801fee8:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 801feec:	6803      	ldr	r3, [r0, #0]
 801feee:	b2ad      	uxth	r5, r5
 801fef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fef2:	4798      	blx	r3
 801fef4:	4973      	ldr	r1, [pc, #460]	@ (80200c4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 801fef6:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 801fefa:	880b      	ldrh	r3, [r1, #0]
 801fefc:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801ff00:	00ad      	lsls	r5, r5, #2
 801ff02:	fb03 c202 	mla	r2, r3, r2, ip
 801ff06:	4373      	muls	r3, r6
 801ff08:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ff0c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ff10:	9308      	str	r3, [sp, #32]
 801ff12:	1d2b      	adds	r3, r5, #4
 801ff14:	9309      	str	r3, [sp, #36]	@ 0x24
 801ff16:	9b02      	ldr	r3, [sp, #8]
 801ff18:	2c00      	cmp	r4, #0
 801ff1a:	ea6f 0203 	mvn.w	r2, r3
 801ff1e:	bf0c      	ite	eq
 801ff20:	46dc      	moveq	ip, fp
 801ff22:	f04f 0c00 	movne.w	ip, #0
 801ff26:	2300      	movs	r3, #0
 801ff28:	910d      	str	r1, [sp, #52]	@ 0x34
 801ff2a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801ff2e:	b2d2      	uxtb	r2, r2
 801ff30:	fa1f fc8c 	uxth.w	ip, ip
 801ff34:	9303      	str	r3, [sp, #12]
 801ff36:	9106      	str	r1, [sp, #24]
 801ff38:	9207      	str	r2, [sp, #28]
 801ff3a:	9a08      	ldr	r2, [sp, #32]
 801ff3c:	4282      	cmp	r2, r0
 801ff3e:	f240 80b6 	bls.w	80200ae <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801ff42:	b963      	cbnz	r3, 801ff5e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801ff44:	9b01      	ldr	r3, [sp, #4]
 801ff46:	781a      	ldrb	r2, [r3, #0]
 801ff48:	0993      	lsrs	r3, r2, #6
 801ff4a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801ff4e:	9203      	str	r2, [sp, #12]
 801ff50:	1e5a      	subs	r2, r3, #1
 801ff52:	2a02      	cmp	r2, #2
 801ff54:	d815      	bhi.n	801ff82 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13e>
 801ff56:	9a01      	ldr	r2, [sp, #4]
 801ff58:	b29b      	uxth	r3, r3
 801ff5a:	3201      	adds	r2, #1
 801ff5c:	9201      	str	r2, [sp, #4]
 801ff5e:	b1b4      	cbz	r4, 801ff8e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14a>
 801ff60:	429c      	cmp	r4, r3
 801ff62:	bf99      	ittee	ls
 801ff64:	1b1c      	subls	r4, r3, r4
 801ff66:	fa1f f884 	uxthls.w	r8, r4
 801ff6a:	4666      	movhi	r6, ip
 801ff6c:	f04f 0800 	movhi.w	r8, #0
 801ff70:	bf93      	iteet	ls
 801ff72:	2400      	movls	r4, #0
 801ff74:	1ae4      	subhi	r4, r4, r3
 801ff76:	b2a4      	uxthhi	r4, r4
 801ff78:	fa1f f68b 	uxthls.w	r6, fp
 801ff7c:	4643      	mov	r3, r8
 801ff7e:	46b4      	mov	ip, r6
 801ff80:	e7db      	b.n	801ff3a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801ff82:	9a01      	ldr	r2, [sp, #4]
 801ff84:	9b01      	ldr	r3, [sp, #4]
 801ff86:	3202      	adds	r2, #2
 801ff88:	785b      	ldrb	r3, [r3, #1]
 801ff8a:	9201      	str	r2, [sp, #4]
 801ff8c:	e7e7      	b.n	801ff5e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801ff8e:	2203      	movs	r2, #3
 801ff90:	4615      	mov	r5, r2
 801ff92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ff94:	9a03      	ldr	r2, [sp, #12]
 801ff96:	4563      	cmp	r3, ip
 801ff98:	fb15 1202 	smlabb	r2, r5, r2, r1
 801ff9c:	9905      	ldr	r1, [sp, #20]
 801ff9e:	bf28      	it	cs
 801ffa0:	eba3 080c 	subcs.w	r8, r3, ip
 801ffa4:	eb01 0502 	add.w	r5, r1, r2
 801ffa8:	9902      	ldr	r1, [sp, #8]
 801ffaa:	bf31      	iteee	cc
 801ffac:	ebac 0603 	subcc.w	r6, ip, r3
 801ffb0:	fa1f f888 	uxthcs.w	r8, r8
 801ffb4:	46e1      	movcs	r9, ip
 801ffb6:	4626      	movcs	r6, r4
 801ffb8:	bf3e      	ittt	cc
 801ffba:	b2b6      	uxthcc	r6, r6
 801ffbc:	4699      	movcc	r9, r3
 801ffbe:	46a0      	movcc	r8, r4
 801ffc0:	29ff      	cmp	r1, #255	@ 0xff
 801ffc2:	d04a      	beq.n	802005a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x216>
 801ffc4:	46ca      	mov	sl, r9
 801ffc6:	9f06      	ldr	r7, [sp, #24]
 801ffc8:	78a9      	ldrb	r1, [r5, #2]
 801ffca:	9004      	str	r0, [sp, #16]
 801ffcc:	4379      	muls	r1, r7
 801ffce:	910a      	str	r1, [sp, #40]	@ 0x28
 801ffd0:	7869      	ldrb	r1, [r5, #1]
 801ffd2:	4379      	muls	r1, r7
 801ffd4:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ffd6:	9905      	ldr	r1, [sp, #20]
 801ffd8:	5c8a      	ldrb	r2, [r1, r2]
 801ffda:	437a      	muls	r2, r7
 801ffdc:	920c      	str	r2, [sp, #48]	@ 0x30
 801ffde:	f1ba 0f00 	cmp.w	sl, #0
 801ffe2:	d03d      	beq.n	8020060 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 801ffe4:	9f07      	ldr	r7, [sp, #28]
 801ffe6:	9a04      	ldr	r2, [sp, #16]
 801ffe8:	46be      	mov	lr, r7
 801ffea:	8812      	ldrh	r2, [r2, #0]
 801ffec:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801ffee:	1215      	asrs	r5, r2, #8
 801fff0:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801fff4:	10d1      	asrs	r1, r2, #3
 801fff6:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801fffa:	fb05 750e 	mla	r5, r5, lr, r7
 801fffe:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8020002:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020004:	00d2      	lsls	r2, r2, #3
 8020006:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 802000a:	fb01 710e 	mla	r1, r1, lr, r7
 802000e:	b2d2      	uxtb	r2, r2
 8020010:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8020012:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020016:	fb02 720e 	mla	r2, r2, lr, r7
 802001a:	b2ad      	uxth	r5, r5
 802001c:	b292      	uxth	r2, r2
 802001e:	f105 0e01 	add.w	lr, r5, #1
 8020022:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8020026:	f102 0e01 	add.w	lr, r2, #1
 802002a:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 802002e:	b289      	uxth	r1, r1
 8020030:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020034:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8020038:	4315      	orrs	r5, r2
 802003a:	1c4a      	adds	r2, r1, #1
 802003c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020040:	0949      	lsrs	r1, r1, #5
 8020042:	9a04      	ldr	r2, [sp, #16]
 8020044:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8020048:	430d      	orrs	r5, r1
 802004a:	f822 5b02 	strh.w	r5, [r2], #2
 802004e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020052:	9204      	str	r2, [sp, #16]
 8020054:	fa1f fa8a 	uxth.w	sl, sl
 8020058:	e7c1      	b.n	801ffde <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 802005a:	4649      	mov	r1, r9
 802005c:	4686      	mov	lr, r0
 802005e:	b999      	cbnz	r1, 8020088 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x244>
 8020060:	4563      	cmp	r3, ip
 8020062:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 8020066:	d389      	bcc.n	801ff7c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 8020068:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 802006c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802006e:	fa1f f68b 	uxth.w	r6, fp
 8020072:	1ba4      	subs	r4, r4, r6
 8020074:	881b      	ldrh	r3, [r3, #0]
 8020076:	b2a4      	uxth	r4, r4
 8020078:	2c00      	cmp	r4, #0
 802007a:	eba3 030b 	sub.w	r3, r3, fp
 802007e:	bf18      	it	ne
 8020080:	2600      	movne	r6, #0
 8020082:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020086:	e779      	b.n	801ff7c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 8020088:	78aa      	ldrb	r2, [r5, #2]
 802008a:	4f0f      	ldr	r7, [pc, #60]	@ (80200c8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 802008c:	3901      	subs	r1, #1
 802008e:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 8020092:	786a      	ldrb	r2, [r5, #1]
 8020094:	b289      	uxth	r1, r1
 8020096:	00d2      	lsls	r2, r2, #3
 8020098:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802009c:	ea4a 0202 	orr.w	r2, sl, r2
 80200a0:	f895 a000 	ldrb.w	sl, [r5]
 80200a4:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 80200a8:	f82e 2b02 	strh.w	r2, [lr], #2
 80200ac:	e7d7      	b.n	802005e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21a>
 80200ae:	4b04      	ldr	r3, [pc, #16]	@ (80200c0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 80200b0:	6818      	ldr	r0, [r3, #0]
 80200b2:	6803      	ldr	r3, [r0, #0]
 80200b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80200b6:	4798      	blx	r3
 80200b8:	b013      	add	sp, #76	@ 0x4c
 80200ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200be:	bf00      	nop
 80200c0:	2005b928 	.word	0x2005b928
 80200c4:	2005b922 	.word	0x2005b922
 80200c8:	fffff800 	.word	0xfffff800

080200cc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80200cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200d0:	b09d      	sub	sp, #116	@ 0x74
 80200d2:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
 80200d6:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 80200da:	461c      	mov	r4, r3
 80200dc:	4683      	mov	fp, r0
 80200de:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80200e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80200e2:	2a00      	cmp	r2, #0
 80200e4:	f000 81e1 	beq.w	80204aa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3de>
 80200e8:	6820      	ldr	r0, [r4, #0]
 80200ea:	6861      	ldr	r1, [r4, #4]
 80200ec:	aa18      	add	r2, sp, #96	@ 0x60
 80200ee:	c203      	stmia	r2!, {r0, r1}
 80200f0:	6818      	ldr	r0, [r3, #0]
 80200f2:	6859      	ldr	r1, [r3, #4]
 80200f4:	aa1a      	add	r2, sp, #104	@ 0x68
 80200f6:	c203      	stmia	r2!, {r0, r1}
 80200f8:	a818      	add	r0, sp, #96	@ 0x60
 80200fa:	f7f8 fa0d 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80200fe:	4621      	mov	r1, r4
 8020100:	a81a      	add	r0, sp, #104	@ 0x68
 8020102:	f7f8 fa31 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020106:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 802010a:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 802010e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020112:	bfdd      	ittte	le
 8020114:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8020118:	b29a      	uxthle	r2, r3
 802011a:	fb91 f2f2 	sdivle	r2, r1, r2
 802011e:	2201      	movgt	r2, #1
 8020120:	9202      	str	r2, [sp, #8]
 8020122:	9802      	ldr	r0, [sp, #8]
 8020124:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8020128:	9902      	ldr	r1, [sp, #8]
 802012a:	fb92 f0f0 	sdiv	r0, r2, r0
 802012e:	b280      	uxth	r0, r0
 8020130:	900f      	str	r0, [sp, #60]	@ 0x3c
 8020132:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020134:	9802      	ldr	r0, [sp, #8]
 8020136:	440c      	add	r4, r1
 8020138:	fb05 2510 	mls	r5, r5, r0, r2
 802013c:	fb15 f503 	smulbb	r5, r5, r3
 8020140:	3c01      	subs	r4, #1
 8020142:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8020146:	fb94 f4f1 	sdiv	r4, r4, r1
 802014a:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 802014e:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8020152:	440d      	add	r5, r1
 8020154:	4419      	add	r1, r3
 8020156:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 802015a:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 802015e:	441a      	add	r2, r3
 8020160:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8020164:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8020168:	9306      	str	r3, [sp, #24]
 802016a:	4bb3      	ldr	r3, [pc, #716]	@ (8020438 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 802016c:	3401      	adds	r4, #1
 802016e:	6818      	ldr	r0, [r3, #0]
 8020170:	b2a4      	uxth	r4, r4
 8020172:	6803      	ldr	r3, [r0, #0]
 8020174:	00a4      	lsls	r4, r4, #2
 8020176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020178:	4798      	blx	r3
 802017a:	4bb0      	ldr	r3, [pc, #704]	@ (802043c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 802017c:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8020180:	881a      	ldrh	r2, [r3, #0]
 8020182:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 8020186:	4356      	muls	r6, r2
 8020188:	fb02 7101 	mla	r1, r2, r1, r7
 802018c:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 8020190:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 8020194:	920a      	str	r2, [sp, #40]	@ 0x28
 8020196:	1d22      	adds	r2, r4, #4
 8020198:	b2ad      	uxth	r5, r5
 802019a:	9213      	str	r2, [sp, #76]	@ 0x4c
 802019c:	9a06      	ldr	r2, [sp, #24]
 802019e:	2d00      	cmp	r5, #0
 80201a0:	bf0c      	ite	eq
 80201a2:	4611      	moveq	r1, r2
 80201a4:	2100      	movne	r1, #0
 80201a6:	2200      	movs	r2, #0
 80201a8:	9316      	str	r3, [sp, #88]	@ 0x58
 80201aa:	4ba5      	ldr	r3, [pc, #660]	@ (8020440 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 80201ac:	b289      	uxth	r1, r1
 80201ae:	eba3 030b 	sub.w	r3, r3, fp
 80201b2:	920d      	str	r2, [sp, #52]	@ 0x34
 80201b4:	9317      	str	r3, [sp, #92]	@ 0x5c
 80201b6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80201b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80201ba:	fa12 f383 	uxtah	r3, r2, r3
 80201be:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80201c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80201c4:	3304      	adds	r3, #4
 80201c6:	9308      	str	r3, [sp, #32]
 80201c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80201ca:	4543      	cmp	r3, r8
 80201cc:	f240 8168 	bls.w	80204a0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d4>
 80201d0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 80201d4:	9a02      	ldr	r2, [sp, #8]
 80201d6:	fbb5 f3f3 	udiv	r3, r5, r3
 80201da:	1ad3      	subs	r3, r2, r3
 80201dc:	b29b      	uxth	r3, r3
 80201de:	9314      	str	r3, [sp, #80]	@ 0x50
 80201e0:	9b08      	ldr	r3, [sp, #32]
 80201e2:	9808      	ldr	r0, [sp, #32]
 80201e4:	785a      	ldrb	r2, [r3, #1]
 80201e6:	789b      	ldrb	r3, [r3, #2]
 80201e8:	7800      	ldrb	r0, [r0, #0]
 80201ea:	021b      	lsls	r3, r3, #8
 80201ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80201f0:	9a08      	ldr	r2, [sp, #32]
 80201f2:	9010      	str	r0, [sp, #64]	@ 0x40
 80201f4:	78d2      	ldrb	r2, [r2, #3]
 80201f6:	3001      	adds	r0, #1
 80201f8:	4313      	orrs	r3, r2
 80201fa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80201fc:	9007      	str	r0, [sp, #28]
 80201fe:	441a      	add	r2, r3
 8020200:	1c50      	adds	r0, r2, #1
 8020202:	9005      	str	r0, [sp, #20]
 8020204:	7852      	ldrb	r2, [r2, #1]
 8020206:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8020208:	0212      	lsls	r2, r2, #8
 802020a:	5cc3      	ldrb	r3, [r0, r3]
 802020c:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8020210:	431a      	orrs	r2, r3
 8020212:	b293      	uxth	r3, r2
 8020214:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020216:	2300      	movs	r3, #0
 8020218:	9309      	str	r3, [sp, #36]	@ 0x24
 802021a:	2301      	movs	r3, #1
 802021c:	9301      	str	r3, [sp, #4]
 802021e:	9304      	str	r3, [sp, #16]
 8020220:	2300      	movs	r3, #0
 8020222:	f04f 0e01 	mov.w	lr, #1
 8020226:	f88b 2804 	strb.w	r2, [fp, #2052]	@ 0x804
 802022a:	9303      	str	r3, [sp, #12]
 802022c:	2d00      	cmp	r5, #0
 802022e:	d07c      	beq.n	802032a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8020230:	45ae      	cmp	lr, r5
 8020232:	d26b      	bcs.n	802030c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 8020234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020236:	eba5 050e 	sub.w	r5, r5, lr
 802023a:	4543      	cmp	r3, r8
 802023c:	b2ad      	uxth	r5, r5
 802023e:	460c      	mov	r4, r1
 8020240:	d802      	bhi.n	8020248 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>
 8020242:	e070      	b.n	8020326 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 8020244:	2b00      	cmp	r3, #0
 8020246:	d15c      	bne.n	8020302 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 8020248:	9b05      	ldr	r3, [sp, #20]
 802024a:	9a04      	ldr	r2, [sp, #16]
 802024c:	785b      	ldrb	r3, [r3, #1]
 802024e:	f1c2 0207 	rsb	r2, r2, #7
 8020252:	4093      	lsls	r3, r2
 8020254:	005b      	lsls	r3, r3, #1
 8020256:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 802025a:	9b05      	ldr	r3, [sp, #20]
 802025c:	9904      	ldr	r1, [sp, #16]
 802025e:	781b      	ldrb	r3, [r3, #0]
 8020260:	410b      	asrs	r3, r1
 8020262:	3101      	adds	r1, #1
 8020264:	b2c9      	uxtb	r1, r1
 8020266:	2908      	cmp	r1, #8
 8020268:	9104      	str	r1, [sp, #16]
 802026a:	9905      	ldr	r1, [sp, #20]
 802026c:	b2db      	uxtb	r3, r3
 802026e:	bf03      	ittte	eq
 8020270:	3102      	addeq	r1, #2
 8020272:	9105      	streq	r1, [sp, #20]
 8020274:	2100      	moveq	r1, #0
 8020276:	3101      	addne	r1, #1
 8020278:	bf14      	ite	ne
 802027a:	9105      	strne	r1, [sp, #20]
 802027c:	9104      	streq	r1, [sp, #16]
 802027e:	4313      	orrs	r3, r2
 8020280:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020282:	b29a      	uxth	r2, r3
 8020284:	4291      	cmp	r1, r2
 8020286:	d30a      	bcc.n	802029e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8020288:	f88b 3804 	strb.w	r3, [fp, #2052]	@ 0x804
 802028c:	2301      	movs	r3, #1
 802028e:	9907      	ldr	r1, [sp, #28]
 8020290:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8020294:	d30f      	bcc.n	80202b6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ea>
 8020296:	2100      	movs	r1, #0
 8020298:	9301      	str	r3, [sp, #4]
 802029a:	9103      	str	r1, [sp, #12]
 802029c:	e032      	b.n	8020304 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 802029e:	9b07      	ldr	r3, [sp, #28]
 80202a0:	429a      	cmp	r2, r3
 80202a2:	d318      	bcc.n	80202d6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 80202a4:	9b01      	ldr	r3, [sp, #4]
 80202a6:	f89b 1804 	ldrb.w	r1, [fp, #2052]	@ 0x804
 80202aa:	445b      	add	r3, fp
 80202ac:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 80202b0:	9b01      	ldr	r3, [sp, #4]
 80202b2:	3301      	adds	r3, #1
 80202b4:	b29b      	uxth	r3, r3
 80202b6:	9907      	ldr	r1, [sp, #28]
 80202b8:	f89b 0804 	ldrb.w	r0, [fp, #2052]	@ 0x804
 80202bc:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80202c0:	7108      	strb	r0, [r1, #4]
 80202c2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80202c4:	80c8      	strh	r0, [r1, #6]
 80202c6:	9801      	ldr	r0, [sp, #4]
 80202c8:	3001      	adds	r0, #1
 80202ca:	7148      	strb	r0, [r1, #5]
 80202cc:	9907      	ldr	r1, [sp, #28]
 80202ce:	3101      	adds	r1, #1
 80202d0:	b289      	uxth	r1, r1
 80202d2:	9107      	str	r1, [sp, #28]
 80202d4:	e7df      	b.n	8020296 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 80202d6:	4611      	mov	r1, r2
 80202d8:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 80202dc:	795b      	ldrb	r3, [r3, #5]
 80202de:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 80202e2:	4458      	add	r0, fp
 80202e4:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 80202e6:	4406      	add	r6, r0
 80202e8:	2e00      	cmp	r6, #0
 80202ea:	dd06      	ble.n	80202fa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x22e>
 80202ec:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80202f0:	790e      	ldrb	r6, [r1, #4]
 80202f2:	f800 6d01 	strb.w	r6, [r0, #-1]!
 80202f6:	88c9      	ldrh	r1, [r1, #6]
 80202f8:	e7f4      	b.n	80202e4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x218>
 80202fa:	f88b 1804 	strb.w	r1, [fp, #2052]	@ 0x804
 80202fe:	b29b      	uxth	r3, r3
 8020300:	e7c5      	b.n	802028e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c2>
 8020302:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020304:	4621      	mov	r1, r4
 8020306:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020308:	469e      	mov	lr, r3
 802030a:	e78f      	b.n	802022c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x160>
 802030c:	9a03      	ldr	r2, [sp, #12]
 802030e:	ebae 0305 	sub.w	r3, lr, r5
 8020312:	442a      	add	r2, r5
 8020314:	b292      	uxth	r2, r2
 8020316:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 802031a:	b29b      	uxth	r3, r3
 802031c:	9203      	str	r2, [sp, #12]
 802031e:	2500      	movs	r5, #0
 8020320:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020322:	4542      	cmp	r2, r8
 8020324:	d88e      	bhi.n	8020244 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>
 8020326:	4621      	mov	r1, r4
 8020328:	e74e      	b.n	80201c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 802032a:	458e      	cmp	lr, r1
 802032c:	bf2c      	ite	cs
 802032e:	462c      	movcs	r4, r5
 8020330:	462b      	movcc	r3, r5
 8020332:	f04f 0900 	mov.w	r9, #0
 8020336:	bf29      	itett	cs
 8020338:	ebae 0301 	subcs.w	r3, lr, r1
 802033c:	eba1 040e 	subcc.w	r4, r1, lr
 8020340:	b29b      	uxthcs	r3, r3
 8020342:	910c      	strcs	r1, [sp, #48]	@ 0x30
 8020344:	bf3c      	itt	cc
 8020346:	b2a4      	uxthcc	r4, r4
 8020348:	f8cd e030 	strcc.w	lr, [sp, #48]	@ 0x30
 802034c:	9a03      	ldr	r2, [sp, #12]
 802034e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8020350:	444a      	add	r2, r9
 8020352:	4548      	cmp	r0, r9
 8020354:	b292      	uxth	r2, r2
 8020356:	d075      	beq.n	8020444 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>
 8020358:	2004      	movs	r0, #4
 802035a:	4605      	mov	r5, r0
 802035c:	445a      	add	r2, fp
 802035e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8020360:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8020364:	fb15 0202 	smlabb	r2, r5, r2, r0
 8020368:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802036a:	5880      	ldr	r0, [r0, r2]
 802036c:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 8020370:	d014      	beq.n	802039c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d0>
 8020372:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8020376:	ea4f 2510 	mov.w	r5, r0, lsr #8
 802037a:	d112      	bne.n	80203a2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 802037c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802037e:	2aff      	cmp	r2, #255	@ 0xff
 8020380:	d10f      	bne.n	80203a2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8020382:	0942      	lsrs	r2, r0, #5
 8020384:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 8020388:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802038c:	f025 0507 	bic.w	r5, r5, #7
 8020390:	4315      	orrs	r5, r2
 8020392:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8020396:	4305      	orrs	r5, r0
 8020398:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 802039c:	f109 0901 	add.w	r9, r9, #1
 80203a0:	e7d4      	b.n	802034c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x280>
 80203a2:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 80203a6:	b2ed      	uxtb	r5, r5
 80203a8:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80203ac:	f006 02fc 	and.w	r2, r6, #252	@ 0xfc
 80203b0:	9215      	str	r2, [sp, #84]	@ 0x54
 80203b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80203b4:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80203b8:	fb02 fa0a 	mul.w	sl, r2, sl
 80203bc:	f10a 0201 	add.w	r2, sl, #1
 80203c0:	eb02 222a 	add.w	r2, r2, sl, asr #8
 80203c4:	1212      	asrs	r2, r2, #8
 80203c6:	fa1f fa82 	uxth.w	sl, r2
 80203ca:	43d2      	mvns	r2, r2
 80203cc:	b2c0      	uxtb	r0, r0
 80203ce:	fb16 f60a 	smulbb	r6, r6, sl
 80203d2:	fb10 f00a 	smulbb	r0, r0, sl
 80203d6:	ea4f 272c 	mov.w	r7, ip, asr #8
 80203da:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80203de:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80203e2:	fa5f fc8c 	uxtb.w	ip, ip
 80203e6:	b2d2      	uxtb	r2, r2
 80203e8:	fb15 f50a 	smulbb	r5, r5, sl
 80203ec:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80203f0:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80203f4:	fb07 6702 	mla	r7, r7, r2, r6
 80203f8:	fb0c 0002 	mla	r0, ip, r2, r0
 80203fc:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80203fe:	b2bf      	uxth	r7, r7
 8020400:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8020404:	fb06 5602 	mla	r6, r6, r2, r5
 8020408:	b280      	uxth	r0, r0
 802040a:	1c7a      	adds	r2, r7, #1
 802040c:	1c45      	adds	r5, r0, #1
 802040e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020412:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8020416:	b2b6      	uxth	r6, r6
 8020418:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 802041c:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8020420:	432f      	orrs	r7, r5
 8020422:	1c75      	adds	r5, r6, #1
 8020424:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8020428:	096d      	lsrs	r5, r5, #5
 802042a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802042e:	432f      	orrs	r7, r5
 8020430:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 8020434:	e7b2      	b.n	802039c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d0>
 8020436:	bf00      	nop
 8020438:	2005b928 	.word	0x2005b928
 802043c:	2005b922 	.word	0x2005b922
 8020440:	fffff7fb 	.word	0xfffff7fb
 8020444:	9203      	str	r2, [sp, #12]
 8020446:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020448:	458e      	cmp	lr, r1
 802044a:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 802044e:	f4ff af66 	bcc.w	802031e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x252>
 8020452:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020454:	9906      	ldr	r1, [sp, #24]
 8020456:	8812      	ldrh	r2, [r2, #0]
 8020458:	1a52      	subs	r2, r2, r1
 802045a:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 802045e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020460:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8020462:	3201      	adds	r2, #1
 8020464:	428a      	cmp	r2, r1
 8020466:	9209      	str	r2, [sp, #36]	@ 0x24
 8020468:	d110      	bne.n	802048c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c0>
 802046a:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 802046e:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 8020472:	9b06      	ldr	r3, [sp, #24]
 8020474:	eba5 0509 	sub.w	r5, r5, r9
 8020478:	b2ad      	uxth	r5, r5
 802047a:	2d00      	cmp	r5, #0
 802047c:	bf0c      	ite	eq
 802047e:	4619      	moveq	r1, r3
 8020480:	2100      	movne	r1, #0
 8020482:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020484:	b289      	uxth	r1, r1
 8020486:	3301      	adds	r3, #1
 8020488:	930d      	str	r3, [sp, #52]	@ 0x34
 802048a:	e694      	b.n	80201b6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 802048c:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8020490:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8020494:	1b2d      	subs	r5, r5, r4
 8020496:	b2ad      	uxth	r5, r5
 8020498:	2d00      	cmp	r5, #0
 802049a:	bf18      	it	ne
 802049c:	2400      	movne	r4, #0
 802049e:	e73f      	b.n	8020320 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x254>
 80204a0:	4b03      	ldr	r3, [pc, #12]	@ (80204b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>)
 80204a2:	6818      	ldr	r0, [r3, #0]
 80204a4:	6803      	ldr	r3, [r0, #0]
 80204a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80204a8:	4798      	blx	r3
 80204aa:	b01d      	add	sp, #116	@ 0x74
 80204ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204b0:	2005b928 	.word	0x2005b928

080204b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80204b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204b8:	b09f      	sub	sp, #124	@ 0x7c
 80204ba:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 80204be:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 80204c2:	461d      	mov	r5, r3
 80204c4:	4604      	mov	r4, r0
 80204c6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80204c8:	920a      	str	r2, [sp, #40]	@ 0x28
 80204ca:	2a00      	cmp	r2, #0
 80204cc:	f000 81fc 	beq.w	80208c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x414>
 80204d0:	6828      	ldr	r0, [r5, #0]
 80204d2:	6869      	ldr	r1, [r5, #4]
 80204d4:	aa1a      	add	r2, sp, #104	@ 0x68
 80204d6:	c203      	stmia	r2!, {r0, r1}
 80204d8:	6818      	ldr	r0, [r3, #0]
 80204da:	6859      	ldr	r1, [r3, #4]
 80204dc:	aa1c      	add	r2, sp, #112	@ 0x70
 80204de:	c203      	stmia	r2!, {r0, r1}
 80204e0:	a81a      	add	r0, sp, #104	@ 0x68
 80204e2:	f7f8 f819 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80204e6:	4629      	mov	r1, r5
 80204e8:	a81c      	add	r0, sp, #112	@ 0x70
 80204ea:	f7f8 f83d 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80204ee:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 80204f2:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 80204f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80204fa:	bfdd      	ittte	le
 80204fc:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8020500:	b29a      	uxthle	r2, r3
 8020502:	fb91 f2f2 	sdivle	r2, r1, r2
 8020506:	2201      	movgt	r2, #1
 8020508:	9201      	str	r2, [sp, #4]
 802050a:	9801      	ldr	r0, [sp, #4]
 802050c:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 8020510:	9901      	ldr	r1, [sp, #4]
 8020512:	fb92 f0f0 	sdiv	r0, r2, r0
 8020516:	b280      	uxth	r0, r0
 8020518:	9010      	str	r0, [sp, #64]	@ 0x40
 802051a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802051c:	9801      	ldr	r0, [sp, #4]
 802051e:	440e      	add	r6, r1
 8020520:	fb05 2510 	mls	r5, r5, r0, r2
 8020524:	fb15 f503 	smulbb	r5, r5, r3
 8020528:	3e01      	subs	r6, #1
 802052a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 802052e:	fb96 f6f1 	sdiv	r6, r6, r1
 8020532:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 8020536:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	@ 0x76
 802053a:	440d      	add	r5, r1
 802053c:	4419      	add	r1, r3
 802053e:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 8020542:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 8020546:	441a      	add	r2, r3
 8020548:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 802054c:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 8020550:	9304      	str	r3, [sp, #16]
 8020552:	4b96      	ldr	r3, [pc, #600]	@ (80207ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f8>)
 8020554:	3601      	adds	r6, #1
 8020556:	6818      	ldr	r0, [r3, #0]
 8020558:	b2b6      	uxth	r6, r6
 802055a:	6803      	ldr	r3, [r0, #0]
 802055c:	b2ad      	uxth	r5, r5
 802055e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020560:	4798      	blx	r3
 8020562:	4b93      	ldr	r3, [pc, #588]	@ (80207b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 8020564:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 8020568:	881a      	ldrh	r2, [r3, #0]
 802056a:	f9bd c070 	ldrsh.w	ip, [sp, #112]	@ 0x70
 802056e:	4357      	muls	r7, r2
 8020570:	fb02 c101 	mla	r1, r2, r1, ip
 8020574:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 8020578:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 802057c:	920b      	str	r2, [sp, #44]	@ 0x2c
 802057e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020580:	2d00      	cmp	r5, #0
 8020582:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8020586:	f106 0204 	add.w	r2, r6, #4
 802058a:	9206      	str	r2, [sp, #24]
 802058c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802058e:	bf18      	it	ne
 8020590:	2100      	movne	r1, #0
 8020592:	ea6f 0202 	mvn.w	r2, r2
 8020596:	b2d2      	uxtb	r2, r2
 8020598:	9215      	str	r2, [sp, #84]	@ 0x54
 802059a:	9a04      	ldr	r2, [sp, #16]
 802059c:	9318      	str	r3, [sp, #96]	@ 0x60
 802059e:	bf08      	it	eq
 80205a0:	4611      	moveq	r1, r2
 80205a2:	2200      	movs	r2, #0
 80205a4:	4b83      	ldr	r3, [pc, #524]	@ (80207b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 80205a6:	b289      	uxth	r1, r1
 80205a8:	1b1b      	subs	r3, r3, r4
 80205aa:	920d      	str	r2, [sp, #52]	@ 0x34
 80205ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80205ae:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80205b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80205b2:	fa12 f383 	uxtah	r3, r2, r3
 80205b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80205b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80205bc:	3304      	adds	r3, #4
 80205be:	9307      	str	r3, [sp, #28]
 80205c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80205c2:	455b      	cmp	r3, fp
 80205c4:	f240 817b 	bls.w	80208be <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40a>
 80205c8:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 80205cc:	f04f 0801 	mov.w	r8, #1
 80205d0:	fbb5 f3f3 	udiv	r3, r5, r3
 80205d4:	9a01      	ldr	r2, [sp, #4]
 80205d6:	9807      	ldr	r0, [sp, #28]
 80205d8:	1ad3      	subs	r3, r2, r3
 80205da:	b29b      	uxth	r3, r3
 80205dc:	9316      	str	r3, [sp, #88]	@ 0x58
 80205de:	9b07      	ldr	r3, [sp, #28]
 80205e0:	7800      	ldrb	r0, [r0, #0]
 80205e2:	785a      	ldrb	r2, [r3, #1]
 80205e4:	789b      	ldrb	r3, [r3, #2]
 80205e6:	9011      	str	r0, [sp, #68]	@ 0x44
 80205e8:	021b      	lsls	r3, r3, #8
 80205ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80205ee:	9a07      	ldr	r2, [sp, #28]
 80205f0:	3001      	adds	r0, #1
 80205f2:	78d2      	ldrb	r2, [r2, #3]
 80205f4:	9005      	str	r0, [sp, #20]
 80205f6:	4313      	orrs	r3, r2
 80205f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80205fa:	46c4      	mov	ip, r8
 80205fc:	441a      	add	r2, r3
 80205fe:	1c50      	adds	r0, r2, #1
 8020600:	9003      	str	r0, [sp, #12]
 8020602:	7852      	ldrb	r2, [r2, #1]
 8020604:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8020606:	0212      	lsls	r2, r2, #8
 8020608:	5cc3      	ldrb	r3, [r0, r3]
 802060a:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 802060e:	431a      	orrs	r2, r3
 8020610:	b293      	uxth	r3, r2
 8020612:	930c      	str	r3, [sp, #48]	@ 0x30
 8020614:	2300      	movs	r3, #0
 8020616:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 802061a:	9308      	str	r3, [sp, #32]
 802061c:	461a      	mov	r2, r3
 802061e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8020622:	f8cd 8008 	str.w	r8, [sp, #8]
 8020626:	930e      	str	r3, [sp, #56]	@ 0x38
 8020628:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 802062c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802062e:	2d00      	cmp	r5, #0
 8020630:	d07c      	beq.n	802072c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8020632:	45ac      	cmp	ip, r5
 8020634:	d26c      	bcs.n	8020710 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 8020636:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020638:	eba5 050c 	sub.w	r5, r5, ip
 802063c:	455b      	cmp	r3, fp
 802063e:	b2ad      	uxth	r5, r5
 8020640:	4608      	mov	r0, r1
 8020642:	d802      	bhi.n	802064a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 8020644:	e070      	b.n	8020728 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 8020646:	2b00      	cmp	r3, #0
 8020648:	d15c      	bne.n	8020704 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 802064a:	9b03      	ldr	r3, [sp, #12]
 802064c:	9a02      	ldr	r2, [sp, #8]
 802064e:	785b      	ldrb	r3, [r3, #1]
 8020650:	f1c2 0207 	rsb	r2, r2, #7
 8020654:	4093      	lsls	r3, r2
 8020656:	005b      	lsls	r3, r3, #1
 8020658:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 802065c:	9b03      	ldr	r3, [sp, #12]
 802065e:	9902      	ldr	r1, [sp, #8]
 8020660:	781b      	ldrb	r3, [r3, #0]
 8020662:	410b      	asrs	r3, r1
 8020664:	3101      	adds	r1, #1
 8020666:	b2c9      	uxtb	r1, r1
 8020668:	2908      	cmp	r1, #8
 802066a:	9102      	str	r1, [sp, #8]
 802066c:	9903      	ldr	r1, [sp, #12]
 802066e:	b2db      	uxtb	r3, r3
 8020670:	bf03      	ittte	eq
 8020672:	3102      	addeq	r1, #2
 8020674:	9103      	streq	r1, [sp, #12]
 8020676:	2100      	moveq	r1, #0
 8020678:	3101      	addne	r1, #1
 802067a:	bf14      	ite	ne
 802067c:	9103      	strne	r1, [sp, #12]
 802067e:	9102      	streq	r1, [sp, #8]
 8020680:	4313      	orrs	r3, r2
 8020682:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8020684:	b29a      	uxth	r2, r3
 8020686:	4291      	cmp	r1, r2
 8020688:	d30a      	bcc.n	80206a0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 802068a:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 802068e:	2301      	movs	r3, #1
 8020690:	9905      	ldr	r1, [sp, #20]
 8020692:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8020696:	d30f      	bcc.n	80206b8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x204>
 8020698:	2100      	movs	r1, #0
 802069a:	4698      	mov	r8, r3
 802069c:	9100      	str	r1, [sp, #0]
 802069e:	e032      	b.n	8020706 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 80206a0:	9b05      	ldr	r3, [sp, #20]
 80206a2:	429a      	cmp	r2, r3
 80206a4:	d318      	bcc.n	80206d8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x224>
 80206a6:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 80206aa:	eb04 0308 	add.w	r3, r4, r8
 80206ae:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 80206b2:	f108 0301 	add.w	r3, r8, #1
 80206b6:	b29b      	uxth	r3, r3
 80206b8:	9905      	ldr	r1, [sp, #20]
 80206ba:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 80206be:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80206c2:	710e      	strb	r6, [r1, #4]
 80206c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80206c6:	80ce      	strh	r6, [r1, #6]
 80206c8:	f108 0601 	add.w	r6, r8, #1
 80206cc:	714e      	strb	r6, [r1, #5]
 80206ce:	9905      	ldr	r1, [sp, #20]
 80206d0:	3101      	adds	r1, #1
 80206d2:	b289      	uxth	r1, r1
 80206d4:	9105      	str	r1, [sp, #20]
 80206d6:	e7df      	b.n	8020698 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 80206d8:	4611      	mov	r1, r2
 80206da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80206de:	795b      	ldrb	r3, [r3, #5]
 80206e0:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 80206e4:	4426      	add	r6, r4
 80206e6:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 80206e8:	4437      	add	r7, r6
 80206ea:	2f00      	cmp	r7, #0
 80206ec:	dd06      	ble.n	80206fc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 80206ee:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80206f2:	790f      	ldrb	r7, [r1, #4]
 80206f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80206f8:	88c9      	ldrh	r1, [r1, #6]
 80206fa:	e7f4      	b.n	80206e6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x232>
 80206fc:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8020700:	b29b      	uxth	r3, r3
 8020702:	e7c5      	b.n	8020690 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1dc>
 8020704:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020706:	920c      	str	r2, [sp, #48]	@ 0x30
 8020708:	4601      	mov	r1, r0
 802070a:	9a00      	ldr	r2, [sp, #0]
 802070c:	469c      	mov	ip, r3
 802070e:	e78e      	b.n	802062e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 8020710:	1957      	adds	r7, r2, r5
 8020712:	ebac 0305 	sub.w	r3, ip, r5
 8020716:	b2ba      	uxth	r2, r7
 8020718:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 802071c:	b29b      	uxth	r3, r3
 802071e:	9200      	str	r2, [sp, #0]
 8020720:	2500      	movs	r5, #0
 8020722:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020724:	455a      	cmp	r2, fp
 8020726:	d88e      	bhi.n	8020646 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 8020728:	4601      	mov	r1, r0
 802072a:	e749      	b.n	80205c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x10c>
 802072c:	458c      	cmp	ip, r1
 802072e:	bf2c      	ite	cs
 8020730:	4628      	movcs	r0, r5
 8020732:	462b      	movcc	r3, r5
 8020734:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8020736:	bf27      	ittee	cs
 8020738:	ebac 0301 	subcs.w	r3, ip, r1
 802073c:	9109      	strcs	r1, [sp, #36]	@ 0x24
 802073e:	eba1 000c 	subcc.w	r0, r1, ip
 8020742:	f8cd c024 	strcc.w	ip, [sp, #36]	@ 0x24
 8020746:	bf2c      	ite	cs
 8020748:	b29b      	uxthcs	r3, r3
 802074a:	b280      	uxthcc	r0, r0
 802074c:	2dff      	cmp	r5, #255	@ 0xff
 802074e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8020750:	eb02 0705 	add.w	r7, r2, r5
 8020754:	b2bd      	uxth	r5, r7
 8020756:	9500      	str	r5, [sp, #0]
 8020758:	d12e      	bne.n	80207b8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>
 802075a:	465e      	mov	r6, fp
 802075c:	9d00      	ldr	r5, [sp, #0]
 802075e:	42aa      	cmp	r2, r5
 8020760:	f040 8083 	bne.w	802086a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3b6>
 8020764:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020766:	458c      	cmp	ip, r1
 8020768:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 802076c:	d3d8      	bcc.n	8020720 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 802076e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020770:	9904      	ldr	r1, [sp, #16]
 8020772:	8812      	ldrh	r2, [r2, #0]
 8020774:	1a52      	subs	r2, r2, r1
 8020776:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 802077a:	9a08      	ldr	r2, [sp, #32]
 802077c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 802077e:	3201      	adds	r2, #1
 8020780:	428a      	cmp	r2, r1
 8020782:	9208      	str	r2, [sp, #32]
 8020784:	f040 8091 	bne.w	80208aa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f6>
 8020788:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 802078c:	f8bd c068 	ldrh.w	ip, [sp, #104]	@ 0x68
 8020790:	9b04      	ldr	r3, [sp, #16]
 8020792:	eba5 050c 	sub.w	r5, r5, ip
 8020796:	b2ad      	uxth	r5, r5
 8020798:	2d00      	cmp	r5, #0
 802079a:	bf0c      	ite	eq
 802079c:	4619      	moveq	r1, r3
 802079e:	2100      	movne	r1, #0
 80207a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80207a2:	b289      	uxth	r1, r1
 80207a4:	3301      	adds	r3, #1
 80207a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80207a8:	e701      	b.n	80205ae <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfa>
 80207aa:	bf00      	nop
 80207ac:	2005b928 	.word	0x2005b928
 80207b0:	2005b922 	.word	0x2005b922
 80207b4:	fffff7fb 	.word	0xfffff7fb
 80207b8:	46d9      	mov	r9, fp
 80207ba:	9d00      	ldr	r5, [sp, #0]
 80207bc:	42aa      	cmp	r2, r5
 80207be:	d0d1      	beq.n	8020764 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b0>
 80207c0:	1c55      	adds	r5, r2, #1
 80207c2:	4422      	add	r2, r4
 80207c4:	f892 e804 	ldrb.w	lr, [r2, #2052]	@ 0x804
 80207c8:	9a06      	ldr	r2, [sp, #24]
 80207ca:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80207ce:	4472      	add	r2, lr
 80207d0:	9212      	str	r2, [sp, #72]	@ 0x48
 80207d2:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80207d4:	f8b9 2000 	ldrh.w	r2, [r9]
 80207d8:	f897 a002 	ldrb.w	sl, [r7, #2]
 80207dc:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80207de:	1216      	asrs	r6, r2, #8
 80207e0:	fb1a fa07 	smulbb	sl, sl, r7
 80207e4:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80207e8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80207ea:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80207ee:	fb06 a607 	mla	r6, r6, r7, sl
 80207f2:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80207f4:	9517      	str	r5, [sp, #92]	@ 0x5c
 80207f6:	f897 a001 	ldrb.w	sl, [r7, #1]
 80207fa:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80207fc:	10d5      	asrs	r5, r2, #3
 80207fe:	fb1a fa07 	smulbb	sl, sl, r7
 8020802:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8020806:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8020808:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 802080c:	fb05 a507 	mla	r5, r5, r7, sl
 8020810:	9f06      	ldr	r7, [sp, #24]
 8020812:	00d2      	lsls	r2, r2, #3
 8020814:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020818:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 802081a:	b2d2      	uxtb	r2, r2
 802081c:	fb1e fe07 	smulbb	lr, lr, r7
 8020820:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8020822:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020826:	fb02 e207 	mla	r2, r2, r7, lr
 802082a:	b2b6      	uxth	r6, r6
 802082c:	b292      	uxth	r2, r2
 802082e:	b2ad      	uxth	r5, r5
 8020830:	f106 0a01 	add.w	sl, r6, #1
 8020834:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8020838:	f102 0e01 	add.w	lr, r2, #1
 802083c:	f105 0a01 	add.w	sl, r5, #1
 8020840:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 8020844:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020848:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 802084c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8020850:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020854:	ea4e 0606 	orr.w	r6, lr, r6
 8020858:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 802085c:	ea46 060a 	orr.w	r6, r6, sl
 8020860:	f829 6b02 	strh.w	r6, [r9], #2
 8020864:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8020868:	e7a7      	b.n	80207ba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x306>
 802086a:	f102 0e01 	add.w	lr, r2, #1
 802086e:	4422      	add	r2, r4
 8020870:	f892 5804 	ldrb.w	r5, [r2, #2052]	@ 0x804
 8020874:	9a06      	ldr	r2, [sp, #24]
 8020876:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802087a:	eb02 0a05 	add.w	sl, r2, r5
 802087e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8020882:	4a13      	ldr	r2, [pc, #76]	@ (80208d0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x41c>)
 8020884:	9f06      	ldr	r7, [sp, #24]
 8020886:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 802088a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802088e:	00d2      	lsls	r2, r2, #3
 8020890:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020894:	ea49 0202 	orr.w	r2, r9, r2
 8020898:	f817 9005 	ldrb.w	r9, [r7, r5]
 802089c:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 80208a0:	f826 2b02 	strh.w	r2, [r6], #2
 80208a4:	fa1f f28e 	uxth.w	r2, lr
 80208a8:	e758      	b.n	802075c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>
 80208aa:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80208ae:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 80208b2:	1a2d      	subs	r5, r5, r0
 80208b4:	b2ad      	uxth	r5, r5
 80208b6:	2d00      	cmp	r5, #0
 80208b8:	bf18      	it	ne
 80208ba:	2000      	movne	r0, #0
 80208bc:	e731      	b.n	8020722 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26e>
 80208be:	4b05      	ldr	r3, [pc, #20]	@ (80208d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 80208c0:	6818      	ldr	r0, [r3, #0]
 80208c2:	6803      	ldr	r3, [r0, #0]
 80208c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80208c6:	4798      	blx	r3
 80208c8:	b01f      	add	sp, #124	@ 0x7c
 80208ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80208ce:	bf00      	nop
 80208d0:	fffff800 	.word	0xfffff800
 80208d4:	2005b928 	.word	0x2005b928

080208d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80208d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208dc:	469b      	mov	fp, r3
 80208de:	4616      	mov	r6, r2
 80208e0:	b091      	sub	sp, #68	@ 0x44
 80208e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80208e6:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 80208ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80208ee:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 80208f2:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 80208f6:	4604      	mov	r4, r0
 80208f8:	460d      	mov	r5, r1
 80208fa:	4640      	mov	r0, r8
 80208fc:	4659      	mov	r1, fp
 80208fe:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8020902:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8020906:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 802090a:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 802090e:	f7f3 fb2f 	bl	8013f70 <_ZN8touchgfx4RectaNERKS0_>
 8020912:	4631      	mov	r1, r6
 8020914:	4640      	mov	r0, r8
 8020916:	f7f3 fb2b 	bl	8013f70 <_ZN8touchgfx4RectaNERKS0_>
 802091a:	4b74      	ldr	r3, [pc, #464]	@ (8020aec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 802091c:	8818      	ldrh	r0, [r3, #0]
 802091e:	4b74      	ldr	r3, [pc, #464]	@ (8020af0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8020920:	b202      	sxth	r2, r0
 8020922:	8819      	ldrh	r1, [r3, #0]
 8020924:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8020928:	b20e      	sxth	r6, r1
 802092a:	2b00      	cmp	r3, #0
 802092c:	da07      	bge.n	802093e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 802092e:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8020932:	4463      	add	r3, ip
 8020934:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8020938:	2300      	movs	r3, #0
 802093a:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 802093e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8020942:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8020946:	1ad2      	subs	r2, r2, r3
 8020948:	4594      	cmp	ip, r2
 802094a:	bfc4      	itt	gt
 802094c:	1ac2      	subgt	r2, r0, r3
 802094e:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 8020952:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8020956:	2a00      	cmp	r2, #0
 8020958:	da07      	bge.n	802096a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 802095a:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 802095e:	4462      	add	r2, ip
 8020960:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8020964:	2200      	movs	r2, #0
 8020966:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 802096a:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 802096e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8020972:	eba6 060a 	sub.w	r6, r6, sl
 8020976:	42b2      	cmp	r2, r6
 8020978:	bfc4      	itt	gt
 802097a:	eba1 020a 	subgt.w	r2, r1, sl
 802097e:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 8020982:	4a5c      	ldr	r2, [pc, #368]	@ (8020af4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8020984:	7812      	ldrb	r2, [r2, #0]
 8020986:	b9a2      	cbnz	r2, 80209b2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8020988:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 802098c:	4286      	cmp	r6, r0
 802098e:	4640      	mov	r0, r8
 8020990:	9303      	str	r3, [sp, #12]
 8020992:	bf14      	ite	ne
 8020994:	2600      	movne	r6, #0
 8020996:	2601      	moveq	r6, #1
 8020998:	f7f3 fb2d 	bl	8013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>
 802099c:	9b03      	ldr	r3, [sp, #12]
 802099e:	b160      	cbz	r0, 80209ba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 80209a0:	2300      	movs	r3, #0
 80209a2:	8023      	strh	r3, [r4, #0]
 80209a4:	8063      	strh	r3, [r4, #2]
 80209a6:	80a3      	strh	r3, [r4, #4]
 80209a8:	4620      	mov	r0, r4
 80209aa:	80e3      	strh	r3, [r4, #6]
 80209ac:	b011      	add	sp, #68	@ 0x44
 80209ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209b2:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 80209b6:	428e      	cmp	r6, r1
 80209b8:	e7e9      	b.n	802098e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 80209ba:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80209be:	a90e      	add	r1, sp, #56	@ 0x38
 80209c0:	9205      	str	r2, [sp, #20]
 80209c2:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 80209c6:	900e      	str	r0, [sp, #56]	@ 0x38
 80209c8:	9206      	str	r2, [sp, #24]
 80209ca:	f8bb 2000 	ldrh.w	r2, [fp]
 80209ce:	a80c      	add	r0, sp, #48	@ 0x30
 80209d0:	1a9b      	subs	r3, r3, r2
 80209d2:	b21b      	sxth	r3, r3
 80209d4:	9303      	str	r3, [sp, #12]
 80209d6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80209da:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 80209de:	ebaa 0a03 	sub.w	sl, sl, r3
 80209e2:	fa0f f38a 	sxth.w	r3, sl
 80209e6:	9304      	str	r3, [sp, #16]
 80209e8:	9b03      	ldr	r3, [sp, #12]
 80209ea:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 80209ee:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80209f2:	9b04      	ldr	r3, [sp, #16]
 80209f4:	f8df b104 	ldr.w	fp, [pc, #260]	@ 8020afc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 80209f8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80209fc:	9b05      	ldr	r3, [sp, #20]
 80209fe:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8020a02:	9b06      	ldr	r3, [sp, #24]
 8020a04:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8020a08:	f7f7 fdae 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020a0c:	4640      	mov	r0, r8
 8020a0e:	f7f7 fd83 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020a12:	a80e      	add	r0, sp, #56	@ 0x38
 8020a14:	f7f7 fd80 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020a18:	4b37      	ldr	r3, [pc, #220]	@ (8020af8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8020a1a:	4628      	mov	r0, r5
 8020a1c:	881b      	ldrh	r3, [r3, #0]
 8020a1e:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 8020a22:	9307      	str	r3, [sp, #28]
 8020a24:	682b      	ldr	r3, [r5, #0]
 8020a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020a28:	4798      	blx	r3
 8020a2a:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 8020a2e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8020a32:	4681      	mov	r9, r0
 8020a34:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8020a38:	f8db 0000 	ldr.w	r0, [fp]
 8020a3c:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8020a3e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8020a42:	6803      	ldr	r3, [r0, #0]
 8020a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020a46:	4798      	blx	r3
 8020a48:	4607      	mov	r7, r0
 8020a4a:	f8db 0000 	ldr.w	r0, [fp]
 8020a4e:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8020a52:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8020a56:	6803      	ldr	r3, [r0, #0]
 8020a58:	9109      	str	r1, [sp, #36]	@ 0x24
 8020a5a:	9208      	str	r2, [sp, #32]
 8020a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020a5e:	4798      	blx	r3
 8020a60:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8020a64:	f010 0f01 	tst.w	r0, #1
 8020a68:	d012      	beq.n	8020a90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8020a6a:	f8db 0000 	ldr.w	r0, [fp]
 8020a6e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8020a72:	6803      	ldr	r3, [r0, #0]
 8020a74:	9200      	str	r2, [sp, #0]
 8020a76:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 8020a78:	e898 0006 	ldmia.w	r8, {r1, r2}
 8020a7c:	462b      	mov	r3, r5
 8020a7e:	47b0      	blx	r6
 8020a80:	9b03      	ldr	r3, [sp, #12]
 8020a82:	8023      	strh	r3, [r4, #0]
 8020a84:	9b04      	ldr	r3, [sp, #16]
 8020a86:	8063      	strh	r3, [r4, #2]
 8020a88:	9b05      	ldr	r3, [sp, #20]
 8020a8a:	80a3      	strh	r3, [r4, #4]
 8020a8c:	9b06      	ldr	r3, [sp, #24]
 8020a8e:	e78b      	b.n	80209a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8020a90:	fb09 f202 	mul.w	r2, r9, r2
 8020a94:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8020a98:	440f      	add	r7, r1
 8020a9a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 8020a9e:	b166      	cbz	r6, 8020aba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8020aa0:	9a07      	ldr	r2, [sp, #28]
 8020aa2:	4592      	cmp	sl, r2
 8020aa4:	d109      	bne.n	8020aba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8020aa6:	f8db 0000 	ldr.w	r0, [fp]
 8020aaa:	fb09 f303 	mul.w	r3, r9, r3
 8020aae:	6802      	ldr	r2, [r0, #0]
 8020ab0:	4629      	mov	r1, r5
 8020ab2:	6b96      	ldr	r6, [r2, #56]	@ 0x38
 8020ab4:	463a      	mov	r2, r7
 8020ab6:	47b0      	blx	r6
 8020ab8:	e7e2      	b.n	8020a80 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8020aba:	fb0a f303 	mul.w	r3, sl, r3
 8020abe:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8020afc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8020ac2:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8020ac6:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8020aca:	4545      	cmp	r5, r8
 8020acc:	d2d8      	bcs.n	8020a80 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8020ace:	f8db 0000 	ldr.w	r0, [fp]
 8020ad2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8020ad6:	6802      	ldr	r2, [r0, #0]
 8020ad8:	4629      	mov	r1, r5
 8020ada:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 8020ade:	005b      	lsls	r3, r3, #1
 8020ae0:	463a      	mov	r2, r7
 8020ae2:	47d0      	blx	sl
 8020ae4:	444f      	add	r7, r9
 8020ae6:	4435      	add	r5, r6
 8020ae8:	e7ef      	b.n	8020aca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8020aea:	bf00      	nop
 8020aec:	2005b91c 	.word	0x2005b91c
 8020af0:	2005b91e 	.word	0x2005b91e
 8020af4:	2005b920 	.word	0x2005b920
 8020af8:	2005b922 	.word	0x2005b922
 8020afc:	2005b928 	.word	0x2005b928

08020b00 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8020b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020b02:	4606      	mov	r6, r0
 8020b04:	b087      	sub	sp, #28
 8020b06:	460c      	mov	r4, r1
 8020b08:	4617      	mov	r7, r2
 8020b0a:	461d      	mov	r5, r3
 8020b0c:	b333      	cbz	r3, 8020b5c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020b0e:	4608      	mov	r0, r1
 8020b10:	f7f3 fa71 	bl	8013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8020b14:	bb10      	cbnz	r0, 8020b5c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020b16:	6820      	ldr	r0, [r4, #0]
 8020b18:	6861      	ldr	r1, [r4, #4]
 8020b1a:	ab04      	add	r3, sp, #16
 8020b1c:	4c1b      	ldr	r4, [pc, #108]	@ (8020b8c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8020b1e:	c303      	stmia	r3!, {r0, r1}
 8020b20:	a804      	add	r0, sp, #16
 8020b22:	f7f7 fcf9 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b26:	6820      	ldr	r0, [r4, #0]
 8020b28:	6803      	ldr	r3, [r0, #0]
 8020b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020b2c:	4798      	blx	r3
 8020b2e:	2dff      	cmp	r5, #255	@ 0xff
 8020b30:	d016      	beq.n	8020b60 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8020b32:	f010 0f08 	tst.w	r0, #8
 8020b36:	6820      	ldr	r0, [r4, #0]
 8020b38:	d015      	beq.n	8020b66 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8020b3a:	2400      	movs	r4, #0
 8020b3c:	6801      	ldr	r1, [r0, #0]
 8020b3e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8020b42:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8020b46:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020b4a:	9401      	str	r4, [sp, #4]
 8020b4c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8020b50:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020b54:	9400      	str	r4, [sp, #0]
 8020b56:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 8020b58:	4639      	mov	r1, r7
 8020b5a:	47a0      	blx	r4
 8020b5c:	b007      	add	sp, #28
 8020b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020b60:	f010 0f02 	tst.w	r0, #2
 8020b64:	e7e7      	b.n	8020b36 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8020b66:	6803      	ldr	r3, [r0, #0]
 8020b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020b6a:	4798      	blx	r3
 8020b6c:	4b08      	ldr	r3, [pc, #32]	@ (8020b90 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8020b6e:	4601      	mov	r1, r0
 8020b70:	881a      	ldrh	r2, [r3, #0]
 8020b72:	e9cd 7500 	strd	r7, r5, [sp]
 8020b76:	6833      	ldr	r3, [r6, #0]
 8020b78:	4630      	mov	r0, r6
 8020b7a:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8020b7c:	ab04      	add	r3, sp, #16
 8020b7e:	47a8      	blx	r5
 8020b80:	6820      	ldr	r0, [r4, #0]
 8020b82:	6803      	ldr	r3, [r0, #0]
 8020b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020b86:	4798      	blx	r3
 8020b88:	e7e8      	b.n	8020b5c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020b8a:	bf00      	nop
 8020b8c:	2005b928 	.word	0x2005b928
 8020b90:	2005b922 	.word	0x2005b922

08020b94 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8020b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020b98:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8020b9c:	4688      	mov	r8, r1
 8020b9e:	4614      	mov	r4, r2
 8020ba0:	461d      	mov	r5, r3
 8020ba2:	9e08      	ldr	r6, [sp, #32]
 8020ba4:	2f00      	cmp	r7, #0
 8020ba6:	f000 80a9 	beq.w	8020cfc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8020baa:	4618      	mov	r0, r3
 8020bac:	f7f3 fa23 	bl	8013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8020bb0:	2800      	cmp	r0, #0
 8020bb2:	f040 80a3 	bne.w	8020cfc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8020bb6:	f9b5 1000 	ldrsh.w	r1, [r5]
 8020bba:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8020bbe:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8020bc2:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8020bc6:	fb04 1303 	mla	r3, r4, r3, r1
 8020bca:	4365      	muls	r5, r4
 8020bcc:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8020bd0:	2fff      	cmp	r7, #255	@ 0xff
 8020bd2:	eba4 0200 	sub.w	r2, r4, r0
 8020bd6:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8020bda:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8020bde:	d04a      	beq.n	8020c76 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8020be0:	b2bc      	uxth	r4, r7
 8020be2:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 8020be6:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8020bea:	fa5f f788 	uxtb.w	r7, r8
 8020bee:	b2f3      	uxtb	r3, r6
 8020bf0:	fb0e fe04 	mul.w	lr, lr, r4
 8020bf4:	4367      	muls	r7, r4
 8020bf6:	4363      	muls	r3, r4
 8020bf8:	0040      	lsls	r0, r0, #1
 8020bfa:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8020bfe:	fa1f fc8c 	uxth.w	ip, ip
 8020c02:	42a9      	cmp	r1, r5
 8020c04:	d27a      	bcs.n	8020cfc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8020c06:	eb01 0900 	add.w	r9, r1, r0
 8020c0a:	4549      	cmp	r1, r9
 8020c0c:	d231      	bcs.n	8020c72 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 8020c0e:	880a      	ldrh	r2, [r1, #0]
 8020c10:	1214      	asrs	r4, r2, #8
 8020c12:	10d6      	asrs	r6, r2, #3
 8020c14:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8020c18:	00d2      	lsls	r2, r2, #3
 8020c1a:	b2d2      	uxtb	r2, r2
 8020c1c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8020c20:	fb14 f40c 	smulbb	r4, r4, ip
 8020c24:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020c28:	fb12 f20c 	smulbb	r2, r2, ip
 8020c2c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8020c30:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8020c34:	4474      	add	r4, lr
 8020c36:	fb16 f60c 	smulbb	r6, r6, ip
 8020c3a:	b2a4      	uxth	r4, r4
 8020c3c:	441a      	add	r2, r3
 8020c3e:	b292      	uxth	r2, r2
 8020c40:	f104 0a01 	add.w	sl, r4, #1
 8020c44:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8020c48:	f102 0a01 	add.w	sl, r2, #1
 8020c4c:	443e      	add	r6, r7
 8020c4e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8020c52:	b2b6      	uxth	r6, r6
 8020c54:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8020c58:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020c5c:	4322      	orrs	r2, r4
 8020c5e:	1c74      	adds	r4, r6, #1
 8020c60:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8020c64:	0976      	lsrs	r6, r6, #5
 8020c66:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8020c6a:	4332      	orrs	r2, r6
 8020c6c:	f821 2b02 	strh.w	r2, [r1], #2
 8020c70:	e7cb      	b.n	8020c0a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8020c72:	4441      	add	r1, r8
 8020c74:	e7c5      	b.n	8020c02 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8020c76:	4f22      	ldr	r7, [pc, #136]	@ (8020d00 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8020c78:	0973      	lsrs	r3, r6, #5
 8020c7a:	ea08 0707 	and.w	r7, r8, r7
 8020c7e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020c82:	433b      	orrs	r3, r7
 8020c84:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8020c88:	4333      	orrs	r3, r6
 8020c8a:	07e7      	lsls	r7, r4, #31
 8020c8c:	b29b      	uxth	r3, r3
 8020c8e:	d50b      	bpl.n	8020ca8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8020c90:	0040      	lsls	r0, r0, #1
 8020c92:	0052      	lsls	r2, r2, #1
 8020c94:	42a9      	cmp	r1, r5
 8020c96:	d231      	bcs.n	8020cfc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8020c98:	180c      	adds	r4, r1, r0
 8020c9a:	42a1      	cmp	r1, r4
 8020c9c:	d202      	bcs.n	8020ca4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 8020c9e:	f821 3b02 	strh.w	r3, [r1], #2
 8020ca2:	e7fa      	b.n	8020c9a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 8020ca4:	4411      	add	r1, r2
 8020ca6:	e7f5      	b.n	8020c94 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8020ca8:	078e      	lsls	r6, r1, #30
 8020caa:	d008      	beq.n	8020cbe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8020cac:	460a      	mov	r2, r1
 8020cae:	0066      	lsls	r6, r4, #1
 8020cb0:	42aa      	cmp	r2, r5
 8020cb2:	d202      	bcs.n	8020cba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 8020cb4:	8013      	strh	r3, [r2, #0]
 8020cb6:	4432      	add	r2, r6
 8020cb8:	e7fa      	b.n	8020cb0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 8020cba:	3102      	adds	r1, #2
 8020cbc:	3801      	subs	r0, #1
 8020cbe:	07c2      	lsls	r2, r0, #31
 8020cc0:	d50b      	bpl.n	8020cda <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8020cc2:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8020cc6:	3a01      	subs	r2, #1
 8020cc8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8020ccc:	0066      	lsls	r6, r4, #1
 8020cce:	42aa      	cmp	r2, r5
 8020cd0:	d202      	bcs.n	8020cd8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 8020cd2:	8013      	strh	r3, [r2, #0]
 8020cd4:	4432      	add	r2, r6
 8020cd6:	e7fa      	b.n	8020cce <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8020cd8:	3801      	subs	r0, #1
 8020cda:	b178      	cbz	r0, 8020cfc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8020cdc:	1040      	asrs	r0, r0, #1
 8020cde:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8020ce2:	0080      	lsls	r0, r0, #2
 8020ce4:	0064      	lsls	r4, r4, #1
 8020ce6:	42a9      	cmp	r1, r5
 8020ce8:	d208      	bcs.n	8020cfc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8020cea:	460a      	mov	r2, r1
 8020cec:	180e      	adds	r6, r1, r0
 8020cee:	42b2      	cmp	r2, r6
 8020cf0:	d202      	bcs.n	8020cf8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 8020cf2:	f842 3b04 	str.w	r3, [r2], #4
 8020cf6:	e7fa      	b.n	8020cee <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 8020cf8:	4421      	add	r1, r4
 8020cfa:	e7f4      	b.n	8020ce6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 8020cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020d00:	00fff800 	.word	0x00fff800

08020d04 <_ZN8touchgfx8LCD16bppC1Ev>:
 8020d04:	2200      	movs	r2, #0
 8020d06:	4912      	ldr	r1, [pc, #72]	@ (8020d50 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 8020d08:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8020d0c:	6001      	str	r1, [r0, #0]
 8020d0e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8020d12:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8020d16:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8020d1a:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8020d1e:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8020d22:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8020d26:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8020d2a:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8020d2e:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8020d32:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8020d36:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8020d3a:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8020d3e:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 8020d42:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 8020d46:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 8020d4a:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 8020d4e:	4770      	bx	lr
 8020d50:	0802eafc 	.word	0x0802eafc

08020d54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8020d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d58:	460d      	mov	r5, r1
 8020d5a:	4604      	mov	r4, r0
 8020d5c:	4699      	mov	r9, r3
 8020d5e:	b08d      	sub	sp, #52	@ 0x34
 8020d60:	6808      	ldr	r0, [r1, #0]
 8020d62:	6849      	ldr	r1, [r1, #4]
 8020d64:	ab08      	add	r3, sp, #32
 8020d66:	c303      	stmia	r3!, {r0, r1}
 8020d68:	6810      	ldr	r0, [r2, #0]
 8020d6a:	6851      	ldr	r1, [r2, #4]
 8020d6c:	ab0a      	add	r3, sp, #40	@ 0x28
 8020d6e:	c303      	stmia	r3!, {r0, r1}
 8020d70:	a808      	add	r0, sp, #32
 8020d72:	f7f7 fbd1 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020d76:	4629      	mov	r1, r5
 8020d78:	a80a      	add	r0, sp, #40	@ 0x28
 8020d7a:	f7f7 fbf5 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020d7e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8020d82:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8020d86:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8020d8a:	4d63      	ldr	r5, [pc, #396]	@ (8020f18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8020d8c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020d90:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020d94:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8020d98:	6828      	ldr	r0, [r5, #0]
 8020d9a:	440a      	add	r2, r1
 8020d9c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8020da0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8020da4:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 8020da8:	4413      	add	r3, r2
 8020daa:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8020dae:	6803      	ldr	r3, [r0, #0]
 8020db0:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8020db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020db6:	4798      	blx	r3
 8020db8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8020dbc:	d119      	bne.n	8020df2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8020dbe:	f010 0f20 	tst.w	r0, #32
 8020dc2:	6828      	ldr	r0, [r5, #0]
 8020dc4:	d018      	beq.n	8020df8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8020dc6:	2500      	movs	r5, #0
 8020dc8:	6801      	ldr	r1, [r0, #0]
 8020dca:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8020dce:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8020dd2:	b2b6      	uxth	r6, r6
 8020dd4:	9502      	str	r5, [sp, #8]
 8020dd6:	fa1f f588 	uxth.w	r5, r8
 8020dda:	9601      	str	r6, [sp, #4]
 8020ddc:	9500      	str	r5, [sp, #0]
 8020dde:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 8020de0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8020de4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8020de8:	4621      	mov	r1, r4
 8020dea:	47a8      	blx	r5
 8020dec:	b00d      	add	sp, #52	@ 0x34
 8020dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020df2:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8020df6:	e7e4      	b.n	8020dc2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8020df8:	6803      	ldr	r3, [r0, #0]
 8020dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020dfc:	4798      	blx	r3
 8020dfe:	4947      	ldr	r1, [pc, #284]	@ (8020f1c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8020e00:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8020e04:	468a      	mov	sl, r1
 8020e06:	880b      	ldrh	r3, [r1, #0]
 8020e08:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 8020e0c:	fb03 5202 	mla	r2, r3, r2, r5
 8020e10:	4373      	muls	r3, r6
 8020e12:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020e16:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020e1a:	9307      	str	r3, [sp, #28]
 8020e1c:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8020e20:	9306      	str	r3, [sp, #24]
 8020e22:	9b07      	ldr	r3, [sp, #28]
 8020e24:	4298      	cmp	r0, r3
 8020e26:	d270      	bcs.n	8020f0a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8020e28:	4621      	mov	r1, r4
 8020e2a:	9b06      	ldr	r3, [sp, #24]
 8020e2c:	eb00 0b03 	add.w	fp, r0, r3
 8020e30:	4558      	cmp	r0, fp
 8020e32:	d25d      	bcs.n	8020ef0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8020e34:	f851 4b04 	ldr.w	r4, [r1], #4
 8020e38:	0e23      	lsrs	r3, r4, #24
 8020e3a:	d014      	beq.n	8020e66 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8020e3c:	2bff      	cmp	r3, #255	@ 0xff
 8020e3e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8020e42:	d112      	bne.n	8020e6a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8020e44:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8020e48:	d10f      	bne.n	8020e6a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8020e4a:	0963      	lsrs	r3, r4, #5
 8020e4c:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8020e50:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020e54:	f02c 0c07 	bic.w	ip, ip, #7
 8020e58:	ea43 0c0c 	orr.w	ip, r3, ip
 8020e5c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020e60:	ea4c 0404 	orr.w	r4, ip, r4
 8020e64:	8004      	strh	r4, [r0, #0]
 8020e66:	3002      	adds	r0, #2
 8020e68:	e7e2      	b.n	8020e30 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8020e6a:	fb09 f303 	mul.w	r3, r9, r3
 8020e6e:	1c5a      	adds	r2, r3, #1
 8020e70:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8020e74:	1212      	asrs	r2, r2, #8
 8020e76:	b293      	uxth	r3, r2
 8020e78:	43d2      	mvns	r2, r2
 8020e7a:	8807      	ldrh	r7, [r0, #0]
 8020e7c:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8020e80:	fb1e fe03 	smulbb	lr, lr, r3
 8020e84:	123e      	asrs	r6, r7, #8
 8020e86:	fa5f fc8c 	uxtb.w	ip, ip
 8020e8a:	b2e4      	uxtb	r4, r4
 8020e8c:	fb1c fc03 	smulbb	ip, ip, r3
 8020e90:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8020e94:	fb14 f403 	smulbb	r4, r4, r3
 8020e98:	b2d2      	uxtb	r2, r2
 8020e9a:	10fd      	asrs	r5, r7, #3
 8020e9c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8020ea0:	00ff      	lsls	r7, r7, #3
 8020ea2:	fb06 e602 	mla	r6, r6, r2, lr
 8020ea6:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8020eaa:	b2ff      	uxtb	r7, r7
 8020eac:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8020eb0:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8020eb4:	fb05 c502 	mla	r5, r5, r2, ip
 8020eb8:	fb07 4702 	mla	r7, r7, r2, r4
 8020ebc:	b2b6      	uxth	r6, r6
 8020ebe:	f106 0e01 	add.w	lr, r6, #1
 8020ec2:	b2ad      	uxth	r5, r5
 8020ec4:	b2bf      	uxth	r7, r7
 8020ec6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8020eca:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 8020ece:	f105 0c01 	add.w	ip, r5, #1
 8020ed2:	1c7e      	adds	r6, r7, #1
 8020ed4:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8020ed8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020edc:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020ee0:	096d      	lsrs	r5, r5, #5
 8020ee2:	ea46 060e 	orr.w	r6, r6, lr
 8020ee6:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8020eea:	432e      	orrs	r6, r5
 8020eec:	8006      	strh	r6, [r0, #0]
 8020eee:	e7ba      	b.n	8020e66 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8020ef0:	f8ba 3000 	ldrh.w	r3, [sl]
 8020ef4:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 8020ef8:	eba3 0308 	sub.w	r3, r3, r8
 8020efc:	eba4 0408 	sub.w	r4, r4, r8
 8020f00:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020f04:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8020f08:	e78b      	b.n	8020e22 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8020f0a:	4b03      	ldr	r3, [pc, #12]	@ (8020f18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8020f0c:	6818      	ldr	r0, [r3, #0]
 8020f0e:	6803      	ldr	r3, [r0, #0]
 8020f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020f12:	4798      	blx	r3
 8020f14:	e76a      	b.n	8020dec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8020f16:	bf00      	nop
 8020f18:	2005b928 	.word	0x2005b928
 8020f1c:	2005b922 	.word	0x2005b922

08020f20 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8020f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020f24:	b085      	sub	sp, #20
 8020f26:	466d      	mov	r5, sp
 8020f28:	4616      	mov	r6, r2
 8020f2a:	460c      	mov	r4, r1
 8020f2c:	6810      	ldr	r0, [r2, #0]
 8020f2e:	6851      	ldr	r1, [r2, #4]
 8020f30:	c503      	stmia	r5!, {r0, r1}
 8020f32:	6818      	ldr	r0, [r3, #0]
 8020f34:	6859      	ldr	r1, [r3, #4]
 8020f36:	c503      	stmia	r5!, {r0, r1}
 8020f38:	4668      	mov	r0, sp
 8020f3a:	f7f7 faed 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020f3e:	4631      	mov	r1, r6
 8020f40:	a802      	add	r0, sp, #8
 8020f42:	f7f7 fb11 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020f46:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8020f4a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8020f4e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8020f52:	4d28      	ldr	r5, [pc, #160]	@ (8020ff4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8020f54:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020f58:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020f5c:	f8bd 1000 	ldrh.w	r1, [sp]
 8020f60:	6828      	ldr	r0, [r5, #0]
 8020f62:	440a      	add	r2, r1
 8020f64:	f8ad 2008 	strh.w	r2, [sp, #8]
 8020f68:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8020f6c:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8020f70:	4413      	add	r3, r2
 8020f72:	f8ad 300a 	strh.w	r3, [sp, #10]
 8020f76:	6803      	ldr	r3, [r0, #0]
 8020f78:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8020f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020f7e:	4798      	blx	r3
 8020f80:	4e1d      	ldr	r6, [pc, #116]	@ (8020ff8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8020f82:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8020f86:	8833      	ldrh	r3, [r6, #0]
 8020f88:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8020f8c:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 8020ffc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8020f90:	fb03 1202 	mla	r2, r3, r2, r1
 8020f94:	fb08 f303 	mul.w	r3, r8, r3
 8020f98:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020f9c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020fa0:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8020fa4:	4298      	cmp	r0, r3
 8020fa6:	d21d      	bcs.n	8020fe4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8020fa8:	eb00 080c 	add.w	r8, r0, ip
 8020fac:	4540      	cmp	r0, r8
 8020fae:	d20f      	bcs.n	8020fd0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8020fb0:	f854 1b04 	ldr.w	r1, [r4], #4
 8020fb4:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8020fb8:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8020fbc:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8020fc0:	ea42 0209 	orr.w	r2, r2, r9
 8020fc4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8020fc8:	430a      	orrs	r2, r1
 8020fca:	f820 2b02 	strh.w	r2, [r0], #2
 8020fce:	e7ed      	b.n	8020fac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8020fd0:	8832      	ldrh	r2, [r6, #0]
 8020fd2:	1bd2      	subs	r2, r2, r7
 8020fd4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020fd8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8020fdc:	1bd2      	subs	r2, r2, r7
 8020fde:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8020fe2:	e7df      	b.n	8020fa4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8020fe4:	6828      	ldr	r0, [r5, #0]
 8020fe6:	6803      	ldr	r3, [r0, #0]
 8020fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020fea:	4798      	blx	r3
 8020fec:	b005      	add	sp, #20
 8020fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020ff2:	bf00      	nop
 8020ff4:	2005b928 	.word	0x2005b928
 8020ff8:	2005b922 	.word	0x2005b922
 8020ffc:	fffff800 	.word	0xfffff800

08021000 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8021000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021004:	460e      	mov	r6, r1
 8021006:	4604      	mov	r4, r0
 8021008:	461d      	mov	r5, r3
 802100a:	b08e      	sub	sp, #56	@ 0x38
 802100c:	6808      	ldr	r0, [r1, #0]
 802100e:	6849      	ldr	r1, [r1, #4]
 8021010:	ab0a      	add	r3, sp, #40	@ 0x28
 8021012:	c303      	stmia	r3!, {r0, r1}
 8021014:	6810      	ldr	r0, [r2, #0]
 8021016:	6851      	ldr	r1, [r2, #4]
 8021018:	ab0c      	add	r3, sp, #48	@ 0x30
 802101a:	c303      	stmia	r3!, {r0, r1}
 802101c:	a80a      	add	r0, sp, #40	@ 0x28
 802101e:	f7f7 fa7b 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021022:	4631      	mov	r1, r6
 8021024:	a80c      	add	r0, sp, #48	@ 0x30
 8021026:	f7f7 fa9f 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802102a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802102e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8021032:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8021036:	f8df 81b0 	ldr.w	r8, [pc, #432]	@ 80211e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 802103a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802103e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021042:	440c      	add	r4, r1
 8021044:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8021048:	f8d8 0000 	ldr.w	r0, [r8]
 802104c:	440a      	add	r2, r1
 802104e:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8021052:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8021056:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 802105a:	4413      	add	r3, r2
 802105c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8021060:	6803      	ldr	r3, [r0, #0]
 8021062:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8021066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021068:	4798      	blx	r3
 802106a:	2dff      	cmp	r5, #255	@ 0xff
 802106c:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 80211ec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8021070:	d124      	bne.n	80210bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8021072:	f010 0f01 	tst.w	r0, #1
 8021076:	f8d8 0000 	ldr.w	r0, [r8]
 802107a:	d022      	beq.n	80210c2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 802107c:	2100      	movs	r1, #0
 802107e:	f04f 0e01 	mov.w	lr, #1
 8021082:	f8d0 c000 	ldr.w	ip, [r0]
 8021086:	e9cd 1107 	strd	r1, r1, [sp, #28]
 802108a:	f8cd e018 	str.w	lr, [sp, #24]
 802108e:	f8b9 e000 	ldrh.w	lr, [r9]
 8021092:	b2b6      	uxth	r6, r6
 8021094:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8021098:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 802109c:	b2bf      	uxth	r7, r7
 802109e:	9102      	str	r1, [sp, #8]
 80210a0:	9503      	str	r5, [sp, #12]
 80210a2:	9601      	str	r6, [sp, #4]
 80210a4:	9700      	str	r7, [sp, #0]
 80210a6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80210aa:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 80210ae:	f8dc 5044 	ldr.w	r5, [ip, #68]	@ 0x44
 80210b2:	4621      	mov	r1, r4
 80210b4:	47a8      	blx	r5
 80210b6:	b00e      	add	sp, #56	@ 0x38
 80210b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80210bc:	f010 0f04 	tst.w	r0, #4
 80210c0:	e7d9      	b.n	8021076 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80210c2:	6803      	ldr	r3, [r0, #0]
 80210c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80210c6:	4798      	blx	r3
 80210c8:	f8b9 3000 	ldrh.w	r3, [r9]
 80210cc:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80210d0:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 80210d4:	435e      	muls	r6, r3
 80210d6:	fb03 1202 	mla	r2, r3, r2, r1
 80210da:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 80210de:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80210e2:	ebac 0c07 	sub.w	ip, ip, r7
 80210e6:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80210ea:	2dff      	cmp	r5, #255	@ 0xff
 80210ec:	eba3 0707 	sub.w	r7, r3, r7
 80210f0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80210f4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80210f8:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80210fc:	d049      	beq.n	8021192 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80210fe:	43eb      	mvns	r3, r5
 8021100:	fa1f f985 	uxth.w	r9, r5
 8021104:	b2db      	uxtb	r3, r3
 8021106:	42b0      	cmp	r0, r6
 8021108:	d266      	bcs.n	80211d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 802110a:	eb00 0a0e 	add.w	sl, r0, lr
 802110e:	4550      	cmp	r0, sl
 8021110:	4621      	mov	r1, r4
 8021112:	f104 0403 	add.w	r4, r4, #3
 8021116:	d25b      	bcs.n	80211d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8021118:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802111c:	8802      	ldrh	r2, [r0, #0]
 802111e:	fb11 f109 	smulbb	r1, r1, r9
 8021122:	ea4f 2822 	mov.w	r8, r2, asr #8
 8021126:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 802112a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 802112e:	fb08 1803 	mla	r8, r8, r3, r1
 8021132:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8021136:	10d5      	asrs	r5, r2, #3
 8021138:	fb11 f109 	smulbb	r1, r1, r9
 802113c:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8021140:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021144:	fb05 1503 	mla	r5, r5, r3, r1
 8021148:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802114c:	00d2      	lsls	r2, r2, #3
 802114e:	fb11 f109 	smulbb	r1, r1, r9
 8021152:	b2d2      	uxtb	r2, r2
 8021154:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021158:	fb02 1203 	mla	r2, r2, r3, r1
 802115c:	fa1f f888 	uxth.w	r8, r8
 8021160:	b292      	uxth	r2, r2
 8021162:	f108 0101 	add.w	r1, r8, #1
 8021166:	b2ad      	uxth	r5, r5
 8021168:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 802116c:	1c51      	adds	r1, r2, #1
 802116e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021172:	1c69      	adds	r1, r5, #1
 8021174:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021178:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 802117c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021180:	096d      	lsrs	r5, r5, #5
 8021182:	ea42 0208 	orr.w	r2, r2, r8
 8021186:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802118a:	432a      	orrs	r2, r5
 802118c:	f820 2b02 	strh.w	r2, [r0], #2
 8021190:	e7bd      	b.n	802110e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8021192:	4a14      	ldr	r2, [pc, #80]	@ (80211e4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8021194:	42b0      	cmp	r0, r6
 8021196:	d21f      	bcs.n	80211d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8021198:	eb00 050e 	add.w	r5, r0, lr
 802119c:	42a8      	cmp	r0, r5
 802119e:	4621      	mov	r1, r4
 80211a0:	f104 0403 	add.w	r4, r4, #3
 80211a4:	d210      	bcs.n	80211c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 80211a6:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 80211aa:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80211ae:	00db      	lsls	r3, r3, #3
 80211b0:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 80211b4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80211b8:	430b      	orrs	r3, r1
 80211ba:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80211be:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80211c2:	f820 3b02 	strh.w	r3, [r0], #2
 80211c6:	e7e9      	b.n	802119c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 80211c8:	4438      	add	r0, r7
 80211ca:	eb01 040c 	add.w	r4, r1, ip
 80211ce:	e7e1      	b.n	8021194 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80211d0:	4438      	add	r0, r7
 80211d2:	eb01 040c 	add.w	r4, r1, ip
 80211d6:	e796      	b.n	8021106 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 80211d8:	4b03      	ldr	r3, [pc, #12]	@ (80211e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 80211da:	6818      	ldr	r0, [r3, #0]
 80211dc:	6803      	ldr	r3, [r0, #0]
 80211de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80211e0:	4798      	blx	r3
 80211e2:	e768      	b.n	80210b6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80211e4:	fffff800 	.word	0xfffff800
 80211e8:	2005b928 	.word	0x2005b928
 80211ec:	2005b922 	.word	0x2005b922

080211f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80211f0:	b4f0      	push	{r4, r5, r6, r7}
 80211f2:	4616      	mov	r6, r2
 80211f4:	2e01      	cmp	r6, #1
 80211f6:	461c      	mov	r4, r3
 80211f8:	460d      	mov	r5, r1
 80211fa:	9a04      	ldr	r2, [sp, #16]
 80211fc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8021200:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8021204:	d012      	beq.n	802122c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8021206:	d303      	bcc.n	8021210 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8021208:	2e02      	cmp	r6, #2
 802120a:	d00a      	beq.n	8021222 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 802120c:	bcf0      	pop	{r4, r5, r6, r7}
 802120e:	4770      	bx	lr
 8021210:	6805      	ldr	r5, [r0, #0]
 8021212:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8021216:	68ed      	ldr	r5, [r5, #12]
 8021218:	4613      	mov	r3, r2
 802121a:	46ac      	mov	ip, r5
 802121c:	4622      	mov	r2, r4
 802121e:	bcf0      	pop	{r4, r5, r6, r7}
 8021220:	4760      	bx	ip
 8021222:	4621      	mov	r1, r4
 8021224:	4628      	mov	r0, r5
 8021226:	bcf0      	pop	{r4, r5, r6, r7}
 8021228:	f7ff bd94 	b.w	8020d54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802122c:	4621      	mov	r1, r4
 802122e:	4628      	mov	r0, r5
 8021230:	bcf0      	pop	{r4, r5, r6, r7}
 8021232:	f7ff bee5 	b.w	8021000 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08021238 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8021238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802123c:	4616      	mov	r6, r2
 802123e:	4681      	mov	r9, r0
 8021240:	b093      	sub	sp, #76	@ 0x4c
 8021242:	6810      	ldr	r0, [r2, #0]
 8021244:	4688      	mov	r8, r1
 8021246:	6851      	ldr	r1, [r2, #4]
 8021248:	ac0e      	add	r4, sp, #56	@ 0x38
 802124a:	c403      	stmia	r4!, {r0, r1}
 802124c:	6818      	ldr	r0, [r3, #0]
 802124e:	6859      	ldr	r1, [r3, #4]
 8021250:	ac10      	add	r4, sp, #64	@ 0x40
 8021252:	c403      	stmia	r4!, {r0, r1}
 8021254:	a80e      	add	r0, sp, #56	@ 0x38
 8021256:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 802125a:	f7f7 f95d 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802125e:	4631      	mov	r1, r6
 8021260:	a810      	add	r0, sp, #64	@ 0x40
 8021262:	f7f7 f981 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021266:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 802126a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 802126e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8021272:	4e62      	ldr	r6, [pc, #392]	@ (80213fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8021274:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021278:	4489      	add	r9, r1
 802127a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 802127e:	6830      	ldr	r0, [r6, #0]
 8021280:	440a      	add	r2, r1
 8021282:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8021286:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 802128a:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 802128e:	4413      	add	r3, r2
 8021290:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8021294:	6803      	ldr	r3, [r0, #0]
 8021296:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 802129a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802129c:	4798      	blx	r3
 802129e:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80212a2:	4f57      	ldr	r7, [pc, #348]	@ (8021400 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80212a4:	6830      	ldr	r0, [r6, #0]
 80212a6:	d01d      	beq.n	80212e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80212a8:	2200      	movs	r2, #0
 80212aa:	6801      	ldr	r1, [r0, #0]
 80212ac:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80212b0:	220b      	movs	r2, #11
 80212b2:	9207      	str	r2, [sp, #28]
 80212b4:	883a      	ldrh	r2, [r7, #0]
 80212b6:	b2a4      	uxth	r4, r4
 80212b8:	9206      	str	r2, [sp, #24]
 80212ba:	2201      	movs	r2, #1
 80212bc:	e9cd a204 	strd	sl, r2, [sp, #16]
 80212c0:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 80212c4:	b2ad      	uxth	r5, r5
 80212c6:	9203      	str	r2, [sp, #12]
 80212c8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80212cc:	9502      	str	r5, [sp, #8]
 80212ce:	9200      	str	r2, [sp, #0]
 80212d0:	9401      	str	r4, [sp, #4]
 80212d2:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 80212d4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80212d8:	4642      	mov	r2, r8
 80212da:	4649      	mov	r1, r9
 80212dc:	47a0      	blx	r4
 80212de:	b013      	add	sp, #76	@ 0x4c
 80212e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212e4:	6803      	ldr	r3, [r0, #0]
 80212e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80212e8:	4798      	blx	r3
 80212ea:	f04f 0e04 	mov.w	lr, #4
 80212ee:	883b      	ldrh	r3, [r7, #0]
 80212f0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80212f4:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 80212f8:	435d      	muls	r5, r3
 80212fa:	fb03 1202 	mla	r2, r3, r2, r1
 80212fe:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021302:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8021306:	920c      	str	r2, [sp, #48]	@ 0x30
 8021308:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 802130c:	1b12      	subs	r2, r2, r4
 802130e:	920d      	str	r2, [sp, #52]	@ 0x34
 8021310:	0062      	lsls	r2, r4, #1
 8021312:	1b1c      	subs	r4, r3, r4
 8021314:	0063      	lsls	r3, r4, #1
 8021316:	920a      	str	r2, [sp, #40]	@ 0x28
 8021318:	930b      	str	r3, [sp, #44]	@ 0x2c
 802131a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802131c:	4298      	cmp	r0, r3
 802131e:	d266      	bcs.n	80213ee <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8021320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021322:	eb00 0b03 	add.w	fp, r0, r3
 8021326:	4558      	cmp	r0, fp
 8021328:	d25c      	bcs.n	80213e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 802132a:	f819 3b01 	ldrb.w	r3, [r9], #1
 802132e:	fb1e e303 	smlabb	r3, lr, r3, lr
 8021332:	f858 2003 	ldr.w	r2, [r8, r3]
 8021336:	0e11      	lsrs	r1, r2, #24
 8021338:	d012      	beq.n	8021360 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 802133a:	29ff      	cmp	r1, #255	@ 0xff
 802133c:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8021340:	d110      	bne.n	8021364 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8021342:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8021346:	d10d      	bne.n	8021364 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8021348:	0953      	lsrs	r3, r2, #5
 802134a:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 802134e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021352:	f027 0707 	bic.w	r7, r7, #7
 8021356:	431f      	orrs	r7, r3
 8021358:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802135c:	433a      	orrs	r2, r7
 802135e:	8002      	strh	r2, [r0, #0]
 8021360:	3002      	adds	r0, #2
 8021362:	e7e0      	b.n	8021326 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8021364:	fb0a f101 	mul.w	r1, sl, r1
 8021368:	1c4b      	adds	r3, r1, #1
 802136a:	eb03 2321 	add.w	r3, r3, r1, asr #8
 802136e:	121b      	asrs	r3, r3, #8
 8021370:	b299      	uxth	r1, r3
 8021372:	43db      	mvns	r3, r3
 8021374:	8806      	ldrh	r6, [r0, #0]
 8021376:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 802137a:	b2d2      	uxtb	r2, r2
 802137c:	fb1c fc01 	smulbb	ip, ip, r1
 8021380:	fb12 f201 	smulbb	r2, r2, r1
 8021384:	1235      	asrs	r5, r6, #8
 8021386:	10f4      	asrs	r4, r6, #3
 8021388:	00f6      	lsls	r6, r6, #3
 802138a:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802138e:	b2f6      	uxtb	r6, r6
 8021390:	b2ff      	uxtb	r7, r7
 8021392:	b2db      	uxtb	r3, r3
 8021394:	fb17 f701 	smulbb	r7, r7, r1
 8021398:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802139c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80213a0:	fb05 c503 	mla	r5, r5, r3, ip
 80213a4:	fb06 2203 	mla	r2, r6, r3, r2
 80213a8:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 80213ac:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80213b0:	fb04 7403 	mla	r4, r4, r3, r7
 80213b4:	b2ad      	uxth	r5, r5
 80213b6:	b292      	uxth	r2, r2
 80213b8:	f105 0c01 	add.w	ip, r5, #1
 80213bc:	1c57      	adds	r7, r2, #1
 80213be:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80213c2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80213c6:	b2a4      	uxth	r4, r4
 80213c8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80213cc:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80213d0:	433d      	orrs	r5, r7
 80213d2:	1c67      	adds	r7, r4, #1
 80213d4:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80213d8:	0964      	lsrs	r4, r4, #5
 80213da:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80213de:	4325      	orrs	r5, r4
 80213e0:	8005      	strh	r5, [r0, #0]
 80213e2:	e7bd      	b.n	8021360 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80213e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80213e6:	4418      	add	r0, r3
 80213e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80213ea:	4499      	add	r9, r3
 80213ec:	e795      	b.n	802131a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80213ee:	4b03      	ldr	r3, [pc, #12]	@ (80213fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 80213f0:	6818      	ldr	r0, [r3, #0]
 80213f2:	6803      	ldr	r3, [r0, #0]
 80213f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80213f6:	4798      	blx	r3
 80213f8:	e771      	b.n	80212de <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80213fa:	bf00      	nop
 80213fc:	2005b928 	.word	0x2005b928
 8021400:	2005b922 	.word	0x2005b922

08021404 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8021404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021408:	b087      	sub	sp, #28
 802140a:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 802140e:	4680      	mov	r8, r0
 8021410:	460d      	mov	r5, r1
 8021412:	4614      	mov	r4, r2
 8021414:	2e00      	cmp	r6, #0
 8021416:	f000 80b9 	beq.w	802158c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 802141a:	6810      	ldr	r0, [r2, #0]
 802141c:	6851      	ldr	r1, [r2, #4]
 802141e:	af02      	add	r7, sp, #8
 8021420:	c703      	stmia	r7!, {r0, r1}
 8021422:	6818      	ldr	r0, [r3, #0]
 8021424:	6859      	ldr	r1, [r3, #4]
 8021426:	af04      	add	r7, sp, #16
 8021428:	c703      	stmia	r7!, {r0, r1}
 802142a:	a802      	add	r0, sp, #8
 802142c:	f7f7 f874 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021430:	4621      	mov	r1, r4
 8021432:	a804      	add	r0, sp, #16
 8021434:	f7f7 f898 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021438:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802143c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021440:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8021444:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8021448:	fb14 2103 	smlabb	r1, r4, r3, r2
 802144c:	eb08 0401 	add.w	r4, r8, r1
 8021450:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8021454:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8021458:	440a      	add	r2, r1
 802145a:	f8ad 2010 	strh.w	r2, [sp, #16]
 802145e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8021462:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8021466:	4413      	add	r3, r2
 8021468:	f8ad 3012 	strh.w	r3, [sp, #18]
 802146c:	4b49      	ldr	r3, [pc, #292]	@ (8021594 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 802146e:	6818      	ldr	r0, [r3, #0]
 8021470:	6803      	ldr	r3, [r0, #0]
 8021472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021474:	4798      	blx	r3
 8021476:	4b48      	ldr	r3, [pc, #288]	@ (8021598 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8021478:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 802147c:	881a      	ldrh	r2, [r3, #0]
 802147e:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8021482:	2eff      	cmp	r6, #255	@ 0xff
 8021484:	fb02 c101 	mla	r1, r2, r1, ip
 8021488:	fb02 f207 	mul.w	r2, r2, r7
 802148c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8021490:	f105 0104 	add.w	r1, r5, #4
 8021494:	461d      	mov	r5, r3
 8021496:	d05a      	beq.n	802154e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8021498:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 802149c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80214a0:	b2b6      	uxth	r6, r6
 80214a2:	fa1f fe8e 	uxth.w	lr, lr
 80214a6:	9301      	str	r3, [sp, #4]
 80214a8:	4282      	cmp	r2, r0
 80214aa:	d96a      	bls.n	8021582 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80214ac:	eb00 0b0a 	add.w	fp, r0, sl
 80214b0:	4583      	cmp	fp, r0
 80214b2:	d940      	bls.n	8021536 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 80214b4:	8805      	ldrh	r5, [r0, #0]
 80214b6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80214ba:	122f      	asrs	r7, r5, #8
 80214bc:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80214c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80214c4:	fb17 f70e 	smulbb	r7, r7, lr
 80214c8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80214cc:	00ed      	lsls	r5, r5, #3
 80214ce:	b2ed      	uxtb	r5, r5
 80214d0:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80214d4:	fb15 f50e 	smulbb	r5, r5, lr
 80214d8:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80214dc:	fb0c 7c06 	mla	ip, ip, r6, r7
 80214e0:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 80214e4:	10df      	asrs	r7, r3, #3
 80214e6:	00db      	lsls	r3, r3, #3
 80214e8:	fb19 f90e 	smulbb	r9, r9, lr
 80214ec:	b2db      	uxtb	r3, r3
 80214ee:	fb03 5306 	mla	r3, r3, r6, r5
 80214f2:	fa1f fc8c 	uxth.w	ip, ip
 80214f6:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80214fa:	fb07 9706 	mla	r7, r7, r6, r9
 80214fe:	f10c 0901 	add.w	r9, ip, #1
 8021502:	b29b      	uxth	r3, r3
 8021504:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8021508:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 802150c:	f103 0c01 	add.w	ip, r3, #1
 8021510:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021514:	b2bf      	uxth	r7, r7
 8021516:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802151a:	ea4c 0c09 	orr.w	ip, ip, r9
 802151e:	f107 0901 	add.w	r9, r7, #1
 8021522:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8021526:	097f      	lsrs	r7, r7, #5
 8021528:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802152c:	ea4c 0c07 	orr.w	ip, ip, r7
 8021530:	f820 cb02 	strh.w	ip, [r0], #2
 8021534:	e7bc      	b.n	80214b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8021536:	9b01      	ldr	r3, [sp, #4]
 8021538:	881b      	ldrh	r3, [r3, #0]
 802153a:	eba3 0308 	sub.w	r3, r3, r8
 802153e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021542:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021546:	eba3 0308 	sub.w	r3, r3, r8
 802154a:	441c      	add	r4, r3
 802154c:	e7ac      	b.n	80214a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 802154e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8021552:	4282      	cmp	r2, r0
 8021554:	d915      	bls.n	8021582 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8021556:	eb00 060a 	add.w	r6, r0, sl
 802155a:	4286      	cmp	r6, r0
 802155c:	d906      	bls.n	802156c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 802155e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021562:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8021566:	f820 3b02 	strh.w	r3, [r0], #2
 802156a:	e7f6      	b.n	802155a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 802156c:	882b      	ldrh	r3, [r5, #0]
 802156e:	eba3 0308 	sub.w	r3, r3, r8
 8021572:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021576:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802157a:	eba3 0308 	sub.w	r3, r3, r8
 802157e:	441c      	add	r4, r3
 8021580:	e7e7      	b.n	8021552 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8021582:	4b04      	ldr	r3, [pc, #16]	@ (8021594 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8021584:	6818      	ldr	r0, [r3, #0]
 8021586:	6803      	ldr	r3, [r0, #0]
 8021588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802158a:	4798      	blx	r3
 802158c:	b007      	add	sp, #28
 802158e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021592:	bf00      	nop
 8021594:	2005b928 	.word	0x2005b928
 8021598:	2005b922 	.word	0x2005b922

0802159c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 802159c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215a0:	b091      	sub	sp, #68	@ 0x44
 80215a2:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 80215a6:	4680      	mov	r8, r0
 80215a8:	460f      	mov	r7, r1
 80215aa:	4614      	mov	r4, r2
 80215ac:	2d00      	cmp	r5, #0
 80215ae:	d051      	beq.n	8021654 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80215b0:	6810      	ldr	r0, [r2, #0]
 80215b2:	6851      	ldr	r1, [r2, #4]
 80215b4:	ae0c      	add	r6, sp, #48	@ 0x30
 80215b6:	c603      	stmia	r6!, {r0, r1}
 80215b8:	6818      	ldr	r0, [r3, #0]
 80215ba:	6859      	ldr	r1, [r3, #4]
 80215bc:	ae0e      	add	r6, sp, #56	@ 0x38
 80215be:	c603      	stmia	r6!, {r0, r1}
 80215c0:	a80c      	add	r0, sp, #48	@ 0x30
 80215c2:	f7f6 ffa9 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80215c6:	4621      	mov	r1, r4
 80215c8:	a80e      	add	r0, sp, #56	@ 0x38
 80215ca:	f7f6 ffcd 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80215ce:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80215d2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80215d6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80215da:	f8df 91dc 	ldr.w	r9, [pc, #476]	@ 80217b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 80215de:	fb11 2103 	smlabb	r1, r1, r3, r2
 80215e2:	eb08 0401 	add.w	r4, r8, r1
 80215e6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80215ea:	f8d9 0000 	ldr.w	r0, [r9]
 80215ee:	440a      	add	r2, r1
 80215f0:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 80215f4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80215f8:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 80215fc:	4413      	add	r3, r2
 80215fe:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8021602:	6803      	ldr	r3, [r0, #0]
 8021604:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 8021608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802160a:	4798      	blx	r3
 802160c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8021610:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80217bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 8021614:	f8d9 0000 	ldr.w	r0, [r9]
 8021618:	d01f      	beq.n	802165a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 802161a:	2200      	movs	r2, #0
 802161c:	6801      	ldr	r1, [r0, #0]
 802161e:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8021622:	220b      	movs	r2, #11
 8021624:	9207      	str	r2, [sp, #28]
 8021626:	f8b8 2000 	ldrh.w	r2, [r8]
 802162a:	b2b6      	uxth	r6, r6
 802162c:	9206      	str	r2, [sp, #24]
 802162e:	2201      	movs	r2, #1
 8021630:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8021634:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8021638:	9601      	str	r6, [sp, #4]
 802163a:	9203      	str	r2, [sp, #12]
 802163c:	fa1f f28a 	uxth.w	r2, sl
 8021640:	9202      	str	r2, [sp, #8]
 8021642:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8021646:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 802164a:	9200      	str	r2, [sp, #0]
 802164c:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 802164e:	463a      	mov	r2, r7
 8021650:	4621      	mov	r1, r4
 8021652:	47a8      	blx	r5
 8021654:	b011      	add	sp, #68	@ 0x44
 8021656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802165a:	6803      	ldr	r3, [r0, #0]
 802165c:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8021660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021662:	4798      	blx	r3
 8021664:	f8b8 2000 	ldrh.w	r2, [r8]
 8021668:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 802166c:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8021670:	2dff      	cmp	r5, #255	@ 0xff
 8021672:	fb02 1303 	mla	r3, r2, r3, r1
 8021676:	fb0a fa02 	mul.w	sl, sl, r2
 802167a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802167e:	d062      	beq.n	8021746 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8021680:	ea6f 0c05 	mvn.w	ip, r5
 8021684:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8021688:	930a      	str	r3, [sp, #40]	@ 0x28
 802168a:	b2ad      	uxth	r5, r5
 802168c:	fa5f fc8c 	uxtb.w	ip, ip
 8021690:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8021694:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021696:	4298      	cmp	r0, r3
 8021698:	f080 8085 	bcs.w	80217a6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 802169c:	eb00 0b09 	add.w	fp, r0, r9
 80216a0:	4558      	cmp	r0, fp
 80216a2:	d246      	bcs.n	8021732 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 80216a4:	2303      	movs	r3, #3
 80216a6:	2204      	movs	r2, #4
 80216a8:	f814 eb01 	ldrb.w	lr, [r4], #1
 80216ac:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 80216b0:	eb07 0a0e 	add.w	sl, r7, lr
 80216b4:	f89a 8002 	ldrb.w	r8, [sl, #2]
 80216b8:	8803      	ldrh	r3, [r0, #0]
 80216ba:	fb18 f805 	smulbb	r8, r8, r5
 80216be:	1219      	asrs	r1, r3, #8
 80216c0:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80216c4:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80216c8:	fb01 810c 	mla	r1, r1, ip, r8
 80216cc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80216d0:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80216d4:	fb1e fe05 	smulbb	lr, lr, r5
 80216d8:	fb18 f805 	smulbb	r8, r8, r5
 80216dc:	10da      	asrs	r2, r3, #3
 80216de:	00db      	lsls	r3, r3, #3
 80216e0:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80216e4:	b2db      	uxtb	r3, r3
 80216e6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80216ea:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80216ee:	fb02 820c 	mla	r2, r2, ip, r8
 80216f2:	fb03 e30c 	mla	r3, r3, ip, lr
 80216f6:	b289      	uxth	r1, r1
 80216f8:	b292      	uxth	r2, r2
 80216fa:	b29b      	uxth	r3, r3
 80216fc:	f101 0801 	add.w	r8, r1, #1
 8021700:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8021704:	f103 0e01 	add.w	lr, r3, #1
 8021708:	f102 0801 	add.w	r8, r2, #1
 802170c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8021710:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8021714:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8021718:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 802171c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8021720:	ea4e 0101 	orr.w	r1, lr, r1
 8021724:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8021728:	ea41 0108 	orr.w	r1, r1, r8
 802172c:	f820 1b02 	strh.w	r1, [r0], #2
 8021730:	e7b6      	b.n	80216a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8021732:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021734:	881b      	ldrh	r3, [r3, #0]
 8021736:	1b9b      	subs	r3, r3, r6
 8021738:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802173c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8021740:	1b9b      	subs	r3, r3, r6
 8021742:	441c      	add	r4, r3
 8021744:	e7a6      	b.n	8021694 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8021746:	2203      	movs	r2, #3
 8021748:	2504      	movs	r5, #4
 802174a:	491a      	ldr	r1, [pc, #104]	@ (80217b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 802174c:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8021750:	4550      	cmp	r0, sl
 8021752:	d228      	bcs.n	80217a6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8021754:	eb00 0c09 	add.w	ip, r0, r9
 8021758:	4560      	cmp	r0, ip
 802175a:	4623      	mov	r3, r4
 802175c:	d219      	bcs.n	8021792 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 802175e:	f893 e000 	ldrb.w	lr, [r3]
 8021762:	3401      	adds	r4, #1
 8021764:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8021768:	eb07 0b0e 	add.w	fp, r7, lr
 802176c:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8021770:	f89b b001 	ldrb.w	fp, [fp, #1]
 8021774:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021778:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 802177c:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8021780:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8021784:	ea43 030b 	orr.w	r3, r3, fp
 8021788:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 802178c:	f820 3b02 	strh.w	r3, [r0], #2
 8021790:	e7e2      	b.n	8021758 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8021792:	f8b8 3000 	ldrh.w	r3, [r8]
 8021796:	1b9b      	subs	r3, r3, r6
 8021798:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802179c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80217a0:	1b9b      	subs	r3, r3, r6
 80217a2:	441c      	add	r4, r3
 80217a4:	e7d4      	b.n	8021750 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80217a6:	4b04      	ldr	r3, [pc, #16]	@ (80217b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 80217a8:	6818      	ldr	r0, [r3, #0]
 80217aa:	6803      	ldr	r3, [r0, #0]
 80217ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80217ae:	4798      	blx	r3
 80217b0:	e750      	b.n	8021654 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80217b2:	bf00      	nop
 80217b4:	fffff800 	.word	0xfffff800
 80217b8:	2005b928 	.word	0x2005b928
 80217bc:	2005b922 	.word	0x2005b922

080217c0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80217c0:	b4f0      	push	{r4, r5, r6, r7}
 80217c2:	460c      	mov	r4, r1
 80217c4:	4611      	mov	r1, r2
 80217c6:	780f      	ldrb	r7, [r1, #0]
 80217c8:	461a      	mov	r2, r3
 80217ca:	2f01      	cmp	r7, #1
 80217cc:	9b04      	ldr	r3, [sp, #16]
 80217ce:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80217d2:	784e      	ldrb	r6, [r1, #1]
 80217d4:	d038      	beq.n	8021848 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 80217d6:	d31f      	bcc.n	8021818 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 80217d8:	2f02      	cmp	r7, #2
 80217da:	d14d      	bne.n	8021878 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80217dc:	2e03      	cmp	r6, #3
 80217de:	d84b      	bhi.n	8021878 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80217e0:	e8df f006 	tbb	[pc, r6]
 80217e4:	17140702 	.word	0x17140702
 80217e8:	9504      	str	r5, [sp, #16]
 80217ea:	4620      	mov	r0, r4
 80217ec:	bcf0      	pop	{r4, r5, r6, r7}
 80217ee:	f7ff be09 	b.w	8021404 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80217f2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80217f4:	2800      	cmp	r0, #0
 80217f6:	d03f      	beq.n	8021878 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80217f8:	6806      	ldr	r6, [r0, #0]
 80217fa:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80217fe:	68b5      	ldr	r5, [r6, #8]
 8021800:	4613      	mov	r3, r2
 8021802:	46ac      	mov	ip, r5
 8021804:	460a      	mov	r2, r1
 8021806:	4621      	mov	r1, r4
 8021808:	bcf0      	pop	{r4, r5, r6, r7}
 802180a:	4760      	bx	ip
 802180c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8021810:	e7f0      	b.n	80217f4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8021812:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8021816:	e7ed      	b.n	80217f4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8021818:	2e03      	cmp	r6, #3
 802181a:	d82d      	bhi.n	8021878 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 802181c:	e8df f006 	tbb	[pc, r6]
 8021820:	110e0702 	.word	0x110e0702
 8021824:	9504      	str	r5, [sp, #16]
 8021826:	4620      	mov	r0, r4
 8021828:	bcf0      	pop	{r4, r5, r6, r7}
 802182a:	f7ff bd05 	b.w	8021238 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 802182e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8021830:	b310      	cbz	r0, 8021878 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8021832:	6806      	ldr	r6, [r0, #0]
 8021834:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8021838:	68f5      	ldr	r5, [r6, #12]
 802183a:	e7e1      	b.n	8021800 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 802183c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8021840:	e7f6      	b.n	8021830 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8021842:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8021846:	e7f3      	b.n	8021830 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8021848:	2e03      	cmp	r6, #3
 802184a:	d815      	bhi.n	8021878 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 802184c:	e8df f006 	tbb	[pc, r6]
 8021850:	110e0702 	.word	0x110e0702
 8021854:	9504      	str	r5, [sp, #16]
 8021856:	4620      	mov	r0, r4
 8021858:	bcf0      	pop	{r4, r5, r6, r7}
 802185a:	f7ff be9f 	b.w	802159c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 802185e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8021860:	b150      	cbz	r0, 8021878 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8021862:	6806      	ldr	r6, [r0, #0]
 8021864:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8021868:	6935      	ldr	r5, [r6, #16]
 802186a:	e7c9      	b.n	8021800 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 802186c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8021870:	e7f6      	b.n	8021860 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8021872:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8021876:	e7f3      	b.n	8021860 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8021878:	bcf0      	pop	{r4, r5, r6, r7}
 802187a:	4770      	bx	lr

0802187c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 802187c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021880:	4617      	mov	r7, r2
 8021882:	4604      	mov	r4, r0
 8021884:	460e      	mov	r6, r1
 8021886:	b087      	sub	sp, #28
 8021888:	6810      	ldr	r0, [r2, #0]
 802188a:	6851      	ldr	r1, [r2, #4]
 802188c:	ad02      	add	r5, sp, #8
 802188e:	c503      	stmia	r5!, {r0, r1}
 8021890:	6818      	ldr	r0, [r3, #0]
 8021892:	6859      	ldr	r1, [r3, #4]
 8021894:	ad04      	add	r5, sp, #16
 8021896:	c503      	stmia	r5!, {r0, r1}
 8021898:	a802      	add	r0, sp, #8
 802189a:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 802189e:	f7f6 fe3b 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80218a2:	4639      	mov	r1, r7
 80218a4:	a804      	add	r0, sp, #16
 80218a6:	f7f6 fe5f 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80218aa:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80218ae:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80218b2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80218b6:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80218ba:	fb11 2103 	smlabb	r1, r1, r3, r2
 80218be:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80218c2:	440e      	add	r6, r1
 80218c4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80218c8:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80218cc:	440a      	add	r2, r1
 80218ce:	f8ad 2010 	strh.w	r2, [sp, #16]
 80218d2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80218d6:	f8df 91ec 	ldr.w	r9, [pc, #492]	@ 8021ac4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80218da:	4413      	add	r3, r2
 80218dc:	f8ad 3012 	strh.w	r3, [sp, #18]
 80218e0:	4b77      	ldr	r3, [pc, #476]	@ (8021ac0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80218e2:	6818      	ldr	r0, [r3, #0]
 80218e4:	6803      	ldr	r3, [r0, #0]
 80218e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80218e8:	4798      	blx	r3
 80218ea:	f8b9 b000 	ldrh.w	fp, [r9]
 80218ee:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80218f2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80218f6:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80218fa:	fb0b 2303 	mla	r3, fp, r3, r2
 80218fe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021902:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8021906:	fb05 f50b 	mul.w	r5, r5, fp
 802190a:	9300      	str	r3, [sp, #0]
 802190c:	d069      	beq.n	80219e2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 802190e:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8021912:	4558      	cmp	r0, fp
 8021914:	f080 80cc 	bcs.w	8021ab0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8021918:	4631      	mov	r1, r6
 802191a:	9b00      	ldr	r3, [sp, #0]
 802191c:	18c3      	adds	r3, r0, r3
 802191e:	9301      	str	r3, [sp, #4]
 8021920:	9b01      	ldr	r3, [sp, #4]
 8021922:	4298      	cmp	r0, r3
 8021924:	d24f      	bcs.n	80219c6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8021926:	f811 2b01 	ldrb.w	r2, [r1], #1
 802192a:	2a00      	cmp	r2, #0
 802192c:	d048      	beq.n	80219c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 802192e:	fb0a f202 	mul.w	r2, sl, r2
 8021932:	1c53      	adds	r3, r2, #1
 8021934:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021938:	121b      	asrs	r3, r3, #8
 802193a:	d041      	beq.n	80219c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 802193c:	b29e      	uxth	r6, r3
 802193e:	43db      	mvns	r3, r3
 8021940:	8802      	ldrh	r2, [r0, #0]
 8021942:	b2db      	uxtb	r3, r3
 8021944:	1215      	asrs	r5, r2, #8
 8021946:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802194a:	f8b4 c000 	ldrh.w	ip, [r4]
 802194e:	fb15 f503 	smulbb	r5, r5, r3
 8021952:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8021956:	00d2      	lsls	r2, r2, #3
 8021958:	b2d2      	uxtb	r2, r2
 802195a:	ea4f 272c 	mov.w	r7, ip, asr #8
 802195e:	fb12 f203 	smulbb	r2, r2, r3
 8021962:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8021966:	fb07 5706 	mla	r7, r7, r6, r5
 802196a:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 802196e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8021972:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021976:	fb1e fe03 	smulbb	lr, lr, r3
 802197a:	fa5f fc8c 	uxtb.w	ip, ip
 802197e:	fb0c 2c06 	mla	ip, ip, r6, r2
 8021982:	b2bf      	uxth	r7, r7
 8021984:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8021988:	fb05 e506 	mla	r5, r5, r6, lr
 802198c:	f107 0e01 	add.w	lr, r7, #1
 8021990:	fa1f fc8c 	uxth.w	ip, ip
 8021994:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8021998:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 802199c:	f10c 0701 	add.w	r7, ip, #1
 80219a0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80219a4:	b2ad      	uxth	r5, r5
 80219a6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80219aa:	ea47 070e 	orr.w	r7, r7, lr
 80219ae:	f105 0e01 	add.w	lr, r5, #1
 80219b2:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80219b6:	096d      	lsrs	r5, r5, #5
 80219b8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80219bc:	432f      	orrs	r7, r5
 80219be:	8007      	strh	r7, [r0, #0]
 80219c0:	3002      	adds	r0, #2
 80219c2:	3402      	adds	r4, #2
 80219c4:	e7ac      	b.n	8021920 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 80219c6:	f8b9 3000 	ldrh.w	r3, [r9]
 80219ca:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80219ce:	eba3 0308 	sub.w	r3, r3, r8
 80219d2:	eba6 0608 	sub.w	r6, r6, r8
 80219d6:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80219da:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80219de:	440e      	add	r6, r1
 80219e0:	e797      	b.n	8021912 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 80219e2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80219e6:	42a8      	cmp	r0, r5
 80219e8:	d262      	bcs.n	8021ab0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80219ea:	4631      	mov	r1, r6
 80219ec:	9b00      	ldr	r3, [sp, #0]
 80219ee:	eb00 0b03 	add.w	fp, r0, r3
 80219f2:	4558      	cmp	r0, fp
 80219f4:	d24e      	bcs.n	8021a94 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 80219f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80219fa:	b12b      	cbz	r3, 8021a08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80219fc:	2bff      	cmp	r3, #255	@ 0xff
 80219fe:	f8b4 e000 	ldrh.w	lr, [r4]
 8021a02:	d104      	bne.n	8021a0e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8021a04:	f8a0 e000 	strh.w	lr, [r0]
 8021a08:	3002      	adds	r0, #2
 8021a0a:	3402      	adds	r4, #2
 8021a0c:	e7f1      	b.n	80219f2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8021a0e:	b29f      	uxth	r7, r3
 8021a10:	43db      	mvns	r3, r3
 8021a12:	8802      	ldrh	r2, [r0, #0]
 8021a14:	b2db      	uxtb	r3, r3
 8021a16:	1216      	asrs	r6, r2, #8
 8021a18:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8021a1c:	fb16 f603 	smulbb	r6, r6, r3
 8021a20:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8021a24:	00d2      	lsls	r2, r2, #3
 8021a26:	b2d2      	uxtb	r2, r2
 8021a28:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8021a2c:	fb1a fa03 	smulbb	sl, sl, r3
 8021a30:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021a34:	fb12 f303 	smulbb	r3, r2, r3
 8021a38:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8021a3c:	fb0c 6c07 	mla	ip, ip, r7, r6
 8021a40:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8021a44:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021a48:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8021a4c:	fa5f fe8e 	uxtb.w	lr, lr
 8021a50:	fb06 a607 	mla	r6, r6, r7, sl
 8021a54:	fb0e 3307 	mla	r3, lr, r7, r3
 8021a58:	fa1f fc8c 	uxth.w	ip, ip
 8021a5c:	f10c 0201 	add.w	r2, ip, #1
 8021a60:	b2b6      	uxth	r6, r6
 8021a62:	b29b      	uxth	r3, r3
 8021a64:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021a68:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 8021a6c:	f106 0a01 	add.w	sl, r6, #1
 8021a70:	f103 0c01 	add.w	ip, r3, #1
 8021a74:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021a78:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8021a7c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021a80:	0976      	lsrs	r6, r6, #5
 8021a82:	ea4c 0c02 	orr.w	ip, ip, r2
 8021a86:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8021a8a:	ea4c 0c06 	orr.w	ip, ip, r6
 8021a8e:	f8a0 c000 	strh.w	ip, [r0]
 8021a92:	e7b9      	b.n	8021a08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8021a94:	f8b9 3000 	ldrh.w	r3, [r9]
 8021a98:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8021a9c:	eba3 0308 	sub.w	r3, r3, r8
 8021aa0:	eba6 0608 	sub.w	r6, r6, r8
 8021aa4:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8021aa8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021aac:	440e      	add	r6, r1
 8021aae:	e79a      	b.n	80219e6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8021ab0:	4b03      	ldr	r3, [pc, #12]	@ (8021ac0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8021ab2:	6818      	ldr	r0, [r3, #0]
 8021ab4:	6803      	ldr	r3, [r0, #0]
 8021ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021ab8:	4798      	blx	r3
 8021aba:	b007      	add	sp, #28
 8021abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ac0:	2005b928 	.word	0x2005b928
 8021ac4:	2005b922 	.word	0x2005b922

08021ac8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8021ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021acc:	b089      	sub	sp, #36	@ 0x24
 8021ace:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 8021ad2:	4607      	mov	r7, r0
 8021ad4:	4688      	mov	r8, r1
 8021ad6:	4692      	mov	sl, r2
 8021ad8:	4699      	mov	r9, r3
 8021ada:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021adc:	2e00      	cmp	r6, #0
 8021ade:	d048      	beq.n	8021b72 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8021ae0:	4608      	mov	r0, r1
 8021ae2:	f7fa f823 	bl	801bb2c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021ae6:	4605      	mov	r5, r0
 8021ae8:	4640      	mov	r0, r8
 8021aea:	f7fa f853 	bl	801bb94 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021aee:	f8ad 000e 	strh.w	r0, [sp, #14]
 8021af2:	4640      	mov	r0, r8
 8021af4:	f8ad a008 	strh.w	sl, [sp, #8]
 8021af8:	f8ad 500c 	strh.w	r5, [sp, #12]
 8021afc:	f8ad 900a 	strh.w	r9, [sp, #10]
 8021b00:	f7fa f906 	bl	801bd10 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021b04:	4605      	mov	r5, r0
 8021b06:	4640      	mov	r0, r8
 8021b08:	f7fa f932 	bl	801bd70 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8021b0c:	4682      	mov	sl, r0
 8021b0e:	4640      	mov	r0, r8
 8021b10:	f7fa f982 	bl	801be18 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021b14:	2810      	cmp	r0, #16
 8021b16:	d82c      	bhi.n	8021b72 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8021b18:	e8df f010 	tbh	[pc, r0, lsl #1]
 8021b1c:	00ba00ca 	.word	0x00ba00ca
 8021b20:	002b0011 	.word	0x002b0011
 8021b24:	002b002b 	.word	0x002b002b
 8021b28:	002b002b 	.word	0x002b002b
 8021b2c:	002b002b 	.word	0x002b002b
 8021b30:	00c1002b 	.word	0x00c1002b
 8021b34:	002b002b 	.word	0x002b002b
 8021b38:	002b0180 	.word	0x002b0180
 8021b3c:	0173      	.short	0x0173
 8021b3e:	4bbc      	ldr	r3, [pc, #752]	@ (8021e30 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 8021b40:	6818      	ldr	r0, [r3, #0]
 8021b42:	6803      	ldr	r3, [r0, #0]
 8021b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021b46:	4798      	blx	r3
 8021b48:	2eff      	cmp	r6, #255	@ 0xff
 8021b4a:	d101      	bne.n	8021b50 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8021b4c:	0683      	lsls	r3, r0, #26
 8021b4e:	d506      	bpl.n	8021b5e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 8021b50:	4633      	mov	r3, r6
 8021b52:	4622      	mov	r2, r4
 8021b54:	a902      	add	r1, sp, #8
 8021b56:	4628      	mov	r0, r5
 8021b58:	f7ff f8fc 	bl	8020d54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021b5c:	e009      	b.n	8021b72 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8021b5e:	4640      	mov	r0, r8
 8021b60:	f7fa f89e 	bl	801bca0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021b64:	b940      	cbnz	r0, 8021b78 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 8021b66:	4623      	mov	r3, r4
 8021b68:	aa02      	add	r2, sp, #8
 8021b6a:	4629      	mov	r1, r5
 8021b6c:	4638      	mov	r0, r7
 8021b6e:	f7ff f9d7 	bl	8020f20 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8021b72:	b009      	add	sp, #36	@ 0x24
 8021b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b78:	f10d 0918 	add.w	r9, sp, #24
 8021b7c:	4641      	mov	r1, r8
 8021b7e:	4648      	mov	r0, r9
 8021b80:	f10d 0810 	add.w	r8, sp, #16
 8021b84:	f7fa f83a 	bl	801bbfc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8021b88:	e899 0003 	ldmia.w	r9, {r0, r1}
 8021b8c:	e888 0003 	stmia.w	r8, {r0, r1}
 8021b90:	4640      	mov	r0, r8
 8021b92:	4621      	mov	r1, r4
 8021b94:	f7f2 f9ec 	bl	8013f70 <_ZN8touchgfx4RectaNERKS0_>
 8021b98:	4640      	mov	r0, r8
 8021b9a:	f7f2 fa2c 	bl	8013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021b9e:	2800      	cmp	r0, #0
 8021ba0:	d1d6      	bne.n	8021b50 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8021ba2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021ba6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021baa:	4293      	cmp	r3, r2
 8021bac:	dd12      	ble.n	8021bd4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 8021bae:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021bb2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021bb6:	1a9b      	subs	r3, r3, r2
 8021bb8:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021bbc:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021bc0:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021bc4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021bc8:	464a      	mov	r2, r9
 8021bca:	4633      	mov	r3, r6
 8021bcc:	a902      	add	r1, sp, #8
 8021bce:	4628      	mov	r0, r5
 8021bd0:	f7ff f8c0 	bl	8020d54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021bd4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021bd8:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021bdc:	4293      	cmp	r3, r2
 8021bde:	dd12      	ble.n	8021c06 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 8021be0:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8021be4:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021be8:	1a9b      	subs	r3, r3, r2
 8021bea:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021bee:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021bf2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021bf6:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021bfa:	23ff      	movs	r3, #255	@ 0xff
 8021bfc:	464a      	mov	r2, r9
 8021bfe:	a902      	add	r1, sp, #8
 8021c00:	4628      	mov	r0, r5
 8021c02:	f7ff f8a7 	bl	8020d54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021c06:	4643      	mov	r3, r8
 8021c08:	aa02      	add	r2, sp, #8
 8021c0a:	4629      	mov	r1, r5
 8021c0c:	4638      	mov	r0, r7
 8021c0e:	f7ff f987 	bl	8020f20 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8021c12:	88a2      	ldrh	r2, [r4, #4]
 8021c14:	8823      	ldrh	r3, [r4, #0]
 8021c16:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021c1a:	4413      	add	r3, r2
 8021c1c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021c20:	b29b      	uxth	r3, r3
 8021c22:	440a      	add	r2, r1
 8021c24:	b292      	uxth	r2, r2
 8021c26:	b211      	sxth	r1, r2
 8021c28:	b218      	sxth	r0, r3
 8021c2a:	4288      	cmp	r0, r1
 8021c2c:	dd12      	ble.n	8021c54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 8021c2e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8021c32:	1a9b      	subs	r3, r3, r2
 8021c34:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8021c38:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021c3c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021c40:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021c44:	23ff      	movs	r3, #255	@ 0xff
 8021c46:	464a      	mov	r2, r9
 8021c48:	a902      	add	r1, sp, #8
 8021c4a:	4628      	mov	r0, r5
 8021c4c:	f8ad 601a 	strh.w	r6, [sp, #26]
 8021c50:	f7ff f880 	bl	8020d54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021c54:	88e2      	ldrh	r2, [r4, #6]
 8021c56:	8863      	ldrh	r3, [r4, #2]
 8021c58:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021c5c:	4413      	add	r3, r2
 8021c5e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8021c62:	b29b      	uxth	r3, r3
 8021c64:	440a      	add	r2, r1
 8021c66:	b292      	uxth	r2, r2
 8021c68:	b211      	sxth	r1, r2
 8021c6a:	b218      	sxth	r0, r3
 8021c6c:	4288      	cmp	r0, r1
 8021c6e:	dd80      	ble.n	8021b72 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8021c70:	f9b4 6000 	ldrsh.w	r6, [r4]
 8021c74:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021c78:	1a9b      	subs	r3, r3, r2
 8021c7a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021c7e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8021c82:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021c86:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021c8a:	23ff      	movs	r3, #255	@ 0xff
 8021c8c:	464a      	mov	r2, r9
 8021c8e:	e761      	b.n	8021b54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8021c90:	4633      	mov	r3, r6
 8021c92:	4622      	mov	r2, r4
 8021c94:	a902      	add	r1, sp, #8
 8021c96:	4628      	mov	r0, r5
 8021c98:	f7ff f9b2 	bl	8021000 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8021c9c:	e769      	b.n	8021b72 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8021c9e:	e9cd 4600 	strd	r4, r6, [sp]
 8021ca2:	ab02      	add	r3, sp, #8
 8021ca4:	4652      	mov	r2, sl
 8021ca6:	4629      	mov	r1, r5
 8021ca8:	4638      	mov	r0, r7
 8021caa:	f7ff fd89 	bl	80217c0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8021cae:	e760      	b.n	8021b72 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8021cb0:	4640      	mov	r0, r8
 8021cb2:	f7f9 fff5 	bl	801bca0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021cb6:	b948      	cbnz	r0, 8021ccc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 8021cb8:	683b      	ldr	r3, [r7, #0]
 8021cba:	e9cd 6000 	strd	r6, r0, [sp]
 8021cbe:	aa02      	add	r2, sp, #8
 8021cc0:	68de      	ldr	r6, [r3, #12]
 8021cc2:	4629      	mov	r1, r5
 8021cc4:	4623      	mov	r3, r4
 8021cc6:	4638      	mov	r0, r7
 8021cc8:	47b0      	blx	r6
 8021cca:	e752      	b.n	8021b72 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8021ccc:	f10d 0918 	add.w	r9, sp, #24
 8021cd0:	4641      	mov	r1, r8
 8021cd2:	4648      	mov	r0, r9
 8021cd4:	f10d 0810 	add.w	r8, sp, #16
 8021cd8:	f7f9 ff90 	bl	801bbfc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8021cdc:	e899 0003 	ldmia.w	r9, {r0, r1}
 8021ce0:	e888 0003 	stmia.w	r8, {r0, r1}
 8021ce4:	4640      	mov	r0, r8
 8021ce6:	4621      	mov	r1, r4
 8021ce8:	f7f2 f942 	bl	8013f70 <_ZN8touchgfx4RectaNERKS0_>
 8021cec:	4640      	mov	r0, r8
 8021cee:	f7f2 f982 	bl	8013ff6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021cf2:	b138      	cbz	r0, 8021d04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 8021cf4:	4623      	mov	r3, r4
 8021cf6:	9600      	str	r6, [sp, #0]
 8021cf8:	aa02      	add	r2, sp, #8
 8021cfa:	4651      	mov	r1, sl
 8021cfc:	4628      	mov	r0, r5
 8021cfe:	f7ff fdbd 	bl	802187c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021d02:	e736      	b.n	8021b72 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8021d04:	683b      	ldr	r3, [r7, #0]
 8021d06:	e9cd 6000 	strd	r6, r0, [sp]
 8021d0a:	aa02      	add	r2, sp, #8
 8021d0c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8021d10:	4629      	mov	r1, r5
 8021d12:	4643      	mov	r3, r8
 8021d14:	4638      	mov	r0, r7
 8021d16:	47d8      	blx	fp
 8021d18:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021d1c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021d20:	4293      	cmp	r3, r2
 8021d22:	dd13      	ble.n	8021d4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 8021d24:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021d28:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021d2c:	1a9b      	subs	r3, r3, r2
 8021d2e:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021d32:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021d36:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021d3a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021d3e:	9600      	str	r6, [sp, #0]
 8021d40:	464b      	mov	r3, r9
 8021d42:	aa02      	add	r2, sp, #8
 8021d44:	4651      	mov	r1, sl
 8021d46:	4628      	mov	r0, r5
 8021d48:	f7ff fd98 	bl	802187c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021d4c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021d50:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021d54:	4293      	cmp	r3, r2
 8021d56:	dd13      	ble.n	8021d80 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 8021d58:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8021d5c:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021d60:	1a9b      	subs	r3, r3, r2
 8021d62:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021d66:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021d6a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021d6e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021d72:	9600      	str	r6, [sp, #0]
 8021d74:	464b      	mov	r3, r9
 8021d76:	aa02      	add	r2, sp, #8
 8021d78:	4651      	mov	r1, sl
 8021d7a:	4628      	mov	r0, r5
 8021d7c:	f7ff fd7e 	bl	802187c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021d80:	88a2      	ldrh	r2, [r4, #4]
 8021d82:	8823      	ldrh	r3, [r4, #0]
 8021d84:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021d88:	4413      	add	r3, r2
 8021d8a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021d8e:	b29b      	uxth	r3, r3
 8021d90:	440a      	add	r2, r1
 8021d92:	b292      	uxth	r2, r2
 8021d94:	b211      	sxth	r1, r2
 8021d96:	b218      	sxth	r0, r3
 8021d98:	4288      	cmp	r0, r1
 8021d9a:	dd13      	ble.n	8021dc4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 8021d9c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8021da0:	1a9b      	subs	r3, r3, r2
 8021da2:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8021da6:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021daa:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021dae:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021db2:	9600      	str	r6, [sp, #0]
 8021db4:	464b      	mov	r3, r9
 8021db6:	aa02      	add	r2, sp, #8
 8021db8:	4651      	mov	r1, sl
 8021dba:	4628      	mov	r0, r5
 8021dbc:	f8ad 701a 	strh.w	r7, [sp, #26]
 8021dc0:	f7ff fd5c 	bl	802187c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021dc4:	88e2      	ldrh	r2, [r4, #6]
 8021dc6:	8863      	ldrh	r3, [r4, #2]
 8021dc8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021dcc:	4413      	add	r3, r2
 8021dce:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8021dd2:	b29b      	uxth	r3, r3
 8021dd4:	440a      	add	r2, r1
 8021dd6:	b292      	uxth	r2, r2
 8021dd8:	b211      	sxth	r1, r2
 8021dda:	b218      	sxth	r0, r3
 8021ddc:	4288      	cmp	r0, r1
 8021dde:	f77f aec8 	ble.w	8021b72 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8021de2:	f9b4 7000 	ldrsh.w	r7, [r4]
 8021de6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021dea:	1a9b      	subs	r3, r3, r2
 8021dec:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021df0:	f8ad 7018 	strh.w	r7, [sp, #24]
 8021df4:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021df8:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021dfc:	9600      	str	r6, [sp, #0]
 8021dfe:	464b      	mov	r3, r9
 8021e00:	e77a      	b.n	8021cf8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8021e02:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8021e06:	2800      	cmp	r0, #0
 8021e08:	f43f aeb3 	beq.w	8021b72 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8021e0c:	6803      	ldr	r3, [r0, #0]
 8021e0e:	9600      	str	r6, [sp, #0]
 8021e10:	68de      	ldr	r6, [r3, #12]
 8021e12:	4623      	mov	r3, r4
 8021e14:	aa02      	add	r2, sp, #8
 8021e16:	4629      	mov	r1, r5
 8021e18:	47b0      	blx	r6
 8021e1a:	e6aa      	b.n	8021b72 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8021e1c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8021e20:	2800      	cmp	r0, #0
 8021e22:	f43f aea6 	beq.w	8021b72 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8021e26:	6803      	ldr	r3, [r0, #0]
 8021e28:	9600      	str	r6, [sp, #0]
 8021e2a:	689e      	ldr	r6, [r3, #8]
 8021e2c:	e7f1      	b.n	8021e12 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 8021e2e:	bf00      	nop
 8021e30:	2005b928 	.word	0x2005b928

08021e34 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8021e34:	b180      	cbz	r0, 8021e58 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8021e36:	2903      	cmp	r1, #3
 8021e38:	d81c      	bhi.n	8021e74 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8021e3a:	e8df f001 	tbb	[pc, r1]
 8021e3e:	1d02      	.short	0x1d02
 8021e40:	1f08      	.short	0x1f08
 8021e42:	4b10      	ldr	r3, [pc, #64]	@ (8021e84 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8021e44:	8818      	ldrh	r0, [r3, #0]
 8021e46:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021e4a:	4240      	negs	r0, r0
 8021e4c:	4770      	bx	lr
 8021e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8021e84 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8021e50:	8818      	ldrh	r0, [r3, #0]
 8021e52:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021e56:	4770      	bx	lr
 8021e58:	2903      	cmp	r1, #3
 8021e5a:	d80b      	bhi.n	8021e74 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8021e5c:	a301      	add	r3, pc, #4	@ (adr r3, 8021e64 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8021e5e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8021e62:	bf00      	nop
 8021e64:	08021e79 	.word	0x08021e79
 8021e68:	08021e4f 	.word	0x08021e4f
 8021e6c:	08021e7d 	.word	0x08021e7d
 8021e70:	08021e43 	.word	0x08021e43
 8021e74:	2000      	movs	r0, #0
 8021e76:	4770      	bx	lr
 8021e78:	2001      	movs	r0, #1
 8021e7a:	4770      	bx	lr
 8021e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8021e80:	4770      	bx	lr
 8021e82:	bf00      	nop
 8021e84:	2005b922 	.word	0x2005b922

08021e88 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8021e88:	b180      	cbz	r0, 8021eac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8021e8a:	2903      	cmp	r1, #3
 8021e8c:	d81c      	bhi.n	8021ec8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8021e8e:	e8df f001 	tbb	[pc, r1]
 8021e92:	021d      	.short	0x021d
 8021e94:	071f      	.short	0x071f
 8021e96:	4b10      	ldr	r3, [pc, #64]	@ (8021ed8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8021e98:	8818      	ldrh	r0, [r3, #0]
 8021e9a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021e9e:	4770      	bx	lr
 8021ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8021ed8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8021ea2:	8818      	ldrh	r0, [r3, #0]
 8021ea4:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021ea8:	4240      	negs	r0, r0
 8021eaa:	4770      	bx	lr
 8021eac:	2903      	cmp	r1, #3
 8021eae:	d80b      	bhi.n	8021ec8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8021eb0:	a301      	add	r3, pc, #4	@ (adr r3, 8021eb8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8021eb2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8021eb6:	bf00      	nop
 8021eb8:	08021e97 	.word	0x08021e97
 8021ebc:	08021ed1 	.word	0x08021ed1
 8021ec0:	08021ea1 	.word	0x08021ea1
 8021ec4:	08021ecd 	.word	0x08021ecd
 8021ec8:	2000      	movs	r0, #0
 8021eca:	4770      	bx	lr
 8021ecc:	2001      	movs	r0, #1
 8021ece:	4770      	bx	lr
 8021ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8021ed4:	4770      	bx	lr
 8021ed6:	bf00      	nop
 8021ed8:	2005b922 	.word	0x2005b922

08021edc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8021edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ee0:	b099      	sub	sp, #100	@ 0x64
 8021ee2:	910d      	str	r1, [sp, #52]	@ 0x34
 8021ee4:	a914      	add	r1, sp, #80	@ 0x50
 8021ee6:	e881 000c 	stmia.w	r1, {r2, r3}
 8021eea:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 8021eee:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 8021ef2:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 8021ef6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021ef8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8021efc:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 8021f00:	9310      	str	r3, [sp, #64]	@ 0x40
 8021f02:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8021f06:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 8021f0a:	9308      	str	r3, [sp, #32]
 8021f0c:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8021f10:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 8021f12:	9309      	str	r3, [sp, #36]	@ 0x24
 8021f14:	7b4b      	ldrb	r3, [r1, #13]
 8021f16:	f8dd 90a8 	ldr.w	r9, [sp, #168]	@ 0xa8
 8021f1a:	ea4f 1843 	mov.w	r8, r3, lsl #5
 8021f1e:	f408 7080 	and.w	r0, r8, #256	@ 0x100
 8021f22:	f891 8006 	ldrb.w	r8, [r1, #6]
 8021f26:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 8021f2a:	ea58 0800 	orrs.w	r8, r8, r0
 8021f2e:	f000 81cc 	beq.w	80222ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8021f32:	011b      	lsls	r3, r3, #4
 8021f34:	79c8      	ldrb	r0, [r1, #7]
 8021f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021f3a:	4303      	orrs	r3, r0
 8021f3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8021f3e:	f000 81c4 	beq.w	80222ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8021f42:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8021f46:	b29b      	uxth	r3, r3
 8021f48:	2d00      	cmp	r5, #0
 8021f4a:	f000 812a 	beq.w	80221a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c6>
 8021f4e:	1aed      	subs	r5, r5, r3
 8021f50:	b2ad      	uxth	r5, r5
 8021f52:	0429      	lsls	r1, r5, #16
 8021f54:	d502      	bpl.n	8021f5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 8021f56:	1b64      	subs	r4, r4, r5
 8021f58:	2500      	movs	r5, #0
 8021f5a:	b224      	sxth	r4, r4
 8021f5c:	f9b2 0000 	ldrsh.w	r0, [r2]
 8021f60:	8891      	ldrh	r1, [r2, #4]
 8021f62:	4284      	cmp	r4, r0
 8021f64:	b283      	uxth	r3, r0
 8021f66:	bfbf      	itttt	lt
 8021f68:	18ed      	addlt	r5, r5, r3
 8021f6a:	1b2c      	sublt	r4, r5, r4
 8021f6c:	b2a5      	uxthlt	r5, r4
 8021f6e:	4604      	movlt	r4, r0
 8021f70:	440b      	add	r3, r1
 8021f72:	b21b      	sxth	r3, r3
 8021f74:	930a      	str	r3, [sp, #40]	@ 0x28
 8021f76:	88d3      	ldrh	r3, [r2, #6]
 8021f78:	8852      	ldrh	r2, [r2, #2]
 8021f7a:	4621      	mov	r1, r4
 8021f7c:	4413      	add	r3, r2
 8021f7e:	b21b      	sxth	r3, r3
 8021f80:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021f82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021f84:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021f86:	930e      	str	r3, [sp, #56]	@ 0x38
 8021f88:	4bb2      	ldr	r3, [pc, #712]	@ (8022254 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8021f8a:	a814      	add	r0, sp, #80	@ 0x50
 8021f8c:	f893 b000 	ldrb.w	fp, [r3]
 8021f90:	4653      	mov	r3, sl
 8021f92:	f7f6 f935 	bl	8018200 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8021f96:	4621      	mov	r1, r4
 8021f98:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8021f9c:	4653      	mov	r3, sl
 8021f9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021fa0:	a814      	add	r0, sp, #80	@ 0x50
 8021fa2:	f7f6 f94a 	bl	801823a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8021fa6:	a918      	add	r1, sp, #96	@ 0x60
 8021fa8:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8021fac:	a817      	add	r0, sp, #92	@ 0x5c
 8021fae:	f7f6 fa71 	bl	8018494 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8021fb2:	f1ba 0f00 	cmp.w	sl, #0
 8021fb6:	f040 80f7 	bne.w	80221a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8021fba:	f1bb 0f01 	cmp.w	fp, #1
 8021fbe:	f040 80fb 	bne.w	80221b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 8021fc2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021fc4:	2b00      	cmp	r3, #0
 8021fc6:	f040 81a8 	bne.w	802231a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x43e>
 8021fca:	fa1f f288 	uxth.w	r2, r8
 8021fce:	b905      	cbnz	r5, 8021fd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf6>
 8021fd0:	b15e      	cbz	r6, 8021fea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8021fd2:	4631      	mov	r1, r6
 8021fd4:	fb06 5302 	mla	r3, r6, r2, r5
 8021fd8:	9808      	ldr	r0, [sp, #32]
 8021fda:	4343      	muls	r3, r0
 8021fdc:	f003 0607 	and.w	r6, r3, #7
 8021fe0:	eb07 07d3 	add.w	r7, r7, r3, lsr #3
 8021fe4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021fe6:	1a5b      	subs	r3, r3, r1
 8021fe8:	930e      	str	r3, [sp, #56]	@ 0x38
 8021fea:	f10b 31ff 	add.w	r1, fp, #4294967295
 8021fee:	424b      	negs	r3, r1
 8021ff0:	414b      	adcs	r3, r1
 8021ff2:	4618      	mov	r0, r3
 8021ff4:	4651      	mov	r1, sl
 8021ff6:	930c      	str	r3, [sp, #48]	@ 0x30
 8021ff8:	f7ff ff1c 	bl	8021e34 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8021ffc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021ffe:	4683      	mov	fp, r0
 8022000:	4618      	mov	r0, r3
 8022002:	f7ff ff41 	bl	8021e88 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8022006:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8022008:	4603      	mov	r3, r0
 802200a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802200c:	eba1 0a00 	sub.w	sl, r1, r0
 8022010:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8022012:	458a      	cmp	sl, r1
 8022014:	bfa8      	it	ge
 8022016:	468a      	movge	sl, r1
 8022018:	f1ba 0f00 	cmp.w	sl, #0
 802201c:	f340 8155 	ble.w	80222ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8022020:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022022:	1b64      	subs	r4, r4, r5
 8022024:	1b0c      	subs	r4, r1, r4
 8022026:	4544      	cmp	r4, r8
 8022028:	bfd4      	ite	le
 802202a:	ebc5 0504 	rsble	r5, r5, r4
 802202e:	ebc5 0508 	rsbgt	r5, r5, r8
 8022032:	2d00      	cmp	r5, #0
 8022034:	f340 8149 	ble.w	80222ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8022038:	9908      	ldr	r1, [sp, #32]
 802203a:	1b52      	subs	r2, r2, r5
 802203c:	434a      	muls	r2, r1
 802203e:	920e      	str	r2, [sp, #56]	@ 0x38
 8022040:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022042:	2a00      	cmp	r2, #0
 8022044:	f040 8175 	bne.w	8022332 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x456>
 8022048:	4a83      	ldr	r2, [pc, #524]	@ (8022258 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 802204a:	930a      	str	r3, [sp, #40]	@ 0x28
 802204c:	6810      	ldr	r0, [r2, #0]
 802204e:	6802      	ldr	r2, [r0, #0]
 8022050:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8022052:	4790      	blx	r2
 8022054:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022056:	2201      	movs	r2, #1
 8022058:	9908      	ldr	r1, [sp, #32]
 802205a:	408a      	lsls	r2, r1
 802205c:	3a01      	subs	r2, #1
 802205e:	497f      	ldr	r1, [pc, #508]	@ (802225c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8022060:	b2d2      	uxtb	r2, r2
 8022062:	880c      	ldrh	r4, [r1, #0]
 8022064:	920c      	str	r2, [sp, #48]	@ 0x30
 8022066:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	@ 0x5c
 802206a:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	@ 0x5e
 802206e:	fb04 1202 	mla	r2, r4, r2, r1
 8022072:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8022076:	ea4f 2419 	mov.w	r4, r9, lsr #8
 802207a:	920a      	str	r2, [sp, #40]	@ 0x28
 802207c:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8022080:	9212      	str	r2, [sp, #72]	@ 0x48
 8022082:	b2e2      	uxtb	r2, r4
 8022084:	9211      	str	r2, [sp, #68]	@ 0x44
 8022086:	fa5f f289 	uxtb.w	r2, r9
 802208a:	9210      	str	r2, [sp, #64]	@ 0x40
 802208c:	4a74      	ldr	r2, [pc, #464]	@ (8022260 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 802208e:	ea4f 1159 	mov.w	r1, r9, lsr #5
 8022092:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8022096:	4022      	ands	r2, r4
 8022098:	430a      	orrs	r2, r1
 802209a:	ea4f 014b 	mov.w	r1, fp, lsl #1
 802209e:	fb05 3b1b 	mls	fp, r5, fp, r3
 80220a2:	460b      	mov	r3, r1
 80220a4:	f3c9 09c4 	ubfx	r9, r9, #3, #5
 80220a8:	ea42 0209 	orr.w	r2, r2, r9
 80220ac:	436b      	muls	r3, r5
 80220ae:	b292      	uxth	r2, r2
 80220b0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80220b2:	783a      	ldrb	r2, [r7, #0]
 80220b4:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 80220b8:	4132      	asrs	r2, r6
 80220ba:	b2d2      	uxtb	r2, r2
 80220bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80220be:	9313      	str	r3, [sp, #76]	@ 0x4c
 80220c0:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80220c4:	f0c0 8149 	bcc.w	802235a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x47e>
 80220c8:	46a9      	mov	r9, r5
 80220ca:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 80220ce:	f119 39ff 	adds.w	r9, r9, #4294967295
 80220d2:	f0c0 8132 	bcc.w	802233a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45e>
 80220d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80220d8:	4013      	ands	r3, r2
 80220da:	d054      	beq.n	8022186 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 80220dc:	20ff      	movs	r0, #255	@ 0xff
 80220de:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80220e0:	fb90 f1f1 	sdiv	r1, r0, r1
 80220e4:	434b      	muls	r3, r1
 80220e6:	2bfe      	cmp	r3, #254	@ 0xfe
 80220e8:	dd03      	ble.n	80220f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x216>
 80220ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80220ec:	4281      	cmp	r1, r0
 80220ee:	f000 8122 	beq.w	8022336 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45a>
 80220f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80220f4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80220f6:	fb11 f303 	smulbb	r3, r1, r3
 80220fa:	b29b      	uxth	r3, r3
 80220fc:	1c59      	adds	r1, r3, #1
 80220fe:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022102:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022106:	fa1f fe83 	uxth.w	lr, r3
 802210a:	43db      	mvns	r3, r3
 802210c:	f8b8 4000 	ldrh.w	r4, [r8]
 8022110:	fb10 fb0e 	smulbb	fp, r0, lr
 8022114:	1221      	asrs	r1, r4, #8
 8022116:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8022118:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802211c:	b2db      	uxtb	r3, r3
 802211e:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8022122:	fb01 b103 	mla	r1, r1, r3, fp
 8022126:	fb10 fb0e 	smulbb	fp, r0, lr
 802212a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802212c:	ea4f 0ce4 	mov.w	ip, r4, asr #3
 8022130:	fb10 fe0e 	smulbb	lr, r0, lr
 8022134:	00e4      	lsls	r4, r4, #3
 8022136:	b2e4      	uxtb	r4, r4
 8022138:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802213c:	fb04 e403 	mla	r4, r4, r3, lr
 8022140:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8022144:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 8022148:	fb0c bc03 	mla	ip, ip, r3, fp
 802214c:	b289      	uxth	r1, r1
 802214e:	b2a4      	uxth	r4, r4
 8022150:	1c4b      	adds	r3, r1, #1
 8022152:	f104 0b01 	add.w	fp, r4, #1
 8022156:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802215a:	eb0b 2b14 	add.w	fp, fp, r4, lsr #8
 802215e:	fa1f fc8c 	uxth.w	ip, ip
 8022162:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8022166:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802216a:	ea4b 0101 	orr.w	r1, fp, r1
 802216e:	f10c 0b01 	add.w	fp, ip, #1
 8022172:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 8022176:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 802217a:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 802217e:	ea41 010b 	orr.w	r1, r1, fp
 8022182:	f8a8 1000 	strh.w	r1, [r8]
 8022186:	9b08      	ldr	r3, [sp, #32]
 8022188:	441e      	add	r6, r3
 802218a:	b2b6      	uxth	r6, r6
 802218c:	2e07      	cmp	r6, #7
 802218e:	bf98      	it	ls
 8022190:	411a      	asrls	r2, r3
 8022192:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022194:	bf89      	itett	hi
 8022196:	787a      	ldrbhi	r2, [r7, #1]
 8022198:	b2d2      	uxtbls	r2, r2
 802219a:	3701      	addhi	r7, #1
 802219c:	2600      	movhi	r6, #0
 802219e:	4498      	add	r8, r3
 80221a0:	e795      	b.n	80220ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f2>
 80221a2:	441c      	add	r4, r3
 80221a4:	b224      	sxth	r4, r4
 80221a6:	e6d9      	b.n	8021f5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 80221a8:	f1ba 0f01 	cmp.w	sl, #1
 80221ac:	f47f af09 	bne.w	8021fc2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 80221b0:	f1bb 0f01 	cmp.w	fp, #1
 80221b4:	f47f af05 	bne.w	8021fc2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 80221b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80221ba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80221bc:	1a99      	subs	r1, r3, r2
 80221be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80221c0:	1b9b      	subs	r3, r3, r6
 80221c2:	4299      	cmp	r1, r3
 80221c4:	bfa8      	it	ge
 80221c6:	4619      	movge	r1, r3
 80221c8:	2900      	cmp	r1, #0
 80221ca:	9112      	str	r1, [sp, #72]	@ 0x48
 80221cc:	dd7d      	ble.n	80222ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 80221ce:	4a22      	ldr	r2, [pc, #136]	@ (8022258 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 80221d0:	6810      	ldr	r0, [r2, #0]
 80221d2:	9211      	str	r2, [sp, #68]	@ 0x44
 80221d4:	6803      	ldr	r3, [r0, #0]
 80221d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80221d8:	4798      	blx	r3
 80221da:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 80221de:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80221e0:	d006      	beq.n	80221f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x314>
 80221e2:	9b08      	ldr	r3, [sp, #32]
 80221e4:	2b04      	cmp	r3, #4
 80221e6:	d133      	bne.n	8022250 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 80221e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80221ea:	3300      	adds	r3, #0
 80221ec:	bf18      	it	ne
 80221ee:	2301      	movne	r3, #1
 80221f0:	0582      	lsls	r2, r0, #22
 80221f2:	fa1f fc88 	uxth.w	ip, r8
 80221f6:	f140 80b9 	bpl.w	802236c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x490>
 80221fa:	9808      	ldr	r0, [sp, #32]
 80221fc:	2808      	cmp	r0, #8
 80221fe:	f040 80b5 	bne.w	802236c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x490>
 8022202:	2b00      	cmp	r3, #0
 8022204:	d064      	beq.n	80222d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>
 8022206:	f10c 0c01 	add.w	ip, ip, #1
 802220a:	f02c 0301 	bic.w	r3, ip, #1
 802220e:	b29b      	uxth	r3, r3
 8022210:	bb45      	cbnz	r5, 8022264 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 8022212:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022214:	eb08 0004 	add.w	r0, r8, r4
 8022218:	4290      	cmp	r0, r2
 802221a:	dc23      	bgt.n	8022264 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 802221c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802221e:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 8022222:	6810      	ldr	r0, [r2, #0]
 8022224:	b289      	uxth	r1, r1
 8022226:	6804      	ldr	r4, [r0, #0]
 8022228:	9506      	str	r5, [sp, #24]
 802222a:	f44f 7580 	mov.w	r5, #256	@ 0x100
 802222e:	e9cd 3100 	strd	r3, r1, [sp]
 8022232:	9302      	str	r3, [sp, #8]
 8022234:	4673      	mov	r3, lr
 8022236:	9505      	str	r5, [sp, #20]
 8022238:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802223a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 802223e:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8022242:	fb06 710c 	mla	r1, r6, ip, r7
 8022246:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 802224a:	6da4      	ldr	r4, [r4, #88]	@ 0x58
 802224c:	47a0      	blx	r4
 802224e:	e03c      	b.n	80222ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8022250:	2300      	movs	r3, #0
 8022252:	e7cd      	b.n	80221f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x314>
 8022254:	2005b920 	.word	0x2005b920
 8022258:	2005b928 	.word	0x2005b928
 802225c:	2005b922 	.word	0x2005b922
 8022260:	00fff800 	.word	0x00fff800
 8022264:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022266:	eba4 0e05 	sub.w	lr, r4, r5
 802226a:	eba2 0e0e 	sub.w	lr, r2, lr
 802226e:	45c6      	cmp	lr, r8
 8022270:	bfd4      	ite	le
 8022272:	ebc5 0e0e 	rsble	lr, r5, lr
 8022276:	ebc5 0e08 	rsbgt	lr, r5, r8
 802227a:	f1be 0f00 	cmp.w	lr, #0
 802227e:	d024      	beq.n	80222ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8022280:	07e8      	lsls	r0, r5, #31
 8022282:	f53f ae9e 	bmi.w	8021fc2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 8022286:	f01e 0001 	ands.w	r0, lr, #1
 802228a:	f47f ae9a 	bne.w	8021fc2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 802228e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8022290:	086d      	lsrs	r5, r5, #1
 8022292:	6814      	ldr	r4, [r2, #0]
 8022294:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8022298:	fb06 560c 	mla	r6, r6, ip, r5
 802229c:	6825      	ldr	r5, [r4, #0]
 802229e:	9006      	str	r0, [sp, #24]
 80222a0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80222a4:	9005      	str	r0, [sp, #20]
 80222a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80222a8:	9302      	str	r3, [sp, #8]
 80222aa:	e9cd 9003 	strd	r9, r0, [sp, #12]
 80222ae:	b289      	uxth	r1, r1
 80222b0:	fa1f f38e 	uxth.w	r3, lr
 80222b4:	f8bd 805e 	ldrh.w	r8, [sp, #94]	@ 0x5e
 80222b8:	9101      	str	r1, [sp, #4]
 80222ba:	9300      	str	r3, [sp, #0]
 80222bc:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 80222c0:	6dad      	ldr	r5, [r5, #88]	@ 0x58
 80222c2:	4643      	mov	r3, r8
 80222c4:	19b9      	adds	r1, r7, r6
 80222c6:	4620      	mov	r0, r4
 80222c8:	47a8      	blx	r5
 80222ca:	b019      	add	sp, #100	@ 0x64
 80222cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222d0:	4a28      	ldr	r2, [pc, #160]	@ (8022374 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x498>)
 80222d2:	1b64      	subs	r4, r4, r5
 80222d4:	6810      	ldr	r0, [r2, #0]
 80222d6:	fb06 5608 	mla	r6, r6, r8, r5
 80222da:	f8d0 a000 	ldr.w	sl, [r0]
 80222de:	9306      	str	r3, [sp, #24]
 80222e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80222e4:	9305      	str	r3, [sp, #20]
 80222e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80222e8:	b289      	uxth	r1, r1
 80222ea:	e9cd 9303 	strd	r9, r3, [sp, #12]
 80222ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80222f0:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 80222f4:	1b1c      	subs	r4, r3, r4
 80222f6:	4544      	cmp	r4, r8
 80222f8:	bfd4      	ite	le
 80222fa:	ebc5 0504 	rsble	r5, r5, r4
 80222fe:	ebc5 0508 	rsbgt	r5, r5, r8
 8022302:	b2ad      	uxth	r5, r5
 8022304:	9101      	str	r1, [sp, #4]
 8022306:	f8cd c008 	str.w	ip, [sp, #8]
 802230a:	9500      	str	r5, [sp, #0]
 802230c:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8022310:	f8da 4058 	ldr.w	r4, [sl, #88]	@ 0x58
 8022314:	4673      	mov	r3, lr
 8022316:	19b9      	adds	r1, r7, r6
 8022318:	e798      	b.n	802224c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x370>
 802231a:	2208      	movs	r2, #8
 802231c:	9b08      	ldr	r3, [sp, #32]
 802231e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022322:	1e5a      	subs	r2, r3, #1
 8022324:	4442      	add	r2, r8
 8022326:	fb92 f2f3 	sdiv	r2, r2, r3
 802232a:	fb12 f203 	smulbb	r2, r2, r3
 802232e:	b292      	uxth	r2, r2
 8022330:	e64d      	b.n	8021fce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8022332:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022334:	e68f      	b.n	8022056 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x17a>
 8022336:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8022338:	e723      	b.n	8022182 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a6>
 802233a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802233c:	b143      	cbz	r3, 8022350 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x474>
 802233e:	441e      	add	r6, r3
 8022340:	b2b6      	uxth	r6, r6
 8022342:	eb07 07d6 	add.w	r7, r7, r6, lsr #3
 8022346:	783a      	ldrb	r2, [r7, #0]
 8022348:	f006 0607 	and.w	r6, r6, #7
 802234c:	4132      	asrs	r2, r6
 802234e:	b2d2      	uxtb	r2, r2
 8022350:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022352:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022354:	4419      	add	r1, r3
 8022356:	910a      	str	r1, [sp, #40]	@ 0x28
 8022358:	e6b2      	b.n	80220c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 802235a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802235c:	2b00      	cmp	r3, #0
 802235e:	d1b4      	bne.n	80222ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 8022360:	4b04      	ldr	r3, [pc, #16]	@ (8022374 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x498>)
 8022362:	6818      	ldr	r0, [r3, #0]
 8022364:	6803      	ldr	r3, [r0, #0]
 8022366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022368:	4798      	blx	r3
 802236a:	e7ae      	b.n	80222ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ee>
 802236c:	2b00      	cmp	r3, #0
 802236e:	f47f af4a 	bne.w	8022206 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x32a>
 8022372:	e626      	b.n	8021fc2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xe6>
 8022374:	2005b928 	.word	0x2005b928

08022378 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8022378:	b538      	push	{r3, r4, r5, lr}
 802237a:	4605      	mov	r5, r0
 802237c:	4c13      	ldr	r4, [pc, #76]	@ (80223cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x54>)
 802237e:	e8d4 3f8f 	ldab	r3, [r4]
 8022382:	07da      	lsls	r2, r3, #31
 8022384:	d40b      	bmi.n	802239e <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 8022386:	4620      	mov	r0, r4
 8022388:	f008 fc23 	bl	802abd2 <__cxa_guard_acquire>
 802238c:	b138      	cbz	r0, 802239e <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 802238e:	4620      	mov	r0, r4
 8022390:	f008 fc2b 	bl	802abea <__cxa_guard_release>
 8022394:	4a0e      	ldr	r2, [pc, #56]	@ (80223d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8022396:	490f      	ldr	r1, [pc, #60]	@ (80223d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022398:	480f      	ldr	r0, [pc, #60]	@ (80223d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 802239a:	f008 fc13 	bl	802abc4 <__aeabi_atexit>
 802239e:	4c0f      	ldr	r4, [pc, #60]	@ (80223dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80223a0:	e8d4 3f8f 	ldab	r3, [r4]
 80223a4:	07db      	lsls	r3, r3, #31
 80223a6:	d40b      	bmi.n	80223c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 80223a8:	4620      	mov	r0, r4
 80223aa:	f008 fc12 	bl	802abd2 <__cxa_guard_acquire>
 80223ae:	b138      	cbz	r0, 80223c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 80223b0:	4620      	mov	r0, r4
 80223b2:	f008 fc1a 	bl	802abea <__cxa_guard_release>
 80223b6:	4a06      	ldr	r2, [pc, #24]	@ (80223d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80223b8:	4909      	ldr	r1, [pc, #36]	@ (80223e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80223ba:	480a      	ldr	r0, [pc, #40]	@ (80223e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80223bc:	f008 fc02 	bl	802abc4 <__aeabi_atexit>
 80223c0:	4b05      	ldr	r3, [pc, #20]	@ (80223d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80223c2:	616b      	str	r3, [r5, #20]
 80223c4:	4b07      	ldr	r3, [pc, #28]	@ (80223e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80223c6:	61ab      	str	r3, [r5, #24]
 80223c8:	bd38      	pop	{r3, r4, r5, pc}
 80223ca:	bf00      	nop
 80223cc:	2005ba0c 	.word	0x2005ba0c
 80223d0:	20000000 	.word	0x20000000
 80223d4:	0801e48f 	.word	0x0801e48f
 80223d8:	20000068 	.word	0x20000068
 80223dc:	2005ba10 	.word	0x2005ba10
 80223e0:	0801e48d 	.word	0x0801e48d
 80223e4:	2000006c 	.word	0x2000006c

080223e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 80223e8:	b538      	push	{r3, r4, r5, lr}
 80223ea:	4605      	mov	r5, r0
 80223ec:	4c13      	ldr	r4, [pc, #76]	@ (802243c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x54>)
 80223ee:	e8d4 3f8f 	ldab	r3, [r4]
 80223f2:	07da      	lsls	r2, r3, #31
 80223f4:	d40b      	bmi.n	802240e <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 80223f6:	4620      	mov	r0, r4
 80223f8:	f008 fbeb 	bl	802abd2 <__cxa_guard_acquire>
 80223fc:	b138      	cbz	r0, 802240e <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 80223fe:	4620      	mov	r0, r4
 8022400:	f008 fbf3 	bl	802abea <__cxa_guard_release>
 8022404:	4a0e      	ldr	r2, [pc, #56]	@ (8022440 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8022406:	490f      	ldr	r1, [pc, #60]	@ (8022444 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8022408:	480f      	ldr	r0, [pc, #60]	@ (8022448 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 802240a:	f008 fbdb 	bl	802abc4 <__aeabi_atexit>
 802240e:	4c0f      	ldr	r4, [pc, #60]	@ (802244c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8022410:	e8d4 3f8f 	ldab	r3, [r4]
 8022414:	07db      	lsls	r3, r3, #31
 8022416:	d40b      	bmi.n	8022430 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 8022418:	4620      	mov	r0, r4
 802241a:	f008 fbda 	bl	802abd2 <__cxa_guard_acquire>
 802241e:	b138      	cbz	r0, 8022430 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 8022420:	4620      	mov	r0, r4
 8022422:	f008 fbe2 	bl	802abea <__cxa_guard_release>
 8022426:	4a06      	ldr	r2, [pc, #24]	@ (8022440 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8022428:	4909      	ldr	r1, [pc, #36]	@ (8022450 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 802242a:	480a      	ldr	r0, [pc, #40]	@ (8022454 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 802242c:	f008 fbca 	bl	802abc4 <__aeabi_atexit>
 8022430:	4b05      	ldr	r3, [pc, #20]	@ (8022448 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8022432:	60eb      	str	r3, [r5, #12]
 8022434:	4b07      	ldr	r3, [pc, #28]	@ (8022454 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8022436:	612b      	str	r3, [r5, #16]
 8022438:	bd38      	pop	{r3, r4, r5, pc}
 802243a:	bf00      	nop
 802243c:	2005b9e4 	.word	0x2005b9e4
 8022440:	20000000 	.word	0x20000000
 8022444:	0801e493 	.word	0x0801e493
 8022448:	20000040 	.word	0x20000040
 802244c:	2005b9e8 	.word	0x2005b9e8
 8022450:	0801e491 	.word	0x0801e491
 8022454:	20000044 	.word	0x20000044

08022458 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8022458:	b510      	push	{r4, lr}
 802245a:	4604      	mov	r4, r0
 802245c:	f7ff ff8c 	bl	8022378 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8022460:	4620      	mov	r0, r4
 8022462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022466:	f7ff bfbf 	b.w	80223e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0802246c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 802246c:	b538      	push	{r3, r4, r5, lr}
 802246e:	4605      	mov	r5, r0
 8022470:	4c13      	ldr	r4, [pc, #76]	@ (80224c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x54>)
 8022472:	e8d4 3f8f 	ldab	r3, [r4]
 8022476:	07da      	lsls	r2, r3, #31
 8022478:	d40b      	bmi.n	8022492 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 802247a:	4620      	mov	r0, r4
 802247c:	f008 fba9 	bl	802abd2 <__cxa_guard_acquire>
 8022480:	b138      	cbz	r0, 8022492 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 8022482:	4620      	mov	r0, r4
 8022484:	f008 fbb1 	bl	802abea <__cxa_guard_release>
 8022488:	4a0e      	ldr	r2, [pc, #56]	@ (80224c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 802248a:	490f      	ldr	r1, [pc, #60]	@ (80224c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802248c:	480f      	ldr	r0, [pc, #60]	@ (80224cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802248e:	f008 fb99 	bl	802abc4 <__aeabi_atexit>
 8022492:	4c0f      	ldr	r4, [pc, #60]	@ (80224d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8022494:	e8d4 3f8f 	ldab	r3, [r4]
 8022498:	07db      	lsls	r3, r3, #31
 802249a:	d40b      	bmi.n	80224b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 802249c:	4620      	mov	r0, r4
 802249e:	f008 fb98 	bl	802abd2 <__cxa_guard_acquire>
 80224a2:	b138      	cbz	r0, 80224b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 80224a4:	4620      	mov	r0, r4
 80224a6:	f008 fba0 	bl	802abea <__cxa_guard_release>
 80224aa:	4a06      	ldr	r2, [pc, #24]	@ (80224c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80224ac:	4909      	ldr	r1, [pc, #36]	@ (80224d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80224ae:	480a      	ldr	r0, [pc, #40]	@ (80224d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80224b0:	f008 fb88 	bl	802abc4 <__aeabi_atexit>
 80224b4:	4b05      	ldr	r3, [pc, #20]	@ (80224cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80224b6:	626b      	str	r3, [r5, #36]	@ 0x24
 80224b8:	4b07      	ldr	r3, [pc, #28]	@ (80224d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80224ba:	62ab      	str	r3, [r5, #40]	@ 0x28
 80224bc:	bd38      	pop	{r3, r4, r5, pc}
 80224be:	bf00      	nop
 80224c0:	2005ba14 	.word	0x2005ba14
 80224c4:	20000000 	.word	0x20000000
 80224c8:	0801e487 	.word	0x0801e487
 80224cc:	20000070 	.word	0x20000070
 80224d0:	2005ba18 	.word	0x2005ba18
 80224d4:	0801e485 	.word	0x0801e485
 80224d8:	20000074 	.word	0x20000074

080224dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80224dc:	b538      	push	{r3, r4, r5, lr}
 80224de:	4605      	mov	r5, r0
 80224e0:	4c13      	ldr	r4, [pc, #76]	@ (8022530 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x54>)
 80224e2:	e8d4 3f8f 	ldab	r3, [r4]
 80224e6:	07da      	lsls	r2, r3, #31
 80224e8:	d40b      	bmi.n	8022502 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 80224ea:	4620      	mov	r0, r4
 80224ec:	f008 fb71 	bl	802abd2 <__cxa_guard_acquire>
 80224f0:	b138      	cbz	r0, 8022502 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 80224f2:	4620      	mov	r0, r4
 80224f4:	f008 fb79 	bl	802abea <__cxa_guard_release>
 80224f8:	4a0e      	ldr	r2, [pc, #56]	@ (8022534 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80224fa:	490f      	ldr	r1, [pc, #60]	@ (8022538 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80224fc:	480f      	ldr	r0, [pc, #60]	@ (802253c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80224fe:	f008 fb61 	bl	802abc4 <__aeabi_atexit>
 8022502:	4c0f      	ldr	r4, [pc, #60]	@ (8022540 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022504:	e8d4 3f8f 	ldab	r3, [r4]
 8022508:	07db      	lsls	r3, r3, #31
 802250a:	d40b      	bmi.n	8022524 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 802250c:	4620      	mov	r0, r4
 802250e:	f008 fb60 	bl	802abd2 <__cxa_guard_acquire>
 8022512:	b138      	cbz	r0, 8022524 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 8022514:	4620      	mov	r0, r4
 8022516:	f008 fb68 	bl	802abea <__cxa_guard_release>
 802251a:	4a06      	ldr	r2, [pc, #24]	@ (8022534 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 802251c:	4909      	ldr	r1, [pc, #36]	@ (8022544 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802251e:	480a      	ldr	r0, [pc, #40]	@ (8022548 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8022520:	f008 fb50 	bl	802abc4 <__aeabi_atexit>
 8022524:	4b05      	ldr	r3, [pc, #20]	@ (802253c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8022526:	61eb      	str	r3, [r5, #28]
 8022528:	4b07      	ldr	r3, [pc, #28]	@ (8022548 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802252a:	622b      	str	r3, [r5, #32]
 802252c:	bd38      	pop	{r3, r4, r5, pc}
 802252e:	bf00      	nop
 8022530:	2005b9ec 	.word	0x2005b9ec
 8022534:	20000000 	.word	0x20000000
 8022538:	0801e48b 	.word	0x0801e48b
 802253c:	20000048 	.word	0x20000048
 8022540:	2005b9f0 	.word	0x2005b9f0
 8022544:	0801e489 	.word	0x0801e489
 8022548:	2000004c 	.word	0x2000004c

0802254c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 802254c:	b510      	push	{r4, lr}
 802254e:	4604      	mov	r4, r0
 8022550:	f7ff ff8c 	bl	802246c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8022554:	4620      	mov	r0, r4
 8022556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802255a:	f7ff bfbf 	b.w	80224dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08022560 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8022560:	b538      	push	{r3, r4, r5, lr}
 8022562:	4605      	mov	r5, r0
 8022564:	4c13      	ldr	r4, [pc, #76]	@ (80225b4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x54>)
 8022566:	e8d4 3f8f 	ldab	r3, [r4]
 802256a:	07da      	lsls	r2, r3, #31
 802256c:	d40b      	bmi.n	8022586 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 802256e:	4620      	mov	r0, r4
 8022570:	f008 fb2f 	bl	802abd2 <__cxa_guard_acquire>
 8022574:	b138      	cbz	r0, 8022586 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 8022576:	4620      	mov	r0, r4
 8022578:	f008 fb37 	bl	802abea <__cxa_guard_release>
 802257c:	4a0e      	ldr	r2, [pc, #56]	@ (80225b8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 802257e:	490f      	ldr	r1, [pc, #60]	@ (80225bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022580:	480f      	ldr	r0, [pc, #60]	@ (80225c0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8022582:	f008 fb1f 	bl	802abc4 <__aeabi_atexit>
 8022586:	4c0f      	ldr	r4, [pc, #60]	@ (80225c4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022588:	e8d4 3f8f 	ldab	r3, [r4]
 802258c:	07db      	lsls	r3, r3, #31
 802258e:	d40b      	bmi.n	80225a8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 8022590:	4620      	mov	r0, r4
 8022592:	f008 fb1e 	bl	802abd2 <__cxa_guard_acquire>
 8022596:	b138      	cbz	r0, 80225a8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 8022598:	4620      	mov	r0, r4
 802259a:	f008 fb26 	bl	802abea <__cxa_guard_release>
 802259e:	4a06      	ldr	r2, [pc, #24]	@ (80225b8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80225a0:	4909      	ldr	r1, [pc, #36]	@ (80225c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80225a2:	480a      	ldr	r0, [pc, #40]	@ (80225cc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80225a4:	f008 fb0e 	bl	802abc4 <__aeabi_atexit>
 80225a8:	4b05      	ldr	r3, [pc, #20]	@ (80225c0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80225aa:	636b      	str	r3, [r5, #52]	@ 0x34
 80225ac:	4b07      	ldr	r3, [pc, #28]	@ (80225cc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80225ae:	63ab      	str	r3, [r5, #56]	@ 0x38
 80225b0:	bd38      	pop	{r3, r4, r5, pc}
 80225b2:	bf00      	nop
 80225b4:	2005ba24 	.word	0x2005ba24
 80225b8:	20000000 	.word	0x20000000
 80225bc:	0801e47f 	.word	0x0801e47f
 80225c0:	20000080 	.word	0x20000080
 80225c4:	2005ba28 	.word	0x2005ba28
 80225c8:	0801e47d 	.word	0x0801e47d
 80225cc:	20000084 	.word	0x20000084

080225d0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80225d0:	b538      	push	{r3, r4, r5, lr}
 80225d2:	4605      	mov	r5, r0
 80225d4:	4c13      	ldr	r4, [pc, #76]	@ (8022624 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x54>)
 80225d6:	e8d4 3f8f 	ldab	r3, [r4]
 80225da:	07da      	lsls	r2, r3, #31
 80225dc:	d40b      	bmi.n	80225f6 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 80225de:	4620      	mov	r0, r4
 80225e0:	f008 faf7 	bl	802abd2 <__cxa_guard_acquire>
 80225e4:	b138      	cbz	r0, 80225f6 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 80225e6:	4620      	mov	r0, r4
 80225e8:	f008 faff 	bl	802abea <__cxa_guard_release>
 80225ec:	4a0e      	ldr	r2, [pc, #56]	@ (8022628 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80225ee:	490f      	ldr	r1, [pc, #60]	@ (802262c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80225f0:	480f      	ldr	r0, [pc, #60]	@ (8022630 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80225f2:	f008 fae7 	bl	802abc4 <__aeabi_atexit>
 80225f6:	4c0f      	ldr	r4, [pc, #60]	@ (8022634 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80225f8:	e8d4 3f8f 	ldab	r3, [r4]
 80225fc:	07db      	lsls	r3, r3, #31
 80225fe:	d40b      	bmi.n	8022618 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 8022600:	4620      	mov	r0, r4
 8022602:	f008 fae6 	bl	802abd2 <__cxa_guard_acquire>
 8022606:	b138      	cbz	r0, 8022618 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 8022608:	4620      	mov	r0, r4
 802260a:	f008 faee 	bl	802abea <__cxa_guard_release>
 802260e:	4a06      	ldr	r2, [pc, #24]	@ (8022628 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8022610:	4909      	ldr	r1, [pc, #36]	@ (8022638 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8022612:	480a      	ldr	r0, [pc, #40]	@ (802263c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8022614:	f008 fad6 	bl	802abc4 <__aeabi_atexit>
 8022618:	4b05      	ldr	r3, [pc, #20]	@ (8022630 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 802261a:	62eb      	str	r3, [r5, #44]	@ 0x2c
 802261c:	4b07      	ldr	r3, [pc, #28]	@ (802263c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 802261e:	632b      	str	r3, [r5, #48]	@ 0x30
 8022620:	bd38      	pop	{r3, r4, r5, pc}
 8022622:	bf00      	nop
 8022624:	2005b9f4 	.word	0x2005b9f4
 8022628:	20000000 	.word	0x20000000
 802262c:	0801e483 	.word	0x0801e483
 8022630:	20000050 	.word	0x20000050
 8022634:	2005b9f8 	.word	0x2005b9f8
 8022638:	0801e481 	.word	0x0801e481
 802263c:	20000054 	.word	0x20000054

08022640 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8022640:	b510      	push	{r4, lr}
 8022642:	4604      	mov	r4, r0
 8022644:	f7ff ff8c 	bl	8022560 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8022648:	4620      	mov	r0, r4
 802264a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802264e:	f7ff bfbf 	b.w	80225d0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08022654 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8022654:	b538      	push	{r3, r4, r5, lr}
 8022656:	4605      	mov	r5, r0
 8022658:	4c13      	ldr	r4, [pc, #76]	@ (80226a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x54>)
 802265a:	e8d4 3f8f 	ldab	r3, [r4]
 802265e:	07da      	lsls	r2, r3, #31
 8022660:	d40b      	bmi.n	802267a <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 8022662:	4620      	mov	r0, r4
 8022664:	f008 fab5 	bl	802abd2 <__cxa_guard_acquire>
 8022668:	b138      	cbz	r0, 802267a <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 802266a:	4620      	mov	r0, r4
 802266c:	f008 fabd 	bl	802abea <__cxa_guard_release>
 8022670:	4a0e      	ldr	r2, [pc, #56]	@ (80226ac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8022672:	490f      	ldr	r1, [pc, #60]	@ (80226b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8022674:	480f      	ldr	r0, [pc, #60]	@ (80226b4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8022676:	f008 faa5 	bl	802abc4 <__aeabi_atexit>
 802267a:	4c0f      	ldr	r4, [pc, #60]	@ (80226b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 802267c:	e8d4 3f8f 	ldab	r3, [r4]
 8022680:	07db      	lsls	r3, r3, #31
 8022682:	d40b      	bmi.n	802269c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 8022684:	4620      	mov	r0, r4
 8022686:	f008 faa4 	bl	802abd2 <__cxa_guard_acquire>
 802268a:	b138      	cbz	r0, 802269c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 802268c:	4620      	mov	r0, r4
 802268e:	f008 faac 	bl	802abea <__cxa_guard_release>
 8022692:	4a06      	ldr	r2, [pc, #24]	@ (80226ac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8022694:	4909      	ldr	r1, [pc, #36]	@ (80226bc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8022696:	480a      	ldr	r0, [pc, #40]	@ (80226c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8022698:	f008 fa94 	bl	802abc4 <__aeabi_atexit>
 802269c:	4b05      	ldr	r3, [pc, #20]	@ (80226b4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 802269e:	656b      	str	r3, [r5, #84]	@ 0x54
 80226a0:	4b07      	ldr	r3, [pc, #28]	@ (80226c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80226a2:	65ab      	str	r3, [r5, #88]	@ 0x58
 80226a4:	bd38      	pop	{r3, r4, r5, pc}
 80226a6:	bf00      	nop
 80226a8:	2005ba2c 	.word	0x2005ba2c
 80226ac:	20000000 	.word	0x20000000
 80226b0:	0801e46f 	.word	0x0801e46f
 80226b4:	20000088 	.word	0x20000088
 80226b8:	2005ba30 	.word	0x2005ba30
 80226bc:	0801e46d 	.word	0x0801e46d
 80226c0:	2000008c 	.word	0x2000008c

080226c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 80226c4:	b538      	push	{r3, r4, r5, lr}
 80226c6:	4605      	mov	r5, r0
 80226c8:	4c13      	ldr	r4, [pc, #76]	@ (8022718 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x54>)
 80226ca:	e8d4 3f8f 	ldab	r3, [r4]
 80226ce:	07da      	lsls	r2, r3, #31
 80226d0:	d40b      	bmi.n	80226ea <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 80226d2:	4620      	mov	r0, r4
 80226d4:	f008 fa7d 	bl	802abd2 <__cxa_guard_acquire>
 80226d8:	b138      	cbz	r0, 80226ea <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 80226da:	4620      	mov	r0, r4
 80226dc:	f008 fa85 	bl	802abea <__cxa_guard_release>
 80226e0:	4a0e      	ldr	r2, [pc, #56]	@ (802271c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80226e2:	490f      	ldr	r1, [pc, #60]	@ (8022720 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80226e4:	480f      	ldr	r0, [pc, #60]	@ (8022724 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80226e6:	f008 fa6d 	bl	802abc4 <__aeabi_atexit>
 80226ea:	4c0f      	ldr	r4, [pc, #60]	@ (8022728 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80226ec:	e8d4 3f8f 	ldab	r3, [r4]
 80226f0:	07db      	lsls	r3, r3, #31
 80226f2:	d40b      	bmi.n	802270c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 80226f4:	4620      	mov	r0, r4
 80226f6:	f008 fa6c 	bl	802abd2 <__cxa_guard_acquire>
 80226fa:	b138      	cbz	r0, 802270c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 80226fc:	4620      	mov	r0, r4
 80226fe:	f008 fa74 	bl	802abea <__cxa_guard_release>
 8022702:	4a06      	ldr	r2, [pc, #24]	@ (802271c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8022704:	4909      	ldr	r1, [pc, #36]	@ (802272c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8022706:	480a      	ldr	r0, [pc, #40]	@ (8022730 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8022708:	f008 fa5c 	bl	802abc4 <__aeabi_atexit>
 802270c:	4b05      	ldr	r3, [pc, #20]	@ (8022724 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 802270e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8022710:	4b07      	ldr	r3, [pc, #28]	@ (8022730 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8022712:	652b      	str	r3, [r5, #80]	@ 0x50
 8022714:	bd38      	pop	{r3, r4, r5, pc}
 8022716:	bf00      	nop
 8022718:	2005ba34 	.word	0x2005ba34
 802271c:	20000000 	.word	0x20000000
 8022720:	0801e473 	.word	0x0801e473
 8022724:	20000090 	.word	0x20000090
 8022728:	2005ba38 	.word	0x2005ba38
 802272c:	0801e471 	.word	0x0801e471
 8022730:	20000094 	.word	0x20000094

08022734 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8022734:	b538      	push	{r3, r4, r5, lr}
 8022736:	4605      	mov	r5, r0
 8022738:	4c13      	ldr	r4, [pc, #76]	@ (8022788 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x54>)
 802273a:	e8d4 3f8f 	ldab	r3, [r4]
 802273e:	07da      	lsls	r2, r3, #31
 8022740:	d40b      	bmi.n	802275a <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 8022742:	4620      	mov	r0, r4
 8022744:	f008 fa45 	bl	802abd2 <__cxa_guard_acquire>
 8022748:	b138      	cbz	r0, 802275a <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 802274a:	4620      	mov	r0, r4
 802274c:	f008 fa4d 	bl	802abea <__cxa_guard_release>
 8022750:	4a0e      	ldr	r2, [pc, #56]	@ (802278c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8022752:	490f      	ldr	r1, [pc, #60]	@ (8022790 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022754:	480f      	ldr	r0, [pc, #60]	@ (8022794 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8022756:	f008 fa35 	bl	802abc4 <__aeabi_atexit>
 802275a:	4c0f      	ldr	r4, [pc, #60]	@ (8022798 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802275c:	e8d4 3f8f 	ldab	r3, [r4]
 8022760:	07db      	lsls	r3, r3, #31
 8022762:	d40b      	bmi.n	802277c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 8022764:	4620      	mov	r0, r4
 8022766:	f008 fa34 	bl	802abd2 <__cxa_guard_acquire>
 802276a:	b138      	cbz	r0, 802277c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 802276c:	4620      	mov	r0, r4
 802276e:	f008 fa3c 	bl	802abea <__cxa_guard_release>
 8022772:	4a06      	ldr	r2, [pc, #24]	@ (802278c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8022774:	4909      	ldr	r1, [pc, #36]	@ (802279c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8022776:	480a      	ldr	r0, [pc, #40]	@ (80227a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8022778:	f008 fa24 	bl	802abc4 <__aeabi_atexit>
 802277c:	4b05      	ldr	r3, [pc, #20]	@ (8022794 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 802277e:	646b      	str	r3, [r5, #68]	@ 0x44
 8022780:	4b07      	ldr	r3, [pc, #28]	@ (80227a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8022782:	64ab      	str	r3, [r5, #72]	@ 0x48
 8022784:	bd38      	pop	{r3, r4, r5, pc}
 8022786:	bf00      	nop
 8022788:	2005b9fc 	.word	0x2005b9fc
 802278c:	20000000 	.word	0x20000000
 8022790:	0801e477 	.word	0x0801e477
 8022794:	20000058 	.word	0x20000058
 8022798:	2005ba00 	.word	0x2005ba00
 802279c:	0801e475 	.word	0x0801e475
 80227a0:	2000005c 	.word	0x2000005c

080227a4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80227a4:	b538      	push	{r3, r4, r5, lr}
 80227a6:	4605      	mov	r5, r0
 80227a8:	4c13      	ldr	r4, [pc, #76]	@ (80227f8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x54>)
 80227aa:	e8d4 3f8f 	ldab	r3, [r4]
 80227ae:	07da      	lsls	r2, r3, #31
 80227b0:	d40b      	bmi.n	80227ca <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 80227b2:	4620      	mov	r0, r4
 80227b4:	f008 fa0d 	bl	802abd2 <__cxa_guard_acquire>
 80227b8:	b138      	cbz	r0, 80227ca <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 80227ba:	4620      	mov	r0, r4
 80227bc:	f008 fa15 	bl	802abea <__cxa_guard_release>
 80227c0:	4a0e      	ldr	r2, [pc, #56]	@ (80227fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80227c2:	490f      	ldr	r1, [pc, #60]	@ (8022800 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80227c4:	480f      	ldr	r0, [pc, #60]	@ (8022804 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80227c6:	f008 f9fd 	bl	802abc4 <__aeabi_atexit>
 80227ca:	4c0f      	ldr	r4, [pc, #60]	@ (8022808 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80227cc:	e8d4 3f8f 	ldab	r3, [r4]
 80227d0:	07db      	lsls	r3, r3, #31
 80227d2:	d40b      	bmi.n	80227ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 80227d4:	4620      	mov	r0, r4
 80227d6:	f008 f9fc 	bl	802abd2 <__cxa_guard_acquire>
 80227da:	b138      	cbz	r0, 80227ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 80227dc:	4620      	mov	r0, r4
 80227de:	f008 fa04 	bl	802abea <__cxa_guard_release>
 80227e2:	4a06      	ldr	r2, [pc, #24]	@ (80227fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80227e4:	4909      	ldr	r1, [pc, #36]	@ (802280c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80227e6:	480a      	ldr	r0, [pc, #40]	@ (8022810 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80227e8:	f008 f9ec 	bl	802abc4 <__aeabi_atexit>
 80227ec:	4b05      	ldr	r3, [pc, #20]	@ (8022804 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80227ee:	63eb      	str	r3, [r5, #60]	@ 0x3c
 80227f0:	4b07      	ldr	r3, [pc, #28]	@ (8022810 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80227f2:	642b      	str	r3, [r5, #64]	@ 0x40
 80227f4:	bd38      	pop	{r3, r4, r5, pc}
 80227f6:	bf00      	nop
 80227f8:	2005ba1c 	.word	0x2005ba1c
 80227fc:	20000000 	.word	0x20000000
 8022800:	0801e47b 	.word	0x0801e47b
 8022804:	20000078 	.word	0x20000078
 8022808:	2005ba20 	.word	0x2005ba20
 802280c:	0801e479 	.word	0x0801e479
 8022810:	2000007c 	.word	0x2000007c

08022814 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8022814:	b510      	push	{r4, lr}
 8022816:	4604      	mov	r4, r0
 8022818:	f7ff ff1c 	bl	8022654 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 802281c:	4620      	mov	r0, r4
 802281e:	f7ff ff89 	bl	8022734 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8022822:	4620      	mov	r0, r4
 8022824:	f7ff ff4e 	bl	80226c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8022828:	4620      	mov	r0, r4
 802282a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802282e:	f7ff bfb9 	b.w	80227a4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08022834 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8022834:	b538      	push	{r3, r4, r5, lr}
 8022836:	4605      	mov	r5, r0
 8022838:	4c13      	ldr	r4, [pc, #76]	@ (8022888 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x54>)
 802283a:	e8d4 3f8f 	ldab	r3, [r4]
 802283e:	07da      	lsls	r2, r3, #31
 8022840:	d40b      	bmi.n	802285a <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 8022842:	4620      	mov	r0, r4
 8022844:	f008 f9c5 	bl	802abd2 <__cxa_guard_acquire>
 8022848:	b138      	cbz	r0, 802285a <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 802284a:	4620      	mov	r0, r4
 802284c:	f008 f9cd 	bl	802abea <__cxa_guard_release>
 8022850:	4a0e      	ldr	r2, [pc, #56]	@ (802288c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8022852:	490f      	ldr	r1, [pc, #60]	@ (8022890 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022854:	480f      	ldr	r0, [pc, #60]	@ (8022894 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8022856:	f008 f9b5 	bl	802abc4 <__aeabi_atexit>
 802285a:	4c0f      	ldr	r4, [pc, #60]	@ (8022898 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802285c:	e8d4 3f8f 	ldab	r3, [r4]
 8022860:	07db      	lsls	r3, r3, #31
 8022862:	d40b      	bmi.n	802287c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 8022864:	4620      	mov	r0, r4
 8022866:	f008 f9b4 	bl	802abd2 <__cxa_guard_acquire>
 802286a:	b138      	cbz	r0, 802287c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 802286c:	4620      	mov	r0, r4
 802286e:	f008 f9bc 	bl	802abea <__cxa_guard_release>
 8022872:	4a06      	ldr	r2, [pc, #24]	@ (802288c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8022874:	4909      	ldr	r1, [pc, #36]	@ (802289c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8022876:	480a      	ldr	r0, [pc, #40]	@ (80228a0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8022878:	f008 f9a4 	bl	802abc4 <__aeabi_atexit>
 802287c:	4b05      	ldr	r3, [pc, #20]	@ (8022894 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 802287e:	666b      	str	r3, [r5, #100]	@ 0x64
 8022880:	4b07      	ldr	r3, [pc, #28]	@ (80228a0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8022882:	66ab      	str	r3, [r5, #104]	@ 0x68
 8022884:	bd38      	pop	{r3, r4, r5, pc}
 8022886:	bf00      	nop
 8022888:	2005ba04 	.word	0x2005ba04
 802288c:	20000000 	.word	0x20000000
 8022890:	0801e467 	.word	0x0801e467
 8022894:	20000060 	.word	0x20000060
 8022898:	2005ba08 	.word	0x2005ba08
 802289c:	0801e465 	.word	0x0801e465
 80228a0:	20000064 	.word	0x20000064

080228a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80228a4:	b538      	push	{r3, r4, r5, lr}
 80228a6:	4605      	mov	r5, r0
 80228a8:	4c13      	ldr	r4, [pc, #76]	@ (80228f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x54>)
 80228aa:	e8d4 3f8f 	ldab	r3, [r4]
 80228ae:	07da      	lsls	r2, r3, #31
 80228b0:	d40b      	bmi.n	80228ca <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 80228b2:	4620      	mov	r0, r4
 80228b4:	f008 f98d 	bl	802abd2 <__cxa_guard_acquire>
 80228b8:	b138      	cbz	r0, 80228ca <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 80228ba:	4620      	mov	r0, r4
 80228bc:	f008 f995 	bl	802abea <__cxa_guard_release>
 80228c0:	4a0e      	ldr	r2, [pc, #56]	@ (80228fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80228c2:	490f      	ldr	r1, [pc, #60]	@ (8022900 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80228c4:	480f      	ldr	r0, [pc, #60]	@ (8022904 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80228c6:	f008 f97d 	bl	802abc4 <__aeabi_atexit>
 80228ca:	4c0f      	ldr	r4, [pc, #60]	@ (8022908 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80228cc:	e8d4 3f8f 	ldab	r3, [r4]
 80228d0:	07db      	lsls	r3, r3, #31
 80228d2:	d40b      	bmi.n	80228ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 80228d4:	4620      	mov	r0, r4
 80228d6:	f008 f97c 	bl	802abd2 <__cxa_guard_acquire>
 80228da:	b138      	cbz	r0, 80228ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 80228dc:	4620      	mov	r0, r4
 80228de:	f008 f984 	bl	802abea <__cxa_guard_release>
 80228e2:	4a06      	ldr	r2, [pc, #24]	@ (80228fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80228e4:	4909      	ldr	r1, [pc, #36]	@ (802290c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80228e6:	480a      	ldr	r0, [pc, #40]	@ (8022910 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80228e8:	f008 f96c 	bl	802abc4 <__aeabi_atexit>
 80228ec:	4b05      	ldr	r3, [pc, #20]	@ (8022904 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80228ee:	65eb      	str	r3, [r5, #92]	@ 0x5c
 80228f0:	4b07      	ldr	r3, [pc, #28]	@ (8022910 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80228f2:	662b      	str	r3, [r5, #96]	@ 0x60
 80228f4:	bd38      	pop	{r3, r4, r5, pc}
 80228f6:	bf00      	nop
 80228f8:	2005b9dc 	.word	0x2005b9dc
 80228fc:	20000000 	.word	0x20000000
 8022900:	0801e46b 	.word	0x0801e46b
 8022904:	20000038 	.word	0x20000038
 8022908:	2005b9e0 	.word	0x2005b9e0
 802290c:	0801e469 	.word	0x0801e469
 8022910:	2000003c 	.word	0x2000003c

08022914 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8022914:	b510      	push	{r4, lr}
 8022916:	4604      	mov	r4, r0
 8022918:	f7ff ff8c 	bl	8022834 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 802291c:	4620      	mov	r0, r4
 802291e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022922:	f7ff bfbf 	b.w	80228a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08022928 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8022928:	b538      	push	{r3, r4, r5, lr}
 802292a:	4605      	mov	r5, r0
 802292c:	4c13      	ldr	r4, [pc, #76]	@ (802297c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x54>)
 802292e:	e8d4 3f8f 	ldab	r3, [r4]
 8022932:	07da      	lsls	r2, r3, #31
 8022934:	d40b      	bmi.n	802294e <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 8022936:	4620      	mov	r0, r4
 8022938:	f008 f94b 	bl	802abd2 <__cxa_guard_acquire>
 802293c:	b138      	cbz	r0, 802294e <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 802293e:	4620      	mov	r0, r4
 8022940:	f008 f953 	bl	802abea <__cxa_guard_release>
 8022944:	4a0e      	ldr	r2, [pc, #56]	@ (8022980 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8022946:	490f      	ldr	r1, [pc, #60]	@ (8022984 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022948:	480f      	ldr	r0, [pc, #60]	@ (8022988 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 802294a:	f008 f93b 	bl	802abc4 <__aeabi_atexit>
 802294e:	4c0f      	ldr	r4, [pc, #60]	@ (802298c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022950:	e8d4 3f8f 	ldab	r3, [r4]
 8022954:	07db      	lsls	r3, r3, #31
 8022956:	d40b      	bmi.n	8022970 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 8022958:	4620      	mov	r0, r4
 802295a:	f008 f93a 	bl	802abd2 <__cxa_guard_acquire>
 802295e:	b138      	cbz	r0, 8022970 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 8022960:	4620      	mov	r0, r4
 8022962:	f008 f942 	bl	802abea <__cxa_guard_release>
 8022966:	4a06      	ldr	r2, [pc, #24]	@ (8022980 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8022968:	4909      	ldr	r1, [pc, #36]	@ (8022990 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 802296a:	480a      	ldr	r0, [pc, #40]	@ (8022994 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 802296c:	f008 f92a 	bl	802abc4 <__aeabi_atexit>
 8022970:	4b05      	ldr	r3, [pc, #20]	@ (8022988 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8022972:	676b      	str	r3, [r5, #116]	@ 0x74
 8022974:	4b07      	ldr	r3, [pc, #28]	@ (8022994 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8022976:	67ab      	str	r3, [r5, #120]	@ 0x78
 8022978:	bd38      	pop	{r3, r4, r5, pc}
 802297a:	bf00      	nop
 802297c:	2005b9d4 	.word	0x2005b9d4
 8022980:	20000000 	.word	0x20000000
 8022984:	0801e45f 	.word	0x0801e45f
 8022988:	20000030 	.word	0x20000030
 802298c:	2005b9d8 	.word	0x2005b9d8
 8022990:	0801e45d 	.word	0x0801e45d
 8022994:	20000034 	.word	0x20000034

08022998 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8022998:	b538      	push	{r3, r4, r5, lr}
 802299a:	4605      	mov	r5, r0
 802299c:	4c13      	ldr	r4, [pc, #76]	@ (80229ec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x54>)
 802299e:	e8d4 3f8f 	ldab	r3, [r4]
 80229a2:	07da      	lsls	r2, r3, #31
 80229a4:	d40b      	bmi.n	80229be <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 80229a6:	4620      	mov	r0, r4
 80229a8:	f008 f913 	bl	802abd2 <__cxa_guard_acquire>
 80229ac:	b138      	cbz	r0, 80229be <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 80229ae:	4620      	mov	r0, r4
 80229b0:	f008 f91b 	bl	802abea <__cxa_guard_release>
 80229b4:	4a0e      	ldr	r2, [pc, #56]	@ (80229f0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80229b6:	490f      	ldr	r1, [pc, #60]	@ (80229f4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80229b8:	480f      	ldr	r0, [pc, #60]	@ (80229f8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80229ba:	f008 f903 	bl	802abc4 <__aeabi_atexit>
 80229be:	4c0f      	ldr	r4, [pc, #60]	@ (80229fc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80229c0:	e8d4 3f8f 	ldab	r3, [r4]
 80229c4:	07db      	lsls	r3, r3, #31
 80229c6:	d40b      	bmi.n	80229e0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 80229c8:	4620      	mov	r0, r4
 80229ca:	f008 f902 	bl	802abd2 <__cxa_guard_acquire>
 80229ce:	b138      	cbz	r0, 80229e0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 80229d0:	4620      	mov	r0, r4
 80229d2:	f008 f90a 	bl	802abea <__cxa_guard_release>
 80229d6:	4a06      	ldr	r2, [pc, #24]	@ (80229f0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80229d8:	4909      	ldr	r1, [pc, #36]	@ (8022a00 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80229da:	480a      	ldr	r0, [pc, #40]	@ (8022a04 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80229dc:	f008 f8f2 	bl	802abc4 <__aeabi_atexit>
 80229e0:	4b05      	ldr	r3, [pc, #20]	@ (80229f8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80229e2:	66eb      	str	r3, [r5, #108]	@ 0x6c
 80229e4:	4b07      	ldr	r3, [pc, #28]	@ (8022a04 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80229e6:	672b      	str	r3, [r5, #112]	@ 0x70
 80229e8:	bd38      	pop	{r3, r4, r5, pc}
 80229ea:	bf00      	nop
 80229ec:	2005b9cc 	.word	0x2005b9cc
 80229f0:	20000000 	.word	0x20000000
 80229f4:	0801e463 	.word	0x0801e463
 80229f8:	20000028 	.word	0x20000028
 80229fc:	2005b9d0 	.word	0x2005b9d0
 8022a00:	0801e461 	.word	0x0801e461
 8022a04:	2000002c 	.word	0x2000002c

08022a08 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8022a08:	b510      	push	{r4, lr}
 8022a0a:	4604      	mov	r4, r0
 8022a0c:	f7ff ff8c 	bl	8022928 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8022a10:	4620      	mov	r0, r4
 8022a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022a16:	f7ff bfbf 	b.w	8022998 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08022a1a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8022a1a:	b510      	push	{r4, lr}
 8022a1c:	4604      	mov	r4, r0
 8022a1e:	f7ff fff3 	bl	8022a08 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8022a22:	4620      	mov	r0, r4
 8022a24:	f7ff ff76 	bl	8022914 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8022a28:	4620      	mov	r0, r4
 8022a2a:	f7ff fe09 	bl	8022640 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8022a2e:	4620      	mov	r0, r4
 8022a30:	f7ff fd12 	bl	8022458 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8022a34:	4620      	mov	r0, r4
 8022a36:	f7ff fd89 	bl	802254c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8022a3a:	4620      	mov	r0, r4
 8022a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022a40:	f7ff bee8 	b.w	8022814 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08022a44 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8022a44:	b538      	push	{r3, r4, r5, lr}
 8022a46:	4605      	mov	r5, r0
 8022a48:	4c09      	ldr	r4, [pc, #36]	@ (8022a70 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x2c>)
 8022a4a:	e8d4 3f8f 	ldab	r3, [r4]
 8022a4e:	07db      	lsls	r3, r3, #31
 8022a50:	d40b      	bmi.n	8022a6a <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x26>
 8022a52:	4620      	mov	r0, r4
 8022a54:	f008 f8bd 	bl	802abd2 <__cxa_guard_acquire>
 8022a58:	b138      	cbz	r0, 8022a6a <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x26>
 8022a5a:	4620      	mov	r0, r4
 8022a5c:	f008 f8c5 	bl	802abea <__cxa_guard_release>
 8022a60:	4a04      	ldr	r2, [pc, #16]	@ (8022a74 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8022a62:	4905      	ldr	r1, [pc, #20]	@ (8022a78 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8022a64:	4805      	ldr	r0, [pc, #20]	@ (8022a7c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8022a66:	f008 f8ad 	bl	802abc4 <__aeabi_atexit>
 8022a6a:	4b04      	ldr	r3, [pc, #16]	@ (8022a7c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8022a6c:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8022a6e:	bd38      	pop	{r3, r4, r5, pc}
 8022a70:	2005b9c0 	.word	0x2005b9c0
 8022a74:	20000000 	.word	0x20000000
 8022a78:	0801e45b 	.word	0x0801e45b
 8022a7c:	20000020 	.word	0x20000020

08022a80 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 8022a80:	b538      	push	{r3, r4, r5, lr}
 8022a82:	4605      	mov	r5, r0
 8022a84:	4c0a      	ldr	r4, [pc, #40]	@ (8022ab0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 8022a86:	e8d4 3f8f 	ldab	r3, [r4]
 8022a8a:	07db      	lsls	r3, r3, #31
 8022a8c:	d40b      	bmi.n	8022aa6 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x26>
 8022a8e:	4620      	mov	r0, r4
 8022a90:	f008 f89f 	bl	802abd2 <__cxa_guard_acquire>
 8022a94:	b138      	cbz	r0, 8022aa6 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x26>
 8022a96:	4620      	mov	r0, r4
 8022a98:	f008 f8a7 	bl	802abea <__cxa_guard_release>
 8022a9c:	4a05      	ldr	r2, [pc, #20]	@ (8022ab4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 8022a9e:	4906      	ldr	r1, [pc, #24]	@ (8022ab8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 8022aa0:	4806      	ldr	r0, [pc, #24]	@ (8022abc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8022aa2:	f008 f88f 	bl	802abc4 <__aeabi_atexit>
 8022aa6:	4b05      	ldr	r3, [pc, #20]	@ (8022abc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8022aa8:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 8022aac:	bd38      	pop	{r3, r4, r5, pc}
 8022aae:	bf00      	nop
 8022ab0:	2005b9c4 	.word	0x2005b9c4
 8022ab4:	20000000 	.word	0x20000000
 8022ab8:	0801e459 	.word	0x0801e459
 8022abc:	20000024 	.word	0x20000024

08022ac0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 8022ac0:	b570      	push	{r4, r5, r6, lr}
 8022ac2:	4606      	mov	r6, r0
 8022ac4:	4d0b      	ldr	r5, [pc, #44]	@ (8022af4 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8022ac6:	e8d5 3f8f 	ldab	r3, [r5]
 8022aca:	f013 0f01 	tst.w	r3, #1
 8022ace:	4c0a      	ldr	r4, [pc, #40]	@ (8022af8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8022ad0:	d10d      	bne.n	8022aee <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x2e>
 8022ad2:	4628      	mov	r0, r5
 8022ad4:	f008 f87d 	bl	802abd2 <__cxa_guard_acquire>
 8022ad8:	b148      	cbz	r0, 8022aee <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x2e>
 8022ada:	4b08      	ldr	r3, [pc, #32]	@ (8022afc <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8022adc:	4628      	mov	r0, r5
 8022ade:	6023      	str	r3, [r4, #0]
 8022ae0:	f008 f883 	bl	802abea <__cxa_guard_release>
 8022ae4:	4a06      	ldr	r2, [pc, #24]	@ (8022b00 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8022ae6:	4907      	ldr	r1, [pc, #28]	@ (8022b04 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8022ae8:	4620      	mov	r0, r4
 8022aea:	f008 f86b 	bl	802abc4 <__aeabi_atexit>
 8022aee:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
 8022af2:	bd70      	pop	{r4, r5, r6, pc}
 8022af4:	2005b9c8 	.word	0x2005b9c8
 8022af8:	2005bb40 	.word	0x2005bb40
 8022afc:	0802e898 	.word	0x0802e898
 8022b00:	20000000 	.word	0x20000000
 8022b04:	0801e457 	.word	0x0801e457

08022b08 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 8022b08:	b510      	push	{r4, lr}
 8022b0a:	4604      	mov	r4, r0
 8022b0c:	f7ff ff9a 	bl	8022a44 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 8022b10:	4620      	mov	r0, r4
 8022b12:	f7ff ffb5 	bl	8022a80 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 8022b16:	4620      	mov	r0, r4
 8022b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022b1c:	f7ff bfd0 	b.w	8022ac0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

08022b20 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>:
 8022b20:	b570      	push	{r4, r5, r6, lr}
 8022b22:	4606      	mov	r6, r0
 8022b24:	4d0b      	ldr	r5, [pc, #44]	@ (8022b54 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x34>)
 8022b26:	e8d5 3f8f 	ldab	r3, [r5]
 8022b2a:	f013 0f01 	tst.w	r3, #1
 8022b2e:	4c0a      	ldr	r4, [pc, #40]	@ (8022b58 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x38>)
 8022b30:	d10d      	bne.n	8022b4e <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x2e>
 8022b32:	4628      	mov	r0, r5
 8022b34:	f008 f84d 	bl	802abd2 <__cxa_guard_acquire>
 8022b38:	b148      	cbz	r0, 8022b4e <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x2e>
 8022b3a:	4b08      	ldr	r3, [pc, #32]	@ (8022b5c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x3c>)
 8022b3c:	4628      	mov	r0, r5
 8022b3e:	6023      	str	r3, [r4, #0]
 8022b40:	f008 f853 	bl	802abea <__cxa_guard_release>
 8022b44:	4a06      	ldr	r2, [pc, #24]	@ (8022b60 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x40>)
 8022b46:	4907      	ldr	r1, [pc, #28]	@ (8022b64 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x44>)
 8022b48:	4620      	mov	r0, r4
 8022b4a:	f008 f83b 	bl	802abc4 <__aeabi_atexit>
 8022b4e:	f8c6 4088 	str.w	r4, [r6, #136]	@ 0x88
 8022b52:	bd70      	pop	{r4, r5, r6, pc}
 8022b54:	2005b9bc 	.word	0x2005b9bc
 8022b58:	2005ba3c 	.word	0x2005ba3c
 8022b5c:	0802e8b4 	.word	0x0802e8b4
 8022b60:	20000000 	.word	0x20000000
 8022b64:	0801e455 	.word	0x0801e455

08022b68 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8022b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b6c:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 8022b70:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
 8022b74:	fb05 4c0e 	mla	ip, r5, lr, r4
 8022b78:	2d00      	cmp	r5, #0
 8022b7a:	f9bd b028 	ldrsh.w	fp, [sp, #40]	@ 0x28
 8022b7e:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 8022b82:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 8022b86:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 8022b8a:	eb02 0a0c 	add.w	sl, r2, ip
 8022b8e:	8808      	ldrh	r0, [r1, #0]
 8022b90:	f2c0 80b0 	blt.w	8022cf4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8022b94:	45ab      	cmp	fp, r5
 8022b96:	f340 80ad 	ble.w	8022cf4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8022b9a:	2c00      	cmp	r4, #0
 8022b9c:	f2c0 80a8 	blt.w	8022cf0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8022ba0:	45a6      	cmp	lr, r4
 8022ba2:	f340 80a5 	ble.w	8022cf0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8022ba6:	f812 200c 	ldrb.w	r2, [r2, ip]
 8022baa:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8022bae:	1c62      	adds	r2, r4, #1
 8022bb0:	f100 80a3 	bmi.w	8022cfa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8022bb4:	4596      	cmp	lr, r2
 8022bb6:	f340 80a0 	ble.w	8022cfa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8022bba:	f1b9 0f00 	cmp.w	r9, #0
 8022bbe:	f000 809c 	beq.w	8022cfa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8022bc2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022bc6:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8022bca:	3501      	adds	r5, #1
 8022bcc:	f100 8099 	bmi.w	8022d02 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8022bd0:	45ab      	cmp	fp, r5
 8022bd2:	f340 8096 	ble.w	8022d02 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8022bd6:	2f00      	cmp	r7, #0
 8022bd8:	f000 8093 	beq.w	8022d02 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8022bdc:	2c00      	cmp	r4, #0
 8022bde:	f2c0 808e 	blt.w	8022cfe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8022be2:	45a6      	cmp	lr, r4
 8022be4:	f340 808b 	ble.w	8022cfe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8022be8:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8022bec:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8022bf0:	3401      	adds	r4, #1
 8022bf2:	f100 8089 	bmi.w	8022d08 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8022bf6:	45a6      	cmp	lr, r4
 8022bf8:	f340 8086 	ble.w	8022d08 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8022bfc:	f1b9 0f00 	cmp.w	r9, #0
 8022c00:	f000 8082 	beq.w	8022d08 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8022c04:	44d6      	add	lr, sl
 8022c06:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022c0a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8022c0e:	fb19 fe07 	smulbb	lr, r9, r7
 8022c12:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8022c16:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8022c1a:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8022c1e:	ea44 0808 	orr.w	r8, r4, r8
 8022c22:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8022c26:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8022c2a:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8022c2e:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8022c32:	ea44 0c0c 	orr.w	ip, r4, ip
 8022c36:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8022c3a:	fb04 f40c 	mul.w	r4, r4, ip
 8022c3e:	f1c7 0210 	rsb	r2, r7, #16
 8022c42:	eba2 0209 	sub.w	r2, r2, r9
 8022c46:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8022c4a:	fb02 4808 	mla	r8, r2, r8, r4
 8022c4e:	b2b4      	uxth	r4, r6
 8022c50:	43f6      	mvns	r6, r6
 8022c52:	041a      	lsls	r2, r3, #16
 8022c54:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8022c58:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8022c5c:	4313      	orrs	r3, r2
 8022c5e:	fb0e 8303 	mla	r3, lr, r3, r8
 8022c62:	042a      	lsls	r2, r5, #16
 8022c64:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8022c68:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8022c6c:	432a      	orrs	r2, r5
 8022c6e:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8022c72:	fb07 3202 	mla	r2, r7, r2, r3
 8022c76:	0d53      	lsrs	r3, r2, #21
 8022c78:	0952      	lsrs	r2, r2, #5
 8022c7a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022c7e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8022c82:	431a      	orrs	r2, r3
 8022c84:	b293      	uxth	r3, r2
 8022c86:	1202      	asrs	r2, r0, #8
 8022c88:	b2f6      	uxtb	r6, r6
 8022c8a:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8022c8e:	fb12 f206 	smulbb	r2, r2, r6
 8022c92:	10c7      	asrs	r7, r0, #3
 8022c94:	00c0      	lsls	r0, r0, #3
 8022c96:	b2c0      	uxtb	r0, r0
 8022c98:	121d      	asrs	r5, r3, #8
 8022c9a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8022c9e:	fb10 f006 	smulbb	r0, r0, r6
 8022ca2:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8022ca6:	fb17 f706 	smulbb	r7, r7, r6
 8022caa:	fb05 2504 	mla	r5, r5, r4, r2
 8022cae:	10da      	asrs	r2, r3, #3
 8022cb0:	00db      	lsls	r3, r3, #3
 8022cb2:	b2db      	uxtb	r3, r3
 8022cb4:	fb03 0004 	mla	r0, r3, r4, r0
 8022cb8:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8022cbc:	fb02 7204 	mla	r2, r2, r4, r7
 8022cc0:	b2ad      	uxth	r5, r5
 8022cc2:	b280      	uxth	r0, r0
 8022cc4:	1c6b      	adds	r3, r5, #1
 8022cc6:	b292      	uxth	r2, r2
 8022cc8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022ccc:	1c43      	adds	r3, r0, #1
 8022cce:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022cd2:	1c50      	adds	r0, r2, #1
 8022cd4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022cd8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8022cdc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022ce0:	0952      	lsrs	r2, r2, #5
 8022ce2:	432b      	orrs	r3, r5
 8022ce4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8022ce8:	4313      	orrs	r3, r2
 8022cea:	800b      	strh	r3, [r1, #0]
 8022cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022cf0:	4680      	mov	r8, r0
 8022cf2:	e75c      	b.n	8022bae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8022cf4:	4684      	mov	ip, r0
 8022cf6:	4680      	mov	r8, r0
 8022cf8:	e767      	b.n	8022bca <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8022cfa:	4684      	mov	ip, r0
 8022cfc:	e765      	b.n	8022bca <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8022cfe:	4605      	mov	r5, r0
 8022d00:	e776      	b.n	8022bf0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8022d02:	4603      	mov	r3, r0
 8022d04:	4605      	mov	r5, r0
 8022d06:	e782      	b.n	8022c0e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8022d08:	4603      	mov	r3, r0
 8022d0a:	e780      	b.n	8022c0e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08022d0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d10:	b099      	sub	sp, #100	@ 0x64
 8022d12:	9215      	str	r2, [sp, #84]	@ 0x54
 8022d14:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8022d16:	9016      	str	r0, [sp, #88]	@ 0x58
 8022d18:	9309      	str	r3, [sp, #36]	@ 0x24
 8022d1a:	6850      	ldr	r0, [r2, #4]
 8022d1c:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8022d20:	910c      	str	r1, [sp, #48]	@ 0x30
 8022d22:	930d      	str	r3, [sp, #52]	@ 0x34
 8022d24:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8022d28:	fb00 1303 	mla	r3, r0, r3, r1
 8022d2c:	e9dd a523 	ldrd	sl, r5, [sp, #140]	@ 0x8c
 8022d30:	6812      	ldr	r2, [r2, #0]
 8022d32:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8022d36:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022d38:	681b      	ldr	r3, [r3, #0]
 8022d3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022d3c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022d3e:	685e      	ldr	r6, [r3, #4]
 8022d40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022d42:	3604      	adds	r6, #4
 8022d44:	43db      	mvns	r3, r3
 8022d46:	b2db      	uxtb	r3, r3
 8022d48:	930a      	str	r3, [sp, #40]	@ 0x28
 8022d4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022d4c:	2b00      	cmp	r3, #0
 8022d4e:	dc03      	bgt.n	8022d58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8022d50:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022d52:	2b00      	cmp	r3, #0
 8022d54:	f340 8225 	ble.w	80231a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8022d58:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022d5a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022d5e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022d62:	1e48      	subs	r0, r1, #1
 8022d64:	1e57      	subs	r7, r2, #1
 8022d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022d68:	2b00      	cmp	r3, #0
 8022d6a:	f340 80e3 	ble.w	8022f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8022d6e:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8022d72:	ea4f 4325 	mov.w	r3, r5, asr #16
 8022d76:	d406      	bmi.n	8022d86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022d78:	4584      	cmp	ip, r0
 8022d7a:	da04      	bge.n	8022d86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022d7c:	2b00      	cmp	r3, #0
 8022d7e:	db02      	blt.n	8022d86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022d80:	42bb      	cmp	r3, r7
 8022d82:	f2c0 80d8 	blt.w	8022f36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022d86:	f11c 0c01 	adds.w	ip, ip, #1
 8022d8a:	f100 80c9 	bmi.w	8022f20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022d8e:	4561      	cmp	r1, ip
 8022d90:	f2c0 80c6 	blt.w	8022f20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022d94:	3301      	adds	r3, #1
 8022d96:	f100 80c3 	bmi.w	8022f20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022d9a:	429a      	cmp	r2, r3
 8022d9c:	f2c0 80c0 	blt.w	8022f20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022da0:	4647      	mov	r7, r8
 8022da2:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8022da6:	f1bb 0f00 	cmp.w	fp, #0
 8022daa:	f340 80e3 	ble.w	8022f74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8022dae:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8022db0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022db2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022db6:	ea5f 422a 	movs.w	r2, sl, asr #16
 8022dba:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022dbe:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8022dc2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022dc6:	689b      	ldr	r3, [r3, #8]
 8022dc8:	f100 8121 	bmi.w	802300e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022dcc:	f103 39ff 	add.w	r9, r3, #4294967295
 8022dd0:	454a      	cmp	r2, r9
 8022dd2:	f280 811c 	bge.w	802300e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022dd6:	f1bc 0f00 	cmp.w	ip, #0
 8022dda:	f2c0 8118 	blt.w	802300e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022dde:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022de2:	45cc      	cmp	ip, r9
 8022de4:	f280 8113 	bge.w	802300e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022de8:	b21b      	sxth	r3, r3
 8022dea:	fb0c 2203 	mla	r2, ip, r3, r2
 8022dee:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022df0:	eb04 0902 	add.w	r9, r4, r2
 8022df4:	5ca2      	ldrb	r2, [r4, r2]
 8022df6:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8022dfa:	2800      	cmp	r0, #0
 8022dfc:	f000 80fe 	beq.w	8022ffc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8022e00:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022e04:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8022e08:	9211      	str	r2, [sp, #68]	@ 0x44
 8022e0a:	b151      	cbz	r1, 8022e22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022e0c:	eb09 0203 	add.w	r2, r9, r3
 8022e10:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022e14:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022e18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022e1a:	7853      	ldrb	r3, [r2, #1]
 8022e1c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022e20:	9312      	str	r3, [sp, #72]	@ 0x48
 8022e22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022e24:	fb10 f201 	smulbb	r2, r0, r1
 8022e28:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022e2c:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8022e30:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8022e34:	ea4c 0c03 	orr.w	ip, ip, r3
 8022e38:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8022e3a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022e3c:	041b      	lsls	r3, r3, #16
 8022e3e:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8022e42:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8022e46:	10d2      	asrs	r2, r2, #3
 8022e48:	4323      	orrs	r3, r4
 8022e4a:	4353      	muls	r3, r2
 8022e4c:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8022e50:	fb09 330c 	mla	r3, r9, ip, r3
 8022e54:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8022e58:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8022e5c:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8022e60:	ea4c 0e0e 	orr.w	lr, ip, lr
 8022e64:	f1c1 0c10 	rsb	ip, r1, #16
 8022e68:	ebac 0c00 	sub.w	ip, ip, r0
 8022e6c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022e70:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8022e74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022e76:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8022e7a:	0418      	lsls	r0, r3, #16
 8022e7c:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8022e80:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8022e84:	4318      	orrs	r0, r3
 8022e86:	fb02 c200 	mla	r2, r2, r0, ip
 8022e8a:	8838      	ldrh	r0, [r7, #0]
 8022e8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022e8e:	0d53      	lsrs	r3, r2, #21
 8022e90:	1201      	asrs	r1, r0, #8
 8022e92:	0952      	lsrs	r2, r2, #5
 8022e94:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022e98:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8022e9c:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8022ea0:	431a      	orrs	r2, r3
 8022ea2:	fb11 f104 	smulbb	r1, r1, r4
 8022ea6:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8022eaa:	00c0      	lsls	r0, r0, #3
 8022eac:	b292      	uxth	r2, r2
 8022eae:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8022eb2:	b2c0      	uxtb	r0, r0
 8022eb4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8022eb8:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8022ebc:	fb1e fe04 	smulbb	lr, lr, r4
 8022ec0:	fb10 f004 	smulbb	r0, r0, r4
 8022ec4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8022ec8:	fb0c 1c03 	mla	ip, ip, r3, r1
 8022ecc:	10d1      	asrs	r1, r2, #3
 8022ece:	00d2      	lsls	r2, r2, #3
 8022ed0:	b2d2      	uxtb	r2, r2
 8022ed2:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8022ed6:	fb01 e103 	mla	r1, r1, r3, lr
 8022eda:	fb02 0303 	mla	r3, r2, r3, r0
 8022ede:	fa1f fc8c 	uxth.w	ip, ip
 8022ee2:	b29a      	uxth	r2, r3
 8022ee4:	f10c 0301 	add.w	r3, ip, #1
 8022ee8:	b289      	uxth	r1, r1
 8022eea:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022eee:	1c53      	adds	r3, r2, #1
 8022ef0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022ef4:	1c4a      	adds	r2, r1, #1
 8022ef6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022efa:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8022efe:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022f02:	0949      	lsrs	r1, r1, #5
 8022f04:	ea43 030c 	orr.w	r3, r3, ip
 8022f08:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8022f0c:	430b      	orrs	r3, r1
 8022f0e:	803b      	strh	r3, [r7, #0]
 8022f10:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8022f12:	3702      	adds	r7, #2
 8022f14:	449a      	add	sl, r3
 8022f16:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022f18:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022f1c:	441d      	add	r5, r3
 8022f1e:	e742      	b.n	8022da6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022f20:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8022f22:	f108 0802 	add.w	r8, r8, #2
 8022f26:	449a      	add	sl, r3
 8022f28:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022f2a:	441d      	add	r5, r3
 8022f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022f2e:	3b01      	subs	r3, #1
 8022f30:	9309      	str	r3, [sp, #36]	@ 0x24
 8022f32:	e718      	b.n	8022d66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8022f34:	d023      	beq.n	8022f7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8022f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022f38:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8022f3a:	3b01      	subs	r3, #1
 8022f3c:	fb00 a003 	mla	r0, r0, r3, sl
 8022f40:	1400      	asrs	r0, r0, #16
 8022f42:	f53f af2d 	bmi.w	8022da0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022f46:	3901      	subs	r1, #1
 8022f48:	4288      	cmp	r0, r1
 8022f4a:	f6bf af29 	bge.w	8022da0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022f4e:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8022f50:	fb01 5303 	mla	r3, r1, r3, r5
 8022f54:	141b      	asrs	r3, r3, #16
 8022f56:	f53f af23 	bmi.w	8022da0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022f5a:	3a01      	subs	r2, #1
 8022f5c:	4293      	cmp	r3, r2
 8022f5e:	f6bf af1f 	bge.w	8022da0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022f62:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8022f66:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 8022f6a:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 8022f6e:	f1be 0f00 	cmp.w	lr, #0
 8022f72:	dc6c      	bgt.n	802304e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8022f74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022f76:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022f7a:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8022f7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022f80:	2b00      	cmp	r3, #0
 8022f82:	f340 810e 	ble.w	80231a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8022f86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022f8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022f8e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022f92:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022f96:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022f9a:	eef0 6a62 	vmov.f32	s13, s5
 8022f9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022fa2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022fa6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022faa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022fae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022fb2:	ee16 aa90 	vmov	sl, s13
 8022fb6:	eef0 6a43 	vmov.f32	s13, s6
 8022fba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022fbe:	ee12 2a90 	vmov	r2, s5
 8022fc2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022fc6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022fc8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022fcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8022fd0:	ee13 2a10 	vmov	r2, s6
 8022fd4:	9325      	str	r3, [sp, #148]	@ 0x94
 8022fd6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022fd8:	ee16 5a90 	vmov	r5, s13
 8022fdc:	fb92 f3f3 	sdiv	r3, r2, r3
 8022fe0:	9326      	str	r3, [sp, #152]	@ 0x98
 8022fe2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022fe4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8022fe6:	3b01      	subs	r3, #1
 8022fe8:	930c      	str	r3, [sp, #48]	@ 0x30
 8022fea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022fec:	bf08      	it	eq
 8022fee:	4613      	moveq	r3, r2
 8022ff0:	eeb0 3a67 	vmov.f32	s6, s15
 8022ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8022ff6:	eef0 2a47 	vmov.f32	s5, s14
 8022ffa:	e6a6      	b.n	8022d4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8022ffc:	2900      	cmp	r1, #0
 8022ffe:	f43f af10 	beq.w	8022e22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023002:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023006:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802300a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802300c:	e709      	b.n	8022e22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802300e:	f112 0901 	adds.w	r9, r2, #1
 8023012:	f53f af7d 	bmi.w	8022f10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023016:	454b      	cmp	r3, r9
 8023018:	f6ff af7a 	blt.w	8022f10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802301c:	f11c 0901 	adds.w	r9, ip, #1
 8023020:	f53f af76 	bmi.w	8022f10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023024:	45ce      	cmp	lr, r9
 8023026:	f6ff af73 	blt.w	8022f10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802302a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802302c:	9202      	str	r2, [sp, #8]
 802302e:	b21b      	sxth	r3, r3
 8023030:	fa0f f28e 	sxth.w	r2, lr
 8023034:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023038:	e9cd c003 	strd	ip, r0, [sp, #12]
 802303c:	9201      	str	r2, [sp, #4]
 802303e:	9300      	str	r3, [sp, #0]
 8023040:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023042:	4633      	mov	r3, r6
 8023044:	4639      	mov	r1, r7
 8023046:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8023048:	f7ff fd8e 	bl	8022b68 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 802304c:	e760      	b.n	8022f10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802304e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023050:	ea4f 422a 	mov.w	r2, sl, asr #16
 8023054:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8023058:	1429      	asrs	r1, r5, #16
 802305a:	fb03 2101 	mla	r1, r3, r1, r2
 802305e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023060:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023062:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8023066:	440a      	add	r2, r1
 8023068:	5c61      	ldrb	r1, [r4, r1]
 802306a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802306e:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8023072:	f1bc 0f00 	cmp.w	ip, #0
 8023076:	f000 808c 	beq.w	8023192 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802307a:	7857      	ldrb	r7, [r2, #1]
 802307c:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8023080:	9413      	str	r4, [sp, #76]	@ 0x4c
 8023082:	b140      	cbz	r0, 8023096 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023084:	18d7      	adds	r7, r2, r3
 8023086:	5cd3      	ldrb	r3, [r2, r3]
 8023088:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802308c:	9310      	str	r3, [sp, #64]	@ 0x40
 802308e:	787b      	ldrb	r3, [r7, #1]
 8023090:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023094:	9314      	str	r3, [sp, #80]	@ 0x50
 8023096:	fb1c f200 	smulbb	r2, ip, r0
 802309a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802309c:	10d2      	asrs	r2, r2, #3
 802309e:	041f      	lsls	r7, r3, #16
 80230a0:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 80230a4:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80230a8:	431f      	orrs	r7, r3
 80230aa:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 80230ae:	9317      	str	r3, [sp, #92]	@ 0x5c
 80230b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80230b2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80230b4:	041b      	lsls	r3, r3, #16
 80230b6:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 80230ba:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80230be:	ea43 030b 	orr.w	r3, r3, fp
 80230c2:	4353      	muls	r3, r2
 80230c4:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80230c6:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80230ca:	fb04 3707 	mla	r7, r4, r7, r3
 80230ce:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80230d2:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 80230d6:	ea43 0b01 	orr.w	fp, r3, r1
 80230da:	f1c0 0110 	rsb	r1, r0, #16
 80230de:	eba1 0c0c 	sub.w	ip, r1, ip
 80230e2:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80230e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80230e8:	fb0c 770b 	mla	r7, ip, fp, r7
 80230ec:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80230f0:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 80230f4:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80230f8:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80230fc:	ea4c 0c0b 	orr.w	ip, ip, fp
 8023100:	fb02 770c 	mla	r7, r2, ip, r7
 8023104:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023106:	0d79      	lsrs	r1, r7, #21
 8023108:	8812      	ldrh	r2, [r2, #0]
 802310a:	097f      	lsrs	r7, r7, #5
 802310c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8023110:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8023114:	430f      	orrs	r7, r1
 8023116:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023118:	1211      	asrs	r1, r2, #8
 802311a:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802311e:	b2bb      	uxth	r3, r7
 8023120:	fb11 f104 	smulbb	r1, r1, r4
 8023124:	10d7      	asrs	r7, r2, #3
 8023126:	00d2      	lsls	r2, r2, #3
 8023128:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802312c:	b2d2      	uxtb	r2, r2
 802312e:	1218      	asrs	r0, r3, #8
 8023130:	fb17 f704 	smulbb	r7, r7, r4
 8023134:	fb12 f204 	smulbb	r2, r2, r4
 8023138:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802313c:	fb00 1009 	mla	r0, r0, r9, r1
 8023140:	10d9      	asrs	r1, r3, #3
 8023142:	00db      	lsls	r3, r3, #3
 8023144:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8023148:	b2db      	uxtb	r3, r3
 802314a:	fb01 7109 	mla	r1, r1, r9, r7
 802314e:	fb03 2309 	mla	r3, r3, r9, r2
 8023152:	b280      	uxth	r0, r0
 8023154:	b29b      	uxth	r3, r3
 8023156:	b289      	uxth	r1, r1
 8023158:	1c42      	adds	r2, r0, #1
 802315a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802315e:	1c4f      	adds	r7, r1, #1
 8023160:	1c5a      	adds	r2, r3, #1
 8023162:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023166:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 802316a:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802316e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023172:	0949      	lsrs	r1, r1, #5
 8023174:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023176:	4310      	orrs	r0, r2
 8023178:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802317c:	4308      	orrs	r0, r1
 802317e:	f823 0b02 	strh.w	r0, [r3], #2
 8023182:	930e      	str	r3, [sp, #56]	@ 0x38
 8023184:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023186:	f10e 3eff 	add.w	lr, lr, #4294967295
 802318a:	449a      	add	sl, r3
 802318c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802318e:	441d      	add	r5, r3
 8023190:	e6ed      	b.n	8022f6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8023192:	2800      	cmp	r0, #0
 8023194:	f43f af7f 	beq.w	8023096 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023198:	5cd3      	ldrb	r3, [r2, r3]
 802319a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802319e:	9310      	str	r3, [sp, #64]	@ 0x40
 80231a0:	e779      	b.n	8023096 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80231a2:	b019      	add	sp, #100	@ 0x64
 80231a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080231a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80231a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80231ac:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80231b0:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
 80231b4:	fb08 470e 	mla	r7, r8, lr, r4
 80231b8:	f1b8 0f00 	cmp.w	r8, #0
 80231bc:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 80231c0:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 80231c4:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 80231c8:	eb02 0907 	add.w	r9, r2, r7
 80231cc:	8808      	ldrh	r0, [r1, #0]
 80231ce:	db67      	blt.n	80232a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 80231d0:	45c2      	cmp	sl, r8
 80231d2:	dd65      	ble.n	80232a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 80231d4:	2c00      	cmp	r4, #0
 80231d6:	db61      	blt.n	802329c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 80231d8:	45a6      	cmp	lr, r4
 80231da:	dd5f      	ble.n	802329c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 80231dc:	5dd2      	ldrb	r2, [r2, r7]
 80231de:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80231e2:	1c62      	adds	r2, r4, #1
 80231e4:	d45f      	bmi.n	80232a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80231e6:	4596      	cmp	lr, r2
 80231e8:	dd5d      	ble.n	80232a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80231ea:	2d00      	cmp	r5, #0
 80231ec:	d05b      	beq.n	80232a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80231ee:	f899 2001 	ldrb.w	r2, [r9, #1]
 80231f2:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 80231f6:	f118 0801 	adds.w	r8, r8, #1
 80231fa:	d458      	bmi.n	80232ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 80231fc:	45c2      	cmp	sl, r8
 80231fe:	dd56      	ble.n	80232ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8023200:	2e00      	cmp	r6, #0
 8023202:	d054      	beq.n	80232ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8023204:	2c00      	cmp	r4, #0
 8023206:	db50      	blt.n	80232aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8023208:	45a6      	cmp	lr, r4
 802320a:	dd4e      	ble.n	80232aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 802320c:	f819 200e 	ldrb.w	r2, [r9, lr]
 8023210:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8023214:	3401      	adds	r4, #1
 8023216:	d407      	bmi.n	8023228 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8023218:	45a6      	cmp	lr, r4
 802321a:	dd05      	ble.n	8023228 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802321c:	b125      	cbz	r5, 8023228 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802321e:	44ce      	add	lr, r9
 8023220:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8023224:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8023228:	fb15 f406 	smulbb	r4, r5, r6
 802322c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8023230:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8023234:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8023238:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 802323c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8023240:	ea43 0c0c 	orr.w	ip, r3, ip
 8023244:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8023248:	f1c6 0310 	rsb	r3, r6, #16
 802324c:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8023250:	1b5b      	subs	r3, r3, r5
 8023252:	ea4e 0707 	orr.w	r7, lr, r7
 8023256:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 802325a:	437d      	muls	r5, r7
 802325c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8023260:	fb03 5c0c 	mla	ip, r3, ip, r5
 8023264:	0403      	lsls	r3, r0, #16
 8023266:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802326a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802326e:	4318      	orrs	r0, r3
 8023270:	fb04 c000 	mla	r0, r4, r0, ip
 8023274:	0413      	lsls	r3, r2, #16
 8023276:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802327a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802327e:	4313      	orrs	r3, r2
 8023280:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8023284:	fb06 0003 	mla	r0, r6, r3, r0
 8023288:	0d43      	lsrs	r3, r0, #21
 802328a:	0940      	lsrs	r0, r0, #5
 802328c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023290:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8023294:	4318      	orrs	r0, r3
 8023296:	8008      	strh	r0, [r1, #0]
 8023298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802329c:	4684      	mov	ip, r0
 802329e:	e7a0      	b.n	80231e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 80232a0:	4607      	mov	r7, r0
 80232a2:	4684      	mov	ip, r0
 80232a4:	e7a7      	b.n	80231f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 80232a6:	4607      	mov	r7, r0
 80232a8:	e7a5      	b.n	80231f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 80232aa:	4602      	mov	r2, r0
 80232ac:	e7b2      	b.n	8023214 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 80232ae:	4602      	mov	r2, r0
 80232b0:	e7ba      	b.n	8023228 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

080232b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80232b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80232b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232ba:	b093      	sub	sp, #76	@ 0x4c
 80232bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80232be:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80232c0:	9010      	str	r0, [sp, #64]	@ 0x40
 80232c2:	6850      	ldr	r0, [r2, #4]
 80232c4:	9108      	str	r1, [sp, #32]
 80232c6:	9306      	str	r3, [sp, #24]
 80232c8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80232cc:	fb00 1303 	mla	r3, r0, r3, r1
 80232d0:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 80232d4:	6812      	ldr	r2, [r2, #0]
 80232d6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80232da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80232dc:	681b      	ldr	r3, [r3, #0]
 80232de:	9307      	str	r3, [sp, #28]
 80232e0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80232e2:	685f      	ldr	r7, [r3, #4]
 80232e4:	3704      	adds	r7, #4
 80232e6:	9b08      	ldr	r3, [sp, #32]
 80232e8:	2b00      	cmp	r3, #0
 80232ea:	dc03      	bgt.n	80232f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80232ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80232ee:	2b00      	cmp	r3, #0
 80232f0:	f340 81b2 	ble.w	8023658 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80232f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80232f6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80232fa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80232fe:	1e48      	subs	r0, r1, #1
 8023300:	f102 3cff 	add.w	ip, r2, #4294967295
 8023304:	9b06      	ldr	r3, [sp, #24]
 8023306:	2b00      	cmp	r3, #0
 8023308:	f340 80a9 	ble.w	802345e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802330c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023310:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023314:	d406      	bmi.n	8023324 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023316:	4586      	cmp	lr, r0
 8023318:	da04      	bge.n	8023324 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802331a:	2b00      	cmp	r3, #0
 802331c:	db02      	blt.n	8023324 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802331e:	4563      	cmp	r3, ip
 8023320:	f2c0 809e 	blt.w	8023460 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8023324:	f11e 0e01 	adds.w	lr, lr, #1
 8023328:	f100 808f 	bmi.w	802344a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802332c:	4571      	cmp	r1, lr
 802332e:	f2c0 808c 	blt.w	802344a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023332:	3301      	adds	r3, #1
 8023334:	f100 8089 	bmi.w	802344a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023338:	429a      	cmp	r2, r3
 802333a:	f2c0 8086 	blt.w	802344a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802333e:	46c8      	mov	r8, r9
 8023340:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023344:	f1bb 0f00 	cmp.w	fp, #0
 8023348:	f340 80a6 	ble.w	8023498 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802334c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802334e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023350:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023354:	1422      	asrs	r2, r4, #16
 8023356:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802335a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802335e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023362:	689b      	ldr	r3, [r3, #8]
 8023364:	f100 80e3 	bmi.w	802352e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8023368:	f103 3aff 	add.w	sl, r3, #4294967295
 802336c:	4552      	cmp	r2, sl
 802336e:	f280 80de 	bge.w	802352e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8023372:	f1bc 0f00 	cmp.w	ip, #0
 8023376:	f2c0 80da 	blt.w	802352e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802337a:	f10e 3aff 	add.w	sl, lr, #4294967295
 802337e:	45d4      	cmp	ip, sl
 8023380:	f280 80d5 	bge.w	802352e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8023384:	b21b      	sxth	r3, r3
 8023386:	fb0c 2203 	mla	r2, ip, r3, r2
 802338a:	9d07      	ldr	r5, [sp, #28]
 802338c:	eb05 0a02 	add.w	sl, r5, r2
 8023390:	5caa      	ldrb	r2, [r5, r2]
 8023392:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8023396:	2800      	cmp	r0, #0
 8023398:	f000 80c0 	beq.w	802351c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 802339c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80233a0:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80233a4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80233a6:	b151      	cbz	r1, 80233be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80233a8:	eb0a 0203 	add.w	r2, sl, r3
 80233ac:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80233b0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80233b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80233b6:	7853      	ldrb	r3, [r2, #1]
 80233b8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80233bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80233be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80233c0:	fb10 f201 	smulbb	r2, r0, r1
 80233c4:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80233c8:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80233cc:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80233d0:	ea4c 0c03 	orr.w	ip, ip, r3
 80233d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80233d6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80233d8:	041b      	lsls	r3, r3, #16
 80233da:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80233de:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 80233e2:	10d2      	asrs	r2, r2, #3
 80233e4:	432b      	orrs	r3, r5
 80233e6:	4353      	muls	r3, r2
 80233e8:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 80233ec:	fb0a 330c 	mla	r3, sl, ip, r3
 80233f0:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80233f4:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80233f8:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80233fc:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023400:	f1c1 0c10 	rsb	ip, r1, #16
 8023404:	ebac 0c00 	sub.w	ip, ip, r0
 8023408:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802340c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8023410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023412:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023416:	0418      	lsls	r0, r3, #16
 8023418:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802341c:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023420:	4318      	orrs	r0, r3
 8023422:	fb02 c200 	mla	r2, r2, r0, ip
 8023426:	0d53      	lsrs	r3, r2, #21
 8023428:	0952      	lsrs	r2, r2, #5
 802342a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802342e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8023432:	431a      	orrs	r2, r3
 8023434:	f8a8 2000 	strh.w	r2, [r8]
 8023438:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802343a:	f108 0802 	add.w	r8, r8, #2
 802343e:	441c      	add	r4, r3
 8023440:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023442:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023446:	441e      	add	r6, r3
 8023448:	e77c      	b.n	8023344 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802344a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802344c:	f109 0902 	add.w	r9, r9, #2
 8023450:	441c      	add	r4, r3
 8023452:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023454:	441e      	add	r6, r3
 8023456:	9b06      	ldr	r3, [sp, #24]
 8023458:	3b01      	subs	r3, #1
 802345a:	9306      	str	r3, [sp, #24]
 802345c:	e752      	b.n	8023304 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802345e:	d020      	beq.n	80234a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8023460:	9b06      	ldr	r3, [sp, #24]
 8023462:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8023464:	3b01      	subs	r3, #1
 8023466:	fb00 4003 	mla	r0, r0, r3, r4
 802346a:	1400      	asrs	r0, r0, #16
 802346c:	f53f af67 	bmi.w	802333e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023470:	3901      	subs	r1, #1
 8023472:	4288      	cmp	r0, r1
 8023474:	f6bf af63 	bge.w	802333e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023478:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802347a:	fb01 6303 	mla	r3, r1, r3, r6
 802347e:	141b      	asrs	r3, r3, #16
 8023480:	f53f af5d 	bmi.w	802333e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023484:	3a01      	subs	r2, #1
 8023486:	4293      	cmp	r3, r2
 8023488:	f6bf af59 	bge.w	802333e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802348c:	46ca      	mov	sl, r9
 802348e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8023492:	f1b8 0f00 	cmp.w	r8, #0
 8023496:	dc67      	bgt.n	8023568 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8023498:	9b06      	ldr	r3, [sp, #24]
 802349a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802349e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80234a2:	9b08      	ldr	r3, [sp, #32]
 80234a4:	2b00      	cmp	r3, #0
 80234a6:	f340 80d7 	ble.w	8023658 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80234aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80234ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80234b2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80234b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80234ba:	eeb0 6a62 	vmov.f32	s12, s5
 80234be:	ee31 1a05 	vadd.f32	s2, s2, s10
 80234c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80234c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80234ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80234ce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80234d2:	ee16 4a10 	vmov	r4, s12
 80234d6:	eeb0 6a43 	vmov.f32	s12, s6
 80234da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80234de:	ee12 2a90 	vmov	r2, s5
 80234e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80234e6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80234e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80234ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80234f0:	ee13 2a10 	vmov	r2, s6
 80234f4:	931f      	str	r3, [sp, #124]	@ 0x7c
 80234f6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80234f8:	ee16 6a10 	vmov	r6, s12
 80234fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8023500:	9320      	str	r3, [sp, #128]	@ 0x80
 8023502:	9b08      	ldr	r3, [sp, #32]
 8023504:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023506:	3b01      	subs	r3, #1
 8023508:	9308      	str	r3, [sp, #32]
 802350a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802350c:	bf08      	it	eq
 802350e:	4613      	moveq	r3, r2
 8023510:	eeb0 3a67 	vmov.f32	s6, s15
 8023514:	9306      	str	r3, [sp, #24]
 8023516:	eef0 2a47 	vmov.f32	s5, s14
 802351a:	e6e4      	b.n	80232e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802351c:	2900      	cmp	r1, #0
 802351e:	f43f af4e 	beq.w	80233be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8023522:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8023526:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802352a:	9309      	str	r3, [sp, #36]	@ 0x24
 802352c:	e747      	b.n	80233be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802352e:	f112 0a01 	adds.w	sl, r2, #1
 8023532:	d481      	bmi.n	8023438 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023534:	4553      	cmp	r3, sl
 8023536:	f6ff af7f 	blt.w	8023438 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802353a:	f11c 0a01 	adds.w	sl, ip, #1
 802353e:	f53f af7b 	bmi.w	8023438 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023542:	45d6      	cmp	lr, sl
 8023544:	f6ff af78 	blt.w	8023438 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023548:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 802354c:	b21b      	sxth	r3, r3
 802354e:	fa0f f28e 	sxth.w	r2, lr
 8023552:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023556:	9201      	str	r2, [sp, #4]
 8023558:	9300      	str	r3, [sp, #0]
 802355a:	9a07      	ldr	r2, [sp, #28]
 802355c:	463b      	mov	r3, r7
 802355e:	4641      	mov	r1, r8
 8023560:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023562:	f7ff fe21 	bl	80231a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8023566:	e767      	b.n	8023438 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023568:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802356a:	1422      	asrs	r2, r4, #16
 802356c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8023570:	1431      	asrs	r1, r6, #16
 8023572:	fb03 2101 	mla	r1, r3, r1, r2
 8023576:	9d07      	ldr	r5, [sp, #28]
 8023578:	9a07      	ldr	r2, [sp, #28]
 802357a:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 802357e:	440a      	add	r2, r1
 8023580:	5c69      	ldrb	r1, [r5, r1]
 8023582:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023586:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 802358a:	f1be 0f00 	cmp.w	lr, #0
 802358e:	d05c      	beq.n	802364a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8023590:	f892 c001 	ldrb.w	ip, [r2, #1]
 8023594:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8023598:	950d      	str	r5, [sp, #52]	@ 0x34
 802359a:	b150      	cbz	r0, 80235b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802359c:	eb02 0c03 	add.w	ip, r2, r3
 80235a0:	5cd3      	ldrb	r3, [r2, r3]
 80235a2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80235a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80235a8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80235ac:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80235b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80235b2:	fb1e f200 	smulbb	r2, lr, r0
 80235b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80235b8:	10d2      	asrs	r2, r2, #3
 80235ba:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80235be:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80235c2:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80235c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80235ca:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 80235ce:	9311      	str	r3, [sp, #68]	@ 0x44
 80235d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80235d2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80235d4:	041b      	lsls	r3, r3, #16
 80235d6:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 80235da:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80235de:	ea43 030b 	orr.w	r3, r3, fp
 80235e2:	4353      	muls	r3, r2
 80235e4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80235e6:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80235ea:	fb05 3c0c 	mla	ip, r5, ip, r3
 80235ee:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80235f2:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 80235f6:	ea43 0b01 	orr.w	fp, r3, r1
 80235fa:	f1c0 0110 	rsb	r1, r0, #16
 80235fe:	eba1 0e0e 	sub.w	lr, r1, lr
 8023602:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8023606:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023608:	fb0e cc0b 	mla	ip, lr, fp, ip
 802360c:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8023610:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 8023614:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8023618:	ea4b 0e0e 	orr.w	lr, fp, lr
 802361c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8023620:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023624:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8023628:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802362c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023630:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8023634:	ea43 0c0c 	orr.w	ip, r3, ip
 8023638:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802363a:	f82a cb02 	strh.w	ip, [sl], #2
 802363e:	441c      	add	r4, r3
 8023640:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023642:	f108 38ff 	add.w	r8, r8, #4294967295
 8023646:	441e      	add	r6, r3
 8023648:	e723      	b.n	8023492 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 802364a:	2800      	cmp	r0, #0
 802364c:	d0b1      	beq.n	80235b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802364e:	5cd3      	ldrb	r3, [r2, r3]
 8023650:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023654:	930a      	str	r3, [sp, #40]	@ 0x28
 8023656:	e7ac      	b.n	80235b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8023658:	b013      	add	sp, #76	@ 0x4c
 802365a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802365e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 802365e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023662:	880d      	ldrh	r5, [r1, #0]
 8023664:	b087      	sub	sp, #28
 8023666:	10ef      	asrs	r7, r5, #3
 8023668:	ea4f 2a25 	mov.w	sl, r5, asr #8
 802366c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8023670:	00ed      	lsls	r5, r5, #3
 8023672:	9701      	str	r7, [sp, #4]
 8023674:	b2ed      	uxtb	r5, r5
 8023676:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	@ 0x40
 802367a:	9502      	str	r5, [sp, #8]
 802367c:	9d01      	ldr	r5, [sp, #4]
 802367e:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 8023682:	fb06 0709 	mla	r7, r6, r9, r0
 8023686:	9103      	str	r1, [sp, #12]
 8023688:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 802368c:	022d      	lsls	r5, r5, #8
 802368e:	9902      	ldr	r1, [sp, #8]
 8023690:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8023694:	430d      	orrs	r5, r1
 8023696:	2e00      	cmp	r6, #0
 8023698:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 802369c:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 80236a0:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 80236a4:	f89d 8058 	ldrb.w	r8, [sp, #88]	@ 0x58
 80236a8:	eb02 0c07 	add.w	ip, r2, r7
 80236ac:	9505      	str	r5, [sp, #20]
 80236ae:	f2c0 80b6 	blt.w	802381e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 80236b2:	45b3      	cmp	fp, r6
 80236b4:	f340 80b3 	ble.w	802381e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 80236b8:	2800      	cmp	r0, #0
 80236ba:	f2c0 80ae 	blt.w	802381a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80236be:	4581      	cmp	r9, r0
 80236c0:	f340 80ab 	ble.w	802381a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80236c4:	5dd7      	ldrb	r7, [r2, r7]
 80236c6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80236ca:	441f      	add	r7, r3
 80236cc:	1c42      	adds	r2, r0, #1
 80236ce:	f100 80a9 	bmi.w	8023824 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80236d2:	4591      	cmp	r9, r2
 80236d4:	f340 80a6 	ble.w	8023824 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80236d8:	2c00      	cmp	r4, #0
 80236da:	f000 80a3 	beq.w	8023824 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80236de:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80236e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80236e6:	441d      	add	r5, r3
 80236e8:	3601      	adds	r6, #1
 80236ea:	f100 809f 	bmi.w	802382c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80236ee:	45b3      	cmp	fp, r6
 80236f0:	f340 809c 	ble.w	802382c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80236f4:	f1be 0f00 	cmp.w	lr, #0
 80236f8:	f000 8098 	beq.w	802382c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80236fc:	2800      	cmp	r0, #0
 80236fe:	f2c0 8093 	blt.w	8023828 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8023702:	4581      	cmp	r9, r0
 8023704:	f340 8090 	ble.w	8023828 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8023708:	f81c 6009 	ldrb.w	r6, [ip, r9]
 802370c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023710:	441e      	add	r6, r3
 8023712:	3001      	adds	r0, #1
 8023714:	f100 808d 	bmi.w	8023832 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8023718:	4581      	cmp	r9, r0
 802371a:	f340 808a 	ble.w	8023832 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 802371e:	2c00      	cmp	r4, #0
 8023720:	f000 8087 	beq.w	8023832 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8023724:	44e1      	add	r9, ip
 8023726:	f899 2001 	ldrb.w	r2, [r9, #1]
 802372a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802372e:	4413      	add	r3, r2
 8023730:	b2a4      	uxth	r4, r4
 8023732:	fa1f fe8e 	uxth.w	lr, lr
 8023736:	fb04 fb0e 	mul.w	fp, r4, lr
 802373a:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 802373e:	fa1f f08e 	uxth.w	r0, lr
 8023742:	fa1f fe88 	uxth.w	lr, r8
 8023746:	ea6f 0808 	mvn.w	r8, r8
 802374a:	0124      	lsls	r4, r4, #4
 802374c:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 8023750:	eba4 040b 	sub.w	r4, r4, fp
 8023754:	b2a2      	uxth	r2, r4
 8023756:	78ac      	ldrb	r4, [r5, #2]
 8023758:	f897 c002 	ldrb.w	ip, [r7, #2]
 802375c:	4354      	muls	r4, r2
 802375e:	eba9 0900 	sub.w	r9, r9, r0
 8023762:	fa1f f989 	uxth.w	r9, r9
 8023766:	fb09 440c 	mla	r4, r9, ip, r4
 802376a:	f896 c002 	ldrb.w	ip, [r6, #2]
 802376e:	fa5f f888 	uxtb.w	r8, r8
 8023772:	fb00 440c 	mla	r4, r0, ip, r4
 8023776:	f893 c002 	ldrb.w	ip, [r3, #2]
 802377a:	fb1a fa08 	smulbb	sl, sl, r8
 802377e:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8023782:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023786:	fb0c ac0e 	mla	ip, ip, lr, sl
 802378a:	f895 a001 	ldrb.w	sl, [r5, #1]
 802378e:	782d      	ldrb	r5, [r5, #0]
 8023790:	fb02 fa0a 	mul.w	sl, r2, sl
 8023794:	436a      	muls	r2, r5
 8023796:	787c      	ldrb	r4, [r7, #1]
 8023798:	783f      	ldrb	r7, [r7, #0]
 802379a:	fb09 aa04 	mla	sl, r9, r4, sl
 802379e:	fb09 2207 	mla	r2, r9, r7, r2
 80237a2:	7874      	ldrb	r4, [r6, #1]
 80237a4:	7835      	ldrb	r5, [r6, #0]
 80237a6:	fb00 aa04 	mla	sl, r0, r4, sl
 80237aa:	fb00 2005 	mla	r0, r0, r5, r2
 80237ae:	785c      	ldrb	r4, [r3, #1]
 80237b0:	781b      	ldrb	r3, [r3, #0]
 80237b2:	fb0b a404 	mla	r4, fp, r4, sl
 80237b6:	9901      	ldr	r1, [sp, #4]
 80237b8:	fb0b 0b03 	mla	fp, fp, r3, r0
 80237bc:	9b02      	ldr	r3, [sp, #8]
 80237be:	fb11 fa08 	smulbb	sl, r1, r8
 80237c2:	fb13 f808 	smulbb	r8, r3, r8
 80237c6:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80237ca:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80237ce:	fb04 a40e 	mla	r4, r4, lr, sl
 80237d2:	fb0b 8e0e 	mla	lr, fp, lr, r8
 80237d6:	fa1f fc8c 	uxth.w	ip, ip
 80237da:	f10c 0301 	add.w	r3, ip, #1
 80237de:	fa1f fe8e 	uxth.w	lr, lr
 80237e2:	b2a4      	uxth	r4, r4
 80237e4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80237e8:	f40c 4378 	and.w	r3, ip, #63488	@ 0xf800
 80237ec:	f104 0a01 	add.w	sl, r4, #1
 80237f0:	f10e 0c01 	add.w	ip, lr, #1
 80237f4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80237f8:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80237fc:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023800:	0964      	lsrs	r4, r4, #5
 8023802:	ea4c 0c03 	orr.w	ip, ip, r3
 8023806:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802380a:	9b03      	ldr	r3, [sp, #12]
 802380c:	ea4c 0c04 	orr.w	ip, ip, r4
 8023810:	f8a3 c000 	strh.w	ip, [r3]
 8023814:	b007      	add	sp, #28
 8023816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802381a:	af05      	add	r7, sp, #20
 802381c:	e756      	b.n	80236cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 802381e:	ad05      	add	r5, sp, #20
 8023820:	462f      	mov	r7, r5
 8023822:	e761      	b.n	80236e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8023824:	ad05      	add	r5, sp, #20
 8023826:	e75f      	b.n	80236e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8023828:	ae05      	add	r6, sp, #20
 802382a:	e772      	b.n	8023712 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 802382c:	ab05      	add	r3, sp, #20
 802382e:	461e      	mov	r6, r3
 8023830:	e77e      	b.n	8023730 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8023832:	ab05      	add	r3, sp, #20
 8023834:	e77c      	b.n	8023730 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08023836 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023836:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802383a:	b095      	sub	sp, #84	@ 0x54
 802383c:	9212      	str	r2, [sp, #72]	@ 0x48
 802383e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8023840:	9013      	str	r0, [sp, #76]	@ 0x4c
 8023842:	9309      	str	r3, [sp, #36]	@ 0x24
 8023844:	6850      	ldr	r0, [r2, #4]
 8023846:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 802384a:	910e      	str	r1, [sp, #56]	@ 0x38
 802384c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802384e:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 8023852:	fb00 1303 	mla	r3, r0, r3, r1
 8023856:	6812      	ldr	r2, [r2, #0]
 8023858:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802385c:	930a      	str	r3, [sp, #40]	@ 0x28
 802385e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023860:	681b      	ldr	r3, [r3, #0]
 8023862:	930d      	str	r3, [sp, #52]	@ 0x34
 8023864:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023866:	685c      	ldr	r4, [r3, #4]
 8023868:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802386a:	3404      	adds	r4, #4
 802386c:	43db      	mvns	r3, r3
 802386e:	b2db      	uxtb	r3, r3
 8023870:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023872:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023874:	2b00      	cmp	r3, #0
 8023876:	dc03      	bgt.n	8023880 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8023878:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802387a:	2b00      	cmp	r3, #0
 802387c:	f340 8255 	ble.w	8023d2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8023880:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023882:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023886:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802388a:	1e48      	subs	r0, r1, #1
 802388c:	1e55      	subs	r5, r2, #1
 802388e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023890:	2b00      	cmp	r3, #0
 8023892:	f340 80f9 	ble.w	8023a88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8023896:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8023898:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802389a:	1436      	asrs	r6, r6, #16
 802389c:	ea4f 4323 	mov.w	r3, r3, asr #16
 80238a0:	d406      	bmi.n	80238b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80238a2:	4286      	cmp	r6, r0
 80238a4:	da04      	bge.n	80238b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80238a6:	2b00      	cmp	r3, #0
 80238a8:	db02      	blt.n	80238b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80238aa:	42ab      	cmp	r3, r5
 80238ac:	f2c0 80ed 	blt.w	8023a8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80238b0:	3601      	adds	r6, #1
 80238b2:	f100 80da 	bmi.w	8023a6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80238b6:	42b1      	cmp	r1, r6
 80238b8:	f2c0 80d7 	blt.w	8023a6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80238bc:	3301      	adds	r3, #1
 80238be:	f100 80d4 	bmi.w	8023a6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80238c2:	429a      	cmp	r2, r3
 80238c4:	f2c0 80d1 	blt.w	8023a6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80238c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80238ca:	9311      	str	r3, [sp, #68]	@ 0x44
 80238cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80238ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80238d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80238d2:	2b00      	cmp	r3, #0
 80238d4:	f340 80fa 	ble.w	8023acc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80238d8:	9826      	ldr	r0, [sp, #152]	@ 0x98
 80238da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80238dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80238de:	68c6      	ldr	r6, [r0, #12]
 80238e0:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80238e2:	141d      	asrs	r5, r3, #16
 80238e4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80238e8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80238ea:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80238ec:	1400      	asrs	r0, r0, #16
 80238ee:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80238f2:	6892      	ldr	r2, [r2, #8]
 80238f4:	f100 813e 	bmi.w	8023b74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80238f8:	1e57      	subs	r7, r2, #1
 80238fa:	42b8      	cmp	r0, r7
 80238fc:	f280 813a 	bge.w	8023b74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023900:	2d00      	cmp	r5, #0
 8023902:	f2c0 8137 	blt.w	8023b74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023906:	1e77      	subs	r7, r6, #1
 8023908:	42bd      	cmp	r5, r7
 802390a:	f280 8133 	bge.w	8023b74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802390e:	b212      	sxth	r2, r2
 8023910:	fb05 0002 	mla	r0, r5, r2, r0
 8023914:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8023916:	f815 a000 	ldrb.w	sl, [r5, r0]
 802391a:	182e      	adds	r6, r5, r0
 802391c:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8023920:	eb04 050a 	add.w	r5, r4, sl
 8023924:	2b00      	cmp	r3, #0
 8023926:	f000 8117 	beq.w	8023b58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802392a:	f896 c001 	ldrb.w	ip, [r6, #1]
 802392e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023932:	44a4      	add	ip, r4
 8023934:	2900      	cmp	r1, #0
 8023936:	f000 8117 	beq.w	8023b68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802393a:	18b0      	adds	r0, r6, r2
 802393c:	7840      	ldrb	r0, [r0, #1]
 802393e:	5cb2      	ldrb	r2, [r6, r2]
 8023940:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023944:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023948:	4422      	add	r2, r4
 802394a:	4420      	add	r0, r4
 802394c:	b29b      	uxth	r3, r3
 802394e:	b289      	uxth	r1, r1
 8023950:	fb03 f901 	mul.w	r9, r3, r1
 8023954:	011b      	lsls	r3, r3, #4
 8023956:	f89c 7002 	ldrb.w	r7, [ip, #2]
 802395a:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 802395e:	eba3 0309 	sub.w	r3, r3, r9
 8023962:	b29b      	uxth	r3, r3
 8023964:	435f      	muls	r7, r3
 8023966:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802396a:	b289      	uxth	r1, r1
 802396c:	f895 b002 	ldrb.w	fp, [r5, #2]
 8023970:	eba8 0801 	sub.w	r8, r8, r1
 8023974:	fa1f f888 	uxth.w	r8, r8
 8023978:	fb08 770b 	mla	r7, r8, fp, r7
 802397c:	f892 b002 	ldrb.w	fp, [r2, #2]
 8023980:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023982:	fb01 770b 	mla	r7, r1, fp, r7
 8023986:	f8b6 e000 	ldrh.w	lr, [r6]
 802398a:	f890 b002 	ldrb.w	fp, [r0, #2]
 802398e:	9310      	str	r3, [sp, #64]	@ 0x40
 8023990:	fb09 770b 	mla	r7, r9, fp, r7
 8023994:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023996:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 802399a:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 802399e:	fb1b fb03 	smulbb	fp, fp, r3
 80239a2:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 80239a6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80239aa:	fb07 b706 	mla	r7, r7, r6, fp
 80239ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80239b0:	f895 b001 	ldrb.w	fp, [r5, #1]
 80239b4:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80239b8:	f89c c000 	ldrb.w	ip, [ip]
 80239bc:	435d      	muls	r5, r3
 80239be:	fb08 550b 	mla	r5, r8, fp, r5
 80239c2:	f892 b001 	ldrb.w	fp, [r2, #1]
 80239c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80239c8:	fb01 550b 	mla	r5, r1, fp, r5
 80239cc:	f890 b001 	ldrb.w	fp, [r0, #1]
 80239d0:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80239d4:	fb09 550b 	mla	r5, r9, fp, r5
 80239d8:	ea4f 0bee 	mov.w	fp, lr, asr #3
 80239dc:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 80239e0:	fb1b fb03 	smulbb	fp, fp, r3
 80239e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80239e6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80239ea:	fb03 f30c 	mul.w	r3, r3, ip
 80239ee:	fb08 330a 	mla	r3, r8, sl, r3
 80239f2:	f892 c000 	ldrb.w	ip, [r2]
 80239f6:	fa5f fe8e 	uxtb.w	lr, lr
 80239fa:	fb01 330c 	mla	r3, r1, ip, r3
 80239fe:	f890 c000 	ldrb.w	ip, [r0]
 8023a02:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023a06:	fb09 3c0c 	mla	ip, r9, ip, r3
 8023a0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023a0c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023a10:	fb1e fe03 	smulbb	lr, lr, r3
 8023a14:	fb05 b506 	mla	r5, r5, r6, fp
 8023a18:	fb0c e606 	mla	r6, ip, r6, lr
 8023a1c:	b2bf      	uxth	r7, r7
 8023a1e:	1c7b      	adds	r3, r7, #1
 8023a20:	b2ad      	uxth	r5, r5
 8023a22:	b2b6      	uxth	r6, r6
 8023a24:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8023a28:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 8023a2c:	f105 0b01 	add.w	fp, r5, #1
 8023a30:	1c77      	adds	r7, r6, #1
 8023a32:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8023a36:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023a3a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023a3e:	096d      	lsrs	r5, r5, #5
 8023a40:	431f      	orrs	r7, r3
 8023a42:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8023a46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023a48:	433d      	orrs	r5, r7
 8023a4a:	801d      	strh	r5, [r3, #0]
 8023a4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023a4e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023a50:	3302      	adds	r3, #2
 8023a52:	930c      	str	r3, [sp, #48]	@ 0x30
 8023a54:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023a56:	4413      	add	r3, r2
 8023a58:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023a5a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8023a5c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023a5e:	4413      	add	r3, r2
 8023a60:	9320      	str	r3, [sp, #128]	@ 0x80
 8023a62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023a64:	3b01      	subs	r3, #1
 8023a66:	9311      	str	r3, [sp, #68]	@ 0x44
 8023a68:	e732      	b.n	80238d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8023a6a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023a6c:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8023a6e:	4433      	add	r3, r6
 8023a70:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023a72:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8023a74:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023a76:	4433      	add	r3, r6
 8023a78:	9320      	str	r3, [sp, #128]	@ 0x80
 8023a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023a7c:	3b01      	subs	r3, #1
 8023a7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8023a80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023a82:	3302      	adds	r3, #2
 8023a84:	930a      	str	r3, [sp, #40]	@ 0x28
 8023a86:	e702      	b.n	802388e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8023a88:	d027      	beq.n	8023ada <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8023a8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023a8c:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8023a8e:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8023a90:	3b01      	subs	r3, #1
 8023a92:	fb00 5003 	mla	r0, r0, r3, r5
 8023a96:	1400      	asrs	r0, r0, #16
 8023a98:	f53f af16 	bmi.w	80238c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023a9c:	3901      	subs	r1, #1
 8023a9e:	4288      	cmp	r0, r1
 8023aa0:	f6bf af12 	bge.w	80238c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023aa4:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8023aa6:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8023aa8:	fb01 0303 	mla	r3, r1, r3, r0
 8023aac:	141b      	asrs	r3, r3, #16
 8023aae:	f53f af0b 	bmi.w	80238c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023ab2:	3a01      	subs	r2, #1
 8023ab4:	4293      	cmp	r3, r2
 8023ab6:	f6bf af07 	bge.w	80238c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023abc:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 8023ac0:	9311      	str	r3, [sp, #68]	@ 0x44
 8023ac2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023ac4:	930c      	str	r3, [sp, #48]	@ 0x30
 8023ac6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023ac8:	2b00      	cmp	r3, #0
 8023aca:	dc70      	bgt.n	8023bae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8023acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ace:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023ad0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023ad4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023ad8:	930a      	str	r3, [sp, #40]	@ 0x28
 8023ada:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023adc:	2b00      	cmp	r3, #0
 8023ade:	f340 8124 	ble.w	8023d2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8023ae2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023ae6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023aea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023aee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023af2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023af6:	eef0 6a62 	vmov.f32	s13, s5
 8023afa:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023afe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023b02:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023b06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023b0a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023b0e:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 8023b12:	eef0 6a43 	vmov.f32	s13, s6
 8023b16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023b1a:	ee12 2a90 	vmov	r2, s5
 8023b1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023b22:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023b24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023b28:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b2c:	ee13 2a10 	vmov	r2, s6
 8023b30:	9321      	str	r3, [sp, #132]	@ 0x84
 8023b32:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023b34:	edcd 6a20 	vstr	s13, [sp, #128]	@ 0x80
 8023b38:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b3c:	9322      	str	r3, [sp, #136]	@ 0x88
 8023b3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023b40:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8023b42:	3b01      	subs	r3, #1
 8023b44:	930e      	str	r3, [sp, #56]	@ 0x38
 8023b46:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023b48:	bf08      	it	eq
 8023b4a:	4613      	moveq	r3, r2
 8023b4c:	eeb0 3a67 	vmov.f32	s6, s15
 8023b50:	9309      	str	r3, [sp, #36]	@ 0x24
 8023b52:	eef0 2a47 	vmov.f32	s5, s14
 8023b56:	e68c      	b.n	8023872 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8023b58:	b149      	cbz	r1, 8023b6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8023b5a:	4628      	mov	r0, r5
 8023b5c:	5cb2      	ldrb	r2, [r6, r2]
 8023b5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023b62:	4422      	add	r2, r4
 8023b64:	46ac      	mov	ip, r5
 8023b66:	e6f1      	b.n	802394c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023b68:	4628      	mov	r0, r5
 8023b6a:	462a      	mov	r2, r5
 8023b6c:	e6ee      	b.n	802394c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023b6e:	4628      	mov	r0, r5
 8023b70:	462a      	mov	r2, r5
 8023b72:	e7f7      	b.n	8023b64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8023b74:	1c47      	adds	r7, r0, #1
 8023b76:	f53f af69 	bmi.w	8023a4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023b7a:	42ba      	cmp	r2, r7
 8023b7c:	f6ff af66 	blt.w	8023a4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023b80:	1c6f      	adds	r7, r5, #1
 8023b82:	f53f af63 	bmi.w	8023a4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023b86:	42be      	cmp	r6, r7
 8023b88:	f6ff af60 	blt.w	8023a4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023b8c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8023b8e:	b236      	sxth	r6, r6
 8023b90:	b212      	sxth	r2, r2
 8023b92:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8023b96:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8023b9a:	9002      	str	r0, [sp, #8]
 8023b9c:	9200      	str	r2, [sp, #0]
 8023b9e:	9601      	str	r6, [sp, #4]
 8023ba0:	4623      	mov	r3, r4
 8023ba2:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 8023ba6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8023ba8:	f7ff fd59 	bl	802365e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8023bac:	e74e      	b.n	8023a4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023bae:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8023bb0:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8023bb2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023bb6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8023bb8:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8023bba:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023bbe:	142d      	asrs	r5, r5, #16
 8023bc0:	1400      	asrs	r0, r0, #16
 8023bc2:	fb02 5000 	mla	r0, r2, r0, r5
 8023bc6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8023bc8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023bca:	f815 9000 	ldrb.w	r9, [r5, r0]
 8023bce:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023bd2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8023bd6:	182e      	adds	r6, r5, r0
 8023bd8:	eb04 0509 	add.w	r5, r4, r9
 8023bdc:	2b00      	cmp	r3, #0
 8023bde:	f000 8096 	beq.w	8023d0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8023be2:	7877      	ldrb	r7, [r6, #1]
 8023be4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023be8:	4427      	add	r7, r4
 8023bea:	2900      	cmp	r1, #0
 8023bec:	f000 8097 	beq.w	8023d1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8023bf0:	18b0      	adds	r0, r6, r2
 8023bf2:	7840      	ldrb	r0, [r0, #1]
 8023bf4:	5cb2      	ldrb	r2, [r6, r2]
 8023bf6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023bfa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023bfe:	4422      	add	r2, r4
 8023c00:	4420      	add	r0, r4
 8023c02:	b29b      	uxth	r3, r3
 8023c04:	b289      	uxth	r1, r1
 8023c06:	fb03 f801 	mul.w	r8, r3, r1
 8023c0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023c0c:	011b      	lsls	r3, r3, #4
 8023c0e:	f8b6 c000 	ldrh.w	ip, [r6]
 8023c12:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8023c16:	78be      	ldrb	r6, [r7, #2]
 8023c18:	eba3 0308 	sub.w	r3, r3, r8
 8023c1c:	b29b      	uxth	r3, r3
 8023c1e:	435e      	muls	r6, r3
 8023c20:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8023c24:	b289      	uxth	r1, r1
 8023c26:	f895 b002 	ldrb.w	fp, [r5, #2]
 8023c2a:	ebae 0e01 	sub.w	lr, lr, r1
 8023c2e:	fa1f fe8e 	uxth.w	lr, lr
 8023c32:	fb0e 660b 	mla	r6, lr, fp, r6
 8023c36:	f892 b002 	ldrb.w	fp, [r2, #2]
 8023c3a:	9310      	str	r3, [sp, #64]	@ 0x40
 8023c3c:	fb01 660b 	mla	r6, r1, fp, r6
 8023c40:	f890 b002 	ldrb.w	fp, [r0, #2]
 8023c44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023c46:	fb08 660b 	mla	r6, r8, fp, r6
 8023c4a:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8023c4e:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8023c52:	fb1b fb03 	smulbb	fp, fp, r3
 8023c56:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023c5a:	fb06 b60a 	mla	r6, r6, sl, fp
 8023c5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023c60:	f895 b001 	ldrb.w	fp, [r5, #1]
 8023c64:	787d      	ldrb	r5, [r7, #1]
 8023c66:	783f      	ldrb	r7, [r7, #0]
 8023c68:	435d      	muls	r5, r3
 8023c6a:	fb0e 550b 	mla	r5, lr, fp, r5
 8023c6e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023c72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023c74:	fb01 550b 	mla	r5, r1, fp, r5
 8023c78:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023c7c:	f814 9009 	ldrb.w	r9, [r4, r9]
 8023c80:	fb08 550b 	mla	r5, r8, fp, r5
 8023c84:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8023c88:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8023c8c:	fb1b fb03 	smulbb	fp, fp, r3
 8023c90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023c92:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023c96:	437b      	muls	r3, r7
 8023c98:	fb0e 3309 	mla	r3, lr, r9, r3
 8023c9c:	7817      	ldrb	r7, [r2, #0]
 8023c9e:	fa5f fc8c 	uxtb.w	ip, ip
 8023ca2:	fb01 3307 	mla	r3, r1, r7, r3
 8023ca6:	7807      	ldrb	r7, [r0, #0]
 8023ca8:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023cac:	fb08 3707 	mla	r7, r8, r7, r3
 8023cb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023cb2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023cb6:	fb1c fc03 	smulbb	ip, ip, r3
 8023cba:	fb05 b50a 	mla	r5, r5, sl, fp
 8023cbe:	fb07 c70a 	mla	r7, r7, sl, ip
 8023cc2:	b2b6      	uxth	r6, r6
 8023cc4:	b2ad      	uxth	r5, r5
 8023cc6:	b2bf      	uxth	r7, r7
 8023cc8:	1c73      	adds	r3, r6, #1
 8023cca:	1c7a      	adds	r2, r7, #1
 8023ccc:	f105 0b01 	add.w	fp, r5, #1
 8023cd0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023cd4:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8023cd8:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023cdc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023ce0:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8023ce4:	096d      	lsrs	r5, r5, #5
 8023ce6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023ce8:	4316      	orrs	r6, r2
 8023cea:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8023cee:	432e      	orrs	r6, r5
 8023cf0:	f823 6b02 	strh.w	r6, [r3], #2
 8023cf4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023cf6:	930c      	str	r3, [sp, #48]	@ 0x30
 8023cf8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023cfa:	4413      	add	r3, r2
 8023cfc:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023cfe:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8023d00:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023d02:	4413      	add	r3, r2
 8023d04:	9320      	str	r3, [sp, #128]	@ 0x80
 8023d06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023d08:	3b01      	subs	r3, #1
 8023d0a:	9311      	str	r3, [sp, #68]	@ 0x44
 8023d0c:	e6db      	b.n	8023ac6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8023d0e:	b149      	cbz	r1, 8023d24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8023d10:	4628      	mov	r0, r5
 8023d12:	5cb2      	ldrb	r2, [r6, r2]
 8023d14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023d18:	4422      	add	r2, r4
 8023d1a:	462f      	mov	r7, r5
 8023d1c:	e771      	b.n	8023c02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8023d1e:	4628      	mov	r0, r5
 8023d20:	462a      	mov	r2, r5
 8023d22:	e76e      	b.n	8023c02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8023d24:	4628      	mov	r0, r5
 8023d26:	462a      	mov	r2, r5
 8023d28:	e7f7      	b.n	8023d1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023d2a:	b015      	add	sp, #84	@ 0x54
 8023d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023d30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8023d30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d34:	880f      	ldrh	r7, [r1, #0]
 8023d36:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8023d3a:	023c      	lsls	r4, r7, #8
 8023d3c:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	@ 0x38
 8023d40:	f404 0b78 	and.w	fp, r4, #16252928	@ 0xf80000
 8023d44:	fb05 ca0e 	mla	sl, r5, lr, ip
 8023d48:	017c      	lsls	r4, r7, #5
 8023d4a:	f404 447c 	and.w	r4, r4, #64512	@ 0xfc00
 8023d4e:	00ff      	lsls	r7, r7, #3
 8023d50:	ea4b 0404 	orr.w	r4, fp, r4
 8023d54:	b2ff      	uxtb	r7, r7
 8023d56:	4327      	orrs	r7, r4
 8023d58:	2d00      	cmp	r5, #0
 8023d5a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8023d5e:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 8023d62:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8023d66:	eb02 080a 	add.w	r8, r2, sl
 8023d6a:	9701      	str	r7, [sp, #4]
 8023d6c:	db7e      	blt.n	8023e6c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8023d6e:	45a9      	cmp	r9, r5
 8023d70:	dd7c      	ble.n	8023e6c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8023d72:	f1bc 0f00 	cmp.w	ip, #0
 8023d76:	db77      	blt.n	8023e68 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8023d78:	45e6      	cmp	lr, ip
 8023d7a:	dd75      	ble.n	8023e68 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8023d7c:	f812 700a 	ldrb.w	r7, [r2, sl]
 8023d80:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023d84:	441f      	add	r7, r3
 8023d86:	f11c 0201 	adds.w	r2, ip, #1
 8023d8a:	d472      	bmi.n	8023e72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8023d8c:	4596      	cmp	lr, r2
 8023d8e:	dd70      	ble.n	8023e72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8023d90:	2800      	cmp	r0, #0
 8023d92:	d06e      	beq.n	8023e72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8023d94:	f898 4001 	ldrb.w	r4, [r8, #1]
 8023d98:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023d9c:	441c      	add	r4, r3
 8023d9e:	3501      	adds	r5, #1
 8023da0:	d46b      	bmi.n	8023e7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8023da2:	45a9      	cmp	r9, r5
 8023da4:	dd69      	ble.n	8023e7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8023da6:	2e00      	cmp	r6, #0
 8023da8:	d067      	beq.n	8023e7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8023daa:	f1bc 0f00 	cmp.w	ip, #0
 8023dae:	db62      	blt.n	8023e76 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8023db0:	45e6      	cmp	lr, ip
 8023db2:	dd60      	ble.n	8023e76 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8023db4:	f818 500e 	ldrb.w	r5, [r8, lr]
 8023db8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023dbc:	441d      	add	r5, r3
 8023dbe:	f11c 0201 	adds.w	r2, ip, #1
 8023dc2:	d45d      	bmi.n	8023e80 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8023dc4:	4596      	cmp	lr, r2
 8023dc6:	dd5b      	ble.n	8023e80 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8023dc8:	2800      	cmp	r0, #0
 8023dca:	d059      	beq.n	8023e80 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8023dcc:	44c6      	add	lr, r8
 8023dce:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023dd2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023dd6:	4413      	add	r3, r2
 8023dd8:	b280      	uxth	r0, r0
 8023dda:	b2b2      	uxth	r2, r6
 8023ddc:	fb00 f602 	mul.w	r6, r0, r2
 8023de0:	0100      	lsls	r0, r0, #4
 8023de2:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8023de6:	f5c0 7880 	rsb	r8, r0, #256	@ 0x100
 8023dea:	1b80      	subs	r0, r0, r6
 8023dec:	fa1f fc82 	uxth.w	ip, r2
 8023df0:	b282      	uxth	r2, r0
 8023df2:	78a0      	ldrb	r0, [r4, #2]
 8023df4:	f897 e002 	ldrb.w	lr, [r7, #2]
 8023df8:	4350      	muls	r0, r2
 8023dfa:	eba8 080c 	sub.w	r8, r8, ip
 8023dfe:	fa1f f888 	uxth.w	r8, r8
 8023e02:	fb08 0e0e 	mla	lr, r8, lr, r0
 8023e06:	78a8      	ldrb	r0, [r5, #2]
 8023e08:	f897 9000 	ldrb.w	r9, [r7]
 8023e0c:	fb0c e000 	mla	r0, ip, r0, lr
 8023e10:	f893 e002 	ldrb.w	lr, [r3, #2]
 8023e14:	787f      	ldrb	r7, [r7, #1]
 8023e16:	fb06 0e0e 	mla	lr, r6, lr, r0
 8023e1a:	f40e 4078 	and.w	r0, lr, #63488	@ 0xf800
 8023e1e:	f894 e000 	ldrb.w	lr, [r4]
 8023e22:	fb02 fe0e 	mul.w	lr, r2, lr
 8023e26:	fb08 e909 	mla	r9, r8, r9, lr
 8023e2a:	f895 e000 	ldrb.w	lr, [r5]
 8023e2e:	fb0c 990e 	mla	r9, ip, lr, r9
 8023e32:	f893 e000 	ldrb.w	lr, [r3]
 8023e36:	785b      	ldrb	r3, [r3, #1]
 8023e38:	fb06 9e0e 	mla	lr, r6, lr, r9
 8023e3c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8023e40:	ea4e 0e00 	orr.w	lr, lr, r0
 8023e44:	7860      	ldrb	r0, [r4, #1]
 8023e46:	4350      	muls	r0, r2
 8023e48:	fb08 0007 	mla	r0, r8, r7, r0
 8023e4c:	786a      	ldrb	r2, [r5, #1]
 8023e4e:	fb0c 0202 	mla	r2, ip, r2, r0
 8023e52:	fb06 2303 	mla	r3, r6, r3, r2
 8023e56:	095b      	lsrs	r3, r3, #5
 8023e58:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023e5c:	ea4e 0303 	orr.w	r3, lr, r3
 8023e60:	800b      	strh	r3, [r1, #0]
 8023e62:	b003      	add	sp, #12
 8023e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e68:	af01      	add	r7, sp, #4
 8023e6a:	e78c      	b.n	8023d86 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8023e6c:	ac01      	add	r4, sp, #4
 8023e6e:	4627      	mov	r7, r4
 8023e70:	e795      	b.n	8023d9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8023e72:	ac01      	add	r4, sp, #4
 8023e74:	e793      	b.n	8023d9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8023e76:	ad01      	add	r5, sp, #4
 8023e78:	e7a1      	b.n	8023dbe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8023e7a:	ab01      	add	r3, sp, #4
 8023e7c:	461d      	mov	r5, r3
 8023e7e:	e7ab      	b.n	8023dd8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8023e80:	ab01      	add	r3, sp, #4
 8023e82:	e7a9      	b.n	8023dd8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08023e84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e88:	b08f      	sub	sp, #60	@ 0x3c
 8023e8a:	920c      	str	r2, [sp, #48]	@ 0x30
 8023e8c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8023e8e:	900d      	str	r0, [sp, #52]	@ 0x34
 8023e90:	6850      	ldr	r0, [r2, #4]
 8023e92:	910a      	str	r1, [sp, #40]	@ 0x28
 8023e94:	9306      	str	r3, [sp, #24]
 8023e96:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 8023e9a:	fb00 1303 	mla	r3, r0, r3, r1
 8023e9e:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 8023ea2:	6812      	ldr	r2, [r2, #0]
 8023ea4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023ea8:	9307      	str	r3, [sp, #28]
 8023eaa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023eac:	681b      	ldr	r3, [r3, #0]
 8023eae:	9308      	str	r3, [sp, #32]
 8023eb0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023eb2:	685c      	ldr	r4, [r3, #4]
 8023eb4:	3404      	adds	r4, #4
 8023eb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023eb8:	2b00      	cmp	r3, #0
 8023eba:	dc03      	bgt.n	8023ec4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8023ebc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023ebe:	2b00      	cmp	r3, #0
 8023ec0:	f340 81d6 	ble.w	8024270 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8023ec4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023ec6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023eca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023ece:	1e48      	subs	r0, r1, #1
 8023ed0:	1e56      	subs	r6, r2, #1
 8023ed2:	9b06      	ldr	r3, [sp, #24]
 8023ed4:	2b00      	cmp	r3, #0
 8023ed6:	f340 80b7 	ble.w	8024048 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8023eda:	ea5f 472b 	movs.w	r7, fp, asr #16
 8023ede:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023ee2:	d406      	bmi.n	8023ef2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023ee4:	4287      	cmp	r7, r0
 8023ee6:	da04      	bge.n	8023ef2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023ee8:	2b00      	cmp	r3, #0
 8023eea:	db02      	blt.n	8023ef2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023eec:	42b3      	cmp	r3, r6
 8023eee:	f2c0 80ac 	blt.w	802404a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8023ef2:	3701      	adds	r7, #1
 8023ef4:	f100 809d 	bmi.w	8024032 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8023ef8:	42b9      	cmp	r1, r7
 8023efa:	f2c0 809a 	blt.w	8024032 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8023efe:	3301      	adds	r3, #1
 8023f00:	f100 8097 	bmi.w	8024032 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8023f04:	429a      	cmp	r2, r3
 8023f06:	f2c0 8094 	blt.w	8024032 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8023f0a:	9b06      	ldr	r3, [sp, #24]
 8023f0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023f0e:	9b07      	ldr	r3, [sp, #28]
 8023f10:	9309      	str	r3, [sp, #36]	@ 0x24
 8023f12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023f14:	2b00      	cmp	r3, #0
 8023f16:	f340 80b5 	ble.w	8024084 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023f1a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8023f1c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8023f1e:	68c7      	ldr	r7, [r0, #12]
 8023f20:	ea5f 402b 	movs.w	r0, fp, asr #16
 8023f24:	ea4f 4625 	mov.w	r6, r5, asr #16
 8023f28:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8023f2c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023f30:	6892      	ldr	r2, [r2, #8]
 8023f32:	f100 80fb 	bmi.w	802412c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8023f36:	f102 3cff 	add.w	ip, r2, #4294967295
 8023f3a:	4560      	cmp	r0, ip
 8023f3c:	f280 80f6 	bge.w	802412c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8023f40:	2e00      	cmp	r6, #0
 8023f42:	f2c0 80f3 	blt.w	802412c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8023f46:	f107 3cff 	add.w	ip, r7, #4294967295
 8023f4a:	4566      	cmp	r6, ip
 8023f4c:	f280 80ee 	bge.w	802412c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8023f50:	b212      	sxth	r2, r2
 8023f52:	fb06 0002 	mla	r0, r6, r2, r0
 8023f56:	9e08      	ldr	r6, [sp, #32]
 8023f58:	1837      	adds	r7, r6, r0
 8023f5a:	5c30      	ldrb	r0, [r6, r0]
 8023f5c:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8023f60:	eb04 0c08 	add.w	ip, r4, r8
 8023f64:	2b00      	cmp	r3, #0
 8023f66:	f000 80d3 	beq.w	8024110 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8023f6a:	787e      	ldrb	r6, [r7, #1]
 8023f6c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023f70:	4426      	add	r6, r4
 8023f72:	2900      	cmp	r1, #0
 8023f74:	f000 80d4 	beq.w	8024120 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8023f78:	18b8      	adds	r0, r7, r2
 8023f7a:	7840      	ldrb	r0, [r0, #1]
 8023f7c:	5cba      	ldrb	r2, [r7, r2]
 8023f7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023f82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023f86:	4422      	add	r2, r4
 8023f88:	4420      	add	r0, r4
 8023f8a:	b29b      	uxth	r3, r3
 8023f8c:	b289      	uxth	r1, r1
 8023f8e:	fb03 f901 	mul.w	r9, r3, r1
 8023f92:	011b      	lsls	r3, r3, #4
 8023f94:	78b7      	ldrb	r7, [r6, #2]
 8023f96:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8023f9a:	eba3 0309 	sub.w	r3, r3, r9
 8023f9e:	b29b      	uxth	r3, r3
 8023fa0:	435f      	muls	r7, r3
 8023fa2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023fa6:	b289      	uxth	r1, r1
 8023fa8:	f89c a002 	ldrb.w	sl, [ip, #2]
 8023fac:	ebae 0e01 	sub.w	lr, lr, r1
 8023fb0:	fa1f fe8e 	uxth.w	lr, lr
 8023fb4:	fb0e 770a 	mla	r7, lr, sl, r7
 8023fb8:	f892 a002 	ldrb.w	sl, [r2, #2]
 8023fbc:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023fc0:	fb01 770a 	mla	r7, r1, sl, r7
 8023fc4:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023fc8:	fb09 7a0a 	mla	sl, r9, sl, r7
 8023fcc:	f814 7008 	ldrb.w	r7, [r4, r8]
 8023fd0:	f896 8000 	ldrb.w	r8, [r6]
 8023fd4:	7876      	ldrb	r6, [r6, #1]
 8023fd6:	fb03 f808 	mul.w	r8, r3, r8
 8023fda:	fb0e 8807 	mla	r8, lr, r7, r8
 8023fde:	7817      	ldrb	r7, [r2, #0]
 8023fe0:	4373      	muls	r3, r6
 8023fe2:	fb01 8807 	mla	r8, r1, r7, r8
 8023fe6:	7807      	ldrb	r7, [r0, #0]
 8023fe8:	fb0e 330c 	mla	r3, lr, ip, r3
 8023fec:	fb09 8707 	mla	r7, r9, r7, r8
 8023ff0:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 8023ff4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023ff8:	ea47 070a 	orr.w	r7, r7, sl
 8023ffc:	f892 a001 	ldrb.w	sl, [r2, #1]
 8024000:	fb01 310a 	mla	r1, r1, sl, r3
 8024004:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802400a:	fb09 1a0a 	mla	sl, r9, sl, r1
 802400e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8024012:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8024016:	ea47 070a 	orr.w	r7, r7, sl
 802401a:	801f      	strh	r7, [r3, #0]
 802401c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802401e:	3302      	adds	r3, #2
 8024020:	9309      	str	r3, [sp, #36]	@ 0x24
 8024022:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024024:	449b      	add	fp, r3
 8024026:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024028:	441d      	add	r5, r3
 802402a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802402c:	3b01      	subs	r3, #1
 802402e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024030:	e76f      	b.n	8023f12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024032:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024034:	449b      	add	fp, r3
 8024036:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024038:	441d      	add	r5, r3
 802403a:	9b06      	ldr	r3, [sp, #24]
 802403c:	3b01      	subs	r3, #1
 802403e:	9306      	str	r3, [sp, #24]
 8024040:	9b07      	ldr	r3, [sp, #28]
 8024042:	3302      	adds	r3, #2
 8024044:	9307      	str	r3, [sp, #28]
 8024046:	e744      	b.n	8023ed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8024048:	d023      	beq.n	8024092 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802404a:	9b06      	ldr	r3, [sp, #24]
 802404c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802404e:	3b01      	subs	r3, #1
 8024050:	fb00 b003 	mla	r0, r0, r3, fp
 8024054:	1400      	asrs	r0, r0, #16
 8024056:	f53f af58 	bmi.w	8023f0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802405a:	3901      	subs	r1, #1
 802405c:	4288      	cmp	r0, r1
 802405e:	f6bf af54 	bge.w	8023f0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8024062:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8024064:	fb01 5303 	mla	r3, r1, r3, r5
 8024068:	141b      	asrs	r3, r3, #16
 802406a:	f53f af4e 	bmi.w	8023f0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802406e:	3a01      	subs	r2, #1
 8024070:	4293      	cmp	r3, r2
 8024072:	f6bf af4a 	bge.w	8023f0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8024076:	9b06      	ldr	r3, [sp, #24]
 8024078:	9309      	str	r3, [sp, #36]	@ 0x24
 802407a:	9b07      	ldr	r3, [sp, #28]
 802407c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802407e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024080:	2b00      	cmp	r3, #0
 8024082:	dc70      	bgt.n	8024166 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8024084:	9b06      	ldr	r3, [sp, #24]
 8024086:	9a07      	ldr	r2, [sp, #28]
 8024088:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802408c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024090:	9307      	str	r3, [sp, #28]
 8024092:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024094:	2b00      	cmp	r3, #0
 8024096:	f340 80eb 	ble.w	8024270 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 802409a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802409e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80240a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80240a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80240aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80240ae:	eef0 6a62 	vmov.f32	s13, s5
 80240b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80240b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80240ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 80240be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80240c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80240c6:	ee16 ba90 	vmov	fp, s13
 80240ca:	eef0 6a43 	vmov.f32	s13, s6
 80240ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80240d2:	ee12 2a90 	vmov	r2, s5
 80240d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80240da:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80240dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80240e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80240e4:	ee13 2a10 	vmov	r2, s6
 80240e8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80240ea:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80240ec:	ee16 5a90 	vmov	r5, s13
 80240f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80240f4:	931c      	str	r3, [sp, #112]	@ 0x70
 80240f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80240f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80240fa:	3b01      	subs	r3, #1
 80240fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80240fe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024100:	bf08      	it	eq
 8024102:	4613      	moveq	r3, r2
 8024104:	eeb0 3a67 	vmov.f32	s6, s15
 8024108:	9306      	str	r3, [sp, #24]
 802410a:	eef0 2a47 	vmov.f32	s5, s14
 802410e:	e6d2      	b.n	8023eb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8024110:	b149      	cbz	r1, 8024126 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8024112:	4660      	mov	r0, ip
 8024114:	5cba      	ldrb	r2, [r7, r2]
 8024116:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802411a:	4422      	add	r2, r4
 802411c:	4666      	mov	r6, ip
 802411e:	e734      	b.n	8023f8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8024120:	4660      	mov	r0, ip
 8024122:	4662      	mov	r2, ip
 8024124:	e731      	b.n	8023f8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8024126:	4660      	mov	r0, ip
 8024128:	4662      	mov	r2, ip
 802412a:	e7f7      	b.n	802411c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 802412c:	f110 0c01 	adds.w	ip, r0, #1
 8024130:	f53f af74 	bmi.w	802401c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024134:	4562      	cmp	r2, ip
 8024136:	f6ff af71 	blt.w	802401c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802413a:	f116 0c01 	adds.w	ip, r6, #1
 802413e:	f53f af6d 	bmi.w	802401c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024142:	4567      	cmp	r7, ip
 8024144:	f6ff af6a 	blt.w	802401c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024148:	b23f      	sxth	r7, r7
 802414a:	b212      	sxth	r2, r2
 802414c:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8024150:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8024154:	9200      	str	r2, [sp, #0]
 8024156:	9701      	str	r7, [sp, #4]
 8024158:	4623      	mov	r3, r4
 802415a:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 802415e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024160:	f7ff fde6 	bl	8023d30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8024164:	e75a      	b.n	802401c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024166:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024168:	ea4f 462b 	mov.w	r6, fp, asr #16
 802416c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024170:	1428      	asrs	r0, r5, #16
 8024172:	fb02 6000 	mla	r0, r2, r0, r6
 8024176:	9e08      	ldr	r6, [sp, #32]
 8024178:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802417c:	f816 8000 	ldrb.w	r8, [r6, r0]
 8024180:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024184:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024188:	1837      	adds	r7, r6, r0
 802418a:	eb04 0c08 	add.w	ip, r4, r8
 802418e:	2b00      	cmp	r3, #0
 8024190:	d060      	beq.n	8024254 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 8024192:	787e      	ldrb	r6, [r7, #1]
 8024194:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024198:	4426      	add	r6, r4
 802419a:	2900      	cmp	r1, #0
 802419c:	d062      	beq.n	8024264 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 802419e:	18b8      	adds	r0, r7, r2
 80241a0:	7840      	ldrb	r0, [r0, #1]
 80241a2:	5cba      	ldrb	r2, [r7, r2]
 80241a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80241a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80241ac:	4422      	add	r2, r4
 80241ae:	4420      	add	r0, r4
 80241b0:	b29b      	uxth	r3, r3
 80241b2:	b289      	uxth	r1, r1
 80241b4:	fb03 f901 	mul.w	r9, r3, r1
 80241b8:	011b      	lsls	r3, r3, #4
 80241ba:	78b7      	ldrb	r7, [r6, #2]
 80241bc:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80241c0:	eba3 0309 	sub.w	r3, r3, r9
 80241c4:	b29b      	uxth	r3, r3
 80241c6:	435f      	muls	r7, r3
 80241c8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80241cc:	b289      	uxth	r1, r1
 80241ce:	f89c a002 	ldrb.w	sl, [ip, #2]
 80241d2:	ebae 0e01 	sub.w	lr, lr, r1
 80241d6:	fa1f fe8e 	uxth.w	lr, lr
 80241da:	fb0e 770a 	mla	r7, lr, sl, r7
 80241de:	f892 a002 	ldrb.w	sl, [r2, #2]
 80241e2:	f89c c001 	ldrb.w	ip, [ip, #1]
 80241e6:	fb01 770a 	mla	r7, r1, sl, r7
 80241ea:	f890 a002 	ldrb.w	sl, [r0, #2]
 80241ee:	fb09 7a0a 	mla	sl, r9, sl, r7
 80241f2:	f814 7008 	ldrb.w	r7, [r4, r8]
 80241f6:	f896 8000 	ldrb.w	r8, [r6]
 80241fa:	7876      	ldrb	r6, [r6, #1]
 80241fc:	fb03 f808 	mul.w	r8, r3, r8
 8024200:	fb0e 8807 	mla	r8, lr, r7, r8
 8024204:	7817      	ldrb	r7, [r2, #0]
 8024206:	4373      	muls	r3, r6
 8024208:	fb01 8807 	mla	r8, r1, r7, r8
 802420c:	7807      	ldrb	r7, [r0, #0]
 802420e:	fb0e 330c 	mla	r3, lr, ip, r3
 8024212:	fb09 8707 	mla	r7, r9, r7, r8
 8024216:	7856      	ldrb	r6, [r2, #1]
 8024218:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 802421c:	fb01 3306 	mla	r3, r1, r6, r3
 8024220:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024224:	ea47 070a 	orr.w	r7, r7, sl
 8024228:	f890 a001 	ldrb.w	sl, [r0, #1]
 802422c:	fb09 3a0a 	mla	sl, r9, sl, r3
 8024230:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8024234:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024236:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 802423a:	ea47 070a 	orr.w	r7, r7, sl
 802423e:	f823 7b02 	strh.w	r7, [r3], #2
 8024242:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024244:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024246:	449b      	add	fp, r3
 8024248:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802424a:	441d      	add	r5, r3
 802424c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802424e:	3b01      	subs	r3, #1
 8024250:	9309      	str	r3, [sp, #36]	@ 0x24
 8024252:	e714      	b.n	802407e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8024254:	b149      	cbz	r1, 802426a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8024256:	4660      	mov	r0, ip
 8024258:	5cba      	ldrb	r2, [r7, r2]
 802425a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802425e:	4422      	add	r2, r4
 8024260:	4666      	mov	r6, ip
 8024262:	e7a5      	b.n	80241b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8024264:	4660      	mov	r0, ip
 8024266:	4662      	mov	r2, ip
 8024268:	e7a2      	b.n	80241b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802426a:	4660      	mov	r0, ip
 802426c:	4662      	mov	r2, ip
 802426e:	e7f7      	b.n	8024260 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 8024270:	b00f      	add	sp, #60	@ 0x3c
 8024272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024276 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8024276:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802427a:	b085      	sub	sp, #20
 802427c:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 8024280:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	@ 0x40
 8024284:	9102      	str	r1, [sp, #8]
 8024286:	fb04 710c 	mla	r1, r4, ip, r7
 802428a:	2c00      	cmp	r4, #0
 802428c:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8024290:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 8024294:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8024298:	eb02 0e01 	add.w	lr, r2, r1
 802429c:	f2c0 8122 	blt.w	80244e4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80242a0:	45a0      	cmp	r8, r4
 80242a2:	f340 811f 	ble.w	80244e4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80242a6:	2f00      	cmp	r7, #0
 80242a8:	f2c0 811a 	blt.w	80244e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80242ac:	45bc      	cmp	ip, r7
 80242ae:	f340 8117 	ble.w	80244e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80242b2:	5c52      	ldrb	r2, [r2, r1]
 80242b4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80242b8:	1c7a      	adds	r2, r7, #1
 80242ba:	f100 8116 	bmi.w	80244ea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80242be:	4594      	cmp	ip, r2
 80242c0:	f340 8113 	ble.w	80244ea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80242c4:	2e00      	cmp	r6, #0
 80242c6:	f000 8112 	beq.w	80244ee <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 80242ca:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80242ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80242d2:	3401      	adds	r4, #1
 80242d4:	f100 810f 	bmi.w	80244f6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80242d8:	45a0      	cmp	r8, r4
 80242da:	f340 810c 	ble.w	80244f6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80242de:	2800      	cmp	r0, #0
 80242e0:	f000 810c 	beq.w	80244fc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 80242e4:	2f00      	cmp	r7, #0
 80242e6:	f2c0 8104 	blt.w	80244f2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80242ea:	45bc      	cmp	ip, r7
 80242ec:	f340 8101 	ble.w	80244f2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80242f0:	f81e 200c 	ldrb.w	r2, [lr, ip]
 80242f4:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80242f8:	3701      	adds	r7, #1
 80242fa:	f100 8102 	bmi.w	8024502 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80242fe:	45bc      	cmp	ip, r7
 8024300:	f340 80ff 	ble.w	8024502 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8024304:	2e00      	cmp	r6, #0
 8024306:	f000 80fe 	beq.w	8024506 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 802430a:	44f4      	add	ip, lr
 802430c:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8024310:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024314:	b2b6      	uxth	r6, r6
 8024316:	b280      	uxth	r0, r0
 8024318:	fb00 fe06 	mul.w	lr, r0, r6
 802431c:	0136      	lsls	r6, r6, #4
 802431e:	eba6 070e 	sub.w	r7, r6, lr
 8024322:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8024326:	b2bf      	uxth	r7, r7
 8024328:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 802432c:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8024330:	fb0a f607 	mul.w	r6, sl, r7
 8024334:	b280      	uxth	r0, r0
 8024336:	1a1b      	subs	r3, r3, r0
 8024338:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802433c:	b29b      	uxth	r3, r3
 802433e:	fb0b 6603 	mla	r6, fp, r3, r6
 8024342:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024346:	fb00 6609 	mla	r6, r0, r9, r6
 802434a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802434e:	fb0e 6608 	mla	r6, lr, r8, r6
 8024352:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024356:	9600      	str	r6, [sp, #0]
 8024358:	2e00      	cmp	r6, #0
 802435a:	f000 80be 	beq.w	80244da <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 802435e:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8024362:	fb0b fc0c 	mul.w	ip, fp, ip
 8024366:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802436a:	fb0b f505 	mul.w	r5, fp, r5
 802436e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8024372:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8024376:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802437a:	44dc      	add	ip, fp
 802437c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024380:	9501      	str	r5, [sp, #4]
 8024382:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8024386:	9503      	str	r5, [sp, #12]
 8024388:	9d01      	ldr	r5, [sp, #4]
 802438a:	9e02      	ldr	r6, [sp, #8]
 802438c:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8024390:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8024394:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 8024398:	fb0a fc0c 	mul.w	ip, sl, ip
 802439c:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80243a0:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80243a4:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80243a8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80243ac:	4465      	add	r5, ip
 80243ae:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80243b2:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80243b6:	fb09 fc0c 	mul.w	ip, r9, ip
 80243ba:	fb09 f904 	mul.w	r9, r9, r4
 80243be:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 80243c2:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80243c6:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 80243ca:	fb08 f404 	mul.w	r4, r8, r4
 80243ce:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80243d2:	fb08 f802 	mul.w	r8, r8, r2
 80243d6:	0a2d      	lsrs	r5, r5, #8
 80243d8:	0a22      	lsrs	r2, r4, #8
 80243da:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80243de:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80243e2:	437d      	muls	r5, r7
 80243e4:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80243e8:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80243ec:	4414      	add	r4, r2
 80243ee:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 80243f2:	fb0a fa01 	mul.w	sl, sl, r1
 80243f6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80243fa:	9a03      	ldr	r2, [sp, #12]
 80243fc:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 8024400:	fb02 5503 	mla	r5, r2, r3, r5
 8024404:	0a24      	lsrs	r4, r4, #8
 8024406:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802440a:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802440e:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8024412:	fb04 540e 	mla	r4, r4, lr, r5
 8024416:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802441a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802441e:	4461      	add	r1, ip
 8024420:	0a09      	lsrs	r1, r1, #8
 8024422:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8024426:	fb01 4100 	mla	r1, r1, r0, r4
 802442a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802442e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024432:	fb07 f70a 	mul.w	r7, r7, sl
 8024436:	0a09      	lsrs	r1, r1, #8
 8024438:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 802443c:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8024440:	fb03 7101 	mla	r1, r3, r1, r7
 8024444:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024448:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802444c:	fb0e 1e08 	mla	lr, lr, r8, r1
 8024450:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024454:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8024458:	fb00 e101 	mla	r1, r0, r1, lr
 802445c:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8024460:	9a00      	ldr	r2, [sp, #0]
 8024462:	b287      	uxth	r7, r0
 8024464:	437a      	muls	r2, r7
 8024466:	1c53      	adds	r3, r2, #1
 8024468:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802446c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8024470:	0a09      	lsrs	r1, r1, #8
 8024472:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8024476:	4321      	orrs	r1, r4
 8024478:	0c0a      	lsrs	r2, r1, #16
 802447a:	8836      	ldrh	r6, [r6, #0]
 802447c:	fb12 f207 	smulbb	r2, r2, r7
 8024480:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8024484:	b2c8      	uxtb	r0, r1
 8024486:	1235      	asrs	r5, r6, #8
 8024488:	fb14 f407 	smulbb	r4, r4, r7
 802448c:	fb10 f007 	smulbb	r0, r0, r7
 8024490:	b2db      	uxtb	r3, r3
 8024492:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8024496:	fb05 2503 	mla	r5, r5, r3, r2
 802449a:	10f2      	asrs	r2, r6, #3
 802449c:	00f6      	lsls	r6, r6, #3
 802449e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80244a2:	b2f6      	uxtb	r6, r6
 80244a4:	fb02 4203 	mla	r2, r2, r3, r4
 80244a8:	fb06 0303 	mla	r3, r6, r3, r0
 80244ac:	b2ad      	uxth	r5, r5
 80244ae:	b299      	uxth	r1, r3
 80244b0:	b294      	uxth	r4, r2
 80244b2:	1c6b      	adds	r3, r5, #1
 80244b4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80244b8:	1c62      	adds	r2, r4, #1
 80244ba:	1c4b      	adds	r3, r1, #1
 80244bc:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80244c0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80244c4:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80244c8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80244cc:	0952      	lsrs	r2, r2, #5
 80244ce:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80244d2:	432b      	orrs	r3, r5
 80244d4:	4313      	orrs	r3, r2
 80244d6:	9a02      	ldr	r2, [sp, #8]
 80244d8:	8013      	strh	r3, [r2, #0]
 80244da:	b005      	add	sp, #20
 80244dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80244e0:	2500      	movs	r5, #0
 80244e2:	e6e9      	b.n	80242b8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 80244e4:	2100      	movs	r1, #0
 80244e6:	460d      	mov	r5, r1
 80244e8:	e6f3      	b.n	80242d2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80244ea:	2100      	movs	r1, #0
 80244ec:	e6f1      	b.n	80242d2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80244ee:	4631      	mov	r1, r6
 80244f0:	e6ef      	b.n	80242d2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80244f2:	2400      	movs	r4, #0
 80244f4:	e700      	b.n	80242f8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 80244f6:	2200      	movs	r2, #0
 80244f8:	4614      	mov	r4, r2
 80244fa:	e70b      	b.n	8024314 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80244fc:	4602      	mov	r2, r0
 80244fe:	4604      	mov	r4, r0
 8024500:	e708      	b.n	8024314 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8024502:	2200      	movs	r2, #0
 8024504:	e706      	b.n	8024314 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8024506:	4632      	mov	r2, r6
 8024508:	e704      	b.n	8024314 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0802450a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802450a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802450e:	b09f      	sub	sp, #124	@ 0x7c
 8024510:	921b      	str	r2, [sp, #108]	@ 0x6c
 8024512:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8024514:	901d      	str	r0, [sp, #116]	@ 0x74
 8024516:	9309      	str	r3, [sp, #36]	@ 0x24
 8024518:	6850      	ldr	r0, [r2, #4]
 802451a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 802451e:	9119      	str	r1, [sp, #100]	@ 0x64
 8024520:	931c      	str	r3, [sp, #112]	@ 0x70
 8024522:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8024526:	fb00 1303 	mla	r3, r0, r3, r1
 802452a:	6812      	ldr	r2, [r2, #0]
 802452c:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 802452e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024532:	930c      	str	r3, [sp, #48]	@ 0x30
 8024534:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8024536:	681b      	ldr	r3, [r3, #0]
 8024538:	9312      	str	r3, [sp, #72]	@ 0x48
 802453a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802453c:	685e      	ldr	r6, [r3, #4]
 802453e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8024542:	3604      	adds	r6, #4
 8024544:	930d      	str	r3, [sp, #52]	@ 0x34
 8024546:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024548:	2b00      	cmp	r3, #0
 802454a:	dc03      	bgt.n	8024554 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802454c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802454e:	2b00      	cmp	r3, #0
 8024550:	f340 8387 	ble.w	8024c62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8024554:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8024556:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802455a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802455e:	1e48      	subs	r0, r1, #1
 8024560:	1e57      	subs	r7, r2, #1
 8024562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024564:	2b00      	cmp	r3, #0
 8024566:	f340 8194 	ble.w	8024892 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 802456a:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 802456c:	142b      	asrs	r3, r5, #16
 802456e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024572:	d406      	bmi.n	8024582 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024574:	4584      	cmp	ip, r0
 8024576:	da04      	bge.n	8024582 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024578:	2b00      	cmp	r3, #0
 802457a:	db02      	blt.n	8024582 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802457c:	42bb      	cmp	r3, r7
 802457e:	f2c0 8189 	blt.w	8024894 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024582:	f11c 0c01 	adds.w	ip, ip, #1
 8024586:	f100 8177 	bmi.w	8024878 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802458a:	4561      	cmp	r1, ip
 802458c:	f2c0 8174 	blt.w	8024878 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8024590:	3301      	adds	r3, #1
 8024592:	f100 8171 	bmi.w	8024878 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8024596:	429a      	cmp	r2, r3
 8024598:	f2c0 816e 	blt.w	8024878 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802459c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802459e:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80245a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80245a2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80245a4:	2b00      	cmp	r3, #0
 80245a6:	f340 8193 	ble.w	80248d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80245aa:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80245ac:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80245b0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80245b4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80245b6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80245ba:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80245be:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80245c0:	141b      	asrs	r3, r3, #16
 80245c2:	f100 81d6 	bmi.w	8024972 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80245c6:	f100 38ff 	add.w	r8, r0, #4294967295
 80245ca:	4543      	cmp	r3, r8
 80245cc:	f280 81d1 	bge.w	8024972 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80245d0:	f1bc 0f00 	cmp.w	ip, #0
 80245d4:	f2c0 81cd 	blt.w	8024972 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80245d8:	f10e 38ff 	add.w	r8, lr, #4294967295
 80245dc:	45c4      	cmp	ip, r8
 80245de:	f280 81c8 	bge.w	8024972 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80245e2:	b200      	sxth	r0, r0
 80245e4:	fb0c 3300 	mla	r3, ip, r0, r3
 80245e8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80245ea:	eb04 0803 	add.w	r8, r4, r3
 80245ee:	5ce3      	ldrb	r3, [r4, r3]
 80245f0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80245f4:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80245f8:	2a00      	cmp	r2, #0
 80245fa:	f000 81af 	beq.w	802495c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80245fe:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024602:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024606:	940e      	str	r4, [sp, #56]	@ 0x38
 8024608:	0e24      	lsrs	r4, r4, #24
 802460a:	9415      	str	r4, [sp, #84]	@ 0x54
 802460c:	b179      	cbz	r1, 802462e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 802460e:	eb08 0c00 	add.w	ip, r8, r0
 8024612:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024616:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802461a:	900a      	str	r0, [sp, #40]	@ 0x28
 802461c:	0e00      	lsrs	r0, r0, #24
 802461e:	9013      	str	r0, [sp, #76]	@ 0x4c
 8024620:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8024624:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024628:	900f      	str	r0, [sp, #60]	@ 0x3c
 802462a:	0e00      	lsrs	r0, r0, #24
 802462c:	9016      	str	r0, [sp, #88]	@ 0x58
 802462e:	b292      	uxth	r2, r2
 8024630:	b289      	uxth	r1, r1
 8024632:	fb02 f901 	mul.w	r9, r2, r1
 8024636:	0112      	lsls	r2, r2, #4
 8024638:	eba2 0809 	sub.w	r8, r2, r9
 802463c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802463e:	fa1f f888 	uxth.w	r8, r8
 8024642:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024646:	fb08 f000 	mul.w	r0, r8, r0
 802464a:	b289      	uxth	r1, r1
 802464c:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8024650:	1a52      	subs	r2, r2, r1
 8024652:	b292      	uxth	r2, r2
 8024654:	fb02 000e 	mla	r0, r2, lr, r0
 8024658:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802465a:	fb01 0004 	mla	r0, r1, r4, r0
 802465e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8024660:	fb09 0004 	mla	r0, r9, r4, r0
 8024664:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024668:	2800      	cmp	r0, #0
 802466a:	f000 80fa 	beq.w	8024862 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802466e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8024672:	d01b      	beq.n	80246ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024674:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8024678:	fb0e fa0a 	mul.w	sl, lr, sl
 802467c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024680:	fb0e fe03 	mul.w	lr, lr, r3
 8024684:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024688:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802468c:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8024690:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8024694:	4453      	add	r3, sl
 8024696:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802469a:	0a1b      	lsrs	r3, r3, #8
 802469c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80246a0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80246a4:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80246a8:	ea43 030c 	orr.w	r3, r3, ip
 80246ac:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80246ae:	2cff      	cmp	r4, #255	@ 0xff
 80246b0:	d021      	beq.n	80246f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80246b2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80246b4:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80246b8:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80246ba:	fb04 fb0b 	mul.w	fp, r4, fp
 80246be:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80246c0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80246c4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80246c8:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80246ca:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80246ce:	fb04 fa0a 	mul.w	sl, r4, sl
 80246d2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80246d6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80246da:	44de      	add	lr, fp
 80246dc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80246e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80246e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80246e8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80246ec:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80246f0:	ea4e 040a 	orr.w	r4, lr, sl
 80246f4:	940e      	str	r4, [sp, #56]	@ 0x38
 80246f6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80246f8:	2cff      	cmp	r4, #255	@ 0xff
 80246fa:	d021      	beq.n	8024740 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80246fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80246fe:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024702:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024704:	fb04 fb0b 	mul.w	fp, r4, fp
 8024708:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802470a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802470e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024712:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024714:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024718:	fb04 fa0a 	mul.w	sl, r4, sl
 802471c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024720:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024724:	44de      	add	lr, fp
 8024726:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802472a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802472e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024732:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024736:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802473a:	ea4e 040a 	orr.w	r4, lr, sl
 802473e:	940a      	str	r4, [sp, #40]	@ 0x28
 8024740:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8024742:	2cff      	cmp	r4, #255	@ 0xff
 8024744:	d021      	beq.n	802478a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8024746:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024748:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802474c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802474e:	fb04 fb0b 	mul.w	fp, r4, fp
 8024752:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024754:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024758:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802475c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802475e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024762:	fb04 fa0a 	mul.w	sl, r4, sl
 8024766:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802476a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802476e:	44de      	add	lr, fp
 8024770:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024774:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024778:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802477c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024780:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024784:	ea4e 040a 	orr.w	r4, lr, sl
 8024788:	940f      	str	r4, [sp, #60]	@ 0x3c
 802478a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802478c:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8024790:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024794:	fb08 fc0c 	mul.w	ip, r8, ip
 8024798:	fb02 cc0e 	mla	ip, r2, lr, ip
 802479c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802479e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80247a2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80247a6:	fb01 cc0e 	mla	ip, r1, lr, ip
 80247aa:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80247ac:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80247b0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80247b2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80247b6:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80247ba:	fb08 f80e 	mul.w	r8, r8, lr
 80247be:	fb02 8303 	mla	r3, r2, r3, r8
 80247c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80247c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80247c8:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80247cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80247ce:	fb01 330a 	mla	r3, r1, sl, r3
 80247d2:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 80247d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80247d8:	fb09 3901 	mla	r9, r9, r1, r3
 80247dc:	4342      	muls	r2, r0
 80247de:	1c50      	adds	r0, r2, #1
 80247e0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80247e4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80247e8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80247ec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80247f0:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80247f4:	ea4c 0c09 	orr.w	ip, ip, r9
 80247f8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80247fa:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80247fe:	883b      	ldrh	r3, [r7, #0]
 8024800:	fb12 f204 	smulbb	r2, r2, r4
 8024804:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8024808:	fa5f fc8c 	uxtb.w	ip, ip
 802480c:	1219      	asrs	r1, r3, #8
 802480e:	fb1c fc04 	smulbb	ip, ip, r4
 8024812:	b2c0      	uxtb	r0, r0
 8024814:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8024818:	fb01 2100 	mla	r1, r1, r0, r2
 802481c:	10da      	asrs	r2, r3, #3
 802481e:	00db      	lsls	r3, r3, #3
 8024820:	fb1e fe04 	smulbb	lr, lr, r4
 8024824:	b2db      	uxtb	r3, r3
 8024826:	fb03 c300 	mla	r3, r3, r0, ip
 802482a:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802482e:	b289      	uxth	r1, r1
 8024830:	fb02 e200 	mla	r2, r2, r0, lr
 8024834:	fa1f fc83 	uxth.w	ip, r3
 8024838:	1c4b      	adds	r3, r1, #1
 802483a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802483e:	f10c 0301 	add.w	r3, ip, #1
 8024842:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8024846:	b292      	uxth	r2, r2
 8024848:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802484c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024850:	430b      	orrs	r3, r1
 8024852:	1c51      	adds	r1, r2, #1
 8024854:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024858:	0952      	lsrs	r2, r2, #5
 802485a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802485e:	4313      	orrs	r3, r2
 8024860:	803b      	strh	r3, [r7, #0]
 8024862:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8024864:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8024866:	3702      	adds	r7, #2
 8024868:	441a      	add	r2, r3
 802486a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802486c:	9229      	str	r2, [sp, #164]	@ 0xa4
 802486e:	441d      	add	r5, r3
 8024870:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8024872:	3b01      	subs	r3, #1
 8024874:	931a      	str	r3, [sp, #104]	@ 0x68
 8024876:	e694      	b.n	80245a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8024878:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802487a:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 802487c:	441c      	add	r4, r3
 802487e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024880:	9429      	str	r4, [sp, #164]	@ 0xa4
 8024882:	441d      	add	r5, r3
 8024884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024886:	3b01      	subs	r3, #1
 8024888:	9309      	str	r3, [sp, #36]	@ 0x24
 802488a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802488c:	3302      	adds	r3, #2
 802488e:	930c      	str	r3, [sp, #48]	@ 0x30
 8024890:	e667      	b.n	8024562 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024892:	d024      	beq.n	80248de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8024894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024896:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8024898:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 802489a:	3b01      	subs	r3, #1
 802489c:	fb00 4003 	mla	r0, r0, r3, r4
 80248a0:	1400      	asrs	r0, r0, #16
 80248a2:	f53f ae7b 	bmi.w	802459c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80248a6:	3901      	subs	r1, #1
 80248a8:	4288      	cmp	r0, r1
 80248aa:	f6bf ae77 	bge.w	802459c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80248ae:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80248b0:	fb01 5303 	mla	r3, r1, r3, r5
 80248b4:	141b      	asrs	r3, r3, #16
 80248b6:	f53f ae71 	bmi.w	802459c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80248ba:	3a01      	subs	r2, #1
 80248bc:	4293      	cmp	r3, r2
 80248be:	f6bf ae6d 	bge.w	802459c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80248c2:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80248c6:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 80248ca:	f1bb 0f00 	cmp.w	fp, #0
 80248ce:	dc70      	bgt.n	80249b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 80248d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80248d2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80248d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80248d8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80248dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80248de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80248e0:	2b00      	cmp	r3, #0
 80248e2:	f340 81be 	ble.w	8024c62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 80248e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80248ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 80248ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80248f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80248f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80248fa:	eef0 6a62 	vmov.f32	s13, s5
 80248fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024902:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024906:	ee61 7a27 	vmul.f32	s15, s2, s15
 802490a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802490e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024912:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 8024916:	eef0 6a43 	vmov.f32	s13, s6
 802491a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802491e:	ee12 2a90 	vmov	r2, s5
 8024922:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024926:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024928:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802492c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024930:	ee13 2a10 	vmov	r2, s6
 8024934:	932b      	str	r3, [sp, #172]	@ 0xac
 8024936:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024938:	ee16 5a90 	vmov	r5, s13
 802493c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024940:	932c      	str	r3, [sp, #176]	@ 0xb0
 8024942:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024944:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024946:	3b01      	subs	r3, #1
 8024948:	9319      	str	r3, [sp, #100]	@ 0x64
 802494a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802494c:	bf08      	it	eq
 802494e:	4613      	moveq	r3, r2
 8024950:	eeb0 3a67 	vmov.f32	s6, s15
 8024954:	9309      	str	r3, [sp, #36]	@ 0x24
 8024956:	eef0 2a47 	vmov.f32	s5, s14
 802495a:	e5f4      	b.n	8024546 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802495c:	2900      	cmp	r1, #0
 802495e:	f43f ae66 	beq.w	802462e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8024962:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024966:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802496a:	900a      	str	r0, [sp, #40]	@ 0x28
 802496c:	0e00      	lsrs	r0, r0, #24
 802496e:	9013      	str	r0, [sp, #76]	@ 0x4c
 8024970:	e65d      	b.n	802462e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8024972:	f113 0801 	adds.w	r8, r3, #1
 8024976:	f53f af74 	bmi.w	8024862 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802497a:	4540      	cmp	r0, r8
 802497c:	f6ff af71 	blt.w	8024862 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024980:	f11c 0801 	adds.w	r8, ip, #1
 8024984:	f53f af6d 	bmi.w	8024862 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024988:	45c6      	cmp	lr, r8
 802498a:	f6ff af6a 	blt.w	8024862 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802498e:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8024990:	9302      	str	r3, [sp, #8]
 8024992:	b200      	sxth	r0, r0
 8024994:	fa0f f38e 	sxth.w	r3, lr
 8024998:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802499c:	e9cd c203 	strd	ip, r2, [sp, #12]
 80249a0:	9301      	str	r3, [sp, #4]
 80249a2:	9000      	str	r0, [sp, #0]
 80249a4:	4633      	mov	r3, r6
 80249a6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80249a8:	4639      	mov	r1, r7
 80249aa:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80249ac:	f7ff fc63 	bl	8024276 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80249b0:	e757      	b.n	8024862 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80249b2:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80249b4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80249b6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80249ba:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80249bc:	1427      	asrs	r7, r4, #16
 80249be:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80249c2:	142b      	asrs	r3, r5, #16
 80249c4:	fb01 7303 	mla	r3, r1, r3, r7
 80249c8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80249ca:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80249ce:	18e7      	adds	r7, r4, r3
 80249d0:	5ce3      	ldrb	r3, [r4, r3]
 80249d2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80249d6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80249da:	2a00      	cmp	r2, #0
 80249dc:	f000 8137 	beq.w	8024c4e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 80249e0:	f897 e001 	ldrb.w	lr, [r7, #1]
 80249e4:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80249e8:	9410      	str	r4, [sp, #64]	@ 0x40
 80249ea:	0e24      	lsrs	r4, r4, #24
 80249ec:	9417      	str	r4, [sp, #92]	@ 0x5c
 80249ee:	b170      	cbz	r0, 8024a0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80249f0:	eb07 0e01 	add.w	lr, r7, r1
 80249f4:	5c79      	ldrb	r1, [r7, r1]
 80249f6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80249fa:	910b      	str	r1, [sp, #44]	@ 0x2c
 80249fc:	0e09      	lsrs	r1, r1, #24
 80249fe:	9114      	str	r1, [sp, #80]	@ 0x50
 8024a00:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8024a04:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024a08:	9111      	str	r1, [sp, #68]	@ 0x44
 8024a0a:	0e09      	lsrs	r1, r1, #24
 8024a0c:	9118      	str	r1, [sp, #96]	@ 0x60
 8024a0e:	b292      	uxth	r2, r2
 8024a10:	b280      	uxth	r0, r0
 8024a12:	fb02 f800 	mul.w	r8, r2, r0
 8024a16:	0112      	lsls	r2, r2, #4
 8024a18:	eba2 0e08 	sub.w	lr, r2, r8
 8024a1c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024a1e:	fa1f fe8e 	uxth.w	lr, lr
 8024a22:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8024a26:	fb0e f101 	mul.w	r1, lr, r1
 8024a2a:	b280      	uxth	r0, r0
 8024a2c:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8024a30:	1a12      	subs	r2, r2, r0
 8024a32:	b292      	uxth	r2, r2
 8024a34:	fb02 110c 	mla	r1, r2, ip, r1
 8024a38:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024a3a:	fb00 1104 	mla	r1, r0, r4, r1
 8024a3e:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8024a40:	fb08 1104 	mla	r1, r8, r4, r1
 8024a44:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024a48:	2900      	cmp	r1, #0
 8024a4a:	f000 80f5 	beq.w	8024c38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8024a4e:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8024a52:	d019      	beq.n	8024a88 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8024a54:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8024a58:	fb0c fa0a 	mul.w	sl, ip, sl
 8024a5c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024a60:	fb0c fc03 	mul.w	ip, ip, r3
 8024a64:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024a68:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024a6c:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8024a70:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8024a74:	4453      	add	r3, sl
 8024a76:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024a7a:	0a1b      	lsrs	r3, r3, #8
 8024a7c:	0a3f      	lsrs	r7, r7, #8
 8024a7e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024a82:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8024a86:	433b      	orrs	r3, r7
 8024a88:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8024a8a:	2cff      	cmp	r4, #255	@ 0xff
 8024a8c:	d020      	beq.n	8024ad0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8024a8e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024a90:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024a94:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8024a96:	4367      	muls	r7, r4
 8024a98:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024a9a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024a9e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024aa2:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8024aa4:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8024aa8:	fb04 fa0a 	mul.w	sl, r4, sl
 8024aac:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024ab0:	44bc      	add	ip, r7
 8024ab2:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8024ab6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024aba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024abe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024ac2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024ac6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024aca:	ea4c 040a 	orr.w	r4, ip, sl
 8024ace:	9410      	str	r4, [sp, #64]	@ 0x40
 8024ad0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024ad2:	2cff      	cmp	r4, #255	@ 0xff
 8024ad4:	d020      	beq.n	8024b18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8024ad6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024ad8:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024adc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024ade:	4367      	muls	r7, r4
 8024ae0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024ae2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024ae6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024aea:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024aec:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8024af0:	fb04 fa0a 	mul.w	sl, r4, sl
 8024af4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024af8:	44bc      	add	ip, r7
 8024afa:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8024afe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024b02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b06:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024b0a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024b0e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024b12:	ea4c 040a 	orr.w	r4, ip, sl
 8024b16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024b18:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8024b1a:	2cff      	cmp	r4, #255	@ 0xff
 8024b1c:	d020      	beq.n	8024b60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8024b1e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024b20:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024b24:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8024b26:	4367      	muls	r7, r4
 8024b28:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024b2a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024b2e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024b32:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8024b34:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8024b38:	fb04 fa0a 	mul.w	sl, r4, sl
 8024b3c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024b40:	44bc      	add	ip, r7
 8024b42:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8024b46:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024b4a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024b52:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024b56:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024b5a:	ea4c 040a 	orr.w	r4, ip, sl
 8024b5e:	9411      	str	r4, [sp, #68]	@ 0x44
 8024b60:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024b62:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8024b66:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024b6a:	fb0e f707 	mul.w	r7, lr, r7
 8024b6e:	fb02 770c 	mla	r7, r2, ip, r7
 8024b72:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024b74:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024b78:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024b7c:	fb00 770c 	mla	r7, r0, ip, r7
 8024b80:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024b82:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024b86:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024b88:	fb08 770c 	mla	r7, r8, ip, r7
 8024b8c:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8024b90:	fb0e fe0c 	mul.w	lr, lr, ip
 8024b94:	fb02 e303 	mla	r3, r2, r3, lr
 8024b98:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024b9a:	0a3f      	lsrs	r7, r7, #8
 8024b9c:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8024ba0:	fb00 330a 	mla	r3, r0, sl, r3
 8024ba4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8024ba6:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8024baa:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8024bae:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024bb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024bb4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024bb8:	434b      	muls	r3, r1
 8024bba:	1c59      	adds	r1, r3, #1
 8024bbc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024bc0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024bc4:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8024bc8:	ea47 070c 	orr.w	r7, r7, ip
 8024bcc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024bce:	0c3b      	lsrs	r3, r7, #16
 8024bd0:	f8b9 0000 	ldrh.w	r0, [r9]
 8024bd4:	fb13 f304 	smulbb	r3, r3, r4
 8024bd8:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8024bdc:	b2ff      	uxtb	r7, r7
 8024bde:	1202      	asrs	r2, r0, #8
 8024be0:	fb17 f704 	smulbb	r7, r7, r4
 8024be4:	b2c9      	uxtb	r1, r1
 8024be6:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8024bea:	fb02 3201 	mla	r2, r2, r1, r3
 8024bee:	10c3      	asrs	r3, r0, #3
 8024bf0:	00c0      	lsls	r0, r0, #3
 8024bf2:	fb1c fc04 	smulbb	ip, ip, r4
 8024bf6:	b2c0      	uxtb	r0, r0
 8024bf8:	fb00 7001 	mla	r0, r0, r1, r7
 8024bfc:	b292      	uxth	r2, r2
 8024bfe:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8024c02:	fb03 c301 	mla	r3, r3, r1, ip
 8024c06:	f102 0c01 	add.w	ip, r2, #1
 8024c0a:	b280      	uxth	r0, r0
 8024c0c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024c10:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 8024c14:	1c42      	adds	r2, r0, #1
 8024c16:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024c1a:	b29b      	uxth	r3, r3
 8024c1c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024c20:	ea42 020c 	orr.w	r2, r2, ip
 8024c24:	f103 0c01 	add.w	ip, r3, #1
 8024c28:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024c2c:	095b      	lsrs	r3, r3, #5
 8024c2e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024c32:	431a      	orrs	r2, r3
 8024c34:	f8a9 2000 	strh.w	r2, [r9]
 8024c38:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8024c3a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8024c3c:	f109 0902 	add.w	r9, r9, #2
 8024c40:	441a      	add	r2, r3
 8024c42:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024c44:	9229      	str	r2, [sp, #164]	@ 0xa4
 8024c46:	441d      	add	r5, r3
 8024c48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024c4c:	e63d      	b.n	80248ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8024c4e:	2800      	cmp	r0, #0
 8024c50:	f43f aedd 	beq.w	8024a0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8024c54:	5c79      	ldrb	r1, [r7, r1]
 8024c56:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024c5a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024c5c:	0e09      	lsrs	r1, r1, #24
 8024c5e:	9114      	str	r1, [sp, #80]	@ 0x50
 8024c60:	e6d5      	b.n	8024a0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8024c62:	b01f      	add	sp, #124	@ 0x7c
 8024c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024c68 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8024c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c6c:	b089      	sub	sp, #36	@ 0x24
 8024c6e:	9101      	str	r1, [sp, #4]
 8024c70:	9801      	ldr	r0, [sp, #4]
 8024c72:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 8024c76:	8800      	ldrh	r0, [r0, #0]
 8024c78:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	@ 0x50
 8024c7c:	1206      	asrs	r6, r0, #8
 8024c7e:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8024c82:	9602      	str	r6, [sp, #8]
 8024c84:	10c6      	asrs	r6, r0, #3
 8024c86:	00c0      	lsls	r0, r0, #3
 8024c88:	b2c0      	uxtb	r0, r0
 8024c8a:	9004      	str	r0, [sp, #16]
 8024c8c:	fb07 100c 	mla	r0, r7, ip, r1
 8024c90:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8024c94:	2f00      	cmp	r7, #0
 8024c96:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
 8024c9a:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8024c9e:	f89d 405c 	ldrb.w	r4, [sp, #92]	@ 0x5c
 8024ca2:	9603      	str	r6, [sp, #12]
 8024ca4:	eb02 0e00 	add.w	lr, r2, r0
 8024ca8:	f2c0 810a 	blt.w	8024ec0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8024cac:	45b8      	cmp	r8, r7
 8024cae:	f340 8107 	ble.w	8024ec0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8024cb2:	2900      	cmp	r1, #0
 8024cb4:	f2c0 8102 	blt.w	8024ebc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8024cb8:	458c      	cmp	ip, r1
 8024cba:	f340 80ff 	ble.w	8024ebc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8024cbe:	5c12      	ldrb	r2, [r2, r0]
 8024cc0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024cc4:	1c4a      	adds	r2, r1, #1
 8024cc6:	f100 80fe 	bmi.w	8024ec6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8024cca:	4594      	cmp	ip, r2
 8024ccc:	f340 80fb 	ble.w	8024ec6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8024cd0:	2d00      	cmp	r5, #0
 8024cd2:	f000 80fa 	beq.w	8024eca <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8024cd6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024cda:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8024cde:	3701      	adds	r7, #1
 8024ce0:	f100 80f7 	bmi.w	8024ed2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8024ce4:	45b8      	cmp	r8, r7
 8024ce6:	f340 80f4 	ble.w	8024ed2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8024cea:	2c00      	cmp	r4, #0
 8024cec:	f000 80f4 	beq.w	8024ed8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8024cf0:	2900      	cmp	r1, #0
 8024cf2:	eb0e 020c 	add.w	r2, lr, ip
 8024cf6:	f2c0 80ea 	blt.w	8024ece <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8024cfa:	458c      	cmp	ip, r1
 8024cfc:	f340 80e7 	ble.w	8024ece <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8024d00:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8024d04:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8024d08:	3101      	adds	r1, #1
 8024d0a:	f100 80e8 	bmi.w	8024ede <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8024d0e:	458c      	cmp	ip, r1
 8024d10:	f340 80e5 	ble.w	8024ede <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8024d14:	2d00      	cmp	r5, #0
 8024d16:	f000 80e4 	beq.w	8024ee2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8024d1a:	7852      	ldrb	r2, [r2, #1]
 8024d1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024d20:	0e0b      	lsrs	r3, r1, #24
 8024d22:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8024d26:	9300      	str	r3, [sp, #0]
 8024d28:	b2a4      	uxth	r4, r4
 8024d2a:	b2ab      	uxth	r3, r5
 8024d2c:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8024d30:	fb03 f904 	mul.w	r9, r3, r4
 8024d34:	fb0a f505 	mul.w	r5, sl, r5
 8024d38:	011b      	lsls	r3, r3, #4
 8024d3a:	eba3 0e09 	sub.w	lr, r3, r9
 8024d3e:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 8024d42:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 8024d46:	0a28      	lsrs	r0, r5, #8
 8024d48:	fb0a f303 	mul.w	r3, sl, r3
 8024d4c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024d50:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8024d54:	4405      	add	r5, r0
 8024d56:	0a2d      	lsrs	r5, r5, #8
 8024d58:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 8024d5c:	9005      	str	r0, [sp, #20]
 8024d5e:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 8024d62:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024d66:	0a1b      	lsrs	r3, r3, #8
 8024d68:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8024d6c:	9306      	str	r3, [sp, #24]
 8024d6e:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 8024d72:	fb0b f303 	mul.w	r3, fp, r3
 8024d76:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8024d7a:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8024d7e:	fb0b f606 	mul.w	r6, fp, r6
 8024d82:	f007 1cff 	and.w	ip, r7, #16711935	@ 0xff00ff
 8024d86:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8024d8a:	fb08 f707 	mul.w	r7, r8, r7
 8024d8e:	0a1d      	lsrs	r5, r3, #8
 8024d90:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8024d94:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8024d98:	441d      	add	r5, r3
 8024d9a:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 8024d9e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024da2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8024da6:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8024daa:	fb08 fc0c 	mul.w	ip, r8, ip
 8024dae:	0a1b      	lsrs	r3, r3, #8
 8024db0:	9307      	str	r3, [sp, #28]
 8024db2:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 8024db6:	0e0b      	lsrs	r3, r1, #24
 8024db8:	0a2d      	lsrs	r5, r5, #8
 8024dba:	fa1f fe8e 	uxth.w	lr, lr
 8024dbe:	435f      	muls	r7, r3
 8024dc0:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8024dc4:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8024dc8:	fb05 f50e 	mul.w	r5, r5, lr
 8024dcc:	b2a4      	uxth	r4, r4
 8024dce:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8024dd2:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8024dd6:	4359      	muls	r1, r3
 8024dd8:	1b12      	subs	r2, r2, r4
 8024dda:	9b05      	ldr	r3, [sp, #20]
 8024ddc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8024de0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024de4:	b292      	uxth	r2, r2
 8024de6:	4460      	add	r0, ip
 8024de8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024dec:	fb03 5502 	mla	r5, r3, r2, r5
 8024df0:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8024df4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024df8:	44bc      	add	ip, r7
 8024dfa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024dfe:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024e02:	0a36      	lsrs	r6, r6, #8
 8024e04:	fb0c 5509 	mla	r5, ip, r9, r5
 8024e08:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8024e0c:	fb0e f606 	mul.w	r6, lr, r6
 8024e10:	9b06      	ldr	r3, [sp, #24]
 8024e12:	0a00      	lsrs	r0, r0, #8
 8024e14:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024e18:	fb00 5504 	mla	r5, r0, r4, r5
 8024e1c:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 8024e20:	fb02 6000 	mla	r0, r2, r0, r6
 8024e24:	f501 7780 	add.w	r7, r1, #256	@ 0x100
 8024e28:	fb0e fe0b 	mul.w	lr, lr, fp
 8024e2c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8024e30:	0a09      	lsrs	r1, r1, #8
 8024e32:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8024e36:	fb09 0001 	mla	r0, r9, r1, r0
 8024e3a:	fb02 e20a 	mla	r2, r2, sl, lr
 8024e3e:	9b07      	ldr	r3, [sp, #28]
 8024e40:	0a2d      	lsrs	r5, r5, #8
 8024e42:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024e46:	fb04 0003 	mla	r0, r4, r3, r0
 8024e4a:	fb04 2408 	mla	r4, r4, r8, r2
 8024e4e:	9b00      	ldr	r3, [sp, #0]
 8024e50:	9a04      	ldr	r2, [sp, #16]
 8024e52:	fb09 4903 	mla	r9, r9, r3, r4
 8024e56:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8024e5a:	9b02      	ldr	r3, [sp, #8]
 8024e5c:	fa5f f989 	uxtb.w	r9, r9
 8024e60:	fb03 f109 	mul.w	r1, r3, r9
 8024e64:	9b03      	ldr	r3, [sp, #12]
 8024e66:	0a00      	lsrs	r0, r0, #8
 8024e68:	fb03 f309 	mul.w	r3, r3, r9
 8024e6c:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8024e70:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8024e74:	4305      	orrs	r5, r0
 8024e76:	fb02 f909 	mul.w	r9, r2, r9
 8024e7a:	1c58      	adds	r0, r3, #1
 8024e7c:	1c4a      	adds	r2, r1, #1
 8024e7e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024e82:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024e86:	0a2b      	lsrs	r3, r5, #8
 8024e88:	0c2a      	lsrs	r2, r5, #16
 8024e8a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024e8e:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8024e92:	00db      	lsls	r3, r3, #3
 8024e94:	0212      	lsls	r2, r2, #8
 8024e96:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8024e9a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024e9e:	4313      	orrs	r3, r2
 8024ea0:	f109 0201 	add.w	r2, r9, #1
 8024ea4:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8024ea8:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8024eac:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8024eb0:	431d      	orrs	r5, r3
 8024eb2:	9b01      	ldr	r3, [sp, #4]
 8024eb4:	801d      	strh	r5, [r3, #0]
 8024eb6:	b009      	add	sp, #36	@ 0x24
 8024eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ebc:	2000      	movs	r0, #0
 8024ebe:	e701      	b.n	8024cc4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8024ec0:	2600      	movs	r6, #0
 8024ec2:	4630      	mov	r0, r6
 8024ec4:	e70b      	b.n	8024cde <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8024ec6:	2600      	movs	r6, #0
 8024ec8:	e709      	b.n	8024cde <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8024eca:	462e      	mov	r6, r5
 8024ecc:	e707      	b.n	8024cde <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8024ece:	2700      	movs	r7, #0
 8024ed0:	e71a      	b.n	8024d08 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8024ed2:	2100      	movs	r1, #0
 8024ed4:	460f      	mov	r7, r1
 8024ed6:	e723      	b.n	8024d20 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024ed8:	4621      	mov	r1, r4
 8024eda:	4627      	mov	r7, r4
 8024edc:	e720      	b.n	8024d20 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024ede:	2100      	movs	r1, #0
 8024ee0:	e71e      	b.n	8024d20 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024ee2:	4629      	mov	r1, r5
 8024ee4:	e71c      	b.n	8024d20 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
	...

08024ee8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024eec:	b09b      	sub	sp, #108	@ 0x6c
 8024eee:	9218      	str	r2, [sp, #96]	@ 0x60
 8024ef0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8024ef2:	9019      	str	r0, [sp, #100]	@ 0x64
 8024ef4:	6850      	ldr	r0, [r2, #4]
 8024ef6:	9116      	str	r1, [sp, #88]	@ 0x58
 8024ef8:	9307      	str	r3, [sp, #28]
 8024efa:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8024efe:	fb00 1303 	mla	r3, r0, r3, r1
 8024f02:	6812      	ldr	r2, [r2, #0]
 8024f04:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8024f06:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024f0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8024f0c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024f0e:	681b      	ldr	r3, [r3, #0]
 8024f10:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024f12:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024f14:	685e      	ldr	r6, [r3, #4]
 8024f16:	3604      	adds	r6, #4
 8024f18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024f1a:	2b00      	cmp	r3, #0
 8024f1c:	dc03      	bgt.n	8024f26 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8024f1e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024f20:	2b00      	cmp	r3, #0
 8024f22:	f340 8373 	ble.w	802560c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8024f26:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024f28:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024f2c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024f30:	1e48      	subs	r0, r1, #1
 8024f32:	1e57      	subs	r7, r2, #1
 8024f34:	9b07      	ldr	r3, [sp, #28]
 8024f36:	2b00      	cmp	r3, #0
 8024f38:	f340 818f 	ble.w	802525a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8024f3c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8024f3e:	142b      	asrs	r3, r5, #16
 8024f40:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024f44:	d406      	bmi.n	8024f54 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024f46:	4584      	cmp	ip, r0
 8024f48:	da04      	bge.n	8024f54 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024f4a:	2b00      	cmp	r3, #0
 8024f4c:	db02      	blt.n	8024f54 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024f4e:	42bb      	cmp	r3, r7
 8024f50:	f2c0 8184 	blt.w	802525c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8024f54:	f11c 0c01 	adds.w	ip, ip, #1
 8024f58:	f100 8172 	bmi.w	8025240 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024f5c:	4561      	cmp	r1, ip
 8024f5e:	f2c0 816f 	blt.w	8025240 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024f62:	3301      	adds	r3, #1
 8024f64:	f100 816c 	bmi.w	8025240 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024f68:	429a      	cmp	r2, r3
 8024f6a:	f2c0 8169 	blt.w	8025240 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024f6e:	9b07      	ldr	r3, [sp, #28]
 8024f70:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8024f72:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024f74:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024f76:	2b00      	cmp	r3, #0
 8024f78:	f340 818e 	ble.w	8025298 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8024f7c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024f7e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024f82:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024f86:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024f88:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024f8c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8024f90:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024f92:	141b      	asrs	r3, r3, #16
 8024f94:	f100 81d1 	bmi.w	802533a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024f98:	f101 38ff 	add.w	r8, r1, #4294967295
 8024f9c:	4543      	cmp	r3, r8
 8024f9e:	f280 81cc 	bge.w	802533a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024fa2:	f1bc 0f00 	cmp.w	ip, #0
 8024fa6:	f2c0 81c8 	blt.w	802533a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024faa:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024fae:	45c4      	cmp	ip, r8
 8024fb0:	f280 81c3 	bge.w	802533a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024fb4:	b209      	sxth	r1, r1
 8024fb6:	fb0c 3301 	mla	r3, ip, r1, r3
 8024fba:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024fbc:	eb04 0803 	add.w	r8, r4, r3
 8024fc0:	5ce3      	ldrb	r3, [r4, r3]
 8024fc2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024fc6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024fca:	2a00      	cmp	r2, #0
 8024fcc:	f000 81aa 	beq.w	8025324 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8024fd0:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024fd4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024fd8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024fda:	0e24      	lsrs	r4, r4, #24
 8024fdc:	9412      	str	r4, [sp, #72]	@ 0x48
 8024fde:	b178      	cbz	r0, 8025000 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8024fe0:	eb08 0c01 	add.w	ip, r8, r1
 8024fe4:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024fe8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024fec:	9108      	str	r1, [sp, #32]
 8024fee:	0e09      	lsrs	r1, r1, #24
 8024ff0:	9110      	str	r1, [sp, #64]	@ 0x40
 8024ff2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8024ff6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024ffa:	910c      	str	r1, [sp, #48]	@ 0x30
 8024ffc:	0e09      	lsrs	r1, r1, #24
 8024ffe:	9113      	str	r1, [sp, #76]	@ 0x4c
 8025000:	b292      	uxth	r2, r2
 8025002:	b280      	uxth	r0, r0
 8025004:	fb02 f900 	mul.w	r9, r2, r0
 8025008:	0112      	lsls	r2, r2, #4
 802500a:	eba2 0809 	sub.w	r8, r2, r9
 802500e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8025010:	fa1f f888 	uxth.w	r8, r8
 8025014:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025018:	fb08 f101 	mul.w	r1, r8, r1
 802501c:	b280      	uxth	r0, r0
 802501e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8025022:	1a12      	subs	r2, r2, r0
 8025024:	b292      	uxth	r2, r2
 8025026:	fb02 110e 	mla	r1, r2, lr, r1
 802502a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802502c:	fb00 1104 	mla	r1, r0, r4, r1
 8025030:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025032:	fb09 1104 	mla	r1, r9, r4, r1
 8025036:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802503a:	2900      	cmp	r1, #0
 802503c:	f000 80f5 	beq.w	802522a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025040:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8025044:	d01b      	beq.n	802507e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8025046:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802504a:	fb0e fa0a 	mul.w	sl, lr, sl
 802504e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025052:	fb0e fe03 	mul.w	lr, lr, r3
 8025056:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802505a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802505e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025062:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8025066:	4453      	add	r3, sl
 8025068:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802506c:	0a1b      	lsrs	r3, r3, #8
 802506e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025072:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025076:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802507a:	ea43 030c 	orr.w	r3, r3, ip
 802507e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025080:	2cff      	cmp	r4, #255	@ 0xff
 8025082:	d021      	beq.n	80250c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8025084:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025086:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802508a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802508c:	fb04 fb0b 	mul.w	fp, r4, fp
 8025090:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025092:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025096:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802509a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802509c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80250a0:	fb04 fa0a 	mul.w	sl, r4, sl
 80250a4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80250a8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80250ac:	44de      	add	lr, fp
 80250ae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80250b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80250b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80250ba:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80250be:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80250c2:	ea4e 040a 	orr.w	r4, lr, sl
 80250c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80250c8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80250ca:	2cff      	cmp	r4, #255	@ 0xff
 80250cc:	d021      	beq.n	8025112 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80250ce:	9c08      	ldr	r4, [sp, #32]
 80250d0:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80250d4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80250d6:	fb04 fb0b 	mul.w	fp, r4, fp
 80250da:	9c08      	ldr	r4, [sp, #32]
 80250dc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80250e0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80250e4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80250e6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80250ea:	fb04 fa0a 	mul.w	sl, r4, sl
 80250ee:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80250f2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80250f6:	44de      	add	lr, fp
 80250f8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80250fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025100:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025104:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025108:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802510c:	ea4e 040a 	orr.w	r4, lr, sl
 8025110:	9408      	str	r4, [sp, #32]
 8025112:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025114:	2cff      	cmp	r4, #255	@ 0xff
 8025116:	d021      	beq.n	802515c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8025118:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802511a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802511e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025120:	fb04 fb0b 	mul.w	fp, r4, fp
 8025124:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025126:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802512a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802512e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025130:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025134:	fb04 fa0a 	mul.w	sl, r4, sl
 8025138:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802513c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025140:	44de      	add	lr, fp
 8025142:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025146:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802514a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802514e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025152:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025156:	ea4e 040a 	orr.w	r4, lr, sl
 802515a:	940c      	str	r4, [sp, #48]	@ 0x30
 802515c:	43c9      	mvns	r1, r1
 802515e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025160:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8025164:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025168:	fb08 fc0c 	mul.w	ip, r8, ip
 802516c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025170:	9c08      	ldr	r4, [sp, #32]
 8025172:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025176:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802517a:	fb00 cc0e 	mla	ip, r0, lr, ip
 802517e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025180:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025184:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025186:	fb09 cc0e 	mla	ip, r9, lr, ip
 802518a:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802518e:	fb08 f80e 	mul.w	r8, r8, lr
 8025192:	fb02 8303 	mla	r3, r2, r3, r8
 8025196:	9a08      	ldr	r2, [sp, #32]
 8025198:	f8b7 8000 	ldrh.w	r8, [r7]
 802519c:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80251a0:	fb00 330a 	mla	r3, r0, sl, r3
 80251a4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80251a6:	fa5f fe81 	uxtb.w	lr, r1
 80251aa:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 80251ae:	fb09 3900 	mla	r9, r9, r0, r3
 80251b2:	ea4f 2228 	mov.w	r2, r8, asr #8
 80251b6:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80251ba:	fb02 f20e 	mul.w	r2, r2, lr
 80251be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80251c2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80251c6:	ea4f 00e8 	mov.w	r0, r8, asr #3
 80251ca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80251ce:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80251d2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80251d6:	ea4c 0c09 	orr.w	ip, ip, r9
 80251da:	fb00 f00e 	mul.w	r0, r0, lr
 80251de:	1c53      	adds	r3, r2, #1
 80251e0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80251e4:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80251e8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80251ec:	4a62      	ldr	r2, [pc, #392]	@ (8025378 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 80251ee:	b2db      	uxtb	r3, r3
 80251f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80251f4:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 80251f8:	b2c9      	uxtb	r1, r1
 80251fa:	1c43      	adds	r3, r0, #1
 80251fc:	fb01 f10e 	mul.w	r1, r1, lr
 8025200:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025204:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8025208:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802520c:	00db      	lsls	r3, r3, #3
 802520e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025212:	4313      	orrs	r3, r2
 8025214:	1c4a      	adds	r2, r1, #1
 8025216:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802521a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802521e:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8025222:	ea4c 0c03 	orr.w	ip, ip, r3
 8025226:	f8a7 c000 	strh.w	ip, [r7]
 802522a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802522c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802522e:	3702      	adds	r7, #2
 8025230:	441a      	add	r2, r3
 8025232:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025234:	9225      	str	r2, [sp, #148]	@ 0x94
 8025236:	441d      	add	r5, r3
 8025238:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802523a:	3b01      	subs	r3, #1
 802523c:	9317      	str	r3, [sp, #92]	@ 0x5c
 802523e:	e699      	b.n	8024f74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025240:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8025242:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8025244:	441c      	add	r4, r3
 8025246:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025248:	9425      	str	r4, [sp, #148]	@ 0x94
 802524a:	441d      	add	r5, r3
 802524c:	9b07      	ldr	r3, [sp, #28]
 802524e:	3b01      	subs	r3, #1
 8025250:	9307      	str	r3, [sp, #28]
 8025252:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025254:	3302      	adds	r3, #2
 8025256:	930a      	str	r3, [sp, #40]	@ 0x28
 8025258:	e66c      	b.n	8024f34 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802525a:	d024      	beq.n	80252a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 802525c:	9b07      	ldr	r3, [sp, #28]
 802525e:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8025260:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8025262:	3b01      	subs	r3, #1
 8025264:	fb00 4003 	mla	r0, r0, r3, r4
 8025268:	1400      	asrs	r0, r0, #16
 802526a:	f53f ae80 	bmi.w	8024f6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802526e:	3901      	subs	r1, #1
 8025270:	4288      	cmp	r0, r1
 8025272:	f6bf ae7c 	bge.w	8024f6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025276:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8025278:	fb01 5303 	mla	r3, r1, r3, r5
 802527c:	141b      	asrs	r3, r3, #16
 802527e:	f53f ae76 	bmi.w	8024f6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025282:	3a01      	subs	r2, #1
 8025284:	4293      	cmp	r3, r2
 8025286:	f6bf ae72 	bge.w	8024f6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802528a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802528e:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8025292:	f1bb 0f00 	cmp.w	fp, #0
 8025296:	dc71      	bgt.n	802537c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8025298:	9b07      	ldr	r3, [sp, #28]
 802529a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802529e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80252a0:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80252a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80252a6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80252a8:	2b00      	cmp	r3, #0
 80252aa:	f340 81af 	ble.w	802560c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80252ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80252b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80252b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80252ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80252be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80252c2:	eef0 6a62 	vmov.f32	s13, s5
 80252c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80252ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 80252ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 80252d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80252d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80252da:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 80252de:	eef0 6a43 	vmov.f32	s13, s6
 80252e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80252e6:	ee12 2a90 	vmov	r2, s5
 80252ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80252ee:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80252f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80252f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80252f8:	ee13 2a10 	vmov	r2, s6
 80252fc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80252fe:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025300:	ee16 5a90 	vmov	r5, s13
 8025304:	fb92 f3f3 	sdiv	r3, r2, r3
 8025308:	9328      	str	r3, [sp, #160]	@ 0xa0
 802530a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802530c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802530e:	3b01      	subs	r3, #1
 8025310:	9316      	str	r3, [sp, #88]	@ 0x58
 8025312:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025314:	bf08      	it	eq
 8025316:	4613      	moveq	r3, r2
 8025318:	eeb0 3a67 	vmov.f32	s6, s15
 802531c:	9307      	str	r3, [sp, #28]
 802531e:	eef0 2a47 	vmov.f32	s5, s14
 8025322:	e5f9      	b.n	8024f18 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8025324:	2800      	cmp	r0, #0
 8025326:	f43f ae6b 	beq.w	8025000 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802532a:	f818 1001 	ldrb.w	r1, [r8, r1]
 802532e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025332:	9108      	str	r1, [sp, #32]
 8025334:	0e09      	lsrs	r1, r1, #24
 8025336:	9110      	str	r1, [sp, #64]	@ 0x40
 8025338:	e662      	b.n	8025000 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802533a:	f113 0801 	adds.w	r8, r3, #1
 802533e:	f53f af74 	bmi.w	802522a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025342:	4541      	cmp	r1, r8
 8025344:	f6ff af71 	blt.w	802522a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025348:	f11c 0801 	adds.w	r8, ip, #1
 802534c:	f53f af6d 	bmi.w	802522a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025350:	45c6      	cmp	lr, r8
 8025352:	f6ff af6a 	blt.w	802522a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025356:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 802535a:	b209      	sxth	r1, r1
 802535c:	fa0f f38e 	sxth.w	r3, lr
 8025360:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8025364:	9301      	str	r3, [sp, #4]
 8025366:	9100      	str	r1, [sp, #0]
 8025368:	4633      	mov	r3, r6
 802536a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802536c:	4639      	mov	r1, r7
 802536e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8025370:	f7ff fc7a 	bl	8024c68 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8025374:	e759      	b.n	802522a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025376:	bf00      	nop
 8025378:	fffff800 	.word	0xfffff800
 802537c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802537e:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8025380:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025384:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025386:	1427      	asrs	r7, r4, #16
 8025388:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802538c:	142b      	asrs	r3, r5, #16
 802538e:	fb01 7303 	mla	r3, r1, r3, r7
 8025392:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025394:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025398:	18e7      	adds	r7, r4, r3
 802539a:	5ce3      	ldrb	r3, [r4, r3]
 802539c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80253a0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80253a4:	2a00      	cmp	r2, #0
 80253a6:	f000 8127 	beq.w	80255f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80253aa:	f897 e001 	ldrb.w	lr, [r7, #1]
 80253ae:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80253b2:	940d      	str	r4, [sp, #52]	@ 0x34
 80253b4:	0e24      	lsrs	r4, r4, #24
 80253b6:	9414      	str	r4, [sp, #80]	@ 0x50
 80253b8:	b170      	cbz	r0, 80253d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80253ba:	eb07 0e01 	add.w	lr, r7, r1
 80253be:	5c79      	ldrb	r1, [r7, r1]
 80253c0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80253c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80253c6:	0e09      	lsrs	r1, r1, #24
 80253c8:	9111      	str	r1, [sp, #68]	@ 0x44
 80253ca:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80253ce:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80253d2:	910e      	str	r1, [sp, #56]	@ 0x38
 80253d4:	0e09      	lsrs	r1, r1, #24
 80253d6:	9115      	str	r1, [sp, #84]	@ 0x54
 80253d8:	b292      	uxth	r2, r2
 80253da:	b280      	uxth	r0, r0
 80253dc:	fb02 f800 	mul.w	r8, r2, r0
 80253e0:	0112      	lsls	r2, r2, #4
 80253e2:	eba2 0e08 	sub.w	lr, r2, r8
 80253e6:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80253ea:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80253ec:	fa1f fe8e 	uxth.w	lr, lr
 80253f0:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80253f4:	fb0e f202 	mul.w	r2, lr, r2
 80253f8:	b280      	uxth	r0, r0
 80253fa:	1a09      	subs	r1, r1, r0
 80253fc:	b289      	uxth	r1, r1
 80253fe:	fb01 220c 	mla	r2, r1, ip, r2
 8025402:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025404:	fb00 2204 	mla	r2, r0, r4, r2
 8025408:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802540a:	fb08 2204 	mla	r2, r8, r4, r2
 802540e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025412:	2a00      	cmp	r2, #0
 8025414:	f000 80e5 	beq.w	80255e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8025418:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802541c:	d019      	beq.n	8025452 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 802541e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8025422:	fb0c fa0a 	mul.w	sl, ip, sl
 8025426:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802542a:	fb0c fc03 	mul.w	ip, ip, r3
 802542e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025432:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025436:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802543a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802543e:	4453      	add	r3, sl
 8025440:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025444:	0a1b      	lsrs	r3, r3, #8
 8025446:	0a3f      	lsrs	r7, r7, #8
 8025448:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802544c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8025450:	433b      	orrs	r3, r7
 8025452:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025454:	2cff      	cmp	r4, #255	@ 0xff
 8025456:	d020      	beq.n	802549a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8025458:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802545a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802545e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025460:	4367      	muls	r7, r4
 8025462:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025464:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025468:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802546c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802546e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025472:	fb04 fa0a 	mul.w	sl, r4, sl
 8025476:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802547a:	44bc      	add	ip, r7
 802547c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025480:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025484:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025488:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802548c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025490:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025494:	ea4c 040a 	orr.w	r4, ip, sl
 8025498:	940d      	str	r4, [sp, #52]	@ 0x34
 802549a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802549c:	2cff      	cmp	r4, #255	@ 0xff
 802549e:	d020      	beq.n	80254e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 80254a0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80254a2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80254a6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80254a8:	4367      	muls	r7, r4
 80254aa:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80254ac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80254b0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80254b4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80254b6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80254ba:	fb04 fa0a 	mul.w	sl, r4, sl
 80254be:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80254c2:	44bc      	add	ip, r7
 80254c4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80254c8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80254cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80254d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80254d4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80254d8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80254dc:	ea4c 040a 	orr.w	r4, ip, sl
 80254e0:	9409      	str	r4, [sp, #36]	@ 0x24
 80254e2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80254e4:	2cff      	cmp	r4, #255	@ 0xff
 80254e6:	d020      	beq.n	802552a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 80254e8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80254ea:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80254ee:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80254f0:	4367      	muls	r7, r4
 80254f2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80254f4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80254f8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80254fc:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80254fe:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025502:	fb04 fa0a 	mul.w	sl, r4, sl
 8025506:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802550a:	44bc      	add	ip, r7
 802550c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025510:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025514:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025518:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802551c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025520:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025524:	ea4c 040a 	orr.w	r4, ip, sl
 8025528:	940e      	str	r4, [sp, #56]	@ 0x38
 802552a:	43d2      	mvns	r2, r2
 802552c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802552e:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8025532:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025536:	fb0e f707 	mul.w	r7, lr, r7
 802553a:	fb01 770c 	mla	r7, r1, ip, r7
 802553e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8025540:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025544:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025548:	fb00 770c 	mla	r7, r0, ip, r7
 802554c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802554e:	b2d2      	uxtb	r2, r2
 8025550:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025554:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025556:	fb08 770c 	mla	r7, r8, ip, r7
 802555a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802555e:	fb0e fe0c 	mul.w	lr, lr, ip
 8025562:	fb01 e303 	mla	r3, r1, r3, lr
 8025566:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8025568:	0a3f      	lsrs	r7, r7, #8
 802556a:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802556e:	fb00 330a 	mla	r3, r0, sl, r3
 8025572:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025574:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8025578:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 802557c:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025580:	f8b9 3000 	ldrh.w	r3, [r9]
 8025584:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025588:	1218      	asrs	r0, r3, #8
 802558a:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802558e:	4350      	muls	r0, r2
 8025590:	10d9      	asrs	r1, r3, #3
 8025592:	00db      	lsls	r3, r3, #3
 8025594:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025598:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802559c:	b2db      	uxtb	r3, r3
 802559e:	ea47 070c 	orr.w	r7, r7, ip
 80255a2:	4351      	muls	r1, r2
 80255a4:	4353      	muls	r3, r2
 80255a6:	1c42      	adds	r2, r0, #1
 80255a8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80255ac:	0c3a      	lsrs	r2, r7, #16
 80255ae:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80255b2:	4a18      	ldr	r2, [pc, #96]	@ (8025614 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 80255b4:	b2c0      	uxtb	r0, r0
 80255b6:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80255ba:	1c4a      	adds	r2, r1, #1
 80255bc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80255c0:	0a3a      	lsrs	r2, r7, #8
 80255c2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80255c6:	00c9      	lsls	r1, r1, #3
 80255c8:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80255cc:	4301      	orrs	r1, r0
 80255ce:	1c58      	adds	r0, r3, #1
 80255d0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80255d4:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80255d8:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 80255dc:	4308      	orrs	r0, r1
 80255de:	f8a9 0000 	strh.w	r0, [r9]
 80255e2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80255e4:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80255e6:	f109 0902 	add.w	r9, r9, #2
 80255ea:	441a      	add	r2, r3
 80255ec:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80255ee:	9225      	str	r2, [sp, #148]	@ 0x94
 80255f0:	441d      	add	r5, r3
 80255f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80255f6:	e64c      	b.n	8025292 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80255f8:	2800      	cmp	r0, #0
 80255fa:	f43f aeed 	beq.w	80253d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80255fe:	5c79      	ldrb	r1, [r7, r1]
 8025600:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025604:	9109      	str	r1, [sp, #36]	@ 0x24
 8025606:	0e09      	lsrs	r1, r1, #24
 8025608:	9111      	str	r1, [sp, #68]	@ 0x44
 802560a:	e6e5      	b.n	80253d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802560c:	b01b      	add	sp, #108	@ 0x6c
 802560e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025612:	bf00      	nop
 8025614:	fffff800 	.word	0xfffff800

08025618 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8025618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802561c:	b085      	sub	sp, #20
 802561e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 8025622:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8025626:	fb00 7406 	mla	r4, r0, r6, r7
 802562a:	2800      	cmp	r0, #0
 802562c:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8025630:	9103      	str	r1, [sp, #12]
 8025632:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 8025636:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 802563a:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 802563e:	9501      	str	r5, [sp, #4]
 8025640:	eb03 0904 	add.w	r9, r3, r4
 8025644:	f2c0 8150 	blt.w	80258e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8025648:	4583      	cmp	fp, r0
 802564a:	f340 814d 	ble.w	80258e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 802564e:	2f00      	cmp	r7, #0
 8025650:	f2c0 8146 	blt.w	80258e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8025654:	42be      	cmp	r6, r7
 8025656:	f340 8143 	ble.w	80258e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 802565a:	f813 c004 	ldrb.w	ip, [r3, r4]
 802565e:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8025662:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8025666:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802566a:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 802566e:	4355      	muls	r5, r2
 8025670:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025674:	fb0c f203 	mul.w	r2, ip, r3
 8025678:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 802567c:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 8025680:	441d      	add	r5, r3
 8025682:	f102 0320 	add.w	r3, r2, #32
 8025686:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802568a:	0a1b      	lsrs	r3, r3, #8
 802568c:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8025690:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025694:	431c      	orrs	r4, r3
 8025696:	1c7b      	adds	r3, r7, #1
 8025698:	f100 812b 	bmi.w	80258f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 802569c:	429e      	cmp	r6, r3
 802569e:	f340 8128 	ble.w	80258f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80256a2:	2900      	cmp	r1, #0
 80256a4:	f000 8128 	beq.w	80258f8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 80256a8:	9a01      	ldr	r2, [sp, #4]
 80256aa:	f899 3001 	ldrb.w	r3, [r9, #1]
 80256ae:	8855      	ldrh	r5, [r2, #2]
 80256b0:	ea4f 08e3 	mov.w	r8, r3, asr #3
 80256b4:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 80256b8:	fb08 f802 	mul.w	r8, r8, r2
 80256bc:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80256c0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80256c4:	435d      	muls	r5, r3
 80256c6:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80256ca:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80256ce:	44d0      	add	r8, sl
 80256d0:	f105 0a20 	add.w	sl, r5, #32
 80256d4:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80256d8:	0a2d      	lsrs	r5, r5, #8
 80256da:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80256de:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80256e2:	432a      	orrs	r2, r5
 80256e4:	3001      	adds	r0, #1
 80256e6:	f100 810d 	bmi.w	8025904 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80256ea:	4583      	cmp	fp, r0
 80256ec:	f340 810a 	ble.w	8025904 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80256f0:	f1be 0f00 	cmp.w	lr, #0
 80256f4:	f000 810b 	beq.w	802590e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 80256f8:	2f00      	cmp	r7, #0
 80256fa:	f2c0 8100 	blt.w	80258fe <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80256fe:	42be      	cmp	r6, r7
 8025700:	f340 80fd 	ble.w	80258fe <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8025704:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8025708:	9801      	ldr	r0, [sp, #4]
 802570a:	f819 5006 	ldrb.w	r5, [r9, r6]
 802570e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8025712:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8025716:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 802571a:	fb0a fa00 	mul.w	sl, sl, r0
 802571e:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8025722:	fb05 f808 	mul.w	r8, r5, r8
 8025726:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 802572a:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 802572e:	4482      	add	sl, r0
 8025730:	f108 0020 	add.w	r0, r8, #32
 8025734:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025738:	0a00      	lsrs	r0, r0, #8
 802573a:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802573e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025742:	ea4b 0b00 	orr.w	fp, fp, r0
 8025746:	3701      	adds	r7, #1
 8025748:	f100 80e6 	bmi.w	8025918 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 802574c:	42be      	cmp	r6, r7
 802574e:	f340 80e3 	ble.w	8025918 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8025752:	2900      	cmp	r1, #0
 8025754:	f000 80e3 	beq.w	802591e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8025758:	9801      	ldr	r0, [sp, #4]
 802575a:	3601      	adds	r6, #1
 802575c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8025760:	f819 7006 	ldrb.w	r7, [r9, r6]
 8025764:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 8025768:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802576c:	fb07 f800 	mul.w	r8, r7, r0
 8025770:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8025774:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8025778:	fb09 f906 	mul.w	r9, r9, r6
 802577c:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8025780:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8025784:	44d1      	add	r9, sl
 8025786:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802578a:	f108 0020 	add.w	r0, r8, #32
 802578e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025792:	0a00      	lsrs	r0, r0, #8
 8025794:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025798:	4330      	orrs	r0, r6
 802579a:	b28e      	uxth	r6, r1
 802579c:	fa1f f98e 	uxth.w	r9, lr
 80257a0:	fb06 f809 	mul.w	r8, r6, r9
 80257a4:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80257a8:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80257ac:	0136      	lsls	r6, r6, #4
 80257ae:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80257b2:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 80257b6:	9601      	str	r6, [sp, #4]
 80257b8:	ea4a 0404 	orr.w	r4, sl, r4
 80257bc:	fa1f f689 	uxth.w	r6, r9
 80257c0:	9602      	str	r6, [sp, #8]
 80257c2:	4626      	mov	r6, r4
 80257c4:	fb11 f90e 	smulbb	r9, r1, lr
 80257c8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80257cc:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80257d0:	f1ce 0410 	rsb	r4, lr, #16
 80257d4:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80257d8:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80257dc:	1a64      	subs	r4, r4, r1
 80257de:	ea4a 0202 	orr.w	r2, sl, r2
 80257e2:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80257e6:	434a      	muls	r2, r1
 80257e8:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80257ec:	fb04 2406 	mla	r4, r4, r6, r2
 80257f0:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80257f4:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80257f8:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80257fc:	ea4a 0000 	orr.w	r0, sl, r0
 8025800:	fb09 4200 	mla	r2, r9, r0, r4
 8025804:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8025808:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 802580c:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8025810:	ea44 0b0b 	orr.w	fp, r4, fp
 8025814:	9c01      	ldr	r4, [sp, #4]
 8025816:	9e02      	ldr	r6, [sp, #8]
 8025818:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 802581c:	1ba4      	subs	r4, r4, r6
 802581e:	9e01      	ldr	r6, [sp, #4]
 8025820:	b2a4      	uxth	r4, r4
 8025822:	eba6 0608 	sub.w	r6, r6, r8
 8025826:	b2b6      	uxth	r6, r6
 8025828:	4373      	muls	r3, r6
 802582a:	fb0c 3304 	mla	r3, ip, r4, r3
 802582e:	9c02      	ldr	r4, [sp, #8]
 8025830:	9903      	ldr	r1, [sp, #12]
 8025832:	fb04 3505 	mla	r5, r4, r5, r3
 8025836:	fb08 5707 	mla	r7, r8, r7, r5
 802583a:	8808      	ldrh	r0, [r1, #0]
 802583c:	f89d 1050 	ldrb.w	r1, [sp, #80]	@ 0x50
 8025840:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025844:	b289      	uxth	r1, r1
 8025846:	434f      	muls	r7, r1
 8025848:	1c7b      	adds	r3, r7, #1
 802584a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802584e:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8025852:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8025856:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802585a:	1203      	asrs	r3, r0, #8
 802585c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025860:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025864:	b2ff      	uxtb	r7, r7
 8025866:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802586a:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802586e:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8025872:	fb13 f307 	smulbb	r3, r3, r7
 8025876:	ea42 0e0e 	orr.w	lr, r2, lr
 802587a:	fa1f f28e 	uxth.w	r2, lr
 802587e:	1215      	asrs	r5, r2, #8
 8025880:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8025884:	fb05 3501 	mla	r5, r5, r1, r3
 8025888:	10c3      	asrs	r3, r0, #3
 802588a:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802588e:	fb13 f307 	smulbb	r3, r3, r7
 8025892:	10d4      	asrs	r4, r2, #3
 8025894:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8025898:	fb04 3401 	mla	r4, r4, r1, r3
 802589c:	00c3      	lsls	r3, r0, #3
 802589e:	b2db      	uxtb	r3, r3
 80258a0:	fb13 f307 	smulbb	r3, r3, r7
 80258a4:	00d2      	lsls	r2, r2, #3
 80258a6:	b2d2      	uxtb	r2, r2
 80258a8:	fb02 3101 	mla	r1, r2, r1, r3
 80258ac:	b2ad      	uxth	r5, r5
 80258ae:	b289      	uxth	r1, r1
 80258b0:	b2a4      	uxth	r4, r4
 80258b2:	1c6b      	adds	r3, r5, #1
 80258b4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80258b8:	1c62      	adds	r2, r4, #1
 80258ba:	1c4b      	adds	r3, r1, #1
 80258bc:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80258c0:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80258c4:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80258c8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80258cc:	0964      	lsrs	r4, r4, #5
 80258ce:	432b      	orrs	r3, r5
 80258d0:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80258d4:	9a03      	ldr	r2, [sp, #12]
 80258d6:	4323      	orrs	r3, r4
 80258d8:	8013      	strh	r3, [r2, #0]
 80258da:	b005      	add	sp, #20
 80258dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80258e0:	f04f 0c00 	mov.w	ip, #0
 80258e4:	4664      	mov	r4, ip
 80258e6:	e6d6      	b.n	8025696 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 80258e8:	2300      	movs	r3, #0
 80258ea:	469c      	mov	ip, r3
 80258ec:	461a      	mov	r2, r3
 80258ee:	461c      	mov	r4, r3
 80258f0:	e6f8      	b.n	80256e4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80258f2:	2300      	movs	r3, #0
 80258f4:	461a      	mov	r2, r3
 80258f6:	e6f5      	b.n	80256e4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80258f8:	460b      	mov	r3, r1
 80258fa:	460a      	mov	r2, r1
 80258fc:	e6f2      	b.n	80256e4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80258fe:	2500      	movs	r5, #0
 8025900:	46ab      	mov	fp, r5
 8025902:	e720      	b.n	8025746 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8025904:	2700      	movs	r7, #0
 8025906:	463d      	mov	r5, r7
 8025908:	4638      	mov	r0, r7
 802590a:	46bb      	mov	fp, r7
 802590c:	e745      	b.n	802579a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802590e:	4677      	mov	r7, lr
 8025910:	4675      	mov	r5, lr
 8025912:	4670      	mov	r0, lr
 8025914:	46f3      	mov	fp, lr
 8025916:	e740      	b.n	802579a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8025918:	2700      	movs	r7, #0
 802591a:	4638      	mov	r0, r7
 802591c:	e73d      	b.n	802579a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802591e:	460f      	mov	r7, r1
 8025920:	4608      	mov	r0, r1
 8025922:	e73a      	b.n	802579a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08025924 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025928:	b097      	sub	sp, #92	@ 0x5c
 802592a:	9214      	str	r2, [sp, #80]	@ 0x50
 802592c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802592e:	9015      	str	r0, [sp, #84]	@ 0x54
 8025930:	9308      	str	r3, [sp, #32]
 8025932:	6850      	ldr	r0, [r2, #4]
 8025934:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8025938:	9111      	str	r1, [sp, #68]	@ 0x44
 802593a:	9312      	str	r3, [sp, #72]	@ 0x48
 802593c:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8025940:	fb00 1303 	mla	r3, r0, r3, r1
 8025944:	6812      	ldr	r2, [r2, #0]
 8025946:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802594a:	9309      	str	r3, [sp, #36]	@ 0x24
 802594c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802594e:	681b      	ldr	r3, [r3, #0]
 8025950:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025952:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025954:	685b      	ldr	r3, [r3, #4]
 8025956:	930c      	str	r3, [sp, #48]	@ 0x30
 8025958:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 802595c:	930a      	str	r3, [sp, #40]	@ 0x28
 802595e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025960:	2b00      	cmp	r3, #0
 8025962:	dc03      	bgt.n	802596c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025964:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025966:	2b00      	cmp	r3, #0
 8025968:	f340 83cb 	ble.w	8026102 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 802596c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802596e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025972:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025976:	1e48      	subs	r0, r1, #1
 8025978:	1e55      	subs	r5, r2, #1
 802597a:	9b08      	ldr	r3, [sp, #32]
 802597c:	2b00      	cmp	r3, #0
 802597e:	f340 81a3 	ble.w	8025cc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8025982:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8025984:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025986:	1436      	asrs	r6, r6, #16
 8025988:	ea4f 4323 	mov.w	r3, r3, asr #16
 802598c:	d406      	bmi.n	802599c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802598e:	4286      	cmp	r6, r0
 8025990:	da04      	bge.n	802599c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025992:	2b00      	cmp	r3, #0
 8025994:	db02      	blt.n	802599c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025996:	42ab      	cmp	r3, r5
 8025998:	f2c0 8197 	blt.w	8025cca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 802599c:	3601      	adds	r6, #1
 802599e:	f100 8184 	bmi.w	8025caa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80259a2:	42b1      	cmp	r1, r6
 80259a4:	f2c0 8181 	blt.w	8025caa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80259a8:	3301      	adds	r3, #1
 80259aa:	f100 817e 	bmi.w	8025caa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80259ae:	429a      	cmp	r2, r3
 80259b0:	f2c0 817b 	blt.w	8025caa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80259b4:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 80259b8:	9b08      	ldr	r3, [sp, #32]
 80259ba:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80259bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80259be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80259c0:	2b00      	cmp	r3, #0
 80259c2:	f340 81a4 	ble.w	8025d0e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80259c6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80259c8:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 80259ca:	1418      	asrs	r0, r3, #16
 80259cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80259ce:	142d      	asrs	r5, r5, #16
 80259d0:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80259d4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80259d6:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80259da:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80259dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80259e0:	f100 81f8 	bmi.w	8025dd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80259e4:	f102 3eff 	add.w	lr, r2, #4294967295
 80259e8:	4575      	cmp	r5, lr
 80259ea:	f280 81f3 	bge.w	8025dd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80259ee:	2800      	cmp	r0, #0
 80259f0:	f2c0 81f0 	blt.w	8025dd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80259f4:	f103 3eff 	add.w	lr, r3, #4294967295
 80259f8:	4570      	cmp	r0, lr
 80259fa:	f280 81eb 	bge.w	8025dd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80259fe:	b212      	sxth	r2, r2
 8025a00:	fb00 5002 	mla	r0, r0, r2, r5
 8025a04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025a06:	fa1f fe81 	uxth.w	lr, r1
 8025a0a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8025a0e:	eb03 0a00 	add.w	sl, r3, r0
 8025a12:	f813 9000 	ldrb.w	r9, [r3, r0]
 8025a16:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 8025a1a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025a1e:	b29b      	uxth	r3, r3
 8025a20:	f1bc 0f00 	cmp.w	ip, #0
 8025a24:	f000 81b9 	beq.w	8025d9a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025a28:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025a2c:	eb0a 0b02 	add.w	fp, sl, r2
 8025a30:	fa1f fa8c 	uxth.w	sl, ip
 8025a34:	fb0a fe0e 	mul.w	lr, sl, lr
 8025a38:	eba5 050e 	sub.w	r5, r5, lr
 8025a3c:	b2ad      	uxth	r5, r5
 8025a3e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025a42:	fb08 f505 	mul.w	r5, r8, r5
 8025a46:	fa1f fa8a 	uxth.w	sl, sl
 8025a4a:	eba3 030a 	sub.w	r3, r3, sl
 8025a4e:	b29b      	uxth	r3, r3
 8025a50:	940d      	str	r4, [sp, #52]	@ 0x34
 8025a52:	fb09 5303 	mla	r3, r9, r3, r5
 8025a56:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025a5a:	940e      	str	r4, [sp, #56]	@ 0x38
 8025a5c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025a5e:	fb0a 3304 	mla	r3, sl, r4, r3
 8025a62:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025a64:	fb0e 3304 	mla	r3, lr, r4, r3
 8025a68:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025a6c:	2b00      	cmp	r3, #0
 8025a6e:	f000 810f 	beq.w	8025c90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8025a72:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025a74:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8025a78:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8025a7c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8025a80:	f000 8190 	beq.w	8025da4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8025a84:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8025a88:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025a8c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025a90:	fb09 f000 	mul.w	r0, r9, r0
 8025a94:	fb0a fe0e 	mul.w	lr, sl, lr
 8025a98:	f100 0b20 	add.w	fp, r0, #32
 8025a9c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8025aa0:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8025aa4:	44ce      	add	lr, r9
 8025aa6:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8025aaa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025aae:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025ab2:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8025ab6:	ea4e 0909 	orr.w	r9, lr, r9
 8025aba:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8025abe:	8868      	ldrh	r0, [r5, #2]
 8025ac0:	d019      	beq.n	8025af6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025ac2:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8025ac6:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025aca:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025ace:	fb08 f800 	mul.w	r8, r8, r0
 8025ad2:	fb0a fe0e 	mul.w	lr, sl, lr
 8025ad6:	f108 0b20 	add.w	fp, r8, #32
 8025ada:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8025ade:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8025ae2:	4486      	add	lr, r0
 8025ae4:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025ae8:	0a00      	lsrs	r0, r0, #8
 8025aea:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025aee:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025af2:	ea4e 0000 	orr.w	r0, lr, r0
 8025af6:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025afa:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025afe:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8025b02:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8025b06:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025b0a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8025b0e:	ea4e 0909 	orr.w	r9, lr, r9
 8025b12:	ea4a 0000 	orr.w	r0, sl, r0
 8025b16:	f1bc 0f00 	cmp.w	ip, #0
 8025b1a:	f000 8145 	beq.w	8025da8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8025b1e:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8025b22:	3a01      	subs	r2, #1
 8025b24:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025b26:	0052      	lsls	r2, r2, #1
 8025b28:	3202      	adds	r2, #2
 8025b2a:	2cff      	cmp	r4, #255	@ 0xff
 8025b2c:	eb05 0e02 	add.w	lr, r5, r2
 8025b30:	5aaa      	ldrh	r2, [r5, r2]
 8025b32:	d018      	beq.n	8025b66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8025b34:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8025b38:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025b3c:	fb04 fa02 	mul.w	sl, r4, r2
 8025b40:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025b44:	fb08 f805 	mul.w	r8, r8, r5
 8025b48:	f10a 0520 	add.w	r5, sl, #32
 8025b4c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8025b50:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8025b54:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8025b58:	4442      	add	r2, r8
 8025b5a:	0a2d      	lsrs	r5, r5, #8
 8025b5c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8025b60:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8025b64:	432a      	orrs	r2, r5
 8025b66:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025b68:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025b6c:	2cff      	cmp	r4, #255	@ 0xff
 8025b6e:	d01a      	beq.n	8025ba6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8025b70:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8025b74:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8025b78:	fb04 fa05 	mul.w	sl, r4, r5
 8025b7c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025b80:	fb08 f80e 	mul.w	r8, r8, lr
 8025b84:	f10a 0e20 	add.w	lr, sl, #32
 8025b88:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8025b8c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8025b90:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8025b94:	4445      	add	r5, r8
 8025b96:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025b9a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8025b9e:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8025ba2:	ea45 050e 	orr.w	r5, r5, lr
 8025ba6:	fb1c fe01 	smulbb	lr, ip, r1
 8025baa:	f1cc 0810 	rsb	r8, ip, #16
 8025bae:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025bb2:	eba8 0801 	sub.w	r8, r8, r1
 8025bb6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8025bba:	4341      	muls	r1, r0
 8025bbc:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8025bc0:	fb09 1108 	mla	r1, r9, r8, r1
 8025bc4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025bc8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025bcc:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025bd0:	ea4a 0202 	orr.w	r2, sl, r2
 8025bd4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025bd8:	fb0c 1102 	mla	r1, ip, r2, r1
 8025bdc:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8025be0:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8025be4:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8025be8:	ea4b 0505 	orr.w	r5, fp, r5
 8025bec:	fb0e 1e05 	mla	lr, lr, r5, r1
 8025bf0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025bf4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025bf8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025bfc:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8025c00:	ea42 0e0e 	orr.w	lr, r2, lr
 8025c04:	fa1f f28e 	uxth.w	r2, lr
 8025c08:	2bff      	cmp	r3, #255	@ 0xff
 8025c0a:	d103      	bne.n	8025c14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8025c0c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8025c0e:	29ff      	cmp	r1, #255	@ 0xff
 8025c10:	f000 80de 	beq.w	8025dd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8025c14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c16:	8838      	ldrh	r0, [r7, #0]
 8025c18:	434b      	muls	r3, r1
 8025c1a:	f103 0c01 	add.w	ip, r3, #1
 8025c1e:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8025c22:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8025c26:	fa5f fc83 	uxtb.w	ip, r3
 8025c2a:	1203      	asrs	r3, r0, #8
 8025c2c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8025c30:	fb13 f30c 	smulbb	r3, r3, ip
 8025c34:	1215      	asrs	r5, r2, #8
 8025c36:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8025c3a:	fb05 3501 	mla	r5, r5, r1, r3
 8025c3e:	10c3      	asrs	r3, r0, #3
 8025c40:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8025c44:	fb13 f30c 	smulbb	r3, r3, ip
 8025c48:	10d1      	asrs	r1, r2, #3
 8025c4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025c4c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8025c50:	fb01 3104 	mla	r1, r1, r4, r3
 8025c54:	00c3      	lsls	r3, r0, #3
 8025c56:	b2db      	uxtb	r3, r3
 8025c58:	fb13 f30c 	smulbb	r3, r3, ip
 8025c5c:	00d2      	lsls	r2, r2, #3
 8025c5e:	b2d2      	uxtb	r2, r2
 8025c60:	fb02 3304 	mla	r3, r2, r4, r3
 8025c64:	b2ad      	uxth	r5, r5
 8025c66:	b29a      	uxth	r2, r3
 8025c68:	1c6b      	adds	r3, r5, #1
 8025c6a:	b289      	uxth	r1, r1
 8025c6c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025c70:	1c53      	adds	r3, r2, #1
 8025c72:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025c76:	1c4a      	adds	r2, r1, #1
 8025c78:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025c7c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8025c80:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025c84:	0949      	lsrs	r1, r1, #5
 8025c86:	432b      	orrs	r3, r5
 8025c88:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025c8c:	430b      	orrs	r3, r1
 8025c8e:	803b      	strh	r3, [r7, #0]
 8025c90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8025c92:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8025c94:	3702      	adds	r7, #2
 8025c96:	4413      	add	r3, r2
 8025c98:	9321      	str	r3, [sp, #132]	@ 0x84
 8025c9a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8025c9c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025c9e:	441a      	add	r2, r3
 8025ca0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025ca2:	9222      	str	r2, [sp, #136]	@ 0x88
 8025ca4:	3b01      	subs	r3, #1
 8025ca6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025ca8:	e689      	b.n	80259be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8025caa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8025cac:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8025cae:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8025cb0:	4433      	add	r3, r6
 8025cb2:	9321      	str	r3, [sp, #132]	@ 0x84
 8025cb4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025cb6:	441c      	add	r4, r3
 8025cb8:	9b08      	ldr	r3, [sp, #32]
 8025cba:	9422      	str	r4, [sp, #136]	@ 0x88
 8025cbc:	3b01      	subs	r3, #1
 8025cbe:	9308      	str	r3, [sp, #32]
 8025cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025cc2:	3302      	adds	r3, #2
 8025cc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8025cc6:	e658      	b.n	802597a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8025cc8:	d028      	beq.n	8025d1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8025cca:	9b08      	ldr	r3, [sp, #32]
 8025ccc:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8025cce:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8025cd0:	3b01      	subs	r3, #1
 8025cd2:	fb00 5003 	mla	r0, r0, r3, r5
 8025cd6:	1400      	asrs	r0, r0, #16
 8025cd8:	f53f ae6c 	bmi.w	80259b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025cdc:	3901      	subs	r1, #1
 8025cde:	4288      	cmp	r0, r1
 8025ce0:	f6bf ae68 	bge.w	80259b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025ce4:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8025ce6:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8025ce8:	fb01 0303 	mla	r3, r1, r3, r0
 8025cec:	141b      	asrs	r3, r3, #16
 8025cee:	f53f ae61 	bmi.w	80259b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025cf2:	3a01      	subs	r2, #1
 8025cf4:	4293      	cmp	r3, r2
 8025cf6:	f6bf ae5d 	bge.w	80259b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025cfa:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8025cfe:	9b08      	ldr	r3, [sp, #32]
 8025d00:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8025d04:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025d06:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025d08:	2b00      	cmp	r3, #0
 8025d0a:	f300 8082 	bgt.w	8025e12 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8025d0e:	9b08      	ldr	r3, [sp, #32]
 8025d10:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025d14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025d16:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025d1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8025d1c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025d1e:	2b00      	cmp	r3, #0
 8025d20:	f340 81ef 	ble.w	8026102 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8025d24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025d28:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025d2c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025d30:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025d34:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025d38:	eef0 6a62 	vmov.f32	s13, s5
 8025d3c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025d40:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025d44:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025d48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025d4c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025d50:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 8025d54:	eef0 6a43 	vmov.f32	s13, s6
 8025d58:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025d5c:	ee12 2a90 	vmov	r2, s5
 8025d60:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025d64:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025d66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025d6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8025d6e:	ee13 2a10 	vmov	r2, s6
 8025d72:	9323      	str	r3, [sp, #140]	@ 0x8c
 8025d74:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025d76:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 8025d7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8025d7e:	9324      	str	r3, [sp, #144]	@ 0x90
 8025d80:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025d82:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025d84:	3b01      	subs	r3, #1
 8025d86:	9311      	str	r3, [sp, #68]	@ 0x44
 8025d88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025d8a:	bf08      	it	eq
 8025d8c:	4613      	moveq	r3, r2
 8025d8e:	eeb0 3a67 	vmov.f32	s6, s15
 8025d92:	9308      	str	r3, [sp, #32]
 8025d94:	eef0 2a47 	vmov.f32	s5, s14
 8025d98:	e5e1      	b.n	802595e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025d9a:	fb08 f505 	mul.w	r5, r8, r5
 8025d9e:	fb09 5303 	mla	r3, r9, r3, r5
 8025da2:	e661      	b.n	8025a68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8025da4:	4681      	mov	r9, r0
 8025da6:	e688      	b.n	8025aba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8025da8:	f1c1 0210 	rsb	r2, r1, #16
 8025dac:	4341      	muls	r1, r0
 8025dae:	fb09 1902 	mla	r9, r9, r2, r1
 8025db2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025db6:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8025dba:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025dbe:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025dc2:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8025dc6:	ea42 0909 	orr.w	r9, r2, r9
 8025dca:	fa1f f289 	uxth.w	r2, r9
 8025dce:	e71b      	b.n	8025c08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025dd0:	803a      	strh	r2, [r7, #0]
 8025dd2:	e75d      	b.n	8025c90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8025dd4:	f115 0e01 	adds.w	lr, r5, #1
 8025dd8:	f53f af5a 	bmi.w	8025c90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8025ddc:	4572      	cmp	r2, lr
 8025dde:	f6ff af57 	blt.w	8025c90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8025de2:	f110 0e01 	adds.w	lr, r0, #1
 8025de6:	f53f af53 	bmi.w	8025c90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8025dea:	4573      	cmp	r3, lr
 8025dec:	f6ff af50 	blt.w	8025c90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8025df0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025df2:	b21b      	sxth	r3, r3
 8025df4:	b212      	sxth	r2, r2
 8025df6:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8025dfa:	9301      	str	r3, [sp, #4]
 8025dfc:	9200      	str	r2, [sp, #0]
 8025dfe:	e9cd c405 	strd	ip, r4, [sp, #20]
 8025e02:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8025e06:	9502      	str	r5, [sp, #8]
 8025e08:	4639      	mov	r1, r7
 8025e0a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8025e0c:	f7ff fc04 	bl	8025618 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8025e10:	e73e      	b.n	8025c90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8025e12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8025e14:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025e18:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025e1a:	fa1f fc82 	uxth.w	ip, r2
 8025e1e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8025e22:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025e24:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8025e28:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025e2c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025e2e:	141f      	asrs	r7, r3, #16
 8025e30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8025e32:	141b      	asrs	r3, r3, #16
 8025e34:	fb01 3707 	mla	r7, r1, r7, r3
 8025e38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025e3a:	eb03 0a07 	add.w	sl, r3, r7
 8025e3e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8025e42:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8025e46:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025e4a:	b29b      	uxth	r3, r3
 8025e4c:	2d00      	cmp	r5, #0
 8025e4e:	f000 813d 	beq.w	80260cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8025e52:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8025e56:	eb0a 0b01 	add.w	fp, sl, r1
 8025e5a:	fa1f fa85 	uxth.w	sl, r5
 8025e5e:	fb0a fc0c 	mul.w	ip, sl, ip
 8025e62:	eba0 000c 	sub.w	r0, r0, ip
 8025e66:	b280      	uxth	r0, r0
 8025e68:	fb08 f000 	mul.w	r0, r8, r0
 8025e6c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8025e70:	fa1f fa8a 	uxth.w	sl, sl
 8025e74:	eba3 030a 	sub.w	r3, r3, sl
 8025e78:	b29b      	uxth	r3, r3
 8025e7a:	fb09 0303 	mla	r3, r9, r3, r0
 8025e7e:	940f      	str	r4, [sp, #60]	@ 0x3c
 8025e80:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8025e82:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025e86:	fb0a 3300 	mla	r3, sl, r0, r3
 8025e8a:	fb0c 3304 	mla	r3, ip, r4, r3
 8025e8e:	9410      	str	r4, [sp, #64]	@ 0x40
 8025e90:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025e94:	2b00      	cmp	r3, #0
 8025e96:	f000 810b 	beq.w	80260b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8025e9a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8025e9c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025e9e:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8025ea2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8025ea6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8025eaa:	f000 8114 	beq.w	80260d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 8025eae:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8025eb2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025eb6:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8025eba:	fb09 f707 	mul.w	r7, r9, r7
 8025ebe:	fb0a fc0c 	mul.w	ip, sl, ip
 8025ec2:	f107 0b20 	add.w	fp, r7, #32
 8025ec6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8025eca:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8025ece:	44cc      	add	ip, r9
 8025ed0:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8025ed4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025ed8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025edc:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8025ee0:	ea4c 0909 	orr.w	r9, ip, r9
 8025ee4:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8025ee8:	8847      	ldrh	r7, [r0, #2]
 8025eea:	d019      	beq.n	8025f20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 8025eec:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8025ef0:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025ef4:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8025ef8:	fb08 f807 	mul.w	r8, r8, r7
 8025efc:	fb0a fc0c 	mul.w	ip, sl, ip
 8025f00:	f108 0b20 	add.w	fp, r8, #32
 8025f04:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8025f08:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8025f0c:	44bc      	add	ip, r7
 8025f0e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8025f12:	0a3f      	lsrs	r7, r7, #8
 8025f14:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025f18:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8025f1c:	ea4c 0707 	orr.w	r7, ip, r7
 8025f20:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8025f24:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8025f28:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8025f2c:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8025f30:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025f34:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8025f38:	ea4c 0909 	orr.w	r9, ip, r9
 8025f3c:	ea4a 0707 	orr.w	r7, sl, r7
 8025f40:	2d00      	cmp	r5, #0
 8025f42:	f000 80ca 	beq.w	80260da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8025f46:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8025f4a:	3901      	subs	r1, #1
 8025f4c:	0049      	lsls	r1, r1, #1
 8025f4e:	3102      	adds	r1, #2
 8025f50:	eb00 0c01 	add.w	ip, r0, r1
 8025f54:	5a41      	ldrh	r1, [r0, r1]
 8025f56:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8025f58:	28ff      	cmp	r0, #255	@ 0xff
 8025f5a:	d019      	beq.n	8025f90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8025f5c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025f5e:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8025f62:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025f66:	fb04 fa01 	mul.w	sl, r4, r1
 8025f6a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025f6e:	fb08 f800 	mul.w	r8, r8, r0
 8025f72:	f10a 0020 	add.w	r0, sl, #32
 8025f76:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8025f7a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8025f7e:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8025f82:	4441      	add	r1, r8
 8025f84:	0a00      	lsrs	r0, r0, #8
 8025f86:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8025f8a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025f8e:	4301      	orrs	r1, r0
 8025f90:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025f92:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8025f96:	2cff      	cmp	r4, #255	@ 0xff
 8025f98:	d01a      	beq.n	8025fd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 8025f9a:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8025f9e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025fa2:	fb04 fa00 	mul.w	sl, r4, r0
 8025fa6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025faa:	fb08 f80c 	mul.w	r8, r8, ip
 8025fae:	f10a 0c20 	add.w	ip, sl, #32
 8025fb2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8025fb6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8025fba:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8025fbe:	4440      	add	r0, r8
 8025fc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025fc4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8025fc8:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8025fcc:	ea40 000c 	orr.w	r0, r0, ip
 8025fd0:	fb15 fc02 	smulbb	ip, r5, r2
 8025fd4:	f1c5 0810 	rsb	r8, r5, #16
 8025fd8:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8025fdc:	eba8 0802 	sub.w	r8, r8, r2
 8025fe0:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8025fe4:	437a      	muls	r2, r7
 8025fe6:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8025fea:	fb09 2208 	mla	r2, r9, r8, r2
 8025fee:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025ff2:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025ff6:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8025ffa:	ea4a 0101 	orr.w	r1, sl, r1
 8025ffe:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8026002:	fb05 2201 	mla	r2, r5, r1, r2
 8026006:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802600a:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802600e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026012:	ea4b 0000 	orr.w	r0, fp, r0
 8026016:	fb0c 2200 	mla	r2, ip, r0, r2
 802601a:	0d57      	lsrs	r7, r2, #21
 802601c:	0952      	lsrs	r2, r2, #5
 802601e:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026022:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026026:	433a      	orrs	r2, r7
 8026028:	2bff      	cmp	r3, #255	@ 0xff
 802602a:	b292      	uxth	r2, r2
 802602c:	d102      	bne.n	8026034 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802602e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026030:	29ff      	cmp	r1, #255	@ 0xff
 8026032:	d063      	beq.n	80260fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 8026034:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026036:	f8be 1000 	ldrh.w	r1, [lr]
 802603a:	4343      	muls	r3, r0
 802603c:	1c58      	adds	r0, r3, #1
 802603e:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8026042:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8026046:	1208      	asrs	r0, r1, #8
 8026048:	b2db      	uxtb	r3, r3
 802604a:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802604e:	fb10 f003 	smulbb	r0, r0, r3
 8026052:	10cf      	asrs	r7, r1, #3
 8026054:	00c9      	lsls	r1, r1, #3
 8026056:	b2c9      	uxtb	r1, r1
 8026058:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802605a:	1215      	asrs	r5, r2, #8
 802605c:	fb11 f103 	smulbb	r1, r1, r3
 8026060:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8026064:	fb05 0504 	mla	r5, r5, r4, r0
 8026068:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802606c:	10d0      	asrs	r0, r2, #3
 802606e:	00d2      	lsls	r2, r2, #3
 8026070:	fb17 f703 	smulbb	r7, r7, r3
 8026074:	b2d2      	uxtb	r2, r2
 8026076:	fb02 1204 	mla	r2, r2, r4, r1
 802607a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802607e:	fb00 7004 	mla	r0, r0, r4, r7
 8026082:	b2ad      	uxth	r5, r5
 8026084:	b292      	uxth	r2, r2
 8026086:	1c6b      	adds	r3, r5, #1
 8026088:	1c57      	adds	r7, r2, #1
 802608a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802608e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8026092:	b280      	uxth	r0, r0
 8026094:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8026098:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802609c:	433d      	orrs	r5, r7
 802609e:	1c47      	adds	r7, r0, #1
 80260a0:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80260a4:	097f      	lsrs	r7, r7, #5
 80260a6:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80260aa:	433d      	orrs	r5, r7
 80260ac:	f8ae 5000 	strh.w	r5, [lr]
 80260b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80260b2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80260b4:	f10e 0e02 	add.w	lr, lr, #2
 80260b8:	4413      	add	r3, r2
 80260ba:	9321      	str	r3, [sp, #132]	@ 0x84
 80260bc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80260be:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80260c0:	441a      	add	r2, r3
 80260c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80260c4:	9222      	str	r2, [sp, #136]	@ 0x88
 80260c6:	3b01      	subs	r3, #1
 80260c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80260ca:	e61c      	b.n	8025d06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 80260cc:	fb08 f000 	mul.w	r0, r8, r0
 80260d0:	fb09 0303 	mla	r3, r9, r3, r0
 80260d4:	e6dc      	b.n	8025e90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 80260d6:	46b9      	mov	r9, r7
 80260d8:	e704      	b.n	8025ee4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 80260da:	f1c2 0110 	rsb	r1, r2, #16
 80260de:	437a      	muls	r2, r7
 80260e0:	fb09 2901 	mla	r9, r9, r1, r2
 80260e4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80260e8:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80260ec:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80260f0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80260f4:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80260f8:	4302      	orrs	r2, r0
 80260fa:	e795      	b.n	8026028 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 80260fc:	f8ae 2000 	strh.w	r2, [lr]
 8026100:	e7d6      	b.n	80260b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8026102:	b017      	add	sp, #92	@ 0x5c
 8026104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026108 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8026108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802610c:	b085      	sub	sp, #20
 802610e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 8026112:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8026116:	fb00 7406 	mla	r4, r0, r6, r7
 802611a:	2800      	cmp	r0, #0
 802611c:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8026120:	9103      	str	r1, [sp, #12]
 8026122:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 8026126:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 802612a:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 802612e:	9501      	str	r5, [sp, #4]
 8026130:	eb02 0904 	add.w	r9, r2, r4
 8026134:	f2c0 8141 	blt.w	80263ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8026138:	4583      	cmp	fp, r0
 802613a:	f340 813e 	ble.w	80263ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 802613e:	2f00      	cmp	r7, #0
 8026140:	f2c0 8137 	blt.w	80263b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8026144:	42be      	cmp	r6, r7
 8026146:	f340 8134 	ble.w	80263b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 802614a:	f812 c004 	ldrb.w	ip, [r2, r4]
 802614e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8026152:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8026156:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802615a:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 802615e:	4355      	muls	r5, r2
 8026160:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026164:	fb0c f203 	mul.w	r2, ip, r3
 8026168:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 802616c:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 8026170:	441d      	add	r5, r3
 8026172:	f102 0320 	add.w	r3, r2, #32
 8026176:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802617a:	0a1b      	lsrs	r3, r3, #8
 802617c:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8026180:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026184:	431c      	orrs	r4, r3
 8026186:	1c7b      	adds	r3, r7, #1
 8026188:	f100 811c 	bmi.w	80263c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 802618c:	429e      	cmp	r6, r3
 802618e:	f340 8119 	ble.w	80263c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8026192:	2900      	cmp	r1, #0
 8026194:	f000 8119 	beq.w	80263ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8026198:	9a01      	ldr	r2, [sp, #4]
 802619a:	f899 3001 	ldrb.w	r3, [r9, #1]
 802619e:	8855      	ldrh	r5, [r2, #2]
 80261a0:	ea4f 08e3 	mov.w	r8, r3, asr #3
 80261a4:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 80261a8:	fb08 f802 	mul.w	r8, r8, r2
 80261ac:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80261b0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80261b4:	435d      	muls	r5, r3
 80261b6:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80261ba:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80261be:	44d0      	add	r8, sl
 80261c0:	f105 0a20 	add.w	sl, r5, #32
 80261c4:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80261c8:	0a2d      	lsrs	r5, r5, #8
 80261ca:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80261ce:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80261d2:	432a      	orrs	r2, r5
 80261d4:	3001      	adds	r0, #1
 80261d6:	f100 80fe 	bmi.w	80263d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 80261da:	4583      	cmp	fp, r0
 80261dc:	f340 80fb 	ble.w	80263d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 80261e0:	f1be 0f00 	cmp.w	lr, #0
 80261e4:	f000 80fc 	beq.w	80263e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 80261e8:	2f00      	cmp	r7, #0
 80261ea:	f2c0 80f1 	blt.w	80263d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 80261ee:	42be      	cmp	r6, r7
 80261f0:	f340 80ee 	ble.w	80263d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 80261f4:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 80261f8:	9801      	ldr	r0, [sp, #4]
 80261fa:	f819 5006 	ldrb.w	r5, [r9, r6]
 80261fe:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8026202:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8026206:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 802620a:	fb0a fa00 	mul.w	sl, sl, r0
 802620e:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8026212:	fb05 f808 	mul.w	r8, r5, r8
 8026216:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 802621a:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 802621e:	4482      	add	sl, r0
 8026220:	f108 0020 	add.w	r0, r8, #32
 8026224:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026228:	0a00      	lsrs	r0, r0, #8
 802622a:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802622e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026232:	ea4b 0b00 	orr.w	fp, fp, r0
 8026236:	3701      	adds	r7, #1
 8026238:	f100 80d7 	bmi.w	80263ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 802623c:	42be      	cmp	r6, r7
 802623e:	f340 80d4 	ble.w	80263ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8026242:	2900      	cmp	r1, #0
 8026244:	f000 80d4 	beq.w	80263f0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8026248:	9801      	ldr	r0, [sp, #4]
 802624a:	3601      	adds	r6, #1
 802624c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8026250:	f819 7006 	ldrb.w	r7, [r9, r6]
 8026254:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 8026258:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802625c:	fb07 f800 	mul.w	r8, r7, r0
 8026260:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8026264:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8026268:	fb09 f906 	mul.w	r9, r9, r6
 802626c:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8026270:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8026274:	44d1      	add	r9, sl
 8026276:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802627a:	f108 0020 	add.w	r0, r8, #32
 802627e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026282:	0a00      	lsrs	r0, r0, #8
 8026284:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026288:	4330      	orrs	r0, r6
 802628a:	b28e      	uxth	r6, r1
 802628c:	fa1f f98e 	uxth.w	r9, lr
 8026290:	fb06 f809 	mul.w	r8, r6, r9
 8026294:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8026298:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802629c:	0136      	lsls	r6, r6, #4
 802629e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80262a2:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 80262a6:	9601      	str	r6, [sp, #4]
 80262a8:	ea4a 0404 	orr.w	r4, sl, r4
 80262ac:	fa1f f689 	uxth.w	r6, r9
 80262b0:	9602      	str	r6, [sp, #8]
 80262b2:	4626      	mov	r6, r4
 80262b4:	fb11 f90e 	smulbb	r9, r1, lr
 80262b8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80262bc:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80262c0:	f1ce 0410 	rsb	r4, lr, #16
 80262c4:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80262c8:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80262cc:	1a64      	subs	r4, r4, r1
 80262ce:	ea4a 0202 	orr.w	r2, sl, r2
 80262d2:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80262d6:	434a      	muls	r2, r1
 80262d8:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80262dc:	fb04 2406 	mla	r4, r4, r6, r2
 80262e0:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80262e4:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80262e8:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80262ec:	ea4a 0000 	orr.w	r0, sl, r0
 80262f0:	fb09 4200 	mla	r2, r9, r0, r4
 80262f4:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80262f8:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 80262fc:	9801      	ldr	r0, [sp, #4]
 80262fe:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8026302:	ea44 0b0b 	orr.w	fp, r4, fp
 8026306:	9c02      	ldr	r4, [sp, #8]
 8026308:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 802630c:	1b00      	subs	r0, r0, r4
 802630e:	9c01      	ldr	r4, [sp, #4]
 8026310:	b280      	uxth	r0, r0
 8026312:	eba4 0608 	sub.w	r6, r4, r8
 8026316:	b2b6      	uxth	r6, r6
 8026318:	4373      	muls	r3, r6
 802631a:	fb0c 3300 	mla	r3, ip, r0, r3
 802631e:	9802      	ldr	r0, [sp, #8]
 8026320:	9903      	ldr	r1, [sp, #12]
 8026322:	fb00 3505 	mla	r5, r0, r5, r3
 8026326:	fb08 5707 	mla	r7, r8, r7, r5
 802632a:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802632e:	8809      	ldrh	r1, [r1, #0]
 8026330:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8026334:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8026338:	120b      	asrs	r3, r1, #8
 802633a:	b2ff      	uxtb	r7, r7
 802633c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8026340:	437b      	muls	r3, r7
 8026342:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026346:	10c8      	asrs	r0, r1, #3
 8026348:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802634c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026350:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8026354:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8026358:	00c9      	lsls	r1, r1, #3
 802635a:	4378      	muls	r0, r7
 802635c:	ea42 0e0e 	orr.w	lr, r2, lr
 8026360:	b2c9      	uxtb	r1, r1
 8026362:	fa1f f28e 	uxth.w	r2, lr
 8026366:	434f      	muls	r7, r1
 8026368:	1c59      	adds	r1, r3, #1
 802636a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802636e:	1213      	asrs	r3, r2, #8
 8026370:	f023 0307 	bic.w	r3, r3, #7
 8026374:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026378:	1c41      	adds	r1, r0, #1
 802637a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802637e:	10d1      	asrs	r1, r2, #3
 8026380:	f021 0103 	bic.w	r1, r1, #3
 8026384:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8026388:	021b      	lsls	r3, r3, #8
 802638a:	00c9      	lsls	r1, r1, #3
 802638c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8026390:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8026394:	430b      	orrs	r3, r1
 8026396:	1c79      	adds	r1, r7, #1
 8026398:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802639c:	00d2      	lsls	r2, r2, #3
 802639e:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80263a2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80263a6:	431a      	orrs	r2, r3
 80263a8:	9b03      	ldr	r3, [sp, #12]
 80263aa:	801a      	strh	r2, [r3, #0]
 80263ac:	b005      	add	sp, #20
 80263ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80263b2:	f04f 0c00 	mov.w	ip, #0
 80263b6:	4664      	mov	r4, ip
 80263b8:	e6e5      	b.n	8026186 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 80263ba:	2300      	movs	r3, #0
 80263bc:	469c      	mov	ip, r3
 80263be:	461a      	mov	r2, r3
 80263c0:	461c      	mov	r4, r3
 80263c2:	e707      	b.n	80261d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80263c4:	2300      	movs	r3, #0
 80263c6:	461a      	mov	r2, r3
 80263c8:	e704      	b.n	80261d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80263ca:	460b      	mov	r3, r1
 80263cc:	460a      	mov	r2, r1
 80263ce:	e701      	b.n	80261d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80263d0:	2500      	movs	r5, #0
 80263d2:	46ab      	mov	fp, r5
 80263d4:	e72f      	b.n	8026236 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 80263d6:	2700      	movs	r7, #0
 80263d8:	463d      	mov	r5, r7
 80263da:	4638      	mov	r0, r7
 80263dc:	46bb      	mov	fp, r7
 80263de:	e754      	b.n	802628a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80263e0:	4677      	mov	r7, lr
 80263e2:	4675      	mov	r5, lr
 80263e4:	4670      	mov	r0, lr
 80263e6:	46f3      	mov	fp, lr
 80263e8:	e74f      	b.n	802628a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80263ea:	2700      	movs	r7, #0
 80263ec:	4638      	mov	r0, r7
 80263ee:	e74c      	b.n	802628a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80263f0:	460f      	mov	r7, r1
 80263f2:	4608      	mov	r0, r1
 80263f4:	e749      	b.n	802628a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

080263f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80263f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80263fc:	b093      	sub	sp, #76	@ 0x4c
 80263fe:	9210      	str	r2, [sp, #64]	@ 0x40
 8026400:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8026402:	9011      	str	r0, [sp, #68]	@ 0x44
 8026404:	6850      	ldr	r0, [r2, #4]
 8026406:	910e      	str	r1, [sp, #56]	@ 0x38
 8026408:	9306      	str	r3, [sp, #24]
 802640a:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802640e:	fb00 1303 	mla	r3, r0, r3, r1
 8026412:	6812      	ldr	r2, [r2, #0]
 8026414:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026418:	9307      	str	r3, [sp, #28]
 802641a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802641c:	681b      	ldr	r3, [r3, #0]
 802641e:	9308      	str	r3, [sp, #32]
 8026420:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026422:	685b      	ldr	r3, [r3, #4]
 8026424:	9309      	str	r3, [sp, #36]	@ 0x24
 8026426:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026428:	2b00      	cmp	r3, #0
 802642a:	dc03      	bgt.n	8026434 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802642c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802642e:	2b00      	cmp	r3, #0
 8026430:	f340 83b4 	ble.w	8026b9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8026434:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026436:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802643a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802643e:	1e48      	subs	r0, r1, #1
 8026440:	1e55      	subs	r5, r2, #1
 8026442:	9b06      	ldr	r3, [sp, #24]
 8026444:	2b00      	cmp	r3, #0
 8026446:	f340 8163 	ble.w	8026710 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802644a:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 802644c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802644e:	1436      	asrs	r6, r6, #16
 8026450:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026454:	d406      	bmi.n	8026464 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8026456:	4286      	cmp	r6, r0
 8026458:	da04      	bge.n	8026464 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802645a:	2b00      	cmp	r3, #0
 802645c:	db02      	blt.n	8026464 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802645e:	42ab      	cmp	r3, r5
 8026460:	f2c0 8157 	blt.w	8026712 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8026464:	3601      	adds	r6, #1
 8026466:	f100 8144 	bmi.w	80266f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802646a:	42b1      	cmp	r1, r6
 802646c:	f2c0 8141 	blt.w	80266f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8026470:	3301      	adds	r3, #1
 8026472:	f100 813e 	bmi.w	80266f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8026476:	429a      	cmp	r2, r3
 8026478:	f2c0 813b 	blt.w	80266f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802647c:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8026480:	9b06      	ldr	r3, [sp, #24]
 8026482:	9f07      	ldr	r7, [sp, #28]
 8026484:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026486:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026488:	2b00      	cmp	r3, #0
 802648a:	f340 8164 	ble.w	8026756 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 802648e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8026490:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8026492:	1418      	asrs	r0, r3, #16
 8026494:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8026496:	142d      	asrs	r5, r5, #16
 8026498:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802649c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802649e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80264a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80264a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80264a8:	f100 81ee 	bmi.w	8026888 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80264ac:	f102 3eff 	add.w	lr, r2, #4294967295
 80264b0:	4575      	cmp	r5, lr
 80264b2:	f280 81e9 	bge.w	8026888 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80264b6:	2800      	cmp	r0, #0
 80264b8:	f2c0 81e6 	blt.w	8026888 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80264bc:	f103 3eff 	add.w	lr, r3, #4294967295
 80264c0:	4570      	cmp	r0, lr
 80264c2:	f280 81e1 	bge.w	8026888 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80264c6:	b212      	sxth	r2, r2
 80264c8:	fb00 5002 	mla	r0, r0, r2, r5
 80264cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80264ce:	fa1f fe81 	uxth.w	lr, r1
 80264d2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80264d6:	eb03 0a00 	add.w	sl, r3, r0
 80264da:	f813 9000 	ldrb.w	r9, [r3, r0]
 80264de:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 80264e2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80264e6:	b29b      	uxth	r3, r3
 80264e8:	f1bc 0f00 	cmp.w	ip, #0
 80264ec:	f000 8179 	beq.w	80267e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80264f0:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80264f4:	eb0a 0b02 	add.w	fp, sl, r2
 80264f8:	fa1f fa8c 	uxth.w	sl, ip
 80264fc:	fb0a fe0e 	mul.w	lr, sl, lr
 8026500:	eba5 050e 	sub.w	r5, r5, lr
 8026504:	b2ad      	uxth	r5, r5
 8026506:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802650a:	fb08 f505 	mul.w	r5, r8, r5
 802650e:	fa1f fa8a 	uxth.w	sl, sl
 8026512:	eba3 030a 	sub.w	r3, r3, sl
 8026516:	b29b      	uxth	r3, r3
 8026518:	940a      	str	r4, [sp, #40]	@ 0x28
 802651a:	fb09 5303 	mla	r3, r9, r3, r5
 802651e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026522:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026524:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026526:	fb0a 3304 	mla	r3, sl, r4, r3
 802652a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802652c:	fb0e 3304 	mla	r3, lr, r4, r3
 8026530:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026534:	2b00      	cmp	r3, #0
 8026536:	f000 80cf 	beq.w	80266d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802653a:	9c08      	ldr	r4, [sp, #32]
 802653c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8026540:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8026544:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8026548:	f000 8150 	beq.w	80267ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802654c:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8026550:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026554:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026558:	fb09 f000 	mul.w	r0, r9, r0
 802655c:	fb0a fe0e 	mul.w	lr, sl, lr
 8026560:	f100 0b20 	add.w	fp, r0, #32
 8026564:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8026568:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 802656c:	44ce      	add	lr, r9
 802656e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8026572:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026576:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802657a:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 802657e:	ea4e 0909 	orr.w	r9, lr, r9
 8026582:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8026586:	8868      	ldrh	r0, [r5, #2]
 8026588:	d019      	beq.n	80265be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802658a:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 802658e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026592:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026596:	fb08 f800 	mul.w	r8, r8, r0
 802659a:	fb0a fe0e 	mul.w	lr, sl, lr
 802659e:	f108 0b20 	add.w	fp, r8, #32
 80265a2:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80265a6:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 80265aa:	4486      	add	lr, r0
 80265ac:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80265b0:	0a00      	lsrs	r0, r0, #8
 80265b2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80265b6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80265ba:	ea4e 0000 	orr.w	r0, lr, r0
 80265be:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80265c2:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80265c6:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80265ca:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80265ce:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80265d2:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80265d6:	ea4e 0909 	orr.w	r9, lr, r9
 80265da:	ea4a 0000 	orr.w	r0, sl, r0
 80265de:	f1bc 0f00 	cmp.w	ip, #0
 80265e2:	f000 8105 	beq.w	80267f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80265e6:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 80265ea:	3a01      	subs	r2, #1
 80265ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80265ee:	0052      	lsls	r2, r2, #1
 80265f0:	3202      	adds	r2, #2
 80265f2:	2cff      	cmp	r4, #255	@ 0xff
 80265f4:	eb05 0e02 	add.w	lr, r5, r2
 80265f8:	5aaa      	ldrh	r2, [r5, r2]
 80265fa:	d018      	beq.n	802662e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80265fc:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8026600:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026604:	fb04 fa02 	mul.w	sl, r4, r2
 8026608:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802660c:	fb08 f805 	mul.w	r8, r8, r5
 8026610:	f10a 0520 	add.w	r5, sl, #32
 8026614:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8026618:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 802661c:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026620:	4442      	add	r2, r8
 8026622:	0a2d      	lsrs	r5, r5, #8
 8026624:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8026628:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802662c:	432a      	orrs	r2, r5
 802662e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026630:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8026634:	2cff      	cmp	r4, #255	@ 0xff
 8026636:	d01a      	beq.n	802666e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8026638:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 802663c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026640:	fb04 fa05 	mul.w	sl, r4, r5
 8026644:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026648:	fb08 f80e 	mul.w	r8, r8, lr
 802664c:	f10a 0e20 	add.w	lr, sl, #32
 8026650:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8026654:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8026658:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802665c:	4445      	add	r5, r8
 802665e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026662:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8026666:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 802666a:	ea45 050e 	orr.w	r5, r5, lr
 802666e:	fb1c fe01 	smulbb	lr, ip, r1
 8026672:	f1cc 0810 	rsb	r8, ip, #16
 8026676:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802667a:	eba8 0801 	sub.w	r8, r8, r1
 802667e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8026682:	4341      	muls	r1, r0
 8026684:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8026688:	fb09 1108 	mla	r1, r9, r8, r1
 802668c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026690:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026694:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026698:	ea4a 0202 	orr.w	r2, sl, r2
 802669c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80266a0:	fb0c 1102 	mla	r1, ip, r2, r1
 80266a4:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80266a8:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80266ac:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 80266b0:	ea4b 0505 	orr.w	r5, fp, r5
 80266b4:	fb0e 1e05 	mla	lr, lr, r5, r1
 80266b8:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80266bc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80266c0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80266c4:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80266c8:	ea42 0e0e 	orr.w	lr, r2, lr
 80266cc:	fa1f f28e 	uxth.w	r2, lr
 80266d0:	2bff      	cmp	r3, #255	@ 0xff
 80266d2:	f040 80a1 	bne.w	8026818 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80266d6:	803a      	strh	r2, [r7, #0]
 80266d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80266da:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80266dc:	3702      	adds	r7, #2
 80266de:	4413      	add	r3, r2
 80266e0:	931d      	str	r3, [sp, #116]	@ 0x74
 80266e2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80266e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80266e6:	441a      	add	r2, r3
 80266e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80266ea:	921e      	str	r2, [sp, #120]	@ 0x78
 80266ec:	3b01      	subs	r3, #1
 80266ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80266f0:	e6c9      	b.n	8026486 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80266f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80266f4:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 80266f6:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 80266f8:	4433      	add	r3, r6
 80266fa:	931d      	str	r3, [sp, #116]	@ 0x74
 80266fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80266fe:	441c      	add	r4, r3
 8026700:	9b06      	ldr	r3, [sp, #24]
 8026702:	941e      	str	r4, [sp, #120]	@ 0x78
 8026704:	3b01      	subs	r3, #1
 8026706:	9306      	str	r3, [sp, #24]
 8026708:	9b07      	ldr	r3, [sp, #28]
 802670a:	3302      	adds	r3, #2
 802670c:	9307      	str	r3, [sp, #28]
 802670e:	e698      	b.n	8026442 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8026710:	d028      	beq.n	8026764 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8026712:	9b06      	ldr	r3, [sp, #24]
 8026714:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8026716:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8026718:	3b01      	subs	r3, #1
 802671a:	fb00 5003 	mla	r0, r0, r3, r5
 802671e:	1400      	asrs	r0, r0, #16
 8026720:	f53f aeac 	bmi.w	802647c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026724:	3901      	subs	r1, #1
 8026726:	4288      	cmp	r0, r1
 8026728:	f6bf aea8 	bge.w	802647c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802672c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802672e:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8026730:	fb01 0303 	mla	r3, r1, r3, r0
 8026734:	141b      	asrs	r3, r3, #16
 8026736:	f53f aea1 	bmi.w	802647c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802673a:	3a01      	subs	r2, #1
 802673c:	4293      	cmp	r3, r2
 802673e:	f6bf ae9d 	bge.w	802647c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026742:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8026746:	9b06      	ldr	r3, [sp, #24]
 8026748:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802674c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802674e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026750:	2b00      	cmp	r3, #0
 8026752:	f300 80b6 	bgt.w	80268c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 8026756:	9b06      	ldr	r3, [sp, #24]
 8026758:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802675c:	9b07      	ldr	r3, [sp, #28]
 802675e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026762:	9307      	str	r3, [sp, #28]
 8026764:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026766:	2b00      	cmp	r3, #0
 8026768:	f340 8218 	ble.w	8026b9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 802676c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026770:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026774:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026778:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802677c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026780:	eef0 6a62 	vmov.f32	s13, s5
 8026784:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026788:	ee77 2a62 	vsub.f32	s5, s14, s5
 802678c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026790:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026794:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026798:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 802679c:	eef0 6a43 	vmov.f32	s13, s6
 80267a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80267a4:	ee12 2a90 	vmov	r2, s5
 80267a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80267ac:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80267ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80267b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80267b6:	ee13 2a10 	vmov	r2, s6
 80267ba:	931f      	str	r3, [sp, #124]	@ 0x7c
 80267bc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80267be:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 80267c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80267c6:	9320      	str	r3, [sp, #128]	@ 0x80
 80267c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80267ca:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80267cc:	3b01      	subs	r3, #1
 80267ce:	930e      	str	r3, [sp, #56]	@ 0x38
 80267d0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80267d2:	bf08      	it	eq
 80267d4:	4613      	moveq	r3, r2
 80267d6:	eeb0 3a67 	vmov.f32	s6, s15
 80267da:	9306      	str	r3, [sp, #24]
 80267dc:	eef0 2a47 	vmov.f32	s5, s14
 80267e0:	e621      	b.n	8026426 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80267e2:	fb08 f505 	mul.w	r5, r8, r5
 80267e6:	fb09 5303 	mla	r3, r9, r3, r5
 80267ea:	e6a1      	b.n	8026530 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80267ec:	4681      	mov	r9, r0
 80267ee:	e6c8      	b.n	8026582 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80267f0:	f1c1 0210 	rsb	r2, r1, #16
 80267f4:	4341      	muls	r1, r0
 80267f6:	fb09 1902 	mla	r9, r9, r2, r1
 80267fa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80267fe:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8026802:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8026806:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802680a:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802680e:	ea42 0909 	orr.w	r9, r2, r9
 8026812:	fa1f f289 	uxth.w	r2, r9
 8026816:	e75b      	b.n	80266d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8026818:	43db      	mvns	r3, r3
 802681a:	f8b7 c000 	ldrh.w	ip, [r7]
 802681e:	fa5f fe83 	uxtb.w	lr, r3
 8026822:	ea4f 202c 	mov.w	r0, ip, asr #8
 8026826:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802682a:	fb00 f00e 	mul.w	r0, r0, lr
 802682e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8026832:	1c41      	adds	r1, r0, #1
 8026834:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8026838:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802683c:	fb05 f50e 	mul.w	r5, r5, lr
 8026840:	1211      	asrs	r1, r2, #8
 8026842:	f021 0107 	bic.w	r1, r1, #7
 8026846:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802684a:	48d6      	ldr	r0, [pc, #856]	@ (8026ba4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 802684c:	b2c9      	uxtb	r1, r1
 802684e:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8026852:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8026856:	1c69      	adds	r1, r5, #1
 8026858:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802685c:	b2db      	uxtb	r3, r3
 802685e:	10d1      	asrs	r1, r2, #3
 8026860:	fb03 f30e 	mul.w	r3, r3, lr
 8026864:	f021 0103 	bic.w	r1, r1, #3
 8026868:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802686c:	00c9      	lsls	r1, r1, #3
 802686e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8026872:	4301      	orrs	r1, r0
 8026874:	1c58      	adds	r0, r3, #1
 8026876:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802687a:	00d2      	lsls	r2, r2, #3
 802687c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026880:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8026884:	430a      	orrs	r2, r1
 8026886:	e726      	b.n	80266d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 8026888:	f115 0e01 	adds.w	lr, r5, #1
 802688c:	f53f af24 	bmi.w	80266d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8026890:	4572      	cmp	r2, lr
 8026892:	f6ff af21 	blt.w	80266d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8026896:	f110 0e01 	adds.w	lr, r0, #1
 802689a:	f53f af1d 	bmi.w	80266d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802689e:	4573      	cmp	r3, lr
 80268a0:	f6ff af1a 	blt.w	80266d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80268a4:	b21b      	sxth	r3, r3
 80268a6:	b212      	sxth	r2, r2
 80268a8:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80268ac:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80268b0:	9301      	str	r3, [sp, #4]
 80268b2:	9200      	str	r2, [sp, #0]
 80268b4:	4639      	mov	r1, r7
 80268b6:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80268ba:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80268bc:	f7ff fc24 	bl	8026108 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80268c0:	e70a      	b.n	80266d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80268c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80268c4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80268c8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80268ca:	fa1f fc82 	uxth.w	ip, r2
 80268ce:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80268d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80268d4:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80268d8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80268dc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80268de:	141f      	asrs	r7, r3, #16
 80268e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80268e2:	141b      	asrs	r3, r3, #16
 80268e4:	fb01 3707 	mla	r7, r1, r7, r3
 80268e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80268ea:	eb03 0a07 	add.w	sl, r3, r7
 80268ee:	f813 9007 	ldrb.w	r9, [r3, r7]
 80268f2:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 80268f6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80268fa:	b29b      	uxth	r3, r3
 80268fc:	2d00      	cmp	r5, #0
 80268fe:	f000 80fe 	beq.w	8026afe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8026902:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8026906:	eb0a 0b01 	add.w	fp, sl, r1
 802690a:	fa1f fa85 	uxth.w	sl, r5
 802690e:	fb0a fc0c 	mul.w	ip, sl, ip
 8026912:	eba0 000c 	sub.w	r0, r0, ip
 8026916:	b280      	uxth	r0, r0
 8026918:	fb08 f000 	mul.w	r0, r8, r0
 802691c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026920:	fa1f fa8a 	uxth.w	sl, sl
 8026924:	eba3 030a 	sub.w	r3, r3, sl
 8026928:	b29b      	uxth	r3, r3
 802692a:	fb09 0303 	mla	r3, r9, r3, r0
 802692e:	940c      	str	r4, [sp, #48]	@ 0x30
 8026930:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8026932:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026936:	fb0a 3300 	mla	r3, sl, r0, r3
 802693a:	fb0c 3304 	mla	r3, ip, r4, r3
 802693e:	940d      	str	r4, [sp, #52]	@ 0x34
 8026940:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026944:	2b00      	cmp	r3, #0
 8026946:	f000 80cc 	beq.w	8026ae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 802694a:	9808      	ldr	r0, [sp, #32]
 802694c:	9c08      	ldr	r4, [sp, #32]
 802694e:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8026952:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8026956:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802695a:	f000 80d5 	beq.w	8026b08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802695e:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8026962:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026966:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802696a:	fb09 f707 	mul.w	r7, r9, r7
 802696e:	fb0a fc0c 	mul.w	ip, sl, ip
 8026972:	f107 0b20 	add.w	fp, r7, #32
 8026976:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802697a:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 802697e:	44cc      	add	ip, r9
 8026980:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8026984:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026988:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802698c:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8026990:	ea4c 0909 	orr.w	r9, ip, r9
 8026994:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8026998:	8847      	ldrh	r7, [r0, #2]
 802699a:	d019      	beq.n	80269d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 802699c:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 80269a0:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80269a4:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80269a8:	fb08 f807 	mul.w	r8, r8, r7
 80269ac:	fb0a fc0c 	mul.w	ip, sl, ip
 80269b0:	f108 0b20 	add.w	fp, r8, #32
 80269b4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80269b8:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 80269bc:	44bc      	add	ip, r7
 80269be:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80269c2:	0a3f      	lsrs	r7, r7, #8
 80269c4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80269c8:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80269cc:	ea4c 0707 	orr.w	r7, ip, r7
 80269d0:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80269d4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80269d8:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80269dc:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80269e0:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80269e4:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80269e8:	ea4c 0909 	orr.w	r9, ip, r9
 80269ec:	ea4a 0707 	orr.w	r7, sl, r7
 80269f0:	2d00      	cmp	r5, #0
 80269f2:	f000 808b 	beq.w	8026b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 80269f6:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80269fa:	3901      	subs	r1, #1
 80269fc:	0049      	lsls	r1, r1, #1
 80269fe:	3102      	adds	r1, #2
 8026a00:	eb00 0c01 	add.w	ip, r0, r1
 8026a04:	5a41      	ldrh	r1, [r0, r1]
 8026a06:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8026a08:	28ff      	cmp	r0, #255	@ 0xff
 8026a0a:	d019      	beq.n	8026a40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 8026a0c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026a0e:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8026a12:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8026a16:	fb04 fa01 	mul.w	sl, r4, r1
 8026a1a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026a1e:	fb08 f800 	mul.w	r8, r8, r0
 8026a22:	f10a 0020 	add.w	r0, sl, #32
 8026a26:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8026a2a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026a2e:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026a32:	4441      	add	r1, r8
 8026a34:	0a00      	lsrs	r0, r0, #8
 8026a36:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8026a3a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026a3e:	4301      	orrs	r1, r0
 8026a40:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026a42:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8026a46:	2cff      	cmp	r4, #255	@ 0xff
 8026a48:	d01a      	beq.n	8026a80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 8026a4a:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8026a4e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026a52:	fb04 fa00 	mul.w	sl, r4, r0
 8026a56:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026a5a:	fb08 f80c 	mul.w	r8, r8, ip
 8026a5e:	f10a 0c20 	add.w	ip, sl, #32
 8026a62:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8026a66:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8026a6a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026a6e:	4440      	add	r0, r8
 8026a70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026a74:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8026a78:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8026a7c:	ea40 000c 	orr.w	r0, r0, ip
 8026a80:	fb15 fc02 	smulbb	ip, r5, r2
 8026a84:	f1c5 0810 	rsb	r8, r5, #16
 8026a88:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8026a8c:	eba8 0802 	sub.w	r8, r8, r2
 8026a90:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8026a94:	437a      	muls	r2, r7
 8026a96:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8026a9a:	fb09 2208 	mla	r2, r9, r8, r2
 8026a9e:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026aa2:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026aa6:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8026aaa:	ea4a 0101 	orr.w	r1, sl, r1
 8026aae:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8026ab2:	fb05 2201 	mla	r2, r5, r1, r2
 8026ab6:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026aba:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026abe:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026ac2:	ea4b 0000 	orr.w	r0, fp, r0
 8026ac6:	fb0c 2200 	mla	r2, ip, r0, r2
 8026aca:	0d57      	lsrs	r7, r2, #21
 8026acc:	0952      	lsrs	r2, r2, #5
 8026ace:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026ad2:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026ad6:	433a      	orrs	r2, r7
 8026ad8:	2bff      	cmp	r3, #255	@ 0xff
 8026ada:	b292      	uxth	r2, r2
 8026adc:	d127      	bne.n	8026b2e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8026ade:	f8ae 2000 	strh.w	r2, [lr]
 8026ae2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8026ae4:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8026ae6:	f10e 0e02 	add.w	lr, lr, #2
 8026aea:	4413      	add	r3, r2
 8026aec:	931d      	str	r3, [sp, #116]	@ 0x74
 8026aee:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8026af0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026af2:	441a      	add	r2, r3
 8026af4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026af6:	921e      	str	r2, [sp, #120]	@ 0x78
 8026af8:	3b01      	subs	r3, #1
 8026afa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026afc:	e627      	b.n	802674e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026afe:	fb08 f000 	mul.w	r0, r8, r0
 8026b02:	fb09 0303 	mla	r3, r9, r3, r0
 8026b06:	e71b      	b.n	8026940 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8026b08:	46b9      	mov	r9, r7
 8026b0a:	e743      	b.n	8026994 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 8026b0c:	f1c2 0110 	rsb	r1, r2, #16
 8026b10:	437a      	muls	r2, r7
 8026b12:	fb09 2901 	mla	r9, r9, r1, r2
 8026b16:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026b1a:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8026b1e:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8026b22:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026b26:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026b2a:	4302      	orrs	r2, r0
 8026b2c:	e7d4      	b.n	8026ad8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8026b2e:	43db      	mvns	r3, r3
 8026b30:	f8be 7000 	ldrh.w	r7, [lr]
 8026b34:	fa5f fc83 	uxtb.w	ip, r3
 8026b38:	1238      	asrs	r0, r7, #8
 8026b3a:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8026b3e:	fb00 f00c 	mul.w	r0, r0, ip
 8026b42:	10fd      	asrs	r5, r7, #3
 8026b44:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8026b48:	fb05 f10c 	mul.w	r1, r5, ip
 8026b4c:	1c45      	adds	r5, r0, #1
 8026b4e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026b52:	1215      	asrs	r5, r2, #8
 8026b54:	f025 0507 	bic.w	r5, r5, #7
 8026b58:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026b5c:	00fb      	lsls	r3, r7, #3
 8026b5e:	1c4d      	adds	r5, r1, #1
 8026b60:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8026b64:	b2db      	uxtb	r3, r3
 8026b66:	10d1      	asrs	r1, r2, #3
 8026b68:	fb03 f30c 	mul.w	r3, r3, ip
 8026b6c:	f021 0103 	bic.w	r1, r1, #3
 8026b70:	4c0c      	ldr	r4, [pc, #48]	@ (8026ba4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8026b72:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8026b76:	b2c0      	uxtb	r0, r0
 8026b78:	00c9      	lsls	r1, r1, #3
 8026b7a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8026b7e:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8026b82:	4308      	orrs	r0, r1
 8026b84:	1c59      	adds	r1, r3, #1
 8026b86:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8026b8a:	00d2      	lsls	r2, r2, #3
 8026b8c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026b90:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8026b94:	4318      	orrs	r0, r3
 8026b96:	f8ae 0000 	strh.w	r0, [lr]
 8026b9a:	e7a2      	b.n	8026ae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8026b9c:	b013      	add	sp, #76	@ 0x4c
 8026b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026ba2:	bf00      	nop
 8026ba4:	fffff800 	.word	0xfffff800

08026ba8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8026ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026bac:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	@ 0x24
 8026bb0:	fb05 4c03 	mla	ip, r5, r3, r4
 8026bb4:	2d00      	cmp	r5, #0
 8026bb6:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8026bba:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8026bbe:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8026bc2:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8026bc6:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8026bca:	8808      	ldrh	r0, [r1, #0]
 8026bcc:	f2c0 80a7 	blt.w	8026d1e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8026bd0:	45aa      	cmp	sl, r5
 8026bd2:	f340 80a4 	ble.w	8026d1e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8026bd6:	2c00      	cmp	r4, #0
 8026bd8:	f2c0 809f 	blt.w	8026d1a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8026bdc:	42a3      	cmp	r3, r4
 8026bde:	f340 809c 	ble.w	8026d1a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8026be2:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8026be6:	1c62      	adds	r2, r4, #1
 8026be8:	f100 809c 	bmi.w	8026d24 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8026bec:	4293      	cmp	r3, r2
 8026bee:	f340 8099 	ble.w	8026d24 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8026bf2:	f1b9 0f00 	cmp.w	r9, #0
 8026bf6:	f000 8095 	beq.w	8026d24 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8026bfa:	f8be c002 	ldrh.w	ip, [lr, #2]
 8026bfe:	3501      	adds	r5, #1
 8026c00:	f100 8094 	bmi.w	8026d2c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8026c04:	45aa      	cmp	sl, r5
 8026c06:	f340 8091 	ble.w	8026d2c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8026c0a:	2f00      	cmp	r7, #0
 8026c0c:	f000 808e 	beq.w	8026d2c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8026c10:	2c00      	cmp	r4, #0
 8026c12:	f2c0 8089 	blt.w	8026d28 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8026c16:	42a3      	cmp	r3, r4
 8026c18:	f340 8086 	ble.w	8026d28 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8026c1c:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8026c20:	3401      	adds	r4, #1
 8026c22:	f100 8086 	bmi.w	8026d32 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8026c26:	42a3      	cmp	r3, r4
 8026c28:	f340 8083 	ble.w	8026d32 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8026c2c:	f1b9 0f00 	cmp.w	r9, #0
 8026c30:	d07f      	beq.n	8026d32 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8026c32:	3301      	adds	r3, #1
 8026c34:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8026c38:	fb19 fe07 	smulbb	lr, r9, r7
 8026c3c:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8026c40:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8026c44:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8026c48:	ea44 0808 	orr.w	r8, r4, r8
 8026c4c:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8026c50:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8026c54:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8026c58:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8026c5c:	ea44 0c0c 	orr.w	ip, r4, ip
 8026c60:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8026c64:	fb04 f40c 	mul.w	r4, r4, ip
 8026c68:	f1c7 0210 	rsb	r2, r7, #16
 8026c6c:	eba2 0209 	sub.w	r2, r2, r9
 8026c70:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8026c74:	fb02 4808 	mla	r8, r2, r8, r4
 8026c78:	b2b4      	uxth	r4, r6
 8026c7a:	43f6      	mvns	r6, r6
 8026c7c:	041a      	lsls	r2, r3, #16
 8026c7e:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8026c82:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8026c86:	4313      	orrs	r3, r2
 8026c88:	fb0e 8303 	mla	r3, lr, r3, r8
 8026c8c:	042a      	lsls	r2, r5, #16
 8026c8e:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8026c92:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8026c96:	432a      	orrs	r2, r5
 8026c98:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8026c9c:	fb07 3202 	mla	r2, r7, r2, r3
 8026ca0:	0d53      	lsrs	r3, r2, #21
 8026ca2:	0952      	lsrs	r2, r2, #5
 8026ca4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026ca8:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026cac:	431a      	orrs	r2, r3
 8026cae:	b293      	uxth	r3, r2
 8026cb0:	1202      	asrs	r2, r0, #8
 8026cb2:	b2f6      	uxtb	r6, r6
 8026cb4:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8026cb8:	fb12 f206 	smulbb	r2, r2, r6
 8026cbc:	10c7      	asrs	r7, r0, #3
 8026cbe:	00c0      	lsls	r0, r0, #3
 8026cc0:	b2c0      	uxtb	r0, r0
 8026cc2:	121d      	asrs	r5, r3, #8
 8026cc4:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8026cc8:	fb10 f006 	smulbb	r0, r0, r6
 8026ccc:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8026cd0:	fb17 f706 	smulbb	r7, r7, r6
 8026cd4:	fb05 2504 	mla	r5, r5, r4, r2
 8026cd8:	10da      	asrs	r2, r3, #3
 8026cda:	00db      	lsls	r3, r3, #3
 8026cdc:	b2db      	uxtb	r3, r3
 8026cde:	fb03 0004 	mla	r0, r3, r4, r0
 8026ce2:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8026ce6:	fb02 7204 	mla	r2, r2, r4, r7
 8026cea:	b2ad      	uxth	r5, r5
 8026cec:	b280      	uxth	r0, r0
 8026cee:	1c6b      	adds	r3, r5, #1
 8026cf0:	b292      	uxth	r2, r2
 8026cf2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026cf6:	1c43      	adds	r3, r0, #1
 8026cf8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026cfc:	1c50      	adds	r0, r2, #1
 8026cfe:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8026d02:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8026d06:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026d0a:	0952      	lsrs	r2, r2, #5
 8026d0c:	432b      	orrs	r3, r5
 8026d0e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026d12:	4313      	orrs	r3, r2
 8026d14:	800b      	strh	r3, [r1, #0]
 8026d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026d1a:	4680      	mov	r8, r0
 8026d1c:	e763      	b.n	8026be6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8026d1e:	4684      	mov	ip, r0
 8026d20:	4680      	mov	r8, r0
 8026d22:	e76c      	b.n	8026bfe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8026d24:	4684      	mov	ip, r0
 8026d26:	e76a      	b.n	8026bfe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8026d28:	4605      	mov	r5, r0
 8026d2a:	e779      	b.n	8026c20 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8026d2c:	4603      	mov	r3, r0
 8026d2e:	4605      	mov	r5, r0
 8026d30:	e782      	b.n	8026c38 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8026d32:	4603      	mov	r3, r0
 8026d34:	e780      	b.n	8026c38 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08026d36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026d36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d3a:	b093      	sub	sp, #76	@ 0x4c
 8026d3c:	461d      	mov	r5, r3
 8026d3e:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8026d42:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8026d44:	910a      	str	r1, [sp, #40]	@ 0x28
 8026d46:	9210      	str	r2, [sp, #64]	@ 0x40
 8026d48:	6859      	ldr	r1, [r3, #4]
 8026d4a:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8026d4e:	681b      	ldr	r3, [r3, #0]
 8026d50:	920b      	str	r2, [sp, #44]	@ 0x2c
 8026d52:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	@ 0x88
 8026d56:	fb01 2707 	mla	r7, r1, r7, r2
 8026d5a:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8026d5e:	9307      	str	r3, [sp, #28]
 8026d60:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026d62:	9011      	str	r0, [sp, #68]	@ 0x44
 8026d64:	681b      	ldr	r3, [r3, #0]
 8026d66:	9309      	str	r3, [sp, #36]	@ 0x24
 8026d68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026d6a:	43db      	mvns	r3, r3
 8026d6c:	b2db      	uxtb	r3, r3
 8026d6e:	9308      	str	r3, [sp, #32]
 8026d70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026d72:	2b00      	cmp	r3, #0
 8026d74:	dc03      	bgt.n	8026d7e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026d76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026d78:	2b00      	cmp	r3, #0
 8026d7a:	f340 8203 	ble.w	8027184 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8026d7e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026d80:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026d84:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026d88:	1e48      	subs	r0, r1, #1
 8026d8a:	f102 3cff 	add.w	ip, r2, #4294967295
 8026d8e:	2d00      	cmp	r5, #0
 8026d90:	f340 80da 	ble.w	8026f48 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8026d94:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026d98:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026d9c:	d406      	bmi.n	8026dac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026d9e:	4586      	cmp	lr, r0
 8026da0:	da04      	bge.n	8026dac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026da2:	2b00      	cmp	r3, #0
 8026da4:	db02      	blt.n	8026dac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026da6:	4563      	cmp	r3, ip
 8026da8:	f2c0 80cf 	blt.w	8026f4a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8026dac:	f11e 0e01 	adds.w	lr, lr, #1
 8026db0:	f100 80c1 	bmi.w	8026f36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026db4:	4571      	cmp	r1, lr
 8026db6:	f2c0 80be 	blt.w	8026f36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026dba:	3301      	adds	r3, #1
 8026dbc:	f100 80bb 	bmi.w	8026f36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026dc0:	429a      	cmp	r2, r3
 8026dc2:	f2c0 80b8 	blt.w	8026f36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026dc6:	46a9      	mov	r9, r5
 8026dc8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8026dcc:	f1b9 0f00 	cmp.w	r9, #0
 8026dd0:	f340 80d8 	ble.w	8026f84 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8026dd4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026dd6:	1421      	asrs	r1, r4, #16
 8026dd8:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026ddc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026de0:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026de4:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026de8:	f100 8111 	bmi.w	802700e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8026dec:	f10e 3aff 	add.w	sl, lr, #4294967295
 8026df0:	4551      	cmp	r1, sl
 8026df2:	f280 810c 	bge.w	802700e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8026df6:	2800      	cmp	r0, #0
 8026df8:	f2c0 8109 	blt.w	802700e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8026dfc:	f103 3aff 	add.w	sl, r3, #4294967295
 8026e00:	4550      	cmp	r0, sl
 8026e02:	f280 8104 	bge.w	802700e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8026e06:	fa0f f38e 	sxth.w	r3, lr
 8026e0a:	fb00 1103 	mla	r1, r0, r3, r1
 8026e0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8026e10:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8026e14:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8026e18:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8026e1c:	f1bc 0f00 	cmp.w	ip, #0
 8026e20:	d007      	beq.n	8026e32 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8026e22:	005b      	lsls	r3, r3, #1
 8026e24:	eb0a 0003 	add.w	r0, sl, r3
 8026e28:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8026e2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8026e2e:	8843      	ldrh	r3, [r0, #2]
 8026e30:	930d      	str	r3, [sp, #52]	@ 0x34
 8026e32:	fb12 f30c 	smulbb	r3, r2, ip
 8026e36:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8026e3a:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026e3e:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8026e42:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8026e46:	10db      	asrs	r3, r3, #3
 8026e48:	ea40 000e 	orr.w	r0, r0, lr
 8026e4c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026e50:	f1cc 0e10 	rsb	lr, ip, #16
 8026e54:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8026e58:	ebae 0e02 	sub.w	lr, lr, r2
 8026e5c:	ea4a 0101 	orr.w	r1, sl, r1
 8026e60:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026e64:	4351      	muls	r1, r2
 8026e66:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8026e6a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026e6c:	fb0e 1e00 	mla	lr, lr, r0, r1
 8026e70:	0410      	lsls	r0, r2, #16
 8026e72:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8026e76:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026e7a:	4310      	orrs	r0, r2
 8026e7c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026e7e:	fb03 e000 	mla	r0, r3, r0, lr
 8026e82:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8026e84:	0412      	lsls	r2, r2, #16
 8026e86:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8026e8a:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8026e8e:	ea42 020e 	orr.w	r2, r2, lr
 8026e92:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8026e96:	fb03 0302 	mla	r3, r3, r2, r0
 8026e9a:	f8b8 0000 	ldrh.w	r0, [r8]
 8026e9e:	9f08      	ldr	r7, [sp, #32]
 8026ea0:	0d5a      	lsrs	r2, r3, #21
 8026ea2:	1201      	asrs	r1, r0, #8
 8026ea4:	095b      	lsrs	r3, r3, #5
 8026ea6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026eaa:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8026eae:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8026eb2:	4313      	orrs	r3, r2
 8026eb4:	fb11 f107 	smulbb	r1, r1, r7
 8026eb8:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8026ebc:	00c0      	lsls	r0, r0, #3
 8026ebe:	b29b      	uxth	r3, r3
 8026ec0:	b2c0      	uxtb	r0, r0
 8026ec2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8026ec6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8026eca:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8026ece:	fb10 f007 	smulbb	r0, r0, r7
 8026ed2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8026ed6:	fb1e fe07 	smulbb	lr, lr, r7
 8026eda:	fb0c 1c02 	mla	ip, ip, r2, r1
 8026ede:	10d9      	asrs	r1, r3, #3
 8026ee0:	00db      	lsls	r3, r3, #3
 8026ee2:	b2db      	uxtb	r3, r3
 8026ee4:	fb03 0302 	mla	r3, r3, r2, r0
 8026ee8:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8026eec:	fb01 e102 	mla	r1, r1, r2, lr
 8026ef0:	fa1f fc8c 	uxth.w	ip, ip
 8026ef4:	b29a      	uxth	r2, r3
 8026ef6:	f10c 0301 	add.w	r3, ip, #1
 8026efa:	b289      	uxth	r1, r1
 8026efc:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8026f00:	1c53      	adds	r3, r2, #1
 8026f02:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026f06:	1c4a      	adds	r2, r1, #1
 8026f08:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026f0c:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8026f10:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026f14:	0949      	lsrs	r1, r1, #5
 8026f16:	ea43 030c 	orr.w	r3, r3, ip
 8026f1a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8026f1e:	430b      	orrs	r3, r1
 8026f20:	f8a8 3000 	strh.w	r3, [r8]
 8026f24:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8026f26:	f108 0802 	add.w	r8, r8, #2
 8026f2a:	441c      	add	r4, r3
 8026f2c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026f2e:	f109 39ff 	add.w	r9, r9, #4294967295
 8026f32:	441e      	add	r6, r3
 8026f34:	e74a      	b.n	8026dcc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026f36:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8026f38:	3d01      	subs	r5, #1
 8026f3a:	441c      	add	r4, r3
 8026f3c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026f3e:	441e      	add	r6, r3
 8026f40:	9b07      	ldr	r3, [sp, #28]
 8026f42:	3302      	adds	r3, #2
 8026f44:	9307      	str	r3, [sp, #28]
 8026f46:	e722      	b.n	8026d8e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8026f48:	d022      	beq.n	8026f90 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8026f4a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8026f4c:	1e6b      	subs	r3, r5, #1
 8026f4e:	fb00 4003 	mla	r0, r0, r3, r4
 8026f52:	1400      	asrs	r0, r0, #16
 8026f54:	f53f af37 	bmi.w	8026dc6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026f58:	3901      	subs	r1, #1
 8026f5a:	4288      	cmp	r0, r1
 8026f5c:	f6bf af33 	bge.w	8026dc6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026f60:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8026f62:	fb01 6303 	mla	r3, r1, r3, r6
 8026f66:	141b      	asrs	r3, r3, #16
 8026f68:	f53f af2d 	bmi.w	8026dc6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026f6c:	3a01      	subs	r2, #1
 8026f6e:	4293      	cmp	r3, r2
 8026f70:	f6bf af29 	bge.w	8026dc6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026f74:	46a8      	mov	r8, r5
 8026f76:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8026f7a:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 8026f7e:	f1b8 0f00 	cmp.w	r8, #0
 8026f82:	dc5e      	bgt.n	8027042 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8026f84:	9b07      	ldr	r3, [sp, #28]
 8026f86:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026f8a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8026f8e:	9307      	str	r3, [sp, #28]
 8026f90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026f92:	2b00      	cmp	r3, #0
 8026f94:	f340 80f6 	ble.w	8027184 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8026f98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026f9c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026fa0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026fa4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026fa8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026fac:	eef0 6a62 	vmov.f32	s13, s5
 8026fb0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026fb4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026fb8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026fbc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026fc0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026fc4:	ee16 4a90 	vmov	r4, s13
 8026fc8:	eef0 6a43 	vmov.f32	s13, s6
 8026fcc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026fd0:	ee12 2a90 	vmov	r2, s5
 8026fd4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026fd8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026fda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026fde:	fb92 f3f3 	sdiv	r3, r2, r3
 8026fe2:	ee13 2a10 	vmov	r2, s6
 8026fe6:	931f      	str	r3, [sp, #124]	@ 0x7c
 8026fe8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026fea:	ee16 6a90 	vmov	r6, s13
 8026fee:	fb92 f3f3 	sdiv	r3, r2, r3
 8026ff2:	9320      	str	r3, [sp, #128]	@ 0x80
 8026ff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026ff6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8026ff8:	3b01      	subs	r3, #1
 8026ffa:	930a      	str	r3, [sp, #40]	@ 0x28
 8026ffc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026ffe:	bf0c      	ite	eq
 8027000:	4615      	moveq	r5, r2
 8027002:	461d      	movne	r5, r3
 8027004:	eeb0 3a67 	vmov.f32	s6, s15
 8027008:	eef0 2a47 	vmov.f32	s5, s14
 802700c:	e6b0      	b.n	8026d70 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802700e:	f111 0a01 	adds.w	sl, r1, #1
 8027012:	d487      	bmi.n	8026f24 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8027014:	45d6      	cmp	lr, sl
 8027016:	db85      	blt.n	8026f24 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8027018:	f110 0a01 	adds.w	sl, r0, #1
 802701c:	d482      	bmi.n	8026f24 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802701e:	4553      	cmp	r3, sl
 8027020:	db80      	blt.n	8026f24 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8027022:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8027024:	b21b      	sxth	r3, r3
 8027026:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802702a:	9101      	str	r1, [sp, #4]
 802702c:	9300      	str	r3, [sp, #0]
 802702e:	e9cd c704 	strd	ip, r7, [sp, #16]
 8027032:	fa0f f38e 	sxth.w	r3, lr
 8027036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027038:	4641      	mov	r1, r8
 802703a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802703c:	f7ff fdb4 	bl	8026ba8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8027040:	e770      	b.n	8026f24 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8027042:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027044:	1430      	asrs	r0, r6, #16
 8027046:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802704a:	1423      	asrs	r3, r4, #16
 802704c:	fb01 3000 	mla	r0, r1, r0, r3
 8027050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027052:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8027054:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8027058:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802705c:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8027060:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027064:	8858      	ldrh	r0, [r3, #2]
 8027066:	f1be 0f00 	cmp.w	lr, #0
 802706a:	d00b      	beq.n	8027084 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 802706c:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8027070:	3901      	subs	r1, #1
 8027072:	0049      	lsls	r1, r1, #1
 8027074:	3102      	adds	r1, #2
 8027076:	eb03 0b01 	add.w	fp, r3, r1
 802707a:	5a5b      	ldrh	r3, [r3, r1]
 802707c:	930e      	str	r3, [sp, #56]	@ 0x38
 802707e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8027082:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027084:	fb12 f30e 	smulbb	r3, r2, lr
 8027088:	ea4f 410c 	mov.w	r1, ip, lsl #16
 802708c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027090:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8027094:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 8027098:	10db      	asrs	r3, r3, #3
 802709a:	ea41 010c 	orr.w	r1, r1, ip
 802709e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80270a2:	f1ce 0c10 	rsb	ip, lr, #16
 80270a6:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80270aa:	ebac 0c02 	sub.w	ip, ip, r2
 80270ae:	ea4b 0000 	orr.w	r0, fp, r0
 80270b2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80270b6:	4350      	muls	r0, r2
 80270b8:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80270bc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80270be:	fb0c 0c01 	mla	ip, ip, r1, r0
 80270c2:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80270c6:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80270ca:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 80270ce:	ea4b 0101 	orr.w	r1, fp, r1
 80270d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80270d4:	fb03 c101 	mla	r1, r3, r1, ip
 80270d8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80270da:	0412      	lsls	r2, r2, #16
 80270dc:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80270e0:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80270e4:	4302      	orrs	r2, r0
 80270e6:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80270ea:	fb03 1202 	mla	r2, r3, r2, r1
 80270ee:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 80270f2:	0952      	lsrs	r2, r2, #5
 80270f4:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 80270f8:	f8b9 2000 	ldrh.w	r2, [r9]
 80270fc:	9f08      	ldr	r7, [sp, #32]
 80270fe:	1211      	asrs	r1, r2, #8
 8027100:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8027104:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8027108:	fb11 f107 	smulbb	r1, r1, r7
 802710c:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8027110:	ea4b 0303 	orr.w	r3, fp, r3
 8027114:	00d2      	lsls	r2, r2, #3
 8027116:	b29b      	uxth	r3, r3
 8027118:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 802711c:	b2d2      	uxtb	r2, r2
 802711e:	1218      	asrs	r0, r3, #8
 8027120:	fb1c fc07 	smulbb	ip, ip, r7
 8027124:	fb12 f207 	smulbb	r2, r2, r7
 8027128:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802712c:	fb00 100a 	mla	r0, r0, sl, r1
 8027130:	10d9      	asrs	r1, r3, #3
 8027132:	00db      	lsls	r3, r3, #3
 8027134:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8027138:	b2db      	uxtb	r3, r3
 802713a:	fb01 c10a 	mla	r1, r1, sl, ip
 802713e:	fb03 230a 	mla	r3, r3, sl, r2
 8027142:	b280      	uxth	r0, r0
 8027144:	b29b      	uxth	r3, r3
 8027146:	b289      	uxth	r1, r1
 8027148:	1c42      	adds	r2, r0, #1
 802714a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802714e:	f101 0c01 	add.w	ip, r1, #1
 8027152:	1c5a      	adds	r2, r3, #1
 8027154:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027158:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802715c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802715e:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8027162:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8027166:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802716a:	4310      	orrs	r0, r2
 802716c:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8027170:	441c      	add	r4, r3
 8027172:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027174:	ea40 000c 	orr.w	r0, r0, ip
 8027178:	f829 0b02 	strh.w	r0, [r9], #2
 802717c:	441e      	add	r6, r3
 802717e:	f108 38ff 	add.w	r8, r8, #4294967295
 8027182:	e6fc      	b.n	8026f7e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8027184:	b013      	add	sp, #76	@ 0x4c
 8027186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802718a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 802718a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802718e:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8027192:	fb0e 4703 	mla	r7, lr, r3, r4
 8027196:	f1be 0f00 	cmp.w	lr, #0
 802719a:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 802719e:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 80271a2:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 80271a6:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 80271aa:	8808      	ldrh	r0, [r1, #0]
 80271ac:	db60      	blt.n	8027270 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 80271ae:	45f1      	cmp	r9, lr
 80271b0:	dd5e      	ble.n	8027270 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 80271b2:	2c00      	cmp	r4, #0
 80271b4:	db5a      	blt.n	802726c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80271b6:	42a3      	cmp	r3, r4
 80271b8:	dd58      	ble.n	802726c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80271ba:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 80271be:	1c62      	adds	r2, r4, #1
 80271c0:	d459      	bmi.n	8027276 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80271c2:	4293      	cmp	r3, r2
 80271c4:	dd57      	ble.n	8027276 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80271c6:	2d00      	cmp	r5, #0
 80271c8:	d055      	beq.n	8027276 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80271ca:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 80271ce:	f11e 0e01 	adds.w	lr, lr, #1
 80271d2:	d454      	bmi.n	802727e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80271d4:	45f1      	cmp	r9, lr
 80271d6:	dd52      	ble.n	802727e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80271d8:	2e00      	cmp	r6, #0
 80271da:	d050      	beq.n	802727e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80271dc:	2c00      	cmp	r4, #0
 80271de:	db4c      	blt.n	802727a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 80271e0:	42a3      	cmp	r3, r4
 80271e2:	dd4a      	ble.n	802727a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 80271e4:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 80271e8:	3401      	adds	r4, #1
 80271ea:	d405      	bmi.n	80271f8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80271ec:	42a3      	cmp	r3, r4
 80271ee:	dd03      	ble.n	80271f8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80271f0:	b115      	cbz	r5, 80271f8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80271f2:	3301      	adds	r3, #1
 80271f4:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 80271f8:	fb15 f406 	smulbb	r4, r5, r6
 80271fc:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8027200:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8027204:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8027208:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 802720c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8027210:	ea43 0c0c 	orr.w	ip, r3, ip
 8027214:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8027218:	f1c6 0310 	rsb	r3, r6, #16
 802721c:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8027220:	1b5b      	subs	r3, r3, r5
 8027222:	ea4e 0707 	orr.w	r7, lr, r7
 8027226:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 802722a:	437d      	muls	r5, r7
 802722c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8027230:	fb03 5c0c 	mla	ip, r3, ip, r5
 8027234:	0403      	lsls	r3, r0, #16
 8027236:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802723a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802723e:	4318      	orrs	r0, r3
 8027240:	fb04 c000 	mla	r0, r4, r0, ip
 8027244:	0413      	lsls	r3, r2, #16
 8027246:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802724a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802724e:	4313      	orrs	r3, r2
 8027250:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8027254:	fb06 0003 	mla	r0, r6, r3, r0
 8027258:	0d43      	lsrs	r3, r0, #21
 802725a:	0940      	lsrs	r0, r0, #5
 802725c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027260:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027264:	4318      	orrs	r0, r3
 8027266:	8008      	strh	r0, [r1, #0]
 8027268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802726c:	4684      	mov	ip, r0
 802726e:	e7a6      	b.n	80271be <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8027270:	4607      	mov	r7, r0
 8027272:	4684      	mov	ip, r0
 8027274:	e7ab      	b.n	80271ce <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8027276:	4607      	mov	r7, r0
 8027278:	e7a9      	b.n	80271ce <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802727a:	4602      	mov	r2, r0
 802727c:	e7b4      	b.n	80271e8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 802727e:	4602      	mov	r2, r0
 8027280:	e7ba      	b.n	80271f8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08027282 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027282:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027286:	b08f      	sub	sp, #60	@ 0x3c
 8027288:	461d      	mov	r5, r3
 802728a:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 802728e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027290:	9107      	str	r1, [sp, #28]
 8027292:	6859      	ldr	r1, [r3, #4]
 8027294:	920c      	str	r2, [sp, #48]	@ 0x30
 8027296:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 802729a:	fb01 2707 	mla	r7, r1, r7, r2
 802729e:	681b      	ldr	r3, [r3, #0]
 80272a0:	900d      	str	r0, [sp, #52]	@ 0x34
 80272a2:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80272a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80272a8:	f8d3 8000 	ldr.w	r8, [r3]
 80272ac:	9b07      	ldr	r3, [sp, #28]
 80272ae:	2b00      	cmp	r3, #0
 80272b0:	dc03      	bgt.n	80272ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80272b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80272b4:	2b00      	cmp	r3, #0
 80272b6:	f340 8181 	ble.w	80275bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80272ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80272bc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80272c0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80272c4:	1e48      	subs	r0, r1, #1
 80272c6:	f102 3cff 	add.w	ip, r2, #4294967295
 80272ca:	2d00      	cmp	r5, #0
 80272cc:	f340 809b 	ble.w	8027406 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 80272d0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80272d4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80272d8:	d406      	bmi.n	80272e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80272da:	4586      	cmp	lr, r0
 80272dc:	da04      	bge.n	80272e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80272de:	2b00      	cmp	r3, #0
 80272e0:	db02      	blt.n	80272e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80272e2:	4563      	cmp	r3, ip
 80272e4:	f2c0 8090 	blt.w	8027408 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80272e8:	f11e 0e01 	adds.w	lr, lr, #1
 80272ec:	f100 8084 	bmi.w	80273f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80272f0:	4571      	cmp	r1, lr
 80272f2:	f2c0 8081 	blt.w	80273f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80272f6:	3301      	adds	r3, #1
 80272f8:	d47e      	bmi.n	80273f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80272fa:	429a      	cmp	r2, r3
 80272fc:	db7c      	blt.n	80273f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80272fe:	46aa      	mov	sl, r5
 8027300:	46b9      	mov	r9, r7
 8027302:	f1ba 0f00 	cmp.w	sl, #0
 8027306:	f340 8099 	ble.w	802743c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802730a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802730c:	1421      	asrs	r1, r4, #16
 802730e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8027312:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027316:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802731a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802731e:	f100 80d0 	bmi.w	80274c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8027322:	f10e 3bff 	add.w	fp, lr, #4294967295
 8027326:	4559      	cmp	r1, fp
 8027328:	f280 80cb 	bge.w	80274c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802732c:	2800      	cmp	r0, #0
 802732e:	f2c0 80c8 	blt.w	80274c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8027332:	f103 3bff 	add.w	fp, r3, #4294967295
 8027336:	4558      	cmp	r0, fp
 8027338:	f280 80c3 	bge.w	80274c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802733c:	fa0f fe8e 	sxth.w	lr, lr
 8027340:	fb00 110e 	mla	r1, r0, lr, r1
 8027344:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8027348:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 802734c:	8841      	ldrh	r1, [r0, #2]
 802734e:	f1bc 0f00 	cmp.w	ip, #0
 8027352:	d00b      	beq.n	802736c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8027354:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 8027358:	3b01      	subs	r3, #1
 802735a:	005b      	lsls	r3, r3, #1
 802735c:	3302      	adds	r3, #2
 802735e:	eb00 0e03 	add.w	lr, r0, r3
 8027362:	5ac3      	ldrh	r3, [r0, r3]
 8027364:	9308      	str	r3, [sp, #32]
 8027366:	f8be 3002 	ldrh.w	r3, [lr, #2]
 802736a:	9309      	str	r3, [sp, #36]	@ 0x24
 802736c:	fb12 f30c 	smulbb	r3, r2, ip
 8027370:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8027374:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8027378:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 802737c:	ea40 000b 	orr.w	r0, r0, fp
 8027380:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8027384:	10db      	asrs	r3, r3, #3
 8027386:	f1cc 0e10 	rsb	lr, ip, #16
 802738a:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802738e:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8027392:	ebae 0e02 	sub.w	lr, lr, r2
 8027396:	ea4b 0101 	orr.w	r1, fp, r1
 802739a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802739e:	4351      	muls	r1, r2
 80273a0:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80273a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80273a6:	fb0e 1e00 	mla	lr, lr, r0, r1
 80273aa:	0410      	lsls	r0, r2, #16
 80273ac:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80273b0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80273b4:	4310      	orrs	r0, r2
 80273b6:	9a08      	ldr	r2, [sp, #32]
 80273b8:	fb03 e000 	mla	r0, r3, r0, lr
 80273bc:	9908      	ldr	r1, [sp, #32]
 80273be:	0412      	lsls	r2, r2, #16
 80273c0:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80273c4:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 80273c8:	ea42 020e 	orr.w	r2, r2, lr
 80273cc:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80273d0:	fb03 0302 	mla	r3, r3, r2, r0
 80273d4:	0d5a      	lsrs	r2, r3, #21
 80273d6:	095b      	lsrs	r3, r3, #5
 80273d8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80273dc:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80273e0:	4313      	orrs	r3, r2
 80273e2:	f8a9 3000 	strh.w	r3, [r9]
 80273e6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80273e8:	f109 0902 	add.w	r9, r9, #2
 80273ec:	441c      	add	r4, r3
 80273ee:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80273f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80273f4:	441e      	add	r6, r3
 80273f6:	e784      	b.n	8027302 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80273f8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80273fa:	3d01      	subs	r5, #1
 80273fc:	441c      	add	r4, r3
 80273fe:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027400:	3702      	adds	r7, #2
 8027402:	441e      	add	r6, r3
 8027404:	e761      	b.n	80272ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027406:	d01d      	beq.n	8027444 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027408:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802740a:	1e6b      	subs	r3, r5, #1
 802740c:	fb00 4003 	mla	r0, r0, r3, r4
 8027410:	1400      	asrs	r0, r0, #16
 8027412:	f53f af74 	bmi.w	80272fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027416:	3901      	subs	r1, #1
 8027418:	4288      	cmp	r0, r1
 802741a:	f6bf af70 	bge.w	80272fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802741e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8027420:	fb01 6303 	mla	r3, r1, r3, r6
 8027424:	141b      	asrs	r3, r3, #16
 8027426:	f53f af6a 	bmi.w	80272fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802742a:	3a01      	subs	r2, #1
 802742c:	4293      	cmp	r3, r2
 802742e:	f6bf af66 	bge.w	80272fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027432:	46a9      	mov	r9, r5
 8027434:	46ba      	mov	sl, r7
 8027436:	f1b9 0f00 	cmp.w	r9, #0
 802743a:	dc5a      	bgt.n	80274f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 802743c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027440:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8027444:	9b07      	ldr	r3, [sp, #28]
 8027446:	2b00      	cmp	r3, #0
 8027448:	f340 80b8 	ble.w	80275bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802744c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027450:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027454:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027458:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802745c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027460:	eef0 6a62 	vmov.f32	s13, s5
 8027464:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027468:	ee77 2a62 	vsub.f32	s5, s14, s5
 802746c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027470:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027474:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027478:	ee16 4a90 	vmov	r4, s13
 802747c:	eef0 6a43 	vmov.f32	s13, s6
 8027480:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027484:	ee12 2a90 	vmov	r2, s5
 8027488:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802748c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802748e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027492:	fb92 f3f3 	sdiv	r3, r2, r3
 8027496:	ee13 2a10 	vmov	r2, s6
 802749a:	931b      	str	r3, [sp, #108]	@ 0x6c
 802749c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802749e:	ee16 6a90 	vmov	r6, s13
 80274a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80274a6:	931c      	str	r3, [sp, #112]	@ 0x70
 80274a8:	9b07      	ldr	r3, [sp, #28]
 80274aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80274ac:	3b01      	subs	r3, #1
 80274ae:	9307      	str	r3, [sp, #28]
 80274b0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80274b2:	bf0c      	ite	eq
 80274b4:	4615      	moveq	r5, r2
 80274b6:	461d      	movne	r5, r3
 80274b8:	eeb0 3a67 	vmov.f32	s6, s15
 80274bc:	eef0 2a47 	vmov.f32	s5, s14
 80274c0:	e6f4      	b.n	80272ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80274c2:	f111 0b01 	adds.w	fp, r1, #1
 80274c6:	d48e      	bmi.n	80273e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80274c8:	45de      	cmp	lr, fp
 80274ca:	db8c      	blt.n	80273e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80274cc:	f110 0b01 	adds.w	fp, r0, #1
 80274d0:	d489      	bmi.n	80273e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80274d2:	455b      	cmp	r3, fp
 80274d4:	db87      	blt.n	80273e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80274d6:	b21b      	sxth	r3, r3
 80274d8:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80274dc:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80274e0:	9300      	str	r3, [sp, #0]
 80274e2:	4642      	mov	r2, r8
 80274e4:	fa0f f38e 	sxth.w	r3, lr
 80274e8:	4649      	mov	r1, r9
 80274ea:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80274ec:	f7ff fe4d 	bl	802718a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80274f0:	e779      	b.n	80273e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80274f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80274f4:	1420      	asrs	r0, r4, #16
 80274f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80274fa:	1431      	asrs	r1, r6, #16
 80274fc:	fb03 0101 	mla	r1, r3, r1, r0
 8027500:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8027504:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8027508:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 802750c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027510:	8841      	ldrh	r1, [r0, #2]
 8027512:	f1be 0f00 	cmp.w	lr, #0
 8027516:	d00b      	beq.n	8027530 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8027518:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802751c:	3b01      	subs	r3, #1
 802751e:	005b      	lsls	r3, r3, #1
 8027520:	3302      	adds	r3, #2
 8027522:	eb00 0b03 	add.w	fp, r0, r3
 8027526:	5ac3      	ldrh	r3, [r0, r3]
 8027528:	930a      	str	r3, [sp, #40]	@ 0x28
 802752a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802752e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027530:	fb12 f30e 	smulbb	r3, r2, lr
 8027534:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8027538:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802753c:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8027540:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8027544:	10db      	asrs	r3, r3, #3
 8027546:	ea40 000c 	orr.w	r0, r0, ip
 802754a:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802754e:	f1ce 0c10 	rsb	ip, lr, #16
 8027552:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8027556:	ebac 0c02 	sub.w	ip, ip, r2
 802755a:	ea4b 0101 	orr.w	r1, fp, r1
 802755e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027562:	4351      	muls	r1, r2
 8027564:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8027568:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802756a:	fb0c 1c00 	mla	ip, ip, r0, r1
 802756e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8027572:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027576:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 802757a:	ea4b 0000 	orr.w	r0, fp, r0
 802757e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027580:	fb03 c000 	mla	r0, r3, r0, ip
 8027584:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8027586:	0412      	lsls	r2, r2, #16
 8027588:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 802758c:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 8027590:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8027594:	ea42 0b0b 	orr.w	fp, r2, fp
 8027598:	fb03 000b 	mla	r0, r3, fp, r0
 802759c:	0d43      	lsrs	r3, r0, #21
 802759e:	0940      	lsrs	r0, r0, #5
 80275a0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80275a4:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80275a8:	4318      	orrs	r0, r3
 80275aa:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80275ac:	f82a 0b02 	strh.w	r0, [sl], #2
 80275b0:	441c      	add	r4, r3
 80275b2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80275b4:	f109 39ff 	add.w	r9, r9, #4294967295
 80275b8:	441e      	add	r6, r3
 80275ba:	e73c      	b.n	8027436 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80275bc:	b00f      	add	sp, #60	@ 0x3c
 80275be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080275c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80275c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80275c6:	b085      	sub	sp, #20
 80275c8:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 80275cc:	9102      	str	r1, [sp, #8]
 80275ce:	fb04 7103 	mla	r1, r4, r3, r7
 80275d2:	2c00      	cmp	r4, #0
 80275d4:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 80275d8:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 80275dc:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 80275e0:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80275e4:	f2c0 811b 	blt.w	802781e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80275e8:	45a6      	cmp	lr, r4
 80275ea:	f340 8118 	ble.w	802781e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80275ee:	2f00      	cmp	r7, #0
 80275f0:	f2c0 8113 	blt.w	802781a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80275f4:	42bb      	cmp	r3, r7
 80275f6:	f340 8110 	ble.w	802781a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80275fa:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80275fe:	1c7a      	adds	r2, r7, #1
 8027600:	f100 8110 	bmi.w	8027824 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8027604:	4293      	cmp	r3, r2
 8027606:	f340 810d 	ble.w	8027824 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 802760a:	2e00      	cmp	r6, #0
 802760c:	f000 810c 	beq.w	8027828 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8027610:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8027614:	3401      	adds	r4, #1
 8027616:	f100 810b 	bmi.w	8027830 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 802761a:	45a6      	cmp	lr, r4
 802761c:	f340 8108 	ble.w	8027830 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8027620:	2800      	cmp	r0, #0
 8027622:	f000 8108 	beq.w	8027836 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8027626:	2f00      	cmp	r7, #0
 8027628:	f2c0 8100 	blt.w	802782c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802762c:	42bb      	cmp	r3, r7
 802762e:	f340 80fd 	ble.w	802782c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8027632:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8027636:	3701      	adds	r7, #1
 8027638:	f100 8100 	bmi.w	802783c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802763c:	42bb      	cmp	r3, r7
 802763e:	f340 80fd 	ble.w	802783c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8027642:	2e00      	cmp	r6, #0
 8027644:	f000 80fc 	beq.w	8027840 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8027648:	3301      	adds	r3, #1
 802764a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802764e:	b2b6      	uxth	r6, r6
 8027650:	b280      	uxth	r0, r0
 8027652:	fb00 fe06 	mul.w	lr, r0, r6
 8027656:	0136      	lsls	r6, r6, #4
 8027658:	eba6 070e 	sub.w	r7, r6, lr
 802765c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8027660:	b2bf      	uxth	r7, r7
 8027662:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8027666:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802766a:	fb0a f607 	mul.w	r6, sl, r7
 802766e:	b280      	uxth	r0, r0
 8027670:	1a1b      	subs	r3, r3, r0
 8027672:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8027676:	b29b      	uxth	r3, r3
 8027678:	fb0b 6603 	mla	r6, fp, r3, r6
 802767c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8027680:	fb00 6609 	mla	r6, r0, r9, r6
 8027684:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8027688:	fb0e 6608 	mla	r6, lr, r8, r6
 802768c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8027690:	9600      	str	r6, [sp, #0]
 8027692:	2e00      	cmp	r6, #0
 8027694:	f000 80be 	beq.w	8027814 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8027698:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802769c:	fb0b fc0c 	mul.w	ip, fp, ip
 80276a0:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80276a4:	fb0b f505 	mul.w	r5, fp, r5
 80276a8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80276ac:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80276b0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80276b4:	44dc      	add	ip, fp
 80276b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80276ba:	9501      	str	r5, [sp, #4]
 80276bc:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 80276c0:	9503      	str	r5, [sp, #12]
 80276c2:	9d01      	ldr	r5, [sp, #4]
 80276c4:	9e02      	ldr	r6, [sp, #8]
 80276c6:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 80276ca:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80276ce:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 80276d2:	fb0a fc0c 	mul.w	ip, sl, ip
 80276d6:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80276da:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80276de:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80276e2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80276e6:	4465      	add	r5, ip
 80276e8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80276ec:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80276f0:	fb09 fc0c 	mul.w	ip, r9, ip
 80276f4:	fb09 f904 	mul.w	r9, r9, r4
 80276f8:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 80276fc:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8027700:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8027704:	fb08 f404 	mul.w	r4, r8, r4
 8027708:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802770c:	fb08 f802 	mul.w	r8, r8, r2
 8027710:	0a2d      	lsrs	r5, r5, #8
 8027712:	0a22      	lsrs	r2, r4, #8
 8027714:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8027718:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802771c:	437d      	muls	r5, r7
 802771e:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8027722:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8027726:	4414      	add	r4, r2
 8027728:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802772c:	fb0a fa01 	mul.w	sl, sl, r1
 8027730:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8027734:	9a03      	ldr	r2, [sp, #12]
 8027736:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 802773a:	fb02 5503 	mla	r5, r2, r3, r5
 802773e:	0a24      	lsrs	r4, r4, #8
 8027740:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8027744:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8027748:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802774c:	fb04 540e 	mla	r4, r4, lr, r5
 8027750:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8027754:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8027758:	4461      	add	r1, ip
 802775a:	0a09      	lsrs	r1, r1, #8
 802775c:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8027760:	fb01 4100 	mla	r1, r1, r0, r4
 8027764:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027768:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802776c:	fb07 f70a 	mul.w	r7, r7, sl
 8027770:	0a09      	lsrs	r1, r1, #8
 8027772:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8027776:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 802777a:	fb03 7101 	mla	r1, r3, r1, r7
 802777e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027782:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8027786:	fb0e 1e08 	mla	lr, lr, r8, r1
 802778a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802778e:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8027792:	fb00 e101 	mla	r1, r0, r1, lr
 8027796:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 802779a:	9a00      	ldr	r2, [sp, #0]
 802779c:	b287      	uxth	r7, r0
 802779e:	437a      	muls	r2, r7
 80277a0:	1c53      	adds	r3, r2, #1
 80277a2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80277a6:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80277aa:	0a09      	lsrs	r1, r1, #8
 80277ac:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80277b0:	4321      	orrs	r1, r4
 80277b2:	0c0a      	lsrs	r2, r1, #16
 80277b4:	8836      	ldrh	r6, [r6, #0]
 80277b6:	fb12 f207 	smulbb	r2, r2, r7
 80277ba:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80277be:	b2c8      	uxtb	r0, r1
 80277c0:	1235      	asrs	r5, r6, #8
 80277c2:	fb14 f407 	smulbb	r4, r4, r7
 80277c6:	fb10 f007 	smulbb	r0, r0, r7
 80277ca:	b2db      	uxtb	r3, r3
 80277cc:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80277d0:	fb05 2503 	mla	r5, r5, r3, r2
 80277d4:	10f2      	asrs	r2, r6, #3
 80277d6:	00f6      	lsls	r6, r6, #3
 80277d8:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80277dc:	b2f6      	uxtb	r6, r6
 80277de:	fb02 4203 	mla	r2, r2, r3, r4
 80277e2:	fb06 0303 	mla	r3, r6, r3, r0
 80277e6:	b2ad      	uxth	r5, r5
 80277e8:	b299      	uxth	r1, r3
 80277ea:	b294      	uxth	r4, r2
 80277ec:	1c6b      	adds	r3, r5, #1
 80277ee:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80277f2:	1c62      	adds	r2, r4, #1
 80277f4:	1c4b      	adds	r3, r1, #1
 80277f6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80277fa:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80277fe:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8027802:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027806:	0952      	lsrs	r2, r2, #5
 8027808:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802780c:	432b      	orrs	r3, r5
 802780e:	4313      	orrs	r3, r2
 8027810:	9a02      	ldr	r2, [sp, #8]
 8027812:	8013      	strh	r3, [r2, #0]
 8027814:	b005      	add	sp, #20
 8027816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802781a:	2500      	movs	r5, #0
 802781c:	e6ef      	b.n	80275fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 802781e:	2100      	movs	r1, #0
 8027820:	460d      	mov	r5, r1
 8027822:	e6f7      	b.n	8027614 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8027824:	2100      	movs	r1, #0
 8027826:	e6f5      	b.n	8027614 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8027828:	4631      	mov	r1, r6
 802782a:	e6f3      	b.n	8027614 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802782c:	2400      	movs	r4, #0
 802782e:	e702      	b.n	8027636 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8027830:	2200      	movs	r2, #0
 8027832:	4614      	mov	r4, r2
 8027834:	e70b      	b.n	802764e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8027836:	4602      	mov	r2, r0
 8027838:	4604      	mov	r4, r0
 802783a:	e708      	b.n	802764e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802783c:	2200      	movs	r2, #0
 802783e:	e706      	b.n	802764e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8027840:	4632      	mov	r2, r6
 8027842:	e704      	b.n	802764e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08027844 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027848:	b09d      	sub	sp, #116	@ 0x74
 802784a:	9219      	str	r2, [sp, #100]	@ 0x64
 802784c:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 802784e:	901b      	str	r0, [sp, #108]	@ 0x6c
 8027850:	9307      	str	r3, [sp, #28]
 8027852:	6850      	ldr	r0, [r2, #4]
 8027854:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8027858:	9117      	str	r1, [sp, #92]	@ 0x5c
 802785a:	931a      	str	r3, [sp, #104]	@ 0x68
 802785c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8027860:	fb00 1303 	mla	r3, r0, r3, r1
 8027864:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 8027868:	6812      	ldr	r2, [r2, #0]
 802786a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802786e:	930a      	str	r3, [sp, #40]	@ 0x28
 8027870:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8027872:	681b      	ldr	r3, [r3, #0]
 8027874:	9310      	str	r3, [sp, #64]	@ 0x40
 8027876:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 802787a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802787c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802787e:	2b00      	cmp	r3, #0
 8027880:	dc03      	bgt.n	802788a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8027882:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8027884:	2b00      	cmp	r3, #0
 8027886:	f340 8375 	ble.w	8027f74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802788a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802788c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027890:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027894:	1e48      	subs	r0, r1, #1
 8027896:	1e57      	subs	r7, r2, #1
 8027898:	9b07      	ldr	r3, [sp, #28]
 802789a:	2b00      	cmp	r3, #0
 802789c:	f340 818e 	ble.w	8027bbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80278a0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80278a4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80278a8:	d406      	bmi.n	80278b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80278aa:	4584      	cmp	ip, r0
 80278ac:	da04      	bge.n	80278b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80278ae:	2b00      	cmp	r3, #0
 80278b0:	db02      	blt.n	80278b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80278b2:	42bb      	cmp	r3, r7
 80278b4:	f2c0 8183 	blt.w	8027bbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80278b8:	f11c 0c01 	adds.w	ip, ip, #1
 80278bc:	f100 8173 	bmi.w	8027ba6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80278c0:	4561      	cmp	r1, ip
 80278c2:	f2c0 8170 	blt.w	8027ba6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80278c6:	3301      	adds	r3, #1
 80278c8:	f100 816d 	bmi.w	8027ba6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80278cc:	429a      	cmp	r2, r3
 80278ce:	f2c0 816a 	blt.w	8027ba6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80278d2:	9b07      	ldr	r3, [sp, #28]
 80278d4:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80278d6:	9318      	str	r3, [sp, #96]	@ 0x60
 80278d8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80278da:	2b00      	cmp	r3, #0
 80278dc:	f340 818c 	ble.w	8027bf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80278e0:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 80278e2:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80278e4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80278e8:	1422      	asrs	r2, r4, #16
 80278ea:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80278ee:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80278f2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80278f6:	689b      	ldr	r3, [r3, #8]
 80278f8:	f100 81cd 	bmi.w	8027c96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80278fc:	f103 38ff 	add.w	r8, r3, #4294967295
 8027900:	4542      	cmp	r2, r8
 8027902:	f280 81c8 	bge.w	8027c96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8027906:	f1bc 0f00 	cmp.w	ip, #0
 802790a:	f2c0 81c4 	blt.w	8027c96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802790e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027912:	45c4      	cmp	ip, r8
 8027914:	f280 81bf 	bge.w	8027c96 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8027918:	b21b      	sxth	r3, r3
 802791a:	fb0c 2203 	mla	r2, ip, r3, r2
 802791e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8027920:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8027924:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8027928:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802792c:	2800      	cmp	r0, #0
 802792e:	f000 81a9 	beq.w	8027c84 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8027932:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8027936:	950c      	str	r5, [sp, #48]	@ 0x30
 8027938:	0e2d      	lsrs	r5, r5, #24
 802793a:	9513      	str	r5, [sp, #76]	@ 0x4c
 802793c:	b181      	cbz	r1, 8027960 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802793e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8027942:	3b01      	subs	r3, #1
 8027944:	009b      	lsls	r3, r3, #2
 8027946:	3304      	adds	r3, #4
 8027948:	eb08 0c03 	add.w	ip, r8, r3
 802794c:	f858 3003 	ldr.w	r3, [r8, r3]
 8027950:	9308      	str	r3, [sp, #32]
 8027952:	0e1b      	lsrs	r3, r3, #24
 8027954:	9311      	str	r3, [sp, #68]	@ 0x44
 8027956:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802795a:	930d      	str	r3, [sp, #52]	@ 0x34
 802795c:	0e1b      	lsrs	r3, r3, #24
 802795e:	9314      	str	r3, [sp, #80]	@ 0x50
 8027960:	b280      	uxth	r0, r0
 8027962:	b289      	uxth	r1, r1
 8027964:	fb00 f901 	mul.w	r9, r0, r1
 8027968:	0100      	lsls	r0, r0, #4
 802796a:	eba0 0809 	sub.w	r8, r0, r9
 802796e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8027972:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8027974:	fa1f f888 	uxth.w	r8, r8
 8027978:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802797c:	fb08 f000 	mul.w	r0, r8, r0
 8027980:	b289      	uxth	r1, r1
 8027982:	1a5b      	subs	r3, r3, r1
 8027984:	b29b      	uxth	r3, r3
 8027986:	fb03 000e 	mla	r0, r3, lr, r0
 802798a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802798c:	fb01 0005 	mla	r0, r1, r5, r0
 8027990:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8027992:	fb09 0005 	mla	r0, r9, r5, r0
 8027996:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802799a:	2800      	cmp	r0, #0
 802799c:	f000 80fa 	beq.w	8027b94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80279a0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80279a4:	d01b      	beq.n	80279de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80279a6:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 80279aa:	fb0e fa0a 	mul.w	sl, lr, sl
 80279ae:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80279b2:	fb0e fe02 	mul.w	lr, lr, r2
 80279b6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80279ba:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80279be:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80279c2:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80279c6:	4452      	add	r2, sl
 80279c8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80279cc:	0a12      	lsrs	r2, r2, #8
 80279ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80279d2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80279d6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80279da:	ea42 020c 	orr.w	r2, r2, ip
 80279de:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80279e0:	2dff      	cmp	r5, #255	@ 0xff
 80279e2:	d021      	beq.n	8027a28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 80279e4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80279e6:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80279ea:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80279ec:	fb05 fb0b 	mul.w	fp, r5, fp
 80279f0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80279f2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80279f6:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80279fa:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80279fc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027a00:	fb05 fa0a 	mul.w	sl, r5, sl
 8027a04:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027a08:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027a0c:	44de      	add	lr, fp
 8027a0e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027a12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027a16:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027a1a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027a1e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027a22:	ea4e 050a 	orr.w	r5, lr, sl
 8027a26:	950c      	str	r5, [sp, #48]	@ 0x30
 8027a28:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8027a2a:	2dff      	cmp	r5, #255	@ 0xff
 8027a2c:	d021      	beq.n	8027a72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8027a2e:	9d08      	ldr	r5, [sp, #32]
 8027a30:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8027a34:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8027a36:	fb05 fb0b 	mul.w	fp, r5, fp
 8027a3a:	9d08      	ldr	r5, [sp, #32]
 8027a3c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027a40:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8027a44:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8027a46:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027a4a:	fb05 fa0a 	mul.w	sl, r5, sl
 8027a4e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027a52:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027a56:	44de      	add	lr, fp
 8027a58:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027a5c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027a60:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027a64:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027a68:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027a6c:	ea4e 050a 	orr.w	r5, lr, sl
 8027a70:	9508      	str	r5, [sp, #32]
 8027a72:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8027a74:	2dff      	cmp	r5, #255	@ 0xff
 8027a76:	d021      	beq.n	8027abc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8027a78:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8027a7a:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8027a7e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8027a80:	fb05 fb0b 	mul.w	fp, r5, fp
 8027a84:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8027a86:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027a8a:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8027a8e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8027a90:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027a94:	fb05 fa0a 	mul.w	sl, r5, sl
 8027a98:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027a9c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027aa0:	44de      	add	lr, fp
 8027aa2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027aa6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027aaa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027aae:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027ab2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027ab6:	ea4e 050a 	orr.w	r5, lr, sl
 8027aba:	950d      	str	r5, [sp, #52]	@ 0x34
 8027abc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8027abe:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8027ac2:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8027ac6:	fb08 fc0c 	mul.w	ip, r8, ip
 8027aca:	fb03 cc0e 	mla	ip, r3, lr, ip
 8027ace:	9d08      	ldr	r5, [sp, #32]
 8027ad0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027ad4:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8027ad8:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027adc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8027ade:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8027ae2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8027ae4:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027ae8:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8027aec:	fb08 f80e 	mul.w	r8, r8, lr
 8027af0:	fb03 8202 	mla	r2, r3, r2, r8
 8027af4:	9b08      	ldr	r3, [sp, #32]
 8027af6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027afa:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8027afe:	fb01 220a 	mla	r2, r1, sl, r2
 8027b02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027b04:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027b08:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8027b0c:	fb09 2901 	mla	r9, r9, r1, r2
 8027b10:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8027b12:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027b16:	4342      	muls	r2, r0
 8027b18:	1c50      	adds	r0, r2, #1
 8027b1a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8027b1e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8027b22:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8027b26:	ea4c 0c09 	orr.w	ip, ip, r9
 8027b2a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027b2c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8027b30:	883b      	ldrh	r3, [r7, #0]
 8027b32:	fb12 f205 	smulbb	r2, r2, r5
 8027b36:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8027b3a:	fa5f fc8c 	uxtb.w	ip, ip
 8027b3e:	1219      	asrs	r1, r3, #8
 8027b40:	fb1c fc05 	smulbb	ip, ip, r5
 8027b44:	b2c0      	uxtb	r0, r0
 8027b46:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8027b4a:	fb01 2100 	mla	r1, r1, r0, r2
 8027b4e:	10da      	asrs	r2, r3, #3
 8027b50:	00db      	lsls	r3, r3, #3
 8027b52:	fb1e fe05 	smulbb	lr, lr, r5
 8027b56:	b2db      	uxtb	r3, r3
 8027b58:	fb03 c300 	mla	r3, r3, r0, ip
 8027b5c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8027b60:	b289      	uxth	r1, r1
 8027b62:	fb02 e200 	mla	r2, r2, r0, lr
 8027b66:	fa1f fc83 	uxth.w	ip, r3
 8027b6a:	1c4b      	adds	r3, r1, #1
 8027b6c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027b70:	f10c 0301 	add.w	r3, ip, #1
 8027b74:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8027b78:	b292      	uxth	r2, r2
 8027b7a:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8027b7e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027b82:	430b      	orrs	r3, r1
 8027b84:	1c51      	adds	r1, r2, #1
 8027b86:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027b8a:	0952      	lsrs	r2, r2, #5
 8027b8c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027b90:	4313      	orrs	r3, r2
 8027b92:	803b      	strh	r3, [r7, #0]
 8027b94:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8027b96:	3702      	adds	r7, #2
 8027b98:	441c      	add	r4, r3
 8027b9a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027b9c:	441e      	add	r6, r3
 8027b9e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8027ba0:	3b01      	subs	r3, #1
 8027ba2:	9318      	str	r3, [sp, #96]	@ 0x60
 8027ba4:	e698      	b.n	80278d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8027ba6:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8027ba8:	441c      	add	r4, r3
 8027baa:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027bac:	441e      	add	r6, r3
 8027bae:	9b07      	ldr	r3, [sp, #28]
 8027bb0:	3b01      	subs	r3, #1
 8027bb2:	9307      	str	r3, [sp, #28]
 8027bb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027bb6:	3302      	adds	r3, #2
 8027bb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8027bba:	e66d      	b.n	8027898 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8027bbc:	d023      	beq.n	8027c06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8027bbe:	9b07      	ldr	r3, [sp, #28]
 8027bc0:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8027bc2:	3b01      	subs	r3, #1
 8027bc4:	fb00 4003 	mla	r0, r0, r3, r4
 8027bc8:	1400      	asrs	r0, r0, #16
 8027bca:	f53f ae82 	bmi.w	80278d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027bce:	3901      	subs	r1, #1
 8027bd0:	4288      	cmp	r0, r1
 8027bd2:	f6bf ae7e 	bge.w	80278d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027bd6:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8027bd8:	fb01 6303 	mla	r3, r1, r3, r6
 8027bdc:	141b      	asrs	r3, r3, #16
 8027bde:	f53f ae78 	bmi.w	80278d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027be2:	3a01      	subs	r2, #1
 8027be4:	4293      	cmp	r3, r2
 8027be6:	f6bf ae74 	bge.w	80278d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027bea:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027bee:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8027bf2:	f1bb 0f00 	cmp.w	fp, #0
 8027bf6:	dc6c      	bgt.n	8027cd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8027bf8:	9b07      	ldr	r3, [sp, #28]
 8027bfa:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027bfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027c00:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027c04:	930a      	str	r3, [sp, #40]	@ 0x28
 8027c06:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8027c08:	2b00      	cmp	r3, #0
 8027c0a:	f340 81b3 	ble.w	8027f74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8027c0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027c12:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027c16:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027c1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027c1e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027c22:	eef0 6a62 	vmov.f32	s13, s5
 8027c26:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027c2a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027c2e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027c32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027c36:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027c3a:	ee16 4a90 	vmov	r4, s13
 8027c3e:	eef0 6a43 	vmov.f32	s13, s6
 8027c42:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027c46:	ee12 2a90 	vmov	r2, s5
 8027c4a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027c4e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027c50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027c54:	fb92 f3f3 	sdiv	r3, r2, r3
 8027c58:	ee13 2a10 	vmov	r2, s6
 8027c5c:	9329      	str	r3, [sp, #164]	@ 0xa4
 8027c5e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027c60:	ee16 6a90 	vmov	r6, s13
 8027c64:	fb92 f3f3 	sdiv	r3, r2, r3
 8027c68:	932a      	str	r3, [sp, #168]	@ 0xa8
 8027c6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8027c6c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8027c6e:	3b01      	subs	r3, #1
 8027c70:	9317      	str	r3, [sp, #92]	@ 0x5c
 8027c72:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027c74:	bf08      	it	eq
 8027c76:	4613      	moveq	r3, r2
 8027c78:	eeb0 3a67 	vmov.f32	s6, s15
 8027c7c:	9307      	str	r3, [sp, #28]
 8027c7e:	eef0 2a47 	vmov.f32	s5, s14
 8027c82:	e5fb      	b.n	802787c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8027c84:	2900      	cmp	r1, #0
 8027c86:	f43f ae6b 	beq.w	8027960 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8027c8a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8027c8e:	9308      	str	r3, [sp, #32]
 8027c90:	0e1b      	lsrs	r3, r3, #24
 8027c92:	9311      	str	r3, [sp, #68]	@ 0x44
 8027c94:	e664      	b.n	8027960 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8027c96:	f112 0801 	adds.w	r8, r2, #1
 8027c9a:	f53f af7b 	bmi.w	8027b94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027c9e:	4543      	cmp	r3, r8
 8027ca0:	f6ff af78 	blt.w	8027b94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027ca4:	f11c 0801 	adds.w	r8, ip, #1
 8027ca8:	f53f af74 	bmi.w	8027b94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027cac:	45c6      	cmp	lr, r8
 8027cae:	f6ff af71 	blt.w	8027b94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027cb2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8027cb4:	9201      	str	r2, [sp, #4]
 8027cb6:	fa0f f28e 	sxth.w	r2, lr
 8027cba:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8027cbe:	e9cd c002 	strd	ip, r0, [sp, #8]
 8027cc2:	9200      	str	r2, [sp, #0]
 8027cc4:	b21b      	sxth	r3, r3
 8027cc6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8027cc8:	4639      	mov	r1, r7
 8027cca:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8027ccc:	f7ff fc79 	bl	80275c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8027cd0:	e760      	b.n	8027b94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027cd2:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8027cd4:	1427      	asrs	r7, r4, #16
 8027cd6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027cda:	1433      	asrs	r3, r6, #16
 8027cdc:	fb01 7303 	mla	r3, r1, r3, r7
 8027ce0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8027ce2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027ce6:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8027cea:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027cee:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027cf2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027cf6:	2a00      	cmp	r2, #0
 8027cf8:	f000 8133 	beq.w	8027f62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8027cfc:	687d      	ldr	r5, [r7, #4]
 8027cfe:	950e      	str	r5, [sp, #56]	@ 0x38
 8027d00:	0e2d      	lsrs	r5, r5, #24
 8027d02:	9515      	str	r5, [sp, #84]	@ 0x54
 8027d04:	b178      	cbz	r0, 8027d26 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027d06:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8027d0a:	3901      	subs	r1, #1
 8027d0c:	0089      	lsls	r1, r1, #2
 8027d0e:	3104      	adds	r1, #4
 8027d10:	eb07 0e01 	add.w	lr, r7, r1
 8027d14:	5879      	ldr	r1, [r7, r1]
 8027d16:	9109      	str	r1, [sp, #36]	@ 0x24
 8027d18:	0e09      	lsrs	r1, r1, #24
 8027d1a:	9112      	str	r1, [sp, #72]	@ 0x48
 8027d1c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8027d20:	910f      	str	r1, [sp, #60]	@ 0x3c
 8027d22:	0e09      	lsrs	r1, r1, #24
 8027d24:	9116      	str	r1, [sp, #88]	@ 0x58
 8027d26:	b292      	uxth	r2, r2
 8027d28:	b280      	uxth	r0, r0
 8027d2a:	fb02 f800 	mul.w	r8, r2, r0
 8027d2e:	0112      	lsls	r2, r2, #4
 8027d30:	eba2 0e08 	sub.w	lr, r2, r8
 8027d34:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8027d36:	fa1f fe8e 	uxth.w	lr, lr
 8027d3a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8027d3e:	fb0e f101 	mul.w	r1, lr, r1
 8027d42:	b280      	uxth	r0, r0
 8027d44:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8027d48:	1a12      	subs	r2, r2, r0
 8027d4a:	b292      	uxth	r2, r2
 8027d4c:	fb02 110c 	mla	r1, r2, ip, r1
 8027d50:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027d52:	fb00 1105 	mla	r1, r0, r5, r1
 8027d56:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8027d58:	fb08 1105 	mla	r1, r8, r5, r1
 8027d5c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027d60:	2900      	cmp	r1, #0
 8027d62:	f000 80f5 	beq.w	8027f50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8027d66:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8027d6a:	d019      	beq.n	8027da0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8027d6c:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8027d70:	fb0c fa0a 	mul.w	sl, ip, sl
 8027d74:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027d78:	fb0c fc03 	mul.w	ip, ip, r3
 8027d7c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027d80:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8027d84:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8027d88:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8027d8c:	4453      	add	r3, sl
 8027d8e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027d92:	0a1b      	lsrs	r3, r3, #8
 8027d94:	0a3f      	lsrs	r7, r7, #8
 8027d96:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8027d9a:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8027d9e:	433b      	orrs	r3, r7
 8027da0:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8027da2:	2dff      	cmp	r5, #255	@ 0xff
 8027da4:	d020      	beq.n	8027de8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8027da6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8027da8:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8027dac:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8027dae:	436f      	muls	r7, r5
 8027db0:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8027db2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027db6:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8027dba:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8027dbc:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027dc0:	fb05 fa0a 	mul.w	sl, r5, sl
 8027dc4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027dc8:	44bc      	add	ip, r7
 8027dca:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027dce:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027dd2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027dd6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027dda:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027dde:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027de2:	ea4c 050a 	orr.w	r5, ip, sl
 8027de6:	950e      	str	r5, [sp, #56]	@ 0x38
 8027de8:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027dea:	2dff      	cmp	r5, #255	@ 0xff
 8027dec:	d020      	beq.n	8027e30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8027dee:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8027df0:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8027df4:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027df6:	436f      	muls	r7, r5
 8027df8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8027dfa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027dfe:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8027e02:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027e04:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027e08:	fb05 fa0a 	mul.w	sl, r5, sl
 8027e0c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027e10:	44bc      	add	ip, r7
 8027e12:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027e16:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027e1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027e1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027e22:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027e26:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027e2a:	ea4c 050a 	orr.w	r5, ip, sl
 8027e2e:	9509      	str	r5, [sp, #36]	@ 0x24
 8027e30:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8027e32:	2dff      	cmp	r5, #255	@ 0xff
 8027e34:	d020      	beq.n	8027e78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8027e36:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027e38:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8027e3c:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8027e3e:	436f      	muls	r7, r5
 8027e40:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027e42:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027e46:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8027e4a:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8027e4c:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027e50:	fb05 fa0a 	mul.w	sl, r5, sl
 8027e54:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027e58:	44bc      	add	ip, r7
 8027e5a:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027e5e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027e62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027e66:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027e6a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027e6e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027e72:	ea4c 050a 	orr.w	r5, ip, sl
 8027e76:	950f      	str	r5, [sp, #60]	@ 0x3c
 8027e78:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8027e7a:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8027e7e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8027e82:	fb0e f707 	mul.w	r7, lr, r7
 8027e86:	fb02 770c 	mla	r7, r2, ip, r7
 8027e8a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8027e8c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027e90:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8027e94:	fb00 770c 	mla	r7, r0, ip, r7
 8027e98:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027e9a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8027e9e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8027ea0:	fb08 770c 	mla	r7, r8, ip, r7
 8027ea4:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8027ea8:	fb0e fe0c 	mul.w	lr, lr, ip
 8027eac:	fb02 e303 	mla	r3, r2, r3, lr
 8027eb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027eb2:	0a3f      	lsrs	r7, r7, #8
 8027eb4:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8027eb8:	fb00 330a 	mla	r3, r0, sl, r3
 8027ebc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027ebe:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8027ec2:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8027ec6:	fb08 3c0c 	mla	ip, r8, ip, r3
 8027eca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027ecc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027ed0:	4359      	muls	r1, r3
 8027ed2:	1c4b      	adds	r3, r1, #1
 8027ed4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027ed8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8027edc:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8027ee0:	ea47 070c 	orr.w	r7, r7, ip
 8027ee4:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027ee6:	0c3b      	lsrs	r3, r7, #16
 8027ee8:	f8b9 0000 	ldrh.w	r0, [r9]
 8027eec:	fb13 f305 	smulbb	r3, r3, r5
 8027ef0:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8027ef4:	b2ff      	uxtb	r7, r7
 8027ef6:	1202      	asrs	r2, r0, #8
 8027ef8:	fb17 f705 	smulbb	r7, r7, r5
 8027efc:	b2c9      	uxtb	r1, r1
 8027efe:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8027f02:	fb02 3201 	mla	r2, r2, r1, r3
 8027f06:	10c3      	asrs	r3, r0, #3
 8027f08:	00c0      	lsls	r0, r0, #3
 8027f0a:	fb1c fc05 	smulbb	ip, ip, r5
 8027f0e:	b2c0      	uxtb	r0, r0
 8027f10:	fb00 7001 	mla	r0, r0, r1, r7
 8027f14:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8027f18:	fb03 c301 	mla	r3, r3, r1, ip
 8027f1c:	b292      	uxth	r2, r2
 8027f1e:	b280      	uxth	r0, r0
 8027f20:	1c51      	adds	r1, r2, #1
 8027f22:	f100 0c01 	add.w	ip, r0, #1
 8027f26:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027f2a:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8027f2e:	b29b      	uxth	r3, r3
 8027f30:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8027f34:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8027f38:	ea4c 0202 	orr.w	r2, ip, r2
 8027f3c:	f103 0c01 	add.w	ip, r3, #1
 8027f40:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8027f44:	095b      	lsrs	r3, r3, #5
 8027f46:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027f4a:	431a      	orrs	r2, r3
 8027f4c:	f8a9 2000 	strh.w	r2, [r9]
 8027f50:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8027f52:	f109 0902 	add.w	r9, r9, #2
 8027f56:	441c      	add	r4, r3
 8027f58:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027f5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027f5e:	441e      	add	r6, r3
 8027f60:	e647      	b.n	8027bf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8027f62:	2800      	cmp	r0, #0
 8027f64:	f43f aedf 	beq.w	8027d26 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027f68:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8027f6c:	9109      	str	r1, [sp, #36]	@ 0x24
 8027f6e:	0e09      	lsrs	r1, r1, #24
 8027f70:	9112      	str	r1, [sp, #72]	@ 0x48
 8027f72:	e6d8      	b.n	8027d26 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027f74:	b01d      	add	sp, #116	@ 0x74
 8027f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027f7a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8027f7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f7e:	b085      	sub	sp, #20
 8027f80:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 8027f84:	9102      	str	r1, [sp, #8]
 8027f86:	fb04 7103 	mla	r1, r4, r3, r7
 8027f8a:	2c00      	cmp	r4, #0
 8027f8c:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 8027f90:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8027f94:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8027f98:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8027f9c:	f2c0 810c 	blt.w	80281b8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8027fa0:	45a6      	cmp	lr, r4
 8027fa2:	f340 8109 	ble.w	80281b8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8027fa6:	2f00      	cmp	r7, #0
 8027fa8:	f2c0 8104 	blt.w	80281b4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8027fac:	42bb      	cmp	r3, r7
 8027fae:	f340 8101 	ble.w	80281b4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8027fb2:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8027fb6:	1c7a      	adds	r2, r7, #1
 8027fb8:	f100 8101 	bmi.w	80281be <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8027fbc:	4293      	cmp	r3, r2
 8027fbe:	f340 80fe 	ble.w	80281be <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8027fc2:	2e00      	cmp	r6, #0
 8027fc4:	f000 80fd 	beq.w	80281c2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8027fc8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8027fcc:	3401      	adds	r4, #1
 8027fce:	f100 80fc 	bmi.w	80281ca <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8027fd2:	45a6      	cmp	lr, r4
 8027fd4:	f340 80f9 	ble.w	80281ca <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8027fd8:	2800      	cmp	r0, #0
 8027fda:	f000 80f9 	beq.w	80281d0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8027fde:	2f00      	cmp	r7, #0
 8027fe0:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8027fe4:	f2c0 80ef 	blt.w	80281c6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8027fe8:	42bb      	cmp	r3, r7
 8027fea:	f340 80ec 	ble.w	80281c6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8027fee:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8027ff2:	3701      	adds	r7, #1
 8027ff4:	f100 80ef 	bmi.w	80281d6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8027ff8:	42bb      	cmp	r3, r7
 8027ffa:	f340 80ec 	ble.w	80281d6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8027ffe:	2e00      	cmp	r6, #0
 8028000:	f000 80eb 	beq.w	80281da <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8028004:	6852      	ldr	r2, [r2, #4]
 8028006:	b2b6      	uxth	r6, r6
 8028008:	b280      	uxth	r0, r0
 802800a:	fb00 fe06 	mul.w	lr, r0, r6
 802800e:	0136      	lsls	r6, r6, #4
 8028010:	eba6 070e 	sub.w	r7, r6, lr
 8028014:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8028018:	b2bf      	uxth	r7, r7
 802801a:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 802801e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8028022:	fb07 f60a 	mul.w	r6, r7, sl
 8028026:	b280      	uxth	r0, r0
 8028028:	1a1b      	subs	r3, r3, r0
 802802a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802802e:	b29b      	uxth	r3, r3
 8028030:	fb0b 6603 	mla	r6, fp, r3, r6
 8028034:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8028038:	fb00 6609 	mla	r6, r0, r9, r6
 802803c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8028040:	fb0e 6608 	mla	r6, lr, r8, r6
 8028044:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8028048:	9600      	str	r6, [sp, #0]
 802804a:	2e00      	cmp	r6, #0
 802804c:	f000 80af 	beq.w	80281ae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8028050:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028054:	fb0b fc0c 	mul.w	ip, fp, ip
 8028058:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802805c:	fb0b f505 	mul.w	r5, fp, r5
 8028060:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8028064:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8028068:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802806c:	44dc      	add	ip, fp
 802806e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028072:	9501      	str	r5, [sp, #4]
 8028074:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8028078:	9503      	str	r5, [sp, #12]
 802807a:	9d01      	ldr	r5, [sp, #4]
 802807c:	9e02      	ldr	r6, [sp, #8]
 802807e:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8028082:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8028086:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 802808a:	fb0a fc0c 	mul.w	ip, sl, ip
 802808e:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8028092:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8028096:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802809a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802809e:	4465      	add	r5, ip
 80280a0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80280a4:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80280a8:	fb09 fc0c 	mul.w	ip, r9, ip
 80280ac:	fb09 f904 	mul.w	r9, r9, r4
 80280b0:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 80280b4:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80280b8:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 80280bc:	fb08 f404 	mul.w	r4, r8, r4
 80280c0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80280c4:	fb08 f802 	mul.w	r8, r8, r2
 80280c8:	0a2d      	lsrs	r5, r5, #8
 80280ca:	0a22      	lsrs	r2, r4, #8
 80280cc:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80280d0:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80280d4:	437d      	muls	r5, r7
 80280d6:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80280da:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80280de:	4414      	add	r4, r2
 80280e0:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 80280e4:	fb0a fa01 	mul.w	sl, sl, r1
 80280e8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80280ec:	9a03      	ldr	r2, [sp, #12]
 80280ee:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 80280f2:	fb02 5503 	mla	r5, r2, r3, r5
 80280f6:	0a24      	lsrs	r4, r4, #8
 80280f8:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80280fc:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8028100:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8028104:	fb04 540e 	mla	r4, r4, lr, r5
 8028108:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802810c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8028110:	4461      	add	r1, ip
 8028112:	0a09      	lsrs	r1, r1, #8
 8028114:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8028118:	fb01 4100 	mla	r1, r1, r0, r4
 802811c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028120:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028124:	fb07 f70a 	mul.w	r7, r7, sl
 8028128:	0a09      	lsrs	r1, r1, #8
 802812a:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 802812e:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8028132:	fb03 7101 	mla	r1, r3, r1, r7
 8028136:	9b00      	ldr	r3, [sp, #0]
 8028138:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802813c:	43da      	mvns	r2, r3
 802813e:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8028142:	fb0e 1e08 	mla	lr, lr, r8, r1
 8028146:	8836      	ldrh	r6, [r6, #0]
 8028148:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802814c:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8028150:	fb00 e101 	mla	r1, r0, r1, lr
 8028154:	1233      	asrs	r3, r6, #8
 8028156:	b2d2      	uxtb	r2, r2
 8028158:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802815c:	4353      	muls	r3, r2
 802815e:	10f0      	asrs	r0, r6, #3
 8028160:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8028164:	4350      	muls	r0, r2
 8028166:	0a09      	lsrs	r1, r1, #8
 8028168:	00f6      	lsls	r6, r6, #3
 802816a:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802816e:	b2f6      	uxtb	r6, r6
 8028170:	4321      	orrs	r1, r4
 8028172:	4356      	muls	r6, r2
 8028174:	1c5a      	adds	r2, r3, #1
 8028176:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802817a:	0c0b      	lsrs	r3, r1, #16
 802817c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028180:	1c42      	adds	r2, r0, #1
 8028182:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028186:	0a0a      	lsrs	r2, r1, #8
 8028188:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802818c:	021b      	lsls	r3, r3, #8
 802818e:	00d2      	lsls	r2, r2, #3
 8028190:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028194:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8028198:	4313      	orrs	r3, r2
 802819a:	1c72      	adds	r2, r6, #1
 802819c:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80281a0:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 80281a4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80281a8:	4319      	orrs	r1, r3
 80281aa:	9b02      	ldr	r3, [sp, #8]
 80281ac:	8019      	strh	r1, [r3, #0]
 80281ae:	b005      	add	sp, #20
 80281b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80281b4:	2500      	movs	r5, #0
 80281b6:	e6fe      	b.n	8027fb6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 80281b8:	2100      	movs	r1, #0
 80281ba:	460d      	mov	r5, r1
 80281bc:	e706      	b.n	8027fcc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80281be:	2100      	movs	r1, #0
 80281c0:	e704      	b.n	8027fcc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80281c2:	4631      	mov	r1, r6
 80281c4:	e702      	b.n	8027fcc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80281c6:	2400      	movs	r4, #0
 80281c8:	e713      	b.n	8027ff2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 80281ca:	2200      	movs	r2, #0
 80281cc:	4614      	mov	r4, r2
 80281ce:	e71a      	b.n	8028006 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80281d0:	4602      	mov	r2, r0
 80281d2:	4604      	mov	r4, r0
 80281d4:	e717      	b.n	8028006 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80281d6:	2200      	movs	r2, #0
 80281d8:	e715      	b.n	8028006 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80281da:	4632      	mov	r2, r6
 80281dc:	e713      	b.n	8028006 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

080281e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80281e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80281e4:	b09b      	sub	sp, #108	@ 0x6c
 80281e6:	9218      	str	r2, [sp, #96]	@ 0x60
 80281e8:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80281ea:	9019      	str	r0, [sp, #100]	@ 0x64
 80281ec:	6850      	ldr	r0, [r2, #4]
 80281ee:	9116      	str	r1, [sp, #88]	@ 0x58
 80281f0:	9307      	str	r3, [sp, #28]
 80281f2:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80281f6:	fb00 1303 	mla	r3, r0, r3, r1
 80281fa:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 80281fe:	6812      	ldr	r2, [r2, #0]
 8028200:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028204:	930a      	str	r3, [sp, #40]	@ 0x28
 8028206:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8028208:	681b      	ldr	r3, [r3, #0]
 802820a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802820c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802820e:	2b00      	cmp	r3, #0
 8028210:	dc03      	bgt.n	802821a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8028212:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028214:	2b00      	cmp	r3, #0
 8028216:	f340 8387 	ble.w	8028928 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802821a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802821c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028220:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028224:	1e48      	subs	r0, r1, #1
 8028226:	1e57      	subs	r7, r2, #1
 8028228:	9b07      	ldr	r3, [sp, #28]
 802822a:	2b00      	cmp	r3, #0
 802822c:	f340 8166 	ble.w	80284fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8028230:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8028234:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028238:	d406      	bmi.n	8028248 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802823a:	4584      	cmp	ip, r0
 802823c:	da04      	bge.n	8028248 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802823e:	2b00      	cmp	r3, #0
 8028240:	db02      	blt.n	8028248 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8028242:	42bb      	cmp	r3, r7
 8028244:	f2c0 815b 	blt.w	80284fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8028248:	f11c 0c01 	adds.w	ip, ip, #1
 802824c:	f100 814b 	bmi.w	80284e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8028250:	4561      	cmp	r1, ip
 8028252:	f2c0 8148 	blt.w	80284e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8028256:	3301      	adds	r3, #1
 8028258:	f100 8145 	bmi.w	80284e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802825c:	429a      	cmp	r2, r3
 802825e:	f2c0 8142 	blt.w	80284e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8028262:	9b07      	ldr	r3, [sp, #28]
 8028264:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8028266:	9317      	str	r3, [sp, #92]	@ 0x5c
 8028268:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802826a:	2b00      	cmp	r3, #0
 802826c:	f340 8165 	ble.w	802853a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8028270:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8028272:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8028274:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8028278:	1422      	asrs	r2, r4, #16
 802827a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802827e:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8028282:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028286:	689b      	ldr	r3, [r3, #8]
 8028288:	f100 81d5 	bmi.w	8028636 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802828c:	f103 38ff 	add.w	r8, r3, #4294967295
 8028290:	4542      	cmp	r2, r8
 8028292:	f280 81d0 	bge.w	8028636 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8028296:	f1bc 0f00 	cmp.w	ip, #0
 802829a:	f2c0 81cc 	blt.w	8028636 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802829e:	f10e 38ff 	add.w	r8, lr, #4294967295
 80282a2:	45c4      	cmp	ip, r8
 80282a4:	f280 81c7 	bge.w	8028636 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80282a8:	b21b      	sxth	r3, r3
 80282aa:	fb0c 2203 	mla	r2, ip, r3, r2
 80282ae:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80282b0:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80282b4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80282b8:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80282bc:	2900      	cmp	r1, #0
 80282be:	f000 8182 	beq.w	80285c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80282c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80282c6:	950b      	str	r5, [sp, #44]	@ 0x2c
 80282c8:	0e2d      	lsrs	r5, r5, #24
 80282ca:	9512      	str	r5, [sp, #72]	@ 0x48
 80282cc:	b180      	cbz	r0, 80282f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80282ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80282d2:	3b01      	subs	r3, #1
 80282d4:	009b      	lsls	r3, r3, #2
 80282d6:	3304      	adds	r3, #4
 80282d8:	eb08 0c03 	add.w	ip, r8, r3
 80282dc:	f858 3003 	ldr.w	r3, [r8, r3]
 80282e0:	9308      	str	r3, [sp, #32]
 80282e2:	0e1b      	lsrs	r3, r3, #24
 80282e4:	9310      	str	r3, [sp, #64]	@ 0x40
 80282e6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80282ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80282ec:	0e1b      	lsrs	r3, r3, #24
 80282ee:	9313      	str	r3, [sp, #76]	@ 0x4c
 80282f0:	b289      	uxth	r1, r1
 80282f2:	b280      	uxth	r0, r0
 80282f4:	fb01 f900 	mul.w	r9, r1, r0
 80282f8:	0109      	lsls	r1, r1, #4
 80282fa:	eba1 0809 	sub.w	r8, r1, r9
 80282fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8028300:	fa1f f888 	uxth.w	r8, r8
 8028304:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8028308:	fb08 f303 	mul.w	r3, r8, r3
 802830c:	b280      	uxth	r0, r0
 802830e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8028312:	1a09      	subs	r1, r1, r0
 8028314:	b289      	uxth	r1, r1
 8028316:	fb01 330e 	mla	r3, r1, lr, r3
 802831a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802831c:	fb00 3305 	mla	r3, r0, r5, r3
 8028320:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028322:	fb09 3305 	mla	r3, r9, r5, r3
 8028326:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802832a:	2b00      	cmp	r3, #0
 802832c:	f000 80d2 	beq.w	80284d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8028330:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8028334:	d01b      	beq.n	802836e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8028336:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 802833a:	fb0e fa0a 	mul.w	sl, lr, sl
 802833e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028342:	fb0e fe02 	mul.w	lr, lr, r2
 8028346:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802834a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802834e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8028352:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8028356:	4452      	add	r2, sl
 8028358:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802835c:	0a12      	lsrs	r2, r2, #8
 802835e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028362:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028366:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802836a:	ea42 020c 	orr.w	r2, r2, ip
 802836e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028370:	2dff      	cmp	r5, #255	@ 0xff
 8028372:	d021      	beq.n	80283b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8028374:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8028376:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802837a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802837c:	fb05 fb0b 	mul.w	fp, r5, fp
 8028380:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8028382:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028386:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802838a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802838c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028390:	fb05 fa0a 	mul.w	sl, r5, sl
 8028394:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028398:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802839c:	44de      	add	lr, fp
 802839e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80283a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80283a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80283aa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80283ae:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80283b2:	ea4e 050a 	orr.w	r5, lr, sl
 80283b6:	950b      	str	r5, [sp, #44]	@ 0x2c
 80283b8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80283ba:	2dff      	cmp	r5, #255	@ 0xff
 80283bc:	d021      	beq.n	8028402 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80283be:	9d08      	ldr	r5, [sp, #32]
 80283c0:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80283c4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80283c6:	fb05 fb0b 	mul.w	fp, r5, fp
 80283ca:	9d08      	ldr	r5, [sp, #32]
 80283cc:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80283d0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80283d2:	fb05 fa0e 	mul.w	sl, r5, lr
 80283d6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80283da:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80283de:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80283e2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80283e6:	44de      	add	lr, fp
 80283e8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80283ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80283f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80283f4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80283f8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80283fc:	ea4e 050a 	orr.w	r5, lr, sl
 8028400:	9508      	str	r5, [sp, #32]
 8028402:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028404:	2dff      	cmp	r5, #255	@ 0xff
 8028406:	d021      	beq.n	802844c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8028408:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802840a:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802840e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028410:	fb05 fb0b 	mul.w	fp, r5, fp
 8028414:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028416:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802841a:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802841e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028420:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028424:	fb05 fa0a 	mul.w	sl, r5, sl
 8028428:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802842c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028430:	44de      	add	lr, fp
 8028432:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028436:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802843a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802843e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028442:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028446:	ea4e 050a 	orr.w	r5, lr, sl
 802844a:	950c      	str	r5, [sp, #48]	@ 0x30
 802844c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802844e:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8028452:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028456:	fb08 fc0c 	mul.w	ip, r8, ip
 802845a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802845e:	9d08      	ldr	r5, [sp, #32]
 8028460:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028464:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8028468:	fb00 cc0e 	mla	ip, r0, lr, ip
 802846c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802846e:	2bff      	cmp	r3, #255	@ 0xff
 8028470:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8028474:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8028476:	fb09 cc0e 	mla	ip, r9, lr, ip
 802847a:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802847e:	fb08 f80e 	mul.w	r8, r8, lr
 8028482:	fb01 8202 	mla	r2, r1, r2, r8
 8028486:	9908      	ldr	r1, [sp, #32]
 8028488:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802848c:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8028490:	fb00 220a 	mla	r2, r0, sl, r2
 8028494:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8028496:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802849a:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 802849e:	fb09 2900 	mla	r9, r9, r0, r2
 80284a2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80284a6:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80284aa:	ea4c 0c09 	orr.w	ip, ip, r9
 80284ae:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80284b2:	f040 8091 	bne.w	80285d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80284b6:	ea4f 135c 	mov.w	r3, ip, lsr #5
 80284ba:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 80284be:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80284c2:	f022 0207 	bic.w	r2, r2, #7
 80284c6:	431a      	orrs	r2, r3
 80284c8:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80284cc:	ea4c 0c02 	orr.w	ip, ip, r2
 80284d0:	f8a7 c000 	strh.w	ip, [r7]
 80284d4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80284d6:	3702      	adds	r7, #2
 80284d8:	441c      	add	r4, r3
 80284da:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80284dc:	441e      	add	r6, r3
 80284de:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80284e0:	3b01      	subs	r3, #1
 80284e2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80284e4:	e6c0      	b.n	8028268 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80284e6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80284e8:	441c      	add	r4, r3
 80284ea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80284ec:	441e      	add	r6, r3
 80284ee:	9b07      	ldr	r3, [sp, #28]
 80284f0:	3b01      	subs	r3, #1
 80284f2:	9307      	str	r3, [sp, #28]
 80284f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80284f6:	3302      	adds	r3, #2
 80284f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80284fa:	e695      	b.n	8028228 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80284fc:	d024      	beq.n	8028548 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80284fe:	9b07      	ldr	r3, [sp, #28]
 8028500:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8028502:	3b01      	subs	r3, #1
 8028504:	fb00 4003 	mla	r0, r0, r3, r4
 8028508:	1400      	asrs	r0, r0, #16
 802850a:	f53f aeaa 	bmi.w	8028262 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802850e:	3901      	subs	r1, #1
 8028510:	4288      	cmp	r0, r1
 8028512:	f6bf aea6 	bge.w	8028262 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8028516:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8028518:	fb01 6303 	mla	r3, r1, r3, r6
 802851c:	141b      	asrs	r3, r3, #16
 802851e:	f53f aea0 	bmi.w	8028262 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8028522:	3a01      	subs	r2, #1
 8028524:	4293      	cmp	r3, r2
 8028526:	f6bf ae9c 	bge.w	8028262 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802852a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802852e:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8028532:	f1bb 0f00 	cmp.w	fp, #0
 8028536:	f300 809a 	bgt.w	802866e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802853a:	9b07      	ldr	r3, [sp, #28]
 802853c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028542:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028546:	930a      	str	r3, [sp, #40]	@ 0x28
 8028548:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802854a:	2b00      	cmp	r3, #0
 802854c:	f340 81ec 	ble.w	8028928 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8028550:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028554:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028558:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802855c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028560:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028564:	eef0 6a62 	vmov.f32	s13, s5
 8028568:	ee31 1a05 	vadd.f32	s2, s2, s10
 802856c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028570:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028574:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028578:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802857c:	ee16 4a90 	vmov	r4, s13
 8028580:	eef0 6a43 	vmov.f32	s13, s6
 8028584:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028588:	ee12 2a90 	vmov	r2, s5
 802858c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028590:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028592:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028596:	fb92 f3f3 	sdiv	r3, r2, r3
 802859a:	ee13 2a10 	vmov	r2, s6
 802859e:	9327      	str	r3, [sp, #156]	@ 0x9c
 80285a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80285a2:	ee16 6a90 	vmov	r6, s13
 80285a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80285aa:	9328      	str	r3, [sp, #160]	@ 0xa0
 80285ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80285ae:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80285b0:	3b01      	subs	r3, #1
 80285b2:	9316      	str	r3, [sp, #88]	@ 0x58
 80285b4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80285b6:	bf08      	it	eq
 80285b8:	4613      	moveq	r3, r2
 80285ba:	eeb0 3a67 	vmov.f32	s6, s15
 80285be:	9307      	str	r3, [sp, #28]
 80285c0:	eef0 2a47 	vmov.f32	s5, s14
 80285c4:	e622      	b.n	802820c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 80285c6:	2800      	cmp	r0, #0
 80285c8:	f43f ae92 	beq.w	80282f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80285cc:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80285d0:	9308      	str	r3, [sp, #32]
 80285d2:	0e1b      	lsrs	r3, r3, #24
 80285d4:	9310      	str	r3, [sp, #64]	@ 0x40
 80285d6:	e68b      	b.n	80282f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80285d8:	43db      	mvns	r3, r3
 80285da:	8839      	ldrh	r1, [r7, #0]
 80285dc:	fa5f f883 	uxtb.w	r8, r3
 80285e0:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80285e4:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 80285e8:	fb0e fe08 	mul.w	lr, lr, r8
 80285ec:	10c8      	asrs	r0, r1, #3
 80285ee:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80285f2:	fb00 f008 	mul.w	r0, r0, r8
 80285f6:	00cb      	lsls	r3, r1, #3
 80285f8:	f10e 0101 	add.w	r1, lr, #1
 80285fc:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8028600:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8028604:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8028608:	b2db      	uxtb	r3, r3
 802860a:	f100 0e01 	add.w	lr, r0, #1
 802860e:	fb03 f308 	mul.w	r3, r3, r8
 8028612:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8028616:	4dc6      	ldr	r5, [pc, #792]	@ (8028930 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8028618:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802861c:	b2c9      	uxtb	r1, r1
 802861e:	00d2      	lsls	r2, r2, #3
 8028620:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8028624:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028628:	430a      	orrs	r2, r1
 802862a:	1c59      	adds	r1, r3, #1
 802862c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028630:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8028634:	e748      	b.n	80284c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8028636:	f112 0801 	adds.w	r8, r2, #1
 802863a:	f53f af4b 	bmi.w	80284d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802863e:	4543      	cmp	r3, r8
 8028640:	f6ff af48 	blt.w	80284d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8028644:	f11c 0801 	adds.w	r8, ip, #1
 8028648:	f53f af44 	bmi.w	80284d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802864c:	45c6      	cmp	lr, r8
 802864e:	f6ff af41 	blt.w	80284d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8028652:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8028656:	fa0f f28e 	sxth.w	r2, lr
 802865a:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802865e:	9200      	str	r2, [sp, #0]
 8028660:	b21b      	sxth	r3, r3
 8028662:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8028664:	4639      	mov	r1, r7
 8028666:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8028668:	f7ff fc87 	bl	8027f7a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 802866c:	e732      	b.n	80284d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802866e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8028670:	1421      	asrs	r1, r4, #16
 8028672:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8028676:	1433      	asrs	r3, r6, #16
 8028678:	fb07 1303 	mla	r3, r7, r3, r1
 802867c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802867e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8028680:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028684:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8028688:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802868c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028690:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028694:	2a00      	cmp	r2, #0
 8028696:	f000 8108 	beq.w	80288aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 802869a:	684d      	ldr	r5, [r1, #4]
 802869c:	950d      	str	r5, [sp, #52]	@ 0x34
 802869e:	0e2d      	lsrs	r5, r5, #24
 80286a0:	9514      	str	r5, [sp, #80]	@ 0x50
 80286a2:	b178      	cbz	r0, 80286c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80286a4:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80286a8:	3f01      	subs	r7, #1
 80286aa:	00bf      	lsls	r7, r7, #2
 80286ac:	3704      	adds	r7, #4
 80286ae:	eb01 0e07 	add.w	lr, r1, r7
 80286b2:	59c9      	ldr	r1, [r1, r7]
 80286b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80286b6:	0e09      	lsrs	r1, r1, #24
 80286b8:	9111      	str	r1, [sp, #68]	@ 0x44
 80286ba:	f8de 1004 	ldr.w	r1, [lr, #4]
 80286be:	910e      	str	r1, [sp, #56]	@ 0x38
 80286c0:	0e09      	lsrs	r1, r1, #24
 80286c2:	9115      	str	r1, [sp, #84]	@ 0x54
 80286c4:	b292      	uxth	r2, r2
 80286c6:	b280      	uxth	r0, r0
 80286c8:	fb02 f900 	mul.w	r9, r2, r0
 80286cc:	0112      	lsls	r2, r2, #4
 80286ce:	eba2 0e09 	sub.w	lr, r2, r9
 80286d2:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80286d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80286d8:	fa1f fe8e 	uxth.w	lr, lr
 80286dc:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80286e0:	fb0e f202 	mul.w	r2, lr, r2
 80286e4:	b280      	uxth	r0, r0
 80286e6:	1a09      	subs	r1, r1, r0
 80286e8:	b289      	uxth	r1, r1
 80286ea:	fb01 220c 	mla	r2, r1, ip, r2
 80286ee:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80286f0:	fb00 2205 	mla	r2, r0, r5, r2
 80286f4:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80286f6:	fb09 2205 	mla	r2, r9, r5, r2
 80286fa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80286fe:	2a00      	cmp	r2, #0
 8028700:	f000 80ca 	beq.w	8028898 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8028704:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8028708:	d019      	beq.n	802873e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 802870a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802870e:	fb0c fa0a 	mul.w	sl, ip, sl
 8028712:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8028716:	fb0c fc03 	mul.w	ip, ip, r3
 802871a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802871e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8028722:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8028726:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802872a:	4453      	add	r3, sl
 802872c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8028730:	0a1b      	lsrs	r3, r3, #8
 8028732:	0a3f      	lsrs	r7, r7, #8
 8028734:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8028738:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802873c:	433b      	orrs	r3, r7
 802873e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028740:	2dff      	cmp	r5, #255	@ 0xff
 8028742:	d020      	beq.n	8028786 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8028744:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028746:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802874a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802874c:	436f      	muls	r7, r5
 802874e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028750:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028754:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028758:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802875a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802875e:	fb05 fa0a 	mul.w	sl, r5, sl
 8028762:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028766:	44bc      	add	ip, r7
 8028768:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802876c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028770:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028774:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028778:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802877c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028780:	ea4c 050a 	orr.w	r5, ip, sl
 8028784:	950d      	str	r5, [sp, #52]	@ 0x34
 8028786:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028788:	2dff      	cmp	r5, #255	@ 0xff
 802878a:	d020      	beq.n	80287ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 802878c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802878e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028792:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028794:	436f      	muls	r7, r5
 8028796:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8028798:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 802879c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802879e:	fb05 fa0c 	mul.w	sl, r5, ip
 80287a2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80287a6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80287aa:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80287ae:	44bc      	add	ip, r7
 80287b0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80287b4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80287b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80287bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80287c0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80287c4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80287c8:	ea4c 050a 	orr.w	r5, ip, sl
 80287cc:	9509      	str	r5, [sp, #36]	@ 0x24
 80287ce:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80287d0:	2dff      	cmp	r5, #255	@ 0xff
 80287d2:	d020      	beq.n	8028816 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 80287d4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80287d6:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80287da:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80287dc:	436f      	muls	r7, r5
 80287de:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80287e0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80287e4:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80287e8:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80287ea:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80287ee:	fb05 fa0a 	mul.w	sl, r5, sl
 80287f2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80287f6:	44bc      	add	ip, r7
 80287f8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80287fc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028800:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028804:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028808:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802880c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028810:	ea4c 050a 	orr.w	r5, ip, sl
 8028814:	950e      	str	r5, [sp, #56]	@ 0x38
 8028816:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028818:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 802881c:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028820:	fb0e f707 	mul.w	r7, lr, r7
 8028824:	fb01 770c 	mla	r7, r1, ip, r7
 8028828:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802882a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802882e:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028832:	fb00 770c 	mla	r7, r0, ip, r7
 8028836:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028838:	2aff      	cmp	r2, #255	@ 0xff
 802883a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802883e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028840:	fb09 770c 	mla	r7, r9, ip, r7
 8028844:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8028848:	fb0e fe0c 	mul.w	lr, lr, ip
 802884c:	fb01 e303 	mla	r3, r1, r3, lr
 8028850:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028852:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8028856:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802885a:	fb00 330a 	mla	r3, r0, sl, r3
 802885e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8028860:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8028864:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8028868:	fb09 3c0c 	mla	ip, r9, ip, r3
 802886c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028870:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8028874:	ea47 070c 	orr.w	r7, r7, ip
 8028878:	ea4f 2317 	mov.w	r3, r7, lsr #8
 802887c:	d11e      	bne.n	80288bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802887e:	097a      	lsrs	r2, r7, #5
 8028880:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8028884:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028888:	f023 0307 	bic.w	r3, r3, #7
 802888c:	4313      	orrs	r3, r2
 802888e:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8028892:	431f      	orrs	r7, r3
 8028894:	f8a8 7000 	strh.w	r7, [r8]
 8028898:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802889a:	f108 0802 	add.w	r8, r8, #2
 802889e:	441c      	add	r4, r3
 80288a0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80288a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80288a6:	441e      	add	r6, r3
 80288a8:	e643      	b.n	8028532 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80288aa:	2800      	cmp	r0, #0
 80288ac:	f43f af0a 	beq.w	80286c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80288b0:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80288b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80288b6:	0e09      	lsrs	r1, r1, #24
 80288b8:	9111      	str	r1, [sp, #68]	@ 0x44
 80288ba:	e703      	b.n	80286c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80288bc:	43d2      	mvns	r2, r2
 80288be:	f8b8 1000 	ldrh.w	r1, [r8]
 80288c2:	fa5f fe82 	uxtb.w	lr, r2
 80288c6:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80288ca:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80288ce:	fb0c fc0e 	mul.w	ip, ip, lr
 80288d2:	10c8      	asrs	r0, r1, #3
 80288d4:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80288d8:	fb00 f00e 	mul.w	r0, r0, lr
 80288dc:	00ca      	lsls	r2, r1, #3
 80288de:	f10c 0101 	add.w	r1, ip, #1
 80288e2:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80288e6:	b2d2      	uxtb	r2, r2
 80288e8:	0c39      	lsrs	r1, r7, #16
 80288ea:	fb02 f20e 	mul.w	r2, r2, lr
 80288ee:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80288f2:	490f      	ldr	r1, [pc, #60]	@ (8028930 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80288f4:	fa5f fc8c 	uxtb.w	ip, ip
 80288f8:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 80288fc:	1c41      	adds	r1, r0, #1
 80288fe:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8028902:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028906:	1c51      	adds	r1, r2, #1
 8028908:	00c0      	lsls	r0, r0, #3
 802890a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802890e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028912:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8028916:	ea4c 0c00 	orr.w	ip, ip, r0
 802891a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802891e:	ea47 0c0c 	orr.w	ip, r7, ip
 8028922:	f8a8 c000 	strh.w	ip, [r8]
 8028926:	e7b7      	b.n	8028898 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8028928:	b01b      	add	sp, #108	@ 0x6c
 802892a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802892e:	bf00      	nop
 8028930:	fffff800 	.word	0xfffff800

08028934 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8028934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028938:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 802893c:	2d00      	cmp	r5, #0
 802893e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8028942:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8028946:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 802894a:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 802894e:	fb05 0e03 	mla	lr, r5, r3, r0
 8028952:	f2c0 808c 	blt.w	8028a6e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8028956:	45a9      	cmp	r9, r5
 8028958:	f340 8089 	ble.w	8028a6e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802895c:	2800      	cmp	r0, #0
 802895e:	f2c0 8084 	blt.w	8028a6a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8028962:	4580      	cmp	r8, r0
 8028964:	f340 8081 	ble.w	8028a6a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8028968:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802896c:	5d16      	ldrb	r6, [r2, r4]
 802896e:	f01e 0f01 	tst.w	lr, #1
 8028972:	bf0c      	ite	eq
 8028974:	f006 060f 	andeq.w	r6, r6, #15
 8028978:	1136      	asrne	r6, r6, #4
 802897a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802897e:	b2f6      	uxtb	r6, r6
 8028980:	1c44      	adds	r4, r0, #1
 8028982:	d477      	bmi.n	8028a74 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8028984:	45a0      	cmp	r8, r4
 8028986:	dd75      	ble.n	8028a74 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8028988:	2f00      	cmp	r7, #0
 802898a:	d075      	beq.n	8028a78 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 802898c:	f10e 0a01 	add.w	sl, lr, #1
 8028990:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8028994:	5d14      	ldrb	r4, [r2, r4]
 8028996:	f01a 0f01 	tst.w	sl, #1
 802899a:	bf0c      	ite	eq
 802899c:	f004 040f 	andeq.w	r4, r4, #15
 80289a0:	1124      	asrne	r4, r4, #4
 80289a2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80289a6:	b2e4      	uxtb	r4, r4
 80289a8:	3501      	adds	r5, #1
 80289aa:	d469      	bmi.n	8028a80 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80289ac:	45a9      	cmp	r9, r5
 80289ae:	dd67      	ble.n	8028a80 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80289b0:	f1bc 0f00 	cmp.w	ip, #0
 80289b4:	d067      	beq.n	8028a86 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 80289b6:	2800      	cmp	r0, #0
 80289b8:	db60      	blt.n	8028a7c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80289ba:	4580      	cmp	r8, r0
 80289bc:	dd5e      	ble.n	8028a7c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80289be:	eb03 090e 	add.w	r9, r3, lr
 80289c2:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80289c6:	5d55      	ldrb	r5, [r2, r5]
 80289c8:	f019 0f01 	tst.w	r9, #1
 80289cc:	bf0c      	ite	eq
 80289ce:	f005 050f 	andeq.w	r5, r5, #15
 80289d2:	112d      	asrne	r5, r5, #4
 80289d4:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80289d8:	b2ed      	uxtb	r5, r5
 80289da:	3001      	adds	r0, #1
 80289dc:	d456      	bmi.n	8028a8c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80289de:	4580      	cmp	r8, r0
 80289e0:	dd54      	ble.n	8028a8c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80289e2:	2f00      	cmp	r7, #0
 80289e4:	d054      	beq.n	8028a90 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 80289e6:	3301      	adds	r3, #1
 80289e8:	449e      	add	lr, r3
 80289ea:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80289ee:	5cd0      	ldrb	r0, [r2, r3]
 80289f0:	f01e 0f01 	tst.w	lr, #1
 80289f4:	bf0c      	ite	eq
 80289f6:	f000 000f 	andeq.w	r0, r0, #15
 80289fa:	1100      	asrne	r0, r0, #4
 80289fc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028a00:	b2c3      	uxtb	r3, r0
 8028a02:	b2ba      	uxth	r2, r7
 8028a04:	fa1f fc8c 	uxth.w	ip, ip
 8028a08:	fb02 f00c 	mul.w	r0, r2, ip
 8028a0c:	0112      	lsls	r2, r2, #4
 8028a0e:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8028a12:	1a12      	subs	r2, r2, r0
 8028a14:	b292      	uxth	r2, r2
 8028a16:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8028a1a:	4362      	muls	r2, r4
 8028a1c:	fa1f fc8c 	uxth.w	ip, ip
 8028a20:	eba7 070c 	sub.w	r7, r7, ip
 8028a24:	b2bf      	uxth	r7, r7
 8028a26:	fb06 2207 	mla	r2, r6, r7, r2
 8028a2a:	fb0c 2505 	mla	r5, ip, r5, r2
 8028a2e:	fb00 5303 	mla	r3, r0, r3, r5
 8028a32:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028a36:	b1b3      	cbz	r3, 8028a66 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8028a38:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 8028a3c:	435a      	muls	r2, r3
 8028a3e:	1c53      	adds	r3, r2, #1
 8028a40:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028a44:	4a2d      	ldr	r2, [pc, #180]	@ (8028afc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8028a46:	121b      	asrs	r3, r3, #8
 8028a48:	6812      	ldr	r2, [r2, #0]
 8028a4a:	2bff      	cmp	r3, #255	@ 0xff
 8028a4c:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8028a50:	d120      	bne.n	8028a94 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8028a52:	4b2b      	ldr	r3, [pc, #172]	@ (8028b00 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8028a54:	0950      	lsrs	r0, r2, #5
 8028a56:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028a5a:	4033      	ands	r3, r6
 8028a5c:	4318      	orrs	r0, r3
 8028a5e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028a62:	4302      	orrs	r2, r0
 8028a64:	800a      	strh	r2, [r1, #0]
 8028a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028a6a:	2600      	movs	r6, #0
 8028a6c:	e788      	b.n	8028980 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8028a6e:	2400      	movs	r4, #0
 8028a70:	4626      	mov	r6, r4
 8028a72:	e799      	b.n	80289a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8028a74:	2400      	movs	r4, #0
 8028a76:	e797      	b.n	80289a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8028a78:	463c      	mov	r4, r7
 8028a7a:	e795      	b.n	80289a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8028a7c:	2500      	movs	r5, #0
 8028a7e:	e7ac      	b.n	80289da <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8028a80:	2300      	movs	r3, #0
 8028a82:	461d      	mov	r5, r3
 8028a84:	e7bd      	b.n	8028a02 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8028a86:	4663      	mov	r3, ip
 8028a88:	4665      	mov	r5, ip
 8028a8a:	e7ba      	b.n	8028a02 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8028a8c:	2300      	movs	r3, #0
 8028a8e:	e7b8      	b.n	8028a02 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8028a90:	463b      	mov	r3, r7
 8028a92:	e7b6      	b.n	8028a02 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8028a94:	b29f      	uxth	r7, r3
 8028a96:	43db      	mvns	r3, r3
 8028a98:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8028a9c:	880d      	ldrh	r5, [r1, #0]
 8028a9e:	fb10 f007 	smulbb	r0, r0, r7
 8028aa2:	b2f6      	uxtb	r6, r6
 8028aa4:	b2d2      	uxtb	r2, r2
 8028aa6:	122c      	asrs	r4, r5, #8
 8028aa8:	fb12 f207 	smulbb	r2, r2, r7
 8028aac:	fb16 f607 	smulbb	r6, r6, r7
 8028ab0:	b2db      	uxtb	r3, r3
 8028ab2:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8028ab6:	fb04 0403 	mla	r4, r4, r3, r0
 8028aba:	10e8      	asrs	r0, r5, #3
 8028abc:	00ed      	lsls	r5, r5, #3
 8028abe:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8028ac2:	b2ed      	uxtb	r5, r5
 8028ac4:	fb00 6603 	mla	r6, r0, r3, r6
 8028ac8:	fb05 2303 	mla	r3, r5, r3, r2
 8028acc:	b2a4      	uxth	r4, r4
 8028ace:	b29a      	uxth	r2, r3
 8028ad0:	1c63      	adds	r3, r4, #1
 8028ad2:	b2b0      	uxth	r0, r6
 8028ad4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8028ad8:	1c53      	adds	r3, r2, #1
 8028ada:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028ade:	1c42      	adds	r2, r0, #1
 8028ae0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028ae4:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8028ae8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028aec:	0940      	lsrs	r0, r0, #5
 8028aee:	4323      	orrs	r3, r4
 8028af0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028af4:	4303      	orrs	r3, r0
 8028af6:	800b      	strh	r3, [r1, #0]
 8028af8:	e7b5      	b.n	8028a66 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8028afa:	bf00      	nop
 8028afc:	2005b938 	.word	0x2005b938
 8028b00:	00fff800 	.word	0x00fff800

08028b04 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b08:	b097      	sub	sp, #92	@ 0x5c
 8028b0a:	9214      	str	r2, [sp, #80]	@ 0x50
 8028b0c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8028b0e:	9015      	str	r0, [sp, #84]	@ 0x54
 8028b10:	9309      	str	r3, [sp, #36]	@ 0x24
 8028b12:	6850      	ldr	r0, [r2, #4]
 8028b14:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8028b18:	910d      	str	r1, [sp, #52]	@ 0x34
 8028b1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028b1c:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8028b20:	fb00 1303 	mla	r3, r0, r3, r1
 8028b24:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 8028b28:	6812      	ldr	r2, [r2, #0]
 8028b2a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8028b2e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028b30:	689b      	ldr	r3, [r3, #8]
 8028b32:	3301      	adds	r3, #1
 8028b34:	f023 0301 	bic.w	r3, r3, #1
 8028b38:	930a      	str	r3, [sp, #40]	@ 0x28
 8028b3a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028b3c:	681f      	ldr	r7, [r3, #0]
 8028b3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028b40:	2b00      	cmp	r3, #0
 8028b42:	dc03      	bgt.n	8028b4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8028b44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8028b46:	2b00      	cmp	r3, #0
 8028b48:	f340 8287 	ble.w	802905a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8028b4c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028b4e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028b52:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028b56:	1e48      	subs	r0, r1, #1
 8028b58:	f102 3cff 	add.w	ip, r2, #4294967295
 8028b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028b5e:	2b00      	cmp	r3, #0
 8028b60:	f340 80c3 	ble.w	8028cea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8028b64:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028b68:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028b6c:	d406      	bmi.n	8028b7c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028b6e:	4586      	cmp	lr, r0
 8028b70:	da04      	bge.n	8028b7c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028b72:	2b00      	cmp	r3, #0
 8028b74:	db02      	blt.n	8028b7c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028b76:	4563      	cmp	r3, ip
 8028b78:	f2c0 80b8 	blt.w	8028cec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8028b7c:	f11e 0e01 	adds.w	lr, lr, #1
 8028b80:	f100 80a9 	bmi.w	8028cd6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8028b84:	4571      	cmp	r1, lr
 8028b86:	f2c0 80a6 	blt.w	8028cd6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8028b8a:	3301      	adds	r3, #1
 8028b8c:	f100 80a3 	bmi.w	8028cd6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8028b90:	429a      	cmp	r2, r3
 8028b92:	f2c0 80a0 	blt.w	8028cd6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8028b96:	46c8      	mov	r8, r9
 8028b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028b9a:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 8028b9e:	930e      	str	r3, [sp, #56]	@ 0x38
 8028ba0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028ba2:	2b00      	cmp	r3, #0
 8028ba4:	f340 80c2 	ble.w	8028d2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8028ba8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028baa:	1430      	asrs	r0, r6, #16
 8028bac:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028bb0:	1423      	asrs	r3, r4, #16
 8028bb2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028bb6:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028bba:	f100 814d 	bmi.w	8028e58 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8028bbe:	f10c 3bff 	add.w	fp, ip, #4294967295
 8028bc2:	455b      	cmp	r3, fp
 8028bc4:	f280 8148 	bge.w	8028e58 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8028bc8:	2800      	cmp	r0, #0
 8028bca:	f2c0 8145 	blt.w	8028e58 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8028bce:	f10e 3bff 	add.w	fp, lr, #4294967295
 8028bd2:	4558      	cmp	r0, fp
 8028bd4:	f280 8140 	bge.w	8028e58 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8028bd8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8028bda:	fb00 3305 	mla	r3, r0, r5, r3
 8028bde:	0858      	lsrs	r0, r3, #1
 8028be0:	f817 c000 	ldrb.w	ip, [r7, r0]
 8028be4:	07dd      	lsls	r5, r3, #31
 8028be6:	bf54      	ite	pl
 8028be8:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028bec:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028bf0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028bf4:	fa5f fc8c 	uxtb.w	ip, ip
 8028bf8:	2a00      	cmp	r2, #0
 8028bfa:	f000 80db 	beq.w	8028db4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8028bfe:	1c58      	adds	r0, r3, #1
 8028c00:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028c04:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8028c08:	07c0      	lsls	r0, r0, #31
 8028c0a:	bf54      	ite	pl
 8028c0c:	f00e 0e0f 	andpl.w	lr, lr, #15
 8028c10:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028c14:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028c18:	fa5f f08e 	uxtb.w	r0, lr
 8028c1c:	9010      	str	r0, [sp, #64]	@ 0x40
 8028c1e:	b1c9      	cbz	r1, 8028c54 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8028c20:	4453      	add	r3, sl
 8028c22:	0858      	lsrs	r0, r3, #1
 8028c24:	5c38      	ldrb	r0, [r7, r0]
 8028c26:	07dd      	lsls	r5, r3, #31
 8028c28:	bf54      	ite	pl
 8028c2a:	f000 000f 	andpl.w	r0, r0, #15
 8028c2e:	1100      	asrmi	r0, r0, #4
 8028c30:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028c34:	3301      	adds	r3, #1
 8028c36:	b2c0      	uxtb	r0, r0
 8028c38:	900b      	str	r0, [sp, #44]	@ 0x2c
 8028c3a:	0858      	lsrs	r0, r3, #1
 8028c3c:	f817 e000 	ldrb.w	lr, [r7, r0]
 8028c40:	07dd      	lsls	r5, r3, #31
 8028c42:	bf54      	ite	pl
 8028c44:	f00e 030f 	andpl.w	r3, lr, #15
 8028c48:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8028c4c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028c50:	b2db      	uxtb	r3, r3
 8028c52:	9311      	str	r3, [sp, #68]	@ 0x44
 8028c54:	b292      	uxth	r2, r2
 8028c56:	b289      	uxth	r1, r1
 8028c58:	fb02 f301 	mul.w	r3, r2, r1
 8028c5c:	0112      	lsls	r2, r2, #4
 8028c5e:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8028c62:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8028c64:	1ad2      	subs	r2, r2, r3
 8028c66:	b292      	uxth	r2, r2
 8028c68:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8028c6c:	436a      	muls	r2, r5
 8028c6e:	b289      	uxth	r1, r1
 8028c70:	1a40      	subs	r0, r0, r1
 8028c72:	b280      	uxth	r0, r0
 8028c74:	fb0c 2c00 	mla	ip, ip, r0, r2
 8028c78:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8028c7a:	fb01 c102 	mla	r1, r1, r2, ip
 8028c7e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8028c80:	fb03 1302 	mla	r3, r3, r2, r1
 8028c84:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028c88:	b1db      	cbz	r3, 8028cc2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8028c8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8028c8c:	4353      	muls	r3, r2
 8028c8e:	1c5a      	adds	r2, r3, #1
 8028c90:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028c94:	4ac6      	ldr	r2, [pc, #792]	@ (8028fb0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8028c96:	121b      	asrs	r3, r3, #8
 8028c98:	6812      	ldr	r2, [r2, #0]
 8028c9a:	2bff      	cmp	r3, #255	@ 0xff
 8028c9c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8028ca0:	f040 8099 	bne.w	8028dd6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8028ca4:	0953      	lsrs	r3, r2, #5
 8028ca6:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8028caa:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028cae:	f02c 0c07 	bic.w	ip, ip, #7
 8028cb2:	ea43 0c0c 	orr.w	ip, r3, ip
 8028cb6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028cba:	ea4c 0202 	orr.w	r2, ip, r2
 8028cbe:	f8a8 2000 	strh.w	r2, [r8]
 8028cc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8028cc4:	f108 0802 	add.w	r8, r8, #2
 8028cc8:	441c      	add	r4, r3
 8028cca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028ccc:	441e      	add	r6, r3
 8028cce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028cd0:	3b01      	subs	r3, #1
 8028cd2:	930e      	str	r3, [sp, #56]	@ 0x38
 8028cd4:	e764      	b.n	8028ba0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8028cd6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8028cd8:	f109 0902 	add.w	r9, r9, #2
 8028cdc:	441c      	add	r4, r3
 8028cde:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028ce0:	441e      	add	r6, r3
 8028ce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028ce4:	3b01      	subs	r3, #1
 8028ce6:	9309      	str	r3, [sp, #36]	@ 0x24
 8028ce8:	e738      	b.n	8028b5c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8028cea:	d024      	beq.n	8028d36 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8028cec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028cee:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8028cf0:	3b01      	subs	r3, #1
 8028cf2:	fb00 4003 	mla	r0, r0, r3, r4
 8028cf6:	1400      	asrs	r0, r0, #16
 8028cf8:	f53f af4d 	bmi.w	8028b96 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028cfc:	3901      	subs	r1, #1
 8028cfe:	4288      	cmp	r0, r1
 8028d00:	f6bf af49 	bge.w	8028b96 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028d04:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8028d06:	fb01 6303 	mla	r3, r1, r3, r6
 8028d0a:	141b      	asrs	r3, r3, #16
 8028d0c:	f53f af43 	bmi.w	8028b96 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028d10:	3a01      	subs	r2, #1
 8028d12:	4293      	cmp	r3, r2
 8028d14:	f6bf af3f 	bge.w	8028b96 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028d18:	46c8      	mov	r8, r9
 8028d1a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8028d1e:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8028d22:	930e      	str	r3, [sp, #56]	@ 0x38
 8028d24:	f1bb 0f00 	cmp.w	fp, #0
 8028d28:	f300 80b7 	bgt.w	8028e9a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8028d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028d2e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028d32:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8028d36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028d38:	2b00      	cmp	r3, #0
 8028d3a:	f340 818e 	ble.w	802905a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8028d3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028d42:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028d46:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028d4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028d4e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028d52:	eef0 6a62 	vmov.f32	s13, s5
 8028d56:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028d5a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028d5e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028d62:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028d66:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028d6a:	ee16 4a90 	vmov	r4, s13
 8028d6e:	eef0 6a43 	vmov.f32	s13, s6
 8028d72:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028d76:	ee12 2a90 	vmov	r2, s5
 8028d7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028d7e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028d80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028d84:	fb92 f3f3 	sdiv	r3, r2, r3
 8028d88:	ee13 2a10 	vmov	r2, s6
 8028d8c:	9323      	str	r3, [sp, #140]	@ 0x8c
 8028d8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028d90:	ee16 6a90 	vmov	r6, s13
 8028d94:	fb92 f3f3 	sdiv	r3, r2, r3
 8028d98:	9324      	str	r3, [sp, #144]	@ 0x90
 8028d9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028d9c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8028d9e:	3b01      	subs	r3, #1
 8028da0:	930d      	str	r3, [sp, #52]	@ 0x34
 8028da2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028da4:	bf08      	it	eq
 8028da6:	4613      	moveq	r3, r2
 8028da8:	eeb0 3a67 	vmov.f32	s6, s15
 8028dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8028dae:	eef0 2a47 	vmov.f32	s5, s14
 8028db2:	e6c4      	b.n	8028b3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8028db4:	2900      	cmp	r1, #0
 8028db6:	f43f af4d 	beq.w	8028c54 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8028dba:	eb0a 0003 	add.w	r0, sl, r3
 8028dbe:	0843      	lsrs	r3, r0, #1
 8028dc0:	5cfb      	ldrb	r3, [r7, r3]
 8028dc2:	07c0      	lsls	r0, r0, #31
 8028dc4:	bf54      	ite	pl
 8028dc6:	f003 030f 	andpl.w	r3, r3, #15
 8028dca:	111b      	asrmi	r3, r3, #4
 8028dcc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028dd0:	b2db      	uxtb	r3, r3
 8028dd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028dd4:	e73e      	b.n	8028c54 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8028dd6:	fa1f fb83 	uxth.w	fp, r3
 8028dda:	43db      	mvns	r3, r3
 8028ddc:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8028de0:	f8b8 e000 	ldrh.w	lr, [r8]
 8028de4:	fb11 f10b 	smulbb	r1, r1, fp
 8028de8:	fa5f fc8c 	uxtb.w	ip, ip
 8028dec:	b2d2      	uxtb	r2, r2
 8028dee:	ea4f 202e 	mov.w	r0, lr, asr #8
 8028df2:	fb1c fc0b 	smulbb	ip, ip, fp
 8028df6:	fb12 fb0b 	smulbb	fp, r2, fp
 8028dfa:	b2db      	uxtb	r3, r3
 8028dfc:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8028e00:	fb00 1003 	mla	r0, r0, r3, r1
 8028e04:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8028e08:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8028e0c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8028e10:	fa5f fe8e 	uxtb.w	lr, lr
 8028e14:	fb01 cc03 	mla	ip, r1, r3, ip
 8028e18:	fb0e bb03 	mla	fp, lr, r3, fp
 8028e1c:	b280      	uxth	r0, r0
 8028e1e:	1c43      	adds	r3, r0, #1
 8028e20:	fa1f fc8c 	uxth.w	ip, ip
 8028e24:	fa1f fb8b 	uxth.w	fp, fp
 8028e28:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028e2c:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 8028e30:	f10c 0101 	add.w	r1, ip, #1
 8028e34:	f10b 0001 	add.w	r0, fp, #1
 8028e38:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8028e3c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028e40:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8028e44:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028e48:	4318      	orrs	r0, r3
 8028e4a:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8028e4e:	ea40 000c 	orr.w	r0, r0, ip
 8028e52:	f8a8 0000 	strh.w	r0, [r8]
 8028e56:	e734      	b.n	8028cc2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8028e58:	f113 0b01 	adds.w	fp, r3, #1
 8028e5c:	f53f af31 	bmi.w	8028cc2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8028e60:	45dc      	cmp	ip, fp
 8028e62:	f6ff af2e 	blt.w	8028cc2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8028e66:	f110 0b01 	adds.w	fp, r0, #1
 8028e6a:	f53f af2a 	bmi.w	8028cc2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8028e6e:	45de      	cmp	lr, fp
 8028e70:	f6ff af27 	blt.w	8028cc2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8028e74:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8028e76:	9302      	str	r3, [sp, #8]
 8028e78:	fa0f f38e 	sxth.w	r3, lr
 8028e7c:	9301      	str	r3, [sp, #4]
 8028e7e:	fa0f f38c 	sxth.w	r3, ip
 8028e82:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8028e86:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8028e8a:	9300      	str	r3, [sp, #0]
 8028e8c:	463a      	mov	r2, r7
 8028e8e:	4653      	mov	r3, sl
 8028e90:	4641      	mov	r1, r8
 8028e92:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8028e94:	f7ff fd4e 	bl	8028934 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8028e98:	e713      	b.n	8028cc2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8028e9a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8028e9c:	1422      	asrs	r2, r4, #16
 8028e9e:	1433      	asrs	r3, r6, #16
 8028ea0:	fb05 2303 	mla	r3, r5, r3, r2
 8028ea4:	085a      	lsrs	r2, r3, #1
 8028ea6:	5cba      	ldrb	r2, [r7, r2]
 8028ea8:	07dd      	lsls	r5, r3, #31
 8028eaa:	bf54      	ite	pl
 8028eac:	f002 020f 	andpl.w	r2, r2, #15
 8028eb0:	1112      	asrmi	r2, r2, #4
 8028eb2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028eb6:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8028eba:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028ebe:	b2d2      	uxtb	r2, r2
 8028ec0:	2900      	cmp	r1, #0
 8028ec2:	d077      	beq.n	8028fb4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8028ec4:	f103 0e01 	add.w	lr, r3, #1
 8028ec8:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8028ecc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028ed0:	f01e 0f01 	tst.w	lr, #1
 8028ed4:	bf0c      	ite	eq
 8028ed6:	f00c 0c0f 	andeq.w	ip, ip, #15
 8028eda:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8028ede:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028ee2:	fa5f f58c 	uxtb.w	r5, ip
 8028ee6:	9512      	str	r5, [sp, #72]	@ 0x48
 8028ee8:	b300      	cbz	r0, 8028f2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8028eea:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028eec:	442b      	add	r3, r5
 8028eee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028ef2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028ef6:	07dd      	lsls	r5, r3, #31
 8028ef8:	bf54      	ite	pl
 8028efa:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028efe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028f02:	3301      	adds	r3, #1
 8028f04:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028f08:	fa5f f58c 	uxtb.w	r5, ip
 8028f0c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028f10:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028f14:	950c      	str	r5, [sp, #48]	@ 0x30
 8028f16:	07dd      	lsls	r5, r3, #31
 8028f18:	bf54      	ite	pl
 8028f1a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028f1e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028f22:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028f26:	fa5f f38c 	uxtb.w	r3, ip
 8028f2a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8028f2c:	b289      	uxth	r1, r1
 8028f2e:	b280      	uxth	r0, r0
 8028f30:	fb01 f300 	mul.w	r3, r1, r0
 8028f34:	0109      	lsls	r1, r1, #4
 8028f36:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8028f3a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8028f3c:	1ac9      	subs	r1, r1, r3
 8028f3e:	b289      	uxth	r1, r1
 8028f40:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8028f44:	4369      	muls	r1, r5
 8028f46:	b280      	uxth	r0, r0
 8028f48:	ebac 0c00 	sub.w	ip, ip, r0
 8028f4c:	fa1f fc8c 	uxth.w	ip, ip
 8028f50:	fb02 120c 	mla	r2, r2, ip, r1
 8028f54:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8028f56:	fb00 2001 	mla	r0, r0, r1, r2
 8028f5a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8028f5c:	fb03 0302 	mla	r3, r3, r2, r0
 8028f60:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028f64:	b1d3      	cbz	r3, 8028f9c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8028f66:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8028f68:	4353      	muls	r3, r2
 8028f6a:	1c5a      	adds	r2, r3, #1
 8028f6c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028f70:	4a0f      	ldr	r2, [pc, #60]	@ (8028fb0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8028f72:	121b      	asrs	r3, r3, #8
 8028f74:	6812      	ldr	r2, [r2, #0]
 8028f76:	2bff      	cmp	r3, #255	@ 0xff
 8028f78:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8028f7c:	d12e      	bne.n	8028fdc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8028f7e:	0953      	lsrs	r3, r2, #5
 8028f80:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8028f84:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028f88:	f02c 0c07 	bic.w	ip, ip, #7
 8028f8c:	ea43 0c0c 	orr.w	ip, r3, ip
 8028f90:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028f94:	ea4c 0202 	orr.w	r2, ip, r2
 8028f98:	f8a8 2000 	strh.w	r2, [r8]
 8028f9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8028f9e:	f108 0802 	add.w	r8, r8, #2
 8028fa2:	441c      	add	r4, r3
 8028fa4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028fa6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028faa:	441e      	add	r6, r3
 8028fac:	e6ba      	b.n	8028d24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8028fae:	bf00      	nop
 8028fb0:	2005b938 	.word	0x2005b938
 8028fb4:	2800      	cmp	r0, #0
 8028fb6:	d0b9      	beq.n	8028f2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8028fb8:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028fba:	442b      	add	r3, r5
 8028fbc:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028fc0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028fc4:	07db      	lsls	r3, r3, #31
 8028fc6:	bf54      	ite	pl
 8028fc8:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028fcc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028fd0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028fd4:	fa5f f38c 	uxtb.w	r3, ip
 8028fd8:	930c      	str	r3, [sp, #48]	@ 0x30
 8028fda:	e7a7      	b.n	8028f2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8028fdc:	fa1f fa83 	uxth.w	sl, r3
 8028fe0:	43db      	mvns	r3, r3
 8028fe2:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8028fe6:	f8b8 e000 	ldrh.w	lr, [r8]
 8028fea:	fb11 f10a 	smulbb	r1, r1, sl
 8028fee:	b2d2      	uxtb	r2, r2
 8028ff0:	ea4f 202e 	mov.w	r0, lr, asr #8
 8028ff4:	fb12 f20a 	smulbb	r2, r2, sl
 8028ff8:	b2db      	uxtb	r3, r3
 8028ffa:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8028ffe:	fb00 1003 	mla	r0, r0, r3, r1
 8029002:	fa5f fc8c 	uxtb.w	ip, ip
 8029006:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802900a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802900e:	fb1c fc0a 	smulbb	ip, ip, sl
 8029012:	fa5f fe8e 	uxtb.w	lr, lr
 8029016:	fb0e 2203 	mla	r2, lr, r3, r2
 802901a:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802901e:	fb01 cc03 	mla	ip, r1, r3, ip
 8029022:	b280      	uxth	r0, r0
 8029024:	b292      	uxth	r2, r2
 8029026:	1c43      	adds	r3, r0, #1
 8029028:	1c51      	adds	r1, r2, #1
 802902a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802902e:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8029032:	fa1f fc8c 	uxth.w	ip, ip
 8029036:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802903a:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802903e:	4308      	orrs	r0, r1
 8029040:	f10c 0101 	add.w	r1, ip, #1
 8029044:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029048:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802904c:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8029050:	ea40 000c 	orr.w	r0, r0, ip
 8029054:	f8a8 0000 	strh.w	r0, [r8]
 8029058:	e7a0      	b.n	8028f9c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 802905a:	b017      	add	sp, #92	@ 0x5c
 802905c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029060 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8029060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029064:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 8029068:	2d00      	cmp	r5, #0
 802906a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802906e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8029072:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8029076:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 802907a:	fb05 0e03 	mla	lr, r5, r3, r0
 802907e:	f2c0 80b0 	blt.w	80291e2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8029082:	45a9      	cmp	r9, r5
 8029084:	f340 80ad 	ble.w	80291e2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8029088:	2800      	cmp	r0, #0
 802908a:	f2c0 80a8 	blt.w	80291de <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802908e:	4580      	cmp	r8, r0
 8029090:	f340 80a5 	ble.w	80291de <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8029094:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8029098:	5d16      	ldrb	r6, [r2, r4]
 802909a:	f01e 0f01 	tst.w	lr, #1
 802909e:	bf0c      	ite	eq
 80290a0:	f006 060f 	andeq.w	r6, r6, #15
 80290a4:	1136      	asrne	r6, r6, #4
 80290a6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80290aa:	b2f6      	uxtb	r6, r6
 80290ac:	1c44      	adds	r4, r0, #1
 80290ae:	f100 809b 	bmi.w	80291e8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 80290b2:	45a0      	cmp	r8, r4
 80290b4:	f340 8098 	ble.w	80291e8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 80290b8:	2f00      	cmp	r7, #0
 80290ba:	f000 8097 	beq.w	80291ec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 80290be:	f10e 0a01 	add.w	sl, lr, #1
 80290c2:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80290c6:	5d14      	ldrb	r4, [r2, r4]
 80290c8:	f01a 0f01 	tst.w	sl, #1
 80290cc:	bf0c      	ite	eq
 80290ce:	f004 040f 	andeq.w	r4, r4, #15
 80290d2:	1124      	asrne	r4, r4, #4
 80290d4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80290d8:	b2e4      	uxtb	r4, r4
 80290da:	3501      	adds	r5, #1
 80290dc:	f100 808a 	bmi.w	80291f4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 80290e0:	45a9      	cmp	r9, r5
 80290e2:	f340 8087 	ble.w	80291f4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 80290e6:	f1bc 0f00 	cmp.w	ip, #0
 80290ea:	f000 8086 	beq.w	80291fa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 80290ee:	2800      	cmp	r0, #0
 80290f0:	db7e      	blt.n	80291f0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 80290f2:	4580      	cmp	r8, r0
 80290f4:	dd7c      	ble.n	80291f0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 80290f6:	eb03 090e 	add.w	r9, r3, lr
 80290fa:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80290fe:	5d55      	ldrb	r5, [r2, r5]
 8029100:	f019 0f01 	tst.w	r9, #1
 8029104:	bf0c      	ite	eq
 8029106:	f005 050f 	andeq.w	r5, r5, #15
 802910a:	112d      	asrne	r5, r5, #4
 802910c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8029110:	b2ed      	uxtb	r5, r5
 8029112:	3001      	adds	r0, #1
 8029114:	d474      	bmi.n	8029200 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8029116:	4580      	cmp	r8, r0
 8029118:	dd72      	ble.n	8029200 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802911a:	2f00      	cmp	r7, #0
 802911c:	d072      	beq.n	8029204 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802911e:	3301      	adds	r3, #1
 8029120:	449e      	add	lr, r3
 8029122:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029126:	5cd0      	ldrb	r0, [r2, r3]
 8029128:	f01e 0f01 	tst.w	lr, #1
 802912c:	bf0c      	ite	eq
 802912e:	f000 000f 	andeq.w	r0, r0, #15
 8029132:	1100      	asrne	r0, r0, #4
 8029134:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029138:	b2c3      	uxtb	r3, r0
 802913a:	b2ba      	uxth	r2, r7
 802913c:	fa1f fc8c 	uxth.w	ip, ip
 8029140:	fb02 f00c 	mul.w	r0, r2, ip
 8029144:	0112      	lsls	r2, r2, #4
 8029146:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802914a:	1a12      	subs	r2, r2, r0
 802914c:	b292      	uxth	r2, r2
 802914e:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8029152:	4362      	muls	r2, r4
 8029154:	fa1f fc8c 	uxth.w	ip, ip
 8029158:	eba7 070c 	sub.w	r7, r7, ip
 802915c:	b2bf      	uxth	r7, r7
 802915e:	fb06 2207 	mla	r2, r6, r7, r2
 8029162:	fb0c 2505 	mla	r5, ip, r5, r2
 8029166:	fb00 5303 	mla	r3, r0, r3, r5
 802916a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802916e:	b3a3      	cbz	r3, 80291da <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8029170:	4a25      	ldr	r2, [pc, #148]	@ (8029208 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8029172:	880e      	ldrh	r6, [r1, #0]
 8029174:	6815      	ldr	r5, [r2, #0]
 8029176:	b29a      	uxth	r2, r3
 8029178:	43db      	mvns	r3, r3
 802917a:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802917e:	fb10 f002 	smulbb	r0, r0, r2
 8029182:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8029186:	b2ed      	uxtb	r5, r5
 8029188:	1234      	asrs	r4, r6, #8
 802918a:	fb17 f702 	smulbb	r7, r7, r2
 802918e:	fb15 f202 	smulbb	r2, r5, r2
 8029192:	b2db      	uxtb	r3, r3
 8029194:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8029198:	fb04 0403 	mla	r4, r4, r3, r0
 802919c:	10f0      	asrs	r0, r6, #3
 802919e:	00f6      	lsls	r6, r6, #3
 80291a0:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80291a4:	b2f6      	uxtb	r6, r6
 80291a6:	fb00 7003 	mla	r0, r0, r3, r7
 80291aa:	fb06 2303 	mla	r3, r6, r3, r2
 80291ae:	b2a4      	uxth	r4, r4
 80291b0:	b29a      	uxth	r2, r3
 80291b2:	1c63      	adds	r3, r4, #1
 80291b4:	b280      	uxth	r0, r0
 80291b6:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80291ba:	1c53      	adds	r3, r2, #1
 80291bc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80291c0:	1c42      	adds	r2, r0, #1
 80291c2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80291c6:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 80291ca:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80291ce:	0940      	lsrs	r0, r0, #5
 80291d0:	4323      	orrs	r3, r4
 80291d2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80291d6:	4303      	orrs	r3, r0
 80291d8:	800b      	strh	r3, [r1, #0]
 80291da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80291de:	2600      	movs	r6, #0
 80291e0:	e764      	b.n	80290ac <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 80291e2:	2400      	movs	r4, #0
 80291e4:	4626      	mov	r6, r4
 80291e6:	e778      	b.n	80290da <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 80291e8:	2400      	movs	r4, #0
 80291ea:	e776      	b.n	80290da <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 80291ec:	463c      	mov	r4, r7
 80291ee:	e774      	b.n	80290da <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 80291f0:	2500      	movs	r5, #0
 80291f2:	e78e      	b.n	8029112 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 80291f4:	2300      	movs	r3, #0
 80291f6:	461d      	mov	r5, r3
 80291f8:	e79f      	b.n	802913a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80291fa:	4663      	mov	r3, ip
 80291fc:	4665      	mov	r5, ip
 80291fe:	e79c      	b.n	802913a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8029200:	2300      	movs	r3, #0
 8029202:	e79a      	b.n	802913a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8029204:	463b      	mov	r3, r7
 8029206:	e798      	b.n	802913a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8029208:	2005b938 	.word	0x2005b938

0802920c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802920c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029210:	b093      	sub	sp, #76	@ 0x4c
 8029212:	920c      	str	r2, [sp, #48]	@ 0x30
 8029214:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8029216:	9011      	str	r0, [sp, #68]	@ 0x44
 8029218:	6850      	ldr	r0, [r2, #4]
 802921a:	9107      	str	r1, [sp, #28]
 802921c:	461d      	mov	r5, r3
 802921e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8029222:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8029226:	fb00 1303 	mla	r3, r0, r3, r1
 802922a:	6812      	ldr	r2, [r2, #0]
 802922c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8029230:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029232:	689b      	ldr	r3, [r3, #8]
 8029234:	3301      	adds	r3, #1
 8029236:	f023 0301 	bic.w	r3, r3, #1
 802923a:	9306      	str	r3, [sp, #24]
 802923c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802923e:	681f      	ldr	r7, [r3, #0]
 8029240:	9b07      	ldr	r3, [sp, #28]
 8029242:	2b00      	cmp	r3, #0
 8029244:	dc03      	bgt.n	802924e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8029246:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029248:	2b00      	cmp	r3, #0
 802924a:	f340 8265 	ble.w	8029718 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 802924e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029250:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029254:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029258:	1e48      	subs	r0, r1, #1
 802925a:	f102 3cff 	add.w	ip, r2, #4294967295
 802925e:	2d00      	cmp	r5, #0
 8029260:	f340 80b7 	ble.w	80293d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8029264:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029268:	ea4f 4326 	mov.w	r3, r6, asr #16
 802926c:	d406      	bmi.n	802927c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802926e:	4586      	cmp	lr, r0
 8029270:	da04      	bge.n	802927c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8029272:	2b00      	cmp	r3, #0
 8029274:	db02      	blt.n	802927c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8029276:	4563      	cmp	r3, ip
 8029278:	f2c0 80ac 	blt.w	80293d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802927c:	f11e 0e01 	adds.w	lr, lr, #1
 8029280:	f100 809f 	bmi.w	80293c2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8029284:	4571      	cmp	r1, lr
 8029286:	f2c0 809c 	blt.w	80293c2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802928a:	3301      	adds	r3, #1
 802928c:	f100 8099 	bmi.w	80293c2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8029290:	429a      	cmp	r2, r3
 8029292:	f2c0 8096 	blt.w	80293c2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8029296:	46c8      	mov	r8, r9
 8029298:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802929c:	9509      	str	r5, [sp, #36]	@ 0x24
 802929e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80292a0:	2b00      	cmp	r3, #0
 80292a2:	f340 80b5 	ble.w	8029410 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80292a6:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80292aa:	9308      	str	r3, [sp, #32]
 80292ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80292ae:	1430      	asrs	r0, r6, #16
 80292b0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80292b4:	1423      	asrs	r3, r4, #16
 80292b6:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80292ba:	f100 813e 	bmi.w	802953a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80292be:	f10c 3bff 	add.w	fp, ip, #4294967295
 80292c2:	455b      	cmp	r3, fp
 80292c4:	f280 8139 	bge.w	802953a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80292c8:	2800      	cmp	r0, #0
 80292ca:	f2c0 8136 	blt.w	802953a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80292ce:	f10e 3bff 	add.w	fp, lr, #4294967295
 80292d2:	4558      	cmp	r0, fp
 80292d4:	f280 8131 	bge.w	802953a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80292d8:	9a06      	ldr	r2, [sp, #24]
 80292da:	fb00 3302 	mla	r3, r0, r2, r3
 80292de:	0858      	lsrs	r0, r3, #1
 80292e0:	f817 c000 	ldrb.w	ip, [r7, r0]
 80292e4:	07da      	lsls	r2, r3, #31
 80292e6:	bf54      	ite	pl
 80292e8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80292ec:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80292f0:	9a08      	ldr	r2, [sp, #32]
 80292f2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80292f6:	fa5f fc8c 	uxtb.w	ip, ip
 80292fa:	2a00      	cmp	r2, #0
 80292fc:	f000 80cb 	beq.w	8029496 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8029300:	1c58      	adds	r0, r3, #1
 8029302:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029306:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802930a:	07c0      	lsls	r0, r0, #31
 802930c:	bf54      	ite	pl
 802930e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029312:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029316:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802931a:	fa5f fe8e 	uxtb.w	lr, lr
 802931e:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8029322:	b1b9      	cbz	r1, 8029354 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8029324:	4453      	add	r3, sl
 8029326:	0858      	lsrs	r0, r3, #1
 8029328:	5c38      	ldrb	r0, [r7, r0]
 802932a:	07da      	lsls	r2, r3, #31
 802932c:	bf54      	ite	pl
 802932e:	f000 000f 	andpl.w	r0, r0, #15
 8029332:	1100      	asrmi	r0, r0, #4
 8029334:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029338:	b2c0      	uxtb	r0, r0
 802933a:	900a      	str	r0, [sp, #40]	@ 0x28
 802933c:	1c58      	adds	r0, r3, #1
 802933e:	0843      	lsrs	r3, r0, #1
 8029340:	5cfb      	ldrb	r3, [r7, r3]
 8029342:	07c2      	lsls	r2, r0, #31
 8029344:	bf54      	ite	pl
 8029346:	f003 030f 	andpl.w	r3, r3, #15
 802934a:	111b      	asrmi	r3, r3, #4
 802934c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029350:	b2db      	uxtb	r3, r3
 8029352:	930e      	str	r3, [sp, #56]	@ 0x38
 8029354:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8029358:	b289      	uxth	r1, r1
 802935a:	fb02 f301 	mul.w	r3, r2, r1
 802935e:	0112      	lsls	r2, r2, #4
 8029360:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029364:	b289      	uxth	r1, r1
 8029366:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802936a:	1a40      	subs	r0, r0, r1
 802936c:	fa1f fe80 	uxth.w	lr, r0
 8029370:	1ad2      	subs	r2, r2, r3
 8029372:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8029374:	b292      	uxth	r2, r2
 8029376:	4342      	muls	r2, r0
 8029378:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802937c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802937e:	fb01 c102 	mla	r1, r1, r2, ip
 8029382:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8029384:	fb03 1302 	mla	r3, r3, r2, r1
 8029388:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802938c:	2bff      	cmp	r3, #255	@ 0xff
 802938e:	f040 8093 	bne.w	80294b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8029392:	4bbe      	ldr	r3, [pc, #760]	@ (802968c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8029394:	681a      	ldr	r2, [r3, #0]
 8029396:	4bbe      	ldr	r3, [pc, #760]	@ (8029690 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8029398:	0951      	lsrs	r1, r2, #5
 802939a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802939e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80293a2:	430b      	orrs	r3, r1
 80293a4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80293a8:	4313      	orrs	r3, r2
 80293aa:	f8a8 3000 	strh.w	r3, [r8]
 80293ae:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80293b0:	f108 0802 	add.w	r8, r8, #2
 80293b4:	441c      	add	r4, r3
 80293b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80293b8:	441e      	add	r6, r3
 80293ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80293bc:	3b01      	subs	r3, #1
 80293be:	9309      	str	r3, [sp, #36]	@ 0x24
 80293c0:	e76d      	b.n	802929e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80293c2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80293c4:	3d01      	subs	r5, #1
 80293c6:	441c      	add	r4, r3
 80293c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80293ca:	f109 0902 	add.w	r9, r9, #2
 80293ce:	441e      	add	r6, r3
 80293d0:	e745      	b.n	802925e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80293d2:	d021      	beq.n	8029418 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80293d4:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80293d6:	1e6b      	subs	r3, r5, #1
 80293d8:	fb00 4003 	mla	r0, r0, r3, r4
 80293dc:	1400      	asrs	r0, r0, #16
 80293de:	f53f af5a 	bmi.w	8029296 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80293e2:	3901      	subs	r1, #1
 80293e4:	4288      	cmp	r0, r1
 80293e6:	f6bf af56 	bge.w	8029296 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80293ea:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80293ec:	fb01 6303 	mla	r3, r1, r3, r6
 80293f0:	141b      	asrs	r3, r3, #16
 80293f2:	f53f af50 	bmi.w	8029296 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80293f6:	3a01      	subs	r2, #1
 80293f8:	4293      	cmp	r3, r2
 80293fa:	f6bf af4c 	bge.w	8029296 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80293fe:	46a8      	mov	r8, r5
 8029400:	46ce      	mov	lr, r9
 8029402:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8029406:	9308      	str	r3, [sp, #32]
 8029408:	f1b8 0f00 	cmp.w	r8, #0
 802940c:	f300 80b5 	bgt.w	802957a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8029410:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8029414:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8029418:	9b07      	ldr	r3, [sp, #28]
 802941a:	2b00      	cmp	r3, #0
 802941c:	f340 817c 	ble.w	8029718 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8029420:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029424:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029428:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802942c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029430:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029434:	eef0 6a62 	vmov.f32	s13, s5
 8029438:	ee31 1a05 	vadd.f32	s2, s2, s10
 802943c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029440:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029444:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029448:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802944c:	ee16 4a90 	vmov	r4, s13
 8029450:	eef0 6a43 	vmov.f32	s13, s6
 8029454:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029458:	ee12 2a90 	vmov	r2, s5
 802945c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029460:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029462:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029466:	fb92 f3f3 	sdiv	r3, r2, r3
 802946a:	ee13 2a10 	vmov	r2, s6
 802946e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8029470:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029472:	ee16 6a90 	vmov	r6, s13
 8029476:	fb92 f3f3 	sdiv	r3, r2, r3
 802947a:	9320      	str	r3, [sp, #128]	@ 0x80
 802947c:	9b07      	ldr	r3, [sp, #28]
 802947e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029480:	3b01      	subs	r3, #1
 8029482:	9307      	str	r3, [sp, #28]
 8029484:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029486:	bf0c      	ite	eq
 8029488:	4615      	moveq	r5, r2
 802948a:	461d      	movne	r5, r3
 802948c:	eeb0 3a67 	vmov.f32	s6, s15
 8029490:	eef0 2a47 	vmov.f32	s5, s14
 8029494:	e6d4      	b.n	8029240 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8029496:	2900      	cmp	r1, #0
 8029498:	f43f af5c 	beq.w	8029354 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802949c:	eb0a 0003 	add.w	r0, sl, r3
 80294a0:	0843      	lsrs	r3, r0, #1
 80294a2:	5cfb      	ldrb	r3, [r7, r3]
 80294a4:	07c0      	lsls	r0, r0, #31
 80294a6:	bf54      	ite	pl
 80294a8:	f003 030f 	andpl.w	r3, r3, #15
 80294ac:	111b      	asrmi	r3, r3, #4
 80294ae:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80294b2:	b2db      	uxtb	r3, r3
 80294b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80294b6:	e74d      	b.n	8029354 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80294b8:	2b00      	cmp	r3, #0
 80294ba:	f43f af78 	beq.w	80293ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80294be:	fa1f fe83 	uxth.w	lr, r3
 80294c2:	43db      	mvns	r3, r3
 80294c4:	4a71      	ldr	r2, [pc, #452]	@ (802968c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 80294c6:	f8b8 c000 	ldrh.w	ip, [r8]
 80294ca:	6810      	ldr	r0, [r2, #0]
 80294cc:	ea4f 212c 	mov.w	r1, ip, asr #8
 80294d0:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80294d4:	fb12 f20e 	smulbb	r2, r2, lr
 80294d8:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80294dc:	b2c0      	uxtb	r0, r0
 80294de:	fb1b fb0e 	smulbb	fp, fp, lr
 80294e2:	fb10 fe0e 	smulbb	lr, r0, lr
 80294e6:	b2db      	uxtb	r3, r3
 80294e8:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80294ec:	fb01 2103 	mla	r1, r1, r3, r2
 80294f0:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80294f4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80294f8:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80294fc:	fa5f fc8c 	uxtb.w	ip, ip
 8029500:	fb02 b203 	mla	r2, r2, r3, fp
 8029504:	fb0c e303 	mla	r3, ip, r3, lr
 8029508:	b289      	uxth	r1, r1
 802950a:	1c48      	adds	r0, r1, #1
 802950c:	b292      	uxth	r2, r2
 802950e:	b29b      	uxth	r3, r3
 8029510:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8029514:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 8029518:	f102 0b01 	add.w	fp, r2, #1
 802951c:	1c59      	adds	r1, r3, #1
 802951e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8029522:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8029526:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802952a:	0952      	lsrs	r2, r2, #5
 802952c:	4301      	orrs	r1, r0
 802952e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029532:	4311      	orrs	r1, r2
 8029534:	f8a8 1000 	strh.w	r1, [r8]
 8029538:	e739      	b.n	80293ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802953a:	f113 0b01 	adds.w	fp, r3, #1
 802953e:	f53f af36 	bmi.w	80293ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8029542:	45dc      	cmp	ip, fp
 8029544:	f6ff af33 	blt.w	80293ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8029548:	f110 0b01 	adds.w	fp, r0, #1
 802954c:	f53f af2f 	bmi.w	80293ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8029550:	45de      	cmp	lr, fp
 8029552:	f6ff af2c 	blt.w	80293ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8029556:	9a08      	ldr	r2, [sp, #32]
 8029558:	9302      	str	r3, [sp, #8]
 802955a:	fa0f f38e 	sxth.w	r3, lr
 802955e:	9301      	str	r3, [sp, #4]
 8029560:	fa0f f38c 	sxth.w	r3, ip
 8029564:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029568:	9105      	str	r1, [sp, #20]
 802956a:	9300      	str	r3, [sp, #0]
 802956c:	463a      	mov	r2, r7
 802956e:	4653      	mov	r3, sl
 8029570:	4641      	mov	r1, r8
 8029572:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8029574:	f7ff fd74 	bl	8029060 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8029578:	e719      	b.n	80293ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802957a:	9906      	ldr	r1, [sp, #24]
 802957c:	1422      	asrs	r2, r4, #16
 802957e:	1433      	asrs	r3, r6, #16
 8029580:	fb01 2303 	mla	r3, r1, r3, r2
 8029584:	085a      	lsrs	r2, r3, #1
 8029586:	5cba      	ldrb	r2, [r7, r2]
 8029588:	07d9      	lsls	r1, r3, #31
 802958a:	bf54      	ite	pl
 802958c:	f002 020f 	andpl.w	r2, r2, #15
 8029590:	1112      	asrmi	r2, r2, #4
 8029592:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029596:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802959a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802959e:	b2d2      	uxtb	r2, r2
 80295a0:	2800      	cmp	r0, #0
 80295a2:	d062      	beq.n	802966a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80295a4:	f103 0a01 	add.w	sl, r3, #1
 80295a8:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80295ac:	5c79      	ldrb	r1, [r7, r1]
 80295ae:	f01a 0f01 	tst.w	sl, #1
 80295b2:	bf0c      	ite	eq
 80295b4:	f001 010f 	andeq.w	r1, r1, #15
 80295b8:	1109      	asrne	r1, r1, #4
 80295ba:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80295be:	b2c9      	uxtb	r1, r1
 80295c0:	910f      	str	r1, [sp, #60]	@ 0x3c
 80295c2:	f1bc 0f00 	cmp.w	ip, #0
 80295c6:	d019      	beq.n	80295fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 80295c8:	9908      	ldr	r1, [sp, #32]
 80295ca:	440b      	add	r3, r1
 80295cc:	0859      	lsrs	r1, r3, #1
 80295ce:	5c79      	ldrb	r1, [r7, r1]
 80295d0:	f013 0f01 	tst.w	r3, #1
 80295d4:	bf0c      	ite	eq
 80295d6:	f001 010f 	andeq.w	r1, r1, #15
 80295da:	1109      	asrne	r1, r1, #4
 80295dc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80295e0:	b2c9      	uxtb	r1, r1
 80295e2:	3301      	adds	r3, #1
 80295e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80295e6:	0859      	lsrs	r1, r3, #1
 80295e8:	5c79      	ldrb	r1, [r7, r1]
 80295ea:	07db      	lsls	r3, r3, #31
 80295ec:	bf54      	ite	pl
 80295ee:	f001 010f 	andpl.w	r1, r1, #15
 80295f2:	1109      	asrmi	r1, r1, #4
 80295f4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80295f8:	b2c9      	uxtb	r1, r1
 80295fa:	9110      	str	r1, [sp, #64]	@ 0x40
 80295fc:	b280      	uxth	r0, r0
 80295fe:	fa1f fc8c 	uxth.w	ip, ip
 8029602:	fb00 f30c 	mul.w	r3, r0, ip
 8029606:	0100      	lsls	r0, r0, #4
 8029608:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802960c:	fa1f fc8c 	uxth.w	ip, ip
 8029610:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 8029614:	eba1 010c 	sub.w	r1, r1, ip
 8029618:	fa1f fa81 	uxth.w	sl, r1
 802961c:	1ac0      	subs	r0, r0, r3
 802961e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8029620:	b280      	uxth	r0, r0
 8029622:	4348      	muls	r0, r1
 8029624:	fb02 020a 	mla	r2, r2, sl, r0
 8029628:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802962a:	fb0c 2c01 	mla	ip, ip, r1, r2
 802962e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8029630:	fb03 c302 	mla	r3, r3, r2, ip
 8029634:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029638:	2bff      	cmp	r3, #255	@ 0xff
 802963a:	d12b      	bne.n	8029694 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802963c:	4b13      	ldr	r3, [pc, #76]	@ (802968c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802963e:	681a      	ldr	r2, [r3, #0]
 8029640:	4b13      	ldr	r3, [pc, #76]	@ (8029690 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8029642:	0951      	lsrs	r1, r2, #5
 8029644:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8029648:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802964c:	430b      	orrs	r3, r1
 802964e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029652:	4313      	orrs	r3, r2
 8029654:	f8ae 3000 	strh.w	r3, [lr]
 8029658:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802965a:	f10e 0e02 	add.w	lr, lr, #2
 802965e:	441c      	add	r4, r3
 8029660:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029662:	f108 38ff 	add.w	r8, r8, #4294967295
 8029666:	441e      	add	r6, r3
 8029668:	e6ce      	b.n	8029408 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802966a:	f1bc 0f00 	cmp.w	ip, #0
 802966e:	d0c5      	beq.n	80295fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8029670:	9908      	ldr	r1, [sp, #32]
 8029672:	440b      	add	r3, r1
 8029674:	0859      	lsrs	r1, r3, #1
 8029676:	5c79      	ldrb	r1, [r7, r1]
 8029678:	07db      	lsls	r3, r3, #31
 802967a:	bf54      	ite	pl
 802967c:	f001 010f 	andpl.w	r1, r1, #15
 8029680:	1109      	asrmi	r1, r1, #4
 8029682:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029686:	b2c9      	uxtb	r1, r1
 8029688:	910b      	str	r1, [sp, #44]	@ 0x2c
 802968a:	e7b7      	b.n	80295fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802968c:	2005b938 	.word	0x2005b938
 8029690:	fffff800 	.word	0xfffff800
 8029694:	2b00      	cmp	r3, #0
 8029696:	d0df      	beq.n	8029658 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8029698:	fa1f fa83 	uxth.w	sl, r3
 802969c:	43db      	mvns	r3, r3
 802969e:	4a20      	ldr	r2, [pc, #128]	@ (8029720 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>)
 80296a0:	f8be c000 	ldrh.w	ip, [lr]
 80296a4:	6810      	ldr	r0, [r2, #0]
 80296a6:	ea4f 212c 	mov.w	r1, ip, asr #8
 80296aa:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80296ae:	fb12 f20a 	smulbb	r2, r2, sl
 80296b2:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80296b6:	b2c0      	uxtb	r0, r0
 80296b8:	fb10 f00a 	smulbb	r0, r0, sl
 80296bc:	b2db      	uxtb	r3, r3
 80296be:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80296c2:	fb01 2103 	mla	r1, r1, r3, r2
 80296c6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80296ca:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80296ce:	fb1b fb0a 	smulbb	fp, fp, sl
 80296d2:	fa5f fc8c 	uxtb.w	ip, ip
 80296d6:	fb0c 0003 	mla	r0, ip, r3, r0
 80296da:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80296de:	fb02 b203 	mla	r2, r2, r3, fp
 80296e2:	b289      	uxth	r1, r1
 80296e4:	b280      	uxth	r0, r0
 80296e6:	1c4b      	adds	r3, r1, #1
 80296e8:	f100 0b01 	add.w	fp, r0, #1
 80296ec:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80296f0:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80296f4:	b292      	uxth	r2, r2
 80296f6:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80296fa:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80296fe:	ea4b 0101 	orr.w	r1, fp, r1
 8029702:	f102 0b01 	add.w	fp, r2, #1
 8029706:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802970a:	0952      	lsrs	r2, r2, #5
 802970c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029710:	4311      	orrs	r1, r2
 8029712:	f8ae 1000 	strh.w	r1, [lr]
 8029716:	e79f      	b.n	8029658 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8029718:	b013      	add	sp, #76	@ 0x4c
 802971a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802971e:	bf00      	nop
 8029720:	2005b938 	.word	0x2005b938

08029724 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 8029724:	b570      	push	{r4, r5, r6, lr}
 8029726:	1208      	asrs	r0, r1, #8
 8029728:	b29e      	uxth	r6, r3
 802972a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 802972e:	1213      	asrs	r3, r2, #8
 8029730:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8029734:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8029738:	fb13 f305 	smulbb	r3, r3, r5
 802973c:	fb10 f006 	smulbb	r0, r0, r6
 8029740:	10cc      	asrs	r4, r1, #3
 8029742:	4418      	add	r0, r3
 8029744:	10d3      	asrs	r3, r2, #3
 8029746:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802974a:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802974e:	fb13 f305 	smulbb	r3, r3, r5
 8029752:	fb14 f406 	smulbb	r4, r4, r6
 8029756:	00c9      	lsls	r1, r1, #3
 8029758:	00d2      	lsls	r2, r2, #3
 802975a:	441c      	add	r4, r3
 802975c:	b2d2      	uxtb	r2, r2
 802975e:	b2cb      	uxtb	r3, r1
 8029760:	fb12 f205 	smulbb	r2, r2, r5
 8029764:	fb13 f306 	smulbb	r3, r3, r6
 8029768:	b280      	uxth	r0, r0
 802976a:	4413      	add	r3, r2
 802976c:	1c42      	adds	r2, r0, #1
 802976e:	b29b      	uxth	r3, r3
 8029770:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029774:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 8029778:	1c58      	adds	r0, r3, #1
 802977a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802977e:	b2a4      	uxth	r4, r4
 8029780:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8029784:	4310      	orrs	r0, r2
 8029786:	1c62      	adds	r2, r4, #1
 8029788:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802978c:	0964      	lsrs	r4, r4, #5
 802978e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8029792:	4320      	orrs	r0, r4
 8029794:	bd70      	pop	{r4, r5, r6, pc}
	...

08029798 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8029798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802979c:	b08f      	sub	sp, #60	@ 0x3c
 802979e:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 80297a2:	461c      	mov	r4, r3
 80297a4:	9004      	str	r0, [sp, #16]
 80297a6:	460d      	mov	r5, r1
 80297a8:	4616      	mov	r6, r2
 80297aa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80297ac:	2f00      	cmp	r7, #0
 80297ae:	f000 80f5 	beq.w	802999c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x204>
 80297b2:	f04f 0802 	mov.w	r8, #2
 80297b6:	6820      	ldr	r0, [r4, #0]
 80297b8:	6861      	ldr	r1, [r4, #4]
 80297ba:	aa0a      	add	r2, sp, #40	@ 0x28
 80297bc:	c203      	stmia	r2!, {r0, r1}
 80297be:	6818      	ldr	r0, [r3, #0]
 80297c0:	6859      	ldr	r1, [r3, #4]
 80297c2:	aa0c      	add	r2, sp, #48	@ 0x30
 80297c4:	c203      	stmia	r2!, {r0, r1}
 80297c6:	a80a      	add	r0, sp, #40	@ 0x28
 80297c8:	f7ee fea6 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80297cc:	4621      	mov	r1, r4
 80297ce:	a80c      	add	r0, sp, #48	@ 0x30
 80297d0:	f7ee feca 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80297d4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80297d8:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 80297dc:	f002 0301 	and.w	r3, r2, #1
 80297e0:	9306      	str	r3, [sp, #24]
 80297e2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80297e6:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 80297ea:	f003 0101 	and.w	r1, r3, #1
 80297ee:	9105      	str	r1, [sp, #20]
 80297f0:	9805      	ldr	r0, [sp, #20]
 80297f2:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80297f6:	4403      	add	r3, r0
 80297f8:	fb01 2303 	mla	r3, r1, r3, r2
 80297fc:	fb93 f3f8 	sdiv	r3, r3, r8
 8029800:	441d      	add	r5, r3
 8029802:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8029806:	3604      	adds	r6, #4
 8029808:	441a      	add	r2, r3
 802980a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802980e:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8029812:	4419      	add	r1, r3
 8029814:	4b63      	ldr	r3, [pc, #396]	@ (80299a4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8029816:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802981a:	6818      	ldr	r0, [r3, #0]
 802981c:	6803      	ldr	r3, [r0, #0]
 802981e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029820:	4798      	blx	r3
 8029822:	4a61      	ldr	r2, [pc, #388]	@ (80299a8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 8029824:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8029828:	8813      	ldrh	r3, [r2, #0]
 802982a:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 802982e:	2fff      	cmp	r7, #255	@ 0xff
 8029830:	fb03 a404 	mla	r4, r3, r4, sl
 8029834:	4611      	mov	r1, r2
 8029836:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802983a:	fb03 fb0b 	mul.w	fp, r3, fp
 802983e:	d06b      	beq.n	8029918 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 8029840:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 8029844:	9303      	str	r3, [sp, #12]
 8029846:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 802984a:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802984e:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8029852:	9b07      	ldr	r3, [sp, #28]
 8029854:	42a3      	cmp	r3, r4
 8029856:	f240 809c 	bls.w	8029992 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fa>
 802985a:	9b06      	ldr	r3, [sp, #24]
 802985c:	2b00      	cmp	r3, #0
 802985e:	d039      	beq.n	80298d4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 8029860:	782b      	ldrb	r3, [r5, #0]
 8029862:	8822      	ldrh	r2, [r4, #0]
 8029864:	f003 030f 	and.w	r3, r3, #15
 8029868:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802986c:	9b03      	ldr	r3, [sp, #12]
 802986e:	9804      	ldr	r0, [sp, #16]
 8029870:	9300      	str	r3, [sp, #0]
 8029872:	463b      	mov	r3, r7
 8029874:	f7ff ff56 	bl	8029724 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8029878:	f105 0801 	add.w	r8, r5, #1
 802987c:	f824 0b02 	strh.w	r0, [r4], #2
 8029880:	f109 3bff 	add.w	fp, r9, #4294967295
 8029884:	f1bb 0f01 	cmp.w	fp, #1
 8029888:	46a2      	mov	sl, r4
 802988a:	f104 0404 	add.w	r4, r4, #4
 802988e:	dd24      	ble.n	80298da <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 8029890:	f898 3000 	ldrb.w	r3, [r8]
 8029894:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8029898:	091b      	lsrs	r3, r3, #4
 802989a:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802989e:	9b03      	ldr	r3, [sp, #12]
 80298a0:	9804      	ldr	r0, [sp, #16]
 80298a2:	9300      	str	r3, [sp, #0]
 80298a4:	463b      	mov	r3, r7
 80298a6:	f7ff ff3d 	bl	8029724 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80298aa:	f824 0c04 	strh.w	r0, [r4, #-4]
 80298ae:	f818 3b01 	ldrb.w	r3, [r8], #1
 80298b2:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 80298b6:	f003 030f 	and.w	r3, r3, #15
 80298ba:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80298be:	9b03      	ldr	r3, [sp, #12]
 80298c0:	9804      	ldr	r0, [sp, #16]
 80298c2:	9300      	str	r3, [sp, #0]
 80298c4:	463b      	mov	r3, r7
 80298c6:	f7ff ff2d 	bl	8029724 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80298ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80298ce:	f824 0c02 	strh.w	r0, [r4, #-2]
 80298d2:	e7d7      	b.n	8029884 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 80298d4:	46a8      	mov	r8, r5
 80298d6:	46cb      	mov	fp, r9
 80298d8:	e7d4      	b.n	8029884 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 80298da:	d10e      	bne.n	80298fa <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 80298dc:	f898 3000 	ldrb.w	r3, [r8]
 80298e0:	f8ba 2000 	ldrh.w	r2, [sl]
 80298e4:	091b      	lsrs	r3, r3, #4
 80298e6:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80298ea:	9b03      	ldr	r3, [sp, #12]
 80298ec:	9804      	ldr	r0, [sp, #16]
 80298ee:	9300      	str	r3, [sp, #0]
 80298f0:	463b      	mov	r3, r7
 80298f2:	f7ff ff17 	bl	8029724 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80298f6:	f82a 0b02 	strh.w	r0, [sl], #2
 80298fa:	9b08      	ldr	r3, [sp, #32]
 80298fc:	9a05      	ldr	r2, [sp, #20]
 80298fe:	881c      	ldrh	r4, [r3, #0]
 8029900:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8029904:	eba4 0409 	sub.w	r4, r4, r9
 8029908:	4413      	add	r3, r2
 802990a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802990c:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 8029910:	fb93 f3f2 	sdiv	r3, r3, r2
 8029914:	441d      	add	r5, r3
 8029916:	e79c      	b.n	8029852 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 8029918:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 802991c:	45a3      	cmp	fp, r4
 802991e:	d938      	bls.n	8029992 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fa>
 8029920:	9b06      	ldr	r3, [sp, #24]
 8029922:	b1f3      	cbz	r3, 8029962 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ca>
 8029924:	782b      	ldrb	r3, [r5, #0]
 8029926:	1c6a      	adds	r2, r5, #1
 8029928:	f003 030f 	and.w	r3, r3, #15
 802992c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8029930:	f109 30ff 	add.w	r0, r9, #4294967295
 8029934:	8023      	strh	r3, [r4, #0]
 8029936:	3402      	adds	r4, #2
 8029938:	2801      	cmp	r0, #1
 802993a:	4623      	mov	r3, r4
 802993c:	f104 0404 	add.w	r4, r4, #4
 8029940:	dd12      	ble.n	8029968 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d0>
 8029942:	7813      	ldrb	r3, [r2, #0]
 8029944:	3802      	subs	r0, #2
 8029946:	091b      	lsrs	r3, r3, #4
 8029948:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802994c:	f824 3c04 	strh.w	r3, [r4, #-4]
 8029950:	f812 3b01 	ldrb.w	r3, [r2], #1
 8029954:	f003 030f 	and.w	r3, r3, #15
 8029958:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802995c:	f824 3c02 	strh.w	r3, [r4, #-2]
 8029960:	e7ea      	b.n	8029938 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a0>
 8029962:	462a      	mov	r2, r5
 8029964:	4648      	mov	r0, r9
 8029966:	e7e7      	b.n	8029938 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a0>
 8029968:	d106      	bne.n	8029978 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 802996a:	7812      	ldrb	r2, [r2, #0]
 802996c:	3302      	adds	r3, #2
 802996e:	0912      	lsrs	r2, r2, #4
 8029970:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8029974:	f823 2c02 	strh.w	r2, [r3, #-2]
 8029978:	880c      	ldrh	r4, [r1, #0]
 802997a:	9a05      	ldr	r2, [sp, #20]
 802997c:	eba4 0409 	sub.w	r4, r4, r9
 8029980:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8029984:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8029988:	4413      	add	r3, r2
 802998a:	fb93 f3f8 	sdiv	r3, r3, r8
 802998e:	441d      	add	r5, r3
 8029990:	e7c4      	b.n	802991c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 8029992:	4b04      	ldr	r3, [pc, #16]	@ (80299a4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8029994:	6818      	ldr	r0, [r3, #0]
 8029996:	6803      	ldr	r3, [r0, #0]
 8029998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802999a:	4798      	blx	r3
 802999c:	b00f      	add	sp, #60	@ 0x3c
 802999e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80299a2:	bf00      	nop
 80299a4:	2005b928 	.word	0x2005b928
 80299a8:	2005b922 	.word	0x2005b922

080299ac <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 80299ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80299ae:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80299b2:	0a0f      	lsrs	r7, r1, #8
 80299b4:	2dff      	cmp	r5, #255	@ 0xff
 80299b6:	d10c      	bne.n	80299d2 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 80299b8:	2bff      	cmp	r3, #255	@ 0xff
 80299ba:	d10a      	bne.n	80299d2 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 80299bc:	4b25      	ldr	r3, [pc, #148]	@ (8029a54 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 80299be:	0948      	lsrs	r0, r1, #5
 80299c0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80299c4:	403b      	ands	r3, r7
 80299c6:	4318      	orrs	r0, r3
 80299c8:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80299cc:	4308      	orrs	r0, r1
 80299ce:	b280      	uxth	r0, r0
 80299d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80299d2:	fb15 f503 	smulbb	r5, r5, r3
 80299d6:	b2ab      	uxth	r3, r5
 80299d8:	1c5d      	adds	r5, r3, #1
 80299da:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 80299de:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80299e2:	fa1f fc85 	uxth.w	ip, r5
 80299e6:	43ed      	mvns	r5, r5
 80299e8:	1214      	asrs	r4, r2, #8
 80299ea:	10d6      	asrs	r6, r2, #3
 80299ec:	00d0      	lsls	r0, r2, #3
 80299ee:	f3c1 4207 	ubfx	r2, r1, #16, #8
 80299f2:	fb12 f20c 	smulbb	r2, r2, ip
 80299f6:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80299fa:	b2eb      	uxtb	r3, r5
 80299fc:	b2c0      	uxtb	r0, r0
 80299fe:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8029a02:	fb04 2403 	mla	r4, r4, r3, r2
 8029a06:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 8029a0a:	b2c8      	uxtb	r0, r1
 8029a0c:	b2fd      	uxtb	r5, r7
 8029a0e:	fb10 f00c 	smulbb	r0, r0, ip
 8029a12:	fb15 f50c 	smulbb	r5, r5, ip
 8029a16:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8029a1a:	fb02 0003 	mla	r0, r2, r3, r0
 8029a1e:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8029a22:	fb06 5503 	mla	r5, r6, r3, r5
 8029a26:	b2a4      	uxth	r4, r4
 8029a28:	b283      	uxth	r3, r0
 8029a2a:	1c60      	adds	r0, r4, #1
 8029a2c:	b2ad      	uxth	r5, r5
 8029a2e:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8029a32:	1c58      	adds	r0, r3, #1
 8029a34:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8029a38:	1c6b      	adds	r3, r5, #1
 8029a3a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8029a3e:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8029a42:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8029a46:	096d      	lsrs	r5, r5, #5
 8029a48:	4320      	orrs	r0, r4
 8029a4a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8029a4e:	4328      	orrs	r0, r5
 8029a50:	e7be      	b.n	80299d0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 8029a52:	bf00      	nop
 8029a54:	00fff800 	.word	0x00fff800

08029a58 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8029a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029a5c:	461c      	mov	r4, r3
 8029a5e:	f04f 0a02 	mov.w	sl, #2
 8029a62:	b08d      	sub	sp, #52	@ 0x34
 8029a64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029a66:	460d      	mov	r5, r1
 8029a68:	4680      	mov	r8, r0
 8029a6a:	6861      	ldr	r1, [r4, #4]
 8029a6c:	6820      	ldr	r0, [r4, #0]
 8029a6e:	4616      	mov	r6, r2
 8029a70:	aa08      	add	r2, sp, #32
 8029a72:	c203      	stmia	r2!, {r0, r1}
 8029a74:	6818      	ldr	r0, [r3, #0]
 8029a76:	6859      	ldr	r1, [r3, #4]
 8029a78:	aa0a      	add	r2, sp, #40	@ 0x28
 8029a7a:	c203      	stmia	r2!, {r0, r1}
 8029a7c:	a808      	add	r0, sp, #32
 8029a7e:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 8029a82:	f7ee fd49 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8029a86:	4621      	mov	r1, r4
 8029a88:	a80a      	add	r0, sp, #40	@ 0x28
 8029a8a:	f7ee fd6d 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029a8e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8029a92:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 8029a96:	f002 0301 	and.w	r3, r2, #1
 8029a9a:	9303      	str	r3, [sp, #12]
 8029a9c:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8029aa0:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 8029aa4:	f003 0101 	and.w	r1, r3, #1
 8029aa8:	9102      	str	r1, [sp, #8]
 8029aaa:	9802      	ldr	r0, [sp, #8]
 8029aac:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8029ab0:	4403      	add	r3, r0
 8029ab2:	fb01 2303 	mla	r3, r1, r3, r2
 8029ab6:	fb93 f3fa 	sdiv	r3, r3, sl
 8029aba:	441d      	add	r5, r3
 8029abc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8029ac0:	3604      	adds	r6, #4
 8029ac2:	441a      	add	r2, r3
 8029ac4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8029ac8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8029acc:	4a3e      	ldr	r2, [pc, #248]	@ (8029bc8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 8029ace:	4419      	add	r1, r3
 8029ad0:	6810      	ldr	r0, [r2, #0]
 8029ad2:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 8029ad6:	6803      	ldr	r3, [r0, #0]
 8029ad8:	9205      	str	r2, [sp, #20]
 8029ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029adc:	4798      	blx	r3
 8029ade:	4b3b      	ldr	r3, [pc, #236]	@ (8029bcc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 8029ae0:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 8029ae4:	8819      	ldrh	r1, [r3, #0]
 8029ae6:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 8029aea:	434f      	muls	r7, r1
 8029aec:	fb01 c404 	mla	r4, r1, r4, ip
 8029af0:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 8029af4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8029af8:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 8029afc:	9204      	str	r2, [sp, #16]
 8029afe:	9b04      	ldr	r3, [sp, #16]
 8029b00:	429c      	cmp	r4, r3
 8029b02:	d258      	bcs.n	8029bb6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 8029b04:	9b03      	ldr	r3, [sp, #12]
 8029b06:	2b00      	cmp	r3, #0
 8029b08:	d034      	beq.n	8029b74 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8029b0a:	782b      	ldrb	r3, [r5, #0]
 8029b0c:	1c6f      	adds	r7, r5, #1
 8029b0e:	f003 030f 	and.w	r3, r3, #15
 8029b12:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8029b16:	0e0b      	lsrs	r3, r1, #24
 8029b18:	d006      	beq.n	8029b28 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 8029b1a:	8822      	ldrh	r2, [r4, #0]
 8029b1c:	4640      	mov	r0, r8
 8029b1e:	9300      	str	r3, [sp, #0]
 8029b20:	464b      	mov	r3, r9
 8029b22:	f7ff ff43 	bl	80299ac <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8029b26:	8020      	strh	r0, [r4, #0]
 8029b28:	3402      	adds	r4, #2
 8029b2a:	f10b 3aff 	add.w	sl, fp, #4294967295
 8029b2e:	f1ba 0f01 	cmp.w	sl, #1
 8029b32:	dd22      	ble.n	8029b7a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8029b34:	783b      	ldrb	r3, [r7, #0]
 8029b36:	091b      	lsrs	r3, r3, #4
 8029b38:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8029b3c:	0e0b      	lsrs	r3, r1, #24
 8029b3e:	d006      	beq.n	8029b4e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 8029b40:	8822      	ldrh	r2, [r4, #0]
 8029b42:	4640      	mov	r0, r8
 8029b44:	9300      	str	r3, [sp, #0]
 8029b46:	464b      	mov	r3, r9
 8029b48:	f7ff ff30 	bl	80299ac <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8029b4c:	8020      	strh	r0, [r4, #0]
 8029b4e:	f817 3b01 	ldrb.w	r3, [r7], #1
 8029b52:	f003 030f 	and.w	r3, r3, #15
 8029b56:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8029b5a:	0e0b      	lsrs	r3, r1, #24
 8029b5c:	d006      	beq.n	8029b6c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 8029b5e:	8862      	ldrh	r2, [r4, #2]
 8029b60:	4640      	mov	r0, r8
 8029b62:	9300      	str	r3, [sp, #0]
 8029b64:	464b      	mov	r3, r9
 8029b66:	f7ff ff21 	bl	80299ac <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8029b6a:	8060      	strh	r0, [r4, #2]
 8029b6c:	3404      	adds	r4, #4
 8029b6e:	f1aa 0a02 	sub.w	sl, sl, #2
 8029b72:	e7dc      	b.n	8029b2e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8029b74:	462f      	mov	r7, r5
 8029b76:	46da      	mov	sl, fp
 8029b78:	e7d9      	b.n	8029b2e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8029b7a:	d10d      	bne.n	8029b98 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 8029b7c:	783b      	ldrb	r3, [r7, #0]
 8029b7e:	091b      	lsrs	r3, r3, #4
 8029b80:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8029b84:	0e0b      	lsrs	r3, r1, #24
 8029b86:	d006      	beq.n	8029b96 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8029b88:	8822      	ldrh	r2, [r4, #0]
 8029b8a:	4640      	mov	r0, r8
 8029b8c:	9300      	str	r3, [sp, #0]
 8029b8e:	464b      	mov	r3, r9
 8029b90:	f7ff ff0c 	bl	80299ac <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8029b94:	8020      	strh	r0, [r4, #0]
 8029b96:	3402      	adds	r4, #2
 8029b98:	9b06      	ldr	r3, [sp, #24]
 8029b9a:	9a02      	ldr	r2, [sp, #8]
 8029b9c:	881b      	ldrh	r3, [r3, #0]
 8029b9e:	eba3 030b 	sub.w	r3, r3, fp
 8029ba2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8029ba6:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8029baa:	4413      	add	r3, r2
 8029bac:	9a07      	ldr	r2, [sp, #28]
 8029bae:	fb93 f3f2 	sdiv	r3, r3, r2
 8029bb2:	441d      	add	r5, r3
 8029bb4:	e7a3      	b.n	8029afe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 8029bb6:	9b05      	ldr	r3, [sp, #20]
 8029bb8:	6818      	ldr	r0, [r3, #0]
 8029bba:	6803      	ldr	r3, [r0, #0]
 8029bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8029bbe:	4798      	blx	r3
 8029bc0:	b00d      	add	sp, #52	@ 0x34
 8029bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029bc6:	bf00      	nop
 8029bc8:	2005b928 	.word	0x2005b928
 8029bcc:	2005b922 	.word	0x2005b922

08029bd0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 8029bd0:	b570      	push	{r4, r5, r6, lr}
 8029bd2:	788d      	ldrb	r5, [r1, #2]
 8029bd4:	1214      	asrs	r4, r2, #8
 8029bd6:	fb15 f503 	smulbb	r5, r5, r3
 8029bda:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8029bde:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8029be2:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8029be6:	fb04 5506 	mla	r5, r4, r6, r5
 8029bea:	784c      	ldrb	r4, [r1, #1]
 8029bec:	7809      	ldrb	r1, [r1, #0]
 8029bee:	fb14 f403 	smulbb	r4, r4, r3
 8029bf2:	fb11 f303 	smulbb	r3, r1, r3
 8029bf6:	10d0      	asrs	r0, r2, #3
 8029bf8:	00d2      	lsls	r2, r2, #3
 8029bfa:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8029bfe:	b2d2      	uxtb	r2, r2
 8029c00:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8029c04:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8029c08:	fb00 4406 	mla	r4, r0, r6, r4
 8029c0c:	fb02 3306 	mla	r3, r2, r6, r3
 8029c10:	b2ad      	uxth	r5, r5
 8029c12:	b29b      	uxth	r3, r3
 8029c14:	b2a4      	uxth	r4, r4
 8029c16:	1c68      	adds	r0, r5, #1
 8029c18:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8029c1c:	1c62      	adds	r2, r4, #1
 8029c1e:	1c58      	adds	r0, r3, #1
 8029c20:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8029c24:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8029c28:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8029c2c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8029c30:	0964      	lsrs	r4, r4, #5
 8029c32:	4328      	orrs	r0, r5
 8029c34:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8029c38:	4320      	orrs	r0, r4
 8029c3a:	bd70      	pop	{r4, r5, r6, pc}

08029c3c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8029c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029c40:	b08f      	sub	sp, #60	@ 0x3c
 8029c42:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8029c46:	461c      	mov	r4, r3
 8029c48:	4682      	mov	sl, r0
 8029c4a:	460e      	mov	r6, r1
 8029c4c:	4615      	mov	r5, r2
 8029c4e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029c50:	2f00      	cmp	r7, #0
 8029c52:	f000 8141 	beq.w	8029ed8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 8029c56:	f04f 0802 	mov.w	r8, #2
 8029c5a:	6820      	ldr	r0, [r4, #0]
 8029c5c:	6861      	ldr	r1, [r4, #4]
 8029c5e:	aa0a      	add	r2, sp, #40	@ 0x28
 8029c60:	c203      	stmia	r2!, {r0, r1}
 8029c62:	6818      	ldr	r0, [r3, #0]
 8029c64:	6859      	ldr	r1, [r3, #4]
 8029c66:	aa0c      	add	r2, sp, #48	@ 0x30
 8029c68:	c203      	stmia	r2!, {r0, r1}
 8029c6a:	a80a      	add	r0, sp, #40	@ 0x28
 8029c6c:	f7ee fc54 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8029c70:	4621      	mov	r1, r4
 8029c72:	a80c      	add	r0, sp, #48	@ 0x30
 8029c74:	f7ee fc78 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029c78:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8029c7c:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8029c80:	f002 0301 	and.w	r3, r2, #1
 8029c84:	9306      	str	r3, [sp, #24]
 8029c86:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8029c8a:	3504      	adds	r5, #4
 8029c8c:	f003 0101 	and.w	r1, r3, #1
 8029c90:	9105      	str	r1, [sp, #20]
 8029c92:	9805      	ldr	r0, [sp, #20]
 8029c94:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8029c98:	4403      	add	r3, r0
 8029c9a:	fb01 2303 	mla	r3, r1, r3, r2
 8029c9e:	fb93 f3f8 	sdiv	r3, r3, r8
 8029ca2:	441e      	add	r6, r3
 8029ca4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8029ca8:	441a      	add	r2, r3
 8029caa:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8029cae:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8029cb2:	4419      	add	r1, r3
 8029cb4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8029cb8:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8029cbc:	9303      	str	r3, [sp, #12]
 8029cbe:	4b88      	ldr	r3, [pc, #544]	@ (8029ee0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8029cc0:	6818      	ldr	r0, [r3, #0]
 8029cc2:	6803      	ldr	r3, [r0, #0]
 8029cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029cc6:	4798      	blx	r3
 8029cc8:	4a86      	ldr	r2, [pc, #536]	@ (8029ee4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 8029cca:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8029cce:	8813      	ldrh	r3, [r2, #0]
 8029cd0:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8029cd4:	2fff      	cmp	r7, #255	@ 0xff
 8029cd6:	fb03 9404 	mla	r4, r3, r4, r9
 8029cda:	4694      	mov	ip, r2
 8029cdc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8029ce0:	fb03 f30b 	mul.w	r3, r3, fp
 8029ce4:	d071      	beq.n	8029dca <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 8029ce6:	43f9      	mvns	r1, r7
 8029ce8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8029cec:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8029cf0:	b2c9      	uxtb	r1, r1
 8029cf2:	9104      	str	r1, [sp, #16]
 8029cf4:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8029cf8:	9b07      	ldr	r3, [sp, #28]
 8029cfa:	42a3      	cmp	r3, r4
 8029cfc:	f240 80e7 	bls.w	8029ece <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 8029d00:	9b06      	ldr	r3, [sp, #24]
 8029d02:	2b00      	cmp	r3, #0
 8029d04:	d03d      	beq.n	8029d82 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 8029d06:	7831      	ldrb	r1, [r6, #0]
 8029d08:	9b04      	ldr	r3, [sp, #16]
 8029d0a:	f001 010f 	and.w	r1, r1, #15
 8029d0e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029d12:	8822      	ldrh	r2, [r4, #0]
 8029d14:	4429      	add	r1, r5
 8029d16:	9300      	str	r3, [sp, #0]
 8029d18:	4650      	mov	r0, sl
 8029d1a:	463b      	mov	r3, r7
 8029d1c:	f7ff ff58 	bl	8029bd0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8029d20:	9b03      	ldr	r3, [sp, #12]
 8029d22:	f106 0801 	add.w	r8, r6, #1
 8029d26:	f824 0b02 	strh.w	r0, [r4], #2
 8029d2a:	f103 3bff 	add.w	fp, r3, #4294967295
 8029d2e:	f1bb 0f01 	cmp.w	fp, #1
 8029d32:	46a1      	mov	r9, r4
 8029d34:	f104 0404 	add.w	r4, r4, #4
 8029d38:	dd27      	ble.n	8029d8a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 8029d3a:	f898 1000 	ldrb.w	r1, [r8]
 8029d3e:	9b04      	ldr	r3, [sp, #16]
 8029d40:	0909      	lsrs	r1, r1, #4
 8029d42:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029d46:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8029d4a:	4429      	add	r1, r5
 8029d4c:	9300      	str	r3, [sp, #0]
 8029d4e:	4650      	mov	r0, sl
 8029d50:	463b      	mov	r3, r7
 8029d52:	f7ff ff3d 	bl	8029bd0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8029d56:	f824 0c04 	strh.w	r0, [r4, #-4]
 8029d5a:	f818 1b01 	ldrb.w	r1, [r8], #1
 8029d5e:	9b04      	ldr	r3, [sp, #16]
 8029d60:	f001 010f 	and.w	r1, r1, #15
 8029d64:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029d68:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8029d6c:	4429      	add	r1, r5
 8029d6e:	9300      	str	r3, [sp, #0]
 8029d70:	4650      	mov	r0, sl
 8029d72:	463b      	mov	r3, r7
 8029d74:	f7ff ff2c 	bl	8029bd0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8029d78:	f1ab 0b02 	sub.w	fp, fp, #2
 8029d7c:	f824 0c02 	strh.w	r0, [r4, #-2]
 8029d80:	e7d5      	b.n	8029d2e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 8029d82:	46b0      	mov	r8, r6
 8029d84:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8029d88:	e7d1      	b.n	8029d2e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 8029d8a:	d10f      	bne.n	8029dac <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 8029d8c:	f898 1000 	ldrb.w	r1, [r8]
 8029d90:	9b04      	ldr	r3, [sp, #16]
 8029d92:	0909      	lsrs	r1, r1, #4
 8029d94:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029d98:	f8b9 2000 	ldrh.w	r2, [r9]
 8029d9c:	4429      	add	r1, r5
 8029d9e:	9300      	str	r3, [sp, #0]
 8029da0:	4650      	mov	r0, sl
 8029da2:	463b      	mov	r3, r7
 8029da4:	f7ff ff14 	bl	8029bd0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8029da8:	f829 0b02 	strh.w	r0, [r9], #2
 8029dac:	9b08      	ldr	r3, [sp, #32]
 8029dae:	9a05      	ldr	r2, [sp, #20]
 8029db0:	881c      	ldrh	r4, [r3, #0]
 8029db2:	9b03      	ldr	r3, [sp, #12]
 8029db4:	1ae4      	subs	r4, r4, r3
 8029db6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8029dba:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8029dbe:	4413      	add	r3, r2
 8029dc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029dc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8029dc6:	441e      	add	r6, r3
 8029dc8:	e796      	b.n	8029cf8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 8029dca:	4f47      	ldr	r7, [pc, #284]	@ (8029ee8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 8029dcc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8029dd0:	42a3      	cmp	r3, r4
 8029dd2:	d97c      	bls.n	8029ece <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 8029dd4:	9a06      	ldr	r2, [sp, #24]
 8029dd6:	2a00      	cmp	r2, #0
 8029dd8:	d054      	beq.n	8029e84 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 8029dda:	7830      	ldrb	r0, [r6, #0]
 8029ddc:	1c71      	adds	r1, r6, #1
 8029dde:	f000 000f 	and.w	r0, r0, #15
 8029de2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8029de6:	eb05 0e00 	add.w	lr, r5, r0
 8029dea:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8029dee:	f89e e001 	ldrb.w	lr, [lr, #1]
 8029df2:	5c28      	ldrb	r0, [r5, r0]
 8029df4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029df8:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8029dfc:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8029e00:	ea42 020e 	orr.w	r2, r2, lr
 8029e04:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 8029e08:	f824 2b02 	strh.w	r2, [r4], #2
 8029e0c:	9a03      	ldr	r2, [sp, #12]
 8029e0e:	f102 3eff 	add.w	lr, r2, #4294967295
 8029e12:	f1be 0f01 	cmp.w	lr, #1
 8029e16:	4620      	mov	r0, r4
 8029e18:	f104 0404 	add.w	r4, r4, #4
 8029e1c:	dd36      	ble.n	8029e8c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 8029e1e:	7808      	ldrb	r0, [r1, #0]
 8029e20:	f1ae 0e02 	sub.w	lr, lr, #2
 8029e24:	0900      	lsrs	r0, r0, #4
 8029e26:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8029e2a:	eb05 0a00 	add.w	sl, r5, r0
 8029e2e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8029e32:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8029e36:	00d2      	lsls	r2, r2, #3
 8029e38:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8029e3c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029e40:	ea49 0202 	orr.w	r2, r9, r2
 8029e44:	f815 9000 	ldrb.w	r9, [r5, r0]
 8029e48:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8029e4c:	f824 2c04 	strh.w	r2, [r4, #-4]
 8029e50:	f811 0b01 	ldrb.w	r0, [r1], #1
 8029e54:	f000 000f 	and.w	r0, r0, #15
 8029e58:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8029e5c:	eb05 0a00 	add.w	sl, r5, r0
 8029e60:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8029e64:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8029e68:	00d2      	lsls	r2, r2, #3
 8029e6a:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8029e6e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029e72:	ea49 0202 	orr.w	r2, r9, r2
 8029e76:	f815 9000 	ldrb.w	r9, [r5, r0]
 8029e7a:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8029e7e:	f824 2c02 	strh.w	r2, [r4, #-2]
 8029e82:	e7c6      	b.n	8029e12 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8029e84:	4631      	mov	r1, r6
 8029e86:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8029e8a:	e7c2      	b.n	8029e12 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8029e8c:	d111      	bne.n	8029eb2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 8029e8e:	7809      	ldrb	r1, [r1, #0]
 8029e90:	0909      	lsrs	r1, r1, #4
 8029e92:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029e96:	186c      	adds	r4, r5, r1
 8029e98:	78a2      	ldrb	r2, [r4, #2]
 8029e9a:	7864      	ldrb	r4, [r4, #1]
 8029e9c:	5c69      	ldrb	r1, [r5, r1]
 8029e9e:	00e4      	lsls	r4, r4, #3
 8029ea0:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8029ea4:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8029ea8:	4322      	orrs	r2, r4
 8029eaa:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8029eae:	f820 2b02 	strh.w	r2, [r0], #2
 8029eb2:	9a03      	ldr	r2, [sp, #12]
 8029eb4:	f8bc 4000 	ldrh.w	r4, [ip]
 8029eb8:	9905      	ldr	r1, [sp, #20]
 8029eba:	1aa4      	subs	r4, r4, r2
 8029ebc:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8029ec0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8029ec4:	440a      	add	r2, r1
 8029ec6:	fb92 f2f8 	sdiv	r2, r2, r8
 8029eca:	4416      	add	r6, r2
 8029ecc:	e780      	b.n	8029dd0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 8029ece:	4b04      	ldr	r3, [pc, #16]	@ (8029ee0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8029ed0:	6818      	ldr	r0, [r3, #0]
 8029ed2:	6803      	ldr	r3, [r0, #0]
 8029ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8029ed6:	4798      	blx	r3
 8029ed8:	b00f      	add	sp, #60	@ 0x3c
 8029eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029ede:	bf00      	nop
 8029ee0:	2005b928 	.word	0x2005b928
 8029ee4:	2005b922 	.word	0x2005b922
 8029ee8:	fffff800 	.word	0xfffff800

08029eec <CRC_Lock>:
 8029eec:	b530      	push	{r4, r5, lr}
 8029eee:	4a2d      	ldr	r2, [pc, #180]	@ (8029fa4 <CRC_Lock+0xb8>)
 8029ef0:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8029ef4:	6813      	ldr	r3, [r2, #0]
 8029ef6:	f023 0301 	bic.w	r3, r3, #1
 8029efa:	6013      	str	r3, [r2, #0]
 8029efc:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8029f00:	4b29      	ldr	r3, [pc, #164]	@ (8029fa8 <CRC_Lock+0xbc>)
 8029f02:	681c      	ldr	r4, [r3, #0]
 8029f04:	4014      	ands	r4, r2
 8029f06:	42ac      	cmp	r4, r5
 8029f08:	d005      	beq.n	8029f16 <CRC_Lock+0x2a>
 8029f0a:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8029f0e:	681c      	ldr	r4, [r3, #0]
 8029f10:	4014      	ands	r4, r2
 8029f12:	42ac      	cmp	r4, r5
 8029f14:	d125      	bne.n	8029f62 <CRC_Lock+0x76>
 8029f16:	4b25      	ldr	r3, [pc, #148]	@ (8029fac <CRC_Lock+0xc0>)
 8029f18:	681b      	ldr	r3, [r3, #0]
 8029f1a:	2b00      	cmp	r3, #0
 8029f1c:	d139      	bne.n	8029f92 <CRC_Lock+0xa6>
 8029f1e:	4b24      	ldr	r3, [pc, #144]	@ (8029fb0 <CRC_Lock+0xc4>)
 8029f20:	681a      	ldr	r2, [r3, #0]
 8029f22:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029f26:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8029f2a:	d00d      	beq.n	8029f48 <CRC_Lock+0x5c>
 8029f2c:	f240 4483 	movw	r4, #1155	@ 0x483
 8029f30:	681a      	ldr	r2, [r3, #0]
 8029f32:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029f36:	42a2      	cmp	r2, r4
 8029f38:	d006      	beq.n	8029f48 <CRC_Lock+0x5c>
 8029f3a:	f240 4285 	movw	r2, #1157	@ 0x485
 8029f3e:	681b      	ldr	r3, [r3, #0]
 8029f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8029f44:	4293      	cmp	r3, r2
 8029f46:	d124      	bne.n	8029f92 <CRC_Lock+0xa6>
 8029f48:	2201      	movs	r2, #1
 8029f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8029fb4 <CRC_Lock+0xc8>)
 8029f4c:	601a      	str	r2, [r3, #0]
 8029f4e:	681a      	ldr	r2, [r3, #0]
 8029f50:	2a00      	cmp	r2, #0
 8029f52:	d1fc      	bne.n	8029f4e <CRC_Lock+0x62>
 8029f54:	4b18      	ldr	r3, [pc, #96]	@ (8029fb8 <CRC_Lock+0xcc>)
 8029f56:	6018      	str	r0, [r3, #0]
 8029f58:	6818      	ldr	r0, [r3, #0]
 8029f5a:	1a43      	subs	r3, r0, r1
 8029f5c:	4258      	negs	r0, r3
 8029f5e:	4158      	adcs	r0, r3
 8029f60:	e00e      	b.n	8029f80 <CRC_Lock+0x94>
 8029f62:	681b      	ldr	r3, [r3, #0]
 8029f64:	4013      	ands	r3, r2
 8029f66:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8029f6a:	4293      	cmp	r3, r2
 8029f6c:	d111      	bne.n	8029f92 <CRC_Lock+0xa6>
 8029f6e:	f240 4286 	movw	r2, #1158	@ 0x486
 8029f72:	4b12      	ldr	r3, [pc, #72]	@ (8029fbc <CRC_Lock+0xd0>)
 8029f74:	681b      	ldr	r3, [r3, #0]
 8029f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8029f7a:	4293      	cmp	r3, r2
 8029f7c:	d001      	beq.n	8029f82 <CRC_Lock+0x96>
 8029f7e:	2000      	movs	r0, #0
 8029f80:	bd30      	pop	{r4, r5, pc}
 8029f82:	2201      	movs	r2, #1
 8029f84:	4b0e      	ldr	r3, [pc, #56]	@ (8029fc0 <CRC_Lock+0xd4>)
 8029f86:	601a      	str	r2, [r3, #0]
 8029f88:	681a      	ldr	r2, [r3, #0]
 8029f8a:	2a00      	cmp	r2, #0
 8029f8c:	d1fc      	bne.n	8029f88 <CRC_Lock+0x9c>
 8029f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8029fc4 <CRC_Lock+0xd8>)
 8029f90:	e7e1      	b.n	8029f56 <CRC_Lock+0x6a>
 8029f92:	2201      	movs	r2, #1
 8029f94:	4b0c      	ldr	r3, [pc, #48]	@ (8029fc8 <CRC_Lock+0xdc>)
 8029f96:	601a      	str	r2, [r3, #0]
 8029f98:	681a      	ldr	r2, [r3, #0]
 8029f9a:	2a00      	cmp	r2, #0
 8029f9c:	d1fc      	bne.n	8029f98 <CRC_Lock+0xac>
 8029f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8029fcc <CRC_Lock+0xe0>)
 8029fa0:	e7d9      	b.n	8029f56 <CRC_Lock+0x6a>
 8029fa2:	bf00      	nop
 8029fa4:	e0002000 	.word	0xe0002000
 8029fa8:	e000ed00 	.word	0xe000ed00
 8029fac:	e0042000 	.word	0xe0042000
 8029fb0:	5c001000 	.word	0x5c001000
 8029fb4:	58024c08 	.word	0x58024c08
 8029fb8:	58024c00 	.word	0x58024c00
 8029fbc:	46008ff0 	.word	0x46008ff0
 8029fc0:	46024c08 	.word	0x46024c08
 8029fc4:	46024c00 	.word	0x46024c00
 8029fc8:	40023008 	.word	0x40023008
 8029fcc:	40023000 	.word	0x40023000

08029fd0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8029fd0:	6101      	str	r1, [r0, #16]
 8029fd2:	4770      	bx	lr

08029fd4 <_ZN8touchgfx8Gestures4tickEv>:
 8029fd4:	7b83      	ldrb	r3, [r0, #14]
 8029fd6:	b14b      	cbz	r3, 8029fec <_ZN8touchgfx8Gestures4tickEv+0x18>
 8029fd8:	8903      	ldrh	r3, [r0, #8]
 8029fda:	3301      	adds	r3, #1
 8029fdc:	b29b      	uxth	r3, r3
 8029fde:	2b07      	cmp	r3, #7
 8029fe0:	8103      	strh	r3, [r0, #8]
 8029fe2:	bf81      	itttt	hi
 8029fe4:	2300      	movhi	r3, #0
 8029fe6:	8143      	strhhi	r3, [r0, #10]
 8029fe8:	8183      	strhhi	r3, [r0, #12]
 8029fea:	7383      	strbhi	r3, [r0, #14]
 8029fec:	4770      	bx	lr
	...

08029ff0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8029ff0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8029ff4:	4698      	mov	r8, r3
 8029ff6:	4604      	mov	r4, r0
 8029ff8:	8883      	ldrh	r3, [r0, #4]
 8029ffa:	460e      	mov	r6, r1
 8029ffc:	88c1      	ldrh	r1, [r0, #6]
 8029ffe:	2000      	movs	r0, #0
 802a000:	f8ad 3006 	strh.w	r3, [sp, #6]
 802a004:	eba8 0303 	sub.w	r3, r8, r3
 802a008:	b21b      	sxth	r3, r3
 802a00a:	4617      	mov	r7, r2
 802a00c:	4a17      	ldr	r2, [pc, #92]	@ (802a06c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802a00e:	2b00      	cmp	r3, #0
 802a010:	bfb8      	it	lt
 802a012:	425b      	neglt	r3, r3
 802a014:	9200      	str	r2, [sp, #0]
 802a016:	8aa2      	ldrh	r2, [r4, #20]
 802a018:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 802a01c:	b21b      	sxth	r3, r3
 802a01e:	4293      	cmp	r3, r2
 802a020:	f88d 0004 	strb.w	r0, [sp, #4]
 802a024:	f8ad 1008 	strh.w	r1, [sp, #8]
 802a028:	f8ad 800a 	strh.w	r8, [sp, #10]
 802a02c:	f8ad 500c 	strh.w	r5, [sp, #12]
 802a030:	dc07      	bgt.n	802a042 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802a032:	1a69      	subs	r1, r5, r1
 802a034:	b209      	sxth	r1, r1
 802a036:	2900      	cmp	r1, #0
 802a038:	bfb8      	it	lt
 802a03a:	4249      	neglt	r1, r1
 802a03c:	b209      	sxth	r1, r1
 802a03e:	428a      	cmp	r2, r1
 802a040:	da10      	bge.n	802a064 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802a042:	6920      	ldr	r0, [r4, #16]
 802a044:	4669      	mov	r1, sp
 802a046:	6803      	ldr	r3, [r0, #0]
 802a048:	eba8 0606 	sub.w	r6, r8, r6
 802a04c:	685b      	ldr	r3, [r3, #4]
 802a04e:	4798      	blx	r3
 802a050:	2300      	movs	r3, #0
 802a052:	2001      	movs	r0, #1
 802a054:	1bef      	subs	r7, r5, r7
 802a056:	8123      	strh	r3, [r4, #8]
 802a058:	8166      	strh	r6, [r4, #10]
 802a05a:	81a7      	strh	r7, [r4, #12]
 802a05c:	f8a4 8004 	strh.w	r8, [r4, #4]
 802a060:	80e5      	strh	r5, [r4, #6]
 802a062:	73a0      	strb	r0, [r4, #14]
 802a064:	b004      	add	sp, #16
 802a066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a06a:	bf00      	nop
 802a06c:	0802e804 	.word	0x0802e804

0802a070 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802a070:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a072:	461e      	mov	r6, r3
 802a074:	1e4b      	subs	r3, r1, #1
 802a076:	2b01      	cmp	r3, #1
 802a078:	b085      	sub	sp, #20
 802a07a:	4604      	mov	r4, r0
 802a07c:	460d      	mov	r5, r1
 802a07e:	4617      	mov	r7, r2
 802a080:	d84b      	bhi.n	802a11a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802a082:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802a086:	1cd3      	adds	r3, r2, #3
 802a088:	b29b      	uxth	r3, r3
 802a08a:	2b06      	cmp	r3, #6
 802a08c:	d916      	bls.n	802a0bc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802a08e:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 802a130 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802a092:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802a096:	f8cd c004 	str.w	ip, [sp, #4]
 802a09a:	f04f 0c00 	mov.w	ip, #0
 802a09e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a0a2:	6900      	ldr	r0, [r0, #16]
 802a0a4:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a0a8:	f88d c008 	strb.w	ip, [sp, #8]
 802a0ac:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a0b0:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a0b4:	6803      	ldr	r3, [r0, #0]
 802a0b6:	a901      	add	r1, sp, #4
 802a0b8:	689b      	ldr	r3, [r3, #8]
 802a0ba:	4798      	blx	r3
 802a0bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a0c0:	1cd3      	adds	r3, r2, #3
 802a0c2:	b29b      	uxth	r3, r3
 802a0c4:	2b06      	cmp	r3, #6
 802a0c6:	d916      	bls.n	802a0f6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a0c8:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802a130 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802a0cc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802a0d0:	f8cd c004 	str.w	ip, [sp, #4]
 802a0d4:	f04f 0c01 	mov.w	ip, #1
 802a0d8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a0dc:	6920      	ldr	r0, [r4, #16]
 802a0de:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a0e2:	f88d c008 	strb.w	ip, [sp, #8]
 802a0e6:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a0ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a0ee:	6803      	ldr	r3, [r0, #0]
 802a0f0:	a901      	add	r1, sp, #4
 802a0f2:	689b      	ldr	r3, [r3, #8]
 802a0f4:	4798      	blx	r3
 802a0f6:	4b0d      	ldr	r3, [pc, #52]	@ (802a12c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802a0f8:	6920      	ldr	r0, [r4, #16]
 802a0fa:	9301      	str	r3, [sp, #4]
 802a0fc:	2300      	movs	r3, #0
 802a0fe:	f88d 5008 	strb.w	r5, [sp, #8]
 802a102:	f8ad 700a 	strh.w	r7, [sp, #10]
 802a106:	f8ad 600c 	strh.w	r6, [sp, #12]
 802a10a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a10e:	6803      	ldr	r3, [r0, #0]
 802a110:	a901      	add	r1, sp, #4
 802a112:	681b      	ldr	r3, [r3, #0]
 802a114:	4798      	blx	r3
 802a116:	b005      	add	sp, #20
 802a118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a11a:	2900      	cmp	r1, #0
 802a11c:	d1eb      	bne.n	802a0f6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a11e:	80a2      	strh	r2, [r4, #4]
 802a120:	80c6      	strh	r6, [r0, #6]
 802a122:	60a1      	str	r1, [r4, #8]
 802a124:	81a1      	strh	r1, [r4, #12]
 802a126:	73a1      	strb	r1, [r4, #14]
 802a128:	e7e5      	b.n	802a0f6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a12a:	bf00      	nop
 802a12c:	0802e7f0 	.word	0x0802e7f0
 802a130:	0802e818 	.word	0x0802e818

0802a134 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 802a134:	10c9      	asrs	r1, r1, #3
 802a136:	2900      	cmp	r1, #0
 802a138:	bfb8      	it	lt
 802a13a:	4249      	neglt	r1, r1
 802a13c:	2801      	cmp	r0, #1
 802a13e:	d108      	bne.n	802a152 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802a140:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802a144:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 802a148:	4601      	mov	r1, r0
 802a14a:	dd02      	ble.n	802a152 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802a14c:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 802a150:	4770      	bx	lr
 802a152:	29ff      	cmp	r1, #255	@ 0xff
 802a154:	bfa8      	it	ge
 802a156:	21ff      	movge	r1, #255	@ 0xff
 802a158:	4608      	mov	r0, r1
 802a15a:	4770      	bx	lr

0802a15c <_ZN8touchgfx10Rasterizer6lineToEii>:
 802a15c:	b410      	push	{r4}
 802a15e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802a162:	429c      	cmp	r4, r3
 802a164:	d803      	bhi.n	802a16e <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802a166:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a16a:	f7ed b987 	b.w	801747c <_ZN8touchgfx7Outline6lineToEii>
 802a16e:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a172:	4770      	bx	lr

0802a174 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 802a174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a178:	b08b      	sub	sp, #44	@ 0x2c
 802a17a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802a17e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 802a182:	4606      	mov	r6, r0
 802a184:	9308      	str	r3, [sp, #32]
 802a186:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 802a18a:	468a      	mov	sl, r1
 802a18c:	9309      	str	r3, [sp, #36]	@ 0x24
 802a18e:	f7ed fae1 	bl	8017754 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802a192:	68b5      	ldr	r5, [r6, #8]
 802a194:	4604      	mov	r4, r0
 802a196:	2d00      	cmp	r5, #0
 802a198:	d044      	beq.n	802a224 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802a19a:	6873      	ldr	r3, [r6, #4]
 802a19c:	42ab      	cmp	r3, r5
 802a19e:	d33d      	bcc.n	802a21c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802a1a0:	f04f 0800 	mov.w	r8, #0
 802a1a4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802a1a8:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 802a1ac:	eb02 0b03 	add.w	fp, r2, r3
 802a1b0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802a1b4:	fb02 1203 	mla	r2, r2, r3, r1
 802a1b8:	9205      	str	r2, [sp, #20]
 802a1ba:	1e6a      	subs	r2, r5, #1
 802a1bc:	9204      	str	r2, [sp, #16]
 802a1be:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802a1c2:	f9b4 7000 	ldrsh.w	r7, [r4]
 802a1c6:	454b      	cmp	r3, r9
 802a1c8:	463a      	mov	r2, r7
 802a1ca:	d008      	beq.n	802a1de <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802a1cc:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 802a1d0:	eb03 0b09 	add.w	fp, r3, r9
 802a1d4:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 802a1d8:	fb03 1309 	mla	r3, r3, r9, r1
 802a1dc:	9305      	str	r3, [sp, #20]
 802a1de:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802a1e2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802a1e6:	4498      	add	r8, r3
 802a1e8:	9b04      	ldr	r3, [sp, #16]
 802a1ea:	3b01      	subs	r3, #1
 802a1ec:	9304      	str	r3, [sp, #16]
 802a1ee:	9b04      	ldr	r3, [sp, #16]
 802a1f0:	3301      	adds	r3, #1
 802a1f2:	d015      	beq.n	802a220 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802a1f4:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 802a1f8:	42bb      	cmp	r3, r7
 802a1fa:	d117      	bne.n	802a22c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802a1fc:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802a200:	9b04      	ldr	r3, [sp, #16]
 802a202:	4548      	cmp	r0, r9
 802a204:	f103 33ff 	add.w	r3, r3, #4294967295
 802a208:	d17d      	bne.n	802a306 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802a20a:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802a20e:	4401      	add	r1, r0
 802a210:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802a214:	4480      	add	r8, r0
 802a216:	e7e9      	b.n	802a1ec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 802a218:	461f      	mov	r7, r3
 802a21a:	e042      	b.n	802a2a2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 802a21c:	2000      	movs	r0, #0
 802a21e:	e002      	b.n	802a226 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 802a220:	2900      	cmp	r1, #0
 802a222:	d16d      	bne.n	802a300 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802a224:	2001      	movs	r0, #1
 802a226:	b00b      	add	sp, #44	@ 0x2c
 802a228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a22c:	b379      	cbz	r1, 802a28e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802a22e:	2f00      	cmp	r7, #0
 802a230:	db29      	blt.n	802a286 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802a232:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802a236:	42bb      	cmp	r3, r7
 802a238:	dd25      	ble.n	802a286 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802a23a:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802a23e:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802a242:	f7ff ff77 	bl	802a134 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802a246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a248:	fb10 f003 	smulbb	r0, r0, r3
 802a24c:	b280      	uxth	r0, r0
 802a24e:	1c41      	adds	r1, r0, #1
 802a250:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802a254:	1209      	asrs	r1, r1, #8
 802a256:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802a25a:	d014      	beq.n	802a286 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802a25c:	b2c9      	uxtb	r1, r1
 802a25e:	9102      	str	r1, [sp, #8]
 802a260:	2101      	movs	r1, #1
 802a262:	9808      	ldr	r0, [sp, #32]
 802a264:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802a266:	b2ba      	uxth	r2, r7
 802a268:	4413      	add	r3, r2
 802a26a:	9101      	str	r1, [sp, #4]
 802a26c:	4402      	add	r2, r0
 802a26e:	fa0f f18b 	sxth.w	r1, fp
 802a272:	f8da 0000 	ldr.w	r0, [sl]
 802a276:	9100      	str	r1, [sp, #0]
 802a278:	6941      	ldr	r1, [r0, #20]
 802a27a:	b21b      	sxth	r3, r3
 802a27c:	460d      	mov	r5, r1
 802a27e:	b212      	sxth	r2, r2
 802a280:	9905      	ldr	r1, [sp, #20]
 802a282:	4650      	mov	r0, sl
 802a284:	47a8      	blx	r5
 802a286:	9b04      	ldr	r3, [sp, #16]
 802a288:	1c7a      	adds	r2, r7, #1
 802a28a:	3301      	adds	r3, #1
 802a28c:	d0ca      	beq.n	802a224 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802a28e:	f9b4 7000 	ldrsh.w	r7, [r4]
 802a292:	1abb      	subs	r3, r7, r2
 802a294:	2b00      	cmp	r3, #0
 802a296:	dd31      	ble.n	802a2fc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802a298:	2a00      	cmp	r2, #0
 802a29a:	dabd      	bge.n	802a218 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802a29c:	2f00      	cmp	r7, #0
 802a29e:	dd2d      	ble.n	802a2fc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802a2a0:	2200      	movs	r2, #0
 802a2a2:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802a2a6:	19d1      	adds	r1, r2, r7
 802a2a8:	4299      	cmp	r1, r3
 802a2aa:	db02      	blt.n	802a2b2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 802a2ac:	1a9f      	subs	r7, r3, r2
 802a2ae:	2f00      	cmp	r7, #0
 802a2b0:	dd24      	ble.n	802a2fc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802a2b2:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802a2b6:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802a2ba:	f7ff ff3b 	bl	802a134 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802a2be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a2c0:	fb10 f003 	smulbb	r0, r0, r3
 802a2c4:	b280      	uxth	r0, r0
 802a2c6:	1c41      	adds	r1, r0, #1
 802a2c8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802a2cc:	1209      	asrs	r1, r1, #8
 802a2ce:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802a2d2:	d013      	beq.n	802a2fc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802a2d4:	9808      	ldr	r0, [sp, #32]
 802a2d6:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802a2d8:	b292      	uxth	r2, r2
 802a2da:	b2c9      	uxtb	r1, r1
 802a2dc:	4413      	add	r3, r2
 802a2de:	9102      	str	r1, [sp, #8]
 802a2e0:	4402      	add	r2, r0
 802a2e2:	b23f      	sxth	r7, r7
 802a2e4:	f8da 0000 	ldr.w	r0, [sl]
 802a2e8:	fa0f f18b 	sxth.w	r1, fp
 802a2ec:	9100      	str	r1, [sp, #0]
 802a2ee:	9701      	str	r7, [sp, #4]
 802a2f0:	6947      	ldr	r7, [r0, #20]
 802a2f2:	b21b      	sxth	r3, r3
 802a2f4:	b212      	sxth	r2, r2
 802a2f6:	9905      	ldr	r1, [sp, #20]
 802a2f8:	4650      	mov	r0, sl
 802a2fa:	47b8      	blx	r7
 802a2fc:	464b      	mov	r3, r9
 802a2fe:	e75e      	b.n	802a1be <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802a300:	2f00      	cmp	r7, #0
 802a302:	da96      	bge.n	802a232 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802a304:	e78e      	b.n	802a224 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802a306:	2900      	cmp	r1, #0
 802a308:	d0f8      	beq.n	802a2fc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802a30a:	e790      	b.n	802a22e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0802a30c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 802a30c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802a310:	2500      	movs	r5, #0
 802a312:	461e      	mov	r6, r3
 802a314:	4b35      	ldr	r3, [pc, #212]	@ (802a3ec <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 802a316:	4604      	mov	r4, r0
 802a318:	e9c0 3100 	strd	r3, r1, [r0]
 802a31c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 802a320:	f100 0814 	add.w	r8, r0, #20
 802a324:	8103      	strh	r3, [r0, #8]
 802a326:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802a32a:	8185      	strh	r5, [r0, #12]
 802a32c:	7283      	strb	r3, [r0, #10]
 802a32e:	81c5      	strh	r5, [r0, #14]
 802a330:	8205      	strh	r5, [r0, #16]
 802a332:	8245      	strh	r5, [r0, #18]
 802a334:	4640      	mov	r0, r8
 802a336:	4617      	mov	r7, r2
 802a338:	f7ec fbd8 	bl	8016aec <_ZN8touchgfx7OutlineC1Ev>
 802a33c:	466b      	mov	r3, sp
 802a33e:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 802a342:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 802a346:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 802a34a:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 802a34e:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 802a352:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 802a356:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 802a35a:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 802a35e:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 802a362:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 802a366:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 802a36a:	6830      	ldr	r0, [r6, #0]
 802a36c:	6871      	ldr	r1, [r6, #4]
 802a36e:	8872      	ldrh	r2, [r6, #2]
 802a370:	c303      	stmia	r3!, {r0, r1}
 802a372:	887b      	ldrh	r3, [r7, #2]
 802a374:	8835      	ldrh	r5, [r6, #0]
 802a376:	4413      	add	r3, r2
 802a378:	883a      	ldrh	r2, [r7, #0]
 802a37a:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 802a37e:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802a382:	442a      	add	r2, r5
 802a384:	81a2      	strh	r2, [r4, #12]
 802a386:	81e3      	strh	r3, [r4, #14]
 802a388:	8220      	strh	r0, [r4, #16]
 802a38a:	8261      	strh	r1, [r4, #18]
 802a38c:	4668      	mov	r0, sp
 802a38e:	4639      	mov	r1, r7
 802a390:	f7ee f8ea 	bl	8018568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802a394:	f104 000c 	add.w	r0, r4, #12
 802a398:	f7ee f8be 	bl	8018518 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802a39c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802a3a0:	f8bd 2000 	ldrh.w	r2, [sp]
 802a3a4:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 802a3a8:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 802a3ac:	4640      	mov	r0, r8
 802a3ae:	f7ec fb81 	bl	8016ab4 <_ZN8touchgfx7Outline5resetEv>
 802a3b2:	4620      	mov	r0, r4
 802a3b4:	f9bd 3000 	ldrsh.w	r3, [sp]
 802a3b8:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 802a3bc:	015b      	lsls	r3, r3, #5
 802a3be:	64e3      	str	r3, [r4, #76]	@ 0x4c
 802a3c0:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802a3c4:	015b      	lsls	r3, r3, #5
 802a3c6:	6523      	str	r3, [r4, #80]	@ 0x50
 802a3c8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802a3cc:	015b      	lsls	r3, r3, #5
 802a3ce:	6563      	str	r3, [r4, #84]	@ 0x54
 802a3d0:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802a3d4:	015b      	lsls	r3, r3, #5
 802a3d6:	65a3      	str	r3, [r4, #88]	@ 0x58
 802a3d8:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 802a3dc:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 802a3e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 802a3e4:	b002      	add	sp, #8
 802a3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a3ea:	bf00      	nop
 802a3ec:	0802eb54 	.word	0x0802eb54

0802a3f0 <_ZN8touchgfx6Canvas5closeEv>:
 802a3f0:	b538      	push	{r3, r4, r5, lr}
 802a3f2:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802a3f6:	4604      	mov	r4, r0
 802a3f8:	b193      	cbz	r3, 802a420 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802a3fa:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 802a3fe:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 802a402:	4213      	tst	r3, r2
 802a404:	d10c      	bne.n	802a420 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802a406:	f100 0514 	add.w	r5, r0, #20
 802a40a:	b123      	cbz	r3, 802a416 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802a40c:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 802a410:	4628      	mov	r0, r5
 802a412:	f7ff fea3 	bl	802a15c <_ZN8touchgfx10Rasterizer6lineToEii>
 802a416:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 802a41a:	4628      	mov	r0, r5
 802a41c:	f7ff fe9e 	bl	802a15c <_ZN8touchgfx10Rasterizer6lineToEii>
 802a420:	2300      	movs	r3, #0
 802a422:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802a426:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 802a42a:	4298      	cmp	r0, r3
 802a42c:	bf34      	ite	cc
 802a42e:	2000      	movcc	r0, #0
 802a430:	2001      	movcs	r0, #1
 802a432:	bd38      	pop	{r3, r4, r5, pc}

0802a434 <_ZN8touchgfx6Canvas6renderEh>:
 802a434:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802a438:	7a85      	ldrb	r5, [r0, #10]
 802a43a:	4604      	mov	r4, r0
 802a43c:	4369      	muls	r1, r5
 802a43e:	1c4d      	adds	r5, r1, #1
 802a440:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802a444:	122d      	asrs	r5, r5, #8
 802a446:	f000 8098 	beq.w	802a57a <_ZN8touchgfx6Canvas6renderEh+0x146>
 802a44a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 802a44e:	2b00      	cmp	r3, #0
 802a450:	f000 8093 	beq.w	802a57a <_ZN8touchgfx6Canvas6renderEh+0x146>
 802a454:	f7ff ffcc 	bl	802a3f0 <_ZN8touchgfx6Canvas5closeEv>
 802a458:	4607      	mov	r7, r0
 802a45a:	2800      	cmp	r0, #0
 802a45c:	d045      	beq.n	802a4ea <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802a45e:	6860      	ldr	r0, [r4, #4]
 802a460:	4e47      	ldr	r6, [pc, #284]	@ (802a580 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802a462:	6803      	ldr	r3, [r0, #0]
 802a464:	6837      	ldr	r7, [r6, #0]
 802a466:	689b      	ldr	r3, [r3, #8]
 802a468:	4798      	blx	r3
 802a46a:	4601      	mov	r1, r0
 802a46c:	4638      	mov	r0, r7
 802a46e:	f7ea fca9 	bl	8014dc4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802a472:	4607      	mov	r7, r0
 802a474:	f7e5 fae8 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 802a478:	6803      	ldr	r3, [r0, #0]
 802a47a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a47c:	4798      	blx	r3
 802a47e:	4680      	mov	r8, r0
 802a480:	f7e5 fae2 	bl	800fa48 <_ZN8touchgfx3HAL3lcdEv>
 802a484:	6803      	ldr	r3, [r0, #0]
 802a486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802a488:	4798      	blx	r3
 802a48a:	280b      	cmp	r0, #11
 802a48c:	d85a      	bhi.n	802a544 <_ZN8touchgfx6Canvas6renderEh+0x110>
 802a48e:	e8df f000 	tbb	[pc, r0]
 802a492:	5b50      	.short	0x5b50
 802a494:	3059066b 	.word	0x3059066b
 802a498:	64646440 	.word	0x64646440
 802a49c:	6464      	.short	0x6464
 802a49e:	2208      	movs	r2, #8
 802a4a0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802a4a4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802a4a8:	fb91 f2f2 	sdiv	r2, r1, r2
 802a4ac:	fb08 2303 	mla	r3, r8, r3, r2
 802a4b0:	441f      	add	r7, r3
 802a4b2:	424b      	negs	r3, r1
 802a4b4:	f003 0307 	and.w	r3, r3, #7
 802a4b8:	f001 0107 	and.w	r1, r1, #7
 802a4bc:	bf58      	it	pl
 802a4be:	4259      	negpl	r1, r3
 802a4c0:	b2c9      	uxtb	r1, r1
 802a4c2:	b2ed      	uxtb	r5, r5
 802a4c4:	463a      	mov	r2, r7
 802a4c6:	e9cd 1500 	strd	r1, r5, [sp]
 802a4ca:	fa0f f388 	sxth.w	r3, r8
 802a4ce:	6861      	ldr	r1, [r4, #4]
 802a4d0:	f104 0014 	add.w	r0, r4, #20
 802a4d4:	f7ff fe4e 	bl	802a174 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802a4d8:	4607      	mov	r7, r0
 802a4da:	6860      	ldr	r0, [r4, #4]
 802a4dc:	6803      	ldr	r3, [r0, #0]
 802a4de:	691b      	ldr	r3, [r3, #16]
 802a4e0:	4798      	blx	r3
 802a4e2:	6830      	ldr	r0, [r6, #0]
 802a4e4:	6803      	ldr	r3, [r0, #0]
 802a4e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a4e8:	4798      	blx	r3
 802a4ea:	4638      	mov	r0, r7
 802a4ec:	b002      	add	sp, #8
 802a4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a4f2:	2204      	movs	r2, #4
 802a4f4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802a4f8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802a4fc:	fb91 f2f2 	sdiv	r2, r1, r2
 802a500:	fb08 2303 	mla	r3, r8, r3, r2
 802a504:	441f      	add	r7, r3
 802a506:	424b      	negs	r3, r1
 802a508:	f003 0303 	and.w	r3, r3, #3
 802a50c:	f001 0103 	and.w	r1, r1, #3
 802a510:	e7d4      	b.n	802a4bc <_ZN8touchgfx6Canvas6renderEh+0x88>
 802a512:	2202      	movs	r2, #2
 802a514:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802a518:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802a51c:	fb91 f2f2 	sdiv	r2, r1, r2
 802a520:	fb08 2303 	mla	r3, r8, r3, r2
 802a524:	2900      	cmp	r1, #0
 802a526:	f001 0101 	and.w	r1, r1, #1
 802a52a:	441f      	add	r7, r3
 802a52c:	bfb8      	it	lt
 802a52e:	4249      	neglt	r1, r1
 802a530:	e7c6      	b.n	802a4c0 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802a532:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802a536:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a53a:	fb08 f303 	mul.w	r3, r8, r3
 802a53e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802a542:	441f      	add	r7, r3
 802a544:	2100      	movs	r1, #0
 802a546:	e7bc      	b.n	802a4c2 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 802a548:	2103      	movs	r1, #3
 802a54a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802a54e:	fb08 f203 	mul.w	r2, r8, r3
 802a552:	89a3      	ldrh	r3, [r4, #12]
 802a554:	fb13 2301 	smlabb	r3, r3, r1, r2
 802a558:	e7f3      	b.n	802a542 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802a55a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802a55e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a562:	fb08 2303 	mla	r3, r8, r3, r2
 802a566:	e7ec      	b.n	802a542 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802a568:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802a56c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a570:	fb08 f303 	mul.w	r3, r8, r3
 802a574:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802a578:	e7e3      	b.n	802a542 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802a57a:	2701      	movs	r7, #1
 802a57c:	e7b5      	b.n	802a4ea <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802a57e:	bf00      	nop
 802a580:	2005b928 	.word	0x2005b928

0802a584 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802a584:	b510      	push	{r4, lr}
 802a586:	4b06      	ldr	r3, [pc, #24]	@ (802a5a0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 802a588:	781b      	ldrb	r3, [r3, #0]
 802a58a:	2b01      	cmp	r3, #1
 802a58c:	d107      	bne.n	802a59e <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 802a58e:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 802a592:	680b      	ldr	r3, [r1, #0]
 802a594:	6814      	ldr	r4, [r2, #0]
 802a596:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802a59a:	6013      	str	r3, [r2, #0]
 802a59c:	600c      	str	r4, [r1, #0]
 802a59e:	bd10      	pop	{r4, pc}
 802a5a0:	2005b920 	.word	0x2005b920

0802a5a4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802a5a4:	b513      	push	{r0, r1, r4, lr}
 802a5a6:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802a5aa:	4604      	mov	r4, r0
 802a5ac:	e9cd 2100 	strd	r2, r1, [sp]
 802a5b0:	b9a3      	cbnz	r3, 802a5dc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802a5b2:	466a      	mov	r2, sp
 802a5b4:	a901      	add	r1, sp, #4
 802a5b6:	4620      	mov	r0, r4
 802a5b8:	f7ff ffe4 	bl	802a584 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802a5bc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802a5be:	9901      	ldr	r1, [sp, #4]
 802a5c0:	9a00      	ldr	r2, [sp, #0]
 802a5c2:	1ac9      	subs	r1, r1, r3
 802a5c4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802a5c6:	9101      	str	r1, [sp, #4]
 802a5c8:	1ad2      	subs	r2, r2, r3
 802a5ca:	2a00      	cmp	r2, #0
 802a5cc:	9200      	str	r2, [sp, #0]
 802a5ce:	da0b      	bge.n	802a5e8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802a5d0:	2301      	movs	r3, #1
 802a5d2:	2900      	cmp	r1, #0
 802a5d4:	da0e      	bge.n	802a5f4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802a5d6:	f043 0304 	orr.w	r3, r3, #4
 802a5da:	e013      	b.n	802a604 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 802a5dc:	f7ff ff08 	bl	802a3f0 <_ZN8touchgfx6Canvas5closeEv>
 802a5e0:	2800      	cmp	r0, #0
 802a5e2:	d1e6      	bne.n	802a5b2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 802a5e4:	b002      	add	sp, #8
 802a5e6:	bd10      	pop	{r4, pc}
 802a5e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802a5ea:	429a      	cmp	r2, r3
 802a5ec:	bfac      	ite	ge
 802a5ee:	2302      	movge	r3, #2
 802a5f0:	2300      	movlt	r3, #0
 802a5f2:	e7ee      	b.n	802a5d2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802a5f4:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 802a5f6:	4281      	cmp	r1, r0
 802a5f8:	bfac      	ite	ge
 802a5fa:	2008      	movge	r0, #8
 802a5fc:	2000      	movlt	r0, #0
 802a5fe:	4318      	orrs	r0, r3
 802a600:	b2c3      	uxtb	r3, r0
 802a602:	b158      	cbz	r0, 802a61c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802a604:	2200      	movs	r2, #0
 802a606:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 802a60a:	9901      	ldr	r1, [sp, #4]
 802a60c:	9a00      	ldr	r2, [sp, #0]
 802a60e:	66e1      	str	r1, [r4, #108]	@ 0x6c
 802a610:	6722      	str	r2, [r4, #112]	@ 0x70
 802a612:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 802a616:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 802a61a:	e7e3      	b.n	802a5e4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802a61c:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802a620:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802a624:	4298      	cmp	r0, r3
 802a626:	d803      	bhi.n	802a630 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802a628:	f104 0014 	add.w	r0, r4, #20
 802a62c:	f7ec ff40 	bl	80174b0 <_ZN8touchgfx7Outline6moveToEii>
 802a630:	2301      	movs	r3, #1
 802a632:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802a636:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802a63a:	2300      	movs	r3, #0
 802a63c:	e7e5      	b.n	802a60a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802a63e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802a63e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802a640:	4604      	mov	r4, r0
 802a642:	ab02      	add	r3, sp, #8
 802a644:	f843 2d08 	str.w	r2, [r3, #-8]!
 802a648:	461a      	mov	r2, r3
 802a64a:	9101      	str	r1, [sp, #4]
 802a64c:	a901      	add	r1, sp, #4
 802a64e:	f7ff ff99 	bl	802a584 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802a652:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802a654:	9901      	ldr	r1, [sp, #4]
 802a656:	9a00      	ldr	r2, [sp, #0]
 802a658:	1ac9      	subs	r1, r1, r3
 802a65a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802a65c:	9101      	str	r1, [sp, #4]
 802a65e:	1ad2      	subs	r2, r2, r3
 802a660:	2a00      	cmp	r2, #0
 802a662:	9200      	str	r2, [sp, #0]
 802a664:	db1c      	blt.n	802a6a0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802a666:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802a668:	429a      	cmp	r2, r3
 802a66a:	bfac      	ite	ge
 802a66c:	2002      	movge	r0, #2
 802a66e:	2000      	movlt	r0, #0
 802a670:	2900      	cmp	r1, #0
 802a672:	db17      	blt.n	802a6a4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802a674:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802a676:	4299      	cmp	r1, r3
 802a678:	bfac      	ite	ge
 802a67a:	2308      	movge	r3, #8
 802a67c:	2300      	movlt	r3, #0
 802a67e:	4303      	orrs	r3, r0
 802a680:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 802a684:	b2dd      	uxtb	r5, r3
 802a686:	b978      	cbnz	r0, 802a6a8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802a688:	f104 0014 	add.w	r0, r4, #20
 802a68c:	f7ff fd66 	bl	802a15c <_ZN8touchgfx10Rasterizer6lineToEii>
 802a690:	9b01      	ldr	r3, [sp, #4]
 802a692:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 802a696:	6623      	str	r3, [r4, #96]	@ 0x60
 802a698:	9b00      	ldr	r3, [sp, #0]
 802a69a:	6663      	str	r3, [r4, #100]	@ 0x64
 802a69c:	b002      	add	sp, #8
 802a69e:	bd70      	pop	{r4, r5, r6, pc}
 802a6a0:	2001      	movs	r0, #1
 802a6a2:	e7e5      	b.n	802a670 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802a6a4:	2304      	movs	r3, #4
 802a6a6:	e7ea      	b.n	802a67e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802a6a8:	b113      	cbz	r3, 802a6b0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802a6aa:	ea10 0305 	ands.w	r3, r0, r5
 802a6ae:	d11c      	bne.n	802a6ea <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 802a6b0:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 802a6b4:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 802a6b8:	f104 0614 	add.w	r6, r4, #20
 802a6bc:	b98b      	cbnz	r3, 802a6e2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802a6be:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802a6c2:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802a6c6:	4298      	cmp	r0, r3
 802a6c8:	d802      	bhi.n	802a6d0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802a6ca:	4630      	mov	r0, r6
 802a6cc:	f7ec fef0 	bl	80174b0 <_ZN8touchgfx7Outline6moveToEii>
 802a6d0:	2301      	movs	r3, #1
 802a6d2:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802a6d6:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802a6da:	e9dd 2100 	ldrd	r2, r1, [sp]
 802a6de:	4630      	mov	r0, r6
 802a6e0:	e7d4      	b.n	802a68c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802a6e2:	4630      	mov	r0, r6
 802a6e4:	f7ff fd3a 	bl	802a15c <_ZN8touchgfx10Rasterizer6lineToEii>
 802a6e8:	e7f7      	b.n	802a6da <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802a6ea:	461d      	mov	r5, r3
 802a6ec:	e7d0      	b.n	802a690 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802a6f0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 802a6f0:	b538      	push	{r3, r4, r5, lr}
 802a6f2:	ed2d 8b10 	vpush	{d8-d15}
 802a6f6:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 802a6fa:	4605      	mov	r5, r0
 802a6fc:	eeb0 ca40 	vmov.f32	s24, s0
 802a700:	eef0 ca60 	vmov.f32	s25, s1
 802a704:	eeb0 da41 	vmov.f32	s26, s2
 802a708:	eef0 da61 	vmov.f32	s27, s3
 802a70c:	eeb0 ea42 	vmov.f32	s28, s4
 802a710:	eef0 ea62 	vmov.f32	s29, s5
 802a714:	460c      	mov	r4, r1
 802a716:	eef0 aa6b 	vmov.f32	s21, s23
 802a71a:	ed9f ba52 	vldr	s22, [pc, #328]	@ 802a864 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 802a71e:	2c08      	cmp	r4, #8
 802a720:	d86e      	bhi.n	802a800 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 802a722:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 802a726:	ee7d 7aee 	vsub.f32	s15, s27, s29
 802a72a:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 802a72e:	ee3e 7aec 	vsub.f32	s14, s29, s25
 802a732:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 802a736:	eee6 7a07 	vfma.f32	s15, s12, s14
 802a73a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802a73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a742:	ee3c fa0d 	vadd.f32	s30, s24, s26
 802a746:	bf48      	it	mi
 802a748:	eef1 7a67 	vnegmi.f32	s15, s15
 802a74c:	ee7c faad 	vadd.f32	s31, s25, s27
 802a750:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 802a754:	ee3d aaae 	vadd.f32	s20, s27, s29
 802a758:	ee2f fa2b 	vmul.f32	s30, s30, s23
 802a75c:	ee6f faab 	vmul.f32	s31, s31, s23
 802a760:	ee69 9aab 	vmul.f32	s19, s19, s23
 802a764:	ee2a aa2b 	vmul.f32	s20, s20, s23
 802a768:	eef4 7acb 	vcmpe.f32	s15, s22
 802a76c:	ee7f 8a29 	vadd.f32	s17, s30, s19
 802a770:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 802a774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a778:	ee68 8aab 	vmul.f32	s17, s17, s23
 802a77c:	ee29 9a2b 	vmul.f32	s18, s18, s23
 802a780:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 802a784:	dd3f      	ble.n	802a806 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 802a786:	ee27 7a07 	vmul.f32	s14, s14, s14
 802a78a:	eea6 7aa6 	vfma.f32	s14, s13, s13
 802a78e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802a792:	ee27 7a06 	vmul.f32	s14, s14, s12
 802a796:	eef4 7ac7 	vcmpe.f32	s15, s14
 802a79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a79e:	d847      	bhi.n	802a830 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802a7a0:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 802a7a4:	ee3e 0aed 	vsub.f32	s0, s29, s27
 802a7a8:	f000 fa37 	bl	802ac1a <atan2f>
 802a7ac:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 802a7b0:	eeb0 8a40 	vmov.f32	s16, s0
 802a7b4:	ee3d 0aec 	vsub.f32	s0, s27, s25
 802a7b8:	f000 fa2f 	bl	802ac1a <atan2f>
 802a7bc:	ee38 0a40 	vsub.f32	s0, s16, s0
 802a7c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802a7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a7c8:	eddf 7a27 	vldr	s15, [pc, #156]	@ 802a868 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 802a7cc:	bf48      	it	mi
 802a7ce:	eeb1 0a40 	vnegmi.f32	s0, s0
 802a7d2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802a7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a7da:	bfa4      	itt	ge
 802a7dc:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 802a86c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 802a7e0:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 802a7e4:	eddf 7a22 	vldr	s15, [pc, #136]	@ 802a870 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 802a7e8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802a7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a7f0:	d51e      	bpl.n	802a830 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802a7f2:	eef0 0a49 	vmov.f32	s1, s18
 802a7f6:	eeb0 0a68 	vmov.f32	s0, s17
 802a7fa:	4628      	mov	r0, r5
 802a7fc:	f7eb fcce 	bl	801619c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802a800:	ecbd 8b10 	vpop	{d8-d15}
 802a804:	bd38      	pop	{r3, r4, r5, pc}
 802a806:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 802a80a:	eeb0 7a68 	vmov.f32	s14, s17
 802a80e:	eef0 6a49 	vmov.f32	s13, s18
 802a812:	eea7 7aea 	vfms.f32	s14, s15, s21
 802a816:	ee7c 7aae 	vadd.f32	s15, s25, s29
 802a81a:	eee7 6aea 	vfms.f32	s13, s15, s21
 802a81e:	ee66 7aa6 	vmul.f32	s15, s13, s13
 802a822:	eee7 7a07 	vfma.f32	s15, s14, s14
 802a826:	eef4 7ac6 	vcmpe.f32	s15, s12
 802a82a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a82e:	d9e0      	bls.n	802a7f2 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 802a830:	3401      	adds	r4, #1
 802a832:	eef0 0a6c 	vmov.f32	s1, s25
 802a836:	eeb0 0a4c 	vmov.f32	s0, s24
 802a83a:	4621      	mov	r1, r4
 802a83c:	eef0 2a49 	vmov.f32	s5, s18
 802a840:	eeb0 2a68 	vmov.f32	s4, s17
 802a844:	eef0 1a6f 	vmov.f32	s3, s31
 802a848:	eeb0 1a4f 	vmov.f32	s2, s30
 802a84c:	4628      	mov	r0, r5
 802a84e:	f7ff ff4f 	bl	802a6f0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 802a852:	eef0 da4a 	vmov.f32	s27, s20
 802a856:	eeb0 da69 	vmov.f32	s26, s19
 802a85a:	eef0 ca49 	vmov.f32	s25, s18
 802a85e:	eeb0 ca68 	vmov.f32	s24, s17
 802a862:	e75c      	b.n	802a71e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 802a864:	2edbe6ff 	.word	0x2edbe6ff
 802a868:	40490fdb 	.word	0x40490fdb
 802a86c:	40c90fdb 	.word	0x40c90fdb
 802a870:	3dcccccd 	.word	0x3dcccccd

0802a874 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 802a874:	b530      	push	{r4, r5, lr}
 802a876:	ed2d 8b10 	vpush	{d8-d15}
 802a87a:	4604      	mov	r4, r0
 802a87c:	eef0 8a40 	vmov.f32	s17, s0
 802a880:	eef0 9a60 	vmov.f32	s19, s1
 802a884:	eef0 fa41 	vmov.f32	s31, s2
 802a888:	eeb0 fa61 	vmov.f32	s30, s3
 802a88c:	eef0 ba42 	vmov.f32	s23, s4
 802a890:	eeb0 ca62 	vmov.f32	s24, s5
 802a894:	eef0 aa43 	vmov.f32	s21, s6
 802a898:	eeb0 ba63 	vmov.f32	s22, s7
 802a89c:	460d      	mov	r5, r1
 802a89e:	b085      	sub	sp, #20
 802a8a0:	2d08      	cmp	r5, #8
 802a8a2:	f200 8113 	bhi.w	802aacc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 802a8a6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802a8aa:	ee38 daaf 	vadd.f32	s26, s17, s31
 802a8ae:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 802a8b2:	ee7f 6aab 	vadd.f32	s13, s31, s23
 802a8b6:	ee26 6a27 	vmul.f32	s12, s12, s15
 802a8ba:	ee2d da27 	vmul.f32	s26, s26, s15
 802a8be:	ed8d 6a01 	vstr	s12, [sp, #4]
 802a8c2:	ee7c ca0b 	vadd.f32	s25, s24, s22
 802a8c6:	eeb0 ea4d 	vmov.f32	s28, s26
 802a8ca:	eea6 6aa7 	vfma.f32	s12, s13, s15
 802a8ce:	eea6 eaa7 	vfma.f32	s28, s13, s15
 802a8d2:	ee79 da8f 	vadd.f32	s27, s19, s30
 802a8d6:	ee66 6a27 	vmul.f32	s13, s12, s15
 802a8da:	ee6c caa7 	vmul.f32	s25, s25, s15
 802a8de:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 802a8e2:	edcd 6a03 	vstr	s13, [sp, #12]
 802a8e6:	ee6d daa7 	vmul.f32	s27, s27, s15
 802a8ea:	eef0 6a6c 	vmov.f32	s13, s25
 802a8ee:	eef0 ea6d 	vmov.f32	s29, s27
 802a8f2:	eee7 6a27 	vfma.f32	s13, s14, s15
 802a8f6:	eee7 ea27 	vfma.f32	s29, s14, s15
 802a8fa:	ee26 7aa7 	vmul.f32	s14, s13, s15
 802a8fe:	ee2e ea27 	vmul.f32	s28, s28, s15
 802a902:	ed8d 7a02 	vstr	s14, [sp, #8]
 802a906:	ed9d 7a03 	vldr	s14, [sp, #12]
 802a90a:	ee6e eaa7 	vmul.f32	s29, s29, s15
 802a90e:	ee3e 9a07 	vadd.f32	s18, s28, s14
 802a912:	ed9d 7a02 	vldr	s14, [sp, #8]
 802a916:	ee3e aa87 	vadd.f32	s20, s29, s14
 802a91a:	ee29 9a27 	vmul.f32	s18, s18, s15
 802a91e:	ee2a aa27 	vmul.f32	s20, s20, s15
 802a922:	eef0 6a67 	vmov.f32	s13, s15
 802a926:	2d00      	cmp	r5, #0
 802a928:	f000 810b 	beq.w	802ab42 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802a92c:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 802a930:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 802a934:	ee7b 7a69 	vsub.f32	s15, s22, s19
 802a938:	ee3f 6aea 	vsub.f32	s12, s31, s21
 802a93c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 802a940:	eea6 7a27 	vfma.f32	s14, s12, s15
 802a944:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 802a948:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802a94c:	ee3b 5aea 	vsub.f32	s10, s23, s21
 802a950:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 802a954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a958:	eea5 6a27 	vfma.f32	s12, s10, s15
 802a95c:	bf48      	it	mi
 802a95e:	eeb1 7a47 	vnegmi.f32	s14, s14
 802a962:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 802a966:	eddf 4a88 	vldr	s9, [pc, #544]	@ 802ab88 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 802a96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a96e:	eeb4 7ae4 	vcmpe.f32	s14, s9
 802a972:	bf48      	it	mi
 802a974:	eeb1 6a46 	vnegmi.f32	s12, s12
 802a978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a97c:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 802a980:	f340 80a8 	ble.w	802aad4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 802a984:	eeb4 6ae4 	vcmpe.f32	s12, s9
 802a988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a98c:	dd5a      	ble.n	802aa44 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 802a98e:	ee65 5aa5 	vmul.f32	s11, s11, s11
 802a992:	ee37 7a06 	vadd.f32	s14, s14, s12
 802a996:	eee7 5aa7 	vfma.f32	s11, s15, s15
 802a99a:	ee27 7a07 	vmul.f32	s14, s14, s14
 802a99e:	ee65 7a85 	vmul.f32	s15, s11, s10
 802a9a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802a9a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a9aa:	f200 80ca 	bhi.w	802ab42 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802a9ae:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802a9b2:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802a9b6:	f000 f930 	bl	802ac1a <atan2f>
 802a9ba:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802a9be:	eeb0 8a40 	vmov.f32	s16, s0
 802a9c2:	ee3f 0a69 	vsub.f32	s0, s30, s19
 802a9c6:	f000 f928 	bl	802ac1a <atan2f>
 802a9ca:	ee38 fa40 	vsub.f32	s30, s16, s0
 802a9ce:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 802a9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a9d6:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802a9da:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 802a9de:	bf48      	it	mi
 802a9e0:	eeb1 fa4f 	vnegmi.f32	s30, s30
 802a9e4:	f000 f919 	bl	802ac1a <atan2f>
 802a9e8:	ee30 0a48 	vsub.f32	s0, s0, s16
 802a9ec:	eddf 7a67 	vldr	s15, [pc, #412]	@ 802ab8c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802a9f0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802a9f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a9f8:	eeb4 fae7 	vcmpe.f32	s30, s15
 802a9fc:	bf48      	it	mi
 802a9fe:	eeb1 0a40 	vnegmi.f32	s0, s0
 802aa02:	eddf 7a62 	vldr	s15, [pc, #392]	@ 802ab8c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802aa06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802aa0a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802aa0e:	bfa4      	itt	ge
 802aa10:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 802ab90 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802aa14:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 802aa18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802aa1c:	bfa4      	itt	ge
 802aa1e:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 802ab90 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802aa22:	ee37 0a40 	vsubge.f32	s0, s14, s0
 802aa26:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 802ab94 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802aa2a:	ee3f 0a00 	vadd.f32	s0, s30, s0
 802aa2e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802aa32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802aa36:	f140 8084 	bpl.w	802ab42 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802aa3a:	eef0 0a4a 	vmov.f32	s1, s20
 802aa3e:	eeb0 0a49 	vmov.f32	s0, s18
 802aa42:	e040      	b.n	802aac6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 802aa44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802aa48:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802aa4c:	ee27 7a07 	vmul.f32	s14, s14, s14
 802aa50:	ee67 7a85 	vmul.f32	s15, s15, s10
 802aa54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802aa58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802aa5c:	d871      	bhi.n	802ab42 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802aa5e:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802aa62:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802aa66:	f000 f8d8 	bl	802ac1a <atan2f>
 802aa6a:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802aa6e:	eeb0 8a40 	vmov.f32	s16, s0
 802aa72:	ee3f 0a69 	vsub.f32	s0, s30, s19
 802aa76:	f000 f8d0 	bl	802ac1a <atan2f>
 802aa7a:	ee38 0a40 	vsub.f32	s0, s16, s0
 802aa7e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802aa82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802aa86:	eddf 7a41 	vldr	s15, [pc, #260]	@ 802ab8c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802aa8a:	bf48      	it	mi
 802aa8c:	eeb1 0a40 	vnegmi.f32	s0, s0
 802aa90:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802aa94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802aa98:	bfa4      	itt	ge
 802aa9a:	eddf 7a3d 	vldrge	s15, [pc, #244]	@ 802ab90 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802aa9e:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 802aaa2:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 802ab94 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802aaa6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802aaaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802aaae:	d548      	bpl.n	802ab42 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802aab0:	eef0 0a4f 	vmov.f32	s1, s30
 802aab4:	eeb0 0a6f 	vmov.f32	s0, s31
 802aab8:	4620      	mov	r0, r4
 802aaba:	f7eb fb6f 	bl	801619c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802aabe:	eef0 0a4c 	vmov.f32	s1, s24
 802aac2:	eeb0 0a6b 	vmov.f32	s0, s23
 802aac6:	4620      	mov	r0, r4
 802aac8:	f7eb fb68 	bl	801619c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802aacc:	b005      	add	sp, #20
 802aace:	ecbd 8b10 	vpop	{d8-d15}
 802aad2:	bd30      	pop	{r4, r5, pc}
 802aad4:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 802ab88 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 802aad8:	eeb4 6ac7 	vcmpe.f32	s12, s14
 802aadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802aae0:	dd19      	ble.n	802ab16 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 802aae2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802aae6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802aaea:	ee26 7a06 	vmul.f32	s14, s12, s12
 802aaee:	ee67 7a85 	vmul.f32	s15, s15, s10
 802aaf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802aaf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802aafa:	d822      	bhi.n	802ab42 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802aafc:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802ab00:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 802ab04:	f000 f889 	bl	802ac1a <atan2f>
 802ab08:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802ab0c:	eeb0 8a40 	vmov.f32	s16, s0
 802ab10:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802ab14:	e7af      	b.n	802aa76 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 802ab16:	ee78 7aaa 	vadd.f32	s15, s17, s21
 802ab1a:	eeb0 7a49 	vmov.f32	s14, s18
 802ab1e:	eeb0 6a4a 	vmov.f32	s12, s20
 802ab22:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802ab26:	ee79 7a8b 	vadd.f32	s15, s19, s22
 802ab2a:	eea7 6ae6 	vfms.f32	s12, s15, s13
 802ab2e:	ee66 7a06 	vmul.f32	s15, s12, s12
 802ab32:	eee7 7a07 	vfma.f32	s15, s14, s14
 802ab36:	eef4 7ac5 	vcmpe.f32	s15, s10
 802ab3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ab3e:	f67f af7c 	bls.w	802aa3a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 802ab42:	3501      	adds	r5, #1
 802ab44:	eef0 0a69 	vmov.f32	s1, s19
 802ab48:	eeb0 0a68 	vmov.f32	s0, s17
 802ab4c:	4629      	mov	r1, r5
 802ab4e:	eef0 3a4a 	vmov.f32	s7, s20
 802ab52:	eeb0 3a49 	vmov.f32	s6, s18
 802ab56:	eef0 2a6e 	vmov.f32	s5, s29
 802ab5a:	eeb0 2a4e 	vmov.f32	s4, s28
 802ab5e:	eef0 1a6d 	vmov.f32	s3, s27
 802ab62:	eeb0 1a4d 	vmov.f32	s2, s26
 802ab66:	4620      	mov	r0, r4
 802ab68:	f7ff fe84 	bl	802a874 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 802ab6c:	eeb0 ca6c 	vmov.f32	s24, s25
 802ab70:	eddd ba01 	vldr	s23, [sp, #4]
 802ab74:	ed9d fa02 	vldr	s30, [sp, #8]
 802ab78:	eddd fa03 	vldr	s31, [sp, #12]
 802ab7c:	eef0 9a4a 	vmov.f32	s19, s20
 802ab80:	eef0 8a49 	vmov.f32	s17, s18
 802ab84:	e68c      	b.n	802a8a0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 802ab86:	bf00      	nop
 802ab88:	2edbe6ff 	.word	0x2edbe6ff
 802ab8c:	40490fdb 	.word	0x40490fdb
 802ab90:	40c90fdb 	.word	0x40c90fdb
 802ab94:	3dcccccd 	.word	0x3dcccccd

0802ab98 <_ZN8touchgfx6CanvasD1Ev>:
 802ab98:	b510      	push	{r4, lr}
 802ab9a:	4604      	mov	r4, r0
 802ab9c:	4b03      	ldr	r3, [pc, #12]	@ (802abac <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802ab9e:	f840 3b14 	str.w	r3, [r0], #20
 802aba2:	f7eb ff7f 	bl	8016aa4 <_ZN8touchgfx7OutlineD1Ev>
 802aba6:	4620      	mov	r0, r4
 802aba8:	bd10      	pop	{r4, pc}
 802abaa:	bf00      	nop
 802abac:	0802eb54 	.word	0x0802eb54

0802abb0 <_ZN8touchgfx6CanvasD0Ev>:
 802abb0:	b510      	push	{r4, lr}
 802abb2:	4604      	mov	r4, r0
 802abb4:	f7ff fff0 	bl	802ab98 <_ZN8touchgfx6CanvasD1Ev>
 802abb8:	4620      	mov	r0, r4
 802abba:	2174      	movs	r1, #116	@ 0x74
 802abbc:	f000 f807 	bl	802abce <_ZdlPvj>
 802abc0:	4620      	mov	r0, r4
 802abc2:	bd10      	pop	{r4, pc}

0802abc4 <__aeabi_atexit>:
 802abc4:	460b      	mov	r3, r1
 802abc6:	4601      	mov	r1, r0
 802abc8:	4618      	mov	r0, r3
 802abca:	f000 bfd7 	b.w	802bb7c <__cxa_atexit>

0802abce <_ZdlPvj>:
 802abce:	f000 b812 	b.w	802abf6 <_ZdlPv>

0802abd2 <__cxa_guard_acquire>:
 802abd2:	6802      	ldr	r2, [r0, #0]
 802abd4:	4603      	mov	r3, r0
 802abd6:	07d2      	lsls	r2, r2, #31
 802abd8:	d405      	bmi.n	802abe6 <__cxa_guard_acquire+0x14>
 802abda:	7842      	ldrb	r2, [r0, #1]
 802abdc:	b102      	cbz	r2, 802abe0 <__cxa_guard_acquire+0xe>
 802abde:	deff      	udf	#255	@ 0xff
 802abe0:	2001      	movs	r0, #1
 802abe2:	7058      	strb	r0, [r3, #1]
 802abe4:	4770      	bx	lr
 802abe6:	2000      	movs	r0, #0
 802abe8:	4770      	bx	lr

0802abea <__cxa_guard_release>:
 802abea:	2301      	movs	r3, #1
 802abec:	6003      	str	r3, [r0, #0]
 802abee:	4770      	bx	lr

0802abf0 <__cxa_pure_virtual>:
 802abf0:	b508      	push	{r3, lr}
 802abf2:	f000 f80d 	bl	802ac10 <_ZSt9terminatev>

0802abf6 <_ZdlPv>:
 802abf6:	f000 bf0b 	b.w	802ba10 <free>

0802abfa <_ZN10__cxxabiv111__terminateEPFvvE>:
 802abfa:	b508      	push	{r3, lr}
 802abfc:	4780      	blx	r0
 802abfe:	f000 fed4 	bl	802b9aa <abort>
	...

0802ac04 <_ZSt13get_terminatev>:
 802ac04:	4b01      	ldr	r3, [pc, #4]	@ (802ac0c <_ZSt13get_terminatev+0x8>)
 802ac06:	e8d3 0faf 	lda	r0, [r3]
 802ac0a:	4770      	bx	lr
 802ac0c:	20000098 	.word	0x20000098

0802ac10 <_ZSt9terminatev>:
 802ac10:	b508      	push	{r3, lr}
 802ac12:	f7ff fff7 	bl	802ac04 <_ZSt13get_terminatev>
 802ac16:	f7ff fff0 	bl	802abfa <_ZN10__cxxabiv111__terminateEPFvvE>

0802ac1a <atan2f>:
 802ac1a:	f000 b94d 	b.w	802aeb8 <__ieee754_atan2f>
	...

0802ac20 <sqrtf>:
 802ac20:	b508      	push	{r3, lr}
 802ac22:	ed2d 8b02 	vpush	{d8}
 802ac26:	eeb0 8a40 	vmov.f32	s16, s0
 802ac2a:	f000 f8a1 	bl	802ad70 <__ieee754_sqrtf>
 802ac2e:	eeb4 8a48 	vcmp.f32	s16, s16
 802ac32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ac36:	d60c      	bvs.n	802ac52 <sqrtf+0x32>
 802ac38:	eddf 8a07 	vldr	s17, [pc, #28]	@ 802ac58 <sqrtf+0x38>
 802ac3c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802ac40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ac44:	d505      	bpl.n	802ac52 <sqrtf+0x32>
 802ac46:	f001 fa65 	bl	802c114 <__errno>
 802ac4a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802ac4e:	2321      	movs	r3, #33	@ 0x21
 802ac50:	6003      	str	r3, [r0, #0]
 802ac52:	ecbd 8b02 	vpop	{d8}
 802ac56:	bd08      	pop	{r3, pc}
 802ac58:	00000000 	.word	0x00000000

0802ac5c <cosf>:
 802ac5c:	ee10 3a10 	vmov	r3, s0
 802ac60:	b507      	push	{r0, r1, r2, lr}
 802ac62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802ac66:	4a1d      	ldr	r2, [pc, #116]	@ (802acdc <cosf+0x80>)
 802ac68:	4293      	cmp	r3, r2
 802ac6a:	d806      	bhi.n	802ac7a <cosf+0x1e>
 802ac6c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 802ace0 <cosf+0x84>
 802ac70:	b003      	add	sp, #12
 802ac72:	f85d eb04 	ldr.w	lr, [sp], #4
 802ac76:	f000 b87f 	b.w	802ad78 <__kernel_cosf>
 802ac7a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802ac7e:	d304      	bcc.n	802ac8a <cosf+0x2e>
 802ac80:	ee30 0a40 	vsub.f32	s0, s0, s0
 802ac84:	b003      	add	sp, #12
 802ac86:	f85d fb04 	ldr.w	pc, [sp], #4
 802ac8a:	4668      	mov	r0, sp
 802ac8c:	f000 f9b2 	bl	802aff4 <__ieee754_rem_pio2f>
 802ac90:	f000 0003 	and.w	r0, r0, #3
 802ac94:	2801      	cmp	r0, #1
 802ac96:	d009      	beq.n	802acac <cosf+0x50>
 802ac98:	2802      	cmp	r0, #2
 802ac9a:	d010      	beq.n	802acbe <cosf+0x62>
 802ac9c:	b9b0      	cbnz	r0, 802accc <cosf+0x70>
 802ac9e:	eddd 0a01 	vldr	s1, [sp, #4]
 802aca2:	ed9d 0a00 	vldr	s0, [sp]
 802aca6:	f000 f867 	bl	802ad78 <__kernel_cosf>
 802acaa:	e7eb      	b.n	802ac84 <cosf+0x28>
 802acac:	eddd 0a01 	vldr	s1, [sp, #4]
 802acb0:	ed9d 0a00 	vldr	s0, [sp]
 802acb4:	f000 f8b8 	bl	802ae28 <__kernel_sinf>
 802acb8:	eeb1 0a40 	vneg.f32	s0, s0
 802acbc:	e7e2      	b.n	802ac84 <cosf+0x28>
 802acbe:	eddd 0a01 	vldr	s1, [sp, #4]
 802acc2:	ed9d 0a00 	vldr	s0, [sp]
 802acc6:	f000 f857 	bl	802ad78 <__kernel_cosf>
 802acca:	e7f5      	b.n	802acb8 <cosf+0x5c>
 802accc:	2001      	movs	r0, #1
 802acce:	eddd 0a01 	vldr	s1, [sp, #4]
 802acd2:	ed9d 0a00 	vldr	s0, [sp]
 802acd6:	f000 f8a7 	bl	802ae28 <__kernel_sinf>
 802acda:	e7d3      	b.n	802ac84 <cosf+0x28>
 802acdc:	3f490fd8 	.word	0x3f490fd8
 802ace0:	00000000 	.word	0x00000000

0802ace4 <sinf>:
 802ace4:	ee10 3a10 	vmov	r3, s0
 802ace8:	b507      	push	{r0, r1, r2, lr}
 802acea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802acee:	4a1e      	ldr	r2, [pc, #120]	@ (802ad68 <sinf+0x84>)
 802acf0:	4293      	cmp	r3, r2
 802acf2:	d807      	bhi.n	802ad04 <sinf+0x20>
 802acf4:	2000      	movs	r0, #0
 802acf6:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 802ad6c <sinf+0x88>
 802acfa:	b003      	add	sp, #12
 802acfc:	f85d eb04 	ldr.w	lr, [sp], #4
 802ad00:	f000 b892 	b.w	802ae28 <__kernel_sinf>
 802ad04:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802ad08:	d304      	bcc.n	802ad14 <sinf+0x30>
 802ad0a:	ee30 0a40 	vsub.f32	s0, s0, s0
 802ad0e:	b003      	add	sp, #12
 802ad10:	f85d fb04 	ldr.w	pc, [sp], #4
 802ad14:	4668      	mov	r0, sp
 802ad16:	f000 f96d 	bl	802aff4 <__ieee754_rem_pio2f>
 802ad1a:	f000 0003 	and.w	r0, r0, #3
 802ad1e:	2801      	cmp	r0, #1
 802ad20:	d00a      	beq.n	802ad38 <sinf+0x54>
 802ad22:	2802      	cmp	r0, #2
 802ad24:	d00f      	beq.n	802ad46 <sinf+0x62>
 802ad26:	b9c0      	cbnz	r0, 802ad5a <sinf+0x76>
 802ad28:	2001      	movs	r0, #1
 802ad2a:	eddd 0a01 	vldr	s1, [sp, #4]
 802ad2e:	ed9d 0a00 	vldr	s0, [sp]
 802ad32:	f000 f879 	bl	802ae28 <__kernel_sinf>
 802ad36:	e7ea      	b.n	802ad0e <sinf+0x2a>
 802ad38:	eddd 0a01 	vldr	s1, [sp, #4]
 802ad3c:	ed9d 0a00 	vldr	s0, [sp]
 802ad40:	f000 f81a 	bl	802ad78 <__kernel_cosf>
 802ad44:	e7e3      	b.n	802ad0e <sinf+0x2a>
 802ad46:	2001      	movs	r0, #1
 802ad48:	eddd 0a01 	vldr	s1, [sp, #4]
 802ad4c:	ed9d 0a00 	vldr	s0, [sp]
 802ad50:	f000 f86a 	bl	802ae28 <__kernel_sinf>
 802ad54:	eeb1 0a40 	vneg.f32	s0, s0
 802ad58:	e7d9      	b.n	802ad0e <sinf+0x2a>
 802ad5a:	eddd 0a01 	vldr	s1, [sp, #4]
 802ad5e:	ed9d 0a00 	vldr	s0, [sp]
 802ad62:	f000 f809 	bl	802ad78 <__kernel_cosf>
 802ad66:	e7f5      	b.n	802ad54 <sinf+0x70>
 802ad68:	3f490fd8 	.word	0x3f490fd8
 802ad6c:	00000000 	.word	0x00000000

0802ad70 <__ieee754_sqrtf>:
 802ad70:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802ad74:	4770      	bx	lr
	...

0802ad78 <__kernel_cosf>:
 802ad78:	ee10 3a10 	vmov	r3, s0
 802ad7c:	eef0 6a40 	vmov.f32	s13, s0
 802ad80:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802ad84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802ad88:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802ad8c:	d204      	bcs.n	802ad98 <__kernel_cosf+0x20>
 802ad8e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 802ad92:	ee17 2a90 	vmov	r2, s15
 802ad96:	b342      	cbz	r2, 802adea <__kernel_cosf+0x72>
 802ad98:	ee26 7aa6 	vmul.f32	s14, s13, s13
 802ad9c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 802ae08 <__kernel_cosf+0x90>
 802ada0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 802ae0c <__kernel_cosf+0x94>
 802ada4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 802ada8:	4a19      	ldr	r2, [pc, #100]	@ (802ae10 <__kernel_cosf+0x98>)
 802adaa:	eea7 6a27 	vfma.f32	s12, s14, s15
 802adae:	eddf 7a19 	vldr	s15, [pc, #100]	@ 802ae14 <__kernel_cosf+0x9c>
 802adb2:	4293      	cmp	r3, r2
 802adb4:	eee6 7a07 	vfma.f32	s15, s12, s14
 802adb8:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 802ae18 <__kernel_cosf+0xa0>
 802adbc:	eea7 6a87 	vfma.f32	s12, s15, s14
 802adc0:	eddf 7a16 	vldr	s15, [pc, #88]	@ 802ae1c <__kernel_cosf+0xa4>
 802adc4:	eee6 7a07 	vfma.f32	s15, s12, s14
 802adc8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 802ae20 <__kernel_cosf+0xa8>
 802adcc:	eea7 6a87 	vfma.f32	s12, s15, s14
 802add0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802add4:	ee67 7a27 	vmul.f32	s15, s14, s15
 802add8:	ee26 6a07 	vmul.f32	s12, s12, s14
 802addc:	eee7 0a06 	vfma.f32	s1, s14, s12
 802ade0:	d804      	bhi.n	802adec <__kernel_cosf+0x74>
 802ade2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802ade6:	ee30 0a67 	vsub.f32	s0, s0, s15
 802adea:	4770      	bx	lr
 802adec:	4a0d      	ldr	r2, [pc, #52]	@ (802ae24 <__kernel_cosf+0xac>)
 802adee:	4293      	cmp	r3, r2
 802adf0:	bf96      	itet	ls
 802adf2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 802adf6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 802adfa:	ee07 3a10 	vmovls	s14, r3
 802adfe:	ee30 0a47 	vsub.f32	s0, s0, s14
 802ae02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802ae06:	e7ec      	b.n	802ade2 <__kernel_cosf+0x6a>
 802ae08:	ad47d74e 	.word	0xad47d74e
 802ae0c:	310f74f6 	.word	0x310f74f6
 802ae10:	3e999999 	.word	0x3e999999
 802ae14:	b493f27c 	.word	0xb493f27c
 802ae18:	37d00d01 	.word	0x37d00d01
 802ae1c:	bab60b61 	.word	0xbab60b61
 802ae20:	3d2aaaab 	.word	0x3d2aaaab
 802ae24:	3f480000 	.word	0x3f480000

0802ae28 <__kernel_sinf>:
 802ae28:	ee10 3a10 	vmov	r3, s0
 802ae2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802ae30:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802ae34:	d204      	bcs.n	802ae40 <__kernel_sinf+0x18>
 802ae36:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802ae3a:	ee17 3a90 	vmov	r3, s15
 802ae3e:	b35b      	cbz	r3, 802ae98 <__kernel_sinf+0x70>
 802ae40:	ee20 7a00 	vmul.f32	s14, s0, s0
 802ae44:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802ae9c <__kernel_sinf+0x74>
 802ae48:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 802aea0 <__kernel_sinf+0x78>
 802ae4c:	eea7 6a27 	vfma.f32	s12, s14, s15
 802ae50:	eddf 7a14 	vldr	s15, [pc, #80]	@ 802aea4 <__kernel_sinf+0x7c>
 802ae54:	ee60 6a07 	vmul.f32	s13, s0, s14
 802ae58:	eee6 7a07 	vfma.f32	s15, s12, s14
 802ae5c:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 802aea8 <__kernel_sinf+0x80>
 802ae60:	eea7 6a87 	vfma.f32	s12, s15, s14
 802ae64:	eddf 7a11 	vldr	s15, [pc, #68]	@ 802aeac <__kernel_sinf+0x84>
 802ae68:	eee6 7a07 	vfma.f32	s15, s12, s14
 802ae6c:	b930      	cbnz	r0, 802ae7c <__kernel_sinf+0x54>
 802ae6e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 802aeb0 <__kernel_sinf+0x88>
 802ae72:	eea7 6a27 	vfma.f32	s12, s14, s15
 802ae76:	eea6 0a26 	vfma.f32	s0, s12, s13
 802ae7a:	4770      	bx	lr
 802ae7c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802ae80:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 802ae84:	eee0 7a86 	vfma.f32	s15, s1, s12
 802ae88:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802ae8c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 802aeb4 <__kernel_sinf+0x8c>
 802ae90:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802ae94:	ee30 0a60 	vsub.f32	s0, s0, s1
 802ae98:	4770      	bx	lr
 802ae9a:	bf00      	nop
 802ae9c:	2f2ec9d3 	.word	0x2f2ec9d3
 802aea0:	b2d72f34 	.word	0xb2d72f34
 802aea4:	3638ef1b 	.word	0x3638ef1b
 802aea8:	b9500d01 	.word	0xb9500d01
 802aeac:	3c088889 	.word	0x3c088889
 802aeb0:	be2aaaab 	.word	0xbe2aaaab
 802aeb4:	3e2aaaab 	.word	0x3e2aaaab

0802aeb8 <__ieee754_atan2f>:
 802aeb8:	ee10 2a90 	vmov	r2, s1
 802aebc:	eef0 7a40 	vmov.f32	s15, s0
 802aec0:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 802aec4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802aec8:	b510      	push	{r4, lr}
 802aeca:	d806      	bhi.n	802aeda <__ieee754_atan2f+0x22>
 802aecc:	ee10 0a10 	vmov	r0, s0
 802aed0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 802aed4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802aed8:	d904      	bls.n	802aee4 <__ieee754_atan2f+0x2c>
 802aeda:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802aede:	eeb0 0a67 	vmov.f32	s0, s15
 802aee2:	bd10      	pop	{r4, pc}
 802aee4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 802aee8:	d103      	bne.n	802aef2 <__ieee754_atan2f+0x3a>
 802aeea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802aeee:	f000 b9af 	b.w	802b250 <atanf>
 802aef2:	1794      	asrs	r4, r2, #30
 802aef4:	f004 0402 	and.w	r4, r4, #2
 802aef8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 802aefc:	b93b      	cbnz	r3, 802af0e <__ieee754_atan2f+0x56>
 802aefe:	2c02      	cmp	r4, #2
 802af00:	d05c      	beq.n	802afbc <__ieee754_atan2f+0x104>
 802af02:	2c03      	cmp	r4, #3
 802af04:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802afd0 <__ieee754_atan2f+0x118>
 802af08:	fe47 7a00 	vseleq.f32	s15, s14, s0
 802af0c:	e7e7      	b.n	802aede <__ieee754_atan2f+0x26>
 802af0e:	b939      	cbnz	r1, 802af20 <__ieee754_atan2f+0x68>
 802af10:	2800      	cmp	r0, #0
 802af12:	eddf 7a30 	vldr	s15, [pc, #192]	@ 802afd4 <__ieee754_atan2f+0x11c>
 802af16:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802afd8 <__ieee754_atan2f+0x120>
 802af1a:	fe67 7a27 	vselge.f32	s15, s14, s15
 802af1e:	e7de      	b.n	802aede <__ieee754_atan2f+0x26>
 802af20:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802af24:	d110      	bne.n	802af48 <__ieee754_atan2f+0x90>
 802af26:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802af2a:	f104 34ff 	add.w	r4, r4, #4294967295
 802af2e:	d107      	bne.n	802af40 <__ieee754_atan2f+0x88>
 802af30:	2c02      	cmp	r4, #2
 802af32:	d846      	bhi.n	802afc2 <__ieee754_atan2f+0x10a>
 802af34:	4b29      	ldr	r3, [pc, #164]	@ (802afdc <__ieee754_atan2f+0x124>)
 802af36:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802af3a:	edd3 7a00 	vldr	s15, [r3]
 802af3e:	e7ce      	b.n	802aede <__ieee754_atan2f+0x26>
 802af40:	2c02      	cmp	r4, #2
 802af42:	d841      	bhi.n	802afc8 <__ieee754_atan2f+0x110>
 802af44:	4b26      	ldr	r3, [pc, #152]	@ (802afe0 <__ieee754_atan2f+0x128>)
 802af46:	e7f6      	b.n	802af36 <__ieee754_atan2f+0x7e>
 802af48:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802af4c:	d0e0      	beq.n	802af10 <__ieee754_atan2f+0x58>
 802af4e:	1a5b      	subs	r3, r3, r1
 802af50:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 802af54:	ea4f 51e3 	mov.w	r1, r3, asr #23
 802af58:	da1a      	bge.n	802af90 <__ieee754_atan2f+0xd8>
 802af5a:	2a00      	cmp	r2, #0
 802af5c:	da01      	bge.n	802af62 <__ieee754_atan2f+0xaa>
 802af5e:	313c      	adds	r1, #60	@ 0x3c
 802af60:	db19      	blt.n	802af96 <__ieee754_atan2f+0xde>
 802af62:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802af66:	f000 fa47 	bl	802b3f8 <fabsf>
 802af6a:	f000 f971 	bl	802b250 <atanf>
 802af6e:	eef0 7a40 	vmov.f32	s15, s0
 802af72:	2c01      	cmp	r4, #1
 802af74:	d012      	beq.n	802af9c <__ieee754_atan2f+0xe4>
 802af76:	2c02      	cmp	r4, #2
 802af78:	d017      	beq.n	802afaa <__ieee754_atan2f+0xf2>
 802af7a:	2c00      	cmp	r4, #0
 802af7c:	d0af      	beq.n	802aede <__ieee754_atan2f+0x26>
 802af7e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 802afe4 <__ieee754_atan2f+0x12c>
 802af82:	ee77 7a87 	vadd.f32	s15, s15, s14
 802af86:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 802afe8 <__ieee754_atan2f+0x130>
 802af8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802af8e:	e7a6      	b.n	802aede <__ieee754_atan2f+0x26>
 802af90:	eddf 7a11 	vldr	s15, [pc, #68]	@ 802afd8 <__ieee754_atan2f+0x120>
 802af94:	e7ed      	b.n	802af72 <__ieee754_atan2f+0xba>
 802af96:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802afec <__ieee754_atan2f+0x134>
 802af9a:	e7ea      	b.n	802af72 <__ieee754_atan2f+0xba>
 802af9c:	ee17 3a90 	vmov	r3, s15
 802afa0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802afa4:	ee07 3a90 	vmov	s15, r3
 802afa8:	e799      	b.n	802aede <__ieee754_atan2f+0x26>
 802afaa:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 802afe4 <__ieee754_atan2f+0x12c>
 802afae:	ee77 7a87 	vadd.f32	s15, s15, s14
 802afb2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 802afe8 <__ieee754_atan2f+0x130>
 802afb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 802afba:	e790      	b.n	802aede <__ieee754_atan2f+0x26>
 802afbc:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 802afe8 <__ieee754_atan2f+0x130>
 802afc0:	e78d      	b.n	802aede <__ieee754_atan2f+0x26>
 802afc2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 802aff0 <__ieee754_atan2f+0x138>
 802afc6:	e78a      	b.n	802aede <__ieee754_atan2f+0x26>
 802afc8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 802afec <__ieee754_atan2f+0x134>
 802afcc:	e787      	b.n	802aede <__ieee754_atan2f+0x26>
 802afce:	bf00      	nop
 802afd0:	c0490fdb 	.word	0xc0490fdb
 802afd4:	bfc90fdb 	.word	0xbfc90fdb
 802afd8:	3fc90fdb 	.word	0x3fc90fdb
 802afdc:	0802eb6c 	.word	0x0802eb6c
 802afe0:	0802eb60 	.word	0x0802eb60
 802afe4:	33bbbd2e 	.word	0x33bbbd2e
 802afe8:	40490fdb 	.word	0x40490fdb
 802afec:	00000000 	.word	0x00000000
 802aff0:	3f490fdb 	.word	0x3f490fdb

0802aff4 <__ieee754_rem_pio2f>:
 802aff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 802aff6:	ee10 6a10 	vmov	r6, s0
 802affa:	4b87      	ldr	r3, [pc, #540]	@ (802b218 <__ieee754_rem_pio2f+0x224>)
 802affc:	b087      	sub	sp, #28
 802affe:	4604      	mov	r4, r0
 802b000:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 802b004:	429d      	cmp	r5, r3
 802b006:	d805      	bhi.n	802b014 <__ieee754_rem_pio2f+0x20>
 802b008:	2300      	movs	r3, #0
 802b00a:	ed80 0a00 	vstr	s0, [r0]
 802b00e:	6043      	str	r3, [r0, #4]
 802b010:	2000      	movs	r0, #0
 802b012:	e022      	b.n	802b05a <__ieee754_rem_pio2f+0x66>
 802b014:	4b81      	ldr	r3, [pc, #516]	@ (802b21c <__ieee754_rem_pio2f+0x228>)
 802b016:	429d      	cmp	r5, r3
 802b018:	d83a      	bhi.n	802b090 <__ieee754_rem_pio2f+0x9c>
 802b01a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802b01e:	2e00      	cmp	r6, #0
 802b020:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 802b220 <__ieee754_rem_pio2f+0x22c>
 802b024:	f023 030f 	bic.w	r3, r3, #15
 802b028:	4a7e      	ldr	r2, [pc, #504]	@ (802b224 <__ieee754_rem_pio2f+0x230>)
 802b02a:	dd18      	ble.n	802b05e <__ieee754_rem_pio2f+0x6a>
 802b02c:	4293      	cmp	r3, r2
 802b02e:	ee70 7a47 	vsub.f32	s15, s0, s14
 802b032:	bf09      	itett	eq
 802b034:	ed9f 7a7c 	vldreq	s14, [pc, #496]	@ 802b228 <__ieee754_rem_pio2f+0x234>
 802b038:	eddf 6a7c 	vldrne	s13, [pc, #496]	@ 802b22c <__ieee754_rem_pio2f+0x238>
 802b03c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 802b040:	eddf 6a7b 	vldreq	s13, [pc, #492]	@ 802b230 <__ieee754_rem_pio2f+0x23c>
 802b044:	ee37 7ae6 	vsub.f32	s14, s15, s13
 802b048:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802b04c:	ed80 7a00 	vstr	s14, [r0]
 802b050:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802b054:	edc0 7a01 	vstr	s15, [r0, #4]
 802b058:	2001      	movs	r0, #1
 802b05a:	b007      	add	sp, #28
 802b05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b05e:	4293      	cmp	r3, r2
 802b060:	ee70 7a07 	vadd.f32	s15, s0, s14
 802b064:	bf09      	itett	eq
 802b066:	ed9f 7a70 	vldreq	s14, [pc, #448]	@ 802b228 <__ieee754_rem_pio2f+0x234>
 802b06a:	eddf 6a70 	vldrne	s13, [pc, #448]	@ 802b22c <__ieee754_rem_pio2f+0x238>
 802b06e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 802b072:	eddf 6a6f 	vldreq	s13, [pc, #444]	@ 802b230 <__ieee754_rem_pio2f+0x23c>
 802b076:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802b07a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802b07e:	ed80 7a00 	vstr	s14, [r0]
 802b082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802b086:	edc0 7a01 	vstr	s15, [r0, #4]
 802b08a:	f04f 30ff 	mov.w	r0, #4294967295
 802b08e:	e7e4      	b.n	802b05a <__ieee754_rem_pio2f+0x66>
 802b090:	4b68      	ldr	r3, [pc, #416]	@ (802b234 <__ieee754_rem_pio2f+0x240>)
 802b092:	429d      	cmp	r5, r3
 802b094:	d872      	bhi.n	802b17c <__ieee754_rem_pio2f+0x188>
 802b096:	f000 f9af 	bl	802b3f8 <fabsf>
 802b09a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802b09e:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 802b238 <__ieee754_rem_pio2f+0x244>
 802b0a2:	eee0 7a07 	vfma.f32	s15, s0, s14
 802b0a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802b0aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802b0ae:	ee17 0a90 	vmov	r0, s15
 802b0b2:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 802b220 <__ieee754_rem_pio2f+0x22c>
 802b0b6:	281f      	cmp	r0, #31
 802b0b8:	eea7 0a67 	vfms.f32	s0, s14, s15
 802b0bc:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 802b22c <__ieee754_rem_pio2f+0x238>
 802b0c0:	eeb1 6a47 	vneg.f32	s12, s14
 802b0c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 802b0c8:	ee70 6a67 	vsub.f32	s13, s0, s15
 802b0cc:	ee16 1a90 	vmov	r1, s13
 802b0d0:	dc09      	bgt.n	802b0e6 <__ieee754_rem_pio2f+0xf2>
 802b0d2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802b0d6:	1e47      	subs	r7, r0, #1
 802b0d8:	4a58      	ldr	r2, [pc, #352]	@ (802b23c <__ieee754_rem_pio2f+0x248>)
 802b0da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 802b0de:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 802b0e2:	4293      	cmp	r3, r2
 802b0e4:	d106      	bne.n	802b0f4 <__ieee754_rem_pio2f+0x100>
 802b0e6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 802b0ea:	15eb      	asrs	r3, r5, #23
 802b0ec:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 802b0f0:	2a08      	cmp	r2, #8
 802b0f2:	dc14      	bgt.n	802b11e <__ieee754_rem_pio2f+0x12a>
 802b0f4:	6021      	str	r1, [r4, #0]
 802b0f6:	ed94 7a00 	vldr	s14, [r4]
 802b0fa:	2e00      	cmp	r6, #0
 802b0fc:	ee30 0a47 	vsub.f32	s0, s0, s14
 802b100:	ee30 0a67 	vsub.f32	s0, s0, s15
 802b104:	ed84 0a01 	vstr	s0, [r4, #4]
 802b108:	daa7      	bge.n	802b05a <__ieee754_rem_pio2f+0x66>
 802b10a:	eeb1 7a47 	vneg.f32	s14, s14
 802b10e:	eeb1 0a40 	vneg.f32	s0, s0
 802b112:	ed84 7a00 	vstr	s14, [r4]
 802b116:	ed84 0a01 	vstr	s0, [r4, #4]
 802b11a:	4240      	negs	r0, r0
 802b11c:	e79d      	b.n	802b05a <__ieee754_rem_pio2f+0x66>
 802b11e:	eef0 6a40 	vmov.f32	s13, s0
 802b122:	eddf 5a41 	vldr	s11, [pc, #260]	@ 802b228 <__ieee754_rem_pio2f+0x234>
 802b126:	eee6 6a25 	vfma.f32	s13, s12, s11
 802b12a:	ee70 7a66 	vsub.f32	s15, s0, s13
 802b12e:	eee6 7a25 	vfma.f32	s15, s12, s11
 802b132:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 802b230 <__ieee754_rem_pio2f+0x23c>
 802b136:	eed7 7a25 	vfnms.f32	s15, s14, s11
 802b13a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 802b13e:	ee15 2a90 	vmov	r2, s11
 802b142:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802b146:	1a5b      	subs	r3, r3, r1
 802b148:	2b19      	cmp	r3, #25
 802b14a:	dc04      	bgt.n	802b156 <__ieee754_rem_pio2f+0x162>
 802b14c:	eeb0 0a66 	vmov.f32	s0, s13
 802b150:	edc4 5a00 	vstr	s11, [r4]
 802b154:	e7cf      	b.n	802b0f6 <__ieee754_rem_pio2f+0x102>
 802b156:	eeb0 0a66 	vmov.f32	s0, s13
 802b15a:	eddf 5a39 	vldr	s11, [pc, #228]	@ 802b240 <__ieee754_rem_pio2f+0x24c>
 802b15e:	eea6 0a25 	vfma.f32	s0, s12, s11
 802b162:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802b166:	eddf 6a37 	vldr	s13, [pc, #220]	@ 802b244 <__ieee754_rem_pio2f+0x250>
 802b16a:	eee6 7a25 	vfma.f32	s15, s12, s11
 802b16e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802b172:	ee30 7a67 	vsub.f32	s14, s0, s15
 802b176:	ed84 7a00 	vstr	s14, [r4]
 802b17a:	e7bc      	b.n	802b0f6 <__ieee754_rem_pio2f+0x102>
 802b17c:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 802b180:	d306      	bcc.n	802b190 <__ieee754_rem_pio2f+0x19c>
 802b182:	ee70 7a40 	vsub.f32	s15, s0, s0
 802b186:	edc0 7a01 	vstr	s15, [r0, #4]
 802b18a:	edc0 7a00 	vstr	s15, [r0]
 802b18e:	e73f      	b.n	802b010 <__ieee754_rem_pio2f+0x1c>
 802b190:	15ea      	asrs	r2, r5, #23
 802b192:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 802b248 <__ieee754_rem_pio2f+0x254>
 802b196:	3a86      	subs	r2, #134	@ 0x86
 802b198:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802b19c:	ee07 3a90 	vmov	s15, r3
 802b1a0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802b1a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802b1a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802b1ac:	ed8d 7a03 	vstr	s14, [sp, #12]
 802b1b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802b1b4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802b1b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802b1bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802b1c0:	ed8d 7a04 	vstr	s14, [sp, #16]
 802b1c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802b1c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 802b1cc:	edcd 7a05 	vstr	s15, [sp, #20]
 802b1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b1d4:	d11e      	bne.n	802b214 <__ieee754_rem_pio2f+0x220>
 802b1d6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802b1da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b1de:	bf0c      	ite	eq
 802b1e0:	2301      	moveq	r3, #1
 802b1e2:	2302      	movne	r3, #2
 802b1e4:	4919      	ldr	r1, [pc, #100]	@ (802b24c <__ieee754_rem_pio2f+0x258>)
 802b1e6:	a803      	add	r0, sp, #12
 802b1e8:	9101      	str	r1, [sp, #4]
 802b1ea:	2102      	movs	r1, #2
 802b1ec:	9100      	str	r1, [sp, #0]
 802b1ee:	4621      	mov	r1, r4
 802b1f0:	f000 f90a 	bl	802b408 <__kernel_rem_pio2f>
 802b1f4:	2e00      	cmp	r6, #0
 802b1f6:	f6bf af30 	bge.w	802b05a <__ieee754_rem_pio2f+0x66>
 802b1fa:	edd4 7a00 	vldr	s15, [r4]
 802b1fe:	eef1 7a67 	vneg.f32	s15, s15
 802b202:	edc4 7a00 	vstr	s15, [r4]
 802b206:	edd4 7a01 	vldr	s15, [r4, #4]
 802b20a:	eef1 7a67 	vneg.f32	s15, s15
 802b20e:	edc4 7a01 	vstr	s15, [r4, #4]
 802b212:	e782      	b.n	802b11a <__ieee754_rem_pio2f+0x126>
 802b214:	2303      	movs	r3, #3
 802b216:	e7e5      	b.n	802b1e4 <__ieee754_rem_pio2f+0x1f0>
 802b218:	3f490fd8 	.word	0x3f490fd8
 802b21c:	4016cbe3 	.word	0x4016cbe3
 802b220:	3fc90f80 	.word	0x3fc90f80
 802b224:	3fc90fd0 	.word	0x3fc90fd0
 802b228:	37354400 	.word	0x37354400
 802b22c:	37354443 	.word	0x37354443
 802b230:	2e85a308 	.word	0x2e85a308
 802b234:	43490f80 	.word	0x43490f80
 802b238:	3f22f984 	.word	0x3f22f984
 802b23c:	0802eb78 	.word	0x0802eb78
 802b240:	2e85a300 	.word	0x2e85a300
 802b244:	248d3132 	.word	0x248d3132
 802b248:	43800000 	.word	0x43800000
 802b24c:	0802ebf8 	.word	0x0802ebf8

0802b250 <atanf>:
 802b250:	b538      	push	{r3, r4, r5, lr}
 802b252:	ee10 5a10 	vmov	r5, s0
 802b256:	eef0 7a40 	vmov.f32	s15, s0
 802b25a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 802b25e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 802b262:	d30f      	bcc.n	802b284 <atanf+0x34>
 802b264:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 802b268:	d904      	bls.n	802b274 <atanf+0x24>
 802b26a:	ee70 7a00 	vadd.f32	s15, s0, s0
 802b26e:	eeb0 0a67 	vmov.f32	s0, s15
 802b272:	bd38      	pop	{r3, r4, r5, pc}
 802b274:	2d00      	cmp	r5, #0
 802b276:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 802b3ac <atanf+0x15c>
 802b27a:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 802b3b0 <atanf+0x160>
 802b27e:	fe77 7a27 	vselgt.f32	s15, s14, s15
 802b282:	e7f4      	b.n	802b26e <atanf+0x1e>
 802b284:	4b4b      	ldr	r3, [pc, #300]	@ (802b3b4 <atanf+0x164>)
 802b286:	429c      	cmp	r4, r3
 802b288:	d810      	bhi.n	802b2ac <atanf+0x5c>
 802b28a:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 802b28e:	d20a      	bcs.n	802b2a6 <atanf+0x56>
 802b290:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 802b3b8 <atanf+0x168>
 802b294:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802b298:	ee30 7a07 	vadd.f32	s14, s0, s14
 802b29c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802b2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b2a4:	dce3      	bgt.n	802b26e <atanf+0x1e>
 802b2a6:	f04f 33ff 	mov.w	r3, #4294967295
 802b2aa:	e013      	b.n	802b2d4 <atanf+0x84>
 802b2ac:	f000 f8a4 	bl	802b3f8 <fabsf>
 802b2b0:	4b42      	ldr	r3, [pc, #264]	@ (802b3bc <atanf+0x16c>)
 802b2b2:	429c      	cmp	r4, r3
 802b2b4:	d84f      	bhi.n	802b356 <atanf+0x106>
 802b2b6:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 802b2ba:	429c      	cmp	r4, r3
 802b2bc:	d841      	bhi.n	802b342 <atanf+0xf2>
 802b2be:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 802b2c2:	2300      	movs	r3, #0
 802b2c4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802b2c8:	eea0 7a27 	vfma.f32	s14, s0, s15
 802b2cc:	ee30 0a27 	vadd.f32	s0, s0, s15
 802b2d0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802b2d4:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 802b3c0 <atanf+0x170>
 802b2d8:	1c5a      	adds	r2, r3, #1
 802b2da:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 802b3c4 <atanf+0x174>
 802b2de:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 802b3c8 <atanf+0x178>
 802b2e2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802b2e6:	ee66 6a06 	vmul.f32	s13, s12, s12
 802b2ea:	eee6 5a87 	vfma.f32	s11, s13, s14
 802b2ee:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 802b3cc <atanf+0x17c>
 802b2f2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802b2f6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 802b3d0 <atanf+0x180>
 802b2fa:	eee7 5a26 	vfma.f32	s11, s14, s13
 802b2fe:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 802b3d4 <atanf+0x184>
 802b302:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802b306:	eddf 5a34 	vldr	s11, [pc, #208]	@ 802b3d8 <atanf+0x188>
 802b30a:	eee7 5a26 	vfma.f32	s11, s14, s13
 802b30e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 802b3dc <atanf+0x18c>
 802b312:	eea6 5a87 	vfma.f32	s10, s13, s14
 802b316:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802b3e0 <atanf+0x190>
 802b31a:	eea5 7a26 	vfma.f32	s14, s10, s13
 802b31e:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 802b3e4 <atanf+0x194>
 802b322:	eea7 5a26 	vfma.f32	s10, s14, s13
 802b326:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802b3e8 <atanf+0x198>
 802b32a:	eea5 7a26 	vfma.f32	s14, s10, s13
 802b32e:	ee27 7a26 	vmul.f32	s14, s14, s13
 802b332:	eea5 7a86 	vfma.f32	s14, s11, s12
 802b336:	ee27 7a87 	vmul.f32	s14, s15, s14
 802b33a:	d121      	bne.n	802b380 <atanf+0x130>
 802b33c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802b340:	e795      	b.n	802b26e <atanf+0x1e>
 802b342:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802b346:	2301      	movs	r3, #1
 802b348:	ee30 7a67 	vsub.f32	s14, s0, s15
 802b34c:	ee30 0a27 	vadd.f32	s0, s0, s15
 802b350:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802b354:	e7be      	b.n	802b2d4 <atanf+0x84>
 802b356:	4b25      	ldr	r3, [pc, #148]	@ (802b3ec <atanf+0x19c>)
 802b358:	429c      	cmp	r4, r3
 802b35a:	d80b      	bhi.n	802b374 <atanf+0x124>
 802b35c:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802b360:	2302      	movs	r3, #2
 802b362:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802b366:	ee70 6a67 	vsub.f32	s13, s0, s15
 802b36a:	eea0 7a27 	vfma.f32	s14, s0, s15
 802b36e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802b372:	e7af      	b.n	802b2d4 <atanf+0x84>
 802b374:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802b378:	2303      	movs	r3, #3
 802b37a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802b37e:	e7a9      	b.n	802b2d4 <atanf+0x84>
 802b380:	4a1b      	ldr	r2, [pc, #108]	@ (802b3f0 <atanf+0x1a0>)
 802b382:	2d00      	cmp	r5, #0
 802b384:	491b      	ldr	r1, [pc, #108]	@ (802b3f4 <atanf+0x1a4>)
 802b386:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802b38a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802b38e:	edd3 6a00 	vldr	s13, [r3]
 802b392:	ee37 7a66 	vsub.f32	s14, s14, s13
 802b396:	ee37 7a67 	vsub.f32	s14, s14, s15
 802b39a:	edd2 7a00 	vldr	s15, [r2]
 802b39e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802b3a2:	bfb8      	it	lt
 802b3a4:	eef1 7a67 	vneglt.f32	s15, s15
 802b3a8:	e761      	b.n	802b26e <atanf+0x1e>
 802b3aa:	bf00      	nop
 802b3ac:	bfc90fdb 	.word	0xbfc90fdb
 802b3b0:	3fc90fdb 	.word	0x3fc90fdb
 802b3b4:	3edfffff 	.word	0x3edfffff
 802b3b8:	7149f2ca 	.word	0x7149f2ca
 802b3bc:	3f97ffff 	.word	0x3f97ffff
 802b3c0:	3c8569d7 	.word	0x3c8569d7
 802b3c4:	3d4bda59 	.word	0x3d4bda59
 802b3c8:	bd6ef16b 	.word	0xbd6ef16b
 802b3cc:	3d886b35 	.word	0x3d886b35
 802b3d0:	3dba2e6e 	.word	0x3dba2e6e
 802b3d4:	3e124925 	.word	0x3e124925
 802b3d8:	3eaaaaab 	.word	0x3eaaaaab
 802b3dc:	bd15a221 	.word	0xbd15a221
 802b3e0:	bd9d8795 	.word	0xbd9d8795
 802b3e4:	bde38e38 	.word	0xbde38e38
 802b3e8:	be4ccccd 	.word	0xbe4ccccd
 802b3ec:	401bffff 	.word	0x401bffff
 802b3f0:	0802ef20 	.word	0x0802ef20
 802b3f4:	0802ef10 	.word	0x0802ef10

0802b3f8 <fabsf>:
 802b3f8:	ee10 3a10 	vmov	r3, s0
 802b3fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802b400:	ee00 3a10 	vmov	s0, r3
 802b404:	4770      	bx	lr
	...

0802b408 <__kernel_rem_pio2f>:
 802b408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b40c:	4690      	mov	r8, r2
 802b40e:	4ab9      	ldr	r2, [pc, #740]	@ (802b6f4 <__kernel_rem_pio2f+0x2ec>)
 802b410:	460f      	mov	r7, r1
 802b412:	f103 3bff 	add.w	fp, r3, #4294967295
 802b416:	f118 0f04 	cmn.w	r8, #4
 802b41a:	ed2d 8b04 	vpush	{d8-d9}
 802b41e:	b0d9      	sub	sp, #356	@ 0x164
 802b420:	9001      	str	r0, [sp, #4]
 802b422:	9866      	ldr	r0, [sp, #408]	@ 0x198
 802b424:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 802b428:	db26      	blt.n	802b478 <__kernel_rem_pio2f+0x70>
 802b42a:	f1b8 0203 	subs.w	r2, r8, #3
 802b42e:	bf48      	it	mi
 802b430:	f108 0204 	addmi.w	r2, r8, #4
 802b434:	10d2      	asrs	r2, r2, #3
 802b436:	1c55      	adds	r5, r2, #1
 802b438:	eba2 060b 	sub.w	r6, r2, fp
 802b43c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 802b43e:	eb0a 0c0b 	add.w	ip, sl, fp
 802b442:	00e8      	lsls	r0, r5, #3
 802b444:	ac1c      	add	r4, sp, #112	@ 0x70
 802b446:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 802b44a:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 802b704 <__kernel_rem_pio2f+0x2fc>
 802b44e:	9002      	str	r0, [sp, #8]
 802b450:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 802b454:	2000      	movs	r0, #0
 802b456:	4560      	cmp	r0, ip
 802b458:	dd10      	ble.n	802b47c <__kernel_rem_pio2f+0x74>
 802b45a:	a91c      	add	r1, sp, #112	@ 0x70
 802b45c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 802b460:	2600      	movs	r6, #0
 802b462:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 802b466:	4556      	cmp	r6, sl
 802b468:	dc26      	bgt.n	802b4b8 <__kernel_rem_pio2f+0xb0>
 802b46a:	f8dd e004 	ldr.w	lr, [sp, #4]
 802b46e:	4684      	mov	ip, r0
 802b470:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 802b704 <__kernel_rem_pio2f+0x2fc>
 802b474:	2400      	movs	r4, #0
 802b476:	e018      	b.n	802b4aa <__kernel_rem_pio2f+0xa2>
 802b478:	2200      	movs	r2, #0
 802b47a:	e7dc      	b.n	802b436 <__kernel_rem_pio2f+0x2e>
 802b47c:	42c6      	cmn	r6, r0
 802b47e:	bf54      	ite	pl
 802b480:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 802b484:	eef0 7a47 	vmovmi.f32	s15, s14
 802b488:	f100 0001 	add.w	r0, r0, #1
 802b48c:	bf5c      	itt	pl
 802b48e:	ee07 1a90 	vmovpl	s15, r1
 802b492:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802b496:	ece4 7a01 	vstmia	r4!, {s15}
 802b49a:	e7dc      	b.n	802b456 <__kernel_rem_pio2f+0x4e>
 802b49c:	ecfe 6a01 	vldmia	lr!, {s13}
 802b4a0:	3401      	adds	r4, #1
 802b4a2:	ed3c 7a01 	vldmdb	ip!, {s14}
 802b4a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 802b4aa:	455c      	cmp	r4, fp
 802b4ac:	ddf6      	ble.n	802b49c <__kernel_rem_pio2f+0x94>
 802b4ae:	3601      	adds	r6, #1
 802b4b0:	3004      	adds	r0, #4
 802b4b2:	ece9 7a01 	vstmia	r9!, {s15}
 802b4b6:	e7d6      	b.n	802b466 <__kernel_rem_pio2f+0x5e>
 802b4b8:	a908      	add	r1, sp, #32
 802b4ba:	4654      	mov	r4, sl
 802b4bc:	eddf 8a90 	vldr	s17, [pc, #576]	@ 802b700 <__kernel_rem_pio2f+0x2f8>
 802b4c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802b4c4:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 802b6fc <__kernel_rem_pio2f+0x2f4>
 802b4c8:	9104      	str	r1, [sp, #16]
 802b4ca:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 802b4cc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 802b4d0:	9203      	str	r2, [sp, #12]
 802b4d2:	00a2      	lsls	r2, r4, #2
 802b4d4:	a944      	add	r1, sp, #272	@ 0x110
 802b4d6:	4626      	mov	r6, r4
 802b4d8:	9205      	str	r2, [sp, #20]
 802b4da:	aa58      	add	r2, sp, #352	@ 0x160
 802b4dc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 802b4e0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 802b4e4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 802b4e8:	aa08      	add	r2, sp, #32
 802b4ea:	4694      	mov	ip, r2
 802b4ec:	2e00      	cmp	r6, #0
 802b4ee:	dc4c      	bgt.n	802b58a <__kernel_rem_pio2f+0x182>
 802b4f0:	4628      	mov	r0, r5
 802b4f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802b4f6:	f000 f9f1 	bl	802b8dc <scalbnf>
 802b4fa:	eeb0 8a40 	vmov.f32	s16, s0
 802b4fe:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 802b502:	ee28 0a00 	vmul.f32	s0, s16, s0
 802b506:	f000 fa4d 	bl	802b9a4 <floorf>
 802b50a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 802b50e:	2d00      	cmp	r5, #0
 802b510:	eea0 8a67 	vfms.f32	s16, s0, s15
 802b514:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802b518:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802b51c:	ee17 9a90 	vmov	r9, s15
 802b520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802b524:	ee38 8a67 	vsub.f32	s16, s16, s15
 802b528:	dd41      	ble.n	802b5ae <__kernel_rem_pio2f+0x1a6>
 802b52a:	f104 3cff 	add.w	ip, r4, #4294967295
 802b52e:	a908      	add	r1, sp, #32
 802b530:	f1c5 0e08 	rsb	lr, r5, #8
 802b534:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 802b538:	fa46 f00e 	asr.w	r0, r6, lr
 802b53c:	4481      	add	r9, r0
 802b53e:	fa00 f00e 	lsl.w	r0, r0, lr
 802b542:	1a36      	subs	r6, r6, r0
 802b544:	f1c5 0007 	rsb	r0, r5, #7
 802b548:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 802b54c:	4106      	asrs	r6, r0
 802b54e:	2e00      	cmp	r6, #0
 802b550:	dd3c      	ble.n	802b5cc <__kernel_rem_pio2f+0x1c4>
 802b552:	f04f 0e00 	mov.w	lr, #0
 802b556:	f109 0901 	add.w	r9, r9, #1
 802b55a:	4670      	mov	r0, lr
 802b55c:	4574      	cmp	r4, lr
 802b55e:	dc68      	bgt.n	802b632 <__kernel_rem_pio2f+0x22a>
 802b560:	2d00      	cmp	r5, #0
 802b562:	dd03      	ble.n	802b56c <__kernel_rem_pio2f+0x164>
 802b564:	2d01      	cmp	r5, #1
 802b566:	d074      	beq.n	802b652 <__kernel_rem_pio2f+0x24a>
 802b568:	2d02      	cmp	r5, #2
 802b56a:	d07d      	beq.n	802b668 <__kernel_rem_pio2f+0x260>
 802b56c:	2e02      	cmp	r6, #2
 802b56e:	d12d      	bne.n	802b5cc <__kernel_rem_pio2f+0x1c4>
 802b570:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802b574:	ee30 8a48 	vsub.f32	s16, s0, s16
 802b578:	b340      	cbz	r0, 802b5cc <__kernel_rem_pio2f+0x1c4>
 802b57a:	4628      	mov	r0, r5
 802b57c:	9306      	str	r3, [sp, #24]
 802b57e:	f000 f9ad 	bl	802b8dc <scalbnf>
 802b582:	9b06      	ldr	r3, [sp, #24]
 802b584:	ee38 8a40 	vsub.f32	s16, s16, s0
 802b588:	e020      	b.n	802b5cc <__kernel_rem_pio2f+0x1c4>
 802b58a:	ee60 7a28 	vmul.f32	s15, s0, s17
 802b58e:	3e01      	subs	r6, #1
 802b590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802b594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802b598:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802b59c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802b5a0:	ecac 0a01 	vstmia	ip!, {s0}
 802b5a4:	ed30 0a01 	vldmdb	r0!, {s0}
 802b5a8:	ee37 0a80 	vadd.f32	s0, s15, s0
 802b5ac:	e79e      	b.n	802b4ec <__kernel_rem_pio2f+0xe4>
 802b5ae:	d105      	bne.n	802b5bc <__kernel_rem_pio2f+0x1b4>
 802b5b0:	1e60      	subs	r0, r4, #1
 802b5b2:	a908      	add	r1, sp, #32
 802b5b4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 802b5b8:	11f6      	asrs	r6, r6, #7
 802b5ba:	e7c8      	b.n	802b54e <__kernel_rem_pio2f+0x146>
 802b5bc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802b5c0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802b5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b5c8:	da31      	bge.n	802b62e <__kernel_rem_pio2f+0x226>
 802b5ca:	2600      	movs	r6, #0
 802b5cc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802b5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b5d4:	f040 8098 	bne.w	802b708 <__kernel_rem_pio2f+0x300>
 802b5d8:	1e60      	subs	r0, r4, #1
 802b5da:	2200      	movs	r2, #0
 802b5dc:	4550      	cmp	r0, sl
 802b5de:	da4b      	bge.n	802b678 <__kernel_rem_pio2f+0x270>
 802b5e0:	2a00      	cmp	r2, #0
 802b5e2:	d065      	beq.n	802b6b0 <__kernel_rem_pio2f+0x2a8>
 802b5e4:	3c01      	subs	r4, #1
 802b5e6:	ab08      	add	r3, sp, #32
 802b5e8:	3d08      	subs	r5, #8
 802b5ea:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802b5ee:	2b00      	cmp	r3, #0
 802b5f0:	d0f8      	beq.n	802b5e4 <__kernel_rem_pio2f+0x1dc>
 802b5f2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802b5f6:	4628      	mov	r0, r5
 802b5f8:	f000 f970 	bl	802b8dc <scalbnf>
 802b5fc:	1c63      	adds	r3, r4, #1
 802b5fe:	aa44      	add	r2, sp, #272	@ 0x110
 802b600:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 802b700 <__kernel_rem_pio2f+0x2f8>
 802b604:	0099      	lsls	r1, r3, #2
 802b606:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802b60a:	4623      	mov	r3, r4
 802b60c:	2b00      	cmp	r3, #0
 802b60e:	f280 80a9 	bge.w	802b764 <__kernel_rem_pio2f+0x35c>
 802b612:	4623      	mov	r3, r4
 802b614:	2b00      	cmp	r3, #0
 802b616:	f2c0 80c7 	blt.w	802b7a8 <__kernel_rem_pio2f+0x3a0>
 802b61a:	aa44      	add	r2, sp, #272	@ 0x110
 802b61c:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 802b6f8 <__kernel_rem_pio2f+0x2f0>
 802b620:	eddf 7a38 	vldr	s15, [pc, #224]	@ 802b704 <__kernel_rem_pio2f+0x2fc>
 802b624:	2000      	movs	r0, #0
 802b626:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802b62a:	1ae2      	subs	r2, r4, r3
 802b62c:	e0b1      	b.n	802b792 <__kernel_rem_pio2f+0x38a>
 802b62e:	2602      	movs	r6, #2
 802b630:	e78f      	b.n	802b552 <__kernel_rem_pio2f+0x14a>
 802b632:	f852 1b04 	ldr.w	r1, [r2], #4
 802b636:	b948      	cbnz	r0, 802b64c <__kernel_rem_pio2f+0x244>
 802b638:	b121      	cbz	r1, 802b644 <__kernel_rem_pio2f+0x23c>
 802b63a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 802b63e:	f842 1c04 	str.w	r1, [r2, #-4]
 802b642:	2101      	movs	r1, #1
 802b644:	f10e 0e01 	add.w	lr, lr, #1
 802b648:	4608      	mov	r0, r1
 802b64a:	e787      	b.n	802b55c <__kernel_rem_pio2f+0x154>
 802b64c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 802b650:	e7f5      	b.n	802b63e <__kernel_rem_pio2f+0x236>
 802b652:	f104 3cff 	add.w	ip, r4, #4294967295
 802b656:	aa08      	add	r2, sp, #32
 802b658:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802b65c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 802b660:	a908      	add	r1, sp, #32
 802b662:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 802b666:	e781      	b.n	802b56c <__kernel_rem_pio2f+0x164>
 802b668:	f104 3cff 	add.w	ip, r4, #4294967295
 802b66c:	aa08      	add	r2, sp, #32
 802b66e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802b672:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 802b676:	e7f3      	b.n	802b660 <__kernel_rem_pio2f+0x258>
 802b678:	a908      	add	r1, sp, #32
 802b67a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802b67e:	3801      	subs	r0, #1
 802b680:	430a      	orrs	r2, r1
 802b682:	e7ab      	b.n	802b5dc <__kernel_rem_pio2f+0x1d4>
 802b684:	3201      	adds	r2, #1
 802b686:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 802b68a:	2e00      	cmp	r6, #0
 802b68c:	d0fa      	beq.n	802b684 <__kernel_rem_pio2f+0x27c>
 802b68e:	9905      	ldr	r1, [sp, #20]
 802b690:	18e6      	adds	r6, r4, r3
 802b692:	f104 0c01 	add.w	ip, r4, #1
 802b696:	4422      	add	r2, r4
 802b698:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 802b69c:	eb0d 0001 	add.w	r0, sp, r1
 802b6a0:	a91c      	add	r1, sp, #112	@ 0x70
 802b6a2:	384c      	subs	r0, #76	@ 0x4c
 802b6a4:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 802b6a8:	4562      	cmp	r2, ip
 802b6aa:	da04      	bge.n	802b6b6 <__kernel_rem_pio2f+0x2ae>
 802b6ac:	4614      	mov	r4, r2
 802b6ae:	e710      	b.n	802b4d2 <__kernel_rem_pio2f+0xca>
 802b6b0:	9804      	ldr	r0, [sp, #16]
 802b6b2:	2201      	movs	r2, #1
 802b6b4:	e7e7      	b.n	802b686 <__kernel_rem_pio2f+0x27e>
 802b6b6:	9903      	ldr	r1, [sp, #12]
 802b6b8:	2400      	movs	r4, #0
 802b6ba:	f8dd e004 	ldr.w	lr, [sp, #4]
 802b6be:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 802b6c2:	ee07 1a90 	vmov	s15, r1
 802b6c6:	9105      	str	r1, [sp, #20]
 802b6c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802b6cc:	ece6 7a01 	vstmia	r6!, {s15}
 802b6d0:	46b1      	mov	r9, r6
 802b6d2:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 802b704 <__kernel_rem_pio2f+0x2fc>
 802b6d6:	455c      	cmp	r4, fp
 802b6d8:	dd04      	ble.n	802b6e4 <__kernel_rem_pio2f+0x2dc>
 802b6da:	f10c 0c01 	add.w	ip, ip, #1
 802b6de:	ece0 7a01 	vstmia	r0!, {s15}
 802b6e2:	e7e1      	b.n	802b6a8 <__kernel_rem_pio2f+0x2a0>
 802b6e4:	ecfe 6a01 	vldmia	lr!, {s13}
 802b6e8:	3401      	adds	r4, #1
 802b6ea:	ed39 7a01 	vldmdb	r9!, {s14}
 802b6ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 802b6f2:	e7f0      	b.n	802b6d6 <__kernel_rem_pio2f+0x2ce>
 802b6f4:	0802ef5c 	.word	0x0802ef5c
 802b6f8:	0802ef30 	.word	0x0802ef30
 802b6fc:	43800000 	.word	0x43800000
 802b700:	3b800000 	.word	0x3b800000
 802b704:	00000000 	.word	0x00000000
 802b708:	9b02      	ldr	r3, [sp, #8]
 802b70a:	eeb0 0a48 	vmov.f32	s0, s16
 802b70e:	eba3 0008 	sub.w	r0, r3, r8
 802b712:	f000 f8e3 	bl	802b8dc <scalbnf>
 802b716:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 802b6fc <__kernel_rem_pio2f+0x2f4>
 802b71a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802b71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b722:	db19      	blt.n	802b758 <__kernel_rem_pio2f+0x350>
 802b724:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 802b700 <__kernel_rem_pio2f+0x2f8>
 802b728:	aa08      	add	r2, sp, #32
 802b72a:	3508      	adds	r5, #8
 802b72c:	ee60 7a27 	vmul.f32	s15, s0, s15
 802b730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802b734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802b738:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802b73c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802b740:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802b744:	ee10 3a10 	vmov	r3, s0
 802b748:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802b74c:	3401      	adds	r4, #1
 802b74e:	ee17 3a90 	vmov	r3, s15
 802b752:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802b756:	e74c      	b.n	802b5f2 <__kernel_rem_pio2f+0x1ea>
 802b758:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802b75c:	aa08      	add	r2, sp, #32
 802b75e:	ee10 3a10 	vmov	r3, s0
 802b762:	e7f6      	b.n	802b752 <__kernel_rem_pio2f+0x34a>
 802b764:	a808      	add	r0, sp, #32
 802b766:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 802b76a:	3b01      	subs	r3, #1
 802b76c:	ee07 0a90 	vmov	s15, r0
 802b770:	9001      	str	r0, [sp, #4]
 802b772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802b776:	ee67 7a80 	vmul.f32	s15, s15, s0
 802b77a:	ee20 0a07 	vmul.f32	s0, s0, s14
 802b77e:	ed62 7a01 	vstmdb	r2!, {s15}
 802b782:	e743      	b.n	802b60c <__kernel_rem_pio2f+0x204>
 802b784:	ecfc 6a01 	vldmia	ip!, {s13}
 802b788:	3001      	adds	r0, #1
 802b78a:	ecb5 7a01 	vldmia	r5!, {s14}
 802b78e:	eee6 7a87 	vfma.f32	s15, s13, s14
 802b792:	4550      	cmp	r0, sl
 802b794:	dc01      	bgt.n	802b79a <__kernel_rem_pio2f+0x392>
 802b796:	4290      	cmp	r0, r2
 802b798:	ddf4      	ble.n	802b784 <__kernel_rem_pio2f+0x37c>
 802b79a:	a858      	add	r0, sp, #352	@ 0x160
 802b79c:	3b01      	subs	r3, #1
 802b79e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 802b7a2:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 802b7a6:	e735      	b.n	802b614 <__kernel_rem_pio2f+0x20c>
 802b7a8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 802b7aa:	2b02      	cmp	r3, #2
 802b7ac:	dc09      	bgt.n	802b7c2 <__kernel_rem_pio2f+0x3ba>
 802b7ae:	2b00      	cmp	r3, #0
 802b7b0:	dc27      	bgt.n	802b802 <__kernel_rem_pio2f+0x3fa>
 802b7b2:	d040      	beq.n	802b836 <__kernel_rem_pio2f+0x42e>
 802b7b4:	f009 0007 	and.w	r0, r9, #7
 802b7b8:	b059      	add	sp, #356	@ 0x164
 802b7ba:	ecbd 8b04 	vpop	{d8-d9}
 802b7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b7c2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 802b7c4:	2b03      	cmp	r3, #3
 802b7c6:	d1f5      	bne.n	802b7b4 <__kernel_rem_pio2f+0x3ac>
 802b7c8:	aa30      	add	r2, sp, #192	@ 0xc0
 802b7ca:	1f0b      	subs	r3, r1, #4
 802b7cc:	4620      	mov	r0, r4
 802b7ce:	4413      	add	r3, r2
 802b7d0:	461a      	mov	r2, r3
 802b7d2:	2800      	cmp	r0, #0
 802b7d4:	dc50      	bgt.n	802b878 <__kernel_rem_pio2f+0x470>
 802b7d6:	4622      	mov	r2, r4
 802b7d8:	2a01      	cmp	r2, #1
 802b7da:	dc5d      	bgt.n	802b898 <__kernel_rem_pio2f+0x490>
 802b7dc:	ab30      	add	r3, sp, #192	@ 0xc0
 802b7de:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 802b704 <__kernel_rem_pio2f+0x2fc>
 802b7e2:	440b      	add	r3, r1
 802b7e4:	2c01      	cmp	r4, #1
 802b7e6:	dc67      	bgt.n	802b8b8 <__kernel_rem_pio2f+0x4b0>
 802b7e8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 802b7ec:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 802b7f0:	2e00      	cmp	r6, #0
 802b7f2:	d167      	bne.n	802b8c4 <__kernel_rem_pio2f+0x4bc>
 802b7f4:	edc7 6a00 	vstr	s13, [r7]
 802b7f8:	ed87 7a01 	vstr	s14, [r7, #4]
 802b7fc:	edc7 7a02 	vstr	s15, [r7, #8]
 802b800:	e7d8      	b.n	802b7b4 <__kernel_rem_pio2f+0x3ac>
 802b802:	ab30      	add	r3, sp, #192	@ 0xc0
 802b804:	4622      	mov	r2, r4
 802b806:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 802b704 <__kernel_rem_pio2f+0x2fc>
 802b80a:	440b      	add	r3, r1
 802b80c:	2a00      	cmp	r2, #0
 802b80e:	da24      	bge.n	802b85a <__kernel_rem_pio2f+0x452>
 802b810:	b34e      	cbz	r6, 802b866 <__kernel_rem_pio2f+0x45e>
 802b812:	eef1 7a47 	vneg.f32	s15, s14
 802b816:	edc7 7a00 	vstr	s15, [r7]
 802b81a:	aa31      	add	r2, sp, #196	@ 0xc4
 802b81c:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 802b820:	2301      	movs	r3, #1
 802b822:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802b826:	429c      	cmp	r4, r3
 802b828:	da20      	bge.n	802b86c <__kernel_rem_pio2f+0x464>
 802b82a:	b10e      	cbz	r6, 802b830 <__kernel_rem_pio2f+0x428>
 802b82c:	eef1 7a67 	vneg.f32	s15, s15
 802b830:	edc7 7a01 	vstr	s15, [r7, #4]
 802b834:	e7be      	b.n	802b7b4 <__kernel_rem_pio2f+0x3ac>
 802b836:	ab30      	add	r3, sp, #192	@ 0xc0
 802b838:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 802b704 <__kernel_rem_pio2f+0x2fc>
 802b83c:	440b      	add	r3, r1
 802b83e:	2c00      	cmp	r4, #0
 802b840:	da05      	bge.n	802b84e <__kernel_rem_pio2f+0x446>
 802b842:	b10e      	cbz	r6, 802b848 <__kernel_rem_pio2f+0x440>
 802b844:	eef1 7a67 	vneg.f32	s15, s15
 802b848:	edc7 7a00 	vstr	s15, [r7]
 802b84c:	e7b2      	b.n	802b7b4 <__kernel_rem_pio2f+0x3ac>
 802b84e:	ed33 7a01 	vldmdb	r3!, {s14}
 802b852:	3c01      	subs	r4, #1
 802b854:	ee77 7a87 	vadd.f32	s15, s15, s14
 802b858:	e7f1      	b.n	802b83e <__kernel_rem_pio2f+0x436>
 802b85a:	ed73 7a01 	vldmdb	r3!, {s15}
 802b85e:	3a01      	subs	r2, #1
 802b860:	ee37 7a27 	vadd.f32	s14, s14, s15
 802b864:	e7d2      	b.n	802b80c <__kernel_rem_pio2f+0x404>
 802b866:	eef0 7a47 	vmov.f32	s15, s14
 802b86a:	e7d4      	b.n	802b816 <__kernel_rem_pio2f+0x40e>
 802b86c:	ecb2 7a01 	vldmia	r2!, {s14}
 802b870:	3301      	adds	r3, #1
 802b872:	ee77 7a87 	vadd.f32	s15, s15, s14
 802b876:	e7d6      	b.n	802b826 <__kernel_rem_pio2f+0x41e>
 802b878:	ed72 7a01 	vldmdb	r2!, {s15}
 802b87c:	3801      	subs	r0, #1
 802b87e:	edd2 6a01 	vldr	s13, [r2, #4]
 802b882:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802b886:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802b88a:	ed82 7a00 	vstr	s14, [r2]
 802b88e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802b892:	edc2 7a01 	vstr	s15, [r2, #4]
 802b896:	e79c      	b.n	802b7d2 <__kernel_rem_pio2f+0x3ca>
 802b898:	ed73 7a01 	vldmdb	r3!, {s15}
 802b89c:	3a01      	subs	r2, #1
 802b89e:	edd3 6a01 	vldr	s13, [r3, #4]
 802b8a2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802b8a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802b8aa:	ed83 7a00 	vstr	s14, [r3]
 802b8ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802b8b2:	edc3 7a01 	vstr	s15, [r3, #4]
 802b8b6:	e78f      	b.n	802b7d8 <__kernel_rem_pio2f+0x3d0>
 802b8b8:	ed33 7a01 	vldmdb	r3!, {s14}
 802b8bc:	3c01      	subs	r4, #1
 802b8be:	ee77 7a87 	vadd.f32	s15, s15, s14
 802b8c2:	e78f      	b.n	802b7e4 <__kernel_rem_pio2f+0x3dc>
 802b8c4:	eef1 6a66 	vneg.f32	s13, s13
 802b8c8:	eeb1 7a47 	vneg.f32	s14, s14
 802b8cc:	eef1 7a67 	vneg.f32	s15, s15
 802b8d0:	edc7 6a00 	vstr	s13, [r7]
 802b8d4:	ed87 7a01 	vstr	s14, [r7, #4]
 802b8d8:	e790      	b.n	802b7fc <__kernel_rem_pio2f+0x3f4>
 802b8da:	bf00      	nop

0802b8dc <scalbnf>:
 802b8dc:	ee10 3a10 	vmov	r3, s0
 802b8e0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 802b8e4:	d02a      	beq.n	802b93c <scalbnf+0x60>
 802b8e6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 802b8ea:	d302      	bcc.n	802b8f2 <scalbnf+0x16>
 802b8ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 802b8f0:	4770      	bx	lr
 802b8f2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 802b8f6:	d122      	bne.n	802b93e <scalbnf+0x62>
 802b8f8:	4b23      	ldr	r3, [pc, #140]	@ (802b988 <scalbnf+0xac>)
 802b8fa:	eddf 7a24 	vldr	s15, [pc, #144]	@ 802b98c <scalbnf+0xb0>
 802b8fe:	4298      	cmp	r0, r3
 802b900:	ee20 0a27 	vmul.f32	s0, s0, s15
 802b904:	db16      	blt.n	802b934 <scalbnf+0x58>
 802b906:	ee10 3a10 	vmov	r3, s0
 802b90a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802b90e:	3a19      	subs	r2, #25
 802b910:	f24c 3150 	movw	r1, #50000	@ 0xc350
 802b914:	4288      	cmp	r0, r1
 802b916:	dd14      	ble.n	802b942 <scalbnf+0x66>
 802b918:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 802b990 <scalbnf+0xb4>
 802b91c:	ee10 3a10 	vmov	r3, s0
 802b920:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 802b994 <scalbnf+0xb8>
 802b924:	eeb0 7a67 	vmov.f32	s14, s15
 802b928:	2b00      	cmp	r3, #0
 802b92a:	fe67 7aa6 	vselge.f32	s15, s15, s13
 802b92e:	ee27 0a87 	vmul.f32	s0, s15, s14
 802b932:	4770      	bx	lr
 802b934:	eddf 7a18 	vldr	s15, [pc, #96]	@ 802b998 <scalbnf+0xbc>
 802b938:	ee27 0a80 	vmul.f32	s0, s15, s0
 802b93c:	4770      	bx	lr
 802b93e:	0dd2      	lsrs	r2, r2, #23
 802b940:	e7e6      	b.n	802b910 <scalbnf+0x34>
 802b942:	4410      	add	r0, r2
 802b944:	28fe      	cmp	r0, #254	@ 0xfe
 802b946:	dce7      	bgt.n	802b918 <scalbnf+0x3c>
 802b948:	2800      	cmp	r0, #0
 802b94a:	dd06      	ble.n	802b95a <scalbnf+0x7e>
 802b94c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802b950:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802b954:	ee00 3a10 	vmov	s0, r3
 802b958:	4770      	bx	lr
 802b95a:	f110 0f16 	cmn.w	r0, #22
 802b95e:	da09      	bge.n	802b974 <scalbnf+0x98>
 802b960:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 802b998 <scalbnf+0xbc>
 802b964:	ee10 3a10 	vmov	r3, s0
 802b968:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 802b99c <scalbnf+0xc0>
 802b96c:	eeb0 7a67 	vmov.f32	s14, s15
 802b970:	2b00      	cmp	r3, #0
 802b972:	e7da      	b.n	802b92a <scalbnf+0x4e>
 802b974:	3019      	adds	r0, #25
 802b976:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802b97a:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 802b9a0 <scalbnf+0xc4>
 802b97e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802b982:	ee07 3a90 	vmov	s15, r3
 802b986:	e7d7      	b.n	802b938 <scalbnf+0x5c>
 802b988:	ffff3cb0 	.word	0xffff3cb0
 802b98c:	4c000000 	.word	0x4c000000
 802b990:	7149f2ca 	.word	0x7149f2ca
 802b994:	f149f2ca 	.word	0xf149f2ca
 802b998:	0da24260 	.word	0x0da24260
 802b99c:	8da24260 	.word	0x8da24260
 802b9a0:	33000000 	.word	0x33000000

0802b9a4 <floorf>:
 802b9a4:	febb 0a40 	vrintm.f32	s0, s0
 802b9a8:	4770      	bx	lr

0802b9aa <abort>:
 802b9aa:	2006      	movs	r0, #6
 802b9ac:	b508      	push	{r3, lr}
 802b9ae:	f000 fb3f 	bl	802c030 <raise>
 802b9b2:	2001      	movs	r0, #1
 802b9b4:	f7d6 f82c 	bl	8001a10 <_exit>

0802b9b8 <__assert_func>:
 802b9b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802b9ba:	4614      	mov	r4, r2
 802b9bc:	461a      	mov	r2, r3
 802b9be:	4b09      	ldr	r3, [pc, #36]	@ (802b9e4 <__assert_func+0x2c>)
 802b9c0:	4605      	mov	r5, r0
 802b9c2:	681b      	ldr	r3, [r3, #0]
 802b9c4:	68d8      	ldr	r0, [r3, #12]
 802b9c6:	b14c      	cbz	r4, 802b9dc <__assert_func+0x24>
 802b9c8:	4b07      	ldr	r3, [pc, #28]	@ (802b9e8 <__assert_func+0x30>)
 802b9ca:	9100      	str	r1, [sp, #0]
 802b9cc:	4907      	ldr	r1, [pc, #28]	@ (802b9ec <__assert_func+0x34>)
 802b9ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802b9d2:	462b      	mov	r3, r5
 802b9d4:	f000 f984 	bl	802bce0 <fiprintf>
 802b9d8:	f7ff ffe7 	bl	802b9aa <abort>
 802b9dc:	4b04      	ldr	r3, [pc, #16]	@ (802b9f0 <__assert_func+0x38>)
 802b9de:	461c      	mov	r4, r3
 802b9e0:	e7f3      	b.n	802b9ca <__assert_func+0x12>
 802b9e2:	bf00      	nop
 802b9e4:	200000a8 	.word	0x200000a8
 802b9e8:	0802ef68 	.word	0x0802ef68
 802b9ec:	0802ef75 	.word	0x0802ef75
 802b9f0:	0802efa3 	.word	0x0802efa3

0802b9f4 <atexit>:
 802b9f4:	2300      	movs	r3, #0
 802b9f6:	4601      	mov	r1, r0
 802b9f8:	461a      	mov	r2, r3
 802b9fa:	4618      	mov	r0, r3
 802b9fc:	f000 bbc4 	b.w	802c188 <__register_exitproc>

0802ba00 <malloc>:
 802ba00:	4b02      	ldr	r3, [pc, #8]	@ (802ba0c <malloc+0xc>)
 802ba02:	4601      	mov	r1, r0
 802ba04:	6818      	ldr	r0, [r3, #0]
 802ba06:	f000 b82d 	b.w	802ba64 <_malloc_r>
 802ba0a:	bf00      	nop
 802ba0c:	200000a8 	.word	0x200000a8

0802ba10 <free>:
 802ba10:	4b02      	ldr	r3, [pc, #8]	@ (802ba1c <free+0xc>)
 802ba12:	4601      	mov	r1, r0
 802ba14:	6818      	ldr	r0, [r3, #0]
 802ba16:	f000 bc15 	b.w	802c244 <_free_r>
 802ba1a:	bf00      	nop
 802ba1c:	200000a8 	.word	0x200000a8

0802ba20 <sbrk_aligned>:
 802ba20:	b570      	push	{r4, r5, r6, lr}
 802ba22:	4e0f      	ldr	r6, [pc, #60]	@ (802ba60 <sbrk_aligned+0x40>)
 802ba24:	460c      	mov	r4, r1
 802ba26:	4605      	mov	r5, r0
 802ba28:	6831      	ldr	r1, [r6, #0]
 802ba2a:	b911      	cbnz	r1, 802ba32 <sbrk_aligned+0x12>
 802ba2c:	f000 fb50 	bl	802c0d0 <_sbrk_r>
 802ba30:	6030      	str	r0, [r6, #0]
 802ba32:	4621      	mov	r1, r4
 802ba34:	4628      	mov	r0, r5
 802ba36:	f000 fb4b 	bl	802c0d0 <_sbrk_r>
 802ba3a:	1c43      	adds	r3, r0, #1
 802ba3c:	d103      	bne.n	802ba46 <sbrk_aligned+0x26>
 802ba3e:	f04f 34ff 	mov.w	r4, #4294967295
 802ba42:	4620      	mov	r0, r4
 802ba44:	bd70      	pop	{r4, r5, r6, pc}
 802ba46:	1cc4      	adds	r4, r0, #3
 802ba48:	f024 0403 	bic.w	r4, r4, #3
 802ba4c:	42a0      	cmp	r0, r4
 802ba4e:	d0f8      	beq.n	802ba42 <sbrk_aligned+0x22>
 802ba50:	1a21      	subs	r1, r4, r0
 802ba52:	4628      	mov	r0, r5
 802ba54:	f000 fb3c 	bl	802c0d0 <_sbrk_r>
 802ba58:	3001      	adds	r0, #1
 802ba5a:	d1f2      	bne.n	802ba42 <sbrk_aligned+0x22>
 802ba5c:	e7ef      	b.n	802ba3e <sbrk_aligned+0x1e>
 802ba5e:	bf00      	nop
 802ba60:	2005c384 	.word	0x2005c384

0802ba64 <_malloc_r>:
 802ba64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ba68:	1ccd      	adds	r5, r1, #3
 802ba6a:	4606      	mov	r6, r0
 802ba6c:	f025 0503 	bic.w	r5, r5, #3
 802ba70:	3508      	adds	r5, #8
 802ba72:	2d0c      	cmp	r5, #12
 802ba74:	bf38      	it	cc
 802ba76:	250c      	movcc	r5, #12
 802ba78:	2d00      	cmp	r5, #0
 802ba7a:	db01      	blt.n	802ba80 <_malloc_r+0x1c>
 802ba7c:	42a9      	cmp	r1, r5
 802ba7e:	d904      	bls.n	802ba8a <_malloc_r+0x26>
 802ba80:	230c      	movs	r3, #12
 802ba82:	6033      	str	r3, [r6, #0]
 802ba84:	2000      	movs	r0, #0
 802ba86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ba8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802bb60 <_malloc_r+0xfc>
 802ba8e:	f000 f869 	bl	802bb64 <__malloc_lock>
 802ba92:	f8d8 3000 	ldr.w	r3, [r8]
 802ba96:	461c      	mov	r4, r3
 802ba98:	bb44      	cbnz	r4, 802baec <_malloc_r+0x88>
 802ba9a:	4629      	mov	r1, r5
 802ba9c:	4630      	mov	r0, r6
 802ba9e:	f7ff ffbf 	bl	802ba20 <sbrk_aligned>
 802baa2:	1c43      	adds	r3, r0, #1
 802baa4:	4604      	mov	r4, r0
 802baa6:	d158      	bne.n	802bb5a <_malloc_r+0xf6>
 802baa8:	f8d8 4000 	ldr.w	r4, [r8]
 802baac:	4627      	mov	r7, r4
 802baae:	2f00      	cmp	r7, #0
 802bab0:	d143      	bne.n	802bb3a <_malloc_r+0xd6>
 802bab2:	2c00      	cmp	r4, #0
 802bab4:	d04b      	beq.n	802bb4e <_malloc_r+0xea>
 802bab6:	6823      	ldr	r3, [r4, #0]
 802bab8:	4639      	mov	r1, r7
 802baba:	4630      	mov	r0, r6
 802babc:	eb04 0903 	add.w	r9, r4, r3
 802bac0:	f000 fb06 	bl	802c0d0 <_sbrk_r>
 802bac4:	4581      	cmp	r9, r0
 802bac6:	d142      	bne.n	802bb4e <_malloc_r+0xea>
 802bac8:	6821      	ldr	r1, [r4, #0]
 802baca:	4630      	mov	r0, r6
 802bacc:	1a6d      	subs	r5, r5, r1
 802bace:	4629      	mov	r1, r5
 802bad0:	f7ff ffa6 	bl	802ba20 <sbrk_aligned>
 802bad4:	3001      	adds	r0, #1
 802bad6:	d03a      	beq.n	802bb4e <_malloc_r+0xea>
 802bad8:	6823      	ldr	r3, [r4, #0]
 802bada:	442b      	add	r3, r5
 802badc:	6023      	str	r3, [r4, #0]
 802bade:	f8d8 3000 	ldr.w	r3, [r8]
 802bae2:	685a      	ldr	r2, [r3, #4]
 802bae4:	bb62      	cbnz	r2, 802bb40 <_malloc_r+0xdc>
 802bae6:	f8c8 7000 	str.w	r7, [r8]
 802baea:	e00f      	b.n	802bb0c <_malloc_r+0xa8>
 802baec:	6822      	ldr	r2, [r4, #0]
 802baee:	1b52      	subs	r2, r2, r5
 802baf0:	d420      	bmi.n	802bb34 <_malloc_r+0xd0>
 802baf2:	2a0b      	cmp	r2, #11
 802baf4:	d917      	bls.n	802bb26 <_malloc_r+0xc2>
 802baf6:	1961      	adds	r1, r4, r5
 802baf8:	42a3      	cmp	r3, r4
 802bafa:	6025      	str	r5, [r4, #0]
 802bafc:	bf18      	it	ne
 802bafe:	6059      	strne	r1, [r3, #4]
 802bb00:	6863      	ldr	r3, [r4, #4]
 802bb02:	bf08      	it	eq
 802bb04:	f8c8 1000 	streq.w	r1, [r8]
 802bb08:	5162      	str	r2, [r4, r5]
 802bb0a:	604b      	str	r3, [r1, #4]
 802bb0c:	4630      	mov	r0, r6
 802bb0e:	f000 f82f 	bl	802bb70 <__malloc_unlock>
 802bb12:	f104 000b 	add.w	r0, r4, #11
 802bb16:	1d23      	adds	r3, r4, #4
 802bb18:	f020 0007 	bic.w	r0, r0, #7
 802bb1c:	1ac2      	subs	r2, r0, r3
 802bb1e:	bf1c      	itt	ne
 802bb20:	1a1b      	subne	r3, r3, r0
 802bb22:	50a3      	strne	r3, [r4, r2]
 802bb24:	e7af      	b.n	802ba86 <_malloc_r+0x22>
 802bb26:	6862      	ldr	r2, [r4, #4]
 802bb28:	42a3      	cmp	r3, r4
 802bb2a:	bf0c      	ite	eq
 802bb2c:	f8c8 2000 	streq.w	r2, [r8]
 802bb30:	605a      	strne	r2, [r3, #4]
 802bb32:	e7eb      	b.n	802bb0c <_malloc_r+0xa8>
 802bb34:	4623      	mov	r3, r4
 802bb36:	6864      	ldr	r4, [r4, #4]
 802bb38:	e7ae      	b.n	802ba98 <_malloc_r+0x34>
 802bb3a:	463c      	mov	r4, r7
 802bb3c:	687f      	ldr	r7, [r7, #4]
 802bb3e:	e7b6      	b.n	802baae <_malloc_r+0x4a>
 802bb40:	461a      	mov	r2, r3
 802bb42:	685b      	ldr	r3, [r3, #4]
 802bb44:	42a3      	cmp	r3, r4
 802bb46:	d1fb      	bne.n	802bb40 <_malloc_r+0xdc>
 802bb48:	2300      	movs	r3, #0
 802bb4a:	6053      	str	r3, [r2, #4]
 802bb4c:	e7de      	b.n	802bb0c <_malloc_r+0xa8>
 802bb4e:	230c      	movs	r3, #12
 802bb50:	4630      	mov	r0, r6
 802bb52:	6033      	str	r3, [r6, #0]
 802bb54:	f000 f80c 	bl	802bb70 <__malloc_unlock>
 802bb58:	e794      	b.n	802ba84 <_malloc_r+0x20>
 802bb5a:	6005      	str	r5, [r0, #0]
 802bb5c:	e7d6      	b.n	802bb0c <_malloc_r+0xa8>
 802bb5e:	bf00      	nop
 802bb60:	2005c388 	.word	0x2005c388

0802bb64 <__malloc_lock>:
 802bb64:	4801      	ldr	r0, [pc, #4]	@ (802bb6c <__malloc_lock+0x8>)
 802bb66:	f000 bb00 	b.w	802c16a <__retarget_lock_acquire_recursive>
 802bb6a:	bf00      	nop
 802bb6c:	2005c4cc 	.word	0x2005c4cc

0802bb70 <__malloc_unlock>:
 802bb70:	4801      	ldr	r0, [pc, #4]	@ (802bb78 <__malloc_unlock+0x8>)
 802bb72:	f000 bafb 	b.w	802c16c <__retarget_lock_release_recursive>
 802bb76:	bf00      	nop
 802bb78:	2005c4cc 	.word	0x2005c4cc

0802bb7c <__cxa_atexit>:
 802bb7c:	b510      	push	{r4, lr}
 802bb7e:	4604      	mov	r4, r0
 802bb80:	4804      	ldr	r0, [pc, #16]	@ (802bb94 <__cxa_atexit+0x18>)
 802bb82:	4613      	mov	r3, r2
 802bb84:	b120      	cbz	r0, 802bb90 <__cxa_atexit+0x14>
 802bb86:	460a      	mov	r2, r1
 802bb88:	2002      	movs	r0, #2
 802bb8a:	4621      	mov	r1, r4
 802bb8c:	f000 fafc 	bl	802c188 <__register_exitproc>
 802bb90:	bd10      	pop	{r4, pc}
 802bb92:	bf00      	nop
 802bb94:	0802c189 	.word	0x0802c189

0802bb98 <std>:
 802bb98:	2300      	movs	r3, #0
 802bb9a:	b510      	push	{r4, lr}
 802bb9c:	4604      	mov	r4, r0
 802bb9e:	6083      	str	r3, [r0, #8]
 802bba0:	8181      	strh	r1, [r0, #12]
 802bba2:	4619      	mov	r1, r3
 802bba4:	6643      	str	r3, [r0, #100]	@ 0x64
 802bba6:	81c2      	strh	r2, [r0, #14]
 802bba8:	2208      	movs	r2, #8
 802bbaa:	6183      	str	r3, [r0, #24]
 802bbac:	e9c0 3300 	strd	r3, r3, [r0]
 802bbb0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802bbb4:	305c      	adds	r0, #92	@ 0x5c
 802bbb6:	f000 fa0b 	bl	802bfd0 <memset>
 802bbba:	4b0d      	ldr	r3, [pc, #52]	@ (802bbf0 <std+0x58>)
 802bbbc:	6224      	str	r4, [r4, #32]
 802bbbe:	6263      	str	r3, [r4, #36]	@ 0x24
 802bbc0:	4b0c      	ldr	r3, [pc, #48]	@ (802bbf4 <std+0x5c>)
 802bbc2:	62a3      	str	r3, [r4, #40]	@ 0x28
 802bbc4:	4b0c      	ldr	r3, [pc, #48]	@ (802bbf8 <std+0x60>)
 802bbc6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802bbc8:	4b0c      	ldr	r3, [pc, #48]	@ (802bbfc <std+0x64>)
 802bbca:	6323      	str	r3, [r4, #48]	@ 0x30
 802bbcc:	4b0c      	ldr	r3, [pc, #48]	@ (802bc00 <std+0x68>)
 802bbce:	429c      	cmp	r4, r3
 802bbd0:	d006      	beq.n	802bbe0 <std+0x48>
 802bbd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802bbd6:	4294      	cmp	r4, r2
 802bbd8:	d002      	beq.n	802bbe0 <std+0x48>
 802bbda:	33d0      	adds	r3, #208	@ 0xd0
 802bbdc:	429c      	cmp	r4, r3
 802bbde:	d105      	bne.n	802bbec <std+0x54>
 802bbe0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802bbe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802bbe8:	f000 babe 	b.w	802c168 <__retarget_lock_init_recursive>
 802bbec:	bd10      	pop	{r4, pc}
 802bbee:	bf00      	nop
 802bbf0:	0802be21 	.word	0x0802be21
 802bbf4:	0802be43 	.word	0x0802be43
 802bbf8:	0802be7b 	.word	0x0802be7b
 802bbfc:	0802be9f 	.word	0x0802be9f
 802bc00:	2005c38c 	.word	0x2005c38c

0802bc04 <stdio_exit_handler>:
 802bc04:	4a02      	ldr	r2, [pc, #8]	@ (802bc10 <stdio_exit_handler+0xc>)
 802bc06:	4903      	ldr	r1, [pc, #12]	@ (802bc14 <stdio_exit_handler+0x10>)
 802bc08:	4803      	ldr	r0, [pc, #12]	@ (802bc18 <stdio_exit_handler+0x14>)
 802bc0a:	f000 b87b 	b.w	802bd04 <_fwalk_sglue>
 802bc0e:	bf00      	nop
 802bc10:	2000009c 	.word	0x2000009c
 802bc14:	0802c985 	.word	0x0802c985
 802bc18:	200000ac 	.word	0x200000ac

0802bc1c <cleanup_stdio>:
 802bc1c:	6841      	ldr	r1, [r0, #4]
 802bc1e:	4b0c      	ldr	r3, [pc, #48]	@ (802bc50 <cleanup_stdio+0x34>)
 802bc20:	4299      	cmp	r1, r3
 802bc22:	b510      	push	{r4, lr}
 802bc24:	4604      	mov	r4, r0
 802bc26:	d001      	beq.n	802bc2c <cleanup_stdio+0x10>
 802bc28:	f000 feac 	bl	802c984 <_fflush_r>
 802bc2c:	68a1      	ldr	r1, [r4, #8]
 802bc2e:	4b09      	ldr	r3, [pc, #36]	@ (802bc54 <cleanup_stdio+0x38>)
 802bc30:	4299      	cmp	r1, r3
 802bc32:	d002      	beq.n	802bc3a <cleanup_stdio+0x1e>
 802bc34:	4620      	mov	r0, r4
 802bc36:	f000 fea5 	bl	802c984 <_fflush_r>
 802bc3a:	68e1      	ldr	r1, [r4, #12]
 802bc3c:	4b06      	ldr	r3, [pc, #24]	@ (802bc58 <cleanup_stdio+0x3c>)
 802bc3e:	4299      	cmp	r1, r3
 802bc40:	d004      	beq.n	802bc4c <cleanup_stdio+0x30>
 802bc42:	4620      	mov	r0, r4
 802bc44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802bc48:	f000 be9c 	b.w	802c984 <_fflush_r>
 802bc4c:	bd10      	pop	{r4, pc}
 802bc4e:	bf00      	nop
 802bc50:	2005c38c 	.word	0x2005c38c
 802bc54:	2005c3f4 	.word	0x2005c3f4
 802bc58:	2005c45c 	.word	0x2005c45c

0802bc5c <global_stdio_init.part.0>:
 802bc5c:	b510      	push	{r4, lr}
 802bc5e:	4b0b      	ldr	r3, [pc, #44]	@ (802bc8c <global_stdio_init.part.0+0x30>)
 802bc60:	2104      	movs	r1, #4
 802bc62:	4c0b      	ldr	r4, [pc, #44]	@ (802bc90 <global_stdio_init.part.0+0x34>)
 802bc64:	4a0b      	ldr	r2, [pc, #44]	@ (802bc94 <global_stdio_init.part.0+0x38>)
 802bc66:	4620      	mov	r0, r4
 802bc68:	601a      	str	r2, [r3, #0]
 802bc6a:	2200      	movs	r2, #0
 802bc6c:	f7ff ff94 	bl	802bb98 <std>
 802bc70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802bc74:	2201      	movs	r2, #1
 802bc76:	2109      	movs	r1, #9
 802bc78:	f7ff ff8e 	bl	802bb98 <std>
 802bc7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802bc80:	2202      	movs	r2, #2
 802bc82:	2112      	movs	r1, #18
 802bc84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802bc88:	f7ff bf86 	b.w	802bb98 <std>
 802bc8c:	2005c4c4 	.word	0x2005c4c4
 802bc90:	2005c38c 	.word	0x2005c38c
 802bc94:	0802bc05 	.word	0x0802bc05

0802bc98 <__sfp_lock_acquire>:
 802bc98:	4801      	ldr	r0, [pc, #4]	@ (802bca0 <__sfp_lock_acquire+0x8>)
 802bc9a:	f000 ba66 	b.w	802c16a <__retarget_lock_acquire_recursive>
 802bc9e:	bf00      	nop
 802bca0:	2005c4ce 	.word	0x2005c4ce

0802bca4 <__sfp_lock_release>:
 802bca4:	4801      	ldr	r0, [pc, #4]	@ (802bcac <__sfp_lock_release+0x8>)
 802bca6:	f000 ba61 	b.w	802c16c <__retarget_lock_release_recursive>
 802bcaa:	bf00      	nop
 802bcac:	2005c4ce 	.word	0x2005c4ce

0802bcb0 <__sinit>:
 802bcb0:	b510      	push	{r4, lr}
 802bcb2:	4604      	mov	r4, r0
 802bcb4:	f7ff fff0 	bl	802bc98 <__sfp_lock_acquire>
 802bcb8:	6a23      	ldr	r3, [r4, #32]
 802bcba:	b11b      	cbz	r3, 802bcc4 <__sinit+0x14>
 802bcbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802bcc0:	f7ff bff0 	b.w	802bca4 <__sfp_lock_release>
 802bcc4:	4b04      	ldr	r3, [pc, #16]	@ (802bcd8 <__sinit+0x28>)
 802bcc6:	6223      	str	r3, [r4, #32]
 802bcc8:	4b04      	ldr	r3, [pc, #16]	@ (802bcdc <__sinit+0x2c>)
 802bcca:	681b      	ldr	r3, [r3, #0]
 802bccc:	2b00      	cmp	r3, #0
 802bcce:	d1f5      	bne.n	802bcbc <__sinit+0xc>
 802bcd0:	f7ff ffc4 	bl	802bc5c <global_stdio_init.part.0>
 802bcd4:	e7f2      	b.n	802bcbc <__sinit+0xc>
 802bcd6:	bf00      	nop
 802bcd8:	0802bc1d 	.word	0x0802bc1d
 802bcdc:	2005c4c4 	.word	0x2005c4c4

0802bce0 <fiprintf>:
 802bce0:	b40e      	push	{r1, r2, r3}
 802bce2:	b503      	push	{r0, r1, lr}
 802bce4:	ab03      	add	r3, sp, #12
 802bce6:	4601      	mov	r1, r0
 802bce8:	4805      	ldr	r0, [pc, #20]	@ (802bd00 <fiprintf+0x20>)
 802bcea:	f853 2b04 	ldr.w	r2, [r3], #4
 802bcee:	6800      	ldr	r0, [r0, #0]
 802bcf0:	9301      	str	r3, [sp, #4]
 802bcf2:	f000 fb1b 	bl	802c32c <_vfiprintf_r>
 802bcf6:	b002      	add	sp, #8
 802bcf8:	f85d eb04 	ldr.w	lr, [sp], #4
 802bcfc:	b003      	add	sp, #12
 802bcfe:	4770      	bx	lr
 802bd00:	200000a8 	.word	0x200000a8

0802bd04 <_fwalk_sglue>:
 802bd04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bd08:	4607      	mov	r7, r0
 802bd0a:	4688      	mov	r8, r1
 802bd0c:	4614      	mov	r4, r2
 802bd0e:	2600      	movs	r6, #0
 802bd10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802bd14:	f1b9 0901 	subs.w	r9, r9, #1
 802bd18:	d505      	bpl.n	802bd26 <_fwalk_sglue+0x22>
 802bd1a:	6824      	ldr	r4, [r4, #0]
 802bd1c:	2c00      	cmp	r4, #0
 802bd1e:	d1f7      	bne.n	802bd10 <_fwalk_sglue+0xc>
 802bd20:	4630      	mov	r0, r6
 802bd22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bd26:	89ab      	ldrh	r3, [r5, #12]
 802bd28:	2b01      	cmp	r3, #1
 802bd2a:	d907      	bls.n	802bd3c <_fwalk_sglue+0x38>
 802bd2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802bd30:	3301      	adds	r3, #1
 802bd32:	d003      	beq.n	802bd3c <_fwalk_sglue+0x38>
 802bd34:	4629      	mov	r1, r5
 802bd36:	4638      	mov	r0, r7
 802bd38:	47c0      	blx	r8
 802bd3a:	4306      	orrs	r6, r0
 802bd3c:	3568      	adds	r5, #104	@ 0x68
 802bd3e:	e7e9      	b.n	802bd14 <_fwalk_sglue+0x10>

0802bd40 <iprintf>:
 802bd40:	b40f      	push	{r0, r1, r2, r3}
 802bd42:	b507      	push	{r0, r1, r2, lr}
 802bd44:	4906      	ldr	r1, [pc, #24]	@ (802bd60 <iprintf+0x20>)
 802bd46:	ab04      	add	r3, sp, #16
 802bd48:	6808      	ldr	r0, [r1, #0]
 802bd4a:	f853 2b04 	ldr.w	r2, [r3], #4
 802bd4e:	6881      	ldr	r1, [r0, #8]
 802bd50:	9301      	str	r3, [sp, #4]
 802bd52:	f000 faeb 	bl	802c32c <_vfiprintf_r>
 802bd56:	b003      	add	sp, #12
 802bd58:	f85d eb04 	ldr.w	lr, [sp], #4
 802bd5c:	b004      	add	sp, #16
 802bd5e:	4770      	bx	lr
 802bd60:	200000a8 	.word	0x200000a8

0802bd64 <_puts_r>:
 802bd64:	6a03      	ldr	r3, [r0, #32]
 802bd66:	b570      	push	{r4, r5, r6, lr}
 802bd68:	4605      	mov	r5, r0
 802bd6a:	460e      	mov	r6, r1
 802bd6c:	6884      	ldr	r4, [r0, #8]
 802bd6e:	b90b      	cbnz	r3, 802bd74 <_puts_r+0x10>
 802bd70:	f7ff ff9e 	bl	802bcb0 <__sinit>
 802bd74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802bd76:	07db      	lsls	r3, r3, #31
 802bd78:	d405      	bmi.n	802bd86 <_puts_r+0x22>
 802bd7a:	89a3      	ldrh	r3, [r4, #12]
 802bd7c:	0598      	lsls	r0, r3, #22
 802bd7e:	d402      	bmi.n	802bd86 <_puts_r+0x22>
 802bd80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802bd82:	f000 f9f2 	bl	802c16a <__retarget_lock_acquire_recursive>
 802bd86:	89a3      	ldrh	r3, [r4, #12]
 802bd88:	0719      	lsls	r1, r3, #28
 802bd8a:	d502      	bpl.n	802bd92 <_puts_r+0x2e>
 802bd8c:	6923      	ldr	r3, [r4, #16]
 802bd8e:	2b00      	cmp	r3, #0
 802bd90:	d135      	bne.n	802bdfe <_puts_r+0x9a>
 802bd92:	4621      	mov	r1, r4
 802bd94:	4628      	mov	r0, r5
 802bd96:	f000 f8c5 	bl	802bf24 <__swsetup_r>
 802bd9a:	b380      	cbz	r0, 802bdfe <_puts_r+0x9a>
 802bd9c:	f04f 35ff 	mov.w	r5, #4294967295
 802bda0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802bda2:	07da      	lsls	r2, r3, #31
 802bda4:	d405      	bmi.n	802bdb2 <_puts_r+0x4e>
 802bda6:	89a3      	ldrh	r3, [r4, #12]
 802bda8:	059b      	lsls	r3, r3, #22
 802bdaa:	d402      	bmi.n	802bdb2 <_puts_r+0x4e>
 802bdac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802bdae:	f000 f9dd 	bl	802c16c <__retarget_lock_release_recursive>
 802bdb2:	4628      	mov	r0, r5
 802bdb4:	bd70      	pop	{r4, r5, r6, pc}
 802bdb6:	2b00      	cmp	r3, #0
 802bdb8:	da04      	bge.n	802bdc4 <_puts_r+0x60>
 802bdba:	69a2      	ldr	r2, [r4, #24]
 802bdbc:	429a      	cmp	r2, r3
 802bdbe:	dc17      	bgt.n	802bdf0 <_puts_r+0x8c>
 802bdc0:	290a      	cmp	r1, #10
 802bdc2:	d015      	beq.n	802bdf0 <_puts_r+0x8c>
 802bdc4:	6823      	ldr	r3, [r4, #0]
 802bdc6:	1c5a      	adds	r2, r3, #1
 802bdc8:	6022      	str	r2, [r4, #0]
 802bdca:	7019      	strb	r1, [r3, #0]
 802bdcc:	68a3      	ldr	r3, [r4, #8]
 802bdce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802bdd2:	3b01      	subs	r3, #1
 802bdd4:	60a3      	str	r3, [r4, #8]
 802bdd6:	2900      	cmp	r1, #0
 802bdd8:	d1ed      	bne.n	802bdb6 <_puts_r+0x52>
 802bdda:	2b00      	cmp	r3, #0
 802bddc:	da11      	bge.n	802be02 <_puts_r+0x9e>
 802bdde:	4622      	mov	r2, r4
 802bde0:	210a      	movs	r1, #10
 802bde2:	4628      	mov	r0, r5
 802bde4:	f000 f85f 	bl	802bea6 <__swbuf_r>
 802bde8:	3001      	adds	r0, #1
 802bdea:	d0d7      	beq.n	802bd9c <_puts_r+0x38>
 802bdec:	250a      	movs	r5, #10
 802bdee:	e7d7      	b.n	802bda0 <_puts_r+0x3c>
 802bdf0:	4622      	mov	r2, r4
 802bdf2:	4628      	mov	r0, r5
 802bdf4:	f000 f857 	bl	802bea6 <__swbuf_r>
 802bdf8:	3001      	adds	r0, #1
 802bdfa:	d1e7      	bne.n	802bdcc <_puts_r+0x68>
 802bdfc:	e7ce      	b.n	802bd9c <_puts_r+0x38>
 802bdfe:	3e01      	subs	r6, #1
 802be00:	e7e4      	b.n	802bdcc <_puts_r+0x68>
 802be02:	6823      	ldr	r3, [r4, #0]
 802be04:	1c5a      	adds	r2, r3, #1
 802be06:	6022      	str	r2, [r4, #0]
 802be08:	220a      	movs	r2, #10
 802be0a:	701a      	strb	r2, [r3, #0]
 802be0c:	e7ee      	b.n	802bdec <_puts_r+0x88>
	...

0802be10 <puts>:
 802be10:	4b02      	ldr	r3, [pc, #8]	@ (802be1c <puts+0xc>)
 802be12:	4601      	mov	r1, r0
 802be14:	6818      	ldr	r0, [r3, #0]
 802be16:	f7ff bfa5 	b.w	802bd64 <_puts_r>
 802be1a:	bf00      	nop
 802be1c:	200000a8 	.word	0x200000a8

0802be20 <__sread>:
 802be20:	b510      	push	{r4, lr}
 802be22:	460c      	mov	r4, r1
 802be24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802be28:	f000 f92c 	bl	802c084 <_read_r>
 802be2c:	2800      	cmp	r0, #0
 802be2e:	bfab      	itete	ge
 802be30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802be32:	89a3      	ldrhlt	r3, [r4, #12]
 802be34:	181b      	addge	r3, r3, r0
 802be36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802be3a:	bfac      	ite	ge
 802be3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 802be3e:	81a3      	strhlt	r3, [r4, #12]
 802be40:	bd10      	pop	{r4, pc}

0802be42 <__swrite>:
 802be42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802be46:	461f      	mov	r7, r3
 802be48:	898b      	ldrh	r3, [r1, #12]
 802be4a:	4605      	mov	r5, r0
 802be4c:	460c      	mov	r4, r1
 802be4e:	05db      	lsls	r3, r3, #23
 802be50:	4616      	mov	r6, r2
 802be52:	d505      	bpl.n	802be60 <__swrite+0x1e>
 802be54:	2302      	movs	r3, #2
 802be56:	2200      	movs	r2, #0
 802be58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802be5c:	f000 f900 	bl	802c060 <_lseek_r>
 802be60:	89a3      	ldrh	r3, [r4, #12]
 802be62:	4632      	mov	r2, r6
 802be64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802be68:	4628      	mov	r0, r5
 802be6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802be6e:	81a3      	strh	r3, [r4, #12]
 802be70:	463b      	mov	r3, r7
 802be72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802be76:	f000 b93b 	b.w	802c0f0 <_write_r>

0802be7a <__sseek>:
 802be7a:	b510      	push	{r4, lr}
 802be7c:	460c      	mov	r4, r1
 802be7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802be82:	f000 f8ed 	bl	802c060 <_lseek_r>
 802be86:	1c43      	adds	r3, r0, #1
 802be88:	89a3      	ldrh	r3, [r4, #12]
 802be8a:	bf15      	itete	ne
 802be8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 802be8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802be92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802be96:	81a3      	strheq	r3, [r4, #12]
 802be98:	bf18      	it	ne
 802be9a:	81a3      	strhne	r3, [r4, #12]
 802be9c:	bd10      	pop	{r4, pc}

0802be9e <__sclose>:
 802be9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bea2:	f000 b8cd 	b.w	802c040 <_close_r>

0802bea6 <__swbuf_r>:
 802bea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bea8:	460e      	mov	r6, r1
 802beaa:	4614      	mov	r4, r2
 802beac:	4605      	mov	r5, r0
 802beae:	b118      	cbz	r0, 802beb8 <__swbuf_r+0x12>
 802beb0:	6a03      	ldr	r3, [r0, #32]
 802beb2:	b90b      	cbnz	r3, 802beb8 <__swbuf_r+0x12>
 802beb4:	f7ff fefc 	bl	802bcb0 <__sinit>
 802beb8:	69a3      	ldr	r3, [r4, #24]
 802beba:	60a3      	str	r3, [r4, #8]
 802bebc:	89a3      	ldrh	r3, [r4, #12]
 802bebe:	071a      	lsls	r2, r3, #28
 802bec0:	d501      	bpl.n	802bec6 <__swbuf_r+0x20>
 802bec2:	6923      	ldr	r3, [r4, #16]
 802bec4:	b943      	cbnz	r3, 802bed8 <__swbuf_r+0x32>
 802bec6:	4621      	mov	r1, r4
 802bec8:	4628      	mov	r0, r5
 802beca:	f000 f82b 	bl	802bf24 <__swsetup_r>
 802bece:	b118      	cbz	r0, 802bed8 <__swbuf_r+0x32>
 802bed0:	f04f 37ff 	mov.w	r7, #4294967295
 802bed4:	4638      	mov	r0, r7
 802bed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802bed8:	6823      	ldr	r3, [r4, #0]
 802beda:	b2f6      	uxtb	r6, r6
 802bedc:	6922      	ldr	r2, [r4, #16]
 802bede:	4637      	mov	r7, r6
 802bee0:	1a98      	subs	r0, r3, r2
 802bee2:	6963      	ldr	r3, [r4, #20]
 802bee4:	4283      	cmp	r3, r0
 802bee6:	dc05      	bgt.n	802bef4 <__swbuf_r+0x4e>
 802bee8:	4621      	mov	r1, r4
 802beea:	4628      	mov	r0, r5
 802beec:	f000 fd4a 	bl	802c984 <_fflush_r>
 802bef0:	2800      	cmp	r0, #0
 802bef2:	d1ed      	bne.n	802bed0 <__swbuf_r+0x2a>
 802bef4:	68a3      	ldr	r3, [r4, #8]
 802bef6:	3b01      	subs	r3, #1
 802bef8:	60a3      	str	r3, [r4, #8]
 802befa:	6823      	ldr	r3, [r4, #0]
 802befc:	1c5a      	adds	r2, r3, #1
 802befe:	6022      	str	r2, [r4, #0]
 802bf00:	701e      	strb	r6, [r3, #0]
 802bf02:	1c43      	adds	r3, r0, #1
 802bf04:	6962      	ldr	r2, [r4, #20]
 802bf06:	429a      	cmp	r2, r3
 802bf08:	d004      	beq.n	802bf14 <__swbuf_r+0x6e>
 802bf0a:	89a3      	ldrh	r3, [r4, #12]
 802bf0c:	07db      	lsls	r3, r3, #31
 802bf0e:	d5e1      	bpl.n	802bed4 <__swbuf_r+0x2e>
 802bf10:	2e0a      	cmp	r6, #10
 802bf12:	d1df      	bne.n	802bed4 <__swbuf_r+0x2e>
 802bf14:	4621      	mov	r1, r4
 802bf16:	4628      	mov	r0, r5
 802bf18:	f000 fd34 	bl	802c984 <_fflush_r>
 802bf1c:	2800      	cmp	r0, #0
 802bf1e:	d0d9      	beq.n	802bed4 <__swbuf_r+0x2e>
 802bf20:	e7d6      	b.n	802bed0 <__swbuf_r+0x2a>
	...

0802bf24 <__swsetup_r>:
 802bf24:	b538      	push	{r3, r4, r5, lr}
 802bf26:	4b29      	ldr	r3, [pc, #164]	@ (802bfcc <__swsetup_r+0xa8>)
 802bf28:	4605      	mov	r5, r0
 802bf2a:	460c      	mov	r4, r1
 802bf2c:	6818      	ldr	r0, [r3, #0]
 802bf2e:	b118      	cbz	r0, 802bf38 <__swsetup_r+0x14>
 802bf30:	6a03      	ldr	r3, [r0, #32]
 802bf32:	b90b      	cbnz	r3, 802bf38 <__swsetup_r+0x14>
 802bf34:	f7ff febc 	bl	802bcb0 <__sinit>
 802bf38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bf3c:	0719      	lsls	r1, r3, #28
 802bf3e:	d422      	bmi.n	802bf86 <__swsetup_r+0x62>
 802bf40:	06da      	lsls	r2, r3, #27
 802bf42:	d407      	bmi.n	802bf54 <__swsetup_r+0x30>
 802bf44:	2209      	movs	r2, #9
 802bf46:	602a      	str	r2, [r5, #0]
 802bf48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802bf4c:	f04f 30ff 	mov.w	r0, #4294967295
 802bf50:	81a3      	strh	r3, [r4, #12]
 802bf52:	e033      	b.n	802bfbc <__swsetup_r+0x98>
 802bf54:	0758      	lsls	r0, r3, #29
 802bf56:	d512      	bpl.n	802bf7e <__swsetup_r+0x5a>
 802bf58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802bf5a:	b141      	cbz	r1, 802bf6e <__swsetup_r+0x4a>
 802bf5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802bf60:	4299      	cmp	r1, r3
 802bf62:	d002      	beq.n	802bf6a <__swsetup_r+0x46>
 802bf64:	4628      	mov	r0, r5
 802bf66:	f000 f96d 	bl	802c244 <_free_r>
 802bf6a:	2300      	movs	r3, #0
 802bf6c:	6363      	str	r3, [r4, #52]	@ 0x34
 802bf6e:	89a3      	ldrh	r3, [r4, #12]
 802bf70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802bf74:	81a3      	strh	r3, [r4, #12]
 802bf76:	2300      	movs	r3, #0
 802bf78:	6063      	str	r3, [r4, #4]
 802bf7a:	6923      	ldr	r3, [r4, #16]
 802bf7c:	6023      	str	r3, [r4, #0]
 802bf7e:	89a3      	ldrh	r3, [r4, #12]
 802bf80:	f043 0308 	orr.w	r3, r3, #8
 802bf84:	81a3      	strh	r3, [r4, #12]
 802bf86:	6923      	ldr	r3, [r4, #16]
 802bf88:	b94b      	cbnz	r3, 802bf9e <__swsetup_r+0x7a>
 802bf8a:	89a3      	ldrh	r3, [r4, #12]
 802bf8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802bf90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802bf94:	d003      	beq.n	802bf9e <__swsetup_r+0x7a>
 802bf96:	4621      	mov	r1, r4
 802bf98:	4628      	mov	r0, r5
 802bf9a:	f000 fd40 	bl	802ca1e <__smakebuf_r>
 802bf9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bfa2:	f013 0201 	ands.w	r2, r3, #1
 802bfa6:	d00a      	beq.n	802bfbe <__swsetup_r+0x9a>
 802bfa8:	2200      	movs	r2, #0
 802bfaa:	60a2      	str	r2, [r4, #8]
 802bfac:	6962      	ldr	r2, [r4, #20]
 802bfae:	4252      	negs	r2, r2
 802bfb0:	61a2      	str	r2, [r4, #24]
 802bfb2:	6922      	ldr	r2, [r4, #16]
 802bfb4:	b942      	cbnz	r2, 802bfc8 <__swsetup_r+0xa4>
 802bfb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802bfba:	d1c5      	bne.n	802bf48 <__swsetup_r+0x24>
 802bfbc:	bd38      	pop	{r3, r4, r5, pc}
 802bfbe:	0799      	lsls	r1, r3, #30
 802bfc0:	bf58      	it	pl
 802bfc2:	6962      	ldrpl	r2, [r4, #20]
 802bfc4:	60a2      	str	r2, [r4, #8]
 802bfc6:	e7f4      	b.n	802bfb2 <__swsetup_r+0x8e>
 802bfc8:	2000      	movs	r0, #0
 802bfca:	e7f7      	b.n	802bfbc <__swsetup_r+0x98>
 802bfcc:	200000a8 	.word	0x200000a8

0802bfd0 <memset>:
 802bfd0:	4402      	add	r2, r0
 802bfd2:	4603      	mov	r3, r0
 802bfd4:	4293      	cmp	r3, r2
 802bfd6:	d100      	bne.n	802bfda <memset+0xa>
 802bfd8:	4770      	bx	lr
 802bfda:	f803 1b01 	strb.w	r1, [r3], #1
 802bfde:	e7f9      	b.n	802bfd4 <memset+0x4>

0802bfe0 <_raise_r>:
 802bfe0:	291f      	cmp	r1, #31
 802bfe2:	b538      	push	{r3, r4, r5, lr}
 802bfe4:	4605      	mov	r5, r0
 802bfe6:	460c      	mov	r4, r1
 802bfe8:	d904      	bls.n	802bff4 <_raise_r+0x14>
 802bfea:	2316      	movs	r3, #22
 802bfec:	6003      	str	r3, [r0, #0]
 802bfee:	f04f 30ff 	mov.w	r0, #4294967295
 802bff2:	bd38      	pop	{r3, r4, r5, pc}
 802bff4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802bff6:	b112      	cbz	r2, 802bffe <_raise_r+0x1e>
 802bff8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802bffc:	b94b      	cbnz	r3, 802c012 <_raise_r+0x32>
 802bffe:	4628      	mov	r0, r5
 802c000:	f000 f864 	bl	802c0cc <_getpid_r>
 802c004:	4622      	mov	r2, r4
 802c006:	4601      	mov	r1, r0
 802c008:	4628      	mov	r0, r5
 802c00a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c00e:	f000 b84b 	b.w	802c0a8 <_kill_r>
 802c012:	2b01      	cmp	r3, #1
 802c014:	d00a      	beq.n	802c02c <_raise_r+0x4c>
 802c016:	1c59      	adds	r1, r3, #1
 802c018:	d103      	bne.n	802c022 <_raise_r+0x42>
 802c01a:	2316      	movs	r3, #22
 802c01c:	6003      	str	r3, [r0, #0]
 802c01e:	2001      	movs	r0, #1
 802c020:	e7e7      	b.n	802bff2 <_raise_r+0x12>
 802c022:	2100      	movs	r1, #0
 802c024:	4620      	mov	r0, r4
 802c026:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802c02a:	4798      	blx	r3
 802c02c:	2000      	movs	r0, #0
 802c02e:	e7e0      	b.n	802bff2 <_raise_r+0x12>

0802c030 <raise>:
 802c030:	4b02      	ldr	r3, [pc, #8]	@ (802c03c <raise+0xc>)
 802c032:	4601      	mov	r1, r0
 802c034:	6818      	ldr	r0, [r3, #0]
 802c036:	f7ff bfd3 	b.w	802bfe0 <_raise_r>
 802c03a:	bf00      	nop
 802c03c:	200000a8 	.word	0x200000a8

0802c040 <_close_r>:
 802c040:	b538      	push	{r3, r4, r5, lr}
 802c042:	2300      	movs	r3, #0
 802c044:	4d05      	ldr	r5, [pc, #20]	@ (802c05c <_close_r+0x1c>)
 802c046:	4604      	mov	r4, r0
 802c048:	4608      	mov	r0, r1
 802c04a:	602b      	str	r3, [r5, #0]
 802c04c:	f7d5 fd24 	bl	8001a98 <_close>
 802c050:	1c43      	adds	r3, r0, #1
 802c052:	d102      	bne.n	802c05a <_close_r+0x1a>
 802c054:	682b      	ldr	r3, [r5, #0]
 802c056:	b103      	cbz	r3, 802c05a <_close_r+0x1a>
 802c058:	6023      	str	r3, [r4, #0]
 802c05a:	bd38      	pop	{r3, r4, r5, pc}
 802c05c:	2005c4c8 	.word	0x2005c4c8

0802c060 <_lseek_r>:
 802c060:	b538      	push	{r3, r4, r5, lr}
 802c062:	4604      	mov	r4, r0
 802c064:	4d06      	ldr	r5, [pc, #24]	@ (802c080 <_lseek_r+0x20>)
 802c066:	4608      	mov	r0, r1
 802c068:	4611      	mov	r1, r2
 802c06a:	2200      	movs	r2, #0
 802c06c:	602a      	str	r2, [r5, #0]
 802c06e:	461a      	mov	r2, r3
 802c070:	f7d5 fd39 	bl	8001ae6 <_lseek>
 802c074:	1c43      	adds	r3, r0, #1
 802c076:	d102      	bne.n	802c07e <_lseek_r+0x1e>
 802c078:	682b      	ldr	r3, [r5, #0]
 802c07a:	b103      	cbz	r3, 802c07e <_lseek_r+0x1e>
 802c07c:	6023      	str	r3, [r4, #0]
 802c07e:	bd38      	pop	{r3, r4, r5, pc}
 802c080:	2005c4c8 	.word	0x2005c4c8

0802c084 <_read_r>:
 802c084:	b538      	push	{r3, r4, r5, lr}
 802c086:	4604      	mov	r4, r0
 802c088:	4d06      	ldr	r5, [pc, #24]	@ (802c0a4 <_read_r+0x20>)
 802c08a:	4608      	mov	r0, r1
 802c08c:	4611      	mov	r1, r2
 802c08e:	2200      	movs	r2, #0
 802c090:	602a      	str	r2, [r5, #0]
 802c092:	461a      	mov	r2, r3
 802c094:	f7d5 fcc7 	bl	8001a26 <_read>
 802c098:	1c43      	adds	r3, r0, #1
 802c09a:	d102      	bne.n	802c0a2 <_read_r+0x1e>
 802c09c:	682b      	ldr	r3, [r5, #0]
 802c09e:	b103      	cbz	r3, 802c0a2 <_read_r+0x1e>
 802c0a0:	6023      	str	r3, [r4, #0]
 802c0a2:	bd38      	pop	{r3, r4, r5, pc}
 802c0a4:	2005c4c8 	.word	0x2005c4c8

0802c0a8 <_kill_r>:
 802c0a8:	b538      	push	{r3, r4, r5, lr}
 802c0aa:	2300      	movs	r3, #0
 802c0ac:	4d06      	ldr	r5, [pc, #24]	@ (802c0c8 <_kill_r+0x20>)
 802c0ae:	4604      	mov	r4, r0
 802c0b0:	4608      	mov	r0, r1
 802c0b2:	4611      	mov	r1, r2
 802c0b4:	602b      	str	r3, [r5, #0]
 802c0b6:	f7d5 fc9b 	bl	80019f0 <_kill>
 802c0ba:	1c43      	adds	r3, r0, #1
 802c0bc:	d102      	bne.n	802c0c4 <_kill_r+0x1c>
 802c0be:	682b      	ldr	r3, [r5, #0]
 802c0c0:	b103      	cbz	r3, 802c0c4 <_kill_r+0x1c>
 802c0c2:	6023      	str	r3, [r4, #0]
 802c0c4:	bd38      	pop	{r3, r4, r5, pc}
 802c0c6:	bf00      	nop
 802c0c8:	2005c4c8 	.word	0x2005c4c8

0802c0cc <_getpid_r>:
 802c0cc:	f7d5 bc88 	b.w	80019e0 <_getpid>

0802c0d0 <_sbrk_r>:
 802c0d0:	b538      	push	{r3, r4, r5, lr}
 802c0d2:	2300      	movs	r3, #0
 802c0d4:	4d05      	ldr	r5, [pc, #20]	@ (802c0ec <_sbrk_r+0x1c>)
 802c0d6:	4604      	mov	r4, r0
 802c0d8:	4608      	mov	r0, r1
 802c0da:	602b      	str	r3, [r5, #0]
 802c0dc:	f7d5 fd10 	bl	8001b00 <_sbrk>
 802c0e0:	1c43      	adds	r3, r0, #1
 802c0e2:	d102      	bne.n	802c0ea <_sbrk_r+0x1a>
 802c0e4:	682b      	ldr	r3, [r5, #0]
 802c0e6:	b103      	cbz	r3, 802c0ea <_sbrk_r+0x1a>
 802c0e8:	6023      	str	r3, [r4, #0]
 802c0ea:	bd38      	pop	{r3, r4, r5, pc}
 802c0ec:	2005c4c8 	.word	0x2005c4c8

0802c0f0 <_write_r>:
 802c0f0:	b538      	push	{r3, r4, r5, lr}
 802c0f2:	4604      	mov	r4, r0
 802c0f4:	4d06      	ldr	r5, [pc, #24]	@ (802c110 <_write_r+0x20>)
 802c0f6:	4608      	mov	r0, r1
 802c0f8:	4611      	mov	r1, r2
 802c0fa:	2200      	movs	r2, #0
 802c0fc:	602a      	str	r2, [r5, #0]
 802c0fe:	461a      	mov	r2, r3
 802c100:	f7d5 fcae 	bl	8001a60 <_write>
 802c104:	1c43      	adds	r3, r0, #1
 802c106:	d102      	bne.n	802c10e <_write_r+0x1e>
 802c108:	682b      	ldr	r3, [r5, #0]
 802c10a:	b103      	cbz	r3, 802c10e <_write_r+0x1e>
 802c10c:	6023      	str	r3, [r4, #0]
 802c10e:	bd38      	pop	{r3, r4, r5, pc}
 802c110:	2005c4c8 	.word	0x2005c4c8

0802c114 <__errno>:
 802c114:	4b01      	ldr	r3, [pc, #4]	@ (802c11c <__errno+0x8>)
 802c116:	6818      	ldr	r0, [r3, #0]
 802c118:	4770      	bx	lr
 802c11a:	bf00      	nop
 802c11c:	200000a8 	.word	0x200000a8

0802c120 <__libc_init_array>:
 802c120:	b570      	push	{r4, r5, r6, lr}
 802c122:	4d0d      	ldr	r5, [pc, #52]	@ (802c158 <__libc_init_array+0x38>)
 802c124:	2600      	movs	r6, #0
 802c126:	4c0d      	ldr	r4, [pc, #52]	@ (802c15c <__libc_init_array+0x3c>)
 802c128:	1b64      	subs	r4, r4, r5
 802c12a:	10a4      	asrs	r4, r4, #2
 802c12c:	42a6      	cmp	r6, r4
 802c12e:	d109      	bne.n	802c144 <__libc_init_array+0x24>
 802c130:	4d0b      	ldr	r5, [pc, #44]	@ (802c160 <__libc_init_array+0x40>)
 802c132:	2600      	movs	r6, #0
 802c134:	4c0b      	ldr	r4, [pc, #44]	@ (802c164 <__libc_init_array+0x44>)
 802c136:	f000 fcdf 	bl	802caf8 <_init>
 802c13a:	1b64      	subs	r4, r4, r5
 802c13c:	10a4      	asrs	r4, r4, #2
 802c13e:	42a6      	cmp	r6, r4
 802c140:	d105      	bne.n	802c14e <__libc_init_array+0x2e>
 802c142:	bd70      	pop	{r4, r5, r6, pc}
 802c144:	f855 3b04 	ldr.w	r3, [r5], #4
 802c148:	3601      	adds	r6, #1
 802c14a:	4798      	blx	r3
 802c14c:	e7ee      	b.n	802c12c <__libc_init_array+0xc>
 802c14e:	f855 3b04 	ldr.w	r3, [r5], #4
 802c152:	3601      	adds	r6, #1
 802c154:	4798      	blx	r3
 802c156:	e7f2      	b.n	802c13e <__libc_init_array+0x1e>
 802c158:	08045ab4 	.word	0x08045ab4
 802c15c:	08045ab4 	.word	0x08045ab4
 802c160:	08045ab4 	.word	0x08045ab4
 802c164:	08045ac8 	.word	0x08045ac8

0802c168 <__retarget_lock_init_recursive>:
 802c168:	4770      	bx	lr

0802c16a <__retarget_lock_acquire_recursive>:
 802c16a:	4770      	bx	lr

0802c16c <__retarget_lock_release_recursive>:
 802c16c:	4770      	bx	lr

0802c16e <memcpy>:
 802c16e:	440a      	add	r2, r1
 802c170:	1e43      	subs	r3, r0, #1
 802c172:	4291      	cmp	r1, r2
 802c174:	d100      	bne.n	802c178 <memcpy+0xa>
 802c176:	4770      	bx	lr
 802c178:	b510      	push	{r4, lr}
 802c17a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802c17e:	4291      	cmp	r1, r2
 802c180:	f803 4f01 	strb.w	r4, [r3, #1]!
 802c184:	d1f9      	bne.n	802c17a <memcpy+0xc>
 802c186:	bd10      	pop	{r4, pc}

0802c188 <__register_exitproc>:
 802c188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c18c:	4d28      	ldr	r5, [pc, #160]	@ (802c230 <__register_exitproc+0xa8>)
 802c18e:	4607      	mov	r7, r0
 802c190:	4691      	mov	r9, r2
 802c192:	460e      	mov	r6, r1
 802c194:	6828      	ldr	r0, [r5, #0]
 802c196:	4698      	mov	r8, r3
 802c198:	f7ff ffe7 	bl	802c16a <__retarget_lock_acquire_recursive>
 802c19c:	4a25      	ldr	r2, [pc, #148]	@ (802c234 <__register_exitproc+0xac>)
 802c19e:	6814      	ldr	r4, [r2, #0]
 802c1a0:	b93c      	cbnz	r4, 802c1b2 <__register_exitproc+0x2a>
 802c1a2:	4b25      	ldr	r3, [pc, #148]	@ (802c238 <__register_exitproc+0xb0>)
 802c1a4:	6013      	str	r3, [r2, #0]
 802c1a6:	4a25      	ldr	r2, [pc, #148]	@ (802c23c <__register_exitproc+0xb4>)
 802c1a8:	b112      	cbz	r2, 802c1b0 <__register_exitproc+0x28>
 802c1aa:	6812      	ldr	r2, [r2, #0]
 802c1ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802c1b0:	4c21      	ldr	r4, [pc, #132]	@ (802c238 <__register_exitproc+0xb0>)
 802c1b2:	6863      	ldr	r3, [r4, #4]
 802c1b4:	2b1f      	cmp	r3, #31
 802c1b6:	dd06      	ble.n	802c1c6 <__register_exitproc+0x3e>
 802c1b8:	6828      	ldr	r0, [r5, #0]
 802c1ba:	f7ff ffd7 	bl	802c16c <__retarget_lock_release_recursive>
 802c1be:	f04f 30ff 	mov.w	r0, #4294967295
 802c1c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c1c6:	b33f      	cbz	r7, 802c218 <__register_exitproc+0x90>
 802c1c8:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802c1cc:	b968      	cbnz	r0, 802c1ea <__register_exitproc+0x62>
 802c1ce:	4b1c      	ldr	r3, [pc, #112]	@ (802c240 <__register_exitproc+0xb8>)
 802c1d0:	2b00      	cmp	r3, #0
 802c1d2:	d0f1      	beq.n	802c1b8 <__register_exitproc+0x30>
 802c1d4:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802c1d8:	f7ff fc12 	bl	802ba00 <malloc>
 802c1dc:	2800      	cmp	r0, #0
 802c1de:	d0eb      	beq.n	802c1b8 <__register_exitproc+0x30>
 802c1e0:	2300      	movs	r3, #0
 802c1e2:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802c1e6:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802c1ea:	6863      	ldr	r3, [r4, #4]
 802c1ec:	2201      	movs	r2, #1
 802c1ee:	2f02      	cmp	r7, #2
 802c1f0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802c1f4:	fa02 f203 	lsl.w	r2, r2, r3
 802c1f8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802c1fc:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802c200:	ea43 0302 	orr.w	r3, r3, r2
 802c204:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802c208:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802c20c:	bf02      	ittt	eq
 802c20e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802c212:	4313      	orreq	r3, r2
 802c214:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802c218:	6863      	ldr	r3, [r4, #4]
 802c21a:	6828      	ldr	r0, [r5, #0]
 802c21c:	1c5a      	adds	r2, r3, #1
 802c21e:	3302      	adds	r3, #2
 802c220:	6062      	str	r2, [r4, #4]
 802c222:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802c226:	f7ff ffa1 	bl	802c16c <__retarget_lock_release_recursive>
 802c22a:	2000      	movs	r0, #0
 802c22c:	e7c9      	b.n	802c1c2 <__register_exitproc+0x3a>
 802c22e:	bf00      	nop
 802c230:	200000f8 	.word	0x200000f8
 802c234:	2005c55c 	.word	0x2005c55c
 802c238:	2005c4d0 	.word	0x2005c4d0
 802c23c:	0802efd8 	.word	0x0802efd8
 802c240:	0802ba01 	.word	0x0802ba01

0802c244 <_free_r>:
 802c244:	b538      	push	{r3, r4, r5, lr}
 802c246:	4605      	mov	r5, r0
 802c248:	2900      	cmp	r1, #0
 802c24a:	d041      	beq.n	802c2d0 <_free_r+0x8c>
 802c24c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c250:	1f0c      	subs	r4, r1, #4
 802c252:	2b00      	cmp	r3, #0
 802c254:	bfb8      	it	lt
 802c256:	18e4      	addlt	r4, r4, r3
 802c258:	f7ff fc84 	bl	802bb64 <__malloc_lock>
 802c25c:	4a1d      	ldr	r2, [pc, #116]	@ (802c2d4 <_free_r+0x90>)
 802c25e:	6813      	ldr	r3, [r2, #0]
 802c260:	b933      	cbnz	r3, 802c270 <_free_r+0x2c>
 802c262:	6063      	str	r3, [r4, #4]
 802c264:	6014      	str	r4, [r2, #0]
 802c266:	4628      	mov	r0, r5
 802c268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c26c:	f7ff bc80 	b.w	802bb70 <__malloc_unlock>
 802c270:	42a3      	cmp	r3, r4
 802c272:	d908      	bls.n	802c286 <_free_r+0x42>
 802c274:	6820      	ldr	r0, [r4, #0]
 802c276:	1821      	adds	r1, r4, r0
 802c278:	428b      	cmp	r3, r1
 802c27a:	bf01      	itttt	eq
 802c27c:	6819      	ldreq	r1, [r3, #0]
 802c27e:	685b      	ldreq	r3, [r3, #4]
 802c280:	1809      	addeq	r1, r1, r0
 802c282:	6021      	streq	r1, [r4, #0]
 802c284:	e7ed      	b.n	802c262 <_free_r+0x1e>
 802c286:	461a      	mov	r2, r3
 802c288:	685b      	ldr	r3, [r3, #4]
 802c28a:	b10b      	cbz	r3, 802c290 <_free_r+0x4c>
 802c28c:	42a3      	cmp	r3, r4
 802c28e:	d9fa      	bls.n	802c286 <_free_r+0x42>
 802c290:	6811      	ldr	r1, [r2, #0]
 802c292:	1850      	adds	r0, r2, r1
 802c294:	42a0      	cmp	r0, r4
 802c296:	d10b      	bne.n	802c2b0 <_free_r+0x6c>
 802c298:	6820      	ldr	r0, [r4, #0]
 802c29a:	4401      	add	r1, r0
 802c29c:	1850      	adds	r0, r2, r1
 802c29e:	6011      	str	r1, [r2, #0]
 802c2a0:	4283      	cmp	r3, r0
 802c2a2:	d1e0      	bne.n	802c266 <_free_r+0x22>
 802c2a4:	6818      	ldr	r0, [r3, #0]
 802c2a6:	685b      	ldr	r3, [r3, #4]
 802c2a8:	4408      	add	r0, r1
 802c2aa:	6053      	str	r3, [r2, #4]
 802c2ac:	6010      	str	r0, [r2, #0]
 802c2ae:	e7da      	b.n	802c266 <_free_r+0x22>
 802c2b0:	d902      	bls.n	802c2b8 <_free_r+0x74>
 802c2b2:	230c      	movs	r3, #12
 802c2b4:	602b      	str	r3, [r5, #0]
 802c2b6:	e7d6      	b.n	802c266 <_free_r+0x22>
 802c2b8:	6820      	ldr	r0, [r4, #0]
 802c2ba:	1821      	adds	r1, r4, r0
 802c2bc:	428b      	cmp	r3, r1
 802c2be:	bf02      	ittt	eq
 802c2c0:	6819      	ldreq	r1, [r3, #0]
 802c2c2:	685b      	ldreq	r3, [r3, #4]
 802c2c4:	1809      	addeq	r1, r1, r0
 802c2c6:	6063      	str	r3, [r4, #4]
 802c2c8:	bf08      	it	eq
 802c2ca:	6021      	streq	r1, [r4, #0]
 802c2cc:	6054      	str	r4, [r2, #4]
 802c2ce:	e7ca      	b.n	802c266 <_free_r+0x22>
 802c2d0:	bd38      	pop	{r3, r4, r5, pc}
 802c2d2:	bf00      	nop
 802c2d4:	2005c388 	.word	0x2005c388

0802c2d8 <__sfputc_r>:
 802c2d8:	6893      	ldr	r3, [r2, #8]
 802c2da:	3b01      	subs	r3, #1
 802c2dc:	2b00      	cmp	r3, #0
 802c2de:	b410      	push	{r4}
 802c2e0:	6093      	str	r3, [r2, #8]
 802c2e2:	da08      	bge.n	802c2f6 <__sfputc_r+0x1e>
 802c2e4:	6994      	ldr	r4, [r2, #24]
 802c2e6:	42a3      	cmp	r3, r4
 802c2e8:	db01      	blt.n	802c2ee <__sfputc_r+0x16>
 802c2ea:	290a      	cmp	r1, #10
 802c2ec:	d103      	bne.n	802c2f6 <__sfputc_r+0x1e>
 802c2ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c2f2:	f7ff bdd8 	b.w	802bea6 <__swbuf_r>
 802c2f6:	6813      	ldr	r3, [r2, #0]
 802c2f8:	1c58      	adds	r0, r3, #1
 802c2fa:	6010      	str	r0, [r2, #0]
 802c2fc:	4608      	mov	r0, r1
 802c2fe:	7019      	strb	r1, [r3, #0]
 802c300:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c304:	4770      	bx	lr

0802c306 <__sfputs_r>:
 802c306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c308:	4606      	mov	r6, r0
 802c30a:	460f      	mov	r7, r1
 802c30c:	4614      	mov	r4, r2
 802c30e:	18d5      	adds	r5, r2, r3
 802c310:	42ac      	cmp	r4, r5
 802c312:	d101      	bne.n	802c318 <__sfputs_r+0x12>
 802c314:	2000      	movs	r0, #0
 802c316:	e007      	b.n	802c328 <__sfputs_r+0x22>
 802c318:	463a      	mov	r2, r7
 802c31a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c31e:	4630      	mov	r0, r6
 802c320:	f7ff ffda 	bl	802c2d8 <__sfputc_r>
 802c324:	1c43      	adds	r3, r0, #1
 802c326:	d1f3      	bne.n	802c310 <__sfputs_r+0xa>
 802c328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802c32c <_vfiprintf_r>:
 802c32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c330:	460d      	mov	r5, r1
 802c332:	b09d      	sub	sp, #116	@ 0x74
 802c334:	4614      	mov	r4, r2
 802c336:	4698      	mov	r8, r3
 802c338:	4606      	mov	r6, r0
 802c33a:	b118      	cbz	r0, 802c344 <_vfiprintf_r+0x18>
 802c33c:	6a03      	ldr	r3, [r0, #32]
 802c33e:	b90b      	cbnz	r3, 802c344 <_vfiprintf_r+0x18>
 802c340:	f7ff fcb6 	bl	802bcb0 <__sinit>
 802c344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802c346:	07d9      	lsls	r1, r3, #31
 802c348:	d405      	bmi.n	802c356 <_vfiprintf_r+0x2a>
 802c34a:	89ab      	ldrh	r3, [r5, #12]
 802c34c:	059a      	lsls	r2, r3, #22
 802c34e:	d402      	bmi.n	802c356 <_vfiprintf_r+0x2a>
 802c350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802c352:	f7ff ff0a 	bl	802c16a <__retarget_lock_acquire_recursive>
 802c356:	89ab      	ldrh	r3, [r5, #12]
 802c358:	071b      	lsls	r3, r3, #28
 802c35a:	d501      	bpl.n	802c360 <_vfiprintf_r+0x34>
 802c35c:	692b      	ldr	r3, [r5, #16]
 802c35e:	b99b      	cbnz	r3, 802c388 <_vfiprintf_r+0x5c>
 802c360:	4629      	mov	r1, r5
 802c362:	4630      	mov	r0, r6
 802c364:	f7ff fdde 	bl	802bf24 <__swsetup_r>
 802c368:	b170      	cbz	r0, 802c388 <_vfiprintf_r+0x5c>
 802c36a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802c36c:	07dc      	lsls	r4, r3, #31
 802c36e:	d504      	bpl.n	802c37a <_vfiprintf_r+0x4e>
 802c370:	f04f 30ff 	mov.w	r0, #4294967295
 802c374:	b01d      	add	sp, #116	@ 0x74
 802c376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c37a:	89ab      	ldrh	r3, [r5, #12]
 802c37c:	0598      	lsls	r0, r3, #22
 802c37e:	d4f7      	bmi.n	802c370 <_vfiprintf_r+0x44>
 802c380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802c382:	f7ff fef3 	bl	802c16c <__retarget_lock_release_recursive>
 802c386:	e7f3      	b.n	802c370 <_vfiprintf_r+0x44>
 802c388:	2300      	movs	r3, #0
 802c38a:	f8cd 800c 	str.w	r8, [sp, #12]
 802c38e:	f04f 0901 	mov.w	r9, #1
 802c392:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 802c548 <_vfiprintf_r+0x21c>
 802c396:	9309      	str	r3, [sp, #36]	@ 0x24
 802c398:	2320      	movs	r3, #32
 802c39a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802c39e:	2330      	movs	r3, #48	@ 0x30
 802c3a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802c3a4:	4623      	mov	r3, r4
 802c3a6:	469a      	mov	sl, r3
 802c3a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c3ac:	b10a      	cbz	r2, 802c3b2 <_vfiprintf_r+0x86>
 802c3ae:	2a25      	cmp	r2, #37	@ 0x25
 802c3b0:	d1f9      	bne.n	802c3a6 <_vfiprintf_r+0x7a>
 802c3b2:	ebba 0b04 	subs.w	fp, sl, r4
 802c3b6:	d00b      	beq.n	802c3d0 <_vfiprintf_r+0xa4>
 802c3b8:	465b      	mov	r3, fp
 802c3ba:	4622      	mov	r2, r4
 802c3bc:	4629      	mov	r1, r5
 802c3be:	4630      	mov	r0, r6
 802c3c0:	f7ff ffa1 	bl	802c306 <__sfputs_r>
 802c3c4:	3001      	adds	r0, #1
 802c3c6:	f000 80a7 	beq.w	802c518 <_vfiprintf_r+0x1ec>
 802c3ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802c3cc:	445a      	add	r2, fp
 802c3ce:	9209      	str	r2, [sp, #36]	@ 0x24
 802c3d0:	f89a 3000 	ldrb.w	r3, [sl]
 802c3d4:	2b00      	cmp	r3, #0
 802c3d6:	f000 809f 	beq.w	802c518 <_vfiprintf_r+0x1ec>
 802c3da:	2300      	movs	r3, #0
 802c3dc:	f04f 32ff 	mov.w	r2, #4294967295
 802c3e0:	f10a 0a01 	add.w	sl, sl, #1
 802c3e4:	9304      	str	r3, [sp, #16]
 802c3e6:	9307      	str	r3, [sp, #28]
 802c3e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802c3ec:	931a      	str	r3, [sp, #104]	@ 0x68
 802c3ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802c3f2:	4654      	mov	r4, sl
 802c3f4:	2205      	movs	r2, #5
 802c3f6:	4854      	ldr	r0, [pc, #336]	@ (802c548 <_vfiprintf_r+0x21c>)
 802c3f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c3fc:	f000 fb6e 	bl	802cadc <memchr>
 802c400:	9a04      	ldr	r2, [sp, #16]
 802c402:	b9d8      	cbnz	r0, 802c43c <_vfiprintf_r+0x110>
 802c404:	06d1      	lsls	r1, r2, #27
 802c406:	bf44      	itt	mi
 802c408:	2320      	movmi	r3, #32
 802c40a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802c40e:	0713      	lsls	r3, r2, #28
 802c410:	bf44      	itt	mi
 802c412:	232b      	movmi	r3, #43	@ 0x2b
 802c414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802c418:	f89a 3000 	ldrb.w	r3, [sl]
 802c41c:	2b2a      	cmp	r3, #42	@ 0x2a
 802c41e:	d015      	beq.n	802c44c <_vfiprintf_r+0x120>
 802c420:	9a07      	ldr	r2, [sp, #28]
 802c422:	4654      	mov	r4, sl
 802c424:	2000      	movs	r0, #0
 802c426:	f04f 0c0a 	mov.w	ip, #10
 802c42a:	4621      	mov	r1, r4
 802c42c:	f811 3b01 	ldrb.w	r3, [r1], #1
 802c430:	3b30      	subs	r3, #48	@ 0x30
 802c432:	2b09      	cmp	r3, #9
 802c434:	d94b      	bls.n	802c4ce <_vfiprintf_r+0x1a2>
 802c436:	b1b0      	cbz	r0, 802c466 <_vfiprintf_r+0x13a>
 802c438:	9207      	str	r2, [sp, #28]
 802c43a:	e014      	b.n	802c466 <_vfiprintf_r+0x13a>
 802c43c:	eba0 0308 	sub.w	r3, r0, r8
 802c440:	46a2      	mov	sl, r4
 802c442:	fa09 f303 	lsl.w	r3, r9, r3
 802c446:	4313      	orrs	r3, r2
 802c448:	9304      	str	r3, [sp, #16]
 802c44a:	e7d2      	b.n	802c3f2 <_vfiprintf_r+0xc6>
 802c44c:	9b03      	ldr	r3, [sp, #12]
 802c44e:	1d19      	adds	r1, r3, #4
 802c450:	681b      	ldr	r3, [r3, #0]
 802c452:	2b00      	cmp	r3, #0
 802c454:	9103      	str	r1, [sp, #12]
 802c456:	bfbb      	ittet	lt
 802c458:	425b      	neglt	r3, r3
 802c45a:	f042 0202 	orrlt.w	r2, r2, #2
 802c45e:	9307      	strge	r3, [sp, #28]
 802c460:	9307      	strlt	r3, [sp, #28]
 802c462:	bfb8      	it	lt
 802c464:	9204      	strlt	r2, [sp, #16]
 802c466:	7823      	ldrb	r3, [r4, #0]
 802c468:	2b2e      	cmp	r3, #46	@ 0x2e
 802c46a:	d10a      	bne.n	802c482 <_vfiprintf_r+0x156>
 802c46c:	7863      	ldrb	r3, [r4, #1]
 802c46e:	2b2a      	cmp	r3, #42	@ 0x2a
 802c470:	d132      	bne.n	802c4d8 <_vfiprintf_r+0x1ac>
 802c472:	9b03      	ldr	r3, [sp, #12]
 802c474:	3402      	adds	r4, #2
 802c476:	1d1a      	adds	r2, r3, #4
 802c478:	681b      	ldr	r3, [r3, #0]
 802c47a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802c47e:	9203      	str	r2, [sp, #12]
 802c480:	9305      	str	r3, [sp, #20]
 802c482:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802c558 <_vfiprintf_r+0x22c>
 802c486:	2203      	movs	r2, #3
 802c488:	7821      	ldrb	r1, [r4, #0]
 802c48a:	4650      	mov	r0, sl
 802c48c:	f000 fb26 	bl	802cadc <memchr>
 802c490:	b138      	cbz	r0, 802c4a2 <_vfiprintf_r+0x176>
 802c492:	eba0 000a 	sub.w	r0, r0, sl
 802c496:	2240      	movs	r2, #64	@ 0x40
 802c498:	9b04      	ldr	r3, [sp, #16]
 802c49a:	3401      	adds	r4, #1
 802c49c:	4082      	lsls	r2, r0
 802c49e:	4313      	orrs	r3, r2
 802c4a0:	9304      	str	r3, [sp, #16]
 802c4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c4a6:	2206      	movs	r2, #6
 802c4a8:	4828      	ldr	r0, [pc, #160]	@ (802c54c <_vfiprintf_r+0x220>)
 802c4aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802c4ae:	f000 fb15 	bl	802cadc <memchr>
 802c4b2:	2800      	cmp	r0, #0
 802c4b4:	d03f      	beq.n	802c536 <_vfiprintf_r+0x20a>
 802c4b6:	4b26      	ldr	r3, [pc, #152]	@ (802c550 <_vfiprintf_r+0x224>)
 802c4b8:	bb1b      	cbnz	r3, 802c502 <_vfiprintf_r+0x1d6>
 802c4ba:	9b03      	ldr	r3, [sp, #12]
 802c4bc:	3307      	adds	r3, #7
 802c4be:	f023 0307 	bic.w	r3, r3, #7
 802c4c2:	3308      	adds	r3, #8
 802c4c4:	9303      	str	r3, [sp, #12]
 802c4c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c4c8:	443b      	add	r3, r7
 802c4ca:	9309      	str	r3, [sp, #36]	@ 0x24
 802c4cc:	e76a      	b.n	802c3a4 <_vfiprintf_r+0x78>
 802c4ce:	fb0c 3202 	mla	r2, ip, r2, r3
 802c4d2:	460c      	mov	r4, r1
 802c4d4:	2001      	movs	r0, #1
 802c4d6:	e7a8      	b.n	802c42a <_vfiprintf_r+0xfe>
 802c4d8:	2300      	movs	r3, #0
 802c4da:	3401      	adds	r4, #1
 802c4dc:	f04f 0c0a 	mov.w	ip, #10
 802c4e0:	4619      	mov	r1, r3
 802c4e2:	9305      	str	r3, [sp, #20]
 802c4e4:	4620      	mov	r0, r4
 802c4e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 802c4ea:	3a30      	subs	r2, #48	@ 0x30
 802c4ec:	2a09      	cmp	r2, #9
 802c4ee:	d903      	bls.n	802c4f8 <_vfiprintf_r+0x1cc>
 802c4f0:	2b00      	cmp	r3, #0
 802c4f2:	d0c6      	beq.n	802c482 <_vfiprintf_r+0x156>
 802c4f4:	9105      	str	r1, [sp, #20]
 802c4f6:	e7c4      	b.n	802c482 <_vfiprintf_r+0x156>
 802c4f8:	fb0c 2101 	mla	r1, ip, r1, r2
 802c4fc:	4604      	mov	r4, r0
 802c4fe:	2301      	movs	r3, #1
 802c500:	e7f0      	b.n	802c4e4 <_vfiprintf_r+0x1b8>
 802c502:	ab03      	add	r3, sp, #12
 802c504:	462a      	mov	r2, r5
 802c506:	a904      	add	r1, sp, #16
 802c508:	4630      	mov	r0, r6
 802c50a:	9300      	str	r3, [sp, #0]
 802c50c:	4b11      	ldr	r3, [pc, #68]	@ (802c554 <_vfiprintf_r+0x228>)
 802c50e:	f3af 8000 	nop.w
 802c512:	4607      	mov	r7, r0
 802c514:	1c78      	adds	r0, r7, #1
 802c516:	d1d6      	bne.n	802c4c6 <_vfiprintf_r+0x19a>
 802c518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802c51a:	07d9      	lsls	r1, r3, #31
 802c51c:	d405      	bmi.n	802c52a <_vfiprintf_r+0x1fe>
 802c51e:	89ab      	ldrh	r3, [r5, #12]
 802c520:	059a      	lsls	r2, r3, #22
 802c522:	d402      	bmi.n	802c52a <_vfiprintf_r+0x1fe>
 802c524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802c526:	f7ff fe21 	bl	802c16c <__retarget_lock_release_recursive>
 802c52a:	89ab      	ldrh	r3, [r5, #12]
 802c52c:	065b      	lsls	r3, r3, #25
 802c52e:	f53f af1f 	bmi.w	802c370 <_vfiprintf_r+0x44>
 802c532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802c534:	e71e      	b.n	802c374 <_vfiprintf_r+0x48>
 802c536:	ab03      	add	r3, sp, #12
 802c538:	462a      	mov	r2, r5
 802c53a:	a904      	add	r1, sp, #16
 802c53c:	4630      	mov	r0, r6
 802c53e:	9300      	str	r3, [sp, #0]
 802c540:	4b04      	ldr	r3, [pc, #16]	@ (802c554 <_vfiprintf_r+0x228>)
 802c542:	f000 f87d 	bl	802c640 <_printf_i>
 802c546:	e7e4      	b.n	802c512 <_vfiprintf_r+0x1e6>
 802c548:	0802efa4 	.word	0x0802efa4
 802c54c:	0802efae 	.word	0x0802efae
 802c550:	00000000 	.word	0x00000000
 802c554:	0802c307 	.word	0x0802c307
 802c558:	0802efaa 	.word	0x0802efaa

0802c55c <_printf_common>:
 802c55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c560:	4616      	mov	r6, r2
 802c562:	4698      	mov	r8, r3
 802c564:	688a      	ldr	r2, [r1, #8]
 802c566:	4607      	mov	r7, r0
 802c568:	690b      	ldr	r3, [r1, #16]
 802c56a:	460c      	mov	r4, r1
 802c56c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802c570:	4293      	cmp	r3, r2
 802c572:	bfb8      	it	lt
 802c574:	4613      	movlt	r3, r2
 802c576:	6033      	str	r3, [r6, #0]
 802c578:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802c57c:	b10a      	cbz	r2, 802c582 <_printf_common+0x26>
 802c57e:	3301      	adds	r3, #1
 802c580:	6033      	str	r3, [r6, #0]
 802c582:	6823      	ldr	r3, [r4, #0]
 802c584:	0699      	lsls	r1, r3, #26
 802c586:	bf42      	ittt	mi
 802c588:	6833      	ldrmi	r3, [r6, #0]
 802c58a:	3302      	addmi	r3, #2
 802c58c:	6033      	strmi	r3, [r6, #0]
 802c58e:	6825      	ldr	r5, [r4, #0]
 802c590:	f015 0506 	ands.w	r5, r5, #6
 802c594:	d106      	bne.n	802c5a4 <_printf_common+0x48>
 802c596:	f104 0a19 	add.w	sl, r4, #25
 802c59a:	68e3      	ldr	r3, [r4, #12]
 802c59c:	6832      	ldr	r2, [r6, #0]
 802c59e:	1a9b      	subs	r3, r3, r2
 802c5a0:	42ab      	cmp	r3, r5
 802c5a2:	dc2b      	bgt.n	802c5fc <_printf_common+0xa0>
 802c5a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802c5a8:	6822      	ldr	r2, [r4, #0]
 802c5aa:	3b00      	subs	r3, #0
 802c5ac:	bf18      	it	ne
 802c5ae:	2301      	movne	r3, #1
 802c5b0:	0692      	lsls	r2, r2, #26
 802c5b2:	d430      	bmi.n	802c616 <_printf_common+0xba>
 802c5b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802c5b8:	4641      	mov	r1, r8
 802c5ba:	4638      	mov	r0, r7
 802c5bc:	47c8      	blx	r9
 802c5be:	3001      	adds	r0, #1
 802c5c0:	d023      	beq.n	802c60a <_printf_common+0xae>
 802c5c2:	6823      	ldr	r3, [r4, #0]
 802c5c4:	341a      	adds	r4, #26
 802c5c6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 802c5ca:	f003 0306 	and.w	r3, r3, #6
 802c5ce:	2b04      	cmp	r3, #4
 802c5d0:	bf0a      	itet	eq
 802c5d2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 802c5d6:	2500      	movne	r5, #0
 802c5d8:	6833      	ldreq	r3, [r6, #0]
 802c5da:	f04f 0600 	mov.w	r6, #0
 802c5de:	bf08      	it	eq
 802c5e0:	1aed      	subeq	r5, r5, r3
 802c5e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802c5e6:	bf08      	it	eq
 802c5e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802c5ec:	4293      	cmp	r3, r2
 802c5ee:	bfc4      	itt	gt
 802c5f0:	1a9b      	subgt	r3, r3, r2
 802c5f2:	18ed      	addgt	r5, r5, r3
 802c5f4:	42b5      	cmp	r5, r6
 802c5f6:	d11a      	bne.n	802c62e <_printf_common+0xd2>
 802c5f8:	2000      	movs	r0, #0
 802c5fa:	e008      	b.n	802c60e <_printf_common+0xb2>
 802c5fc:	2301      	movs	r3, #1
 802c5fe:	4652      	mov	r2, sl
 802c600:	4641      	mov	r1, r8
 802c602:	4638      	mov	r0, r7
 802c604:	47c8      	blx	r9
 802c606:	3001      	adds	r0, #1
 802c608:	d103      	bne.n	802c612 <_printf_common+0xb6>
 802c60a:	f04f 30ff 	mov.w	r0, #4294967295
 802c60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c612:	3501      	adds	r5, #1
 802c614:	e7c1      	b.n	802c59a <_printf_common+0x3e>
 802c616:	18e1      	adds	r1, r4, r3
 802c618:	1c5a      	adds	r2, r3, #1
 802c61a:	2030      	movs	r0, #48	@ 0x30
 802c61c:	3302      	adds	r3, #2
 802c61e:	4422      	add	r2, r4
 802c620:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802c624:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802c628:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802c62c:	e7c2      	b.n	802c5b4 <_printf_common+0x58>
 802c62e:	2301      	movs	r3, #1
 802c630:	4622      	mov	r2, r4
 802c632:	4641      	mov	r1, r8
 802c634:	4638      	mov	r0, r7
 802c636:	47c8      	blx	r9
 802c638:	3001      	adds	r0, #1
 802c63a:	d0e6      	beq.n	802c60a <_printf_common+0xae>
 802c63c:	3601      	adds	r6, #1
 802c63e:	e7d9      	b.n	802c5f4 <_printf_common+0x98>

0802c640 <_printf_i>:
 802c640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802c644:	7e0f      	ldrb	r7, [r1, #24]
 802c646:	4691      	mov	r9, r2
 802c648:	4680      	mov	r8, r0
 802c64a:	460c      	mov	r4, r1
 802c64c:	2f78      	cmp	r7, #120	@ 0x78
 802c64e:	469a      	mov	sl, r3
 802c650:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802c652:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802c656:	d807      	bhi.n	802c668 <_printf_i+0x28>
 802c658:	2f62      	cmp	r7, #98	@ 0x62
 802c65a:	d80a      	bhi.n	802c672 <_printf_i+0x32>
 802c65c:	2f00      	cmp	r7, #0
 802c65e:	f000 80d1 	beq.w	802c804 <_printf_i+0x1c4>
 802c662:	2f58      	cmp	r7, #88	@ 0x58
 802c664:	f000 80b8 	beq.w	802c7d8 <_printf_i+0x198>
 802c668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802c66c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802c670:	e03a      	b.n	802c6e8 <_printf_i+0xa8>
 802c672:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802c676:	2b15      	cmp	r3, #21
 802c678:	d8f6      	bhi.n	802c668 <_printf_i+0x28>
 802c67a:	a101      	add	r1, pc, #4	@ (adr r1, 802c680 <_printf_i+0x40>)
 802c67c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802c680:	0802c6d9 	.word	0x0802c6d9
 802c684:	0802c6ed 	.word	0x0802c6ed
 802c688:	0802c669 	.word	0x0802c669
 802c68c:	0802c669 	.word	0x0802c669
 802c690:	0802c669 	.word	0x0802c669
 802c694:	0802c669 	.word	0x0802c669
 802c698:	0802c6ed 	.word	0x0802c6ed
 802c69c:	0802c669 	.word	0x0802c669
 802c6a0:	0802c669 	.word	0x0802c669
 802c6a4:	0802c669 	.word	0x0802c669
 802c6a8:	0802c669 	.word	0x0802c669
 802c6ac:	0802c7eb 	.word	0x0802c7eb
 802c6b0:	0802c717 	.word	0x0802c717
 802c6b4:	0802c7a5 	.word	0x0802c7a5
 802c6b8:	0802c669 	.word	0x0802c669
 802c6bc:	0802c669 	.word	0x0802c669
 802c6c0:	0802c80d 	.word	0x0802c80d
 802c6c4:	0802c669 	.word	0x0802c669
 802c6c8:	0802c717 	.word	0x0802c717
 802c6cc:	0802c669 	.word	0x0802c669
 802c6d0:	0802c669 	.word	0x0802c669
 802c6d4:	0802c7ad 	.word	0x0802c7ad
 802c6d8:	6833      	ldr	r3, [r6, #0]
 802c6da:	1d1a      	adds	r2, r3, #4
 802c6dc:	681b      	ldr	r3, [r3, #0]
 802c6de:	6032      	str	r2, [r6, #0]
 802c6e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802c6e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802c6e8:	2301      	movs	r3, #1
 802c6ea:	e09c      	b.n	802c826 <_printf_i+0x1e6>
 802c6ec:	6833      	ldr	r3, [r6, #0]
 802c6ee:	6820      	ldr	r0, [r4, #0]
 802c6f0:	1d19      	adds	r1, r3, #4
 802c6f2:	6031      	str	r1, [r6, #0]
 802c6f4:	0606      	lsls	r6, r0, #24
 802c6f6:	d501      	bpl.n	802c6fc <_printf_i+0xbc>
 802c6f8:	681d      	ldr	r5, [r3, #0]
 802c6fa:	e003      	b.n	802c704 <_printf_i+0xc4>
 802c6fc:	0645      	lsls	r5, r0, #25
 802c6fe:	d5fb      	bpl.n	802c6f8 <_printf_i+0xb8>
 802c700:	f9b3 5000 	ldrsh.w	r5, [r3]
 802c704:	2d00      	cmp	r5, #0
 802c706:	da03      	bge.n	802c710 <_printf_i+0xd0>
 802c708:	232d      	movs	r3, #45	@ 0x2d
 802c70a:	426d      	negs	r5, r5
 802c70c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802c710:	4858      	ldr	r0, [pc, #352]	@ (802c874 <_printf_i+0x234>)
 802c712:	230a      	movs	r3, #10
 802c714:	e011      	b.n	802c73a <_printf_i+0xfa>
 802c716:	6821      	ldr	r1, [r4, #0]
 802c718:	6833      	ldr	r3, [r6, #0]
 802c71a:	0608      	lsls	r0, r1, #24
 802c71c:	f853 5b04 	ldr.w	r5, [r3], #4
 802c720:	d402      	bmi.n	802c728 <_printf_i+0xe8>
 802c722:	0649      	lsls	r1, r1, #25
 802c724:	bf48      	it	mi
 802c726:	b2ad      	uxthmi	r5, r5
 802c728:	2f6f      	cmp	r7, #111	@ 0x6f
 802c72a:	6033      	str	r3, [r6, #0]
 802c72c:	4851      	ldr	r0, [pc, #324]	@ (802c874 <_printf_i+0x234>)
 802c72e:	bf14      	ite	ne
 802c730:	230a      	movne	r3, #10
 802c732:	2308      	moveq	r3, #8
 802c734:	2100      	movs	r1, #0
 802c736:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802c73a:	6866      	ldr	r6, [r4, #4]
 802c73c:	2e00      	cmp	r6, #0
 802c73e:	60a6      	str	r6, [r4, #8]
 802c740:	db05      	blt.n	802c74e <_printf_i+0x10e>
 802c742:	6821      	ldr	r1, [r4, #0]
 802c744:	432e      	orrs	r6, r5
 802c746:	f021 0104 	bic.w	r1, r1, #4
 802c74a:	6021      	str	r1, [r4, #0]
 802c74c:	d04b      	beq.n	802c7e6 <_printf_i+0x1a6>
 802c74e:	4616      	mov	r6, r2
 802c750:	fbb5 f1f3 	udiv	r1, r5, r3
 802c754:	fb03 5711 	mls	r7, r3, r1, r5
 802c758:	5dc7      	ldrb	r7, [r0, r7]
 802c75a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802c75e:	462f      	mov	r7, r5
 802c760:	460d      	mov	r5, r1
 802c762:	42bb      	cmp	r3, r7
 802c764:	d9f4      	bls.n	802c750 <_printf_i+0x110>
 802c766:	2b08      	cmp	r3, #8
 802c768:	d10b      	bne.n	802c782 <_printf_i+0x142>
 802c76a:	6823      	ldr	r3, [r4, #0]
 802c76c:	07df      	lsls	r7, r3, #31
 802c76e:	d508      	bpl.n	802c782 <_printf_i+0x142>
 802c770:	6923      	ldr	r3, [r4, #16]
 802c772:	6861      	ldr	r1, [r4, #4]
 802c774:	4299      	cmp	r1, r3
 802c776:	bfde      	ittt	le
 802c778:	2330      	movle	r3, #48	@ 0x30
 802c77a:	f806 3c01 	strble.w	r3, [r6, #-1]
 802c77e:	f106 36ff 	addle.w	r6, r6, #4294967295
 802c782:	1b92      	subs	r2, r2, r6
 802c784:	6122      	str	r2, [r4, #16]
 802c786:	464b      	mov	r3, r9
 802c788:	aa03      	add	r2, sp, #12
 802c78a:	4621      	mov	r1, r4
 802c78c:	4640      	mov	r0, r8
 802c78e:	f8cd a000 	str.w	sl, [sp]
 802c792:	f7ff fee3 	bl	802c55c <_printf_common>
 802c796:	3001      	adds	r0, #1
 802c798:	d14a      	bne.n	802c830 <_printf_i+0x1f0>
 802c79a:	f04f 30ff 	mov.w	r0, #4294967295
 802c79e:	b004      	add	sp, #16
 802c7a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c7a4:	6823      	ldr	r3, [r4, #0]
 802c7a6:	f043 0320 	orr.w	r3, r3, #32
 802c7aa:	6023      	str	r3, [r4, #0]
 802c7ac:	2778      	movs	r7, #120	@ 0x78
 802c7ae:	4832      	ldr	r0, [pc, #200]	@ (802c878 <_printf_i+0x238>)
 802c7b0:	6823      	ldr	r3, [r4, #0]
 802c7b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802c7b6:	061f      	lsls	r7, r3, #24
 802c7b8:	6831      	ldr	r1, [r6, #0]
 802c7ba:	f851 5b04 	ldr.w	r5, [r1], #4
 802c7be:	d402      	bmi.n	802c7c6 <_printf_i+0x186>
 802c7c0:	065f      	lsls	r7, r3, #25
 802c7c2:	bf48      	it	mi
 802c7c4:	b2ad      	uxthmi	r5, r5
 802c7c6:	6031      	str	r1, [r6, #0]
 802c7c8:	07d9      	lsls	r1, r3, #31
 802c7ca:	bf44      	itt	mi
 802c7cc:	f043 0320 	orrmi.w	r3, r3, #32
 802c7d0:	6023      	strmi	r3, [r4, #0]
 802c7d2:	b11d      	cbz	r5, 802c7dc <_printf_i+0x19c>
 802c7d4:	2310      	movs	r3, #16
 802c7d6:	e7ad      	b.n	802c734 <_printf_i+0xf4>
 802c7d8:	4826      	ldr	r0, [pc, #152]	@ (802c874 <_printf_i+0x234>)
 802c7da:	e7e9      	b.n	802c7b0 <_printf_i+0x170>
 802c7dc:	6823      	ldr	r3, [r4, #0]
 802c7de:	f023 0320 	bic.w	r3, r3, #32
 802c7e2:	6023      	str	r3, [r4, #0]
 802c7e4:	e7f6      	b.n	802c7d4 <_printf_i+0x194>
 802c7e6:	4616      	mov	r6, r2
 802c7e8:	e7bd      	b.n	802c766 <_printf_i+0x126>
 802c7ea:	6833      	ldr	r3, [r6, #0]
 802c7ec:	6825      	ldr	r5, [r4, #0]
 802c7ee:	1d18      	adds	r0, r3, #4
 802c7f0:	6961      	ldr	r1, [r4, #20]
 802c7f2:	6030      	str	r0, [r6, #0]
 802c7f4:	062e      	lsls	r6, r5, #24
 802c7f6:	681b      	ldr	r3, [r3, #0]
 802c7f8:	d501      	bpl.n	802c7fe <_printf_i+0x1be>
 802c7fa:	6019      	str	r1, [r3, #0]
 802c7fc:	e002      	b.n	802c804 <_printf_i+0x1c4>
 802c7fe:	0668      	lsls	r0, r5, #25
 802c800:	d5fb      	bpl.n	802c7fa <_printf_i+0x1ba>
 802c802:	8019      	strh	r1, [r3, #0]
 802c804:	2300      	movs	r3, #0
 802c806:	4616      	mov	r6, r2
 802c808:	6123      	str	r3, [r4, #16]
 802c80a:	e7bc      	b.n	802c786 <_printf_i+0x146>
 802c80c:	6833      	ldr	r3, [r6, #0]
 802c80e:	2100      	movs	r1, #0
 802c810:	1d1a      	adds	r2, r3, #4
 802c812:	6032      	str	r2, [r6, #0]
 802c814:	681e      	ldr	r6, [r3, #0]
 802c816:	6862      	ldr	r2, [r4, #4]
 802c818:	4630      	mov	r0, r6
 802c81a:	f000 f95f 	bl	802cadc <memchr>
 802c81e:	b108      	cbz	r0, 802c824 <_printf_i+0x1e4>
 802c820:	1b80      	subs	r0, r0, r6
 802c822:	6060      	str	r0, [r4, #4]
 802c824:	6863      	ldr	r3, [r4, #4]
 802c826:	6123      	str	r3, [r4, #16]
 802c828:	2300      	movs	r3, #0
 802c82a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802c82e:	e7aa      	b.n	802c786 <_printf_i+0x146>
 802c830:	6923      	ldr	r3, [r4, #16]
 802c832:	4632      	mov	r2, r6
 802c834:	4649      	mov	r1, r9
 802c836:	4640      	mov	r0, r8
 802c838:	47d0      	blx	sl
 802c83a:	3001      	adds	r0, #1
 802c83c:	d0ad      	beq.n	802c79a <_printf_i+0x15a>
 802c83e:	6823      	ldr	r3, [r4, #0]
 802c840:	079b      	lsls	r3, r3, #30
 802c842:	d413      	bmi.n	802c86c <_printf_i+0x22c>
 802c844:	68e0      	ldr	r0, [r4, #12]
 802c846:	9b03      	ldr	r3, [sp, #12]
 802c848:	4298      	cmp	r0, r3
 802c84a:	bfb8      	it	lt
 802c84c:	4618      	movlt	r0, r3
 802c84e:	e7a6      	b.n	802c79e <_printf_i+0x15e>
 802c850:	2301      	movs	r3, #1
 802c852:	4632      	mov	r2, r6
 802c854:	4649      	mov	r1, r9
 802c856:	4640      	mov	r0, r8
 802c858:	47d0      	blx	sl
 802c85a:	3001      	adds	r0, #1
 802c85c:	d09d      	beq.n	802c79a <_printf_i+0x15a>
 802c85e:	3501      	adds	r5, #1
 802c860:	68e3      	ldr	r3, [r4, #12]
 802c862:	9903      	ldr	r1, [sp, #12]
 802c864:	1a5b      	subs	r3, r3, r1
 802c866:	42ab      	cmp	r3, r5
 802c868:	dcf2      	bgt.n	802c850 <_printf_i+0x210>
 802c86a:	e7eb      	b.n	802c844 <_printf_i+0x204>
 802c86c:	2500      	movs	r5, #0
 802c86e:	f104 0619 	add.w	r6, r4, #25
 802c872:	e7f5      	b.n	802c860 <_printf_i+0x220>
 802c874:	0802efb5 	.word	0x0802efb5
 802c878:	0802efc6 	.word	0x0802efc6

0802c87c <__sflush_r>:
 802c87c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802c880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c884:	0716      	lsls	r6, r2, #28
 802c886:	4605      	mov	r5, r0
 802c888:	460c      	mov	r4, r1
 802c88a:	d454      	bmi.n	802c936 <__sflush_r+0xba>
 802c88c:	684b      	ldr	r3, [r1, #4]
 802c88e:	2b00      	cmp	r3, #0
 802c890:	dc02      	bgt.n	802c898 <__sflush_r+0x1c>
 802c892:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802c894:	2b00      	cmp	r3, #0
 802c896:	dd48      	ble.n	802c92a <__sflush_r+0xae>
 802c898:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802c89a:	2e00      	cmp	r6, #0
 802c89c:	d045      	beq.n	802c92a <__sflush_r+0xae>
 802c89e:	2300      	movs	r3, #0
 802c8a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802c8a4:	682f      	ldr	r7, [r5, #0]
 802c8a6:	6a21      	ldr	r1, [r4, #32]
 802c8a8:	602b      	str	r3, [r5, #0]
 802c8aa:	d030      	beq.n	802c90e <__sflush_r+0x92>
 802c8ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802c8ae:	89a3      	ldrh	r3, [r4, #12]
 802c8b0:	0759      	lsls	r1, r3, #29
 802c8b2:	d505      	bpl.n	802c8c0 <__sflush_r+0x44>
 802c8b4:	6863      	ldr	r3, [r4, #4]
 802c8b6:	1ad2      	subs	r2, r2, r3
 802c8b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802c8ba:	b10b      	cbz	r3, 802c8c0 <__sflush_r+0x44>
 802c8bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802c8be:	1ad2      	subs	r2, r2, r3
 802c8c0:	2300      	movs	r3, #0
 802c8c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802c8c4:	6a21      	ldr	r1, [r4, #32]
 802c8c6:	4628      	mov	r0, r5
 802c8c8:	47b0      	blx	r6
 802c8ca:	1c43      	adds	r3, r0, #1
 802c8cc:	89a3      	ldrh	r3, [r4, #12]
 802c8ce:	d106      	bne.n	802c8de <__sflush_r+0x62>
 802c8d0:	6829      	ldr	r1, [r5, #0]
 802c8d2:	291d      	cmp	r1, #29
 802c8d4:	d82b      	bhi.n	802c92e <__sflush_r+0xb2>
 802c8d6:	4a2a      	ldr	r2, [pc, #168]	@ (802c980 <__sflush_r+0x104>)
 802c8d8:	40ca      	lsrs	r2, r1
 802c8da:	07d6      	lsls	r6, r2, #31
 802c8dc:	d527      	bpl.n	802c92e <__sflush_r+0xb2>
 802c8de:	2200      	movs	r2, #0
 802c8e0:	04d9      	lsls	r1, r3, #19
 802c8e2:	6062      	str	r2, [r4, #4]
 802c8e4:	6922      	ldr	r2, [r4, #16]
 802c8e6:	6022      	str	r2, [r4, #0]
 802c8e8:	d504      	bpl.n	802c8f4 <__sflush_r+0x78>
 802c8ea:	1c42      	adds	r2, r0, #1
 802c8ec:	d101      	bne.n	802c8f2 <__sflush_r+0x76>
 802c8ee:	682b      	ldr	r3, [r5, #0]
 802c8f0:	b903      	cbnz	r3, 802c8f4 <__sflush_r+0x78>
 802c8f2:	6560      	str	r0, [r4, #84]	@ 0x54
 802c8f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802c8f6:	602f      	str	r7, [r5, #0]
 802c8f8:	b1b9      	cbz	r1, 802c92a <__sflush_r+0xae>
 802c8fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802c8fe:	4299      	cmp	r1, r3
 802c900:	d002      	beq.n	802c908 <__sflush_r+0x8c>
 802c902:	4628      	mov	r0, r5
 802c904:	f7ff fc9e 	bl	802c244 <_free_r>
 802c908:	2300      	movs	r3, #0
 802c90a:	6363      	str	r3, [r4, #52]	@ 0x34
 802c90c:	e00d      	b.n	802c92a <__sflush_r+0xae>
 802c90e:	2301      	movs	r3, #1
 802c910:	4628      	mov	r0, r5
 802c912:	47b0      	blx	r6
 802c914:	4602      	mov	r2, r0
 802c916:	1c50      	adds	r0, r2, #1
 802c918:	d1c9      	bne.n	802c8ae <__sflush_r+0x32>
 802c91a:	682b      	ldr	r3, [r5, #0]
 802c91c:	2b00      	cmp	r3, #0
 802c91e:	d0c6      	beq.n	802c8ae <__sflush_r+0x32>
 802c920:	2b1d      	cmp	r3, #29
 802c922:	d001      	beq.n	802c928 <__sflush_r+0xac>
 802c924:	2b16      	cmp	r3, #22
 802c926:	d11d      	bne.n	802c964 <__sflush_r+0xe8>
 802c928:	602f      	str	r7, [r5, #0]
 802c92a:	2000      	movs	r0, #0
 802c92c:	e021      	b.n	802c972 <__sflush_r+0xf6>
 802c92e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c932:	b21b      	sxth	r3, r3
 802c934:	e01a      	b.n	802c96c <__sflush_r+0xf0>
 802c936:	690f      	ldr	r7, [r1, #16]
 802c938:	2f00      	cmp	r7, #0
 802c93a:	d0f6      	beq.n	802c92a <__sflush_r+0xae>
 802c93c:	0793      	lsls	r3, r2, #30
 802c93e:	680e      	ldr	r6, [r1, #0]
 802c940:	600f      	str	r7, [r1, #0]
 802c942:	bf0c      	ite	eq
 802c944:	694b      	ldreq	r3, [r1, #20]
 802c946:	2300      	movne	r3, #0
 802c948:	eba6 0807 	sub.w	r8, r6, r7
 802c94c:	608b      	str	r3, [r1, #8]
 802c94e:	f1b8 0f00 	cmp.w	r8, #0
 802c952:	ddea      	ble.n	802c92a <__sflush_r+0xae>
 802c954:	4643      	mov	r3, r8
 802c956:	463a      	mov	r2, r7
 802c958:	6a21      	ldr	r1, [r4, #32]
 802c95a:	4628      	mov	r0, r5
 802c95c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802c95e:	47b0      	blx	r6
 802c960:	2800      	cmp	r0, #0
 802c962:	dc08      	bgt.n	802c976 <__sflush_r+0xfa>
 802c964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c96c:	f04f 30ff 	mov.w	r0, #4294967295
 802c970:	81a3      	strh	r3, [r4, #12]
 802c972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c976:	4407      	add	r7, r0
 802c978:	eba8 0800 	sub.w	r8, r8, r0
 802c97c:	e7e7      	b.n	802c94e <__sflush_r+0xd2>
 802c97e:	bf00      	nop
 802c980:	20400001 	.word	0x20400001

0802c984 <_fflush_r>:
 802c984:	b538      	push	{r3, r4, r5, lr}
 802c986:	690b      	ldr	r3, [r1, #16]
 802c988:	4605      	mov	r5, r0
 802c98a:	460c      	mov	r4, r1
 802c98c:	b913      	cbnz	r3, 802c994 <_fflush_r+0x10>
 802c98e:	2500      	movs	r5, #0
 802c990:	4628      	mov	r0, r5
 802c992:	bd38      	pop	{r3, r4, r5, pc}
 802c994:	b118      	cbz	r0, 802c99e <_fflush_r+0x1a>
 802c996:	6a03      	ldr	r3, [r0, #32]
 802c998:	b90b      	cbnz	r3, 802c99e <_fflush_r+0x1a>
 802c99a:	f7ff f989 	bl	802bcb0 <__sinit>
 802c99e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c9a2:	2b00      	cmp	r3, #0
 802c9a4:	d0f3      	beq.n	802c98e <_fflush_r+0xa>
 802c9a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802c9a8:	07d0      	lsls	r0, r2, #31
 802c9aa:	d404      	bmi.n	802c9b6 <_fflush_r+0x32>
 802c9ac:	0599      	lsls	r1, r3, #22
 802c9ae:	d402      	bmi.n	802c9b6 <_fflush_r+0x32>
 802c9b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c9b2:	f7ff fbda 	bl	802c16a <__retarget_lock_acquire_recursive>
 802c9b6:	4628      	mov	r0, r5
 802c9b8:	4621      	mov	r1, r4
 802c9ba:	f7ff ff5f 	bl	802c87c <__sflush_r>
 802c9be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c9c0:	4605      	mov	r5, r0
 802c9c2:	07da      	lsls	r2, r3, #31
 802c9c4:	d4e4      	bmi.n	802c990 <_fflush_r+0xc>
 802c9c6:	89a3      	ldrh	r3, [r4, #12]
 802c9c8:	059b      	lsls	r3, r3, #22
 802c9ca:	d4e1      	bmi.n	802c990 <_fflush_r+0xc>
 802c9cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c9ce:	f7ff fbcd 	bl	802c16c <__retarget_lock_release_recursive>
 802c9d2:	e7dd      	b.n	802c990 <_fflush_r+0xc>

0802c9d4 <__swhatbuf_r>:
 802c9d4:	b570      	push	{r4, r5, r6, lr}
 802c9d6:	460c      	mov	r4, r1
 802c9d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c9dc:	b096      	sub	sp, #88	@ 0x58
 802c9de:	4615      	mov	r5, r2
 802c9e0:	2900      	cmp	r1, #0
 802c9e2:	461e      	mov	r6, r3
 802c9e4:	da0c      	bge.n	802ca00 <__swhatbuf_r+0x2c>
 802c9e6:	89a3      	ldrh	r3, [r4, #12]
 802c9e8:	2100      	movs	r1, #0
 802c9ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802c9ee:	bf14      	ite	ne
 802c9f0:	2340      	movne	r3, #64	@ 0x40
 802c9f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802c9f6:	2000      	movs	r0, #0
 802c9f8:	6031      	str	r1, [r6, #0]
 802c9fa:	602b      	str	r3, [r5, #0]
 802c9fc:	b016      	add	sp, #88	@ 0x58
 802c9fe:	bd70      	pop	{r4, r5, r6, pc}
 802ca00:	466a      	mov	r2, sp
 802ca02:	f000 f849 	bl	802ca98 <_fstat_r>
 802ca06:	2800      	cmp	r0, #0
 802ca08:	dbed      	blt.n	802c9e6 <__swhatbuf_r+0x12>
 802ca0a:	9901      	ldr	r1, [sp, #4]
 802ca0c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802ca10:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802ca14:	4259      	negs	r1, r3
 802ca16:	4159      	adcs	r1, r3
 802ca18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802ca1c:	e7eb      	b.n	802c9f6 <__swhatbuf_r+0x22>

0802ca1e <__smakebuf_r>:
 802ca1e:	898b      	ldrh	r3, [r1, #12]
 802ca20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802ca22:	079d      	lsls	r5, r3, #30
 802ca24:	4606      	mov	r6, r0
 802ca26:	460c      	mov	r4, r1
 802ca28:	d507      	bpl.n	802ca3a <__smakebuf_r+0x1c>
 802ca2a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802ca2e:	6023      	str	r3, [r4, #0]
 802ca30:	6123      	str	r3, [r4, #16]
 802ca32:	2301      	movs	r3, #1
 802ca34:	6163      	str	r3, [r4, #20]
 802ca36:	b003      	add	sp, #12
 802ca38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ca3a:	ab01      	add	r3, sp, #4
 802ca3c:	466a      	mov	r2, sp
 802ca3e:	f7ff ffc9 	bl	802c9d4 <__swhatbuf_r>
 802ca42:	9f00      	ldr	r7, [sp, #0]
 802ca44:	4605      	mov	r5, r0
 802ca46:	4630      	mov	r0, r6
 802ca48:	4639      	mov	r1, r7
 802ca4a:	f7ff f80b 	bl	802ba64 <_malloc_r>
 802ca4e:	b948      	cbnz	r0, 802ca64 <__smakebuf_r+0x46>
 802ca50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ca54:	059a      	lsls	r2, r3, #22
 802ca56:	d4ee      	bmi.n	802ca36 <__smakebuf_r+0x18>
 802ca58:	f023 0303 	bic.w	r3, r3, #3
 802ca5c:	f043 0302 	orr.w	r3, r3, #2
 802ca60:	81a3      	strh	r3, [r4, #12]
 802ca62:	e7e2      	b.n	802ca2a <__smakebuf_r+0xc>
 802ca64:	89a3      	ldrh	r3, [r4, #12]
 802ca66:	6020      	str	r0, [r4, #0]
 802ca68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802ca6c:	81a3      	strh	r3, [r4, #12]
 802ca6e:	9b01      	ldr	r3, [sp, #4]
 802ca70:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802ca74:	b15b      	cbz	r3, 802ca8e <__smakebuf_r+0x70>
 802ca76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ca7a:	4630      	mov	r0, r6
 802ca7c:	f000 f81e 	bl	802cabc <_isatty_r>
 802ca80:	b128      	cbz	r0, 802ca8e <__smakebuf_r+0x70>
 802ca82:	89a3      	ldrh	r3, [r4, #12]
 802ca84:	f023 0303 	bic.w	r3, r3, #3
 802ca88:	f043 0301 	orr.w	r3, r3, #1
 802ca8c:	81a3      	strh	r3, [r4, #12]
 802ca8e:	89a3      	ldrh	r3, [r4, #12]
 802ca90:	431d      	orrs	r5, r3
 802ca92:	81a5      	strh	r5, [r4, #12]
 802ca94:	e7cf      	b.n	802ca36 <__smakebuf_r+0x18>
	...

0802ca98 <_fstat_r>:
 802ca98:	b538      	push	{r3, r4, r5, lr}
 802ca9a:	2300      	movs	r3, #0
 802ca9c:	4d06      	ldr	r5, [pc, #24]	@ (802cab8 <_fstat_r+0x20>)
 802ca9e:	4604      	mov	r4, r0
 802caa0:	4608      	mov	r0, r1
 802caa2:	4611      	mov	r1, r2
 802caa4:	602b      	str	r3, [r5, #0]
 802caa6:	f7d5 f803 	bl	8001ab0 <_fstat>
 802caaa:	1c43      	adds	r3, r0, #1
 802caac:	d102      	bne.n	802cab4 <_fstat_r+0x1c>
 802caae:	682b      	ldr	r3, [r5, #0]
 802cab0:	b103      	cbz	r3, 802cab4 <_fstat_r+0x1c>
 802cab2:	6023      	str	r3, [r4, #0]
 802cab4:	bd38      	pop	{r3, r4, r5, pc}
 802cab6:	bf00      	nop
 802cab8:	2005c4c8 	.word	0x2005c4c8

0802cabc <_isatty_r>:
 802cabc:	b538      	push	{r3, r4, r5, lr}
 802cabe:	2300      	movs	r3, #0
 802cac0:	4d05      	ldr	r5, [pc, #20]	@ (802cad8 <_isatty_r+0x1c>)
 802cac2:	4604      	mov	r4, r0
 802cac4:	4608      	mov	r0, r1
 802cac6:	602b      	str	r3, [r5, #0]
 802cac8:	f7d5 f802 	bl	8001ad0 <_isatty>
 802cacc:	1c43      	adds	r3, r0, #1
 802cace:	d102      	bne.n	802cad6 <_isatty_r+0x1a>
 802cad0:	682b      	ldr	r3, [r5, #0]
 802cad2:	b103      	cbz	r3, 802cad6 <_isatty_r+0x1a>
 802cad4:	6023      	str	r3, [r4, #0]
 802cad6:	bd38      	pop	{r3, r4, r5, pc}
 802cad8:	2005c4c8 	.word	0x2005c4c8

0802cadc <memchr>:
 802cadc:	b2c9      	uxtb	r1, r1
 802cade:	4603      	mov	r3, r0
 802cae0:	4402      	add	r2, r0
 802cae2:	b510      	push	{r4, lr}
 802cae4:	4293      	cmp	r3, r2
 802cae6:	4618      	mov	r0, r3
 802cae8:	d101      	bne.n	802caee <memchr+0x12>
 802caea:	2000      	movs	r0, #0
 802caec:	e003      	b.n	802caf6 <memchr+0x1a>
 802caee:	7804      	ldrb	r4, [r0, #0]
 802caf0:	3301      	adds	r3, #1
 802caf2:	428c      	cmp	r4, r1
 802caf4:	d1f6      	bne.n	802cae4 <memchr+0x8>
 802caf6:	bd10      	pop	{r4, pc}

0802caf8 <_init>:
 802caf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cafa:	bf00      	nop
 802cafc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cafe:	bc08      	pop	{r3}
 802cb00:	469e      	mov	lr, r3
 802cb02:	4770      	bx	lr

0802cb04 <_fini>:
 802cb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cb06:	bf00      	nop
 802cb08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cb0a:	bc08      	pop	{r3}
 802cb0c:	469e      	mov	lr, r3
 802cb0e:	4770      	bx	lr
